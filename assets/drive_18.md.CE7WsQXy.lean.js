import{_ as c,o as n,c as r,a as t,m as h,t as d,C as g,M as _,U as b,f as u,F as y,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},P={class:"review-title"},A={class:"review-content"};function R(i,e,l,m,s,a){return n(),r("div",k,[t("div",T,[t("div",P,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",A,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const I=c(q,[["render",R],["__scopeId","data-v-91ed2134"]]),C=JSON.parse(`[{"question":"Write me a script in Python to create an animated double pendulum, where the lengths of the two pendulum arms can be dynamically adjusted by the user through an interactive widget. The program should display the angles of each arm relative to the vertical axis, and include a feature that allows the user to save the animation as a video file with a custom filename.","solution":"import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation from scipy.integrate import odeint from ipywidgets import interact, widgets from IPython.display import display class DoublePendulum: def __init__(self, length1=1.0, length2=1.0, mass1=1.0, mass2=1.0): self.length1 = length1 self.length2 = length2 self.mass1 = mass1 self.mass2 = mass2 def equations(self, y, t): theta1, z1, theta2, z2 = y c, s = np.cos(theta1 - theta2), np.sin(theta1 - theta2) theta1dot = z1 theta2dot = z2 z1dot = (self.mass2 * self.length2 * z2**2 * s * c + self.mass2 * 9.81 * np.sin(theta2) * c + self.mass2 * self.length2 * z2**2 * s - (self.mass1 + self.mass2) * 9.81 * np.sin(theta1)) / (self.length1 * (self.mass1 + self.mass2 * s**2)) z2dot = ((self.mass1 + self.mass2) * (self.length1 * z1**2 * s - 9.81 * np.sin(theta2) + 9.81 * np.sin(theta1) * c) + self.mass2 * self.length2 * z2**2 * s * c) / (self.length2 * (self.mass1 + self.mass2 * s**2)) return theta1dot, z1dot, theta2dot, z2dot def animate_pendulum(length1, length2): pendulum = DoublePendulum(length1, length2) y0 = [np.pi / 2, 0, np.pi / 2, 0] t = np.linspace(0, 10, 250) solution = odeint(pendulum.equations, y0, t) x1 = pendulum.length1 * np.sin(solution[:, 0]) y1 = -pendulum.length1 * np.cos(solution[:, 0]) x2 = x1 + pendulum.length2 * np.sin(solution[:, 2]) y2 = y1 - pendulum.length2 * np.cos(solution[:, 2]) fig = plt.figure() ax = fig.add_subplot(111, autoscale_on=False, xlim=(-2, 2), ylim=(-2, 2)) ax.set_aspect('equal') ax.grid() line, = ax.plot([], [], 'o-', lw=2) time_template = 'time = %.1fs' time_text = ax.text(0.05, 0.9, '', transform=ax.transAxes) def init(): line.set_data([], []) time_text.set_text('') return line, time_text def update(i): x = [0, x1[i], x2[i]] y = [0, y1[i], y2[i]] line.set_data(x, y) time_text.set_text(time_template % t[i]) return line, time_text ani = animation.FuncAnimation(fig, update, frames=np.arange(len(t)), init_func=init, blit=True) def save_animation(file_name): Writer = animation.writers['ffmpeg'] writer = Writer(fps=15, metadata=dict(artist='Me'), bitrate=1800) ani.save(file_name, writer=writer) plt.show() display(widgets.Text(value='animation.mp4', description='Filename:'), widgets.Button(description=\\"Save as\\")) def on_button_clicked(b): file_name = widget_text.value save_animation(file_name) widget_text = widgets.Text(value='animation.mp4', description='Filename:') button = widgets.Button(description=\\"Save as\\") button.on_click(on_button_clicked) display(widget_text, button) interact(animate_pendulum, length1=widgets.FloatSlider(min=0.1, max=2.0, step=0.1, value=1), length2=widgets.FloatSlider(min=0.1, max=2.0, step=0.1, value=1));"},{"question":"Create a Python function that truncates a given string to display only the first 4 unique characters in alphabetical order and outputs the unique set of characters. In case the string has less than four unique characters, display the unique characters only.","solution":"def truncate_unique_chars(s): Truncates the input string to display only the first 4 unique characters in alphabetical order. If the string has less than four unique characters, display the unique characters only. # Create a set to capture unique characters and sort them alphabetically unique_chars = sorted(set(s)) # Get the first 4 unique characters truncated_chars = unique_chars[:4] # Join the list of characters into a string and return return ''.join(truncated_chars)"},{"question":"Write a code to generate the Fibonacci series for the first n numbers, and then modify it to print only the even numbers in the generated series.","solution":"def fibonacci(n): Generates the first n numbers of the Fibonacci series. fib_series = [0, 1] if n <= 0: return [] elif n == 1: return [0] else: while len(fib_series) < n: next_value = fib_series[-1] + fib_series[-2] fib_series.append(next_value) return fib_series[:n] def even_fibonacci(n): Generates the first n numbers of the Fibonacci series and returns only the even numbers. fib_series = fibonacci(n) return [num for num in fib_series if num % 2 == 0]"},{"question":"Given an array [3, 5, 1, 9, 7, 2], write a Python function that sorts the array and reverse it.","solution":"def sort_and_reverse(arr): Sorts the array in ascending order and then reverses it. arr.sort() arr.reverse() return arr"},{"question":"Write a function to delete a node from a doubly linked list given the pointer to the node to be deleted. Consider the case where the node to be deleted is the first or last node in the list. Additionally, the function should also handle the case where the node to be deleted is in the middle of the list. The function should have a time complexity of O(1).","solution":"class ListNode: def __init__(self, value=0, prev=None, next=None): self.value = value self.prev = prev self.next = next def delete_node(node): Deletes a node from a doubly linked list. if not node: return # if the node to be deleted is not the first node if node.prev: node.prev.next = node.next # otherwise, update the head (though in a practical program, we'd need to handle the head reference in the list container) # if the node to be deleted is not the last node if node.next: node.next.prev = node.prev # otherwise, update the tail (though in a practical program, we'd need to handle the tail reference in the list container) node.prev = None node.next = None"},{"question":"I am trying to create a Telegram bot using Python, and I want to calculate the area of a triangle based on the length of its three sides. How can I modify the provided code to calculate the triangle area using Heron's formula, given the lengths of its three sides as inputs?","solution":"import math def calculate_triangle_area(a, b, c): Calculates the area of a triangle using Heron's formula. Parameters: a (float): Length of the first side. b (float): Length of the second side. c (float): Length of the third side. Returns: float: Area of the triangle. # Calculate the semi-perimeter s = (a + b + c) / 2.0 # Use Heron's formula to calculate the area area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Given an array A with n elements, where n is a positive integer and A is non-empty, perform a function to reverse the order of the array such that the last element becomes the first element and vice versa. The function should have a time complexity of O(n) and use only a constant amount of extra space. You are not allowed to use any built-in functions or data structures.","solution":"def reverse_array(A): Reverses the order of the elements in the array A in place. left, right = 0, len(A) - 1 while left < right: A[left], A[right] = A[right], A[left] left += 1 right -= 1 return A"},{"question":"Generate a program to simulate flipping a biased coin, where the probability of landing on heads is 70% and tails is 30%. The program should keep track of the number of consecutive heads and tails flipped, and display the maximum streak of heads and tails after a specified number of flips. Additionally, the program should also keep track of the total number of flips required to achieve the longest streak. The program should have a time complexity of O(n), where n is the number of flips performed.","solution":"import random def biased_coin_flip(): Simulates a biased coin flip. Returns 'H' for heads with 70% probability, and 'T' for tails with 30% probability. return 'H' if random.random() < 0.7 else 'T' def simulate_flips(num_flips): Simulates a specified number of biased coin flips and tracks the maximum streaks of heads and tails, as well as the total number of flips required to achieve the longest streak. Args: num_flips (int): The number of coin flips to simulate. Returns: dict: A dictionary containing the maximum streaks of heads and tails, and the total number of flips required to achieve these streaks. max_heads_streak = 0 max_tails_streak = 0 current_heads_streak = 0 current_tails_streak = 0 total_flips_for_max_heads = 0 total_flips_for_max_tails = 0 total_flips = 0 for _ in range(num_flips): flip = biased_coin_flip() total_flips += 1 if flip == 'H': current_heads_streak += 1 current_tails_streak = 0 if current_heads_streak > max_heads_streak: max_heads_streak = current_heads_streak total_flips_for_max_heads = total_flips else: current_tails_streak += 1 current_heads_streak = 0 if current_tails_streak > max_tails_streak: max_tails_streak = current_tails_streak total_flips_for_max_tails = total_flips return { \\"max_heads_streak\\": max_heads_streak, \\"max_tails_streak\\": max_tails_streak, \\"total_flips_for_max_heads\\": total_flips_for_max_heads, \\"total_flips_for_max_tails\\": total_flips_for_max_tails, \\"total_flips\\": total_flips }"},{"question":"Generate N random string of length L, consisting of lowercase English letters.","solution":"import random import string def generate_random_strings(num, length): Generates N random strings of length L, consisting of lowercase English letters. Parameters: num (int): Number of strings to generate. length (int): Length of each string. Returns: list: A list containing N random strings. result = [] for _ in range(num): random_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(length)) result.append(random_string) return result"},{"question":"Write a code for comparing two strings and returning the number of differences between them. However, you are not allowed to use any built-in string comparison functions or methods, and you can only use a single loop. The time complexity of your solution should be O(n), where n is the length of the longer string.","solution":"def compare_strings(s1, s2): Compares two strings and returns the number of differences between them. :param s1: First string :param s2: Second string :return: Number of differences between the two strings max_len = max(len(s1), len(s2)) count = 0 for i in range(max_len): if (i >= len(s1) or i >= len(s2)) or s1[i] != s2[i]: count += 1 return count"},{"question":"Develop a Python function that swaps the initial and terminal elements in an array. Simultaneously, the function should also swap the second element with the second last element, the third element with the third last element, and so forth. The function should be able to handle arrays of any type and size, including empty arrays. Additionally, the function should be efficient and avoid unnecessary memory usage.","solution":"def swap_elements(arr): Swaps the initial and terminal elements in an array, the second element with the second last element, the third element with the third last element, and so forth. :param arr: list of elements to swap :return: list with swapped elements n = len(arr) for i in range(n // 2): arr[i], arr[n - 1 - i] = arr[n - 1 - i], arr[i] return arr"},{"question":"Given a list of integers, can you write a Python function to convert the list to a dictionary where the integers become keys and their corresponding values are the square root of integers? Also, before calculating square root, ensure that all the numbers in the list are positive. If not, remove the negative numbers. address error handling as well for potential exceptions.","solution":"import math def list_to_sqrt_dict(int_list): Converts a list of integers into a dictionary where the integers become keys and their corresponding values are the square root of the integers. Ensures all numbers are positive by removing negative numbers. Args: int_list (list): List of integers. Returns: dict: Dictionary with integers as keys and their square roots as values. if not isinstance(int_list, list): raise ValueError(\\"Input should be a list of integers\\") sqrt_dict = {} for num in int_list: if not isinstance(num, int): raise ValueError(\\"List elements should be integers\\") if num >= 0: sqrt_dict[num] = math.sqrt(num) return sqrt_dict"},{"question":"Write a python function that compares two lists to check if they have the same elements regardless of order. The function should return True if both lists have identical elements and False otherwise. Additionally, your function should handle cases with duplicate elements correctly.","solution":"def compare_lists(list1, list2): Compares two lists to check if they have the same elements regardless of order. The function considers the frequency of elements as well. Args: list1 (list): First list to compare. list2 (list): Second list to compare. Returns: bool: True if both lists have the same elements with the same frequencies, False otherwise. # Count elements in both lists and compare the counts. return sorted(list1) == sorted(list2)"},{"question":"Write a Python program that implements a cigma function. The sigma function, also known as the divisor function, is a mathematical function that calculates the sum of the positive divisors of a given integer, including the number itself. The program should accept user input for the integer and then output the result of the sigma function.","solution":"def sigma(n): Returns the sum of the positive divisors of a given integer n. if n <= 0: raise ValueError(\\"n must be a positive integer\\") divisors_sum = 0 for i in range(1, n + 1): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Write a Python program to identify all prime numbers within a given range. The program should accept two integers as input, representing the lower and upper bounds of the range, and output a list of all prime numbers within that range. Ensure that the program handles invalid input gracefully.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_in_range(lower, upper): Returns a list of prime numbers within the given range [lower, upper]. if not (isinstance(lower, int) and isinstance(upper, int)): raise ValueError(\\"Both lower and upper bounds should be integers.\\") if lower > upper: raise ValueError(\\"Lower bound should be less than or equal to upper bound.\\") primes = [] for num in range(lower, upper + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Please write a Python function that takes a list of numbers as an input and returns the sum of all the numbers that are a multiple of 3 or 5, but not both. The function should also print out the list of numbers that meet the criteria. Please make sure the function uses list comprehension and has a time complexity of O(n). Additionally, the function should only use a single loop and not use any built-in functions such as filter() or map().","solution":"def sum_multiples_exclusive(nums): Returns the sum of all numbers in the list that are multiples of 3 or 5, but not both. Also prints the list of numbers that meet the criteria. :param nums: List of integers :return: Sum of integers that are multiples of 3 or 5, but not both result_list = [num for num in nums if (num % 3 == 0) ^ (num % 5 == 0)] print(result_list) return sum(result_list)"},{"question":"Write a Python code to create a list with the number of elements given by the user, and initialize each element to the sum of the previous two Fibonacci numbers. However, the code should not use any loops or recursion.","solution":"def fibonacci_list(n): Generates a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_list = [0, 1] # Using list comprehension to compute the rest of the list [fib_list.append(fib_list[-1] + fib_list[-2]) for _ in range(2, n)] return fib_list"},{"question":"Write a Python function that takes a positive integer as an argument and returns the square of that number. Additionally, the function should check if the input is a prime number and if so, return a message stating that the number is prime along with its square. If the input is not a prime number, the function should return the square of the number. Add a check function with provided data points to verify the correctness of your solution. Remember to implement the prime number check in an efficient manner for large integers.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def square_and_check_prime(n): Returns the square of the number n. If n is a prime number, returns a message stating that n is prime along with its square. square = n ** 2 if is_prime(n): return f\\"{n} is a prime number. Its square is {square}.\\" else: return square"},{"question":"Write a python function to find smallest and their indexes, second smallest and their indexes from a given list of integers. Additionally, handle possible errors or exceptions and validate the input to ensure it is a list of integers only.","solution":"def find_smallest_and_second_smallest(nums): Finds the smallest and second smallest integers and their indexes in a list. Parameters: nums (list): A list of integers Returns: dict: A dictionary with the smallest and second smallest numbers and their indexes. if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): raise ValueError(\\"Input should be a list of integers.\\") if len(nums) < 2: raise ValueError(\\"The list should contain at least two integers.\\") # Initialize to maximum values and invalid indices smallest = float('inf') second_smallest = float('inf') smallest_idx = -1 second_smallest_idx = -1 for idx, value in enumerate(nums): if value < smallest: second_smallest = smallest second_smallest_idx = smallest_idx smallest = value smallest_idx = idx elif value < second_smallest: second_smallest = value second_smallest_idx = idx return { \\"smallest\\": smallest, \\"smallest_index\\": smallest_idx, \\"second_smallest\\": second_smallest, \\"second_smallest_index\\": second_smallest_idx }"},{"question":"Develop a Python function which calculates the factorial of any provided integer. This compute-intensive task requires that, for instance, an input of 5 should yield a result of 120, achieved through a consecutive multiplication process of all positive integers up to and including the number itself.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is 0, the function returns 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Develop a function that goes through a given dictionary and checks if all keys are either all in lower case or all in upper case. The function should return True only if the dictionary is non-empty, every key is a string and all string keys follow the same case format. Return False for an empty dictionary or if the keys are a mix of case formats or of a different type.","solution":"def check_key_case(dictionary): Checks if all keys in the dictionary are either all in lower case or all in upper case. Parameters: dictionary (dict): The dictionary to check. Returns: bool: True if non-empty and all keys are in the same case format and are strings, False otherwise. if not dictionary: return False keys = dictionary.keys() if not all(isinstance(key, str) for key in keys): return False all_lower = all(key.islower() for key in keys) all_upper = all(key.isupper() for key in keys) return all_lower or all_upper"},{"question":"Write a code that checks if a given string is a palindrome or not using stack data structure. Consider that the code should take a string as an input, convert it to lowercase and remove all the non-alphanumeric characters (like spaces, punctuation etc.). The check needs to be case insensitive.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome using a stack data structure. The function ignores non-alphanumeric characters and is case insensitive. # Function to filter and prepare the string def filter_string(s): return ''.join(char.lower() for char in s if char.isalnum()) # Prepare the cleaned string cleaned_s = filter_string(s) # Use a stack to help determine if the string is a palindrome stack = list(cleaned_s) # Compare characters to check if palindrome for char in cleaned_s: if char != stack.pop(): return False return True"},{"question":"Write a Python code to calculate the minimum value in a 2D array. Additionally, your solution should also find the position(s) of this minimum value in the 2D array. Your output should be a dictionary with 'minValue', and 'positions' as keys. The 'positions' value should be a list of tuples with each tuple representing a position in the 2D array (row, column).","solution":"def find_min_2d_array(arr): Finds the minimum value in a 2D array and its positions. Parameters: arr (list of list of int/float): The 2D array Returns: dict: A dictionary with 'minValue' and 'positions' keys if not arr or not arr[0]: return {\\"minValue\\": None, \\"positions\\": []} min_value = float('inf') positions = [] for i in range(len(arr)): for j in range(len(arr[i])): if arr[i][j] < min_value: min_value = arr[i][j] positions = [(i, j)] elif arr[i][j] == min_value: positions.append((i, j)) return {\\"minValue\\": min_value, \\"positions\\": positions}"},{"question":"Write a recursive function in Python that calculates the Fibonacci sequence up to a given number, n.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Build a Python program that converts a given number of inches to centimeters. The program should include a function named \\"convert_inches_to_cm\\" that takes an integer or float representing the number of inches and returns the equivalent measurement in centimeters. The conversion factor is 2.54 centimeters per inch. Make sure to use a docstring to describe the purpose of the function and include type hints for the input parameter and return value. Additionally, the program should have a check function to verify the correctness of the conversion function with provided data points. Please include an example of how to use the function and the check function in the code snippet.","solution":"def convert_inches_to_cm(inches: float) -> float: Converts a given number of inches to centimeters. :param inches: The measurement in inches. :return: The equivalent measurement in centimeters. return inches * 2.54"},{"question":"Given a list of numbers, write a function in Python to sort the numbers in descending order using a custom sorting algorithm (avoid using the built-in sort() or sorted() functions). Additionally, the function should handle duplicate numbers properly.","solution":"def custom_sort_descending(arr): Sort the list of numbers in descending order using a custom sorting algorithm. # Implementing bubble sort algorithm for simplicity n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] < arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Create an array of size n and populate it with the first n positive integers. Your solution should have a time complexity of O(n) and a space complexity of O(n). Additionally, the solution should not use any built-in functions or libraries to generate or populate the array. The solution should also ensure that the generated array does not contain any duplicate numbers. The input n must be a positive integer less than or equal to 10^6.","solution":"def generate_array(n): Generates an array of the first n positive integers. Parameters: n (int): the size of the array to generate, must be a positive integer ≤ 10^6 Returns: List[int]: an array containing the first n positive integers if not isinstance(n, int) or n <= 0 or n > 10**6: raise ValueError(\\"Input must be a positive integer less than or equal to 10^6\\") result = [0] * n for i in range(n): result[i] = i + 1 return result"},{"question":"Design a Python function that can append a non-null element to the end of a list, while simultaneously maintaining a descending order for the list. The function should work correctly for any input list and element, and it should involve multiple-step reasoning to come up with a solution. Additionally, the function should be efficient in terms of time and space complexity, and it should handle edge cases, such as when the input list is empty or when the element to be appended is larger or smaller than all existing elements in the list.","solution":"def append_and_sort_descending(lst, element): Appends a non-null element to the end of a list and maintains the list in descending order. :param lst: List of elements in descending order. :param element: The element to append to the list. :return: A new list containing all elements in descending order. if element is None: raise ValueError(\\"Element cannot be null\\") lst.append(element) lst.sort(reverse=True) return lst"},{"question":"Write a Python code snippet to print the hierarchy of a given directory in the console, including the subdirectories and their contents.","solution":"import os def print_directory_hierarchy(path, level=0): Recursively prints the hierarchy of directories and subdirectories. Parameters: path (str): The path for which to print the hierarchy. level (int): The current level in the directory hierarchy (used for indentation). if not os.path.isdir(path): raise ValueError(f\\"The provided path: {path} is not a directory or doesn't exist.\\") items = os.listdir(path) items.sort() # Sort items to print them in alphabetical order for item in items: item_path = os.path.join(path, item) print(' ' * (level * 4) + '|__ ' + item) if os.path.isdir(item_path): print_directory_hierarchy(item_path, level + 1)"},{"question":"Write a function in Python that takes 2 parameters: a list of integers and a target integer. The function should return the number of times the target integer appears in the list. Additionally, include a small piece of erroneous code and ask the candidate to identify and correct the mistake.","solution":"def count_target_occurrences(lst, target): Returns the number of times the target integer appears in the list. Args: lst : list of int List of integers to search within. target : int The integer to count occurrences of in the list. Returns: int The number of times the target integer appears in the list. return lst.count(target)"},{"question":"Write a Python program to convert a list of lists into a dictionary, where the first element of each sublist is the key and the second element is the value.","solution":"def list_of_lists_to_dict(list_of_lists): Convert a list of lists into a dictionary, where the first element of each sublist is the key and the second element is the value. :param list_of_lists: List of lists, where each sublist contains two elements. :return: Dictionary with the first element of each sublist as the key and the second element as the value. return {sublist[0]: sublist[1] for sublist in list_of_lists}"},{"question":"Remove all duplicates from this list using Python. The list can contain integers, floats, strings, or a combination of these data types. The order of the elements should be maintained in the final list. The solution should have a time complexity of O(n), where n is the length of the input list.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list while maintaining the order of elements. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Use a sorting algorithm to sort a list of 10,000 randomly generated integers between 1 and 1,000,000 in ascending order. Additionally, the algorithm must have a time complexity of O(n log n) and must not use any built-in sorting functions or libraries. The sorted list should be stored in a new list and the original list should remain unchanged. Furthermore, the algorithm should be implemented using a recursive approach instead of an iterative one.","solution":"def merge_sort(arr): Sorts an input list using the merge sort algorithm and returns a new sorted list. This approach ensures that the input list remains unchanged. if len(arr) <= 1: return arr # Recursive case: split the array into halves mid_point = len(arr) // 2 left_half = merge_sort(arr[:mid_point]) right_half = merge_sort(arr[mid_point:]) # Merge the sorted halves return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. result = [] left_index, right_index = 0, 0 # Compare elements from both lists and concatenate in ascending order while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 # Append remaining elements from left or right list result.extend(left[left_index:]) result.extend(right[right_index:]) return result"},{"question":"Create a class that can generate random numbers in a specific range and allow the user to specify the range. Additionally, provide a piece of erroneous code that may mislead the user and explain why it is incorrect.","solution":"import random class RandomNumberGenerator: def __init__(self, lower_bound, upper_bound): Initializes the random number generator with the specified range. :param lower_bound: The lower bound of the range. :param upper_bound: The upper bound of the range. self.lower_bound = lower_bound self.upper_bound = upper_bound def generate(self): Generates a random number within the specified range. :return: A random number between lower_bound and upper_bound (inclusive). return random.randint(self.lower_bound, self.upper_bound) # Erroneous code example # This code incorrectly uses random.uniform instead of random.randint, which results in a float # rather than an integer being returned. # def generate_erroneous(self): # # Incorrectly generates a random number within the specified range. # :return: A random float number between lower_bound and upper_bound (inclusive). # # return random.uniform(self.lower_bound, self.upper_bound)"},{"question":"Write a python function to create a dictionary for a list of words, in lowercase, and their frequencies from the input string. In case of ties in frequency, include all the words in the dictionary with the tied frequency. Test this function using the input string: \\"In-radius needs a gyromagnetic ratio.\\" Make sure the function is case-insensitive and exclude punctuation.","solution":"import re from collections import defaultdict def word_frequencies(input_string): Returns a dictionary with words in lowercase and their frequencies from the input string. In case of ties in frequency, include all the words in the dictionary with the tied frequency. # Remove punctuation and convert to lowercase. cleaned_string = re.sub(r'[^ws]', '', input_string).lower() words = cleaned_string.split() # Calculate word frequencies. frequency_dict = defaultdict(int) for word in words: frequency_dict[word] += 1 return dict(frequency_dict)"},{"question":"Create a function that takes a 2D array and returns the sum of the elements in the array. However, the function should ignore any negative numbers in the array and should throw an exception if the array contains any duplicate values. Additionally, the function should only consider the elements that are divisible by 3 in the sum calculation. The function should also ensure that the 2D array has the same number of columns in each row.","solution":"def sum_3_divisible_elements(matrix): Returns the sum of elements in the 2D array that are divisible by 3, ignoring negative numbers and ensuring no duplicates and equal column size per row. Throws a ValueError if duplicates exist or column sizes are not consistent. if not matrix: return 0 num_columns = len(matrix[0]) elements_seen = set() total_sum = 0 for row in matrix: if len(row) != num_columns: raise ValueError(\\"All rows must have the same number of columns\\") for element in row: if element < 0: continue if element in elements_seen: raise ValueError(\\"Duplicate value found in the array\\") elements_seen.add(element) if element % 3 == 0: total_sum += element return total_sum"},{"question":"Create a function which takes a string and list of strings and returns a list of indices where the string is found in the list.","solution":"def find_indices(s, lst): Returns a list of indices where the string s is found in the list lst. Parameters: s (str): The string to find. lst (list): The list of strings to search within. Returns: list: A list of indices where s is found in lst. return [i for i, x in enumerate(lst) if x == s]"},{"question":"What is the method to add an element to the beginning of a linked list in Python?","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def add_to_beginning(self, data): Add a new node with the provided data to the beginning of the linked list. new_node = Node(data) new_node.next = self.head self.head = new_node"},{"question":"Write a Python program that checks if the word \\"Python\\" is present in a given string. The program should be case insensitive, which means it should identify the word \\"Python\\" regardless of whether it is written as \\"python\\", \\"PYTHON\\", \\"PyThOn\\", etc. Additionally, the program should also consider variations of the word \\"Python\\" such as \\"Python3\\", \\"Pythonic\\", or \\"Pythonista\\" as a match.","solution":"import re def is_python_word_present(input_string): Checks if variations of the word 'Python' are present in the given string, case insensitive. pattern = re.compile(r'pythonw*', re.IGNORECASE) return bool(pattern.search(input_string))"},{"question":"Write a Python function that takes an unsorted list of integers as input and returns a new list by removing all the duplicates while preserving the order of the first occurrences of the elements. Additionally, the function should ignore any negative numbers and zeros, only keeping the positive integers. The function should be named \`remove_duplicates\` and should not use any built-in functions or libraries for removing duplicates or sorting.","solution":"def remove_duplicates(nums): Removes duplicates from the list while preserving order of first occurrences and only keeps positive integers. Parameters: nums (list): A list of integers. Returns: list: A list with duplicates removed and only positive integers preserved. seen = set() result = [] for num in nums: if num > 0 and num not in seen: seen.add(num) result.append(num) return result"},{"question":"You are a professional Python developer working at a cutting-edge technology company that uses a sophisticated recommendation algorithm to suggest products to its customers. Your job is to create the core function for this algorithm based on kernel regression. Your function should not only compute kernel regression but also include an option to graph the results and save them as an image file. Additionally, you need to incorporate an interactive feature that allows users to input parameters directly into the kernel regression function through a simple command-line interface.","solution":"import numpy as np from scipy.stats import gaussian_kde import matplotlib.pyplot as plt import argparse def kernel_regression(x_train, y_train, x_points, bandwidth=0.2, graph=False, filename=\\"kernel_regression.png\\"): Perform Kernel Regression on the given data. :param x_train: Training data x coordinates. :param y_train: Training data y coordinates. :param x_points: Points to evaluate the kernel regression. :param bandwidth: Bandwidth parameter for the kernel. :param graph: Boolean flag indicating if the graph should be plotted and saved. :param filename: Filename to save the graph image. :return: Evaluated kernel regression values at the given x_points. # Create weighted kernel density estimate (KDE) kde = gaussian_kde(x_train, bw_method=bandwidth) y_estimates = [] for x_point in x_points: weights = kde(x_train) weights /= weights.sum() y_est = np.sum(weights * y_train) y_estimates.append(y_est) if graph: plt.figure(figsize=(8, 6)) plt.plot(x_train, y_train, 'bo', label='Training Data') plt.plot(x_points, y_estimates, 'r-', label='Kernel Regression') plt.title(\\"Kernel Regression\\") plt.xlabel(\\"X\\") plt.ylabel(\\"Y\\") plt.legend() plt.savefig(filename) print(f\\"Graph has been saved as {filename}\\") return np.array(y_estimates) def main(): parser = argparse.ArgumentParser(description='Kernel Regression with Interactive Options.') parser.add_argument('--x_train', nargs='+', type=float, required=True, help='Training data x coordinates.') parser.add_argument('--y_train', nargs='+', type=float, required=True, help='Training data y coordinates.') parser.add_argument('--x_points', nargs='+', type=float, required=True, help='Points to evaluate the kernel regression.') parser.add_argument('--bandwidth', type=float, default=0.2, help='Bandwidth parameter for the kernel.') parser.add_argument('--graph', action='store_true', help='Flag to indicate if graph should be plotted and saved.') parser.add_argument('--filename', type=str, default=\\"kernel_regression.png\\", help='Filename to save the graph image.') args = parser.parse_args() x_train = np.array(args.x_train) y_train = np.array(args.y_train) x_points = np.array(args.x_points) bandwidth = args.bandwidth graph = args.graph filename = args.filename kernel_regression(x_train, y_train, x_points, bandwidth, graph, filename) if __name__ == \\"__main__\\": main()"},{"question":"Create a Python function for computing the Levenshtein Distance between two words in a case-insensitive manner.","solution":"def levenshtein_distance(s1, s2): Computes the Levenshtein Distance between two words in a case-insensitive manner. # Convert both strings to lowercase to ensure case-insensitivity s1, s2 = s1.lower(), s2.lower() if len(s1) < len(s2): return levenshtein_distance(s2, s1) # The distance of any first string to an empty second string previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"Given a list of numbers, write Python code to reverse the elements of the list in place and print the modified list. However, you are not allowed to use the built-in reverse() function, the slicing syntax, or any other built-in functions to reverse the list. You must manually swap the elements of the list using only logical steps and arithmetic operations.","solution":"def reverse_list_in_place(lst): Reverses the elements of the list in place. Args: lst (list): The list of numbers to be reversed. start = 0 end = len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 # Debug print statement to verify in-place modification print(lst)"},{"question":"Create a function that takes in a string and returns the reverse of that string. The function should not use any built-in string reverse or string manipulation functions, and should also not use any loops or recursion.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Teach me how to implement Depth First Search (DFS) algorithm on a graph using Python.","solution":"def dfs(graph, start): Performs depth first search starting from the start node. Parameters: - graph: A dictionary representing the adjacency list of the graph - start: The starting node for the DFS Returns: - result: A list of nodes in the order they are visited visited = set() result = [] stack = [start] while stack: vertex = stack.pop() if vertex not in visited: visited.add(vertex) result.append(vertex) # Add adjacent nodes in the reverse order to maintain the order of traversal stack.extend(reversed(graph[vertex])) return result"},{"question":"Generate a python code that takes a list of integers, prints out an array that is all True if the values are in the input list and all False otherwise. If the input list is empty, the output should be an empty list. Additionally, the input list should not contain any duplicate values and the output list should be sorted in descending order.","solution":"def generate_bool_array(int_list): Given a list of integers, return a sorted in descending order list of booleans where each element is True (since all values in input list) and input list is non-empty. If the input list is empty, return an empty list. The input list should not contain duplicates. if not int_list: return [] unique_int_list = list(set(int_list)) # Remove duplicates if any present unique_int_list.sort(reverse=True) # Sort in descending order bool_array = [True] * len(unique_int_list) # All values should be True since list is non-empty. return bool_array"},{"question":"How do I convert a hexadecimal number to binary in Python? And then, can you write a function that takes an IP address in hexadecimal format and converts it to binary format? For example, the hexadecimal IP address '1F2A:3B4C:5D6E:7F89:9A2B:C3D4:E5F6:789A' should be converted to its equivalent binary representation.","solution":"def hex_to_bin(hex_num): Converts a hexadecimal number to binary. Parameters: hex_num (str): Hexadecimal number as a string Returns: str: Binary representation of the input hexadecimal number return bin(int(hex_num, 16))[2:] def hex_ip_to_bin_ip(hex_ip): Converts an IP address in hexadecimal format to binary format. Parameters: hex_ip (str): IP address in hexadecimal format, separated by colons (e.g., '1F2A:3B4C:5D6E:7F89:9A2B:C3D4:E5F6:789A') Returns: str: Binary representation of the input hexadecimal IP address hex_parts = hex_ip.split(':') bin_parts = [hex_to_bin(part).zfill(16) for part in hex_parts] return ':'.join(bin_parts)"},{"question":"Given a set of three integers, write a function in Python to return a list with the integers sorted in ascending order.","solution":"def sort_three_integers(a, b, c): Returns a list with the three integers sorted in ascending order. return sorted([a, b, c])"},{"question":"Create a Python program to find out the prime numbers in a given range. The program should accept two integers as input, representing the range's lower and upper bounds. Make sure to include error handling for situations where the user enters invalid input, such as non-integer or negative values. After identifying all the prime numbers within the specified range, the program should display them in ascending order.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_in_range(lower, upper): Function to find prime numbers in a given range. if not isinstance(lower, int) or not isinstance(upper, int): raise ValueError(\\"Both lower and upper bounds must be integers\\") if lower < 0 or upper < 0: raise ValueError(\\"Both lower and upper bounds must be non-negative integers\\") if lower > upper: raise ValueError(\\"Lower bound must be less than or equal to the upper bound\\") primes = [] for num in range(lower, upper + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Generate a method in Python to sort a given list of dictionaries based on the 'age' key in descending order. The method should only consider dictionaries that have a 'name' key. If there are dictionaries without a 'name' key, they should be ignored during sorting. Additionally, the method should handle the case where two dictionaries have the same 'age' value by sorting them based on the 'name' key in ascending order. The method should return a new sorted list of dictionaries instead of modifying the original list. The method should have a time complexity of O(n log n), where n is the length of the input list. Additionally, the method should use only constant space, i.e., it should not create any new data structures with a size dependent on the input list size.","solution":"def sort_dicts_by_age_and_name(dicts): Returns a new list of dictionaries sorted by 'age' in descending order, considering only those dictionaries that have a 'name' key. If two dictionaries have the same 'age', they are sorted by 'name' in ascending order. filtered_dicts = [d for d in dicts if 'name' in d] sorted_dicts = sorted(filtered_dicts, key=lambda d: (-d['age'], d['name'])) return sorted_dicts"},{"question":"Create blocks of code that can be used to effectively adjust the brightness of an image. This adjustment should allow for both increases and decreases in brightness, as well as provide the user with the ability to specify the degree of change. The solution should also cater for various image file formats and handle any potential errors or exceptions gracefully.","solution":"from PIL import Image, ImageEnhance def adjust_brightness(image_path, output_path, factor): Adjusts the brightness of an image. Parameters: image_path (str): Path to the input image. output_path (str): Path to save the output image. factor (float): A number that indicates the factor by which the brightness is adjusted. 1.0 means no change, less than 1.0 means the image will be darker, and greater than 1.0 means it will be brighter. try: # Open an image file with Image.open(image_path) as img: # Initialize the enhancer enhancer = ImageEnhance.Brightness(img) # Enhance the image img_enhanced = enhancer.enhance(factor) # Save the enhanced image img_enhanced.save(output_path) return True except Exception as e: print(f\\"An error occurred: {e}\\") return False"},{"question":"Implement a function in Python to find the square root of a given number using the Newton-Raphson method, without using the built-in square root function or any math libraries.","solution":"def sqrt_newton_raphson(n, tolerance=1e-10, max_iterations=1000): Computes the square root of a given number using the Newton-Raphson method. Parameters: n (float): The number to find the square root of. tolerance (float): The tolerance level for stopping the iteration. max_iterations (int): The maximum number of iterations before stopping. Returns: float: The computed square root of the number. if n < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") if n == 0: return 0.0 x = n iteration = 0 while True: iteration += 1 next_x = 0.5 * (x + n / x) # Check if the absolute difference is within the tolerance level if abs(x - next_x) < tolerance or iteration >= max_iterations: return next_x x = next_x"},{"question":"what code should I use if I want to write a function that generated random numbers between 1 and 6, like the rolling of a dice?","solution":"import random def roll_dice(): Returns a random number between 1 and 6, simulating a dice roll. return random.randint(1, 6)"},{"question":"Write a Python function to count the letters in a given sentence, excluding any numbers, punctuation marks, and special characters, and return a dictionary of letter counts. The function should be case-insensitive.","solution":"from collections import Counter import string def count_letters(sentence): Returns a dictionary with counts of each letter in the given sentence. The function is case-insensitive and excludes numbers, punctuations, and special characters. # Convert sentence to lowercase to handle case-insensitivity sentence = sentence.lower() # Filter out letters from the sentence letters = filter(lambda ch: ch in string.ascii_lowercase, sentence) # Count the letters using Counter letter_counts = Counter(letters) return dict(letter_counts)"},{"question":"Write a python code that can generate both an area chart and a stacked area chart using random data. Please use the matplotlib and numpy libraries for this purpose. Also, ensure that the charts have titles, legends, and axis labels. Furthermore, the data for the area chart should be derived from a normal distribution, while the data for the stacked area chart should be derived from a random walk. Additionally, the code should include a function that can calculate and print the percentage change between each consecutive data point in the stacked area chart.","solution":"import numpy as np import matplotlib.pyplot as plt def generate_area_chart(): Generates and displays an area chart using random data from a normal distribution. np.random.seed(0) data = np.random.normal(0, 1, 100) plt.figure(figsize=(10,6)) plt.fill_between(range(len(data)), data, color=\\"skyblue\\", alpha=0.4) plt.plot(data, color=\\"Slateblue\\", alpha=0.6) plt.title('Area Chart') plt.xlabel('X-axis') plt.ylabel('Y-axis') plt.legend(['Random Normal Distribution']) plt.show() def generate_stacked_area_chart(): Generates and displays a stacked area chart using random walk data. np.random.seed(0) n = 5 m = 100 data = np.random.randn(m, n).cumsum(axis=0) plt.figure(figsize=(10,6)) plt.stackplot(range(m), data.T, labels=[f'Series {i}' for i in range(n)]) plt.title('Stacked Area Chart') plt.xlabel('X-axis') plt.ylabel('Y-axis') plt.legend(loc='upper left') plt.show() def calculate_percentage_change(data): Calculates and prints the percentage change between each consecutive data point in the provided data. percentage_changes = np.diff(data, axis=0) / data[:-1] * 100 print(\\"Percentage change between each consecutive data point:\\") print(percentage_changes) return percentage_changes # Example usage generate_area_chart() data = np.random.randn(100, 5).cumsum(axis=0) generate_stacked_area_chart() calculate_percentage_change(data)"},{"question":"Write a python program to compute the Levenshtein distance between two strings. Then, optimize the code for time and space efficiency. Next, encapsulate your solution into a reusable class and document it.","solution":"class LevenshteinDistance: Class to calculate Levenshtein Distance between two strings. @staticmethod def calculate(s1, s2): Static method to calculate Levenshtein Distance between s1 and s2. :param s1: First string :param s2: Second string :return: Levenshtein distance if len(s1) < len(s2): s1, s2 = s2, s1 if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"I'd like you to construct a Python function that evaluates whether a given string is a palindromic or not. Sure, you might need to consider \\"A man, a plan, a canal, Panama\\" as a palindromic string despite the spaces, punctuation and capitalization. Let's make our function robust to such conditions.","solution":"def is_palindrome(s): Evaluate whether a given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) # Compare the cleaned string with its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function that reverses a string. However, your solution should not use any built-in string reversal functions or methods, and should have a time complexity of O(n). You may use additional data structures or variables as needed.","solution":"def reverse_string(s): Returns the reversed version of the input string s. reversed_str = [] for char in s: reversed_str.insert(0, char) return ''.join(reversed_str)"},{"question":"Can you describe and explain the usage of *args and **kwargs in Python, and provide an example where they are used in a function with a complex argument structure?","solution":"def complex_function(a, b, *args, **kwargs): A complex function that takes normal arguments, *args (variable-length positional arguments) and **kwargs (variable-length keyword arguments). print(\\"a:\\", a) print(\\"b:\\", b) print(\\"args:\\", args) print(\\"kwargs:\\", kwargs) sum_args = sum(args) if args else 0 sum_kwargs = sum(kwargs.values()) if kwargs else 0 return sum_args + sum_kwargs + a + b"},{"question":"Write a Python function named \\"bitwise_unset_bit_in_byte\\" that takes two integers as input: a byte (8 bits) and a position. The function should return the byte with the bit at the specified position unset (0).","solution":"def bitwise_unset_bit_in_byte(byte, position): Unsets the bit at the specified position in the given byte. :param byte: The byte (8 bits) in which to unset the bit. :param position: The position of the bit to unset (0-7). :return: The byte with the bit at the specified position unset. if position < 0 or position > 7: raise ValueError(\\"Position must be between 0 and 7 inclusive.\\") return byte & ~(1 << position)"},{"question":"Write a recursive function in Python to generate a list with the factorial of numbers from 1 to the given number, but instead of returning the list, print each factorial with an指定ged number of decimals. Also, add error handling for negative numbers and non-integer values. You are given a starting erroneous code below which terminates upon encountering an error. Your task also includes identifying and fixing the errors in the given code.","solution":"def factorial(n, decimals): Recursive function to generate and print the factorial of numbers from 1 to the given number with the specified number of decimals. if not isinstance(n, int) or not isinstance(decimals, int): raise ValueError(\\"Both n and decimals must be integers.\\") if n < 0 or decimals < 0: raise ValueError(\\"Both n and decimals must be non-negative.\\") def calc_factorial(num): if num == 0 or num == 1: return 1 return num * calc_factorial(num-1) def helper(curr): if curr == 1: fact = calc_factorial(curr) print(f\\"{curr}! = {fact:.{decimals}f}\\") else: helper(curr-1) fact = calc_factorial(curr) print(f\\"{curr}! = {fact:.{decimals}f}\\") helper(n)"},{"question":"Write a code that takes a list of numbers and returns a list of their square roots, rounded to two decimal points. Limit the length of the output list to a specified number of elements. Ensure this code is written without using built-in functions for calculating square roots and rounding. Also, include handling for invalid inputs including negative numbers and non-numerical values.","solution":"import math def custom_sqrt(x): Custom function to calculate the square root of a number using the Babylonian method. if x < 0: raise ValueError(\\"Cannot calculate square root of negative numbers\\") if x == 0: return 0 guess = x / 2.0 tolerance = 1e-10 while True: better_guess = (guess + x / guess) / 2.0 if abs(guess - better_guess) < tolerance: return better_guess guess = better_guess def custom_round(number, decimals=2): Custom function to round a number to a specified number of decimal places. factor = 10 ** decimals return int(number * factor + 0.5) / factor def get_square_roots(numbers, limit): Returns a list of square roots of the given numbers, rounded to 2 decimal points. The output list is limited to a specified number of elements. sqrt_list = [] count = 0 for num in numbers: if count >= limit: break try: sqrt = custom_sqrt(float(num)) rounded_sqrt = custom_round(sqrt, 2) sqrt_list.append(rounded_sqrt) count += 1 except (ValueError, TypeError): continue return sqrt_list"},{"question":"Please write a Python function that takes a list of HTML documents as input and returns a dictionary containing the number of unique URLs found in each document. The keys of the dictionary should be the index of the document in the input list, and the values should be the count of unique URLs in that document.","solution":"from bs4 import BeautifulSoup from urllib.parse import urlparse def count_unique_urls(html_documents): Returns a dictionary with the number of unique URLs found in each HTML document. Parameters: html_documents (list): A list of HTML documents as strings. Returns: dict: A dictionary with the document index as keys and the count of unique URLs as values. url_counts = {} for i, html in enumerate(html_documents): soup = BeautifulSoup(html, 'html.parser') urls = set() for tag in soup.find_all(href=True): href = tag['href'] parsed_url = urlparse(href) urls.add(parsed_url.geturl()) url_counts[i] = len(urls) return url_counts"},{"question":"How can an AI program be created in Python to determine if a given string is a valid password or not? The validation rules should include having at least one uppercase letter, one lowercase letter, one digit, and a minimum length of 8 characters.","solution":"import re def is_valid_password(password): Determine if a given string is a valid password. A valid password must: - Have at least one uppercase letter - Have at least one lowercase letter - Have at least one digit - Have a minimum length of 8 characters if len(password) < 8: return False if not re.search(\\"[A-Z]\\", password): return False if not re.search(\\"[a-z]\\", password): return False if not re.search(\\"[0-9]\\", password): return False return True"},{"question":"Can someone help me write a function that can find and return the largest number within a given list of numbers in Python? It would be great if you could provide an explanation as well.","solution":"def find_largest_number(numbers): Returns the largest number in the given list of numbers. Args: numbers (list): A list of numerical values. Returns: int or float: The largest number in the list. if not numbers: raise ValueError(\\"List is empty\\") largest_number = numbers[0] for number in numbers: if number > largest_number: largest_number = number return largest_number"},{"question":"Create a Python function to return the frequency table of a list of words. The function should ignore the case sensitivity of the words. If a word appears multiple times with different cases (e.g. \\"Apple\\" and \\"apple\\"), it should be counted as the same word. Additionally, the function should exclude any stop words from the frequency table. Stop words are commonly used words such as \\"the\\", \\"and\\", \\"in\\", etc.","solution":"from collections import Counter def frequency_table(words, stop_words): Returns the frequency table of a list of words, ignoring case and excluding stop words. :param words: List of words (str). :param stop_words: List of stop words to exclude from the frequency table. :return: Dictionary with words as keys and their frequencies as values. normalized_words = [word.lower() for word in words if word.lower() not in stop_words] word_count = Counter(normalized_words) return dict(word_count)"},{"question":"Write a method in Python to append a given list to another list, but only if the lengths of both lists are equal.","solution":"def append_lists_if_equal_length(list1, list2): Appends list2 to list1 if both lists have the same length. Parameters: list1 (list): The first list. list2 (list): The second list to append to the first list. Returns: list: The combined list if the lengths are equal, otherwise the original list1. if len(list1) == len(list2): return list1 + list2 return list1"},{"question":"Complete the code snippet below, ensuring that the function \\"f\\" takes in two integer parameters \\"x\\" and \\"y\\", and returns their sum as the output. However, the function should only compute the sum if the value of \\"x\\" is greater than or equal to 0 and the value of \\"y\\" is less than or equal to 0. If the conditions are not met, the function should return -1.","solution":"def f(x, y): Returns the sum of x and y if x >= 0 and y <= 0, otherwise returns -1. if x >= 0 and y <= 0: return x + y else: return -1"},{"question":"Write a method in Python that receives an array of strings as a parameter and returns the longest string in the array. If there are multiple strings with the same maximum length, return the one that appears first in the array. In case the array is empty, return None.","solution":"def longest_string(strings): Returns the longest string in the array. If there are multiple strings with the same maximum length, returns the one that appears first in the array. If the array is empty, returns None. if not strings: return None longest = strings[0] for s in strings[1:]: if len(s) > len(longest): longest = s return longest"},{"question":"Write a code to generate all string combinations of a given alphabet, where each combination should contain at least one lowercase letter, one uppercase letter, one digit, and one special character. The special characters should include any of the following: !@#%^&*()_+=-{}[]:;\\"'<>,.?/|","solution":"import itertools def generate_combinations(alphabet): Generates all valid combinations containing at least one lowercase letter, one uppercase letter, one digit, and one special character. # Ensuring unique combinations valid_combinations = set() # Generate all characters by their category lowercase_letters = [ch for ch in alphabet if ch.islower()] uppercase_letters = [ch for ch in alphabet if ch.isupper()] digits = [ch for ch in alphabet if ch.isdigit()] special_characters = [ch for ch in alphabet if not ch.isalnum()] # Ensuring there's enough of each category if not lowercase_letters or not uppercase_letters or not digits or not special_characters: return [] # Generate combinations for each category and concatenate the results for l in lowercase_letters: for u in uppercase_letters: for d in digits: for s in special_characters: valid_combinations.add(f\\"{l}{u}{d}{s}\\") return list(valid_combinations)"},{"question":"Can you write a Python program that takes points' coordinates as input in the format x,y per line, and calculate the minimum Euclidean distance between two points? The program should handle any number of points.","solution":"import math def min_euclidean_distance(points): Returns the minimum Euclidean distance between any two points in a list. Each point is represented as a tuple (x, y). :param points: List of tuples, where each tuple represents a point's coordinates (x, y) :return: Minimum Euclidean distance between any two points if len(points) < 2: raise ValueError(\\"Need at least two points to compute distance\\") min_distance = float('inf') for i in range(len(points)): for j in range(i + 1, len(points)): distance = math.sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) if distance < min_distance: min_distance = distance return min_distance"},{"question":"Remove duplicates from a list in Python without using any built-in functions or additional data structures, while maintaining the original order of the elements, and achieve an O(n) time complexity.","solution":"def remove_duplicates(lst): Removes duplicates from a list without using any built-in functions or additional data structures, while maintaining the original order of the elements, and achieve an O(n) time complexity. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Using Python, write a function that takes in a list of integers, and returns a sorted list of integers that are only divisible by 1 and themselves. The function should also remove any duplicates in the list. Test this function with the following list of integers: [47, 11, 47, 2, 43, 11, 2, 59, 23, 17, 29, 37, 41, 53, 2, 11, 43, 47]","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def extract_primes(numbers): Given a list of integers, return a sorted list of unique integers that are prime. unique_numbers = set(numbers) primes = [num for num in unique_numbers if is_prime(num)] return sorted(primes)"},{"question":"Develop a function that generates a series of Fibonacci numbers up to a certain limit. This limit should be defined by a user input. Moreover, the function should be able to handle large inputs efficiently.","solution":"def fibonacci(limit): Generates a series of Fibonacci numbers up to a certain limit. Args: limit (int): The upper limit of the Fibonacci series (exclusive). Returns: list: A list containing the Fibonacci series up to the given limit. if limit <= 0: return [] fib_series = [] a, b = 0, 1 while a <= limit: fib_series.append(a) a, b = b, a + b return fib_series"},{"question":"Create a Python function to sort a list of dictionaries in ascending order of \\"count\\", but only include dictionaries that have a key \\"status\\" with the value \\"active\\". Additionally, ensure that the sorting is stable, meaning that dictionaries with the same \\"count\\" value should retain their relative order.","solution":"def sort_active_counts(dict_list): Sorts a list of dictionaries in ascending order of \\"count\\", including only dictionaries with the key \\"status\\" set to \\"active\\". The sorting is stable, maintaining the relative order of dictionaries with the same \\"count\\" value. :param dict_list: List of dictionaries to be sorted :return: A sorted list of dictionaries # Filter dictionaries that have 'status' set to 'active' active_dicts = [d for d in dict_list if d.get('status') == 'active'] # Return the sorted list based on the 'count' key, maintaining stability return sorted(active_dicts, key=lambda x: x['count'])"},{"question":"Given an array [3, 5, 2, 7, 8, 4, 9, 6, 1, 0], implement the bubble sort algorithm to sort the array in ascending order.","solution":"def bubble_sort(arr): Sorts an array in ascending order using bubble sort algorithm. Parameters: arr (list): A list of integers to sort. Returns: list: A sorted list of integers in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # Example usage: # sorted_array = bubble_sort([3, 5, 2, 7, 8, 4, 9, 6, 1, 0]) # print(sorted_array) # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"question":"Write a Python code to group the following numbers according to their last digit, and then sort each group in ascending order. The input will be a list of positive integers. The output should be a list of lists, where each inner list contains the numbers with the same last digit, sorted in ascending order.","solution":"def group_and_sort_by_last_digit(numbers): Groups numbers by their last digit and sorts each group in ascending order. Parameters: numbers (list): A list of positive integers. Returns: list of lists: A list where each inner list contains numbers with the same last digit, sorted in ascending order. from collections import defaultdict groups = defaultdict(list) for number in numbers: last_digit = number % 10 groups[last_digit].append(number) sorted_groups = [sorted(groups[digit]) for digit in sorted(groups.keys())] return sorted_groups"},{"question":"Write a Python program to find the biggest three numbers from a list which contains at least 1000 numbers. The program should also make sure that there are no duplicates in the top three numbers, meaning that if the three largest numbers are the same, only one instance of that number should be included in the result.","solution":"def find_top_three_numbers(numbers): Finds the top three largest distinct numbers in a list. if len(numbers) < 1000: raise ValueError(\\"List must contain at least 1000 numbers\\") # Remove duplicates unique_numbers = list(set(numbers)) # Sort the list in descending order unique_numbers.sort(reverse=True) # Return the top three numbers return unique_numbers[:3]"},{"question":"Please write a python get_box_size function which takes an image size as the arguments and returns the box size. The box size shall be the smallest possible integer so that both the image width and height can be divisible by the returned box size.","solution":"import math def get_box_size(width, height): Returns the smallest possible integer 'box size' such that both width and height are divisible by it. Args: width (int): The width of the image. height (int): The height of the image. Returns: int: The box size. return math.gcd(width, height)"},{"question":"Develop a Python program to convert a given temperature from Celsius to Fahrenheit. Additionally, implement a feature that allows the user to input the temperature and choose the unit of measurement (Celsius or Fahrenheit) for the conversion. The program should handle erroneous input gracefully and provide appropriate error messages.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. return (fahrenheit - 32) * 5/9 def convert_temperature(value, unit): Converts the given temperature to the opposite unit. Parameters: - value: The temperature value to convert. - unit: The unit of the given value, must be either 'C' or 'F'. Returns: - Converted temperature value. Raises: - ValueError if the unit is not 'C' or 'F'. try: value = float(value) except ValueError: raise ValueError(\\"Temperature value must be a number.\\") if unit == 'C': return celsius_to_fahrenheit(value) elif unit == 'F': return fahrenheit_to_celsius(value) else: raise ValueError(\\"Unit must be either 'C' for Celsius or 'F' for Fahrenheit.\\")"},{"question":"Refer to doubling the value of a variable as \\"getting its associate\\" in the following code. Also, instead of directly doubling the variable, perform the operation by implementing a function that uses recursion to achieve the result.","solution":"def get_associate(n): Returns the double of the input number n using recursion. # Base case if n == 0: return 0 # Recursive case for positive n elif n > 0: return 2 + get_associate(n - 1) # Recursive case for negative n else: return -2 + get_associate(n + 1)"},{"question":"Given a random sequence of numbers, write a Python function to find the longest strictly increasing subsequence. A strictly increasing subsequence is defined as a subset of the original sequence where the numbers are in sorted order, from lowest to highest, and are strictly increasing.","solution":"def longest_increasing_subsequence(nums): Returns the longest strictly increasing subsequence from the given list of numbers. :param nums: List of integers :return: Length of the longest strictly increasing subsequence if not nums: return 0 # Create an array to store the length of the longest increasing subsequence ending at each index dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function to split a string into substrings based on a given separator. The separator can be any combination of characters and can occur multiple times within the string. The resulting substrings should be returned in a list. The function should handle cases where the separator occurs at the beginning or end of the string, and consecutive separators should not result in empty substrings in the output. Additionally, the function should only use built-in string methods and should not rely on any external libraries or modules. The function should have a time complexity of O(n), where n is the length of the input string. The function should also handle cases where the separator is a substring of a word, splitting the word into separate substrings.","solution":"def split_string(input_string, separator): Splits the input_string into substrings based on the given separator. Parameters: input_string (str): The string to be split. separator (str): The substring to be used as the separator. Returns: List[str]: A list of substrings. if not input_string: return [input_string] if not separator: return [input_string] substrings = [] start = 0 sep_len = len(separator) while True: index = input_string.find(separator, start) if index == -1: substrings.append(input_string[start:]) break substrings.append(input_string[start:index]) start = index + sep_len # Filter out empty substrings if any return [substr for substr in substrings if substr]"},{"question":"Create a function in Python that takes in a number, n, and returns the first n numbers in the Fibonacci sequence.","solution":"def fibonacci_sequence(n): Returns the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Implement a function that not only records the number of comparisons made but also implements a custom sorting algorithm to sort a given list of numbers. The function should identify the number of comparisons made while sorting the said list. For instance, if the list is [3, 5, 2, 1, 4], the function should return the sorted list and the number of comparisons made during the sorting process.","solution":"def custom_sort(arr): Sorts a list of numbers and returns the sorted list along with the number of comparisons made. comps = 0 # to count the number of comparisons # Implementing a simple bubble sort n = len(arr) for i in range(n): for j in range(0, n-i-1): comps += 1 if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr, comps"},{"question":"Create a Python program that finds the most common element in an array of integers.","solution":"from collections import Counter def most_common_element(arr): Returns the most common element in an array of integers. If there are multiple elements with the same highest frequency, one of them is returned. if not arr: return None counter = Counter(arr) most_common = counter.most_common(1) return most_common[0][0] if most_common else None"},{"question":"Write a Python program that takes a list of integers and an integer k as input and returns True if there exist two distinct elements in the list whose sum is exactly k, and False otherwise.","solution":"def has_pair_with_sum(nums, k): Return True if there exist two distinct elements in nums whose sum is exactly k. :param nums: List of integers :param k: Integer sum to check for :return: Boolean indicating if such a pair exists seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Say I have a variable length message \\"Hi there\\" that's I'm going to split that message with the first two bytes acting as a version indicator and next two being the message length indicator (prioritizing length first) and I want to include an end-of-stream indicator (every message ends with just a single zero) at the end for the receiver (another program) to know that, that's the last message. could please help with how to code this in python?","solution":"def prepare_message(message): Prepare the message by extracting the version indicator, message length, and appending the end-of-stream indicator. # Extract version indicator (first two bytes) version_indicator = message[:2] # Extract message length (next two bytes, assume it's in two-byte format) message_length = int.from_bytes(message[2:4], byteorder='big') # Actual message content msg_content = message[4:4+message_length] # Append the end-of-stream indicator end_of_stream = b'x00' # Assembling the final message final_message = version_indicator + message[2:4] + msg_content + end_of_stream return final_message"},{"question":"Can you help me create a gradient descent algorithm for a linear regression model using Python and Numpy? I want to understand how to iteratively minimize the cost function.","solution":"import numpy as np def gradient_descent(X, y, theta, alpha, num_iters): Performs gradient descent to learn theta. Args: X : numpy array of shape (m, n+1) where m is the number of examples, n is the number of features y : numpy array of shape (m,) containing the target values theta : numpy array of shape (n+1,) containing the initial model parameters (including the bias) alpha : float, learning rate num_iters : int, number of iterations Returns: theta : numpy array of shape (n+1,) containing the optimized model parameters J_history : list of cost function values at each iteration m = len(y) J_history = [] for i in range(num_iters): # Compute the hypothesis h = X.dot(theta) # Compute the gradient gradient = (1/m) * X.T.dot(h - y) # Update theta theta = theta - alpha * gradient # Compute the cost cost = (1/(2*m)) * np.sum((h - y)**2) J_history.append(cost) # Optionally print cost for debugging # print(f\\"Cost at iteration {i}: {cost}\\") return theta, J_history def compute_cost(X, y, theta): Computes the cost function for linear regression. Args: X : numpy array of shape (m, n+1) where m is the number of examples, n is the number of features y : numpy array of shape (m,) containing the target values theta : numpy array of shape (n+1,) containing the model parameters Returns: cost : float, the cost value m = len(y) h = X.dot(theta) cost = (1/(2*m)) * np.sum((h - y)**2) return cost"},{"question":"Given two different stacks stack1 = [3, 5, 7] and stack2 = [2, 4]. Write a code to merge and sort these stacks into a single stack. Make sure not to use any built-in sort functions.","solution":"def merge_and_sort_stacks(stack1, stack2): Merges two stacks and returns a single stack in sorted order without using any built-in sort functions. merged_stack = [] while stack1 or stack2: if not stack1: merged_stack.append(stack2.pop()) elif not stack2: merged_stack.append(stack1.pop()) elif stack1[-1] <= stack2[-1]: merged_stack.append(stack2.pop()) else: merged_stack.append(stack1.pop()) sorted_stack = [] while merged_stack: value = merged_stack.pop() while sorted_stack and sorted_stack[-1] > value: merged_stack.append(sorted_stack.pop()) sorted_stack.append(value) return sorted_stack"},{"question":"Create a Python function that takes in two arguments: an array of integers and a target sum. The function should return a list of all unique pairs of integers from the array that add up to the target sum. The pairs should be sorted in ascending order based on the first integer in each pair.","solution":"def find_pairs_with_sum(array, target): Returns a list of unique pairs of integers from the array that add up to the target sum. The pairs are returned sorted in ascending order based on the first integer in each pair. array.sort() pairs = set() seen = set() for num in array: complement = target - num if complement in seen: pairs.add((complement, num)) seen.add(num) return sorted(list(pairs))"},{"question":"Develop a Python algorithm to transform a nested list, specifically a 2D matrix, into a single linear list while preserving the elements' sequence.","solution":"def flatten_matrix(matrix): Flattens a 2D matrix into a single linear list. Args: matrix: A list of lists representing the 2D matrix. Returns: A flat list containing all the elements of the matrix in order. flat_list = [item for sublist in matrix for item in sublist] return flat_list"},{"question":"You are a programmer and your task is to write a function that checks for the validity of a Sudoku game. The rules for Sudoku validity are as follows: each row and each column must have the numbers 1 through 9 exactly once each, and each of the nine 3x3 subgrids must also have the numbers 1 through 9 exactly one time.","solution":"def is_valid_sudoku(board): Returns True if the board is a valid Sudoku solution, False otherwise. def is_valid_group(group): return sorted(group) == list(range(1, 10)) def get_subgrid(board, row, col): return [board[r][c] for r in range(row, row + 3) for c in range(col, col + 3)] for i in range(9): row = [board[i][j] for j in range(9)] col = [board[j][i] for j in range(9)] if not is_valid_group(row) or not is_valid_group(col): return False for i in range(0, 9, 3): for j in range(0, 9, 3): subgrid = get_subgrid(board, i, j) if not is_valid_group(subgrid): return False return True"},{"question":"Develop a Python program that performs the task of rounding off a floating-point number to the closest whole number. Use 3.14 as the input for this task.","solution":"def round_off(number): Returns the closest whole number by rounding off the input number. return round(number) # Example usage result = round_off(3.14) print(result) # Should print 3"},{"question":"Write a function in Python to generate all permutations of the given list of letters ['a','b','c','d'] without using any built-in library functions or external modules.","solution":"def generate_permutations(lst): Generates all permutations of the given list of letters. Parameters: lst (list): List of letters to generate permutations for. Returns: list: List of all permutations. def permute(prefix, remaining, result): if len(remaining) == 0: result.append(prefix) else: for i in range(len(remaining)): new_prefix = prefix + remaining[i] new_remaining = remaining[:i] + remaining[i+1:] permute(new_prefix, new_remaining, result) result = [] permute('', lst, result) return result"},{"question":"Generate a python code to convert a given integer to binary representation.","solution":"def int_to_binary(n): Converts an integer to its binary representation. Parameters: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n == 0: return '0' elif n > 0: return bin(n)[2:] else: return '-' + bin(n)[3:]"},{"question":"Given three arrays of integers, write a function to check whether the sum of two integers from different arrays equals the given parameter 'n'. Each array will have at least 10,000 elements and will not exceed 100,000 elements. The integers in each array are within the range of -1,000,000 to 1,000,000. The function's time complexity should not exceed O(n^2).","solution":"def sum_of_two_from_different_arrays(arr1, arr2, arr3, n): Checks whether there exists two integers, one from arr1 and one from either arr2 or arr3, whose sum is equal to n. # Convert arr2 and arr3 into sets for O(1) average time complexity lookups set_arr2 = set(arr2) set_arr3 = set(arr3) # Check sum of elements in arr1 with elements in arr2 for num in arr1: if n - num in set_arr2: return True if n - num in set_arr3: return True return False"},{"question":"Create an empty set in Python and add the following items into it in reverse alphabetical order: \\"C\\", \\"B\\", \\"A\\". Ensure that the set does not contain any duplicate elements. Additionally, implement a function that checks if a given character is a vowel or a consonant and add the result as a tuple along with the character in the set. Make sure that the function handles both uppercase and lowercase characters. Finally, the set should only contain characters that are not digits.","solution":"def is_vowel(char): Check if a given character is a vowel. vowels = 'aeiouAEIOU' if char in vowels: return True return False def add_to_set(): Create an empty set and add items in reverse alphabetical order (C, B, A). Then, add characters along with \\"vowel\\" or \\"consonant\\" in the set. items = ['C', 'B', 'A'] char_set = set() for item in items: if not item.isdigit(): char_type = 'vowel' if is_vowel(item) else 'consonant' char_set.add((item, char_type)) return char_set"},{"question":"Write a Python function that takes a list of integers as input and returns a new list where each element is the product of the elements at the same position in the original list except the current element. The function should not use division and should have a time complexity of O(n). Avoid using the list data structure for a better solution.","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: Returns a list where each element is the product of all the elements of nums except self. n = len(nums) if n == 0: return [] # Create two arrays to store the prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Calculate the result by multiplying prefix and suffix products result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Write a program that prints the Lucas sequence of numbers up to the nth term. The Lucas sequence is similar to the Fibonacci sequence, but starts with 2 and 1 instead of 0 and 1. Your program should include error handling for invalid input and should be implemented using recursion.","solution":"def lucas(n): Returns the nth term in the Lucas sequence using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 2 elif n == 1: return 1 else: return lucas(n - 1) + lucas(n - 2) def lucas_sequence(n): Returns a list of Lucas sequence numbers up to the nth term. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") return [lucas(i) for i in range(n+1)]"},{"question":"I have an array of numbers, and I want to sort them in non-decreasing order using the selection sort algorithm. How can I achieve this using Python?","solution":"def selection_sort(arr): Sorts the array in non-decreasing order using the selection sort algorithm. Params: arr (list of int): The array to be sorted. Returns: list of int: The sorted array. n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element of the unsorted part arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Create a Python script that sorts a list of dictionaries based on a specific key in each dictionary.","solution":"from typing import List, Dict def sort_dict_list(dict_list: List[Dict], key: str) -> List[Dict]: Sorts a list of dictionaries based on a specific key. Parameters: dict_list (List[Dict]): List of dictionaries to be sorted key (str): The key to sort the dictionaries by Returns: List[Dict]: The sorted list of dictionaries return sorted(dict_list, key=lambda x: x[key])"},{"question":"Create an algorithm in Python to merge two sorted arrays into a single sorted array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (List[int]): The first sorted array. arr2 (List[int]): The second sorted array. Returns: List[int]: A single sorted array that contains all elements from arr1 and arr2. # Pointers for arr1 and arr2 i, j = 0, 0 # Output array merged_array = [] # Traverse both arrays and add the smallest element from either array to the merged_array while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If any elements left in arr1, add them to merged_array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If any elements left in arr2, add them to merged_array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"I came across this programming task on a recent online coding challenge: \\"Write a function named无不有 which takes two parameters, also known as arguments. The first parameter is longestWord, which is supposed to be the longest word from a linguistic perspective. The second argument, shortestWord, is needless to say the shortest word from the same linguistic standpoint. The function should yield true in case the shortestWord is found within longestWord; otherwise, it should return false.\\"","solution":"def 无不有(longestWord, shortestWord): Checks if shortestWord is found within longestWord. Parameters: longestWord (str): The longest word. shortestWord (str): The shortest word. Returns: bool: True if shortestWord is found within longestWord, otherwise False. return shortestWord in longestWord"},{"question":"Write a Python function that reverses the order of words in a given sentence without using any built-in Python functions or methods for reversing a string.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Args: sentence (str): The sentence to reverse. Returns: str: The sentence with the order of words reversed. # Split the sentence into words words = [] word = \\"\\" for character in sentence: if character == ' ': if word: words.append(word) word = \\"\\" else: word += character if word: words.append(word) # Reverse the list of words reversed_words = [] for i in range(len(words)-1, -1, -1): reversed_words.append(words[i]) # Join the reversed list back into a sentence reversed_sentence = \\"\\" for i, word in enumerate(reversed_words): if i > 0: reversed_sentence += \\" \\" reversed_sentence += word return reversed_sentence"},{"question":"Develop a Python program that is capable of executing real-time conversion of pressure quantities from Pascal to Bar units, incorporating decision-making features to handle varied user input intelligently.","solution":"def pascal_to_bar(pascal): Converts pressure from Pascal to Bar. Parameters: - pascal (float): pressure in Pascal Returns: - float: pressure in Bar return pascal / 1e5 def convert_pressure(pressure, from_unit, to_unit): Converts pressure between different units. Parameters: - pressure (float): pressure value - from_unit (str): unit of the input pressure value - to_unit (str): unit of the converted pressure value Returns: - float: pressure in the desired unit if from_unit.lower() == \\"pascal\\" and to_unit.lower() == \\"bar\\": return pascal_to_bar(pressure) else: raise ValueError(\\"Unsupported unit conversion\\")"},{"question":"Develop a Python function capable of accepting two lists with string content as its parameters. This function should logically process these lists and formulate a third list. The contents of this new list should consist exclusively of string elements that are common to both input lists, preserving the order they had in the original lists.","solution":"def common_elements(list1, list2): Returns a list containing the elements that are common to both list1 and list2, preserving their order from list1. set2 = set(list2) # Convert list2 to a set for O(1) lookups return [element for element in list1 if element in set2]"},{"question":"Given an integer array, classify all the elements as even and odd. However, you are not allowed to use the modulus operator (%) or any other arithmetic operation to determine the parity of a number. You need to come up with a bitwise solution to solve this problem.","solution":"def classify_numbers(numbers): Classifies numbers in the list as even or odd using bitwise operations. Args: numbers (list): List of integers to be classified. Returns: tuple: Two lists, first containing even numbers and second containing odd numbers. evens = [] odds = [] for num in numbers: # Use bitwise AND operation to check the least significant bit if num & 1: odds.append(num) else: evens.append(num) return evens, odds"},{"question":"Create a function in Python to evaluate if a given number is prime and has exactly three distinct prime factors, where the number is less than 1000. Additionally, provide a piece of erroneous code as a reference to increase misdirection.","solution":"def is_prime(n): Returns whether a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def distinct_prime_factors_count(n): Returns the count of distinct prime factors of n. count = 0 for i in range(2, n + 1): if n % i == 0 and is_prime(i): count += 1 return count def has_three_distinct_prime_factors(n): Returns whether the number n has exactly three distinct prime factors and n is less than 1000. return n < 1000 and distinct_prime_factors_count(n) == 3"},{"question":"Develop a code segment that calculates and returns the frequency of a specific word within a provided text string, including the consideration of word boundaries to avoid false positives.","solution":"import re def word_frequency(text, word): Returns the frequency of a specific word within the provided text string. Consider word boundaries to avoid false positives. Parameters: text (str): The text in which to search for the word. word (str): The word to find the frequency of. Returns: int: The frequency of the word in the text. pattern = re.compile(r'b' + re.escape(word) + r'b', re.IGNORECASE) matches = pattern.findall(text) return len(matches)"},{"question":"Create a Python script snippet that Updates High Education: Course Enrollment for Analysis for Professionals. Use if/else or switch/case statements to conditionally perform different actions based on the Bias. Dry-run, then include comments that outline the control flow and how you handle different scenarios.","solution":"def update_course_enrollment(bias, current_enrollment): Updates the course enrollment based on the given bias. Parameters: bias (str): The bias can be 'up', 'down', or 'stable'. current_enrollment (int): The current number of enrollments. Returns: int: The updated number of enrollments. if bias == 'up': updated_enrollment = current_enrollment + 10 elif bias == 'down': updated_enrollment = current_enrollment - 10 elif bias == 'stable': updated_enrollment = current_enrollment else: # If the bias is not one of the expected values, raise an error raise ValueError(\\"Invalid bias. Use 'up', 'down', or 'stable'.\\") # Ensure the enrollment does not fall below zero updated_enrollment = max(0, updated_enrollment) return updated_enrollment"},{"question":"You are working on a 2D game and need to implement a function to handle collision detection for rectangular objects. The function should take in two rectangles, each defined by its top-left corner coordinates and its width and height, and determine if they collide with each other. The top-left corner coordinates are represented as (x, y), where (0, 0) is the top-left corner of the game window.","solution":"def rectangles_collide(rect1, rect2): Determines if two rectangles collide with each other. Each rectangle is defined by its top-left corner coordinates (x, y) and its width and height. Parameters: rect1: tuple (x1, y1, w1, h1) rect2: tuple (x2, y2, w2, h2) Returns: bool: True if the rectangles collide, False otherwise. x1, y1, w1, h1 = rect1 x2, y2, w2, h2 = rect2 if (x1 < x2 + w2 and x1 + w1 > x2 and y1 < y2 + h2 and y1 + h1 > y2): return True else: return False"},{"question":"Automate the following task using Python: given a list of sentences, split the sentences into words and return the result as a list.","solution":"def split_sentences_into_words(sentences): Given a list of sentences, split each sentence into words. Args: sentences (list of str): A list of sentences. Returns: list of list of str: A list where each element is a list of words from the corresponding sentence. return [sentence.split() for sentence in sentences]"},{"question":"Write a function to split a list into n evenly sized parts as much as possible. The parts should be as evenly distributed as possible, meaning the difference in size between any two parts should not be more than 1.","solution":"def split_list(lst, n): Splits the list lst into n evenly sized parts as much as possible. The difference in size between any two parts will not be more than 1. Args: lst (list): The list to be split. n (int): The number of parts to split the list. Returns: list of lists: A list containing n parts of the original list. length = len(lst) quotient, remainder = divmod(length, n) parts = [] start = 0 for i in range(n): end = start + quotient + (1 if i < remainder else 0) parts.append(lst[start:end]) start = end return parts"},{"question":"Write a function that takes a hexadecimal string as an argument and returns the string in reverse order.","solution":"def reverse_hex_string(hex_string): Returns the hexadecimal string in reverse order. Parameters: hex_string (str): The hexadecimal string to be reversed. Returns: str: The reversed hexadecimal string. return hex_string[::-1]"},{"question":"Build a Python module snippet that Updates Extreme Hand hygiene outside the home: Cleaning Hands Before Eating for Analysis for Professionals. Incorporate if/else or switch/case statements to handle different cases based on the Bias. Ensure your control flow is well-documented with comments explaining your approach. Here's some sample python code which implements an update function for extreme hand washing behaviour outside of the home environment. The implementation uses if else statements to determine appropriate responses depending on user input. Note that this is just one possible way to implement such functionality; there may be other approaches as well.","solution":"def update_hand_hygiene_advice(bias): Updates advice on hand hygiene based on the given bias. Parameters: bias (str): the bias indicator which can be 'positive', 'neutral', or 'negative'. Returns: str: Advice message related to hand hygiene behavior. if bias == 'positive': return \\"Great job! Keep consistently cleaning your hands before eating to maintain good hygiene.\\" elif bias == 'neutral': return \\"It's important to remember to clean your hands before eating to prevent the spread of germs.\\" elif bias == 'negative': return \\"You should improve your hand hygiene practices. Always clean your hands before eating to avoid illness.\\" else: return \\"Invalid bias. Please provide a valid bias: 'positive', 'neutral', or 'negative'.\\""},{"question":"Formulate a regular expression pattern to authenticate a Uniform Resource Locator that originates with 'https' and culminates with '.com'. Additionally, the pattern should account for URLs with subdomains and include provisions for standard ports and optional trailing paths.","solution":"import re def is_valid_url(url): Validates if the given URL starts with 'https' and ends with '.com'. It also accounts for subdomains, standard ports, and optional trailing paths. Parameters: url (str): The URL to be validated. Returns: bool: True if the URL is valid, False otherwise. pattern = r'^https://(?:[a-zA-Z0-9-]+.)*[a-zA-Z0-9-]+.com(:[0-9]+)?(/.*)?' return re.match(pattern, url) is not None"},{"question":"How can I create a Python program that compares two strings and checks for their equality, ignoring case sensitivity?","solution":"def compare_strings_case_insensitive(str1, str2): Compares two strings for equality, ignoring case sensitivity. :param str1: First string to compare :param str2: Second string to compare :return: True if strings are equal (ignoring case), False otherwise return str1.lower() == str2.lower()"},{"question":"Create a function that takes in a string and returns true if it is a valid IPv6 address, and false otherwise. A valid IPv6 address consists of eight groups of four hexadecimal digits, separated by colons (e.g., \\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\\"). Note that leading zeros in each group are allowed.","solution":"import re def is_valid_ipv6(address): Returns True if the input string is a valid IPv6 address, otherwise False. # Regular expression pattern for matching a valid IPv6 address. pattern = ( r'([0-9a-fA-F]{1,4}:){7}([0-9a-fA-F]{1,4})' ) re_pattern = re.compile(pattern) return bool(re_match := re_pattern.fullmatch(address))"},{"question":"Write a code snippet to return the element at the middle index of a given array. If the array has an even number of elements, return the element at the lower middle index.","solution":"def middle_element(arr): Returns the element at the middle index of the given array. If the array has an even number of elements, returns the element at the lower middle index. if not arr: raise ValueError(\\"Array is empty\\") middle_index = (len(arr) - 1) // 2 return arr[middle_index]"},{"question":"Write a Python function that takes a string as input and checks if it is a valid IPv4 address. An IPv4 address consists of four decimal numbers separated by periods. Each decimal number should be in the range from 0 to 255, and it cannot have leading zeros (except for the number 0 itself).","solution":"def is_valid_ipv4(address): Check if the provided string is a valid IPv4 address. parts = address.split(\\".\\") # There must be exactly 4 parts if len(parts) != 4: return False for part in parts: # Each part must be a number if not part.isdigit(): return False # Convert the part to an integer num = int(part) # Each number must be between 0 and 255 if num < 0 or num > 255: return False # No leading zeros if len(part) != len(str(num)): return False return True"},{"question":"Propose a solution that enables the reversal of the key-value pairs in a map, while maintaining the functionality for further operations like retrieval, addition, and deletion. This should not exceed an O(n) time complexity and should be adaptable for a large collection of elements without drastically increasing space complexity. Discuss the strategy you would employ to handle possible collisions in keys after the reversion process.","solution":"class BiMap: def __init__(self): self.forward_map = {} self.reverse_map = {} def add(self, key, value): # Add key-value pair if key in self.forward_map: old_value = self.forward_map[key] self.reverse_map[old_value].remove(key) if not self.reverse_map[old_value]: del self.reverse_map[old_value] self.forward_map[key] = value if value in self.reverse_map: self.reverse_map[value].add(key) else: self.reverse_map[value] = {key} def remove(self, key): # Remove key-value pair if key in self.forward_map: value = self.forward_map.pop(key) self.reverse_map[value].remove(key) if not self.reverse_map[value]: del self.reverse_map[value] def get_value(self, key): # Get value using key return self.forward_map.get(key, None) def get_keys(self, value): # Get keys using value return list(self.reverse_map.get(value, set())) def reverse(self): # Return the reversed map return self.reverse_map"},{"question":"Develop an algorithm to not only find the largest number in a given array, but also record its index. Additionally, your solution should exclude using built-in functions for finding the maximum number or any library functions that directly solve the problem.","solution":"def find_largest_number_and_index(arr): Returns a tuple containing the largest number in the array and its index. Args: arr (list of int): A list of integers. Returns: tuple: A tuple where the first element is the largest number and the second element is its index. if not arr: return None, -1 largest_num = arr[0] largest_index = 0 for i in range(1, len(arr)): if arr[i] > largest_num: largest_num = arr[i] largest_index = i return largest_num, largest_index"},{"question":"Create a for loop that prints out each key's value in the nested dictionary structure given below. Observe that the structure contains 'details' as a key containing another dictionary as its value. Treat this inner dictionary similarly to the outer one.","solution":"def print_nested_dict_values(data_dict): Prints out each key's value in the nested dictionary structure. for key, value in data_dict.items(): if isinstance(value, dict): # if value is a dictionary, recursively call the function print_nested_dict_values(value) else: print(value) # Example of calling the function nested_dict = { 'name': 'John', 'age': 30, 'details': { 'address': '123 Main St', 'city': 'Anytown', 'details': { 'zip_code': '12345', 'country': 'CountryName' } } } print_nested_dict_values(nested_dict)"},{"question":"Write an algorithm to determine if an input string is a palindrome, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(s): Determines if the input string is a palindrome, considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = ''.join(char.lower() for char in s if char.isalnum()) # Check if filtered_chars is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Create a Python function that takes in a time string in the format hh:mm:ss and returns the time in seconds. The time string will always be valid and represent a time within a 24-hour period.","solution":"def time_to_seconds(time_str): Converts a time string in the format hh:mm:ss to the total number of seconds. :param time_str: A string representing the time in the format hh:mm:ss :return: An integer representing the total number of seconds hours, minutes, seconds = map(int, time_str.split(':')) return hours * 3600 + minutes * 60 + seconds"},{"question":"We have a function \`f(x) = 2x^3 - x^2 + 5x - 3\`. Define a function \`evalFunc\` that will take two parameters: a string representing the function, and a numeric value to evaluate the function on.","solution":"def evalFunc(func, x): Evaluates the given function string with a numeric value x. Parameters: func (str): The function as a string in terms of 'x'. x (numeric): The numeric value to evaluate the function on. Returns: The result of the function evaluation. return eval(func)"},{"question":"Write a Python program that takes a list of integers and returns the count of elements that have an even number of digits.","solution":"def count_even_digit_numbers(lst): Returns the count of elements in the list that have an even number of digits. return sum(1 for num in lst if len(str(abs(num))) % 2 == 0)"},{"question":"Write a function that computes the Fibonacci sequence up to a given number n, where n is a positive integer less than or equal to 10^6. The solution should have a time complexity of O(n) and a space complexity of O(n).","solution":"def fibonacci_sequence(n): Returns a list of Fibonacci sequence up to n. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write the following python function using the ternary operator. If 'a' is greater than 'b', the function returns 'x', otherwise it returns 'y'.","solution":"def ternary_operator(a, b, x, y): Returns 'x' if 'a' is greater than 'b', otherwise returns 'y'. return x if a > b else y"},{"question":"Develop a Python program that creates a custom iterator for a linked list, allowing you to traverse through its nodes and retrieve elements using the next method.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node def __iter__(self): self.current = self.head return self def __next__(self): if self.current is None: raise StopIteration else: data = self.current.data self.current = self.current.next return data"},{"question":"Create a function in Python that takes an array of integers and an integer 'n'. The function needs to ascertain and return the 'n' largest unique integers from the given array. Bear in mind, the array could contain negative integers and zero, too. It should return an empty array if the number of unique integers in the input array is less than 'n'.","solution":"def n_largest_unique(arr, n): Returns the n largest unique integers from the given array. If the number of unique integers is less than n, returns an empty array. unique_integers = list(set(arr)) if len(unique_integers) < n: return [] unique_integers.sort(reverse=True) return unique_integers[:n]"},{"question":"Can you write a Python function that takes a dictionary as input, where the keys are words and the values are their frequencies, and returns the list of words sorted by their frequencies in descending order?","solution":"def sort_by_frequency(word_dict): Returns a list of words sorted by their frequencies in descending order. :param word_dict: Dictionary with words as keys and frequencies as values :return: List of words sorted by their frequencies in descending order return sorted(word_dict, key=word_dict.get, reverse=True)"},{"question":"Develop a program in python that takes in a list of strings, representing words. Your program should print out the minimal length of a string that is a concatenation of all unique characters from all the strings in the list.","solution":"def minimal_concatenation_length(words): Given a list of strings, this function returns the minimal length of a string that is a concatenation of all unique characters from all the strings. unique_chars = set(''.join(words)) return len(unique_chars)"},{"question":"Write a function in Python that takes a list of integers and returns True if the list contains three consecutive even numbers, otherwise it returns False. Also, write unit tests for your function using unittest or pytest.","solution":"def has_three_consecutive_evens(lst): Returns True if the list contains three consecutive even numbers, otherwise False. Parameters: lst (list): List of integers. Returns: bool: True if there are three consecutive even numbers, False otherwise. count = 0 for num in lst: if num % 2 == 0: count += 1 if count == 3: return True else: count = 0 return False"},{"question":"Use recursion to print the path from any point in an n-dimensional matrix to the top-left corner, passing only through up and left directions. Ensure no path is revisited.","solution":"def find_path(matrix, r, c, path=None): Recursive function to find the path from any point in a matrix to the top-left corner. The movement is restricted to up and left directions, ensuring no revisiting of paths. Parameters: - matrix: The n-dimensional matrix represented as a list of lists - r: The current row index - c: The current column index - path: The path traversed so far (used in recursion, default is None) Returns: - path: List of tuples representing the coordinates from the starting point to the top-left corner if path is None: path = [] # Add current position to path path.append((r, c)) # If we've reached the top-left corner, return the path if r == 0 and c == 0: return path # Initialize list to hold our final path (could be None if no path is found) result_path = None # Move up, if possible if r > 0: result_path = find_path(matrix, r - 1, c, list(path)) if result_path: return result_path # Move left, if possible if c > 0: result_path = find_path(matrix, r, c - 1, list(path)) return result_path"},{"question":"Create a Python program to create a list of the first 20 prime numbers, where each prime number is a palindrome. The program should also calculate and print the sum of the prime numbers in the list.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def is_palindrome(n): Checks if a number is a palindrome. return str(n) == str(n)[::-1] def generate_palindromic_primes(limit): Generates a list of the first \`limit\` palindromic prime numbers. palindromic_primes = [] num = 2 while len(palindromic_primes) < limit: if is_prime(num) and is_palindrome(num): palindromic_primes.append(num) num += 1 return palindromic_primes def sum_of_palindromic_primes(primes): Calculates the sum of a list of numbers. return sum(primes) # Generate the first 20 palindromic prime numbers palindromic_primes = generate_palindromic_primes(20) # Calculate the sum of the palindromic primes palindromic_primes_sum = sum_of_palindromic_primes(palindromic_primes) print(palindromic_primes) print(palindromic_primes_sum)"},{"question":"Create a Python function that reverses the order of words in a string and prints the reversed string. The function should handle cases where there are multiple spaces between words or leading/trailing spaces.","solution":"def reverse_words(s): Reverses the order of words in a string, ignoring multiple spaces and leading/trailing spaces. words = s.split() reversed_words = \\" \\".join(reversed(words)) return reversed_words"},{"question":"Given a string \\"HelloWorld\\", write a function in Python to return the reverse of this string. You are not allowed to use any built-in string manipulation functions or methods (e.g. reversed(), slicing, etc). Additionally, you cannot create any new variables or use any data structures (e.g. lists, arrays) to store intermediate results. Your solution should have a time complexity of O(n), where n is the length of the input string.","solution":"def reverse_string(s): def rec(l, r, chars): if l >= r: return ''.join(chars) chars[l], chars[r] = chars[r], chars[l] return rec(l + 1, r - 1, chars) return rec(0, len(s) - 1, list(s))"},{"question":"Develop a Python function that iterates through a given list and extracts the unique elements, maintaining their original sequence. This must be achieved without the aid of in-built list functions for uniqueness.","solution":"def extract_unique_elements(lst): Extracts the unique elements from the list, maintaining their original sequence. Parameters: lst (list): The list to extract unique elements from. Returns: list: A list containing unique elements in their original sequence. seen = set() unique_elements = [] for item in lst: if item not in seen: unique_elements.append(item) seen.add(item) return unique_elements"},{"question":"Given the piece of erroneous code below, correct and modify it to use dynamic programming principles to derive the maximum product subarray of a given array. Your solution should efficiently handle positive and negative integers in the array.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray within nums. if not nums: return 0 current_max = nums[0] current_min = nums[0] global_max = nums[0] for num in nums[1:]: if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) global_max = max(global_max, current_max) return global_max"},{"question":"Create a program that accepts a tuple and returns a new tuple with the first and last elements removed.","solution":"def remove_first_and_last(tup): Returns a new tuple with the first and last elements removed. Parameters: tup (tuple): The input tuple Returns: tuple: A new tuple with the first and last elements removed. Note: If the length of the tuple is less than or equal to 2, an empty tuple is returned. if len(tup) <= 2: return () return tup[1:-1]"},{"question":"Reverse the order of words in the given sentence, ensuring that the function only uses a single line of code. The function should also handle cases where there are leading or trailing spaces in the sentence. The solution should have a time complexity of O(n) and a space complexity of O(n).","solution":"def reverse_words(sentence): Reverses the order of words in the given sentence. Leading and trailing spaces are ignored. return ' '.join(sentence.strip().split()[::-1])"},{"question":"Write a Python function that takes a list of positive integers as an argument and returns a dictionary. The dictionary should map each unique integer to a tuple containing three elements: boolean values indicating whether it is a prime number, whether it is divisible by any number in the input list (excluding itself), and a list of all its divisors from the input list (excluding itself).","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def divisors(n, num_list): divs = [x for x in num_list if x != n and n % x == 0] return divs def analyze_numbers(num_list): output = {} for num in num_list: num_is_prime = is_prime(num) num_divisors = divisors(num, num_list) num_divisible_by_any = len(num_divisors) > 0 output[num] = (num_is_prime, num_divisible_by_any, num_divisors) return output"},{"question":"Write a function in Python that takes a list of integers as input and returns True if there are three consecutive odd numbers in the list, and False otherwise.","solution":"def has_three_consecutive_odds(nums): Returns True if there are three consecutive odd numbers in the list, and False otherwise. count = 0 for num in nums: if num % 2 != 0: count += 1 if count == 3: return True else: count = 0 return False"},{"question":"Given two integers, implement a Python program to find their LCM (Least Common Multiple) using the GCD (Greatest Common Divisor). Your solution must work for any pair of positive integers and should be efficient, with a time complexity of O(log min(a, b)) where a and b are the two given integers. You are required to write both the GCD and LCM functions from scratch without using any built-in Python functions or libraries.","solution":"def gcd(a, b): Returns the Greatest Common Divisor of a and b. while b != 0: a, b = b, a % b return a def lcm(a, b): Returns the Least Common Multiple of a and b using the Euclidean algorithm for GCD. return a * b // gcd(a, b)"},{"question":"What is the correct syntax for defining a recursive function in Python that calculates the factorial of a given number? Provide the code for the recursive function and also include a code snippet with an intentional error for misdirection. Additionally, include a comment explaining the purpose of each line of code in the correct solution.","solution":"def factorial(n): Calculate the factorial of a given number n using recursion. :param n: An integer for which the factorial is calculated :return: Factorial of the number n # Base case: if n is 0 or 1, return 1 since factorial(0) and factorial(1) are 1. if n == 0 or n == 1: return 1 # Recursive case: factorial(n) = n * factorial(n-1) else: return n * factorial(n-1) # Intentional error snippet for misdirection def faulty_factorial(n): This function contains an intentional error for misdirection. :param n: An integer for which the factorial is calculated :return: Supposed to return the factorial of the number n if n == 0 or n == 1: return 1 else: return n + factorial(n-1) # Incorrect operation; should be multiplication, not addition"},{"question":"Formulate a regular expression pattern to match a string composed only of lowercase, non-repeating, and sequential letters \\"a\\" through \\"e\\", with no other characters. Additionally, implement a function to test this pattern against an input string and return true if the string is valid according to the pattern. Also, provide an erroneous example of a matching string and explain why it doesn't match.","solution":"import re def is_valid_lowercase_sequence(s): Returns True if the string s is composed only of lowercase, non-repeating, and sequential letters \\"a\\" through \\"e\\", with no other characters. # Regular expression pattern to match the specified conditions pattern = r'^(abcde|abcd|abc|ab|a|bcde|bcd|bc|b|cde|cd|c|de|d|e)' return bool(re.match(pattern, s))"},{"question":"Create a python function for calculating the area of a triangle given three side lengths. The function should also check if the given side lengths form a valid triangle before calculating the area.","solution":"import math def is_valid_triangle(a, b, c): Checks if the given sides can form a valid triangle. return a + b > c and a + c > b and b + c > a def triangle_area(a, b, c): Returns the area of a triangle given sides a, b, and c. First checks if the sides form a valid triangle. if not is_valid_triangle(a, b, c): raise ValueError(\\"The given side lengths do not form a valid triangle.\\") # Using Heron's formula to calculate area of the triangle s = (a + b + c) / 2 # semi-perimeter area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Given a list of integers, create a function to shuffle the list so that no adjacent elements are equal. If it's not possible to rearrange the list to meet this condition, the function should return None.","solution":"from collections import Counter import heapq def shuffle_list_no_adjacent_equal(nums): if not nums: return [] counter = Counter(nums) max_count = max(counter.values()) if max_count > (len(nums) + 1) // 2: return None max_heap = [(-count, num) for num, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_num = 0, None shuffled = [] while max_heap: count, num = heapq.heappop(max_heap) shuffled.append(num) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) prev_count, prev_num = count + 1, num return shuffled"},{"question":"Initiate a web scraper to retrieve and parse all information from a website designated by a URL that is to be provided. The scraper should not only accumulate all textual content but also discern and process all HTML tags and attributes. Moreover, you are required to manage the web-page loading delays, handle HTTP errors, and ensure that the scraper doesn't stop ungracefully. Additionally, track and filter out any redundant data. Your solution should be highly efficient and should optimize memory usage while scraping.","solution":"import requests from bs4 import BeautifulSoup from urllib.parse import urljoin import time def scrape_website(url, delay=1): Scrapes the given URL and returns all textual content and HTML tags with attributes. Implements delay to handle web-page loading times and handles HTTP errors gracefully. Parameters: url (str): The URL of the website to be scraped. delay (int): Delay in seconds between requests to avoid overloading the server. Returns: dict: A dictionary with 'text' containing all textual content and 'html' containing all parsed HTML tags and attributes. try: response = requests.get(url) response.raise_for_status() time.sleep(delay) # Handling delay soup = BeautifulSoup(response.content, 'html.parser') text = soup.get_text() html_data = [] for tag in soup.find_all(): html_data.append({ 'tag': tag.name, 'attributes': dict(tag.attrs) }) return {'text': text, 'html': html_data} except requests.exceptions.RequestException as e: return {'error': str(e)} def remove_redundant_text(text): Removes redundant white spaces and newlines from the text. Parameters: text (str): The text to be processed. Returns: str: Processed text without redundant data. return ' '.join(text.split())"},{"question":"Implement a dynamic programming solution for the Longest Common Subsequence problem with two modifications. 1) The solution should not only calculate the length of the LCS, but also print out all the actual LCSs. 2) Instead of using static strings provided in the function for testing, write a function with the use of random string generator function where strings' length, range of random alphanumeric characters must be defined by user input.","solution":"import random import string def generate_random_string(length, char_set): Generates a random string of specified length and character set. Parameters: length (int): The length of the random string to generate. char_set (str): A string containing all possible characters. Returns: str: A random string of the specified length. return ''.join(random.choice(char_set) for _ in range(length)) def lcs(X, Y): Returns the length of the LCS and all LCSs of strings X and Y. Parameters: X (str): The first string. Y (str): The second string. Returns: int, List[str]: The length of the LCS and a list of all LCSs. m, n = len(X), len(Y) L = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) lcs_length = L[m][n] def backtrack(i, j): if i == 0 or j == 0: return {\\"\\"} elif X[i - 1] == Y[j - 1]: return {z + X[i - 1] for z in backtrack(i - 1, j - 1)} else: results = set() if L[i - 1][j] >= L[i][j - 1]: results.update(backtrack(i - 1, j)) if L[i][j - 1] >= L[i - 1][j]: results.update(backtrack(i, j - 1)) return results all_lcs = backtrack(m, n) return lcs_length, list(all_lcs)"},{"question":"Write a function that checks for duplicates in a 2D list. The function should return the coordinates of duplicate elements if any exist. Also, write a function that uses a try/except block to methodically handle scenarios in which the input is not a list or is a list of non-integer/float values. Despite the presence of data that is not an integer or float, your function should be able to continue checking for duplicate numbers in the rest of the list.","solution":"def find_duplicates(matrix): Finds and returns the coordinates of duplicate elements in a 2D list. Arguments: matrix -- the 2D list (list of lists) to check for duplicates Returns: List of tuples where each tuple contains the coordinates (row, column) of duplicates if not isinstance(matrix, list): raise ValueError(\\"Input must be a list\\") seen = {} duplicates = [] for i, row in enumerate(matrix): if not isinstance(row, list): raise ValueError(\\"Each row in the matrix must be a list\\") for j, value in enumerate(row): if not isinstance(value, (int, float)): continue # If the current value is not an integer or float, we skip it if value in seen: duplicates.append((i, j)) duplicates.append(seen[value]) else: seen[value] = (i, j) return duplicates def safe_find_duplicates(matrix): Safely finds and returns the coordinates of duplicate elements in a 2D list. Handles non-list matrices and non-integer/float values within the matrix. Arguments: matrix -- the 2D list (list of lists) to check for duplicates Returns: List of tuples where each tuple contains the coordinates (row, column) of duplicates try: return find_duplicates(matrix) except ValueError as e: print(f\\"ValueError: {e}\\") return []"},{"question":"Suppose you have a list L= [10,20,30,40,50], write a python function to fetch the last element from the list. Additionally, design your function to handle cases in which the list may be empty. In these cases, return None.","solution":"def fetch_last_element(L): Returns the last element of the list L. If the list is empty, returns None. if len(L) == 0: return None return L[-1]"},{"question":"Given a list, write a Python function that prints the sum of the elements of the list.","solution":"def sum_of_list(lst): Returns the sum of the elements in the list. return sum(lst)"},{"question":"Create a program that can output all possible permutations of a given string. The string may contain duplicate characters, and the output should not have any duplicate permutations. The program should handle strings of up to 12 characters in length. The program should also provide the total number of unique permutations for the given string. Additionally, the program should have a time complexity of O(n!), where n is the length of the input string.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the input string 's' and the count of these unique permutations. unique_perms = set(permutations(s)) result = [''.join(p) for p in unique_perms] return result, len(result)"},{"question":"I need help creating a program in Python that can generate a random password. The password should contain at least one number, one uppercase letter, and one lowercase letter. Can you provide a solution for this?","solution":"import random import string def generate_password(length=12): Generates a random password containing at least one number, one uppercase letter, and one lowercase letter. The default length of the password is 12 characters. if length < 3: raise ValueError(\\"Password length should be at least 3 characters\\") # Generate one random number, one uppercase letter, and one lowercase letter password_chars = [ random.choice(string.digits), random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase) ] # Fill the rest of the password length with random choices from all printable characters password_chars += random.choices(string.ascii_letters + string.digits + string.punctuation, k=length-3) # Shuffle the list to ensure randomness in the order of characters random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Write a code to find the shortest possible palindrome which starts from a given string. The string can only contain lowercase alphabets. The code should not use any built-in string manipulation functions or libraries. The solution should have a time complexity of O(n) and a space complexity of O(1). Additionally, the code should not use recursion.","solution":"def shortest_palindrome(s): n = len(s) def compute_failure_table(s): n = len(s) failure = [0] * n j = 0 for i in range(1, n): while j > 0 and s[i] != s[j]: j = failure[j-1] if s[i] == s[j]: j += 1 failure[i] = j else: failure[i] = 0 return failure combined = s + \\"#\\" + s[::-1] failure = compute_failure_table(combined) max_len_palindromic_prefix = failure[-1] suffix_to_add = s[max_len_palindromic_prefix:][::-1] return suffix_to_add + s"},{"question":"Develop a recursive function in Python that accepts an argument in the form of a list of integers and calculates the product of all elements. Use functional programming principles as much as possible. Avoid using any built-in Python functions or libraries to perform the operation as your function should replicate its functionality.","solution":"def product_of_list(numbers): Recursively calculates the product of all elements in a list. if not numbers: return 1 else: return numbers[0] * product_of_list(numbers[1:])"},{"question":"Write a Python program to split a CSV file based on the value of a column","solution":"import csv def split_csv_by_column(input_file, column_name): Split a CSV file into multiple files based on the unique values of a specified column. Parameters: input_file (str): The path of the input CSV file. column_name (str): The name of the column to split the CSV by. Returns: dict: A dictionary where keys are the unique values in the specified column and values are the file names generated. with open(input_file, mode='r', newline='') as infile: reader = csv.DictReader(infile) headers = reader.fieldnames if column_name not in headers: raise ValueError(f\\"Column '{column_name}' does not exist in the input file\\") data_by_value = {} for row in reader: key = row[column_name] if key not in data_by_value: data_by_value[key] = [] data_by_value[key].append(row) output_files = {} for value, rows in data_by_value.items(): output_file = f\\"{value}.csv\\" with open(output_file, mode='w', newline='') as outfile: writer = csv.DictWriter(outfile, fieldnames=headers) writer.writeheader() writer.writerows(rows) output_files[value] = output_file return output_files"},{"question":"Develop an algorithm for sorting a linked list in descending order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def sort_linked_list_descending(head: ListNode) -> ListNode: Sorts a linked list in descending order. :param head: ListNode, the head of the linked list to be sorted :return: ListNode, the head of the sorted linked list if not head or not head.next: return head def merge_sort(head: ListNode) -> ListNode: if not head or not head.next: return head # Split the linked list into two halves slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None left = merge_sort(head) right = merge_sort(mid) return merge(left, right) def merge(left: ListNode, right: ListNode) -> ListNode: dummy = ListNode() tail = dummy # Merge two sorted lists in descending order while left and right: if left.val > right.val: tail.next = left left = left.next else: tail.next = right right = right.next tail = tail.next tail.next = left or right return dummy.next return merge_sort(head)"},{"question":"Create a function in Python to sort a list of dictionaries in ascending order of \\"count\\".","solution":"def sort_dict_list_by_count(dict_list): Sort a list of dictionaries in ascending order of 'count'. :param dict_list: List of dictionaries, each with a 'count' key. :return: Sorted list of dictionaries in ascending order of 'count'. return sorted(dict_list, key=lambda x: x['count'])"},{"question":"Develop a procedure to register a fresh client (real name, electronic mail, confidential code, residential location) into a data structure referred to as 'users', also ensure new clients do not reside within prohibited zones. Implement a password strength checker too.","solution":"users = [] prohibited_zones = {'ZoneA', 'ZoneB', 'ZoneC'} def is_strong_password(password): Check if the provided password is strong. A strong password should be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character. if len(password) < 8: return False has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_special = any(char in '!@#%^&*()-_+=<>?' for char in password) return has_upper and has_lower and has_digit and has_special def register_client(real_name, email, password, location): Register a new client if they do not live in a prohibited zone and their password is strong. # Check if the location is in the prohibited zones if location in prohibited_zones: return \\"Registration failed: Location is in prohibited zone.\\" # Check if the password is strong if not is_strong_password(password): return \\"Registration failed: Weak password.\\" # Register the user user = { 'real_name': real_name, 'email': email, 'password': password, # Note: In a real system, the password should be hashed 'location': location } users.append(user) return \\"Registration successful.\\""},{"question":"Create a function 'addNumbers' that takes in two integers and returns their sum. The function should only accept positive integers between 1 and 100 as inputs. If the input is outside of this range, the function should throw an error with the message \\"Invalid input: input must be a positive integer between 1 and 100\\".","solution":"def addNumbers(a, b): Returns the sum of a and b if both are positive integers between 1 and 100. Raises a ValueError for invalid input. if not (1 <= a <= 100) or not (1 <= b <= 100): raise ValueError(\\"Invalid input: input must be a positive integer between 1 and 100\\") return a + b"},{"question":"Please write a Python program that takes a list of integers as input and returns the integers that are multiples of seven. You can use the modulo operator to check if a number is divisible by seven. The program should prompt the user to enter the list of integers, and then output the multiples of seven.","solution":"def multiples_of_seven(numbers): Returns a list of integers that are multiples of seven from the given list. return [num for num in numbers if num % 7 == 0] # Example usage: # user_input = input(\\"Enter a list of integers separated by spaces: \\") # numbers = list(map(int, user_input.split())) # print(multiples_of_seven(numbers))"},{"question":"Write Python code to print the last 3 elements of a list in reverse order. If the list has less than 3 elements, print all elements in reverse order.","solution":"def print_last_three_reverse(lst): Prints the last three elements of the list in reverse order. If the list contains less than three elements, it prints all elements in reverse order. # Calculate the slice based on the length of the list if len(lst) >= 3: elements_to_print = lst[-3:] else: elements_to_print = lst # Print elements in reverse order for element in reversed(elements_to_print): print(element)"},{"question":"Create a program that replaces all occurrences of a given substring in a sentence while ignoring the case sensitivity. The program should also count the number of times the substring occurs in the sentence. The program should handle cases where the substring occurs partially in words and should not replace the substring if it is a part of another word. In addition, the program should handle cases where the sentence contains special characters and numbers mixed with the letters.","solution":"import re def replace_substring(sentence, old_substring, new_substring): Replaces all occurrences of old_substring in the sentence with new_substring while ignoring case sensitivity. Also counts the number of occurrences of old_substring in the sentence. Parameters: sentence (str): The sentence within which to replace the substring. old_substring (str): The substring to be replaced. new_substring (str): The substring to replace with. Returns: tuple: A tuple containing the modified sentence and the count of occurrences of old_substring. pattern = re.compile(r'b' + re.escape(old_substring) + r'b', re.IGNORECASE) matches = pattern.findall(sentence) count = len(matches) result_sentence = pattern.sub(new_substring, sentence) return result_sentence, count"},{"question":"Write a function in Python programming language which accepts a float as an input parameter and returns the rightmost digit before the decimal point from the supplied floating-point number.","solution":"def rightmost_digit_before_decimal(number): Returns the rightmost digit before the decimal point from the supplied floating-point number. Params: - number (float): The input floating-point number. Returns: - int: The rightmost digit before the decimal point. return abs(int(number)) % 10"},{"question":"Given a list of numbers in Python, design a function that classifies each number based on its last digit. The function should return a dictionary where the keys are the unique last digits encountered in the list, and the values are lists containing the numbers that end with that last digit.","solution":"def classify_by_last_digit(numbers): Classifies each number based on its last digit and returns a dictionary. :param numbers: List of integers :return: Dictionary where keys are unique last digits and values are lists of numbers with that last digit result = {} for number in numbers: last_digit = number % 10 if last_digit not in result: result[last_digit] = [] result[last_digit].append(number) return result"},{"question":"Generate a Python program to print the numbers from 1 to n in increasing order.","solution":"def print_numbers(n): Returns a list of numbers from 1 to n in increasing order. return list(range(1, n+1))"},{"question":"Given a sorted list of integers \`lst\` and a target number \`target\`, write a function \`find_target_indices\` that returns a list of indices where \`target\` is found in \`lst\`. If \`target\` is not found, return an empty list. Your solution should have a time complexity of O(log n) and should not use built-in search functions like \`index()\`.","solution":"def binary_search_left(lst, target): left, right = 0, len(lst) while left < right: mid = (left + right) // 2 if lst[mid] < target: left = mid + 1 else: right = mid return left def binary_search_right(lst, target): left, right = 0, len(lst) while left < right: mid = (left + right) // 2 if lst[mid] <= target: left = mid + 1 else: right = mid return left def find_target_indices(lst, target): left_idx = binary_search_left(lst, target) right_idx = binary_search_right(lst, target) # If target is not found, the indices should not be equal to each other since the range would be empty if left_idx == right_idx: return [] # The target is found from left_idx to right_idx-1 return list(range(left_idx, right_idx))"},{"question":"Create a function that encrypts a string using the Caesar Cipher with a given shift value.","solution":"def caesar_cipher(text, shift): Encrypts the input text using Caesar Cipher with the given shift. :param text: str, the text to be encrypted :param shift: int, the number of positions each letter is shifted :return: str, the encrypted text encrypted_text = [] for char in text: if char.isalpha(): shift_amount = shift % 26 ascii_offset = 65 if char.isupper() else 97 new_char = chr(((ord(char) - ascii_offset + shift_amount) % 26) + ascii_offset) encrypted_text.append(new_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Given two arrays of integers, construct a function that merges these into a single list, where each element from the first array is followed immediately by its corresponding element from the second array. In Python, implement this functionality and ensure that the function can handle arrays of different lengths by filling in the shorter array's spots with a user-specified filler value. Your programming skill will be assessed based on code clarity, efficiency, and the ability to handle edge cases.","solution":"def merge_arrays(arr1, arr2, filler=None): Merges two arrays into a single list, where each element from the first array is followed immediately by its corresponding element from the second array. If the arrays have different lengths, the shorter array's missing elements are filled with the specified filler value. Parameters: arr1 (list): The first array. arr2 (list): The second array. filler (Any): The value used to fill the shorter array's spots if the arrays have different lengths. Returns: list: The merged list. max_length = max(len(arr1), len(arr2)) extended_arr1 = arr1 + [filler] * (max_length - len(arr1)) extended_arr2 = arr2 + [filler] * (max_length - len(arr2)) merged_list = [] for i in range(max_length): merged_list.append(extended_arr1[i]) merged_list.append(extended_arr2[i]) return merged_list"},{"question":"Create a function to calculate the exponent of a given number x raised to power y. The function should have a time complexity of O(log y) and a space complexity of O(1). Additionally, you are not allowed to use any built-in exponentiation functions or operators (such as \`**\` or \`Math.pow\`). Furthermore, you should implement the algorithm using bitwise operations only.","solution":"def bitwise_exponentiation(x, y): Calculate the exponent of a given number x raised to the power y using bitwise operations. result = 1 base = x while y > 0: # If y is odd, multiply the base with the result if y & 1: result *= base # Divide y by 2 y >>= 1 # Multiply base with itself base *= base return result"},{"question":"Write a code to multiply two numbers without using the multiplication operator. Additionally, you are not allowed to use any looping constructs (such as for, while, etc.) or any built-in functions or methods that perform multiplication. You can only use basic arithmetic operations such as addition, subtraction, division, and modulus.","solution":"def multiply(a, b): Multiplies two numbers without using the multiplication operator. # Helper function to add a number to itself 'b' times def add_to_itself(a, b, current=0, result=0): if b == 0: return result else: # If b is negative, convert both to positive or handle it separately if b < 0: return -add_to_itself(a, -b, current, result) return add_to_itself(a, b-1, current + 1, result + a) return add_to_itself(a, b)"},{"question":"Write a Python program that takes two lists as arguments and returns a new list containing the elements that appear in both lists. Implement a time-efficient solution without using any built-in functions such as intersection methods or data structures like sets. Your code should only use loops, conditionals, and basic list operations.","solution":"def intersection(list1, list2): Returns a new list containing the elements that appear in both input lists. common_elements = [] # Iterate through each element in the first list for element in list1: # If the element is also in the second list and not already in the result list, add it if element in list2 and element not in common_elements: common_elements.append(element) return common_elements"},{"question":"What is the python code to create an array variable with a default value of 0 for an array of three integers? And what function should be implemented to modify and read the values of this array variable? Also, please provide an example of how to call this function and print the values of the array variable.","solution":"class ArrayManager: def __init__(self): # Initializes an array with a default value of 0 for an array of three integers. self.array = [0, 0, 0] def modify_array(self, index, value): Modify the array at the given index with the provided value. :param index: Index of the array to modify :param value: New value to set at the specified index if 0 <= index < len(self.array): self.array[index] = value else: raise IndexError(\\"Index out of bounds\\") def read_array(self): Returns the current values of the array. return self.array # Example of how to call this function and print the values of the array variable array_manager = ArrayManager() array_manager.modify_array(0, 10) array_manager.modify_array(1, 20) array_manager.modify_array(2, 30) print(array_manager.read_array())"},{"question":"Given a set of candidate numbers (without duplicates) and a target number, write a Python function to find all unique combinations in candidates where the candidate numbers sums to the target. The same number may be chosen from candidates an unlimited number of times. The candidates are sorted in non-descending order.","solution":"def combination_sum(candidates, target): Returns all unique combinations in candidates where the candidate numbers sum to the target. Each number in candidates may be chosen an unlimited number of times. results = [] candidates.sort() def backtrack(remain, combo, start): if remain == 0: results.append(list(combo)) return elif remain < 0: return for i in range(start, len(candidates)): # include candidates[i] in the combination combo.append(candidates[i]) # since we can reuse the same elements, \`i\` is passed, not \`i+1\` backtrack(remain - candidates[i], combo, i) # backtrack, remove the last candidate combo.pop() backtrack(target, [], 0) return results"},{"question":"Write a Python program that takes a list as an input from the user. This list can have multiple types of data in it i.e. strings, integers, and floats. Your program should extract all the strings from the list and then arrange them in alphabetical order. Your program should also separate odd numbers and even numbers from the list and print them separately in two different lists. Assume that all integers in the list will be whole numbers.","solution":"def process_list(input_list): Processes the input list to extract strings and sort them alphabetically, and separate odd and even numbers into different lists. Parameters: input_list (list): The list of mixed data types. Returns: tuple: containing three elements - sorted_strings (list): The sorted list of strings. odd_numbers (list): The list of odd numbers. even_numbers (list): The list of even numbers. strings = [] odd_numbers = [] even_numbers = [] for item in input_list: if isinstance(item, str): strings.append(item) elif isinstance(item, int): if item % 2 == 0: even_numbers.append(item) else: odd_numbers.append(item) sorted_strings = sorted(strings) return sorted_strings, odd_numbers, even_numbers"},{"question":"Given the list of numbers, create a function in Python to return the second largest number in the list. The function should have a time complexity of O(n), where n is the length of the list. The space complexity should be O(1).","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list has fewer than 2 unique numbers, returns None. if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a code that converts a decimal number to its binary representation, but you are not allowed to use any built-in functions or libraries for converting decimal to binary. You can only use basic arithmetic operations like addition, subtraction, multiplication, and division. The decimal number can be up to 1,000,000.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation. if n == 0: return \\"0\\" binary_number = \\"\\" while n > 0: binary_number = str(n % 2) + binary_number n = n // 2 return binary_number"},{"question":"During the three day festival of Diwali, people would usually buy firecrackers and eat various dishes. Write a python function that takes the number of firecrackers and dishes as an input, and prints out a sentence that describes the number of firecrackers and dishes.","solution":"def diwali_activities(firecrackers, dishes): Takes the number of firecrackers and dishes as input, and returns a sentence that describes the number of firecrackers and dishes. Parameters: firecrackers (int): Number of firecrackers. dishes (int): Number of dishes. Returns: str: A sentence that describes the number of firecrackers and dishes. return f\\"During Diwali, people bought {firecrackers} firecrackers and ate {dishes} different dishes.\\""},{"question":"student_id = [101, 102, 103, 104, 105] student_name = ['Alfred', 'John', 'Omar', 'Hassan', 'Jake'] student_marks = [81, 76, 88, 85, 79] Write a Python function called \\"calculate_average\\" that receives the list of student marks as a parameter and calculates the average of the class. The function should have an additional functionality where, if a student's name is provided as an argument, the function should return the student's individual average instead of the class average. In short, the function should have two optional arguments: marks (which is a list) and name (which is a string). The function should return the average marks of all students if the name is not provided, and it should return the average marks of the specific student if the name is provided. In addition, please write a function to check the correctness of the \\"calculate_average\\" function using the provided lists as arguments.","solution":"student_id = [101, 102, 103, 104, 105] student_name = ['Alfred', 'John', 'Omar', 'Hassan', 'Jake'] student_marks = [81, 76, 88, 85, 79] def calculate_average(marks=student_marks, name=None): Calculate the average of the class marks or an individual student's mark. :param marks: List of student marks :param name: Student's name whose average marks need to be calculated :return: Average marks of the class or the specific student if name is not None: if name in student_name: index = student_name.index(name) return student_marks[index] else: raise ValueError(f\\"Student with the name '{name}' does not exist.\\") else: if len(marks) == 0: return 0.0 return sum(marks) / len(marks)"},{"question":"Write a Python method to determine if a string contains all unique characters. Return True if all characters in the string are unique, False otherwise. The string should not contain any whitespace characters.","solution":"def has_unique_characters(s): Determines if the string s contains all unique characters. return len(s) == len(set(s))"},{"question":"Write an algorithm in Python to sort strings in a given list lexicographically.","solution":"def sort_strings_lexicographically(strings): Sorts a list of strings lexicographically. Parameters: - strings: list of strings Returns: - list of strings sorted lexicographically return sorted(strings)"},{"question":"Write a Python function called \`remove_repeated_characters\` that takes in a string as an argument and returns a new string with all repeated characters removed, while maintaining the original order of the characters.","solution":"def remove_repeated_characters(s): Returns a new string with all repeated characters removed, maintaining the original order. :param s: str - The input string. :return: str - The string with repeated characters removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Develop a Python subroutine that, when supplied with a specific ordinal numeral as a parameter, computes and returns the corresponding Catalan number from the mathematical series known as the Catalan sequence. Additionally, implement a memoization technique to optimize the computation for large ordinal numbers. The subroutine should also handle invalid inputs and edge cases, returning appropriate error messages.","solution":"def catalan_number(n, memo=None): Returns the nth Catalan number using memoization. Parameters: n (int): The ordinal position of the desired Catalan number. Returns: int: The nth Catalan number. if not isinstance(n, int) or n < 0: return \\"Error: Invalid input. Please enter a non-negative integer.\\" # Initialize memoization dictionary if not provided if memo is None: memo = {} if n in memo: return memo[n] # Base case if n == 0 or n == 1: return 1 # Recursive computation with memoization res = 0 for i in range(n): res += catalan_number(i, memo) * catalan_number(n - 1 - i, memo) memo[n] = res return res"},{"question":"28. Write a Python program to print all integers in a list that are divisible by 3 but not by 5.","solution":"def divisible_by_3_not_5(lst): Returns a list of integers from the given list that are divisible by 3 but not by 5. result = [x for x in lst if x % 3 == 0 and x % 5 != 0] return result"},{"question":"Write a function in Python to concatenate two strings, ensuring that the resultant string has alternating cases starting with a capital letter. If the combined length exceeds 20 characters, return an error message.","solution":"def concatenate_alternating_cases(str1, str2): Concatenates two strings with alternating cases starting with capital letters. If the combined length exceeds 20 characters, it returns an error message. combined_str = str1 + str2 if len(combined_str) > 20: return \\"Error: Combined string length exceeds the limit of 20 characters.\\" result = [] upper = True # Flag to track whether to use uppercase or lowercase for char in combined_str: if char.isalpha(): if upper: result.append(char.upper()) else: result.append(char.lower()) upper = not upper else: result.append(char) return ''.join(result)"},{"question":"Write a Python script that merges the following two provided dictionaries. Remember, the first dictionary should not lose its original data after the merge.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries. The first dictionary should not lose its original data after the merge. If there are overlapping keys, the values from the second dictionary should be used. merged_dict = dict1.copy() # Make a copy of the first dictionary to preserve original data merged_dict.update(dict2) # Update with items from the second dictionary return merged_dict"},{"question":"Create a scoreboard for a game of basketball using a Python dictionary. Two teams, \\"Red\\" and \\"Blue\\", will have scores that may exceed 100 points. Calculate the point difference between the two teams and also write a function to update the score for each team. The function should accept the team name and the number of points scored. Do not use any in-built or external libraries.","solution":"class Scoreboard: def __init__(self): self.scores = {\\"Red\\": 0, \\"Blue\\": 0} def update_score(self, team, points): Updates the score for the given team by adding the specified points. Args: team (str): The name of the team (\\"Red\\" or \\"Blue\\"). points (int): The number of points to add to the team's score. if team in self.scores: self.scores[team] += points def point_difference(self): Returns the point difference between the two teams. return abs(self.scores[\\"Red\\"] - self.scores[\\"Blue\\"])"},{"question":"Given an array of strings and a string, write a program to find the first index of the string in the array. If the string is not found, return -1. The array will always have at least 1000 elements and each string in the array will have a length of at most 100 characters. The input string will always have a length of at most 100 characters and will contain only lowercase letters. The program should be able to handle large inputs efficiently.","solution":"def find_first_index(array, target): Returns the first index of the target string in the array. If the target is not found, returns -1. try: return array.index(target) except ValueError: return -1"},{"question":"Write a Python program which includes a feature that can calculate the sum of all the prime numbers from 1 to the user's given number. Additionally, the program should also be able to handle and validate user inputs to ensure they are positive integers.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def sum_of_primes(upto): Calculate the sum of all prime numbers from 1 to 'upto'. return sum(n for n in range(2, upto + 1) if is_prime(n)) def validate_input(value): Validate if the input is a positive integer. try: ivalue = int(value) if ivalue <= 0: raise ValueError return ivalue except ValueError: raise ValueError(\\"The input must be a positive integer.\\")"},{"question":"Use the given code, which defines a function 'analyze_word' and a list 'words', to write a program that uses the 'analyze_word' function to analyze each word in the 'words' list and print the results. The 'analyze_word' function takes a string as input, reverses it, and returns it. Ensure that the program handles cases where the 'words' list may contain non-string elements by including error handling.","solution":"def analyze_word(word): Takes a string as input, reverses it, and returns it. return word[::-1] def analyze_words(words): Takes a list of words, analyzes each word using the analyze_word function and returns a list of the analysis results. It handles non-string elements in the list. results = [] for word in words: try: if not isinstance(word, str): raise ValueError(f\\"Element is not a string: {word}\\") result = analyze_word(word) results.append(result) except ValueError as e: results.append(str(e)) return results # Example usage: words = [\\"hello\\", \\"world\\", 123, \\"python\\", None] results = analyze_words(words) print(results)"},{"question":"Given the root of a binary tree, you need to implement two functions: \`tree_to_list(root)\` that converts the binary tree to a doubly linked list in-place, and \`list_to_tree(root)\` that converts the doubly linked list back to a binary tree. The conversion should be done in such a way that the order of nodes in the doubly linked list is the same as an in-order traversal of the binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class ListNode: def __init__(self, val=0, prev=None, next=None): self.val = val self.prev = prev self.next = next def tree_to_list(root): if not root: return None dummy = ListNode(0) prev = dummy def inorder(node): nonlocal prev if not node: return inorder(node.left) # Inorder traversal: left curr = ListNode(node.val) # Create ListNode for current TreeNode prev.next = curr curr.prev = prev prev = curr inorder(node.right) # Inorder traversal: right inorder(root) head = dummy.next if head: head.prev = None return head def list_to_tree(head): if not head: return None # Helper function to convert list to binary tree def sorted_list_to_bst(start, end): if start > end: return None mid = (start + end) // 2 left_child = sorted_list_to_bst(start, mid - 1) nonlocal head root = TreeNode(head.val) root.left = left_child head = head.next root.right = sorted_list_to_bst(mid + 1, end) return root # Count the number of nodes in the doubly linked list n = 0 temp = head while temp: n += 1 temp = temp.next return sorted_list_to_bst(0, n - 1)"},{"question":"Show me an example of a simple function f that takes in a string and returns the total count of characters that are in uppercase","solution":"def count_uppercase_characters(input_string): Returns the count of uppercase characters in the input string. return sum(1 for char in input_string if char.isupper())"},{"question":"Write a Python function called \`rotate_list\` that takes in three parameters: \`nums\`, an integer \`k\`, and a boolean \`direction\`. The \`nums\` parameter is a list of integers. The function should rotate the list \`nums\` by \`k\` positions in the specified \`direction\`. If \`direction\` is \`True\`, the rotation should be to the right; if \`direction\` is \`False\`, the rotation should be to the left. The function should return the modified list \`nums\`.","solution":"def rotate_list(nums, k, direction): Rotates the list nums by k positions. If direction is True, rotates to the right. If direction is False, rotates to the left. if not nums: return nums k %= len(nums) if direction: return nums[-k:] + nums[:-k] else: return nums[k:] + nums[:k]"},{"question":"Please write a Python function that computes the Lowest Common Multiple (LCM) of an array of integers. In addition, ensure that the solution is optimized for larger number sets and can handle edge cases, such as when the array is empty or includes negative integers.","solution":"from math import gcd from functools import reduce def lcm(a, b): Returns the Least Common Multiple of a and b. if a == 0 or b == 0: return 0 return abs(a * b) // gcd(a, b) def lcm_of_array(numbers): Returns the Least Common Multiple of an array of integers. if not numbers: return 0 return reduce(lcm, numbers)"},{"question":"Given a list of integers, generate two new lists: one in reverse order and one with every second element. Additionally, interleave the two generated lists element-wise, starting with the reversed list. Do not use built-in functions to reverse the list or to get every second element.","solution":"def reverse_list(lst): Returns the reverse of the given list. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst def every_second_element(lst): Returns a list containing every second element of the given list. second_elements_lst = [] for i in range(1, len(lst), 2): second_elements_lst.append(lst[i]) return second_elements_lst def interleave_lists(lst1, lst2): Returns a new list by interleaving elements of lst1 and lst2. interleaved_lst = [] len1, len2 = len(lst1), len(lst2) min_len = min(len1, len2) for i in range(min_len): interleaved_lst.append(lst1[i]) interleaved_lst.append(lst2[i]) if len1 > min_len: interleaved_lst.extend(lst1[min_len:]) elif len2 > min_len: interleaved_lst.extend(lst2[min_len:]) return interleaved_lst def process_list(lst): Given a list of integers, generates two new lists (one in reverse order and one with every second element), and interleaves them element-wise. reversed_lst = reverse_list(lst) second_elements_lst = every_second_element(lst) interleaved_lst = interleave_lists(reversed_lst, second_elements_lst) return interleaved_lst"},{"question":"Manipulate a given list in Python where every element in the list has to be doubled. The resulting list should be sorted in descending order.","solution":"def manipulate_list(lst): Doubles each element in the list and returns the list sorted in descending order. Parameters: lst (list): A list of numbers. Returns: list: A list where each element is doubled and sorted in descending order. doubled_list = [2 * x for x in lst] doubled_list.sort(reverse=True) return doubled_list"},{"question":"Given two arbitrary strings, how can I find the longest common substring in them using Python?","solution":"def longest_common_substring(s1, s2): Returns the longest common substring between two strings s1 and s2. # Initialize a table to store lengths of longest common suffixes m, n = len(s1), len(s2) lcsuff = [[0] * (n+1) for _ in range(m+1)] longest = 0 end_index_s1 = 0 # Build the table in bottom-up fashion for i in range(1, m+1): for j in range(1, n+1): if s1[i-1] == s2[j-1]: lcsuff[i][j] = lcsuff[i-1][j-1] + 1 if lcsuff[i][j] > longest: longest = lcsuff[i][j] end_index_s1 = i else: lcsuff[i][j] = 0 # Longest common substring in s1 start_index_s1 = end_index_s1 - longest return s1[start_index_s1:end_index_s1]"},{"question":"How can I write a Python program to generate unique 12-digit hexadecimal codes, where each code must contain at least one uppercase letter, one lowercase letter, one number, and one special character? Additionally, the program should also be able to check if any generated code is already in use by querying a remote database API with a timeout of 5 seconds. If a code is already in use, the program should generate a new code. Finally, the program should output the first 20 codes that pass these requirements, sorted alphabetically.","solution":"import random import string import requests def generate_random_code(): characters = string.ascii_letters + string.digits + string.punctuation while True: code = ''.join(random.choices(characters, k=12)) if (any(c.isupper() for c in code) and any(c.islower() for c in code) and any(c.isdigit() for c in code) and any(c in string.punctuation for c in code)): return code def is_code_in_use(code): try: response = requests.get(f'https://example.com/check-code/{code}', timeout=5) response.raise_for_status() return response.json().get('in_use', False) except requests.RequestException: return True # consider it in use in case of any error def generate_unique_codes(count=20): unique_codes = set() while len(unique_codes) < count: code = generate_random_code() if not is_code_in_use(code): unique_codes.add(code) return sorted(unique_codes) # Example usage: # Note that this will not run correctly without a working API endpoint. # unique_codes = generate_unique_codes() # print(unique_codes)"},{"question":"Write a function in Python that takes in two strings as input and concatenates them together. The function should check if either of the input strings is None or empty, and if so, it should raise a ValueError. Additionally, the function should ignore any leading or trailing whitespace in the input strings before concatenating them. The function should have a time complexity of O(n), where n is the length of the concatenated string, and a space complexity of O(1).","solution":"def concatenate_strings(str1, str2): Concatenates two strings after trimming whitespace. Args: str1 (str): First input string. str2 (str): Second input string. Returns: str: Concatenated result of both input strings. Raises: ValueError: If any of the strings is None or empty (after trimming). if str1 is None or str2 is None: raise ValueError(\\"Input strings cannot be None\\") trimmed_str1 = str1.strip() trimmed_str2 = str2.strip() if not trimmed_str1 or not trimmed_str2: raise ValueError(\\"Input strings cannot be empty after trimming\\") return trimmed_str1 + trimmed_str2"},{"question":"Write a Python code to translate a string into morse code by using an external text file that contains the morse code equivalences. The program should be able to handle uppercase and lowercase letters, digits, and a few punctuation marks. Your program should also include error handling for characters not found in the morse code equivalences list. Additionally, provide a function to encode the message into morse code and another function to decode the morse code back into the original message.","solution":"def load_morse_code(file_path): Load morse code mappings from a file. morse_code = {} with open(file_path, 'r') as file: for line in file: char, code = line.strip().split() morse_code[char] = code return morse_code def encode_to_morse(message, morse_code_dict): Encode a message to morse code. encoded_message = [] for char in message.upper(): if char in morse_code_dict: encoded_message.append(morse_code_dict[char]) else: encoded_message.append('?') # Use '?' for unknown characters return ' '.join(encoded_message) def decode_from_morse(encoded_message, morse_code_dict): Decode a morse code message to the original message. reversed_morse_code_dict = {v: k for k, v in morse_code_dict.items()} decoded_message = [] for code in encoded_message.split(): if code in reversed_morse_code_dict: decoded_message.append(reversed_morse_code_dict[code]) else: decoded_message.append('?') # Use '?' for unknown codes return ''.join(decoded_message)"},{"question":"Write a Python program to generate a palindrome phrase using a randomly generated string of characters, which consists of lowercase letters and digits. The palindrome phrase must contain at least 8 characters and at least two digits. Additionally, the program should output the number of attempts it took to generate the palindrome phrase.","solution":"import random import string def generate_palindrome_phrase(): Generate a palindrome phrase using a randomly generated string of characters, containing lowercase letters and digits. The palindrome phrase must contain at least 8 characters and at least two digits. The function returns the palindrome phrase and the number of attempts it took to generate it. attempts = 0 def is_valid(s): return len(s) >= 8 and sum(c.isdigit() for c in s) >= 2 while True: attempts += 1 random_str = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(8, 20))) if is_valid(random_str): palindrome = random_str + random_str[::-1] return palindrome, attempts"},{"question":"Write a Python script to generate the Fibonacci sequence up to n using a recursive function.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth number using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: seq = fibonacci(n - 1) seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Write the function that takes in two lists of numbers, adds corresponding elements, and returns a new list. The function should also handle cases where the lists are of different lengths, and in such cases, the function should continue adding the remaining elements from the longer list to the ongoing result. Additionally, the function should gracefully handle situations where one or both of the lists are not valid, raising an appropriate exception.","solution":"def add_lists(list1, list2): Takes in two lists of numbers, adds corresponding elements, and returns a new list. If the lists are of different lengths, the function adds the remaining elements from the longer list to the result. Raises TypeError if inputs are not lists or contain non-numeric elements. if not isinstance(list1, list) or not isinstance(list2, list): raise TypeError(\\"Both inputs must be lists.\\") for item in list1 + list2: if not isinstance(item, (int, float)): raise TypeError(\\"Lists must contain only numbers.\\") max_length = max(len(list1), len(list2)) result = [] for i in range(max_length): num1 = list1[i] if i < len(list1) else 0 num2 = list2[i] if i < len(list2) else 0 result.append(num1 + num2) return result"},{"question":"Write a Python code to check if two strings are anagrams of each other without using any built-in or library function. Consider case sensitivity and spaces between words.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Args: str1: First string. str2: Second string. Returns: bool: True if str1 and str2 are anagrams, otherwise False. # Remove spaces str1 = str1.replace(\\" \\", \\"\\") str2 = str2.replace(\\" \\", \\"\\") # If the lengths are not equal, they cannot be anagrams if len(str1) != len(str2): return False # Create dictionaries to count character occurrences char_count1 = {} char_count2 = {} for ch in str1: if ch in char_count1: char_count1[ch] += 1 else: char_count1[ch] = 1 for ch in str2: if ch in char_count2: char_count2[ch] += 1 else: char_count2[ch] = 1 # Compare both dictionaries return char_count1 == char_count2"},{"question":"Write a python function that takes a list of numbers as an input and returns a new list where each element is the sum of all numbers except the element at the same index in the input list. For example, given the list [1, 2, 3, 4], the function should return [9, 8, 7, 6].","solution":"def sum_exclude_index(lst): Returns a list where each element is the sum of all numbers in the input list except the element at the same index. total_sum = sum(lst) return [total_sum - x for x in lst]"},{"question":"Write a Python function called \\"calculate_quartiles\\" that takes a list of numbers as an argument and returns a tuple of the first quartile, median, and third quartile. If the list is empty, the function should raise a ValueError.","solution":"import numpy as np def calculate_quartiles(numbers): Returns the first quartile, median, and third quartile of a list of numbers. Parameters: numbers (list): A list of numbers Returns: tuple: A tuple containing the first quartile, median, and third quartile Raises: ValueError: If the list is empty if not numbers: raise ValueError(\\"The list is empty\\") q1 = np.percentile(numbers, 25) median = np.percentile(numbers, 50) q3 = np.percentile(numbers, 75) return (q1, median, q3)"},{"question":"Write a function in Python to check if an integer is a prime number. The function should also return the smallest prime factor of the integer if it is not a prime number.","solution":"def check_prime(num): Checks if a number is prime. Returns a tuple (is_prime, smallest_prime_factor). is_prime is True if num is prime, otherwise False. smallest_prime_factor is None if num is prime, otherwise the smallest prime factor of num. if num <= 1: return (False, None) if num == 2: return (True, None) if num % 2 == 0: return (False, 2) for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return (False, i) return (True, None)"},{"question":"Write a regular expression that matches all English alphabet letters, both uppercase and lowercase. Then, modify this expression to exclude the letters 'a', 'e', 'i', 'o', 'u' (both uppercase and lowercase). Finally, write a function in Python which uses this regular expression to find and print all the consonants in a given string.","solution":"import re # Regular expression to match all English alphabet letters excluding 'a', 'e', 'i', 'o', 'u' (both uppercase and lowercase) consonant_regex = re.compile(r'[^aeiouAEIOU]') def find_consonants(input_string): Finds and returns all consonants in the given input_string as a list. return consonant_regex.findall(input_string)"},{"question":"Given an integer n, write a Python code to print the pattern of asterisks as described in the test. Additionally, the program should be versatile enough to handle different cases: when n is a positive, a negative, or a zero.","solution":"def print_asterisk_pattern(n): Prints a pattern of asterisks based on the input integer n. :param n: an integer input if n == 0: return \\"\\" elif n > 0: for i in range(1, n + 1): print(\\"*\\" * i) else: for i in range(-n, 0, -1): print(\\"*\\" * i)"},{"question":"Create a function in Python that prints out a stringified version of a list of integers in reverse order, but exclude any numbers that are divisible by 3.","solution":"def reverse_exclude_divisible_by_3(lst): Returns a stringified version of the list of integers in reverse order, excluding any numbers that are divisible by 3. filtered_reversed_lst = [str(x) for x in reversed(lst) if x % 3 != 0] return \\" \\".join(filtered_reversed_lst)"},{"question":"Create a Python program that converts all string elements in a given list to their uppercase equivalent. Additionally, the program must filter and remove any elements that are not string type before converting them.","solution":"def convert_and_filter_uppercase(lst): Converts all string elements in the given list to their uppercase equivalent, filtering out any non-string elements. :param lst: List of elements :return: List of uppercase strings return [element.upper() for element in lst if isinstance(element, str)]"},{"question":"Write a function that takes in two lists of integers and returns a list that contains only the common elements between the two lists. The function should have a time complexity of O(n), where n is the length of the longer list. Additionally, the function should not use any additional data structures or libraries, and it should also not use any built-in methods for list manipulation such as sort(), set(), or intersection().","solution":"def common_elements(list1, list2): Returns a list containing the common elements between list1 and list2. The function should have a time complexity of O(n), where n is the length of the longer list. Args: list1, list2: Lists of integers. Returns: A list of integers that are common to both input lists. # Ensure list1 is the shorter list for optimization if len(list1) > len(list2): list1, list2 = list2, list1 common_list = [] # Iterate through both lists to find common elements for item in list1: if item in list2: common_list.append(item) list2.remove(item) return common_list"},{"question":"In Python, how would you implement a function that returns the second smallest element in a list of integers? The list to be sorted is as follows. In addition, the function should only use the built-in functions of Python and not use any external libraries.","solution":"def second_smallest(numbers): Returns the second smallest element in a list of integers. If the list has fewer than 2 distinct elements, return None. if len(numbers) < 2: return None # Remove duplicates by converting to a set unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None # Sort the list to find the second smallest unique_numbers.sort() return unique_numbers[1]"},{"question":"Design a Python function that accepts a list of strings and returns a dictionary where the keys are the input strings, and the values are the number of consonants in those strings.","solution":"def count_consonants(strings): Accepts a list of strings and returns a dictionary where the keys are the input strings, and the values are the number of consonants in those strings. consonants = set(\\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\\") result = {} for string in strings: count = sum(1 for char in string if char in consonants) result[string] = count return result"},{"question":"Write a python program to calculate the average of each row of a 2D list (matrix), where the list dimensions are uneven.","solution":"def row_averages(matrix): Returns a list containing the average of each row of the input 2D list (matrix). :param matrix: List[List[float]] - A 2D list (matrix) with uneven dimensions. :return: List[float] - A list of row averages. averages = [] for row in matrix: if len(row) > 0: row_average = sum(row) / len(row) averages.append(row_average) else: averages.append(0) return averages"},{"question":"Please help me write a Python function to format a given date. The function should take a date string as input and return the date in the format \\"dd/mm/yyyy\\". Can you also add a feature to check if the input date string is valid according to the Gregorian calendar?","solution":"from datetime import datetime def format_date(date_str): Takes a date string as input and returns the date in the format \\"dd/mm/yyyy\\". Raises a ValueError if the input date is invalid. try: date_obj = datetime.strptime(date_str, \\"%Y-%m-%d\\") formatted_date = date_obj.strftime(\\"%d/%m/%Y\\") return formatted_date except ValueError: raise ValueError(\\"Invalid date string\\")"},{"question":"Write a python program to implement the Sieve of Eratosthenes algorithm and find all the prime numbers between 1 to 50. Then, modify the program so that it can efficiently find and return all 'n' prime numbers instead, where 'n' is a user-provided input.","solution":"def sieve_of_eratosthenes(limit): Returns a list of all prime numbers up to the given limit using the Sieve of Eratosthenes algorithm. if limit < 2: return [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(limit ** 0.5) + 1): if is_prime[i]: for multiple in range(i*i, limit + 1, i): is_prime[multiple] = False return [number for number, prime in enumerate(is_prime) if prime] def find_n_primes(n): Returns a list of the first n prime numbers. if n <= 0: return [] upper_limit = n * (int(n * 1.5) + 1) primes = sieve_of_eratosthenes(upper_limit) return primes[:n]"},{"question":"Using the Python programming language, write a function that takes an integer as input and returns a string indicating whether the input integer is odd or even. The function should also include error handling to ensure that the input is indeed an integer. Then, apply this function to the number 7 to determine its parity. Additionally, investigate the mathematical properties of the number 7 and its relationship to parity, including any relevant theorems or conjectures. Finally, consider the broader implications of parity in number theory and its applications in cryptography and computer science.","solution":"def is_odd_or_even(n): Takes an integer as input and returns a string indicating whether the input integer is odd or even. Includes error handling to ensure that the input is indeed an integer. Parameters: n (int): The integer to check for parity. Returns: str: 'odd' if n is odd, 'even' if n is even. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") return \\"odd\\" if n % 2 else \\"even\\" # Applying the function to the number 7 parity_of_7 = is_odd_or_even(7) print(parity_of_7) # Output: 'odd' # Mathematical properties and relevance to parity The number 7 is odd, as determined by the function is_odd_or_even, because it leaves a remainder of 1 when divided by 2 (7 % 2 == 1). Odd numbers are integers that are not divisible evenly by 2. In number theory, odd and even numbers are fundamental classifications of integers. There's an important property that the sum of two odd numbers or two even numbers is always even, while the sum of an odd number and an even number is always odd. On the topic of cryptography and computer science, parity (whether a number is odd or even) is employed in various algorithms and applications. For example: - Parity bits in error detection: Ensuring data integrity by adding a parity bit for error-check in data transmission. - Hash functions in cryptography: Some hash functions and algorithms use modulo operations that exploit parity properties. Parity plays a crucial role in binary number systems, fundamental to computer architecture and digital logic."},{"question":"Write a Python function that takes in a string and outputs a dictionary where the keys are the characters in the string and the values are the frequency of the characters in the string. Additionally, the function should ignore any special characters, whitespace, and should be case-sensitive.","solution":"def character_frequency(s): Returns a dictionary where the keys are characters in the string and the values are the frequency of the characters in the string. Ignores special characters and whitespace. Case-sensitive. frequency = {} for char in s: if char.isalnum(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a python program that accepts a string input, uses it to create a dictionary, and sorts it by alphabetical order. The program should also handle case sensitivity, meaning that it should consider uppercase and lowercase letters as distinct characters. Additionally, the program should exclude any non-alphabetic characters from the input string before creating the dictionary.","solution":"def create_sorted_dict(input_string): Creates a dictionary from the input string with characters as keys and their counts as values, then sorts the dictionary alphabetically by key. Non-alphabetic characters are excluded. Parameters: input_string (str): The string from which the dictionary is to be created. Returns: dict: The sorted dictionary with alphabetic characters as keys and their counts as values. # Filter out non-alphabetic characters and create the dictionary filtered_chars = [char for char in input_string if char.isalpha()] char_count = {} for char in filtered_chars: char_count[char] = char_count.get(char, 0) + 1 # Sort the dictionary by keys sorted_dict = dict(sorted(char_count.items())) return sorted_dict"},{"question":"Given two strings, \\"ABC\\" and \\"XYZ\\", write a function to find out if the two strings are anagrams of each other. Please consider capital letters as unique characters (i.e., 'A' is different from 'a'). Moreover, add functionality to ignore whitespace and punctuation. For instance, \\"ABC, !\\" should still be considered as an anagram of \\"CBA\\".","solution":"import string def are_anagrams(str1, str2): Check if the two input strings are anagrams of each other, ignoring whitespace and punctuation. # Clean strings by removing whitespace and punctuation, and converting to upper case clean_str1 = ''.join(filter(lambda c: c in string.ascii_letters, str1)).upper() clean_str2 = ''.join(filter(lambda c: c in string.ascii_letters, str2)).upper() return sorted(clean_str1) == sorted(clean_str2)"},{"question":"Given a message consisting of a sequence of alphanumeric characters, write a Python function that employs the Caesar cipher technique to encrypt it. Additionally, the function should feature a decryption capability. Also, instead of the usual 3 character shifts, make the shift length an input parameter to the function. Ensure that the function works correctly with all print-able ASCII characters, not just alpha-numerics.","solution":"def caesar_cipher(message, shift, encrypt=True): Encrypts or decrypts a message using the Caesar cipher technique. Parameters: - message (str): The message to be encrypted or decrypted. - shift (int): The number of characters to shift by. - encrypt (bool): If True, encrypt the message. If False, decrypt the message. Returns: - str: The encrypted or decrypted message. if not encrypt: shift = -shift encrypted_message = [] for char in message: if 32 <= ord(char) <= 126: # Handling printable ASCII characters # Perform the shift new_char = chr((ord(char) - 32 + shift) % 95 + 32) encrypted_message.append(new_char) else: # If the character is not a printable ASCII character, leave it unchanged encrypted_message.append(char) return ''.join(encrypted_message)"},{"question":"Reverse a given string using Python, but you are not allowed to use any built-in string manipulation functions or methods. You can only use basic string operations and loops.","solution":"def reverse_string(s): Reverses the given string using basic string operations and loops. Args: s (str): The string to be reversed. Returns: str: The reversed string. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a Python function to count the letters in a given sentence and return a dictionary of letter counts, ignoring case and punctuation.","solution":"import string def count_letters(sentence): Counts the letters in a given sentence, ignoring case and punctuation, and returns a dictionary of letter counts. :param sentence: string containing the input sentence. :return: dictionary with letters as keys and their counts as values. # Initialize an empty dictionary to store letter counts letter_counts = {} # Convert the sentence to lowercase to ignore case and remove punctuation cleaned_sentence = ''.join(char.lower() for char in sentence if char.isalpha()) # Count the letters for char in cleaned_sentence: if char in letter_counts: letter_counts[char] += 1 else: letter_counts[char] = 1 return letter_counts"},{"question":"Write a python program to generate the first n Fibonacci numbers and their corresponding indices in the sequence. Also, optimize the program by using memoization to ensure that the time complexity is O(N).","solution":"def fibonacci(n): Generates the first n Fibonacci numbers and their corresponding indices using memoization. Args: n (int): The number of Fibonacci numbers to generate. Returns: list of tuple: A list of tuples where each tuple contains an index and the corresponding Fibonacci number. memo = {} def fib(n): if n in memo: return memo[n] if n <= 1: return n memo[n] = fib(n-1) + fib(n-2) return memo[n] result = [(i, fib(i)) for i in range(n)] return result"},{"question":"Utilizing the Python programming language, devise a fragment of code for determining the arithmetic average of integer values encapsulated within a Python data structure known as a list.","solution":"def calculate_average(numbers): Calculate the arithmetic average of integer values in a list. Parameters: numbers (list): A list of integers. Returns: float: The arithmetic average of the integers in the list. Returns 0 if the list is empty. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a Python function that takes a list of dictionaries as input, with each dictionary containing a 'name' and 'age' field, and returns the name of the oldest person in the list.","solution":"def get_oldest_person(people): Returns the name of the oldest person from a list of dictionaries containing 'name' and 'age' fields. :param people: List[Dict[str, Union[str, int]]] :return: str if not people: return None oldest_person = max(people, key=lambda person: person['age']) return oldest_person['name']"},{"question":"Write a python function 'removeDupesAndReordering' that removes duplicate elements from the provided list and returns the list with only unique elements, but you must ensure that the final list is sorted in ascending order, and this should be achieved without utilizing python's built-in 'sort()' or 'sorted()' functions.","solution":"def removeDupesAndReordering(arr): Removes duplicate elements from the provided list and returns the list with unique elements, sorted in ascending order without utilizing Python's built-in 'sort()' or 'sorted()' functions. unique_elements = list(set(arr)) # Remove duplicates by converting to a set, then back to a list. # Implementing a simple bubble sort algorithm to sort the list n = len(unique_elements) for i in range(n): for j in range(0, n-i-1): if unique_elements[j] > unique_elements[j+1]: unique_elements[j], unique_elements[j+1] = unique_elements[j+1], unique_elements[j] # Swap return unique_elements"},{"question":"You are working on a computer vision project that involves integrating various libraries and modules for image processing and analysis. Your task is to create a Python function that initializes a specific image processing algorithm and runs it on a given gray-scale video frame. However, there are several missing parts in the code snippet provided, and you need to complete the function to ensure it works correctly.","solution":"import cv2 def process_frame(frame): Initializes the background subtraction algorithm and processes the given gray-scale frame. Parameters: frame (numpy.ndarray): The gray-scale frame to process. Returns: numpy.ndarray: The foreground mask obtained after applying background subtraction. # Initialize the background subtractor back_sub = cv2.createBackgroundSubtractorMOG2() # Apply the background subtractor to the frame to get the foreground mask fg_mask = back_sub.apply(frame) return fg_mask"},{"question":"Design a simple text-based adventure game in Python that takes input from the user and responds with descriptions of rooms and situations. The game should have at least three rooms connected by passages.","solution":"class Game: def __init__(self): self.current_room = 'entrance' self.rooms = { 'entrance': {'description': 'You are at the entrance of a dark cave. Passages lead north and east.', 'connections': {'north': 'hallway', 'east': 'library'}}, 'hallway': {'description': 'You are in a narrow hallway. There is a passage leading south to the entrance and another passage to the east.', 'connections': {'south': 'entrance', 'east': 'treasure_room'}}, 'library': {'description': 'You are in a dusty library filled with books. There is a passage leading west to the entrance.', 'connections': {'west': 'entrance'}}, 'treasure_room': {'description': 'You have found the treasure room! Congratulations!', 'connections': {'west': 'hallway'}} } def move(self, direction): if direction in self.rooms[self.current_room]['connections']: self.current_room = self.rooms[self.current_room]['connections'][direction] return self.rooms[self.current_room]['description'] else: return \\"You can't go that way.\\" def look(self): return self.rooms[self.current_room]['description']"},{"question":"What is the most efficient way to find the longest word in a string in Python? This time, consider a scenario where the string contains punctuation marks and numbers that should not be counted as part of words. Also, assume that a word is defined as a sequence of letters separated by whitespace or punctuation.","solution":"import re def find_longest_word(sentence): Returns the longest word in a string, considering only sequences of letters as words. Punctuation marks and numbers are not considered part of words. :param sentence: The sentence from which the longest word is to be found. :type sentence: str :return: The longest word in the sentence. :rtype: str # Use regex to find all words consisting of only letters words = re.findall(r'b[a-zA-Z]+b', sentence) if not words: return \\"\\" # Find the longest word longest_word = max(words, key=len) return longest_word"},{"question":"I have a list of numbers [1, 2, 3, 4, 5]. How can I write a function in Python to print each element of the list using a for loop?","solution":"def print_elements(lst): Prints each element of the list on a separate line. for element in lst: print(element)"},{"question":"Write a function that reverses the order of elements within tuples in a list, and also reverses the order of characters in string elements. This function should handle tuples of any depth, and the elements within tuples can be integers or strings. The function should be recursive and also handle cases where tuples contain other tuples.","solution":"def reverse_elements_in_tuples(data): Reverse the order of elements within tuples in a list, and also reverse the order of characters in string elements. def reverse_tuple(tup): reversed_items = [] for item in reversed(tup): if isinstance(item, str): reversed_items.append(item[::-1]) elif isinstance(item, tuple): reversed_items.append(reverse_tuple(item)) else: reversed_items.append(item) return tuple(reversed_items) return [reverse_tuple(tup) for tup in data]"},{"question":"Convert the following for loop into a recursive solution. Instead of printing the value of 'i', sum up all the values of 'i' from 0 to 100 and return the final sum. Your recursive function should also take an additional parameter, 'limit', which represents the upper limit of the sum. The function should return the sum of all values from 0 to 'limit'.","solution":"def sum_recursive(i, limit): Recursively sums up all values from i to limit. Parameters: i (int): The current value to add. limit (int): The limit where the summation stops. Returns: int: The sum of all values from i to limit. if i > limit: return 0 return i + sum_recursive(i + 1, limit) # Example usage to sum values from 0 to 100: # result = sum_recursive(0, 100) # print(result) # Output should be 5050"},{"question":"Today I want to code a simple data structure that can hold a list of integers with two operations: insert, and min, where insert adds an integer to the end of the list, and min returns the current minimum (without removing it). The operations should take constant time, O(1). How do I go about doing this?","solution":"class MinList: def __init__(self): self.data = [] self.min_stack = [] def insert(self, value): self.data.append(value) if not self.min_stack or value <= self.min_stack[-1]: self.min_stack.append(value) def get_min(self): if not self.min_stack: raise ValueError(\\"MinList is empty\\") return self.min_stack[-1]"},{"question":"Create a Python program that extracts all unique words from a given sentence and counts the frequency of each word. The program should ignore case sensitivity and punctuation. The output should be a dictionary where keys are the unique words and values are the corresponding frequencies.","solution":"import string def word_frequency(sentence): Extracts unique words from a sentence and counts the frequency of each word. The function ignores case sensitivity and punctuation. Args: sentence (str): The input sentence. Returns: dict: A dictionary where keys are the unique words and values are the corresponding frequencies. # Remove punctuation translator = str.maketrans('', '', string.punctuation) clean_sentence = sentence.translate(translator) # Convert to lowercase clean_sentence = clean_sentence.lower() # Split sentence into words words = clean_sentence.split() # Count frequency of each word frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Implement a method to reverse the order of elements in a given array without using any built-in functions or methods that directly reverse the array. You can only use basic language constructs like loops and conditional statements.","solution":"def reverse_array(arr): Reverses the order of elements in the given array. Parameters: arr (list): The input array to be reversed. Returns: list: The array with elements in reversed order. n = len(arr) reversed_arr = [0] * n for i in range(n): reversed_arr[i] = arr[n - 1 - i] return reversed_arr"},{"question":"Create a program to print a tic tac toe board with the specified dimensions. The dimensions should be inputted by the user, and the program should validate the input to ensure that the dimensions are in the format of two positive integers separated by a space.","solution":"def print_tic_tac_toe_board(width, height): # Validate that width and height are positive integers if width <= 0 or height <= 0: raise ValueError(\\"Dimensions must be positive integers.\\") board = \\"\\" row_separator = \\"+\\" + \\"---+\\" * width + \\"n\\" cell_separator = \\"|\\" + \\" |\\" * width + \\"n\\" for _ in range(height): board += row_separator board += cell_separator board += row_separator print(board) return board def parse_dimensions(input_str): # Split the input string parts = input_str.strip().split() # Validate that we have exactly two parts if len(parts) != 2: raise ValueError(\\"Input must contain exactly two positive integers separated by a space.\\") # Convert parts to integers try: width = int(parts[0]) height = int(parts[1]) except ValueError: raise ValueError(\\"Both dimensions must be valid integers.\\") # Validate that the integers are positive if width <= 0 or height <= 0: raise ValueError(\\"Dimensions must be positive integers.\\") return width, height # Example of function usage input_str = \\"3 3\\" width, height = parse_dimensions(input_str) print_tic_tac_toe_board(width, height)"},{"question":"Given a list of strings, write a function in Python that sorts the list in ascending order based on the length of its strings.","solution":"def sort_by_length(strings): Sorts a list of strings in ascending order based on the length of the strings. Parameters: strings (list): List of strings to be sorted. Returns: list: List of strings sorted by length. return sorted(strings, key=len)"},{"question":"Generate a random hex color code in Python that starts with the letter \\"F\\" and is a shade of pink. The shade of pink should have a hue value between 340 and 355 (inclusive) in the HSL color space.","solution":"import random from colorsys import hls_to_rgb def random_pink_hex(): Generates a random hex color code that starts with the letter 'F' and is a shade of pink with a hue value between 340 and 355 (inclusive) in the HSL color space. # Hue between 340 and 355 hue = random.uniform(340 / 360.0, 355 / 360.0) # Saturation and Lightness for a pink color lightness = random.uniform(0.5, 0.7) saturation = random.uniform(0.5, 1.0) # Convert HSL to RGB r, g, b = hls_to_rgb(hue, lightness, saturation) # Convert RGB to 0-255 scale and then to Hex r = int(r * 255) g = int(g * 255) b = int(b * 255) hex_color = f'#{r:02X}{g:02X}{b:02X}' # Ensure it starts with 'F' if hex_color[1] != 'F': return random_pink_hex() return hex_color"},{"question":"I am using click to make a command line program and I want to have an --upper-case option. Unique to python though, the Boolean flag from click doesn't like something like Int.lower() as the callback conversion. Something actually worked when I did a lambda function, but generally I like to do things in python the pythonic way, which includes using def instead of lambda. Apparently click actually has a decorator @click.option that does this exactly and I can't seem to get it to work.","solution":"import click @click.command() @click.option('--upper-case', is_flag=True, help='Convert the input text to upper case.') @click.argument('text') def main(upper_case, text): This command line tool echoes back the TEXT. If --upper-case is provided, the TEXT is converted to upper case. if upper_case: text = text.upper() click.echo(text) if __name__ == '__main__': main()"},{"question":"Create a program that takes two integers as input and determines if the first number is divisible by the second number. The program should also print out the quotient and remainder if the first number is divisible by the second number. Additionally, the program should check if either of the input numbers are negative and provide an error message if this is the case.","solution":"def check_divisibility(a, b): Checks if integer a is divisible by integer b and prints quotient and remainder if divisible. Returns a tuple (divisible, quotient, remainder) Raises ValueError if either of the input numbers are negative. if a < 0 or b < 0: raise ValueError(\\"Both numbers must be non-negative.\\") if b == 0: raise ValueError(\\"Division by zero is not allowed.\\") divisible = a % b == 0 quotient, remainder = divmod(a, b) return divisible, quotient, remainder"},{"question":"Write a function to sort a list of integers in O(n) time complexity.","solution":"def counting_sort(arr): Sorts a list of non-negative integers in O(n) time complexity using Counting Sort. if not arr: return arr max_elem = max(arr) count = [0] * (max_elem + 1) for num in arr: count[num] += 1 sorted_arr = [] for i in range(len(count)): sorted_arr.extend([i] * count[i]) return sorted_arr"},{"question":"Build a basic calculator in Python that can perform addition, subtraction, multiplication, and division. The calculator should be able to handle floating-point numbers. Additionally, the calculator should have a feature to calculate the factorial of a number. The calculator should also be able to handle complex numbers and perform operations on them, including complex addition, subtraction, multiplication, and division. The calculator should be able to handle both real and imaginary parts of complex numbers.","solution":"import math import cmath def add(a, b): return a + b def subtract(a, b): return a - b def multiply(a, b): return a * b def divide(a, b): if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b def factorial(number): if not isinstance(number, int) or number < 0: raise ValueError(\\"Factorial is only defined for non-negative integers.\\") return math.factorial(number) def complex_add(a, b): if not isinstance(a, complex) or not isinstance(b, complex): raise TypeError(\\"Both arguments must be complex numbers.\\") return a + b def complex_subtract(a, b): if not isinstance(a, complex) or not isinstance(b, complex): raise TypeError(\\"Both arguments must be complex numbers.\\") return a - b def complex_multiply(a, b): if not isinstance(a, complex) or not isinstance(b, complex): raise TypeError(\\"Both arguments must be complex numbers.\\") return a * b def complex_divide(a, b): if not isinstance(a, complex) or not isinstance(b, complex): raise TypeError(\\"Both arguments must be complex numbers.\\") return a / b"},{"question":"How to create a button that runs a Python function when clicked in a graphical user interface (GUI) made with the Tkinter library in Python?","solution":"import tkinter as tk def on_button_click(): Function to be executed when the button is clicked. print(\\"Button clicked!\\") def create_gui(): Creates a Tkinter GUI with a button that runs a Python function when clicked. # Create the main window root = tk.Tk() root.title(\\"Sample GUI\\") # Create a button and set its command to the function button = tk.Button(root, text=\\"Click Me\\", command=on_button_click) button.pack(pady=20) # Start the main loop root.mainloop() # Only run the GUI if this script is run directly, not when imported if __name__ == \\"__main__\\": create_gui()"},{"question":"Develop a Python script that takes a directory as an input and lists all the files and directories within it. The script should also display any hidden files and directories. Ensure that the script handles errors gracefully, such as when the directory does not exist or the user does not have the required permissions to access the directory.","solution":"import os def list_directory_contents(directory): Lists all files and directories within the given directory, including hidden ones. Handles errors gracefully. Parameters: directory (str): The path to the directory. Returns: list: A list of files and directories within the given directory. try: return os.listdir(directory) except FileNotFoundError: return f\\"Error: The directory '{directory}' does not exist.\\" except PermissionError: return f\\"Error: Permission denied to access the directory '{directory}'.\\" except Exception as e: return f\\"An unexpected error occurred: {e}\\""},{"question":"Formulate a Pythonic \`intersperse\` function that injects a specified delimiter into the array at every n-th position, including handling negative n for reverse operation. The function should also manage incorrect inputs and include test cases.","solution":"def intersperse(arr, delimiter, n): Injects a specified delimiter into the array at every n-th position. Handles negative n for reverse operation. :param arr: List of elements to intersperse delimiter into. :param delimiter: The element to insert into the array. :param n: The position interval to insert the delimiter. Can be negative. :return: A new list with the delimiter interspersed. if not isinstance(arr, list): raise ValueError(\\"The first argument should be a list.\\") if not isinstance(n, int) or n == 0: raise ValueError(\\"The interval 'n' should be a non-zero integer.\\") if n < 0: interval = -n arr.reverse() else: interval = n result = [] for i in range(1, len(arr) + 1): result.append(arr[i - 1]) if i % interval == 0 and i != len(arr): result.append(delimiter) if n < 0: result.reverse() return result"},{"question":"I need to write a custom function in Python to calculate the length of a string. However, I don't want to use any built-in functions or libraries. How can I do this using a while loop?","solution":"def custom_strlen(string): Returns the length of the string without using any built-in functions. length = 0 while string[length:]: length += 1 return length"},{"question":"Please write a function in Python to implement a binary search algorithm. The algorithm should return the index of the value in the sorted array if found, or -1 if the value is not present. The function should have a time complexity of O(log n).","solution":"def binary_search(arr, target): Performs binary search on a sorted array to find the index of the target value. :param arr: List[int] - A list of sorted integers. :param target: int - The value to search for. :return: int - The index of the target in the array, or -1 if the target is not found. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given a string S, write a Python program to check if it contains all the letters in the English alphabet. Also, find the frequency of each letter in the string.","solution":"def is_pangram_and_frequency(s): Checks if the string contains all the letters of the English alphabet and returns the frequency of each letter. :param s: Input string :return: (Boolean, Dictionary) - Boolean indicates if the string is pangram, Dictionary contains frequency of each letter. alphabet_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") frequency = {letter: 0 for letter in alphabet_set} s_lower = s.lower() is_pangram = True for char in s_lower: if char in frequency: frequency[char] += 1 for letter in alphabet_set: if frequency[letter] == 0: is_pangram = False return is_pangram, frequency"},{"question":"Create a function that finds the maximum element(s) in a list and returns their indices. However, the function should also handle cases where there are multiple maximum elements in the list. In such cases, the function should return a list of all the indices where the maximum element(s) is(are) located.","solution":"def find_max_indices(lst): Returns the indices of the maximum element(s) in the list. Parameters: lst (List): A list of numbers. Returns: List: A list containing the indices of the maximum element(s). if not lst: return [] max_value = max(lst) max_indices = [index for index, value in enumerate(lst) if value == max_value] return max_indices"},{"question":"Write a python code to generate a random 12-digit password including both uppercase and lowercase letters, digits, and symbol characters.","solution":"import random import string def generate_password(): Returns a random 12-character password including both uppercase and lowercase letters, digits, and symbols. characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for _ in range(12)) return password"},{"question":"Hey, can you write a Python script for a game where a player has to guess a number between 1 and 100? The player gets hints whether the guess is too high or too low. The script should also keep track of the number of attempts.","solution":"import random def number_guessing_game(): This function implements a number guessing game where the player has to guess a number between 1 and 100. The function provides hints whether the guess is too high or too low and keeps track of the number of attempts. target_number = random.randint(1, 100) attempts = 0 guess = None while guess != target_number: try: guess = int(input(\\"Guess the number between 1 and 100: \\")) attempts += 1 if guess < target_number: print(\\"Too low!\\") elif guess > target_number: print(\\"Too high!\\") else: print(f\\"Congratulations! You've guessed the number in {attempts} attempts.\\") except ValueError: print(\\"Please enter a valid integer.\\") # Uncomment the line below to play the game # number_guessing_game()"},{"question":"Given the array of integers nums = [1, 2, 3, 4, 5], write a Python function to rotate the array to the right by k steps, where k is non-negative without using extra space.","solution":"def rotate(nums, k): Rotates the array to the right by k steps. Args: nums : list[int] : list of integers. k : int : number of steps to rotate the array. n = len(nums) k %= n # if k > n, take modulo def reverse(nums, start, end): while start < end: nums[start], nums[end] = nums[end], nums[start] start, end = start + 1, end - 1 # Reverse the entire array reverse(nums, 0, n - 1) # Reverse the first k elements reverse(nums, 0, k - 1) # Reverse the rest reverse(nums, k, n - 1)"},{"question":"Create a Python program that prints out an n x n matrix with all positive integers from 1 to n^2 in row major order.","solution":"def generate_matrix(n): Generates an n x n matrix with integers from 1 to n^2 in row major order. Args: n (int): The dimension of the square matrix. Returns: list of list of int: The generated n x n matrix. matrix = [] value = 1 for i in range(n): row = [] for j in range(n): row.append(value) value += 1 matrix.append(row) return matrix"},{"question":"input 3, output: 'Fizz' input 5, output: 'Buzz' input 15, output: 'FizzBuzz'. Please write this requirement into a Python function in code form.","solution":"def fizz_buzz(n): Returns 'Fizz' if n is divisible by 3, 'Buzz' if n is divisible by 5, 'FizzBuzz' if n is divisible by both 3 and 5, otherwise returns n. if n % 15 == 0: return 'FizzBuzz' elif n % 3 == 0: return 'Fizz' elif n % 5 == 0: return 'Buzz' else: return n"},{"question":"Given two sorted arrays nums1 and nums2 of size m and n respectively, write a function to merge nums1 and nums2 into a single sorted array in-place without making a copy of nums1 or nums2.","solution":"def merge(nums1, m, nums2, n): Merges two sorted arrays nums1 and nums2, where nums1 has enough space at the end to hold nums2. The final sorted array should be in nums1. Parameters: nums1 (List[int]): The first sorted array with space at the end to hold nums2. m (int): The number of elements currently in nums1. nums2 (List[int]): The second sorted array. n (int): The number of elements in nums2. Returns: None: Modifies nums1 in-place. # Start filling the array from the end insert_pos = m + n - 1 m -= 1 n -= 1 # Merge arrays in reverse order to avoid overwriting elements in nums1 while m >= 0 and n >= 0: if nums1[m] > nums2[n]: nums1[insert_pos] = nums1[m] m -= 1 else: nums1[insert_pos] = nums2[n] n -= 1 insert_pos -= 1 # If there are still elements in nums2, copy them while n >= 0: nums1[insert_pos] = nums2[n] n -= 1 insert_pos -= 1"},{"question":"Use python to implement a shell sort algorithm that sorts a list of integers in non-descending order. Make sure to follow the correct order of the algorithm and account for edge cases. Comment your code as appropriate to explain your implementation.","solution":"def shell_sort(arr): Sorts an array of integers in non-descending order using Shell Sort algorithm. :param arr: List of integers to be sorted. :return: Sorted list of integers. n = len(arr) gap = n // 2 # Initialize the gap # Use the gap to perform gapped insertion sort while gap > 0: for i in range(gap, n): temp = arr[i] # The element to be inserted j = i # Shift earlier gap-sorted elements until the correct location for arr[i] is found while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap] j -= gap arr[j] = temp # Insert temp at the correct location gap //= 2 # Reduce the gap for the next iteration return arr"},{"question":"Generate a function in Python that finds the smallest number in a given list of numbers. Additionally, the function should handle cases where the input list is empty or contains non-numeric values. In the case of an empty list, the function should return None. If the list contains non-numeric values, the function should ignore them and only consider the numeric values.","solution":"def find_smallest_number(numbers): Returns the smallest number in the given list of numbers. If the list is empty or contains no numeric values, returns None. Non-numeric values in the list are ignored. Args: numbers (list): The list of numbers to search. Returns: int/float/None: The smallest number or None if no valid numbers are found. valid_numbers = [num for num in numbers if isinstance(num, (int, float))] if not valid_numbers: return None return min(valid_numbers)"},{"question":"How can I find the worst complexity case of an algorithm in Python? Can you provide a detailed explanation using a sorting algorithm as an example?","solution":"def bubble_sort(arr): Sorts an array using the Bubble Sort algorithm. n = len(arr) for i in range(n-1): for j in range(n-1-i): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def worst_case_complexity_bubble_sort(n): Returns the worst-case complexity of Bubble Sort for an array of size n. return n * (n-1) // 2 # This simplifies to O(n^2)"},{"question":"Given an array nums and a value val, remove all instances of that value in-place and return the new length.","solution":"def remove_element(nums, val): Removes all instances of val in nums in-place and returns the new length. Parameters: nums (list): List of integers. val (int): Integer value to be removed. Returns: int: The new length of nums after removing val. k = 0 for i in range(len(nums)): if nums[i] != val: nums[k] = nums[i] k += 1 return k"},{"question":"In Python, provide a list of numbers and write a function that finds the first duplicate number in the list.","solution":"def first_duplicate(nums): Returns the first duplicate number in the list. If there is no duplicate, returns None. seen = set() for num in nums: if num in seen: return num seen.add(num) return None"},{"question":"Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers, but without using any built-in Python functions or operators for finding the maximum and without using any conditional statements (such as if, elif, else).","solution":"def max_without_builtin_or_conditionals(a, b): Returns the maximum of a and b without using any built-in Python functions or conditional statements. return (a + b + abs(a - b)) // 2"},{"question":"Create a function that takes two integers as arguments, and returns the maximum of the two in Python.","solution":"def maximum(a, b): Returns the maximum of a and b. return a if a > b else b"},{"question":"Develop a Python function that utilizes the binary search technique for sorted data lists and handles exceptions for unsorted lists and non-integer values as well. To make it more complex, the function should also prompt the user for the value they want to search for and provide an appropriate response whether the value exists in the list or not.","solution":"def binary_search(data, target): Performs binary search on sorted data to find the target value. Raises ValueError if data is not sorted or contains non-integer values. if any(not isinstance(x, int) for x in data): raise ValueError(\\"Data contains non-integer values\\") if data != sorted(data): raise ValueError(\\"Data is not sorted\\") left, right = 0, len(data) - 1 while left <= right: mid = (left + right) // 2 if data[mid] == target: return mid elif data[mid] < target: left = mid + 1 else: right = mid - 1 return -1 def search_value(): Prompts the user for a list of sorted integers and a value to search. Returns a message indicating whether the value is in the list. # For the purpose of this exercise, assuming the input values are passed directly. # This function would normally use input() function to get user inputs but since # we should avoid input/output operations, we will simulate by passing arguments directly to the function. data = [int(x) for x in input(\\"Enter a sorted list of integers (comma-separated): \\").split(\\",\\")] target = int(input(\\"Enter the value to search for: \\")) try: position = binary_search(data, target) if position != -1: print(f\\"Value {target} exists in the list at position {position}.\\") else: print(f\\"Value {target} does not exist in the list.\\") except ValueError as e: print(e)"},{"question":"Write a python script to print the fibonacci series up to N numbers. The script should validate the input to ensure N is a positive integer, and handle invalid inputs gracefully. Additionally, the script should use recursion to generate the fibonacci series, but limit the recursion depth to prevent stack overflow for large values of N.","solution":"def fibonacci_series(n, current_index=0, a=0, b=1, result=[]): Generates and returns the Fibonacci series up to N numbers recursively. Parameters: n (int): Number of terms in the Fibonacci series to generate current_index (int): Current position in the series (used during recursion) a (int): Start number of the series (should be 0) b (int): Second number of the series (should be 1) result (list): Accumulates the series terms Returns: list: Fibonacci series up to N numbers if n <= 0: raise ValueError(\\"N must be a positive integer\\") if current_index == 0: result = [a] elif current_index == 1: result.append(b) else: next_value = a + b result.append(next_value) a, b = b, next_value if current_index + 1 < n: return fibonacci_series(n, current_index + 1, a, b, result) else: return result"},{"question":"Write a function in Python that takes a list of dictionaries and adds a new key-value pair where the key is \\"metadata\\" and the value is another dictionary with at least three key-value pairs. The function should modify the original list and not return anything.","solution":"def add_metadata_to_dicts(dict_list): Adds a new key \\"metadata\\" with a dictionary value having at least three key-value pairs to each dictionary in the list. Modifies the original list in place. Parameters: dict_list (list): List of dictionaries to be modified for dictionary in dict_list: dictionary['metadata'] = { 'author': 'Unknown', 'version': 1.0, 'status': 'active' }"},{"question":"How can I generate a list of all possible anagrams using letters from multiple words in a given list, and ensure that the output only contains real English words? Please provide a Python code that takes a list of words as input and outputs a list of anagrams. You may use an English dictionary API to verify if a generated anagram is a real word. Additionally, the output should not contain any duplicates.","solution":"import itertools import requests # API URL for checking if a word is a valid English word API_URL = \\"https://api.dictionaryapi.dev/api/v2/entries/en/\\" def is_real_word(word): response = requests.get(API_URL + word) return response.status_code == 200 def generate_anagrams(word_list): # Generate all possible anagrams from the given words all_letters = ''.join(word_list) anagrams = set() for i in range(1, len(all_letters) + 1): for candidate in itertools.permutations(all_letters, i): candidate_word = ''.join(candidate) if is_real_word(candidate_word): anagrams.add(candidate_word) return list(anagrams)"},{"question":"What is a way to create a method in Python that removes duplicate values from an array while maintaining the original order of the elements?","solution":"def remove_duplicates(arr): Removes duplicate values from the array while maintaining the original order of elements. Parameters: arr (list): The input array from which to remove duplicates. Returns: list: A new list without duplicate values, preserving the original order. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Develop an algorithm for a breadth-first search that also tracks the shortest path from the starting node to all other nodes in the graph. Additionally, the algorithm should handle graphs with weighted edges, where each edge has a different cost. The shortest path should be determined based on the sum of the costs of the edges in the path.","solution":"import heapq def dijkstra(graph, start): Performs Dijkstra's algorithm to find the shortest paths from the start node to all other nodes in the graph. The graph is represented as an adjacency list, where graph[node] is a list of tuples (neighbor, weight). Returns a dictionary with the shortest path costs from the start node to each node. # Priority queue to store (distance, node) pq = [(0, start)] # Dictionary to store the shortest path costs distances = {start: 0} # Set to store visited nodes visited = set() while pq: current_dist, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_dist + weight if neighbor not in distances or distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances"},{"question":"Write a Python program to generate a list of tuples containing random numbers between 1 and 50, where the number of tuples is randomly determined between 10 and 100. Each tuple should contain a random number of integers between 5 and 20.","solution":"import random def generate_random_tuple_list(): Generate a list of tuples containing random numbers between 1 and 50. The number of tuples is randomly determined between 10 and 100. Each tuple contains a random number of integers between 5 and 20. num_of_tuples = random.randint(10, 100) random_tuple_list = [] for _ in range(num_of_tuples): tuple_length = random.randint(5, 20) random_tuple = tuple(random.randint(1, 50) for _ in range(tuple_length)) random_tuple_list.append(random_tuple) return random_tuple_list"},{"question":"Write a function in Python to check if two lists have the same elements regardless of their order. The elements in the lists will be strings consisting of lowercase letters only, and each element will have a length between 1 and 20 characters inclusive. The lists can have at most 1000 elements. If the lists have the same elements, return True; otherwise, return False.","solution":"def have_same_elements(list1, list2): Checks if two lists have the same elements regardless of their order. return sorted(list1) == sorted(list2)"},{"question":"Write the Fibonacci sequence using recursion in Python. Also, implement a memoization function to optimize your code for larger input and provide commentary on how it works.","solution":"def fibonacci_recursive(n, memo=None): Returns the nth Fibonacci number using recursion with memoization. Args: n (int): index of the Fibonacci sequence (0-based) memo (dict): dictionary to store previously computed Fibonacci numbers Returns: int: nth Fibonacci number if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci_recursive(n-1, memo) + fibonacci_recursive(n-2, memo) return memo[n]"},{"question":"Refine the code snippet given, crafting a function named \`intersperse\`. This function should accept a list of integers, \`numbers\`, and a single integer \`delimeter\`, returning a new list where the integer \`delimeter\` is placed between every pair of consecutive elements in the \`numbers\` list. Also, implement a check for the situation where the \`delimeter\` is negative; if this comes up, you should remove the absolute value of the \`delimeter\` number of items from the list's beginning.","solution":"def intersperse(numbers, delimeter): Takes a list of integers \`numbers\` and a single integer \`delimeter\`. Returns a new list where the integer \`delimeter\` is placed between every pair of consecutive elements in the \`numbers\` list. If \`delimeter\` is negative, remove abs(delimeter) items from the beginning of \`numbers\` list. if delimeter < 0: numbers = numbers[abs(delimeter):] return numbers # When the delimiter is negative, abs(delimeter) items removed result = [] for index, number in enumerate(numbers): result.append(number) if index < len(numbers) - 1: # to avoid adding delimiter at the end result.append(delimeter) return result"},{"question":"Create a function to return all the indices in a string where a given substring occurs, but the substring can overlap with itself. For example, given the string \\"abababa\\" and the substring \\"aba\\", the function should return [0, 2, 4].","solution":"def find_substring_occurrences(s, sub): Returns a list of all indices in the string 's' where the substring 'sub' occurs, allowing for the substring to overlap with itself. :param s: The main string to search within. :param sub: The substring to look for. :return: A list of starting indices where the substring occurs in the string. indices = [] start = 0 while start <= len(s) - len(sub): pos = s.find(sub, start) if pos != -1: indices.append(pos) start = pos + 1 else: break return indices"},{"question":"Can you create a function in Python for generating a list of prime numbers between 2 and a given number n?","solution":"def generate_primes(n): Generate a list of prime numbers between 2 and n (inclusive). Parameters: n (int): The upper limit of the range to generate primes for. Returns: list: A list of prime numbers between 2 and n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, int(num**0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python program to print all prime numbers 1 to n.","solution":"def is_prime(num): Helper function to check if a number is prime. Returns True if num is prime, else False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False limit = int(num ** 0.5) + 1 for i in range(3, limit, 2): if num % i == 0: return False return True def primes_up_to_n(n): Returns a list of all prime numbers from 1 to n (inclusive). return [i for i in range(1, n+1) if is_prime(i)]"},{"question":"Write a Python program that rotates the contents of a given list by a specified number of positions in a given direction ('left' or 'right').","solution":"def rotate_list(lst, positions, direction): Rotates the contents of a given list by a specified number of positions in a given direction ('left' or 'right'). Parameters: lst (list): The list to be rotated. positions (int): The number of positions to rotate the list. direction (str): The direction to rotate the list ('left' or 'right'). Returns: list: The rotated list. if not lst: return lst positions = positions % len(lst) if direction == 'left': return lst[positions:] + lst[:positions] elif direction == 'right': return lst[-positions:] + lst[:-positions] else: raise ValueError(\\"Direction must be either 'left' or 'right'.\\")"},{"question":"Write a Python program to find the maximum and minimum numbers from a list of unsorted integers.","solution":"def find_max_min(numbers): Returns the maximum and minimum number from the list of unsorted integers. if not numbers: raise ValueError(\\"The list is empty.\\") max_num = min_num = numbers[0] for num in numbers[1:]: if num > max_num: max_num = num if num < min_num: min_num = num return max_num, min_num"},{"question":"Write a code to fetch the title of a web page, print it in reverse order, and calculate the number of vowels in the reversed title. Additionally, ensure that the code can handle web pages with large sizes efficiently.","solution":"import requests from bs4 import BeautifulSoup def fetch_webpage_title(url): Fetches the title of the web page at the given URL, reverses it, and calculates the number of vowels in the reversed title. Args: - url (str): The URL of the web page. Returns: - tuple: A tuple containing the reversed title and the count of vowels in the reversed title. response = requests.get(url) response.raise_for_status() # Raise an HTTPError if the HTTP request returned an unsuccessful status code. soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else '' # Get the title or an empty string if no title found. reversed_title = title[::-1] vowels_count = sum(1 for char in reversed_title if char.lower() in 'aeiou') return reversed_title, vowels_count"},{"question":"Write a Python program to generate a set of pseudo-random numbers with a uniform distribution between -1 and 1 using the Mersenne Twister algorithm, and then apply a transformation function that follows a normal distribution with mean 0 and standard deviation 1, resulting in a set of normally distributed random numbers.","solution":"import random import math def generate_uniform_random_numbers(n): Generate a set of n uniformly distributed random numbers between -1 and 1. random_numbers = [random.uniform(-1, 1) for _ in range(n)] return random_numbers def transform_to_normal_distribution(uniform_random_numbers): Transform a set of uniformly distributed numbers to a normal distribution. normal_random_numbers = [] for u in uniform_random_numbers: # Using the Box-Muller transform to generate normally distributed values u1 = random.uniform(0, 1) u2 = random.uniform(0, 1) z0 = math.sqrt(-2.0 * math.log(u1)) * math.cos(2.0 * math.pi * u2) z1 = math.sqrt(-2.0 * math.log(u1)) * math.sin(2.0 * math.pi * u2) normal_random_numbers.append(z0) # Since Box-Muller generates pairs, we can optionally add z1 if more points are required. if len(normal_random_numbers) < len(uniform_random_numbers): normal_random_numbers.append(z1) return normal_random_numbers[:len(uniform_random_numbers)] # Ensure it matches the initial length def generate_normal_random_numbers(n): Generate a set of n normally distributed random numbers with mean 0 and std deviation 1. uniform_random_numbers = generate_uniform_random_numbers(n) normal_random_numbers = transform_to_normal_distribution(uniform_random_numbers) return normal_random_numbers"},{"question":"Write a Python program that takes a list of integers as input and removes all duplicates from the list. Then, sort the list in descending order and print the result.","solution":"def remove_duplicates_and_sort_descending(lst): Removes duplicates from the input list and sorts it in descending order. Parameters: lst (list): A list of integers. Returns: list: A list of unique integers sorted in descending order. unique_lst = list(set(lst)) # Remove duplicates by converting to a set, then back to list unique_lst.sort(reverse=True) # Sort the list in descending order return unique_lst"},{"question":"Devise an approach in Python programming language, aiming to determine the length attribute of the longest continuous fragments of a unique character, found within a predetermined text string.","solution":"def longest_unique_char_fragment_length(s): Returns the length of the longest continuous fragment of a unique character in the given string. Parameters: s (str): The input string to evaluate. Returns: int: The length of the longest fragment. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Can you code a function for the language Python that solves the task of finding the smallest common multiple (also known as Least Common Multiple, LCM) for a list of numbers? Additionally, implement an efficient algorithm for handling large input sets. The function should return the LCM for all numbers in the input list and handle exceptions appropriately when the input list contains non-numeric inputs.","solution":"from math import gcd from functools import reduce def lcm(a, b): Returns the Least Common Multiple (LCM) of two numbers a and b. return abs(a * b) // gcd(a, b) def lcm_of_list(numbers): Returns the LCM of a list of numbers. if not all(isinstance(x, (int, float)) for x in numbers): raise ValueError(\\"All elements in the list must be numbers.\\") if len(numbers) == 0: raise ValueError(\\"The input list must not be empty.\\") # Use reduce to apply the lcm function to the list of numbers return reduce(lcm, numbers)"},{"question":"Build a generic web scraper using Python that can extract data from a given URL. The data you're interested in includes any text that is within a <title> tag and the content of the <p> tags. Your program should be able to handle different types of web pages, not just articles. Also, consider the case where a page may have multiple <p> tags with information.","solution":"import requests from bs4 import BeautifulSoup def scrape_webpage(url): Extracts the content of <title> tag and all <p> tags from the given URL. :param url: The URL of the webpage to scrape. :return: A dictionary containing the 'title' and list of 'paragraphs'. try: response = requests.get(url) response.raise_for_status() # Raise an HTTPError for bad responses soup = BeautifulSoup(response.content, 'html.parser') # Extract title title_tag = soup.find('title') title = title_tag.get_text() if title_tag else 'No title found' # Extract all paragraph texts paragraphs = [p.get_text() for p in soup.find_all('p')] return { 'title': title, 'paragraphs': paragraphs } except requests.exceptions.RequestException as e: return { 'error': str(e) }"},{"question":"Develop a Python function that determines the phase of the moon for any specified date in the Gregorian calendar. Your function should also account for any potential leap years, and should calculate the phase based on the date provided without using any built-in or external lunar phase calculation libraries. Additionally, provide a user-friendly interface to allow users to input the date and have the moon phase returned.","solution":"import datetime def moon_phase_on_date(year, month, day): Determines the phase of the moon for a given date. Parameters: year (int): The year of the date. month (int): The month of the date. day (int): The day of the date. Returns: str: The lunar phase. date = datetime.date(year, month, day) # Known new moon date for reference (January 6, 2000) known_new_moon = datetime.date(2000, 1, 6) # Number of days per lunar cycle lunar_cycle_days = 29.53058867 # Calculate the difference in days from the known_new_moon days_difference = (date - known_new_moon).days lunar_age = days_difference % lunar_cycle_days # Determine the phase of the moon based on lunar age if lunar_age < 1: return 'New Moon' elif lunar_age < 7.4: return 'First Quarter' elif lunar_age < 14.8: return 'Full Moon' elif lunar_age < 22.1: return 'Last Quarter' else: return 'New Moon' # User-friendly interface def get_user_input_for_moon_phase(): try: year = int(input(\\"Enter year: \\")) month = int(input(\\"Enter month: \\")) day = int(input(\\"Enter day: \\")) phase = moon_phase_on_date(year, month, day) print(f\\"The moon phase on {year}-{month:02d}-{day:02d} is: {phase}\\") except ValueError: print(\\"Please enter valid date values.\\")"},{"question":"Write a code to count the number of occurrences of a given word in an array of strings. Additionally, count the number of words that are anagrams of the given word as well. An anagram is a word formed by rearranging the letters of a different word, using all the original letters exactly once.","solution":"def count_word_and_anagrams(word, string_list): from collections import Counter # Helper function to check if two words are anagrams def are_anagrams(w1, w2): return Counter(w1) == Counter(w2) word_count = 0 anagram_count = 0 for s in string_list: if s == word: word_count += 1 elif are_anagrams(s, word): anagram_count += 1 return word_count, anagram_count"},{"question":"Fibonacci sequence has a property that each number after the first two is the sum of the two preceding ones. If the first two numbers of a Fibonacci-like sequence are given as 1 and 3, could you write a Python function to generate the nth number in this sequence? Additionally, implement a check function with provided data points to verify the correctness of your function.","solution":"def fibonacci_like(n, a=1, b=3): Returns the nth number in a Fibonacci-like sequence where the two starting numbers are a and b. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return a if n == 2: return b for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Given a list of binary numbers, write a function in Python to toggle the bits at a specific index.","solution":"def toggle_bits_at_index(binary_list, index): Toggles (flips) the bits at a specific index in a list of binary numbers. Parameters: binary_list (list of str): List of binary numbers represented as strings. index (int): The index position of the bit to toggle. Returns: list of str: The list with the bits at the specified index toggled. toggled_list = [] for binary_number in binary_list: if index < len(binary_number): # Toggle bit: if '0' becomes '1', if '1' becomes '0' toggled_bit = '0' if binary_number[index] == '1' else '1' toggled_number = binary_number[:index] + toggled_bit + binary_number[index + 1:] else: # No change if index is out of bounds for the binary number toggled_number = binary_number toggled_list.append(toggled_number) return toggled_list"},{"question":"Write a Python program to calculate the roots of a quadratic equation ax^2 + bx + c = 0 using the quadratic formula method. The program should also check if the equation has real roots, imaginary roots, or no roots at all and print an appropriate message about the nature of the roots based on the discriminant (D) value.","solution":"import cmath def quadratic_roots(a, b, c): Calculate the roots of the quadratic equation ax^2 + bx + c = 0. Returns a tuple of roots and a string indicating the nature of the roots. # Check if a is 0 to avoid division by zero for non-quadratic equations if a == 0: return None, \\"The coefficient a cannot be zero in a quadratic equation.\\" # Calculate the discriminant D = b**2 - 4*a*c # Determine the nature of the roots based on the discriminant if D > 0: root1 = (-b + cmath.sqrt(D).real) / (2*a) root2 = (-b - cmath.sqrt(D).real) / (2*a) return (root1, root2), \\"Real and distinct roots\\" elif D == 0: root = -b / (2*a) return (root, root), \\"Real and equal roots\\" else: root1 = (-b + cmath.sqrt(D)) / (2*a) root2 = (-b - cmath.sqrt(D)) / (2*a) return (root1, root2), \\"Complex and distinct roots\\""},{"question":"Given a ternary tree as input, write a python function to find the minimum depth of the tree. The tree nodes have three children: left, middle, and right.","solution":"class TernaryTreeNode: def __init__(self, val=0, left=None, middle=None, right=None): self.val = val self.left = left self.middle = middle self.right = right def min_depth(root): if not root: return 0 children = [root.left, root.middle, root.right] min_depths = [min_depth(child) for child in children if child is not None] if not min_depths: return 1 return 1 + min(min_depths)"},{"question":"Create a Python program that takes a string as input and counts the number of vowels in the string.","solution":"def count_vowels(s): Returns the number of vowels in the input string s. vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Given 4 dictionaries, each with some common and unique keys & values, write a python program that merges all dictionaries. If there are common keys, then the value should be a list containing values from all dictionaries. If there are keys present in only one dictionary, then have the value as single.","solution":"def merge_dictionaries(dicts): Merges the given list of dictionaries. If there are common keys, the value is a list of all values from the dictionaries. For keys present in only one dictionary, the value remains single. :param dicts: List of dictionaries to be merged. :return: A single merged dictionary. merged_dict = {} for d in dicts: for key, value in d.items(): if key in merged_dict: if isinstance(merged_dict[key], list): merged_dict[key].append(value) else: merged_dict[key] = [merged_dict[key], value] else: merged_dict[key] = value return merged_dict"},{"question":"Consider a list of players and their respective scores. Write a Python program to find the player with the second highest score. Ensure that your solution is case sensitive.","solution":"def second_highest_score(players_scores): Returns the player with the second highest score. Parameters: players_scores (list): A list of tuples where each tuple contains a player name and their score. Returns: str: The name of the player with the second highest score. if not players_scores or len(players_scores) < 2: return None # Sort players by score in descending order sorted_players = sorted(players_scores, key=lambda x: x[1], reverse=True) # Set to maintain unique scores unique_scores = sorted(set(score for name, score in sorted_players), reverse=True) if len(unique_scores) < 2: return None second_highest = unique_scores[1] for name, score in sorted_players: if score == second_highest: return name"},{"question":"Write a Python program to compute the union of two lists, where each element's frequency is preserved and represented in the resulting list.","solution":"from collections import Counter def union_with_frequency(list1, list2): Returns the union of two lists while preserving the frequency of elements. counter1 = Counter(list1) counter2 = Counter(list2) max_frequencies = counter1 | counter2 result = [] for key, count in max_frequencies.items(): result.extend([key] * count) return result"},{"question":"Given a list of numbers, write code using Python to find the sum of all elements that are divisible by 3 and print it. Additionally, you are required to implement a function to calculate the average of the numbers in the list that are divisible by 3 and print it as well. If there are no elements in the list that are divisible by 3, print a message stating that there are no numbers divisible by 3.","solution":"def sum_of_divisible_by_3(numbers): Returns the sum of all elements in the list that are divisible by 3. If there are no elements divisible by 3, return a message stating so. divisible_by_3 = [num for num in numbers if num % 3 == 0] if not divisible_by_3: return \\"There are no numbers divisible by 3.\\" return sum(divisible_by_3) def average_of_divisible_by_3(numbers): Returns the average of all elements in the list that are divisible by 3. If there are no elements divisible by 3, return a message stating so. divisible_by_3 = [num for num in numbers if num % 3 == 0] if not divisible_by_3: return \\"There are no numbers divisible by 3.\\" return sum(divisible_by_3) / len(divisible_by_3)"},{"question":"Could you extend the \`modifyDataset\` function in such a way that it not only alters the \\"fruit\\" column by replacing \\"apple\\" with \\"orange\\", but also changes the \\"color\\" column by replacing \\"green\\" with \\"yellow\\"? Moreover, could you make sure that the code snippet is executed in a transactional manner, so that if any part of it fails, all changes are rolled back and the original dataset is left unchanged? This should ensure that the dataset is always consistent and prevent any partial or corrupted modifications.","solution":"import pandas as pd def modifyDataset(df): Modifies the DataFrame by replacing \\"apple\\" with \\"orange\\" in the \\"fruit\\" column and replacing \\"green\\" with \\"yellow\\" in the \\"color\\" column. The function ensures that all changes are transactional. try: # Start a copy of the original dataframe original_df = df.copy() # Replace \\"apple\\" with \\"orange\\" in the \\"fruit\\" column df['fruit'] = df['fruit'].replace('apple', 'orange') # Replace \\"green\\" with \\"yellow\\" in the \\"color\\" column df['color'] = df['color'].replace('green', 'yellow') except Exception as e: print(f\\"An error occurred: {e}\\") # Rollback changes by reverting to the original dataframe df = original_df.copy() return df"},{"question":"Write code to parse a given IP address into its octets, convert each octet into its binary representation using bitwise operations, and then calculate the sum of all the binary values.","solution":"def ip_to_octets(ip): Parses the given IP address into its octets. return [int(octet) for octet in ip.split('.')] def octet_to_binary(octet): Converts an octet into its binary representation using bitwise operations. binary = \\"\\" for i in range(7, -1, -1): binary += str((octet >> i) & 1) return binary def sum_binary_values(ip): Given an IP address, parse it, convert each octet to its binary representation, and calculate the sum of all the binary values. octets = ip_to_octets(ip) binary_sum = 0 for octet in octets: binary_representation = octet_to_binary(octet) binary_sum += int(binary_representation, 2) return binary_sum"},{"question":"Write a function in Python that accepts an array of floating-point numbers as input and returns the second smallest number in that array. Handling of duplicates should be considered, meaning if there are duplicates of the smallest number, the function should still return the second smallest unique number.","solution":"def second_smallest(arr): Returns the second smallest unique number in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two unique numbers.\\") unique_numbers = list(set(arr)) if len(unique_numbers) < 2: raise ValueError(\\"Array must contain at least two unique numbers.\\") unique_numbers.sort() return unique_numbers[1]"},{"question":"Can you implement a function to invert a binary tree in Python, and then modify it to return a mirrored version of the same tree? Additionally, provide a short explanation of how to invert and mirror a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def invert_tree(root): Inverts a binary tree such that the left and right children of all nodes are swapped. if root is None: return None # Swap the left and right subtree root.left, root.right = root.right, root.left # Recursively call the function on left and right subtrees invert_tree(root.left) invert_tree(root.right) return root def mirror_tree(root): Returns the mirrored version of a binary tree, which is essentially the same as the inverted binary tree. return invert_tree(root)"},{"question":"Write a code to generate a random number between 1 to 10 and print it. Then, implement functionality that validates if the generated number is a prime number.","solution":"import random def generate_random_number(): Generates a random number between 1 and 10 and returns it. return random.randint(1, 10) def is_prime(n): Checks if the given number n is a prime number. Returns True if n is prime, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a program that simulates a guessing game. The program should generate a random number between 1 and 100, and prompt the user to guess the number. If the user's guess is incorrect, the program should provide feedback on whether the actual number is higher or lower than the guess. The program should keep track of the number of incorrect guesses made by the user and display it at the end.","solution":"import random def guessing_game(): Simulates a guessing game where the user has to guess a number between 1 and 100. Provides feedback whether the guess was too high or too low. Keeps track of the number of incorrect guesses and displays it at the end. number_to_guess = random.randint(1, 100) guess = None attempt_count = 0 while guess != number_to_guess: try: guess = int(input(\\"Guess the number between 1 and 100: \\")) attempt_count += 1 if guess < number_to_guess: print(\\"Too low!\\") elif guess > number_to_guess: print(\\"Too high!\\") else: print(f\\"Congratulations! You guessed the number in {attempt_count} attempts.\\") except ValueError: print(\\"Invalid input. Please enter an integer between 1 and 100.\\") # Uncomment the following line to play the game: # guessing_game()"},{"question":"Given a two-dimensional array, write a code to print the elements column-wise. The array may contain duplicate elements. Your code should also handle the case when the array is empty and return an appropriate message. Additionally, you need to handle the case when the array is not a perfect rectangle (i.e., each row may have a different number of columns). In such cases, you should print an error message and skip that row while printing the elements column-wise. The array may also contain non-integer elements, and you should handle that by printing an error message and skipping that element while printing. You can assume that the array will not contain any nested arrays.","solution":"def print_column_wise(matrix): if not matrix: return \\"The array is empty\\" # Find the number of columns in the longest row max_columns = max(len(row) for row in matrix) result = [] for col in range(max_columns): column_elements = [] for row in matrix: if col < len(row): element = row[col] if isinstance(element, (int, float, str)): # Change this as per required non-integer types column_elements.append(element) else: return f\\"Error: Non-valid element {element} found. Skipping element.\\" result.append(column_elements) return result"},{"question":"Given a list of integers, write a Python function to find the maximum and minimum numbers using the reduce() function from the functools module. Make sure to handle edge cases, such as empty lists.","solution":"from functools import reduce def find_max_min(nums): Returns a tuple with the maximum and minimum numbers from the list. Uses reduce() from the functools module. if not nums: return (None, None) # Find the maximum number max_num = reduce(lambda a, b: a if a > b else b, nums) # Find the minimum number min_num = reduce(lambda a, b: a if a < b else b, nums) return (max_num, min_num)"},{"question":"Write a Python code to find the minimum value for a tuple of n elements. Each element in the tuple represents an integer value from a stream of data. Moreover, implement it in a way that the code handles tuple updates efficiently. The function should return the minimum value in the current tuple.","solution":"def find_min_value(data_tuple): Returns the minimum value in the given tuple of integers. Parameters: - data_tuple: tuple of integers Returns: - int: the minimum value in the tuple return min(data_tuple)"},{"question":"Create a random password of 15 characters that includes uppercase letters, lowercase letters, numbers, and special characters. Additionally, the password must not contain any repeating characters. Implement the function \`generate_password\` which takes no arguments and returns the generated password as a string.","solution":"import random import string def generate_password(): Generates a random password of 15 characters that includes uppercase letters, lowercase letters, numbers, and special characters. The password must not contain any repeating characters. length = 15 # Lists of allowed characters upper = list(string.ascii_uppercase) lower = list(string.ascii_lowercase) digits = list(string.digits) special = list(\\"!@#%^&*()-_=+[]{}|;:',.<>?/~\`\\") # Ensure we have at least one of each type of character password_chars = [ random.choice(upper), random.choice(lower), random.choice(digits), random.choice(special) ] # Combine all possible characters all_chars = upper + lower + digits + special # Fill the remaining characters of the password ensuring no repeats while len(password_chars) < length: choice = random.choice(all_chars) if choice not in password_chars: password_chars.append(choice) # Shuffle to ensure randomness random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"I have a train dataset and a test dataset, how can I train a model based on the train dataset and predict the result on the test dataset with PyTorch?","solution":"import torch import torch.nn as nn import torch.optim as optim from torch.utils.data import DataLoader, TensorDataset class SimpleModel(nn.Module): def __init__(self, input_dim, output_dim): super(SimpleModel, self).__init__() self.fc = nn.Linear(input_dim, output_dim) def forward(self, x): return self.fc(x) def train_model(train_data, train_labels, input_dim, output_dim, epochs=100, learning_rate=0.01): dataset = TensorDataset(torch.tensor(train_data, dtype=torch.float32), torch.tensor(train_labels, dtype=torch.float32)) dataloader = DataLoader(dataset, batch_size=32, shuffle=True) model = SimpleModel(input_dim, output_dim) criterion = nn.MSELoss() optimizer = optim.Adam(model.parameters(), lr=learning_rate) for epoch in range(epochs): for inputs, targets in dataloader: optimizer.zero_grad() outputs = model(inputs) loss = criterion(outputs, targets) loss.backward() optimizer.step() return model def predict(model, test_data): with torch.no_grad(): predictions = model(torch.tensor(test_data, dtype=torch.float32)) return predictions.numpy()"},{"question":"Implement a modified version of the quicksort algorithm to sort a large, unsorted integer array. The modified quicksort algorithm should use the median of three pivot selection strategy to improve its efficiency. Additionally, the algorithm should be implemented in a way that avoids recursive calls and instead uses an iterative approach with a stack data structure. Finally, analyze the time and space complexity of your algorithm.","solution":"def median_of_three(arr, low, high): mid = (low + high) // 2 if arr[low] > arr[mid]: arr[low], arr[mid] = arr[mid], arr[low] if arr[low] > arr[high]: arr[low], arr[high] = arr[high], arr[low] if arr[mid] > arr[high]: arr[mid], arr[high] = arr[high], arr[mid] return mid def partition(arr, low, high): pivot_index = median_of_three(arr, low, high) pivot_value = arr[pivot_index] arr[pivot_index], arr[low] = arr[low], arr[pivot_index] border = low for i in range(low, high + 1): if arr[i] < pivot_value: border += 1 arr[i], arr[border] = arr[border], arr[i] arr[low], arr[border] = arr[border], arr[low] return border def quicksort(arr): stack = [(0, len(arr) - 1)] while stack: low, high = stack.pop() if low < high: p = partition(arr, low, high) stack.append((low, p - 1)) stack.append((p + 1, high)) return arr"},{"question":"Write a python function to scrape list of products from 'www.example.com', extract their names and prices, and save them into a SQL database. Ensure the program is equipped with error handling capabilities to manage scenarios where the website might not be accessible or the required data is not found.","solution":"import requests from bs4 import BeautifulSoup import sqlite3 from sqlite3 import Error def scrape_and_store_products(url): Scrapes product names and prices from the given URL and stores them in an SQL database. try: response = requests.get(url) response.raise_for_status() soup = BeautifulSoup(response.text, 'html.parser') product_elements = soup.select('.product') # Assuming products have a class 'product' products = [] for element in product_elements: name = element.select_one('.product-name') # Assuming product names have a class 'product-name' price = element.select_one('.product-price') # Assuming product prices have a class 'product-price' if name and price: products.append((name.text.strip(), price.text.strip())) if not products: raise ValueError(\\"No products found on the page.\\") # Connect to SQLite database conn = sqlite3.connect('products.db') c = conn.cursor() # Create products table c.execute('''CREATE TABLE IF NOT EXISTS products (name TEXT, price TEXT)''') # Insert product data c.executemany('INSERT INTO products (name, price) VALUES (?, ?)', products) # Commit and close conn.commit() conn.close() return f\\"Successfully stored {len(products)} products.\\" except requests.exceptions.RequestException as e: # This will catch errors like connection problems, invalid URLs, etc. return f\\"Request failed: {e}\\" except Error as e: # This will catch SQLite errors return f\\"Database error: {e}\\" except Exception as e: return f\\"An error occurred: {e}\\""},{"question":"Similar to the provided code, create a method that calculates the number of days between two dates. However, instead of using the datetime module, use the calendar module to perform the calculation. Also, consider the case where one or both of the input dates are invalid. In such situations, the function should return -1. Additionally, ensure that the method can handle leap years correctly when calculating the number of days. The input dates will be in the format \\"MM/DD/YYYY\\". Include some test cases to verify the correctness of your solution.","solution":"import calendar def is_valid_date(mm, dd, yyyy): Checks if the provided date is valid. if yyyy < 1 or mm < 1 or mm > 12 or dd < 1 or dd > 31: return False if dd > calendar.monthrange(yyyy, mm)[1]: return False return True def days_in_year_days(year): Returns the number of days in a year. return 366 if calendar.isleap(year) else 365 def date_to_ordinal(mm, dd, yyyy): Converts a date to an ordinal (number of days since 01/01/0001). days = 0 # Add days for the years passed for year in range(1, yyyy): days += days_in_year_days(year) # Add days for the months passed for month in range(1, mm): days += calendar.monthrange(yyyy, month)[1] # Add days for the days passed days += dd return days def days_between_dates(date1, date2): Calculates the number of days between two dates. Returns -1 if either date is invalid. try: mm1, dd1, yyyy1 = map(int, date1.split('/')) mm2, dd2, yyyy2 = map(int, date2.split('/')) except ValueError: return -1 if not (is_valid_date(mm1, dd1, yyyy1) and is_valid_date(mm2, dd2, yyyy2)): return -1 return abs(date_to_ordinal(mm2, dd2, yyyy2) - date_to_ordinal(mm1, dd1, yyyy1))"},{"question":"Create a chess game using Python. The game should have a basic user interface which allows two players to make moves by entering the source and destination squares. The game should also validate the moves and terminate when a player wins the game.","solution":"class ChessPiece: def __init__(self, color): self.color = color def can_move(self, start, end, board): raise NotImplementedError class Pawn(ChessPiece): def can_move(self, start, end, board): # Simplified movement logic for pawns direction = 1 if self.color == 'white' else -1 start_row, start_col = start end_row, end_col = end if start_col == end_col: if end_row == start_row + direction: return True # Move forward one square if (self.color == 'white' and start_row == 1 or self.color == 'black' and start_row == 6): if end_row == start_row + 2 * direction: return True # Move forward two squares return False class ChessGame: def __init__(self): self.board = [[None for _ in range(8)] for _ in range(8)] # Place pawns for simplicity for col in range(8): self.board[1][col] = Pawn('white') self.board[6][col] = Pawn('black') self.current_turn = 'white' def is_valid_move(self, start, end): start_piece = self.board[start[0]][start[1]] end_piece = self.board[end[0]][end[1]] if not start_piece or start_piece.color != self.current_turn: return False return start_piece.can_move(start, end, self.board) def make_move(self, start, end): if self.is_valid_move(start, end): self.board[end[0]][end[1]] = self.board[start[0]][start[1]] self.board[start[0]][start[1]] = None self.current_turn = 'black' if self.current_turn == 'white' else 'white' return True return False"},{"question":"Develop a Python function that can identify Fibonacci numbers from a list of integers, including negative integers and floating point numbers. This function should be designed to handle exceptions for non-numeric inputs, empty lists, and should distinguish between Fibonacci numbers, non-Fibonacci numbers, and non-integer numbers. The output should be a detailed dictionary that contains the Fibonacci numbers along with their positions in the list, the non-Fibonacci numbers, and a count of non-integer numbers. Additionally, the function should return the highest and lowest Fibonacci numbers found in the list, and calculate the average of all Fibonacci numbers.","solution":"import math def is_fibonacci_number(n): Check if a number is a Fibonacci number by using the property that a number x is a Fibonacci number if and only if one or both of (5 * x^2 + 4) or (5 * x^2 - 4) is a perfect square. if n < 0: return False x1 = 5 * n * n + 4 x2 = 5 * n * n - 4 return is_perfect_square(x1) or is_perfect_square(x2) def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x def analyze_numbers(lst): Identify Fibonacci numbers from the list, provide a count of non-integer numbers, as well as analyze the highest, lowest and average of Fibonacci numbers found. result = { \\"fibonacci_numbers\\": [], \\"non_fibonacci_numbers\\": [], \\"non_integer_count\\": 0, \\"highest_fibonacci_number\\": None, \\"lowest_fibonacci_number\\": None, \\"average_fibonacci_number\\": None } if not lst: return result fib_positions = {} for idx, value in enumerate(lst): if not isinstance(value, int): result[\\"non_integer_count\\"] += 1 continue if is_fibonacci_number(value): fib_positions[value] = idx else: result[\\"non_fibonacci_numbers\\"].append(value) if fib_positions: fib_numbers = list(fib_positions.keys()) result[\\"fibonacci_numbers\\"] = [{\\"value\\": k, \\"position\\": fib_positions[k]} for k in fib_numbers] result[\\"highest_fibonacci_number\\"] = max(fib_numbers) result[\\"lowest_fibonacci_number\\"] = min(fib_numbers) result[\\"average_fibonacci_number\\"] = sum(fib_numbers) / len(fib_numbers) return result"},{"question":"Create a function that takes two arguments, a list of strings and a string and returns the number of times the passed in string appears in the list.","solution":"def count_occurrences(lst, s): Returns the number of times the string \`s\` appears in the list \`lst\`. Args: lst: list of strings s: string to be counted Returns: int: number of occurrences of \`s\` in \`lst\` return lst.count(s)"},{"question":"Design a Python function that computes the total volume of a given list of cylinders, where each cylinder is represented by a dictionary containing 'radius', 'height', and 'y' as keys, and returns a list of volumes paired with the corresponding input dictionary. Additionally, filter out and do not include in the volume calculation any cylinders where 'y' does not equal 'private'. Include exception handling for potential data input errors.","solution":"import math def cylinder_volume(cylinders): Computes the volume of cylinders and returns a list of volumes paired with the corresponding input dictionary. Only include cylinders where 'y' equals 'private'. Parameters: cylinders (list): A list of dictionaries, where each dictionary represents a cylinder with keys 'radius', 'height', 'y'. Returns: list: A list of tuples, each containing (volume, cylinder dictionary). results = [] for cyl in cylinders: try: if cyl.get('y') == 'private': radius = cyl['radius'] height = cyl['height'] volume = math.pi * (radius ** 2) * height results.append((volume, cyl)) except (KeyError, TypeError) as e: # Handle cases where dictionary is malformed or contains incorrect types print(f\\"Error computing volume for cylinder {cyl}: {e}\\") return results"},{"question":"Create an algorithm in Python for a binary search. The algorithm should take in a list of integers and a number to search for and return true or false depending on whether the number exists in the list.","solution":"def binary_search(arr, target): Perform a binary search to determine if the target exists in the sorted list arr. Parameters: arr (list of int): A sorted list of integers to search target (int): The number to search for in the list Returns: bool: True if target is in the list, False otherwise left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return True elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"I have a string containing integers in Python. How can I write a script that converts this string into integers and calculates their sum?","solution":"def sum_from_string(s): Converts a string containing space-separated integers into individual integers and calculates their sum. Parameters: s (str): A string containing space-separated integers. Returns: int: The sum of the integers in the string. # Split the string into a list of strings, each representing an integer string_numbers = s.split() # Convert the list of string numbers to a list of integers integers = [int(num) for num in string_numbers] # Calculate and return the sum of the integers return sum(integers)"},{"question":"Write a python program to prompt the user for input to create and print a dictionary.","solution":"def create_and_print_dict(): Prompts the user for input to create and print a dictionary. n = int(input(\\"Enter number of items in the dictionary: \\")) d = {} for _ in range(n): key = input(\\"Enter key: \\") value = input(\\"Enter value: \\") d[key] = value print(d) return d"},{"question":"See the multi-level dictionary. Write a Python program to sort the given multi-level dictionary first by level 1 keys, then by level 2 keys in reverse order. Bear in mind that the values of level 2 keys are integer type. Once sorted, transform the dictionary into a list of tuples.","solution":"def sort_and_transform_dict(input_dict): Sort the multi-level dictionary first by level 1 keys, then by level 2 keys in reverse order, and transform the dictionary into a list of tuples. # Sort level 1 keys sorted_level1 = sorted(input_dict.items()) result = [] for key1, value1 in sorted_level1: # Sort level 2 keys in reverse order and store the tuples sorted_level2 = sorted(value1.items(), key=lambda item: item[0], reverse=True) for key2, value2 in sorted_level2: result.append((key1, key2, value2)) return result"},{"question":"Create a function to search a list l for the value v. The list can contain both positive and negative integers, and can have duplicate values. The value v can be any integer. If the value v is found in the list l, the function should return the index of the first occurrence of v. If v is not found in the list, the function should return -1.","solution":"def search_list(l, v): Searches the list l for the value v, and returns the index of the first occurrence of v. If v is not found in the list, returns -1. for index, value in enumerate(l): if value == v: return index return -1"},{"question":"Write a Python function that takes a list of strings as an argument and returns a dictionary where each string is a key and the value is the number of vowels in the string. The dictionary should be sorted by the values in descending order.","solution":"def count_vowels(s): Helper function to count vowels in a single string. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels) def vowels_in_strings(strings_list): Takes a list of strings and returns a dictionary where each string is a key and the value is the number of vowels in the string. The dictionary is sorted by the values in descending order. # Create a dictionary with string as key and number of vowels as value vowel_count_dict = {string: count_vowels(string) for string in strings_list} # Sort the dictionary by values in descending order and return return dict(sorted(vowel_count_dict.items(), key=lambda item: item[1], reverse=True))"},{"question":"Write a return statement for a function that adds two numbers and returns the result. However, the function should also check if the sum is a prime number and return a tuple containing the sum and a boolean value indicating whether it is prime or not.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def add_and_check_prime(a, b): Adds two numbers a and b and returns a tuple containing the sum and a boolean indicating whether the sum is a prime number. sum_value = a + b is_sum_prime = is_prime(sum_value) return (sum_value, is_sum_prime)"},{"question":"Given the following Python code, generate a function that will print the first 5 elements of a list, but with the constraint that the function must have a time complexity of O(1). Additionally, the function must not modify the original list or create a new list with the first 5 elements. The function should only print the elements directly without any additional formatting.","solution":"def print_first_five_elements(lst): Prints the first 5 elements of the list if the list has at least 5 elements. Prints only the available elements if the list has fewer than 5 elements. for i in range(min(5, len(lst))): print(lst[i], end='') print('') # Ending the line after printing the elements"},{"question":"Develop a Python function named \`fridge_cold\`. This function should take in a \`temperature\` argument, and it should return a boolean value. If the temperature is less than 32 degrees Fahrenheit (the freezing point of water), the function should return True. However, if it is at or above this freezing point, it should return False. Remember to consider the fact that temperatures below 32 degrees Fahrenheit are considered cold for a fridge although technically freezing. Make sure the function is correctly named and the logic accurately reflects the temperature check requirement.","solution":"def fridge_cold(temperature): Returns True if the temperature is less than 32 degrees Fahrenheit, otherwise returns False. return temperature < 32"},{"question":"Write a Python program to check if a given string is a palindrome, but with an additional requirement that the program should also check and ignore any non-alphanumeric characters in the string. The program should be case-insensitive.","solution":"def is_palindrome(s): Checks if the given string is a palindrome, ignoring non-alphanumeric characters and case. Args: s (str): Input string to check. Returns: bool: True if the input string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered = ''.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered == filtered[::-1]"},{"question":"Reverse a given string using a recursive function in Python, without using any built-in string manipulation functions or data structures, and the function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def reverse_string_recursive(s, start=0, end=None): Reverses the given string using recursion. Args: s (str): The string to reverse. start (int): The starting index for the current recursive call. end (int): The ending index for the current recursive call. Returns: str: The reversed string. if end is None: end = len(s) - 1 # Base case: when start index is greater than or equal to end index if start >= end: return s # Swap the characters at start and end indices and recurse swapped = s[:start] + s[end] + s[start + 1:end] + s[start] + s[end + 1:] return reverse_string_recursive(swapped, start + 1, end - 1)"},{"question":"Given a list of integers and a target sum, write a function that returns two distinct integers from the list that add up to the target sum. If no such pair exists, return None. Assume there is exactly one solution and the same element cannot be used twice. Additionally, you are required to implement a function to check if the input list has any duplicate values. If duplicates are found, your function should raise a ValueError with an appropriate message.","solution":"def find_pair_with_target_sum(nums, target_sum): Finds two distinct integers in \`nums\` that sum up to \`target_sum\`. Args: nums (list): List of integers. target_sum (int): The target sum. Returns: tuple: A tuple containing the two integers that add up to \`target_sum\`, or None if no such pair exists. seen = set() for num in nums: complement = target_sum - num if complement in seen: return (complement, num) seen.add(num) return None def check_for_duplicates(nums): Checks if the input list has any duplicate values. Args: nums (list): List of integers. Raises: ValueError: If duplicates are found in the list. if len(nums) != len(set(nums)): raise ValueError(\\"Duplicates found in the input list.\\")"},{"question":"Write a Python script that prints the current time in the format \\"HH:MM:SS\\" in the Eastern Standard Time (EST) timezone. Additionally, include a function to calculate the number of seconds elapsed since a specific date and time that the user can specify in the format \\"YYYY-MM-DD HH:MM:SS\\". The function should return the number of seconds as an integer. Use appropriate error handling to validate user input.","solution":"from datetime import datetime, timezone, timedelta import pytz def get_current_time_est(): Returns the current time in the format \\"HH:MM:SS\\" in Eastern Standard Time (EST). est = pytz.timezone('US/Eastern') current_time = datetime.now(est) return current_time.strftime(\\"%H:%M:%S\\") def seconds_elapsed_since(date_time_str): Calculates the number of seconds elapsed since a specific date and time. :param date_time_str: A string representing the date and time in the format \\"YYYY-MM-DD HH:MM:SS\\". :return: The number of seconds elapsed as an integer. :raises: ValueError if the input date_time_str is not in the correct format. try: format_str = \\"%Y-%m-%d %H:%M:%S\\" user_time = datetime.strptime(date_time_str, format_str).replace(tzinfo=pytz.utc) current_time = datetime.now(timezone.utc) elapsed_time = (current_time - user_time).total_seconds() return int(elapsed_time) except ValueError: raise ValueError(\\"Incorrect date format, should be YYYY-MM-DD HH:MM:SS\\")"},{"question":"Write a Python program to create a random string of size 15 consisting of lowercase and uppercase alphanumeric characters, including special characters, where the string must contain at least one digit, one uppercase letter, one lowercase letter, and one special character.","solution":"import random import string def generate_random_string(length=15): Generate a random string of specified length containing at least one uppercase letter, one lowercase letter, one digit, and one special character. if length < 4: raise ValueError(\\"Length must be at least 4 to include one of each required character type.\\") characters = string.ascii_letters + string.digits + string.punctuation while True: random_string = ''.join(random.choice(characters) for _ in range(length)) has_upper = any(c.isupper() for c in random_string) has_lower = any(c.islower() for c in random_string) has_digit = any(c.isdigit() for c in random_string) has_special = any(c in string.punctuation for c in random_string) if has_upper and has_lower and has_digit and has_special: return random_string"},{"question":"Write a Python program to check if a given number is a narcissistic number (Armstrong number) or not. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.","solution":"def is_narcissistic_number(number): Checks if a given number is a narcissistic (Armstrong) number. :param number: The number to check :return: True if the number is a narcissistic number, False otherwise # Convert number to string to easily iterate over digits num_str = str(number) # Get the number of digits num_digits = len(num_str) # Calculate the sum of the digits each raised to the power of the number of digits sum_of_powers = sum(int(digit) ** num_digits for digit in num_str) # A number is narcissistic if it is equal to the sum of its digits raised to the power of the number of digits return sum_of_powers == number"},{"question":"Write a script in Python that will find the average of a list of numbers. However, the list may contain both integers and strings. Your script should handle this situation by excluding any strings from the calculation and considering only the numbers in the list. The script should also handle cases where the list contains nested lists, and calculate the average by considering all the numbers in the nested lists as well. The script should have a time complexity of O(n) and a space complexity of O(1), where n is the total number of elements in the list (including nested lists).","solution":"def flatten_and_filter_numbers(input_list): Flatten the nested list structure and filter out non-numeric values. Args: input_list (list): The nested input list containing integers, strings, and other lists. Returns: list: A flattened list containing only the numeric values. for element in input_list: if isinstance(element, list): yield from flatten_and_filter_numbers(element) elif isinstance(element, (int, float)): yield element def calculate_average(input_list): Calculate the average of all numeric values in a nested list structure, ignoring strings. Args: input_list (list): The nested input list containing integers, strings, and other lists. Returns: float: The average of all numeric values present in the input list. total_sum = 0 count = 0 for number in flatten_and_filter_numbers(input_list): total_sum += number count += 1 if count == 0: return 0.0 # Handle the case where there are no numeric values. return total_sum / count"},{"question":"Write a Python function that takes as input an array and rotates it to the right by k steps, where k is non-negative. For example, with an input array [1,2,3,4,5,6,7] and k = 3, the output should be [5,6,7,1,2,3,4].","solution":"def rotate_array_right(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): The input array. k (int): The number of steps to rotate the array. Returns: list: The rotated array. if len(arr) == 0: return arr k %= len(arr) # Handle cases where k is larger than the array length return arr[-k:] + arr[:-k]"},{"question":"Given two strings, write a program to check if one string is a rotation of the other.","solution":"def are_rotations(str1, str2): Checks if one string is a rotation of another. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if one string is a rotation of the other, False otherwise. # Check if lengths are different, then they can't be rotations if len(str1) != len(str2): return False # Concatenate str1 with itself and see if str2 is a substring of this concatenated = str1 + str1 return str2 in concatenated"},{"question":"Write a function in any programming language to sort an array of integers using the Quicksort algorithm.","solution":"def quicksort(arr): Sorts an array of integers using the Quicksort algorithm. Args: arr (list): A list of integers to sort. Returns: list: A new sorted list of integers. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Devise a series of coded instructions that would enable the creation of a figurative arrangement of asterisk characters, forming a schematic representation of a pyramid structure with a depth of 'n' levels.","solution":"def pyramid(n): Returns a pyramid with n levels, made of asterisk (*) characters. Args: n (int): The number of levels in the pyramid. Returns: str: The pyramid string with n levels. pyramid_str = \\"\\" for i in range(n): spaces = ' ' * (n - i - 1) stars = '*' * (2 * i + 1) pyramid_str += spaces + stars + spaces if i < n - 1: pyramid_str += 'n' return pyramid_str"},{"question":"Create a Python method that takes a list of alphanumeric strings as input. The function should return the alphanumeric string that has the largest number of unique characters, and in case of a tie, return the one that comes first lexicographically. Ensure the method is robust to handle edge cases including an empty list or list with only single-character strings.","solution":"def unique_char_string(strings): Returns the alphanumeric string that has the largest number of unique characters. In case of a tie, returns the one that comes first lexicographically. if not strings: return \\"\\" def count_unique_chars(s): return len(set(s)) # Sort first to handle lexicographical tie breaker automatically strings.sort() return max(strings, key=count_unique_chars)"},{"question":"Create a Python program to rearrange the elements of a given list such that all odd numbers come before all even numbers.","solution":"def rearrange_odd_even(numbers): Rearranges the elements of the given list such that all odd numbers come before all even numbers. Parameters: numbers (list of int): The list of integers to rearrange. Returns: list of int: A new list with odd numbers before even numbers. odds = [num for num in numbers if num % 2 != 0] evens = [num for num in numbers if num % 2 == 0] return odds + evens"},{"question":"Create a function in Python to sort the given list of strings based on the length of strings.","solution":"def sort_by_length(strings): Sorts a list of strings based on their length in ascending order. Parameters: strings (list): A list of strings to be sorted. Returns: list: A new list of strings sorted by their lengths. return sorted(strings, key=len)"},{"question":"Develop a Python function that calculates the product of all prime numbers less than or equal to n. Also, modify the function to return the product modulo m, where m is a large prime number (e.g. 10^9+7). Consider edge cases, such as when n is less than 2, and handle errors and exceptions gracefully.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def product_of_primes(n, m=10**9+7): Returns the product of all prime numbers less than or equal to n, modulo m. if n < 2: return 1 product = 1 for num in range(2, n + 1): if is_prime(num): product = (product * num) % m return product"},{"question":"Explain how to create a Heap data structure in Python programming with specific emphasis on MinHeap. Further, write functions to insert elements, extract minimum element, and display the heap elements in ascending order.","solution":"import heapq class MinHeap: def __init__(self): self.heap = [] def insert(self, element): Inserts an element into the heap. heapq.heappush(self.heap, element) def extract_min(self): Extracts and returns the smallest element from the heap. if not self.heap: return None return heapq.heappop(self.heap) def display_heap(self): Returns the elements of the heap in ascending order. return sorted(self.heap) # Example usage: # min_heap = MinHeap() # min_heap.insert(3) # min_heap.insert(1) # min_heap.insert(4) # min_heap.insert(2) # print(min_heap.extract_min()) # Output: 1 # print(min_heap.display_heap()) # Output: [2, 3, 4]"},{"question":"You have a large file that you need to process line by line, and for each line, you need to extract all the email addresses. The email addresses can be in various formats, but they all must follow the standard pattern of \\"username@domain.extension\\". The username can contain uppercase and lowercase letters, digits, dots, hyphens, and underscores, and it may have a length up to 64 characters. The domain name should be at most 63 characters long and can include only letters and hyphens. The extension should be between 2 to 6 characters comprising only letters. Write a robust regex pattern to match these email addresses accurately. Additionally, provide a sample code snippet in Python that uses this regex pattern to process a text string. Your solution should also handle common edge cases, such as email addresses enclosed in quotes, and avoid false positives for substrings that might look like email addresses but are not, such as \\"example.com\\". In your response, include explanations of your regex pattern and how it deals with these edge cases. To further increase the difficulty, your code should also handle cases where there are multiple email addresses in a single line and return them as separate matches.","solution":"import re def extract_emails(text): Extracts and returns all email addresses from the given text. email_pattern = r'b[A-Za-z0-9._%+-]{1,64}@[A-Za-z0-9.-]{1,63}.[A-Za-z]{2,6}b' return re.findall(email_pattern, text) # A sample code snippet to process text string def process_large_text(text): Processes the given text line by line to extract email addresses. email_addresses = [] for line in text.splitlines(): email_addresses.extend(extract_emails(line)) return email_addresses"},{"question":"Design a Python function \`select_words\` that sifts through a given list of strings and returns a new list with only the strings that contain at least one vowel. The function should ignore case when checking for vowels. Additionally, the function should exclude any strings that start with a vowel, even if they contain other vowels.","solution":"def select_words(words): Filters the list of strings and returns only those that contain at least one vowel but do not start with a vowel. Case is ignored for vowels. vowels = set('aeiouAEIOU') def contains_vowel(word): return any(char in vowels for char in word) def starts_with_vowel(word): return word[0] in vowels selected_words = [word for word in words if contains_vowel(word) and not starts_with_vowel(word)] return selected_words"},{"question":"Given the following code snippet in Python, which contains errors and does not function as expected, rectify and enhance it to create a recursive method that correctly calculates the factorial of a given non-negative integer. Also, this method must be able to handle large inputs efficiently and should throw an appropriate exception if the input is negative.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises ValueError if n is negative. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Using tree sort algorithm, sort the following array of numbers in ascending order. Detect any possible edge cases in this array that may affect the sorting process, such as repeated numbers, negative numbers or null values and explicitly handle them in your implementation. Implement your solution in Python.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) else: if root.val < key: root.right = insert(root.right, key) else: root.left = insert(root.left, key) return root def inorder_traversal(root, result): if root: inorder_traversal(root.left, result) result.append(root.val) inorder_traversal(root.right, result) return result def tree_sort(arr): if not arr: return [] root = None for num in arr: if num is not None: # Handle null values explicitly root = insert(root, num) sorted_arr = inorder_traversal(root, []) return sorted_arr"},{"question":"Given a string, write a program to check if the string is a palindrome without using any built-in string functions or libraries. The program should ignore case sensitivity and special characters, and consider only alphanumeric characters. Additionally, the program should have a time complexity of O(n) and a space complexity of O(1).","solution":"def is_palindrome(s: str) -> bool: Check if the string 's' is a palindrome, ignoring case sensitivity and non-alphanumeric characters. # Helper function to check alphanumeric characters def is_alphanumeric(char): return ('a' <= char <= 'z') or ('0' <= char <= '9') # Convert the string to lower case for case insensitive comparison s = s.lower() left, right = 0, len(s) - 1 while left < right: # Move the left index to the next alphanumeric character while left < right and not is_alphanumeric(s[left]): left += 1 # Move the right index to the previous alphanumeric character while left < right and not is_alphanumeric(s[right]): right -= 1 # Compare characters when both are alphanumeric if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a Python function that takes a list of strings and returns a dictionary where the keys are the unique strings in the list that have a length greater than or equal to 3, and the values are the number of occurrences of those strings in the input list. Ignore strings with a length less than 3.","solution":"def count_strings(strings): Returns a dictionary where the keys are the unique strings from the input list that have a length greater than or equal to 3, and the values are the number of occurrences of those strings in the input list. result = {} for string in strings: if len(string) >= 3: if string in result: result[string] += 1 else: result[string] = 1 return result"},{"question":"Create a python function that takes a single integer as an argument and prints out the corresponding multiplication table. However, the function should only display the odd numbers in the table, skipping any even numbers. Additionally, the function should handle cases where the input is not a positive integer and display an appropriate error message.","solution":"def print_odd_multiplication_table(n): Prints the multiplication table of n, displaying only the odd numbers in the table. Parameters: n (int): The number for which the multiplication table will be printed. Raises: ValueError: If the input is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") for i in range(1, 11): product = n * i if product % 2 != 0: print(f\\"{n} x {i} = {product}\\")"},{"question":"Please write a python script that checks the validity of an email address using regular expressions. The script should take an email address as user input and output whether or not the email is valid.","solution":"import re def is_valid_email(email): Checks the validity of an email address using regular expressions. Args: email (str): The email address to be validated. Returns: bool: True if the email is valid, False otherwise. pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.match(pattern, email) is not None"},{"question":"Create a function using Python programming language that accepts two numerical arguments in the form of string. Your task is not only to outline the larger quantity of the two, but also to implement exception handling to assure that string representations of only numeric data are processed. The function should handle cases with non-numeric string data and return an appropriate error message.","solution":"def compare_strings_as_numbers(str1, str2): Compares two string representations of numbers and returns the larger one. Raises ValueError if any of the strings is not a valid number. try: num1 = float(str1) num2 = float(str2) except ValueError: return \\"Error: Both inputs must be numeric strings.\\" if num1 > num2: return str1 elif num1 < num2: return str2 else: return \\"Both numbers are equal.\\""},{"question":"Write a function that finds the longest common subsequence between two given strings. Additionally, ensure that your solution does not exceed O(n*m) time complexity where n and m are lengths of the input strings respectively.","solution":"def longest_common_subsequence(s1, s2): Finds the longest common subsequence between two given strings. Arguments: s1 -- first string s2 -- second string Returns: The longest common subsequence. n, m = len(s1), len(s2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the LCS from the DP table lcs = [] i, j = n, m while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(reversed(lcs))"},{"question":"Write a Python program to find the maximum profit from the stock market. The program should take a list of stock prices and return the maximum profit possible, given that you can only make one transaction.","solution":"def max_profit(prices): Returns the maximum profit from a list of stock prices. You can only make one transaction (i.e., buy one and sell one share of the stock). if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a Python function to generate the powerset of a given list, where the list may contain duplicate elements. The function should return the powerset in sorted order, and each subset in the powerset should also be sorted in non-decreasing order. The function should have a time complexity of O(2^n * n), where n is the length of the input list.","solution":"def generate_powerset(lst): Generate the powerset of the given list including handling of duplicates. Parameters: lst (List[int]): List of integers which might contain duplicates. Returns: List[List[int]]: Powerset of the list with each subset sorted and overall list sorted. from itertools import combinations lst_sorted = sorted(lst) powerset = set() for r in range(len(lst_sorted) + 1): for subset in combinations(lst_sorted, r): powerset.add(subset) powerset_list = [list(subset) for subset in sorted(powerset)] return powerset_list"},{"question":"Write a script to generate a random string of a user-specified length. The string should only include alphanumeric characters. The script should also provide the option to include or exclude uppercase and lowercase letters and digits. Additionally, the script should allow the user to generate multiple random strings at once. The generated strings should be displayed in a user-friendly format.","solution":"import random import string def generate_random_string(length, include_uppercase=True, include_lowercase=True, include_digits=True): Generates a random string of the specified length. Parameters: - length (int): The length of the random string. - include_uppercase (bool): Whether to include uppercase letters in the random string. - include_lowercase (bool): Whether to include lowercase letters in the random string. - include_digits (bool): Whether to include digits in the random string. Returns: - str: The generated random string. if length <= 0: raise ValueError(\\"Length must be a positive integer.\\") charset = '' if include_uppercase: charset += string.ascii_uppercase if include_lowercase: charset += string.ascii_lowercase if include_digits: charset += string.digits if not charset: raise ValueError(\\"At least one character set (uppercase, lowercase, digits) must be enabled.\\") return ''.join(random.choices(charset, k=length)) def generate_multiple_random_strings(count, length, include_uppercase=True, include_lowercase=True, include_digits=True): Generates multiple random strings of the specified length. Parameters: - count (int): The number of random strings to generate. - length (int): The length of each random string. - include_uppercase (bool): Whether to include uppercase letters in the random strings. - include_lowercase (bool): Whether to include lowercase letters in the random strings. - include_digits (bool): Whether to include digits in the random strings. Returns: - list: A list containing the generated random strings. return [generate_random_string(length, include_uppercase, include_lowercase, include_digits) for _ in range(count)]"},{"question":"Create a Python program to sort a dictionary by the sum of its keys and values. The dictionary will contain string keys and integer values. Implement the program using only one loop.","solution":"def sort_dict_by_sum_kv(input_dict): Returns a dictionary sorted by the sum of keys (converted to int) and values. sorted_items = sorted(input_dict.items(), key=lambda item: int(item[0]) + item[1]) return dict(sorted_items)"},{"question":"Create a Python function that takes two strings as inputs and checks if they are anagrams. The function should be case insensitive and ignore any spaces or special characters. Additionally, the function should only use O(1) extra space and have a time complexity of O(n log n), where n is the length of the input strings.","solution":"import re def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. The check is case insensitive and ignores spaces and special characters. # Remove spaces and special characters, and convert to lower case clean_str1 = re.sub(r'[^a-zA-Z0-9]', '', str1).lower() clean_str2 = re.sub(r'[^a-zA-Z0-9]', '', str2).lower() # Sort the cleaned strings and compare return sorted(clean_str1) == sorted(clean_str2)"},{"question":"Develop a Python function that calculates the aggregate quantity of prime numbers within a specified list. This function must be equipped to process substantial lists efficiently. Furthermore, the function should be capable of recognizing and ignoring non-integer and negative values within the list.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_primes(numbers): Returns the aggregate quantity of prime numbers within a specified list. Ignores non-integer and negative values. return sum(1 for number in numbers if isinstance(number, int) and number > 0 and is_prime(number))"},{"question":"Write a Python function to remove all duplicate elements from a list while preserving the original order of the remaining elements. The function should only iterate through the list once, and it should have a time complexity of O(n).","solution":"def remove_duplicates(lst): Removes duplicate elements from lst while preserving the original order of the remaining elements. The function iterates through the list once. :param lst: List of elements where duplicates are to be removed :return: List with duplicates removed, preserving the original order seen = set() result = [] for item in lst: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"How can I implement a doubly linked list in Python?","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def prepend(self, data): new_node = Node(data) if not self.head: self.head = new_node return self.head.prev = new_node new_node.next = self.head self.head = new_node def delete(self, node): if not self.head: return if self.head == node: self.head = node.next if self.head: self.head.prev = None node = None return if node.next: node.next.prev = node.prev if node.prev: node.prev.next = node.next node = None def display(self): elems = [] curr = self.head while curr: elems.append(curr.data) curr = curr.next return elems"},{"question":"Given a sequence of alphanumeric strings, devise a function that would construct a novel sequence. This sequence should consist of the strings from the input that have the property of symmetry, also known as palindromes, and should be arranged in a descending order based on their length.","solution":"def extract_and_sort_palindromes(sequence): Extracts palindromic strings from the input sequence and sorts them in descending order of their length. Parameters: sequence (list): List of alphanumeric strings. Returns: list: Sorted list of palindromic strings in descending order of their length. # Helper function to check if a string is a palindrome def is_palindrome(s): return s == s[::-1] # Extract palindromic strings palindromes = [s for s in sequence if is_palindrome(s)] # Sort palindromic strings by length in descending order palindromes.sort(key=len, reverse=True) return palindromes"},{"question":"code a Python script that converts temperatures in celsius to fahrenheit. The script should also include error handling to ensure that the user enters a valid temperature value.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. Returns the Fahrenheit value as a float. Raises TypeError if celsius is not a number. if not isinstance(celsius, (int, float)): raise TypeError(\\"Temperature must be a number.\\") return (celsius * 9/5) + 32"},{"question":"Develop a cryptographic hash function in Python that also includes a salting feature to add more security. Explain how it can be used in securely storing passwords.","solution":"import hashlib import os def hash_password(password, salt=None): Hashes a password with an optional salt for added security. :param password: The password to be hashed. :param salt: Optional salt. If not provided, a new salt will be generated. :return: A tuple (salt, hashed_password) where both are hex-encoded strings. if salt is None: salt = os.urandom(16) # Generating a new 16-byte salt else: salt = bytes.fromhex(salt) # Converting from hex string to bytes # Create the hash using SHA-256 hash_obj = hashlib.sha256() hash_obj.update(salt + password.encode('utf-8')) hashed_password = hash_obj.hexdigest() return salt.hex(), hashed_password def verify_password(stored_password, entered_password, stored_salt): Verifies if the entered password matches the stored password by re-hashing with the stored salt. :param stored_password: The previously hashed password. :param entered_password: The password entered by the user for verification. :param stored_salt: The salt used during the original password hashing. :return: True if the entered password is correct, False otherwise. entered_salt, entered_hash = hash_password(entered_password, salt=stored_salt) return stored_password == entered_hash"},{"question":"Write a code that not only displays the current directory path in the terminal, but also lists out all subdirectories and files within it. For files, your code should also display their respective sizes and last modified dates. Handle any exceptions appropriately.","solution":"import os from datetime import datetime def display_directory_contents(path='.'): Displays the current directory path and lists all subdirectories and files within it. For files, it displays their size and last modified date. try: full_path = os.path.abspath(path) print(f\\"Current directory: {full_path}\\") with os.scandir(full_path) as entries: for entry in entries: if entry.is_file(): file_info = entry.stat() file_size = file_info.st_size last_modified_date = datetime.fromtimestamp(file_info.st_mtime).strftime('%Y-%m-%d %H:%M:%S') print(f\\"File: {entry.name}, Size: {file_size} bytes, Last Modified: {last_modified_date}\\") elif entry.is_dir(): print(f\\"Directory: {entry.name}\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Explain how a linked list works in programming and provide an implementation of a function to reverse a linked list. A linked list is a linear data structure in which each node is a separate object that contains a value and a reference (or pointer) to the next node in the sequence. Unlike an array, where elements are stored in contiguous memory locations, the nodes in a linked list can be scattered throughout memory. The advantage of linked lists lies in their dynamic size and efficient insertion or deletion operations, which can be more complex in arrays.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def reverse_linked_list(head): Reverses a linked list. Parameters: head (Node): The head node of the linked list. Returns: Node: The new head node of the reversed linked list. previous = None current = head while current is not None: next_node = current.next # Temporarily store the next node current.next = previous # Reverse the current node's pointer previous = current # Move the pointer one position ahead current = next_node # Move to the next node in the list return previous # New head node of the reversed list"},{"question":"Implement the pre-order, in-order, and post-order tree traversal methods for a binary tree in Python programming language. Additionally, create methods to verify the correctness of these traversal functions by comparing the output with expected values.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def pre_order_traversal(root): if not root: return [] return [root.value] + pre_order_traversal(root.left) + pre_order_traversal(root.right) def in_order_traversal(root): if not root: return [] return in_order_traversal(root.left) + [root.value] + in_order_traversal(root.right) def post_order_traversal(root): if not root: return [] return post_order_traversal(root.left) + post_order_traversal(root.right) + [root.value]"},{"question":"Write a python function that aggregates two lists - one of integers and the other of strings. Your aggregation should be able to handle three types of operations: 'append', 'prepend', and 'intertwine'. 'Append' should add all string elements to the end of the list of integers. 'Prepend' should add all string elements to the beginning of the list of integers. 'Intertwine' should alternate between integers and strings (or vice versa if strings are the longer list). The function should return the resulting list and use a default argument for the operation which is 'append' if not specified.","solution":"def aggregate_lists(integers, strings, operation='append'): Aggregates two lists: one of integers and one of strings, based on the specified operation. :param integers: List of integers :param strings: List of strings :param operation: 'append', 'prepend', or 'intertwine' :return: Aggregated list The 'append' operation adds all string elements to the end of the list of integers. The 'prepend' operation adds all string elements to the beginning of the list of integers. The 'intertwine' operation alternates between integers and strings. if operation not in {'append', 'prepend', 'intertwine'}: raise ValueError(\\"Invalid operation. Operation must be 'append', 'prepend', or 'intertwine'.\\") if operation == 'append': return integers + strings elif operation == 'prepend': return strings + integers elif operation == 'intertwine': result = [] i, j = 0, 0 while i < len(integers) or j < len(strings): if i < len(integers): result.append(integers[i]) i += 1 if j < len(strings): result.append(strings[j]) j += 1 return result"},{"question":"Iterate through the given array and print the prime numbers in ascending order. Additionally, ensure that the program runs in O(n) time complexity and uses only constant extra space.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_ascending_order(arr): Given an array, returns the prime numbers in ascending order. Ensure the program runs in O(n) time complexity and uses only constant extra space. # Filter out the prime numbers primes = [num for num in arr if is_prime(num)] # Sort the primes in ascending order (which is O(n log n)) primes.sort() return primes"},{"question":"I have a list of words in Python, and I want to create a function that will determine if one word is a subset of the other word. It means that all the letters of the first word are present in the second word, regardless of the order of occurrence. How can I do that?","solution":"def is_subset(word1, word2): Determines if all letters of word1 are present in word2. Args: word1 (str): The first word. word2 (str): The second word. Returns: bool: True if all letters of word1 are present in word2, False otherwise. from collections import Counter counter1 = Counter(word1) counter2 = Counter(word2) for char in counter1: if counter1[char] > counter2[char]: return False return True"},{"question":"Write a Python program to read in a list of numbers from the user and output the maximum and minimum numbers in the list.","solution":"def find_max_min(numbers): Returns the maximum and minimum numbers from a list of numbers. if not numbers: return None, None return max(numbers), min(numbers)"},{"question":"Write a function that takes in a string of HTML code as input and adds a padding of 10px and a background color of #f2f2f2 to all paragraph tags within the code. The function should return the modified HTML code.","solution":"from bs4 import BeautifulSoup def add_styles_to_paragraphs(html): Adds a padding of 10px and a background color of #f2f2f2 to all paragraph tags within the given HTML code. Parameters: html (str): A string containing the HTML code. Returns: str: The modified HTML code with updated paragraph tags. soup = BeautifulSoup(html, 'html.parser') for p in soup.find_all('p'): style = p.get('style', '') if '10px' not in style: style += 'padding: 10px;' if '#f2f2f2' not in style: style += 'background-color: #f2f2f2;' p['style'] = style return str(soup)"},{"question":"Develop a Python function to generate the Fibonacci sequence of a specified length, n. The function should not only return the Fibonacci sequence, but also the sum of the even valued terms in the sequence. Ensure that the function can handle large values of n efficiently.","solution":"def fibonacci_sequence_and_sum_even(n): Generate the Fibonacci sequence up to the n-th term and return the sequence and the sum of the even valued terms. Args: n (int): Length of the Fibonacci sequence to generate. Returns: tuple: (Fibonacci sequence as a list, sum of the even valued terms) if n <= 0: return [], 0 fib_sequence = [0, 1] sum_even = 0 if n == 1: return [0], 0 for i in range(2, n): next_value = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_value) if next_value % 2 == 0: sum_even += next_value return fib_sequence[:n], sum_even"},{"question":"Write a Python code to print \\"Hello World\\" on the console and also add a function that reverses the string.","solution":"def print_hello_world(): Prints 'Hello World' to the console. print(\\"Hello World\\") def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Given a Python list of integers, write a program to convert all odd numbers greater than 10 to string format, all even numbers less than or equal to 10 to binary format, and leave all other numbers unchanged. The resultant list should have the same order as the original list.","solution":"def convert_numbers(lst): Convert a list of integers based on the following rules: 1. Odd numbers greater than 10 are converted to strings. 2. Even numbers less than or equal to 10 are converted to binary format. 3. All other numbers are left unchanged. :param lst: List of integers :return: Transformed list based on the above rules result = [] for num in lst: if num > 10 and num % 2 != 0: result.append(str(num)) elif num <= 10 and num % 2 == 0: result.append(bin(num)[2:]) else: result.append(num) return result"},{"question":"Write a python function that checks whether a given string is a palindrome or not. Additionally, modify this function so it is case-insensitive and ignores punctuation and white spaces. Also, define another function that calculates the frequency of each character in the string. Both functions should handle errors gracefully by providing messages for invalid inputs.","solution":"import string def is_palindrome(s): Checks if a given string is a palindrome, ignoring cases, punctuation, and whitespace. Args: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") # Remove punctuation and convert to lowercase translator = str.maketrans('', '', string.punctuation) s = s.translate(translator).replace(\\" \\", \\"\\").lower() # Check if the string is a palindrome return s == s[::-1] def character_frequency(s): Calculates the frequency of each character in the given string. Args: s (str): The input string. Returns: dict: A dictionary with characters as keys and their frequencies as values. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") freq = {} for char in s.lower(): if char in string.ascii_letters: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Imagine that you're working with a 2D list in Python, but you have a constraint where you can only use a single line of code. Your goal is to flatten this 2D list into a 1D list. The original 2D list can contain integers, strings, or even other lists, and you need to handle all these cases.","solution":"flattened_list = lambda lst: [item for sublist in lst for item in (flattened_list(sublist) if isinstance(sublist, list) else [sublist])]"},{"question":"I have two strings, str1 and str2. I want to find the length of the longest common subsequence between them. Can you help me with the code to achieve this?","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. m, n = len(str1), len(str2) # Create a 2D array to store lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m): for j in range(n): if str1[i] == str2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) return dp[m][n]"},{"question":"Write a function to find the n-th Fibonacci number for a given n, using memoization to optimize the computation. Additionally, implement error handling to raise a custom exception if the function is called with a negative value or non-integer input.","solution":"class InvalidInputError(Exception): Custom exception to handle invalid inputs for the fibonacci function. pass def fibonacci(n, memo={}): Returns the n-th Fibonacci number using memoization. Parameters: n (int): the position in the Fibonacci sequence to compute Returns: int: The n-th Fibonacci number Raises: InvalidInputError: if n is negative or non-integer if not isinstance(n, int): raise InvalidInputError(\\"Input must be an integer.\\") if n < 0: raise InvalidInputError(\\"Input cannot be a negative integer.\\") # Check if value is already computed if n in memo: return memo[n] if n == 0: return 0 elif n == 1: return 1 else: result = fibonacci(n-1, memo) + fibonacci(n-2, memo) memo[n] = result return result"},{"question":"Given an unsorted list and a target value, write a function in Python that returns the index of the target if it is present in the list, and -1 if it is not. However, you are not allowed to use built-in functions like \\"index\\", \\"find\\", \\"count\\", etc.","solution":"def find_target_index(lst, target): Returns the index of the target in the list if present, otherwise returns -1. for i in range(len(lst)): if lst[i] == target: return i return -1"},{"question":"Given two lists, create a function that finds the common elements between the two lists. The function should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the longer list. Additionally, the function should not use any built-in functions or methods for comparing or iterating through the lists, and it should handle lists with up to 100,000,000 elements.","solution":"def find_common_elements(list1, list2): Finds common elements between two lists using two-pointer technique after sorting. Args: list1 (list): first list of elements. list2 (list): second list of elements. Returns: list: list of common elements. # Sort both lists list1.sort() list2.sort() i, j = 0, 0 common_elements = [] # Use two pointer technique to find common elements while i < len(list1) and j < len(list2): if list1[i] < list2[j]: i += 1 elif list1[i] > list2[j]: j += 1 else: common_elements.append(list1[i]) i += 1 j += 1 return common_elements"},{"question":"Modified quicksort algorithm with a random pivot selection for improved performance","solution":"import random def quicksort(arr): Sorts an array using the Quicksort algorithm with a random pivot selection. if len(arr) <= 1: return arr pivot_index = random.randint(0, len(arr) - 1) pivot = arr[pivot_index] less = [x for x in arr if x < pivot] equal = [x for x in arr if x == pivot] greater = [x for x in arr if x > pivot] return quicksort(less) + equal + quicksort(greater)"},{"question":"Write a function in Python to remove all 'null' values from a nested dictionary.","solution":"def remove_null_values(d): Recursively remove all entries with 'null' values from a nested dictionary. if isinstance(d, dict): keys_to_remove = [key for key, value in d.items() if value is None] for key in keys_to_remove: del d[key] for key, value in d.items(): remove_null_values(value) elif isinstance(d, list): for item in d: remove_null_values(item) return d"},{"question":"Write a Python function that takes a string as input and returns True if the string is a valid JSON, else returns False.","solution":"import json def is_valid_json(s): Returns True if the input string is a valid JSON, else returns False. try: json.loads(s) except ValueError: return False return True"},{"question":"Given two input arrays, write a function in Python to find and return the element(s) that appears most often in the first array but is/are NOT present in the second array.","solution":"from collections import Counter def find_most_frequent_element_not_in_second_array(arr1, arr2): Finds the element(s) that appears most often in the first array but is/are NOT present in the second array. Parameters: arr1 : list The first list of elements. arr2 : list The second list of elements. Returns: list List of the most frequent element(s) from arr1 that are not in arr2. # Count the frequency of elements in arr1 element_count = Counter(arr1) # Remove elements that are present in arr2 for element in arr2: if element in element_count: del element_count[element] # Check if element_count is empty if not element_count: return [] # Find the maximum frequency max_count = max(element_count.values()) # Collect elements with maximum frequency result = [element for element, count in element_count.items() if count == max_count] return result"},{"question":"Generate a program to solve the knapsack problem using dynamic programming in Python.","solution":"def knapsack(weights, values, capacity): Solves the knapsack problem using dynamic programming. Parameters: weights (list of int): Weights of the items. values (list of int): Values of the items. capacity (int): Maximum capacity of the knapsack. Returns: int: The maximum value that can be carried in the knapsack. n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index. The function should also handle cases where the lists are not of equal length by only using the length of the shorter list to create the dictionary. Additionally, the function should handle cases where the input lists are not provided and return an empty dictionary in such cases.","solution":"def create_dict_from_lists(list1, list2): Creates a dictionary from two lists where each key-value pair is formed by taking elements at the same index from both lists. If the lists are of unequal length, uses the length of the shorter list. Returns an empty dictionary if either input list is not provided or both are empty. Args: list1: The first list. list2: The second list. Returns: dict: A dictionary with keys and values from list1 and list2 respectively. if not list1 or not list2: return {} min_length = min(len(list1), len(list2)) return {list1[i]: list2[i] for i in range(min_length)}"},{"question":"Write a recursive function called \`fib\` that computes the Fibonacci sequence. The function should accept a positive integer \`n\` as a parameter and return the \`n\`th Fibonacci number. The function should include error checking to verify that \`n\` is a positive integer. If \`n\` is not a positive integer, the function should raise a custom error with an appropriate error message.","solution":"class FibArgumentError(ValueError): pass def fib(n): Returns the n-th Fibonacci number using recursion. Args: n (int): The position in the Fibonacci sequence (must be a positive integer). Returns: int: The n-th Fibonacci number. Raises: FibArgumentError: If n is not a positive integer. if not isinstance(n, int) or n <= 0: raise FibArgumentError('The input must be a positive integer.') if n == 1 or n == 2: return 1 return fib(n-1) + fib(n-2)"},{"question":"I have a dataset and I want to create a function to reverse the order of the elements in each row. How can I achieve this using Python?","solution":"def reverse_rows(dataset): Reverses the order of elements in each row of the given dataset. Parameters: dataset (list of lists): A 2D list where each inner list represents a row in the dataset. Returns: list of lists: A new dataset with the order of elements in each row reversed. return [row[::-1] for row in dataset]"},{"question":"Write a Python program that takes an integer as input and checks if it's a prime number. If it is prime, the program should print \\"The number is prime.\\" If not, it should print \\"The number is not prime.\\" Additionally, the program should also list all factors of the number it is being checked. Lastly, include a function that finds the next prime number greater than the input number.","solution":"def is_prime(n): Checks if the given integer n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def list_factors(n): Lists all factors of the given integer n. factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors def next_prime(n): Finds the next prime number greater than the given integer n. candidate = n + 1 while True: if is_prime(candidate): return candidate candidate += 1 def prime_check_and_factors(n): Checks if the number is prime and lists all factors of the number. Prints the results. if is_prime(n): print(\\"The number is prime.\\") else: print(\\"The number is not prime.\\") factors = list_factors(n) print(f\\"Factors of {n}: {factors}\\") return factors"},{"question":"Given a Python list that may contain nested lists, write the code to flatten it. Additionally, the code should ignore any non-integer elements and only flatten elements that are lists or tuples. The flattened list should be sorted in descending order.","solution":"def flatten_and_sort(nested_list): Flattens a nested list, ignores non-integer elements, and returns a sorted (desc) flat list. Parameters: nested_list - list: A list that can contain nested lists or tuples. Returns: list: A sorted flat list with only integer elements in descending order. def flatten(lst): for item in lst: if isinstance(item, (list, tuple)): yield from flatten(item) elif isinstance(item, int): yield item flattened_list = list(flatten(nested_list)) return sorted(flattened_list, reverse=True)"},{"question":"In a singularly linked list, write a method to rearrange the list so that all the nodes with the even numbers come before all the nodes with the odd numbers.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def rearrange_even_odd(head): if not head: return head even_head = even_tail = ListNode(0) odd_head = odd_tail = ListNode(0) current = head while current: if current.value % 2 == 0: even_tail.next = current even_tail = even_tail.next else: odd_tail.next = current odd_tail = odd_tail.next current = current.next even_tail.next = odd_head.next odd_tail.next = None return even_head.next"},{"question":"Given two arrays A and B in Python, write a program to find the product of their intersection. For example, if A = [2, 3, 4, 5] and B = [4, 5, 6, 7], the intersection is [4, 5] and their product should output 20.","solution":"def product_of_intersection(A, B): Finds the product of the intersection of two arrays A and B. Args: A: List of integers. B: List of integers. Returns: int: The product of the intersection elements. intersection = set(A).intersection(set(B)) # If there is no intersection, return 0 if not intersection: return 0 # Calculate the product of the intersection elements product = 1 for num in intersection: product *= num return product"},{"question":"Use Python to print a multiplication table for the numbers from 1 to 10. Additionally, implement error handling to handle any potential errors that may occur during the execution of the program. Before printing the table, ask the user for their preferred table size (number of rows and columns) and validate the input to ensure it is a positive integer. Also, add a feature where the program can handle large table sizes by printing the table in sections, with each section having a maximum of 10 rows and columns. Additionally, provide an option for the user to choose whether they want the table to be formatted in a landscape or portrait orientation.","solution":"def generate_multiplication_table(rows, columns, orientation='landscape'): Generate a multiplication table based on the specified number of rows and columns. Supports landscape and portrait orientations. Args: rows (int): Number of rows in the multiplication table. columns (int): Number of columns in the multiplication table. orientation (str): 'landscape' or 'portrait' (default is 'landscape'). Returns: List of strings representing the multiplication table. table = [] for r in range(1, rows + 1): row = [] for c in range(1, columns + 1): if orientation == 'landscape': row.append(f'{r * c:4}') else: row.append(f'{c * r:4}') table.append(' '.join(row)) return table def print_table(table): for line in table: print(line) def main(): try: rows = int(input(\\"Enter the number of rows for the table: \\")) columns = int(input(\\"Enter the number of columns for the table: \\")) orientation = input(\\"Enter the table orientation (landscape/portrait): \\").strip().lower() if rows <= 0 or columns <= 0: raise ValueError(\\"Rows and columns must be positive integers.\\") if orientation not in ['landscape', 'portrait']: raise ValueError(\\"Invalid orientation. Choose 'landscape' or 'portrait'.\\") # Determine the size of sections and handle large tables max_section_size = 10 for start_row in range(1, rows + 1, max_section_size): for start_col in range(1, columns + 1, max_section_size): end_row = min(start_row + max_section_size - 1, rows) end_col = min(start_col + max_section_size - 1, columns) print(f\\"nTable from row {start_row} to {end_row} and column {start_col} to {end_col}:\\") section_table = generate_multiplication_table(end_row, end_col, orientation) print_table(section_table) except ValueError as ve: print(f\\"Input error: {ve}\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\") # Uncomment the below line to allow user interaction # if __name__ == \\"__main__\\": # main()"},{"question":"Given two strings, write a program to output 1 if the strings are anagrams of each other, else output 0.","solution":"def are_anagrams(str1, str2): Returns 1 if str1 and str2 are anagrams of each other, otherwise returns 0. return 1 if sorted(str1) == sorted(str2) else 0"},{"question":"Create a program that generates a random 7x7 grid of characters, where each character is randomly chosen from a set of 5 different characters (e.g. '@', '#', '', '%', '&'). The program should also include a function to check if the grid contains a certain pattern, such as a row, column or diagonal where all characters are the same.","solution":"import random def generate_grid(characters): Generates a 7x7 grid of characters. Args: characters: A list of characters to use in the grid. Returns: A 7x7 grid (list of lists) of randomly selected characters. return [[random.choice(characters) for _ in range(7)] for _ in range(7)] def contains_pattern(grid): Checks if the grid contains a row, column, or diagonal where all characters are the same. Args: grid: A 7x7 grid (list of lists). Returns: True if such a pattern exists, False otherwise. size = len(grid) # Check rows for row in grid: if len(set(row)) == 1: return True # Check columns for col in range(size): if len(set(grid[row][col] for row in range(size))) == 1: return True # Check main diagonal if len(set(grid[i][i] for i in range(size))) == 1: return True # Check anti-diagonal if len(set(grid[i][size-i-1] for i in range(size))) == 1: return True return False"},{"question":"Write a python program that uses numpy and scipy to perform matrix operations on 3D arrays, then applies an optimization algorithm to find the minimum value of a given function in multiple dimensions. Finally, display the output using matplotlib.","solution":"import numpy as np import scipy.optimize as opt import matplotlib.pyplot as plt def matrix_operations_and_optimization(mat_a, mat_b, func, initial_guess): Perform matrix operations on 3D arrays and apply optimization algorithm. Parameters: mat_a (numpy.ndarray): The first 3D array mat_b (numpy.ndarray): The second 3D array func (callable): The function to minimize initial_guess (numpy.ndarray): The initial guess for the minimization Returns: result (OptimizeResult): The result of the optimization # Perform some matrix operations mat_sum = np.add(mat_a, mat_b) mat_product = np.matmul(mat_a, mat_b) mat_diff = np.subtract(mat_a, mat_b) # Perform optimization using scipy.optimize result = opt.minimize(func, initial_guess) # Display matrix operations results using matplotlib fig, axes = plt.subplots(1, 3, figsize=(18, 6)) axes[0].imshow(mat_sum[:, :, 0]) axes[0].set_title('Sum of Arrays') axes[1].imshow(mat_product[:, :, 0]) axes[1].set_title('Product of Arrays') axes[2].imshow(mat_diff[:, :, 0]) axes[2].set_title('Difference of Arrays') plt.show() return result"},{"question":"lets say for instance that I have an object facilitated by its own application process which queries a database with data in the form of arrays which are then compiled by said object until said object has enough data to compile a list. until this point, nothing remarkable is going on. however, the unique factor in this scenario is that the list compiled in said object is not simply a static entity to be accessed linearly, but can be dynamically manipulated by external stimuli - that is to say, external interactions cause it to be updated and therefore 'changed'. how can I implement this kind of event driven functionality such that updates to my list affect not only local references to the list but global references as well?","solution":"class ObservableList: def __init__(self): self._list = [] self._observers = [] def add_observer(self, observer): self._observers.append(observer) def _notify_observers(self): for observer in self._observers: observer.update(self._list) def append(self, item): self._list.append(item) self._notify_observers() def remove(self, item): self._list.remove(item) self._notify_observers() def get_list(self): return self._list class Observer: def __init__(self): self.updated_list = None def update(self, new_list): self.updated_list = new_list"},{"question":"Create an array of 10 integers initialized to zero and print their values. Additionally, you are required to implement a function that takes in the array as a parameter and returns the sum of all the even-indexed elements in the array. However, you must use a ternary operator instead of a traditional if-else statement to check if an index is even.","solution":"def initialize_array(): Creates an array of 10 integers initialized to zero. return [0] * 10 def sum_even_index_elements(arr): Returns the sum of all even-indexed elements in the array using a ternary operator. Parameters: arr (list): List of integers. Returns: int: Sum of all even-indexed elements. return sum(arr[i] if i % 2 == 0 else 0 for i in range(len(arr))) # Example usage array = initialize_array() print(f\\"Array: {array}\\") sum_even = sum_even_index_elements(array) print(f\\"Sum of even-indexed elements: {sum_even}\\")"},{"question":"Devise a Python subroutine that calculates the disparity between the maximum and minimum integers within a provided array. This subroutine should be equipped to manage situations where the array may encompass duplicate integers, negative integers, or is completely empty. Moreover, the subroutine should be capable of processing extensive arrays efficiently without exceeding time and space complexity limitations.","solution":"def calculate_disparity(arr): Calculates the disparity between the maximum and minimum integers in an array. Args: arr (list): List of integers which can be duplicated, negative, or empty. Returns: int: The disparity between the maximum and minimum integers in the array. If the array is empty, returns 0. if not arr: return 0 max_value = max(arr) min_value = min(arr) return max_value - min_value"},{"question":"Design an algorithm to efficiently search for an element in a sorted 2D array. The 2D array can have varying lengths for its rows. Additionally, devise your solution to handle cases where the array might not be perfectly square but is still guaranteed to be sorted both row-wise and column-wise.","solution":"def search_sorted_2d_array(matrix, target): Searches for a target value in a row-wise and column-wise sorted 2D array. :param matrix: List of lists where each row and column is sorted. :param target: The value to search for in the 2D array. :return: Tuple (row, col) if target is found, otherwise (-1, -1). if not matrix: return -1, -1 rows = len(matrix) cols = len(matrix[0]) row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return row, col elif matrix[row][col] < target: row += 1 else: col -= 1 return -1, -1"},{"question":"I have this code, and I want to modify it so that the function reads data from a csv file with two columns: \\"Value\\" and \\"Category\\", and processes the data to return the number of occurrences of each category. Can you show me how to implement this using pandas in Python, and also add some optional parameters to the function like debug and delimiter?","solution":"import pandas as pd def count_categories(file_path, delimiter=',', debug=False): Reads a csv file with columns \\"Value\\" and \\"Category\\" and returns the count of occurrences of each category. Parameters: - file_path: str, path to the csv file - delimiter: str, delimiter used in the csv file, default is ',' - debug: bool, if set to True, prints debug information, default is False Returns: - dict, where keys are categories and values are counts of occurrences try: # Read the CSV file data = pd.read_csv(file_path, delimiter=delimiter) if debug: print(\\"Data read from file:\\") print(data) # Group by \\"Category\\" and count the occurrences category_counts = data['Category'].value_counts().to_dict() if debug: print(\\"Category counts:\\") print(category_counts) return category_counts except Exception as e: if debug: print(f\\"An error occurred: {e}\\") return {}"},{"question":"Please write a Python function that takes a list of HTML files as input and returns a dictionary containing the number of unique URLs found in each file. The keys of the dictionary should be the file names (excluding the file extension) and the values should be the number of unique URLs found in that file. The function should also print out the total number of URLs found across all files.","solution":"import re from typing import List, Dict def count_unique_urls(file_list: List[str]) -> Dict[str, int]: url_pattern = re.compile(r'href=\\"([^\\"]+)\\"') url_counts = {} total_urls = set() for file_name in file_list: with open(file_name, 'r') as file: content = file.read() urls = set(re.findall(url_pattern, content)) base_name = file_name.rsplit(\\".\\", 1)[0] url_counts[base_name] = len(urls) total_urls.update(urls) print(f\\"Total unique URLs found across all files: {len(total_urls)}\\") return url_counts"},{"question":"Suppose you have a binary search tree and a key value. Write a Python program to search for the key in the tree and return the node if found. If the key is not found, return None.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def search_bst(root, key): Searches for a key in a binary search tree. :param root: Root of the binary search tree :param key: Key value to search for :return: Node with the key if found, None otherwise if root is None: return None if root.key == key: return root elif key < root.key: return search_bst(root.left, key) else: return search_bst(root.right, key)"},{"question":"Given a 2D array of non-negative integers, replace each element in the array with the greatest element found on its row. The problem should be solved using an object-oriented approach in Python. Create a class \`MatrixMaximizer\` with a method \`maximize_elements\` that accepts the 2D array as a parameter and returns the modified array.","solution":"class MatrixMaximizer: def maximize_elements(self, matrix): Replaces each element in the 2D array with the greatest element found on its row. :param matrix: List of List of non-negative integers :return: Modified matrix with each element replaced by the greatest element in its row if not matrix: # If matrix is empty, return it as is return matrix # Iterate over each row in the matrix for row in matrix: max_element = max(row) # Find the maximum element in the current row for i in range(len(row)): row[i] = max_element # Replace each element with the maximum element return matrix"},{"question":"Develop a function that finds elements appearing once in a list even if there are multiple unique elements present. Additionally, the function should handle large lists efficiently, maintaining performance with lists up to 10,000 elements. Address any memory leak issues for the function to perform efficiently when run multiple times.","solution":"def find_unique_elements(lst): Returns a list of elements that appear exactly once in the given list. Parameters: lst (list): A list of elements. Returns: list: A list of elements that appear exactly once. frequency = {} for item in lst: if item in frequency: frequency[item] += 1 else: frequency[item] = 1 unique_elements = [item for item in lst if frequency[item] == 1] return unique_elements"},{"question":"Formulate a Boolean function that not only evaluates if the provided sequence of alphanumeric characters is a mirror image of itself, also known as a palindrome, but also validates if the input is in fact a valid alphanumeric string. Check for the absence of special characters, whitespace and ensure that string is not empty.","solution":"def is_valid_alphanumeric(s): Check if the input string is a valid alphanumeric string. return s.isalnum() and not any(char.isspace() for char in s) def is_palindrome(s): Check if the provided alphanumeric string is a palindrome. if not is_valid_alphanumeric(s): return False return s == s[::-1] def is_valid_palindrome(s): Check if the provided string is a valid alphanumeric string and is a palindrome. return is_valid_alphanumeric(s) and is_palindrome(s)"},{"question":"Given two strings, write a Python code snippet to check if the two strings are isomorphic to each other. Two strings are said to be isomorphic if the characters in string A can be replaced with any other characters to get string B. Note that all occurrences of a character must be replaced with another character while preserving the order of characters, and no two characters may map to the same character, a character may not map to itself.","solution":"def are_isomorphic(str1, str2): Check if str1 and str2 are isomorphic. Two strings are isomorphic if characters in str1 can be replaced to get str2, without any character mapping to more than one character and preserving the order. if len(str1) != len(str2): return False mapping = {} mapped = set() for char1, char2 in zip(str1, str2): if char1 not in mapping: if char2 in mapped: return False mapping[char1] = char2 mapped.add(char2) elif mapping[char1] != char2: return False return True"},{"question":"Print the following 2D matrix in row-major order without using a standard loop, such as for or while, but using recursion instead.","solution":"def print_matrix(matrix, row=0, col=0): Recursively print elements of the matrix in row-major order. Parameters: matrix (list of lists): 2D matrix to be printed row (int): Current row index col (int): Current column index if row >= len(matrix): return if col < len(matrix[row]): print(matrix[row][col], end=' ') print_matrix(matrix, row, col + 1) else: print() # Newline after each row print_matrix(matrix, row + 1, 0)"},{"question":"Write a python program to calculate the median of a list of integers. The list is provided with an odd length, so there will be a single middle number which refers to the median of the list. We assume the list is unsorted.","solution":"def calculate_median(int_list): Returns the median of a list of integers. The length of the list is assumed to be odd. # Sort the list sorted_list = sorted(int_list) # Calculate the median mid_index = len(sorted_list) // 2 return sorted_list[mid_index]"},{"question":"I want to create a program that calculates the square root of a list of numbers. However, I also want to ignore any negative numbers in the list since they shouldn't be processed. How can I achieve this using Python?","solution":"import math def calculate_square_roots(numbers_list): Returns a list of square roots for the non-negative numbers in the numbers_list. Negative numbers are ignored. return [math.sqrt(num) for num in numbers_list if num >= 0]"},{"question":"Write a recursive function in Python that finds the maximum element in a non-empty list of integers. The function should not use any built-in Python functions that can directly solve this problem (like max()) or any sorting functions.","solution":"def find_max(lst): Recursively finds the maximum element in a non-empty list of integers. Args: lst (list): A non-empty list of integers. Returns: int: The maximum integer in the list. if len(lst) == 1: return lst[0] else: max_in_rest = find_max(lst[1:]) return lst[0] if lst[0] > max_in_rest else max_in_rest"},{"question":"Create a user-defined function to calculate the factorial of a negative integer. Additionally, the function should handle exceptions for invalid inputs like decimal numbers and non-numeric strings, returning a meaningful error message.","solution":"def factorial(n): Returns the factorial of a non-negative integer. Raises ValueError for negative integers and TypeError for non-integer values. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative integers.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a Python function that takes a list of integers and returns a new list with only the odd integers from the original list, in the same order. If there are no odd integers in the original list, return a list containing a single element: -1.","solution":"def filter_odds(lst): Returns a list containing only the odd integers from the given list. If there are no odd integers, returns a list with a single element: -1. odds = [num for num in lst if num % 2 != 0] return odds if odds else [-1]"},{"question":"Design a function that transforms a given list into a dictionary, where each item of the list is assigned as a key in the dictionary. The values for these keys should default to a value of \\"None\\", unless the key is a negative number, in which case the value should be the string \\"Negative\\". If the list item is a positive number greater than 100, the value should be the string \\"Large\\". For items in the list that are string type, the value should be the length of the string if it is less than 6 characters long, or the first 3 characters capitalized if it is 6 or more characters long. The function should return this dictionary.","solution":"def transform_list_to_dict(lst): Transforms a given list into a dictionary based on specific rules: - Numbers become keys and are assigned values: - \\"None\\" for non-negative numbers (<= 100) - \\"Negative\\" for negative numbers - \\"Large\\" for positive numbers greater than 100 - Strings become keys and are assigned values: - The length of the string if it is less than 6 characters - The first 3 characters capitalized if it is 6 or more characters long result = {} for item in lst: if isinstance(item, int): if item < 0: result[item] = \\"Negative\\" elif item > 100: result[item] = \\"Large\\" else: result[item] = None elif isinstance(item, str): if len(item) < 6: result[item] = len(item) else: result[item] = item[:3].upper() return result"},{"question":"Python has a lot of great features for string processing. Can you write a Python function that takes a string as input and returns a dictionary with the count of each character in the string? Make sure to handle uppercase and lowercase letters as separate characters.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. Uppercase and lowercase letters are treated as separate characters. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Using regex, create a pattern to match a string that consists of exactly four uppercase letters followed by a space, three digits, and ends with three lowercase letters. The string should not contain any special characters or punctuation marks. Additionally, implement a function that takes in a list of strings and returns only the strings that match the pattern. The function should also remove any duplicate strings from the result.","solution":"import re def match_pattern(strings): Filters a list of strings to return only those matching the specified pattern. The pattern is: Exactly four uppercase letters followed by a space, three digits, and ends with three lowercase letters. No special characters or punctuation marks. Args: strings (list of str): List of strings to filter. Returns: list of str: List of strings that match the pattern and are unique. pattern = re.compile(r'^[A-Z]{4} d{3}[a-z]{3}') matched_strings = set(filter(pattern.match, strings)) return list(matched_strings)"},{"question":"Propose an algorithm in Python for sorting a given list of integers in descending order, without using any built-in sorting functions or libraries. Additionally, ensure that your algorithm has a time complexity of O(n log n) and a space complexity of O(log n). In this updated version, you are not allowed to use any additional data structures or recursion. You can only modify the given list in place to achieve the sorted result.","solution":"def heapify(arr, n, i): Helper function to maintain the heap property largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) def heap_sort(arr): Sorts the given list of integers in descending order using heap sort. Time complexity: O(n log n) Space complexity: O(log n) n = len(arr) # Build a max heap for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) # One by one extract elements from heap and rebuild heap for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # Swap heapify(arr, i, 0) # Reverse the array to get descending order arr.reverse()"},{"question":"I am converting a Jupyter notebook into a Python module. How can I write the code to input a CSV file's name, and then directly load that CSV file using pandas?","solution":"import pandas as pd def load_csv_file(file_name): Given the name of a CSV file, reads the CSV file into a Pandas DataFrame. Parameters: file_name (str): The name of the CSV file to be loaded. Returns: pd.DataFrame: DataFrame containing the data from the CSV file. return pd.read_csv(file_name)"},{"question":"Create a function that can take two pieces of data, an array and a number, and return an array with the number added to each element. The function should also handle the case where the input array contains nested arrays. Additionally, the function should only use recursion to achieve the desired result, without using any loops or built-in array manipulation methods.","solution":"def add_to_each_element(data, num): Recursively adds num to each element in the data. Handles nested arrays as well. if isinstance(data, list): return [add_to_each_element(item, num) for item in data] elif isinstance(data, (int, float)): return data + num else: raise TypeError(\\"The data should be either an integer, float, or a list of these.\\")"},{"question":"As a programmer, you are tasked with creating a Python function that can determine the number of perfect square numbers within a specific range. Your function should take in two integer parameters, 'start' and 'end', which will mark the beginning and end of the range inclusively. The function will return the count of perfect square numbers that exist within this range.","solution":"import math def count_perfect_squares(start, end): Returns the count of perfect square numbers between start and end (inclusive). if start > end: return 0 # Find the smallest square root greater or equal to start start_sqrt = math.ceil(math.sqrt(start)) # Find the largest square root smaller or equal to end end_sqrt = math.floor(math.sqrt(end)) if start_sqrt > end_sqrt: return 0 return end_sqrt - start_sqrt + 1"},{"question":"Develop a Python function that calculates the total cost of a shopping cart, given the quantities, unit prices, and applying any available discounts. Discounts are applicable if the quantity of a certain product is above a threshold, reducing the unit price by a certain percentage.","solution":"def calculate_total_cost(cart, discounts): Calculates the total cost of a shopping cart, given the quantities, unit prices, and discounts. :param cart: List of tuples, each containing the quantity and unit price of an item. :param discounts: List of tuples, each containing the threshold quantity and percentage discount. Each position in the list corresponds to the respective item in the cart. :return: Total cost of the shopping cart. total_cost = 0 for i, (quantity, unit_price) in enumerate(cart): threshold, discount_percentage = discounts[i] if quantity >= threshold: unit_price *= (1 - discount_percentage / 100) total_cost += quantity * unit_price return total_cost"},{"question":"Write a code that computes the roots of a quadratic equation given by the equation: ax^2 + bx + c = 0, where a, b, and c are real numbers. The code should handle cases where the equation has two real solutions, one real solution, or no real solutions, and output appropriate error messages.","solution":"import math def compute_roots(a, b, c): Computes the roots of the quadratic equation ax^2 + bx + c = 0. Returns a tuple of roots (root1, root2) if there are two real solutions, a single value if there is one real solution, and None if there are no real solutions. if a == 0: raise ValueError(\\"Coefficient 'a' cannot be zero in a quadratic equation\\") discriminant = b**2 - 4*a*c if discriminant > 0: root1 = (-b + math.sqrt(discriminant)) / (2*a) root2 = (-b - math.sqrt(discriminant)) / (2*a) return (root1, root2) elif discriminant == 0: root = -b / (2*a) return root else: return None"},{"question":"Write a code to generate a list of common elements from two given lists. The code should ignore duplicates and should return the common elements in descending order. The two given lists can contain integers, floats, or strings. The code should be able to handle lists of any length, with a maximum length of 1000 elements. Additionally, the code should only use basic data structures and algorithms, without relying on any external libraries or functions.","solution":"def common_elements(list1, list2): Returns a list of common elements in descending order after removing duplicates from list1 and list2. Handles integers, floats, and strings. # Using set to remove duplicates and find common elements set1 = set(list1) set2 = set(list2) # Finding the common elements common_set = set1.intersection(set2) # Converting the set to a list and sorting it in descending order common_list = sorted(list(common_set), reverse=True) return common_list"},{"question":"Write a code script that yields the Fibonacci sequence within a specified range m to n, where m and n are integers. Additionally, implement a feature to output sequences with only prime numbers and validate on conditions.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def fibonacci_within_range(m, n): Generate the Fibonacci sequence within the range m to n. fib_seq = [] a, b = 0, 1 while a <= n: if a >= m: fib_seq.append(a) a, b = b, a + b return fib_seq def prime_fibonacci_within_range(m, n): Generate the Fibonacci sequence within the range m to n that contains only prime numbers. fib_seq = fibonacci_within_range(m, n) prime_fib_seq = [num for num in fib_seq if is_prime(num)] return prime_fib_seq"},{"question":"Create a function that takes in a list of integers, and returns a new list containing only the odd numbers from the original list, in the same order. The function should have a time complexity of O(n), where n is the length of the input list.","solution":"def filter_odds(numbers): Returns a list containing only the odd numbers from the original list. :param numbers: List of integers. :return: List of odd integers. return [num for num in numbers if num % 2 != 0]"},{"question":"Given a list of integers, write a Python function that splits the list into two parts. The first part should contain only odd numbers, and the second part should contain only even numbers. Both parts should maintain the original order of numbers. Implement this without using any built-in functions or libraries that directly solve the problem.","solution":"def split_odd_and_even(numbers): Splits the list into two parts: odds and evens, maintaining the original order. Args: numbers (list of int): The list of integers to be split. Returns: tuple: Two lists, the first containing odd numbers and the second containing even numbers. odds = [] evens = [] for num in numbers: if num % 2 != 0: odds.append(num) else: evens.append(num) return odds, evens"},{"question":"Write a Python program to verify if a list of numbers contains only even numbers. The program should check each number in the list and return True if all numbers are even, otherwise return False. Additionally, the program should sort the list in ascending order before checking the numbers. The program should have a time complexity of O(nlogn), where n is the number of elements in the list.","solution":"def all_even_sorted(nums): Verify if a list of numbers contains only even numbers after sorting in ascending order. Parameters: nums (list): A list of integers. Returns: bool: True if all numbers are even, False otherwise. nums.sort() # Sorting the list in ascending order with O(nlogn) complexity return all(num % 2 == 0 for num in nums)"},{"question":"Create a program that not only counts the total characters in the provided string but also counts the number of vowels and consonants separately. Additionally, the program should ignore case sensitivity and any non-alphabetic characters in the string.","solution":"def count_characters_vowels_consonants(s): Counts the total characters, vowels, and consonants in the given string. Ignores non-alphabetic characters and is case-insensitive. Parameters: s (str): The input string Returns: dict: A dictionary with total characters, number of vowels, and number of consonants vowels = set('aeiou') consonants = set('bcdfghjklmnpqrstvwxyz') total_characters = 0 total_vowels = 0 total_consonants = 0 for char in s.lower(): if char.isalpha(): total_characters += 1 if char in vowels: total_vowels += 1 elif char in consonants: total_consonants += 1 return { \\"total\\": total_characters, \\"vowels\\": total_vowels, \\"consonants\\": total_consonants }"},{"question":"Create a function in Python that can compute the volume of a rectangular room in cubic feet. The function should also handle any potential errors or invalid inputs.","solution":"def calculate_volume(length, width, height): Calculate the volume of a rectangular room in cubic feet. Parameters: length (float): Length of the room in feet. width (float): Width of the room in feet. height (float): Height of the room in feet. Returns: float: Volume of the room in cubic feet. # Validating the inputs to ensure they are positive numbers if not (isinstance(length, (int, float)) and isinstance(width, (int, float)) and isinstance(height, (int, float))): raise ValueError(\\"All dimensions must be numbers.\\") if length <= 0 or width <= 0 or height <= 0: raise ValueError(\\"All dimensions must be positive numbers.\\") return length * width * height"},{"question":"Is there a way to generate a random number within a specific range using Python? I want to create a code snippet that can achieve this. Can you provide a solution?","solution":"import random def generate_random_number(start, end): Generates a random number within the specified range [start, end]. Parameters: start (int): The lower bound of the range. end (int): The upper bound of the range. Returns: int: A random number within the specified range. return random.randint(start, end)"},{"question":"Write a Python function that uses the regular expression library (re) to find all occurrences of a specified pattern within a given string, and returns them as a list.","solution":"import re def find_all_occurrences(pattern, string): Finds all occurrences of the specified pattern within the given string and returns them as a list. :param pattern: Regex pattern to find in the string. :param string: The string to search within. :return: List of all occurrences of the pattern in the string. return re.findall(pattern, string)"},{"question":"Create a Python function that takes in a list of integers and returns a list containing only the odd numbers from the original. Additionally, the function should sort the resulting list in descending order and remove any duplicates. Implement the solution without using any built-in functions for sorting or removing duplicates.","solution":"def filter_and_sort_odds(nums): Takes a list of integers and returns a list of odd integers, sorted in descending order without duplicates. :param nums: List of integers :return: List of odd integers, sorted in descending order without duplicates # Filter odd numbers odds = [num for num in nums if num % 2 != 0] # Remove duplicates odds_no_duplicates = list(set(odds)) # Sort in descending order using bubble sort n = len(odds_no_duplicates) for i in range(n): for j in range(0, n-i-1): if odds_no_duplicates[j] < odds_no_duplicates[j+1]: odds_no_duplicates[j], odds_no_duplicates[j+1] = odds_no_duplicates[j+1], odds_no_duplicates[j] return odds_no_duplicates"},{"question":"Develop a Python program to eliminate elements in a given array that have a singular occurrence, while retaining those with multiple appearances. Utilize the following array for the task: [1, 2, 2, 3, 3, 3, 4, 4].","solution":"def retain_multiple_occurrences(arr): Returns a list containing only elements that appear more than once in the given array. from collections import Counter # Count the occurrences of each element count = Counter(arr) # Filter elements that have more than one occurrence result = [element for element in arr if count[element] > 1] return result # Example array array = [1, 2, 2, 3, 3, 3, 4, 4] # Use the function to filter the array filtered_array = retain_multiple_occurrences(array)"},{"question":"Develop a Python function that shuffles the elements within a list of integers by a specified number of positions, either to the left or to the right, based on the given direction. This function should be capable of handling negative positions for wrapping and should efficiently manage large lists. It should also incorporate error handling for situations where the list is empty or the number of positions surpasses the list's length. Additionally, the function should be able to handle non-integer positions by rounding them to the closest integer.","solution":"from typing import List, Union def shuffle_list(lst: List[int], positions: Union[int, float], direction: str) -> List[int]: Shuffles the elements within a list by a specified number of positions in a given direction. :param lst: List of integers to be shuffled. :param positions: Number of positions to shuffle (can be float, will be rounded to nearest integer). :param direction: Direction to shuffle ('left' or 'right'). :return: Shuffled list. # handle non-integer positions by rounding positions = round(positions) # handle empty list if not lst: raise ValueError(\\"The list is empty\\") # handle positions greater than list length positions = positions % len(lst) # handle shuffling based on direction if direction == 'left': return lst[positions:] + lst[:positions] elif direction == 'right': return lst[-positions:] + lst[:-positions] else: raise ValueError(\\"Direction must be either 'left' or 'right'\\")"},{"question":"Help me to write a PEP8 compliant Python program. The program is a simple command-line unit converter that can convert between Celsius and Fahrenheit, and between kilometers and miles. The conversion formulas are: Celsius to Fahrenheit: F = C * 9/5 + 32 and vice versa. Kilometers to miles: M = K * 0.621371 and vice versa. The program should keep running until the user chooses to exit. Please provide your code in a well-documented format.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. Formula: F = C * 9/5 + 32 return celsius * 9/5 + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. Formula: C = (F - 32) * 5/9 return (fahrenheit - 32) * 5/9 def kilometers_to_miles(kilometers): Converts kilometers to miles. Formula: M = K * 0.621371 return kilometers * 0.621371 def miles_to_kilometers(miles): Converts miles to kilometers. Formula: K = M / 0.621371 return miles / 0.621371 def unit_converter(): Runs a simple unit converter for temperature and distance. The user can choose to convert between Celsius and Fahrenheit, and between kilometers and miles. while True: print(\\"nUnit Converter\\") print(\\"1. Celsius to Fahrenheit\\") print(\\"2. Fahrenheit to Celsius\\") print(\\"3. Kilometers to Miles\\") print(\\"4. Miles to Kilometers\\") print(\\"5. Exit\\") choice = input(\\"Enter your choice (1-5): \\") if choice == '1': celsius = float(input(\\"Enter temperature in Celsius: \\")) print(f\\"{celsius}°C is {celsius_to_fahrenheit(celsius)}°F\\") elif choice == '2': fahrenheit = float(input(\\"Enter temperature in Fahrenheit: \\")) print(f\\"{fahrenheit}°F is {fahrenheit_to_celsius(fahrenheit)}°C\\") elif choice == '3': kilometers = float(input(\\"Enter distance in kilometers: \\")) print(f\\"{kilometers} km is {kilometers_to_miles(kilometers)} miles\\") elif choice == '4': miles = float(input(\\"Enter distance in miles: \\")) print(f\\"{miles} miles is {miles_to_kilometers(miles)} km\\") elif choice == '5': print(\\"Exiting Program\\") break else: print(\\"Invalid choice, please choose again.\\") if __name__ == \\"__main__\\": unit_converter()"},{"question":"Create a program that simulates the game of rock-paper-scissors. Allow the user to input their choice of rock, paper, or scissors and make your program choose randomly from the three choices. Implement the logic for determining the winner based on the game rules. Your program should return the result of the game.","solution":"import random def rock_paper_scissors(user_choice): Simulates a game of rock-paper-scissors. User chooses an option and the function randomly selects one. Args: user_choice (str): The user's choice, must be \\"rock\\", \\"paper\\", or \\"scissors\\". Returns: str: The result of the game, \\"win\\", \\"lose\\", or \\"draw\\". choices = [\\"rock\\", \\"paper\\", \\"scissors\\"] computer_choice = random.choice(choices) if user_choice == computer_choice: return \\"draw\\" if (user_choice == \\"rock\\" and computer_choice == \\"scissors\\") or (user_choice == \\"paper\\" and computer_choice == \\"rock\\") or (user_choice == \\"scissors\\" and computer_choice == \\"paper\\"): return \\"win\\" return \\"lose\\""},{"question":"Using the given list, create a function in Python that classifies each number as odd or even, while ensuring a time complexity of O(n).","solution":"def classify_numbers(numbers): Classifies each number in the list as odd or even. Returns a dictionary with 'odd' and 'even' as keys, and lists of corresponding numbers as values. result = {\\"odd\\": [], \\"even\\": []} for num in numbers: if num % 2 == 0: result[\\"even\\"].append(num) else: result[\\"odd\\"].append(num) return result"},{"question":"I have a list of numbers, and I want to write a Python program to create an object where the numbers in the list are keys, and their corresponding values are the sum of all the numbers in the list except for the key. How can I achieve this? Can you provide an example?","solution":"def create_number_object(numbers): Given a list of numbers, returns a dictionary where each number is a key, and the corresponding value is the sum of all the numbers in the list except for the key. total_sum = sum(numbers) number_object = {num: total_sum - num for num in numbers} return number_object"},{"question":"Given the following semantic description, can you write a Python function that this description could correspond to? The function takes a list of integers as input and returns two things: a list of indices of even numbers in the original list, and a list of indices of odd numbers in the original list.","solution":"def separate_even_odd_indices(numbers): Takes a list of integers and returns two lists: 1. List of indices of even numbers in the original list. 2. List of indices of odd numbers in the original list. even_indices = [idx for idx, num in enumerate(numbers) if num % 2 == 0] odd_indices = [idx for idx, num in enumerate(numbers) if num % 2 != 0] return even_indices, odd_indices"},{"question":"Write a Python function that takes a list of integers as input and returns True if there is an element in the list that is greater than 10 and its index is even. Otherwise, return False. The function should be named \\"check_number\\" and should have a single parameter.","solution":"def check_number(lst): Returns True if there is an element in the list that is greater than 10 and its index is even. Otherwise, returns False. for i in range(0, len(lst), 2): if lst[i] > 10: return True return False"},{"question":"Given a list of 20K integers ranging from -1000 to 1000, implement a function in Python that removes all duplicates and returns a list with only unique elements, while preserving the original order of the unique elements from the input list. Your function should run in O(n) time complexity.","solution":"def remove_duplicates(lst): Removes duplicates from the list and preserves the original order of the unique elements. Args: lst (list of int): List of integers which may contain duplicates. Returns: list of int: List of unique integers in the same order as they first appear in lst. seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst"},{"question":"Use the shell sort algorithm to sort a given list of numbers. Instead of using the gaps of 1, 2, 4, 8, ..., n/2 like in the traditional shell sort, use a dynamically changing gap sequence namely, n/2, n/4, n/8, ..., 1. Also, output the intermediate steps of the sorting process along with the number of comparisons and swaps made.","solution":"def shell_sort(arr): n = len(arr) gaps = [] gap = n // 2 while gap > 0: gaps.append(gap) gap = gap // 2 comparisons = 0 swaps = 0 intermediate_steps = [] for gap in gaps: for i in range(gap, n): temp = arr[i] j = i while j >= gap and arr[j - gap] > temp: comparisons += 1 arr[j] = arr[j - gap] swaps += 1 j -= gap arr[j] = temp if j != i: comparisons += 1 intermediate_steps.append(list(arr)) return arr, intermediate_steps, comparisons, swaps"},{"question":"Create a function in Python that takes an input list of strings and returns the longest string in the list. However, if there are multiple strings of the same maximum length, return the first occurrence of such a string. If the input list is empty or None, return None. Additionally, the function should be implemented with a time complexity of O(n), where n is the total number of characters in all strings in the input list.","solution":"def longest_string(strings): Returns the longest string in the list of strings. If there are multiple strings of the same maximum length, the first occurrence of such a string is returned. If the input list is empty or None, returns None. if not strings: return None max_length = -1 longest_str = None for string in strings: if len(string) > max_length: max_length = len(string) longest_str = string return longest_str"},{"question":"Write a Python function that takes in a list of integers and returns the maximum product of any three numbers from the list. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three numbers in the list. Args: nums (list): A list of integers. Returns: int: The maximum product of any three integers from the list. # Initialize the three largest and two smallest values max1 = max2 = max3 = float('-inf') min1 = min2 = float('inf') for num in nums: # Update the three largest values if num > max1: max1, max2, max3 = num, max1, max2 elif num > max2: max2, max3 = num, max2 elif num > max3: max3 = num # Update the two smallest values if num < min1: min1, min2 = num, min1 elif num < min2: min2 = num # The maximum product can be either the product of the three largest numbers # or the product of the two smallest numbers and the largest number return max(max1 * max2 * max3, min1 * min2 * max1)"},{"question":"Write a program that generates the first n Fibonacci numbers where n is a user input. Additionally, the program should provide an option to display the Fibonacci sequence in reverse order. python","solution":"def generate_fibonacci(n, reverse=False): Generates the first n Fibonacci numbers. Returns them in reverse order if reverse is True. Parameters: n (int): The number of Fibonacci numbers to generate. reverse (bool): Whether to return the Fibonacci sequence in reverse order. Returns: list: A list containing the first n Fibonacci numbers (reversed if specified). if n <= 0: return [] fibonacci_sequence = [0, 1] if n > 1 else [0] for _ in range(2, n): fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) if reverse: fibonacci_sequence.reverse() return fibonacci_sequence"},{"question":"Construct a Python code snippet that delineates a function responsible for receiving a positive integer input 'n'. This function should iterate through all feasible integer values from the Fibonacci sequence that are less than 'n', aiming to identify which of these values can be perfectly divided by 3. Upon finding such a divisible value, the function should accumulate these within a list. Finally, the function should yield a list containing these specific Fibonacci numbers that fulfill the division criterion.","solution":"def fibonacci_divisible_by_three(n): Returns a list of Fibonacci numbers less than 'n' that are divisible by 3. Parameters: n (int): A positive integer limit for the Fibonacci sequence Returns: list: A list of Fibonacci numbers less than 'n' and divisible by 3 if n <= 0: return [] fibs = [] a, b = 0, 1 while a < n: if a % 3 == 0: fibs.append(a) a, b = b, a + b return fibs"},{"question":"Given two lists, list1 and list2, with integers write a Python function to find the uncommon elements between them. The function should return a list of these uncommon elements in ascending order without duplicates.","solution":"def find_uncommon_elements(list1, list2): Returns a sorted list of uncommon elements between list1 and list2 without duplicates. set1 = set(list1) set2 = set(list2) uncommon_elements = (set1.difference(set2)).union(set2.difference(set1)) return sorted(uncommon_elements)"},{"question":"Design a deep learning model using PyTorch to predict the sentiment of movie reviews. This model should use Long Short-Term Memory Networks (LSTM) and should include techniques to avoid overfitting such as dropout and batch normalization.","solution":"import torch import torch.nn as nn import torch.nn.functional as F class SentimentLSTM(nn.Module): def __init__(self, vocab_size, embed_size, hidden_size, output_size, num_layers=2, dropout=0.5): super(SentimentLSTM, self).__init__() self.embedding = nn.Embedding(vocab_size, embed_size) self.lstm = nn.LSTM(embed_size, hidden_size, num_layers, batch_first=True, dropout=dropout) self.fc1 = nn.Linear(hidden_size, hidden_size) self.batch_norm = nn.BatchNorm1d(hidden_size) self.fc2 = nn.Linear(hidden_size, output_size) self.dropout = nn.Dropout(dropout) def forward(self, x): embedded = self.embedding(x) lstm_out, (hn, cn) = self.lstm(embedded) lstm_out = lstm_out[:, -1, :] # Take the last output of the LSTM out = self.fc1(lstm_out) out = self.batch_norm(out) out = F.relu(out) out = self.dropout(out) out = self.fc2(out) return out # Example of model instantiation # vocab_size = 10000 (Assume we have a vocabulary of 10,000 words) # embed_size = 300 (Using 300-dimensional embeddings) # hidden_size = 256 (Hidden state size of LSTM) # output_size = 1 (Binary classification for sentiment) # model = SentimentLSTM(vocab_size=10000, embed_size=300, hidden_size=256, output_size=1)"},{"question":"Formulate a Python code script to ascertain the quantity of unelapsed weeks remaining in the current Gregorian calendar year. Furthermore, the script should be able to calculate how many of these weeks fall in each particular month. Also, add a functionality to consider whether the current year is a leap year or not, and how that affects the week calculation.","solution":"from datetime import datetime, timedelta def weeks_remaining_in_year(): Returns the number of weeks remaining in the current Gregorian calendar year and a breakdown of how many of these weeks fall in each particular month. Also considers whether the current year is a leap year. def is_leap_year(year): if year % 4 != 0: return False elif year % 100 != 0: return True elif year % 400 != 0: return False else: return True def get_end_of_month_dates(year): days_in_month = [31, 29 if is_leap_year(year) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] end_of_month_dates = [] for month in range(1, 13): end_of_month_dates.append(datetime(year, month, days_in_month[month-1])) return end_of_month_dates today = datetime.today() current_year = today.year end_of_year = datetime(current_year, 12, 31) remaining_days = (end_of_year - today).days weeks_remaining = remaining_days // 7 end_of_month_dates = get_end_of_month_dates(current_year) remaining_weeks_in_months = {} for end_date in end_of_month_dates: if end_date >= today: days_until_end_month = (end_date - today).days weeks_in_month = days_until_end_month // 7 remaining_weeks_in_months[end_date.month] = weeks_in_month return { \\"weeks_remaining\\": weeks_remaining, \\"remaining_weeks_in_months\\": remaining_weeks_in_months, \\"is_leap_year\\": is_leap_year(current_year) }"},{"question":"Construct a Python function that not only evaluates if a given string of characters is a palindrome (a sequence that reads identically backward as forward), but also deals with possible variations, including sequences with special characters and texts in different languages. The function should consider case-insensitivity and ignore non-alphanumeric characters while performing the check. In addition, write a series of test cases to ensure the correctness of your function.","solution":"import re def is_palindrome(s): Checks if a given string is a palindrome. Considers only alphanumeric characters and is case-insensitive. Parameters: s (str): Input string to be checked Returns: bool: True if the string is a palindrome, False otherwise # Normalize the string: Remove non-alphanumeric characters and convert to lowercase normalized_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Can you write code in Python to generate a random 3x3 matrix which elements are integers in the range [0,9]? Additionally, ensure the sum of the elements in the secondary diagonal is an even number.","solution":"import random def generate_3x3_matrix(): Generates a 3x3 matrix with elements being integers in the range [0,9]. Ensures the sum of the elements in the secondary diagonal is even. while True: matrix = [[random.randint(0, 9) for _ in range(3)] for _ in range(3)] secondary_diagonal_sum = matrix[0][2] + matrix[1][1] + matrix[2][0] if secondary_diagonal_sum % 2 == 0: return matrix"},{"question":"Using a stack data structure, write a function that takes a string input and checks if it is a valid bracket sequence. In addition to parentheses, consider square brackets and curly braces as valid brackets. The function should return true if the input string is a valid bracket sequence and false otherwise. The function should also account for nested bracket sequences. Additionally, the function should handle the case where there are multiple types of brackets nested within each other, such as (({})) or [[]{()}].","solution":"def is_valid_bracket_sequence(s): Checks if the input string is a valid bracket sequence. stack = [] bracket_map = {')': '(', ']': '[', '}': '{'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else '#' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function in Python that takes in a list of integers and returns the sum of all the prime numbers in the list. If there are no prime numbers, the function should return 0. Additionally, the function should only consider positive integers in the list.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(lst): Returns the sum of all prime numbers in the list lst. Considers only positive integers. return sum(num for num in lst if num > 0 and is_prime(num))"},{"question":"Given a list of 3D points \`(x,y,z)\`, write a Python function \`max_distance\` that takes a list of 3D points as input and returns the maximum Euclidean distance between any two points. However, you must implement an optimized version of the function that minimizes the computational complexity.","solution":"import itertools import math def max_distance(points): Returns the maximum Euclidean distance between any two 3D points. if not points or len(points) < 2: return 0 max_dist = 0 for point1, point2 in itertools.combinations(points, 2): dist = math.dist(point1, point2) max_dist = max(max_dist, dist) return max_dist"},{"question":"I want to write a Python code to compare the performance of different sorting algorithms. I have the following algorithms to consider: Bubble Sort, Insertion Sort, Selection Sort, Quick Sort, and Merge Sort. Can you help me write a code that runs each of these algorithms on a randomly generated list of numbers and gives me the execution time for each?","solution":"import time import random def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i-1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr def selection_sort(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr def quick_sort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr def measure_time(sort_func, arr): start_time = time.time() sort_func(arr.copy()) end_time = time.time() return end_time - start_time def compare_sorting_algorithms(): algorithms = { \\"Bubble Sort\\": bubble_sort, \\"Insertion Sort\\": insertion_sort, \\"Selection Sort\\": selection_sort, \\"Quick Sort\\": quick_sort, \\"Merge Sort\\": merge_sort } arr = [random.randint(0, 1000) for _ in range(1000)] results = {} for name, func in algorithms.items(): execution_time = measure_time(func, arr) results[name] = execution_time return results"},{"question":"Write a block of code that finds the first non-repeating character in a given string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. If all characters are repeating, returns None. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"I need to create a Python console application for a Gym Management system. The system should be able to manage various aspects of the gym, such as adding, updating, and deleting gym members, managing trainers, recording workouts, and maintaining equipment inventory. Can you provide a solution for this?","solution":"class GymManagementSystem: def __init__(self): self.members = {} self.trainers = {} self.workouts = {} self.equipment = {} def add_member(self, member_id, name, membership_type): self.members[member_id] = {'name': name, 'membership_type': membership_type} def update_member(self, member_id, name=None, membership_type=None): if member_id in self.members: if name: self.members[member_id]['name'] = name if membership_type: self.members[member_id]['membership_type'] = membership_type def delete_member(self, member_id): if member_id in self.members: del self.members[member_id] def add_trainer(self, trainer_id, name, specialty): self.trainers[trainer_id] = {'name': name, 'specialty': specialty} def update_trainer(self, trainer_id, name=None, specialty=None): if trainer_id in self.trainers: if name: self.trainers[trainer_id]['name'] = name if specialty: self.trainers[trainer_id]['specialty'] = specialty def delete_trainer(self, trainer_id): if trainer_id in self.trainers: del self.trainers[trainer_id] def record_workout(self, workout_id, member_id, workout_type, duration): self.workouts[workout_id] = {'member_id': member_id, 'workout_type': workout_type, 'duration': duration} def maintain_equipment(self, equipment_id, name, status): self.equipment[equipment_id] = {'name': name, 'status': status} def get_member(self, member_id): return self.members.get(member_id, None) def get_trainer(self, trainer_id): return self.trainers.get(trainer_id, None) def get_workout(self, workout_id): return self.workouts.get(workout_id, None) def get_equipment(self, equipment_id): return self.equipment.get(equipment_id, None)"},{"question":"Write a code that takes a list of integers and returns a list of all elements that are unique to the list, while also maintaining their original order. Additionally, optimize the algorithm to minimize both time and space complexity.","solution":"def unique_elements(lst): This function returns a list of elements that are unique in the input list while maintaining their original order. :param lst: List of integers :return: List of integers that are unique in the input list from collections import Counter # Count the occurrences of each element element_counts = Counter(lst) # Collect only the unique elements in their original order unique_list = [x for x in lst if element_counts[x] == 1] return unique_list"},{"question":"Write a python program to create a dictionary from two lists, one containing employee IDs and the other containing their department IDs. The program should also handle cases where there may be duplicate employee IDs but different department IDs, by storing all department IDs in a list associated with the respective employee ID.","solution":"def create_employee_department_dict(employee_ids, department_ids): Create a dictionary from two lists, one containing employee IDs and the other containing their department IDs. If there are duplicate employee IDs with different department IDs, store all department IDs in a list associated with the respective employee ID. Parameters: employee_ids (list): A list of employee IDs. department_ids (list): A list of department IDs. Returns: dict: A dictionary with employee IDs as keys and a list of department IDs as values. employee_department_dict = {} for emp_id, dept_id in zip(employee_ids, department_ids): if emp_id in employee_department_dict: employee_department_dict[emp_id].append(dept_id) else: employee_department_dict[emp_id] = [dept_id] return employee_department_dict"},{"question":"I want to generate a list of prime numbers between 0 and 50. How can I achieve this in Python? Can you provide me with a code snippet?","solution":"def generate_primes(n): Generates a list of prime numbers from 0 to n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes # Generate primes between 0 and 50 primes = generate_primes(50) print(primes)"},{"question":"Write a Python-based function designed to execute the transformation of a selected decimal integer (ranging from 1 to 1000 inclusively) into its corresponding ancient Roman numeral notation. Incorporate validation checks to ensure the input adheres to the specified boundaries and caters to the possibility of receiving an erroneous input, subsequently providing relevant error details.","solution":"def int_to_roman(num): Converts a given integer (1 to 1000) to its Roman numeral representation. if not isinstance(num, int): raise ValueError(\\"Input must be an integer.\\") if num < 1 or num > 1000: raise ValueError(\\"Input must be between 1 and 1000 inclusive.\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syb[i] num -= val[i] i += 1 return roman_numeral"},{"question":"Develop a code to find a missing number in an array of n consecutive integers in Python. The array may contain duplicate numbers. However, you are not allowed to use any built-in functions or libraries to solve this problem.","solution":"def find_missing_number(arr): Returns the missing number from an array of n consecutive integers. The array may contain duplicate numbers. :param arr: List[int] - array of integers :return: int - the missing number n = len(arr) total_sum = (n * (n + 1)) // 2 actual_sum = 0 unique_numbers = set() # To handle the duplicate numbers for num in arr: if num not in unique_numbers: actual_sum += num unique_numbers.add(num) return total_sum - actual_sum"},{"question":"Write a Python function that checks if a string contains exactly one pair of consecutive repeating characters. If the string has exactly one pair of repeating characters, return True; otherwise, return False. Note that the characters have to appear immediately next to each other in the string. Ignore case sensitivity.","solution":"def has_one_consecutive_repeating_pair(s): Checks if the string contains exactly one pair of consecutive repeating characters. s = s.lower() count = 0 for i in range(len(s) - 1): if s[i] == s[i + 1]: count += 1 if count > 1: return False return count == 1"},{"question":"Given a list of strings and a target string, write a Python program to find the longest string in the list that is a subsequence of the target string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.","solution":"def is_subsequence(s, target): Helper function to check if s is a subsequence of target. it = iter(target) return all(char in it for char in s) def longest_subsequence(strings, target): Returns the longest string from the list \`strings\` that is a subsequence of \`target\`. strings = sorted(strings, key=len, reverse=True) for string in strings: if is_subsequence(string, target): return string return \\"\\""},{"question":"Write a code that implements the heapsort algorithm in a class with appropriate methods and attributes for sorting a list of numbers. Make sure to include comments explaining the purpose of each method and how it contributes to the overall sorting process. Additionally, implement error handling for scenarios where the input list is empty or contains non-numeric values. Consider adding unit tests to verify the correctness of the algorithm. Furthermore, optimize the sorting algorithm to have a time complexity of O(n log n) and a space complexity of O(1).","solution":"class HeapSort: def __init__(self, nums): Initializes the HeapSort object with a list of numbers. Also, checks if the input list contains only numeric values. if not all(isinstance(x, (int, float)) for x in nums): raise ValueError(\\"All elements in the input list must be numeric\\") self.nums = nums def sort(self): Sorts the list of numbers using the heapsort algorithm. n = len(self.nums) if n == 0: raise ValueError(\\"Input list must not be empty\\") # Build a maxheap for i in range(n // 2 - 1, -1, -1): self._heapify(n, i) # Extract elements from heap one by one for i in range(n - 1, 0, -1): self.nums[i], self.nums[0] = self.nums[0], self.nums[i] # Swap self._heapify(i, 0) return self.nums def _heapify(self, n, i): Ensures that the subtree rooted at index i is a heap. largest = i # Initialize largest as root left = 2 * i + 1 # Left child right = 2 * i + 2 # Right child # See if left child exists and is greater than root if left < n and self.nums[left] > self.nums[largest]: largest = left # See if right child exists and is greater than largest so far if right < n and self.nums[right] > self.nums[largest]: largest = right # Change root, if needed if largest != i: self.nums[i], self.nums[largest] = self.nums[largest], self.nums[i] # Swap # Heapify the root self._heapify(n, largest)"},{"question":"Generate a Python function that takes a dictionary as an argument and returns a list of all the values in the dictionary.","solution":"def get_dict_values(d): Returns a list of all the values in the dictionary d. return list(d.values())"},{"question":"What is the optimal way to find the maximum value in an array of integers using Python?","solution":"def find_maximum(arr): Returns the maximum value in the array. Parameters: arr (list of int): The list of integers. Returns: int: The maximum value in the list. if not arr: raise ValueError(\\"Array should not be empty\\") max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value"},{"question":"Write a Python program that not only prints the Fibonacci sequence up to a given number n, but also returns the sequence in a dictionary format where the key-value pairs correspond to the index of the Fibonacci number and the Fibonacci number itself. Additionally, calculate the sum of all the Fibonacci numbers in the sequence up to n using a recursive function. Assume n is a positive integer. Test your program with n = 10.","solution":"def fibonacci_sequence(n): Generate a Fibonacci sequence up to n in dictionary format and calculate the sum using a recursive function. :param n: The upper limit of the Fibonacci sequence (inclusive). :return: A tuple containing the Fibonacci sequence dictionary and the sum of the sequence. def fibonacci_recursive(n): if n <= 1: return n return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) fib_dict = {} i = 0 current_fib_value = 0 while current_fib_value <= n: current_fib_value = fibonacci_recursive(i) if current_fib_value > n: break fib_dict[i] = current_fib_value i += 1 total_sum = sum(fib_dict.values()) return fib_dict, total_sum # Test the functionality with n = 10 result = fibonacci_sequence(10) print(result)"},{"question":"I want to pass a parameter to a python function. How can I check if the parameter is a list or a numpy array, so I can process it differently inside the function?","solution":"import numpy as np def process_parameter(param): Processes the input parameter differently based on its type. If the parameter is a list, it returns the length of the list. If the parameter is a numpy array, it returns the shape of the array. If the parameter is neither, it raises a ValueError. if isinstance(param, list): return len(param) elif isinstance(param, np.ndarray): return param.shape else: raise ValueError(\\"Parameter must be either a list or a numpy array.\\")"},{"question":"Build a Python list of seven dictionaries with each containing details of different employee like 'name', 'age', 'position', 'salary' and 'years_of_service'. Also add methods to update, delete, and search for an employee by their name.","solution":"employees = [ {'name': 'John Doe', 'age': 29, 'position': 'Developer', 'salary': 75000, 'years_of_service': 4}, {'name': 'Jane Smith', 'age': 34, 'position': 'Manager', 'salary': 90000, 'years_of_service': 10}, {'name': 'Alice Johnson', 'age': 26, 'position': 'Designer', 'salary': 60000, 'years_of_service': 2}, {'name': 'Bob Brown', 'age': 45, 'position': 'CTO', 'salary': 150000, 'years_of_service': 20}, {'name': 'Carol White', 'age': 30, 'position': 'Data Scientist', 'salary': 80000, 'years_of_service': 5}, {'name': 'Dave Black', 'age': 38, 'position': 'Product Owner', 'salary': 95000, 'years_of_service': 12}, {'name': 'Eve Green', 'age': 23, 'position': 'QA Engineer', 'salary': 55000, 'years_of_service': 1} ] def update_employee(name, new_data): for employee in employees: if employee['name'] == name: employee.update(new_data) return True return False def delete_employee(name): for employee in employees: if employee['name'] == name: employees.remove(employee) return True return False def search_employee(name): for employee in employees: if employee['name'] == name: return employee return None"},{"question":"Fibonacci series in Python using for loop with code explanation","solution":"def fibonacci_series(n): Generate a list containing the first n numbers in the Fibonacci series. Arguments: n -- int, the number of Fibonacci numbers to generate Returns: A list containing the first n numbers in the Fibonacci series. if n <= 0: return [] series = [0] if n == 1: return series series.append(1) for i in range(2, n): next_value = series[-1] + series[-2] series.append(next_value) return series"},{"question":"Write a python program to solve a maze using a depth-first search algorithm. The maze is given in a grid as a list of lists, with '1's representing walls and '0's representing empty spaces. The program should start from the top left corner and find a path to the bottom right corner.","solution":"def solve_maze(maze): Solve the maze using a depth-first search algorithm from the top-left corner to the bottom-right corner. :param maze: A list of lists representing the maze grid where '1' are walls and '0' are empty spaces. :return: A boolean value indicating if there is a path from the top-left to the bottom-right corner. def dfs(x, y, visited): # Base cases if x == len(maze) - 1 and y == len(maze[0]) - 1: return True # Reached the bottom-right corner if x < 0 or y < 0 or x >= len(maze) or y >= len(maze[0]) or maze[x][y] == '1' or (x, y) in visited: return False # Out of bounds, hit a wall, or already visited visited.add((x, y)) # Recursively visit all neighbors (right, down, left, up) if (dfs(x+1, y, visited) or dfs(x, y+1, visited) or dfs(x-1, y, visited) or dfs(x, y-1, visited)): return True visited.remove((x, y)) # Important for the cleanup during backtracking return False return dfs(0, 0, set())"},{"question":"Given two matrices A and B of the same size, write a function matrixAddition(A, B) that returns the sum of the two matrices. Make sure that your function also validates the dimensions of the input matrices to ensure that they are indeed of the same size.","solution":"def matrixAddition(A, B): Returns the sum of two matrices A and B of the same size. Parameters: A (list of lists of int/float): The first matrix. B (list of lists of int/float): The second matrix. Returns: list of lists of int/float: The resulting matrix after addition. Raises: ValueError: If the input matrices are not of the same dimensions. # Validate the dimensions of the matrices if not (len(A) == len(B) and all(len(A[i]) == len(B[i]) for i in range(len(A)))): raise ValueError(\\"Matrices are not of the same dimensions.\\") # Create the resulting matrix result = [] for i in range(len(A)): row = [] for j in range(len(A[i])): row.append(A[i][j] + B[i][j]) result.append(row) return result"},{"question":"Write a Python code that utilizes the Gregory-Leibniz series algorithm to calculate and print the first 5 digits of Pi (3.1415). Additionally, include a function that calculates the absolute error between the estimated value and the actual value of Pi for each iteration of the algorithm. Display the estimated value, actual value, and absolute error in a tabular format for the first 10 iterations of the algorithm.","solution":"import math def calculate_pi_gregory_leibniz(iterations): Calculates Pi using the Gregory-Leibniz series for a given number of iterations. pi_estimate = 0 for i in range(iterations): pi_estimate += ((-1)**i) / (2*i + 1) pi_estimate *= 4 return pi_estimate def calculate_absolute_error(estimated_value): Calculates the absolute error between the estimated value and the actual value of Pi. actual_pi = math.pi return abs(actual_pi - estimated_value) def display_pi_estimation_table(iterations): Displays a table of the estimated value of Pi, actual value of Pi, and the absolute error for each iteration of the algorithm up to the given number of iterations. print(f\\"{'Iteration':>10} {'Estimated Pi':>15} {'Actual Pi':>15} {'Absolute Error':>20}\\") for i in range(1, iterations + 1): estimated_pi = calculate_pi_gregory_leibniz(i) actual_pi = math.pi error = calculate_absolute_error(estimated_pi) print(f\\"{i:>10} {estimated_pi:>15.10f} {actual_pi:>15.10f} {error:>20.10f}\\") # Function to print the first 5 digits of Pi (3.1415) def print_first_5_digits_pi(): pi_estimate = calculate_pi_gregory_leibniz(150000) print(f\\"First 5 digits of Pi: {str(pi_estimate)[:6]}\\") # Display table for the first 10 iterations display_pi_estimation_table(10) # Print the first 5 digits of Pi print_first_5_digits_pi()"},{"question":"I want to train multiple models with different dropout rates simultaneously using PyTorch. How can I achieve both model saving and parallel computing? Assume the computing resource is CUDA.","solution":"import torch import torch.nn as nn import torch.optim as optim from torch.utils.data import DataLoader, TensorDataset from itertools import cycle class SimpleModel(nn.Module): def __init__(self, dropout_rate): super(SimpleModel, self).__init__() self.fc1 = nn.Linear(10, 50) self.dropout = nn.Dropout(dropout_rate) self.fc2 = nn.Linear(50, 1) def forward(self, x): x = torch.relu(self.fc1(x)) x = self.dropout(x) x = self.fc2(x) return x def train_model(model, dataloader, criterion, optimizer, num_epochs=5): model.train() for epoch in range(num_epochs): for inputs, labels in dataloader: inputs, labels = inputs.cuda(), labels.cuda() optimizer.zero_grad() outputs = model(inputs) loss = criterion(outputs, labels) loss.backward() optimizer.step() def save_model(model, path): torch.save(model.state_dict(), path) def main(): # Creating dummy dataset x = torch.randn(1000, 10) y = torch.randn(1000, 1) dataset = TensorDataset(x, y) dataloader = DataLoader(dataset, batch_size=32, shuffle=True) dropout_rates = [0.1, 0.3, 0.5] models = [SimpleModel(dropout_rate).cuda() for dropout_rate in dropout_rates] criterions = [nn.MSELoss() for _ in dropout_rates] optimizers = [optim.SGD(model.parameters(), lr=0.01) for model in models] dataloaders = [dataloader] * len(models) data_iterators = [iter(cycle(dataloader)) for dataloader in dataloaders] for _ in range(5): # Number of epochs for model_idx, model in enumerate(models): data_iter = data_iterators[model_idx] inputs, labels = next(data_iter) inputs, labels = inputs.cuda(), labels.cuda() optimizer = optimizers[model_idx] criterion = criterions[model_idx] optimizer.zero_grad() outputs = model(inputs) loss = criterion(outputs, labels) loss.backward() optimizer.step() for idx, model in enumerate(models): save_model(model, f'model_with_dropout_{dropout_rates[idx]}.pth') if __name__ == '__main__': main()"},{"question":"Given a dictionary, write a Python function that recursively removes all key-value pairs where the value is None or an empty string (''), and returns the modified dictionary. Additionally, the function must preserve the type of the dictionary (i.e., collections.defaultdict or dict) and handle nested dictionaries.","solution":"def clean_dict(d): Recursively remove all key-value pairs from the dictionary where the value is None or an empty string. if isinstance(d, dict): keys_to_remove = [] for key, value in d.items(): if value is None or value == '': keys_to_remove.append(key) elif isinstance(value, dict): d[key] = clean_dict(value) for key in keys_to_remove: d.pop(key) return d"},{"question":"Write a Python program that implements the binary search algorithm to find a specific element in a sorted list. Also, include a function to count the number of occurrences of that specific element in the list. The program should return the index of the first occurrence of the element and its total count. If the element is not found, return -1 and the count as 0.","solution":"def binary_search(arr, x): Performs binary search to find the index of the first occurrence of x in a sorted list arr. Returns the index of the first occurrence and the count of x in the list. If x is not found, returns -1 and count as 0. left, right = 0, len(arr) - 1 first_occurrence = -1 # Find the first occurrence of x while left <= right: mid = (left + right) // 2 if arr[mid] == x: first_occurrence = mid right = mid - 1 # Continue searching in the left half elif arr[mid] < x: left = mid + 1 else: right = mid - 1 if first_occurrence == -1: return -1, 0 # Count the occurrences of x count = 1 idx = first_occurrence + 1 while idx < len(arr) and arr[idx] == x: count += 1 idx += 1 return first_occurrence, count"},{"question":"Create the game \\"Gobblers\\" by coding it in Python as a console application. The game is played by two players and the objective is to be the first to form a line of five of your colored pieces (either vertically, horizontally or diagonally) on a 2D grid. The player who successfully places five of their pieces in a line before their opponent wins the game. The players take turns moving a specified number of spaces in any direction (up, down, left, right, diagonally) on the grid. However, they cannot move to a space already occupied by either player. The game is played on a 15 x 15 grid.","solution":"class GobblersGame: def __init__(self): self.size = 15 self.board = [[' ' for _ in range(self.size)] for _ in range(self.size)] self.current_player = 'X' # Player 1 is 'X' and Player 2 is 'O' self.winner = None def print_board(self): for row in self.board: print(' '.join(row)) print() def is_valid_move(self, row, col): if 0 <= row < self.size and 0 <= col < self.size and self.board[row][col] == ' ': return True else: return False def place_piece(self, row, col): if self.is_valid_move(row, col): self.board[row][col] = self.current_player return True return False def check_winner(self): for row in range(self.size): for col in range(self.size): if self.board[row][col] == self.current_player: if self.check_line(row, col, 1, 0) or self.check_line(row, col, 0, 1) or self.check_line(row, col, 1, 1) or self.check_line(row, col, 1, -1): self.winner = self.current_player return True return False def check_line(self, row, col, delta_row, delta_col): count = 0 for i in range(5): r, c = row + i * delta_row, col + i * delta_col if 0 <= r < self.size and 0 <= c < self.size and self.board[r][c] == self.current_player: count += 1 else: break return count == 5 def switch_player(self): self.current_player = 'O' if self.current_player == 'X' else 'X' def play_turn(self, row, col): if self.place_piece(row, col): if self.check_winner(): print(f\\"Player {self.current_player} wins!\\") else: self.switch_player() return True else: print(\\"Invalid move. Try again.\\") return False # Usage example: # game = GobblersGame() # game.print_board() # while game.winner is None: # row, col = map(int, input(\\"Enter row and column: \\").split()) # game.play_turn(row, col) # game.print_board()"},{"question":"Create a program to sort an array of integers from smallest to largest using the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): # Traverse through all array elements for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function in Python that takes in an integer as an argument and returns the square of the argument if it is a positive number. If the argument is zero, the function should return zero. If the argument is a negative number, the function should return the cube of the argument.","solution":"def compute_value(n): Returns the square of n if it is positive, zero if it is zero, and the cube of n if it is negative. if n > 0: return n ** 2 elif n == 0: return 0 else: return n ** 3"},{"question":"Write a Flask app that has a single route which accepts a string in the query string and returns the string reversed.","solution":"from flask import Flask, request app = Flask(__name__) @app.route('/reverse_string', methods=['GET']) def reverse_string(): original_string = request.args.get('string', '') reversed_string = original_string[::-1] return reversed_string if __name__ == '__main__': app.run(debug=True)"},{"question":"Formulate an intricate Python code that determines the divisibility of a given number by 5 and 11, printing a custom message for conditions when it is divisible by both, divisible by one but not the other, and not divisible by either. The base number is 220. However, enhance this code to include functionality to test an array of numbers for divisibility, including the capability to quantify how many numbers in the array are divisible by 5, 11, and both.","solution":"def check_divisibility(number): Returns a message indicating whether the number is divisible by 5 and 11. if number % 5 == 0 and number % 11 == 0: return f\\"The number {number} is divisible by both 5 and 11.\\" elif number % 5 == 0: return f\\"The number {number} is divisible by 5 but not by 11.\\" elif number % 11 == 0: return f\\"The number {number} is divisible by 11 but not by 5.\\" else: return f\\"The number {number} is not divisible by 5 or 11.\\" def check_array_divisibility(arr): Checks an array of numbers for divisibility by 5 and 11 and counts how many are divisible by 5, 11, and both. divisible_by_5 = 0 divisible_by_11 = 0 divisible_by_both = 0 for num in arr: if num % 5 == 0: divisible_by_5 += 1 if num % 11 == 0: divisible_by_11 += 1 if num % 5 == 0 and num % 11 == 0: divisible_by_both += 1 return { 'divisible_by_5': divisible_by_5, 'divisible_by_11': divisible_by_11, 'divisible_by_both': divisible_by_both }"},{"question":"Write a Python function that takes two strings as input. The first string can contain lowercase and uppercase letters, numbers, and special characters. The second string will be the sequence of characters that should be removed from the first string. The function should return the first string with all instances of the characters in the second string removed, while maintaining the original order of the remaining characters in the first string. Additionally, the function should return the number of characters removed.","solution":"def remove_characters(s1, s2): Removes all instances of characters in s2 from s1 and returns the modified string and the count of removed characters. :param s1: Input string containing lowercase and uppercase letters, numbers, and special characters. :param s2: Sequence of characters to remove from the first string. :return: A tuple containing the modified string and the number of characters removed. # Create a set of characters to be removed for faster lookup to_remove = set(s2) # Define variables to store the modified string and count of removed characters modified_string = [] removed_count = 0 for char in s1: if char in to_remove: removed_count += 1 else: modified_string.append(char) return ''.join(modified_string), removed_count"},{"question":"Create a switch statement that outputs distinctive messages for distinct academic classifications and includes course difficulty level, utilizing the variables \\"grade\\" and \\"courseDifficulty\\" as references. Implement error handling for invalid inputs.","solution":"def academic_classification_message(grade, courseDifficulty): Returns a message based on the academic classification (grade) and course difficulty level. Parameters: - grade (str): The academic grade ('freshman', 'sophomore', 'junior', 'senior'). - courseDifficulty (str): The course difficulty level ('easy', 'moderate', 'hard'). Returns: - str: A message corresponding to the academic grade and course difficulty level. messages = { 'freshman': { 'easy': \\"Welcome to college! Start light with your 'easy' courses.\\", 'moderate': \\"You're up for a challenge! 'Moderate' classes will build your foundation.\\", 'hard': \\"Wow, you're brave! 'Hard' courses can be tough for a freshman.\\" }, 'sophomore': { 'easy': \\"More confidence, huh? 'Easy' courses will be a breeze.\\", 'moderate': \\"You're getting the hang of it! Keep pushing with 'moderate' courses.\\", 'hard': \\"Starting to get serious! 'Hard' courses genuinely test your mettle.\\" }, 'junior': { 'easy': \\"You're nearing the top! 'Easy' courses should be simple now.\\", 'moderate': \\"Stay the course with 'moderate' classes and build depth in your knowledge.\\", 'hard': \\"At the critical juncture! 'Hard' courses require significant effort.\\" }, 'senior': { 'easy': \\"Almost there, don't slack! Enjoy your 'easy' courses.\\", 'moderate': \\"Keep up the good work with 'moderate' classes.\\", 'hard': \\"Finish strong! 'Hard' courses will prepare you well for post-graduation.\\" } } try: classification_message = messages[grade][courseDifficulty] except KeyError: return \\"Invalid grade or course difficulty level.\\" return classification_message"},{"question":"Write a Python function named \`is_valid_binary\` that takes in a string as a parameter. The function should return True if the string represents a valid binary number, and False otherwise. A valid binary number contains only the characters '0' and '1'.","solution":"def is_valid_binary(s): Checks if the given string is a valid binary number. Parameters: s (str): Input string to check. Returns: bool: True if the string is a valid binary number, False otherwise. return all(char in '01' for char in s)"},{"question":"Create a function that takes in a list of integers and returns a new list containing only the odd numbers from the original list. The function should have a time complexity of O(n), where n is the length of the input list. Additionally, the function should not use any built-in functions or libraries to solve the problem, and it should also use constant space complexity. The function should also ensure that the resulting list is sorted in ascending order.","solution":"def filter_and_sort_odds(nums): Returns a new list containing only the odd numbers from the original list, sorted in ascending order. Parameters: nums (list): A list of integers. Returns: list: A list of odd integers sorted in ascending order. result = [] for num in nums: if num % 2 != 0: result.append(num) # Sorting the result list using a simple selection sort to keep the complexity O(n^2) for i in range(len(result)): min_idx = i for j in range(i+1, len(result)): if result[j] < result[min_idx]: min_idx = j result[i], result[min_idx] = result[min_idx], result[i] return result"},{"question":"Create a function that takes in a string and returns a dictionary with each unique word as a key and the number of times it appears in the string as the value. The function should ignore punctuation and be case insensitive. The function should have a time complexity of O(n), where n is the length of the string.","solution":"import re from collections import defaultdict def word_count(s): Takes a string and returns a dictionary with each unique word as a key and the number of times it appears as the value. Ignores punctuation and is case insensitive. # Use regex to remove punctuation and split into words, ignore case words = re.findall(r'bw+b', s.lower()) word_freq = defaultdict(int) # Count each word's frequency for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"Define a function that takes in two strings as input and returns True if the first string is an anagram of the second string, and False otherwise. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as cinema, formed from iceman.","solution":"def is_anagram(s1, s2): Returns True if s1 is an anagram of s2, otherwise returns False. # Remove any non-alphanumeric characters and convert to lowercase cleaned_s1 = ''.join(e for e in s1 if e.isalnum()).lower() cleaned_s2 = ''.join(e for e in s2 if e.isalnum()).lower() # The sorted characters in both cleaned strings should match return sorted(cleaned_s1) == sorted(cleaned_s2)"},{"question":"Use python to handle multiple pairs of brackets and parentheses, output whether it is a correct string, and if it is not correct, output which bracket or parenthesis was misplaced.","solution":"def check_brackets_parentheses(s): Checks whether the string \`s\` contains correctly matched brackets and parentheses. Parameters: s (str): The input string to check. Returns: str: \\"Correct string\\" if all brackets and parentheses are correctly matched; otherwise, a string specifying the type of bracket or parenthesis that was misplaced. stack = [] bracket_map = {')': '(', ']': '[', '}': '{'} for index, char in enumerate(s): if char in bracket_map.values(): stack.append((char, index)) elif char in bracket_map.keys(): if stack == []: return f\\"Misplaced {char} at index {index}\\" top_element = stack.pop() if bracket_map[char] != top_element[0]: return f\\"Misplaced {char} at index {index}\\" if stack: last_unmatched = stack[-1] return f\\"Misplaced {last_unmatched[0]} at index {last_unmatched[1]}\\" return \\"Correct string\\""},{"question":"Write a function in Python that takes a list of strings and checks whether the list is empty or not. If the list is not empty, check whether every string in the list is at least 5 characters long. Additionally, for every string, check if it contains at least one digit and one uppercase letter.","solution":"def check_list_strings(lst): Check whether the list is empty or not. If the list is not empty, check whether every string in the list is at least 5 characters long. Additionally, for every string, check if it contains at least one digit and one uppercase letter. Returns: bool: True if all conditions are met, False otherwise. if not lst: return False for s in lst: if len(s) < 5: return False if not any(char.isdigit() for char in s): return False if not any(char.isupper() for char in s): return False return True"},{"question":"Generate two random non-overlapping DNA sequences each with 100 base pairs using Python. Ensure that you only use the four nucleotide bases - Adenine (A), Thymine (T), Cytosine (C), and Guanine (G). Afterwards, implement a function to find out how many base pairs are identical at the same position in the two sequences. It is recommended to use numpy random.choice method for creating the sequences.","solution":"import numpy as np def generate_dna_sequence(length=100): Generates a random DNA sequence of the given length. The sequence is comprised of A, T, C, and G. nucleotides = np.array(['A', 'T', 'C', 'G']) return ''.join(np.random.choice(nucleotides, length)) def count_identical_base_pairs(seq1, seq2): Counts the number of identical base pairs at the same positions in two DNA sequences of equal length. if len(seq1) != len(seq2): raise ValueError(\\"Sequences must be of equal length\\") identical_count = sum(1 for a, b in zip(seq1, seq2) if a == b) return identical_count # Example sequences (for demonstration) np.random.seed(0) seq1 = generate_dna_sequence(100) seq2 = generate_dna_sequence(100) # Example comparison identical_pairs_count = count_identical_base_pairs(seq1, seq2)"},{"question":"Write a small function to reverse a string using Python, but you are not allowed to use any built-in string reverse functions or methods, and the function must have a time complexity of O(n).","solution":"def reverse_string(s): Reverses the input string without using any built-in reverse functions or methods. reversed_s = [] for char in s: reversed_s.insert(0, char) return ''.join(reversed_s)"},{"question":"You are a Python developer working on a project that involves optimizing a complex algorithm for analyzing large datasets. You have been assigned the task of implementing a new optimization technique called \\"SuperScaler\\" that promises to significantly improve the performance of the algorithm. To achieve this, you need to write a Python function that takes a dataset and applies the SuperScaler optimization technique to it, returning the optimized dataset. However, there's a catch: you can't access the internet for inspiration or guidance, and you must use only the Python standard library to implement the function.","solution":"def super_scaler(dataset): Applies the SuperScaler optimization technique to the input dataset. Parameters: dataset (list of float): A list of numerical data points to be optimized by scaling. Returns: list of float: The optimized dataset after applying the SuperScaler technique. if not dataset: return [] # Find the maximum value in the dataset max_value = max(dataset) if max_value == 0: # If the maximum value is zero, scaling doesn't make sense return dataset # Scale each element in the dataset by the maximum value optimized_dataset = [x / max_value for x in dataset] return optimized_dataset"},{"question":"Is there a way to create a function in Python that takes a string as input and generates the words of that string in reverse order?","solution":"def reverse_words(sentence): Returns the words of the given sentence in reverse order. Parameters: sentence (str): The input string to reverse the words. Returns: str: A string with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Build a program to print the frequency of characters in an input string, considering only alphabets (a-z, A-Z). The input string will only contain letters and spaces. The program should ignore case sensitivity. The output should be sorted in ascending order of the characters' ASCII values. The program should also exclude any characters that have a frequency less than 2.","solution":"def character_frequency(input_string): Returns the frequency of characters in the input string, considering only alphabets (a-z, A-Z). Ignores case sensitivity and excludes characters with frequency less than 2. The result is sorted in ascending order of ASCII values. frequency_dict = {} for char in input_string: if char.isalpha(): char = char.lower() frequency_dict[char] = frequency_dict.get(char, 0) + 1 sorted_filtered_frequency = {k: v for k, v in sorted(frequency_dict.items()) if v >= 2} return sorted_filtered_frequency"},{"question":"Write a Python program that tests if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward or backward. Outputs \\"True\\" if the string is a palindrome and \\"False\\" otherwise. Also, modify the function to ignore case and non-alphanumeric characters. For example, an input string like \\"A man, a plan, a canal: Panama\\" should return \\"True\\" as well. Additionally, test your program with five different data points.","solution":"import re def is_palindrome(s): Returns True if the string s is a palindrome, ignoring case and non-alphanumeric characters. Returns False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a python program using numpy to generate a 3x3 matrix of random numbers. The program should also include a function to calculate the determinant of the generated matrix, and print either the matrix or its determinant based on user input. Remember, the matrix should be made up of integer numbers between -50 and 50.","solution":"import numpy as np def generate_random_matrix(): Generates a 3x3 matrix of random integer numbers between -50 and 50. matrix = np.random.randint(-50, 51, (3, 3)) return matrix def calculate_determinant(matrix): Calculates the determinant of a 3x3 matrix. determinant = np.linalg.det(matrix) return determinant def main(user_input): Based on user input, either prints the matrix or its determinant. :param user_input: 'matrix' to print the matrix, 'determinant' to print the determinant. matrix = generate_random_matrix() if user_input == 'matrix': return matrix elif user_input == 'determinant': return calculate_determinant(matrix) else: return None # Invalid input"},{"question":"Write a Python code snippet to determine if a string only contains characters from a specific set.","solution":"def string_contains_only_set_chars(s, char_set): Determines if the string \`s\` only contains characters from \`char_set\`. Parameters: s (str): The string to check. char_set (set): The set of characters allowed. Returns: bool: True if \`s\` only contains characters from \`char_set\`, False otherwise. return set(s).issubset(char_set)"},{"question":"Modify a given code implementing list comprehension that produces a list of prime numbers from a given list of numbers. Additionally, introduce error handling for non-integer types and negative numbers. If a non-integer or negative number is encountered, throw an exception with an appropriate error message.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def get_primes(numbers): Returns a list of prime numbers from the given list of numbers. Throws an exception if the list contains non-integers or negative numbers. primes = [] for num in numbers: if not isinstance(num, int): raise ValueError(f\\"Non-integer value encountered: {num}\\") if num < 0: raise ValueError(f\\"Negative number encountered: {num}\\") if is_prime(num): primes.append(num) return primes"},{"question":"Implement a function in Python that takes a list and returns its reverse using functional programming concepts.","solution":"from functools import reduce def reverse_list(lst): Returns the reverse of the given list using functional programming concepts. return reduce(lambda acc, x: [x] + acc, lst, [])"},{"question":"Create a function 'printStringBackward' that takes in a string and prints the string in reverse order.","solution":"def printStringBackward(s): Prints the string 's' in reverse order. return s[::-1]"},{"question":"I have a list of numbers. How can I implement an algorithm that reverses the order of the elements in the list without using any built-in functions or additional data structures in Python? Please provide the code for the algorithm.","solution":"def reverse_list(nums): Reverses the order of elements in the list nums without using any built-in functions or additional data structures. n = len(nums) for i in range(n // 2): nums[i], nums[n - i - 1] = nums[n - i - 1], nums[i] return nums"},{"question":"Create a Python script that implements a simple web server using Flask. The server should have two endpoints: one for a home page that displays \\"Hello, World!\\" and another for a page that accepts a name as a parameter and greets the user by their name.","solution":"from flask import Flask, request app = Flask(__name__) @app.route('/') def home(): return \\"Hello, World!\\" @app.route('/greet') def greet(): name = request.args.get('name', 'Stranger') return f\\"Hello, {name}!\\" if __name__ == '__main__': app.run(debug=True)"},{"question":"Write sample code for the bucket sort algorithm to sort a list of floating point numbers in ascending order. Additionally, implement it in such a way that it can handle negative numbers as well. Finally, compare its efficiency with the built-in sort function in Python using time complexity analysis for various sizes of input arrays.","solution":"import math def bucket_sort(arr): Perform bucket sort on the given list of floating point numbers. Handles negative numbers as well. if len(arr) == 0: return [] # Find the maximum and minimum values in the array min_value = min(arr) max_value = max(arr) # Define the number of buckets bucket_count = len(arr) # Initialize buckets buckets = [[] for _ in range(bucket_count)] # Distribute input array values into buckets for num in arr: # Scale the number to fit between 0 and bucket_count - 1 bucket_index = math.floor((num-min_value) / (max_value - min_value + 1) * bucket_count) buckets[bucket_index].append(num) # Sort individual buckets and concatenate them sorted_arr = [] for bucket in buckets: sorted_arr.extend(sorted(bucket)) return sorted_arr"},{"question":"Construct a Python function that not only verifies if a list of numerical values is sorted in a rising order, but also checks if the list is sorted in a strictly rising order (i.e., no two consecutive numbers are the same). The function should handle exceptions for inputs that are not numerical or are not lists. It should also be able to handle large lists efficiently.","solution":"def is_strictly_sorted(lst): Verify if a list of numerical values is sorted in strictly rising order. Args: lst (list): List of numeric values. Returns: bool: True if the list is strictly sorted, otherwise False. if not isinstance(lst, list): raise ValueError(\\"Input must be a list.\\") for element in lst: if not isinstance(element, (int, float)): raise ValueError(\\"All elements in the list must be numeric.\\") for i in range(1, len(lst)): if lst[i-1] >= lst[i]: return False return True"},{"question":"Write a Python program to convert an array of objects with a date property into an array of dates in MM/DD/YYYY format.","solution":"from datetime import datetime def convert_to_dates(obj_array): Returns an array of dates in MM/DD/YYYY format extracted from an array of objects with a date property. Parameters: obj_array (list): List of objects where each object contains a 'date' property in 'YYYY-MM-DD' format. Returns: list: List of dates in 'MM/DD/YYYY' format. formatted_dates = [] for obj in obj_array: date = obj.get(\\"date\\", \\"\\") if date: try: parsed_date = datetime.strptime(date, \\"%Y-%m-%d\\") formatted_dates.append(parsed_date.strftime(\\"%m/%d/%Y\\")) except ValueError: # handle the case where date is not in the expected format formatted_dates.append(\\"Invalid Date Format\\") else: formatted_dates.append(\\"No Date Provided\\") return formatted_dates"},{"question":"Write a Python script to iterate over a given list and print the square of the numbers in the list. Additionally, the script should only print the squares of the numbers that are prime. The script should also calculate and print the sum of all the squared prime numbers.","solution":"def is_prime(n): Return True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_squares(numbers): Given a list of numbers, prints the square of the prime numbers in the list and returns the sum of all squared primes. squared_primes = [num**2 for num in numbers if is_prime(num)] for square in squared_primes: print(square) return sum(squared_primes)"},{"question":"Given a two list of numbers, write code to return the count of intersection of those two lists (the number of unique numbers that exist in both lists).","solution":"def count_intersection(list1, list2): Returns the count of intersection of two lists. Intersection means elements that are present in both lists. set1 = set(list1) set2 = set(list2) intersection = set1 & set2 return len(intersection)"},{"question":"Suppose you have three hashmaps, C, D, and E. Write a program in Python to find the common elements in C, D, and E. However, only consider keys for commonality checks instead of key-value pairs.","solution":"def find_common_keys(C, D, E): Returns a set of keys common to dictionaries C, D, and E. # Find the intersection of keys from dictionaries C, D, and E common_keys = set(C.keys()) & set(D.keys()) & set(E.keys()) return common_keys"},{"question":"Create a recursive function to print \\"Hello World\\" for a given number of times without using loop constructs like for, while etc. The function should take an integer 'n' as the argument and print \\"Hello World\\" n times. Also, add handling for cases when 'n' is less than 0.","solution":"def print_hello_world(n): Recursively prints \\"Hello World\\" n times. if n <= 0: return else: print(\\"Hello World\\") print_hello_world(n - 1)"},{"question":"Write a python code to print out all substrings of an input string, separated by a comma.","solution":"def all_substrings(input_string): Returns all substrings of an input string, separated by a comma. substrings = [] length = len(input_string) for i in range(length): for j in range(i+1, length+1): substrings.append(input_string[i:j]) return ','.join(substrings)"},{"question":"Orchestrate a programmatical function, designated to accept an alphanumeric string as its primary input, and evaluate its legitimacy. The guiding principle is for the function to ascertain whether the length of the said string aligns with the predetermined criteria of having a minimum length of eight characters.","solution":"def is_valid_string(input_string): Evaluates the legitimacy of the input string based on its length. A valid string must be at least eight characters long. Parameters: input_string (str): The string to be evaluated. Returns: bool: True if the string length is at least eight characters, False otherwise. if len(input_string) >= 8: return True else: return False"},{"question":"In Python, write a script to find the median of a given list of numbers. If the list has an even number of elements, return the average of the two middle elements. If the list has an odd number of elements, return the middle element.","solution":"def find_median(numbers): Returns the median of the given list of numbers. sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n == 0: raise ValueError(\\"The list is empty and has no median.\\") mid = n // 2 if n % 2 == 1: return sorted_numbers[mid] else: return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2"},{"question":"Develop a recursive function in Python programming language that verifies whether two nested lists have any mutual elements. Bear in mind that these lists can contain other lists as their elements, to any depth. Additionally, your function must handle the comparison of elements efficiently, even for large lists, and should also be able to handle other iterable objects (like tuples or sets) inside the lists, treating them as potential containers of elements.","solution":"def has_mutual_elements(list1, list2): Recursively checks if there are any mutual elements between nested lists. def flatten(nested): for elem in nested: if isinstance(elem, (list, tuple, set)): yield from flatten(elem) else: yield elem flat_list1 = set(flatten(list1)) flat_list2 = set(flatten(list2)) return not flat_list1.isdisjoint(flat_list2)"},{"question":"Given a non-negative integer n and a list of size n pairs of integers, write a Python function to return the maximum XOR of any two numbers from the list.","solution":"def find_maximum_xor(n, pairs): Returns the maximum XOR of any two numbers from the list of pairs of integers. Parameters: n (int): Number of pairs. pairs (list of tuple): List containing pairs of integers. Returns: int: Maximum XOR value of any two numbers. numbers = [num for pair in pairs for num in pair] max_xor = 0 for i in range(len(numbers)): for j in range(i + 1, len(numbers)): max_xor = max(max_xor, numbers[i] ^ numbers[j]) return max_xor"},{"question":"Develop an algorithm to perform a ternary search on a sorted 2D array. The algorithm should also include handling for non-orthogonal (diagonal) searches, duplicates in the array, and differentiation for 'unordered' 2D arrays where each row may be sorted, but the entire matrix isn't.","solution":"def ternary_search_2d(array, target): def binary_search(arr, x): low, high = 0, len(arr) - 1 while low <= high: mid1 = low + (high - low) // 3 mid2 = high - (high - low) // 3 if arr[mid1] == x: return True if arr[mid2] == x: return True if x < arr[mid1]: high = mid1 - 1 elif x > arr[mid2]: low = mid2 + 1 else: low = mid1 + 1 high = mid2 - 1 return False rows = len(array) if rows == 0: return False cols = len(array[0]) for row in array: if binary_search(row, target): return True for i in range(min(rows, cols)): if array[i][i] == target or array[i][cols - i - 1] == target: return True return False"},{"question":"Create a hash function that assigns a unique number to each character of the input string, where the hash values are generated using a specific prime number algorithm. The time complexity of your solution should be O(n), where n is the length of the input string. The space complexity should be O(1).","solution":"def prime_hash(s): Returns a hash value for the given string \`s\`. The hash values are generated using a specific prime number algorithm to ensure unique hashing. hash_value = 0 prime = 31 for char in s: hash_value = hash_value * prime + ord(char) return hash_value"},{"question":"Define a Python decorator that prints the name of the function that is being decorated when it is called.","solution":"def print_func_name_decorator(func): A decorator that prints the name of the function it decorates. def wrapper(*args, **kwargs): print(f\\"Calling function: {func.__name__}\\") return func(*args, **kwargs) return wrapper"},{"question":"Create a function that takes in a list of integers and returns a set where no duplicates will be present. Additionally, you should ensure that the set is ordered in ascending order.","solution":"def unique_sorted_set(lst): Takes in a list of integers and returns a sorted set with no duplicates. Parameters: lst (list): A list of integers. Returns: set: A set of integers in ascending order without duplicates. return set(sorted(lst))"},{"question":"Given two strings, write a Python program to find the total number of common characters present in both strings.","solution":"def common_characters_count(s1, s2): Returns the total number of common characters present in both strings s1 and s2. from collections import Counter counter1 = Counter(s1) counter2 = Counter(s2) common_count = sum((counter1 & counter2).values()) return common_count"},{"question":"Given a list of hexadecimal numbers, write a Python program to convert each number to its decimal representation. Your program should handle large hexadecimal numbers and efficiently process a substantial list of numbers. Additionally, the program should identify and skip any invalid hexadecimal numbers, reporting them as errors.","solution":"def hex_to_decimal(hex_numbers): Converts a list of hexadecimal numbers to their decimal representations. Non-hexadecimal strings are identified and reported as errors. Parameters: hex_numbers (list): A list of strings representing hexadecimal numbers. Returns: tuple: A tuple containing two lists: - List of decimal representations of valid hexadecimal numbers. - List of indices of invalid hexadecimal numbers. decimal_numbers = [] invalid_indices = [] for idx, hex_num in enumerate(hex_numbers): try: decimal_number = int(hex_num, 16) decimal_numbers.append(decimal_number) except ValueError: invalid_indices.append(idx) return decimal_numbers, invalid_indices"},{"question":"Sort the list using Quick Sort in descending order. The list may contain duplicate elements. Write a function called \\"quick_sort_descending\\" that takes in a list of integers as input and returns the sorted list. You may assume that the input list will always contain at least one element. Your implementation should have a time complexity of O(n log n) and a space complexity of O(log n).","solution":"def quick_sort_descending(arr): Sorts the list in descending order using Quick Sort. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x > pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x < pivot] return quick_sort_descending(left) + middle + quick_sort_descending(right)"},{"question":"Create a Python program for calculating the factorial of a number. The program should take an integer as an input and should return the factorial of that number.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises ValueError for negative integers. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Implement a function that takes an input of two positive integers and generates a random number between them (including the two numbers). Then, create an interface to test your function with user input. You should also check for the validity of the inputs (e.g. the second number should not be less than the first number) and handle any potential errors gracefully.","solution":"import random def generate_random_number(a: int, b: int) -> int: Generates a random number between a and b, inclusive. if not (isinstance(a, int) and isinstance(b, int)): raise ValueError(\\"Inputs must be integers.\\") if a < 0 or b < 0: raise ValueError(\\"Inputs must be positive integers.\\") if a > b: raise ValueError(\\"The first number must be less than or equal to the second number.\\") return random.randint(a, b) def validate_and_generate(a_str: str, b_str: str) -> int: Validates the user input and generates a random number between the two numbers (inclusive). try: a = int(a_str) b = int(b_str) return generate_random_number(a, b) except ValueError as e: return str(e)"},{"question":"Create a Python function to generate Fibonacci numbers up to a given number n using dynamic programming.","solution":"def fibonacci(n): Generates Fibonacci numbers up to the given number n using dynamic programming. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] while True: new_fib = fib_seq[-1] + fib_seq[-2] if new_fib >= n: break fib_seq.append(new_fib) return fib_seq"},{"question":"Develop a Python function to normalize a provided list of numerical values ensuring their cumulative total equals 1, with the consideration of potential implications for floating point precision.","solution":"def normalize_list(numbers): Normalizes the provided list of numerical values so the cumulative total is 1. Parameters: numbers (list of float): A list of numerical values. Returns: list of float: A normalized list of numerical values where the cumulative sum is 1. total = sum(numbers) if total == 0: raise ValueError(\\"Cannot normalize a list with a total sum of 0.\\") return [x / total for x in numbers]"},{"question":"Introduce a Python function by the name of \`list_diff\` that accepts two input parameters both in the form of lists, named \`list1\` and \`list2\`. The mission of this function is to return a new list. This new list should feature elements that originate from \`list1\` but exclude any element found in \`list2\`, ensuring duplicates in \`list1\` are maintained as per their occurrence in \`list1\`.","solution":"def list_diff(list1, list2): Returns a list containing elements from list1 that are not present in list2, preserving duplicates from list1. list2_set = set(list2) return [item for item in list1 if item not in list2_set]"},{"question":"Given a pair of non-negative integers, write code that outputs the lesser number without using any comparison operators like '<', '>', '==', etc.","solution":"def lesser_number(a, b): Returns the lesser of two non-negative integers without using any comparison operators. return (a + b - abs(a - b)) // 2 # Helper function to calculate absolute value without using comparison operators def abs(x): return (x**2)**0.5"},{"question":"Write a function in Python that accepts a list of numbers and returns a list of the squares of the numbers. Additionally, the function should exclude any numbers that are negative or zero, returning only the squares of the positive numbers. Ensure the function is optimized for large lists.","solution":"def squared_positive_numbers(numbers): This function accepts a list of numbers and returns a list of the squares of the numbers, excluding any that are negative or zero. Parameters: numbers (list): List of numbers. Returns: list: List of squares of the positive numbers. return [x ** 2 for x in numbers if x > 0]"},{"question":"Create a Python program for removing duplicate elements in an array. The program should return a new array with the unique elements from the original array.","solution":"def remove_duplicates(arr): Removes duplicate elements from an array and returns a new array with unique elements. Parameters: arr (list): The input array from which duplicates are to be removed. Returns: list: A new array with unique elements. return list(set(arr))"},{"question":"Write a Python function to calculate the sum of all digits present in a given string. Also, if the string is alphanumeric, raise the sum by one power. Ensure the function is efficient with a time complexity of O(n) where n is the length of the string. The function should also handle cases where the input string might be empty or contain non-alphanumeric characters.","solution":"def sum_of_digits(s): Returns the sum of all digits present in the given string. If the string is alphanumeric, raises the sum by one power. digit_sum = 0 has_alpha = False for char in s: if char.isdigit(): digit_sum += int(char) if char.isalpha(): has_alpha = True if has_alpha and digit_sum > 0: digit_sum = digit_sum ** 2 return digit_sum"},{"question":"Write a function that takes two arguments, a number and a list, and returns a list with all elements from the original list repeated num times. Each repetition should start from the first element again.","solution":"def repeat_elements(num, lst): Returns a list with all elements from the original list repeated num times. Args: num (int): Number of times to repeat elements. lst (list): List of elements to be repeated. Returns: list: List with repeated elements. result = [] for _ in range(num): result.extend(lst) return result"},{"question":"Create a complex function in Python to unpack a given list of tuples. The function should return a dictionary that contains unique first elements of the tuples as keys. The values should be another dictionary, in which the keys are the second elements of the tuples with the same first element, and the values are lists of third elements of the tuples.","solution":"def unpack_tuples(tuple_list): Unpacks a list of tuples and returns a dictionary containing unique first elements of the tuples as keys. The values are dictionaries where the keys are the second elements of the tuples with the same first element, and the values are lists of third elements of the tuples. result = {} for first, second, third in tuple_list: if first not in result: result[first] = {} if second not in result[first]: result[first][second] = [] result[first][second].append(third) return result"},{"question":"Develop a Python function to strip and normalize all whitespace characters from a provided string, manage various unicode whitespace characters, and deal with edge cases like strings containing only whitespace characters or empty strings. The function should also tackle tabs, newlines, and other non-standard whitespace characters.","solution":"import re def normalize_whitespace(s): Strips and normalizes all whitespace characters from the provided string. # Using regex to match any whitespace character and replace multiple spaces with single space normalized_string = re.sub(r's+', ' ', s).strip() return normalized_string"},{"question":"Write a Python function that takes three strings as input. The first two strings will be patterns, and the third string will be a text. Your function should return True if the first pattern matches the start of the text and the second pattern matches the end of the text. Both patterns should match completely (i.e. from the beginning to the end of the pattern, not just a substring match). For this task, consider the entire text content which might include more elements besides those that match the patterns.","solution":"def match_patterns(start_pattern, end_pattern, text): Returns True if start_pattern matches the start of text and end_pattern matches the end of text. Otherwise, returns False. return text.startswith(start_pattern) and text.endswith(end_pattern)"},{"question":"Create a Python program that prints out each item in a given list, but only if the item is a string and contains at least 5 characters. The program should also count the number of characters in each valid string and print the count next to the string. If the item is not a string or does not meet the character requirement, print \\"Invalid item: [item]\\".","solution":"def print_valid_strings(items): Prints each item in the list if it's a string with at least 5 characters, along with the number of characters in the string. Prints \\"Invalid item: [item]\\" for items that don't meet the criteria. for item in items: if isinstance(item, str) and len(item) >= 5: print(f\\"{item} ({len(item)} characters)\\") else: print(f\\"Invalid item: {item}\\")"},{"question":"Write a Python program to check if a given number is a happy number. A happy number is a number defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.","solution":"def is_happy_number(n): Returns True if n is a happy number, False otherwise. def get_next(number): total_sum = 0 while number > 0: number, digit = divmod(number, 10) total_sum += digit ** 2 return total_sum visited_numbers = set() while n != 1 and n not in visited_numbers: visited_numbers.add(n) n = get_next(n) return n == 1"},{"question":"Write a Python function to find the maximum element from a given list of numbers, but without using the built-in max function or any other sorting functions.","solution":"def find_max(numbers): Returns the maximum element from a given list of numbers. if not numbers: raise ValueError(\\"The list is empty\\") max_element = numbers[0] for number in numbers[1:]: if number > max_element: max_element = number return max_element"},{"question":"Create a simple Python function that takes a string as input and returns its length.","solution":"def string_length(s): Returns the length of the input string. return len(s)"},{"question":"Write a function in Python that merges two numerical sequences into one, ensuring there are no repeated elements. The function should manage duplicate values by keeping only one occurrence. It should also return the consolidated list sorted in ascending order. Lastly, write a test scenario to validate your solution.","solution":"def merge_sequences(seq1, seq2): Merges two numerical sequences into one, ensuring there are no repeated elements. Returns the consolidated list sorted in ascending order. Parameters: - seq1: First sequence (list or tuple) of numbers - seq2: Second sequence (list or tuple) of numbers Returns: - A sorted list of unique numbers from both sequences return sorted(set(seq1).union(set(seq2)))"},{"question":"Create a Python function that implements a basic Caesar cipher, which shifts the alphabet by a given number of positions. The function should accept a plaintext string and a shift value as inputs, and return the encrypted string.","solution":"def caesar_cipher(plaintext, shift): Encrypts the plaintext using a Caesar cipher with the given shift. Parameters: plaintext (str): the string to be encrypted shift (int): the number of positions to shift each character Returns: str: the encrypted string encrypted = [] for char in plaintext: if char.isalpha(): start = ord('A') if char.isupper() else ord('a') offset = (ord(char) - start + shift) % 26 encrypted.append(chr(start + offset)) else: encrypted.append(char) return ''.join(encrypted)"},{"question":"Write a recursive function in Python to calculate the nth term of the Fibonacci sequence, where n is a positive integer. The Fibonacci sequence is defined as follows: the first two terms are 0 and 1, and each subsequent term is the sum of the previous two terms. Make sure to handle the base cases in your recursive function.","solution":"def fibonacci(n): Returns the nth term of the Fibonacci sequence using recursion. Parameters: n (int): The term to be calculated in the Fibonacci sequence. Returns: int: The nth term of the Fibonacci sequence. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Create a closure that returns the number of uppercase letters in a given string.","solution":"def uppercase_counter(): def count_uppercase(s): Returns the number of uppercase letters in the provided string s. return sum(1 for c in s if c.isupper()) return count_uppercase # Create an instance of the closure count_uppercase = uppercase_counter()"},{"question":"Given a string s and a positive integer k, write a function to find the kth character in s after repeating it infinitely.","solution":"def kth_in_repeated_string(s, k): Given a string s and a positive integer k, returns the kth character in s after repeating it infinitely. # Determine the length of the string length_s = len(s) # The k-th character in the infinitely repeating string is the remainder of k divided by the length of the string, # note that if k is a multiple of length_s, we should take the last character index = (k - 1) % length_s return s[index]"},{"question":"Suppose you have a string with a specific pattern, write a function that checks if the string follows the pattern. The pattern can contain any combination of uppercase letters and dots (.), where dots can match any character (including uppercase letters) in the string. Your task is to determine if the string matches the pattern or not.","solution":"import re def matches_pattern(s, pattern): Checks if the string \`s\` follows the \`pattern\`. The pattern can contain uppercase letters and dots (.), where dots can match any character. Parameters: s (str): The string to be checked. pattern (str): The pattern to match the string against. Returns: bool: True if the string matches the pattern, False otherwise. # Replace dots with regex equivalent of any character (.) and compile the regex regex_pattern = re.compile(f\\"^{pattern}\\") # Check if the entire string matches the pattern return bool(regex_pattern.match(s))"},{"question":"Write a Python code to find the second largest even number in a given list of integers. If there is no second largest even number, return None.","solution":"def second_largest_even(numbers): Returns the second largest even number in the list. If there is no second largest even number, return None. :param numbers: List of integers :return: Second largest even number or None even_numbers = sorted({num for num in numbers if num % 2 == 0}, reverse=True) return even_numbers[1] if len(even_numbers) > 1 else None"},{"question":"Write a code that will check if a given string is a palindrome or not without using extra space. The code should ignore case sensitivity. Additionally, the code should only use recursion for the palindrome check. The string will have at most 1000 characters.","solution":"def is_palindrome_recursive(s, left, right): Check if a substring s[left:right+1] is a palindrome using recursion. # Base case: if left >= right, we've checked all characters if left >= right: return True # Ignore case by converting characters to lower case if s[left].lower() != s[right].lower(): return False # Recur for the remaining substring return is_palindrome_recursive(s, left + 1, right - 1) def is_palindrome(s): Check if a given string is a palindrome, ignoring case sensitivity. Only uses recursion and no extra space. return is_palindrome_recursive(s, 0, len(s) - 1)"},{"question":"Write a Python program to count the number of uppercase and lowercase letters in a given sentence.","solution":"def count_upper_and_lower(sentence): Counts the number of uppercase and lowercase letters in the given sentence. Parameters: sentence (str): The sentence to count the letters in. Returns: tuple: A tuple where the first element is the number of uppercase letters and the second is the number of lowercase letters. uppercase_count = sum(1 for c in sentence if c.isupper()) lowercase_count = sum(1 for c in sentence if c.islower()) return (uppercase_count, lowercase_count)"},{"question":"Write a Python decorator to count function calls, but ensure that it is compatible with functions that have varying numbers of arguments and keyword arguments. Also, ensure that the decorator can handle functions that are called recursively.","solution":"from functools import wraps def count_calls(func): Decorator to count function calls, including recursive calls. @wraps(func) def wrapper(*args, **kwargs): wrapper.call_count += 1 return func(*args, **kwargs) wrapper.call_count = 0 return wrapper"},{"question":"Create a Python code that takes two lists with varying lengths as input and prints out all the unique common elements in both lists. Ensure the program can handle large lists without running out of memory. Also, add some test cases to verify your solution.","solution":"def find_unique_common_elements(list1, list2): Returns a list of unique common elements from both lists. set1 = set(list1) set2 = set(list2) common_elements = set1.intersection(set2) return list(common_elements)"},{"question":"Can you make a Python program that calculates the frequency of all unique numbers from a list of provided numbers?","solution":"def calculate_frequency(numbers): Given a list of numbers, returns a dictionary with the frequency of each unique number. frequency_dict = {} for number in numbers: frequency_dict[number] = frequency_dict.get(number, 0) + 1 return frequency_dict"},{"question":"Make a python function for a game which takes a list of positive integers as an argument and returns the index of the smallest integer in the list. However, if there are multiple occurrences of the smallest integer, the function should return the index of the last occurrence. If the list is empty, the function should return -1.","solution":"def find_index_of_smallest(nums): Returns the index of the smallest integer in the list of positive integers. If the smallest integer appears multiple times, returns the index of the last occurrence. Returns -1 if the list is empty. if not nums: return -1 # Find the smallest value smallest = min(nums) # Find the index of the last occurrence of the smallest value for i in range(len(nums)-1, -1, -1): if nums[i] == smallest: return i"},{"question":"Write a Python code to shuffle a list of strings without using any in-built Python libraries or methods for shuffling. Your implementation should roughly be based on the Fisher-Yates (Knuth) shuffle algorithm.","solution":"import random def shuffle_list(input_list): Shuffles a list of strings using the Fisher-Yates (Knuth) shuffle algorithm. output_list = input_list[:] n = len(output_list) for i in range(n-1, 0, -1): j = random.randint(0, i) output_list[i], output_list[j] = output_list[j], output_list[i] return output_list"},{"question":"Design a program in Python that generates the first 10 prime numbers between 1000 and 2000, and then calculates the sum of their digits. Additionally, the program must output the prime numbers in a table format and the sum of the digits must be converted to binary before displaying the result.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def generate_primes(start, end, count): Generates the first \`count\` prime numbers in the range [start, end]. primes = [] for num in range(start, end + 1): if len(primes) == count: break if is_prime(num): primes.append(num) return primes def sum_of_digits(n): Returns the sum of the digits of n. return sum(int(digit) for digit in str(n)) def main(): primes = generate_primes(1000, 2000, 10) print(\\"First 10 primes between 1000 and 2000:\\") for prime in primes: print(prime) total_sum = sum([sum_of_digits(prime) for prime in primes]) print(f\\"Sum of digits in binary: {bin(total_sum)}\\") if __name__ == \\"__main__\\": main()"},{"question":"Subject: Creating a Python Function for Quadratic Equation Solver - Step-by-Step Guide","solution":"import math def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0 and returns the roots. Args: a (float): Coefficient of x^2 term. b (float): Coefficient of x term. c (float): Constant term. Returns: tuple: Roots of the quadratic equation. Can be two real roots, one real root, or two complex roots. if a == 0: if b != 0: return (-c / b,) else: raise ValueError(\\"Invalid coefficients; a and b cannot both be zero.\\") discriminant = b**2 - 4*a*c if discriminant > 0: root1 = (-b + math.sqrt(discriminant)) / (2 * a) root2 = (-b - math.sqrt(discriminant)) / (2 * a) return (root1, root2) elif discriminant == 0: root = -b / (2 * a) return (root,) else: real_part = -b / (2 * a) imaginary_part = math.sqrt(-discriminant) / (2 * a) root1 = complex(real_part, imaginary_part) root2 = complex(real_part, -imaginary_part) return (root1, root2)"},{"question":"In my web application, I need to identify if a URL is a relative path or an absolute URL. How can I achieve this using a function in Python?","solution":"from urllib.parse import urlparse def is_absolute(url): Determines if a given URL is an absolute URL. Args: url (str): The URL to check. Returns: bool: True if the URL is absolute, False if it is relative. parsed_url = urlparse(url) # A URL is considered absolute if it has a scheme and a netloc return bool(parsed_url.scheme and parsed_url.netloc)"},{"question":"Write a function to traverse a nested dictionary recursively in Python. The function should return a list of all the keys in the dictionary, including keys from nested dictionaries. Additionally, the function should ignore any nested dictionaries that have a key starting with the letter \\"a\\" or have a value that is a string.","solution":"def traverse_dict(d): Recursively traverse the dictionary and return a list of keys, ignoring any nested dictionaries that have a key starting with \\"a\\" or have a value that is a string. keys = [] def helper(sub_d): for k, v in sub_d.items(): if k.startswith('a') or isinstance(v, str): continue keys.append(k) if isinstance(v, dict): helper(v) helper(d) return keys"},{"question":"Write a program that takes a list of integers as input and prints the count of unique integers in the list.","solution":"def count_unique_integers(lst): Returns the count of unique integers in the list. Parameters: lst (list): List of integers Returns: int: Count of unique integers in the list return len(set(lst))"},{"question":"Write a detailed explanation of the differences between a shallow copy and a deep copy in Python, and provide specific scenarios where each method is more suitable. Additionally, write a Python function for each method to demonstrate their usage.","solution":"import copy def shallow_copy_example(data): Takes a data structure (list, dictionary, etc.) and returns its shallow copy. return copy.copy(data) def deep_copy_example(data): Takes a data structure (list, dictionary, etc.) and returns its deep copy. return copy.deepcopy(data)"},{"question":"Design a function to split a string into several equal parts and to return the parts as a list of strings. The function should also be capable of handling the scenarios when the string can't be divided evenly. In such cases, the function should distribute the extra characters as evenly as possible among the first few parts.","solution":"def split_string(s, num_parts): Splits the string s into num_parts parts as evenly as possible. Parameters: s (str): The input string to be split. num_parts (int): The number of parts to split the string into. Returns: list: A list containing the split parts. if num_parts <= 0: return [] part_len = len(s) // num_parts extra_chars = len(s) % num_parts parts = [] start = 0 for i in range(num_parts): # Each part should have at least part_len characters # Distribute the remaining characters among the first 'extra_chars' parts end = start + part_len + (1 if i < extra_chars else 0) parts.append(s[start:end]) start = end return parts"},{"question":"Create a software script for a greeting message that customarily acknowledges the launch of the system and includes a timestamp. Language: Python","solution":"from datetime import datetime def generate_greeting(system_name): Generates a greeting message acknowledging the launch of the system and includes a timestamp. Parameters: system_name (str): The name of the system being launched. Returns: str: A greeting message with a timestamp. timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S') greeting_message = f\\"Welcome! The {system_name} system has been launched successfully at {timestamp}.\\" return greeting_message"},{"question":"Given the python functions \`add(i : int, j : int) -> int\`, \`substract(i : int, j : int) -> int\` and \`multiply(i : int, j : int) -> int\` that respectively return the result of adding, subtracting, and multiplying \`i\` and \`j\`, create a function \`calculate(i : int, j : int, operation : str) -> int\` that calls one of the functions \`add\`, \`substract\`, or \`multiply\` based on the \`operation\` string which could be \`\\"add\\"\`, \`\\"subtract\\"\`, or \`\\"multiply\\"\`. The function should handle cases in which the \`operation\` string is not one of the three options by raising a ValueError.","solution":"def add(i: int, j: int) -> int: return i + j def subtract(i: int, j: int) -> int: return i - j def multiply(i: int, j: int) -> int: return i * j def calculate(i: int, j: int, operation: str) -> int: if operation == \\"add\\": return add(i, j) elif operation == \\"subtract\\": return subtract(i, j) elif operation == \\"multiply\\": return multiply(i, j) else: raise ValueError(\\"Invalid operation. Choose 'add', 'subtract' or 'multiply'.\\")"},{"question":"Write a code to generate a random sequence of numbers from 1 to n, where n is a positive integer. The sequence should not have consecutive numbers. For example, if n is 5, the sequence [1, 2, 3, 4, 5] is not allowed because 1 and 2 are consecutive. But the sequence [2, 4, 1, 5, 3] is allowed as no two numbers are consecutive.","solution":"import random def generate_non_consecutive_sequence(n): Generate a random sequence of numbers from 1 to n, where no two numbers in the sequence are consecutive. if n < 1: return [] numbers = list(range(1, n + 1)) random.shuffle(numbers) while any(abs(numbers[i] - numbers[i+1]) == 1 for i in range(len(numbers) - 1)): random.shuffle(numbers) return numbers"},{"question":"Create a basic web application using Python's Flask module. The application should define a route for the path /hello and should return the message \\"Hello, World!\\" when the route is accessed.","solution":"from flask import Flask app = Flask(__name__) @app.route('/hello') def hello(): Route to return 'Hello, World!' message. return \\"Hello, World!\\" if __name__ == '__main__': app.run(debug=True)"},{"question":"Reverse the elements of a list, but do not use any built-in functions or methods that directly reverse a list. Implement your own algorithm to reverse the list. Your algorithm should have a time complexity of O(n) and should not use any additional data structures.","solution":"def reverse_list(lst): Reverses the elements of the list in place. Parameters: lst (list): The list to be reversed. Returns: list: The same list with elements reversed. left = 0 right = len(lst) - 1 while left < right: # Swap the elements at the left and right indices lst[left], lst[right] = lst[right], lst[left] # Move the pointers towards the center left += 1 right -= 1 return lst"},{"question":"Given two lists, write a function that outputs the common elements in both lists in a time complexity of O(n), where n is the length of the longest list. Additionally, the function should only use constant space complexity. Do not use any built-in functions or libraries for set operations.","solution":"def common_elements(list1, list2): Returns a list of common elements in both list1 and list2. if not list1 or not list2: return [] common = [] hashmap = {} for element in list1: hashmap[element] = True for element in list2: if element in hashmap: common.append(element) del hashmap[element] # To maintain constant space complexity return common"},{"question":"Develop a programming function that can perform a two-way conversion between punctuation marks and asterisks within a given textual string. The function should also be able to recognize and handle multiple language characters and specific regional symbol variations. Solving this problem requires a clear understanding of how to manipulate strings in the programming language you're using. Below I'll provide a solution in Python, using the \`str.translate\` and \`str.maketrans\` methods. However, handling regional symbol variations and multi-language characters specifically- requires a defined set of rules, because interpreting symbols like \\",\\" can vary drastically based on the language and region.","solution":"def convert_punctuation(text): Convert punctuation marks to asterisks and vice versa in a given text. This function replaces the following punctuation marks with asterisks: - . (period) - , (comma) - ! (exclamation mark) - ? (question mark) - ; (semicolon) - : (colon) - - (hyphen) - ' (single quote) - \\" (double quote) And replaces asterisks with periods. Args: text (str): The input text. Returns: str: The text with punctuation marks converted to asterisks and asterisks to periods. translation_table = str.maketrans({ '.': '*', ',': '*', '!': '*', '?': '*', ';': '*', ':': '*', '-': '*', ''': '*', '\\"': '*', '*': '.' }) return text.translate(translation_table)"},{"question":"Create a simple encryption function using a Caesar cipher in Python.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts text using a Caesar cipher with the given shift. encrypted_text = [] for char in text: if char.isalpha(): shift_base = ord('a') if char.islower() else ord('A') shifted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_text.append(shifted_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"As a software developer, you've been tasked with implementing a convolutional neural network (CNN) from scratch. Your goal is to design a basic CNN architecture using NumPy for image classification. The CNN should consist of one convolutional layer followed by one fully connected layer. The convolutional layer uses a 5x5 kernel and max pooling with a 2x2 filter, while the fully connected layer uses a simple dense layer. You're also required to implement both the forward and backpropagation steps for the CNN.","solution":"import numpy as np def conv_forward(X, W, b, stride=1): Perform a forward pass of the convolutional layer. n_filters, d_filter, h_filter, w_filter = W.shape n_x, d_x, h_x, w_x = X.shape h_out = (h_x - h_filter)//stride + 1 w_out = (w_x - w_filter)//stride + 1 # Initialize the output out = np.zeros((n_x, n_filters, h_out, w_out)) for i in range(n_x): for f in range(n_filters): for h in range(0, h_out*stride, stride): for w in range(0, w_out*stride, stride): h_start = h h_end = h + h_filter w_start = w w_end = w + w_filter out[i, f, h//stride, w//stride] = np.sum(X[i, :, h_start:h_end, w_start:w_end] * W[f]) + b[f] return out def max_pool_forward(X, size=2, stride=2): Perform a forward pass of the max pooling layer. n, d, h, w = X.shape h_out = (h - size) // stride + 1 w_out = (w - size) // stride + 1 # Initialize the output out = np.zeros((n, d, h_out, w_out)) for i in range(n): for j in range(d): for h in range(0, h_out*stride, stride): for w in range(0, w_out*stride, stride): h_start = h h_end = h + size w_start = w w_end = w + size out[i, j, h//stride, w//stride] = np.max(X[i, j, h_start:h_end, w_start:w_end]) return out def fc_forward(X, W, b): Perform a forward pass of the fully connected layer. return np.dot(X, W) + b class SimpleCNN: def __init__(self, input_shape, num_classes): self.conv_W = np.random.randn(6, input_shape[0], 5, 5) * 0.01 self.conv_b = np.random.randn(6) * 0.01 conv_output_size = ((input_shape[1] - 5 + 1) // 2) * ((input_shape[2] - 5 + 1) // 2) * 6 self.fc_W = np.random.randn(conv_output_size, num_classes) * 0.01 self.fc_b = np.random.randn(num_classes) * 0.01 def forward(self, X): conv_out = conv_forward(X, self.conv_W, self.conv_b) pooled_out = max_pool_forward(conv_out) flattened_out = pooled_out.reshape(pooled_out.shape[0], -1) fc_out = fc_forward(flattened_out, self.fc_W, self.fc_b) return fc_out"},{"question":"Given a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target.","solution":"def find_pair_with_sum(numbers, target): Returns a pair of numbers from the list that add up to the target. If no such pair exists, returns None. seen_numbers = set() for number in numbers: complement = target - number if complement in seen_numbers: return complement, number seen_numbers.add(number) return None"},{"question":"Create a code to iterate through all the elements of a list and only display those which are integers. Also, format the final output as a comma-delimited string.","solution":"def filter_integers(input_list): Filters integers from the input list and returns them as a comma-delimited string. Args: input_list (list): List of elements to be filtered. Returns: str: Comma-delimited string of integers. integers = [str(x) for x in input_list if isinstance(x, int)] return ','.join(integers)"},{"question":"Write a Python function that takes a list of strings and returns the shortest string in the list. The function should only consider strings that are longer than 2 characters. If there are multiple strings with the same shortest length, return the one that appears first in the list. If there are no strings longer than 2 characters, the function should return None.","solution":"def shortest_string(strings): Returns the shortest string in the list that is longer than 2 characters. If no such string exists, returns None. filtered_strings = [s for s in strings if len(s) > 2] if not filtered_strings: return None return min(filtered_strings, key=len)"},{"question":"Design a python function that can receive a dictionary as input, where each key-value pair represents a name and its frequency. The function's responsibility is to construct a list that contains the names that have the highest frequency in the provided dictionary. In case of a tie for the highest frequency, the function should return all the names involved in the tie. Moreover, on top of the names, the function should also return the highest frequency value. The function should be capable of handling scenarios where the input dictionary may not have any entries, returning an empty list and a None for the highest frequency in such cases. Furthermore, the constructed function should have the ability to handle situations where all names have the same frequency, returning all names and the common frequency in this scenario as well.","solution":"def names_with_highest_frequency(name_freq): Returns a tuple containing a list of names with the highest frequency and the highest frequency value. Parameters: name_freq (dict): A dictionary where keys are names and values are their frequencies. Returns: tuple: A tuple containing the list of names with the highest frequency and the highest frequency value. If the input dictionary is empty, returns ([], None). if not name_freq: return ([], None) max_freq = max(name_freq.values()) max_freq_names = [name for name, freq in name_freq.items() if freq == max_freq] return (max_freq_names, max_freq)"},{"question":"How would you implement a function to determine if a number is a prime number in Python, using a for loop?","solution":"def is_prime(n): Determines if a number is a prime number. :param n: The number to check :return: True if n is a prime number, False otherwise if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"question":"Given a list of strings which may not only contain words but also digits and special characters, write a program that returns a list of all strings that are palindromes. A palindrome is a string which when reversed, are identical to the original string. Consider case sensitivity while checking for palindromes.","solution":"def find_palindromes(strings): Given a list of strings, return a list of all strings that are palindromes. return [s for s in strings if s == s[::-1]]"},{"question":"How can I create a web server to serve a static HTML page using Flask?","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def serve_static_page(): return ''' <html> <head><title>Static HTML Page</title></head> <body> <h1>Welcome to the Static HTML Page</h1> <p>This is a simple static HTML page served using Flask.</p> </body> </html> ''' if __name__ == \\"__main__\\": app.run(debug=True)"},{"question":"Write a program to generate a random traversal sequence for a binary tree with n nodes. The program should also define the conditions under which a traversal sequence (be it pre-order, in-order, or post-order) can be considered valid.","solution":"import random class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def generate_random_tree(n): nodes = [TreeNode(i) for i in range(1, n+1)] if n == 0: return None random.shuffle(nodes) root = nodes[0] for node in nodes[1:]: current = root while True: if random.choice([True, False]): if current.left is None: current.left = node break current = current.left else: if current.right is None: current.right = node break current = current.right return root def pre_order_traversal(node): if node: return [node.val] + pre_order_traversal(node.left) + pre_order_traversal(node.right) else: return [] def in_order_traversal(node): if node: return in_order_traversal(node.left) + [node.val] + in_order_traversal(node.right) else: return [] def post_order_traversal(node): if node: return post_order_traversal(node.left) + post_order_traversal(node.right) + [node.val] else: return [] def is_valid_pre_order_sequence(tree, sequence): return pre_order_traversal(tree) == sequence def is_valid_in_order_sequence(tree, sequence): return in_order_traversal(tree) == sequence def is_valid_post_order_sequence(tree, sequence): return post_order_traversal(tree) == sequence"},{"question":"Write a code to add a new key and value to a given dictionary, but only if the dictionary is not empty. If the dictionary is empty, print an error message stating that the dictionary is empty. The dictionary should have at least one existing key-value pair.","solution":"def add_key_if_not_empty(dictionary, key, value): Adds a new key-value pair to the given dictionary if it is not empty. If the dictionary is empty, prints an error message. Parameters: dictionary (dict): The dictionary to which the key-value pair should be added. key: The key to be added. value: The value to be associated with the key. Returns: None if dictionary: dictionary[key] = value else: print(\\"Error: The dictionary is empty\\")"},{"question":"Given a list of integers, write a Python program to find the index of the largest number.","solution":"def find_index_of_largest(nums): Returns the index of the largest number in the list. if not nums: return None max_index = 0 for i in range(1, len(nums)): if nums[i] > nums[max_index]: max_index = i return max_index"},{"question":"Rewrite the Fibonacci sequence program using recursion in Python. Also, optimize it further by using memoization (storing recent function calls to decrease the time complexity).","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Given two list a and b, write a Python program to find the intersection of these lists without using any built-in functions.","solution":"def list_intersection(a, b): Returns the intersection of lists a and b. intersection = [] for element in a: if element in b and element not in intersection: intersection.append(element) return intersection"},{"question":"Write a Python function that takes a list of numbers as input and returns the list with all duplicates removed.","solution":"def remove_duplicates(numbers): Returns a list with duplicates removed from the input list of numbers. return list(set(numbers))"},{"question":"Human: Write a shifting cipher script that creates a new character set based on a given key, and also apply this script to encode a message. Observe the hint for the direction to proceed.","solution":"def create_cipher_set(key): Creates a cipher set based on the given key by shifting the alphabet. Args: key (int): The number of positions to shift the alphabet. Returns: dict: A dictionary mapping each character in the original set to the shifted character. alphabet = 'abcdefghijklmnopqrstuvwxyz' shifted_alphabet = alphabet[key % 26:] + alphabet[:key % 26] cipher_set = {letter: shifted_alphabet[i] for i, letter in enumerate(alphabet)} return cipher_set def encode_message(message, key): Encodes a message using the shifted cipher set based on the given key. Args: message (str): The message to encode. key (int): The number of positions to shift the alphabet. Returns: str: The encoded message. cipher_set = create_cipher_set(key) encoded_message = ''.join(cipher_set.get(char, char) for char in message) return encoded_message"},{"question":"Given the list of numbers [1,2,3,4,5,6], how would you implement a function in Python to return a new list containing only the even numbers using list comprehension and without using any built-in functions like filter()? Additionally, write a separate function using recursion to accomplish the same task.","solution":"def get_even_numbers_list_comprehension(numbers): Returns a list of even numbers from the given list using list comprehension. return [number for number in numbers if number % 2 == 0] def get_even_numbers_recursion(numbers): Returns a list of even numbers from the given list using recursion. if not numbers: return [] head, *tail = numbers if head % 2 == 0: return [head] + get_even_numbers_recursion(tail) else: return get_even_numbers_recursion(tail)"},{"question":"Write a Python function that not only checks if a given string is a valid email address, but also validates the domain name and its TLD (top level domain). This function should accomplish this by not only verifying that the email format is correct, but also by checking that the domain name contains at least one period, and the TLD contains between 2 to 6 alphabetic characters. Additionally, write a unit test to verify the correctness of your solution.","solution":"import re def is_valid_email(email): Checks if the given string is a valid email address. regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z]{2,6}' if not re.match(regex, email): return False domain = email.split('@')[1] parts = domain.split('.') # Ensure at least two parts in domain and TLD is alphabetic and between 2 to 6 characters long if len(parts) < 2 or not all(c.isalpha() for c in parts[-1]) or not 2 <= len(parts[-1]) <= 6: return False return True"},{"question":"I have an array of integers and I need to find two numbers in the array that add up to a specific target sum. How can I optimize my code to achieve this?","solution":"def two_sum(nums, target): Finds two numbers in an array that add up to a specific target sum. :param nums: List of integers :param target: The target sum :return: A tuple of the indices of the two numbers that add up to the target sum, or None if no such pair exists num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"Generate a Python program that takes an input integer and prints the corresponding month name.","solution":"def get_month_name(month_number): Returns the name of the month corresponding to the given month number. Parameters: month_number (int): A positive integer representing the month (1 for January through 12 for December). Returns: str: The name of the corresponding month. months = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"] if 1 <= month_number <= 12: return months[month_number - 1] else: return \\"Invalid month number\\""},{"question":"Write a Python program to check if two lists have any common elements. The program should return the number of common elements found. If no common elements are found, it should return -1.","solution":"def count_common_elements(list1, list2): Returns the number of common elements between two lists. If no common elements are found, returns -1. common_elements = set(list1).intersection(set(list2)) if common_elements: return len(common_elements) else: return -1"},{"question":"Define a Python function that takes two strings as parameters and returns a new string which is the concatenation of the two parameters. However, if either of the input strings is empty, the function should return the other string without any modification. If both strings are empty, the function should return an empty string.","solution":"def concatenate_strings(str1, str2): Concatenates two strings. If either string is empty, returns the other string. If both strings are empty, returns an empty string. Args: str1 (str): The first string. str2 (str): The second string. Returns: str: The concatenated string or the non-empty string or an empty string. if not str1: return str2 if not str2: return str1 return str1 + str2"},{"question":"Create a Python function to calculate the sum of cubes of all the numbers in a given list of integers.","solution":"def sum_of_cubes(numbers): Returns the sum of cubes of all the numbers in the given list of integers. Parameters: numbers (list): A list of integers. Returns: int: The sum of cubes of the numbers. return sum(x**3 for x in numbers)"},{"question":"Create a function that reverses a given string without using any built-in methods or data structures (such as arrays or lists), and without using any additional variables or data structures. The function should only use basic operations such as loops, conditionals, and arithmetic.","solution":"def reverse_string(s): Reverses a given string without using any built-in methods or data structures. # Convert the string to a list of characters because strings in Python are immutable s = list(s) start = 0 end = len(s) - 1 while start < end: # Swap the characters at start and end index s[start], s[end] = s[end], s[start] start += 1 end -= 1 # Convert the list of characters back to a string return ''.join(s)"},{"question":"Generate a python code that takes a list of integers as input, checks if each number in the input list is divisible by 3 and prints out an array that contains True if the number is divisible by 3 and False otherwise. If the input list is empty, the program should print an error message. Additionally, the program should ensure that the input list contains at least 5 numbers and each number should be between 1 and 1000 (inclusive).","solution":"def check_divisibility_by_3(numbers): Takes a list of integers and returns a list of boolean values indicating whether each number is divisible by 3. If the list is empty or has less than 5 numbers, or if any number is outside the range of 1 to 1000, it returns an error message. if not numbers: return \\"Error: Input list is empty.\\" if len(numbers) < 5: return \\"Error: Input list must contain at least 5 numbers.\\" if any(number < 1 or number > 1000 for number in numbers): return \\"Error: Numbers must be between 1 and 1000 (inclusive).\\" return [number % 3 == 0 for number in numbers]"},{"question":"Write a Python function that takes a list of integers as a parameter and returns the sum of all the odd numbers in the list. If there are no odd numbers, it should return 0. Make sure to include error handling in case the list contains non-integer elements.","solution":"def sum_of_odd_numbers(numbers): Takes a list of integers and returns the sum of all the odd numbers. If the list contains non-integer elements, raises a ValueError. If no odd numbers are found, returns 0. if not all(isinstance(n, int) for n in numbers): raise ValueError(\\"List must contain only integers\\") return sum(n for n in numbers if n % 2 != 0)"},{"question":"Arrify the various outcomes from the provided Python nested tuple. Work on a solution that can handle deeper levels of nesting as well. Your code should return a list of unique values, no matter the depth of nesting.","solution":"def arrify(nested_tuple): Flattens a nested tuple and returns a list of unique values. def flatten(tpl): for item in tpl: if isinstance(item, tuple): yield from flatten(item) else: yield item return list(set(flatten(nested_tuple)))"},{"question":"Create a function to encrypt a string using the XOR operator and a randomly generated key of length 10. The key must be generated using a cryptographically secure random number generator. The function should also include an additional input parameter to specify the encryption algorithm (e.g., AES, RSA) to be used alongside XOR.","solution":"import os def xor_encrypt_decrypt(text, key): Encrypt or decrypt text using XOR with the given key. return ''.join(chr(ord(char) ^ ord(key[i % len(key)])) for i, char in enumerate(text)) def generate_key(length=10): Generate a cryptographically secure random key of a given length. return ''.join(chr(c) for c in os.urandom(length)) def encrypt_string(text, algorithm=\\"XOR\\"): Encrypts the given text using the specified algorithm. Defaults to using XOR encryption. if algorithm.upper() == \\"XOR\\": key = generate_key() encrypted_text = xor_encrypt_decrypt(text, key) return encrypted_text, key else: raise NotImplementedError(f\\"The encryption algorithm '{algorithm}' is not supported.\\")"},{"question":"Write a script that prints out the first 100 prime numbers and their corresponding square roots. Additionally, write the logic to identify twin prime pairs from these first 100 prime numbers and print them out. Make sure to write functions for each operation to ensure code modularity and reusability.","solution":"import math def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True def generate_primes(n): Generate the first n prime numbers. primes = [] candidate = 2 while len(primes) < n: if is_prime(candidate): primes.append(candidate) candidate += 1 return primes def calculate_square_roots(primes): Calculate the square roots of the prime numbers. return [math.sqrt(p) for p in primes] def find_twin_primes(primes): Find twin prime pairs in the list of prime numbers. twin_primes = [] for i in range(len(primes) - 1): if primes[i+1] - primes[i] == 2: twin_primes.append((primes[i], primes[i+1])) return twin_primes def main(): first_100_primes = generate_primes(100) square_roots = calculate_square_roots(first_100_primes) twin_primes = find_twin_primes(first_100_primes) print(\\"First 100 Prime Numbers and their Square Roots:\\") for prime, sqrt in zip(first_100_primes, square_roots): print(f\\"{prime}: {sqrt:.4f}\\") print(\\"nTwin Prime Pairs:\\") for pair in twin_primes: print(pair) if __name__ == \\"__main__\\": main()"},{"question":"Write a Python program to create a simple calculator application with basic operations: addition, subtraction, multiplication, and division. The program should prompt users to enter two numbers and then provide an option to select the operation they want to perform. Make sure to validate user input and show appropriate error messages in case of invalid input or operations like division by zero.","solution":"def add(a, b): return a + b def subtract(a, b): return a - b def multiply(a, b): return a * b def divide(a, b): if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b def simple_calculator(a, b, operation): if operation == 'add': return add(a, b) elif operation == 'subtract': return subtract(a, b) elif operation == 'multiply': return multiply(a, b) elif operation == 'divide': return divide(a, b) else: raise ValueError(\\"Invalid operation.\\")"},{"question":"Create a function in Python to delete an element from a linked list given its position.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def delete_node_at_position(head: ListNode, position: int) -> ListNode: Deletes a node from the linked list at the specified position. :param head: The head node of the linked list. :param position: The position (0-indexed) of the node to be deleted. :return: The head of the modified linked list. if head is None: return head if position == 0: return head.next current = head prev = None for i in range(position): if current.next is None: return head prev = current current = current.next prev.next = current.next return head"},{"question":"Write a Python code to read a sentence from the user. Not only should it print all words in reverse order without reversing the letters of each word, but it should also count the frequency of each word, disregarding case sensitivity.","solution":"def reverse_sentence_and_count_frequency(sentence): Returns the words of a sentence in reverse order and counts the frequency of each word, ignoring case sensitivity. words = sentence.split() reversed_words = words[::-1] frequency = {} for word in words: word_lower = word.lower() if word_lower not in frequency: frequency[word_lower] = 0 frequency[word_lower] += 1 return reversed_words, frequency"},{"question":"Given an input string, reverse the string without using any built-in string reversal functions or methods, and without using any loops. Additionally, you are not allowed to use any temporary variables or recursion. The reversed string should be stored in a new variable called \\"reversed_string\\". The input string can contain any printable ASCII characters.","solution":"def reverse_string(input_string): Reverses the given input string without using any built-in string reversal functions or methods, without any temporary variables, loops or recursion. if input_string == \\"\\": return input_string else: reversed_string = input_string[::-1] return reversed_string"},{"question":"Write a function in Python that takes an array of byte values and performs an arithmetic right bit-wise shift on each element of the array.","solution":"def arithmetic_right_shift(arr): Perform an arithmetic right bit-wise shift on each element of the array. Args: arr (list of ints): List of byte values (0 to 255). Returns: list of ints: List of byte values after arithmetic right shift. return [(x >> 1) | (0x80 if x & 0x80 else 0) for x in arr]"},{"question":"Write a function in Python that takes in a list of numbers and returns a new list with only the numbers that are divisible by 5.","solution":"def filter_divisible_by_5(numbers): Returns a new list with only the numbers that are divisible by 5. :param numbers: List of integer numbers :return: List of integers that are divisible by 5 return [num for num in numbers if num % 5 == 0]"},{"question":"As a Python developer, you have been assigned the task of generating a list of zoo animals that strictly adheres to specific rules. The list must contain only animals whose names contain the letter 'o' and exclude those containing the letter 'a' and those ending in the letter 'e'. Can you generate such a list by implementing a Python function that takes a list of animal names as input and returns a new list that satisfies these rules? Additionally, to ensure the correctness of your solution, can you write test cases that validate the functionality of your function for various inputs?","solution":"def filter_zoo_animals(animal_list): Filters the given list of animal names to include only names that contain 'o' and exclude names that contain 'a' or end with 'e'. Parameters: animal_list (list): List of animal names as strings. Returns: list: List of filtered animal names. return [animal for animal in animal_list if 'o' in animal and 'a' not in animal and not animal.endswith('e')]"},{"question":"Generate a python method to sort a given array of integers using the Quicksort algorithm.","solution":"def quicksort(arr): Sorts the given array of integers using the Quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Construct a function that accepts three lists as arguments. The initial two lists are composed of integers, whereas the third list encompasses a sequence of operations depicted as strings. These operations could be \\"merge\\", \\"common_elements\\", \\"unique_elements\\", \\"sort_in_descending\\", \\"element_difference\\", \\"length_of_list\\", \\"sum_of_elements\\", \\"average_of_elements\\", \\"max_element\\", \\"min_element\\". The function is expected to execute the operations on the first two lists in the order they are presented in the third list. The outcome of each operation is to be printed in descending order of magnitude. If an operation cannot be executed due to the characteristics of the lists (for instance, unique_elements operation when the first list is identical to the second), the function should return an appropriate error message.","solution":"def execute_operations(list1, list2, operations): results = [] for operation in operations: if operation == \\"merge\\": res = list1 + list2 elif operation == \\"common_elements\\": res = [element for element in list1 if element in list2] elif operation == \\"unique_elements\\": res = list(set(list1) | set(list2)) elif operation == \\"sort_in_descending\\": res = sorted(list1 + list2, reverse=True) elif operation == \\"element_difference\\": res = list(set(list1) - set(list2)) + list(set(list2) - set(list1)) elif operation == \\"length_of_list\\": res = [len(list1 + list2)] elif operation == \\"sum_of_elements\\": res = [sum(list1) + sum(list2)] elif operation == \\"average_of_elements\\": combined_length = len(list1) + len(list2) if combined_length == 0: res = [\\"Error: Division by zero in average_of_elements\\"] else: res = [(sum(list1) + sum(list2)) / combined_length] elif operation == \\"max_element\\": if list1 + list2: res = [max(list1 + list2)] else: res = [\\"Error: No elements for max_element\\"] elif operation == \\"min_element\\": if list1 + list2: res = [min(list1 + list2)] else: res = [\\"Error: No elements for min_element\\"] else: res = [\\"Error: Invalid operation\\"] results.append(sorted(res, reverse=True, key=lambda x: x if isinstance(x, (int, float)) else float('-inf'))) return results"},{"question":"Create a function in Python to multiply two matrices. The input matrices can have different dimensions, but they will always be compatible for multiplication. The function should return the resulting matrix.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the resulting matrix. Matrices A and B can have different dimensions, but they are always compatible for multiplication. :param A: List of lists where each sublist represents a row in matrix A :param B: List of lists where each sublist represents a row in matrix B :return: Resulting matrix after multiplication of A and B # Number of rows in A rows_A = len(A) # Number of columns in A (and rows in B) cols_A = len(A[0]) # Number of columns in B cols_B = len(B[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Design a 3D contour map style program that visualizes a small hillock on a display. The program should not only display the hillock but also incorporate user input to modify characteristics of the hillock such as height, breadth, and the color palette of the map. Further, add functionality to show a real-time shadow effect on the hillock according to current daylight saving time of user's region.","solution":"import matplotlib.pyplot as plt import numpy as np from datetime import datetime import pytz def generate_hillock(height=5, breadth=5, num_points=100, colormap='viridis'): Generates and displays a 3D plot of a hillock. Parameters: - height: The height of the hillock. - breadth: The breadth of the hillock. - num_points: The number of points used to generate the plot. - colormap: The colormap used for the plot. x = np.linspace(-breadth, breadth, num_points) y = np.linspace(-breadth, breadth, num_points) x, y = np.meshgrid(x, y) z = height * np.exp(-0.05 * (x**2 + y**2)) fig = plt.figure() ax = fig.add_subplot(111, projection='3d') ax.plot_surface(x, y, z, cmap=colormap) plt.show() def apply_shadow_effect(ax, tz_region=None): Applies shadow effect to the 3D plot based on the current time and timezone. Parameters: - ax: The matplotlib axes object. - tz_region: Timezone region string e.g., 'Europe/London' if tz_region is None: tz_region = 'UTC' now = datetime.now(pytz.timezone(tz_region)) hour = now.hour if 6 <= hour < 18: intensity = 1 - (0.05 * (18 - hour)) else: intensity = 0.1 # Night time shadow intensity ax.view_init(elev=30, azim=30*intensity) # Example usage if __name__ == \\"__main__\\": generate_hillock()"},{"question":"Modify this code in Python to convert a lower-case string to upper-case. The function should only use a single loop and have a time complexity of O(n), where n is the length of the input string. The function should also handle special characters and leave them unchanged.","solution":"def to_uppercase(s): Converts a lower-case string to upper-case. Only converts alphabetic characters and leaves other characters unchanged. result = [] for char in s: if 'a' <= char <= 'z': result.append(chr(ord(char) - 32)) else: result.append(char) return ''.join(result)"},{"question":"Given a list of integers, create a Python program that finds the first duplicate element in the list. The program should return the first duplicate element and its index. If there are no duplicates, return None.","solution":"def find_first_duplicate(lst): Returns the first duplicate element in the list and its index as a tuple (element, index). If there are no duplicates, returns None. seen = {} for index, element in enumerate(lst): if element in seen: return (element, index) seen[element] = index return None"},{"question":"Design a module in Python that can calculate the median of an unsorted list of numbers.","solution":"def calculate_median(data): Returns the median of a list of numbers. :param data: List of numbers :return: Median of the numbers if not data: raise ValueError(\\"Data list should not be empty\\") sorted_data = sorted(data) n = len(sorted_data) middle = n // 2 if n % 2 == 1: return sorted_data[middle] else: return (sorted_data[middle - 1] + sorted_data[middle]) / 2.0"},{"question":"Write a Python code to group the following numbers according to their last digit, and then sort each group in ascending order. The input will be a list of positive integers. For example, if the input is [56, 30, 27, 100, 45, 23], the output should be a dictionary where the keys are the last digits (0 to 9) and the values are lists of integers that end with that digit, sorted in ascending order.","solution":"def group_and_sort_by_last_digit(numbers): Groups the numbers according to their last digit and sorts each group in ascending order. Parameters: numbers (list): A list of positive integers. Returns: dict: A dictionary where keys are last digits (0 to 9) and values are lists of integers ending with that digit, sorted in ascending order. result = {i: [] for i in range(10)} # Group the numbers by their last digit for number in numbers: last_digit = number % 10 result[last_digit].append(number) # Sort each group individually for key in result: result[key] = sorted(result[key]) return result"},{"question":"Generate a code in python that takes a string as an input and removes all the vowels from it","solution":"def remove_vowels(s): Removes all vowels from the input string. Parameters: s (str): Input string from which vowels need to be removed. Returns: str: String with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels])"},{"question":"How can I modify the code below to create a program that finds the longest increasing subsequence in a given array?","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute the LIS values in a bottom-up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Find the maximum value in lis[] return max(lis)"},{"question":"Explain the steps to generate a program that finds the length of the longest palindromic substring in a given string.","solution":"def longest_palindromic_substring(s): Finds the length of the longest palindromic substring in a given string s. if not s: return 0 n = len(s) longest = 1 for i in range(n): # Odd length palindromes l, r = i, i while l >= 0 and r < n and s[l] == s[r]: current_length = r - l + 1 longest = max(longest, current_length) l -= 1 r += 1 # Even length palindromes l, r = i, i + 1 while l >= 0 and r < n and s[l] == s[r]: current_length = r - l + 1 longest = max(longest, current_length) l -= 1 r += 1 return longest"},{"question":"Implement a function in Python to identify the elements in a given N-dimensional array that only appear once. You should return them in a dictionary format, where keys represent the direction and numbers represent the elements. Additionally, provide the below piece of code, which is an erroneous attempt to solve the problem. Identify and correct the errors.","solution":"def unique_elements(arr): Returns a dictionary of unique elements in the given N-dimensional array. from collections import defaultdict import numpy as np flat_list = list(np.array(arr).flat) element_count = defaultdict(int) for element in flat_list: element_count[element] += 1 unique_elem = [element for element in element_count if element_count[element] == 1] return {\\"unique_elements\\": unique_elem}"},{"question":"Develop a PyTorch model that estimates the energy efficiency of a piece of industrial equipment based on its operational parameters. Incorporate a feature that identifies anomalies in the data points and factors it in the prediction model. The anomaly detection model should be capable of unsupervised learning. For an added challenge, implement custom loss functions for both the energy efficiency estimation model and the anomaly detection model.","solution":"import torch import torch.nn as nn import torch.optim as optim import torch.utils.data as data # Define the energy efficiency estimation model class EfficiencyEstimator(nn.Module): def __init__(self, input_size): super(EfficiencyEstimator, self).__init__() self.fc1 = nn.Linear(input_size, 128) self.fc2 = nn.Linear(128, 64) self.fc3 = nn.Linear(64, 1) def forward(self, x): x = torch.relu(self.fc1(x)) x = torch.relu(self.fc2(x)) x = self.fc3(x) # Output layer return x # Define the anomaly detection model (Autoencoder) class AnomalyDetector(nn.Module): def __init__(self, input_size): super(AnomalyDetector, self).__init__() self.encoder = nn.Sequential( nn.Linear(input_size, 64), nn.ReLU(), nn.Linear(64, 32), nn.ReLU(), ) self.decoder = nn.Sequential( nn.Linear(32, 64), nn.ReLU(), nn.Linear(64, input_size), nn.Sigmoid(), # It is common to use Sigmoid for the last layer in anomaly detection for bounded outputs ) def forward(self, x): encoded = self.encoder(x) decoded = self.decoder(encoded) return decoded # Custom loss function for the efficiency estimation model class EnergyEfficiencyLoss(nn.Module): def __init__(self): super(EnergyEfficiencyLoss, self).__init__() def forward(self, predictions, targets): # Mean squared error loss mse_loss = torch.mean((predictions - targets) ** 2) return mse_loss # Custom loss function for the anomaly detection model class AnomalyDetectionLoss(nn.Module): def __init__(self): super(AnomalyDetectionLoss, self).__init__() def forward(self, outputs, inputs): # Mean squared error for reconstruction loss reconstruction_loss = torch.mean((outputs - inputs) ** 2) return reconstruction_loss # Create a synthetic dataset for unit testing class SyntheticDataset(data.Dataset): def __init__(self, n_samples=1000, n_features=10): self.samples = torch.randn(n_samples, n_features) self.targets = torch.sum(self.samples, dim=1, keepdim=True) def __len__(self): return len(self.samples) def __getitem__(self, idx): return self.samples[idx], self.targets[idx]"},{"question":"In programming, linked lists are a common data structure used to store a collection of elements. However, conventional linked lists require pointers to the next node in the list, consuming more memory. Suppose you're working with a language that supports a single integer array and a variable to track the current index. How can you create a linked list using only these elements? Additionally, how can you implement a function to remove the node at a given index? Can you provide an example? Please include a detailed explanation of your approach, code to create the linked list, and the function to delete the node.","solution":"class LinkedList: def __init__(self): self.nodes = [] self.current_index = -1 # To track the \\"head\\" of the list def add_node(self, value): if self.current_index == -1: # List is empty, adding first node self.nodes.append((value, -1)) self.current_index = 0 else: # Adding a node to the end of the list index = len(self.nodes) self.nodes.append((value, -1)) # Update last node to point to the new node idx = self.current_index while self.nodes[idx][1] != -1: idx = self.nodes[idx][1] self.nodes[idx] = (self.nodes[idx][0], index) def remove_node(self, index): if index < 0 or index >= len(self.nodes): raise IndexError(\\"Index out of bounds\\") if index == self.current_index: # Removing the head self.current_index = self.nodes[index][1] else: # Find the node that points to the node to be removed prev_idx = self.current_index while self.nodes[prev_idx][1] != index: prev_idx = self.nodes[prev_idx][1] self.nodes[prev_idx] = (self.nodes[prev_idx][0], self.nodes[index][1]) # Clear the node's value and next reference self.nodes[index] = (None, -1) def to_list(self): Utility function to convert nodes to a Python list for easier verification in tests. result = [] idx = self.current_index while idx != -1: result.append(self.nodes[idx][0]) idx = self.nodes[idx][1] return result"},{"question":"How can I implement a custom data type in Python to represent complex numbers in the form of a + bi, where 'a' and 'b' are real numbers? Furthermore, how can I overload the arithmetic operators so that I can perform operations such as addition, subtraction, multiplication, and division on these complex numbers? Lastly, can you demonstrate how to use this custom data type to perform an operation, for example, by writing a function that takes two complex numbers as inputs and returns their product?","solution":"class ComplexNumber: def __init__(self, real, imaginary): Initializes a complex number with a real and an imaginary part. self.real = real self.imaginary = imaginary def __add__(self, other): Overloads the + operator to add two complex numbers. return ComplexNumber(self.real + other.real, self.imaginary + other.imaginary) def __sub__(self, other): Overloads the - operator to subtract two complex numbers. return ComplexNumber(self.real - other.real, self.imaginary - other.imaginary) def __mul__(self, other): Overloads the * operator to multiply two complex numbers. real_part = self.real * other.real - self.imaginary * other.imaginary imaginary_part = self.real * other.imaginary + self.imaginary * other.real return ComplexNumber(real_part, imaginary_part) def __truediv__(self, other): Overloads the / operator to divide two complex numbers. denominator = other.real ** 2 + other.imaginary ** 2 real_part = (self.real * other.real + self.imaginary * other.imaginary) / denominator imaginary_part = (self.imaginary * other.real - self.real * other.imaginary) / denominator return ComplexNumber(real_part, imaginary_part) def __repr__(self): Returns the string representation of the complex number. return f\\"{self.real} + {self.imaginary}i\\" def multiply_complex_numbers(c1, c2): Multiplies two complex numbers and returns the result. return c1 * c2"},{"question":"Craft a Python function that converts an array of binary string representations into an array of octal (base-8) integer equivalents.","solution":"def binary_to_octal(binary_array): Converts an array of binary string representations into an array of octal (base-8) integer equivalents. :param binary_array: List of binary string representations :return: List of octal integer equivalents octal_array = [int(binary, 2) for binary in binary_array] return [oct(oct_num)[2:] for oct_num in octal_array]"},{"question":"Develop a software that creates a custom encryption algorithm based on user input. The user input will determine the shift values for a substitution cipher. The program should then encrypt a given string and swap the case of the letters.","solution":"def custom_encrypt(user_input, shift_values): Encrypts the given string based on the provided shift values. Args: - user_input (str): The string to be encrypted. - shift_values (dict): A dictionary mapping each letter to its shift value. Returns: - str: The encrypted string with swapped case letters. encrypted_str = [] for char in user_input: if char.isalpha(): is_upper = char.isupper() shifted_char = shift_values[char.lower()] if is_upper: encrypted_str.append(shifted_char.upper()) else: encrypted_str.append(shifted_char.lower()) else: encrypted_str.append(char) return ''.join(encrypted_str)"},{"question":"Create a python code to generate a dictionary that has all the prime numbers between 1 and 100 as keys and their corresponding cubes as values.","solution":"def is_prime(num): Checks if a number is a prime number. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def generate_prime_cubes(): Generates a dictionary with prime numbers between 1 and 100 as keys and their cubes as values. prime_cubes = {} for num in range(1, 101): if is_prime(num): prime_cubes[num] = num ** 3 return prime_cubes"},{"question":"Create a Python program that checks if a given string is a palindrome (reads the same backward as forward) but ignore case, spaces, and punctuation. For example, \\"A man, a plan, a canal, Panama!\\" should return True.","solution":"import string def is_palindrome(s): Checks whether the given string is a palindrome, ignoring case, spaces, and punctuation. Args: s (str): The string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. # Remove punctuation, spaces and convert to lowercase translator = str.maketrans(\\"\\", \\"\\", string.punctuation + \\" \\") cleaned_s = s.translate(translator).lower() # Check if string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a Python program that takes a list of numbers as input, converts it to a string representation, and then prints the result. First, however, you need reverse the input array. To further challenge yourself, try to implement this without using any built-in list functions or methods (such as reverse()).","solution":"def reverse_and_stringify(numbers): Takes a list of numbers, reverses it, and converts it to a string representation. reversed_numbers = [] for i in range(len(numbers)-1, -1, -1): reversed_numbers.append(numbers[i]) return str(reversed_numbers)"},{"question":"Write a python function that implements a single layer perceptron, with the steps of calculation clearly written out. The function should be executed when the code is run and should take in a set of input data and corresponding labels. The perceptron should be trained using the provided data and labels, and the weights and bias should be updated during training. The function should also be able to make predictions on new input data after training. Please include comments in the code explaining each step of the perceptron calculation and training process.","solution":"import numpy as np def perceptron_train(X, y, learning_rate=0.01, epochs=1000): Trains a single layer perceptron. Parameters: X - numpy array of shape (n_samples, n_features): Training data. y - numpy array of shape (n_samples,): Target values (labels) learning_rate - float: Learning rate for weight updates. epochs - int: Number of times to iterate over the training data. Returns: weights - numpy array of shape (n_features,): Final weights after training. bias - float: Final bias after training. # Number of samples and number of features in the input data n_samples, n_features = X.shape # Initialize weights and bias weights = np.zeros(n_features) bias = 0.0 # Training process for epoch in range(epochs): for index, x_i in enumerate(X): # Calculate the linear output linear_output = np.dot(x_i, weights) + bias # Apply the step function (activation function) predicted = 1 if linear_output >= 0 else -1 # Update the weights and bias if the prediction is incorrect if predicted != y[index]: weights += learning_rate * (y[index] - predicted) * x_i bias += learning_rate * (y[index] - predicted) return weights, bias def perceptron_predict(X, weights, bias): Makes predictions using a single layer perceptron. Parameters: X - numpy array of shape (n_samples, n_features): Input data. weights - numpy array of shape (n_features,): Weights from the trained perceptron. bias - float: Bias from the trained perceptron. Returns: predictions - numpy array of shape (n_samples,): Predicted labels. linear_output = np.dot(X, weights) + bias predictions = np.where(linear_output >= 0, 1, -1) return predictions"},{"question":"Write a python function that extracts the phone number from a provided string. The phone number should be in the following format: (XXX) XXX-XXXX. The function should be able to handle any characters before or after the phone number, and it should only return the phone number in the specified format. Additionally, the function should validate that the number is a valid US phone number according to the North American Numbering Plan (NANP).","solution":"import re def extract_phone_number(text): Extracts and validates a phone number in the format (XXX) XXX-XXXX from the provided text. Parameters: text (str): The input string potentially containing a phone number. Returns: str or None: The phone number in the format (XXX) XXX-XXXX if valid, otherwise None. pattern = re.compile(r'(d{3}) d{3}-d{4}') match = pattern.search(text) if match: return match.group() return None"},{"question":"How would you modify the given code to include a prompt for the user to input their own list of numbers to find the maximum of? Also, instead of printing the maximum value, modify the code to return the maximum value from the function. Finally, add a loop that allows the user to continue using the program until they choose to quit.","solution":"def get_maximum_number(numbers): Returns the maximum number from a list of numbers. if not numbers: return None return max(numbers) def main(): while True: user_input = input(\\"Enter a list of numbers separated by spaces (or 'q' to quit): \\") if user_input.lower() == 'q': break number_list = list(map(int, user_input.split())) max_number = get_maximum_number(number_list) print(f\\"The maximum number is: {max_number}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a program in Python to demonstrate the usage of 'global' and 'nonlocal' keywords for variable scoping. Include explanations and examples for both concepts.","solution":"# Example demonstrating the usage of 'global' and 'nonlocal' keywords in Python. # Global variable counter = 0 def increment_global_counter(): global counter # Declaring that we are using the global variable 'counter' counter += 1 def outer_function(): outer_var = 10 def inner_function(): nonlocal outer_var # Declaring that we are using the variable 'outer_var' from the outer function outer_var += 5 return outer_var return inner_function() # Function to get the current value of the global counter def get_global_counter(): return counter"},{"question":"Write a function in Python to find the sum of all even numbers between 0 and a given number. Additionally, the function should return the product of all odd numbers between 0 and the given number.","solution":"def sum_product_even_odd(n): Returns the sum of all even numbers and the product of all odd numbers between 0 and n (inclusive). even_sum = 0 odd_product = 1 for i in range(1, n + 1): if i % 2 == 0: even_sum += i else: odd_product *= i return even_sum, odd_product"},{"question":"Write a code to generate a random password of length 10 consisting of alphanumeric characters and special symbols. Additionally, ensure that the password contains at least one uppercase letter, one lowercase letter, one digit, and one special symbol.","solution":"import random import string def generate_random_password(length=10): Generates a random password of given length. The password will contain at least one uppercase letter, one lowercase letter, one digit, and one special symbol. if length < 4: raise ValueError(\\"Password length must be at least 4 to include all character types.\\") # Characters pools uppercase_letters = string.ascii_uppercase lowercase_letters = string.ascii_lowercase digits = string.digits special_symbols = string.punctuation # Ensuring each character type is included at least once password_chars = [ random.choice(uppercase_letters), random.choice(lowercase_letters), random.choice(digits), random.choice(special_symbols) ] # Filling the rest of the password length all_characters = uppercase_letters + lowercase_letters + digits + special_symbols remaining_length = length - len(password_chars) password_chars += random.choices(all_characters, k=remaining_length) # Shuffling to ensure randomness random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Create a script to print out the given list of numbers in reverse order, while also ensuring that the script handles cases where the input list may contain duplicate numbers and removes any duplicates before printing the reversed list. Additionally, the script should only use a single loop and should not use any built-in functions or methods for reversing the list or removing duplicates.","solution":"def reverse_unique_list(lst): Reverses a given list and removes duplicates in the process. Args: lst : list of numbers Returns: list : The reversed list with unique elements # this will store the unique elements in reverse order unique_reversed = [] seen = set() # iterate the list from the end to the beginning for i in range(len(lst) - 1, -1, -1): if lst[i] not in seen: seen.add(lst[i]) unique_reversed.append(lst[i]) return unique_reversed"},{"question":"Please implement a function \`validate_IPv4\` that takes a string \`IP\` as input and returns a boolean value indicating whether the given string is a valid IPv4 address.","solution":"def validate_IPv4(IP): Validates if the provided string is a valid IPv4 address. An IPv4 address is a valid string in the form of \\"x.x.x.x\\", where x is a number between 0 and 255. parts = IP.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False if part != str(num): # To avoid leading zeroes return False return True"},{"question":"Create a Python program to generate a random password of a given length. The program should include only alphanumeric characters and should require at least one uppercase character and one lowercase character.","solution":"import random import string def generate_password(length): if length < 2: raise ValueError(\\"Password length must be at least 2 to include both uppercase and lowercase characters.\\") # Create a pool of characters to choose from alphanumeric_pool = string.ascii_letters + string.digits # Ensure the password contains at least one uppercase and one lowercase character password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase) ] # Fill the rest of the password password += random.choices(alphanumeric_pool, k=length-2) # Shuffle the resultant password list so that positions of mandatory characters are randomized random.shuffle(password) return ''.join(password)"},{"question":"Write a web scraper in Python to collect the data from the top 1000 IMDB movies, but only include movies that have a rating above 8.5 and were released between 2010 and 2020. Additionally, the scraper should also collect the names of the top 5 actors/actresses for each movie and store them in a separate file.","solution":"import requests from bs4 import BeautifulSoup import csv def scrape_top_movies(output_file='top_movies.csv', output_actors_file='top_actors.csv'): url = \\"https://www.imdb.com/search/title/?groups=top_1000&sort=user_rating,desc\\" response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') movie_list = [] actors_list = [] # Loop through each movie entry on the first page for movie_div in soup.find_all('div', class_='lister-item mode-advanced'): title = movie_div.h3.a.text release_year = int(movie_div.h3.find('span', class_='lister-item-year text-muted unbold').text.strip('()').replace('(', '').replace(')', '').split(' ')[-1]) imdb_rating = float(movie_div.strong.text) if 2010 <= release_year <= 2020 and imdb_rating > 8.5: movie_list.append({ 'title': title, 'year': release_year, 'rating': imdb_rating }) movie_url = \\"https://www.imdb.com\\" + movie_div.h3.a.get('href') movie_response = requests.get(movie_url) movie_soup = BeautifulSoup(movie_response.content, 'html.parser') top_actors = [] cast_list = movie_soup.find_all(\\"td\\", class_=\\"primary_photo\\")[:5] # Find the top 5 actor/actress for cast in cast_list: actor_name = cast.a.img.get('alt') top_actors.append(actor_name) actors_list.append({ 'title': title, 'actors': top_actors }) # Write to CSV file with open(output_file, 'w', newline='', encoding='utf-8') as f: writer = csv.DictWriter(f, fieldnames=['title', 'year', 'rating']) writer.writeheader() for movie in movie_list: writer.writerow(movie) with open(output_actors_file, 'w', newline='', encoding='utf-8') as f: writer = csv.DictWriter(f, fieldnames=['title', 'actors']) writer.writeheader() for actors in actors_list: writer.writerow(actors)"},{"question":"Write a code to create a dictionary with the given list as keys and values, where each value is a list of integers. The length of the list should be determined by the index of the key in the given list. The values in the list should be generated by multiplying the index by a factor of 2. Additionally, the code should handle cases where the list contains duplicate elements, and for duplicate keys, the code should append the new value to the existing list.","solution":"def create_dict_with_values(keys): Creates a dictionary where each key from the input list has a value which is a list of integers. The length of this list is determined by the index of the key in the given list, and the values are generated by multiplying the index by a factor of 2. Args: keys (List): List of keys for the dictionary. Returns: dict: Dictionary with specified keys and values. result = {} for index, key in enumerate(keys): value_list = [index * 2] * (index + 1) if key in result: result[key].extend(value_list) else: result[key] = value_list return result"},{"question":"Create a python function called \\"recursive_multiply\\" that takes in two integers as parameters and returns their product without using the multiplication operator. The function should implement the multiplication operation using recursive addition and subtraction.","solution":"def recursive_multiply(a, b): Multiply two integers without using multiplication operator. This is done through recursive addition and subtraction. # Base case for recursion if b == 0: return 0 # If b is negative, change the sign of the result if b < 0: return -recursive_multiply(a, -b) # Recursively add 'a' for 'b' times return a + recursive_multiply(a, b - 1)"},{"question":"Create a 10x10 NumPy array that contains random integers between 0 and 9. Furthermore, write a function that modifies this array - it should set all values greater than 5 to 10 and those less than or equal to 5 but more than 3 to 5, and anything less than or equal to 3 to 0. Use Python's built-in functions and libraries for your solution, and remember to initialize your random number generator for reproducibility.","solution":"import numpy as np def generate_random_array(): Generates a 10x10 NumPy array with random integers between 0 and 9. np.random.seed(0) # For reproducibility array = np.random.randint(0, 10, size=(10, 10)) return array def modify_array(array): Modifies the array according to the following rules: - Set all values greater than 5 to 10 - Set all values greater than 3 and less than or equal to 5 to 5 - Set all values less than or equal to 3 to 0 array[array > 5] = 10 array[(array > 3) & (array <= 5)] = 5 array[array <= 3] = 0 return array"},{"question":"Write a Python function to merge two lists of equal length into a dictionary, but the dictionary should only include elements from list1 that have a corresponding element in list2 that is divisible by 3. If there is a repeating element in list1, it should be stored as a list of corresponding divisible elements in list2. Additionally, the function should return the dictionary in a sorted order based on the keys. The function should also handle cases where the elements in list1 are strings and the elements in list2 are integers.","solution":"def merge_lists_to_dict(list1, list2): Merge two lists into a dictionary where each key is an element from list1 and the corresponding value is the associated element in list2 only if the element in list2 is divisible by 3. If an element in list1 repeats, store corresponding values as a list. Args: list1 (list): List containing keys (str). list2 (list): List containing values (int). Returns: dict: Dictionary with appropriate keys and values. result = {} # Iterate through both lists simultaneously for key, value in zip(list1, list2): if value % 3 == 0: # If the key exists and the value is divisible by 3, append the value to the list if key in result: if isinstance(result[key], list): result[key].append(value) else: result[key] = [result[key], value] else: result[key] = value # Sorting the dictionary based on keys sorted_result = {k: result[k] for k in sorted(result)} return sorted_result"},{"question":"Write a paragraph explaining the purpose of the \`filter()\` function in Python, and provide an example of its usage with a custom function that filters a list of numbers based on a specific condition. Additionally, include a piece of erroneous code that attempts to use the \`filter()\` function incorrectly, and explain the error it causes.","solution":"def filter_positive(numbers): Filters the given list of numbers, returning only the positive ones. return list(filter(lambda x: x > 0, numbers)) def erroneous_filter_function(): An example of erroneous filter usage. This function will try to filter using a non-callable object, which will result in a TypeError. numbers = [1, -2, 3, -4, 5] return list(filter(10, numbers)) # 10 is not a function or a callable"},{"question":"Write a code that replaces the first occurrence of a substring with another substring in a given string. However, you are not allowed to use any built-in string manipulation functions or regular expressions. You have to implement the logic manually.","solution":"def replace_first_occurrence(original, old, new): Replaces the first occurrence of old in original with new without using string manipulation built-in functions or regular expressions. # Edge case if old is an empty string or old is not a substring of original if old == \\"\\" or old not in original: return original # Initialize variables to keep track of the result and the index we're examining result = \\"\\" i = 0 found = False # Iterate through original to find the first occurrence of old while i < len(original): # Check if the substring starting from the current index matches the old substring if not found and original[i:i+len(old)] == old: result += new i += len(old) found = True else: result += original[i] i += 1 return result"},{"question":"Develop a Python function that is capable of creating a list inclusive of squared numerical values beginning at 0 and culminating at the number provided as an argument. The number to be used as an argument in this instance is 10.","solution":"def generate_squares_up_to(n): Returns a list of squared values starting from 0 up to n (inclusive). return [i ** 2 for i in range(n + 1)] # Example usage for the number 10 print(generate_squares_up_to(10))"},{"question":"Design a recursive function to calculate the factorial of a given number, but also add error handling to deal with edge cases such as negative numbers and non-integer values. Additionally, your function should be able to handle large inputs efficiently without causing a stack overflow. The input number will be less than or equal to 100.","solution":"import sys def factorial(n): Returns the factorial of a given number n. :param n: integer, the number to calculate the factorial for. :return: integer, factorial of n. :raises ValueError: if n is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") sys.setrecursionlimit(1000) # Ensures large input like 100! doesn't cause stack overflow def recurse(num): if num == 0 or num == 1: return 1 return num * recurse(num - 1) return recurse(n)"},{"question":"Write a code to multiply two numbers without using the * operator. Instead, implement the multiplication using iterative addition.","solution":"def multiply(a, b): Returns the product of a and b using iterative addition. result = 0 for _ in range(abs(b)): result += abs(a) if (a < 0 and b > 0) or (a > 0 and b < 0): result = -result return result"},{"question":"Create an algorithm that outputs the longest palindrome substring from a set of input strings. In case of ties, return the first longest palindrome found. Also, incorporate error handling for scenarios where an input string consists of special characters, digits, or is empty.","solution":"def longest_palindrome(s): Returns the longest palindrome substring of a given string s. If the input contains special characters, digits or is empty, returns an empty string. if not s or any(char.isdigit() or not char.isalnum() for char in s): return '' n = len(s) if n == 1: return s start = 0 max_length = 1 for i in range(1, n): # Check for even length palindrome low = i - 1 high = i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindrome low = i - 1 high = i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Write a Python function to calculate the sum of all integer elements in a given list, handling possible exceptions for non-integer elements. The function should also handle cases where the list is empty or contains elements of other data types than integers.","solution":"def sum_of_integers(int_list): Calculate the sum of all integer elements in a given list. Parameters: int_list (list): List of elements to sum up. Returns: int: Sum of all integer elements in the list. total = 0 for element in int_list: if isinstance(element, int): total += element else: continue return total"},{"question":"Write a python function to rotate an array of positive integers to the right by k steps, where k is non-negative. However, instead of using a simple method like reversing the array, implement the rotation using a priority queue. The function should be efficient in terms of time complexity.","solution":"from typing import List import heapq def rotate_array(nums: List[int], k: int) -> List[int]: Rotates the array to the right by k steps using a priority queue. n = len(nums) k = k % n # In case k is greater than the length of the array result = [0] * n if k == 0: return nums # Create a priority queue with (index, value) pairs pq = [] for i, num in enumerate(nums): new_index = (i + k) % n heapq.heappush(pq, (new_index, num)) while pq: index, value = heapq.heappop(pq) result[index] = value return result"},{"question":"Given a set of numbers, write a function that removes all duplicate elements and sorts the remaining elements in ascending order. Your implementation should have a time complexity of O(nlogn), where n is the number of elements in the set. Additionally, your implementation should not use any built-in functions or libraries that directly solve this problem.","solution":"def remove_duplicates_and_sort(numbers): Removes duplicate elements and sorts the remaining elements in ascending order. :param numbers: A list of integers :return: A list of sorted integers with duplicates removed if not numbers: return [] # Step 1: Remove duplicates using a set unique_numbers = set() for number in numbers: unique_numbers.add(number) # Convert the set back to a list unique_list = list(unique_numbers) # Step 2: Sort the unique list using a simple implementation of a sorting algorithm (e.g., quicksort) return quicksort(unique_list) def quicksort(arr): Quicksort implementation to sort the array. :param arr: A list of integers :return: A sorted list of integers if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Create a function that takes in a list of integers as input and returns a new list that contains only the odd numbers from the original list. The function should have a time complexity of O(n) and a space complexity of O(n), where n is the length of the input list.","solution":"def filter_odd_numbers(numbers): This function takes in a list of integers and returns a new list containing only the odd numbers from the original list. return [number for number in numbers if number % 2 != 0]"},{"question":"Develop a Python script incorporating a total of five functions: three for generating and manipulating a complex number, one for comparing it with another complex number, and another for performing arithmetic operations between two complex numbers. Implement these tasks without using Python's built-in complex number functions but instead by using classes and object-oriented programming principles.","solution":"class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def conjugate(self): Returns the conjugate of the complex number. return ComplexNumber(self.real, -self.imaginary) def modulus(self): Returns the modulus of the complex number. return (self.real ** 2 + self.imaginary ** 2) ** 0.5 def add(self, other): Adds another complex number to this complex number. return ComplexNumber(self.real + other.real, self.imaginary + other.imaginary) def compare(self, other): Compares this complex number with another complex number. Returns True if they are the same, False otherwise. return self.real == other.real and self.imaginary == other.imaginary def multiply(self, other): Multiplies another complex number with this complex number. real_part = self.real * other.real - self.imaginary * other.imaginary imaginary_part = self.real * other.imaginary + self.imaginary * other.real return ComplexNumber(real_part, imaginary_part)"},{"question":"Modify the following code so that it accepts a string as an argument and returns the string in reverse order. However, you are not allowed to use any built-in string reversal functions or methods, and the time complexity of your solution should be O(n), where n is the length of the input string.","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a Python function that calculates the sum of even numbers in a given list and prints the result. However, the function should raise a ValueError if the list contains non-integer values. Additionally, write a test function to check if the main function is working correctly with different sets of data.","solution":"def sum_of_even_numbers(nums): Calculates the sum of even numbers in the given list. Raises a ValueError if any element in the list is not an integer. Args: nums (list): A list of numbers. Returns: int: The sum of even numbers in the list. if not all(isinstance(x, int) for x in nums): raise ValueError(\\"All elements in the list must be integers.\\") return sum(x for x in nums if x % 2 == 0)"},{"question":"Create a python program that takes in a list of dictionaries containing information about books (title, author, year, genre) and returns the latest book in the list. However, the program should only consider books of a specific genre that matches a given input. Additionally, the program should return an error message if no books of the given genre are found in the list. Add a table below showing the input and output of the program with at least three different genres.","solution":"def latest_book(books, genre): Returns the latest book in the specified genre. Parameters: books (list of dict): List of dictionaries containing book information. genre (str): The genre to filter the books by. Returns: dict: The latest book in the specified genre. str: Error message if no books of the specified genre are found. genre_books = [book for book in books if book['genre'] == genre] if not genre_books: return \\"No books found in the specified genre.\\" latest = max(genre_books, key=lambda x: x['year']) return latest"},{"question":"Write a python code that converts a decimal number to binary using recursion, but without using any built-in functions or libraries for the conversion. The code should also handle negative decimal numbers and return a string representation of the binary number. Additionally, the code should have a time complexity of O(log n) and a space complexity of O(log n).","solution":"def decimal_to_binary(n): Converts a decimal number to binary using recursion. Args: n (int): The decimal number to convert to binary. Returns: str : The binary representation of the number as a string. # Base case for n equals to 0 if n == 0: return \\"0\\" # Handle negative numbers if n < 0: return '-' + decimal_to_binary(-n) def encode_binary(x): if x == 0: return \\"\\" else: return encode_binary(x // 2) + str(x % 2) # Call the recursive function and strip leading zeros return encode_binary(n).lstrip(\\"0\\")"},{"question":"Implement a Python program that demonstrates the functioning of decorators. The program should incorporate exception handling and also should explain the use of @staticmethod and @classmethod decorators using appropriate examples.","solution":"def exception_decorator(func): A decorator that wraps the passed-in function and logs exceptions should one occur, then re-raises the exception. def wrapper(*args, **kwargs): try: return func(*args, **kwargs) except Exception as e: print(f\\"An exception occurred in {func.__name__}: {e}\\") raise return wrapper class MyClass: def __init__(self, value): self.value = value @exception_decorator def divide(self, divisor): Divides the instance's value by the given divisor. return self.value / divisor @staticmethod @exception_decorator def static_sum(a, b): Returns the sum of a and b. This method does not depend on instance state. return a + b @classmethod @exception_decorator def create_with_double(cls, value): Creates a new instance of MyClass with the \`value\` doubled. return cls(value * 2)"},{"question":"Design a \\"web crawler\\" that can find and print out all the hyperlinks in a given website recursively, including both internal and external links. Additionally, the crawler should also be able to differentiate and categorize links based on their target extensions (e.g., .html, .pdf, .jpg).","solution":"import requests from bs4 import BeautifulSoup from urllib.parse import urljoin, urlparse import re def categorize_links(links): categorized = {'html': [], 'pdf': [], 'jpg': [], 'other': []} for link in links: if link.endswith('.html') or '.' not in link: categorized['html'].append(link) elif link.endswith('.pdf'): categorized['pdf'].append(link) elif link.endswith('.jpg'): categorized['jpg'].append(link) else: categorized['other'].append(link) return categorized def get_links(url): Fetches all the hyperlinks from the given URL. try: response = requests.get(url) except requests.RequestException as e: print(f\\"Request to {url} failed: {e}\\") return [] if response.status_code != 200: print(f\\"Request to {url} failed with status code {response.status_code}\\") return [] soup = BeautifulSoup(response.content, 'html.parser') links = [] for link_tag in soup.find_all('a', href=True): link = urljoin(url, link_tag['href']) if urlparse(link).scheme in ('http', 'https'): links.append(link) return links def web_crawler(url, visited=None): Crawls the web starting from the given URL, recursively finding and categorizing all hyperlinks. if visited is None: visited = set() if url in visited: return [] visited.add(url) links = get_links(url) categorized_links = categorize_links(links) for link in categorized_links['html']: web_crawler(link, visited) return categorized_links"},{"question":"Given a list of numbers, sort the list and remove duplicates while maintaining the original order of the remaining elements. Also, write a method to calculate the time efficiency of your solution in terms of time complexity.","solution":"def sort_and_remove_duplicates(lst): Sort the given list and remove duplicates while maintaining the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) result.sort(key=lambda x: (lst.index(x), x)) return result def time_efficiency(): Returns the time complexity of the sort_and_remove_duplicates function. # The time complexity here is composed of: # - Iterating through the list once O(n). # - Checking and adding to a set O(1) for each element, but worst-case it's O(n) for all. # - Sorting the result list which has at most \`n\` unique elements O(n log n). # Therefore, the overall time complexity is O(n + n log n) which simplifies to O(n log n). return \\"O(n log n)\\""},{"question":"Write a python code to print every key and its corresponding value in a dictionary, but only for the keys that have a string value. Additionally, if a key has a nested dictionary as its value, print each nested key and its corresponding value in a tabbed format.","solution":"def print_string_values_in_dict(d, indent=0): Prints every key and its corresponding value in a dictionary, but only for the keys that have a string value. If a key has a nested dictionary as its value, prints each nested key and its corresponding value in a tabbed format. :param d: dict, the dictionary to process :param indent: int, the current indentation level tab = 't' * indent for key, value in d.items(): if isinstance(value, str): print(f\\"{tab}{key}: {value}\\") elif isinstance(value, dict): print(f\\"{tab}{key}:\\") print_string_values_in_dict(value, indent + 1) # Example usage example_dict = { 'name': 'Alice', 'age': 30, 'address': { 'city': 'Wonderland', 'zipcode': 12345 }, 'skills': { 'programming': 'expert', 'art': 'intermediate' }, 'phone': 1234567890 } print_string_values_in_dict(example_dict)"},{"question":"Write a method to sort a list of integers in Python without using any built-in sort methods or extra memory i.e., sort in-place. Also, implement your method to handle duplicate integers in the list. Finally, your solution must work in O(n log n) time complexity.","solution":"def quicksort(arr, low, high): if low < high: pi = partition(arr, low, high) quicksort(arr, low, pi - 1) quicksort(arr, pi + 1, high) def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def sort_list_in_place(arr): Sorts a list of integers in place using the QuickSort algorithm. if len(arr) <= 1: return quicksort(arr, 0, len(arr) - 1)"},{"question":"Given an unsorted list/array that contains both positive and negative integers, write a Python algorithm to find the least positive integer that is not present in the list. If all positive integers up to the length of the array are present, the algorithm should return the next integer after the maximum value in the array. In addition, your algorithm should have a space complexity of O(1) and should not modify the given array.","solution":"def find_least_positive_integer(arr): Returns the least positive integer that is not present in the list. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[i] != arr[arr[i] - 1]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Please write a Python code to subtract two matrices of different dimensions. The program should be able to handle matrices of any size, and should display an error message if the matrices cannot be subtracted due to incompatible dimensions. Additionally, include a table showing the dimensions of the input matrices, and another table showing the resulting matrix after subtraction (if applicable).","solution":"def can_subtract_matrices(A, B): Returns True if matrices A and B can be subtracted (i.e., have the same dimensions), otherwise returns False. return len(A) == len(B) and all(len(row) == len(B[idx]) for idx, row in enumerate(A)) def subtract_matrices(A, B): Subtracts matrix B from matrix A and returns the resulting matrix. If dimensions are incompatible, raises a ValueError. if not can_subtract_matrices(A, B): raise ValueError(\\"Matrices cannot be subtracted due to incompatible dimensions.\\") result = [] for i in range(len(A)): result_row = [] for j in range(len(A[i])): result_row.append(A[i][j] - B[i][j]) result.append(result_row) return result def display_matrix(matrix): Displays the matrix in a readable format. for row in matrix: print(\\" \\".join(map(str, row))) def subtract_and_display(A, B): Subtracts B from A if dimensions are compatible, displaying the matrices and the result. print(\\"Matrix A dimensions: {}x{}\\".format(len(A), len(A[0]) if A else 0)) print(\\"Matrix B dimensions: {}x{}\\".format(len(B), len(B[0]) if B else 0)) if can_subtract_matrices(A, B): result = subtract_matrices(A, B) print(\\"Resulting matrix after subtraction:\\") display_matrix(result) else: print(\\"Error: Matrices cannot be subtracted due to incompatible dimensions.\\")"},{"question":"Write a program to determine if the first string is a subsequence of the second string.","solution":"def is_subsequence(s1, s2): Determines if s1 is a subsequence of s2. Parameters: s1 (str): First string. s2 (str): Second string. Returns: bool: True if s1 is a subsequence of s2, False otherwise. it = iter(s2) return all(char in it for char in s1)"},{"question":"Given two strings string1 and string2, write a Python function that finds the length of the smallest substring that is common between the two strings using dynamic programming. Your function should take two string arguments and return an integer denoting the length of the smallest common substring. Note: The substrings can overlap.","solution":"def smallest_common_substring_length(string1, string2): Returns the length of the smallest common substring between string1 and string2. len1, len2 = len(string1), len(string2) # Initialize a table to store lengths of smallest common substring dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] min_length = float('inf') # Fill the dp array for i in range(1, len1 + 1): for j in range(1, len2 + 1): if string1[i - 1] == string2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 min_length = min(min_length, dp[i][j]) else: dp[i][j] = 0 # If no common substring found, return 0 return min_length if min_length != float('inf') else 0 # Example usage: # result = smallest_common_substring_length(\\"abcde\\", \\"bc\\") # print(result) # Output should be 1, \\"b\\" or \\"c\\" is the smallest common substring"},{"question":"Write a program that finds the mode(s) (the most frequently occurring element(s)) in a list of integers. The twist is that you must create a program that can return all modes if the list has more than one. The list might have 3 modes, it might have 1, or even none. The list can contain from 1 to 10,000 integers and each integer ranges from -10,000 to 10,000. Your solution should handle these cases efficiently.","solution":"from collections import Counter def find_modes(nums): Finds and returns the mode(s) (the most frequently occurring element(s)) in a list of integers. If there are multiple modes, returns all of them. Args: nums (list of int): List of integers to find the mode(s) in. Returns: list of int: List of mode(s). if not nums: return [] num_counts = Counter(nums) max_count = max(num_counts.values()) modes = [num for num, count in num_counts.items() if count == max_count] return modes"},{"question":"I would like to vectorise a given string in Python using unicode character values. Given an arbitrary input string, I'd like the output to be a list of integers representing the corresponding unicode codepoints of every character.","solution":"def string_to_unicode_vector(s): Converts a string to a list of unicode codepoints. Parameters: s (str): The input string. Returns: list: A list of integers representing the unicode codepoints of the characters in the string. return [ord(char) for char in s]"},{"question":"Define a python function that takes as input a mutable object of arbitrary type (for instance, a list or a dictionary). The function should check whether the input is indeed mutable and then add 1 to each numerical element in the object. The function should handle both numerical elements at the top level of the object and those nested within sub-objects (like lists inside lists or dictionaries). For non-numeric elements, the function should raise a TypeError. Additionally, write a series of unit tests to ensure the function behaves as expected in various scenarios.","solution":"def is_mutable(obj): Checks if the object is mutable. mutable_types = (dict, list, set) return isinstance(obj, mutable_types) def increment_numbers_in_object(obj): Recursively increment all numeric values in a mutable object. Raises TypeError if a non-numeric value is encountered. if not is_mutable(obj): raise TypeError(\\"The provided object is not mutable\\") if isinstance(obj, list): for i in range(len(obj)): if isinstance(obj[i], (int, float)): obj[i] += 1 elif is_mutable(obj[i]): increment_numbers_in_object(obj[i]) else: raise TypeError(f\\"Non-numeric element found: {obj[i]}\\") elif isinstance(obj, dict): for key in obj: if isinstance(obj[key], (int, float)): obj[key] += 1 elif is_mutable(obj[key]): increment_numbers_in_object(obj[key]) else: raise TypeError(f\\"Non-numeric element found: {obj[key]}\\") elif isinstance(obj, set): new_set = set() for item in obj: if isinstance(item, (int, float)): new_set.add(item + 1) elif is_mutable(item): new_set.add(increment_numbers_in_object(item)) else: raise TypeError(f\\"Non-numeric element found: {item}\\") obj.clear() obj.update(new_set) return obj"},{"question":"Design a Signup/Signin service in Python that verifies a password against the following rules: at least one uppercase letter, one lowercase letter, one number, and one special character.","solution":"import re class AuthService: @staticmethod def is_valid_password(password): Check if the password is valid. A valid password should have at least: - One uppercase letter - One lowercase letter - One number - One special character if (len(password) >= 8 and re.search(r'[A-Z]', password) and re.search(r'[a-z]', password) and re.search(r'[0-9]', password) and re.search(r'[W_]', password)): return True return False"},{"question":"Given two strings s and t, determine if t is a anagram of s. Write a Python function named \\"is_anagram\\" that takes two string parameters s and t and returns True if t is an anagram of s, and False otherwise. Also, provide an explanation of how your function works.","solution":"def is_anagram(s, t): Returns True if t is an anagram of s, and False otherwise. An anagram is produced by rearranging the letters of a word to form a new word. Therefore, two words are anagrams if they have the same characters in the same frequency. Parameters: s (str): The first string. t (str): The second string to compare with the first. Returns: bool: True if t is an anagram of s, False otherwise. # If the lengths of the strings are not the same, they can't be anagrams if len(s) != len(t): return False # Count the occurrences of each character in both strings s_counter = {} t_counter = {} for char in s: if char in s_counter: s_counter[char] += 1 else: s_counter[char] = 1 for char in t: if char in t_counter: t_counter[char] += 1 else: t_counter[char] = 1 # Compare the frequency dictionaries return s_counter == t_counter"},{"question":"Build a Python function that generates a list of the first N Fibonacci numbers, where N is an input parameter. Additionally, modify the function to return the list of Fibonacci numbers that are even only. Include error handling for scenarios where the input is not an integer or is less than 1.","solution":"def fibonacci(N): Generates a list of the first N Fibonacci numbers. if not isinstance(N, int): raise ValueError(\\"N must be an integer\\") if N < 1: raise ValueError(\\"N must be greater than 0\\") fib_sequence = [] a, b = 0, 1 for _ in range(N): fib_sequence.append(a) a, b = b, a + b return fib_sequence def even_fibonacci(N): Generates a list of the first N Fibonacci numbers specifically comprising only even numbers. fib_sequence = fibonacci(N) even_fibs = [num for num in fib_sequence if num % 2 == 0] return even_fibs"},{"question":"Given two lists, write a Python code to find the common elements in both the lists using set data structure and also return the indexes of these common elements in both lists.","solution":"def common_elements_with_indices(list1, list2): Returns the common elements in both lists along with their indices in each list. # Convert the lists to sets to find common elements common_elements = set(list1) & set(list2) # Find indices of these common elements in both lists indices = [(list1.index(el), list2.index(el)) for el in common_elements] return list(common_elements), indices"},{"question":"Implement the KMP (Knuth-Morris-Pratt) algorithm in Python to not only find a pattern in a given text but also return the starting indexes of all occurrences of the pattern. Furthermore, your function should account for overlap in pattern occurrences.","solution":"def compute_lps(pattern): Compute the longest prefix which is also suffix array (LPS array) lps = [0] * len(pattern) length = 0 i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps def kmp_search(text, pattern): Knuth-Morris-Pratt search algorithm to find all starting indexes of pattern in the text lps = compute_lps(pattern) result = [] i = 0 # index for text j = 0 # index for pattern while i < len(text): if pattern[j] == text[i]: i += 1 j += 1 if j == len(pattern): result.append(i - j) j = lps[j - 1] elif i < len(text) and pattern[j] != text[i]: if j != 0: j = lps[j - 1] else: i += 1 return result"},{"question":"I am faced with a computational challenge titled \\"Add Two Numbers II\\". The task requires me to work with two non-empty linked lists, \`l1\` and \`l2\`, which represent non-negative integers. These digits are stored in reverse order, and each node in the linked list contains a single digit. There may be a leading zero in the first list \`l1\`, which represents a number with only one digit. My goal is to add these two numbers and return the result as a linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Add two numbers represented by linked lists. :param l1: ListNode - Linked list representing the first number in reverse order. :param l2: ListNode - Linked list representing the second number in reverse order. :return: ListNode - Linked list representing the sum in reverse order. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 sum_val = val1 + val2 + carry carry = sum_val // 10 current.next = ListNode(sum_val % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Given two strings, upper_bound_time and lower_bound_time, your task is to write a Python function that calculates the time gap between these two within the same day using the datetime module. The function should return the time gap as a timedelta object. If the two strings represent times on the same day, the function should return the time gap directly. If upper_bound_time is before lower_bound_time on the following day, the timedelta should be calculated with a rollover of time back to the start of the day (i.e., considering a 24-hour cycle for the start of the calculation).","solution":"from datetime import datetime, timedelta def calculate_time_gap(upper_bound_time, lower_bound_time): Calculate the time gap between upper_bound_time and lower_bound_time within the same day. Parameters: upper_bound_time (str): The upper-bound time in HH:MM format. lower_bound_time (str): The lower-bound time in HH:MM format. Returns: timedelta: The time gap as a timedelta object. time_format = \\"%H:%M\\" upper_time = datetime.strptime(upper_bound_time, time_format) lower_time = datetime.strptime(lower_bound_time, time_format) if upper_time < lower_time: # upper_bound_time is before lower_bound_time, account for rollover to next day time_gap = (upper_time + timedelta(days=1)) - lower_time else: time_gap = upper_time - lower_time return time_gap"},{"question":"Given a treemap structure, each node contains not only a left and right child but also a random pointer which points to any node in the tree or null. Write a function to clone this treemap. The previous definition (unrelated code) had an error that might have led to a memory leak and a wrong output. Make sure to correct this in your solution.","solution":"class TreeNode: def __init__(self, val, left=None, right=None, random=None): self.val = val self.left = left self.right = right self.random = random def clone_tree(root): Clones a treemap with a random pointer. root: TreeNode from collections import defaultdict if not root: return None # A dictionary to map original nodes to their clones node_map = {} # Helper function to clone nodes def clone_node(node): if node is None: return None if node in node_map: return node_map[node] # Create a new node and put it in the map clone = TreeNode(node.val) node_map[node] = clone # Clone the left, right, and random pointers recursively clone.left = clone_node(node.left) clone.right = clone_node(node.right) clone.random = clone_node(node.random) return clone return clone_node(root)"},{"question":"Write a Python function that takes in a list of integers and returns the maximum value. However, you are not allowed to use any built-in Python functions or methods that directly find the maximum value in a list, such as max() or sort(). You must implement your own algorithm to find the maximum value.","solution":"def find_maximum(lst): Returns the maximum value in the list of integers without using any built-in functions or methods to directly find the maximum value. if not lst: # If the list is empty, return None return None # Initialize the maximum value with the first element of the list max_value = lst[0] # Iterate through the list to find the maximum value for num in lst[1:]: if num > max_value: max_value = num return max_value"},{"question":"Write a code to list out the unique numbers in an array and count the frequency of each unique number. Return the unique numbers and their frequencies as a dictionary.","solution":"def count_unique_numbers(array): Returns a dictionary with unique numbers as keys and their frequencies as values. frequency_dict = {} for num in array: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return frequency_dict"},{"question":"Generate a function that takes in three parameters: a starting number, an ending number, and a divisor. The function should print all the numbers within the given range (inclusive) that are divisible by the divisor. Additionally, the function should also print the sum of all the numbers that are divisible by the divisor. Your solution should have a time complexity of O(n), where n is the number of integers in the given range.","solution":"def numbers_divisible_by(start, end, divisor): Prints all numbers within the range [start, end] that are divisible by divisor, and prints the sum of these numbers. Parameters: start (int): The starting number of the range. end (int): The ending number of the range. divisor (int): The divisor to check divisibility. numbers = [] for i in range(start, end + 1): if i % divisor == 0: numbers.append(i) total_sum = sum(numbers) for number in numbers: print(number) print(f\\"Sum: {total_sum}\\") return numbers, total_sum"},{"question":"Create a Python function that takes two input strings and determines if they are anagrams by checking if they contain the exact same characters with the same frequency, ignoring case and whitespace. If the strings are anagrams, return True; otherwise, return False. The function should also print the number of unique characters in the first input string. Additionally, the solution must have a time complexity of O(n), where n is the length of the longer string, and the space complexity should be O(m), where m is the number of unique characters in both strings combined.","solution":"def are_anagrams(s1, s2): Determines if s1 and s2 are anagrams, ignoring case and whitespace. Also prints the number of unique characters in the first input string. Parameters: s1 (str): First input string s2 (str): Second input string Returns: bool: True if s1 and s2 are anagrams, False otherwise from collections import Counter # Normalize the strings by removing whitespace and converting to lowercase s1_clean = ''.join(s1.split()).lower() s2_clean = ''.join(s2.split()).lower() # Count characters in both strings count_s1 = Counter(s1_clean) count_s2 = Counter(s2_clean) # Print the number of unique characters in s1 print(len(count_s1)) # Compare the counters return count_s1 == count_s2"},{"question":"Complete the following snippet with proper code that will return the highest value in a given list. However, you are not allowed to use any built-in functions or methods that directly sort or find the maximum value in the list. You must implement your own logic to find the highest value.","solution":"def find_highest_value(numbers): Returns the highest value in the list without using built-in functions or methods that sort/find max. if not numbers: raise ValueError(\\"The list is empty\\") highest = numbers[0] for number in numbers: if number > highest: highest = number return highest"},{"question":"Create a robust function named \`reverse_string\` that takes in a string as an argument and returns the reversed string. The function should handle both uppercase and lowercase letters.","solution":"def reverse_string(s): Returns the reversed version of the input string s. Parameters: s (str): The input string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Create an implementation of the bubble sort algorithm to sort the provided array in ascending order. The array may contain both positive and negative integers. Your solution should have a time complexity of O(n^2), and should not use any built-in sorting functions or libraries.","solution":"def bubble_sort(arr): Implements the bubble sort algorithm to sort an array in ascending order. Args: arr (list): A list of integers. Returns: list: A sorted list in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a python function that accepts a string argument and returns a dictionary with the frequency count of each character in the input string.","solution":"def char_frequency(s): Returns a dictionary with the frequency count of each character in the input string. Parameters: s (str): Input string for which character frequency needs to be calculated. Returns: dict: A dictionary with characters as keys and their frequencies as values. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"I have a one-dimensional numpy array and I'd like to check for pairwise equality of elements. The values in the array will all be integers between 0 and 255 (inclusive). I'd like the output to be another numpy array of dtype bool with shape (\`len(a), len(a)\`) where \`output[i, j]\` indicates whether the elements at position \`i\` and \`j\` in the input array are equal. Given the small range of values, I anticipate that this can be quite efficient. However, in the first instance I would like to compare the execution time of an explicit nested for loop to the performance of numpy operations. My current code only uses nested for loops. How can I implement this using numpy?","solution":"import numpy as np def pairwise_equality(arr): Given a 1D numpy array of integers between 0 and 255, return a 2D numpy array indicating pairwise equality. Parameters: arr (np.ndarray): Input 1D numpy array of integers between 0 and 255 Returns: np.ndarray: Output 2D numpy array of dtype bool representing pairwise equality return arr[:, None] == arr"},{"question":"How can I write a Python function to count the number of occurrences of a specific element in a list?","solution":"def count_occurrences(lst, element): Returns the number of occurrences of element in lst. return lst.count(element)"},{"question":"Write a password generator in any language of your choice that creates a password with the following criteria: minimum length of 12 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. Additionally, create a validation routine to ensure that the generated password meets the specified criteria.","solution":"import random import string def generate_password(length=12): Generate a random password with a minimum length of 12, containing at least one uppercase letter, one lowercase letter, one number, and one special character. if length < 12: raise ValueError(\\"Password length must be at least 12 characters\\") # Characters to use lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits special_chars = string.punctuation # Ensure the password has at least one of each required type of character password = [ random.choice(lowercase), random.choice(uppercase), random.choice(digits), random.choice(special_chars) ] # Fill the rest of the password length with a mix of all characters all_chars = lowercase + uppercase + digits + special_chars while len(password) < length: password.append(random.choice(all_chars)) # Shuffle the list to ensure randomness random.shuffle(password) return ''.join(password) def validate_password(password): Validate that the password meets the specified criteria: minimum length of 12 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. if len(password) < 12: return False has_lowercase = any(c in string.ascii_lowercase for c in password) has_uppercase = any(c in string.ascii_uppercase for c in password) has_digit = any(c in string.digits for c in password) has_special = any(c in string.punctuation for c in password) return has_lowercase and has_uppercase and has_digit and has_special"},{"question":"Use the following code, and write a script to efficiently print out all the numbers in the list that are prime, and also their positions in the list. Additionally, the script should compute and print the average position of the prime numbers in the list. Do not use any external libraries beyond the default Python libraries.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_div = int(n**0.5) + 1 for d in range(3, max_div, 2): if n % d == 0: return False return True def find_primes_and_average_position(lst): Find all prime numbers in the list and their positions. Returns a tuple containing: 1. A list of tuples where each tuple contains a prime number and its position. 2. The average position of the prime numbers in the list. prime_positions = [(i, num) for i, num in enumerate(lst) if is_prime(num)] if not prime_positions: return prime_positions, None # If no primes are found, return None for the average position average_position = sum(i for i, _ in prime_positions) / len(prime_positions) return prime_positions, average_position def print_primes_and_average_position(lst): Prints prime numbers and their positions in the list, along with the average position of the primes. prime_positions, average_position = find_primes_and_average_position(lst) for pos, prime in prime_positions: print(f\\"Prime: {prime} at Position: {pos}\\") if prime_positions: print(f\\"Average Position of Primes: {average_position:.2f}\\") else: print(\\"No prime numbers found\\")"},{"question":"Write a function in Python that takes an array of integers and returns a string containing the values separated by commas.","solution":"def array_to_string(arr): Converts an array of integers to a string with values separated by commas. return ','.join(map(str, arr))"},{"question":"Rewrite the code to find the sum of all the elements in the array, but do not use the built-in function sum() or any other similar function. Additionally, implement fault tolerance by handling possible exceptions that might occur during the computation. In case of any exception, print an appropriate error message and stop the program execution.","solution":"def array_sum(arr): Returns the sum of all the elements in the given array. If an exception occurs, prints an appropriate error message and stops the execution. try: total = 0 for num in arr: total += num return total except TypeError as e: print(f\\"Error: All elements in the array must be numbers. ({e})\\") return None except Exception as e: print(f\\"An unexpected error occurred: {e}\\") return None"},{"question":"Can you write a Python program that creates a dictionary with three keys and then adds three more keys to it? Also, I want you to display the dictionary after each key addition so I can see how the dictionary is being updated.","solution":"def create_and_update_dict(): Creates a dictionary with three initial keys and then adds three more keys to it, displaying the dictionary after each addition. # Initial dictionary with three keys my_dict = {\\"key1\\": \\"value1\\", \\"key2\\": \\"value2\\", \\"key3\\": \\"value3\\"} print(\\"Initial dictionary:\\", my_dict) # Adding new key1 my_dict[\\"key4\\"] = \\"value4\\" print(\\"After adding key4:\\", my_dict) # Adding new key2 my_dict[\\"key5\\"] = \\"value5\\" print(\\"After adding key5:\\", my_dict) # Adding new key3 my_dict[\\"key6\\"] = \\"value6\\" print(\\"After adding key6:\\", my_dict) return my_dict"},{"question":"Write a Python function that takes in two lists of equal length and returns a dictionary where the elements from the first list are the keys and the elements from the second list are the values. Additionally, the function should handle cases where the input lists are not of equal length by returning an error message.","solution":"def lists_to_dict(keys, values): Converts two lists of equal length into a dictionary where the elements of the first list are the keys and the elements of the second list are the values. If the lists are not of equal length, it returns an error message. :param keys: List of keys :param values: List of values :return: Dictionary if lists are of equal length, otherwise an error message. if len(keys) != len(values): return \\"Error: The lists are not of equal length.\\" return dict(zip(keys, values))"},{"question":"I am writing a python function to encrypt and decrypt a string using the Caesar Cipher. We have been advised to define two functions: caesar_encrypt and caesar_decrypt. Additionally, we are not allowed to use any built-in function like ord() or chr(). I have written the function to encrypt but I am unable to come up with a decryption function that doesn't use the encryption function. Is there a way to do this?","solution":"def caesar_encrypt(text, shift): Encrypts the given text using the Caesar Cipher. :param text: The text to be encrypted. :param shift: The number of positions to shift each character. :return: The encrypted text. encrypted_text = \\"\\" for char in text: if 'a' <= char <= 'z': new_char = chr((((ord(char) - ord('a')) + shift) % 26) + ord('a')) encrypted_text += new_char elif 'A' <= char <= 'Z': new_char = chr((((ord(char) - ord('A')) + shift) % 26) + ord('A')) encrypted_text += new_char else: encrypted_text += char return encrypted_text def caesar_decrypt(text, shift): Decrypts the given text using the Caesar Cipher. :param text: The text to be decrypted. :param shift: The number of positions to shift each character back. :return: The decrypted text. decrypted_text = \\"\\" for char in text: if 'a' <= char <= 'z': new_char = chr((((ord(char) - ord('a')) - shift) % 26) + ord('a')) decrypted_text += new_char elif 'A' <= char <= 'Z': new_char = chr((((ord(char) - ord('A')) - shift) % 26) + ord('A')) decrypted_text += new_char else: decrypted_text += char return decrypted_text"},{"question":"In the following code, modify it to add functionality that allows it to accept a list of positive integers to compute the average. The function should return an error if any non-integer or zero is present in the list and the average should be returned as a floating-point number. The function should also include an optional parameter for calculating weighted average in case a list of weights is passed. The function should check if the weights are of float or integer type and their count should match that of the integers list. If weighted average is calculated, weights should sum up to 1. Handle possible exceptions in a way that the function returns a suitable error message.","solution":"def compute_average(numbers, weights=None): Computes the average of a list of positive integers. Optionally calculates the weighted average if weights are provided. :param numbers: List of positive integers :param weights: Optional list of weights as floats or integers :return: Average or weighted average as a floating-point number if not all(isinstance(n, int) and n > 0 for n in numbers): return \\"Error: List must contain only positive integers.\\" if weights is not None: if len(weights) != len(numbers): return \\"Error: The number of weights must match the number of numbers.\\" if not all(isinstance(w, (int, float)) for w in weights): return \\"Error: All weights must be integers or floats.\\" if not abs(sum(weights) - 1.0) < 1e-6: return \\"Error: Weights must sum up to 1.\\" weighted_sum = sum(n * w for n, w in zip(numbers, weights)) return float(weighted_sum) return float(sum(numbers) / len(numbers))"},{"question":"Write a Python program to sort the dictionaries in a list by their keys in ascending order. Each dictionary in the list will contain only string keys and integer values. The program should print the sorted list of dictionaries.","solution":"def sort_dictionaries_by_keys(dict_list): Sorts a list of dictionaries by their keys in ascending order. Parameters: dict_list (List[Dict[str, int]]): List of dictionaries to be sorted. Returns: List[Dict[str, int]]: List of dictionaries sorted by keys. return [dict(sorted(d.items())) for d in dict_list] # Sample Input sample_input = [{'b': 2, 'a': 1, 'c': 3}, {'m': 5, 'k': 4}] # Sample Output sorted_output = sort_dictionaries_by_keys(sample_input) print(sorted_output) # Expected: [{'a': 1, 'b': 2, 'c': 3}, {'k': 4, 'm': 5}]"},{"question":"Write a function in Python to create a dictionary from two lists, one of keys and the other one of values. The function should handle cases where the length of the keys list is greater than the length of the values list. In such cases, the remaining keys should be mapped to a default value. Additionally, the function should check if any of the keys or values are of numeric type and raise an exception if they are.","solution":"def create_dict(keys, values, default_value=None): Creates a dictionary from two lists, one of keys and the other of values. If the length of the keys list is greater than the length of the values list, the remaining keys will be mapped to a default value. If any of the keys or values are of numeric type, raises an exception. Parameters: keys (list): List of keys for the dictionary. values (list): List of values for the dictionary. default_value: Default value for keys that do not have corresponding values in the values list. Returns: dict: Dictionary created from keys and values. if any(isinstance(key, (int, float)) for key in keys): raise ValueError(\\"Keys list contains numeric type\\") if any(isinstance(value, (int, float)) for value in values): raise ValueError(\\"Values list contains numeric type\\") result = {} for i, key in enumerate(keys): if i < len(values): result[key] = values[i] else: result[key] = default_value return result"},{"question":"Develop a software that accepts two strings and determines if they are anagrams. Additionally, the software should be able to determine if the anagram strings are also palindrome words or phrases. The input strings may include spaces and punctuation marks that should be disregarded during evaluation.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams, ignoring spaces and punctuation. str1_filtered = ''.join(filter(str.isalnum, str1)).lower() str2_filtered = ''.join(filter(str.isalnum, str2)).lower() return sorted(str1_filtered) == sorted(str2_filtered) def is_palindrome(s): Determines if a given string is a palindrome, ignoring spaces and punctuation. s_filtered = ''.join(filter(str.isalnum, s)).lower() return s_filtered == s_filtered[::-1]"},{"question":"I want to create an HTML page with a form where users can input a list of strings and select the sorting order (ascending or descending) using a dropdown menu. After submitting the form, I would like the strings to be displayed in the selected order on the same page. Can you provide an example of how to accomplish this using Flask as the web framework?","solution":"from flask import Flask, render_template_string, request app = Flask(__name__) @app.route('/', methods=['GET', 'POST']) def index(): sorted_strings = [] if request.method == 'POST': strings = request.form.getlist('strings') order = request.form['order'] if order == 'ascending': sorted_strings = sorted(strings) else: sorted_strings = sorted(strings, reverse=True) return render_template_string(''' <!DOCTYPE html> <html> <head> <title>String Sorter</title> </head> <body> <h1>Sort Strings</h1> <form method=\\"post\\"> <textarea name=\\"strings\\" rows=\\"10\\" cols=\\"30\\" placeholder=\\"Enter strings separated by new lines\\"></textarea><br> <label for=\\"order\\">Order:</label> <select name=\\"order\\"> <option value=\\"ascending\\">Ascending</option> <option value=\\"descending\\">Descending</option> </select><br><br> <input type=\\"submit\\" value=\\"Sort\\"> </form> {% if sorted_strings %} <h2>Sorted Strings:</h2> <ul> {% for string in sorted_strings %} <li>{{ string }}</li> {% endfor %} </ul> {% endif %} </body> </html> ''', sorted_strings=sorted_strings) if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a Python program that asks the user to enter a sentence, then count the number of words in that sentence using the split() method, and finally print the result. Make sure to handle any possible errors or edge cases, such as empty input or input that consists of only whitespace characters. Additionally, design your code to be reusable by implementing a function that takes the user's sentence as an argument and returns the word count.","solution":"def count_words(sentence): Returns the number of words in the given sentence. Words are considered to be sequences of characters separated by whitespace. if not isinstance(sentence, str): raise ValueError(\\"Input must be a string\\") # Split the sentence by whitespace using split() method words = sentence.strip().split() # Return the number of words return len(words) # Example usage: # sentence = input(\\"Enter a sentence: \\") # print(\\"Number of words:\\", count_words(sentence))"},{"question":"Write a program that can generate the first N Fibonacci numbers. Additionally, your program should also be capable of identifying the index of any given Fibonacci number. Implement this without using any in-built or external libraries for calculations.","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers. if n <= 0: return [] fib_seq = [0, 1] for i in range(2, n): next_value = fib_seq[-1] + fib_seq[-2] fib_seq.append(next_value) return fib_seq[:n] def find_fibonacci_index(num): Finds the index of the given Fibonacci number. if num < 0: return -1 a, b = 0, 1 index = 0 while a <= num: if a == num: return index a, b = b, a + b index += 1 return -1"},{"question":"Given a string containing alphanumeric characters, special characters, and spaces, write a Python function that extracts all unique digits from the string while preserving their order of appearance. Additionally, your function should ignore any non-digit characters and return the digits as a list. Consider the case sensitivity of characters.","solution":"def extract_unique_digits(input_string): Extracts all unique digits from the input string while preserving their order of appearance. Ignores any non-digit characters and returns the digits as a list. :param input_string: The input string containing alphanumeric characters, special characters, and spaces. :return: A list of unique digits in the order they appear in the input string. seen_digits = set() result = [] for char in input_string: if char.isdigit() and char not in seen_digits: seen_digits.add(char) result.append(char) return result"},{"question":"Given a list, write a Python program to count the number of duplicates for each element in the list, but without using any built-in Python functions or libraries that can directly solve the problem, such as collections.Counter. You are encouraged to solve this using basic programming constructs only.","solution":"def count_duplicates(lst): Given a list, return a dictionary with the count of duplicates for each element in the list. :param lst: List of elements to count duplicates for :return: Dictionary with elements as keys and their counts as values counts = {} for item in lst: if item in counts: counts[item] += 1 else: counts[item] = 1 return counts"},{"question":"How can I create a program in Python that randomly selects an element from a list of integers and returns its index? I want to make sure that each element has an equal chance of being selected.","solution":"import random def select_random_index(lst): Returns the index of a randomly selected element from the list. Each element has an equal chance of being selected. Parameters: lst (list): A list of integers. Returns: int: The index of the randomly selected element. if not lst: raise ValueError(\\"The list must not be empty\\") return random.randint(0, len(lst) - 1)"},{"question":"Write a code snippet that rotates an array by N steps in a counter-clockwise direction where N is a user input. Moreover, ensure your solution also works efficiently for large arrays (up to 10^6 elements) and N up to the size of the array.","solution":"def rotate_counter_clockwise(arr, N): Rotates the array arr by N steps in a counter-clockwise direction. :param arr: List of integers :param N: Number of steps to rotate :return: Rotated list if not arr: return arr N = N % len(arr) # To handle N greater than the size of the array return arr[N:] + arr[:N]"},{"question":"Develop a function in Python that not only calculates the wind chill index, rounding to the nearest integer, but also categorizes the wind chill level as \\"Freezing\\", \\"Very Cold\\", or \\"Extremely Cold\\" based on the calculated index. The categorization should be displayed to the user in a friendly message. Incorporate error handling to account for any potential issue like the input being out of the range of the formula's validity or not being a numeric value. Make sure to document your function appropriately.","solution":"def calculate_wind_chill(temperature, wind_speed): Calculate the wind chill index and categorize the wind chill level. The function handles errors for invalid inputs. :param temperature: the air temperature in degrees Fahrenheit (must be 50°F or lower) :param wind_speed: the wind speed in miles per hour (must be 3 mph or higher) :return: a tuple containing the wind chill index (rounded to the nearest integer) and a wind chill level description try: # Ensure inputs are numeric temperature = float(temperature) wind_speed = float(wind_speed) # Check for validity of the inputs if temperature > 50 or wind_speed < 3: raise ValueError(\\"Temperature must be 50°F or lower and wind speed must be 3 mph or higher for the formula to be valid.\\") # Calculate the wind chill index wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * wind_speed**0.16 + 0.4275 * temperature * wind_speed**0.16 wind_chill_index = round(wind_chill_index) # Determine the wind chill level if wind_chill_index <= 0: wind_chill_level = \\"Extremely Cold\\" elif 1 <= wind_chill_index <= 20: wind_chill_level = \\"Very Cold\\" else: wind_chill_level = \\"Freezing\\" return wind_chill_index, f\\"The wind chill index is {wind_chill_index}, which is considered '{wind_chill_level}'.\\" except ValueError as e: return None, str(e)"},{"question":"Write a function that will check if a given list is palindrome. Additionally, the function should be capable of handling lists of any data type (numbers, strings, etc.) and return true if the same list can be read the same way from both ends.","solution":"def is_palindrome(input_list): Returns True if the input_list is a palindrome, False otherwise. A list is a palindrome if it reads the same forwards and backwards. Args: input_list (list): The list to be checked. Returns: bool: True if input_list is a palindrome, False otherwise. return input_list == input_list[::-1]"},{"question":"Write a Python program to remove duplicate elements from a list while preserving the original order.","solution":"def remove_duplicates(lst): Removes duplicate elements from the list while preserving the original order. Parameters: lst (list): A list of elements which may contain duplicates. Returns: list: A list without duplicates, preserving the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Given a list of shuffled numbers 1 to 100 inclusive in a random order, write a program that uses a binary search algorithm to find if a specific number is present in the list. For testing, assume the number you're looking for is 47.","solution":"def binary_search(arr, x): Perform a binary search to find if x is present in arr. Parameters: arr (list): A sorted list of integers. x (int): The target integer to find in arr. Returns: bool: True if x is found in arr, otherwise False. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: return True elif arr[mid] < x: low = mid + 1 else: high = mid - 1 return False # Example usage: shuffled_list = [67, 12, 34, 89, 5, 38, 27, 97, 46, 88, 68, 90, 48, 3, 39, 74, 1, 23, 76, 100, 9, 64, 78, 20, 35, 52, 95, 80, 43, 66, 8, 79, 31, 32, 58, 7, 83, 40, 62, 29, 94, 54, 86, 18, 50, 6, 21, 37, 82, 56, 85, 99, 14, 60, 10, 70, 25, 26, 28, 15, 33, 49, 93, 72, 55, 4, 65, 30, 84, 13, 92, 41, 42, 71, 11, 19, 75, 2, 81, 24, 61, 51, 22, 47, 59, 98, 63, 45, 96, 17, 53, 77, 73, 16, 91, 87, 36, 57, 69, 44] # Sort the shuffled list before performing binary search shuffled_list.sort() # Check if 47 is present in the list print(binary_search(shuffled_list, 47)) # Expected output: True"},{"question":"Write a Python program that generates all possible permutations of a given list, where each element in the list is unique.","solution":"from itertools import permutations def generate_permutations(input_list): Returns all possible permutations of a given list. return list(permutations(input_list))"},{"question":"Write a Python program to find the longest list within a list of lists. Also, add functionality to determine if there are multiple lists of the same maximum length and return all of them. Additionally, the program should also handle nested lists case sensitively.","solution":"def longest_lists(lists): Returns the longest list(s) from a list of lists. If there's more than one list with the maximum length, it returns all of them. Args: lists (list of lists): The list of lists to evaluate. Returns: list of lists: A list containing the longest list(s). if not lists: # handle empty input return [] max_length = max(len(sublist) for sublist in lists) longest = [sublist for sublist in lists if len(sublist) == max_length] return longest"},{"question":"Create a python function which finds the intersection of two lists and returns a sorted list of the common elements.","solution":"def intersection_of_lists(list1, list2): Returns the intersection of two lists as a sorted list of common elements. # Using set intersection result = sorted(set(list1) & set(list2)) return result"},{"question":"Given a list of integers, called \\"numbers\\", write a Python function that prints the elements of the list in reverse order.","solution":"def print_reverse(numbers): Prints the elements of the list 'numbers' in reverse order. for number in reversed(numbers): print(number)"},{"question":"Using the given code, create a function \\"calculate_area\\" which will take two integer parameters and calculate the area of a rectangle. The length and width parameters should be positive integers and the function should return the area as a floating-point number. Additionally, the function should validate that the length and width are both prime numbers before calculating the area. If any of the parameters are not prime numbers, the function should raise a custom exception called \\"NonPrimeNumberError\\" with an appropriate error message.","solution":"class NonPrimeNumberError(Exception): Exception raised for non-prime numbers. def __init__(self, value): message = f\\"The number {value} is not a prime number.\\" self.value = value self.message = message super().__init__(self.message) def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def calculate_area(length, width): Returns the area of a rectangle with given length and width where both parameters are prime numbers. Parameters: length (int): The length of the rectangle. width (int): The width of the rectangle. Returns: float: The area of the rectangle. Raises: NonPrimeNumberError: If either length or width is not a prime number. if not is_prime(length): raise NonPrimeNumberError(length) if not is_prime(width): raise NonPrimeNumberError(width) return float(length * width)"},{"question":"Write a sorting function in Python that uses the quick sort algorithm. The function should take in a list of integers as a parameter and return the sorted list. The function should also include a nested function called \\"partition\\" that takes in the list, a low index, and a high index as parameters and returns the index of the pivot element after partitioning. The quick sort function should use the \\"partition\\" function to divide the list into smaller sublists and recursively sort them. The function should have a time complexity of O(nlogn) and a space complexity of O(logn).","solution":"def quick_sort(arr): def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_sort_recursive(arr, low, high): if low < high: pi = partition(arr, low, high) quick_sort_recursive(arr, low, pi - 1) quick_sort_recursive(arr, pi + 1, high) quick_sort_recursive(arr, 0, len(arr) - 1) return arr"},{"question":"Develop a Python function that can convert quantities from inches to centimeters, while adhering to the standard conversion rate. The function should be able to handle both integer and floating point input values, and return the result with an appropriate degree of precision. Additionally, the function should include error handling for invalid input types and values, such as negative numbers or non-numeric inputs.","solution":"def inches_to_cm(value): Convert inches to centimeters. The standard conversion rate is 1 inch = 2.54 cm. Parameters: value (int or float): The quantity in inches to be converted. Returns: float: The converted quantity in centimeters. Raises: ValueError: If the input value is negative or not a number. if not isinstance(value, (int, float)): raise ValueError(\\"Input value must be a numeric type (int or float).\\") if value < 0: raise ValueError(\\"Input value cannot be negative.\\") cm_value = value * 2.54 return round(cm_value, 2)"},{"question":"Write a Python program that converts a given bidimensional matrix into a dictionary where the keys are tuples formed from the row and column indices, and the values are the elements at those coordinates.","solution":"def matrix_to_dict(matrix): Converts a given bidimensional matrix into a dictionary where the keys are tuples formed from the row and column indices, and the values are the elements at those coordinates. Args: matrix (list of lists): A 2D list representation of the matrix. Returns: dict: A dictionary with (row, col) tuples as keys and matrix elements as values. result = {} for i in range(len(matrix)): for j in range(len(matrix[0])): result[(i, j)] = matrix[i][j] return result"},{"question":"If I have a number that is between 0 and 255, how can I convert this number to an 8-bit binary string in Python? Can you provide me with a solution and some code examples?","solution":"def to_8bit_binary_string(number): Convert a number between 0 and 255 to its 8-bit binary string representation. Args: number (int): A number between 0 and 255. Returns: str: The 8-bit binary string representation of the number. if number < 0 or number > 255: raise ValueError(\\"Number must be between 0 and 255.\\") return format(number, '08b')"},{"question":"Write a program in Python to find the sum of all prime numbers between 1 to n, where n is a number entered by the user. The program should also display the number of prime numbers found in the range.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False max_divisor = int(num ** 0.5) + 1 for d in range(3, max_divisor, 2): if num % d == 0: return False return True def sum_and_count_primes(n): Find the sum of all prime numbers between 1 and n and their count. prime_sum = 0 prime_count = 0 for num in range(2, n + 1): if is_prime(num): prime_sum += num prime_count += 1 return prime_sum, prime_count"},{"question":"Write a Python code to merge two given dictionaries into one. If any clashes occur, prefer the highest value. The dictionaries may contain lists, sets, and other dictionaries as their values. For nested dictionaries, merge them recursively.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries into one. If there are any clashes on the same keys, prefer the highest value. For nested dictionaries, merge them recursively. result = dict1.copy() # Start with a copy of the first dict to avoid mutating it for key, value in dict2.items(): if key in result: # If both values under the same key are dictionaries, merge them recursively if isinstance(result[key], dict) and isinstance(value, dict): result[key] = merge_dicts(result[key], value) else: # For non-dict types, choose the higher value if isinstance(value, (int, float)) and isinstance(result[key], (int, float)): result[key] = max(result[key], value) else: result[key] = value # Choose the value from dict2 else: result[key] = value return result"},{"question":"To find unique palindromic substrings in a given string, we will use a brute force approach with three nested loops. The outer loop will iterate through each character in the string. The middle loop will iterate through each character after the current character in the outer loop. The innermost loop will check if the substring formed from the current and middle characters is a palindrome. If it is, we will add it to a set to ensure that only unique substrings are counted. Additionally, we will also check for odd and even length palindromes separately to ensure that all possible palindromic substrings are found.","solution":"def is_palindrome(string): Checks if a given string is a palindrome. return string == string[::-1] def unique_palindromic_substrings(s): Returns a set of unique palindromic substrings from the input string. palindromic_subs = set() n = len(s) for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): palindromic_subs.add(substring) return palindromic_subs"},{"question":"You are to write a program that implements a basic calculator. The calculator should be able to perform the following operations: addition, subtraction, multiplication, and division. The calculator should take two numbers and an operator as an input and output the result of the operation.","solution":"def calculator(a, b, operation): Perform a basic arithmetic operation on two numbers. Parameters: a (int / float): The first number. b (int / float): The second number. operation (str): A string representing the operation ('+', '-', '*', '/'). Returns: int / float: The result of the arithmetic operation. Raises: ValueError: If an unsupported operation or division by zero is attempted. if operation == '+': return a + b elif operation == '-': return a - b elif operation == '*': return a * b elif operation == '/': if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b else: raise ValueError(\\"Unsupported operation.\\")"},{"question":"Write a function to insert a value into a sorted array. The function should maintain the array's sorted order, and it should handle duplicates by inserting the value at the appropriate position. The array is considered to be sorted in ascending order. You need to implement this in a language of your choice without using any built-in sorting or insertion functions. Additionally, provide a brief explanation of your code.","solution":"def insert_into_sorted_array(arr, value): Inserts value into sorted array arr while maintaining the array's sorted order. Handles duplication by inserting the value at the appropriate position. Parameters: arr (list): A sorted list of numbers. value (int or float): A value to be inserted into the array. Returns: list: New sorted array with the value inserted. if not arr: return [value] new_arr = [] placed = False for num in arr: if num >= value and not placed: new_arr.append(value) placed = True new_arr.append(num) if not placed: new_arr.append(value) return new_arr"},{"question":"Write a method in Python that takes in a list of integers and a target integer. The method should return the indices of the first and last occurrence of the target integer in the list. If the target integer does not exist in the list, return (-1, -1).","solution":"def find_first_and_last_occurrence(nums, target): Finds the indices of the first and last occurrence of the target integer in the list. If the target integer does not exist in the list, returns (-1, -1). Parameters: nums (list): A list of integers. target (int): The target integer. Returns: tuple: A tuple containing the indices of the first and last occurrence of the target. first_occurrence = -1 last_occurrence = -1 for i in range(len(nums)): if nums[i] == target: last_occurrence = i if first_occurrence == -1: first_occurrence = i return (first_occurrence, last_occurrence)"},{"question":"Write a code to check if the content of two strings is the same, but ignore any leading or trailing white spaces and any punctuation marks. The code should also handle cases where the strings contain special characters.","solution":"import string def clean_string(s): Helper function to remove leading/trailing whitespaces and punctuations from the string. return s.strip().translate(str.maketrans('', '', string.punctuation + string.whitespace)) def strings_are_equal(s1, s2): Checks if the content of two strings is the same, ignoring leading/trailing whitespaces and any punctuation marks. return clean_string(s1) == clean_string(s2)"},{"question":"I want to implement a function that rotates a list to the left by a specific number of positions. Can someone provide me with a code example using Python?","solution":"def rotate_left(lst, positions): Rotates the list to the left by the given number of positions. if not lst: return lst positions = positions % len(lst) return lst[positions:] + lst[:positions]"},{"question":"Write a Python code snippet to check if an integer is both prime and between 5 and 10 (including both). If the integer is negative, return \\"Invalid input\\". If the integer is not prime or not between 5 and 10, return \\"Integer is either not prime or not between 5 and 10\\". Otherwise, return \\"Integer is prime and between 5 and 10\\".","solution":"def is_prime_and_between_5_and_10(n): Checks if an integer is both prime and between 5 and 10, inclusive. if n < 0: return \\"Invalid input\\" if n < 5 or n > 10: return \\"Integer is either not prime or not between 5 and 10\\" if n in (5, 7): return \\"Integer is prime and between 5 and 10\\" return \\"Integer is either not prime or not between 5 and 10\\""},{"question":"Write a python program to create a tuple with 5 numbers. Any number can be repeated. Then write a function to determine if the tuple contains a number given as input, and another function to return the square of each number in the original tuple.","solution":"def create_tuple(): Creates a tuple with 5 numbers. return (1, 2, 3, 4, 5) def contains_number(tup, number): Determines if the tuple contains a number given as input. Parameters: tup (tuple): The tuple to check within. number (int): The number to check for in the tuple. Returns: bool: True if the number is in the tuple, False otherwise. return number in tup def square_numbers(tup): Returns a new tuple with the square of each number in the original tuple. Parameters: tup (tuple): The original tuple with numbers to square. Returns: tuple: A new tuple with each number squared. return tuple(x ** 2 for x in tup)"},{"question":"This code is an implementation of the Union-Find data structure in Python. To use this data structure, you need to create an instance of the UnionFind class with an iterable of elements. Once you have created an instance, you can use the find() method to find the representative of a set, the union() method to merge two sets, and the connected() method to check if two elements are in the same set. The data structure uses a dictionary to keep track of the parent of each element. When the find() method is called, it returns the representative of the set that the element belongs to by following the chain of parents until it reaches the root. When the union() method is called, it sets the parent of the root of one set to the root of the other set, effectively merging the two sets. The connected() method uses the find() method to check if two elements are in the same set by comparing the roots of the sets that they belong to.","solution":"class UnionFind: def __init__(self, elements): Initializes the Union-Find data structure with the given elements. self.parent = {x: x for x in elements} self.rank = {x: 0 for x in elements} def find(self, element): Finds and returns the representative of the set containing the element. if self.parent[element] != element: self.parent[element] = self.find(self.parent[element]) # Path compression return self.parent[element] def union(self, element1, element2): Merges the sets containing element1 and element2. root1 = self.find(element1) root2 = self.find(element2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 def connected(self, element1, element2): Checks if element1 and element2 are in the same set. return self.find(element1) == self.find(element2)"},{"question":"Write a python code to generate permutations of an input string. Your solution should not use any built-in library functions for generating permutations.","solution":"def permute(s): Generates all permutations of the input string s. def helper(slate, remaining): if len(remaining) == 0: results.append(slate) else: for i in range(len(remaining)): helper(slate + remaining[i], remaining[:i] + remaining[i+1:]) results = [] helper(\\"\\", s) return results"},{"question":"Write a Python function that takes an integer as input and returns the word representation of the number in English. For example, the input 123 should return the string \\"one hundred twenty three\\".","solution":"def number_to_words(n): if n == 0: return \\"zero\\" below_20 = ['','one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen'] tens = ['','ten','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety'] thousands = ['','thousand','million','billion'] def word(num): if num == 0: return \\"\\" elif num < 20: return below_20[num] elif num < 100: return tens[num//10] + ('' if num % 10 == 0 else ' ' + below_20[num % 10]) else: return below_20[num // 100] + ' hundred' + ('' if num % 100 == 0 else ' ' + word(num % 100)) i = 0 words = '' while n > 0: if n % 1000 != 0: words = word(n % 1000) + (' ' + thousands[i] if thousands[i] else '') + ('' if words == '' else ' ' + words) n //= 1000 i += 1 return words.strip()"},{"question":"Given an array of words, write a function to find the longest common prefix among them. For example, for the array [\\"flower\\", \\"flow\\", \\"flight\\"], the longest common prefix is \\"fl\\".","solution":"def longest_common_prefix(words): Returns the longest common prefix among a list of words. If there's no common prefix, returns an empty string. if not words: return \\"\\" # Sort the words to easily compare the smallest and largest words.sort() # Compare characters between the first and the last word first_word = words[0] last_word = words[-1] common_prefix_length = 0 while (common_prefix_length < len(first_word) and common_prefix_length < len(last_word) and first_word[common_prefix_length] == last_word[common_prefix_length]): common_prefix_length += 1 return first_word[:common_prefix_length]"},{"question":"Write a Python function to reverse a given string. However, you must implement the function without using any built-in string reversal functions or methods (e.g., \`reversed()\`, string slicing). Additionally, you cannot use any additional data structures like lists, arrays, or stacks.","solution":"def reverse_string(s): Reverses the given string without using built-in reversal functions or additional data structures. n = len(s) result = '' # Initialize the result as an empty string for i in range(n - 1, -1, -1): result += s[i] return result"},{"question":"Generate a small python code which takes a list of numbers and sorts them in the ascending order","solution":"def sort_numbers(numbers): Takes a list of numbers and returns a new list with the numbers sorted in ascending order. return sorted(numbers)"},{"question":"Develop a function that is able to print a list of consecutive numbers between 1 and N, given an integer N as argument. The function should also check if each number is a perfect square before printing it. The function should return a list of all perfect square numbers between 1 and N. The function should handle large values of N efficiently. N: 100","solution":"import math def get_perfect_squares(N): Returns a list of all perfect squares between 1 and N (inclusive). perfect_squares = [] for i in range(1, N + 1): if math.isqrt(i) ** 2 == i: perfect_squares.append(i) return perfect_squares"},{"question":"Please design a function utilizing Python to sort a list of tuples with 3 elements and sort them based on the second element of each tuple in reverse order.","solution":"def sort_tuples_by_second_element(tuples_list): Sorts a list of tuples based on the second element of each tuple in reverse order. Parameters: tuples_list (list): List of tuples, each containing 3 elements. Returns: list: Sorted list of tuples based on the second element in reverse order. return sorted(tuples_list, key=lambda x: x[1], reverse=True)"},{"question":"Create an advanced Python script that accepts two arrays of integers and a range as function parameters, and generates an array with the intersection of the first array and the elements in the second array that are within the given range.","solution":"def intersection_with_range(arr1, arr2, range_start, range_end): Returns the intersection of arr1 and elements in arr2 that are within the given range. Parameters: arr1 (list of int): First list of integers. arr2 (list of int): Second list of integers. range_start (int): Start of the range. range_end (int): End of the range. Returns: list of int: Intersection result. range_elements = {x for x in arr2 if range_start <= x <= range_end} return [x for x in arr1 if x in range_elements]"},{"question":"Write a Python function that takes in a string as input and returns the number of words that contain at least one vowel. A vowel is defined as 'a', 'e', 'i', 'o', or 'u'.","solution":"def count_words_with_vowels(input_string): Returns the number of words that contain at least one vowel. A vowel is defined as 'a', 'e', 'i', 'o', or 'u'. vowels = set('aeiou') words = input_string.split() count = 0 for word in words: if any(char in vowels for char in word.lower()): count += 1 return count"},{"question":"Write a method in Python that takes an integer value, checks if it's a prime number and returns the result as a Boolean. If the number is not prime, find the largest prime factor of this number and return it instead. Please also take into account the execution time of your function for large integers.","solution":"from math import isqrt def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def largest_prime_factor(n): Returns the largest prime factor of n. if n <= 1: return None # Remove factors of 2 while n % 2 == 0: largest_factor = 2 n //= 2 # Remove factors of 3 while n % 3 == 0: largest_factor = 3 n //= 3 # Check the rest of the factors starting from 5 factor = 5 while factor * factor <= n: while n % factor == 0: largest_factor = factor n //= factor while n % (factor + 2) == 0: largest_factor = factor + 2 n //= (factor + 2) factor += 6 # If there's any prime factor greater than sqrt(n) if n > 1: largest_factor = n return largest_factor def check_prime_or_largest_prime_factor(n): Checks if n is a prime number. If it is, returns True. If not, returns the largest prime factor of n. if is_prime(n): return True else: return largest_prime_factor(n)"},{"question":"Generate a Python function that takes an array and an integer as arguments and returns an array with the first n elements of the input array.","solution":"def first_n_elements(arr, n): Returns the first n elements of the given array. :param arr: List of elements :param n: Number of elements to return :return: List of the first n elements return arr[:n]"},{"question":"Given the quadratic equation ax^2 + bx + c = 0, write a Python function that takes three integers a, b, and c, and uses the quadratic formula to return the roots of the equation. Ensure that your function returns the roots as complex numbers, taking into account that the square root of the discriminant (b^2 - 4ac) might be negative, and handle it appropriately.","solution":"import cmath def find_roots(a, b, c): Returns the roots of the quadratic equation ax^2 + bx + c = 0 as a tuple of complex numbers. # Calculate the discriminant discriminant = b**2 - 4*a*c # Calculate the two roots using complex square root root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) return (root1, root2)"},{"question":"Given a list of Unicode character codes, generate the corresponding string. Each character code represents a unique character in the Unicode standard, which is a universal character encoding standard. Your task is to decode the character codes and return the resulting string.","solution":"def decode_unicode(codes): Takes a list of Unicode character codes and returns the corresponding string. :param codes: List of integers representing Unicode character codes. :return: String formed by the corresponding characters. return ''.join(chr(code) for code in codes)"},{"question":"Create a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix. The matrix can only be traversed rightwards or downwards. The cost of a path is defined as the sum of the weights of the cells visited on the path.","solution":"def min_path_cost(matrix): Returns the minimum cost of a path from the top-left to the bottom-right of a matrix. The matrix can only be traversed rightwards or downwards. if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) # Create a dp array to store the minimum cost to reach each cell dp = [[0] * cols for _ in range(rows)] # Initialize the top-left cell dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the dp array for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right cell contains the minimum cost return dp[-1][-1]"},{"question":"Write a Python function that finds the longest common prefix among an array of strings, considering only alphabetic characters.","solution":"def longest_common_prefix(strings): Finds the longest common prefix among an array of strings, considering only alphabetic characters. if not strings: return \\"\\" # Sort the array, the common prefix of the entire array must also be a common prefix of the first and last words (after sorting) strings.sort() first = strings[0] last = strings[-1] i = 0 # Compare the characters of the first and last word until a mismatch is found while i < len(first) and i < len(last) and first[i].isalpha() and last[i].isalpha() and first[i] == last[i]: i += 1 return first[:i]"},{"question":"How can I create a Python function that finds all repeat characters and their occurrence counts in a given string? For instance, if the input string is \\"google\\", the function should return a dictionary like {\\"g\\": 2, \\"o\\": 2}. Could you provide a detailed code snippet with comments to explain the logic?","solution":"def find_repeats(s): Finds all repeat characters and their occurrence counts in a given string s. Returns a dictionary with characters as keys and their counts as values. from collections import defaultdict count = defaultdict(int) # Using defaultdict to initialize counts to 0 for char in s: count[char] += 1 # Increment the count for each character repeat_counts = {k: v for k, v in count.items() if v > 1} # Keep only those with count more than 1 return repeat_counts"},{"question":"Construct a Python recursive function that calculates the factorial of a number. This function should include error handling for type and value errors (i.e., argument should be a positive integer). Additionally, implement a mechanism that prevents the function from exceeding a maximum recursion depth. Lastly, write a series of test cases to verify the correctness of your program, including edge cases.","solution":"def factorial(n, _depth=0, _max_depth=1000): Returns the factorial of a positive integer n recursively. Handles errors for non-integer and non-positive values. Prevents exceeding maximum recursion depth. if not isinstance(n, int): raise TypeError(\\"Argument must be an integer\\") if n < 0: raise ValueError(\\"Argument must be a non-negative integer\\") if _depth >= _max_depth: raise RecursionError(\\"Maximum recursion depth exceeded\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1, _depth + 1, _max_depth)"},{"question":"Create a Python function that takes a string as an input and returns the total number of vowels (a,e,i,o,u) in the string, including both lowercase and uppercase vowels. The function should ignore punctuation and whitespace.","solution":"def count_vowels(s): Returns the total number of vowels in the string s, including both lowercase and uppercase vowels. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels)"},{"question":"Write a Python code to check if two strings are anagrams of each other without using any built-in or library function, and implement a time complexity of O(n).","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams of each other. if len(str1) != len(str2): return False # Create a count array and initialize all values as 0 count = [0] * 256 # For each character in input strings, increment the count in the count array for i in range(len(str1)): count[ord(str1[i])] += 1 count[ord(str2[i])] -= 1 # Check if all the values in count array are 0 for i in range(256): if count[i] != 0: return False return True"},{"question":"Write a function that accepts any number of parameters. The function should determine the type (integer, string, list, etc.) of each parameter and print out the type along with the element. If the parameter is a nested list, the function should be capable of iterating through it and determining the type of each nested element.","solution":"def describe_parameters(*params): Accepts any number of parameters, determines the type of each parameter, and prints out the type along with the element. If a parameter is a nested list, the function iterates through it and determines the type of each nested element. for param in params: if isinstance(param, list): print(\\"[List]\\") for elem in param: if isinstance(elem, list): describe_parameters(elem) # Recursive call for nested lists else: print(f\\"{elem}: {type(elem).__name__}\\") else: print(f\\"{param}: {type(param).__name__}\\")"},{"question":"Create a basic program in any language that reads the contents of a file line by line and prints the line number and the line itself to the console. The file name should be passed as input.","solution":"def print_file_contents_with_line_numbers(file_name): Reads the contents of a file line by line and prints the line number and the line itself to the console. :param file_name: Name of the file to be read. with open(file_name, 'r') as file: for line_number, line in enumerate(file, start=1): print(f\\"{line_number}: {line.strip()}\\")"},{"question":"Define a function called \\"string_length\\" that accepts a single argument \\"input_string\\" and returns the length of the string. However, you are not allowed to use any built-in functions, methods, or libraries that directly give the length of a string (such as len() in Python). You must implement your own logic to count the characters in the string.","solution":"def string_length(input_string): Returns the length of the input string without using built-in length functions. count = 0 for char in input_string: count += 1 return count"},{"question":"Write a Python program to sort a given list in increasing order using the 'Insertion Sort' Algorithm.","solution":"def insertion_sort(arr): Sorts a given list in increasing order using the 'Insertion Sort' algorithm. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Given a list of random numbers, write a program to sort the list using bubble sort algorithm.","solution":"def bubble_sort(numbers): Sorts a list of numbers using bubble sort algorithm. n = len(numbers) for i in range(n): for j in range(0, n-i-1): if numbers[j] > numbers[j+1]: numbers[j], numbers[j+1] = numbers[j+1], numbers[j] return numbers"},{"question":"Given the following Python code that implements a binary search on a list of integers, you're required to perform an in-depth analysis. You should determine what the function does and provide a detailed, conceptual explanation about how it works, besides illustrating its flow. Also, please suggest modifications to the function to improve its robustness and efficiency.","solution":"def binary_search(arr, target): Perform binary search on a sorted list to find the target value. Parameters: arr (list of int): The sorted list of integers. target (int): The value to search for. Returns: int: The index of \`target\` in \`arr\` if present, otherwise -1. left = 0 right = len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a python function to find the prime numbers between two given numbers.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes(start, end): Returns a list of prime numbers between start and end (inclusive). primes = [] for number in range(start, end + 1): if is_prime(number): primes.append(number) return primes"},{"question":"Given a list of positive integers, write a program to find all unique triplets in the list that add up to zero. For example, given the input array [-1, 0, 1, 2, -1, -4], the function should return the unique triplets: [[-1, 0, 1], [-1, -1, 2]]. Ensure that the solution does not include duplicate triplets.","solution":"def three_sum(nums): Returns all unique triplets in the list which give the sum of zero. nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Avoid duplicates for the first element of the triplet left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Avoid duplicates for the second element of the triplet while left < right and nums[right] == nums[right - 1]: right -= 1 # Avoid duplicates for the third element of the triplet left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return triplets"},{"question":"Develop a Python function which accepts as input a list composed of dictionaries, and as a result, delivers a newly formulated list that comprises the tally of the key-value pair associations pertaining to each unique dictionary within the list.","solution":"def count_key_value_pairs(lst_of_dicts): Accepts a list of dictionaries and returns a dictionary with the count of each key-value pair. from collections import defaultdict counter = defaultdict(int) for d in lst_of_dicts: for key, value in d.items(): counter[(key, value)] += 1 return dict(counter)"},{"question":"Design a Python function that accepts a URL as input and verifies its validity using a regex pattern. Additionally, the function should ensure that the URL includes either 'http' or 'https', it should verify that a non-www site doesn't start with 'www.', and it should confirm that the top-level domain is one of the following: .com, .org, .net, .gov, .edu, .mil. The function should return a dictionary with the result and the matched groups if the URL is valid, or an error message if the URL is invalid.","solution":"import re def validate_url(url): Validates the URL against specific rules and regex pattern. Args: url (str): URL to be validated. Returns: dict: Dictionary with the result and matched groups if valid, or an error message if invalid. pattern = r'^(https?)://(?:www.)?(?!www.)([A-Za-z0-9-.]+).(com|org|net|gov|edu|mil)(/[A-Za-z0-9-._~:/?#[]@!&'()*+,;=]*)?' match = re.match(pattern, url) if match: return { 'result': 'Valid URL', 'protocol': match.group(1), 'domain': match.group(2), 'tld': match.group(3), 'path': match.group(4) if match.group(4) else '' } else: return {'error': 'Invalid URL'}"},{"question":"How can I validate a JSON string to check if it's a valid JSON object using a function in Python?","solution":"import json def is_valid_json(json_string): Validates whether the given string is a valid JSON object. Parameters: json_string (str): The string to validate. Returns: bool: True if the string is a valid JSON object, False otherwise. try: json_object = json.loads(json_string) if isinstance(json_object, dict): return True except ValueError: pass return False"},{"question":"Write a python fucntion (texttt{is_patch_cyclic}) to check if a given patch (list of patch-cells) in arbitrary dimension is cyclic(cyclic or not cyclic). The function should check if the last element of the list and the first element of the list is the same. If they are the same, it is cyclic, otherwise not cyclic. We provide a function (texttt{NeighborCube recalled from a file}) to obtain the patches for testing. Also provide both a successful (cyclic patch) and unsuccessful (non-cyclic patch) cases for testing.","solution":"def is_patch_cyclic(patch): Check if the given patch (list of patch-cells) is cyclic. Parameters: patch (list): List of patch-cells. Returns: bool: True if the patch is cyclic, False otherwise. # Check if the patch list is empty if not patch: return False # Check if the first and last elements are the same return patch[0] == patch[-1]"},{"question":"How can I write a regular function in Python that takes two lists and returns their difference in sorted order?","solution":"def list_difference_sorted(list1, list2): Returns the difference between two lists in sorted order. The difference is defined as the set of elements that are in the first list but not in the second list. Parameters: list1 (list): The first list list2 (list): The second list Returns: list: The sorted difference of the two lists difference = set(list1) - set(list2) return sorted(difference)"},{"question":"How can I design a program that generates all the unique subsequences of a given string? Can you provide a step-by-step solution with code?","solution":"def generate_subsequences(s): Generates all unique subsequences of a given string. :param s: Input string :return: List of unique subsequences def helper(sub, index): if index == len(s): result.add(sub) return # Include the current character helper(sub + s[index], index + 1) # Exclude the current character helper(sub, index + 1) result = set() helper(\\"\\", 0) return sorted(result) # Sorted list for consistency"},{"question":"I'm looking for a way to convert a decimal number into binary by using Python. Could you provide a code snippet for this?","solution":"def decimal_to_binary(n): Converts a decimal number to binary. Parameters: n (int): The decimal number to convert. Returns: str: The binary representation of the decimal number. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Given two lists of words, list1 and list2, write a function in Python that finds the common words between the two lists and also counts the frequency of these common words in both lists. It is guaranteed that both lists will only contain lowercase letters. The function should return a dictionary where the keys are the common words and the values are tuples. Each tuple should contain two elements: the first element is the frequency of the word in list1, and the second element is the frequency of the word in list2.","solution":"def common_words_with_frequencies(list1, list2): Finds the common words between two lists and counts their frequencies in both lists. Parameters: list1 (list): The first list of words. list2 (list): The second list of words. Returns: dict: A dictionary where the keys are the common words and the values are tuples containing the frequency of the word in list1 and list2. from collections import Counter counter1 = Counter(list1) counter2 = Counter(list2) common_words = set(list1) & set(list2) result = {word: (counter1[word], counter2[word]) for word in common_words} return result"},{"question":"Develop a Python code snippet that produces a randomly-generated sequence consisting of 5 distinct alphabetic characters. Your code should ensure that no character is repeated in the sequence. Additionally, implement a function to check if the generated sequence is a palindrome. Remember to exclude numeric digits and special characters from your sequence. The sequence should only include alphabets from A to Z.","solution":"import random import string def generate_random_sequence(): Generates a random sequence of 5 distinct alphabetic characters. characters = list(string.ascii_uppercase) random.shuffle(characters) return ''.join(characters[:5]) def is_palindrome(sequence): Checks if the provided sequence is a palindrome. return sequence == sequence[::-1]"},{"question":"Create a Python function that not only verifies if a list of numerical values follows an ascending sequence, but also meticulously checks if the list maintains a strictly ascending order (i.e., no two consecutive numbers are the same). This function should also be capable of handling exceptions for inputs that are non-numeric, lists that are empty, and lists that contain only a single element.","solution":"def is_strictly_ascending(seq): Verifies if the list of numerical values follows a strictly ascending order. Handles exception cases for non-numeric inputs, empty lists, and single element lists. Parameters: seq (list): A list of numerical values. Returns: bool: True if the list is strictly ascending, False otherwise. if not isinstance(seq, list): raise TypeError(\\"Input should be a list.\\") if len(seq) == 0: raise ValueError(\\"Empty list provided.\\") if len(seq) == 1: raise ValueError(\\"List with only one element provided.\\") for i in range(1, len(seq)): if not isinstance(seq[i-1], (int, float)) or not isinstance(seq[i], (int, float)): raise TypeError(\\"All elements in the list should be numeric.\\") if seq[i] <= seq[i-1]: return False return True"},{"question":"Build a Python function that not only reverses the order of a given list of floating-point numbers, but also increments each number by 0.5.","solution":"def reverse_and_increment(lst): Reverses the order of a given list of floating-point numbers and increments each number by 0.5. Parameters: lst (list): A list of floating-point numbers. Returns: list: A new list with reversed order and each number incremented by 0.5. return [(x + 0.5) for x in reversed(lst)]"},{"question":"Modify the following code to generate the Fibonacci sequence up to the nth term, without using any loops or recursion. Additionally, ensure that the function has a time complexity of O(n) and a space complexity of O(1).","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth term. The sequence is returned as a list. if n <= 0: return [] elif n == 1: return [0] # Initialize first two terms fib_sequence = [0, 1] # Compute remaining terms iteratively for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence"},{"question":"Develop a python program that not only compares two input sentences and outputs the count of unique words present in both sentences, but also, identifies the position of these unique words in the sentences. Additionally, make your program capable of handling a situation where sentences could be of different lengths or could even be empty.","solution":"def compare_sentences(sentence1, sentence2): Compares two sentences and outputs the count of unique words present in both sentences and their positions. Parameters: sentence1 (str): The first input sentence. sentence2 (str): The second input sentence. Returns: dict: A dictionary where the keys are the unique words present in both sentences and the values are tuples containing: - The count of the word in sentence1. - The positions of the word in sentence1. - The count of the word in sentence2. - The positions of the word in sentence2. def get_word_positions(sentence): word_positions = {} words = sentence.split() for index, word in enumerate(words): if word not in word_positions: word_positions[word] = [] word_positions[word].append(index) return word_positions word_positions1 = get_word_positions(sentence1) word_positions2 = get_word_positions(sentence2) result = {} words_in_both = set(word_positions1.keys()) & set(word_positions2.keys()) for word in words_in_both: result[word] = ( len(word_positions1[word]), word_positions1[word], len(word_positions2[word]), word_positions2[word] ) return result"},{"question":"Split the following string at the comma and reverse the resulting list, but do not use any built-in string splitting or list reversing functions or methods. Additionally, the solution should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the string.","solution":"def custom_split_and_reverse(input_string): Splits the input_string at commas, reverses the resulting list, and returns as a single string with elements separated by commas. This is done without using any built-in string splitting or list reversing functions or methods. # Step 1: Split the input_string at commas without using built-in methods. # We're effectively emulating the split() function here. elements = [] current_element = '' for char in input_string: if char == ',': elements.append(current_element) current_element = '' else: current_element += char elements.append(current_element) # Add the final element # Step 2: Reverse the elements list without using built-in methods. start = 0 end = len(elements) - 1 while start < end: elements[start], elements[end] = elements[end], elements[start] start += 1 end -= 1 # Step 3: Join the reversed elements into a single string separated by commas. result = '' for i in range(len(elements)): if i > 0: result += ',' result += elements[i] return result"},{"question":"Explain the time complexity of a binary search algorithm and how it compares to linear search. Also, write a code snippet for the binary search algorithm.","solution":"def binary_search(arr, target): Performs a binary search on a sorted array to find the target element. Parameters: arr (list): A sorted list of elements. target (any): The element to search for in the array. Returns: int: The index of the target element in the array if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"In a Python programming challenge, you are given a list of integers and a target sum. Your task is to write a function that returns the indices of the two numbers such that they add up to the target sum. Assume that each input would have exactly one solution, and you may not use the same element twice. Can you solve this challenge by completing the given function? You should not use any built-in functions or libraries for this task.","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, returns the indices of the two numbers such that they add up to target. :param nums: List[int] :param target: int :return: List[int] for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: return [i, j]"},{"question":"Create a program that not only fetches and prints the first 50 prime numbers, but also computes and prints their corresponding Fibonacci sequences. Make sure your solution doesn't lose performance efficiency for large inputs.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def first_n_primes(n): Returns the first n prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def fibonacci_sequence(n): Generates the first n Fibonacci numbers. fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[:n] def primes_and_fibonacci(n): Fetches the first n prime numbers and their corresponding Fibonacci sequence. primes = first_n_primes(n) fibonacci = fibonacci_sequence(n) return primes, fibonacci # Fetch and print the first 50 prime numbers and their corresponding Fibonacci sequences primes, fibonacci = primes_and_fibonacci(50) print(\\"First 50 prime numbers:\\", primes) print(\\"First 50 Fibonacci numbers:\\", fibonacci)"},{"question":"Write a Python function that takes an array of strings and returns a new array containing only the strings that are palindromes with a length greater than 5.","solution":"def filter_long_palindromes(arr): Returns a list of strings that are palindromes and have a length greater than 5. Parameters: arr (list of str): List of strings to filter. Returns: list of str: A list containing palindromes with length greater than 5. return [word for word in arr if word == word[::-1] and len(word) > 5]"},{"question":"Write a recursive function to output \\"Thank you\\" for the first n prime numbers, where n is a positive integer. Additionally, implement the function in such a way that it does not use any global or static variables.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def thank_you_primes(n, current_number=2, primes_count=0): Recursively outputs \\"Thank you\\" for the first n prime numbers. :param n: The number of prime numbers to process :param current_number: The current number being checked for primality :param primes_count: The count of primes found so far if primes_count >= n: return if is_prime(current_number): print(\\"Thank you\\") primes_count += 1 thank_you_primes(n, current_number + 1, primes_count)"},{"question":"producing a JSON response with Python, without a dependency on the \`json\` library that is commonly used for this task. Instead, you are required to create a function that manually constructs a valid JSON response from the given data. The function should handle different data types and structure the output in a way that is compliant with the JSON standard. Additionally, the function should include proper error handling to ensure that the input data is valid and can be converted to a JSON response.","solution":"def jsonify(data): Converts a Python data structure into a JSON-formatted string. if data is None: return \\"null\\" elif isinstance(data, bool): return \\"true\\" if data else \\"false\\" elif isinstance(data, (int, float)): return str(data) elif isinstance(data, str): return '\\"' + data.replace('\\"', '\\"') + '\\"' elif isinstance(data, list): return '[' + ', '.join(jsonify(item) for item in data) + ']' elif isinstance(data, dict): items = [] for key, value in data.items(): if not isinstance(key, str): raise TypeError(\\"Keys must be strings\\") items.append(jsonify(key) + ': ' + jsonify(value)) return '{' + ', '.join(items) + '}' else: raise TypeError(f\\"Type {type(data)} not supported\\") raise ValueError(\\"Invalid data type encountered\\")"},{"question":"Develop an algorithm in Python to calculate the factorial of a given number n by utilizing recursive function methodology. Additionally, include error handling to ensure the entered value is a non-negative integer.","solution":"def factorial(n): Calculate the factorial of a non-negative integer n using recursion. Raises a ValueError if the input is a negative integer or not an integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a code to generate and print the Fibonacci sequence up to a given term. Also, modify the code to calculate and print the average of the series until the final term. The code will include an error checking feature to ensure the input is a positive integer greater than zero. If not, return a meaningful error message.","solution":"def fibonacci_sequence(n): Generate and print the Fibonacci sequence up to term 'n'. Calculate and print the average of the series until the final term. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer greater than zero.\\" fib_sequence = [] a, b = 0, 1 for _ in range(n): fib_sequence.append(a) a, b = b, a + b fibonacci_sum = sum(fib_sequence) average = fibonacci_sum / n return fib_sequence, average"},{"question":"Write code to implement a double-ended priority queue in Python, where elements can be inserted and removed from both ends. The implementation should have an average time complexity of O(log n) for insertion and removal operations, and should use a space complexity of O(n).","solution":"import heapq class DoubleEndedPriorityQueue: def __init__(self): self.min_heap = [] self.max_heap = [] self.entry_finder = {} self.counter = 0 def insert(self, value): entry = (value, self.counter) heapq.heappush(self.min_heap, entry) heapq.heappush(self.max_heap, (-value, self.counter)) self.entry_finder[self.counter] = entry self.counter += 1 def remove_min(self): while self.min_heap: value, count = heapq.heappop(self.min_heap) if count in self.entry_finder: del self.entry_finder[count] return value raise ValueError(\\"The queue is empty\\") def remove_max(self): while self.max_heap: value, count = heapq.heappop(self.max_heap) if count in self.entry_finder: del self.entry_finder[count] return -value raise ValueError(\\"The queue is empty\\")"},{"question":"Write a generator function called \`evens_in_range\` that yields even numbers within a given range, inclusive.","solution":"def evens_in_range(start, end): Generator that yields even numbers within a given range, inclusive. Parameters: start (int): The start of the range. end (int): The end of the range. Yields: int: Even numbers within the given range. for num in range(start, end + 1): if num % 2 == 0: yield num"},{"question":"Write a function in Python that finds the median of a list of numbers. Make sure to include error handling for cases where the input is not a list or the list is empty. Additionally, your function should be able to handle lists with an odd or even number of elements.","solution":"def find_median(numbers): Returns the median of a list of numbers. If the input is not a list or the list is empty, raises ValueError. if not isinstance(numbers, list) or len(numbers) == 0: raise ValueError(\\"Input should be a non-empty list\\") sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: # odd number of elements return sorted_numbers[n // 2] else: # even number of elements mid1 = sorted_numbers[n // 2 - 1] mid2 = sorted_numbers[n // 2] return (mid1 + mid2) / 2"},{"question":"Write a Python function that takes a string and determines if it is a palindrome, ignoring capitalization and punctuation.","solution":"import string def is_palindrome(s): Determines if the given string is a palindrome, ignoring capitalization and punctuation. # Remove punctuation and convert to lowercase translator = str.maketrans('', '', string.punctuation) clean_s = s.translate(translator).replace(\\" \\", \\"\\").lower() # Check if the cleaned string is a palindrome return clean_s == clean_s[::-1]"},{"question":"Generate a function that takes two arguments, a list of strings and an integer, and returns a list of strings that are longer than the integer provided.","solution":"def filter_strings_by_length(strings, length): Returns a list of strings that are longer than the provided integer length. :param strings: List of strings to be filtered. :param length: Integer length to filter the strings. :return: List of strings longer than the provided length. return [s for s in strings if len(s) > length]"},{"question":"Suppose that you are given a 2-dimensional array in Python, where each row represents an individual's daily water consumption for a week, and you are required to determine the highest and lowest water consumption for each person. However, to make this task more challenging, you need to implement a solution using list comprehension and without using any external libraries such as numpy. Additionally, you must ensure that your solution has optimal time and space complexity.","solution":"def highest_and_lowest_consumption(data): Returns a list of tuples where each tuple contains the highest and lowest water consumption for each individual in the given 2D array. Parameters: data (list of lists): 2D array where each row represents an individual's daily water consumption for a week. Returns: list of tuples: Each tuple contains the highest and lowest water consumption for each individual. return [(max(person), min(person)) for person in data]"},{"question":"Write a python script which convert the time from one timezone to another. Consider these timezones: 'US/Pacific' to 'Europe/Warsaw', an offset of -9 hours. The solution should also display the date and time in the destination timezone in the following format 'YYYY-MM-DD HH:MM:SS'.","solution":"from datetime import datetime, timedelta import pytz def convert_pacific_to_warsaw(time_str): Converts a date and time from US/Pacific timezone to Europe/Warsaw timezone. :param time_str: The time in US/Pacific timezone as a string in 'YYYY-MM-DD HH:MM:SS' format. :return: The time in Europe/Warsaw timezone as a string in 'YYYY-MM-DD HH:MM:SS' format. pacific_format = '%Y-%m-%d %H:%M:%S' # Define the datetime format pacific_time = datetime.strptime(time_str, pacific_format) # Parse the input time string # Define the time zones pacific_tz = pytz.timezone('US/Pacific') warsaw_tz = pytz.timezone('Europe/Warsaw') # Localize the pacific time localized_pacific_time = pacific_tz.localize(pacific_time) # Convert to Warsaw timezone warsaw_time = localized_pacific_time.astimezone(warsaw_tz) # Format the converted time back to string warsaw_format = warsaw_time.strftime(pacific_format) return warsaw_format"},{"question":"How can I modify the PyTorch implementation of a Fully-Connected Neural Network (FCNN) to predict a single continuous value for the YOLO bounding box regression task and incorporate the Intersection over Union (IoU) loss function to train the model. Specifically, I want the model to not only predict the center coordinates, width and height of the bounding box, but also the class probability for the object of interest.","solution":"import torch import torch.nn as nn import torch.nn.functional as F class FCNN(nn.Module): def __init__(self, input_dim): super(FCNN, self).__init__() self.fc1 = nn.Linear(input_dim, 128) self.fc2 = nn.Linear(128, 64) self.fc3 = nn.Linear(64, 5) # (x_center, y_center, width, height, class_prob) def forward(self, x): x = F.relu(self.fc1(x)) x = F.relu(self.fc2(x)) x = self.fc3(x) return x def iou_loss(pred, target): Calculate Intersection over Union (IoU) loss. Args: pred (tensor): Predicted bounding boxes (batch_size, 4) target (tensor): Target bounding boxes (batch_size, 4) # Compute intersection inter_x1 = torch.max(pred[:, 0] - pred[:, 2] / 2, target[:, 0] - target[:, 2] / 2) inter_y1 = torch.max(pred[:, 1] - pred[:, 3] / 2, target[:, 1] - target[:, 3] / 2) inter_x2 = torch.min(pred[:, 0] + pred[:, 2] / 2, target[:, 0] + target[:, 2] / 2) inter_y2 = torch.min(pred[:, 1] + pred[:, 3] / 2, target[:, 1] + target[:, 3] / 2) inter_area = torch.clamp(inter_x2 - inter_x1, min=0) * torch.clamp(inter_y2 - inter_y1, min=0) # Compute union pred_area = pred[:, 2] * pred[:, 3] target_area = target[:, 2] * target[:, 3] union_area = pred_area + target_area - inter_area return 1 - (inter_area / union_area).mean() def combined_loss(pred, target): Calculate the combined loss for bounding box regression (IoU loss) and class probability (binary cross entropy). Args: pred (tensor): Predicted bounding boxes and class probabilities (batch_size, 5) target (tensor): Target bounding boxes and class probabilities (batch_size, 5) bbox_pred = pred[:, :4] bbox_target = target[:, :4] class_pred = pred[:, 4] class_target = target[:, 4] iou = iou_loss(bbox_pred, bbox_target) class_loss = F.binary_cross_entropy_with_logits(class_pred, class_target) return iou + class_loss"},{"question":"Create a python function which finds the intersection of two lists and returns a list containing the common elements. The function should also handle duplicate elements correctly.","solution":"def find_intersection(list1, list2): Returns a list containing the common elements of list1 and list2, handling duplicate elements correctly. list1_counts = {} list2_counts = {} for element in list1: if element in list1_counts: list1_counts[element] += 1 else: list1_counts[element] = 1 for element in list2: if element in list2_counts: list2_counts[element] += 1 else: list2_counts[element] = 1 intersection = [] for element in list1_counts: if element in list2_counts: common_count = min(list1_counts[element], list2_counts[element]) intersection.extend([element] * common_count) return intersection"},{"question":"Write a Python function to find the longest subarray with an equal number of 0's and 1's in a binary array.","solution":"def find_max_length(nums): Returns the length of the longest contiguous subarray with an equal number of 0's and 1's. count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count += -1 if num == 0 else 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Write a Python program to search for a given number in a sorted list using binary search and return the index of the first occurrence of the number. If the number is not found, return -1.","solution":"def binary_search_first_occurrence(lst, target): Search for the FIRST occurrence of a number in a sorted list using binary search. Parameters: lst (list of int): A sorted list of integers. target (int): The number to search for. Returns: int: The index of the first occurrence of the target in the list, or -1 if not found. low, high = 0, len(lst) - 1 result = -1 while low <= high: mid = (low + high) // 2 if lst[mid] < target: low = mid + 1 elif lst[mid] > target: high = mid - 1 else: result = mid high = mid - 1 # Look for earlier occurrences return result"},{"question":"Given an array of numbers and a target number, write a program to check if the target number exists in the array. Output true if it exists and false if it does not. If the number exists in the array more than once, output the index of the first occurrence. If the array is empty, output \\"The array is empty.\\" The program should also handle cases where the target number is a float or a negative number. Additionally, the program should only use constant space complexity and have a time complexity of O(n), where n is the length of the array.","solution":"def check_if_exists(arr, target): Check if the target number exists in the array. Output true if it exists, and false if it does not. If the number exists more than once, output the index of the first occurrence. If the array is empty, output \\"The array is empty.\\" The function handles cases where the target number is a float or a negative number. This solution uses constant space and has a time complexity of O(n). if len(arr) == 0: return \\"The array is empty.\\" for i in range(len(arr)): if arr[i] == target: return i return False"},{"question":"Create a function that calculates the factorial of a number with an added functionality of handling extremely large inputs without integer overflow. Also, incorporate error checking for negative numbers and non-integer types.","solution":"import math def factorial(n): Returns the factorial of a number n. Handles large inputs by using math.factorial which manages big integers. Raises ValueError for negative numbers and TypeError for non-integer types. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") return math.factorial(n)"},{"question":"Write a python function that given a list of lists of equal length, creates a dictionary where the i-th list is the value for the key given in the first list at index i.","solution":"def lists_to_dict(lists): Given a list of lists of equal length, creates a dictionary where the i-th list is the value for the key given in the first list at index i. Args: lists (List[List[any]]): A list containing sub-lists of equal length. Returns: dict: A dictionary where the keys are the elements of the first list, and the values are the corresponding sub-lists. if not lists: return {} keys = lists[0] result = {key: [] for key in keys} for other_list in lists[1:]: for key, value in zip(keys, other_list): result[key].append(value) return result"},{"question":"Given a list and a number k, write a Python program to find out if there are two elements in the list which add up to give k.","solution":"def find_two_elements_with_sum(nums, k): Determines if there are two elements in the list nums that add up to k. Parameters: nums (list of int): List of integers. k (int): Target sum. Returns: bool: True if there are two elements that add up to k, False otherwise. seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Given an input of a positive integer, write a function in Python that returns its binary representation as a string. The function should not use any built-in conversion functions or libraries.","solution":"def to_binary(n): Converts a positive integer to its binary representation as a string. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"How can an AI create a program that generates a specific number of random numbers within a given range?","solution":"import random def generate_random_numbers(count, start, end): Generate a list of \`count\` random numbers in the range [start, end]. Parameters: count (int): Number of random numbers to generate. start (int): Lower bound of the range (inclusive). end (int): Upper bound of the range (inclusive). Returns: list: A list containing \`count\` random numbers. if count < 0: raise ValueError(\\"Count must be non-negative\\") return [random.randint(start, end) for _ in range(count)]"},{"question":"Please use code to create a digital gift card for my ice cream shop. The gift card should have a minimum balance of 10 and a maximum balance of 100. The code should also include a 10% discount for customers who purchase the gift card with a balance of 50 or more.","solution":"class GiftCard: def __init__(self, balance): if balance < 10 or balance > 100: raise ValueError(\\"Balance must be between 10 and 100 inclusive\\") if balance >= 50: discount = balance * 0.10 self.balance = balance - discount else: self.balance = balance def get_balance(self): return self.balance"},{"question":"Design an algorithm to check if one string is a substring of another. The algorithm should have a time complexity of O(n) and should not use any built-in string search functions.","solution":"def is_substring(s, t): Checks if string t is a substring of string s. Uses a sliding window approach for linear time complexity. n, m = len(s), len(t) if m == 0: return True if n < m: return False for i in range(n - m + 1): if s[i:i + m] == t: return True return False"},{"question":"Formulate a Python dictionary encapsulating the divergent monikers of the septet of dwarfs from the timeless narrative \\"Snow White\\" and a corresponding compilation of their respective ages. Additionally, implement a function that sorts the dictionary based on their ages in ascending order. Make sure to handle the scenario where two dwarfs might have the same age. In such case, sort them alphabetically. Here's an example how you can tackle this problem.","solution":"def sort_dwarfs_by_age(dwarfs): Sorts dictionary of dwarfs based on age in ascending order. In case of same age, sorts alphabetically by name. :param dwarfs: Dictionary of dwarfs with their ages. :return: List of tuples sorted by age then alphabetically by name. return sorted(dwarfs.items(), key=lambda item: (item[1], item[0])) # Example data dwarfs = { \\"Bashful\\": 77, \\"Doc\\": 65, \\"Dopey\\": 65, \\"Grumpy\\": 85, \\"Happy\\": 75, \\"Sleepy\\": 80, \\"Sneezy\\": 75 }"},{"question":"Write a script in Python that takes a string input from a user and prints it back in reverse order. Additionally, if the reversed string forms a palindrome (a word, phrase, or sequence that reads the same backwards as forwards), the script should print \\"The reversed string is a palindrome!\\" If it doesn't form a palindrome, it should print \\"The reversed string is not a palindrome!\\".","solution":"def reverse_string_and_check_palindrome(s: str) -> str: Reverses the input string and checks if it forms a palindrome. Args: s (str): Input string. Returns: str: A string stating whether the reversed string is a palindrome or not. reversed_s = s[::-1] if s == reversed_s: result = f\\"{reversed_s}nThe reversed string is a palindrome!\\" else: result = f\\"{reversed_s}nThe reversed string is not a palindrome!\\" return result"},{"question":"I have a python script which works with two different datasources, mysql and mssql databases; I need the method which gets the tool based on the provided tool name to be a class method, and that method should be used in two other functions: add_db and get_db. How can I achieve that?","solution":"class DatabaseTools: tools = { 'mysql': 'MySQL Database Tool', 'mssql': 'MSSQL Database Tool' } @classmethod def get_tool(cls, tool_name): Class method to get the database tool based on the provided tool name. return cls.tools.get(tool_name.lower(), 'Unknown Tool') def add_db(self, tool_name): Adds a database connection using the specified tool. tool = self.get_tool(tool_name) return f\\"Database connection added using {tool}\\" def get_db(self, tool_name): Gets the database connection using the specified tool. tool = self.get_tool(tool_name) return f\\"Database connection retrieved using {tool}\\""},{"question":"Write a python code to insert a new node at the head of a circular linked list","solution":"class Node: def __init__(self, data): self.data = data self.next = None class CircularLinkedList: def __init__(self): self.head = None def insert_at_head(self, data): new_node = Node(data) if not self.head: self.head = new_node self.head.next = self.head else: current = self.head while current.next != self.head: current = current.next new_node.next = self.head current.next = new_node self.head = new_node def to_list(self): result = [] if not self.head: return result current = self.head while True: result.append(current.data) current = current.next if current == self.head: break return result"},{"question":"Suggest a Python code that calculates the weighted average from a given list of numbers and a corresponding list of weights. The length of the list of numbers will always be equal to the length of the list of weights. Each weight corresponds to the importance of each number in the list. Your code should take into consideration scenarios where weights are zero and handle them appropriately to avoid division by zero errors. Additionally, ensure that the function can handle large lists efficiently without causing memory issues or exceeding time limits.","solution":"def weighted_average(numbers, weights): Calculate the weighted average from a given list of numbers and a corresponding list of weights. :param numbers: List of numbers. :param weights: List of weights corresponding to the numbers. :return: The weighted average of the numbers. if not numbers or not weights or len(numbers) != len(weights): raise ValueError(\\"Input lists must be of the same length and not empty\\") total_weight = sum(weights) if total_weight == 0: raise ValueError(\\"The sum of weights must not be zero\\") weighted_sum = sum(number * weight for number, weight in zip(numbers, weights)) return weighted_sum / total_weight"},{"question":"Given a string s and two positions pos1 and pos2, write a Python function to swap the characters at these two positions in the string. After swapping the characters, check if the new string is a palindrome. If it is, return the palindrome string; otherwise, return \\"Not a palindrome\\". Consider that the given positions will always be valid (i.e., within the bounds of the string).","solution":"def swap_and_check_palindrome(s, pos1, pos2): Swaps the characters at pos1 and pos2 in the string s and checks if the new string is a palindrome. If it is a palindrome, returns the palindrome string; otherwise, returns \\"Not a palindrome\\". if pos1 == pos2: new_s = s else: s_list = list(s) s_list[pos1], s_list[pos2] = s_list[pos2], s_list[pos1] new_s = ''.join(s_list) if new_s == new_s[::-1]: return new_s else: return \\"Not a palindrome\\""},{"question":"Write a python function to find the longest contiguous subarray with equal number of 0 and 1.","solution":"def find_max_length(nums): Finds the maximum length of a contiguous subarray with an equal number of 0 and 1. :param nums: List[int] - the input array containing 0s and 1s. :return: int - the length of the longest such subarray. count_map = {0: -1} # Initialize count_map with the count 0 at index -1 max_length = 0 count = 0 for i, num in enumerate(nums): # Increment count for 1 and decrement for 0 count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Construct a Pythonic dictionary structure which contains as its keys the alphabets from a provided string and corresponding frequency of each alphabet as its values. The string is case-sensitive, hence 'a' and 'A' are treated as two separate characters. The string may also contain special characters or numbers.","solution":"def char_frequency(s): Returns a dictionary with keys as characters from the string s and values as their corresponding frequencies. The string is case-sensitive, hence 'a' and 'A' are treated as separate characters. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Given two binary trees, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical and the nodes have the same value.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_same_tree(p, q): Check if two binary trees are the same. if not p and not q: return True if not p or not q: return False return (p.val == q.val) and is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)"},{"question":"Please write a Python function named \\"remove_first_occurrence\\" that takes a list and an element as parameters. The function should remove the first occurrence of the element from the list (if it exists) and return the modified list. If the element is not present in the list, the function should return the original list without any changes.","solution":"def remove_first_occurrence(lst, element): Removes the first occurrence of the element from the list. If the element is not in the list, returns the original list. Parameters: lst (list): The list from which to remove the element. element: The element to remove. Returns: list: The modified list with the first occurrence of the element removed. if element in lst: lst.remove(element) return lst"},{"question":"Write a Python program that implements the birthday attack on an ideal hash function using a hash table data structure.","solution":"import hashlib import random import string def generate_random_string(length=10): Generates a random string of given length. letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(length)) def hash_function(input_string): Returns the hash of the input string using SHA-256. return hashlib.sha256(input_string.encode()).hexdigest() def birthday_attack(hash_table_size=2**16): Performs a birthday attack on an ideal hash function using a hash table. :param hash_table_size: Size of the hash table, default is 2^16. :return: Tuple of two different strings that produce the same hash collision. hash_table = {} collision_attempts = 0 while True: collision_attempts += 1 random_string = generate_random_string(10) hashed_value = hash_function(random_string)[:4] # Limiting hash comparison for brevity if hashed_value in hash_table: return (hash_table[hashed_value], random_string), collision_attempts else: hash_table[hashed_value] = random_string"},{"question":"Write a function to generate the nth Fibonacci number. The function should have a time complexity of O(log n) and use dynamic programming. Additionally, the function should only use a constant amount of space and should not store any intermediate results. You are not allowed to use recursion or iteration.","solution":"def fib(n): Returns the nth Fibonacci number using matrix exponentiation. Time complexity: O(log n) def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_pow(M, p): Raises matrix M to the power of p using exponentiation by squaring. # Result matrix (identity matrix) result = [[1, 0], [0, 1]] base = M while p > 0: if p % 2 == 1: # if p is odd result = matrix_mult(result, base) base = matrix_mult(base, base) p //= 2 return result if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] result = matrix_pow(F, n - 1) return result[0][0]"},{"question":"Create the methods \`add\`, \`subtract\`, \`multiply\`, and \`divide\` inside the Class \`Calculator\`. The methods should take in two numbers as arguments and return the result of the corresponding mathematical operation. The \`divide\` method should also handle division by zero errors and return the string \\"Error: Division by zero is not allowed\\" in such cases. Additionally, the \`multiply\` method should handle multiplication overflow errors and return the string \\"Error: Multiplication result exceeds maximum value\\" if the result is too large to be represented.","solution":"class Calculator: def add(self, a, b): return a + b def subtract(self, a, b): return a - b def multiply(self, a, b): try: result = a * b # Assuming \\"overflow\\" refers to extreme large values handling if isinstance(result, float) and result == float('inf'): return \\"Error: Multiplication result exceeds maximum value\\" return result except OverflowError: return \\"Error: Multiplication result exceeds maximum value\\" def divide(self, a, b): if b == 0: return \\"Error: Division by zero is not allowed\\" return a / b"},{"question":"Is there a way to convert a decimal number to a binary number in Python? I need a function that takes a decimal number as input and returns its binary equivalent as a string.","solution":"def decimal_to_binary(n): Converts a decimal number to binary and returns the binary string. if n == 0: return '0' binary_str = '' while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 return binary_str"},{"question":"Create a Python script snippet that Determines Low Bathing routine: Choosing the Right Water Temperature for Engineer for Beginners. Use if/else or switch/case statements to conditionally perform different actions based on the Consent. Dry-run, then include comments that outline the control flow and how you handle different scenarios.","solution":"def determine_water_temperature(consent): Determines the appropriate water temperature selection for bathing based on the user's consent. Parameters: consent (str): User's consent. Can be \\"low\\", \\"medium\\", or \\"high\\". Returns: str: Recommended water temperature. # Handle different consent levels using if/elif/else statements if consent == \\"low\\": return \\"The water temperature should be set to lukewarm (approximately 90°F to 95°F).\\" elif consent == \\"medium\\": return \\"The water temperature should be set to warm (approximately 100°F to 105°F).\\" elif consent == \\"high\\": return \\"The water temperature should be set to hot (approximately 110°F to 115°F).\\" else: return \\"Invalid consent input. Please choose 'low', 'medium', or 'high'.\\" # Example usage: # result = determine_water_temperature(\\"medium\\") # print(result) # Should print: The water temperature should be set to warm (approximately 100°F to 105°F)."},{"question":"can you provide a python code to read a list from a txt file that has one integer per line?","solution":"def read_integers_from_file(file_path): Reads a list of integers from a TXT file where each integer is on a new line. Parameters: file_path (str): The path to the TXT file. Returns: list of int: List of integers read from the file. integers = [] with open(file_path, 'r') as file: for line in file: line = line.strip() if line.isdigit() or (line.startswith('-') and line[1:].isdigit()): integers.append(int(line)) return integers"},{"question":"Given a string, write a Python function that checks if it is a pangram (a sentence that contains every letter of the alphabet at least once). Additionally, the function should count how many times each letter of the alphabet appears in the string. The function should return a dictionary where the keys are the letters of the alphabet and the values are the counts of each letter in the string. Ignore case sensitivity and exclude non-alphabetical characters.","solution":"import string def is_pangram_and_letter_count(s): Checks if the input string is a pangram and counts the occurrences of each letter in the string. Args: s (str): The input string to be checked. Returns: dict: A dictionary with the letters of the alphabet as keys and their counts as values. alphabet = set(string.ascii_lowercase) letter_count = {letter: 0 for letter in string.ascii_lowercase} for char in s.lower(): if char in alphabet: letter_count[char] += 1 is_pangram = all(letter_count[letter] > 0 for letter in alphabet) if is_pangram: result = {'is_pangram': True} else: result = {'is_pangram': False} result.update(letter_count) return result"},{"question":"subtree of a binary search tree with the specified minimum and maximum values. Additionally, the solution should ensure that the subtree includes all the keys within the specified range. You are provided with a piece of erroneous code as a starting point, and you need to identify and fix the issues to meet the requirements.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def trim_bst(tree, min_val, max_val): Trims a binary search tree so that all its elements are within the range [min_val, max_val], inclusive. All the keys in the new tree remain in the original relative order. :param tree: The root node of the BST. :param min_val: The minimum value of the range. :param max_val: The maximum value of the range. :return: The root node of the trimmed BST. if not tree: return None if tree.key < min_val: return trim_bst(tree.right, min_val, max_val) if tree.key > max_val: return trim_bst(tree.left, min_val, max_val) tree.left = trim_bst(tree.left, min_val, max_val) tree.right = trim_bst(tree.right, min_val, max_val) return tree"},{"question":"Given the erroneous piece of Python code as a basis, identify the bugs and modify the function such that it calculates the sum of all odd numbers up to a given number, not including that number itself. You will also need to implement unit tests to check the correctness of your solution.","solution":"def sum_of_odds(n): Returns the sum of all odd numbers up to (but not including) n. return sum(i for i in range(n) if i % 2 == 1)"},{"question":"i have a device called SigFox that sends data every hour, but they accept just packet less than 140 bytes, i would like to send a json with this format {\\"value\\":1234} but sometimes the value has decimal places like 123.456, how can i write a python function to reduce the numbers of decimal places in a max of 3 when the json size is 130 bytes to ensure it wouldn't pass the 140 bytes limit after adding other data in the json?","solution":"import json def adjust_json_payload(json_obj): Adjusts the JSON payload by reducing the number of decimal places in the 'value' field to ensure the JSON size does not exceed 130 bytes. json_str = json.dumps(json_obj) # If the JSON size is already within the limit, return unchanged if len(json_str) <= 130: return json_obj # Reduce number of decimal places until the JSON size fits the limit if isinstance(json_obj['value'], float): for decimals in range(3, -1, -1): json_obj['value'] = round(json_obj['value'], decimals) json_str = json.dumps(json_obj) if len(json_str) <= 130: break return json_obj"},{"question":"Modify the following code to implement a function called \\"findSmallestPrime\\" that takes in an array of integers as a parameter and returns the smallest prime number in the array. The function should also remove any duplicates from the array before searching for the smallest prime number. If no prime number is found, the function should return -1. Additionally, the function should be implemented using recursion instead of iteration.","solution":"def is_prime(n, i=2): Helper function to determine if a number is prime. Uses recursion to check divisibility. if n <= 1: return False if i * i > n: return True if n % i == 0: return False return is_prime(n, i + 1) def findSmallestPrime(arr): Returns the smallest prime number in the array. Removes duplicates from the array before searching. Uses recursion for prime identification. # Remove duplicates arr = list(set(arr)) def find_smallest_prime_in_list(arr, smallest=None): if not arr: return smallest if smallest is not None else -1 head, *rest = arr if is_prime(head): if smallest is None or head < smallest: smallest = head return find_smallest_prime_in_list(rest, smallest) return find_smallest_prime_in_list(arr)"},{"question":"Write a function titled \\"calculate_odd_squares_sum\\" that takes an integer parameter n and returns the sum of the squares of the first n odd natural numbers. Additionally, the function should include a check to ensure that the input is a positive integer. If the input is not a positive integer, the function should raise a ValueError.","solution":"def calculate_odd_squares_sum(n): Returns the sum of the squares of the first n odd natural numbers. If n is not a positive integer, raises a ValueError. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") odd_numbers = [i for i in range(1, 2*n, 2)] return sum(i**2 for i in odd_numbers)"},{"question":"Create a Python function that accepts two integer arguments, x and y, and returns their sum. However, you should intentionally include a bug in the code that will cause the function to return the wrong result under certain conditions. Additionally, the function should print a message stating the function's name and the current operation being performed, whenever it is called.","solution":"def buggy_add(x, y): Returns the sum of x and y, with an intentional bug. Prints the function's name and the current operation. print(f\\"Function Name: buggy_add, Operation: Adding {x} and {y}\\") if x > 0 and y > 0: return x + y + 1 # Intentional bug: adding 1 to the result when both x and y are positive return x + y"},{"question":"Write function in Python to extract all the numbers from a given string and return them as a list.","solution":"import re def extract_numbers_from_string(s): Extracts all numbers from the given string and returns them as a list of integers. Parameters: s (str): The input string from which numbers are to be extracted. Returns: List[int]: A list of integers extracted from the input string. return list(map(int, re.findall(r'd+', s)))"},{"question":"Write a recursive function to calculate the nth Fibonacci number. The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0, and 1. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. The function should take an integer n as input and return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 0 if n == 1: return 1 return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Program a function that takes a list of integers as an argument and returns one random number from the list. However, the function should not use any built-in random number generator functions or libraries and should instead implement its own random number generation algorithm. Additionally, the function should ensure that the generated random number is unique and not equal to any of the numbers in the input list.","solution":"def custom_random_number(exclude_list): Returns a random number that is not in the exclude_list using a custom random number generation technique. The random number is always greater than zero and should not be one of the excluded numbers. # Setting initial parameters for LCG a = 1103515245 c = 12345 m = 2**31 seed = sum(exclude_list) # Simple seed based on the sum of the list elements while True: seed = (a * seed + c) % m num = seed % m if num not in exclude_list and num > 0: return num"},{"question":"Assemble a function using Python programming language that accepts two numerical arguments and provides the mathematical multiplication result of these two arguments.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Use the inputs provided to write a python code to check if it's a leap year. Additionally, write tests for your function to ensure accuracy, and optimize the function for performance.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, False otherwise. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Create the source code for a function that takes an integer as an argument and returns the absolute value of the integer.","solution":"def absolute_value(n): Returns the absolute value of the given integer. if n < 0: return -n return n"},{"question":"Write a code for creating an array of n elements with values ranging from 0 to n-1.","solution":"def create_array(n): Returns an array of n elements with values ranging from 0 to n-1. return list(range(n))"},{"question":"Using the programming language Python, write a function that takes in two arguments, a list of integers and a string representing an arithmetic operation, and returns the result of the operation. The list of integers should contain at least three values, and the arithmetic operation should be randomly selected from a list of operations that includes addition, subtraction, multiplication, division, and exponentiation. The function should also include error handling for any invalid inputs. Use this function to evaluate the following arithmetic expression: 8 + 10 * 2.","solution":"import operator import random from functools import reduce def evaluate_expression(numbers, operation): Evaluates an arithmetic operation over a list of integers. The operation can be addition, subtraction, multiplication, division, or exponentiation. :param numbers: List of integers, must contain at least 3 values :param operation: A string representing the arithmetic operation to perform ('add', 'sub', 'mul', 'div', 'pow') :return: The result of performing the operation over the list of numbers :raises ValueError: If the list contains less than 3 integers or if an invalid operation is passed if len(numbers) < 3: raise ValueError(\\"The list of integers must contain at least 3 values.\\") operations = { 'add': operator.add, 'sub': operator.sub, 'mul': operator.mul, 'div': operator.truediv, 'pow': operator.pow, } if operation not in operations: raise ValueError(\\"Invalid operation. Supported operations: 'add', 'sub', 'mul', 'div', 'pow'.\\") try: result = reduce(operations[operation], numbers) return result except ZeroDivisionError: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") # Example usage to evaluate the expression 8 + 10 * 2. numbers = [8, 10, 2] operation = random.choice(['add', 'sub', 'mul', 'div', 'pow']) print(f\\"Operation: {operation}, Result: {evaluate_expression(numbers, operation)}\\")"},{"question":"Given a binary tree data structure, write a program to find the maximum depth of the tree. Additionally, implement a function to check if the tree is balanced. A balanced tree is defined as a binary tree in which the height of the left and right subtrees of every node differ by not more than 1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Computes the maximum depth of the binary tree. if not root: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1 def is_balanced(root): Checks if the binary tree is balanced. def check(node): if not node: return 0, True left_depth, left_balanced = check(node.left) right_depth, right_balanced = check(node.right) current_balanced = left_balanced and right_balanced and abs(left_depth - right_depth) <= 1 current_depth = max(left_depth, right_depth) + 1 return current_depth, current_balanced _, balanced = check(root) return balanced"},{"question":"Write a function in Python that takes an integer as an input and prints the number of digits in the integer, without using any built-in string or mathematical functions, except for basic arithmetic operations.","solution":"def count_digits(n): Returns the number of digits in the given integer n. # Handle negative numbers if n < 0: n = -n # Handle the case where the number is zero if n == 0: return 1 count = 0 while n > 0: n //= 10 count += 1 return count"},{"question":"Modify a given code implementing list comprehension that generates a list of prime numbers from a given list of numbers. Additionally, introduce error handling for non-integer types and negative numbers. Also incorporate functionality to filter out unique prime numbers if the given list has duplicate values.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_unique_primes(lst): Filter out unique prime numbers from the given list. Also handles non-integer and negative numbers. Args: lst: list of numbers Returns: List of unique prime numbers filtered from the input list if not isinstance(lst, list): raise ValueError(\\"Input should be a list\\") unique_primes = list({x for x in lst if isinstance(x, int) and x > 0 and is_prime(x)}) return sorted(unique_primes) # Sorting for predictable order in tests"},{"question":"Imagine you have a dataset containing information about various species of birds, including their common name, scientific name, average lifespan, and average wingspan. Write a Python program that allows users to search for information about a specific bird species based on its common name or scientific name. The program should display the bird's lifespan and wingspan when found. If the user inputs an invalid bird name, the program should display an error message and allow the user to try again. Additionally, the program should provide the option to add new bird species to the dataset.","solution":"class BirdDatabase: def __init__(self): self.bird_data = {} def add_bird(self, common_name, scientific_name, lifespan, wingspan): self.bird_data[common_name.lower()] = { \\"scientific_name\\": scientific_name, \\"lifespan\\": lifespan, \\"wingspan\\": wingspan } self.bird_data[scientific_name.lower()] = { \\"common_name\\": common_name, \\"lifespan\\": lifespan, \\"wingspan\\": wingspan } def search_bird(self, bird_name): bird_name = bird_name.lower() if bird_name in self.bird_data: return self.bird_data[bird_name] else: return None"},{"question":"Write a Python function which receives a list of numbers and for each number, checks if it is divisible by 5. If it is, it should append the text \\"Good Day\\" to a new list. In the end, the function should return the new list. Also, the function should handle any potential exceptions and notify the user if a non-numeric value is found in the list.","solution":"def check_divisibility(numbers): For each number in the input list, checks if it is divisible by 5, and appends \\"Good Day\\" to a new list if it is. Args: numbers (list): A list of numbers. Returns: list: A list containing \\"Good Day\\" for each number divisible by 5. If a non-numeric value is encountered, it returns an error message. result = [] for num in numbers: try: if int(num) % 5 == 0: result.append(\\"Good Day\\") except ValueError: return \\"Error: Non-numeric value found\\" return result"},{"question":"Create a python script that filters out all negative numbers from a given list and returns a new list of only positive numbers, sorted in ascending order. The script should also remove duplicate numbers from the list and should be able to handle large lists with up to 1 million elements efficiently. The input list should be provided as a command line argument and should be in the format of a comma-separated string of integers. Additionally, the script should output the number of unique positive numbers found in the input list and the number of negative numbers removed.","solution":"import sys def filter_and_sort_positive_numbers(input_list): Filters out negative numbers and returns a list of unique positive numbers sorted in ascending order. Parameters: input_list (list): List of integers. Returns: tuple: Tuple containing the list of sorted positive numbers, count of unique positive numbers, and count of negative numbers. positive_numbers = set() negative_count = 0 for num in input_list: if num >= 0: positive_numbers.add(num) else: negative_count += 1 sorted_positive_numbers = sorted(positive_numbers) unique_positive_count = len(sorted_positive_numbers) return (sorted_positive_numbers, unique_positive_count, negative_count) def process_input(input_string): Processes the input string, applies filter_and_sort_positive_numbers function, and prints the result. Parameters: input_string (str): Comma-separated string of integers. input_list = list(map(int, input_string.split(','))) sorted_positive_numbers, unique_positive_count, negative_count = filter_and_sort_positive_numbers(input_list) print(f\\"Sorted Positive Numbers: {sorted_positive_numbers}\\") print(f\\"Number of Unique Positive Numbers: {unique_positive_count}\\") print(f\\"Number of Negative Numbers Removed: {negative_count}\\") if __name__ == \\"__main__\\": input_string = sys.argv[1] process_input(input_string)"},{"question":"Given a list of lists, generate a single flattened list. However, you must solve this problem without using any built-in functions or methods that directly flatten a list. Additionally, the solution should have a time complexity of O(n) and use only constant extra space.","solution":"def flatten_list_of_lists(nested_list): Flattens a list of lists into a single list. Args: nested_list (list of lists): A list where each element is a list. Returns: list: A flattened list containing all elements of the nested lists. flattened = [] for sublist in nested_list: for item in sublist: flattened.append(item) return flattened"},{"question":"Create an algorithm that sorts an array of words in alphabetical order, but also prioritizes words that start with a vowel. The algorithm should have a time complexity of O(n log n), but you are not allowed to use any built-in sorting functions or libraries. The words in the array will only contain lowercase letters and will not have any duplicates.","solution":"def sort_words_with_priority(words): Sorts an array of words in alphabetical order, but prioritizes words that start with a vowel. def is_vowel(word): return word[0] in 'aeiou' def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result words = merge_sort(words) vowels = [word for word in words if is_vowel(word)] consonants= [word for word in words if not is_vowel(word)] return vowels + consonants"},{"question":"Write a function called \\"print_diagonal_matrix\\" that takes in a positive integer \\"size\\" as a parameter. The function should print a diagonal matrix of size \\"size\\" using asterisks (*) as the elements on the diagonal and spaces as the elements off the diagonal.","solution":"def print_diagonal_matrix(size): Prints a diagonal matrix of the specified size. Parameters: size (int): The size of the matrix. for i in range(size): for j in range(size): if i == j: print('*', end='') else: print(' ', end='') print()"},{"question":"Build a program to calculate the shortest path between two points in a 3D space, avoiding obstacles represented by a set of 3D polygons. The program should take as input the coordinates of the start and end points, as well as the vertices of the polygons, and output the shortest path as a list of 3D points.","solution":"import heapq from collections import defaultdict from typing import List, Tuple class Graph: def __init__(self): self.edges = defaultdict(list) def add_edge(self, from_node, to_node, weight): self.edges[from_node].append((to_node, weight)) self.edges[to_node].append((from_node, weight)) def heuristic(a, b): return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 + (a[2] - b[2]) ** 2) ** 0.5 def astar(graph, start, goal): priority_queue = [] heapq.heappush(priority_queue, (0, start)) came_from = {} cost_so_far = {start: 0} while priority_queue: _, current = heapq.heappop(priority_queue) if current == goal: path = [] while current: path.append(current) current = came_from.get(current) return path[::-1] for neighbor, weight in graph.edges[current]: new_cost = cost_so_far[current] + weight if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]: cost_so_far[neighbor] = new_cost priority = new_cost + heuristic(goal, neighbor) heapq.heappush(priority_queue, (priority, neighbor)) came_from[neighbor] = current return [] def shortest_path_3d(start: Tuple[int, int, int], end: Tuple[int, int, int], obstacles: List[List[Tuple[int, int, int]]]) -> List[Tuple[int, int, int]]: graph = Graph() for polygon in obstacles: for i in range(len(polygon)): for j in range(i + 1, len(polygon)): graph.add_edge(polygon[i], polygon[j], heuristic(polygon[i], polygon[j])) graph.add_edge(start, end, heuristic(start, end)) path = astar(graph, start, end) return path"},{"question":"Write a piece of code in Python to print out the first n Fibonacci numbers, but ensure that the program can handle n being a negative number or zero by returning an error message. Additionally, implement the program as a recursive function instead of using iterative loops.","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers. If n is zero or negative, returns an error message. if n <= 0: return \\"Input must be a positive integer.\\" def fib_recursive(m): if m == 1: return [0] elif m == 2: return [0, 1] else: seq = fib_recursive(m - 1) return seq + [seq[-1] + seq[-2]] return fib_recursive(n)"},{"question":"Given two sets, SetA and SetB, write a function in Python to find their intersection.","solution":"def intersection(setA, setB): Returns the intersection of two sets, setA and setB. return setA.intersection(setB)"},{"question":"Write a python function that takes two sorted lists of integers, x and y, of lengths m and n respectively. The function should return the median of the two sorted arrays. The solution should be as efficient as possible.","solution":"def find_median_sorted_arrays(x, y): Finds the median of two sorted arrays x and y. Args: x: List of sorted integers. y: List of sorted integers. Returns: float: The median of the two sorted arrays. # Make sure x is the smaller array for efficient binary search if len(x) > len(y): x, y = y, x m, n = len(x), len(y) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and x[i] < y[j - 1]: # i is too small, increase it imin = i + 1 elif i > 0 and x[i - 1] > y[j]: # i is too large, decrease it imax = i - 1 else: # i is perfect if i == 0: max_of_left = y[j - 1] elif j == 0: max_of_left = x[i - 1] else: max_of_left = max(x[i - 1], y[j - 1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = y[j] elif j == n: min_of_right = x[i] else: min_of_right = min(x[i], y[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"Write a function in Python that takes two parameters, both lists of integers, and returns the sum of the absolute difference between elements of the two lists at the same index (like a Manhatten Distance measure between two points). If the lists are of different lengths, consider the extra elements of the longer list as having a counterpart of 0 in the shorter list.","solution":"def sum_of_absolute_differences(list1, list2): Calculates the sum of the absolute differences between elements of the two lists at the same index. If the lists are of different lengths, considers the extra elements of the longer list as having a counterpart of 0 in the shorter list. length1 = len(list1) length2 = len(list2) max_length = max(length1, length2) total_diff = 0 for i in range(max_length): if i < length1: val1 = list1[i] else: val1 = 0 if i < length2: val2 = list2[i] else: val2 = 0 total_diff += abs(val1 - val2) return total_diff"},{"question":"Please write a program in Python which reads a list of integers from stdin, and prints out the median of the list of integers.","solution":"def median_of_list(numbers): Returns the median of a list of numbers. :param numbers: list of integers :return: median value numbers.sort() n = len(numbers) if n % 2 == 0: # If even, median is the average of the two middle numbers median_value = (numbers[n//2 - 1] + numbers[n//2]) / 2 else: # If odd, median is the middle number median_value = numbers[n//2] return median_value"},{"question":"Create a loop that prints out the prime numbers from the given list in reverse order. However, before printing each number, check if it is a multiple of 3. If it is a multiple of 3, skip it and move on to the next number. After printing all the prime numbers, also print the count of prime numbers that are multiples of 3.","solution":"def print_primes_in_reverse(primes): Print prime numbers in reverse order from the given list skipping those which are multiples of 3. Also, print the count of prime numbers that are multiples of 3. count_multiples_of_3 = 0 to_print = [] # Iterate through the list in reverse for prime in reversed(primes): if prime % 3 == 0: count_multiples_of_3 += 1 else: to_print.append(prime) # Printing the primes that are not multiples of 3 for num in to_print: print(num) # Printing the count of primes that are multiples of 3 print(\\"Count of prime numbers that are multiples of 3:\\", count_multiples_of_3)"},{"question":"Create a code to sort a list of strings based on the length of the strings, but ignore any strings that start with a vowel.","solution":"def sort_strings_by_length_ignore_vowels(strings): Sort a list of strings based on their length, ignoring strings that start with a vowel. Parameters: strings (list): List of strings to be sorted. Returns: list: A new list of sorted strings not starting with a vowel. vowels = 'aeiouAEIOU' filtered_strings = [s for s in strings if not s[0] in vowels] return sorted(filtered_strings, key=len)"},{"question":"Write a function to find the Maximum Depth of a Binary Tree. Also, write a function to determine the path leading to the node that has this maximum depth. You should be able to handle cases where the binary tree is skewed, i.e., every node has only one child, and also balanced, where every node has either 0, 1, or 2 children.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def max_depth(root): Finds the maximum depth of a binary tree. if not root: return 0 return max(max_depth(root.left), max_depth(root.right)) + 1 def max_depth_path(root): Finds the path leading to the node with the maximum depth. if not root: return (0, []) left_depth, left_path = max_depth_path(root.left) right_depth, right_path = max_depth_path(root.right) if left_depth > right_depth: return (left_depth + 1, [root.val] + left_path) else: return (right_depth + 1, [root.val] + right_path)"},{"question":"Create a script in Python that takes a set of numbers and returns a list of all possible combinations that add up to a given target number.","solution":"def combination_sum(nums, target): Returns all unique combinations of nums that add up to the target. Each number in nums can be used multiple times in the combination. result = [] def backtrack(remaining, combination, start): if remaining == 0: result.append(list(combination)) return elif remaining < 0: return for i in range(start, len(nums)): combination.append(nums[i]) backtrack(remaining - nums[i], combination, i) combination.pop() nums.sort() backtrack(target, [], 0) return result"},{"question":"Create a function to simulate a coin flip and return either \\"Heads\\" or \\"Tails\\" as a result.","solution":"import random def coin_flip(): Simulates a coin flip and returns 'Heads' or 'Tails'. return \\"Heads\\" if random.randint(0, 1) == 0 else \\"Tails\\""},{"question":"Import the \\"sys\\" module and set a recursion limit of 1500. Then, create a function called \\"calculate_factorial\\" that takes an integer \\"n\\" as input. Inside the function, check if the input is equal to 0 or 1. If it is, return 1. Otherwise, return the product of \\"n\\" and a recursive call to \\"calculate_factorial\\" with \\"n-1\\" as the argument. Finally, outside the function, call \\"calculate_factorial\\" with the integer 5 as the argument and print the result.","solution":"import sys # Set recursion limit to 1500 sys.setrecursionlimit(1500) def calculate_factorial(n): Returns the factorial of the given integer n. if n == 0 or n == 1: return 1 else: return n * calculate_factorial(n - 1) # Call the function with 5 and print the result result = calculate_factorial(5) print(result)"},{"question":"Given a piece of string s, write a Python function to check if any permutation of the string is a palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Returns True if any permutation of the string s can be a palindrome, otherwise False. count = Counter(s) odd_count = sum(1 for k, v in count.items() if v % 2 != 0) return odd_count <= 1"},{"question":"Implement a quicksort algorithm in Python to sort a list of 100,000 randomly generated integers between -1,000,000 and 1,000,000. You must use a recursive approach and cannot use any built-in sorting functions or libraries. Additionally, the sorting algorithm should have a time complexity of O(n log n) and a space complexity of O(log n).","solution":"def quicksort(arr): Sorts an array using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a Python program to generate random complex numbers with a given phase angle and within a given range for their magnitudes, using only basic arithmetic operations, random module, and without using complex number built-in functions or classes.","solution":"import random import math def generate_random_complex(phase_angle, magnitude_range): Generates a random complex number with a given phase angle and within a given range for their magnitudes. phase_angle: The phase angle in radians. magnitude_range: A tuple (min_magnitude, max_magnitude) specifying the range for magnitudes. Returns: A tuple (real, imaginary) representing the real and imaginary parts of the complex number. min_magnitude, max_magnitude = magnitude_range magnitude = random.uniform(min_magnitude, max_magnitude) real_part = magnitude * math.cos(phase_angle) imaginary_part = magnitude * math.sin(phase_angle) return (real_part, imaginary_part)"},{"question":"In which scenarios is the use of a linked list data structure advantageous compared to using an array? Additionally, implement a linked list in your programming language of choice and demonstrate its superiority in one of those scenarios.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last_node = self.head while last_node.next: last_node = last_node.next last_node.next = new_node def delete_by_value(self, value): current_node = self.head # If the node to be deleted is the head if current_node and current_node.data == value: self.head = current_node.next current_node = None return previous = None while current_node and current_node.data != value: previous = current_node current_node = current_node.next if current_node is None: return previous.next = current_node.next current_node = None def display(self): elems = [] current_node = self.head while current_node: elems.append(current_node.data) current_node = current_node.next return elems"},{"question":"Assume you are handling three python dictionary structures denoted as delta, gamma, and omega. Write a python script that merges these three dictionaries into a single dictionary called alpha while maintaining the uniqueness of the keys. Your solution should accommodate situations where one or more dictionaries might have the same key, in which case, the values corresponding to these keys should be aggregated into a list.","solution":"def merge_dictionaries(delta, gamma, omega): Merges three dictionaries into one, aggregating values into lists if keys overlap. Parameters: delta (dict): First dictionary. gamma (dict): Second dictionary. omega (dict): Third dictionary. Returns: dict: Merged dictionary with unique keys and aggregated lists for overlapping keys. merged = {} for dictionary in (delta, gamma, omega): for key, value in dictionary.items(): if key in merged: if not isinstance(merged[key], list): merged[key] = [merged[key]] merged[key].append(value) else: merged[key] = value return merged"},{"question":"Generate code for a REST API that allows users to manage a simple database of books. The API should support GET, POST, PUT and DELETE requests and should be able to store and retrieve data about books with fields such as title, author, genre and year of publication.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) # In-memory database to store books books_db = [] @app.route('/books', methods=['GET']) def get_books(): return jsonify(books_db), 200 @app.route('/books', methods=['POST']) def add_book(): new_book = request.json books_db.append(new_book) return jsonify(new_book), 201 @app.route('/books/<int:book_id>', methods=['PUT']) def update_book(book_id): updated_book = request.json for i, book in enumerate(books_db): if i == book_id: books_db[i] = updated_book return jsonify(updated_book), 200 return jsonify({\\"error\\": \\"Book not found\\"}), 404 @app.route('/books/<int:book_id>', methods=['DELETE']) def delete_book(book_id): if 0 <= book_id < len(books_db): del books_db[book_id] return jsonify({\\"message\\": \\"Book deleted\\"}), 200 return jsonify({\\"error\\": \\"Book not found\\"}), 404 if __name__ == '__main__': app.run(debug=True)"},{"question":"Given an unsorted array of integers, sort it using the quick sort algorithm. However, you are not allowed to use any built-in sorting functions or libraries. Additionally, the algorithm should be implemented in a recursive manner.","solution":"def quick_sort(arr): Sorts an unsorted array of integers using the quick sort algorithm without using any built-in sorting functions or libraries. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] less_than_pivot = [x for x in arr if x < pivot] equal_to_pivot = [x for x in arr if x == pivot] greater_than_pivot = [x for x in arr if x > pivot] return quick_sort(less_than_pivot) + equal_to_pivot + quick_sort(greater_than_pivot)"},{"question":"Write a Python program to find the longest palindromic substring in a given string. Your solution should have a time complexity of O(n^2) or better.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if s == \\"\\" or len(s) == 1: return s start, max_length = 0, 1 def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < len(s) and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(len(s)): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i+1) # Even length palindromes return s[start:start + max_length]"},{"question":"Write two functions. The first function should take in a list of numbers and return the sum of the absolute values of those numbers. The second function should take in a list of numbers and a threshold value, and return the sum of the absolute values of the numbers that are greater than the threshold. Implement these two functions without using built-in Python functions for sum or abs.","solution":"def sum_of_absolute_values(numbers): Returns the sum of the absolute values of the numbers in the list. total = 0 for num in numbers: if num < 0: total += -num else: total += num return total def sum_of_absolute_values_above_threshold(numbers, threshold): Returns the sum of the absolute values of the numbers in the list that are greater than the threshold. total = 0 for num in numbers: abs_value = -num if num < 0 else num if abs_value > threshold: total += abs_value return total"},{"question":"How can I create a Multi-level dictionary with varying depth based on a given structure with predefined keys and value types in Python? The structure should be able to define the depth of sub-dictionaries and the type of values they hold. For instance, I want to create a dictionary where the top level has string keys and integer values, the next level has string keys and float values, and the subsequent level has string keys and string values. How can I accomplish this with Python? Also, provide an example of inserting a value into this multi-level dictionary and retrieving it.","solution":"def create_multilevel_dict(structure): Creates a multi-level dictionary based on the provided structure. Parameters: structure (list) : A list where each element is a tuple of (key type, value type) Returns: dict: A multi-level dictionary with the specified structure. if not structure: return None key_type, value_type = structure[0] def create_level(level_structure, depth=0): if depth >= len(level_structure): return value_type() next_key_type, next_value_type = level_structure[depth] return {next_key_type(): create_level(level_structure, depth + 1)} return {key_type(): create_level(structure, 1)} # Example: structure = [(str, int), (str, float), (str, str)] multi_level_dict = create_multilevel_dict(structure) # Example of inserting a value: multi_level_dict[\\"level1_key\\"] = {\\"level2_key\\": {\\"level3_key\\": \\"value\\"}} # Example of retrieving a value: retrieved_value = multi_level_dict[\\"level1_key\\"][\\"level2_key\\"][\\"level3_key\\"] # Example outputs: print(multi_level_dict) # {'level1_key': {'level2_key': {'level3_key': ''}}} print(retrieved_value) # 'value'"},{"question":"Construct a Python function that accepts two lists composed of sublists as parameters. The function should not only assess whether the initial list is a subset of the second list, but also specifically determine if every sublist in the first list is a subset of any of the sublists in the second list. The function should take into account the multiplicity of elements in the sublists. Remember that an empty list constitutes a subset of any list, but not vice versa. The method should return \`True\` if all conditions are fulfilled, and \`False\` otherwise.","solution":"def is_subset_of_sublists(list1, list2): Checks if every sublist in list1 is a subset of any of the sublists in list2. Parameters: list1 (list of lists): The first list composed of sublists. list2 (list of lists): The second list composed of sublists. Returns: bool: True if each sublist in list1 is a subset of any of the sublists in list2, False otherwise. def is_subset(sublist1, sublist2): Helper function to check if sublist1 is a subset of sublist2 taking multiplicity into account. sublist1_count = {item: sublist1.count(item) for item in sublist1} sublist2_count = {item: sublist2.count(item) for item in sublist2} for item in sublist1_count: if sublist1_count[item] > sublist2_count.get(item, 0): return False return True for sublist1 in list1: if not any(is_subset(sublist1, sublist2) for sublist2 in list2): return False return True"},{"question":"we have a binary tree, where each node has a integer value, how do we level order traversal (left to right) and print out the nodes' value.","solution":"from collections import deque class TreeNode: Definition for a binary tree node. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): Returns the level order traversal (left to right) of the binary tree's nodes' values. if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Complete the given snippet with code that finds the maximum difference between two elements in a list, where the second element comes after the first one. Return this maximum difference and the indices of these two elements as a tuple. Additionally, create a function that checks the correctness of your solution using provided data points.","solution":"def max_difference(arr): Finds the maximum difference between two elements in a list where the second element comes after the first. Returns a tuple containing the maximum difference and the indices of these two elements. if len(arr) < 2: return (0, -1, -1) # Not enough elements to form a valid difference # Initialize variables max_diff = arr[1] - arr[0] min_element_index = 0 max_diff_indices = (0, 1) for i in range(1, len(arr)): current_diff = arr[i] - arr[min_element_index] if current_diff > max_diff: max_diff = current_diff max_diff_indices = (min_element_index, i) if arr[i] < arr[min_element_index]: min_element_index = i return (max_diff, max_diff_indices[0], max_diff_indices[1])"},{"question":"Is there a way to write a Python program that can determine if a given number appears more than twice in a given list? Can you provide a detailed solution and example code?","solution":"def appears_more_than_twice(numbers, target): Determines if the target number appears more than twice in the list of numbers. Parameters: numbers (list of int): The list of numbers to be checked. target (int): The number to check the occurrence of. Returns: bool: True if the target appears more than twice, False otherwise. count = 0 for number in numbers: if number == target: count += 1 if count > 2: return True return False"},{"question":"Write a Python function to check whether a given list of strings is a palindrome or not. A list is considered a palindrome if it reads the same backward as forward. For example, [\\"racecar\\", \\"level\\"] is a palindrome list.","solution":"def is_palindrome_list(lst): Checks whether the given list of strings is a palindrome. A list is considered a palindrome if it reads the same backward as forward. Args: lst (list of str): List of strings to be checked. Returns: bool: True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Write a Python program that finds the maximum subarray of an array that represents the number of customers who entered a store every hour for a week. Your program should consider the number of customers outside the store as negative when they are waiting to enter, and zero when the store is closed. The goal is to find the subarray with the maximum sum that represents the busiest period of time when customers were either entering or waiting to enter the store.","solution":"def max_subarray_customers(customers): Find the maximum subarray sum of customer counts. This uses Kadane's Algorithm to find the maximum sum of a contiguous subarray. :param customers: List of integers representing the number of customers every hour for a week. :return: Tuple containing maximum sum and the subarray representing the busiest period. if not customers: return 0, [] max_ending_here = max_so_far = customers[0] start = end = s = 0 for i in range(1, len(customers)): if customers[i] > max_ending_here + customers[i]: max_ending_here = customers[i] s = i else: max_ending_here += customers[i] if max_ending_here > max_so_far: max_so_far = max_ending_here start = s end = i return max_so_far, customers[start:end+1]"},{"question":"Given the following Python code snippet that supposedly implements a binary search algorithm to find the index of a target value in a sorted list, but there's something wrong with it. It doesn't work as expected. Your task is to identify the error in the given code, correct it, and enhance it by implementing a function that will return all occurrences of the target value if it exists multiple times in the sorted list.","solution":"def binary_search_all_occurrences(nums, target): Returns a list of the indices of all occurrences of target in nums. :param nums: A list of sorted integers. :param target: The integer to search for. :return: A list of indices where target exists in nums. def binary_search_left(nums, target): left, right = 0, len(nums) - 1 index = -1 while left <= right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: if nums[mid] == target: index = mid right = mid - 1 return index def binary_search_right(nums, target): left, right = 0, len(nums) - 1 index = -1 while left <= right: mid = (left + right) // 2 if nums[mid] > target: right = mid - 1 else: if nums[mid] == target: index = mid left = mid + 1 return index left_index = binary_search_left(nums, target) if left_index == -1: return [] right_index = binary_search_right(nums, target) return list(range(left_index, right_index + 1))"},{"question":"Merge the following two lists into a dictionary in Python, but only include elements from list1 that have corresponding elements in list2. The elements in list1 and list2 are not necessarily in the same order. Additionally, the solution should handle cases where list1 and list2 have duplicate elements, ensuring that all matching elements are included in the final dictionary.","solution":"def merge_lists_to_dict(list1, list2): Merges two lists into a dictionary, but only include elements from list1 that have corresponding elements in list2. The elements in list1 and list2 are not necessarily in the same order. The solution will handle cases where list1 and list2 have duplicate elements, ensuring that all matching elements are included in the final dictionary. Example: list1 = ['a', 'b', 'c', 'a'] list2 = [1, 2, 3, 1] Returns: { 'a': [1, 1], 'b': [2], 'c': [3] } result = {} list2_counts = {x: list2.count(x) for x in set(list2)} for elem in list1: if elem in list2_counts and list2_counts[elem] > 0: result.setdefault(elem, []).append(elem) list2_counts[elem] -= 1 return result"},{"question":"Write a function to extract the substring between two given indices of a string. If the start index is greater than the end index, swap the indices and return the substring. If either index is out of range (less than 0 or greater than the length of the string), return an empty string. If both indices are out of range, return None. Additionally, handle cases where the input string is None or an empty string by returning None or an empty string, respectively. Your solution should have a time complexity of O(n), where n is the length of the string.","solution":"def extract_substring(s, start_idx, end_idx): Extract the substring from the string s between start_idx and end_idx. If start_idx > end_idx, swap the indices. If either index is out of range, return an empty string. If both indices are out of range, return None. If s is None, return None. If s is an empty string, return an empty string. # Handle None input if s is None: return None # Handle empty string input if s == \\"\\": return \\"\\" # Check if both indices are out of range if (start_idx < 0 or start_idx >= len(s)) and (end_idx < 0 or end_idx >= len(s)): return None # Swap indices if start_idx is greater than end_idx if start_idx > end_idx: start_idx, end_idx = end_idx, start_idx # Adjust indices if they are out of range start_idx = max(0, start_idx) end_idx = min(len(s), end_idx) return s[start_idx:end_idx]"},{"question":"Given a list of numbers and the length n, write a Python program to add the elements with its next element in the list, but only for the first m elements, where m is a given number. Then, return the resulting list.","solution":"def add_elements(lst, m): Adds each element with its next element in the list, only for the first m elements. Parameters: lst (list): The list of numbers. m (int): The number of elements to process. Returns: list: The resulting list after adding each element with its next element for the first m elements. result = [] for i in range(min(m, len(lst) - 1)): result.append(lst[i] + lst[i + 1]) return result"},{"question":"Codify a Python subroutine that undertakes the task of performing subtraction between two unique numerical integers, providing the resultant difference value.","solution":"def subtract(a, b): Returns the difference when b is subtracted from a. return a - b"},{"question":"Use the following input to write a python code to calculate the area of a triangle. The base of the triangle is 'b' and the height of the triangle is 'h'. The values for 'b' and 'h' are provided as a list of tuples where each tuple contains the base and height of a triangle. Your code should be able to calculate the area of each triangle and return the results as a list. Input: [(4, 6), (5, 7), (10, 8)].","solution":"def calculate_triangle_areas(triangles): Returns a list of areas for the given list of triangles. Each triangle is represented as a tuple with base (b) and height (h). return [0.5 * b * h for b, h in triangles] # Example usage: # triangles = [(4, 6), (5, 7), (10, 8)] # areas = calculate_triangle_areas(triangles) # print(areas) # Output: [12.0, 17.5, 40.0]"},{"question":"Develop an algorithm in Python to delete an element from a given list at a specified index, without using any built-in functions or methods that directly delete or manipulate the list, and without using any additional data structures. Additionally, ensure that the time complexity of your algorithm is O(n), where n is the length of the list.","solution":"def delete_element(arr, index): Delete the element at the specified index from the list without using any built-in functions that directly delete or manipulate the list. The time complexity should be O(n). :param arr: List of elements. :param index: Index of the element to delete. :return: Modified list with the element at the specified index removed. n = len(arr) # Edge case: If index is out of bounds, return the original list if index < 0 or index >= n: return arr # Shift elements to the left from the specified index for i in range(index, n - 1): arr[i] = arr[i + 1] # Remove the last element by making the list one element shorter arr = arr[:-1] return arr"},{"question":"Write a Python function to check if a given string is a palindrome or not, but without using any string manipulation or comparison methods (such as slicing, reversing, or using == or any other comparison operators for strings). Additionally, you should also ignore any spaces and punctuation marks while checking for palindrome.","solution":"def is_palindrome(s): Check if the given string is a palindrome, ignoring spaces and punctuation marks, and without using direct string manipulation or comparison operators. def sanitize_string(s): valid_chars = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\" sanitized = [ch.lower() for ch in s if ch in valid_chars] return sanitized sanitized = sanitize_string(s) n = len(sanitized) for i in range(n // 2): if sanitized[i] != sanitized[n - i - 1]: return False return True"},{"question":"Write a function that takes in a list of strings, each string being a word. Your function should return a dictionary where the key is the word, and the value is the count of how many times that word appears in the list. You should also include an optional parameter that specifies whether the counting should be case-sensitive. If the parameter is True, then the word 'Hello' and 'hello' should be counted as two different words. If the parameter is False, then 'Hello' and 'hello' should be counted as the same word. If this parameter is not passed by the user while calling the function, then it should take the default value of True.","solution":"def word_count(words, case_sensitive=True): Returns a dictionary with the count of each word in the list. :param words: List of strings, each string being a word. :param case_sensitive: Specifies whether the counting should be case-sensitive. Default is True. :return: Dictionary with words as keys and their counts as values. count_dict = {} for word in words: if not case_sensitive: word = word.lower() if word in count_dict: count_dict[word] += 1 else: count_dict[word] = 1 return count_dict"},{"question":"Given a list of numbers, create a function that finds the two elements that sum to a given target number. Your function should also handle edge cases, such as if the target number cannot be achieved by any two numbers in the list, or if there are multiple pairs with the same sum. Additionally, provide a piece of erroneous code and explain why it's incorrect.","solution":"def find_two_sum(nums, target): Finds two numbers in \`nums\` that sum up to \`target\`. If there are multiple pairs, returns the first correct pair found. If no such pair exists, returns an empty tuple. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (complement, num) seen[num] = i return () # Erroneous Code and Explanation def wrong_find_two_sum(nums, target): This incorrect implementation ignores some valid pairs and fails for cases where there are multiple pairs for the same target. n = len(nums) for i in range(n-1): for j in range(i+1, n): if nums[i] + nums[j] == target: return (nums[i], nums[j]) return () # The above erroneous code is incorrect because: # 1. There is no check to ensure if there are any duplicates in the list. # 2. It returns after finding the first pair, which might not necessarily be valid."},{"question":"Create a function to encrypt a string using the XOR operator and a randomly generated key of length 16. The key must be generated using a cryptographically secure random number generator. The function should also include an additional input parameter to specify the encryption algorithm (e.g., AES, RSA) to be used alongside XOR.","solution":"import os from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes from cryptography.hazmat.backends import default_backend def generate_secure_key(length=16): Generates a cryptographically secure random key of specified length. return os.urandom(length) def xor_encrypt(data, key): Encrypts the data using the XOR operator and the provided key. return bytes(a ^ b for a, b in zip(data, key)) def encrypt(data, algorithm='xor'): Encrypts the given data using the specified algorithm and returns the encrypted data and key. Supported algorithms: 'xor', 'aes' :param data: Data to be encrypted (bytes) :param algorithm: Encryption algorithm to use ('xor', 'aes') :return: A tuple of (encrypted data, key) if algorithm == 'xor': key = generate_secure_key(len(data)) encrypted_data = xor_encrypt(data, key) return encrypted_data, key elif algorithm == 'aes': key = generate_secure_key(32) # AES-256 key iv = generate_secure_key(16) # AES block size is 16 bytes cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend()) encryptor = cipher.encryptor() encrypted_data = encryptor.update(data) + encryptor.finalize() return encrypted_data, key, iv else: raise ValueError(\\"Unsupported encryption algorithm specified\\")"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should also check if the input is a positive integer, and if not, raise a custom exception called \\"InvalidInputError\\". If the input is a floating-point number, round it down to the nearest integer before calculating the factorial.","solution":"class InvalidInputError(Exception): Custom exception class for invalid inputs. pass def factorial(n): Returns the factorial of a non-negative integer n. If n is a floating-point number, it rounds it down. if isinstance(n, (int, float)): n = int(n) else: raise InvalidInputError(\\"Input must be an integer or a floating-point number.\\") if n < 0: raise InvalidInputError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"I'm trying to create a basic web application using Flask. In order to make this happen, I need to create a Flask route that responds to a GET request at the endpoint \\"/hello\\". Could you please provide me with a code snippet to achieve this? Additionally, I would like to know how to properly run this application.","solution":"from flask import Flask app = Flask(__name__) @app.route('/hello', methods=['GET']) def hello(): return \\"Hello, World!\\", 200 if __name__ == \\"__main__\\": app.run(debug=True)"},{"question":"Given two strings, s1 and s2, write a program to return the longest common substring between them. Make sure to handle cases where there are multiple longest common substrings by only returning one of them. Also, ensure the solution is efficient, avoiding brute-force methods.","solution":"def longest_common_substring(s1, s2): Returns the longest common substring between s1 and s2. if not s1 or not s2: return \\"\\" m, n = len(s1), len(s2) longest_end = 0 longest_len = 0 # Create a 2D array to store lengths of longest common suffixes # LCSuffix[i][j] will be the length of the longest common suffix of # s1[0..i-1] and s2[0..j-1]. lcsuffix = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: lcsuffix[i][j] = lcsuffix[i - 1][j - 1] + 1 if lcsuffix[i][j] > longest_len: longest_len = lcsuffix[i][j] longest_end = i else: lcsuffix[i][j] = 0 # The longest common substring is from s1[longest_end - longest_len] to s1[longest_end] return s1[longest_end - longest_len: longest_end]"},{"question":"Develop a Python function to calculate the sum of unique (non-repeated) elements in a given list. This function should be able to handle both positive and negative numbers, as well as zero. Additionally, the function should include error handling for non-integer inputs in the list.","solution":"def sum_of_unique_elements(lst): Calculate the sum of unique (non-repeated) elements in a given list. Args: lst (list): List of elements to be processed Returns: int: Sum of unique elements in the list if not all(isinstance(x, int) for x in lst): raise ValueError(\\"All elements in the list must be integers.\\") from collections import Counter counts = Counter(lst) unique_sum = sum(element for element, count in counts.items() if count == 1) return unique_sum"},{"question":"I am creating an audio spectrum visualizer for a music player. The visualizer should take an incoming audio stream, analyze it and display the resulting frequency spectrum. Can you provide guidance on how to implement this using a Fourier transform?","solution":"import numpy as np import matplotlib.pyplot as plt from scipy.io import wavfile def plot_audio_spectrum(file_path): Reads an audio file, performs a Fourier transform, and plots the frequency spectrum. # Read the audio file sample_rate, audio_data = wavfile.read(file_path) # Compute FFT n = len(audio_data) audio_fft = np.fft.fft(audio_data) audio_magnitude = np.abs(audio_fft) / n freq = np.fft.fftfreq(n, 1/sample_rate) # Normalize to plot only the positive half half_n = n // 2 audio_magnitude = audio_magnitude[:half_n] freq = freq[:half_n] # Plot the spectrum plt.figure(figsize=(12, 6)) plt.plot(freq, 20 * np.log10(audio_magnitude)) plt.xlabel('Frequency (Hz)') plt.ylabel('Magnitude (dB)') plt.title('Audio Frequency Spectrum') plt.show()"},{"question":"Create a simple calculator program in Python that allows a user to input two numbers and perform basic arithmetic operations (+, -, *, /).","solution":"def simple_calculator(num1, num2, operation): Perform basic arithmetic operations (+, -, *, /) on two numbers. Parameters: num1 (float): The first number. num2 (float): The second number. operation (str): The arithmetic operation ('+', '-', '*', '/'). Returns: float: The result of the arithmetic operation. if operation == '+': return num1 + num2 elif operation == '-': return num1 - num2 elif operation == '*': return num1 * num2 elif operation == '/': if num2 != 0: return num1 / num2 else: raise ValueError(\\"Cannot divide by zero.\\") else: raise ValueError(\\"Invalid operation. Choose from '+', '-', '*', '/'.\\")"},{"question":"How can I write a Python program to classify an email as spam or ham based on certain keywords?","solution":"def classify_email(email): Classifies an email as 'spam' or 'ham' based on the presence of certain keywords. Parameters: email (str): The content of the email to classify. Returns: str: 'spam' if the email contains certain keywords, 'ham' otherwise. spam_keywords = [\\"win\\", \\"free\\", \\"prize\\", \\"money\\", \\"cash\\", \\"urgent\\", \\"limited\\"] email_lower = email.lower() for keyword in spam_keywords: if keyword in email_lower: return 'spam' return 'ham'"},{"question":"Write a function to perform vector addition for two 1D arrays. The function should also handle cases where the lengths of the two arrays are not equal.","solution":"def vector_addition(v1, v2): Perform vector addition of two 1D arrays. If the arrays are of unequal lengths, the missing entries are assumed to be zero. Args: v1 (list of int/float): The first vector. v2 (list of int/float): The second vector. Returns: list of int/float: The result of adding the two vectors. # Determine the length of the longest vector max_length = max(len(v1), len(v2)) # Extend both vectors with zeros to match the length of the longest vector v1_extended = v1 + [0] * (max_length - len(v1)) v2_extended = v2 + [0] * (max_length - len(v2)) # Perform element-wise addition of the two vectors result = [v1_extended[i] + v2_extended[i] for i in range(max_length)] return result"},{"question":"Write a program that randomly generates a 4-digit number and allows the user to guess the number. The program should give hints such as \\"hot\\" for a correct digit in the correct position and \\"cold\\" for a correct digit in the wrong position. Limit the maximum number of attempts a user can make to guess the number correctly.","solution":"import random def generate_number(): Generates a 4-digit random number as a string. return ''.join([str(random.randint(0, 9)) for _ in range(4)]) def get_feedback(secret_number, guess): Provides feedback on the guess in terms of 'hot' and 'cold'. feedback = [] for i, digit in enumerate(guess): if digit == secret_number[i]: feedback.append('hot') elif digit in secret_number: feedback.append('cold') return feedback def guess_number_game(max_attempts=10): Main game function to allow user to guess the number with limited attempts. secret_number = generate_number() attempts = 0 while attempts < max_attempts: guess = input(\\"Enter your 4-digit guess: \\") if len(guess) != 4 or not guess.isdigit(): print(\\"Invalid input. Please enter a 4-digit number.\\") continue feedback = get_feedback(secret_number, guess) if feedback == ['hot'] * 4: print(\\"Congratulations! You've guessed the number correctly.\\") return True print(\\"Feedback: \\", feedback) attempts += 1 print(f\\"Sorry! You've used all your attempts. The number was: {secret_number}\\") return False"},{"question":"Create a Python function, named \\"calculate_hypotenuse\\", that accepts two integer parameters, adjacent and opposite, which represents the length of two sides of a right triangle. Your function should output the length of the hypotenuse calculated using the Pythagorean theorem. If the input parameters are not integers or if either of the side lengths is less than or equal to zero, your function should raise a ValueError. Here's a formula to calculate the hypotenuse: hypotenuse = sqrt((adjacent^2) + (opposite^2))","solution":"import math def calculate_hypotenuse(adjacent, opposite): Calculate the length of the hypotenuse of a right triangle given the lengths of the other two sides using the Pythagorean theorem. Parameters: adjacent (int): Length of the adjacent side opposite (int): Length of the opposite side Returns: float: Length of the hypotenuse Raises: ValueError: If input parameters are not integers or sides are <= 0 if not isinstance(adjacent, int) or not isinstance(opposite, int): raise ValueError(\\"Both side lengths must be integers.\\") if adjacent <= 0 or opposite <= 0: raise ValueError(\\"Side lengths must be greater than zero.\\") return math.sqrt(adjacent**2 + opposite**2)"},{"question":"Given a list of numbers, write a Python function to return a list with all repeated elements removed.","solution":"def remove_duplicates(numbers): Returns a list with all repeated elements removed. return list(set(numbers))"},{"question":"Create a recursive function to calculate the n-th term of the Fibonacci sequence. However, you are not allowed to use any loops or global variables in your implementation. Additionally, your implementation should have a time complexity of O(n) and a space complexity of O(1).","solution":"def fibonacci(n, a=0, b=1): Returns the n-th term of the Fibonacci sequence. This implementation has a time complexity of O(n) and a space complexity of O(1). if n == 0: return a elif n == 1: return b else: return fibonacci(n - 1, b, a + b)"},{"question":"Explain how a hash table works and provide the implementation for a hash table data structure in a programming language of your choice. Additionally, discuss the concepts of hashing and collision resolution, and explain how they are used in the functioning of a hash table.","solution":"class HashTable: def __init__(self, size=10): self.size = size self.table = [[] for _ in range(size)] def hash_function(self, key): return hash(key) % self.size def insert(self, key, value): index = self.hash_function(key) for pair in self.table[index]: if pair[0] == key: pair[1] = value return self.table[index].append([key, value]) def get(self, key): index = self.hash_function(key) for pair in self.table[index]: if pair[0] == key: return pair[1] return None def delete(self, key): index = self.hash_function(key) for i, pair in enumerate(self.table[index]): if pair[0] == key: del self.table[index][i] return"},{"question":"Implement a recursive function to compute the Fibonacci sequence up to the n-th number.","solution":"def fibonacci(n): Returns the n-th number in the Fibonacci sequence using a recursive approach. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"I have a list \`a\` and another list \`b\` where len(b)<len(a). I want to replace elements of list \`a\` at random indices with elements from list \`b\`, keeping other elements of list \`a\` unchanged. I also want to find out which indices in list \`a\` have been replaced.","solution":"import random def replace_elements_at_random_indices(a, b): Replace elements of list \`a\` at random indices with elements from list \`b\`. Parameters: a (list): The original list where elements will be replaced. b (list): The list providing elements to replace in \`a\`. Returns: tuple: A tuple containing the modified list \`a\` and the list of replaced indices. if len(b) > len(a): raise ValueError('Length of list b cannot be greater than length of list a') a_copy = a.copy() indices = random.sample(range(len(a)), len(b)) for i, index in enumerate(indices): a_copy[index] = b[i] return a_copy, indices"},{"question":"Write a script to invert the colors of an image using Python's open-source library Pillow.","solution":"from PIL import Image def invert_colors(image_path, output_path): Inverts the colors of an image and saves the result to a new file. Parameters: image_path (str): The path to the input image file. output_path (str): The path to save the output image file. image = Image.open(image_path) inverted_image = Image.eval(image, lambda p: 255 - p) inverted_image.save(output_path)"},{"question":"Enhance the given function that selects and returns the closest two numbers from a list (size ≥ 2). The returned pair should be in ascending order. The complexity should ideally be less than O(n^2). Ensure your function captures edge cases.","solution":"def closest_pair(numbers): Returns the closest pair of numbers in ascending order from the given list of numbers. The list should have at least two elements. if len(numbers) < 2: raise ValueError(\\"List must contain at least two elements\\") # Sort the list to make it easier to find the closest pair sorted_numbers = sorted(numbers) # Initialize minimum difference and closest pair min_diff = float('inf') closest_pair = (None, None) for i in range(len(sorted_numbers) - 1): diff = sorted_numbers[i + 1] - sorted_numbers[i] if diff < min_diff: min_diff = diff closest_pair = (sorted_numbers[i], sorted_numbers[i + 1]) return closest_pair"},{"question":"Implement a function that retrieves the value of a specific key from a given dictionary. The function should only return the value if the key is present and the value is a string that contains at least one uppercase letter. If the key is not present or the value does not meet the requirements, the function should return None. Additionally, the function should only allow a maximum of two nested levels in the dictionary.","solution":"def get_value_from_dict(data, key): Retrieve the value of a specific key from a given dictionary. The function returns the value only if the key is present and the value is a string that contains at least one uppercase letter. The function checks only up to two nested levels in the dictionary. Parameters: - data (dict): The dictionary from which to retrieve the value. - key (str): The key to look for in the dictionary. Returns: - str: The value associated with the key if conditions are met, None otherwise. if not isinstance(data, dict): return None def has_upper_case(s): return any(c.isupper() for c in s) # Check first level if key in data and isinstance(data[key], str) and has_upper_case(data[key]): return data[key] # Check second level for sub_key, sub_value in data.items(): if isinstance(sub_value, dict) and key in sub_value: if isinstance(sub_value[key], str) and has_upper_case(sub_value[key]): return sub_value[key] return None"},{"question":"Can you assist me in writing a Python program that lists all the files and directories in my current working directory with their attributes such as size, creation time, and last modified time?","solution":"import os import time def list_directory_contents(directory=\\".\\"): List all the files and directories in the given directory with their attributes such as size, creation time, and last modified time. Parameters: directory (str): The directory to list the contents of. Defaults to the current directory. Returns: list: A list of dictionaries, each containing the attributes of a file or directory. contents = [] with os.scandir(directory) as entries: for entry in entries: info = entry.stat() contents.append({ 'name': entry.name, 'is_directory': entry.is_dir(), 'size': info.st_size, 'creation_time': time.ctime(info.st_ctime), 'last_modified_time': time.ctime(info.st_mtime), }) return contents"},{"question":"Is there a way to remove all duplicate values from a given list in Python? I want to end up with a list that only contains unique values. Can you provide a code example?","solution":"def remove_duplicates(lst): Removes all duplicate values from the given list and returns a list with unique values. Args: lst (list): The input list containing values that may have duplicates. Returns: list: A new list with only unique values. return list(set(lst))"},{"question":"Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2, considering case sensitivity and special characters. Also, optimize the solution to work efficiently even with large strings.","solution":"def are_anagrams(s1, s2): Check if two strings s1 and s2 are anagrams. Case-sensitive and including special characters. # Return false if lengths are different if len(s1) != len(s2): return False # Count characters in both strings and compare from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"Write a function that takes in two strings and determines if the second string is an anagram of the first. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. For example, \\"act\\" is an anagram of \\"cat\\".","solution":"def is_anagram(str1, str2): Returns True if str2 is an anagram of str1, and False otherwise. # Removing any whitespace and making the strings lowercase for comparison str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Sorting both strings and comparing them return sorted(str1) == sorted(str2)"},{"question":"Write a Python program that takes a list of numbers as input and converts all the positive numbers into strings and negative numbers into tuples.","solution":"def transform_numbers(numbers): This function takes a list of numbers as input and converts all the positive numbers into strings and negative numbers into tuples. Args: numbers (list) : List of integers Returns: list: Transformed list of numbers transformed = [] for number in numbers: if number > 0: transformed.append(str(number)) elif number < 0: transformed.append((number,)) else: transformed.append(number) return transformed"},{"question":"Given a piece of erroneous code below, identify and fix the issues so that the code can successfully generate and illustrate the first 10 numbers in the Lucas series. Not only that, but also enhance the code to allow generation of any 'n' numbers in the Lucas series (where 'n' is a user-inputted integer), without using any inbuilt Python library.","solution":"def lucas_series(n): Generate the first n numbers of the Lucas series. Parameters: n (int): Number of terms to be generated in the Lucas series. Returns: list: A list containing the first n numbers of the Lucas series. if n <= 0: return [] elif n == 1: return [2] elif n == 2: return [2, 1] series = [2, 1] for i in range(2, n): next_value = series[-1] + series[-2] series.append(next_value) return series"},{"question":"**Merge Sort Algorithm: Write a Python function that performs a merge sort on a given list of numbers.**","solution":"def merge_sort(arr): Performs a merge sort on the given list of numbers. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. merged = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 merged.extend(left[left_index:]) merged.extend(right[right_index:]) return merged"},{"question":"Implement a function that finds the majority element in a list of integers. The majority element is defined as the element that appears more than n/2 times in the list, where n is the length of the list. If no such element exists, the function should return None. Additionally, the function should only use O(1) space complexity and O(n) time complexity.","solution":"def find_majority_element(nums): Finds the majority element in a list of integers. The majority element is the element that appears more than n/2 times. If no such element exists, returns None. :param nums: List[int] - List of integers :return: int or None - The majority element or None if not nums: return None # Boyer-Moore Voting Algorithm majority_candidate, count = nums[0], 1 for num in nums[1:]: if count == 0: majority_candidate, count = num, 1 elif majority_candidate == num: count += 1 else: count -= 1 # Verify candidate is indeed the majority element count = sum(1 for num in nums if num == majority_candidate) if count > len(nums) // 2: return majority_candidate return None"},{"question":"Given a list of integers, write a function that takes in two indices and swaps the elements at those indices. However, you are not allowed to use any built-in functions or methods that directly swap or move elements in a list. You can only use basic operations like indexing, arithmetic, and variable assignment.","solution":"def swap_elements(arr, index1, index2): Swaps the elements at index1 and index2 in the list arr. Assumes index1 and index2 are valid indices in arr. # Use a temporary variable to hold one of the values during the swap temp = arr[index1] arr[index1] = arr[index2] arr[index2] = temp return arr"},{"question":"I need a function modified from the code given which takes a list of integers, it should return the last two maximum number in the list. However, it should not return numbers that are divisible by any number in the list except 1 and itself.","solution":"def is_prime(n, lst): Helper function to check if a number n is divisible by any number in the list lst except 1 and itself. for num in lst: if num != n and num != 1 and n % num == 0: return False return True def last_two_max_prime(lst): Returns the last two maximum numbers in the list that are not divisible by any number in the list except 1 and itself. # First filter out the numbers that are not prime within the context of the list filtered_lst = [num for num in lst if is_prime(num, lst)] if len(filtered_lst) < 2: raise ValueError(\\"List must contain at least two non-divisible numbers.\\") # Sort the filtered list in descending order sorted_lst = sorted(filtered_lst, reverse=True) # Return the last two maximum numbers return sorted_lst[:2]"},{"question":"Write a python script to calculate the sum of numbers inside a python list. Your script should not use built-in functions like sum(). Moreover, include error handling procedure for the cases where the list may contain non-integer values. The program should simply ignore these non-integer values and proceed to others.","solution":"def sum_list(numbers): Returns the sum of integer numbers in the list 'numbers'. Non-integer values in the list are ignored. total = 0 for number in numbers: if isinstance(number, int): total += number return total"},{"question":"Create a function in Python that prints out the elements of a given list, but also adds a twist by including the index of each element in the output. Additionally, the function should reverse the order of the elements before printing them.","solution":"def print_list_with_twist(input_list): Prints out the elements of the given list in reverse order, including their original index. length = len(input_list) for index, element in enumerate(reversed(input_list)): print(f\\"Index {length - index - 1}: {element}\\")"},{"question":"Write a Python program to implement an iterator for a linked list.","solution":"class Node: Node of a linked list containing the data and the next node reference. def __init__(self, data): self.data = data self.next = None class LinkedList: A singly linked list with an iterator implementation. def __init__(self): self.head = None def append(self, data): Append a new node with the given data to the end of the linked list. new_node = Node(data) if not self.head: self.head = new_node else: current = self.head while current.next: current = current.next current.next = new_node def __iter__(self): return LinkedListIterator(self.head) class LinkedListIterator: An iterator for the linked list. def __init__(self, head): self.current = head def __iter__(self): return self def __next__(self): if not self.current: raise StopIteration else: data = self.current.data self.current = self.current.next return data"},{"question":"Write a function 'divideList' which takes a list and an integer, and divides the list into n sublists where n is the given integer. The elements should be evenly distributed as much as possible among the sublists. If the list cannot be divided evenly, the first few sublists should have one more element than the others.","solution":"def divideList(lst, n): This function takes in a list and an integer n, and divides the list into n sublists with elements evenly distributed. If the list cannot be divided evenly, the first few sublists will have one more element than the others. length = len(lst) quotient, remainder = divmod(length, n) sublists = [] start = 0 for i in range(n): end = start + quotient + (1 if i < remainder else 0) sublists.append(lst[start:end]) start = end return sublists"},{"question":"Increase the complexity of the given code problem slightly. Now, you must craft a function that converts numbers from decimal format to binary. Additionally, incorporate error checking to validate that the provided input is a valid, non-negative integer. Below is a fallible code snippet for your reference, a starting point that presents a less than ideal solution. It's your task to refine this.","solution":"def decimal_to_binary(n): Converts a decimal number to binary representation. Parameters: n (int): The decimal number, should be a non-negative integer. Returns: str: Binary representation of the given decimal number. # Validate input if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") # Edge case for zero if n == 0: return '0' binary_representation = \\"\\" # Convert decimal to binary while n > 0: binary_representation = str(n % 2) + binary_representation n = n // 2 return binary_representation"},{"question":"Suppose you have a list L = [1,3,5,2,4,6]. How can you sort this list using bubble sort technique? Write a Python program to implement the same.","solution":"def bubble_sort(L): Sorts the list L using bubble sort technique. n = len(L) for i in range(n): # Last i elements are already in place for j in range(0, n - i - 1): # Traverse the list from 0 to n-i-1 # Swap if the element found is greater than the next element if L[j] > L[j + 1]: L[j], L[j + 1] = L[j + 1], L[j] return L"},{"question":"Merge the following two linked lists in ascending order. Additionally, the merged list should not contain any duplicate elements. Each linked list is represented by a head pointer.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_lists(l1, l2): Merges two sorted linked lists into a single sorted linked list without duplicates. dummy = ListNode() current = dummy prev_val = None while l1 and l2: if l1.val < l2.val: val = l1.val l1 = l1.next elif l1.val > l2.val: val = l2.val l2 = l2.next else: val = l1.val l1 = l1.next l2 = l2.next if val != prev_val: # Avoid adding duplicates current.next = ListNode(val) current = current.next prev_val = val while l1: if l1.val != prev_val: # Avoid adding duplicates current.next = ListNode(l1.val) current = current.next prev_val = l1.val l1 = l1.next while l2: if l2.val != prev_val: # Avoid adding duplicates current.next = ListNode(l2.val) current = current.next prev_val = l2.val l2 = l2.next return dummy.next"},{"question":"Here's a prompt for a recursive generator in Python that yields a list of even numbers between start and end variables using a recursive algorithm. The code has a base case for ending the recursion, as well as a recursive case that divides the range into half and calls the generator on each half. The mid point is rounded up if the division is not even, and the function yields from the recursive calls before returning. Finally, the output list is sorted and tested against expected values to check the function.","solution":"def even_numbers_recursive(start, end): Recursive generator to yield even numbers between start and end. if start > end: return if start % 2 != 0: start += 1 if end % 2 != 0: end -= 1 if start > end: return mid = (start + end) // 2 if mid % 2 != 0: mid += 1 yield from even_numbers_recursive(start, mid - 2) yield mid yield from even_numbers_recursive(mid + 2, end)"},{"question":"Create a code to calculate the most frequent character in a given string, but exclude any punctuation characters and consider only alphabetic characters.","solution":"import string def most_frequent_character(s): Returns the most frequent alphabetic character in the given string, ignoring punctuation. Non-alphabetic characters are excluded. # Remove punctuation and filter non-alphabetic characters cleaned_string = ''.join(filter(str.isalpha, s)) # Convert to lowercase to ensure case insensitivity cleaned_string = cleaned_string.lower() # Dictionary to store frequency of characters freq = {} for char in cleaned_string: if char in freq: freq[char] += 1 else: freq[char] = 1 # Find the most frequent character most_frequent_char = None max_count = 0 for char, count in freq.items(): if count > max_count: most_frequent_char = char max_count = count return most_frequent_char"},{"question":"Create a Python function named \\"calculate_cosine_distance\\" that takes two lists of numbers as input: vector1 and vector2. The function should calculate the cosine distance between the two vectors and return the result.","solution":"import math def calculate_cosine_distance(vector1, vector2): Calculate the cosine distance between two vectors. :param vector1: List of numbers representing the first vector. :param vector2: List of numbers representing the second vector. :return: The cosine distance between vector1 and vector2. if len(vector1) != len(vector2): raise ValueError(\\"Vectors must be of the same length\\") # Calculate dot product dot_product = sum(i * j for i, j in zip(vector1, vector2)) # Calculate the magnitude of each vector magnitude1 = math.sqrt(sum(i**2 for i in vector1)) magnitude2 = math.sqrt(sum(j**2 for j in vector2)) if magnitude1 * magnitude2 == 0: raise ValueError(\\"One of the vectors has zero magnitude, can't calculate cosine distance\\") # Calculate cosine similarity cosine_similarity = dot_product / (magnitude1 * magnitude2) # Calculate cosine distance cosine_distance = 1 - cosine_similarity return cosine_distance"},{"question":"Write a code to interleave the elements from two different lists, inserting a separator item after each element.","solution":"def interleave_with_separator(list1, list2, separator): Interleaves elements from list1 and list2, inserting a separator after each element. It handles the uneven lengths of the lists by adding remaining elements at the end. :param list1: First list of elements. :param list2: Second list of elements. :param separator: The separator item to be inserted. :return: List with interleaved elements and separators. interleaved = [] max_len = max(len(list1), len(list2)) for i in range(max_len): if i < len(list1): interleaved.append(list1[i]) interleaved.append(separator) if i < len(list2): interleaved.append(list2[i]) interleaved.append(separator) return interleaved"},{"question":"Write a function in Python that takes a list of integers and returns the number of elements that are divisible by 3. Additionally, the function should ignore negative numbers and only consider positive integers for divisibility.","solution":"def count_divisible_by_3(nums): Returns the number of positive elements in the list that are divisible by 3. Ignores negative numbers. Parameters: nums (list): A list of integers. Returns: int: The count of positive numbers divisible by 3. return len([num for num in nums if num > 0 and num % 3 == 0])"},{"question":"Create a Python program that implements a stack data structure using dynamic arrays, including push, pop, and peek operations.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, item): Add an item to the top of the stack. self.stack.append(item) def pop(self): Remove and return the item from the top of the stack. If the stack is empty, return None. if not self.is_empty(): return self.stack.pop() return None def peek(self): Return the item at the top of the stack without removing it. If the stack is empty, return None. if not self.is_empty(): return self.stack[-1] return None def is_empty(self): Check if the stack is empty. return len(self.stack) == 0 def size(self): Return the size of the stack. return len(self.stack)"},{"question":"Write a Python function to count how many times each character in a string appears, ignoring case and spaces.","solution":"from collections import Counter def count_characters(s): Counts the number of times each character appears in the given string, ignoring case and spaces. Parameters: s (str): The input string Returns: dict: A dictionary with characters as keys and their counts as values s = s.replace(\\" \\", \\"\\").lower() return dict(Counter(s))"},{"question":"Create five random strings of 10 characters each and combine them into a single string. Then, scramble the characters in the resulting string using a shuffle algorithm, such as the Fisher-Yates algorithm. Finally, output the scrambled string in reverse order.","solution":"import random import string def generate_random_string(length=10): Generates a random string of given length using uppercase and lowercase letters. return ''.join(random.choices(string.ascii_letters, k=length)) def scramble_and_reverse(strings): Takes a list of strings, combines them, scrambles the combined string using the Fisher-Yates shuffle, and returns the reversed scrambled string. combined_string = ''.join(strings) # Convert combined string to list to use random.shuffle char_list = list(combined_string) # Fisher-Yates shuffle n = len(char_list) for i in range(n-1, 0, -1): j = random.randint(0, i) char_list[i], char_list[j] = char_list[j], char_list[i] scrambled_string = ''.join(char_list) # Reverse the scrambled string reversed_scrambled_string = scrambled_string[::-1] return reversed_scrambled_string def main(): random_strings = [generate_random_string() for _ in range(5)] result = scramble_and_reverse(random_strings) return result"},{"question":"Design a function in Python that calculates the median of three given integers. Additionally, the function should handle exceptions for non-integer inputs and also be able to work with both positive and negative integers. It should return an appropriate error message for non-integer inputs.","solution":"def median_of_three(a, b, c): Returns the median of three integers. If any of the inputs are not integers, it returns an error message. if not all(isinstance(i, int) for i in [a, b, c]): return \\"Error: All inputs must be integers\\" numbers = [a, b, c] numbers.sort() return numbers[1]"},{"question":"I want you to act as a Python instructor. I will provide you with a list of student scores and you will help me write a Python function to calculate the average. The list will contain unique values within the range of 0 to 100. You should not use any built-in Python functions or libraries for this task to ensure you understand the underlying concepts. Please start by defining a function called \\"average\\" that takes a list as its parameter.","solution":"def average(scores): Calculate the average score from the list of scores without using built-in functions. total = 0 count = 0 for score in scores: total += score count += 1 return total / count if count != 0 else 0"},{"question":"Write a Python function that prints the frequencies of even and odd numbers in a given array, and also the frequencies of negative and positive numbers in the array. The array can contain both positive and negative integers.","solution":"def count_frequencies(arr): This function takes an array of integers and prints the frequencies of even and odd numbers, and the frequencies of negative and positive numbers. even_count = 0 odd_count = 0 positive_count = 0 negative_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 if num > 0: positive_count += 1 elif num < 0: negative_count += 1 # Returning the counts instead of printing for testing purposes return { 'even_count': even_count, 'odd_count': odd_count, 'positive_count': positive_count, 'negative_count': negative_count }"},{"question":"Utilising only the intrinsic functions and capabilities of Python's principal data types without relying on external libraries, devise a method that systematically generates and exhibits every potential combination of strings that could be formed using the characters provided in a given input array. The formation of these strings should adhere to certain constraints: the length of all formed strings must exactly match the length specified which could vary from 1 to the total length of the provided character array. Your solution should handle all possible string combinations including those with repeated characters.","solution":"from itertools import product def generate_combinations(input_chars, length): Generate all possible combinations of strings that can be formed using the characters provided in the input_chars array with given length. Parameters: input_chars (list): List of characters to form combinations length (int): Exact length of each combination to generate Returns: list: A list of all possible combinations return [''.join(comb) for comb in product(input_chars, repeat=length)]"},{"question":"Given two matrices, A and B, write a program to compute their product C. A = [[1, 2, 3][4, 5, 6]] and B = [[7, 8][9, 10][11, 12]]. Do not use built-in functions or libraries for matrix multiplication.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Args: A: list of lists, where each inner list represents a row of matrix A B: list of lists, where each inner list represents a row of matrix B Returns: C: list of lists, where each inner list represents a row of matrix C (the product of A and B) # Get dimensions A_rows = len(A) A_cols = len(A[0]) B_rows = len(B) B_cols = len(B[0]) # Initialize resulting matrix C with zeros C = [[0 for _ in range(B_cols)] for _ in range(A_rows)] # Check for valid dimensions if A_cols != B_rows: raise ValueError(\\"Number of columns of A must be equal to number of rows of B.\\") # Compute matrix multiplication for i in range(A_rows): for j in range(B_cols): for k in range(A_cols): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Develop a function that not only ascertains if a word exclusively consists of consonants, but also checks if these consonants are in a palindrome format (i.e., they read the same forward and backward). The function should ignore case sensitivity and non-alphabetical characters.","solution":"def is_consonant_palindrome(word): Returns whether the input word consists solely of consonants and whether those consonants form a palindrome. Non-alphabetical characters are ignored and the check is case-insensitive. consonants = \\"bcdfghjklmnpqrstvwxyz\\" filtered_consonants = \\"\\".join([char.lower() for char in word if char.lower() in consonants]) if not filtered_consonants: # If there are no consonants return False return filtered_consonants == filtered_consonants[::-1]"},{"question":"Develop a Python function that accepts an integer array as an input and generates a histogram using matplotlib to visualize the frequency distribution of these integers. Moreover, implement a feature where the user has the option to overlay a normal distribution curve on the histogram for comparison.","solution":"import matplotlib.pyplot as plt import numpy as np import scipy.stats as stats def plot_histogram_with_normal(data, overlay_normal=False): Plots a histogram for the given data. If overlay_normal is True, overlays a normal distribution curve. :param data: List of integers :param overlay_normal: Bool, if True, overlays a normal distribution curve plt.figure(figsize=(10, 6)) # Plot the histogram count, bins, ignored = plt.hist(data, bins=30, density=True, alpha=0.6, color='g') if overlay_normal: # Calculate mean and standard deviation mu, sigma = np.mean(data), np.std(data) # Plot normal distribution curve best_fit_line = stats.norm.pdf(bins, mu, sigma) plt.plot(bins, best_fit_line, 'r--') plt.ylabel('Frequency') plt.xlabel('Data') plt.title('Histogram' + (' with Normal Curve' if overlay_normal else '')) plt.show()"},{"question":"Create a simple REST API using Python and Flask which returns the sum of two numbers provided in the request parameters.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/add', methods=['GET']) def add(): a = request.args.get('a', type=int) b = request.args.get('b', type=int) if a is None or b is None: return jsonify({'error': 'Both parameters a and b are required and must be integers.'}), 400 result = a + b return jsonify({'result': result}) if __name__ == '__main__': app.run(debug=True)"},{"question":"Structure a Python code to append a new element at the beginning of an existing list. The new element should be inserted in such a way that the elements in the list remain in ascending order. Additionally, the code should handle duplicate elements and maintain their order in the list.","solution":"def insert_at_beginning_and_sort(lst, element): Inserts the element at the beginning of the list and sorts the list while maintaining duplicates. lst.insert(0, element) lst.sort() return lst"},{"question":"Write a python function to parse the rewritten date in string format to a datetime object. The format of the date string is \\"Month D, YYYY\\", for example \\"January 1, 2020\\".","solution":"from datetime import datetime def parse_date(date_str): Parses a date string in the format \\"Month D, YYYY\\" to a datetime object. Parameters: date_str (str): The date string to parse. Returns: datetime: A datetime object representing the parsed date. return datetime.strptime(date_str, \\"%B %d, %Y\\")"},{"question":"Write a function in Python to compress a given string. The compressed string should consist of each character followed by the count of consecutive occurrences of that character. For example, the string \\"aabcccccaaa\\" should be compressed to \\"a2b1c5a3\\". If the compressed string is not shorter than the original string, return the original string.","solution":"def compress_string(s): Compress the given string using the counts of repeated characters. If the compressed string is not shorter, return the original string. :param s: The input string to compress :type s: str :return: The compressed string or the original string if compression does not shorten it :rtype: str if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_str = ''.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Write a recursive function in Python which takes an integer as input and prints the Fibonacci series up to that number. Also, implement error handling to ensure the input is a positive integer greater than zero. Include a mechanism to pause execution for 1 second after each recursion for observability.","solution":"import time def fibonacci_series(n): Print the Fibonacci series up to the nth number. if not isinstance(n, int) or n <= 0: raise ValueError(\\"The input must be a positive integer greater than zero.\\") def fib_helper(a, b, count): if count == 0: return print(a) time.sleep(1) fib_helper(b, a+b, count-1) fib_helper(0, 1, n)"},{"question":"Create a function in Python that takes in a string of comma-separated numbers as input and returns a list of the numbers in reverse order. The function should handle cases where the input string contains leading or trailing spaces, and should raise a ValueError if the input is not a valid comma-separated list of numbers. Additionally, the function should only use built-in string and list methods, and should not use any regular expressions or external libraries.","solution":"def reverse_comma_separated_numbers(input_str): Takes a string of comma-separated numbers and returns a list of the numbers in reverse order. Args: input_str (str): A string of comma-separated numbers. Returns: list: A list of numbers in reverse order. Raises: ValueError: If the input is not a valid comma-separated list of numbers. try: # Strip leading and trailing whitespace input_str = input_str.strip() # Split the string by comma str_numbers = input_str.split(',') # Convert to list of numbers and reverse the list numbers = [int(num.strip()) for num in str_numbers] return numbers[::-1] except ValueError: raise ValueError(\\"Input is not a valid comma-separated list of numbers\\")"},{"question":"Write a python program to effectively check if an integer is a power of two.","solution":"def is_power_of_two(n): Returns True if n is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a Python function called 'reversedMerge' that accepts two parameters, both are list objects, and merges these two lists into one. After merging, reverse the order of the list. If the parameters are not list objects, the function should raise a TypeError. Additionally, optimize your function to ensure it runs efficiently even with large lists.","solution":"def reversedMerge(list1, list2): Merges two lists and reverses the order of the resulting list. Raises TypeError if any of the parameters is not a list. if not isinstance(list1, list) or not isinstance(list2, list): raise TypeError(\\"Both parameters must be lists\\") merged_list = list1 + list2 merged_list.reverse() return merged_list"},{"question":"Can you write a function in Python that fetches weather data from a public API and returns the temperature, humidity, and pressure of a given location? Assume the API requires only the location name as a parameter and returns a JSON object with the aforementioned details.","solution":"import requests def fetch_weather_data(location): Fetches weather data from a public API and returns the temperature, humidity, and pressure for a given location. :param location: The name of the location to fetch weather data for. :return: A dictionary with keys 'temperature', 'humidity', and 'pressure'. api_url = f\\"http://api.example.com/weather?location={location}\\" response = requests.get(api_url) data = response.json() return { 'temperature': data['temperature'], 'humidity': data['humidity'], 'pressure': data['pressure'] }"},{"question":"Create a Python program that takes two strings as input and checks whether they are anagrams of each other. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as cinema, formed from iceman.","solution":"def are_anagrams(str1, str2): Checks whether two strings are anagrams of each other. Args: str1 (str): First input string. str2 (str): Second input string. Returns: bool: True if the strings are anagrams, False otherwise. # Remove any whitespace and convert to lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Sort the strings and compare return sorted(str1) == sorted(str2)"},{"question":"Create a Python function that takes a number as input and returns True if it is a repdigit number, and False otherwise. A repdigit number is a natural number composed of repeating a single digit. For example, 111, 22, and 5555 are repdigit numbers.","solution":"def is_repdigit(number): Checks if the given number is a repdigit number. A repdigit number is a number composed of repeating a single digit. Parameters: number (int): The input number to check. Returns: bool: True if the number is a repdigit number, False otherwise. s = str(number) return all(digit == s[0] for digit in s)"},{"question":"How can I write a Python program that generates a multiplication table of a given number up to 10 using list comprehension? Additionally, could you explain the logic behind the list comprehension statement used? To further challenge understanding, the program should also allow for generating tables of multiple numbers, say [8, 9, 10], each up to 10, and return the results in a dictionary where keys are the input numbers and values are their respective lists of multiplication tables.","solution":"def generate_multiplication_table(nums): Generates multiplication tables for the given list of numbers up to 10. Args: nums (list): A list of integers for which the multiplication tables are to be generated. Returns: dict: A dictionary with each number as the key and their multiplication table as the value. # Use dictionary comprehension to generate the multiplication tables return {num: [num * i for i in range(1, 11)] for num in nums}"},{"question":"Hey, could you give me a Python code that uses the FastAPI framework to create a simple calculator API? With the ability to add, subtract, multiply, divide, and take power of two numbers.","solution":"from fastapi import FastAPI, HTTPException app = FastAPI() @app.get(\\"/add\\") def add(a: float, b: float): return {\\"result\\": a + b} @app.get(\\"/subtract\\") def subtract(a: float, b: float): return {\\"result\\": a - b} @app.get(\\"/multiply\\") def multiply(a: float, b: float): return {\\"result\\": a * b} @app.get(\\"/divide\\") def divide(a: float, b: float): if b == 0: raise HTTPException(status_code=400, detail=\\"Division by zero is not allowed\\") return {\\"result\\": a / b} @app.get(\\"/power\\") def power(a: float, b: float): return {\\"result\\": a ** b}"},{"question":"Write a Python function using detailed and efficient docstrings, which is capable of identifying and returning an ordered list of uncommon characters present only in one of the two given strings, not sorted alphabetically but based on their Unicode code points. Ensure that the function demonstrates clear and logical problem-solving steps, reflecting a deeper understanding of string manipulation and character encoding in Python.","solution":"def uncommon_chars(str1, str2): Identifies and returns an ordered list of uncommon characters present only in one of the two given strings. Args: str1 (str): The first input string. str2 (str): The second input string. Returns: list: A list of characters that are present in only one of the input strings. The characters in the list are ordered based on their Unicode code points. # Converting strings to sets to find unique characters set1 = set(str1) set2 = set(str2) # Finding uncommon characters uncommon_set = (set1 - set2) | (set2 - set1) # Sorting the characters by their Unicode code points uncommon_chars_sorted = sorted(uncommon_set, key=lambda x: ord(x)) return uncommon_chars_sorted"},{"question":"How do you write a recursive function in Python to calculate the factorial of a number, but also add logic to handle large numbers and avoid overflow? Could you also make sure the function is efficient in terms of time and space complexity?","solution":"from functools import lru_cache @lru_cache(maxsize=None) def factorial(n): Returns the factorial of n using a recursive approach with memoization. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Construct a recursive function in Python programming language that not only computes the factorial of a provided integer, but also keeps tally of the amount of recursive operations required to reach this result. Furthermore, this function should handle potential edge cases, such as when the input is zero or a negative number.","solution":"def factorial(n, count=0): Compute the factorial of a provided integer \`n\`, and keep tally of the amount of recursive operations required to reach this result. Parameters: n (int): The integer to compute the factorial for. count (int): The current count of recursive operations. Returns: (int, int): Tuple containing the factorial of \`n\` and the tally of recursive operations. if n < 0: return None, count if n == 0 or n == 1: return 1, count + 1 factorial_n_minus_1, updated_count = factorial(n-1, count + 1) return n * factorial_n_minus_1, updated_count"},{"question":"Create a Python URL parsing function that meticulously handles not only 'https://www.example.com/path/to/page?name=value&another=value', but also URLs without 'https://'. The function should correctly isolate and categorically identify the protocol, domain, path, and query parameters, while accounting for possible absence of any of these components. In essence, strip the URL to its bare components and return these components in a dictionary format.","solution":"from urllib.parse import urlparse, parse_qs def parse_url(url): Parse the given URL into its components: protocol, domain, path, and query parameters. if not url.startswith('http://') and not url.startswith('https://'): url = 'http://' + url parsed_url = urlparse(url) result = { 'protocol': parsed_url.scheme, 'domain': parsed_url.netloc, 'path': parsed_url.path, 'query_params': parse_qs(parsed_url.query) } return result"},{"question":"Given a list of words, write a Python program to remove all duplicates from the list while preserving the original order of the elements. You should not use any built-in functions or libraries that directly solve the problem.","solution":"def remove_duplicates(words): Remove duplicates from the list of words while preserving order. seen = set() unique_words = [] for word in words: if word not in seen: unique_words.append(word) seen.add(word) return unique_words"},{"question":"Develop a function in Python that not only finds the frequency of a specific character in a string, but also returns the indexes in the string where the character appeared. Furthermore, create a feature in your function that allows for sensitivity to upper and lower case characters based on an input flag.","solution":"def char_frequency_and_indexes(s, char, case_sensitive=True): Returns the frequency of 'char' in the string 's' and the list of indexes where 'char' appears. :param s: The string to search within. :param char: The character to find in the string. :param case_sensitive: If True, the search is case-sensitive. If False, the search is case-insensitive. :return: A tuple (frequency, list_of_indexes). if not case_sensitive: s = s.lower() char = char.lower() indexes = [i for i, c in enumerate(s) if c == char] frequency = len(indexes) return frequency, indexes"},{"question":"Write a function in Python to check if a given string is an isogram (a word or phrase without a repeating letter)","solution":"def is_isogram(s): Checks if a given string is an isogram (a word or phrase without repeating letters). I ignore spaces and consider it to be case-insensitive. s = s.replace(\\" \\", \\"\\").lower() return len(s) == len(set(s))"},{"question":"Write a python program to encrypt a given message using a simple substitution cipher based on a given key.","solution":"def encrypt_message(key, message): Encrypts the given message using a simple substitution cipher based on the given key. Parameters: key (str): A 26-character string representing the substitution key where each character corresponds to the alphabet's replacement. message (str): The message to be encrypted. Returns: str: The encrypted message. alphabet = 'abcdefghijklmnopqrstuvwxyz' key_map = {alphabet[i]: key[i] for i in range(26)} encrypted_message = '' for char in message: if char.lower() in key_map: new_char = key_map[char.lower()] if char.isupper(): new_char = new_char.upper() encrypted_message += new_char else: encrypted_message += char return encrypted_message"},{"question":"Generate a sorted list of numbers in an array using insertion sort, without using any built-in sorting functions or methods.","solution":"def insertion_sort(arr): Sorts a list of numbers in ascending order using the insertion sort algorithm. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function in Python to take a string as input and return a dictionary with the count of each unique vowel in the string. The function should ignore case and consider only the following vowels: 'a', 'e', 'i', 'o', 'u'. If the string does not contain any of these vowels, the function should return an empty dictionary.","solution":"def count_vowels(s): Returns a dictionary with the count of each unique vowel in the string. The function ignores case and considers only the vowels 'a', 'e', 'i', 'o', 'u'. Parameters: s (str): The input string. Returns: dict: A dictionary with the count of each unique vowel. vowels = 'aeiou' s = s.lower() result = {} for char in s: if char in vowels: if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"Formulate the Fibonacci sequence in Python, a notorious problem in computer science requiring the computation of the nth value in said sequence. Additionally, implement memoization to optimize the solution for larger input values. Test your solution's efficiency by calculating the 50th value in the sequence.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] # Example computation for the 50th Fibonacci number result = fibonacci(50)"},{"question":"Write a function that takes a list of integers as input and returns a list of unique prime numbers present in the input list, sorted in ascending order. The function should have a time complexity of O(n√m), where n is the length of the input list and m is the maximum value in the input list.","solution":"import math def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def unique_sorted_primes(numbers): Returns a list of unique prime numbers present in the input list, sorted in ascending order. primes = {num for num in numbers if is_prime(num)} return sorted(primes)"},{"question":"Develop an algorithmic solution leveraging the intricacies of QuickSort methodology, applied specifically to doubly linked data structures. This is opposed to the usual scenarios which frequently use arrays, thereby adding an extra layer of complexity to the programming challenge at hand.Let's consider the structure of a doubly linked list, Node, which comes equipped with 'prev', 'next' pointers and 'data' attributes.","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None def partition(low, high): pivot = high.data i = low.prev j = low while j != high: if j.data <= pivot: if i is None: i = low else: i = i.next i.data, j.data = j.data, i.data j = j.next if i is None: i = low else: i = i.next i.data, high.data = high.data, i.data return i def quicksort(low, high): if low and high and low != high and low != high.next: pivot = partition(low, high) quicksort(low, pivot.prev) quicksort(pivot.next, high) def last_node(node): while node and node.next: node = node.next return node def quicksort_doubly_linked_list(head): if head is None: return high = last_node(head) quicksort(head, high)"},{"question":"Write a Python program that takes a list of integers as input and prints the sum of all elements in the list. Make sure to use a loop to iterate through the list and calculate the sum.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. Parameters: lst (list): A list of integers. Returns: int: The sum of all elements in the list. total = 0 for elem in lst: total += elem return total"},{"question":"Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character. The code should handle strings of any length efficiently.","solution":"import re def replace_non_alphanumeric(input_string, replacement_char): Replaces all non-alphanumeric characters in the input_string with the replacement_char. Args: input_string (str): The string to process. replacement_char (str): The character to replace non-alphanumeric characters with. Returns: str: The processed string with non-alphanumeric characters replaced. if len(replacement_char) != 1: raise ValueError(\\"Replacement character must be a single character.\\") return re.sub(r'[^a-zA-Z0-9]', replacement_char, input_string)"},{"question":"Write a python function that takes two parameters: \`matrix\`, a 2D list of integers of variable lengths, and \`k\`, an integer indicating how many columns you should consider from the start of each row.","solution":"def sum_k_columns(matrix, k): Takes a 2D list of integers (matrix) and an integer k. Returns a list of sums of the first k columns of each row. if k < 0: raise ValueError(\\"k should be a non-negative integer\\") sums = [] for row in matrix: row_sum = sum(row[:k]) # Sum up to the first k columns in each row sums.append(row_sum) return sums"},{"question":"Define a function that takes a string as input and returns true if it is a valid IPv4 address.","solution":"import re def is_valid_ipv4_address(ip): Returns True if the input string is a valid IPv4 address, otherwise returns False. pattern = re.compile( r'^(d{1,3}.){3}d{1,3}' ) if pattern.match(ip): parts = ip.split(\\".\\") for part in parts: if int(part) < 0 or int(part) > 255: return False return True return False"},{"question":"Please create a programming test question with an added complexity constraint that requires using a specific data structure. The question should be about implementing a priority queue using a Min-Heap data structure and should include the following components: defining the Min-Heap class with specific methods, providing a code snippet with errors to debug, and asking for time and space complexity analysis of the implementation.","solution":"class MinHeap: def __init__(self): self.heap = [] def insert(self, val): self.heap.append(val) self._heapify_up(len(self.heap) - 1) def _heapify_up(self, index): parent_index = (index - 1) // 2 if index > 0 and self.heap[index] < self.heap[parent_index]: self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index] self._heapify_up(parent_index) def extract_min(self): if len(self.heap) == 0: return None if len(self.heap) == 1: return self.heap.pop() min_val = self.heap[0] self.heap[0] = self.heap.pop() self._heapify_down(0) return min_val def _heapify_down(self, index): smallest = index left_child = 2 * index + 1 right_child = 2 * index + 2 if left_child < len(self.heap) and self.heap[left_child] < self.heap[smallest]: smallest = left_child if right_child < len(self.heap) and self.heap[right_child] < self.heap[smallest]: smallest = right_child if smallest != index: self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index] self._heapify_down(smallest) def get_min(self): return self.heap[0] if self.heap else None def is_empty(self): return len(self.heap) == 0"},{"question":"Write a Python script that prompts the user to enter a list of numbers. The program should then calculate the median of the numbers and print it out. Make sure to handle cases where the list is empty or contains non-numeric data, in which case your program should output an appropriate error message. Use comments to explain your code where necessary.","solution":"def calculate_median(numbers): Calculate and return the median of a list of numbers. If the list is empty or contains non-numeric data, raise a ValueError. if not numbers: raise ValueError(\\"The list is empty.\\") # Check if all elements are numbers for num in numbers: if not isinstance(num, (int, float)): raise ValueError(\\"The list contains non-numeric data.\\") sorted_numbers = sorted(numbers) n = len(sorted_numbers) # Calculate median if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 return median"},{"question":"Create a= function in Python to split a string into a list of strings using a specified separator.","solution":"def split_string(s, sep): Splits the given string s into a list of strings using the specified separator sep. Parameters: s (str): The string to be split. sep (str): The separator to use for splitting the string. If sep is not specified or is None, any whitespace string is a separator. Returns: list: A list of strings obtained by splitting s using sep. return s.split(sep)"},{"question":"Write a function in Python to remove all numbers from an array that are divisible by 3.","solution":"def remove_divisible_by_3(arr): Remove all numbers from the array that are divisible by 3. Parameters: arr (list of int): Input array of integers. Returns: list of int: Array with numbers not divisible by 3. return [x for x in arr if x % 3 != 0]"},{"question":"Write a Python function that finds the intersection between two lists, returning the shared values. The function should be case-sensitive and consider numbers as different entities than their string representations. Additionally, the function should return the result as a list and not count duplicates.","solution":"def list_intersection(list1, list2): Returns a list of shared values between list1 and list2, excludes duplicates. The function is case-sensitive and treats strings and numbers as distinct. # Use sets to find the intersection and remove duplicates set1 = set(list1) set2 = set(list2) intersection = set1 & set2 return list(intersection)"},{"question":"Write me a small python code to do the following: Given a directory with a set of markdown files, the code should search for the characters '&&' in a line and assume this to be a latex command. The code should proceed to enclose these commands with single dollar signs ''. Additionally, write a test file to confirm if this code works as expected.","solution":"import os def update_latex_commands(directory): Searches for '&&' in lines of markdown files within the given directory and encloses these commands with single dollar signs ''. for filename in os.listdir(directory): if filename.endswith(\\".md\\"): full_path = os.path.join(directory, filename) with open(full_path, 'r', encoding='utf-8') as file: lines = file.readlines() with open(full_path, 'w', encoding='utf-8') as file: for line in lines: if '&&' in line: line = line.replace('&&', '&&') file.write(line)"},{"question":"Given a list of strings, write a Python program to remove all duplicates from the list while maintaining the original order of the elements. Your program should have a time complexity of O(n) where n is the number of elements in the list.","solution":"def remove_duplicates(strings): Given a list of strings, remove all duplicates while maintaining the original order. Parameters: strings (list): List of strings that may contain duplicates Returns: list: A new list with duplicates removed, maintaining the original order seen = set() result = [] for string in strings: if string not in seen: result.append(string) seen.add(string) return result"},{"question":"Reverse the order of a list without using the built-in reverse function, any additional list or array for temporary storage, or recursion. Additionally, your solution should have a time complexity of O(n), where n is the length of the list.","solution":"def reverse_list_in_place(lst): Reverses the order of a list in place without using built-in reverse function, any additional list or array for temporary storage, or recursion. start = 0 end = len(lst) - 1 while start < end: # Swap the elements at the start and end indices lst[start], lst[end] = lst[end], lst[start] # Move the start and end pointers towards the center start += 1 end -= 1"},{"question":"Write a Python function that takes a positive integer and returns the exact product of all positive integers that are less than or equal to the given number and are co-prime to it.","solution":"from math import gcd def coprime_product(n): Returns the product of all positive integers less than or equal to n that are co-prime to n. if n <= 0: raise ValueError(\\"The input must be a positive integer\\") product = 1 for i in range(1, n + 1): if gcd(n, i) == 1: product *= i return product"},{"question":"Given a list of integers, write a function in Python that reverses the list in place. Avoid using Python's built-in reverse() function or any additional data structures for an optimal solution. Your function should aim at minimizing both time and space complexity.","solution":"def reverse_list_in_place(lst): Reverses the list of integers in place. Parameters: lst (List[int]): A list of integers to be reversed. Returns: None: The list is reversed in place. start, end = 0, len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1"},{"question":"My python code produces outputs to the stdout. Now I want to record it in different files based on the stdout output. For example, if the stdout output is \\"0\\", I would like it to be stored in a file titled \\"output0\\", and so on. I have tried using the \`tee\` command from shell, however, it stops the function execution. How could I modify the function \`strip_to_file\` so that each output is not only printed to the STDOUT, but also to the file at the same time, depending on the output? I do not want to store all the outputs in memory first and then write them to the file using \`write\`.","solution":"import sys def strip_to_file(): Reads input from STDIN, writes it to STDOUT, and also writes it to a file named outputX where X is the first line of the output. for line in sys.stdin: stripped_line = line.strip() print(stripped_line) if stripped_line: first_char = stripped_line[0] with open(f\\"output{first_char}.txt\\", \\"a\\") as f: f.write(stripped_line + 'n')"},{"question":"Develop a Python function that calculates the total volume of a given list of cylinders and spheres, where each object is represented by a dictionary containing 'radius', 'height' for cylinders, and 'segment' for spheres (only 'radius' for full spheres, segment could be 'hemisphere', 'quarter').","solution":"import math def calculate_volume(obj_list): total_volume = 0 for obj in obj_list: if obj['type'] == 'cylinder': radius = obj['radius'] height = obj['height'] volume = math.pi * radius ** 2 * height elif obj['type'] == 'sphere': radius = obj['radius'] if 'segment' not in obj or obj['segment'] == 'full': volume = (4/3) * math.pi * radius ** 3 elif obj['segment'] == 'hemisphere': volume = (2/3) * math.pi * radius ** 3 elif obj['segment'] == 'quarter': volume = (1/3) * math.pi * radius ** 3 total_volume += volume return total_volume"},{"question":"You need to implement a function that finds the longest substring without repeating characters in a given string.","solution":"def longest_unique_substring(s: str) -> int: Finds the length of the longest substring without repeating characters. :param s: A string :return: The length of the longest substring without repeating characters. start = 0 max_length = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, i - start + 1) used_chars[char] = i return max_length"},{"question":"Write a function in Python to check if a given string is an isogram (a word or phrase without a repeating letter).","solution":"def is_isogram(string): Returns True if the given string is an isogram (a word or phrase without a repeating letter), otherwise returns False. Ignore case and non-letter characters. cleaned_string = ''.join(char.lower() for char in string if char.isalpha()) return len(set(cleaned_string)) == len(cleaned_string)"},{"question":"Read the input values and write a program that creates a complete binary tree from the values. The input values are guaranteed to be in such a way that a complete binary tree can be formed. Ensure that each level of the tree is fully filled except possibly the last level, which will be filled from left to right. The nodes should be represented as a binary tree class that has a value and pointers to its left and right children. Example input: [4, 2, 5, 1, 3] Example output: 4 / 2 5 / 1 3","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def create_complete_binary_tree(values): Create a complete binary tree from the list of values and return the root. if not values: return None nodes = [TreeNode(value) for value in values] for i in range((len(values) - 1) // 2 + 1): if 2 * i + 1 < len(values): nodes[i].left = nodes[2 * i + 1] if 2 * i + 2 < len(values): nodes[i].right = nodes[2 * i + 2] return nodes[0] def tree_to_list(root): Helper function to convert a binary tree to a list (level order) for easy testing. if not root: return [] result, queue = [], [root] while queue: node = queue.pop(0) if node: result.append(node.value) queue.append(node.left) queue.append(node.right) else: result.append(None) # Remove trailing \`None\`s while result and result[-1] is None: result.pop() return result"},{"question":"Write a fruitful function in Python called \\"subtract_two_numbers\\" that takes two float numbers as input arguments and returns the subtraction result of the first number minus the second number. The function should also include error handling to check if the input arguments are of valid type, and it should raise a TypeError if the inputs are not float. Additionally, the function should have a check function with provided data points to verify its correctness.","solution":"def subtract_two_numbers(a, b): Returns the subtraction of b from a. Parameters: a (float): The first number. b (float): The second number. Returns: float: Result of the subtraction a - b. Raises: TypeError: If inputs are not of type float. if not isinstance(a, float) or not isinstance(b, float): raise TypeError(\\"Both a and b should be of type float\\") return a - b"},{"question":"Write a function named \\"calculate_sum_of_multiples\\" that takes an integer \\"limit\\" as an argument. The function should calculate the sum of all the multiples of 3 or 5 below the \\"limit\\" and return this sum. However, the function should also validate the provided \\"limit\\". If the limit is not a positive integer, the function should raise a ValueError with the message \\"Invalid limit provided: limit must be a positive integer\\".","solution":"def calculate_sum_of_multiples(limit): Calculates the sum of all multiples of 3 or 5 below the given limit. Raises ValueError if the limit is not a positive integer. if not isinstance(limit, int) or limit <= 0: raise ValueError(\\"Invalid limit provided: limit must be a positive integer\\") total_sum = 0 for num in range(limit): if num % 3 == 0 or num % 5 == 0: total_sum += num return total_sum"},{"question":"Is there a way to detect a loop in a linked list using Python?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Detects if a cycle exists in a linked list. :param head: ListNode, the head of the linked list :return: bool, True if a cycle is detected, otherwise False if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Given the string \\"123456\\", write a function in Python that converts the string into an integer.","solution":"def string_to_integer(s): Converts the string s into an integer. try: return int(s) except ValueError: return None"},{"question":"Write a function to print all the paths from the root node to leaf nodes in a given binary tree","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def all_paths(root): Given the root of a binary tree, this function returns all paths from the root to leaf nodes. Each path is represented as a list of node values. def dfs(node, path, paths): if node: path.append(node.value) if not node.left and not node.right: # leaf node paths.append(list(path)) else: dfs(node.left, path, paths) dfs(node.right, path, paths) path.pop() paths = [] dfs(root, [], paths) return paths"},{"question":"Given a single-linked list and an integer k, write a function that splits the list into k sublists each of approximately equal length. After splitting, rearrange these sublists such that they are concatenated in a way that the first element comes from the first sublist, then from the second sublist, and so on, before moving on to the second element from each.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def split_and_rearrange(head, k): # Function to find the length of the linked list def get_length(node): length = 0 while node: length += 1 node = node.next return length length = get_length(head) sub_size, extra = divmod(length, k) # Create the k sublists sublists = [] current = head for i in range(k): sub_head = current prev = None for j in range(sub_size + (1 if i < extra else 0)): prev = current current = current.next if prev: prev.next = None sublists.append(sub_head) # Create the new rearranged list pseudo_head = ListNode(0) last = pseudo_head while any(sublists): for i in range(k): if sublists[i]: last.next = sublists[i] last = last.next sublists[i] = sublists[i].next return pseudo_head.next"},{"question":"I need a clear Python solution to count all prime numbers less than a given non-negative number. Can you write an efficient algorithm for that?","solution":"def count_primes(n): Returns the count of prime numbers less than the given non-negative number n. if n <= 2: return 0 is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers. for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n, i): is_prime[j] = False return sum(is_prime)"},{"question":"Complete the code for the given function which takes a list as input and returns a new list. The new list must show the number of times each element from the input list appears in it, but in a sorted descending order based on frequency. If two elements have the same frequency, they should be sorted by their natural order.","solution":"from collections import Counter def frequency_sort(lst): Takes a list as input and returns a new list showing the number of times each element from the input list appears in it, sorted in descending order of frequency. If two elements have the same frequency, they are sorted by their natural order. count = Counter(lst) sorted_items = sorted(count.items(), key=lambda x: (-x[1], x[0])) result = [] for item, freq in sorted_items: result.extend([item] * freq) return result"},{"question":"Ok, so my environment is cloud-based, using GCP, all software is written in Python. I'm using JupyterLab and Colab primarily. I'd like to spin up a small experiment using the Particle Swarm Optimization algorithm on a sphere function, where the number of dimensions can be set (by me).","solution":"import numpy as np def sphere_function(x): Sphere function for optimization. The input x is a vector, representing the solution. return sum(xi ** 2 for xi in x) def particle_swarm_optimization(cost_func, dimensions, num_particles=30, max_iter=100, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5): Particle Swarm Optimization algorithm. Parameters: - cost_func: The cost function to minimize. - dimensions: Number of dimensions of the solution space. - num_particles: Number of particles in the swarm. - max_iter: Maximum number of iterations. - inertia_weight: Inertia weight. - cognitive_weight: Cognitive (local) weight. - social_weight: Social (global) weight. Returns: Tuple of best solution and its cost. # Initialize the particle positions and velocities particle_positions = np.random.rand(num_particles, dimensions) * 10 - 5 # Random between [-5, 5] particle_velocities = np.random.rand(num_particles, dimensions) * 2 - 1 # Random between [-1, 1] personal_best_positions = np.copy(particle_positions) personal_best_scores = np.array([cost_func(p) for p in particle_positions]) best_particle_index = np.argmin(personal_best_scores) global_best_position = personal_best_positions[best_particle_index] global_best_score = personal_best_scores[best_particle_index] # PSO main loop for _ in range(max_iter): for i in range(num_particles): # Update velocity r1, r2 = np.random.rand(), np.random.rand() cognitive_component = cognitive_weight * r1 * (personal_best_positions[i] - particle_positions[i]) social_component = social_weight * r2 * (global_best_position - particle_positions[i]) particle_velocities[i] = inertia_weight * particle_velocities[i] + cognitive_component + social_component # Update position particle_positions[i] += particle_velocities[i] # Update personal best current_cost = cost_func(particle_positions[i]) if current_cost < personal_best_scores[i]: personal_best_positions[i] = particle_positions[i] personal_best_scores[i] = current_cost # Update global best if current_cost < global_best_score: global_best_position = particle_positions[i] global_best_score = current_cost return global_best_position, global_best_score"},{"question":"Create an array of 10 boolean values and set it to \\"False\\". Additionally, create a function that takes in the array as a parameter and randomly sets one of the boolean values to \\"True\\" each time it is called. The function should also ensure that the previously set \\"True\\" value is reset to \\"False\\" before setting a new random value.","solution":"import random def create_boolean_array(size=10): Creates an array of boolean values initialized to False. return [False] * size def set_random_true(boolean_array): Sets a random value in the boolean array to True. Ensures the previously set True value is reset to False. # Reset previous True value if exists if any(boolean_array): previous_true_index = boolean_array.index(True) boolean_array[previous_true_index] = False # Set a random index to True random_index = random.randint(0, len(boolean_array) - 1) boolean_array[random_index] = True return boolean_array"},{"question":"Implement a breadth-first search algorithm in Python with a space complexity of O(n) and a time complexity of O(V+E), where V is the number of vertices and E is the number of edges in the graph. Additionally, ensure that the algorithm can handle a directed graph and return the shortest path between two given vertices.","solution":"from collections import deque, defaultdict def bfs_shortest_path(graph, start, goal): Returns the shortest path between start and goal vertices in a directed graph using BFS. if start == goal: return [start] # Keep track of visited nodes visited = set() # Queue for BFS queue = deque([(start, [start])]) while queue: # Pop the first node current_vertex, path = queue.popleft() # If we have reached the goal return the path if current_vertex not in visited: if current_vertex == goal: return path # Mark the node as visited visited.add(current_vertex) # Add neighbors to the queue for neighbor in graph[current_vertex]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) # If no path is found return None"},{"question":"Create a python function to determine if a given number is prime or not. However, you are not allowed to use any built-in functions or libraries for determining prime numbers. You must implement the logic from scratch.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False i = 3 while i * i <= n: if n % i == 0: return False i += 2 return True"},{"question":"Translate the following pseudocode to python code. Additionally, include error handling for non-integer 'a' and 'b', and ensure input is not zero.","solution":"def add(a, b): Returns the sum of a and b if both are integers and non-zero, raises appropriate error messages otherwise. if not isinstance(a, int) or not isinstance(b, int): return \\"Error: Inputs must be integers\\" if a == 0 or b == 0: return \\"Error: Inputs must be non-zero\\" return a + b"},{"question":"I have an iterator in Python and I'm trying to write a function that yields elements from it by pairs. The function should keep track of the last two elements that were yielded. When a new element is added, it should return the previous element and the new element as a tuple. Additionally, when the function is called initially, it should return the starting element and \`None\`. Can you help me with this implementation?","solution":"def pairwise_yielder(iterator): Yields elements from the iterator by pairs. Yields a tuple containing (previous_element, current_element). The first yield will have (None, first_element). :param iterator: Iterable object from which to yield elements. prev_element = None for current_element in iterator: yield (prev_element, current_element) prev_element = current_element"},{"question":"Write a code to reverse a stack without using any auxiliary stack or queue, and with time complexity (O(n)), where (n) is the size of the stack.","solution":"def reverse_stack(stack): Reverses the given stack in place. :param stack: List representing the stack. The end of the list is considered the top of the stack. if not stack: return def insert_at_bottom(stack, item): if not stack: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse(stack): if stack: temp = stack.pop() reverse(stack) insert_at_bottom(stack, temp) reverse(stack)"},{"question":"Create an algorithm to traverse a binary tree in post-order in Python.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def post_order_traversal(root): Traverse the binary tree in post-order and return a list of values. if root is None: return [] result = [] def traverse(node): if node.left: traverse(node.left) if node.right: traverse(node.right) result.append(node.value) traverse(root) return result"},{"question":"Create a code to print the items from a given array in reverse without using any built-in functions or methods for reversing an array. The code should only use logical steps and operations to achieve the desired result. Additionally, the code should have a time complexity of O(n), where n is the length of the array.","solution":"def reverse_array(arr): Returns a new array with the elements of input array 'arr' reversed. :param arr: List to be reversed :return: New list with elements in reverse order n = len(arr) reversed_arr = [None] * n for i in range(n): reversed_arr[i] = arr[n - i - 1] return reversed_arr"},{"question":"Create a function \\"cal_days\\" in Python that calculates the number of days in a given month. The function should validate the input and handle errors gracefully.","solution":"def cal_days(month, year): Returns the number of days in a given month of a given year. Args: month (int): Month in the calendar (1=January, 2=February, ..., 12=December) year (int): Year in the calendar Returns: int: Number of days in the month if not isinstance(month, int) or not isinstance(year, int): raise ValueError(\\"Month and Year must be integers\\") if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") if year < 1: raise ValueError(\\"Year must be a positive integer\\") # Days in each month month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for leap year in case of February if month == 2: if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 return month_days[month - 1]"},{"question":"Develop a Python algorithm to transform a nested list, specifically a 2D matrix, into a single linear list.","solution":"def flatten_matrix(matrix): Transforms a 2D matrix into a single linear list. Args: matrix (list of lists): The 2D matrix to flatten. Returns: list: The flattened list. return [element for row in matrix for element in row]"},{"question":"Given a list of integers (containing only unique elements) in Python, write a function that not only reverses the elements of the list but also finds the sum of all prime numbers in the reversed list.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def reverse_and_sum_primes(arr): Reverses the elements of the list and returns the sum of all prime numbers in the reversed list. reversed_list = arr[::-1] prime_sum = sum(filter(is_prime, reversed_list)) return reversed_list, prime_sum"},{"question":"Can you create a Python script that adds a new key-value pair (name, year) to the following dictionary, where the name is a string and the year is an integer? Also, print the updated dictionary.","solution":"def add_key_value_pair(name, year, dictionary): Adds a new key-value pair (name, year) to the dictionary. Parameters: name (str): The name to be added as a key. year (int): The year to be added as a value. dictionary (dict): The dictionary to which the key-value pair is to be added. Returns: dict: The updated dictionary with the new key-value pair. dictionary[name] = year return dictionary # Example usage: example_dict = {'Alice': 1990, 'Bob': 1985} updated_dict = add_key_value_pair('Charlie', 2000, example_dict) print(updated_dict)"},{"question":"Write an algorithm that searches for a given item in a sorted array and returns its index. If the item is not found in the array, the function should return -1. However, instead of using a linear search, use a binary search algorithm for more efficiency. The array provided will not contain any duplicate values.","solution":"def binary_search(arr, item): Performs a binary search for the given item in a sorted array. Returns the index of the item if found, otherwise returns -1. :param arr: List[int] - a sorted array of integers :param item: int - the item to search for :return: int - the index of the found item or -1 if not found left, right = 0, len(arr) - 1 while left <= right: middle = (left + right) // 2 if arr[middle] == item: return middle elif arr[middle] < item: left = middle + 1 else: right = middle - 1 return -1"},{"question":"Please design a system that can take an integer list as its input and return a sorted list. However, you are now required to implement the sorting algorithm yourself, rather than using a built-in function. Additionally, the time complexity of your solution should still be O(n log n), and the space complexity should still be O(1).","solution":"def quicksort(arr): Sorts a list of integers using the quicksort algorithm. Args: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] less = [x for x in arr if x < pivot] equal = [x for x in arr if x == pivot] greater = [x for x in arr if x > pivot] return quicksort(less) + equal + quicksort(greater)"},{"question":"Make a code to determine whether a given number is prime or not. Additionally, optimize the code to reduce the time complexity to O(sqrt(n)).","solution":"import math def is_prime(number): Determines if a given number is prime. Parameters: number (int): The number to check for primality. Returns: bool: True if the number is prime, False otherwise. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a short script in Python for generating random passwords with the following constraints: at least one uppercase letter, one lowercase letter, one digit, one special character, and a length between 8 and 16 characters.","solution":"import random import string def generate_password(length=12): Generate a random password with at least one uppercase letter, one lowercase letter, one digit, one special character, and a total length between 8 and 16 characters (default is 12). if not 8 <= length <= 16: raise ValueError(\\"Password length must be between 8 and 16 characters\\") characters = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation) ] characters += random.choices(string.ascii_letters + string.digits + string.punctuation, k=length - 4) random.shuffle(characters) return ''.join(characters)"},{"question":"Write a function that takes an integer value and returns its factorial without using any built-in library or function for calculating factorial. Also, implement error handling for cases where the value is lesser than 0, in such a way that it sends a custom error message. Additionally, write test cases to verify your solution.","solution":"def factorial(n): Returns the factorial of n. If n is less than 0, raises a ValueError with a custom error message. if n < 0: raise ValueError(\\"Factorial is not defined for negative values\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n+1): result *= i return result"},{"question":"How can I write a Python function to rank a list of cities based on their population, where cities with higher population are ranked higher? For instance, given the list of cities and their populations: Paris: 2.2, London: 8.9, Berlin: 3.7, I want to rank them accordingly. Can you provide a code snippet for this?","solution":"def rank_cities_by_population(cities): Returns a list of cities ranked by population in descending order. Parameters: cities (dict): A dictionary where keys are city names and values are their populations. Returns: list: A list of city names ranked by population in descending order. return sorted(cities, key=cities.get, reverse=True)"},{"question":"Write a Python script to print out the Fibonacci sequence up to the 30th number.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the nth number in a list. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence # Printing the 30th Fibonacci sequence print(fibonacci_sequence(30))"},{"question":"Write a Python function that determines if one set is a proper subset of another set. The function should return \`True\` if the first set is a proper subset of the second set, and \`False\` otherwise. Remember that a proper subset means all elements of the first set are in the second set, but the second set must contain at least one element not present in the first set.","solution":"def is_proper_subset(set1, set2): Determines if set1 is a proper subset of set2. Parameters: - set1: A set of elements. - set2: A set of elements. Returns: - True if set1 is a proper subset of set2, False otherwise. return set1 < set2"},{"question":"Create a program that generates a dictionary by taking a list as input and mapping its elements to their index positions. The list will contain unique elements of mixed data types (strings, integers, and booleans). In addition, you must include error handling for cases where the list contains non-unique elements, and you need to output the duplicates found.","solution":"def generate_index_mapping(input_list): Generates a dictionary mapping the elements of the input list to their index positions. Raises a ValueError if the input list contains duplicate elements. :param input_list: list of unique elements of mixed data types :return: dictionary with elements as keys and their index positions as values if len(input_list) != len(set(input_list)): duplicates = [item for item in input_list if input_list.count(item) > 1] raise ValueError(f\\"List contains duplicate elements: {set(duplicates)}\\") return {element: index for index, element in enumerate(input_list)}"},{"question":"Write recursive python code to find the sum of an arithmetic series that starts with an integer \\"start\\", and each subsequent term increases from the previous by an integer \\"difference\\" until it reaches an integer \\"stop\\". The sum should only be calculated for numbers that are divisible by an integer 'divisor'. If 'divisor' is 1, the sum for all numbers in the series should be returned.","solution":"def sum_arithmetic_series(start, difference, stop, divisor): Recursively calculates the sum of an arithmetic series that starts with 'start', increases by 'difference' and goes up to 'stop'. The sum should include only those terms that are divisible by 'divisor'. # Base case: If start exceeds stop, end the recursion if start > stop: return 0 # If start is divisible by divisor, include it in the sum if start % divisor == 0: return start + sum_arithmetic_series(start + difference, difference, stop, divisor) else: return sum_arithmetic_series(start + difference, difference, stop, divisor)"},{"question":"Develop a Python code snippet that produces a randomly-generated sequence consisting of 5 upper-case alphabetic characters, where each character is unique within the sequence.","solution":"import random import string def generate_unique_uppercase_sequence(): Generates a sequence of 5 unique upper-case alphabetic characters. return ''.join(random.sample(string.ascii_uppercase, 5))"},{"question":"Write a recursive function in Python that implements depth-first search on a binary tree. The binary tree will be represented by a node structure with 'value', 'left', and 'right' attributes. Then, give an example where this function is used to traverse a tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def depth_first_search(root): Perform depth-first search on a binary tree and return a list of values in the order they were visited. if root is None: return [] result = [root.value] result.extend(depth_first_search(root.left)) result.extend(depth_first_search(root.right)) return result # Example usage: # Construct a binary tree # 1 # / # 2 3 # / # 4 5 tree = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3)) # Perform DFS traversal dfs_result = depth_first_search(tree) print(dfs_result) # Output: [1, 2, 4, 5, 3]"},{"question":"Bogo sort, or permutation sort, is a highly inefficient sorting algorithm that works by randomly shuffling an array until it happens to be sorted. Write a Python function using numpy and random libraries to implement a bogo sort algorithm for an array of integers. Also, include a check for whether the array is sorted in your function. However, bear in mind that this method is mainly of theoretical interest, and it's not practical for large or even medium-sized lists due to its poor performance.","solution":"import numpy as np import random def is_sorted(arr): Checks if the array is sorted in non-decreasing order. return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) def bogo_sort(arr): Sorts an array using the bogo sort algorithm, which shuffles the array until it happens to be sorted. while not is_sorted(arr): np.random.shuffle(arr) return arr"},{"question":"Create an encryption algorithm that encodes a message by reversing the order of the letters and then shifting each letter by a random number of positions in the alphabet. The algorithm should also have the capability to add a random or predefined string of characters (cipher key) to further obfuscate the message. Decryption should only be possible with knowledge of the cipher key and the reverse-shift algorithm.","solution":"import random import string def generate_cipher_key(length=10): Generates a random cipher key of the specified length. return ''.join(random.choices(string.ascii_letters + string.digits, k=length)) def shift_char(c, shift): Shifts a character by the specified number of positions in the alphabet. if c.isalpha(): base = ord('A') if c.isupper() else ord('a') return chr((ord(c) - base + shift) % 26 + base) else: return c def encode_message(message, cipher_key): Encodes the message by reversing the order of the letters and then shifting each letter. reversed_message = message[::-1] encoded_message = ''.join(shift_char(c, ord(cipher_key[i % len(cipher_key)]) % 26) for i, c in enumerate(reversed_message)) return encoded_message def decode_message(encoded_message, cipher_key): Decodes the message by shifting each letter back and then reversing the order. decoded_reversed_message = ''.join(shift_char(c, -ord(cipher_key[i % len(cipher_key)]) % 26) for i, c in enumerate(encoded_message)) decoded_message = decoded_reversed_message[::-1] return decoded_message"},{"question":"Write a script to display \\"Hello World\\" in the console twenty times. Additionally, the script must check for available updates online before running. If an update is available, prompt the user to confirm whether they want to download and install the update before proceeding with the console output. If the user declines the update, the script should still run and display \\"Hello World\\" in the console twenty times. However, if the user accepts the update, the script should download and install the update before displaying \\"Hello World\\" in the console twenty times.","solution":"import requests def check_for_updates(): Placeholder function to simulate checking for updates online. Returns True if an update is available, otherwise False. # Simulating an update check by returning True, assumes an update is always available return True def download_and_install_update(): Placeholder function to simulate downloading and installing the update. print(\\"Downloading and installing update...\\") def print_hello_world(times=20): Prints 'Hello World' specified number of times. for _ in range(times): print(\\"Hello World\\") def main(): if check_for_updates(): user_input = input(\\"An update is available. Do you want to download and install it? (yes/no): \\") if user_input.lower() == 'yes': download_and_install_update() else: print(\\"Skipping update.\\") print_hello_world() if __name__ == \\"__main__\\": main()"},{"question":"Write a function that takes a list of file names and finds the smallest K files, while avoiding any duplicate files in the final selection. It should return names of these files in the format of their full paths. In addition, the solution must perform efficiently with a time complexity within a reasonable limit for large input sizes. You should not use any built-in functions for sorting or removing duplicates.","solution":"import os def find_smallest_k_files(file_paths, k): Find the smallest K files by size, avoiding duplicates, and return their full paths. Parameters: file_paths (list of str): List of absolute file paths. k (int): Number of smallest files to return. Returns: list of str: List of full paths to the smallest K files by size. if not file_paths: return [] # Dictionary to store unique file path and their sizes file_size_dict = {} # Fill in the dictionary with file paths and their sizes if unique paths for path in file_paths: file_size = os.path.getsize(path) if path not in file_size_dict: file_size_dict[path] = file_size # Convert dictionary items to a list of tuples (path, size) and sort based on size sorted_files = sorted(file_size_dict.items(), key=lambda item: item[1]) # Get the first K file paths from the sorted list smallest_k_files = [file[0] for file in sorted_files[:k]] return smallest_k_files"},{"question":"Write a python function that takes a list of dictionaries as an argument, and returns a dictionary with a list of keys as the key values and a list of values corresponding to those keys as the value values.","solution":"def extract_keys_and_values(dict_list): Returns a dictionary with two keys: 'keys' and 'values'. 'keys' will be a list of all unique keys found in the list of dictionaries. 'values' will be a list of lists, where each sublist contains values corresponding to each key in 'keys'. :param dict_list: List of dictionaries :return: Dictionary with lists of keys and values all_keys = set() for d in dict_list: all_keys.update(d.keys()) result = { 'keys': list(all_keys), 'values': {key: [] for key in all_keys} } for d in dict_list: for key in all_keys: result['values'][key].append(d.get(key)) # Convert the values dict to lists result['values'] = [result['values'][key] for key in result['keys']] return result"},{"question":"Write a program to find the node at which intersection occurs in a given two singly linked lists. Additionally, analyze a provided piece of code that attempts to solve the same problem but contains some logical errors. Identify and correct these errors in your final solution.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def get_intersection_node(headA, headB): Finds the node at which the intersection of two singly linked lists begins. If no intersection, return None. if not headA or not headB: return None # Pointers to traverse the lists p1, p2 = headA, headB while p1 != p2: p1 = p1.next if p1 else headB p2 = p2.next if p2 else headA return p1"},{"question":"Write a code in Python for comparing two strings without using any built-in function, loops, or recursion. The code should have a time complexity of O(n), where n is the length of the longer string.","solution":"def compare_strings(str1, str2): Compares two strings without using any built-in function, loops, or recursion. If str1 is less than str2, it returns -1. If str1 is equal to str2, it returns 0. If str1 is greater than str2, it returns 1. def helper(index): if index >= len(str1) and index >= len(str2): return 0 if index >= len(str1): return -1 if index >= len(str2): return 1 if str1[index] < str2[index]: return -1 if str1[index] > str2[index]: return 1 return helper(index + 1) return helper(0)"},{"question":"How can I write a Python function that can calculate the Longest Common Subsequence (LCS) for three input strings? The function should also be capable of handling strings of different lengths and it must return the length of the LCS along with the actual LCS string. Additionally, could you include an example where the function is used with the strings \\"AGGT12\\", \\"12TXAYB\\", and \\"12XBA\\"? Here's a piece of code to start with, but it only works for two strings. How can this be modified to work for three strings?","solution":"def lcs_of_three(X, Y, Z): Returns the length and the longest common subsequence (LCS) of three input strings X, Y, and Z. m, n, o = len(X), len(Y), len(Z) L = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)] # Building the LCS table in bottom-up fashion for i in range(m + 1): for j in range(n + 1): for k in range(o + 1): if i == 0 or j == 0 or k == 0: L[i][j][k] = 0 elif X[i-1] == Y[j-1] == Z[k-1]: L[i][j][k] = L[i-1][j-1][k-1] + 1 else: L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) # Reconstructing the longest common subsequence from the LCS table lcs_length = L[m][n][o] lcs_string = \\"\\" i, j, k = m, n, o while i > 0 and j > 0 and k > 0: if X[i-1] == Y[j-1] == Z[k-1]: lcs_string = X[i-1] + lcs_string i -= 1 j -= 1 k -= 1 elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]: i -= 1 elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]: j -= 1 else: k -= 1 return (lcs_length, lcs_string) # Example usage x = \\"AGGT12\\" y = \\"12TXAYB\\" z = \\"12XBA\\" print(lcs_of_three(x, y, z)) # Output should be (2, '12')"},{"question":"Create a function 'greet' that takes a string parameter 'name' and returns the string 'Hello name!', where 'name' should be a non-empty string containing only alphabetic characters and have a maximum length of 20 characters.","solution":"def greet(name): Returns a greeting message for the given name. Parameters: name (str): The name to greet. Must be a non-empty string containing only alphabetic characters and have a maximum length of 20 characters. Returns: str: A greeting message. if not isinstance(name, str): raise ValueError(\\"Name must be a string.\\") if not 0 < len(name) <= 20: raise ValueError(\\"Name must be between 1 and 20 characters long.\\") if not name.isalpha(): raise ValueError(\\"Name must contain only alphabetic characters.\\") return f\\"Hello {name}!\\""},{"question":"Develop a programming code for constructing a novel array that consists of elements in the reverse order from the original one, without using any built-in reverse methods. The array can contain both numbers and strings. Additionally, create a function to find the element with the highest frequency in the newly created reversed array.","solution":"def reverse_array(array): Returns a new array which is the reverse of the input array. reversed_array = [] for i in range(len(array) - 1, -1, -1): reversed_array.append(array[i]) return reversed_array def most_frequent_element(array): Returns the most frequent element in the array. frequency = {} max_count = 0 most_frequent = None for element in array: if element in frequency: frequency[element] += 1 else: frequency[element] = 1 if frequency[element] > max_count: max_count = frequency[element] most_frequent = element return most_frequent"},{"question":"Write an algorithm in Python to find the number of distinct words in a given sentence, ignoring case sensitivity and excluding any punctuation marks.","solution":"import string def count_distinct_words(sentence): Returns the number of distinct words in a given sentence, ignoring case sensitivity and excluding any punctuation marks. # Convert sentence to lower case to make it case insensitive sentence = sentence.lower() # Remove punctuation from the sentence sentence = sentence.translate(str.maketrans('', '', string.punctuation)) # Split the sentence into words words = sentence.split() # Use a set to find distinct words distinct_words = set(words) # Return the number of distinct words return len(distinct_words)"},{"question":"Is there a way to create a Python function that generates all possible permutations of a given list? Can you provide a detailed solution?","solution":"from itertools import permutations def generate_permutations(input_list): Generates all possible permutations of the given list. :param input_list: List of elements to generate permutations for. :return: A list of tuples, each containing a permutation of the input list. return list(permutations(input_list))"},{"question":"Use Python to parse a complex nested JSON file, where each nested object is also a JSON file, containing information about countries, cities and points of interest. Furthermore, to add to the complexity, each point of interest also has a nested array of reviews which are in JSON format. Your program should extract, from each nested object, the name of the country, city, point of interest and all the reviews related to that point of interest. Make sure your solution is efficient and can handle unpredictable nesting levels in the JSON file.","solution":"import json def extract_info(nested_json): Extracts from the nested JSON the name of the country, city, point of interest and all the reviews. Parameters: nested_json (dict): The nested JSON data. Returns: list: A list of dictionaries containing country, city, point of interest, and reviews. results = [] def recurse(data, country=None, city=None, poi=None, reviews=None): if 'country' in data: country = data['country'] if 'city' in data: city = data['city'] if 'point_of_interest' in data: poi = data['point_of_interest'] if 'reviews' in data: reviews = data['reviews'] results.append({ \\"country\\": country, \\"city\\": city, \\"point_of_interest\\": poi, \\"reviews\\": reviews }) for value in data.values(): if isinstance(value, dict): recurse(value, country, city, poi, reviews) elif isinstance(value, list): for item in value: if isinstance(item, dict): recurse(item, country, city, poi, reviews) recurse(nested_json) return results"},{"question":"Create a Python program that takes in a positive integer as input and determines whether it is a perfect number. A perfect number is a number that is equal to the sum of its proper divisors (positive divisors excluding itself). Your program should display the proper divisors of the input number and indicate whether it is perfect or not. If the input number is not a positive integer, the program should prompt the user to enter a valid positive integer.","solution":"def is_perfect_number(num): Returns a tuple containing a list of proper divisors of num and a boolean indicating whether num is a perfect number. if num <= 0: raise ValueError(\\"Input must be a positive integer\\") proper_divisors = [i for i in range(1, num) if num % i == 0] is_perfect = sum(proper_divisors) == num return proper_divisors, is_perfect"},{"question":"How can I convert an integer to a binary representation as a string in Python, without using built-in functions that directly perform this conversion? Additionally, write a function that validates the correctness of your binary string by checking if it contains only '0's and '1's?","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. if n == 0: return \\"0\\" binary_str = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 if is_negative: return \\"-\\" + binary_str return binary_str def is_valid_binary_string(binary_str): Checks if the given string is a valid binary representation, containing only '0's and '1's. for char in binary_str: if char not in ['0', '1', '-']: return False return True"},{"question":"Write a function in Python that takes a 2D array and returns the product of all elements in it. However, the array can contain elements of different data types, including integers, floating-point numbers, and strings. You must handle the case when the array contains strings by converting them to numbers (either integers or floating-point numbers) before performing the multiplication. If any element in the array cannot be converted to a number, the function should raise a ValueError. Additionally, the function should handle the case when the array contains nested arrays, and recursively compute the product of all elements in the nested arrays as well.","solution":"def product_of_elements(array): Returns the product of all numeric elements in a 2D array. Converts strings to numbers before multiplication. Recursively handles nested arrays. Raises ValueError for non-convertible elements. def convert_and_multiply(element): if isinstance(element, (int, float)): return element elif isinstance(element, str): try: if '.' in element: return float(element) else: return int(element) except ValueError: raise ValueError(f\\"Cannot convert element '{element}' to a number.\\") elif isinstance(element, list): return product_of_elements(element) else: raise ValueError(f\\"Cannot convert element '{element}' to a number.\\") product = 1 for el in array: product *= convert_and_multiply(el) return product"},{"question":"Write a Python function that takes a list of integers and returns the largest number. If the list is empty, the function should return None. Do not use any built-in max function.","solution":"def find_largest_number(lst): Returns the largest number in a list. If the list is empty, returns None. if not lst: return None largest = lst[0] for num in lst[1:]: if num > largest: largest = num return largest"},{"question":"Construct a Python function called \`custom_round\` that rounds a given floating-point number to a specified precision. Unlike the built-in \`round\` function, this function should allow for a more precise control over the rounding method by implementing the concept of \\"significant figures\\" instead of the traditional decimal places. Additionally, include an option to apply a custom rounding rule when the number is exactly halfway between two possible rounded values, such as rounding towards zero, away from zero, or to the nearest even number.","solution":"def custom_round(number, significant_figures, rounding_rule=\\"nearest_even\\"): Rounds a floating point number to a specified number of significant figures. Parameters: number (float): The number to be rounded. significant_figures (int): The number of significant figures to round to. rounding_rule (str): The rounding rule to apply when the number is exactly halfway between two possible rounded values. Options are: - 'nearest_even' : Round to the nearest even number (banker's rounding). - 'away_from_zero': Round away from zero. - 'towards_zero': Round towards zero. Returns: float: The rounded number. from decimal import Decimal, ROUND_HALF_EVEN, ROUND_HALF_UP, ROUND_DOWN, ROUND_UP if significant_figures <= 0: raise ValueError(\\"Significant figures must be greater than zero\\") d = Decimal(number) # Find the first significant figure power of 10 decimal_places = significant_figures - d.adjusted() - 1 quantize_str = '1.' + '0' * decimal_places rounding_mode = { 'nearest_even': ROUND_HALF_EVEN, 'away_from_zero': ROUND_HALF_UP, 'towards_zero': ROUND_DOWN }.get(rounding_rule, ROUND_HALF_EVEN) result = d.quantize(Decimal(quantize_str), rounding=rounding_mode) return float(result)"},{"question":"Design an algorithm in Python for reversing a singly linked list iteratively without using any extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses a singly linked list iteratively without using any extra space. prev = None current = head while current: next_node = current.next # Store the next node current.next = prev # Reverse the current node's pointer prev = current # Move prev to this node current = next_node # Move to the next node in the list return prev # prev will be the new head of the reversed list"},{"question":"Complete the following function to output a reversed string, but you are not allowed to use any built-in string reversal functions or methods. You are also not allowed to create any new strings or use any additional data structures.","solution":"def reverse_string(s): Reverses the string s in place. if not isinstance(s, list): raise ValueError(\\"Input must be a list of characters.\\") left = 0 right = len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return s"},{"question":"Given a set of豢negations (e.g., \\"not left\\", \\"not right\\", \\"not up\\", \\"not down\\"), write a Python program to randomly select one of these negations, form a complex command string that moves in one of the remaining directions, and finally print the combined command string. For example, if \\"not up\\" was selected, the output could be \\"turn right and go down\\".","solution":"import random def generate_command(): directions = [\\"left\\", \\"right\\", \\"up\\", \\"down\\"] negations = [f\\"not {direction}\\" for direction in directions] selected_negation = random.choice(negations) remaining_directions = [dir for dir in directions if f\\"not {dir}\\" != selected_negation] action1 = random.choice(remaining_directions) remaining_directions.remove(action1) action2 = random.choice(remaining_directions) command = f\\"{selected_negation}, turn {action1} and go {action2}\\" return command"},{"question":"Write a method to calculate the average of an array of n numbers in Python. The array can contain both positive and negative integers, but the average should only consider the positive integers. The method should have a time complexity of O(n) and a space complexity of O(1). Additionally, the method should also handle cases where the array contains floating-point numbers and round the average to the nearest integer. The method should also check if the array is sorted in non-decreasing order and return an error message if it is not.","solution":"def average_of_positives(arr): Calculates the average of positive numbers in the array. Returns an error message if the array is not sorted in non-decreasing order. if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)): return \\"Error: Array is not sorted in non-decreasing order.\\" positive_numbers_sum = 0 positive_numbers_count = 0 for num in arr: if num > 0: positive_numbers_sum += num positive_numbers_count += 1 if positive_numbers_count == 0: return 0 average = positive_numbers_sum / positive_numbers_count return round(average)"},{"question":"Write a function that takes in a list of integers and a target integer, and returns the number of times the target integer appears in the list. The list can contain both positive and negative integers, and can have a maximum length of 10^6. The target integer can be any integer within the range of -10^6 to 10^6. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def count_occurrences(lst, target): Returns the number of times the target integer appears in the list. Parameters: lst (list): A list of integers. target (int): The target integer to be counted in the list. Returns: int: The count of occurrences of the target integer in the list. count = 0 for num in lst: if num == target: count += 1 return count"},{"question":"You need to create a Python program which will update a Markdown file. The code should insert a line of text after each heading in the Markdown file. The inserted line should include the heading name and a timestamp. Make sure that your program can accurately identify headings, differentiate between different heading levels and append a unique timestamp to each inserted line.","solution":"import re from datetime import datetime def update_markdown_with_timestamp(markdown_content): Update a Markdown file content, inserting a line of text after each heading. The inserted line includes the heading name and a timestamp. Parameters: markdown_content (str): Original Markdown content. Returns: str: Modified Markdown content with inserted timestamps. lines = markdown_content.split(\\"n\\") updated_lines = [] for line in lines: updated_lines.append(line) match = re.match(r'^(#{1,6})s+(.*)', line) if match: heading_level = len(match.group(1)) heading_text = match.group(2) timestamp = datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") insert_text = f\\"{'#' * heading_level} {heading_text} - Timestamp: {timestamp}\\" updated_lines.append(insert_text) return \\"n\\".join(updated_lines)"},{"question":"Implement a function that takes in a string as input and returns the length of the longest substring without repeating characters. The function should have a time complexity of O(n). Additionally, the function should only use a constant amount of extra space. You may assume that the input string contains only lowercase English letters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: Input string containing only lowercase English letters. :return: Length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 max_length = 0 start = 0 char_index = {} for end in range(n): if s[end] in char_index and start <= char_index[s[end]]: start = char_index[s[end]] + 1 else: max_length = max(max_length, end - start + 1) char_index[s[end]] = end return max_length"},{"question":"Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key. The dictionary should include elements from 1 to N.","solution":"def generate_square_dict(N): Creates a dictionary with keys from 1 to N where each value is the square of its key. Parameters: N (int): The inclusive upper bound of the keys in the dictionary. Returns: dict: A dictionary with keys from 1 to N and values being the square of the keys. return {x: x**2 for x in range(1, N+1)}"},{"question":"Given the list of numbers \`lst = [7, 3, 1, 2, 2]\`, write a Python function to sort the list in descending order.","solution":"def sort_descending(lst): Sorts the given list of numbers in descending order. Parameters: lst (list): A list of numbers. Returns: list: The sorted list in descending order. return sorted(lst, reverse=True)"},{"question":"generate code for the following english statements: \\"If input is empty return true, if input contains only whitespaces return True. In all other cases return False\\"","solution":"def check_input(s): Returns True if the input string s is empty or contains only whitespaces, otherwise returns False. if not s or s.isspace(): return True return False"},{"question":"Write a function in Python that takes a list of integers as input and returns a new list containing only the odd numbers in the original list, sorted in ascending order. However, the function should also remove any duplicates from the resulting list. If the input list is empty, the function should return an empty list.","solution":"def odd_numbers_sorted(nums): Returns a sorted list of odd numbers without duplicates from the given list. Args: nums (list): A list of integers Returns: list: A sorted list of odd integers without duplicates # Use set to remove duplicates and filter out even numbers odd_set = {num for num in nums if num % 2 != 0} # Convert the set back to a list and sort it sorted_odds = sorted(odd_set) return sorted_odds"},{"question":"Write a recursive Python function to compute the factorial of a positive integer. In addition, the function should include error handling to deal with invalid inputs (e.g. negative numbers, non-integer values) and should be able to manage and prevent potential stack overflow caused by too large input number.","solution":"def factorial(n): Returns the factorial of a positive integer n. Raises ValueError for invalid inputs (negative numbers, non-integer values). if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Given a 2-D array of size n x m, write a program to rotate the matrix 90 degrees clockwise.","solution":"def rotate_matrix_90_deg(matrix): Rotates the given 2D matrix 90 degrees clockwise. Args: matrix (list of list of int): The n x m matrix to rotate Returns: list of list of int: The rotated matrix if not matrix or not matrix[0]: return [] n = len(matrix) m = len(matrix[0]) rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a Python code to initialize a 10 x 10 matrix with random values, but ensure that the sum of the values in each row is equal to a specific target value.","solution":"import numpy as np def initialize_matrix_with_row_sum(target_value, size=10): Initialize a size x size matrix with random values such that the sum of values in each row is equal to the target_value. :param target_value: The target sum for each row. :param size: The dimension of the square matrix. :return: A numpy array of dimensions size x size. matrix = np.random.rand(size, size) row_sums = matrix.sum(axis=1).reshape(-1, 1) scaling_factors = target_value / row_sums matrix *= scaling_factors return matrix"},{"question":"Write a Python function that takes a list of integers as input and returns the length of the longest consecutive sequence of integers found within the list. Consecutive integers in a sequence have a difference of 1 between each number. The function should handle both positive and negative integers and empty lists.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive sequence in the list of integers. if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a method to reverse a doubly linked list with the constraint that you cannot create any additional nodes or modify the existing nodes' data values.","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head if self.head is not None: self.head.prev = new_node self.head = new_node def reverse(self): Reverse the doubly linked list in place. temp = None current = self.head # Swap next and prev for all nodes while current is not None: temp = current.prev current.prev = current.next current.next = temp current = current.prev # Before changing head, check for the cases like empty list # and list with only one node if temp is not None: self.head = temp.prev def to_list(self): Convert the doubly linked list to a list for easy comparison in tests. result = [] current = self.head while current is not None: result.append(current.data) current = current.next return result"},{"question":"Write a Python program to find the kth smallest element in an unsorted array using quicksort algorithm. However, you are not allowed to use any built-in functions or libraries to implement quicksort. You must implement the quicksort algorithm from scratch. Additionally, you must ensure that the program has a time complexity of O(nlogn) and a space complexity of O(logn).","solution":"def partition(arr, low, high): Partition the array around the pivot element. pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_select(arr, low, high, k): Uses the quicksort partitioning method to find the kth smallest element. if low <= high: pi = partition(arr, low, high) if pi == k: return arr[pi] elif pi < k: return quick_select(arr, pi + 1, high, k) else: return quick_select(arr, low, pi - 1, k) def find_kth_smallest(arr, k): Returns the kth smallest element in the array. if k < 1 or k > len(arr): raise ValueError(\\"k is out of bounds of the array\\") return quick_select(arr, 0, len(arr) - 1, k - 1)"},{"question":"Write this function using only the + operator as a challenge for Boolean algebra: def a_xor_b(a: bool, b: bool)-> bool: return a != b","solution":"def a_xor_b(a: bool, b: bool) -> bool: Returns the XOR of a and b using only the + operator for Boolean algebra. In Boolean algebra, XOR can be represented using the formula: a XOR b = (a + b) % 2 return (a + b) % 2 == 1"},{"question":"Implement the binary search algorithm to compute an element in a sorted array. Additionally, the algorithm should be able to handle duplicate values and return the index of the first occurrence of the searched element.","solution":"def binary_search_first_occurrence(arr, target): Perform a binary search to find the first occurrence of the target element in a sorted array. :param arr: List of sorted elements. :param target: The element to search for. :return: The index of the first occurrence of the target element, or -1 if the element is not found. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] < target: left = mid + 1 elif arr[mid] > target: right = mid - 1 else: result = mid # target found, record the index right = mid - 1 # continue to search in the left half return result"},{"question":"Given the array [2, 3, 1, 4], provide a Python function that rearranges the elements so that the smallest value is first, followed by the largest, then the second smallest, second largest, and so forth. The output from your function should be a new array formatted as a Python list. Your function should also be able to handle arrays of different sizes and with negative integers, such as [-2, 0, 1, -3].","solution":"def rearrange(arr): Rearranges the elements of the input array so that they are ordered with the smallest first, followed by the largest, then the second smallest, the second largest, and so on. :param arr: List[int], list of integers :return: List[int], rearranged list arr.sort() result = [] i, j = 0, len(arr) - 1 while i <= j: if i == j: result.append(arr[i]) else: result.append(arr[i]) result.append(arr[j]) i += 1 j -= 1 return result"},{"question":"Using list comprehension in Python, create a list of all prime numbers from 0 to 100. Additionally, write a function to check if a given number is prime, and use this function within the list comprehension to generate the list of prime numbers.","solution":"def is_prime(n): Check if a given number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True prime_numbers = [n for n in range(101) if is_prime(n)]"},{"question":"Create a program to divide two integers without using the '/' operator and with a time complexity of O(log N), where N is the value of the dividend. Additionally, do not use the '*', 'mod' or any other arithmetic operators for this task. Use bitwise operations instead.","solution":"def divide(dividend, divisor): if divisor == 0: raise ValueError(\\"The divisor cannot be zero.\\") if dividend == 0: return 0 # Determine the sign of the result negative = (dividend < 0) ^ (divisor < 0) # Work with absolute values dividend = abs(dividend) divisor = abs(divisor) quotient = 0 the_sum = 0 # 32 because we are using 32-bit integers for i in range(31, -1, -1): if (the_sum + (divisor << i)) <= dividend: the_sum += (divisor << i) quotient |= (1 << i) if negative: return -quotient else: return quotient"},{"question":"I'm trying to find the largest prime number that is less than a specified number. Can you help me design a function in Python to achieve this? Also, is there a way to optimize this function for larger numbers?","solution":"def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def largest_prime_less_than(n): Returns the largest prime number less than the given number n. if n <= 2: return None candidate = n - 1 while candidate > 1: if is_prime(candidate): return candidate candidate -= 1 return None"},{"question":"Generate an HTML table with a given list of dictionaries, where each dictionary represents a person with the keys 'name' and 'age'. The table should have a border, a caption that says \\"Person Details\\", and each row should have alternating background colors. Additionally, the table should only include people whose age is greater than or equal to 18.","solution":"def generate_html_table(people): Generates an HTML table with a given list of dictionaries. Each dictionary has the keys 'name' and 'age'. Only includes people whose age is >= 18. # Filter people based on age filtered_people = [person for person in people if person['age'] >= 18] # Start of table html = '<table border=\\"1\\">n' html += ' <caption>Person Details</caption>n' html += ' <tr>n <th>Name</th>n <th>Age</th>n </tr>n' # Add table rows with alternating background colors for idx, person in enumerate(filtered_people): background_color = \\"#f2f2f2\\" if idx % 2 == 0 else \\"#ffffff\\" html += f' <tr style=\\"background-color: {background_color};\\">n' html += f' <td>{person[\\"name\\"]}</td>n' html += f' <td>{person[\\"age\\"]}</td>n' html += ' </tr>n' # End of table html += '</table>' return html"},{"question":"Write a Python program that takes a list of numbers and creates a new list in which each element is the product of all the numbers in the original list except the number at the same index.","solution":"def product_except_self(nums): Given a list of numbers, returns a new list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i. if len(nums) == 0: return [] n = len(nums) left_products = [1] * n right_products = [1] * n output = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"Write a Python function named \\"find_max_value\\" that takes a parameter numbers, which is a list of numbers, and returns the maximum value from the list.","solution":"def find_max_value(numbers): Returns the maximum value from the list of numbers. if not numbers: return None return max(numbers)"},{"question":"Explain the concept of tail recursion and its advantages over regular recursion in programming. Provide an example code snippet demonstrating the use of tail recursion. Additionally, the code snippet should include a base case and demonstrate the use of an accumulator variable to optimize the tail recursive function.","solution":"def tail_recursive_factorial(n, accumulator=1): A tail recursive function to calculate factorial of n. Parameters: n (int): The number to calculate the factorial of. accumulator (int): The accumulated result of the factorial calculation. Returns: int: The factorial of n. if n == 0: return accumulator else: return tail_recursive_factorial(n - 1, n * accumulator)"},{"question":"Write a Python program that determines the century of a given year based on the Gregorian calendar. For example, the year 1998 falls in the 20th century while 2021 falls in the 21st century. Consider edge cases such as 100, 200, 1900, 2000 etc while writing your code.","solution":"def get_century(year): Determine the century of a given year based on the Gregorian calendar. Parameters: year (int): The year for which to determine the century. Returns: int: The century of the given year. if year % 100 == 0: return year // 100 else: return (year // 100) + 1"},{"question":"Write a code that will check if a given string is a palindrome or not without using extra space. The code should ignore case sensitivity. The string will have at most 1000 characters.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome (ignoring case and using no extra space), False otherwise. s = s.lower() # Convert the string to lowercase to ignore case sensitivity left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"How do I rotate an array in Python by k positions?","solution":"def rotate_array(arr, k): Rotates an array to the right by k positions. If k is negative, rotations will be to the left. Parameters: arr (list): The list to be rotated k (int): Number of positions to rotate the array Returns: list: Rotated array n = len(arr) if n == 0: return arr k = k % n # Normalize k to ensure it's within the array length return arr[-k:] + arr[:-k]"},{"question":"Assume that the two provided lists act as inputs for an algorithm meant to match elements from list 'a' to elements in list 'b'. This algorithm also has a certain limitation that it can accidentally provide a false match result due to some bugs. Your task is to modify the algorithm and correct its bug to ensure that elements from list 'a' are correctly matched to elements in list 'b'. The function must return 'True' if the corrected algorithm successfully matches all elements from list 'a' to elements in list 'b', and return 'False' if it fails. Note: A successful match occurs when each element from list 'a' matches the corresponding element in list 'b' at the same index.","solution":"def match_elements(a, b): Checks if all elements from list 'a' match the corresponding elements in list 'b'. Args: a (list): First list of elements. b (list): Second list of elements. Returns: bool: True if all elements match, False otherwise. # Ensure both lists have the same length if len(a) != len(b): return False # Compare each element from list 'a' to the corresponding element in list 'b' for i in range(len(a)): if a[i] != b[i]: return False # If all elements match return True"},{"question":"Build a Python function that takes a list of dictionary types as the input parameter. The dictionaries in the list each have a single key-value pair. The key is a string and the value is an integer. This function should order the list in an ascending sequence based on the dictionary's integer value. Additionally, the function should throw a TypeError if any of the values in the dictionaries are not integers.","solution":"def sort_dicts_by_value(dict_list): Sorts a list of single key-value dictionaries by the integer value. Parameters: dict_list (list): A list of dictionaries containing single key-value pairs where values are integers. Returns: list: A sorted list of dictionaries by the integer values. Throws: TypeError: If any value in the dictionaries is not an integer. # Check if all values are integers for dct in dict_list: for value in dct.values(): if not isinstance(value, int): raise TypeError(\\"All values must be integers.\\") # Sort the list based on dictionary values return sorted(dict_list, key=lambda d: list(d.values())[0])"},{"question":"Create a Python program that takes a string as input and encrypts it using a Caesar cipher with a randomly generated shift key between 1 and 25. The program should prompt the user to enter the string and then output the encrypted string. Additionally, implement a function that decrypts the string using the same shift key and outputs the original message. Ensure that the program handles both uppercase and lowercase letters appropriately.","solution":"import random def generate_shift_key(): Generates a random shift key between 1 and 25. return random.randint(1, 25) def caesar_encrypt(input_string, shift_key): Encrypts the input string using Caesar cipher with the provided shift key. encrypted_string = [] for char in input_string: if char.isalpha(): shift = shift_key if char.isupper(): base = ord('A') else: base = ord('a') new_char = chr((ord(char) - base + shift) % 26 + base) encrypted_string.append(new_char) else: encrypted_string.append(char) return ''.join(encrypted_string) def caesar_decrypt(encrypted_string, shift_key): Decrypts the encrypted string using Caesar cipher with the provided shift key. decrypted_string = [] for char in encrypted_string: if char.isalpha(): shift = shift_key if char.isupper(): base = ord('A') else: base = ord('a') new_char = chr((ord(char) - base - shift) % 26 + base) decrypted_string.append(new_char) else: decrypted_string.append(char) return ''.join(decrypted_string)"},{"question":"Given the URL of a target website, create an algorithm in Python to scrape and classify all hyperlinks on the webpage into internal and external links. Differentiate between http, https, and ftp protocols and also filter out any links that leads to downloadable items (like .pdf, .docx, .zip etc.).","solution":"import requests from bs4 import BeautifulSoup from urllib.parse import urlparse, urljoin def classify_links(url): Classifies links on the webpage into internal and external categories, differentiating by protocol (http, https, ftp) and filtering out downloadable items. response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') internal_links = {'http': [], 'https': [], 'ftp': []} external_links = {'http': [], 'https': [], 'ftp': []} downloads = [] domain = urlparse(url).netloc for link in soup.find_all('a', href=True): href = link.get('href') parsed_href = urlparse(href) if parsed_href.scheme in ['http', 'https', 'ftp']: # Skip links that point to downloadable file types. if any(href.endswith(ext) for ext in ['.pdf', '.docx', '.zip', '.rar', '.tar', '.gz']): downloads.append(href) continue # Classify the link as internal or external. if parsed_href.netloc == domain or parsed_href.netloc == '': internal_links[parsed_href.scheme].append(urljoin(url, href)) else: external_links[parsed_href.scheme].append(href) return internal_links, external_links, downloads"},{"question":"Write a Python code that prints out the first 3 prime numbers using a while loop.","solution":"def first_three_primes(): Prints the first three prime numbers. primes = [] num = 2 while len(primes) < 3: is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes"},{"question":"Can you write a Python function that processes a list of integers and returns True if any three consecutive numbers in the list sum up to a number divisible by 10?","solution":"def has_consecutive_triplets_sum_divisible_by_10(numbers): Returns True if any three consecutive numbers in the list sum up to a number divisible by 10. for i in range(len(numbers) - 2): triplet_sum = numbers[i] + numbers[i + 1] + numbers[i + 2] if triplet_sum % 10 == 0: return True return False"},{"question":"Given the two arrays, write a function that generates a new array composed of squared values of the elements from the first array that are found in the second array. Additionally, ensure your function is optimized to handle large inputs, i.e., both arrays could have up to 10000 elements.","solution":"def get_squared_elements(nums1, nums2): Returns a new list containing squared values of elements from nums1 that are also found in nums2. nums2_set = set(nums2) result = [x**2 for x in nums1 if x in nums2_set] return result"},{"question":"Generation of random numbers using inverse transform method in python with defined minimum and maximum value","solution":"import numpy as np def inverse_transform(min_val, max_val, size=1): Generates random numbers between min_val and max_val using the inverse transform method. Parameters: min_val (float): The minimum value in the range. max_val (float): The maximum value in the range. size (int): The number of random numbers to generate. Default is 1. Returns: numpy.ndarray: An array of random numbers between min_val and max_val. # Generate uniform random numbers between 0 and 1 uniform_random_numbers = np.random.rand(size) # Scale and shift to the desired range random_numbers = min_val + (max_val - min_val) * uniform_random_numbers return random_numbers"},{"question":"Using Recursion technique, write a Python program to find the factorial of 5.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) # Calculating factorial of 5 factorial_5 = factorial(5) factorial_5"},{"question":"Write a code in Python that takes two lists of equal lengths and generates a new list with the elements of both lists combined. The resulting list should only contain unique elements, without any duplicates.","solution":"def combine_unique_elements(list1, list2): Combine two lists into one with unique elements only (no duplicates). Args: list1: First list of elements. list2: Second list of elements. Returns: A new list with the unique elements of both lists combined. return list(set(list1 + list2))"},{"question":"Write a code to multiply two matrices, assuming the two matrices can be multiplied. The code should also handle the case when the matrices cannot be multiplied. In such cases, the code should raise an appropriate error message. Additionally, the code should check if the number of columns in the first matrix is equal to the number of rows in the second matrix before performing the multiplication. If they are not equal, the code should raise an error message indicating that the matrices cannot be multiplied due to incompatible dimensions.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. If the matrices cannot be multiplied due to incompatible dimensions, raises an appropriate error message. :param A: List of lists representing the first matrix. :param B: List of lists representing the second matrix. :return: A new matrix that is the result of multiplying matrices A and B. :raises ValueError: If the number of columns in A is not equal to the number of rows in B. # Check the dimensions of the matrices if len(A[0]) != len(B): raise ValueError(\\"Matrices cannot be multiplied due to incompatible dimensions.\\") # Dimensions of the resultant matrix will be (number of rows in A) x (number of columns in B) result_rows = len(A) result_cols = len(B[0]) # Initialize the resultant matrix with zeros result = [[0 for _ in range(result_cols)] for _ in range(result_rows)] # Matrix multiplication for i in range(result_rows): for j in range(result_cols): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a Python program that takes a sentence as input and prints out the words in reverse order without using any built-in string or list reversing methods. Additionally, the program should remove any trailing or leading whitespace from the sentence and handle empty strings gracefully.","solution":"def reverse_words(sentence): Takes a sentence as input and returns the words in reverse order. Trailing or leading whitespace is removed from the sentence, and empty strings are handled gracefully. # Remove leading and trailing whitespace trimmed_sentence = sentence.strip() # Check for empty string after trimming if not trimmed_sentence: return \\"\\" # Split the sentence into words words = [] word = \\"\\" for char in trimmed_sentence: if char == \\" \\": if word: words.append(word) word = \\"\\" else: word += char if word: words.append(word) # Reverse the list of words manually reversed_words = [] for i in range(len(words) - 1, -1, -1): reversed_words.append(words[i]) # Join the reversed words into a single string reversed_sentence = \\" \\".join(reversed_words) return reversed_sentence"},{"question":"Implement a recursive function that takes in a string and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. The function should return true if the string is a palindrome and false otherwise. You are not allowed to use any built-in functions or libraries to determine if a string is a palindrome.","solution":"def is_palindrome(s): Checks if a given string is a palindrome. def clean_string(s): cleaned = \\"\\" for char in s: if char.isalnum(): cleaned += char.lower() return cleaned def check_palindrome(cleaned, start, end): if start >= end: return True if cleaned[start] != cleaned[end]: return False return check_palindrome(cleaned, start + 1, end - 1) cleaned = clean_string(s) return check_palindrome(cleaned, 0, len(cleaned) - 1)"},{"question":"I want to create a function that can search for a specific string within a sentence. If the string is found, I want the function to return the original sentence. Otherwise, it should return an empty string. How can I achieve this in Python?","solution":"def search_string(sentence, search_term): Searches for a specific string within a sentence. Parameters: - sentence (str): The sentence in which to search. - search_term (str): The string to search for. Returns: - str: The original sentence if the search term is found, otherwise an empty string. if search_term in sentence: return sentence else: return \\"\\""},{"question":"Given a list of integers, write a Python function to divide each element in the list by the previous non-zero element. Assume the list is not empty and has at least one non-zero element.","solution":"def divide_by_previous_non_zero(lst): Divide each element in the list by the previous non-zero element. Parameters: lst (list): List of integers Returns: list: A new list with each element divided by the previous non-zero element Assumptions: - The list is not empty and has at least one non-zero element. result = [] previous_non_zero = None for num in lst: if previous_non_zero is not None: result.append(num / previous_non_zero) else: result.append(num) if num != 0: previous_non_zero = num return result"},{"question":"Create a program in Python that takes two strings as input and determines if they are anagrams of each other. The program should also check if the anagram pairs are also mirror words (palindromes). For example, \\"race\\" and \\"care\\" are anagrams, but not mirror words, whereas \\"deified\\" and \\"deified\\" are both anagrams and mirror words.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other. return sorted(str1) == sorted(str2) def is_palindrome(s): Checks if a string is a palindrome. return s == s[::-1] def check_anagram_and_palindrome(str1, str2): Determines if two strings are anagrams and if the anagram pairs are also mirror words (palindromes). are_anagram = are_anagrams(str1, str2) is_palindrome_pair = is_palindrome(str1) and str1 == str2 return are_anagram, is_palindrome_pair"},{"question":"I have a large number of images and I wish to scale them all down using NumPy. Specifically, I want to scale them down to half their original dimension. Can you provide me with a code snippet that would achieve this using NumPy?","solution":"import numpy as np def scale_image(image): Scales the given image down to half its original dimensions. Parameters: - image (np.ndarray): A NumPy array representing the image to be scaled down. Returns: - np.ndarray: A new NumPy array representing the scaled down image. # Calculate the new dimensions new_height = image.shape[0] // 2 new_width = image.shape[1] // 2 # Create an empty array for the scaled image scaled_image = np.zeros((new_height, new_width, image.shape[2]), dtype=image.dtype) # Fill the scaled image array with the average of 2x2 blocks from the original image for i in range(new_height): for j in range(new_width): scaled_image[i, j] = image[2*i:2*(i+1), 2*j:2*(j+1)].mean(axis=(0, 1)) return scaled_image"},{"question":"Create a code generator to generate methods for CRUD operations for a class called \\"Product\\" that supports creating, retrieving, updating, and deleting products.","solution":"class Product: products = [] next_id = 1 def __init__(self, name, price): self.id = Product.next_id self.name = name self.price = price Product.next_id += 1 @classmethod def create_product(cls, name, price): product = cls(name, price) cls.products.append(product) return product @classmethod def retrieve_product(cls, product_id): for product in cls.products: if product.id == product_id: return product return None @classmethod def update_product(cls, product_id, name=None, price=None): product = cls.retrieve_product(product_id) if product: if name is not None: product.name = name if price is not None: product.price = price return product return None @classmethod def delete_product(cls, product_id): product = cls.retrieve_product(product_id) if product: cls.products.remove(product) return True return False @classmethod def clear_products(cls): cls.products = [] cls.next_id = 1"},{"question":"Design an algorithm to delete all occurrences of a given key k in a singly linked list. The algorithm should have a time complexity of O(n) and a space complexity of O(1), where n is the number of nodes in the linked list. Additionally, you are not allowed to use any extra data structures or modify the values in the nodes. In addition, provide the code for the algorithm.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def delete_key(head, key): Deletes all occurrences of a given key in a singly linked list. :param head: The head node of the singly linked list. :param key: The key to delete from the list. :return: The head node of the modified list. # Handle edge case where head is None if not head: return None # Create a dummy node to handle deletions at the head dummy = ListNode(next=head) current = dummy while current.next is not None: if current.next.value == key: current.next = current.next.next else: current = current.next return dummy.next"},{"question":"Use a for-loop to process each element in the array and add each element to a list, but ensure that the list does not contain any duplicates. If an element is already present in the list, skip adding it and continue to the next element. Finally, return the length of the resulting list.","solution":"def process_array(arr): Process the array to add each element to a list without duplicates. Returns the length of the resulting list. result_list = [] for element in arr: if element not in result_list: result_list.append(element) return len(result_list)"},{"question":"Given the root of a binary tree, invert the tree, and return its root.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_tree(root): Inverts a binary tree and returns its root. if root is None: return None # Swap the left and right children root.left, root.right = invert_tree(root.right), invert_tree(root.left) return root"},{"question":"I'm working on a computer vision project and I'm trying to filter objects based on certain criteria. How can I implement a function in Python that filters an array of objects based on their color and size? I want the function to be named \`filter_objects\`, and it should take three parameters: an array of objects \`objs\`, a color \`color\`, and a pixel size \`px\`. The function should return an array of numbers that represent the indexes of the objects in \`objs\` that match the color and are smaller than the specified pixel size. Each object in the array has a \`color\` property that is a string representing its color and a \`size\` property that is a number representing its size in pixels.","solution":"def filter_objects(objs, color, px): Filters and returns the indexes of objects based on the specified color and size. Parameters: objs (list): A list of objects, where each object has a 'color' property and a 'size' property. color (str): The color to filter the objects by. px (int): The maximum size in pixels to filter the objects by. Returns: list: A list of indexes of objects that match the color and are smaller than the specified size. result = [] for i, obj in enumerate(objs): if obj['color'] == color and obj['size'] < px: result.append(i) return result"},{"question":"Write a function in Python that takes a list of integers and returns a new list containing only the odd numbers from the original list. Additionally, the function should sort the resulting list of odd numbers in descending order.","solution":"def filter_and_sort_odds(numbers): Takes a list of integers and returns a new list containing only the odd numbers from the original list, sorted in descending order. odd_numbers = [num for num in numbers if num % 2 != 0] return sorted(odd_numbers, reverse=True)"},{"question":"Develop a Python program to efficiently calculate the determinant of any n x n matrix, with specific focus on large matrices. The program should be able to handle matrices that are at least 100 x 100 in size. The program should also include error handling for cases where the input matrix is not a square matrix.","solution":"import numpy as np def calculate_determinant(matrix): Returns the determinant of an n x n matrix. # Check if the matrix is square if not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"Input must be a square matrix\\") # Convert the matrix to a numpy array np_matrix = np.array(matrix) # Calculate and return the determinant using numpy return np.linalg.det(np_matrix)"},{"question":"Can you explain how to find the roots of a quadratic equation in Python using the quadratic formula? Also, show how to modify the code to handle complex roots.","solution":"import cmath def find_roots(a, b, c): Returns the roots of a quadratic equation ax^2 + bx + c = 0 using the quadratic formula. Handles both real and complex roots. # Calculating discriminant discriminant = b**2 - 4*a*c # Using cmath to handle complex square root root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) return (root1, root2)"},{"question":"Synthesize a code fragment involving recursive operation to evolve the Fibonacci sequence.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Design a Python function that not only performs a binary search-based insertion sort on a list of n integers, but also does this on multiple lists concurrently using multi-threading. Each list will have a different length and they will be provided from a 2D array. Also, include functionality to measure and compare the time taken to sort each of these lists.","solution":"import threading import time from bisect import insort def binary_insertion_sort(arr): Function to perform insertion sort using binary search. sorted_list = [] for elem in arr: insort(sorted_list, elem) return sorted_list def threaded_sort(lst, results, idx): Sorts lst using binary insertion sort and stores the result along with sorting time in results[idx]. start_time = time.time() sorted_lst = binary_insertion_sort(lst) end_time = time.time() results[idx] = (sorted_lst, end_time - start_time) def multi_threaded_sort(lists): Perform binary insertion sort on multiple lists concurrently using threading. Returns a list of tuples with sorted list and time taken to sort each list. threads = [] results = [None] * len(lists) for idx, lst in enumerate(lists): thread = threading.Thread(target=threaded_sort, args=(lst, results, idx)) threads.append(thread) thread.start() for thread in threads: thread.join() return results"},{"question":"Write a program to sort the elements of an array in ascending order using bubble sort algorithm","solution":"def bubble_sort(arr): Sorts an array in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python script that takes input a list of integers and outputs the second largest element in the list. If the list is empty or contains only one element, output a message saying \\"List should have at least two elements\\".","solution":"def second_largest(nums): Returns the second largest element in the list. If the list has less than two elements, return a specific message. if len(nums) < 2: return \\"List should have at least two elements\\" first = second = float('-inf') for num in nums: if num > first: second = first first = num elif num > second and num != first: second = num return second if second != float('-inf') else \\"All elements are the same\\""},{"question":"Given two dictionaries, combine them into one dictionary where the keys from the first dictionary point to the respective values from the second dictionary. Additionally, the program should also handle cases where a key present in the first dictionary is not present in the second dictionary. In such cases, the value for that key in the resulting dictionary should be None.","solution":"def combine_dicts(keys_dict, values_dict): Combines keys from keys_dict with values from values_dict. If a key from keys_dict is not present in values_dict, it maps to None. :param keys_dict: Dictionary with keys to combine :param values_dict: Dictionary with values to combine :returns: Resulting combined dictionary combined_dict = {key: values_dict.get(key, None) for key in keys_dict} return combined_dict"},{"question":"Take the following 3 sets as an input: A = {1, 2, 3}, B = {3, 4, 5}, C = {2, 5, 6}. How would you define a function in Python which computes and prints the union, intersection, difference(A-B), and symmetric difference of A, B, and C? Also, ensure that your function checks if input sets are indeed sets before processing them.","solution":"def compute_set_operations(A, B, C): Computes and returns the union, intersection, difference (A - B), and symmetric difference of sets A, B, and C Parameters: A (set): The first set B (set): The second set C (set): The third set Returns: dict: A dictionary with the results of the operations if not (isinstance(A, set) and isinstance(B, set) and isinstance(C, set)): raise ValueError(\\"All inputs must be sets\\") operations = { 'union': A | B | C, 'intersection': A & B & C, 'difference(A-B)': A - B, 'symmetric_difference': A ^ B ^ C } return operations"},{"question":"Create a code to sort this list in a descending order while ignoring any duplicate values. The code should also ensure that the time complexity of the sorting algorithm is O(nlogn). Additionally, the code should not use any built-in sorting functions or libraries. The code should be implemented in a recursive manner, and should handle large input sizes efficiently.","solution":"def merge_sort_descending(arr): Sorts the given array in descending order, ignoring duplicate values. The sorting is implemented using a recursive merge sort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort_descending(arr[:mid]) right_half = merge_sort_descending(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two halves in descending order, while ignoring duplicate values. result = [] seen = set() i = 0 j = 0 while i < len(left) and j < len(right): if left[i] >= right[j]: if left[i] not in seen: result.append(left[i]) seen.add(left[i]) i += 1 else: if right[j] not in seen: result.append(right[j]) seen.add(right[j]) j += 1 while i < len(left): if left[i] not in seen: result.append(left[i]) seen.add(left[i]) i += 1 while j < len(right): if right[j] not in seen: result.append(right[j]) seen.add(right[j]) j += 1 return result def sort_without_duplicates(arr): Public function that takes a list of integers and sorts it in a descending order while ignoring duplicate values. return merge_sort_descending(arr)"},{"question":"Please create a Python code that takes in two strings and finds all common characters from the strings. The code should handle cases where there are multiple occurrences of a character in a string and should return a dictionary where the keys are the common characters and the values are the minimum occurrences of that character in either string. The code should also be able to handle large input strings efficiently.","solution":"from collections import Counter def find_common_characters(str1, str2): Finds all common characters from the input strings and returns a dictionary where the keys are the common characters and the values are the minimum occurrences of that character in either string. Args: str1 (str): The first input string. str2 (str): The second input string. Returns: dict: A dictionary with common characters and their minimum counts. # Count the occurrences of each character in both strings count1 = Counter(str1) count2 = Counter(str2) # Find the common characters and their minimum counts common_characters = {} for char in count1: if char in count2: common_characters[char] = min(count1[char], count2[char]) return common_characters"},{"question":"Implement a function that performs a deep copy of a given multi-level nested list using only recursion and without utilizing any built-in copy methods or libraries. Additionally, provide a method to verify the functionality by comparing the original and copied lists. Note: Lists can contain both integers and strings, as well as other lists.","solution":"def deep_copy(lst): Perform a deep copy of a given multi-level nested list using recursion. if not isinstance(lst, list): raise ValueError(\\"Input must be a list\\") new_list = [] for item in lst: if isinstance(item, list): new_list.append(deep_copy(item)) else: new_list.append(item) return new_list"},{"question":"Create a Python program that can classify an input string as either a palindrome, a number, or neither. Additionally, if the input is a number, the program should check if it is prime. If the input is a palindrome, the program should check if it is a numeric palindrome (e.g., \\"1331\\") or a string palindrome (e.g., \\"racecar\\"). The program should output the classification and additional details based on the input type.","solution":"def is_prime(n): Determines if the given integer n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def classify_string(input_str): Classifies the input string as a palindrome, a number, or neither. - If it is a palindrome, specifies if it's a numeric palindrome or a string palindrome. - If it's a number, checks if it's prime. if input_str.isdigit(): number = int(input_str) classification = f\\"{input_str} is a number.\\" if is_prime(number): classification += \\" It is also a prime number.\\" if input_str == input_str[::-1]: classification += \\" It's a numeric palindrome.\\" return classification elif input_str == input_str[::-1]: return f\\"{input_str} is a string palindrome.\\" else: return f\\"{input_str} is neither a number nor a palindrome.\\""},{"question":"How can I create a Python function that prints all the prime numbers in a given list?","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def print_primes(numbers): Prints all prime numbers in the given list. primes = [num for num in numbers if is_prime(num)] for prime in primes: print(prime)"},{"question":"Write a Python function that generates all possible permutations of a given list and returns the permutation at a specified index. The function should handle lists of any length and the index should be 0-based. The function should also include error handling for cases where the index is out of range or the input is invalid.","solution":"import itertools def get_permutation_at_index(lst, index): Returns the permutation at a specified index from all possible permutations of the given list. Parameters: lst (list): The list to generate permutations from. index (int): The 0-based index of the desired permutation. Returns: list: The permutation at the specified index. if not isinstance(lst, list) or not isinstance(index, int): raise TypeError(\\"Invalid input type. 'lst' should be a list and 'index' should be an integer.\\") # Compute all possible permutations permutations = list(itertools.permutations(lst)) # Check if index is out of range if index < 0 or index >= len(permutations): raise IndexError(\\"Index out of range.\\") # Return the desired permutation return list(permutations[index])"},{"question":"Amend the following Python function to calculate the sum of all even numbers in the given range. The function should have a time complexity of O(1) and should not use any built-in functions or libraries.","solution":"def calculate_even_sum(a, b): Returns the sum of all even numbers within the closed range [a, b]. # Adjust a to the next even number if it's odd if a % 2 != 0: a += 1 # Adjust b to the previous even number if it's odd if b % 2 != 0: b -= 1 if a > b: return 0 # Sum of even numbers from a to b n = (b - a) // 2 + 1 return n * (a + b) // 2"},{"question":"Create a function to detect if two given strings are anagrams or not. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. The function should return True if the two strings are anagrams, and False otherwise.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Normalize the strings by removing spaces and converting to lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Check if the sorted characters of both strings are the same return sorted(str1) == sorted(str2)"},{"question":"Use Python to filter out all the numbers divisible by 3 from a given list of integers. Additionally, the filtered numbers should be sorted in descending order. The solution should have a time complexity of O(n log n) or better.","solution":"def filter_and_sort_descending(lst): Filters out numbers divisible by 3 from the given list and sorts the resulting list in descending order. :param lst: List of integers :return: A list of integers that are not divisible by 3, sorted in descending order filtered = [x for x in lst if x % 3 != 0] return sorted(filtered, reverse=True)"},{"question":"Implement an insertion sort algorithm on the given array, while also discussing time and space complexity.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. Time Complexity: O(n^2) in the worst and average case, O(n) in the best case Space Complexity: O(1) because it sorts the array in place for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Develop an algorithm for a breadth-first search that also tracks the shortest path from the starting node to each node in the graph. Additionally, the algorithm should handle graphs with weighted edges, where each edge has a different weight. The shortest path should be determined based on the sum of the weights of the edges in the path. Include a feature that allows the user to input a destination node and find the shortest path to it from the starting node. The graph can be represented using an adjacency list.","solution":"import heapq def dijkstra(graph, start): Runs Dijkstra's algorithm on a weighted graph to find the shortest path from start to all nodes. Parameters: graph (dict): A dictionary representing the adjacency list of the graph where keys are nodes, and values are lists of tuples (neighbor, weight). start (str): The starting node. Returns: dist (dict): Dictionary where keys are nodes and values are the shortest distance from start. prev (dict): Dictionary where keys are nodes and values are the previous node in the path. dist = {node: float('inf') for node in graph} prev = {node: None for node in graph} dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for neighbor, weight in graph[u]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance prev[neighbor] = u heapq.heappush(priority_queue, (distance, neighbor)) return dist, prev def shortest_path_to(graph, start, destination): Finds the shortest path from \`start\` to \`destination\` using Dijkstra's algorithm. Parameters: graph (dict): A dictionary representing the adjacency list of the graph. start (str): The starting node. destination (str): The destination node. Returns: path (list): A list of nodes representing the shortest path from start to destination. distance (float): The total distance of the shortest path. dist, prev = dijkstra(graph, start) path = [] node = destination while node is not None: path.append(node) node = prev[node] path.reverse() return path, dist[destination]"},{"question":"Design a solution for this problem: Write a program that identifies the frequency of each distinct character in a given sequence of alphanumeric symbols. Additionally, the program should handle case sensitivity and punctuation. Your solution should also include the functionality to save this data to an external file. Also, add error handling for situations where the given sequence is empty or does not contain any alphanumeric symbols.","solution":"import json from collections import Counter def character_frequency(sequence): Returns the frequency of each distinct alphanumeric character in the given sequence. Handles case sensitivity and punctuation. Raises ValueError for empty sequences or sequences without alphanumeric characters. if not sequence: raise ValueError(\\"The given sequence is empty.\\") frequency = Counter(sequence) # Check if there's any alphanumeric character in the sequence has_alphanumeric = False for char in sequence: if char.isalnum(): has_alphanumeric = True break if not has_alphanumeric: raise ValueError(\\"The given sequence does not contain any alphanumeric symbols.\\") return dict(frequency) def save_to_file(data, filepath): Saves the given data to a file in JSON format. with open(filepath, 'w') as file: json.dump(data, file, ensure_ascii=False, indent=4) # Usage seq = \\"Hello, World! 123\\" freq = character_frequency(seq) print(freq) output_filepath = 'character_frequency.json' save_to_file(freq, output_filepath)"},{"question":"Create a function called \\"removeDuplicates\\" that takes in an array of integers and removes any duplicate values from the array. The function should return the modified array with the duplicates removed. Additionally, if there are any negative numbers in the array, they should be sorted in descending order before removing duplicates.","solution":"def removeDuplicates(arr): Removes duplicate values from the array. If there are any negative numbers, they are sorted in descending order before removing duplicates. Parameters: arr (list of int): The input array of integers. Returns: list of int: The modified array with duplicates removed. # Separate negative and non-negative numbers negative_nums = [num for num in arr if num < 0] non_negative_nums = [num for num in arr if num >= 0] # Sort negative numbers in descending order negative_nums = sorted(list(set(negative_nums)), reverse=True) # Remove duplicates from non-negative numbers non_negative_nums = list(set(non_negative_nums)) # Concatenate the two lists and return return negative_nums + non_negative_nums"},{"question":"Write a Python code to implement the minimax algorithm for a game of Tic-Tac-Toe, but also include alpha-beta pruning and allow for an arbitrary sized board.","solution":"import math def is_winner(board, player): # Check rows, columns and diagonals for winner size = len(board) for row in board: if all(cell == player for cell in row): return True for col in range(size): if all(board[row][col] == player for row in range(size)): return True if all(board[i][i] == player for i in range(size)): return True if all(board[i][size-i-1] == player for i in range(size)): return True return False def is_full(board): return all(all(cell != \\"\\" for cell in row) for row in board) def minimax(board, depth, is_max, alpha, beta, player, opponent): if is_winner(board, player): return 10 - depth if is_winner(board, opponent): return depth - 10 if is_full(board): return 0 if is_max: best = -math.inf for i in range(len(board)): for j in range(len(board[i])): if board[i][j] == \\"\\": board[i][j] = player best = max(best, minimax(board, depth + 1, not is_max, alpha, beta, player, opponent)) board[i][j] = \\"\\" alpha = max(alpha, best) if beta <= alpha: break return best else: best = math.inf for i in range(len(board)): for j in range(len(board[i])): if board[i][j] == \\"\\": board[i][j] = opponent best = min(best, minimax(board, depth + 1, not is_max, alpha, beta, player, opponent)) board[i][j] = \\"\\" beta = min(beta, best) if beta <= alpha: break return best def find_best_move(board, player, opponent): best_value = -math.inf best_move = (-1, -1) for i in range(len(board)): for j in range(len(board[i])): if board[i][j] == \\"\\": board[i][j] = player move_value = minimax(board, 0, False, -math.inf, math.inf, player, opponent) board[i][j] = \\"\\" if move_value > best_value: best_move = (i, j) best_value = move_value return best_move"},{"question":"Is there a way to calculate the number of days between two given dates in Python? Can you provide me with a code example?","solution":"from datetime import datetime def days_between_dates(date1_str, date2_str, date_format=\\"%Y-%m-%d\\"): Calculates the number of days between two dates. :param date1_str: First date as a string :param date2_str: Second date as a string :param date_format: The format of the dates provided (default is \\"%Y-%m-%d\\") :return: The number of days between date1 and date2 date1 = datetime.strptime(date1_str, date_format) date2 = datetime.strptime(date2_str, date_format) delta = date2 - date1 return abs(delta.days)"},{"question":"Given a list of integers, sort the integers in descending order and output the sorted list. Additionally, remove any duplicate values from the list before sorting. Also, implement the sorting algorithm yourself instead of using built-in sort functions.","solution":"def sort_descending_unique(arr): Sort the list of integers in descending order and remove duplicates. # Remove duplicates unique_arr = list(set(arr)) # Implementing bubble sort in descending order n = len(unique_arr) for i in range(n - 1): for j in range(n - 1 - i): if unique_arr[j] < unique_arr[j + 1]: # Swap if the element found is less than the next element unique_arr[j], unique_arr[j + 1] = unique_arr[j + 1], unique_arr[j] return unique_arr"},{"question":"Write a function in Python to print a diamond pattern of stars with a given number of rows. The number of rows should be an odd integer greater than or equal to 5 and less than or equal to 25. The function should validate the input and raise an appropriate error if the input is invalid.","solution":"def print_diamond(rows): Prints a diamond pattern of stars with a given number of rows. :param rows: An odd integer, the number of rows for the diamond pattern. if not isinstance(rows, int) or rows < 5 or rows > 25 or rows % 2 == 0: raise ValueError(\\"Number of rows must be an odd integer between 5 and 25 (inclusive).\\") n = rows // 2 for i in range(n + 1): print(' ' * (n - i) + '*' * (2 * i + 1)) for i in range(n - 1, -1, -1): print(' ' * (n - i) + '*' * (2 * i + 1))"},{"question":"How can I create a Flask application to build a simple calculator that can add, subtract, multiply, and divide two numbers? Can you provide a detailed example? Additionally, how can I extend this calculator to perform more advanced operations like finding the square root, exponentiation, and logarithm of a number?","solution":"from flask import Flask, request, jsonify import math app = Flask(__name__) @app.route('/add', methods=['GET']) def add(): a = float(request.args.get('a')) b = float(request.args.get('b')) result = a + b return jsonify(result=result) @app.route('/subtract', methods=['GET']) def subtract(): a = float(request.args.get('a')) b = float(request.args.get('b')) result = a - b return jsonify(result=result) @app.route('/multiply', methods=['GET']) def multiply(): a = float(request.args.get('a')) b = float(request.args.get('b')) result = a * b return jsonify(result=result) @app.route('/divide', methods=['GET']) def divide(): a = float(request.args.get('a')) b = float(request.args.get('b')) if b == 0: return jsonify(error='Division by zero is not allowed'), 400 result = a / b return jsonify(result=result) @app.route('/sqrt', methods=['GET']) def sqrt(): a = float(request.args.get('a')) if a < 0: return jsonify(error='Cannot take the square root of a negative number'), 400 result = math.sqrt(a) return jsonify(result=result) @app.route('/power', methods=['GET']) def power(): a = float(request.args.get('a')) b = float(request.args.get('b')) result = math.pow(a, b) return jsonify(result=result) @app.route('/log', methods=['GET']) def log(): a = float(request.args.get('a')) if a <= 0: return jsonify(error='Logarithm of non-positive number is not defined'), 400 result = math.log(a) return jsonify(result=result) if __name__ == '__main__': app.run(debug=True)"},{"question":"# Define a python function that takes an array of integers and converts each integer to its binary representation. Then, reverse each binary string. Finally, convert the reversed binary strings back to integers and return the array of these integers.","solution":"def reverse_binary_and_convert(nums): Take an array of integers, convert each integer to its binary representation, reverse each binary string, convert the reversed binary string back to integers and return the array of these integers. :param nums: List of integers :return: List of integers after reverse binary string conversion result = [] for num in nums: binary_str = bin(num)[2:] # Convert to binary and remove '0b' prefix reversed_binary_str = binary_str[::-1] # Reverse the binary string reversed_num = int(reversed_binary_str, 2) # Convert reversed binary string back to integer result.append(reversed_num) return result"},{"question":"Write a python program to simulate Conway's Game of Life. You must use a 2D array and implement the rules yourself. The game should first create a random initial state for the board and then evolve it over a given number of iterations.","solution":"import numpy as np def create_random_board(height, width): Create a random board of size height x width. return np.random.randint(2, size=(height, width)) def count_neighbors(board, row, col): Count the number of live neighbors for a cell at (row, col) neighbors = [ (row-1, col-1), (row-1, col), (row-1, col+1), (row, col-1), (row, col+1), (row+1, col-1), (row+1, col), (row+1, col+1) ] count = 0 for r, c in neighbors: if 0 <= r < board.shape[0] and 0 <= c < board.shape[1]: count += board[r, c] return count def next_state(board): Compute the next state of the board based on Conway's Game of Life rules. new_board = np.copy(board) for row in range(board.shape[0]): for col in range(board.shape[1]): live_neighbors = count_neighbors(board, row, col) if board[row, col] == 1: if live_neighbors < 2 or live_neighbors > 3: new_board[row, col] = 0 else: if live_neighbors == 3: new_board[row, col] = 1 return new_board def game_of_life(height, width, iterations): Simulate the Game of Life for a specified number of iterations. board = create_random_board(height, width) for _ in range(iterations): board = next_state(board) return board"},{"question":"Write a function that takes a dictionary as input and creates a new dictionary where each key is converted to uppercase and the value is the same as input dictionary's original value. However, if the value is a string, it should be reversed before being stored in the new dictionary. If the value is a nested dictionary, recursively apply the same key transformation and string reversal on the nested dictionary. Return the new dictionary.","solution":"def transform_dict(input_dict): Takes a dictionary and transforms it such that: - Each key is converted to uppercase. - Each string value is reversed. - Recursively applies the same transformation to nested dictionaries. Args: input_dict (dict): The dictionary to transform. Returns: dict: The transformed dictionary. result = {} for k, v in input_dict.items(): new_key = k.upper() if isinstance(v, dict): new_value = transform_dict(v) elif isinstance(v, str): new_value = v[::-1] else: new_value = v result[new_key] = new_value return result"},{"question":"I need to generate a 12 character password for a new user on our system. The password must include at least one uppercase, one lowercase, one number and one special character. Can you provide a Python code to generate such a password?","solution":"import random import string def generate_password(): Generates a 12 character password that includes at least one uppercase, one lowercase, one number, and one special character. password_characters = ( random.choice(string.ascii_uppercase) + random.choice(string.ascii_lowercase) + random.choice(string.digits) + random.choice(string.punctuation) ) while len(password_characters) < 12: password_characters += random.choice(string.ascii_letters + string.digits + string.punctuation) password_list = list(password_characters) random.shuffle(password_list) return ''.join(password_list)"},{"question":"I have a list of operations that can be either string concatenation \`+\` or mathematical summation \`+\`. How can I typecheck the '+' operator in Python so that it will only perform string concatenation if both operands are strings and mathematical addition otherwise? I want to avoid specifying the type of the variables in advance.","solution":"def add_or_concat(a, b): Perform addition or string concatenation based on the types of the inputs. Returns concatenated string if both inputs are strings, otherwise returns the summation. if isinstance(a, str) and isinstance(b, str): return a + b else: return a + b # This will naturally perform summation for numerics in Python # Example usage # add_or_concat(\\"foo\\", \\"bar\\") will return \\"foobar\\" # add_or_concat(1, 2) will return 3 # add_or_concat(\\"foo\\", 2) will raise TypeError"},{"question":"Given the following erroneous piece of code, correct and modify it to create a function that checks if an array of integers is sorted in ascending order. The function should return true if the array is sorted in ascending order, and false otherwise.","solution":"def is_sorted(arr): Returns True if the array of integers is sorted in ascending order, False otherwise. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Reverse the following array using slicing: [1, 2, 3, 4, 5] The output should be: [5, 4, 3, 2, 1] Additionally, implement the solution using a recursive function, where the array is reversed by swapping the first and last element and then recursively calling the function with the subarray excluding the first and last elements.","solution":"def reverse_array_slicing(arr): Reverses the array using slicing. return arr[::-1] def reverse_array_recursive(arr): Reverses the array using a recursive function. def helper(start, end, array): if start >= end: return array array[start], array[end] = array[end], array[start] return helper(start + 1, end - 1, array) return helper(0, len(arr) - 1, arr)"},{"question":"Write a Python code that creates a dictionary with names as keys and phone numbers as values. The names should be in uppercase and the phone numbers should be in the format \\"+1-XXX-XXX-XXXX\\" where XXX-XXX-XXXX is a random 10-digit number. The dictionary should be sorted in descending order based on the length of the names. Additionally, the code should only allow names with a length greater than 3 characters and phone numbers with unique 10-digit numbers.","solution":"import random def generate_phone_number(): Generates a random phone number in the format +1-XXX-XXX-XXXX. number = random.randint(1000000000, 9999999999) return f\\"+1-{str(number)[:3]}-{str(number)[3:6]}-{str(number)[6:]}\\" def create_phone_book(names): Creates a dictionary with names as keys and phone numbers as values. The names are converted to uppercase, include only names with length greater than 3, and phone numbers are unique 10-digit numbers. The dictionary is sorted in descending order based on the length of the names. phone_book = {} seen_numbers = set() # To ensure unique phone numbers for name in names: if len(name) > 3: name_upper = name.upper() phone_number = generate_phone_number() # Ensure unique phone number while phone_number in seen_numbers: phone_number = generate_phone_number() seen_numbers.add(phone_number) phone_book[name_upper] = phone_number # Sorting the dictionary by the length of names in descending order sorted_phone_book = dict(sorted(phone_book.items(), key=lambda x: len(x[0]), reverse=True)) return sorted_phone_book"},{"question":"Write code to delete all occurrences of the given key 'k' from the given Python dictionary 'd'. If the key 'k' is not present in the dictionary, print an error message indicating that the key does not exist.","solution":"def delete_key_from_dict(d, k): Deletes all occurrences of the given key 'k' from the dictionary 'd'. If the key 'k' is not present, prints an error message. if k in d: del d[k] else: print(f\\"Error: Key '{k}' does not exist.\\")"},{"question":"Write a function in Python that takes as input an array of integers and returns the length of the longest consecutive sequence of numbers in the array. For instance, for the input array [100, 4, 200, 1, 3, 2], the output should be 4, since the longest consecutive sequence of numbers is [1, 2, 3, 4].","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive sequence in the array of integers. if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"I want to create a method in Python that takes a Unicode string and returns the string sorted based on Unicode values. Can you help me with that?","solution":"def sort_unicode_string(s): Returns the string sorted based on Unicode values. return ''.join(sorted(s))"},{"question":"Write a Python code snippet which takes a list of numbers as an input and calculates the average of the numbers. The list can contain both integers and floating-point numbers.","solution":"def calculate_average(numbers): Returns the average of a list of numbers. If the list is empty, returns None. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Write a python code to check the equality of two sets by considering the elements' data types as well. Your solution should also handle the scenarios where the sets consist of complex objects like custom classes or nested sets.","solution":"def sets_are_equal(set1, set2): Checks if two sets are equal by considering elements' data types as well. Handles complex objects like custom classes or nested sets. if len(set1) != len(set2): return False for item in set1: if item not in set2: return False return True # Custom class for testing class CustomObject: def __init__(self, value): self.value = value def __eq__(self, other): if isinstance(other, CustomObject): return self.value == other.value return False def __hash__(self): return hash(self.value) def __repr__(self): return f'CustomObject({self.value})'"},{"question":"Write a Python program to calculate the edit distance between two strings using the Levenshtein distance algorithm.","solution":"def levenshtein_distance(str1, str2): Compute the Levenshtein distance between two strings. Returns the number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If str1 is empty, insert all characters of str2 elif j == 0: dp[i][j] = i # If str2 is empty, insert all characters of str1 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"You are tasked with writing a Python function that will parse a file containing chemical reaction equations and extract the components of each reaction to create a model. The function should take the file path as an input and return a dictionary where the keys are the reaction IDs and the values are dictionaries containing the substrates and products of each reaction.","solution":"def parse_chemical_reactions(file_path): Parses a file containing chemical reaction equations and extracts the components of each reaction. :param file_path: str, path to the file containing chemical reactions :return: dict, where keys are reaction IDs and values are dictionaries containing substrates and products reactions = {} with open(file_path, 'r') as file: lines = file.readlines() for line in lines: # Assuming each line in the file has the format: reaction_id: substrate1 + substrate2 -> product1 + product2 if not line.strip(): continue # Skip empty lines reaction_id, equation = line.split(':') substrates_part, products_part = equation.split('->') substrates = [s.strip() for s in substrates_part.split('+')] products = [p.strip() for p in products_part.split('+')] reactions[reaction_id.strip()] = { \\"substrates\\": substrates, \\"products\\": products } return reactions"},{"question":"Write a function in Python that takes a string as input and reorders it in the following manner: The first character of the string and the last character of the string swap places, while maintaining the order of the rest of the string. For example, if the string is \\"hello\\", the output should be \\"oellh\\".","solution":"def reorder_string(input_string): Reorders the input string such that the first and last characters swap places. Parameters: input_string (str): The string to reorder. Returns: str: The reordered string. if not input_string or len(input_string) == 1: return input_string # Swap the first and last characters return input_string[-1] + input_string[1:-1] + input_string[0]"},{"question":"Write a python code to find the minimum value in a list without using in-built functions(min). Also, as part of a newly added requirement, the code should be able to handle a case where the list input is empty. The program should return a custom error message \\"List is empty!\\" in case of an empty list.","solution":"def find_minimum(lst): Returns the minimum value in a list. If the list is empty, returns \\"List is empty!\\". if not lst: return \\"List is empty!\\" min_value = lst[0] for value in lst[1:]: if value < min_value: min_value = value return min_value"},{"question":"How do you delete the middle element of a linked list if you have only access to that node? Also, write an efficient solution with O(1) space complexity.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def delete_node(node): Deletes the given node (except the tail), given only access to that node. The time complexity is O(1) and space complexity is O(1). if node is None or node.next is None: raise ValueError(\\"Node cannot be the tail or None.\\") # Copy data from the next node to the current node node.value = node.next.value # Bypass the next node node.next = node.next.next"},{"question":"Write a program to generate random passwords. The password should have a length of 12 characters and must include at least one uppercase letter, one lowercase letter, one number, and one special character.","solution":"import random import string def generate_password(): Generates a random password of length 12 which includes at least one uppercase letter, one lowercase letter, one number, and one special character. password_length = 12 uppercase_letters = random.choice(string.ascii_uppercase) lowercase_letters = random.choice(string.ascii_lowercase) digits = random.choice(string.digits) special_characters = random.choice(string.punctuation) # Generate the remaining characters required to complete the length of the password remaining_length = password_length - 4 all_characters = string.ascii_letters + string.digits + string.punctuation remaining_characters = ''.join(random.choices(all_characters, k=remaining_length)) # Combine all the parts password_list = list(uppercase_letters + lowercase_letters + digits + special_characters + remaining_characters) # Shuffle the generated password list to ensure randomness random.shuffle(password_list) password = ''.join(password_list) return password"},{"question":"Create a Python function that takes two input lists and returns the indices of all elements in the second list that are also present in the first list. Then, iterate over the result and calculate the sum of values from the second list whose indices match those found. Ensure the code handles cases with no common elements gracefully.","solution":"def find_indices_and_sum(list1, list2): Finds the indices of all elements in list2 that are present in list1. Returns a tuple containing the list of indices and the sum of the values from list2 at those indices. indices = [idx for idx, value in enumerate(list2) if value in list1] value_sum = sum(list2[idx] for idx in indices) return indices, value_sum"},{"question":"Develop a program that verifies if a given number can be expressed as the product of three distinct odd integers. The number will be within the range of 1 to 10^5. Also, provide a piece of erroneous code as a reference to guide the candidate in the right direction.","solution":"def is_product_of_three_distinct_odds(n): Check if a number can be expressed as the product of three distinct odd integers. odds = [] for i in range(1, n): if i % 2 != 0: odds.append(i) length = len(odds) for i in range(length - 2): for j in range(i + 1, length - 1): for k in range(j + 1, length): if odds[i] * odds[j] * odds[k] == n: return True return False"},{"question":"Create a function for a Python class that validates if the user-provided pin is numeric and has a length of 6. If the pin does not meet these criteria, generate an appropriate error message. Additionally, the function should only allow three attempts to input the correct pin after which it will lockout the user for 5 seconds. Implement this using thread sleep function.","solution":"import time class PinValidator: def __init__(self): self.attempts = 0 def validate_pin(self, pin): Validates if the pin is numeric and has a length of 6. If invalid, returns an error message. If attempts exceed 3, locks the user out for 5 seconds. self.attempts += 1 if self.attempts > 3: print(\\"Too many incorrect attempts. Locking out for 5 seconds.\\") time.sleep(5) self.attempts = 0 return False if not pin.isdigit(): return \\"PIN should be numeric.\\" if len(pin) != 6: return \\"PIN should be exactly 6 digits long.\\" self.attempts = 0 # Reset attempts after a successful validation return True"},{"question":"Create a Python code to find all uncommon characters between two strings. Now, upgrade the code so that it also returns the count of these uncommon characters in both strings. The function should not use python's built-in functions for comparing letters, it should utilize hashing technique for better performance. Uncommon characters are those which either occur in one string but not the other, or have different frequencies in both strings.","solution":"def find_uncommon_characters(s1, s2): Returns a list of uncommon characters between two strings and their counts in both strings. # Create a hash table for both strings to count character frequencies hash_s1 = {} hash_s2 = {} for char in s1: if char in hash_s1: hash_s1[char] += 1 else: hash_s1[char] = 1 for char in s2: if char in hash_s2: hash_s2[char] += 1 else: hash_s2[char] = 1 # Find uncommon characters and their counts uncommon = {} for char in hash_s1: if char not in hash_s2: uncommon[char] = (hash_s1[char], 0) elif hash_s1[char] != hash_s2[char]: uncommon[char] = (hash_s1[char], hash_s2[char]) for char in hash_s2: if char not in hash_s1: uncommon[char] = (0, hash_s2[char]) return uncommon"},{"question":"How can I write an algorithm using AI to determine if a given two strings are anagrams of each other?","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other. Arguments: str1 -- The first string. str2 -- The second string. Returns: True if the strings are anagrams, False otherwise. # Normalize the strings by converting them to lowercase and removing spaces str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Compare the sorted strings return sorted(str1) == sorted(str2)"},{"question":"Create a Python function that takes a list of integers as input and returns a list containing only the prime numbers in the input list.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list containing only the prime numbers in the input list. return [num for num in numbers if is_prime(num)]"},{"question":"I have a list of numbers that I need to sort in ascending order, but I also want to keep track of their original positions in the list. How can I achieve this using Python?","solution":"def sort_with_indices(numbers): Sorts a list of numbers in ascending order while keeping track of their original positions. Parameters: numbers (list of int/float): The list of numbers to sort. Returns: list of tuple: A list of tuples where each tuple contains the sorted number and its original position. # Pair each number with its original index indexed_numbers = list(enumerate(numbers)) # Sort the list based on the numbers sorted_indexed_numbers = sorted(indexed_numbers, key=lambda x: x[1]) return sorted_indexed_numbers"},{"question":"I have a list of numbers and I need to find out which number appears most frequently in the list. Can you help me write a Python code to solve this problem? Here is an example list of numbers: [1, 2, 4, 2, 4, 1, 5, 2]. The code should output the number that occurs most frequently in the list.","solution":"from collections import Counter def most_frequent_number(numbers): Returns the number that appears most frequently in the list. If there are multiple numbers with the same highest frequency, returns one of them. if not numbers: return None counter = Counter(numbers) most_common_number, _ = counter.most_common(1)[0] return most_common_number"},{"question":"Say we have the equation f(x) = 2x^2 + 3x + 1. Using Numpy, what is the Python code to approximate the derivative of f(x) at x = 1 using a numerical differentiation formula with a step size of h = 0.01? Additionally, how can we compare the accuracy of this approximation to a symbolic differentiation approach using SymPy?","solution":"import numpy as np import sympy as sp def numerical_derivative(h=0.01): Approximate the derivative of f(x) = 2x^2 + 3x + 1 at x = 1 using the central difference formula. x = 1 f = lambda x: 2*x**2 + 3*x + 1 derivative = (f(x + h) - f(x - h)) / (2 * h) return derivative def symbolic_derivative(): Calculate the derivative of f(x) = 2x^2 + 3x + 1 at x = 1 using SymPy. x = sp.symbols('x') f = 2*x**2 + 3*x + 1 f_prime = sp.diff(f, x) f_prime_at_1 = f_prime.subs(x, 1) return float(f_prime_at_1) def compare_derivatives(): Compare the numerical and symbolic derivatives. num_derivative = numerical_derivative() sym_derivative = symbolic_derivative() return num_derivative, sym_derivative"},{"question":"Given an array of integers, write a function to determine whether the array is a palindrome. Additionally, the function should handle arrays containing negative integers and floating point numbers. The function should also take into account the order and type of elements in the array, and return True only if the array remains the same when reversed.","solution":"def is_palindrome(array): Returns True if the given array is a palindrome, False otherwise. A palindrome array reads the same forwards and backwards. return array == array[::-1]"},{"question":"Create a Python program that inputs two matrices A and B, and outputs their product matrix C. The program should also include proper error handling for cases where the matrices cannot be multiplied due to incompatible dimensions. Additionally, print the dimensions of the matrices and their contents both before and after multiplication.","solution":"def matrix_multiply(A, B): Multiply two matrices A and B to produce matrix C. Args: A -- list of lists representing matrix A B -- list of lists representing matrix B Returns: C -- list of lists representing the product matrix Raises: ValueError -- if matrices A and B cannot be multiplied due to incompatible dimensions. num_rows_A = len(A) num_cols_A = len(A[0]) num_rows_B = len(B) num_cols_B = len(B[0]) # Check if matrices can be multiplied if num_cols_A != num_rows_B: raise ValueError(\\"Incompatible dimensions for matrix multiplication\\") # Initialize the result matrix C with zeros C = [[0] * num_cols_B for _ in range(num_rows_A)] # Perform matrix multiplication for i in range(num_rows_A): for j in range(num_cols_B): for k in range(num_cols_A): C[i][j] += A[i][k] * B[k][j] return C def print_matrix(matrix, name): Print the dimensions and contents of a matrix. Args: matrix -- list of lists representing the matrix name -- string representing the name of the matrix num_rows = len(matrix) num_cols = len(matrix[0]) print(f\\"Matrix {name} ({num_rows}x{num_cols}):\\") for row in matrix: print(row) # Example usage if __name__ == \\"__main__\\": A = [ [1, 2], [3, 4] ] B = [ [5, 6], [7, 8] ] print_matrix(A, \\"A\\") print_matrix(B, \\"B\\") try: C = matrix_multiply(A, B) print_matrix(C, \\"C\\") except ValueError as e: print(e)"},{"question":"Design an algorithm to find the nth node from the tail of a doubly-linked list containing millions of nodes, without using extra space nor resorting to a forward traversal first. Additionally, update the algorithm to handle node deletions efficiently if the doubly linked list is continuously being updated. Your algorithm should be as efficient as possible.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None self.prev = None def find_nth_from_tail(head, n): fast = slow = head # Move fast pointer n steps ahead for _ in range(n): if fast is None: return None # n is greater than the length of the list fast = fast.next # Move both fast and slow pointers until fast reaches the end while fast: fast = fast.next slow = slow.next return slow # slow will be pointing to the nth node from tail def delete_node(head, node_to_delete): if head is None or node_to_delete is None: return head if head == node_to_delete: head = head.next if node_to_delete.next: node_to_delete.next.prev = node_to_delete.prev if node_to_delete.prev: node_to_delete.prev.next = node_to_delete.next return head"},{"question":"Write a Python program that reads a CSV file and converts its data into a list of dictionaries. Each dictionary in the list should represent a row in the CSV file, with the headers converted to keys and the row values as values.","solution":"import csv def csv_to_dict_list(file_path): Reads a CSV file and converts its data into a list of dictionaries. Each dictionary in the list represents a row in the CSV file, with the headers converted to keys and the row values as values. :param file_path: Path to the CSV file. :return: List of dictionaries representing the rows in the CSV file. data_list = [] with open(file_path, mode='r', newline='', encoding='utf-8') as csvfile: reader = csv.DictReader(csvfile) for row in reader: data_list.append(row) return data_list"},{"question":"Write an algorithm in Python to search through a list of integers and find the first index of a specified value.","solution":"def find_first_index(lst, value): Returns the first index of the specified value in the list. Returns -1 if the value is not found. try: return lst.index(value) except ValueError: return -1"},{"question":"Given a list of n positive integers where n > 10^4 find the median without sorting the list using Python. The complexity of your solution should not exceed O(n) time complexity. Additionally ensure that your solution does not use any in-built libraries or external packages.","solution":"def partition(arr, low, high): pivot = arr[high] i = low for j in range(low, high): if arr[j] <= pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[high] = arr[high], arr[i] return i def quickselect(arr, low, high, k): if low == high: return arr[low] pivot_index = partition(arr, low, high) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, low, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, high, k) def find_median(arr): n = len(arr) if n % 2 == 1: return quickselect(arr, 0, n - 1, n // 2) else: left = quickselect(arr, 0, n - 1, n // 2 - 1) right = quickselect(arr, 0, n - 1, n // 2) return (left + right) / 2"},{"question":"Write a Python program that takes as input two sets, and outputs their symmetric difference. Make sure that the program includes code that checks the validity of the input (i.e., that the inputs are indeed sets), and handles any potential errors gracefully.","solution":"def symmetric_difference(set1, set2): Returns the symmetric difference of two sets. Parameters: set1 (set): The first input set. set2 (set): The second input set. Returns: set: The symmetric difference of set1 and set2. if not isinstance(set1, set) or not isinstance(set2, set): raise ValueError(\\"Both inputs must be sets.\\") return set1.symmetric_difference(set2)"},{"question":"Write a Python program to find the sum of the first n natural numbers using recursion.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers using recursion. if n <= 0: return 0 else: return n + sum_of_natural_numbers(n-1)"},{"question":"How can I create a simple login system for my website using Flask?","solution":"from flask import Flask, request, redirect, url_for, render_template_string, session from werkzeug.security import generate_password_hash, check_password_hash app = Flask(__name__) app.secret_key = 'somesecretkey' # In-memory user storage users = {} @app.route('/') def home(): if 'username' in session: return f'Logged in as {session[\\"username\\"]}' return 'You are not logged in <a href=\\"/login\\">Login</a>' @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] user = users.get(username) if user and check_password_hash(user['password'], password): session['username'] = username return redirect(url_for('home')) return 'Invalid username or password' return render_template_string(''' <form method=\\"post\\"> Username: <input type=\\"text\\" name=\\"username\\"><br> Password: <input type=\\"password\\" name=\\"password\\"><br> <input type=\\"submit\\" value=\\"Login\\"> </form> ''') @app.route('/register', methods=['GET', 'POST']) def register(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username not in users: users[username] = {'password': generate_password_hash(password)} return redirect(url_for('login')) return 'User already exists' return render_template_string(''' <form method=\\"post\\"> Username: <input type=\\"text\\" name=\\"username\\"><br> Password: <input type=\\"password\\" name=\\"password\\"><br> <input type=\\"submit\\" value=\\"Register\\"> </form> ''') @app.route('/logout') def logout(): session.pop('username', None) return redirect(url_for('home')) if __name__ == '__main__': app.run(debug=True)"},{"question":"Given a string, write a function that takes the string as input and returns the same string in reverse, without using any built-in string reversal functions or methods.","solution":"def reverse_string(s: str) -> str: Returns the reverse of the input string s without using any built-in string reversal functions or methods. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to perform an exponential search on a sorted list, but instead of using a binary search for the next step once the range is determined, use a ternary search. Make sure your function also validates that the input list is sorted.","solution":"def exponential_search_with_ternary(nums, target): Perform an exponential search to find the range where the target might be, then use a ternary search within that range. def is_sorted(nums): return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1)) def ternary_search(nums, l, r, target): if r >= l: mid1 = l + (r - l) // 3 mid2 = r - (r - l) // 3 if nums[mid1] == target: return mid1 if nums[mid2] == target: return mid2 if target < nums[mid1]: return ternary_search(nums, l, mid1 - 1, target) elif target > nums[mid2]: return ternary_search(nums, mid2 + 1, r, target) else: return ternary_search(nums, mid1 + 1, mid2 - 1, target) return -1 if not is_sorted(nums): raise ValueError(\\"The list must be sorted.\\") if len(nums) == 0: return -1 if nums[0] == target: return 0 index = 1 while index < len(nums) and nums[index] <= target: index = index * 2 return ternary_search(nums, index // 2, min(index, len(nums) - 1), target) # Example usage: # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # target = 7 # print(exponential_search_with_ternary(nums, target)) # Output: 6"},{"question":"Create a Python dictionary with the students' names as the key and marks from three subjects as values, also include a method to calculate and add the average score for each student into the dictionary.","solution":"def create_student_dict(students): Create a dictionary where keys are student names and values are a dictionary of their marks and average score. Args: students (dict): Dictionary containing student names as keys and a list of marks as values. Returns: dict: Dictionary with student names as keys and a dictionary of their marks and average score as values. student_dict = {} for student, marks in students.items(): average = sum(marks) / len(marks) student_dict[student] = { 'marks': marks, 'average': average } return student_dict"},{"question":"Write a code that reverses the order of vowels in a given string.","solution":"def reverse_vowels(s): Reverses the order of vowels in a given string. Args: s (str): The input string. Returns: str: String with vowels reversed. vowels = 'aeiouAEIOU' vowel_indices = [i for i, char in enumerate(s) if char in vowels] s_list = list(s) i, j = 0, len(vowel_indices) - 1 while i < j: s_list[vowel_indices[i]], s_list[vowel_indices[j]] = s_list[vowel_indices[j]], s_list[vowel_indices[i]] i += 1 j -= 1 return ''.join(s_list)"},{"question":"Implement a function to solve the tower of Hanoi problem iteratively using stacks.","solution":"def tower_of_hanoi_iterative(n, source, auxiliary, target): Solves the Tower of Hanoi problem iteratively using stacks. :param n: Number of disks :param source: The source rod :param auxiliary: The auxiliary rod :param target: The target rod :return: List of moves to solve the problem # Initialize the moves container moves = [] total_moves = 2 ** n - 1 # Stacks initialization source_stack = list(range(n, 0, -1)) auxiliary_stack = [] target_stack = [] # Function to perform a legal move between two poles def move_disk(from_pole, to_pole, from_stack, to_stack): disk = from_stack.pop() to_stack.append(disk) moves.append((from_pole, to_pole)) # Determine if source and target should swap if n % 2 == 0: auxiliary, target = target, auxiliary for i in range(1, total_moves + 1): if i % 3 == 1: if source_stack and (not target_stack or source_stack[-1] < target_stack[-1]): move_disk(source, target, source_stack, target_stack) else: move_disk(target, source, target_stack, source_stack) elif i % 3 == 2: if source_stack and (not auxiliary_stack or source_stack[-1] < auxiliary_stack[-1]): move_disk(source, auxiliary, source_stack, auxiliary_stack) else: move_disk(auxiliary, source, auxiliary_stack, source_stack) else: if auxiliary_stack and (not target_stack or auxiliary_stack[-1] < target_stack[-1]): move_disk(auxiliary, target, auxiliary_stack, target_stack) else: move_disk(target, auxiliary, target_stack, auxiliary_stack) return moves"},{"question":"How would you delete duplicates from a list while preserving the order of the remaining elements, and then sort the list in ascending order in Python?","solution":"def remove_duplicates_and_sort(lst): Removes duplicates from the list while preserving the order of the remaining elements, and then sorts the list in ascending order. Args: lst (list): The input list from which duplicates are removed and sorted. Returns: list: The sorted list with duplicates removed. seen = set() unique_lst = [x for x in lst if not (x in seen or seen.add(x))] unique_lst.sort() return unique_lst"},{"question":"Develop a code to convert time from 24-hour format to 12-hour format, including the handling of minutes and seconds. In addition, your function should handle edge cases like \\"00:00:00\\" and \\"24:00:00\\". For an extra challenge, fix the error in the given partially implemented code snippet.","solution":"def convert_to_12_hour_format(time_str): Converts time from 24-hour format to 12-hour format. Args: time_str (str): A string representing time in \\"HH:MM:SS\\" format. Returns: str: Time in 12-hour format with \\"AM\\" or \\"PM\\" suffix. # Split the input time string into hours, minutes, and seconds hours, minutes, seconds = map(int, time_str.split(':')) # Correct potentially invalid edge cases if hours == 24: hours = 0 minutes = 0 seconds = 0 # Determine if it is AM or PM period = \\"AM\\" if hours < 12 else \\"PM\\" # Adjust the hours for 12-hour format hours = hours % 12 if hours == 0: hours = 12 # hour '0' in 24-hour format is '12' in 12-hour format # Format the result string return f\\"{hours:02}:{minutes:02}:{seconds:02} {period}\\""},{"question":"Develop a function that identifies the smallest number in an array and also knows its index position. Additionally, handle possible exceptions and edge cases, like an array with repeated numbers, an empty array, or an array with negative numbers.","solution":"def find_smallest_number_with_index(arr): Returns the smallest number and its index in the array. If the array is empty, raises a ValueError. Parameters: arr (list): A list of numbers. Returns: tuple: (smallest_number, index) if not arr: raise ValueError(\\"Array is empty\\") smallest_number = min(arr) index = arr.index(smallest_number) return smallest_number, index"},{"question":"Write a Python script that generates random equations of addition, subtraction, and multiplication for numbers between -10 and 10. The script should evaluate the correctness of the user's answer for a given number of rounds and track the number of correct answers.","solution":"import random def generate_equation(): Generates a random equation involving addition, subtraction, or multiplication with numbers between -10 and 10. Returns the equation as a string and its result. operators = ['+', '-', '*'] a = random.randint(-10, 10) b = random.randint(-10, 10) operator = random.choice(operators) equation = f\\"{a} {operator} {b}\\" result = eval(equation) return equation, result def evaluate_answers(rounds): Evaluates the correctness of user's answers for the given number of rounds. Prompts the user for answers and tracks the number of correct answers. Returns the number of correct answers. correct_answers = 0 for _ in range(rounds): equation, correct_result = generate_equation() print(f\\"Solve: {equation}\\") user_answer = input(\\"Your answer: \\") try: user_answer = float(user_answer) if user_answer == correct_result: correct_answers += 1 print(\\"Correct!\\") else: print(f\\"Wrong! The correct answer is {correct_result}.\\") except ValueError: print(\\"Invalid input. Please enter a numerical value.\\") return correct_answers"},{"question":"Write a program in Python to calculate the factorial of a given number using recursion. The program should also check if the input number is negative and prompt the user to enter a positive number. The program should be able to handle large numbers and provide an accurate result. Additionally, implement the program in such a way that it can calculate the factorial of a list of numbers and return a list of their factorials.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using recursion. Raises a ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1) def factorial_list(numbers): Returns a list of factorials for the given list of non-negative integers. Raises a ValueError if any number in the list is negative. return [factorial(num) for num in numbers]"},{"question":"Develop a regular expression to identify sequences containing only uppercase letters and digits where the first character must be a letter and the last character must be a digit. Additionally, provide a code snippet to test if a given set of sequences match the regular expression. Make sure to include error handling for scenarios where the input is not a string.","solution":"import re def is_valid_sequence(sequence): Checks if the given sequence contains only uppercase letters and digits where the first character is a letter and the last character is a digit. Args: sequence (str): The sequence to check Returns: bool: True if the sequence is valid, False otherwise if not isinstance(sequence, str): raise ValueError(\\"Input must be a string\\") pattern = re.compile(r'^[A-Z][A-Z0-9]*d') return bool(pattern.match(sequence))"},{"question":"How can I write a Python program that prints all prime numbers up to a given limit?","solution":"def find_primes_up_to(limit): Returns a list of all prime numbers up to the specified limit. if limit < 2: return [] primes = [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for number in range(2, limit + 1): if is_prime[number]: primes.append(number) for multiple in range(number * number, limit + 1, number): is_prime[multiple] = False return primes"},{"question":"Code an algorithm in Python for generating a random password of length 10 that includes at least one uppercase letter, one lowercase letter, one digit, and one special character.","solution":"import random import string def generate_password(length=10): Generates a random password with the specified length that includes at least one uppercase letter, one lowercase letter, one digit, and one special character. if length < 4: raise ValueError(\\"Password length must be at least 4 to include all required characters.\\") password_chars = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation) ] remaining_length = length - 4 all_chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation for _ in range(remaining_length): password_chars.append(random.choice(all_chars)) random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Explain the working of the function filter() in Python. Further, illustrate its usage with program examples including lambda functions and handling complex data structures like nested lists.","solution":"def filter_even_numbers(numbers): return list(filter(lambda x: x % 2 == 0, numbers)) def filter_non_empty_lists(nested_lists): return list(filter(lambda x: len(x) > 0, nested_lists))"},{"question":"How to extract bigrams from a string in python?","solution":"def extract_bigrams(s): Returns a list of bigrams from the input string s. A bigram is a contiguous sequence of two items from a string. words = s.split() bigrams = [] for i in range(len(words) - 1): bigrams.append((words[i], words[i+1])) return bigrams"},{"question":"Create a function that finds the longest uncommon subsequence (LUS) of two strings. The LUS is the longest subsequence present in one string but not the other string. If there is no uncommon subsequence, the function should return -1. This question is an extension of the original problem but with an additional check to ensure the subsequence is not present in both strings.","solution":"def find_LUS_length(a, b): Returns the length of the longest uncommon subsequence of two strings. If there is no uncommon subsequence, returns -1. # If the strings are same, there is no uncommon subsequence if a == b: return -1 # If the strings are different, the longest uncommon subsequence # would be the longer of the two strings themselves return max(len(a), len(b))"},{"question":"Given the current date as \\"2023-02-12\\", I advise you to create a function that outputs dates in the format \\"12.02.2023\\". Can you code this function in Python?","solution":"def format_date(input_date): Given a date in 'YYYY-MM-DD' format, returns the date in 'DD.MM.YYYY' format. parts = input_date.split('-') return f\\"{parts[2]}.{parts[1]}.{parts[0]}\\""},{"question":"Design a Python function that accepts two inputs: a list of integers and a target integer. The function should return a list of all the indices where the target integer is found within the input list. If the target is not found, it should return an empty list.","solution":"def find_target_indices(nums, target): Returns a list of indices where the target integer is found in the input list. :param nums: List of integers :param target: Target integer to be found :return: List of indices where the target is found return [index for index, value in enumerate(nums) if value == target]"},{"question":"Write a function to print the minimum and maximum number in a given list, without using the built-in functions min() and max(). The function should also handle the case where the list contains duplicate numbers. The list will always contain at least one element.","solution":"def find_min_max(lst): Print the minimum and maximum number in a given list. if not lst: raise ValueError(\\"The list must contain at least one element.\\") min_val = lst[0] max_val = lst[0] for num in lst[1:]: if num < min_val: min_val = num if num > max_val: max_val = num return min_val, max_val"},{"question":"You are given a string of uppercase English letters. Your task is to implement a custom string compression algorithm based on English alphabets that repeats every character k times consecutively and then reverses the compressed string.","solution":"def compress_and_reverse(string, k): Compresses the input string by repeating each character k times, then reverses the resulting string. Parameters: string (str): The input string consisting of uppercase English letters. k (int): The number of times each character should be repeated. Returns: str: The compressed and reversed string. # Repeat each character \`k\` times compressed = ''.join(char * k for char in string) # Reverse the compressed string reversed_compressed = compressed[::-1] return reversed_compressed"},{"question":"Find the minimum of three integers using the ternary operator in Python. Additionally, you are not allowed to use any loops, comparison operators (>, <, ==), or any built-in functions (min, max) in your solution.","solution":"def min_of_three(a, b, c): Returns the minimum of three integers using the ternary operator. Assumes a, b, c are integers. return a if a <= b and a <= c else (b if b <= c else c)"},{"question":"Describe a modified binary search algorithm for a circularly sorted array that may also have duplicate values. Include a method for finding the index of a target value within this array. To add further complexity, provide a piece of erroneous code as a reference to help illustrate common pitfalls when tackling this problem.To further spice up the question, the erroneous code should also incorporate time and space inefficiency.","solution":"def search_in_rotated_array(nums, target): Searches for a target value in a circularly sorted array with duplicates. Returns the index of the target if found, otherwise returns -1. if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid # Check if the left part is sorted if nums[left] < nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # When the left part contains duplicates elif nums[left] > nums[mid]: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 # If nums[left] == nums[mid], we can't decide the sorted part, move left forward else: left += 1 return -1"},{"question":"How can I create a function in Python that adds a specific number (n) to every element in a list and returns the modified list? I also want a separate function to verify the correctness of the first function by comparing the output with an expected result. Could you provide a code snippet that accomplishes this, ensuring that the code is self-contained and clear, with proper documentation and error handling?","solution":"def add_to_each_element(lst, n): Adds a specific number (n) to each element in the list (lst) and returns the modified list. Parameters: lst (list): The list of numbers to which n will be added. n (numerical): The number to be added to each element in the list. Returns: list: A new list with n added to each element. if not isinstance(lst, list): raise ValueError(\\"The first argument must be a list\\") if not isinstance(n, (int, float)): raise ValueError(\\"The second argument must be a number (int or float)\\") return [x + n for x in lst] def verify_addition_result(actual, expected): Verifies the correctness of the add_to_each_element function by comparing the actual result with the expected result. Parameters: actual (list): The actual result returned by the add_to_each_element function. expected (list): The expected result to compare against. Returns: bool: True if the actual result matches the expected result, False otherwise. return actual == expected"},{"question":"Given two lists, A and B, write a Python program to find the intersection of the two lists. The intersection should contain only unique elements, even if the lists contain duplicate elements. Additionally, the program should return the intersection in the order of their appearance in the first list (list A).","solution":"def intersection_of_lists(A, B): Returns the intersection of lists A and B with unique elements, preserving the order as they appear in list A. set_b = set(B) result = [] seen = set() for item in A: if item in set_b and item not in seen: result.append(item) seen.add(item) return result"},{"question":"Create a dictionary for counting the occurrence of each lowercase letter in the given string. However, exclude any whitespace characters and punctuation marks from being counted. Additionally, the solution should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the string.","solution":"def count_lowercase_letters(s): Returns a dictionary counting the occurrence of each lowercase letter in the given string. Whitespace characters and punctuation marks are excluded from being counted. from string import ascii_lowercase # Initialize a dictionary with each lowercase letter set to 0 letter_counts = {letter: 0 for letter in ascii_lowercase} # Increment counts for each lowercase letter in the string for char in s: if char in ascii_lowercase: letter_counts[char] += 1 # Remove from dictionary letters that did not appear in the string letter_counts = {k: v for k, v in letter_counts.items() if v > 0} return letter_counts"},{"question":"Find all the prime numbers in a Python list using list comprehension.","solution":"def is_prime(n): Check if a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def find_primes(numbers): Find all prime numbers in a list using list comprehension. return [num for num in numbers if is_prime(num)]"},{"question":"Given a list of integers, your task is to write a function to calculate the sum of all elements using a for loop. Additionally, the function should include error handling to check if all elements in the list are indeed integers.","solution":"def sum_of_elements(lst): Calculate the sum of all elements in the list using a for loop. Includes error handling to check for non-integer elements. Parameters: lst (list): A list of integers. Returns: int: The sum of all elements in the list. if not all(isinstance(i, int) for i in lst): raise ValueError(\\"All elements in the list must be integers\\") total = 0 for num in lst: total += num return total"},{"question":"Create a Python function that accepts two lists as input and returns a new list with the element-wise product of the input lists. The function should also handle edge cases like floating-point numbers and empty lists gracefully. Additionally, write a set of test cases to verify the correctness of the function.","solution":"def elementwise_product(list1, list2): Returns a new list with the element-wise product of the input lists. If lists are of unequal length, the function assumes the shorter list is padded with ones for the purpose of multiplication. Parameters: list1 (list of int/float): First input list. list2 (list of int/float): Second input list. Returns: list of int/float: A new list with element-wise products. len1, len2 = len(list1), len(list2) if len1 == 0 or len2 == 0: return [] # Determine the length of the result list max_length = max(len1, len2) # Pad the shorter list with ones list1 += [1] * (max_length - len1) list2 += [1] * (max_length - len2) # Calculate the element-wise product return [list1[i] * list2[i] for i in range(max_length)]"},{"question":"Write a python function \`convert_to_upper\` that takes in a string as an input and converts all the lowercase letters to uppercase without using the built-in \`upper()\` function. Also, write a function \`count_lower_to_upper\` that takes the same string and returns the number of lowercase letters that were converted to uppercase in the \`convert_to_upper\` function.","solution":"def convert_to_upper(s): Converts all lowercase letters in the input string to uppercase without using the built-in upper() function. Parameters: s (str): The input string. Returns: str: The string with all lowercase letters converted to uppercase. result = [] for char in s: if 'a' <= char <= 'z': result.append(chr(ord(char) - 32)) else: result.append(char) return ''.join(result) def count_lower_to_upper(s): Counts the number of lowercase letters that were converted to uppercase in the string. Parameters: s (str): The input string. Returns: int: The count of lowercase letters converted to uppercase. count = 0 for char in s: if 'a' <= char <= 'z': count += 1 return count"},{"question":"I'm working on a project and I need to create a function that can take a list, a sublist, and an integer as arguments. The function should insert the sublist into the main list at the specified index. How can I achieve this in Python?","solution":"def insert_sublist(main_list, sublist, index): Inserts sublist into main_list at the specified index. Args: main_list (list): The original list into which sublist will be inserted. sublist (list): The sublist to insert into the main list. index (int): The index at which to insert the sublist. Returns: list: The resulting list after insertion. return main_list[:index] + sublist + main_list[index:]"},{"question":"Create a matrix 5x5 in python with all elements set to 0. Then, write a function that accepts a matrix as an argument and prints out the number of zeros in row-major and column-major orders separately. For additional complexity, ensure your function also checks for any 5-zero sequences (either in a row, a column, or diagonally) and outputs a different message if found.","solution":"def create_matrix_5x5(): Create a 5x5 matrix with all elements set to 0. return [[0 for _ in range(5)] for _ in range(5)] def count_zeros_and_check_sequences(matrix): Accepts a matrix and prints the number of zeros in row-major and column-major orders separately. Checks for any 5-zero sequences (either in a row, a column, or diagonally) and outputs a different message if found. row_major_zeros = 0 col_major_zeros = 0 row_sequences = set() col_sequences = set() diag_sequences = set() for i in range(5): row_zeros = all(matrix[i][j] == 0 for j in range(5)) col_zeros = all(matrix[j][i] == 0 for j in range(5)) if row_zeros: row_sequences.add(i) if col_zeros: col_sequences.add(i) row_major_zeros += sum(matrix[i][j] == 0 for j in range(5)) col_major_zeros += sum(matrix[j][i] == 0 for j in range(5)) diag1_zeros = all(matrix[i][i] == 0 for i in range(5)) diag2_zeros = all(matrix[i][4-i] == 0 for i in range(5)) if diag1_zeros: diag_sequences.add('diag1') if diag2_zeros: diag_sequences.add('diag2') print(f\\"Row-major order zeros: {row_major_zeros}\\") print(f\\"Column-major order zeros: {col_major_zeros}\\") if row_sequences or col_sequences or diag_sequences: print(\\"5-zero sequences found in:\\") if row_sequences: print(f\\"Rows: {row_sequences}\\") if col_sequences: print(f\\"Columns: {col_sequences}\\") if diag_sequences: print(f\\"Diagonals: {diag_sequences}\\") else: print(\\"No 5-zero sequences found.\\")"},{"question":"I have a Python list of items. How can I write a program that finds the item that has the highest occurrence in the list? If there are multiple items with the same highest occurrence, I want to return the first one. Can you provide a solution for this?","solution":"def most_frequent_item(lst): Returns the item with the highest occurrence in the list. If multiple items have the same highest occurrence, the first one is returned. if not lst: # Handle empty list case return None from collections import Counter counter = Counter(lst) most_common_item, _ = counter.most_common(1)[0] return most_common_item"},{"question":"Input an integer 'n', and write a program to generate a list that consists of the square of numbers in range(0, n). Additionally, filter this resulting list to include only even numbers. If 'n' is negative, return an error message.","solution":"def generate_even_squares(n): Returns a list of squares of numbers in the range 0 to n-1 that are even. If n is negative, returns an error message. if n < 0: return \\"Error: n should be a non-negative integer\\" squares = [i ** 2 for i in range(n)] even_squares = [square for square in squares if square % 2 == 0] return even_squares"},{"question":"Consider a binary tree where each node contains an integer value. Write a function in Python that finds the path with the maximum sum from the root node to the leaf node in this binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_sum_path(root): Returns the path with the maximum sum from root to leaf in the binary tree. If the tree is empty, returns an empty list. def helper(node): if not node: return (0, []) # For leaf nodes if not node.left and not node.right: return (node.val, [node.val]) left_sum, left_path = helper(node.left) right_sum, right_path = helper(node.right) # Choose the path with the maximum sum if left_sum > right_sum: return (left_sum + node.val, [node.val] + left_path) else: return (right_sum + node.val, [node.val] + right_path) _, path = helper(root) return path"},{"question":"Implement a function that takes a list of integers as an argument and returns a dictionary. The keys of the dictionary should be the integers from the list, and the values should be tuples. Each tuple should contain three elements: the index of the integer in the list, the square of the integer, and a boolean value that is True if the integer is even and False if it is odd. As an additional challenge, if the integer is a prime number, add the word 'Prime' as a fourth element in the tuple.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def process_list_of_integers(int_list): Takes a list of integers and returns a dictionary. The keys of the dictionary are the integers from the list, and the values are tuples. Each tuple contains: - the index of the integer in the list - the square of the integer - a boolean value that is True if the integer is even and False if it is odd - the string 'Prime' if the integer is a prime number (as a fourth element in the tuple) result = {} for idx, num in enumerate(int_list): square = num ** 2 is_even = num % 2 == 0 if is_prime(num): result[num] = (idx, square, is_even, 'Prime') else: result[num] = (idx, square, is_even) return result"},{"question":"Write a python code to check if a number is a power of 2. Your solution should work for both positive and negative numbers. Additionally, provide a piece of erroneous code and explain why it doesn't work correctly.","solution":"def is_power_of_two(n): Checks if a number is a power of 2. Handles both positive and negative numbers. if n == 0: return False n = abs(n) return (n & (n - 1)) == 0"},{"question":"Suggest a way to convert a given array into a self-balancing Binary Search Tree (BST). Consider that the BST should maintain its balance after a sequence of insertions and deletions of elements. Additionally, provide a method to verify the balanced nature of the tree after the conversion and the operations.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Convert a sorted array to a height-balanced binary search tree. if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root def is_balanced(root): Check if a binary tree is height-balanced. def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) if not left_balanced or not right_balanced: return 0, False if abs(left_height - right_height) > 1: return 0, False return max(left_height, right_height) + 1, True _, balanced = check_balance(root) return balanced"},{"question":"You are told that the book catalog of a library contains a total number of N books represented by an array of strings called 'books'. There are 'P' patrons who are members of the library, where each patron has a list of their own books represented by an array of strings called 'patronBooks'. For each patron, you task is to write a program to find the number of books in the library catalog that are not in the patron's list of books. The book names are case-sensitive.","solution":"def books_not_in_patron_list(library_books, patron_books): Given a list of library books and a list of patron's books, return the number of books in the library catalog that are not in the patron's list of books. Parameters: - library_books: list of strings, representing the books in the library catalog - patron_books: list of strings, representing the books in the patron's list Returns: - int: the number of books in the library catalog that are not in the patron's list library_set = set(library_books) patron_set = set(patron_books) difference = library_set - patron_set return len(difference)"},{"question":"Write a function in Python that takes a sentence and a number as inputs, and returns the number of words in that sentence that are longer than the given number.","solution":"def count_long_words(sentence, length): Returns the number of words in the given sentence that are longer than the specified length. Parameters: sentence (str): The input sentence. length (int): The length to compare the words with. Returns: int: The number of words longer than the specified length. words = sentence.split() long_words_count = sum(len(word) > length for word in words) return long_words_count"},{"question":"How can I write a function in Python that prints out the last N elements of a given list in reverse order?","solution":"def last_n_reverse(lst, n): Prints out the last N elements of a given list in reverse order. Parameters: lst (list): The list from which elements are to be printed. n (int): The number of elements to print from the end of the list in reverse order. Returns: list: A list of the last N elements in reverse order. if n > len(lst): raise ValueError(\\"n is greater than the length of the list\\") return lst[-n:][::-1]"},{"question":"Read in a 3x3 matrix of integers from standard input, and print out a serialized version of the matrix as a comma-separated string. Make sure to handle potential errors in formatting such as extra spaces before or after the numbers and missing delimiters between numbers.","solution":"def serialize_matrix(matrix_str): Reads a 3x3 matrix from the input string, removes extra spaces, and returns the matrix as a comma-separated string. matrix = [] lines = matrix_str.strip().split('n') for line in lines: line = line.strip() if not line: # Skip empty lines continue row = line.split() row = [num.strip() for num in row] matrix.append(row) if len(matrix) != 3 or any(len(row) != 3 for row in matrix): raise ValueError(\\"Input must be a 3x3 matrix\\") flattened = [num for row in matrix for num in row] return ','.join(flattened)"},{"question":"Write a python function that takes a list as an argument and prints all elements of the list in reverse order.","solution":"def print_list_in_reverse(lst): Prints all elements of the list in reverse order. for element in reversed(lst): print(element)"},{"question":"I am looking for a way to split an array into two parts, where the first part should contain the first n/2 elements and the second part should contain the rest of the elements. How can I achieve this with Python and list slicing?","solution":"def split_array(arr): Splits the array into two parts. The first part contains the first n/2 elements and the second part contains the rest of the elements. Parameters: arr (list): The input list to be split. Returns: tuple: A tuple containing two lists, the first part and the second part. n = len(arr) midpoint = n // 2 # Integer division to find the midpoint first_part = arr[:midpoint] second_part = arr[midpoint:] return first_part, second_part"},{"question":"Write a Python code to determine if two strings are isomorphic without using any built-in function, except for functions to iterate over the strings and basic comparison operations. Additionally, write test cases to verify the solution.","solution":"def are_isomorphic(str1, str2): Determine if two strings str1 and str2 are isomorphic. :param str1: First string. :param str2: Second string. :return: True if strings are isomorphic, False otherwise. if len(str1) != len(str2): return False mapping1 = {} mapping2 = {} for i in range(len(str1)): char1 = str1[i] char2 = str2[i] if char1 not in mapping1: mapping1[char1] = char2 if char2 not in mapping2: mapping2[char2] = char1 if mapping1[char1] != char2 or mapping2[char2] != char1: return False return True"},{"question":"Create a Python function that checks if at least k elements in a given numpy array are above a specified threshold. Additionally, the function should handle exceptions for invalid inputs such as non-integer values for k, or non-numerical values in the array. The function should also be able to handle large datasets efficiently. Test the function with various edge cases, such as an empty array, an array with all elements below the threshold, and an array with all elements above the threshold.","solution":"import numpy as np def at_least_k_above_threshold(array, k, threshold): Checks if at least k elements in the given numpy array are above the specified threshold. Parameters: array (numpy.ndarray): The input array. k (int): The minimum number of elements that need to be above the threshold. threshold (float): The threshold value. Returns: bool: True if at least k elements are above the threshold, False otherwise. if not isinstance(array, np.ndarray): raise ValueError(\\"Input array should be a numpy array.\\") if not isinstance(k, int): raise ValueError(\\"k should be an integer.\\") if not np.issubdtype(array.dtype, np.number): raise ValueError(\\"All elements in the array should be numerical.\\") count_above_threshold = np.sum(array > threshold) return count_above_threshold >= k"},{"question":"Given a list of dictionaries in Python, each containing information about a person including their name and age, write a function that uses the \`filter()\` function along with a lambda to find all people who are above a certain age. Also create a test case to verify your solution.","solution":"def filter_people_by_age(people, age_limit): Filters the list of people to find all who are above a certain age. Parameters: people (list): A list of dictionaries where each dictionary represents a person with 'name' and 'age'. age_limit (int): The age limit to filter people by. Returns: list: A list of dictionaries for people who are above the given age_limit. return list(filter(lambda person: person['age'] > age_limit, people))"},{"question":"Write a Python function that returns for a given set of characters the count of distinct longest palindromic substrings. If multiple substrings exist with the longest length, count them all. Also, provide a piece of erroneous code with a potential pitfall and correct it.","solution":"def count_longest_palindromic_substrings(s): Returns the count of distinct longest palindromic substrings in the given string. def is_palindrome(sub): return sub == sub[::-1] n = len(s) longest_length = 0 longest_palindromes = set() for i in range(n): for j in range(i, n): substr = s[i:j+1] if is_palindrome(substr): if len(substr) > longest_length: longest_palindromes = {substr} longest_length = len(substr) elif len(substr) == longest_length: longest_palindromes.add(substr) return len(longest_palindromes) # Erroneous code with potential pitfall: # This code incorrectly counts all palindromic substrings regardless of their length def erroneous_count_longest_palindromic_substrings(s): def is_palindrome(sub): return sub == sub[::-1] palindromes = set() for i in range(len(s)): for j in range(i, len(s)): substr = s[i:j+1] if is_palindrome(substr): palindromes.add(substr) return len(palindromes)"},{"question":"Write a Python function that receives three integers and returns the maximum among them. If two or more numbers are equal and are the maximum, return that number.","solution":"def max_of_three(a, b, c): Returns the maximum among three integers. return max(a, b, c)"},{"question":"Build a code to print out all unique permutations of the characters in a given string without using recursion. The input string can have duplicate characters, and the code should handle these duplicates correctly. Additionally, the code should be able to handle input strings of length up to 10^6 efficiently.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the characters in the given string without using recursion. :param s: Input string which can contain duplicate characters :type s: str :return: List of unique permutations :rtype: list[str] return sorted(set(permutations(s))) # Since the function returns permutations as tuples, we will convert them to strings for easier reading def format_permutations(perms): return [''.join(p) for p in perms]"},{"question":"Imagine you work for a bank, and your job is to assess whether a given loan application will be accepted or denied by your institution. The decision is made mostly based on the individual's credit score, which is a numerical way of measuring whether someone has a good or bad history of returning the money they borrow with interest. The bank's policy states that anyone with a credit score above 650 is considered a safe bet and will get their loan approved. Given this piece of information, let's write a Python function that takes an individual's credit score and tells us whether their loan will be accepted or denied.","solution":"def is_loan_approved(credit_score): Determines whether a loan is approved based on the individual's credit score. Parameters: credit_score (int): The individual's credit score. Returns: bool: True if the loan is approved, False otherwise. return credit_score > 650"},{"question":"Given a list of people's birth years and their current ages, write a code to find out who is the oldest person in the list. Additionally, return the difference between the current year and their birth year to verify the accuracy of the given age. The list should not contain any repeated names.","solution":"def find_oldest_person(people): Given a list of tuples containing people's names, birth years, and current ages, this function finds the oldest person and returns their name along with the difference between the current year and their birth year. Parameters: people (list): List of tuples where each tuple contains (name, birth year, age). Returns: tuple: A tuple containing the name of the oldest person and the accuracy difference of age. current_year = 2023 oldest_person = None max_age = -1 for person in people: name, birth_year, age = person calculated_age = current_year - birth_year # Check age accuracy for the specific person age_difference = abs(calculated_age - age) if age > max_age: max_age = age oldest_person = (name, age_difference) return oldest_person"},{"question":"Write a code to print the first 100 prime numbers in reverse order.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def first_100_primes(): Returns a list of the first 100 prime numbers. primes = [] num = 2 while len(primes) < 100: if is_prime(num): primes.append(num) num += 1 return primes def first_100_primes_reverse(): Returns a list of the first 100 prime numbers in reverse order. return first_100_primes()[::-1] # Let's print the first 100 primes in reverse order print(first_100_primes_reverse())"},{"question":"Please write a python program that takes in a list of integers and returns a new list with each element squared. Additionally, provide a time and space complexity analysis for your solution. Also, mention any assumptions you make while solving the problem, if any.","solution":"def square_elements(lst): Returns a new list with each element of the input list squared. Args: lst (list of int): A list of integers. Returns: list of int: A new list with each integer squared. return [x ** 2 for x in lst] # Time Complexity: O(n), where n is the length of the input list. This is because we iterate through each element once. # Space Complexity: O(n), where n is the length of the input list. This is because we store the squared values in a new list of the same length."},{"question":"Create a function that finds the longest common prefix of two strings. The strings should have a length of at least 5 characters. The function should also handle cases where the strings contain special characters, spaces, and punctuation marks, and ignore them when finding the common prefix. Additionally, the function should be case-insensitive, meaning it should treat uppercase and lowercase letters as equal when comparing the strings.","solution":"import re def longest_common_prefix(str1, str2): Returns the longest common prefix of two strings. Both strings should have a length of at least 5 characters. The function ignores special characters, spaces, and punctuation marks, and is case-insensitive. if len(str1) < 5 or len(str2) < 5: raise ValueError(\\"Strings must have at least 5 characters.\\") # Remove non-alphanumeric characters and convert to lowercase normalized_str1 = re.sub(r'[^a-zA-Z0-9]', '', str1).lower() normalized_str2 = re.sub(r'[^a-zA-Z0-9]', '', str2).lower() # Find the longest common prefix min_length = min(len(normalized_str1), len(normalized_str2)) for i in range(min_length): if normalized_str1[i] != normalized_str2[i]: return normalized_str1[:i] return normalized_str1[:min_length]"},{"question":"Suggest a solution to store years in ISO 8601 format in Python, but also include the functionality to convert the ISO 8601 formatted date to a different date format, such as 'dd-mm-yyyy'. Additionally, implement a validation mechanism to ensure that the input ISO 8601 date is valid and strictly adheres to the format standards specified in the ISO 8601 format.","solution":"from datetime import datetime def validate_iso8601_date(date_str): Validates if the input date string is in ISO 8601 format. try: datetime.fromisoformat(date_str) return True except ValueError: return False def convert_iso8601_to_ddmmyyyy(date_str): Converts an ISO 8601 formatted date string to 'dd-mm-yyyy'. if validate_iso8601_date(date_str): date_obj = datetime.fromisoformat(date_str) return date_obj.strftime('%d-%m-%Y') else: raise ValueError(\\"Invalid ISO 8601 date format\\") # Example usage if __name__ == \\"__main__\\": iso_date = \\"2021-03-02\\" if validate_iso8601_date(iso_date): print(f\\"Valid ISO 8601 date: {iso_date}\\") print(f\\"Converted date: {convert_iso8601_to_ddmmyyyy(iso_date)}\\") else: print(\\"Invalid ISO 8601 date\\")"},{"question":"Given a list of race results in the format [name, time_in_second], write a function in Python to find the top 3 fastest runners. Illustrate your answer with examples that include cases where multiple runners have the same time.","solution":"def top_three_fastest_runners(results): Returns the names of the top 3 fastest runners. Args: results (list): A list of tuples where each tuple contains (name, time_in_seconds) Returns: list: A list with the names of the top 3 fastest runners # Sort the results based on the time sorted_results = sorted(results, key=lambda x: x[1]) # Get the names of the top 3 fastest runners top_three = [runner[0] for runner in sorted_results[:3]] return top_three"},{"question":"Write a Python program that prompts the user to enter a list of numbers separated by spaces, creates a list from these numbers, sorts it in descending order, filters out numbers smaller than 10 and greater than 500, and finally prints the top 5 numbers in the list. Your program should handle invalid inputs gracefully, providing helpful error messages and allowing the user to re-enter valid inputs.","solution":"def get_user_input(): Prompts the user to enter a list of numbers separated by spaces and returns it as a list of integers. while True: user_input = input(\\"Enter a list of numbers separated by spaces: \\") try: num_list = [int(num) for num in user_input.split()] return num_list except ValueError: print(\\"Invalid input. Please enter numbers only, separated by spaces.\\") def process_numbers(num_list): Processes the list by sorting it in descending order, filtering out numbers smaller than 10 and greater than 500, and returns the top 5 numbers. filtered_list = [num for num in num_list if 10 <= num <= 500] sorted_list = sorted(filtered_list, reverse=True) return sorted_list[:5] def main(): num_list = get_user_input() top_numbers = process_numbers(num_list) print(\\"Top 5 numbers:\\", top_numbers) if __name__ == \\"__main__\\": main()"},{"question":"Write a code that takes in a dictionary and returns a list of all the values that have more than one corresponding key.","solution":"def values_with_multiple_keys(dictionary): Takes a dictionary and returns a list of all values that have more than one corresponding key. :param dictionary: dict :return: list of values from collections import defaultdict value_key_count = defaultdict(int) # Count the number of keys for each value for value in dictionary.values(): value_key_count[value] += 1 # Return the values that have more than one key return [value for value, count in value_key_count.items() if count > 1]"},{"question":"Create a function to add the corresponding values of two lists, ensuring that the length of both lists is equal and greater than 2. The function should return a new list with the added values.","solution":"def add_lists(list1, list2): Adds corresponding values of two lists, ensuring both lists have an equal length and that length is greater than 2. Parameters: list1 (list): First list of values list2 (list): Second list of values Returns: list: A new list containing the sum of corresponding values of list1 and list2 if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") if len(list1) <= 2: raise ValueError(\\"Both lists must have more than 2 elements each\\") return [a + b for a, b in zip(list1, list2)]"},{"question":"Create a python function to return the highest value in a given list of numbers. The function should also check if the list contains any duplicates and raise a ValueError if it does. Additionally, the function should only consider positive numbers when finding the highest value.","solution":"def highest_value_no_duplicates(numbers): Returns the highest value among positive numbers in the list if there are no duplicates. Parameters: numbers (list): A list of numbers. Returns: int: The highest value among the positive numbers. Raises: ValueError: If there are duplicates in the list or if no positive number is found. if len(numbers) != len(set(numbers)): raise ValueError(\\"List contains duplicates\\") positive_numbers = [num for num in numbers if num > 0] if not positive_numbers: raise ValueError(\\"No positive numbers found\\") return max(positive_numbers)"},{"question":"Write a Python function that takes in a positive integer less than 1000 as input and returns the string \\"even\\" if the number is even, \\"odd\\" if the number is odd, and \\"prime\\" if the number is a prime number. The function should also check if the input is a positive integer and raise a ValueError with the message \\"Input must be a positive integer less than 1000\\" if it is not.","solution":"def classify_number(num): Classifies the given number as 'even', 'odd', or 'prime'. Raises a ValueError if the input is not a positive integer less than 1000. if not isinstance(num, int) or num <= 0 or num >= 1000: raise ValueError(\\"Input must be a positive integer less than 1000\\") if num == 1: return \\"odd\\" elif num == 2: return \\"prime\\" elif num % 2 == 0: return \\"even\\" for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return \\"odd\\" return \\"prime\\""},{"question":"Given a list, write a Python function to print the elements of the list in reverse order. The function should also remove any duplicate elements from the list before printing.","solution":"def print_reverse_unique(elements): Prints the elements of the list in reverse order after removing duplicates. unique_elements = list(dict.fromkeys(elements)) for element in reversed(unique_elements): print(element)"},{"question":"Given two lists, write a program that only finds the common elements between the two lists, without using any built-in functions like 'intersect' or other similar methods. Additionally, the program must ensure that each element in the resulting common elements list is unique (i.e., no duplicated elements allowed). Finally, the program should return the common elements list sorted in a descending order.","solution":"def find_common_elements(list1, list2): Find common elements between two lists, ensuring each element in the resulting list is unique and sorted in descending order. common_set = set() for el1 in list1: for el2 in list2: if el1 == el2: common_set.add(el1) return sorted(common_set, reverse=True)"},{"question":"Given the root of the binary tree 't' and the value 'v', insert a node with value 'v' such that it becomes a new right child of the root, but make sure that the original right child (if exists) becomes the left child of the newly added node. If there's no right child originally, just add the new node as the right child. Return the new root of the tree after modification.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert_right_subtree(root, v): Insert a node with value v as the right child of the root of the binary tree. The original right child (if exists) becomes the left child of the newly inserted node. :param root: TreeNode, the root of the binary tree :param v: int, the value of the new node to be inserted :return: TreeNode, the new root of the tree after modification if root is None: return TreeNode(v) new_right = TreeNode(v) new_right.left = root.right root.right = new_right return root"},{"question":"Write a Python class to find the maximum subarray sum of an array. The maximum subarray sum is the sum of the largest possible contiguous subarray within the array.","solution":"class MaxSubArray: def find_max_subarray_sum(self, nums): Finds the maximum subarray sum using the Kadane's Algorithm. :param nums: List of integers. :return: An integer, the maximum subarray sum. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given two lists, create a function that finds the common elements between the two lists. The function should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the longer list. Additionally, the function should not use any built-in functions or methods for finding intersections or common elements between lists.","solution":"def find_common_elements(list1, list2): Finds the common elements between two lists without using built-in functions. Time complexity should be O(n) and space complexity should be O(1). common_elements = [] list1.sort() list2.sort() i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: common_elements.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return common_elements"},{"question":"Take a text file with prefix \\"Report\\" and suffix \\".txt\\", output the file name, then output substring between the prefix and suffix as report id, then output the number of characters in that substring. Then output the number of vowels in that substring. Do this in Python.","solution":"import re def process_filename(filename): Process the filename to extract the report id and calculate its properties. Parameters: filename (str): The name of the file in 'Report<report_id>.txt' format. Returns: dict: A dictionary with the report_id, its length, and the number of vowels in it. # Validate filename format if not filename.startswith(\\"Report\\") or not filename.endswith(\\".txt\\"): raise ValueError(\\"Invalid filename format. It should start with 'Report' and end with '.txt'.\\") # Extracting the report id report_id = re.sub(r'^Report|.txt', '', filename) # Calculating the length of the report id report_length = len(report_id) # Counting the vowels in the report id vowels_count = sum(1 for char in report_id if char.lower() in 'aeiou') return { \\"filename\\": filename, \\"report_id\\": report_id, \\"report_length\\": report_length, \\"vowels_count\\": vowels_count } # Example usage # print(process_filename('Report123abc.txt'))"},{"question":"Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k. The array may contain duplicates and negative numbers.","solution":"def has_pair_with_sum(arr, k): Returns True if there are any two distinct numbers in the array that add up to k, else returns False. :param arr: List of integers :param k: Target sum :return: Boolean indicating presence of the pair adding up to k seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"Given an array of integers, write a function that returns the largest sum of any contiguous subarray of the array. The function should have a time complexity of O(n) and a space complexity of O(1). Additionally, the function should not use any built-in sorting or data structure functions.","solution":"def max_subarray_sum(nums): Returns the largest sum of any contiguous subarray of the array. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Suppose I have a list of length 10, and I want to write a Python function that takes in two parameters: the list and an integer index. The function should return the element located at the given index in the list. If the index is out of bounds, the function should return \\"Index out of range\\". Can you write this function for me?","solution":"def get_element_at_index(lst, index): Returns the element at the given index in the list. If the index is out of bounds, returns \\"Index out of range\\". if index < 0 or index >= len(lst): return \\"Index out of range\\" return lst[index]"},{"question":"You are given a text file named \\"data.txt\\" that contains multiple lines of space-delimited numbers. Your task is to write a Python function that processes this file and calculates the sum of each row of numbers. However, there is a catch: the file may be very large and could potentially not fit into memory all at once. Therefore, you must read and process the file line by line.","solution":"def sum_rows(file_path): Reads a file line by line, computes the sum of each row. Arguments: file_path -- the path to the text file containing rows of space-delimited numbers Returns: A list where each element is the sum of the corresponding row from the file. row_sums = [] with open(file_path, 'r') as file: for line in file: numbers = map(float, line.split()) row_sum = sum(numbers) row_sums.append(row_sum) return row_sums"},{"question":"Create a function in Python to generate a list of consecutive prime numbers starting from 2 up to a given number. The given number should be greater than 2. Additionally, the function should include a parameter for the starting number and generate the list of consecutive prime numbers starting from the specified number. The function should also handle cases where the given number is not prime and return an error message in such cases. The function should only use the Sieve of Eratosthenes algorithm to determine prime numbers.","solution":"def sieve_of_eratosthenes(n): Generate all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. sieve = [True] * (n + 1) sieve[0] = sieve[1] = False p = 2 while (p * p <= n): if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return [num for num, is_prime in enumerate(sieve) if is_prime] def generate_primes(start, up_to): Generate a list of consecutive prime numbers starting from \`start\` up to \`up_to\`. :param start: The number to start looking for primes. :param up_to: The maximum number up to which to generate primes. :return: List of prime numbers from \`start\` to \`up_to\`. if start <= 1: return \\"Error: Start number should be greater than 1.\\" if up_to <= 2: return \\"Error: The upper limit must be greater than 2.\\" all_primes = sieve_of_eratosthenes(up_to) start_primes = [prime for prime in all_primes if prime >= start] if not start_primes: return \\"Error: No primes found in the specified range.\\" return start_primes"},{"question":"Build a Python function that not only calculates the Highest Common Factor (HCF) of four integers but also verifies whether those numbers are divisible by a user defined number or not. If they aren't divisible, the function should generate the closest numbers which are divisible by the defined number.","solution":"def gcd(a, b): Returns the Greatest Common Divisor (GCD) of a and b. while b: a, b = b, a % b return a def hcf_of_four(a, b, c, d): Returns the Highest Common Factor (HCF) of four integers. return gcd(gcd(gcd(a, b), c), d) def closest_divisible_by(num, divisor): Returns the closest number to 'num' which is divisible by 'divisor'. if num % divisor == 0: return num lower = num - (num % divisor) upper = (num + divisor) - (num % divisor) return upper if num - lower >= upper - num else lower def process_numbers(a, b, c, d, divisor): Calculates the HCF of four integers and adjusts them to be divisible by the user defined divisor if they aren't already. hcf = hcf_of_four(a, b, c, d) divisible_numbers = [closest_divisible_by(x, divisor) for x in [a, b, c, d]] return hcf, divisible_numbers"},{"question":"Write a Python code script that takes a list of integers as an argument and returns the first three unique even numbers. It should also handle cases when there are less than three even numbers available in the list. Proofread your code for any syntax errors and optimize it for large input lists. Implement it without using any built-in Python libraries.","solution":"def first_three_unique_evens(nums): Returns the first three unique even numbers from the list. If there are less than three even numbers, returns as many as available. unique_evens = [] seen_evens = set() for num in nums: if num % 2 == 0 and num not in seen_evens: unique_evens.append(num) seen_evens.add(num) if len(unique_evens) == 3: break return unique_evens"},{"question":"I want to get a list from Python but I want all the elements to be unique, but I also have two constraints: 1. I don't want to use the inbuilt function set(), 2. I want to find and remove the duplicate elements without using another data structure. How can I accomplish this?","solution":"def remove_duplicates(lst): Returns a list with unique elements from the input list. :param lst: List of elements with possible duplicates. :return: List of elements with duplicates removed. unique_lst = [] for item in lst: # Check if item is already in unique_lst if item not in unique_lst: unique_lst.append(item) return unique_lst"},{"question":"Given the details about a URL such as its scheme, host, path, parameters, and fragments, write a Python function to construct the full URL. Additionally, implement error checking to ensure each part of the URL is valid according to standard URL syntax.","solution":"import re def construct_url(scheme, host, path='', params='', fragment=''): Constructs a full URL from the given parts. Parameters: - scheme (str): The URL scheme (e.g., \\"http\\", \\"https\\"). - host (str): The host part of the URL (e.g., \\"www.example.com\\"). - path (str): The path part of the URL (default is ''). - params (str): The query parameters part of the URL (default is ''). - fragment (str): The fragment part of the URL (default is ''). Returns: - str: The constructed full URL. url_pattern = re.compile( r'^(http|https)://' r'(?P<host>[a-zA-Z0-9.-]+)' r'(?P<path>/[a-zA-Z0-9/_-]*)?' r'(?(?P<params>[a-zA-Z0-9&=_%/-]+))?' r'(#(?P<fragment>[a-zA-Z0-9/_-]*))?' ) # Construct the URL url = f\\"{scheme}://{host}\\" if path: url += path if params: url += f\\"?{params}\\" if fragment: url += f\\"#{fragment}\\" # Validate the constructed URL if not url_pattern.match(url): raise ValueError(\\"Invalid URL components provided.\\") return url"},{"question":"Write a complete algorithm in Python for sorting an array using the Quick Sort technique. In addition, implement a function that visualizes the state of the array after each partition operation. You may use matplotlib for visualization purposes.","solution":"import matplotlib.pyplot as plt import time def quicksort(arr, low, high): if low < high: pi = partition(arr, low, high) visualize(arr) quicksort(arr, low, pi - 1) quicksort(arr, pi + 1, high) def partition(arr, low, high): pivot = arr[high] i = (low - 1) for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return (i + 1) def visualize(arr): plt.bar(range(len(arr)), arr, color='blue') plt.pause(0.1) plt.clf() def quicksort_with_visualization(arr): plt.ion() fig = plt.figure() quicksort(arr, 0, len(arr) - 1) plt.ioff() plt.show() return arr"},{"question":"Write a method to sort a list of numbers using the Quick Sort algorithm. However, you are not allowed to use any built-in sorting functions or libraries. Additionally, the method should have a time complexity of O(nlogn) and use constant space complexity.","solution":"def quick_sort(lst): Sorts a list of numbers using the Quick Sort algorithm. The function sorts the list in place and has an average time complexity of O(nlogn). def sort_helper(low, high): if low < high: partition_index = partition(low, high) sort_helper(low, partition_index - 1) sort_helper(partition_index + 1, high) def partition(low, high): pivot = lst[high] i = low - 1 for j in range(low, high): if lst[j] <= pivot: i += 1 lst[i], lst[j] = lst[j], lst[i] lst[i + 1], lst[high] = lst[high], lst[i + 1] return i + 1 if lst: sort_helper(0, len(lst) - 1)"},{"question":"Create a python script that can find the longest common subsequence between two strings. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence between two given strings. m, n = len(s1), len(s2) # Create a 2D array to store the lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the longest common subsequence from the dp array lcs = [] while m > 0 and n > 0: if s1[m - 1] == s2[n - 1]: lcs.append(s1[m - 1]) m -= 1 n -= 1 elif dp[m - 1][n] > dp[m][n - 1]: m -= 1 else: n -= 1 return ''.join(reversed(lcs))"},{"question":"code a function in python that takes a string and a substring and returns the number of occurances of the substring in the string, without using built-in functions.","solution":"def count_substring_occurrences(string, substring): Returns the number of occurrences of the substring in the string without using built-in functions. count = 0 sub_len = len(substring) str_len = len(string) for i in range(str_len - sub_len + 1): if string[i:i + sub_len] == substring: count += 1 return count"},{"question":"Write a Python function that takes two strings as inputs and returns True if the first string is a rotation of the second string, and False otherwise. A string rotation involves moving any number of characters from the beginning of the string to the end without changing the order of the remaining characters. The function should not use any built-in functions for string rotation or manipulation.","solution":"def is_rotation(s1, s2): Returns True if s1 is a rotation of s2, otherwise False. if len(s1) != len(s2): return False combined = s2 + s2 return s1 in combined"},{"question":"Given a list of words, write a program to convert the list into a set while removing any duplicate elements. Additionally, sort the resulting set in reverse alphabetical order. As a challenge, try to implement the solution in a single line of code using functional programming concepts.","solution":"def unique_sorted_words_reverse(words): Converts list of words to a set to remove duplicates and sorts in reverse alphabetical order. return sorted(set(words), reverse=True)"},{"question":"I am developing a python lambda function using PySpark and AWS Glue. I'll use it to create a pandas dataframe, then use pandas to json to serialize the data. The output should be valid JSON lines (record per line). What is the best way to write the output string from Python lambda to a destination S3 bucket?","solution":"import pandas as pd import boto3 import json def lambda_handler(event, context): # Creating a sample pandas DataFrame data = { 'column1': [1, 2, 3], 'column2': ['a', 'b', 'c'] } df = pd.DataFrame(data) # Converting DataFrame to JSON lines json_lines = df.to_json(orient='records', lines=True) # Writing JSON lines to S3 bucket s3 = boto3.client('s3') bucket_name = 'your-bucket-name' file_key = 'your-folder/your-file.json' s3.put_object(Bucket=bucket_name, Key=file_key, Body=json_lines) return { 'statusCode': 200, 'body': json.dumps('JSON Lines successfully written to S3') }"},{"question":"Write a Python function to calculate the factorial of a number (a non-negative integer). The function should take the number as an argument and return its factorial. Additionally, the function should include error handling to check if the input is a non-negative integer. If the input is not valid, the function should raise a custom exception with an appropriate error message. Implement the function in a way that avoids using the built-in factorial function or any external libraries.","solution":"class FactorialError(Exception): Custom exception for factorial errors. pass def factorial(n): Returns the factorial of a non-negative integer n. :param n: a non-negative integer :return: factorial of n :raises FactorialError: if the input is not a non-negative integer if not isinstance(n, int) or n < 0: raise FactorialError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a program that accepts a sentence and a number as input, then output the sentence with each word repeated the specified number of times. Additionally, reverse the order of characters in each repeated word and use a symbol of your choosing to separate each repetition.","solution":"def repeat_and_reverse_sentence(sentence, number, symbol='-'): Repeats each word in the sentence the specified number of times, reverses each word, and separates each repetition with the given symbol. Parameters: sentence (str): The sentence to be manipulated. number (int): The number of times to repeat each word. symbol (str): The symbol used to separate each repetition. Returns: str: The manipulated sentence. words = sentence.split() result = [] for word in words: reversed_word = word[::-1] repeated_word = (reversed_word + symbol) * (number - 1) + reversed_word result.append(repeated_word) return ' '.join(result)"},{"question":"Create a function that returns the last K unique elements of an array, where K is a positive integer. The function should have a time complexity of O(K) and a space complexity of O(K).","solution":"from collections import deque def last_k_unique_elements(arr, k): Returns the last K unique elements of the array. Args: arr (list): List of input elements. k (int): Number of unique elements to return. Returns: list: Last K unique elements. if k <= 0: return [] unique_elements = deque(maxlen=k) seen_elements = set() for element in reversed(arr): if element not in seen_elements: unique_elements.appendleft(element) seen_elements.add(element) if len(unique_elements) == k: break return list(unique_elements)"},{"question":"Write a Python program that creates two sets with random integer values, and then create a function to find out the symmetric difference between these two sets. Also, add conditions to handle scenarios where the sets have no symmetric difference and report this back to the user.","solution":"import random def create_random_set(size, lower_bound, upper_bound): Creates a set with random integers. Parameters: size (int): The number of elements in the set. lower_bound (int): The minimum value an element can take. upper_bound (int): The maximum value an element can take. Returns: set: A set of random integers. return set(random.randint(lower_bound, upper_bound) for _ in range(size)) def symmetric_difference(set1, set2): Finds the symmetric difference between two sets. Parameters: set1 (set): The first set. set2 (set): The second set. Returns: set: The symmetric difference between set1 and set2. sym_diff = set1.symmetric_difference(set2) if not sym_diff: return \\"No symmetric difference\\" return sym_diff # Example usage for creating random sets: set1 = create_random_set(5, 1, 10) set2 = create_random_set(5, 1, 10) print(f\\"Set 1: {set1}\\") print(f\\"Set 2: {set2}\\") print(f\\"Symmetric Difference: {symmetric_difference(set1, set2)}\\")"},{"question":"Create a function that takes a list of strings and returns a new list of strings with the first letter of each string as capital. The function should have a time complexity of O(n), where n is the total number of characters in all strings combined. Additionally, the function should not use any built-in string manipulation functions such as capitalize() or title().","solution":"def capitalize_first_letter(strings): Returns a new list of strings with the first letter of each string capitalized. result = [] for s in strings: if len(s) > 0: # Manually capitalize the first letter if the string is not empty capitalized_string = s[0].upper() + s[1:] else: capitalized_string = s result.append(capitalized_string) return result"},{"question":"Given a list of numbers, write a function in Python to sort the list in descending order.","solution":"def sort_descending(lst): Sorts the given list in descending order. Parameters: lst (list): A list of numbers. Returns: list: A new list sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Complete the code below with an efficient implementation. The function should determine if all elements in the array are strictly decreasing from the start to the end. However, you are not allowed to use any comparison operators (like >, <, >=, <=) in your solution.","solution":"def is_strictly_decreasing(arr): Checks if all elements in the array are strictly decreasing from start to end. Parameters: arr (list): A list of integers. Returns: bool: True if the array is strictly decreasing, False otherwise. # Instead of using comparison operators, we will use a subtraction-based approach. for i in range(1, len(arr)): if not arr[i-1] - arr[i] > 0: return False return True"},{"question":"I have a list of words, and I want to filter out the ones that are palindromes (words that can be read the same way forwards and backwards). How can I write a program to accomplish this?","solution":"def is_palindrome(word): Checks if a given word is a palindrome. return word == word[::-1] def filter_palindromes(words): Filters out palindromes from a list of words. return [word for word in words if not is_palindrome(word)]"},{"question":"Write a python function to find the maximum depth of a binary tree. Additionally, write another function that returns the path from the root to the node that has this maximum depth. While you can use any built-in python libraries for list operations, you are not allowed to use any libraries or packages that provide direct tree node definitions or tree operations.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Finds the maximum depth of a binary tree. :param root: TreeNode :return: int if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1 def find_max_depth_path(root): Finds the path from root to the node with the maximum depth. :param root: TreeNode :return: list def helper(node, current_path, max_path): if node: current_path.append(node.value) if not node.left and not node.right: # Leaf node if len(current_path) > len(max_path): max_path.clear() max_path.extend(current_path) helper(node.left, current_path, max_path) helper(node.right, current_path, max_path) current_path.pop() max_path = [] helper(root, [], max_path) return max_path"},{"question":"Design a Python function snippet to Calculate Extreme Clothing cleanliness: Cleaning Special Fabrics for Analysis for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Ethics. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def clean_fabric(fabric_type): Returns the recommended cleaning method for different types of fabrics. Args: fabric_type (str): The type of fabric to be cleaned. Returns: str: The cleaning method for the fabric. if fabric_type == \\"silk\\": return \\"Dry clean only. Hand wash with mild detergent if necessary.\\" elif fabric_type == \\"wool\\": return \\"Hand wash with cold water and mild detergent. Lay flat to dry.\\" elif fabric_type == \\"cotton\\": return \\"Machine wash with warm water. Tumble dry on low heat.\\" elif fabric_type == \\"linen\\": return \\"Hand or machine wash on gentle cycle with cool water. Hang dry.\\" elif fabric_type == \\"synthetic\\": return \\"Machine wash with cold water. Tumble dry on low heat.\\" else: return \\"Unknown fabric type. Refer to the care label for cleaning instructions.\\" # Detailed Comments: # - The function takes a single argument \`fabric_type\`, which is expected to be a string representing the type of fabric. # - We use a series of if/elif statements to check the value of \`fabric_type\` and return the corresponding cleaning method. # - If the fabric is silk, the method advises dry cleaning, with hand washing as an alternative. # - Wool fabrics are recommended to be hand washed with cold water and mild detergent to avoid shrinking. # - Cotton fabrics can withstand machine washing with warm water and low heat tumbling. # - Linen fabrics should be washed on gentle cycles with cool water and are best dried by hanging. # - Synthetic fabrics generally require machine washing with cold water and low heat drying. # - If the fabric type is unknown or not listed, the function defaults to recommending consulting the care label."},{"question":"In Python, write a function that applies a given list of offsets to a copy of a given list of integers, ensuring the original list remains unchanged. The function should handle cases where the offset list is shorter than the integer list by repeating the offsets. For example, applying offsets [1, 2] to [4, 5, 6, 7] should yield [5, 7, 7, 9]. Include a check function to validate the solution with provided data points.","solution":"from typing import List def apply_offsets(integers: List[int], offsets: List[int]) -> List[int]: Applies a given list of offsets to a copy of a given list of integers, ensuring the original list remains unchanged. Repeats the offsets if the offset list is shorter than the integer list. result = integers[:] for i in range(len(result)): result[i] += offsets[i % len(offsets)] return result def check_apply_offsets(): assert apply_offsets([4, 5, 6, 7], [1, 2]) == [5, 7, 7, 9] assert apply_offsets([1, 2, 3], [1]) == [2, 3, 4] assert apply_offsets([0, 0, 0], [0]) == [0, 0, 0] assert apply_offsets([10, 20, 30], [3, -3]) == [13, 17, 33] assert apply_offsets([], [1, 2]) == []"},{"question":"Human: Learn PyTorch fundamentals by developing a linear regression model from scratch.","solution":"import torch import torch.nn as nn import torch.optim as optim # Linear regression model class LinearRegressionModel(nn.Module): def __init__(self, input_dim, output_dim): super(LinearRegressionModel, self).__init__() self.linear = nn.Linear(input_dim, output_dim) def forward(self, x): return self.linear(x) # Create data for training def get_data(): # X is a (20, 1) tensor X = torch.randn(20, 1) # y = 3*X + 2 with some noise y = 3 * X + 2 + torch.randn_like(X) * 0.5 return X, y def train(model, criterion, optimizer, X_train, y_train, epochs=100): for epoch in range(epochs): model.train() optimizer.zero_grad() outputs = model(X_train) loss = criterion(outputs, y_train) loss.backward() optimizer.step() return model def main(): # Hyperparameters input_dim = 1 output_dim = 1 learning_rate = 0.01 epochs = 500 X_train, y_train = get_data() model = LinearRegressionModel(input_dim, output_dim) criterion = nn.MSELoss() optimizer = optim.SGD(model.parameters(), lr=learning_rate) trained_model = train(model, criterion, optimizer, X_train, y_train, epochs) return trained_model if __name__ == \\"__main__\\": main()"},{"question":"Write a Python function to check if a list is a palindrome ignoring case and non-alphanumeric characters.","solution":"import re def is_palindrome(lst): Check if a list is a palindrome ignoring case and non-alphanumeric characters. cleaned_lst = [re.sub(r'W+', '', str(item)).lower() for item in lst if re.sub(r'W+', '', str(item))] return cleaned_lst == cleaned_lst[::-1]"},{"question":"Given an array with size n (1 <= n <= 10^5) filled with integers. Write a function to find all unique triplets that sum up to zero in linearithmic time complexity (O(n log n)). As an additional challenge, avoid using extra space (solve the problem in-place) and ensure there are no duplicate triplets in the output.","solution":"def three_sum(nums): Finds all unique triplets in the array that sum up to zero. Args: nums (List[int]): List of integers. Returns: List[List[int]]: List of unique triplets that sum to zero. nums.sort() n = len(nums) result = [] for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"Develop a Python function to identify the entire set of divisors of a given number, excluding the number itself. The function should efficiently handle large numbers and should return the divisors in ascending order.","solution":"def find_divisors(n): Returns the entire set of divisors of n, excluding n itself. The divisors are returned in ascending order. if n <= 1: return [] divisors = set() for i in range(1, int(n ** 0.5) + 1): if n % i == 0: divisors.add(i) if i != n // i and i != 1: divisors.add(n // i) return sorted(divisors)"},{"question":"Write a Python program that can take a list of different types of data (integers, strings, floats) as input. The program should identify the type of each data, and convert it into its string equivalent, but only if it's an integer or a float. If the data is already a string, it should remain unchanged in the output list. Also, add an error checking functionality to ensure the elements in the list are of type \`int\`, \`float\`, or \`str\`.","solution":"from typing import List, Any def convert_to_string(data: List[Any]) -> List[str]: Takes a list of data items and converts integers and floats to their string equivalents. Strings remain unchanged. Only elements of type int, float, or str are allowed. Arguments: data -- A list containing elements of type int, float, or str. Returns: A list where all integers and floats have been converted to strings; strings remain unchanged. if not all(isinstance(item, (int, float, str)) for item in data): raise ValueError(\\"All elements in the list must be of type int, float, or str.\\") return [str(item) if isinstance(item, (int, float)) else item for item in data]"},{"question":"Create a function in Python to convert all special characters in a text to their ASCII values. The text can be a multiline string and include Unicode special characters. The function should handle these additions efficiently.","solution":"def convert_special_characters_to_ascii(text): Convert all special characters in the input text to their ASCII values. Special characters are considered those outside of alphanumeric characters and whitespace. :param text: A string that may contain special characters. :return: A string with special characters replaced by their ASCII values. result = [] for char in text: if not char.isalnum() and not char.isspace(): result.append(f'[{ord(char)}]') else: result.append(char) return ''.join(result)"},{"question":"I am trying to understand the syntax of the following Python code fragment for generating prime numbers. Can you explain it to me?","solution":"def generate_primes(limit): Generates a list of all prime numbers up to the specified limit using the Sieve of Eratosthenes algorithm. :param limit: The upper bound on the range of numbers to check for primality. :return: A list of prime numbers up to the specified limit. if limit < 2: return [] # Initially, assume all numbers from 2 to limit are prime sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers primes = [] for num in range(2, limit + 1): if sieve[num]: # If num is prime primes.append(num) for multiple in range(num * num, limit + 1, num): sieve[multiple] = False # Mark multiples of num as not prime return primes"},{"question":"Create a program that generates an array of prime numbers from 0 to 100 in descending order. Use a function to check if a number is prime and incorporate a for loop to iterate through the numbers from 100 to 0. Utilize if/else statements to add only the prime numbers to the array. Finally, print the array of prime numbers to the console.","solution":"def is_prime(n): Check if the number n is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def generate_primes_descending(max_num): Generates an array of prime numbers from 0 to max_num in descending order. primes = [] for num in range(max_num, -1, -1): if is_prime(num): primes.append(num) return primes # Generate prime numbers from 0 to 100 in descending order primes_desc = generate_primes_descending(100) print(primes_desc)"},{"question":"Given a piece of erroneous code that aims to find the real roots of a quadratic equation, identify and correct the errors in the code. Also, modify the code to not only handle real roots but also complex roots. Remember to handle cases where the discriminant (b^2 - 4ac) is less than zero, which would result in complex roots.","solution":"import cmath def find_roots(a, b, c): Returns the roots of the quadratic equation ax^2 + bx + c = 0. Handles both real and complex roots. if a == 0: raise ValueError(\\"Coefficient 'a' cannot be zero.\\") discriminant = b**2 - 4*a*c root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) return (root1, root2)"},{"question":"Suppose we have two strings, \\"abc\\" and \\"xyz\\". We want to compare these strings using the concept of lexicographic order. Please write a Python program to achieve this.","solution":"def compare_lexicographically(str1, str2): Compares two strings lexicographically. Returns: -1 if str1 < str2 0 if str1 == str2 1 if str1 > str2 if str1 < str2: return -1 elif str1 > str2: return 1 else: return 0"},{"question":"Given two integer variables, b and c, write a function in Python to multiply these two numbers without using the asterisk (*) operator or built-in functions like mul() from theoperator module. Additionally, handle edge cases such as negative numbers and zero.","solution":"def multiply_without_asterisk(b, c): Multiplies two integers b and c without using the * operator. result = 0 is_negative = (b < 0) != (c < 0) b, c = abs(b), abs(c) for _ in range(c): result += b if is_negative: result = -result return result"},{"question":"Please modify the specified Python script so that it exhibits the Fibonacci sequence up to the 'n'th position, where 'n' is a user-inputted value. Also, your script should be able to handle and validate the user's input to ensure it is a positive integer greater than 0.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth position. if n <= 0: raise ValueError(\\"n must be a positive integer greater than 0\\") fib_sequence = [] a, b = 0, 1 while len(fib_sequence) < n: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Program a function to get the next element of a list in Python. If the current element is the last one in the list, the function should return the first element. Consider circular list logic. Remember that your implementation should work efficiently even for large lists.","solution":"def get_next_element(lst, current_element): Returns the next element in the list. If the current element is the last one, returns the first element. Args: lst: List of elements current_element: The current element in the list Returns: next_element: The next element in the list, or the first element if current_element is the last one. if not lst: raise ValueError(\\"The list cannot be empty\\") if current_element not in lst: raise ValueError(\\"The current element must be in the list\\") index = lst.index(current_element) next_index = (index + 1) % len(lst) return lst[next_index]"},{"question":"Write a Python 3 program to reverse a string without using any built-in reverse functions or slicing.","solution":"def reverse_string(s): Returns the reversed version of the input string s without using built-in reverse functions or slicing. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a function 'sayHello' that takes a string parameter 'name' and returns the string 'Hello {name}!', where {name} is the value of the 'name' parameter. The function should also check if the input 'name' is a string and return an error message if it is not. Additionally, the function should only return the greeting if the length of the 'name' string is between 2 and 20 characters (inclusive). If the name is empty, the function should return an error message stating that the name is empty. If the name is not empty but its length is less than 2 characters or greater than 20 characters, the function should return an error message stating that the name is too short or too long respectively.","solution":"def sayHello(name): Returns a greeting string 'Hello {name}!' if the input is valid. - If the name is not a string, return 'Error: Input is not a string.' - If the name is an empty string, return 'Error: Name is empty.' - If the length of the name is less than 2, return 'Error: Name is too short.' - If the length of the name is greater than 20, return 'Error: Name is too long.' if not isinstance(name, str): return 'Error: Input is not a string.' if name == \\"\\": return 'Error: Name is empty.' if len(name) < 2: return 'Error: Name is too short.' if len(name) > 20: return 'Error: Name is too long.' return f'Hello {name}!'"},{"question":"Write a Python function that takes a 2D array as input and transposes it.","solution":"def transpose_matrix(matrix): Transposes the given 2D matrix. return [list(row) for row in zip(*matrix)]"},{"question":"I have an unknown number of 12-element-long iterables. I'm interested in using python's built-in reduce function. Could you give me a code snippet that would return the element-wise maximum of all these iterables?","solution":"from functools import reduce def element_wise_max(*iterables): Returns the element-wise maximum of multiple 12-element-long iterables. Parameters: *iterables (list of iterables): An unknown number of 12-element-long iterables. Returns: list: A list containing the element-wise maximum values. return list(reduce(lambda x, y: [max(a, b) for a, b in zip(x, y)], iterables))"},{"question":"Create a very simple program but ensure that it includes functions, loops, conditional statements, and user input. The program should ask the user for their name and display a personalized greeting. Then, using a loop and conditional statements, the program should ask the user to input a list of numbers. If the number is even, the program should print \\"[number] is even\\". If the number is odd, it should print \\"[number] is odd\\". The function should be reusable for different sets of numbers.","solution":"def greet_user(name): Prints a personalized greeting. return f\\"Hello, {name}!\\" def analyze_numbers(numbers): Analyzes a list of numbers to check if they are even or odd. results = [] for number in numbers: if number % 2 == 0: results.append(f\\"{number} is even\\") else: results.append(f\\"{number} is odd\\") return results def main(): name = input(\\"Enter your name: \\") print(greet_user(name)) num_count = int(input(\\"How many numbers will you input?: \\")) numbers = [] for _ in range(num_count): number = int(input(\\"Enter a number: \\")) numbers.append(number) results = analyze_numbers(numbers) for result in results: print(result)"},{"question":"You are given a Python dictionary with string keys and integer values. Write a function to sort the dictionary based on values in descending order. If two values are the same, sort by key in ascending order.","solution":"def sort_dict_by_value_and_key(input_dict): Returns a dictionary sorted based on values in descending order. If two values are the same, sort by key in ascending order. :param input_dict: A dictionary with string keys and integer values. :return: A sorted dictionary as described above. return dict(sorted(input_dict.items(), key=lambda item: (-item[1], item[0])))"},{"question":"Write a Python function that takes in two parameters, an index and a list. The goal of the function is to return the element at the specified index in the list. If the index is out of bounds, handle the error gracefully and return a default value or a custom message. Additionally, incorporate proper error handling techniques, including try and except statements.","solution":"def get_element_at_index(index, lst): Returns the element at the specified index in the list 'lst'. If the index is out of bounds, returns a custom message. try: return lst[index] except IndexError: return \\"Index out of bounds\\""},{"question":"Given the ICD-10 code and clinical description for a specific medical diagnosis, write a Python function that returns the corresponding CPT code and description for the associated medical procedure. For example, given the ICD-10 code \\"K20\\" and clinical description \\"Gastroesophageal reflux disease without esophagitis\\", the function should return the CPT code \\"43231\\" and description \\"Injection or infusion of botulinum toxin type A, each 100 units\\" for the associated procedure.","solution":"def icd_to_cpt(icd_code): mapping = { \\"K20\\": (\\"43231\\", \\"Esophagogastroduodenoscopy, flexible, transoral; with directed submucosal injection(s), any substance\\"), # Additional ICD-10 to CPT mappings (hypothetical example) \\"E11\\": (\\"99213\\", \\"Office or other outpatient visit for the evaluation and management of an established patient, low complexity\\"), \\"I10\\": (\\"93000\\", \\"Electrocardiogram, routine ECG with at least 12 leads; with interpretation and report\\") } return mapping.get(icd_code, (\\"Unknown\\", \\"Mapping not found\\"))"},{"question":"Write a program that determines whether an inputted integer is odd or even. The program should ask the user for their number and then display if the number is odd or even. After displaying the result, the program should ask the user if they want to enter another number for testing. If they input 'y' then the program should repeat again; if they input 'n' then the program should exit. If the user inputs something else, the program should tell the user that their input was not a valid response and exit.","solution":"def is_odd_or_even(): Determines if a number is odd or even by user input while True: try: number = int(input(\\"Enter an integer: \\")) if number % 2 == 0: print(\\"even\\") else: print(\\"odd\\") again = input(\\"Do you want to enter another number? (y/n): \\").strip().lower() if again == 'y': continue elif again == 'n': print(\\"Goodbye!\\") break else: print(\\"Invalid response. Exiting.\\") break except ValueError: print(\\"Please enter a valid integer.\\")"},{"question":"Create a 3D cube list of size 4x4x4, filled with zeros. Additionally, implement a function to set every element in the nth layer to the nth number in the Fibonacci sequence, where n starts from 1.","solution":"def create_cube(size=4): Creates a 3D list (cube) of the given size, filled with zeros. return [[[0 for _ in range(size)] for _ in range(size)] for _ in range(size)] def fibonacci(n): Returns the n-th number in the Fibonacci sequence. if n == 1: return 1 if n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b def set_layer_to_fibonacci(cube): Sets every element in the nth layer of the cube to the nth number in the Fibonacci sequence, where n starts from 1. for layer in range(4): fib_value = fibonacci(layer + 1) for row in range(4): for col in range(4): cube[layer][row][col] = fib_value return cube"},{"question":"Write a program to calculate the factorial of a given number using a recursive function. The program should prompt the user to enter the number, call the recursive function to calculate the factorial, and then print the result.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) def main(): num = int(input(\\"Enter a number: \\")) result = factorial(num) print(f\\"The factorial of {num} is {result}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a function to compare two strings and return True if they are anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. The function should ignore any spaces and capitalization. The function should have a time complexity of O(n log n), where n is the length of the input strings. The function should not use any built-in functions or libraries that directly solve the problem, such as collections.Counter or sorted().","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, ignoring spaces and capitalization. # Remove spaces and convert both strings to lowercase cleaned_str1 = ''.join(c.lower() for c in str1 if c.isalpha()) cleaned_str2 = ''.join(c.lower() for c in str2 if c.isalpha()) # If the lengths are not equal, they cannot be anagrams if len(cleaned_str1) != len(cleaned_str2): return False # Sort both strings sorted_str1 = sorted(cleaned_str1) sorted_str2 = sorted(cleaned_str2) # Check if sorted strings are equal return sorted_str1 == sorted_str2"},{"question":"Write a recursive function called \`fibonacci\` that takes an integer input \`n\` and returns the \`n\`-th digit of the Fibonacci sequence. However, the function must only utilize a single argument and no auxiliary data structures. Additionally, the code must not use any looping constructs like \`for\` or \`while\`.","solution":"def fibonacci(n): Returns the n-th digit of the Fibonacci sequence. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Given a circular linked list, write a function to reverse it. Also, implement a function that checks if the reversed linked list is a palindrome. The function should return True if the reversed linked list is a palindrome, and False otherwise.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def reverse_circular_linked_list(head): if not head or not head.next: return head prev = None current = head next_node = None while True: next_node = current.next current.next = prev prev = current current = next_node if current == head: break head.next = prev # making the last node point to the new head return prev def is_palindrome(head): if not head or not head.next: return True slow = head fast = head stack = [] while fast and fast.next != head: stack.append(slow.data) slow = slow.next fast = fast.next.next if fast: slow = slow.next while slow != head: if stack.pop() != slow.data: return False slow = slow.next return True def check_reversed_is_palindrome(head): reversed_head = reverse_circular_linked_list(head) return is_palindrome(reversed_head)"},{"question":"Given a sorted array of integers and an integer value, figure out whether the given value is present in the array or not using a binary search algorithm. If the value is present, return the index at which it is found. Additionally, calculate the time complexity of your solution.","solution":"def binary_search(arr, value): Perform a binary search to find the index of \`value\` in the sorted \`arr\`. If \`value\` is not found, return -1. :param arr: List of sorted integers. :param value: Integer value to search for. :return: Index of \`value\` in \`arr\` if found, otherwise -1. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == value: return mid elif arr[mid] < value: low = mid + 1 else: high = mid - 1 return -1 # Time Complexity: O(log n) # Space Complexity: O(1)"},{"question":"Suggest a Python code to parse a large XML document (containing millions of nodes) and efficiently extract specific data elements. Additionally, provide error handling for any potential exceptions that may occur during the parsing process.","solution":"import xml.etree.ElementTree as ET def parse_large_xml(xml_file, tag): Parses a large XML file and extracts data for a given tag. Args: xml_file (str): Path to the XML file. tag (str): Tag name to extract data from. Returns: List of element values. try: context = ET.iterparse(xml_file, events=('end',)) extracted_data = [] for event, elem in context: if elem.tag == tag: extracted_data.append(elem.text) elem.clear() # clear the element to save memory return extracted_data except ET.ParseError as e: print(f\\"XML parsing error: {e}\\") return [] except Exception as e: print(f\\"An error occurred: {e}\\") return [] # Example usage (assuming 'large_file.xml' is a valid XML file in your directory): # data = parse_large_xml('large_file.xml', 'target_tag') # print(data)"},{"question":"Write a python program to find all the prime numbers between 1 and 1000 and print them.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_between_1_and_1000(): Returns a list of all prime numbers between 1 and 1000. return [num for num in range(1, 1001) if is_prime(num)]"},{"question":"Using Python, write the code to generate a Fibonacci sequence up to a given number of terms, where the number of terms is provided by the user as input. Additionally, implement error handling to ensure that the user can only input a positive integer for the number of terms.","solution":"def fibonacci_sequence(n): Generates a Fibonacci sequence with n terms. if not isinstance(n, int) or n <= 0: raise ValueError(\\"The number of terms must be a positive integer\\") sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Using the given code, create a function \\"calculate_area\\" which will take two integer parameters and calculate the area of a rectangle. The length and width parameters should only be positive integers greater than 0. The function should return the area as a floating-point number rounded to two decimal places. Additionally, the function should validate that the length parameter is an even number and the width parameter is an odd number before calculating the area. If any of the parameters do not meet the specified conditions, the function should raise a custom exception called \\"InvalidDimensionsError\\" with an appropriate error message.","solution":"class InvalidDimensionsError(Exception): pass def calculate_area(length, width): Calculate the area of a rectangle with the specified length and width parameters. Parameters: length (int): The length of the rectangle. Must be a positive even number. width (int): The width of the rectangle. Must be a positive odd number. Returns: float: The area of the rectangle rounded to two decimal places. Raises: InvalidDimensionsError: If length is not a positive even number or width is not a positive odd number. if length <= 0 or width <= 0: raise InvalidDimensionsError(\\"Length and width must be positive integers greater than 0.\\") if length % 2 != 0: raise InvalidDimensionsError(\\"Length must be an even number.\\") if width % 2 == 0: raise InvalidDimensionsError(\\"Width must be an odd number.\\") area = length * width return round(area, 2)"},{"question":"Create a function that processes an array to remove all the duplicated elements, and then sorts the array in ascending order. The function should also handle arrays that contain strings in addition to integers. Additionally, the function should only use constant extra space and should not use any built-in sorting functions or data structures.","solution":"def remove_duplicates_and_sort(arr): Processes an array to remove all duplicated elements, and then sorts the array in ascending order. Parameters: arr (list): List of integers and/or strings Returns: list: Sorted list with duplicates removed if not arr: return arr # Convert all elements to str for uniformity arr = list(map(str, arr)) # Remove duplicates seen = set() unique_arr = [] for item in arr: if item not in seen: seen.add(item) unique_arr.append(item) # Sort the array - Simple implementaion using bubble sort n = len(unique_arr) for i in range(n): for j in range(0, n-i-1): if unique_arr[j] > unique_arr[j+1]: unique_arr[j], unique_arr[j+1] = unique_arr[j+1], unique_arr[j] # Convert back to original mixed types if numeric result = [] for item in unique_arr: try: number = int(item) result.append(number) except ValueError: result.append(item) return result"},{"question":"Design a recursive function that determines the Fibonacci sequence up to a given number n with an additional constraint of implementing it without using loops or the 'if' statement in Python.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth number. return _fibonacci(n, more_to_come=True) def _fibonacci(n, more_to_come): Helper function to return Fibonacci sequence up to the nth number recursively. def fibo_rec(a, b, remaining): return [] if remaining == 0 else [a] + fibo_rec(b, a+b, remaining-1) return fibo_rec(0, 1, n) if more_to_come else []"},{"question":"Write a Python program that outputs a dictionary where the keys are integers from 1 to the number provided, and the values are the squares of the keys. For example, if the number given is 5, the output should be: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}. Make sure to include any necessary error checking for the input value.","solution":"def generate_squares_dict(n): Returns a dictionary where the keys are integers from 1 to n, and the values are the squares of the keys. Parameters: - n: The upper limit of the range of keys (inclusive) Returns: - dict: A dictionary with integer keys and their respective squares as values if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") return {i: i**2 for i in range(1, n+1)}"},{"question":"The following code snippet uses Python's \\"multiprocessing\\" and \\"concurrent.futures\\" to evaluate the calculation of \\"quadtribonacci\\" values. The \\"quadtribonacci\\" sequence is a variant of the Fibonacci sequence with four numbers preceding each subsequent number. The evaluation is performed using process-based parallelism. The initial values of the sequence are defined with the variable \\"ARGS\\". The functions \\"quadtribonacci\\" and \\"worker\\" are created to perform the calculations and be used by the multiprocessing pool. \\"ThreadPoolExecutor\\" is also used to compare its performance with \\"ProcessPoolExecutor\\". The calculated quadtribonacci values are printed using both methods to show their outcomes. However, the code snippet lacks a check function which can validate the correctness of the calculated values.","solution":"from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor import multiprocessing # Define the initial values of the quadtribonacci sequence ARGS = [0, 0, 0, 1] def quadtribonacci(n): Calculate the nth quadtribonacci number. The quadtribonacci sequence starts with 0, 0, 0, 1 and each subsequent term is the sum of the previous four terms. dp = ARGS + [0] * (n - 3) for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4] return dp[n] def worker(n): return quadtribonacci(n) def use_process_pool(numbers): with ProcessPoolExecutor() as executor: results = list(executor.map(worker, numbers)) return results def use_thread_pool(numbers): with ThreadPoolExecutor() as executor: results = list(executor.map(worker, numbers)) return results def check_correctness(results, expected_values): return results == expected_values"},{"question":"Write a Python program that takes an input string representing an integer and computes its reverse. The function should check if the reversed integer is within the bounds of a signed 32-bit integer before returning it. If the reversed integer exceeds this range, the function should return 0.","solution":"def reverse_integer(s): Reverses the input string representing an integer and returns the reversed integer if it is within the bounds of a signed 32-bit integer. Otherwise, returns 0. try: val = int(s) except ValueError: return 0 # If the string cannot be converted to an integer, return 0. sign = -1 if val < 0 else 1 reversed_int = sign * int(str(abs(val))[::-1]) # Check for 32-bit signed integer range if reversed_int < -2**31 or reversed_int > 2**31 - 1: return 0 return reversed_int"},{"question":"Devise an algorithm for a software application that not only takes as input an integer 'm', where 'm' signifies the number of rows and generates the corresponding pyramid-shaped numerical pattern outlined below, but also validates the input integer 'm' for any abnormal entries such as negative integers, decimals, strings, or special characters. The software should return an error message for invalid entries.","solution":"def generate_pyramid(m): Generates a pyramid-shaped numerical pattern based on input m. Also validates the input for any abnormal entries. Args: m (int): the number of rows. Returns: list: a list of strings representing the pyramid. str: error message in case of invalid input. if not isinstance(m, int): return \\"Invalid input: Input should be an integer.\\" if m <= 0: return \\"Invalid input: Input should be a positive integer.\\" pyramid = [] for i in range(1, m+1): # Space padding for center alignment spaces = ' ' * (m - i) # Numerical pattern for the current row numbers = ' '.join(str(i) * i) # Forming the complete row and appending to the list pyramid.append(spaces + numbers) return pyramid"},{"question":"Create a Python program that reads a text file, counts the number of words in it, and outputs the result.","solution":"def count_words_in_file(file_path): Counts the number of words in the provided text file. :param file_path: Path to the text file. :return: Number of words in the text file. with open(file_path, 'r') as file: content = file.read() words = content.split() return len(words)"},{"question":"Write a program that determines the frequency of each word in a given paragraph. In addition to this, your program should also identify and count the frequency of unique pairs of adjacent words (bigrams). The program must be case-insensitive, disregard punctuation, and properly handle multiple spaces between words.","solution":"import re from collections import Counter def word_and_bigram_frequency(paragraph): Returns the frequency of each word and unique pair of adjacent words (bigrams) in the given paragraph. The function ignores case and punctuations and handles multiple spaces appropriately. # Removing punctuations and making all text lower case paragraph = re.sub(r'[^ws]', '', paragraph).lower() # Splitting the paragraph into words words = paragraph.split() # Calculate word frequency word_freq = Counter(words) # Calculate bigram frequency bigrams = zip(words, words[1:]) bigram_list = [\\" \\".join(bigram) for bigram in bigrams] bigram_freq = Counter(bigram_list) return word_freq, bigram_freq"},{"question":"Create a python class with a method that takes two integer arguments and returns their sum.","solution":"class MathOperations: A class that contains mathematical operations. @staticmethod def sum(a, b): Returns the sum of a and b. return a + b"},{"question":"Construct a piece of code that, upon receiving a string input, will not only identify and isolate the rarest occurring character, but also accurately provide its frequency in the context of the entire string. The specific string to analyze is \\"programmingisfun\\".","solution":"def rarest_char_frequency(s): Returns the rarest occurring character and its frequency in the string s. Parameters: s (str): Input string Returns: tuple: Rarest character and its frequency from collections import Counter counter = Counter(s) if not counter: return (None, 0) rarest_char = min(counter, key=counter.get) return (rarest_char, counter[rarest_char])"},{"question":"Create a Python program to generate a random password with lower case, upper case, special characters, and numbers.","solution":"import random import string def generate_password(length=12): Generates a random password containing upper case, lower case, digits, and special characters. Args: length (int): Length of the password to be generated. Default is 12 characters. Returns: str: The generated password. if length < 4: raise ValueError(\\"Password length should be at least 4 characters to include all character types.\\") characters = ( string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation ) password = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(string.punctuation) ] password += random.choices(characters, k=length-4) random.shuffle(password) return ''.join(password)"},{"question":"Generate a Python function that takes two integers as input and returns the sum of the two numbers. The function should also print the sum using the print statement. What is the correct code implementation for this function?","solution":"def add_and_print(a, b): Returns the sum of a and b and prints the sum. result = a + b print(result) return result"},{"question":"Given two variables p and q, create a function to swap their values without using a temporary variable.","solution":"def swap_values(p, q): Swaps the values of p and q without using a temporary variable. p, q = q, p return p, q"},{"question":"Given a list of strings, write a Python program to find the longest string in the list which is also a palindrome.","solution":"def longest_palindromic_string(strings): Returns the longest palindromic string in the list. If there are multiple palindromic strings of the same length, returns the one that appears first. If there are no palindromic strings, returns an empty string. def is_palindrome(s): return s == s[::-1] longest_palindrome = \\"\\" for s in strings: if is_palindrome(s) and len(s) > len(longest_palindrome): longest_palindrome = s return longest_palindrome"},{"question":"Write a python program to check if a string is a substring of another string","solution":"def is_substring(s, sub): Checks if \`sub\` is a substring of \`s\`. return sub in s"},{"question":"I'm trying to automate some data processing tasks using Python. I have a list of JSON files, and I need to read data from them based on a specific keyword. The keyword is \\"Price\\". Can you help me write a Python function that can do this? Also, I want to write all the matching data to another JSON file.","solution":"import json import os def read_and_filter_json_files(json_files, keyword): Reads data from a list of JSON files and filters out entries based on a specific keyword. Writes the matching data to another JSON file. :param json_files: List of paths to JSON files. :param keyword: Keyword to filter JSON entries by. :return: List of filtered data entries. filtered_data = [] for file in json_files: with open(file, 'r') as json_file: data = json.load(json_file) filtered_data.extend([entry for entry in data if keyword in entry]) # Writing the matching data to another JSON file with open('filtered_data.json', 'w') as outfile: json.dump(filtered_data, outfile, indent=4) return filtered_data"},{"question":"I want to create a program that analyzes vocabulary usage in a given text. Specifically, I want to identify the top n most frequent words, excluding common stop words like \\"the\\" and \\"and\\". Can you help me with the Python code for this?","solution":"from collections import Counter import re def get_top_n_frequent_words(text, n, stop_words): Returns the top n most frequent words in the text, excluding the stop words. Parameters: text (str): The input text to analyze. n (int): The number of top frequent words to return. stop_words (set): A set of common stop words to exclude. Returns: list: A list of tuples containing the top n frequent words and their counts. # Convert text to lowercase and use regex to extract words only words = re.findall(r'bw+b', text.lower()) # Filter out stop words filtered_words = [word for word in words if word not in stop_words] # Count word frequencies word_counts = Counter(filtered_words) # Get the top n most frequent words most_common_words = word_counts.most_common(n) return most_common_words"},{"question":"Write a program to calculate the sum of natural numbers up to n using recursion. Your answer should be in Python and you should include a check function to test your code with the following inputs: 5, 10, 20","solution":"def sum_of_natural_numbers(n): Returns the sum of natural numbers up to n using recursion. if n <= 0: return 0 return n + sum_of_natural_numbers(n-1)"},{"question":"Develop a Python code that not only generates the initial 10 numbers in the Fibonacci sequence but also includes functionality to generate the sequence up to n numbers. It should further display these in a well-formatted readable string format, and implement error checking for boundary and input conditions.","solution":"def fibonacci_sequence(n): Generate Fibonacci sequence up to n numbers. Returns a well-formatted readable string of the sequence. if not isinstance(n, int): return \\"Input must be an integer.\\" if n <= 0: return \\"Input must be a positive integer.\\" sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return ', '.join(map(str, sequence[:n]))"},{"question":"Modify the code below to create a new function called \\"addSquares()\\" that adds the squares of two numbers and returns the result. The function should only accept positive integers as input and throw an error message if any other data type or negative integers are passed as arguments.","solution":"def addSquares(a, b): Returns the sum of the squares of a and b. Only accepts positive integers as input. Throws an error message if any other data type or negative integers are passed as arguments. if not (isinstance(a, int) and isinstance(b, int)): raise ValueError(\\"Both arguments must be integers.\\") if a <= 0 or b <= 0: raise ValueError(\\"Both arguments must be positive integers.\\") return a**2 + b**2"},{"question":"Given an integer array, write a function that rearranges the array such that all even numbers precede all odd numbers. You must solve this problem in-place with O(1) memory, excluding the input array, and avoid modifying the relative order of the even and odd numbers at even and odd indices, respectively.","solution":"def rearrange_even_odd(arr): Rearranges the array such that all even numbers precede all odd numbers. This solution maintains the relative order of even and odd numbers. if len(arr) in [0, 1]: return arr even_index = 0 # Traverse the array and move even elements to correct position for current in range(len(arr)): if arr[current] % 2 == 0: arr.insert(even_index, arr.pop(current)) even_index += 1 return arr"},{"question":"Assume you are to write a program to calculate the similarity between two strings. How will you define the similarity score for two strings and implement the calculation using only fundamental Python constructs? Additionally, write code for a function that uses this similarity function and tests it on a predefined set of string pairs.","solution":"def string_similarity(str1, str2): Calculate the similarity score between two strings based on the number of matching characters at the same positions. # Get the length of the shortest string min_length = min(len(str1), len(str2)) # Initialize the score score = 0 # Compare characters at the same positions for i in range(min_length): if str1[i] == str2[i]: score += 1 # The score is the number of matching characters at the same positions return score"},{"question":"Write a python function to calculate the exponent of a given number with a given power, without using the built-in exponentiation operator (**) or any other mathematical library functions that calculate powers. Additionally, the function should handle negative powers correctly.","solution":"def exponent(base, power): Calculates the exponent of a given number \`base\` raised to the given \`power\`. Handles both positive and negative powers. result = 1 abs_power = abs(power) for _ in range(abs_power): result *= base if power < 0: result = 1 / result return result"},{"question":"How does one fill a 3x3 matrix with the first 9 prime numbers in Python?","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def fill_matrix_with_primes(): Fill a 3x3 matrix with the first 9 prime numbers. primes = [] num = 2 while len(primes) < 9: if is_prime(num): primes.append(num) num += 1 matrix = [primes[i:i + 3] for i in range(0, 9, 3)] return matrix"},{"question":"How can I search an element in an array using the binary search algorithm in Python?","solution":"def binary_search(arr, target): Conducts a binary search to determine if target is in the sorted array arr. Parameters: arr (list): A sorted list of elements to search through. target (any): The element to search for within arr. Returns: int: The index of target in arr if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given a list, write a Python program to find the second largest number in the list. Additionally, ensure that your program also checks for duplicates, and returns the distinct second largest number. For example, given the list \`[10, 50, 30, 20, 50]\`, your program should return \`30\`, not \`50\`.","solution":"def second_largest_number(lst): Returns the second largest distinct number from the list. if len(lst) < 2: raise ValueError(\\"List must contain at least two distinct numbers.\\") # Remove duplicates and sort in descending order unique_sorted = sorted(set(lst), reverse=True) if len(unique_sorted) < 2: raise ValueError(\\"List must contain at least two distinct numbers.\\") return unique_sorted[1]"},{"question":"Write a Python program to find the largest and second largest numbers in a list and their positions. Ensure your program can handle a list of any length, provided it has at least two distinct elements. Also, identify and fix any potential issues in the given erroneous code snippet.","solution":"def find_largest_and_second_largest(numbers): This function returns the largest and second largest numbers in a list, along with their positions. :param numbers: List of integers with at least two distinct elements :return: A tuple containing (largest_value, largest_index, second_largest_value, second_largest_index) if len(numbers) < 2: raise ValueError(\\"The list must contain at least two distinct elements\\") # Initialize the first two distinct elements if numbers[0] != numbers[1]: if numbers[0] > numbers[1]: largest = (numbers[0], 0) second_largest = (numbers[1], 1) else: largest = (numbers[1], 1) second_largest = (numbers[0], 0) else: # Edge case when the first two elements are same. Look for distinct elements in the list. unique_elements = list(set(numbers)) if len(unique_elements) < 2: raise ValueError(\\"The list must contain at least two distinct elements\\") unique_elements.sort(reverse=True) largest = (unique_elements[0], numbers.index(unique_elements[0])) second_largest = (unique_elements[1], numbers.index(unique_elements[1])) # Iterate the rest of the list to find the largest and second largest values for idx in range(2, len(numbers)): if numbers[idx] > largest[0]: second_largest = largest largest = (numbers[idx], idx) elif numbers[idx] > second_largest[0] and numbers[idx] != largest[0]: second_largest = (numbers[idx], idx) return largest[0], largest[1], second_largest[0], second_largest[1]"},{"question":"In the context of a machine learning project where we're utilizing Python and the pandas library for data preprocessing, we've encountered a significant challenge. We have a pandas DataFrame that includes a mixed data type under the column name \\"Attributes\\". Here, values could either be a string representation of a list or a positive integer. The objective is to split these stringified lists into separate entities and convert them into integers, while all positive integers remain unchanged. However, the presence of these integers within the list creates complications, as they must be preserved as elements of the list when the split operation is applied. Could you guide us on how to effectively handle this situation by providing code that performs this operation seamlessly?","solution":"import pandas as pd import ast def preprocess_attributes_column(df, column_name=\\"Attributes\\"): Preprocess the 'Attributes' column in the given DataFrame. Parameters: df (pd.DataFrame): The DataFrame containing the 'Attributes' column. column_name (str): The name of the column to preprocess. Default is \\"Attributes\\". Returns: pd.DataFrame: The DataFrame with the preprocessed 'Attributes' column. def preprocess_value(value): if isinstance(value, str): # Try to convert the string representation of list to actual list try: return list(map(int, ast.literal_eval(value))) except (ValueError, SyntaxError): # In case of invalid list representation, treat it as a standalone string return [value] elif isinstance(value, int): # If value is already an integer, put it in a list return [value] else: # In case of unexpected type, we handle it gracefully return [] df[column_name] = df[column_name].apply(preprocess_value) return df"},{"question":"I am new to programming. I want to create a program for a contest. The task is to find an element that appears only once in an array where every other element appears twice. How can I do that using Python?","solution":"def find_unique_element(arr): Returns the element that appears only once in an array where every other element appears twice. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Using a while loop in python structure a program that prints all the even numbers from a list of random maximum 50 numbers. Ensure to include exception handling for any potential errors.","solution":"import random def print_even_numbers_from_random_list(): Generate a list of up to 50 random integers and print all the even numbers. try: # Generate a random list of numbers (between 1 and 100) random_list = random.sample(range(1, 101), random.randint(1, 50)) index = 0 while index < len(random_list): if random_list[index] % 2 == 0: print(random_list[index]) index += 1 except Exception as e: print(f\\"An error occurred: {e}\\") # For testing purposes, we can directly call the function print_even_numbers_from_random_list()"},{"question":"How can I write a Python program to generate random recipes based on a list of ingredients and meal categories? The program should be able to take a user input for the desired meal category (breakfast, lunch, dinner, or dessert) and a list of available ingredients, then return a recipe idea. The recipe idea should also include a randomly generated quantity for each ingredient, as well as a randomly generated cooking method and time.","solution":"import random def generate_recipe(meal_category, ingredients): Generates a random recipe based on the meal category and list of available ingredients. Args: meal_category (str): The category of the meal (e.g., breakfast, lunch, dinner, dessert). ingredients (list): A list of available ingredients. Returns: dict: A dictionary containing the recipe name, ingredients with quantities, cooking method, and cooking time. meal_categories = [\\"breakfast\\", \\"lunch\\", \\"dinner\\", \\"dessert\\"] cooking_methods = [\\"bake\\", \\"fry\\", \\"grill\\", \\"boil\\", \\"steam\\", \\"roast\\", \\"microwave\\"] if meal_category not in meal_categories: raise ValueError(\\"Invalid meal category. Choose from 'breakfast', 'lunch', 'dinner', or 'dessert'.\\") if not ingredients: raise ValueError(\\"Ingredients list cannot be empty.\\") recipe_name = f\\"Random {meal_category.capitalize()} Recipe\\" random_ingredients = random.sample(ingredients, min(len(ingredients), random.randint(2, 5))) ingredient_quantities = {ingredient: f\\"{random.randint(1, 500)}g\\" for ingredient in random_ingredients} cooking_method = random.choice(cooking_methods) cooking_time = f\\"{random.randint(10, 60)} minutes\\" recipe = { \\"recipe_name\\": recipe_name, \\"ingredients\\": ingredient_quantities, \\"cooking_method\\": cooking_method, \\"cooking_time\\": cooking_time } return recipe"},{"question":"Write a Python program for finding the shortest path between two nodes in an unweighted graph using the Breadth-First Search (BFS) algorithm.","solution":"from collections import deque def bfs_shortest_path(graph, start, goal): Returns the shortest path between start and goal node in an unweighted graph using BFS algorithm. If there's no path, returns an empty list. # Initialize the queue with the starting node and the path taken so far as a list containing the start node queue = deque([(start, [start])]) # Set to keep track of visited nodes visited = set() while queue: # Get the front node in the queue and the path so far current_node, path = queue.popleft() # If we reached the goal node, return the path if current_node == goal: return path # Mark the current node as visited if current_node not in visited: visited.add(current_node) # Add neighbors to the queue with the updated path for neighbor in graph.get(current_node, []): if neighbor not in visited: queue.append((neighbor, path + [neighbor])) # If there's no path from start to goal return []"},{"question":"Develop a function in Python for computing the cross product of two 3D vectors. Additionally, extend this function to compute the cross product of two vectors where the dimensions can be n. Note that for dimensions greater than three, the concept of cross product is not defined, hence in such cases the function should return an error message.","solution":"def cross_product_3d(v1, v2): Returns the cross product of two 3D vectors. Parameters: v1 (list or tuple): A 3D vector. v2 (list or tuple): A 3D vector. Returns: list: A 3D vector representing the cross product of v1 and v2. if len(v1) != 3 or len(v2) != 3: raise ValueError(\\"Both vectors must have exactly 3 dimensions\\") cx = v1[1] * v2[2] - v1[2] * v2[1] cy = v1[2] * v2[0] - v1[0] * v2[2] cz = v1[0] * v2[1] - v1[1] * v2[0] return [cx, cy, cz] def cross_product(v1, v2): Returns the cross product of two vectors if they are 3D vectors. Otherwise, returns an error message for other dimensions. Parameters: v1 (list or tuple): A vector. v2 (list or tuple): A vector. Returns: list or str: A 3D vector representing the cross product of v1 and v2 if both are 3D vectors. An error message if the vectors are not 3D. if len(v1) == 3 and len(v2) == 3: return cross_product_3d(v1, v2) else: return \\"Error: Cross product is only defined for 3D vectors\\""},{"question":"Create a function that takes an array of integers as input. This function should iterate over the array and add the odd numbers to one list and even numbers to another. In addition, return a tuple of these two lists. Handle possible exceptions that might occur such as encountering a non-integer type in the array.","solution":"def separate_odd_even(arr): Takes an array of integers and returns a tuple of two lists: one containing odd numbers and the other containing even numbers. Parameters: arr (list): The input array of integers Returns: tuple: A tuple containing two lists - (odd_numbers, even_numbers) Raises: ValueError: If any element in the array is not an integer odd_numbers = [] even_numbers = [] for item in arr: if not isinstance(item, int): raise ValueError(f\\"Non-integer value encountered: {item}\\") if item % 2 == 0: even_numbers.append(item) else: odd_numbers.append(item) return (odd_numbers, even_numbers)"},{"question":"Complete the following code snippet by defining a function \\"validate\\" that takes a parameter \\"document\\". The function should return the sum of all numbers in the \\"grades\\" list inside the \\"student\\" dictionary, but only if the numbers are even, greater than 20, and are not divisible by 5. If the \\"grades\\" list is empty, return 0.","solution":"def validate(document): Returns the sum of all even numbers greater than 20 that are not divisible by 5 in the 'grades' list inside the 'student' dictionary of the 'document'. student = document.get(\\"student\\", {}) grades = student.get(\\"grades\\", []) if not grades: return 0 return sum(grade for grade in grades if grade > 20 and grade % 2 == 0 and grade % 5 != 0)"},{"question":"In Python, implement a binary search algorithm to find a given element in a list of sorted numbers. The search should be able to identify more than one index if the element appears more than once. If the element is found, return a list of indices. If it is not found, return an empty list. Consider optimizing your code for time complexity.","solution":"def binary_search(arr, target): left, right = 0, len(arr) - 1 indices = [] # Binary search to find the target element while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: indices.append(mid) # Search for duplicates on the left side l = mid - 1 while l >= 0 and arr[l] == target: indices.append(l) l -= 1 # Search for duplicates on the right side r = mid + 1 while r < len(arr) and arr[r] == target: indices.append(r) r += 1 break elif arr[mid] < target: left = mid + 1 else: right = mid - 1 indices.sort() # Make sure indices are in the correct order return indices"},{"question":"Generate an efficient algorithm for finding the longest common prefix in an array of strings.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Start by assuming the whole first string is the common prefix prefix = strs[0] for string in strs[1:]: while string[:len(prefix)] != prefix: # Reduce the prefix by one character at a time prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Design a python function that can receive a dictionary as input, where each key-value pair represents a name and its frequency. The function's responsibility is to construct a list that contains the names repeated according to their corresponding frequency. However, instead of doing this in ascending order, the names should appear in the list in the reverse order of their frequency, starting from the highest frequency. Additionally, for names with the same frequency, they should be ordered alphabetically.","solution":"def names_by_frequency(data): Given a dictionary where keys are names and values are frequencies, returns a list of names repeated according to their frequency, ordered first by descending frequency and then alphabetically for names with the same frequency. # Create a list of tuples (name, frequency) and sort it sorted_data = sorted(data.items(), key=lambda x: (-x[1], x[0])) # Generate the result list based on frequencies result = [] for name, freq in sorted_data: result.extend([name] * freq) return result"},{"question":"Write a Python function to address the 0/0 or divide by zero problem while calculating the quotient of two given integers. In addition, incorporate a functionality to round the result to the nearest integer if the answer is not a whole number. Assume only non-negative numbers as inputs.","solution":"def safe_divide(a, b): Returns the quotient of a and b. If b is zero, it returns 'undefined'. Rounds the result to the nearest integer if the answer is not a whole number. if b == 0: return 'undefined' result = a / b return round(result)"},{"question":"Create a python script that checks if a number is even, and if it is, print out the number and also calculate and print its factorial. For the purpose of this question, assume that the number will always be a positive integer.","solution":"import math def check_even_and_factorial(n): Checks if a number is even, if it is, prints the number and its factorial. Returns a tuple (is_even, factorial). if n % 2 == 0: factorial = math.factorial(n) print(f\\"{n} is even. Factorial: {factorial}\\") return (True, factorial) else: print(f\\"{n} is not even.\\") return (False, None)"},{"question":"Create a python program that determines the amount of odd numbers in a multi-dimensional list and also returns the sum of all the odd numbers.","solution":"def count_and_sum_odd_numbers(matrix): Counts the number of odd numbers in a multi-dimensional list (matrix) and returns the sum of all the odd numbers. Args: matrix (list of lists): The multi-dimensional list to process. Returns: tuple: (count of odd numbers, sum of odd numbers) odd_count = 0 odd_sum = 0 for row in matrix: for num in row: if num % 2 != 0: odd_count += 1 odd_sum += num return odd_count, odd_sum"},{"question":"Develop a program script that not only extracts the fully qualified domain name (FQDN) from an email address, but also validates the email and domain in relation to a provided list of acceptable domains and email formats. The program should reject any email that doesn't have a professional format (i.e., it should only accept emails that have a structure similar to \\"name.lastname@domain.com\\").","solution":"import re acceptable_domains = [\\"example.com\\", \\"domain.com\\"] def extract_fqdn(email): Extracts the FQDN from a valid email address if it matches the professional format. A valid email is defined as one that matches the pattern 'name.lastname@domain.com'. :param email: The input email address to be validated and processed. :return: The FQDN if the email is valid and matches the acceptable domain; otherwise, None. pattern = re.compile(r\\"^[a-zA-Z]+.[a-zA-Z]+@([a-zA-Z]+.[a-zA-Z]+)\\") match = pattern.match(email) if match: fqdn = match.group(1) if fqdn in acceptable_domains: return fqdn return None"},{"question":"Create a recursive function in Python that traverses a given directory and its subdirectories, and counts the number of Python files that have a specific word in their name. The function should take two arguments: the directory path and the specific word to search for.","solution":"import os def count_python_files_with_word(directory, word): Recursively traverses a directory and counts the number of Python files that have a specific word in their names. Args: directory (str): The path to the directory to traverse. word (str): The specific word to search for in the Python file names. Returns: int: The count of Python files with the specific word in their names. count = 0 for root, dirs, files in os.walk(directory): for file in files: if file.endswith(\\".py\\") and word in file: count += 1 return count"},{"question":"Develop a Python script that finds and prints the largest and smallest number in a list of integers, along with their indices. Also, determine and print the average value of the list. If there are multiple occurrences of the smallest or largest number, print the index of the first occurrence.","solution":"def find_largest_smallest_average(numbers): Finds and returns the largest and smallest number and their indices in the list, along with the average value. Parameters: numbers (list) : A list of integers Returns: dict: A dictionary with largest number, index of largest number, smallest number, index of the smallest number, and average value of the list. if not numbers: return { \\"largest\\": None, \\"largest_index\\": None, \\"smallest\\": None, \\"smallest_index\\": None, \\"average\\": None } largest = max(numbers) smallest = min(numbers) largest_index = numbers.index(largest) smallest_index = numbers.index(smallest) average = sum(numbers) / len(numbers) return { \\"largest\\": largest, \\"largest_index\\": largest_index, \\"smallest\\": smallest, \\"smallest_index\\": smallest_index, \\"average\\": average }"},{"question":"Given two arrays of integers, merge them into a single array. Then implement the bubble sort algorithm to sort this new array. The algorithm must also detect duplicate values from the merge and must remove them during sorting.","solution":"def merge_and_sort_unique(arr1, arr2): Merges two arrays, sorts the new array using bubble sort, and removes any duplicate values. # Merging the two arrays merged_array = arr1 + arr2 # Removing duplicates by converting to a set and back to list merged_array = list(set(merged_array)) # Implementing bubble sort n = len(merged_array) for i in range(n): for j in range(0, n-i-1): if merged_array[j] > merged_array[j+1]: merged_array[j], merged_array[j+1] = merged_array[j+1], merged_array[j] return merged_array"},{"question":"Explain the time complexity of a binary search algorithm and how it compares to linear search. Also, write a code snippet for binary search algorithm to search for an element in a sorted array.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the index of the target value. Args: arr (list): A sorted list of elements. target (any): The element to search for in the array. Returns: int: The index of the target element if found, else -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes an array of integers as input and returns the array with the integers in reverse order. Ensure that the function does not modify the original array and does not use any built-in array reversing methods. Additionally, the function should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the input array.","solution":"def reverse_array(arr): Reverses the given array of integers without modifying the original array. The function does not use any built-in reversing methods. n = len(arr) reversed_arr = [0] * n # Create a new array of the same length for i in range(n): reversed_arr[i] = arr[n - 1 - i] return reversed_arr"},{"question":"Given a list of integers, write a function in Python to sort the list in ascending order with an additional constraint: you cannot use any built-in Python sorting methods or any additional sorting libraries.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function in Python which takes in a list of positive numbers and returns the sum of all numbers. However, the function should not use any built-in functions such as sum() or reduce(). Additionally, the function should be able to handle lists containing up to 10^6 numbers efficiently.","solution":"def custom_sum(numbers): Returns the sum of all positive numbers in the list \`numbers\`. total = 0 for number in numbers: total += number return total"},{"question":"Given the 2D list of integers, write a Python program to find and print all the unique pairs of numbers whose product equals a given target number. Note that the same pair of numbers should not be printed more than once, no matter the order of the integers.","solution":"def find_unique_pairs_with_product(matrix, target): Returns the list of unique pairs of numbers from the given 2D list whose product equals the target number. if not matrix: return [] pairs = set() seen = set() for row in matrix: for num in row: if num == 0 and target == 0: continue if num != 0 and target % num == 0: complement = target // num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return list(pairs)"},{"question":"Write a python snippet to sort the list x in decreasing order using bubble sort algorithm.","solution":"def bubble_sort_descending(x): Sorts the list x in decreasing order using the bubble sort algorithm. n = len(x) for i in range(n): # last i elements are already sorted for j in range(0, n-i-1): # Swap if the element found is less than the next element if x[j] < x[j+1]: x[j], x[j+1] = x[j+1], x[j] return x"},{"question":"Write a Python program to not only create a numerical addition table, but also include functionality for subtraction, multiplication, and division. The program should be able to handle potential division by zero errors effectively. It should print an error message when division by zero is attempted and should continue with other operations. The program should also validate the inputs to ensure only numeric values are processed.","solution":"def generate_tables(a, b): Generates addition, subtraction, multiplication, and division tables for numbers a and b. if not isinstance(a, (int, float)) or not isinstance(b, (int, float)): return \\"Error: Inputs must be numeric values.\\" result = {} # Addition result['addition'] = a + b # Subtraction result['subtraction'] = a - b # Multiplication result['multiplication'] = a * b # Division try: result['division'] = a / b except ZeroDivisionError: result['division'] = \\"Error: Division by zero.\\" return result"},{"question":"Write a python function to filter out all the prime numbers from a given list of integers. The function should also return the product of all the prime numbers in the list. If no prime number is found, return 0.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def filter_primes_and_product(nums): Filters out prime numbers from a given list of integers and returns the product of these primes. If no prime number is found, returns 0. primes = [n for n in nums if is_prime(n)] if not primes: return 0 product = 1 for prime in primes: product *= prime return product"},{"question":"Create a Python function named \\"is_leap_year\\" that takes an integer representing a year and returns True if it is a leap year, and False otherwise.","solution":"def is_leap_year(year): Determins if the given year is a leap year. A leap year is divisible by 4, but is not divisible by 100, unless it is also divisible by 400. Parameters: year (int): The year to be checked. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True else: return False"},{"question":"Write a Python code snippet to calculate the factorial of a given number using a loop.","solution":"def factorial(n): Returns the factorial of the given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Is there a way to convert a given array to a string using Python? I want the array elements to be separated by a specific delimiter. Can you provide an algorithm for this?","solution":"def array_to_string(array, delimiter): Converts a given array to a string with elements separated by the specified delimiter. Parameters: array (list): The list of elements to be joined into a string. delimiter (str): The string used to separate each element. Returns: str: A string with the array elements separated by the delimiter. return delimiter.join(map(str, array))"},{"question":"Write a function for removing duplicate values from an array, without using any built-in methods or data structures (such as sets or dictionaries) to store unique values.","solution":"def remove_duplicates(arr): Removes duplicate values from an array. Parameters: arr (list): The input list of numbers. Returns: list: The list with duplicates removed. result = [] for el in arr: if el not in result: result.append(el) return result"},{"question":"Given a JSON file containing a table, write a Python script to extract the table data and convert it to an XML file. You must include the handling of nested objects and arrays within the JSON file, and preserve any special characters or formatting within the table data during the conversion process.","solution":"import json import xml.etree.ElementTree as ET def json_to_xml(json_file, xml_file): Converts a JSON file containing a table to XML format. Handles nested objects and arrays within the JSON file, and preserves special characters or formatting. def build_xml_element(parent, dictionary): if isinstance(dictionary, dict): for key, value in dictionary.items(): sub_element = ET.SubElement(parent, key) build_xml_element(sub_element, value) elif isinstance(dictionary, list): for item in dictionary: sub_element = ET.SubElement(parent, \\"item\\") build_xml_element(sub_element, item) else: parent.text = str(dictionary) with open(json_file, 'r') as f: data = json.load(f) root = ET.Element('root') build_xml_element(root, data) tree = ET.ElementTree(root) tree.write(xml_file, encoding='utf-8', xml_declaration=True)"},{"question":"You are to write a python function that takes a list of numbers as argument. Your functions is to find the maximum number from the list, but here is the twist: You can not use any built-in functions, libraries, or methods (such as max()) in your solution. Your function should return the maximum number found in the list.","solution":"def find_max(numbers): Returns the maximum number in a list without using any built-in functions, libraries, or methods. if not numbers: raise ValueError(\\"The list is empty\\") max_number = numbers[0] for number in numbers[1:]: if number > max_number: max_number = number return max_number"},{"question":"Devise a Python algorithm that not only locates the maximal numerical element within an array, but also figures out the index of this element in the list. The program should also handle negative numbers and zeroes. If the maximum number appears multiple times, return all of its indices. Additionally, the program needs to demonstrate efficiency and should have adequate error handling in case the list provided is empty.","solution":"def find_max_elements(arr): Finds the maximum element in the array and returns a list of indices of this element. If the array is empty, an appropriate message is returned. if not arr: return \\"The list is empty. Please provide a non-empty list.\\" max_value = max(arr) max_indices = [i for i, x in enumerate(arr) if x == max_value] return max_value, max_indices"},{"question":"In Python, write a function that takes a list as the input, and prints the elements of the list in reverse order. Additionally, the function should handle cases where the input list contains nested lists by flattening them before reversing the elements.","solution":"def flatten_and_reverse(lst): Flattens a nested list and prints the elements in reverse order. def flatten(nested_lst): flat_list = [] for item in nested_lst: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list flattened_list = flatten(lst) reversed_list = flattened_list[::-1] print(reversed_list)"},{"question":"Create a function that sums up the value of all elements in a nested dictionary. The dictionary can have an arbitrary number of levels of nesting, and the values can be either integers or other nested dictionaries. The function should handle circular references (where a dictionary references itself) and avoid counting the values of circular references multiple times.","solution":"def sum_nested_dict(d, visited=None): Sums up the value of all elements in a nested dictionary. Handles circular references by avoiding counting values multiple times. :param d: Dictionary with arbitrary levels of nesting containing integers and other dictionaries. :param visited: Set of visited object ids to avoid circular references. :return: Sum of all integer values in the nested dictionary. if visited is None: visited = set() total_sum = 0 obj_id = id(d) if obj_id in visited: return 0 visited.add(obj_id) for key, value in d.items(): if isinstance(value, dict): total_sum += sum_nested_dict(value, visited) elif isinstance(value, int): total_sum += value visited.remove(obj_id) return total_sum"},{"question":"Use the following piece of erroneous code as a reference and write a program to sort a given array of integers. Additionally, provide an analysis of the complexity of your solution in terms of time and space.","solution":"def sort_array(arr): Sorts the given array of integers in ascending order using the built-in sorted function. Time Complexity: O(n log n), where n is the number of elements in the array. Space Complexity: O(n) due to the storage required for the sorted output. return sorted(arr) # Example usage: # sorted_array = sort_array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) # print(sorted_array) # Output should be [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]"},{"question":"Write a Python script to merge two Python dictionaries. Additionally, the merged dictionary should update the values of common keys with the sum of the values from both dictionaries. Further, write a function to handle possible exceptions during the merging process.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries, updating the values of common keys with the sum of the values from both dictionaries. try: merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value return merged_dict except Exception as e: print(f\\"An error occurred: {e}\\") return None"},{"question":"Develop a regex pattern to extract all URLs from a given paragraph of text. Now, further refine the pattern to exclude URLs that contain specific substrings or patterns, such as \\"ad\\", \\"banner\\", or \\"affiliate\\". Additionally, write a function that validates the extracted URLs, ensuring they are active and return HTTP status code 200.","solution":"import re import requests def extract_urls(text): Extracts all URLs from the given paragraph of text, excluding URLs that contain specific substrings such as 'ad', 'banner', or 'affiliate'. # Regex pattern to match URLs url_pattern = re.compile(r'https?://(?:[-w.]|(?:%[da-fA-F]{2}))+') # Exclude URLs with specific substrings exclude_substrings = ['ad', 'banner', 'affiliate'] # Find all matching URLs urls = url_pattern.findall(text) # Filter out URLs containing the exclude substrings filtered_urls = [url for url in urls if not any(sub in url for sub in exclude_substrings)] return filtered_urls def validate_url(url): Validates the extracted URL to ensure it is active and returns HTTP status code 200. try: response = requests.head(url) return response.status_code == 200 except requests.RequestException: return False # Additional function to validate a list of URLs, returning only valid ones def validate_urls(urls): Validates a list of URLs, returning only those that are active and return HTTP status code 200. valid_urls = [url for url in urls if validate_url(url)] return valid_urls"},{"question":"Given an array of strings containing full names, implement a Python function to extract and return the first names only. Now, the full names might have more than one name before the last name, such as \\"Barack Hussein Obama\\" or \\"Emma Rose Watson\\". These first names are separated by spaces.","solution":"def extract_first_names(full_names): Given an array of strings containing full names, extract and return the first names only. Args: full_names (list): A list of strings, where each string is a full name. Returns: list: A list of first names extracted from the full names. first_names = [] for full_name in full_names: names_split = full_name.split() if names_split: first_names.append(names_split[0]) return first_names"},{"question":"Write a function to sort a list of dictionaries based on a specific key in each dictionary. The function should take a list of dictionaries as an input, where each dictionary contains information about a book, including its title, author, and publication year. The function should also take a string as an input to specify which key to sort the dictionaries by. The function should return a new list of dictionaries sorted by the values of the specified key, from oldest to newest if the key is \\"publication_year\\", from A-Z if the key is \\"author\\", and from A-Z if the key is \\"title\\". If the specified key is not found in one of the dictionaries, that dictionary should be placed at the end of the sorted list.","solution":"def sort_books(books, key): Sorts a list of dictionaries based on a specific key. Parameters: books (list): List of dictionaries containing information about books. key (str): The key to sort the dictionaries by. Returns: list: A new list of dictionaries sorted by the specified key. def sort_key(book): return book.get(key, float('inf') if key == 'publication_year' else '') return sorted(books, key=sort_key)"},{"question":"Write a code to search a list of integers and print the index of the first matched item. The list may contain duplicate values. Find the index of the first occurrence of the target integer. If the target integer does not exist in the list, print -1. The code should have a time complexity of O(n) and should not use any built-in search functions or libraries. Additionally, the code should not use any additional data structures and should only use a constant amount of extra space. nums=[4, 7, 1, 2, 5, 7], target=7","solution":"def search_first_occurrence(nums, target): Returns the index of the first occurrence of target in nums. If the target is not found, return -1. for index in range(len(nums)): if nums[index] == target: return index return -1"},{"question":"Write a PEP8-compliant Python program that accepts two alphanumeric strings as input. Your program should not only compare if those strings are anagrams to each other ignoring the spaces and special characters, but also include a feature of timing your code execution. Add proper exception handling to manage any potential errors related to input types or values. Use a functionality of a function to separate the logic of your anagram check.","solution":"import re import time def clean_string(s): Cleans the input string by removing non-alphanumeric characters and converting to lowercase. return re.sub(r'W+', '', s).lower() def are_anagrams(s1, s2): Checks whether two strings are anagrams of each other, ignoring spaces and special characters. cleaned_s1 = clean_string(s1) cleaned_s2 = clean_string(s2) return sorted(cleaned_s1) == sorted(cleaned_s2) def main(s1, s2): Main function to check if two strings are anagrams and measure the execution time. try: start_time = time.time() if are_anagrams(s1, s2): result = \\"The strings are anagrams.\\" else: result = \\"The strings are not anagrams.\\" end_time = time.time() elapsed_time = end_time - start_time return result, elapsed_time except Exception as e: return f\\"An error occurred: {e}\\", None"},{"question":"Write a code snippet for generating a random number between 1 and 100, but the generated number should not be divisible by any prime number between 2 and 10. Additionally, the code should also check if the generated number is a perfect square and if so, it should generate a new number until a non-perfect square is generated.","solution":"import random import math def is_not_divisible_by_primes(num): for prime in [2, 3, 5, 7]: if num % prime == 0: return False return True def generate_number(): while True: num = random.randint(1, 100) if is_not_divisible_by_primes(num) and not math.isqrt(num) ** 2 == num: return num # Example usage: # result = generate_number() # print(result) # This would give a number meeting the criteria"},{"question":"Write a Python function that calculates the sum of all the numbers in a nested list using recursion. The function should handle lists nested at any depth.","solution":"def recursive_sum(nested_list): Returns the sum of all numbers in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += recursive_sum(element) else: total += element return total"},{"question":"Given the array x = [1, 2, 3, 2, 1], design a Python algorithm that computes not only the longest continuous increasing subsequence (LCIS) but also the longest continuous decreasing subsequence (LDIS). Your function should output both the LCIS and LDIS, their lengths, and their respective starting and ending indices in the original array.","solution":"def find_sequences(arr): Finds the longest continuous increasing and decreasing subsequences in an array. Parameters: arr (list): The input array of integers. Returns: dict: A dictionary with details of LCIS and LDIS, including their lengths, starting and ending indices in the original array. if not arr: return {'LCIS': ([], 0, -1, -1), 'LDIS': ([], 0, -1, -1)} n = len(arr) # LCIS max_inc_len = 1 inc_len = 1 inc_start = 0 max_inc_start = 0 for i in range(1, n): if arr[i] > arr[i-1]: inc_len += 1 if inc_len > max_inc_len: max_inc_len = inc_len max_inc_start = inc_start else: inc_len = 1 inc_start = i LCIS = arr[max_inc_start:max_inc_start+max_inc_len] LCIS_info = (LCIS, max_inc_len, max_inc_start, max_inc_start+max_inc_len-1) # LDIS max_dec_len = 1 dec_len = 1 dec_start = 0 max_dec_start = 0 for i in range(1, n): if arr[i] < arr[i-1]: dec_len += 1 if dec_len > max_dec_len: max_dec_len = dec_len max_dec_start = dec_start else: dec_len = 1 dec_start = i LDIS = arr[max_dec_start:max_dec_start+max_dec_len] LDIS_info = (LDIS, max_dec_len, max_dec_start, max_dec_start+max_dec_len-1) return {'LCIS': LCIS_info, 'LDIS': LDIS_info} # Example usage: # x = [1, 2, 3, 2, 1] # Output: {'LCIS': ([1, 2, 3], 3, 0, 2), 'LDIS': ([3, 2, 1], 3, 2, 4)}"},{"question":"Definition of a \\"call function\\" in Python. Additionally, explain the difference between call by value and call by reference in functions and demonstrate with a code snippet.","solution":"# Definition of a \\"call function\\" in Python def sample_function(param1, param2): This is a sample function that takes two parameters and returns their sum. return param1 + param2 # Difference between call by value and call by reference in functions: # Python uses a mechanism known as 'Call by Object Reference' or 'Call by Sharing'. # In this model, the reference to the object is passed by value. # Demonstration: def modify_list(lst): Modifies the first element of the passed list to 99. This demonstrates call by reference. lst[0] = 99 my_list = [1, 2, 3] modify_list(my_list) # my_list is now [99, 2, 3], showing that it was modified in place. def modify_integer(x): Attempts to modify the integer to 99. This demonstrates reassigning within a function does not affect the caller, resembling call by value. x = 99 return x my_int = 10 new_int = modify_integer(my_int) # my_int remains 10, showing that it was not modified outside the function. # new_int is 99"},{"question":"I am using YOLOv7 to detect objects in real time. I have converted the model to a tflite version because I have an app which needs to detect objects on low powered devices. Outside of the objects it is supposed to detect it is detecting rectangles on the screen, the navigation via google maps in particular is heavily detected and so is the smartphone camera UI. How can I block the model from detecting those? The output of the model includes a list of detections with bounding boxes and I suppose I need to implement logic to eliminate these incoming detections based on some filter criteria.","solution":"def filter_detections(detections, unwanted_labels=None, unwanted_areas=None): Filters out unwanted detections from the list of detections. Arguments: detections : list of dicts Each dict contains the keys 'label' and 'bbox' (bounding box), which describes the detected object and its position. unwanted_labels : list of str, optional List of labels to filter out from the detections. unwanted_areas : list of dicts, optional Each dict contains the keys 'x', 'y', 'width', and 'height', which describes an area to filter out detections from. Returns: filtered_detections : list of dicts The detections filtered based on unwanted labels and areas. if unwanted_labels is None: unwanted_labels = [] if unwanted_areas is None: unwanted_areas = [] def is_in_unwanted_area(bbox, unwanted_areas): for area in unwanted_areas: if (bbox['x'] >= area['x'] and bbox['x'] + bbox['width'] <= area['width'] + area['x'] and bbox['y'] >= area['y'] and bbox['y'] + bbox['height'] <= area['height'] + area['y']): return True return False filtered_detections = [ det for det in detections if det['label'] not in unwanted_labels and not is_in_unwanted_area(det['bbox'], unwanted_areas) ] return filtered_detections"},{"question":"Please write a python script that will take a base and exponent as inputs, and implement recursion to calculate and return the result of raising the base to the power of the exponent. Test your function with several examples, including negative exponents and a base of 0 or 1.","solution":"def power(base, exponent): Calculates base raised to the power of exponent using recursion. # Base cases if exponent == 0: return 1 elif exponent > 0: return base * power(base, exponent - 1) else: return 1 / power(base, -exponent)"},{"question":"Write a code snippet to implement a recursive binary search algorithm in a sorted linked list. Additionally, consider the time and space complexity of your solution. Binary search is an efficient search algorithm that works by repeatedly dividing in half the portion of the list that could contain the item, until you've either found the item or the remaining portion is empty. Unfortunately, binary search is typically implemented on an array data structure due to its efficient O(1) indexing capabilities.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def get_middle_node(start, end): slow = fast = start while fast != end and fast.next != end: slow = slow.next fast = fast.next.next return slow def recursive_binary_search(start, end, target): if start is None or start == end: return None mid_node = get_middle_node(start, end) if mid_node.value == target: return mid_node elif mid_node.value < target: return recursive_binary_search(mid_node.next, end, target) else: return recursive_binary_search(start, mid_node, target) def sorted_linked_list_binary_search(head, target): return recursive_binary_search(head, None, target)"},{"question":"Can you assist me in designing a Python program that performs encryption and decryption using a Caesar Cipher?","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using Caesar Cipher encryption with the specified shift. Args: text (str): The text to be encrypted. shift (int): The number of positions to shift each character. Returns: str: The encrypted text. encrypted_text = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return ''.join(encrypted_text) def caesar_cipher_decrypt(text, shift): Decrypts the given text which was encrypted using Caesar Cipher encryption with the specified shift. Args: text (str): The text to be decrypted. shift (int): The number of positions to shift each character back. Returns: str: The decrypted text. return caesar_cipher_encrypt(text, -shift)"},{"question":"Rewrite the given recursive Python program as a loop, without using the built-in power function. The loop should only iterate a maximum of 100 times.","solution":"def power(x, n): if n == 0: return 1 result = 1 is_negative = False if n < 0: n = -n is_negative = True for _ in range(min(n, 100)): result *= x if is_negative: return 1 / result return result"},{"question":"Write a function that takes a list as a parameter and returns only the unique elements in the given list. You may not use any built-in functions or libraries to accomplish this task. Additionally, your solution should have a time complexity of O(n) and a space complexity of O(n), where n is the length of the input list.","solution":"def unique_elements(lst): Returns a list of unique elements from the input list. seen = {} unique_lst = [] for item in lst: if item not in seen: seen[item] = True unique_lst.append(item) return unique_lst"},{"question":"Write a python function to create a matrix of size 'n' x 'm' filled with zeros.","solution":"def create_zero_matrix(n, m): Creates a matrix of size n x m filled with zeros. Parameters: n (int): number of rows m (int): number of columns Returns: list of list of int: n x m matrix filled with zeros return [[0 for _ in range(m)] for _ in range(n)]"},{"question":"How to declare a two dimensional list in Python and initialize all the elements to 0? Also, write a function to update a specific element at given row and column indices, and another function to retrieve an element from the list at given row and column indices.","solution":"def initialize_2d_list(rows, cols, initial_value=0): Initializes a 2D list with given number of rows and columns, setting all entries to 'initial_value'. :param rows: Number of rows in the 2D list. :param cols: Number of columns in the 2D list. :param initial_value: The value to initialize each element of the list. Default is 0. :return: A 2D list. return [[initial_value for _ in range(cols)] for _ in range(rows)] def update_element(matrix, row, col, value): Updates the element at the specified row and column indices to the given value. :param matrix: The 2D list. :param row: The row index. :param col: The column index. :param value: The new value to set. matrix[row][col] = value def retrieve_element(matrix, row, col): Retrieves the element at the specified row and column indices. :param matrix: The 2D list. :param row: The row index. :param col: The column index. :return: The value at the specified row and column. return matrix[row][col]"},{"question":"Write a Python function that takes in a message as input and returns the number of characters in the message, excluding any leading or trailing whitespace. The function should also handle cases where the message is empty or contains only whitespace characters.","solution":"def count_characters(message): Returns the number of characters in the message, excluding any leading or trailing whitespace. if message is None or not isinstance(message, str): raise ValueError(\\"Invalid input, message must be a string\\") trimmed_message = message.strip() return len(trimmed_message)"},{"question":"Given a recursively nested JSON string, write a Python function to locate a specific key and return its value. The key to locate is \\"deeply_nested_key\\". Furthermore, make your solution robust to handle multiple levels of unexpected nesting.","solution":"def find_deeply_nested_key(data, key=\\"deeply_nested_key\\"): Recursively searches for the specified key in the nested dictionary and returns its value. Args: data (dict): The nested dictionary to search within. key (str): The key to search for. Defaults to 'deeply_nested_key'. Returns: The value corresponding to the specified key if found, otherwise None. if isinstance(data, dict): if key in data: return data[key] for k, v in data.items(): result = find_deeply_nested_key(v, key) if result is not None: return result elif isinstance(data, list): for item in data: result = find_deeply_nested_key(item, key) if result is not None: return result return None"},{"question":"Given the buggy recursive solution below for computing the Fibonacci numbers, identify and correct the errors to properly implement the solution. Additionally, enhance the function to return the n-th Fibonacci number as a float, and manage any potential errors or exceptions that may raise due to invalid inputs. Implement a memoization functionality to optimize the function if n is a large value. Remember, the Fibonacci sequence is uniquely defined by the terms, fib(0) = 0, fib(1) = 1, and fib(n) = fib(n-1) + fib(n-2) for n >= 2.","solution":"def fibonacci(n, memo={}): Returns the n-th Fibonacci number as a float. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n in memo: return memo[n] if n == 0: return 0.0 if n == 1: return 1.0 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Is there a way to write a program that can print the longest word from a given string? I would like to have a clear solution with code examples.","solution":"def longest_word(s): Returns the longest word in the given string s. If there are multiple words with the same length, the first one encountered is returned. words = s.split() if not words: return \\"\\" longest = words[0] for word in words[1:]: if len(word) > len(longest): longest = word return longest"},{"question":"Given a list of strings, write a Python function to find the strings with length at least 4 using filter() function.","solution":"def filter_strings(strings): Filters out strings with length less than 4 from the given list of strings. Args: strings (list): List of strings to be filtered. Returns: list: List containing strings with length at least 4. return list(filter(lambda x: len(x) >= 4, strings))"},{"question":"Write a python program that concatenates two strings. Additionally, the program should also implement a functionality where it can accept an optional integer argument which indicates how many times the concatenation should be repeated. If no argument is provided, the default should be one. Your code should be clear, efficient, and follow Python's PEP8 guidelines.","solution":"def concatenate_strings(s1, s2, repeat=1): Concatenates two strings and repeats the concatenation a given number of times. Parameters: s1 (str): The first string. s2 (str): The second string. repeat (int, optional): The number of times the concatenation should be repeated. Default is 1. Returns: str: The concatenated and repeated string. concatenated = s1 + s2 return concatenated * repeat"},{"question":"I am currently working on a Python project and I need to generate all the permutations of a given array of integers. Can you provide me with an optimized Python solution that includes importing necessary packages and a function to accomplish this task? Additionally, could you explain the code provided below, which seems to solve this problem? I am particularly interested in understanding the role of itertools.permutations and how the defined function utilizes this to generate permutations.","solution":"import itertools def generate_permutations(arr): Generate all permutations of the given array of integers. Parameters: arr (list): A list of integers. Returns: list: A list of tuples, where each tuple is a permutation of the array. return list(itertools.permutations(arr))"},{"question":"Write a program in Python that generates a specified number of prime numbers using the Sieve of Eratosthenes algorithm and prints them in a formatted way.","solution":"def sieve_of_eratosthenes(n): Generates the first n prime numbers using the Sieve of Eratosthenes algorithm. Parameters: n (int): The number of prime numbers to generate. Returns: list: A list of the first n prime numbers. if n < 1: return [] primes = [] number = 2 # The first prime number # An overestimation of the number of numbers we need to sieve through would be sufficient size = n * (n + 10) # Just an arbitrary larger number sieve = [True] * size for p in range(2, size): if sieve[p]: primes.append(p) if len(primes) == n: break for multiple in range(p * p, size, p): sieve[multiple] = False return primes"},{"question":"Modify the following code to output Odd numbers from 1 to 1000 that are prime numbers, with the condition that the prime numbers should also be palindrome numbers. Additionally, the program should only use a single loop and should not use any built-in functions for checking primality or palindromicity.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True def is_palindrome(n): Helper function to check if a number is a palindrome. str_n = str(n) return str_n == str_n[::-1] def odd_prime_palindromes(limit): Returns a list of odd prime palindrome numbers up to the given limit. result = [] for i in range(1, limit+1, 2): # Iterate through odd numbers only if is_prime(i) and is_palindrome(i): result.append(i) return result if __name__ == \\"__main__\\": primes = odd_prime_palindromes(1000) for number in primes: print(number)"},{"question":"Develop a Python function that can rotate the values of multiple variables in a list of tuples. Each tuple contains two variables. The function should also allow for list of tuples that have varying lengths and able to handle any exceptions gracefully. Additionally, include some flawed code that needs to be debugged as part of the problem.","solution":"def rotate_values(pairs): Rotates the values in a list of tuples. Each tuple contains two variables. If the list contains tuples of varying lengths, it should handle the exception gracefully. try: rotated = [(b, a) for a, b in pairs] return rotated except ValueError: print(\\"All tuples must have exactly 2 elements.\\") return pairs"},{"question":"Write a function to get the next day of a given date in Python.","solution":"from datetime import datetime, timedelta def get_next_day(date_str): Returns the next day of the given date. Parameters: date_str (str): The date string in the format 'YYYY-MM-DD' Returns: str: The date string of the next day in the format 'YYYY-MM-DD' date_format = \\"%Y-%m-%d\\" given_date = datetime.strptime(date_str, date_format) next_day = given_date + timedelta(days=1) return next_day.strftime(date_format)"},{"question":"I have two strings, str1 and str2, and I want to write a function in Python to check if str2 is a rotation of str1. How can I achieve this?","solution":"def is_rotation(str1, str2): Checks if str2 is a rotation of str1. if len(str1) != len(str2): return False concatenated = str1 + str1 return str2 in concatenated"},{"question":"Create a program that selects and prints a random item from a 2D array, also print the coordinates (row and column) of the selected item. The size of the array and its elements should be input by the user.","solution":"import random def select_random_item_2d_array(array): Selects a random item from a 2D array and returns the item along with its coordinates. Parameters: array (list of list of int): 2D array from which to select the item. Returns: tuple: (selected item, row coordinate, column coordinate) rows = len(array) columns = len(array[0]) if rows > 0 else 0 if rows == 0 or columns == 0: return None, None, None random_row = random.randint(0, rows - 1) random_column = random.randint(0, columns - 1) selected_item = array[random_row][random_column] return selected_item, random_row, random_column"},{"question":"Write a function that returns the maximum number in a given list without using any built-in Python functions. Also, implement your own error handling for scenarios where the input is not a list, the list is empty, or the list contains non-integer values.","solution":"def find_max(numbers): Returns the maximum number in a given list of integers. Raises: TypeError: If the input is not a list. ValueError: If the list is empty or contains non-integer values. if not isinstance(numbers, list): raise TypeError(\\"Input should be a list.\\") if not numbers: raise ValueError(\\"List is empty.\\") for num in numbers: if not isinstance(num, int): raise ValueError(\\"List should contain only integers.\\") max_num = numbers[0] for num in numbers: if num > max_num: max_num = num return max_num"},{"question":"Develop a Python function which, given a sequential group of numbers, produces a new list with the accumulation of the square root values of each number in the group.","solution":"import math def accumulate_sqrt(numbers): Given a list of numbers, returns a new list with the accumulation of the square root values of each number in the group. accumulated = [] total = 0 for num in numbers: total += math.sqrt(num) accumulated.append(total) return accumulated"},{"question":"Create a code that can be used to perform a linear search in an array, but with an additional condition that the search should start from the end of the array and iterate backwards. The code should return the index of the last occurrence of the target number in the array. If the target number is not found, the code should return -1. If there are multiple occurrences of the target number, the code should return the index of the last occurrence.","solution":"def reverse_linear_search(arr, target): Performs a linear search from the end of the array to find the last occurrence of the target. :param arr: List of elements to search within. :param target: The element to search for. :return: The index of the last occurrence of target in arr or -1 if not found. for i in range(len(arr) - 1, -1, -1): if arr[i] == target: return i return -1"},{"question":"Write a Python program to create a new list which contains all prime numbers from the given list, and sort them in descending order. If there are no prime numbers in the list, return an empty list.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def filter_and_sort_primes(lst): Returns a new list which contains all prime numbers from the given list, sorted in descending order. primes = [x for x in lst if is_prime(x)] return sorted(primes, reverse=True)"},{"question":"Create a Python function that takes an array of strings and generates a dictionary with each string as a key and the number of vowels in the string as the value.","solution":"def count_vowels(s): Returns the number of vowels in a given string s. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels) def generate_vowel_dict(strings): Takes an array of strings and generates a dictionary with each string as a key and the number of vowels in the string as the value. return {s: count_vowels(s) for s in strings}"},{"question":"Design a code to generate the sum of the squares of the Fibonacci sequence up to n elements, where n ≤ 10^6 and each element of the sequence can fit in a 64-bit unsigned integer. Implement an efficient solution with a time complexity of O(log n).","solution":"def fibonacci_sum_squares(n): Calculate the sum of squares of Fibonacci sequence up to n elements. The sum of squares of the first n Fibonacci numbers is: F(n) * F(n+1) :param n: Number of elements in the Fibonacci sequence (0 to n) :return: The sum of squares of the first n Fibonacci numbers def matrix_multiply(A, B): return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_power(matrix, exponent): result = [[1, 0], [0, 1]] # Identity matrix while exponent > 0: if exponent % 2 == 1: result = matrix_multiply(result, matrix) matrix = matrix_multiply(matrix, matrix) exponent //= 2 return result if n == 0: return 0 F = [[1, 1], [1, 0]] power = matrix_power(F, n) # Get the nth power of the Fibonacci matrix F_n = power[0][1] # This is F(n) F_n1 = power[0][0] # This is F(n+1) return F_n * F_n1"},{"question":"Create a for loop that prints the numbers 0 to 100 and prints if the number is a prime number or not. Additionally, the program should also calculate and display the sum of all prime numbers encountered during the loop. Implement this program using only a single for loop, without using any built-in functions or libraries for prime number calculations.","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def primes_and_sum(): Prints numbers from 0 to 100 and indicates if they are prime. Also calculates and returns the sum of primes found. sum_of_primes = 0 for num in range(101): if is_prime(num): print(f\\"{num} is a prime number\\") sum_of_primes += num else: print(f\\"{num} is not a prime number\\") return sum_of_primes"},{"question":"Develop an approach to determine the roots of a quadratic equation ax^2 + bx + c = 0, considering complex roots and without the quadratic formula. Additionally, given erroneous code in a different programming language attempting to solve this problem, identify and correct the errors.","solution":"import cmath def quadratic_roots(a, b, c): Returns the roots of the quadratic equation ax^2 + bx + c = 0. It can handle complex roots as well. if a == 0: raise ValueError(\\"Coefficient 'a' must not be 0 in a quadratic equation.\\") # Calculating the discriminant discriminant = b * b - 4 * a * c # Handling real and complex roots if discriminant >= 0: root1 = (-b + discriminant**0.5) / (2 * a) root2 = (-b - discriminant**0.5) / (2 * a) else: root1 = (-b + cmath.sqrt(discriminant)) / (2 * a) root2 = (-b - cmath.sqrt(discriminant)) / (2 * a) return root1, root2"},{"question":"In Python, how can you modify a function that converts a list of numbers into a formatted string, so that it can handle negative numbers and still maintain the user-specified width constraint, without introducing any extra padding or cutting off digits?","solution":"def format_numbers(numbers, width): Converts a list of numbers into a formatted string with a specified width for each number. Handles negative numbers and maintains the specified width constraint. # Format each number into a string of exactly 'width' characters formatted_numbers = [f'{num:>{width}}' for num in numbers] return ''.join(formatted_numbers)"},{"question":"Write a Python program that implements the Sieve of Eratosthenes to find all prime numbers within a given range. This range should be inputted by the user. Additionally, the program should display the time taken to execute the operation and space complexity involved.","solution":"import time import math def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers. for i in range(2, int(math.sqrt(n)) + 1): if is_prime[i]: for j in range(i*i, n+1, i): is_prime[j] = False return [i for i in range(n + 1) if is_prime[i]] def find_primes(n): start_time = time.time() primes = sieve_of_eratosthenes(n) end_time = time.time() elapsed_time = end_time - start_time space_complexity = (n + 1) * 1 # Each entry in the boolean list is 1 byte return primes, elapsed_time, space_complexity"},{"question":"Write a python function that takes in a list of integers and returns a new list which is a sorted version of the original list in ascending order, but with all the even numbers placed before the odd numbers.","solution":"def sort_even_before_odd(numbers): Returns a sorted list with even numbers first then odd numbers. evens = sorted([num for num in numbers if num % 2 == 0]) odds = sorted([num for num in numbers if num % 2 != 0]) return evens + odds"},{"question":"Write a Python program that calculates and prints out the 16th Fibonacci number. For a challenge, don't use any recursive function. Additionally, write a function that calculates the nth Fibonacci number given a user input for n, without using recursion.","solution":"def calculate_nth_fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for i in range(n - 2): a, b = b, a + b return b # Calculate and print the 16th Fibonacci number sixteenth_fibonacci = calculate_nth_fibonacci(16) print(sixteenth_fibonacci)"},{"question":"You are given an array of length 1001 (from index 0 to 1000), initially filled with the value -1. You are also given a list of \`updates\`, where each update is represented as \`[position, value]\`. For each update, replace the value at the given position with the given value. After all updates have been applied, return the array.","solution":"def apply_updates(initial_array, updates): Given an initial array and a list of updates, apply each update to the array. Parameters: - initial_array (list of int): The initial array of length 1001, filled with value -1. - updates (list of lists): A list where each entry is a list [position, value] which indicates the position in the array to update to the given value. Returns: - list of int: The updated array. for update in updates: position, value = update initial_array[position] = value return initial_array # Initialize the array to be used in unit tests initial_array = [-1] * 1001"},{"question":"Create a random list of 10 prime numbers in the range of 100 to 1000 in Python, ensuring that all numbers in the list are unique and sorted in ascending order.","solution":"import random def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def generate_prime_list(start, end, count): Generates a sorted list of unique prime numbers within a range. :param start: The starting range for generating prime numbers. :param end: The ending range for generating prime numbers. :param count: The number of prime numbers to generate. :return: A sorted list of unique prime numbers. prime_list = [] while len(prime_list) < count: num = random.randint(start, end) if is_prime(num) and num not in prime_list: prime_list.append(num) return sorted(prime_list) def get_prime_list(): Returns a sorted list of 10 unique prime numbers in the range of 100 to 1000. return generate_prime_list(100, 1000, 10)"},{"question":"Sort an array of integers using the bubble sort technique in descending order. The array can contain up to 10^6 elements. The solution should have a time complexity of O(n^2) and a space complexity of O(1). Additionally, you are not allowed to use any loops or recursion in your solution.","solution":"def bubble_sort_descending(arr): Sorts an array of integers in descending order using bubble sort technique. Args: arr (list): List of integers to sort. Returns: list: Sorted list in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a method that, given a 2D array with an arbitrary number of elements and a callback function, returns an array with unique elements. Moreover, the method should also allow for a custom comparator function to be passed as a parameter in order to determine the uniqueness of the elements. The method should support chaining and should not use any built-in array methods from popular programming languages. Additionally, the method should have a time complexity of O(n) and a space complexity of O(n), where n is the total number of elements in the 2D array. The method should also be able to handle arrays with nested arrays, and only consider the uniqueness of the inner elements while ignoring the outer array structure.","solution":"def unique_2d_array(arr, callback=lambda x: x, comparator=None): Returns a list of unique elements from the 2D array \`arr\`, processed by the callback and compared using the custom comparator function. Parameters: arr (list of lists): The input 2D array. callback (function): A function that processes each element. Default is the identity function. comparator (function): A function that compares two elements. Default is None, which means comparison is done by equality. Returns: list: A list of unique elements. seen_elements = {} def default_comparator(x, y): return x == y if comparator is None: comparator = default_comparator result = [] for sublist in arr: for item in sublist: processed_item = callback(item) if all(not comparator(processed_item, seen) for seen in seen_elements): seen_elements[processed_item] = True result.append(processed_item) return result"},{"question":"Use the re module in Python to extract the numbers greater than 5 from a given string that also contains at least one special character. The input string can be of any length and may contain multiple occurrences of special characters. Special characters are defined as any character that is not a letter, a number, or a whitespace.","solution":"import re def extract_numbers_greater_than_5(s): Extracts numbers greater than 5 from input string s which contains at least one special character. Parameters: s (str): The input string Returns: list: A list of numbers greater than 5 found in the string # Check if the string contains at least one special character if not re.search(r'[^a-zA-Z0-9s]', s): return [] # Find all the numbers in the string numbers = re.findall(r'bd+b', s) # Filter numbers greater than 5 result = [int(num) for num in numbers if int(num) > 5] return result"},{"question":"Given a 2D array, write a program to rotate it 90 degrees clockwise.","solution":"def rotate_90_degrees_clockwise(matrix): Rotate the given 2D matrix 90 degrees clockwise. n = len(matrix) # Create a new matrix to hold the rotated values rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a program in Python for computing the shortest path between two nodes in a weighted graph using Dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start, end): Find the shortest path between start and end nodes in a weighted graph using Dijkstra's algorithm. :param graph: A dictionary representing the weighted graph. The keys are node names and the values are dictionaries of neighboring nodes and their associated weights. :param start: The starting node for the path. :param end: The target node for the path. :return: A tuple containing the length of the shortest path and a list of nodes representing the path itself. If no path exists, returns (float('inf'), []). # Priority queue for maintaining the nodes to be processed, stored as (distance, node, path) queue = [(0, start, [])] # Dictionary for maintaining the shortest distances from the start node to all other nodes distances = {node: float('inf') for node in graph} distances[start] = 0 while queue: (current_distance, current_node, path) = heapq.heappop(queue) # Collect the path path = path + [current_node] if current_node == end: return (current_distance, path) # Process each neighbor of the current node for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor, path)) return (float('inf'), []) # Graph example for better understanding # graph = { # 'A': {'B': 1, 'C': 4}, # 'B': {'A': 1, 'C': 2, 'D': 5}, # 'C': {'A': 4, 'B': 2, 'D': 1}, # 'D': {'B': 5, 'C': 1} # } # result = dijkstra(graph, 'A', 'D') # print(result) # Output should be (4, ['A', 'B', 'C', 'D'])"},{"question":"Create an integer Set type with maximum 5 elements . Write Add, Remove and Display functions for this set. Also implement exception handling in case if maximum limit of set is reached.","solution":"class IntegerSet: def __init__(self): self.elements = set() def add(self, element): if len(self.elements) >= 5: raise ValueError(\\"Set can contain a maximum of 5 elements.\\") if not isinstance(element, int): raise TypeError(\\"Only integers can be added to the set.\\") self.elements.add(element) def remove(self, element): if element in self.elements: self.elements.remove(element) else: raise KeyError(f\\"Element {element} not found in the set.\\") def display(self): return self.elements"},{"question":"Hello, how can I get the length of the longest contiguous subsequence of a given list in Python? Specifically, I want to find the longest sequence with consecutive elements present in the list.","solution":"def longest_contiguous_subsequence(arr): Finds the length of the longest contiguous subsequence in a given list of integers. if not arr: return 0 numbers = set(arr) longest_streak = 0 for number in arr: if number - 1 not in numbers: current_number = number current_streak = 1 while current_number + 1 in numbers: current_number += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given two string inputs, \\"banana\\" and \\"nan\\", write a Python function that checks if the second string is a substring of the first one. If the second string is found within the first string, your function should return the index at which the substring starts in the first string. If it is not found, your function should return -1.","solution":"def find_substring(main_str, sub_str): Returns the start index of the substring 'sub_str' in the string 'main_str'. If 'sub_str' is not found, returns -1. return main_str.find(sub_str)"},{"question":"Write a Python program to replace the last element in a list with another given element. Additionally, ensure your function can handle cases where the provided list is empty. Implement this functionality without using built-in Python functions for list manipulation, such as \`pop()\` or \`insert()\`.","solution":"def replace_last_element(lst, new_element): Replaces the last element in a list with a new given element. If the list is empty, it simply returns the list with the new element added. if len(lst) == 0: return [new_element] result = [] for i in range(len(lst)): if i == len(lst) - 1: result.append(new_element) else: result.append(lst[i]) return result"},{"question":"In Python, write a code snippet to calculate the average of prime numbers in a given list.","solution":"def is_prime(n): Check if a given number n is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def average_of_primes(numbers): Calculate the average of prime numbers in the given list. prime_numbers = [num for num in numbers if is_prime(num)] if not prime_numbers: return 0 return sum(prime_numbers) / len(prime_numbers)"},{"question":"How might the Python code given below for computing Fibonacci numbers using a recursive strategy be revised to incorporate a memoization technique for the purpose of enhancing its computational efficiency? Additionally, could you provide an explanation regarding the mechanics of memoization and its impact on recursive algorithms like this one?","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a sorting algorithm that can sort a list of numbers in ascending order. The algorithm should have a time complexity of O(n log n) and a space complexity of O(1). You are not allowed to use any built-in sorting functions or libraries.","solution":"def heap_sort(nums): Sorts a list of numbers in ascending order using the heap sort algorithm which has a time complexity of O(n log n) and a space complexity of O(1). n = len(nums) def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[largest] < arr[left]: largest = left if right < n and arr[largest] < arr[right]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) # Build a maxheap for i in range(n // 2 - 1, -1, -1): heapify(nums, n, i) # One by one extract elements for i in range(n-1, 0, -1): nums[i], nums[0] = nums[0], nums[i] # Swap heapify(nums, i, 0) return nums"},{"question":"I have a list of strings and I want to create a list of lists, where each sublist contains strings that have the same length. How can I achieve this using Python?","solution":"def group_strings_by_length(strings): Groups strings by their length into sublists. Args: strings (list of str): List of input strings. Returns: list of list of str: A list where each sublist contains strings of the same length. from collections import defaultdict length_dict = defaultdict(list) for string in strings: length_dict[len(string)].append(string) return list(length_dict.values())"},{"question":"Create a python program that generates sentences using the Wumpus world environment. The Wumpus world is a classic AI problem where an agent, for example a knight, navigates through a maze made up of a 4x4 grid of interconnected rooms. Each room can contain one or more of the following: a Wumpus (a dangerous creature), a pit (a bottomless hole), and gold (treasure). The knight's task is to enter the dungeon, avoid the Wumpus and the pits, grab the gold, and escape without any harm.","solution":"import random class WumpusWorldEnvironment: def __init__(self): self.grid_size = 4 self.entities = [\\"Wumpus\\", \\"Pit\\", \\"Gold\\", \\"Empty\\"] self.grid = self.initialize_grid() def initialize_grid(self): grid = [[\\"Empty\\" for _ in range(self.grid_size)] for _ in range(self.grid_size)] for _ in range(self.grid_size): entity = random.choice(self.entities) x, y = random.randint(0, self.grid_size - 1), random.randint(0, self.grid_size - 1) grid[x][y] = entity return grid def generate_sentences(self): sentences = [] for i in range(self.grid_size): for j in range(self.grid_size): if self.grid[i][j] != \\"Empty\\": sentence = f\\"There is a {self.grid[i][j]} in room ({i+1}, {j+1}).\\" sentences.append(sentence) return sentences def generate_wumpus_world_sentences(): env = WumpusWorldEnvironment() return env.generate_sentences()"},{"question":"I recently started learning Python and I'm trying to code a small bowling game for fun. I have got a current problem while coding the last frame which can be for one or two rolls, depending on whether there was a strike or spare in the previous frame. Could you help me with this?","solution":"def calculate_last_frame_score(rolls): Calculate the score for the last frame of a bowling game. Parameters: rolls (list): A list of integers representing pins knocked down in each roll. Returns: int: The score of the last frame. if not rolls: return 0 # Case where first roll is a strike if rolls[0] == 10: return sum(rolls[:3]) # Case where the first two rolls are a spare elif sum(rolls[:2]) == 10: return sum(rolls[:3]) # Regular frame calculation (no strike, no spare) else: return sum(rolls[:2])"},{"question":"Design a Python function that accepts a nested dictionary and returns a list of keys and values, sorted by the values. However, to make it more challenging, the function should handle both integer and string values, and should sort numeric values in ascending order but sort string values in descending order based on their lexicographic order.","solution":"def sort_nested_dict(d): Returns a list of keys and values sorted by the values. Numeric values are sorted in ascending order, while string values are sorted in descending lexicographic order. flat_dict = {} def flatten_dict(d, parent_key=''): for k, v in d.items(): new_key = f\\"{parent_key}.{k}\\" if parent_key else k if isinstance(v, dict): flatten_dict(v, new_key) else: flat_dict[new_key] = v flatten_dict(d) int_values = {k: v for k, v in flat_dict.items() if isinstance(v, int)} str_values = {k: v for k, v in flat_dict.items() if isinstance(v, str)} sorted_int_values = sorted(int_values.items(), key=lambda item: item[1]) sorted_str_values = sorted(str_values.items(), key=lambda item: item[1], reverse=True) return sorted_int_values + sorted_str_values"},{"question":"Create a function that converts a given decimal number to a binary string, but with a twist. The function should also allow converting the number to a binary representation with a fixed number of bits. If the number of bits is not specified, the function should default to an 8-bit binary string.","solution":"def decimal_to_binary_string(n, bits=8): Converts a decimal number n to a binary string with a specified number of bits. Defaults to 8 bits if not specified. Parameters: - n: The decimal number to convert. - bits: The number of bits for the binary representation. Returns: A binary string representation of the decimal number n. if n < 0: raise ValueError(\\"Cannot convert negative numbers to binary string with current implementation.\\") # Convert the number to binary and strip the '0b' prefix. binary_str = bin(n)[2:] # Pad the binary string with leading zeros to match the specified bits. if len(binary_str) > bits: raise ValueError(f\\"Number {n} cannot fit in {bits} bits.\\") return binary_str.zfill(bits)"},{"question":"Human: I want to generate a prefix tree from a given list of strings. Can you provide a code example for this in Python?","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word): node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def starts_with(self, prefix): node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True def display(self, node=None, word=\\"\\", words=None): if words is None: words = [] if node == None: node = self.root if node.is_end_of_word: words.append(word) for char, next_node in node.children.items(): self.display(next_node, word + char, words) return words"},{"question":"Write a Python code to copy a string, but do not use the built-in string copy or string slice methods and restrict the use of built-in functions to increase the difficulty. Also, make sure your program can handle multibyte unicode characters correctly.","solution":"def copy_string(s): Returns a copy of the string s without using built-in string copy or slice methods. Handles multibyte unicode characters correctly. copied_string = '' for char in s: copied_string += char return copied_string"},{"question":"Develop a function to fetch the maximum value from a given dictionary where values could be either integers or a list of integers.","solution":"def max_value_from_dict(data): Returns the maximum value from a dictionary where values could be either integers or a list of integers. max_val = float('-inf') for value in data.values(): if isinstance(value, int): max_val = max(max_val, value) elif isinstance(value, list): max_val = max(max_val, max(value)) return max_val"},{"question":"Create a Python function to check if a given array is sorted in ascending order. The array must contain only unique positive integers, have a length greater than 1, and the function should not use any built-in sorting functions or methods.","solution":"def is_sorted_ascending(arr): Check if a given array is sorted in ascending order. The array contains only unique positive integers and has a length greater than 1. for i in range(1, len(arr)): if arr[i-1] >= arr[i]: return False return True"},{"question":"Given a list of integers and a 'k' value, write a python program that determines whether there are 'k' consecutive integers in the list. The program should return \\"Yes\\" if 'k' consecutive integers are found, otherwise return \\"No\\". To increase the complexity, the list can also contain duplicate values. Also, your program should handle edge cases such as an empty list, a list with fewer elements than 'k', or if 'k' is a negative number.","solution":"def has_k_consecutive_integers(lst, k): Determines whether there are 'k' consecutive integers in the list. Returns \\"Yes\\" if 'k' consecutive integers are found, otherwise returns \\"No\\". if k <= 0 or len(lst) < k: return \\"No\\" unique_sorted_lst = sorted(set(lst)) for i in range(len(unique_sorted_lst) - k + 1): if unique_sorted_lst[i + k - 1] == unique_sorted_lst[i] + k - 1: return \\"Yes\\" return \\"No\\""},{"question":"Create a function that converts a given decimal number to its binary equivalent using recursion, without using any built-in conversion functions or libraries. The function should return a string representation of the binary number.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary equivalent using recursion. Arguments: n -- a non-negative integer Returns: A string representation of the binary number. if n == 0: return '0' elif n == 1: return '1' else: return decimal_to_binary(n // 2) + str(n % 2)"},{"question":"Write a Python program to create a dictionary that stores information for a given set of people. Each person's information should include their name (string), age (integer), and height (float). The program should be able to handle multiple entries and store them in the dictionary. When entering information, you can assume the user will enter valid data types for age and height.","solution":"def create_people_dict(people_info): Given a list of people information as tuples, returns a dictionary where each person's name is a key and their information (age and height) is a nested dictionary. :param people_info: List of tuples, each containing (name, age, height) :return: Dictionary with person's name as key and their information as nested dictionary people_dict = {} for name, age, height in people_info: people_dict[name] = {'age': age, 'height': height} return people_dict"},{"question":"In Python, create a function that takes a list of integers as input and returns a sorted list of those integers using the quicksort algorithm.","solution":"def quicksort(arr): Returns a sorted list using the quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"I am using Ray-Tune for hyperparameter tuning in TensorFlow with the following command: \`Analysis = tune.run(my_func, ..., name='trial_name')\`. I would like to stop certain trials early based on their training loss, say if it is greater than a certain threshold. How can I achieve this through the \`trial live info\` that Ray Tune prints to the console? Additionally, how can I access and plot the results of the best trials after tuning is completed?","solution":"from ray import tune from ray.tune import Stopper import matplotlib.pyplot as plt import os class LossStopper(Stopper): def __init__(self, threshold): self.threshold = threshold def __call__(self, trial_id, result): return result[\\"loss\\"] > self.threshold def stop_all(self): return False def my_func(config): # Your training function implementation with configurations pass def run_tuning(): stopper = LossStopper(threshold=0.5) # Set your loss threshold here analysis = tune.run( my_func, name='trial_name', stop=stopper, config={ # Define your hyperparameters to tune here }, # Add other necessary parameters needed by tune.run ) return analysis def plot_best_trials(analysis, metric=\\"loss\\", mode=\\"min\\", top_n=5): best_trials = analysis.get_best_trials(metric=metric, mode=mode, scope=\\"all\\") best_trials = sorted(best_trials, key=lambda trial: trial.metric_analysis[metric][mode])[:top_n] for i, trial in enumerate(best_trials): results = analysis.trial_dataframes[trial.trial_id] plt.plot(results['training_iteration'], results[metric], label=f'Trial {i}') plt.xlabel('Training Iteration') plt.ylabel(metric.capitalize()) plt.legend() plt.show() # Example usage: # analysis = run_tuning() # plot_best_trials(analysis)"},{"question":"Refine the given incomplete code snippet. The function, named intersperse, accepts a list of integers \`numbers\` and an integer \`delimeter\`. It should return a list with the integer \`delimeter\` inserted between every two consecutive elements of \`numbers\`. Moreover, if \`delimeter\` is negative, the function should ignore its absolute value and instead automatically multiply the elements of the list by the absolute value of the \`delimeter\`. An additional requirement is that the function should also handle cases where the \`delimeter\` is zero.","solution":"def intersperse(numbers, delimeter): Inserts the delimiter between every two consecutive elements of numbers. If the delimiter is negative, it multiplies elements of numbers by the absolute value of the delimiter. If the delimiter is zero, it simply returns the original list of numbers. :param numbers: List of integers :param delimiter: An integer :return: A list with the delimiter inserted between consecutive elements or modified elements if the delimiter is negative. if delimeter == 0: return numbers if delimeter < 0: return [x * abs(delimeter) for x in numbers] result = [] for i, num in enumerate(numbers): result.append(num) if i < len(numbers) - 1: result.append(delimeter) return result"},{"question":"Create a python dictionary combining two lists where one list contains keys and another one contains lists of values. Each key in the first list should correspond to its own list of values from the second list. The length of both lists will always be equal and greater than 1. All elements in all lists are integers. Example: list1 = ['a', 'b', 'c'] list2 = [[1,2], [3,4], [5,6]]","solution":"def combine_lists_into_dict(keys, values): Combine two lists into a dictionary where keys comes from the first list (keys) and corresponding values are lists from the second list (values). :param keys: List of keys :param values: List of lists of values :return: Dictionary combining keys and corresponding lists of values return dict(zip(keys, values)) # Example usage # list1 = ['a', 'b', 'c'] # list2 = [[1, 2], [3, 4], [5, 6]] # result = combine_lists_into_dict(list1, list2) # print(result) # Output: {'a': [1, 2], 'b': [3, 4], 'c': [5, 6]}"},{"question":"Code a Python program that accepts an array of integers, calculates the sum of the squares of its numbers, and returns the result along with the average of the squares.","solution":"def sum_and_average_of_squares(arr): Computes the sum of the squares of the elements in the array and the average of the squares. Parameters: arr (list): A list of integers Returns: tuple: A tuple containing the sum of the squares and the average of the squares if not arr: return (0, 0) squares = [x**2 for x in arr] sum_squares = sum(squares) avg_squares = sum_squares / len(arr) return (sum_squares, avg_squares)"},{"question":"Write a Python function that identifies all duplicate values in a list and returns them in the order they were first seen as duplicates. The function should not use any built-in functions for eliminating duplicates or identifying them other than basic list operations. Additionally, the function should account for possible cases with no duplicates, returning an empty list in such instances.","solution":"def find_duplicates(lst): Identifies all duplicate values in a list and returns them in the order they were first seen as duplicates. :param lst: List of items to check for duplicates. :return: List of duplicate items in the order they were first seen. seen = [] duplicates = [] for item in lst: if item in seen and item not in duplicates: duplicates.append(item) else: seen.append(item) return duplicates"},{"question":"Challenge: Make a python script that finds the largest number in a list of numbers. However, you are not allowed to use any built-in functions or methods that directly sort or find the maximum value in the list. Additionally, the solution must have a time complexity of O(n) and a space complexity of O(1). The list may contain negative numbers and will always have at least one element.","solution":"def find_largest_number(numbers): Returns the largest number in the provided list 'numbers'. if not numbers: raise ValueError(\\"The list must contain at least one element.\\") largest = numbers[0] for num in numbers[1:]: if num > largest: largest = num return largest"},{"question":"Create a class in Python which has a method to sort an array of numbers in increasing order. However, the sorting algorithm cannot use the built-in sorting function (e.g., sorted() or .sort()).","solution":"class Sorter: def sort_array(self, array): Sorts an array of numbers in increasing order using bubble sort algorithm. :param array: List of integers or floats :return: List of sorted integers or floats n = len(array) for i in range(n): for j in range(0, n-i-1): if array[j] > array[j+1]: array[j], array[j+1] = array[j+1], array[j] return array"},{"question":"Write a Python function to find the maximum positive number in a list that also has negative numbers and zeros. If there are no positive numbers, return None. Your function should also keep track of the index of the maximum positive number. Here is an erroneous reference code and a list to test your function.","solution":"def find_max_positive_with_index(lst): Returns a tuple containing the maximum positive number and its index. If there are no positive numbers, returns None. max_positive = None max_index = -1 for index, num in enumerate(lst): if num > 0: if max_positive is None or num > max_positive: max_positive = num max_index = index if max_positive is None: return None return (max_positive, max_index)"},{"question":"I have a Python script that generates a list of numbers. I need to modify it to filter out any numbers that are divisible by 3. However, I also want to check if the number is prime before excluding it. Can you help me with the correct code to accomplish this?","solution":"def is_prime(n): Returns True if the number n is prime, otherwise False. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_numbers(numbers): Returns a list of numbers that are not divisible by 3 unless they are prime. return [number for number in numbers if not (number % 3 == 0 and not is_prime(number))]"},{"question":"Write a Python function to find the maximum element in an array using recursion.","solution":"def find_max_recursive(arr, n): Returns the maximum element in an array using recursion. arr: list of integers n: length of the list # Base case: only one element if n == 1: return arr[0] # Recursive case: find the maximum of the remaining array max_of_rest = find_max_recursive(arr, n - 1) # Compare last element with the maximum of the rest return arr[n - 1] if arr[n - 1] > max_of_rest else max_of_rest"},{"question":"Design an algorithm in Python to check if two given strings are permutations of each other.","solution":"def are_permutations(str1, str2): Check if str1 and str2 are permutations of each other. # If lengths differ, they cannot be permutations if len(str1) != len(str2): return False # Dictionary to count frequency of characters in str1 and str2 char_count = {} # Count characters in str1 for char in str1: char_count[char] = char_count.get(char, 0) + 1 # Subtract count of characters in str2 for char in str2: if char in char_count: char_count[char] -= 1 if char_count[char] == 0: del char_count[char] else: return False # If char_count is empty, str1 and str2 are permutations of each other return len(char_count) == 0"},{"question":"I have a machine learning model that predicts the price of a house based on its features. I want to create a function that takes in a DataFrame containing the features of a house and returns the predicted price. How can I modify my code to achieve this using a gradient boosting regressor?","solution":"import pandas as pd from sklearn.ensemble import GradientBoostingRegressor # Assuming the model has already been trained and is stored in a variable called \`model\`. model = GradientBoostingRegressor() def predict_house_price(features_df): Predicts the price of a house based on its features using a pre-trained Gradient Boosting Regressor model. Parameters: features_df (pd.DataFrame): DataFrame containing the features of the house. Returns: float: The predicted price of the house. return model.predict(features_df)[0]"},{"question":"Write a Python program to a generate a random 4-digit number in which all 4 digits are even.","solution":"import random def generate_even_digit_number(): Generates a random 4-digit number where all digits are even. even_digits = ['0', '2', '4', '6', '8'] number = ''.join(random.choice(even_digits) for _ in range(4)) return int(number)"},{"question":"Design an algorithm that prints out the longest substring of a given string without repeating characters.","solution":"def longest_non_repeating_substring(s): Returns the longest substring without repeating characters in a given string. char_index_map = {} start = 0 max_length = 0 max_substring = \\"\\" for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end if end - start + 1 > max_length: max_length = end - start + 1 max_substring = s[start:end+1] return max_substring"},{"question":"Write a Python function that takes a list of numbers and returns the number that appears most frequently in the list.","solution":"def most_frequent_number(numbers): Returns the number that appears most frequently in the list. In case of a tie, returns any one of the most frequent numbers. from collections import Counter if not numbers: return None count = Counter(numbers) most_frequent = count.most_common(1) return most_frequent[0][0] if most_frequent else None"},{"question":"Develop a function to merge two pre-sorted lists into a single sorted list without using the built-in sort() functionality.","solution":"def merge_sorted_lists(list1, list2): Merge two pre-sorted lists into a single sorted list. :param list1: First pre-sorted list :param list2: Second pre-sorted list :return: Merged sorted list merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function called \`calculate_sum\` that takes in two integers as inputs and returns the sum of the two numbers. Additionally, print the sum using the \`print\` function.","solution":"def calculate_sum(a, b): Returns the sum of a and b, and prints the sum. result = a + b print(result) return result"},{"question":"Create a method in Python to generate all the prime numbers between 1 and 1000, where each prime number is also a palindrome. Additionally, the method should be optimized to have a time complexity of O(n) and a space complexity of O(1).","solution":"def generate_palindromic_primes(): Generate palindromic prime numbers between 1 and 1000. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def is_palindrome(n): return str(n) == str(n)[::-1] palindromic_primes = [] for num in range(1, 1001): if is_prime(num) and is_palindrome(num): palindromic_primes.append(num) return palindromic_primes"},{"question":"Write a Python function that takes a list of strings as an argument and returns a list where each element is the length of the strings in the original list.","solution":"def lengths_of_strings(strings): Returns a list of lengths of the given list of strings. :param strings: List of strings :return: List of lengths of the strings return [len(s) for s in strings]"},{"question":"Design a function in Python for computing the multiplication of a list of n numbers, where n is a positive integer. The function should handle input lists of any length.","solution":"def multiply_list(numbers): Returns the product of all numbers in the list. Parameters: numbers (list): A list of numbers to multiply. Returns: int/float: The product of the numbers in the list. if not numbers: return None # Return None if the list is empty product = 1 for num in numbers: product *= num return product"},{"question":"Write a Python code to measure the similarity between two strings using Jaccard Similarity Index.","solution":"def jaccard_similarity(str1, str2): Calculate the Jaccard Similarity Index between two strings. Jaccard Similarity Index = (Size of Intersection of Sets) / (Size of Union of Sets) Parameters: - str1: first string - str2: second string Returns: - float: Jaccard Similarity Index set1 = set(str1.split()) set2 = set(str2.split()) intersection = set1.intersection(set2) union = set1.union(set2) if len(union) == 0: return 1.0 return float(len(intersection)) / len(union)"},{"question":"Given a list of elements and a condition, write a Python function that filters the list based on the condition and returns a new list of filtered elements. The condition should be a lambda function that checks for a specific property of the elements.","solution":"def filter_list(elements, condition): Filters elements in a list based on a given condition. :param elements: List of elements to filter :param condition: Lambda function that returns a Boolean indicating if the element should be included :return: List of elements that satisfy the condition return [element for element in elements if condition(element)]"},{"question":"Write a python function \`find_pattern\` that takes in two strings \`haystack\` and \`needle\`. If \`needle\` is a substring of \`haystack\`, return the index of the first occurrence of \`needle\` in \`haystack\`. If \`needle\` is not a substring of \`haystack\`, return -1. If \`needle\` is an empty string, return 0.","solution":"def find_pattern(haystack, needle): Returns the index of the first occurrence of needle in haystack. If needle is not a substring of haystack, return -1. If needle is an empty string, return 0. if needle == \\"\\": return 0 return haystack.find(needle)"},{"question":"Write a python program to print a FizzBuzz series up to a given number n. For multiples of three, print \\"Fizz\\", for multiples of five, print \\"Buzz\\", and for multiples of both three and five, print \\"FizzBuzz\\". For all other numbers, print the number itself.","solution":"def fizzbuzz(n): Prints the FizzBuzz series up to a given number n. For multiples of three, print \\"Fizz\\"; for multiples of five, print \\"Buzz\\"; for multiples of both three and five, print \\"FizzBuzz\\". For all other numbers, print the number itself. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a code to check whether the input string is a palindrome or not. However, you are not allowed to use any additional data structures (such as arrays or stacks) and you must solve the problem in-place with constant extra space. The solution should have a time complexity of O(n), where n is the length of the input string.","solution":"def is_palindrome(s): Check if a given string is a palindrome. A palindrome reads the same forward and backward. Args: s (str): Input string Returns: bool: True if the string is a palindrome, False otherwise left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a Python code snippet to add two lists of numbers element-wise and return a new list with the results. If the lists are of unequal lengths, return None instead.","solution":"def add_lists_elementwise(list1, list2): Adds two lists element-wise and returns a new list with the results. If the lists are of unequal lengths, return None. Parameters: list1 (list of numbers): The first list. list2 (list of numbers): The second list. Returns: list of numbers|None: The resultant list after element-wise addition, or None if the lists are of unequal lengths. if len(list1) != len(list2): return None return [a + b for a, b in zip(list1, list2)]"},{"question":"write a python function that calculates the product of all numbers in a list of numbers using the reduce() function.","solution":"from functools import reduce def product_of_list(numbers): Returns the product of all numbers in the list using the reduce() function. return reduce(lambda x, y: x * y, numbers)"},{"question":"Given the following erroneous implementation of the bubble sort algorithm in Python, could you spot and correct the mistakes? Also, provide an explanation for the reasons behind each correction.","solution":"def bubble_sort(arr): An implementation of bubble sort algorithm that sorts a list in ascending order. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n - i - 1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr # Explanation: # 1. The nested loops ensure that we traverse the array and compare adjacent elements. # 2. We use the second for loop to compare elements and swap them if they are in the wrong order. # 3. The (n - i - 1) optimization helps in reducing the number of comparisons after each pass, since the largest element is always bubbled up to its correct position. # The function returns the sorted array for verification in unit tests."},{"question":"Given an array of integers, sort the numbers in ascending order without using the built-in sort function. Also assume that the array can hold up to 10,000 elements.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using bubble sort. Args: arr (list): A list of integers. Returns: list: The sorted list of integers. n = len(arr) for i in range(n-1): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list. However, you must use a divide-and-conquer algorithm to compute the greatest difference, and not use any built-in Python functions like max() or min().","solution":"def greatest_difference(nums): Returns the greatest difference between any two numbers in the list using a divide-and-conquer algorithm. def helper(nums, left, right): if left == right: return (nums[left], nums[left]) mid = (left + right) // 2 left_min, left_max = helper(nums, left, mid) right_min, right_max = helper(nums, mid + 1, right) return (min(left_min, right_min), max(left_max, right_max)) if not nums: return 0 min_value, max_value = helper(nums, 0, len(nums) - 1) return max_value - min_value"},{"question":"Write a Python code snippet to append a new column to a pandas DataFrame. The new column should contain a transformed version of an existing column, where the transformation is performed using a user-defined function. The user-defined function should take in the values of the existing column and return the transformed values.","solution":"import pandas as pd def transform_column(df, existing_column, new_column, transformation_function): Appends a new column to the DataFrame which contains the transformed version of an existing column. Parameters: df (pd.DataFrame): Input DataFrame existing_column (str): The name of the existing column to transform new_column (str): The name of the new column to be added transformation_function (function): A user-defined function to transform the values of the existing column Returns: pd.DataFrame: DataFrame with the new column added df[new_column] = df[existing_column].apply(transformation_function) return df"},{"question":"Create a 3D array of size 2x3x2 in PyTorch where each element is a random number between 0 and 1. Additionally, include a function that normalizes this array so that all its elements sum up to 1 (i.e., the array becomes a probability distribution).","solution":"import torch def create_random_3d_array(): Create a 3D array of size 2x3x2 in PyTorch where each element is a random number between 0 and 1. return torch.rand((2, 3, 2)) def normalize_array(arr): Normalize the array so that all its elements sum up to 1, making it a probability distribution. Parameters: - arr: 3D tensor to be normalized. Returns: - normalized tensor with the same shape as input. total_sum = arr.sum() return arr / total_sum"},{"question":"Being a programmer, create an efficient code to find the second smallest number among the given integers in an array. Your code should consider the case sensitivity of the input and should not treat integers with leading zeros as octal numbers. Additionally, incorporate error handling to deal with potential data anomalies or unusual inputs such as non-numeric values. Finally, optimize your code for speed and memory usage.","solution":"def find_second_smallest(arr): This function returns the second smallest number in the given list of integers. It ignores non-numeric values and treats all numbers as integers. if len(arr) < 2: raise ValueError(\\"Array must contain at least two numeric elements\\") # Filter out non-integer values cleaned_arr = [int(x) for x in arr if str(x).lstrip('-').isdigit()] if len(cleaned_arr) < 2: raise ValueError(\\"Array must contain at least two numeric elements\\") first_min = second_min = float('inf') for num in cleaned_arr: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num if second_min == float('inf'): raise ValueError(\\"Array must contain at least two numeric elements\\") return second_min"},{"question":"How can I create a random password generator using Python that generates strong passwords with a minimum length of 12 characters, consisting of a combination of uppercase and lowercase letters, numbers, and symbols?","solution":"import random import string def generate_strong_password(length=12): Generates a strong password with a specified minimum length. The password contains a mix of uppercase and lowercase letters, numbers, and symbols. :param length: Minimum length of the password (default is 12) :return: A strong password string if length < 12: raise ValueError(\\"Password length should be at least 12 characters\\") all_characters = string.ascii_letters + string.digits + string.punctuation # Ensure the password has at least one of each type of character password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation), ] # Fill the rest of the password length with random choices from all characters password += random.choices(all_characters, k=length - 4) # Shuffle the list to ensure randomness and convert to a string random.shuffle(password) return ''.join(password)"},{"question":"Write an algorithm to find the kth to last element in a singly linked list, where k is a positive integer less than or equal to the length of the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def kth_to_last(head, k): # First, establish two pointers pointer1 = head pointer2 = head # Move pointer2 ahead by k nodes for _ in range(k): if pointer2 is None: return None # k is out of bounds pointer2 = pointer2.next # Now move both pointers until pointer2 reaches the end of the list while pointer2: pointer1 = pointer1.next pointer2 = pointer2.next # pointer1 should now be at the kth to last element return pointer1"},{"question":"Create a program that generates the first N prime numbers and then calculates the sum of those prime numbers. Additionally, calculate the average of the generated prime numbers. The program should have a time complexity of O(N log log N).","solution":"def generate_first_n_primes(n): Generates the first n prime numbers. if n < 1: return [] primes = [] candidate = 2 while len(primes) < n: for p in primes: if candidate % p == 0: break else: primes.append(candidate) candidate += 1 return primes def calculate_sum_and_average(primes): Calculates the sum and average of the given list of prime numbers. total_sum = sum(primes) average = total_sum / len(primes) if primes else 0 return total_sum, average"},{"question":"Given the erroneous Python code below, debug and modify the provided script to calculate the surface area of a sphere. The function should take the radius (r) of the sphere as an input.","solution":"import math def calculate_surface_area_of_sphere(r): Calculate the surface area of a sphere given its radius. Formula: 4 * pi * r^2 if r < 0: raise ValueError(\\"Radius cannot be negative\\") return 4 * math.pi * r ** 2"},{"question":"Write a Python function to detect if two lists have at least one common member. If they do, return the common elements in a list. If they do not, return a message stating there are no common elements.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. If there are no common elements, return a message indicating so. common = list(set(list1) & set(list2)) if common: return common else: return \\"There are no common elements.\\""},{"question":"Create an animation depicting a ball bouncing up and down using the Python library Matplotlib.","solution":"import matplotlib.pyplot as plt import matplotlib.animation as animation import numpy as np def create_bouncing_ball_animation(): # Set up the figure, axis, and plot element fig, ax = plt.subplots() ax.set_xlim(-1, 1) ax.set_ylim(0, 10) ball, = ax.plot([], [], 'o', markersize=20) # Initialization function to set up the background for the animation def init(): ball.set_data([], []) return ball, # Animation update function def update(frame): x = 0 # horizontal position remains constant y = abs(np.sin(frame)) * 10 # vertical position to simulate bounce ball.set_data(x, y) return ball, # Creating the animation ani = animation.FuncAnimation(fig, update, frames=np.linspace(0, 2 * np.pi, 300), init_func=init, blit=True, repeat=True) plt.show() # Call the function to display the animation if __name__ == \\"__main__\\": create_bouncing_ball_animation()"},{"question":"Build a complete python script which create a video from images stored in a folder. The python script should take the list of image(s) path and their duration as input from the user and save the final video in the specified output path.","solution":"import cv2 import numpy as np def create_video_from_images(image_paths, durations, output_path, fps=30): Create a video from images with specified durations. :param image_paths: List of file paths to images. :param durations: List of durations (in seconds) for each image. :param output_path: Path to save the output video file. :param fps: Frames per second for the video. # Read the first image to get dimensions first_image = cv2.imread(image_paths[0]) height, width, layers = first_image.shape # Define the codec and create VideoWriter object fourcc = cv2.VideoWriter_fourcc(*'XVID') video = cv2.VideoWriter(output_path, fourcc, fps, (width, height)) for image_path, duration in zip(image_paths, durations): img = cv2.imread(image_path) # Add the image to the video for the specified duration for _ in range(int(duration * fps)): video.write(img) video.release() # Example of how to use the function if __name__ == \\"__main__\\": image_paths = ['image1.jpg', 'image2.jpg', 'image3.jpg'] durations = [2, 3, 2] # durations in seconds for each image output_path = 'output_video.avi' create_video_from_images(image_paths, durations, output_path)"},{"question":"Write a pseudocode algorithm for a binary search. In addition, implement error handling to account for scenarios where the input list is not sorted or when the desired element does not exist in the list.","solution":"def binary_search(arr, target): Performs binary search to find the index of the target in the sorted array arr. Raises ValueError if the array is not sorted or if the target is not in the array. # Check if the array is sorted if arr != sorted(arr): raise ValueError(\\"The input list must be sorted.\\") left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 raise ValueError(\\"Target not found in the list.\\")"},{"question":"Develop an algorithm in Python that takes as input an array of integers and returns an array of the same length with each item replaced by the sum of all other array items","solution":"def sum_except_self(nums): Returns an array where each element is replaced by the sum of all other elements in the input array. total_sum = sum(nums) return [total_sum - num for num in nums]"},{"question":"How can I generate the Fibonacci sequence efficiently up to the nth term using both recursive functions and dynamic programming in a program that can handle large inputs? Additionally, can you demonstrate how to display the resulting output in a formatted table that includes not only the index and value of each term, but also the time and space complexity of the algorithm used?","solution":"import time def fibonacci_recursive(n): if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_seq = [0, 1] def fib_recursive(k): if k in memo: return memo[k] if k <= 1: return k result = fib_recursive(k - 1) + fib_recursive(k - 2) memo[k] = result return result memo = {} for i in range(2, n): fib_seq.append(fib_recursive(i)) return fib_seq def fibonacci_dynamic(n): if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq def display_fibonacci(n): start_time_recursive = time.time() fib_seq_recursive = fibonacci_recursive(n) end_time_recursive = time.time() start_time_dynamic = time.time() fib_seq_dynamic = fibonacci_dynamic(n) end_time_dynamic = time.time() print(f\\"{'Index':<10}{'Recursive':<20}{'Dynamic':<20}\\") for i in range(n): recursive_val = fib_seq_recursive[i] if i < len(fib_seq_recursive) else 'N/A' dynamic_val = fib_seq_dynamic[i] if i < len(fib_seq_dynamic) else 'N/A' print(f\\"{i:<10}{recursive_val:<20}{dynamic_val:<20}\\") print(f\\"nTime complexity of recursive method: O(2^n)\\") print(f\\"Space complexity of recursive method: O(n)\\") print(f\\"Time complexity of dynamic method: O(n)\\") print(f\\"Space complexity of dynamic method: O(n)\\") print(f\\"nRecursive method took {end_time_recursive - start_time_recursive:.6f} seconds\\") print(f\\"Dynamic method took {end_time_dynamic - start_time_dynamic:.6f} seconds\\")"},{"question":"Can you help me write a program that can determine whether an array is sorted in ascending order or not using Python?","solution":"def is_sorted_ascending(arr): Determines if the input array is sorted in ascending order. Args: arr (list): A list of elements to check. Returns: bool: True if the list is sorted in ascending order, False otherwise. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a Python program that takes input from the user for two lists of equal length, converts them into a dictionary where the first list is the keys and the second list is the values, and prints the result. The program should handle the scenario where the input lists are not of equal length by indicating an error message. Additionally, the program should validate that the input lists only contain integer values, and if they don't, it should display an error message.","solution":"def convert_to_dict(list1, list2): Converts two lists into a dictionary if they are of equal length and contain only integers. Otherwise, returns appropriate error messages. if len(list1) != len(list2): return \\"Error: The lists are not of equal length.\\" if not all(isinstance(item, int) for item in list1 + list2): return \\"Error: Both lists must contain only integers.\\" return dict(zip(list1, list2)) # Testable function def main(list1, list2): result = convert_to_dict(list1, list2) print(result) return result"},{"question":"Write a function that removes duplicates from a given list of integers, but do not use any built-in functions or libraries to achieve this. Your solution should also be optimized for both time complexity and space complexity.","solution":"def remove_duplicates(nums): Removes duplicates from a given list of integers. if not nums: return [] nums.sort() unique_nums = [nums[0]] for i in range(1, len(nums)): if nums[i] != nums[i - 1]: unique_nums.append(nums[i]) return unique_nums"},{"question":"Write a Python program to identify duplicate values in a list and return a new list with only unique elements.","solution":"def remove_duplicates(input_list): Removes duplicate values from the input list and returns a list with only unique elements. Args: input_list (list): The list from which duplicates need to be removed. Returns: list: A list containing only unique elements from the input list. unique_elements = [] seen_elements = set() for element in input_list: if element not in seen_elements: unique_elements.append(element) seen_elements.add(element) return unique_elements"},{"question":"Write a code for linear search algorithm that returns the index of the first occurrence of the target element in the given array. The target element may be a string or an integer. Your code should also handle cases where the target element is not present in the array and return -1 in such cases. The array can have duplicate elements. Your code should handle duplicates correctly and return the index of the first occurrence of the target element. Example: [4, 5, 2, 3, 2, 4], target = 2, should return 2.","solution":"def linear_search(arr, target): Performs linear search to find the first occurrence of the target element. Returns the index of the first occurrence of the target element. If the target element is not present, returns -1. for index, element in enumerate(arr): if element == target: return index return -1"},{"question":"Given an array of strings, sort the strings alphabetically, reverse the sorted array, and then print the strings in reverse order.","solution":"def reverse_sorted_strings(strings): Given an array of strings, sort the strings alphabetically, reverse the sorted array, and then return the strings in reverse order. sorted_strings = sorted(strings) reversed_sorted_strings = list(reversed(sorted_strings)) return reversed_sorted_strings"},{"question":"Write a Python function that takes a list of integers as an argument and returns a dictionary where each key is a unique positive integer from the list and its value is the number of times it appears in the list. Ignore negative numbers and zeros in the list.","solution":"def count_positive_integers(int_list): Returns a dictionary where each key is a unique positive integer from the list and its value is the number of times it appears in the list. Ignore negative numbers and zeros. counts = {} for num in int_list: if num > 0: if num in counts: counts[num] += 1 else: counts[num] = 1 return counts"},{"question":"Write a Python program to split a given string into a list of substrings, using any special characters or numbers present in the string as delimiters. The function should not use Python's built-in split function or any other library function for splitting strings.","solution":"def split_string(s): Splits the given string into a list of substrings, using any special characters or numbers as delimiters. substrings = [] current_substring = '' for char in s: if char.isalpha(): current_substring += char else: if current_substring: substrings.append(current_substring) current_substring = '' if current_substring: substrings.append(current_substring) return substrings"},{"question":"Edit the code so that it calculates the power of a number using recursion, without using any built-in power functions or loops. However, you are now required to implement the power function using the \\"Exponentiation by squaring\\" method.","solution":"def power(x, n): Returns x raised to the power of n using Exponentiation by Squaring. if n == 0: return 1 elif n < 0: return 1 / power(x, -n) elif n % 2 == 0: half_power = power(x, n // 2) return half_power * half_power else: half_power = power(x, (n - 1) // 2) return half_power * half_power * x"},{"question":"Write a code to find the longest consecutive sequence inside of a given list of numbers, where the sequence must be strictly increasing by exactly 1 and contain at least five elements. Additionally, the code should output the start and end indices of the longest consecutive sequence. However, the code should also handle the case where the list contains duplicates and return the longest consecutive sequence that does not contain any duplicates.","solution":"def longest_consecutive_sequence(arr): if not arr: return -1, -1 sorted_arr = sorted(set(arr)) longest_start = longest_end = current_start = sorted_arr[0] longest_length = current_length = 1 for i in range(1, len(sorted_arr)): if sorted_arr[i] == sorted_arr[i - 1] + 1: current_length += 1 current_end = sorted_arr[i] else: if current_length >= 5 and current_length > longest_length: longest_start = current_start longest_end = current_end longest_length = current_length current_start = sorted_arr[i] current_length = 1 current_end = sorted_arr[i] if current_length >= 5 and current_length > longest_length: longest_start = current_start longest_end = current_end longest_length = current_length if longest_length < 5: return -1, -1 start_index = arr.index(longest_start) end_index = arr.index(longest_end, start_index) return start_index, end_index"},{"question":"Write a function that takes in 3 parameters: an array, a value, and an integer k. The function should find the kth smallest element in the given array that is larger than the given value. If there aren't enough elements that meet the criteria, the function should return -1.","solution":"def kth_smallest_larger_than_value(arr, value, k): Finds the kth smallest element in the array that is larger than the given value. Args: arr (list of int): The array of integers. value (int): The value to compare elements against. k (int): The rank of the element to find. Returns: int: The kth smallest element larger than the given value or -1 if not enough elements meet the criteria. # Filter out elements larger than the given value filtered_arr = [x for x in arr if x > value] # Sort the filtered array filtered_arr.sort() # Check if there are enough elements if len(filtered_arr) >= k: return filtered_arr[k - 1] else: return -1"},{"question":"As a Python developer, I want to create a web spider that can search the web for \\"how to\\" guides and tutorials, but only scrape a small portion of the page to avoid copyright issues. How can I modify the given code to only scrape the introduction section of each article while still returning the article title, URL, and a summary of the introduction in the search results?","solution":"import requests from bs4 import BeautifulSoup def fetch_article_details(url): Fetches the title and introduction summary of the article from the given URL. Args: - url (str): The URL of the article to scrape. Returns: - dict: A dictionary containing the article's title, URL, and a summary of the introduction. try: response = requests.get(url) response.raise_for_status() soup = BeautifulSoup(response.content, 'html.parser') # Extract the title of the article title = soup.find('title').get_text() # Extract the introduction paragraph(s) introduction = \\"\\" paragraphs = soup.find_all('p') if paragraphs: introduction = paragraphs[0].get_text() # Create an article summary dictionary article_summary = { 'title': title, 'url': url, 'introduction_summary': introduction[:300] # Trimming to first 300 characters } return article_summary except requests.RequestException as e: print(f\\"An error occurred while fetching the article: {e}\\") return None def search_guides(query, num_results=5): Searches the web for 'how to' guides and tutorials based on the query. Args: - query (str): The search query. - num_results (int): Number of search results to return. Defaults to 5. Returns: - list: A list of dictionaries containing the article's title, URL, and introduction summary. search_url = f\\"https://www.google.com/search?q={query}+how+to\\" headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'} try: response = requests.get(search_url, headers=headers) response.raise_for_status() soup = BeautifulSoup(response.content, 'html.parser') # Find search result links search_results = soup.find_all('a', href=True)[:num_results] articles = [] for result in search_results: url = result['href'] article_details = fetch_article_details(url) if article_details: articles.append(article_details) return articles except requests.RequestException as e: print(f\\"An error occurred during the search: {e}\\") return []"},{"question":"Given a list of Fibonacci numbers in Python, write a code that runs in O(n) time complexity to check if the list is strictly increasing. The list will have at least 3 elements and a maximum of 10^6 elements. Each Fibonacci number in the list will be a positive integer less than 10^12.","solution":"def is_strictly_increasing(fib_list): Checks if the given list of Fibonacci numbers is strictly increasing. :param fib_list: List[int] - A list of Fibonacci numbers. :return: bool - True if the list is strictly increasing, False otherwise. for i in range(1, len(fib_list)): if fib_list[i] <= fib_list[i - 1]: return False return True"},{"question":"Write a Python program to read in a sequence of integers from the user and print them out in reverse order.","solution":"def reverse_sequence(sequence): Returns the reversed sequence of integers. return sequence[::-1] def get_sequence_from_user(): Asks the user to input a sequence of integers separated by spaces and returns the list of integers. user_input = input(\\"Enter a sequence of integers separated by spaces: \\") sequence = list(map(int, user_input.split())) return reverse_sequence(sequence) if __name__ == \\"__main__\\": reversed_seq = get_sequence_from_user() print(\\"Reversed sequence: \\", reversed_seq)"},{"question":"Develop a code to form a 5-dimensional tensor of size 3 x 3 x 3 x 3 x 3, filled with prime numbers ranging from 2 up to the maximum possible prime number that can be obtained considering the dimensions of the tensor. Also, ensure that your function handles the scenario when there are not enough prime numbers and throws an exception in such a case. Make sure to optimize your code for performance.","solution":"import numpy as np def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes(n): primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def create_tensor(): # The size of the tensor is 3 x 3 x 3 x 3 x 3 tensor_size = 3 * 3 * 3 * 3 * 3 # 243 elements primes = generate_primes(tensor_size) if len(primes) < tensor_size: raise Exception(\\"Insufficient number of prime numbers to fill the tensor.\\") tensor = np.array(primes).reshape(3, 3, 3, 3, 3) return tensor"},{"question":"Write a function for removing duplicates without using any built-in methods and with a time complexity of O(n). The function should only use a single additional data structure (e.g. a dictionary or set) to keep track of seen elements. The input list can contain any type of element, including nested lists, and the function should preserve the original order of the elements in the output list.","solution":"def remove_duplicates(arr): Removes duplicates from the input list while preserving the original order of elements. Uses a set to keep track of seen elements. Parameters: arr (list): The input list from which to remove duplicates. Returns: list: A new list with duplicates removed, preserving the order. seen = set() result = [] for item in arr: # Convert nested lists to tuples to allow them to be added to the set item_tuple = tuple(item) if isinstance(item, list) else item if item_tuple not in seen: seen.add(item_tuple) result.append(item) return result"},{"question":"Build a text-based dungeon crawler game in Python. The game should have at least three different types of monsters with varying stats, gold rewards for defeating monsters, and the player should be able to upgrade their attributes (health, strength, defense) with the gold they earn. The game should also have a save and load feature, allowing the player to save their progress and load their saved game state later.","solution":"import json import random class Monster: def __init__(self, name, health, attack, defense, gold_reward): self.name = name self.health = health self.attack = attack self.defense = defense self.gold_reward = gold_reward class Player: def __init__(self, health=100, strength=10, defense=5, gold=0): self.health = health self.strength = strength self.defense = defense self.gold = gold def upgrade(self, attribute): if attribute == \\"health\\": self.health += 20 elif attribute == \\"strength\\": self.strength += 2 elif attribute == \\"defense\\": self.defense += 1 def save_game(player, filename=\\"savegame.json\\"): with open(filename, 'w') as f: json.dump(player.__dict__, f) def load_game(filename=\\"savegame.json\\"): with open(filename, 'r') as f: data = json.load(f) return Player(**data) def battle(player, monster): print(f\\"A wild {monster.name} appears!\\") while player.health > 0 and monster.health > 0: damage_to_monster = max(0, player.strength - monster.defense) monster.health -= damage_to_monster print(f\\"You hit the {monster.name} for {damage_to_monster} damage.\\") if monster.health <= 0: print(f\\"The {monster.name} is defeated! You gained {monster.gold_reward} gold.\\") player.gold += monster.gold_reward return damage_to_player = max(0, monster.attack - player.defense) player.health -= damage_to_player print(f\\"The {monster.name} hits you for {damage_to_player} damage.\\") if player.health <= 0: print(\\"You have been defeated!\\") # Example monsters goblin = Monster(\\"Goblin\\", 30, 5, 2, 10) troll = Monster(\\"Troll\\", 50, 7, 5, 20) dragon = Monster(\\"Dragon\\", 100, 15, 10, 50) # Example gameplay player = Player() battle(player, goblin) save_game(player) player = load_game() player.upgrade(\\"strength\\") print(player.__dict__)"},{"question":"Can you provide an example of a Python program that simulates a game of rock, paper, and scissors? The program should take two user inputs, each representing a player's choice between rock, paper, and scissors, and then determine and display the winner of the game.","solution":"def rock_paper_scissors(player1, player2): Determines the winner of a rock, paper, scissors game. :param player1: Choice of player 1 ('rock', 'paper', or 'scissors') :param player2: Choice of player 2 ('rock', 'paper', or 'scissors') :return: Result of the game ('Player 1 wins', 'Player 2 wins', or 'Tie') choices = ['rock', 'paper', 'scissors'] if player1 not in choices or player2 not in choices: return \\"Invalid input\\" if player1 == player2: return \\"Tie\\" elif (player1 == 'rock' and player2 == 'scissors') or (player1 == 'scissors' and player2 == 'paper') or (player1 == 'paper' and player2 == 'rock'): return \\"Player 1 wins\\" else: return \\"Player 2 wins\\""},{"question":"Write a function to compute a hash code for a string. The function should use a custom hashing algorithm that takes into account both the characters, the length of the string and the position of each character in the string. The hash code should be computed using a prime number modulo and the final result should be in a signed 32-bit integer. The function should also handle string inputs with non-ASCII characters.","solution":"def custom_hash_code(s): Computes a custom hash code for a string. Args: s (str): The input string. Returns: int: The computed hash code as a signed 32-bit integer. # Define a prime number for the hashing algorithm prime = 31 # Define a modulo value for ensuring the result is a signed 32-bit integer mod = 2**31 - 1 hash_code = 0 # Iterate over each character and its position in the string for i, char in enumerate(s): hash_code = (hash_code * prime + ord(char)) % mod # Convert the hash code to a signed 32-bit integer range if hash_code > 2**31 - 1: hash_code -= 2**31 return hash_code"},{"question":"Given a list of words, write a function that returns the index of the last occurrence of a given word. If the word does not exist in the list, return -1. Now, to make things more challenging, you should avoid using any in-built Python functions or any additional space besides constant space.","solution":"def find_last_occurrence(words, target): Returns the index of the last occurrence of the target word in the list of words. If the target word does not exist in the list, returns -1. Assumes no in-built functions or additional space other than constant space. last_index = -1 for i in range(len(words)): if words[i] == target: last_index = i return last_index"},{"question":"Create a Python program to find the maximum value in the given array. However, you are not allowed to use any built-in functions or libraries to find the maximum value. You must implement your own algorithm to solve this problem. The array will contain only positive integers. [2, 4, 5, 7, 8]","solution":"def find_maximum(arr): Returns the maximum value in the array. if len(arr) == 0: return None max_value = arr[0] for value in arr: if value > max_value: max_value = value return max_value"},{"question":"Create a function in Python that takes a string as a parameter and returns a new string with the characters in reverse order.","solution":"def reverse_string(s): Returns the string s with characters in reverse order. return s[::-1]"},{"question":"Write me a function that takes in two parameters, a string and a list of integers. The function should reverse the string and then create a new list where each index of the reversed string has a random integer from the given list of integers. If the list of integers is shorter than the length of the string, then repeat the list until enough integers have been generated.","solution":"import random def reverse_and_assign_random_integers(s, int_list): Reverses the input string and creates a new list where each index of the reversed string has a random integer from the given list of integers. If the list of integers is shorter than the length of the string, repeat the list until enough integers are generated. if not int_list: raise ValueError(\\"The list of integers shouldn't be empty\\") reversed_string = s[::-1] random_integers = [random.choice(int_list) for _ in range(len(reversed_string))] return reversed_string, random_integers"},{"question":"Write a Python program to translate a linked list of words into a dictionary with keys as the words and values as the number of occurrences.","solution":"class Node: def __init__(self, word): self.word = word self.next = None def linked_list_to_dict(head): Converts a linked list of words into a dictionary with keys as words and values as the number of occurrences. :param head: Node, the head of the linked list :return: dict, dictionary containing word counts word_count = {} current = head while current is not None: if current.word in word_count: word_count[current.word] += 1 else: word_count[current.word] = 1 current = current.next return word_count"},{"question":"What is the difference between *args and **kwargs in Python? Provide an example of how each one can be used in a function. Explain why you would choose to use *args or **kwargs in different scenarios.","solution":"def sum_all(*args): Return the sum of all the arguments. return sum(args) def print_key_values(**kwargs): Print key-value pairs. key_values = [] for key, value in kwargs.items(): key_values.append(f\\"{key} = {value}\\") return key_values"},{"question":"Implement a Fibonacci series generator using Python that only generates the Fibonacci numbers up to a given input limit, and prints the sum of all the generated numbers. Additionally, the implementation should be optimized to have a time complexity of O(n) and a space complexity of O(1), where n is the given input limit.","solution":"def fibonacci_sum(limit): Generate Fibonacci numbers up to the given limit and return the sum of these numbers. if limit < 0: return 0 a, b = 0, 1 total_sum = 0 while a <= limit: total_sum += a a, b = b, a + b return total_sum"},{"question":"Given a list of integers, write a function \`sort_sublist\` that takes two additional arguments \`start\` and \`end\` as indexes, and sorts the sublist between these indexes in descending order, while keeping the rest of the list as is. If \`start\` and \`end\` are not specified, the entire list should be sorted in descending order. Your function should work even if the \`start\` and \`end\` values are out of bounds or if \`start\` is greater than \`end\`. Implement the function without using the built-in \`sort()\` function or any other sorting function in Python's standard library.","solution":"def sort_sublist(arr, start=None, end=None): This function sorts the sublist of arr from index start to end in descending order. If start and end are not provided, it sorts the entire list in descending order. # If start or end is None, adjust them to cover the entire list if start is None: start = 0 if end is None: end = len(arr) - 1 # Ensure start and end are within list bounds start = max(0, start) end = min(len(arr) - 1, end) # If start is greater than end, return the list as is if start > end: return arr # Create a sublist to be sorted sublist = arr[start:end + 1] # Implementing a simple bubble sort to sort the sublist in descending order n = len(sublist) for i in range(n): for j in range(0, n - i - 1): if sublist[j] < sublist[j + 1]: sublist[j], sublist[j + 1] = sublist[j + 1], sublist[j] # Replace the sorted sublist back into the original list arr[start:end + 1] = sublist return arr"},{"question":"Develop a Python script that performs operations on a pair of integer variables, 'a' and 'b', with values 5 and 10 respectively. Initially, set 'a' to 'b'. Then, implement a function to modify 'a' by augmenting its value through a series of mathematical operations involving 'b'. Ensure 'b' remains unaltered. Validate the operations by printing the transformation steps.","solution":"def modify_a(a, b): Perform operations on a using b and return the modified value of a. steps = [] # Initial assignment a = b steps.append(f'Initial assignment: a = b -> a = {a}') # A set of example operations to modify a using b a += b steps.append(f'After adding b to a: a += b -> a = {a}') a *= b steps.append(f'After multiplying a by b: a *= b -> a = {a}') a -= b steps.append(f'After subtracting b from a: a -= b -> a = {a}') a //= b steps.append(f'After floor dividing a by b: a //= b -> a = {a}') return a, steps # Test print to show operations (this part would typically be omitted in formal unit test scenarios) a, b = 5, 10 modified_a, operations = modify_a(a, b) for step in operations: print(step) print(f'Final value of a: {modified_a}')"},{"question":"Given an array of integers, write a Python program to form an array of the largest possible numbers of the same length by using the elements of the input array. You have to make sure that after rearranging the elements of the array, the order doesn't have to be strictly increasing or decreasing.","solution":"def largest_possible_numbers(arr): Form an array of the largest possible numbers of the same length by using the elements of the input array. return sorted(arr, reverse=True)"},{"question":"Generate a python code that adds a delimiter string between every list item.","solution":"def add_delimiter(lst, delimiter): Add a delimiter string between every list item. Parameters: lst (list): The list of elements. delimiter (str): The delimiter string to be added. Returns: str: The resulting string with delimiters added. return delimiter.join(map(str, lst))"},{"question":"Develop a Python program snippet to Display Low Transportation: Traffic Congestion for Analysis for Professionals. Incorporate if/else or switch/case statements to handle various cases related to the Responsibility. Dry-run, ensure your control flow logic is clear and well-commented.","solution":"def analyze_traffic_congestion(traffic_level): Analyze traffic congestion and print the associated message. :param traffic_level: str, one of ['Low', 'Medium', 'High'] :return: str, performance message if traffic_level == 'Low': return \\"Low Transportation: Traffic Congestion is minimal. Transportation is smooth.\\" elif traffic_level == 'Medium': return \\"Moderate Transportation: There is some congestion. Travel times might be slightly delayed.\\" elif traffic_level == 'High': return \\"High Transportation: Traffic Congestion is high. Travel is significantly delayed.\\" else: return \\"Unknown Traffic Level: Please provide a valid traffic level.\\" # Example usage # print(analyze_traffic_congestion('Low')) # print(analyze_traffic_congestion('Medium')) # print(analyze_traffic_congestion('High')) # print(analyze_traffic_congestion('Extreme'))"},{"question":"Write a code to convert an input string of numbers to an integer. The input string will contain only positive integers with a maximum length of 20 characters. The code should handle leading zeros in the input string and return the corresponding integer value. Additionally, the code should check if the input string is a palindrome and return True if it is, and False otherwise. The code should also handle the case where the input string contains non-numeric characters and raise an appropriate error message in that case.","solution":"def string_to_integer_and_palindrome(input_string): Converts an input string of numbers to an integer. Checks if the input string is a palindrome. Args: input_string (str): Input string containing numbers. Returns: tuple: (int, bool) - integer value of the input string, and a boolean indicating if the input string is a palindrome. Raises: ValueError: If the input string contains non-numeric characters. if not input_string.isdigit(): raise ValueError(\\"Input string contains non-numeric characters\\") integer_value = int(input_string) is_palindrome = input_string == input_string[::-1] return integer_value, is_palindrome"},{"question":"Write a method that takes in two strings and determines if the first string contains the second string as a substring. However, you are not allowed to use any built-in string search or substring methods. You must implement your own logic to solve this problem.","solution":"def contains_substring(main_string, sub_string): Determines if the main_string contains the sub_string as a substring without using any built-in search or substring methods. if sub_string == \\"\\": return True if main_string == \\"\\": return False main_length = len(main_string) sub_length = len(sub_string) for i in range(main_length - sub_length + 1): match = True for j in range(sub_length): if main_string[i + j] != sub_string[j]: match = False break if match: return True return False"},{"question":"Create a loop to print out all prime numbers less than or equal to the given integer n, with a time complexity of O(nlog(log(n))) and a space complexity of O(n).","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n. Implements the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, n + 1): if is_prime[i]: primes.append(i) for j in range(i * i, n + 1, i): is_prime[j] = False return primes"},{"question":"Create a function that takes in two sorted arrays of integers and returns a new array containing the common elements between the two arrays. The function should handle arrays of any size and there should be no duplicate elements in the output. Additionally, the function should have a time complexity of O(log n), where n is the length of the longer array.","solution":"from bisect import bisect_left def binary_search(arr, x): Helper function to perform binary search. Returns True if x is found in arr, otherwise False. i = bisect_left(arr, x) if i != len(arr) and arr[i] == x: return True return False def common_elements(arr1, arr2): Returns the common elements between two sorted arrays. There are no duplicate elements in the output. Time complexity is O(log n). # Ensure arr1 is the shorter array to optimize the search. if len(arr1) > len(arr2): arr1, arr2 = arr2, arr1 common = [] for element in arr1: if binary_search(arr2, element): common.append(element) return common"},{"question":"Write a python function to find the length of the longest increasing subsequence in a given list. The function should also return the actual subsequence.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence and the subsequence itself. if not arr: return 0, [] n = len(arr) lengths = [1] * n # lengths[i] will be the length of the LIS ending at index i previous = [-1] * n # previous[i] will store the index of the previous element in the LIS ending at i max_length_index = 0 # This will store the index of the last element of the longest increasing subsequence # Build the lengths and previous arrays for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 previous[i] = j max_length = max(lengths) max_length_index = lengths.index(max_length) # Reconstruct the longest increasing subsequence lis = [] current_index = max_length_index while current_index != -1: lis.append(arr[current_index]) current_index = previous[current_index] lis.reverse() return max_length, lis"},{"question":"Create a dictionary for counting the occurrence of each letter in the given string. However, exclude any whitespace characters, punctuation marks, and numbers from being counted. Additionally, the solution should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the string.","solution":"def count_letters(s): Counts the occurrence of each letter in the given string. Whitespace, punctuation marks, and numbers are excluded. Args: s (str): The input string. Returns: dict: A dictionary with letters as keys and their counts as values. letter_counts = {} for char in s: if char.isalpha(): # Check if the character is a letter char = char.lower() # Convert to lowercase for case insensitivity if char in letter_counts: letter_counts[char] += 1 else: letter_counts[char] = 1 return letter_counts"},{"question":"Write a code that returns a 2-D array of size n by m containing all prime numbers where n and m are prime numbers greater than 2. n = 11 and m = 13","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_prime_2d_array(n, m): Returns a 2-D array of size n by m containing prime numbers. if not is_prime(n) or not is_prime(m): raise ValueError(\\"Both n and m must be prime numbers greater than 2.\\") primes = [] num = 2 while len(primes) < (n * m): if is_prime(num): primes.append(num) num += 1 prime_2d_array = [] index = 0 for i in range(n): row = [] for j in range(m): row.append(primes[index]) index += 1 prime_2d_array.append(row) return prime_2d_array # Example usage result = generate_prime_2d_array(11, 13) for row in result: print(row)"},{"question":"Consider the following Python function which employs a binary search strategy to locate a specified element within a sorted array. Identify and correct any errors present, and provide a detailed explanation of the function's inner workings. Also, broaden its use-case scenarios by implementing it as a universal function that can handle various data types, not just integers.","solution":"def binary_search(arr, x): Performs a binary search to find the element x in the sorted array arr. :param arr: List of elements of any comparable type (must be sorted). :param x: The element to search for. :return: Index of x in arr if present; -1 otherwise. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 # Debug statement (can be removed in production) print(f\\"Checking middle position {mid} with value {arr[mid]}\\") if arr[mid] == x: return mid elif arr[mid] < x: left = mid + 1 else: right = mid - 1 return -1"},{"question":"I am struggling to understand the concept of scope in Python, particularly when it comes to nested functions. Could you provide a comprehensive guide that explains how the scope is handled in Python, starting from the basics and then moving to more complex scenarios involving nested functions, closures, and how variables are looked up in these cases?","solution":"def outer_function(): outer_var = \\"I am outer\\" def inner_function(): inner_var = \\"I am inner\\" return outer_var, inner_var return inner_function() def make_multiplier(x): def multiplier(n): return x * n return multiplier def variable_lookup(): value = \\"local value\\" def nested(): nonlocal value value = \\"enclosing value\\" return value nested_value = nested() return value, nested_value"},{"question":"Write a Python program to sort a list of dictionaries based on a specific key in each dictionary followed by another key.","solution":"def sort_list_of_dicts(data, primary_key, secondary_key): Sorts a list of dictionaries based on primary_key and secondary_key. :param data: List of dictionaries to sort :param primary_key: The primary key to sort by :param secondary_key: The secondary key to sort by :return: Sorted list of dictionaries return sorted(data, key=lambda x: (x[primary_key], x[secondary_key])) # Example usage: # data = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Alice', 'age': 25}] # sorted_data = sort_list_of_dicts(data, 'name', 'age') # print(sorted_data)"},{"question":"Given a list of strings, write a Python program to group the strings based on the frequency of characters used in them. For example, if the list is [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"], the output should group the anagrams together: { \\"eat\\": [\\"eat\\", \\"tea\\", \\"ate\\"], \\"tan\\": [\\"tan\\", \\"nat\\"], \\"bat\\": [\\"bat\\"] }.","solution":"from collections import defaultdict def group_strings_by_character_frequency(strings): Groups the given list of strings based on the frequency of characters used in them. Args: strings (list of str): List of strings to be grouped. Returns: dict: A dictionary where the key is a sorted string that represents the character frequency and the value is a list of strings from the input that have the same character frequency. anagrams = defaultdict(list) for string in strings: sorted_string = ''.join(sorted(string)) anagrams[sorted_string].append(string) return {value[0]: value for value in anagrams.values()}"},{"question":"Please write a Python function that uses a regular expression to match and extract a string pattern, and then checks the extracted string against a given prefix and suffix string. Additionally, the function should validate the extracted string's length against a provided integer constraint.","solution":"import re def match_and_check(pattern, text, prefix, suffix, length): Matches and extracts a string pattern from the text using regex, then checks the extracted string against a given prefix and suffix strings, and validates its length against a provided integer constraint. :param pattern: Regex pattern to extract the string from the text. :param text: Text to search the pattern in. :param prefix: Prefix to check in the extracted string. :param suffix: Suffix to check in the extracted string. :param length: Length constraint to validate the extracted string's length. :return: Boolean indicating if all checks passed. match = re.search(pattern, text) if not match: return False extracted_string = match.group(0) if not (extracted_string.startswith(prefix) and extracted_string.endswith(suffix) and len(extracted_string) == length): return False return True"},{"question":"Transform the following piece of code into a valid Python program that calculates the sum of two numbers, ensuring that the input is a valid positive integer and the sum is greater than 100.","solution":"def validate_positive_integer(value): Validates if the provided value is a positive integer. Parameters: value (int): The value to be validated. Returns: bool: True if the value is a positive integer, False otherwise. return isinstance(value, int) and value > 0 def calculate_sum(a, b): Returns the sum of a and b if both are valid positive integers and their sum is greater than 100. Parameters: a (int): The first value. b (int): The second value. Returns: int: The sum of a and b. Raises: ValueError: If any of the inputs is not a positive integer or if the sum is not greater than 100. if not validate_positive_integer(a) or not validate_positive_integer(b): raise ValueError(\\"Both inputs must be positive integers.\\") result = a + b if result <= 100: raise ValueError(\\"The sum must be greater than 100.\\") return result"},{"question":"Generate code to generate all possible permutations of strings of length n with given k distinct characters.","solution":"from itertools import product def generate_permutations(k, n): Generate all possible permutations of strings of length n with k distinct characters. Parameters: k (int): Number of distinct characters n (int): Length of the strings Returns: list: List of all permutations if k < 1 or n < 1: return [] distinct_characters = [chr(i) for i in range(97, 97 + k)] # Generate k distinct characters starting from 'a' all_permutations = [''.join(p) for p in product(distinct_characters, repeat=n)] return all_permutations"},{"question":"Write a Python function to check if two lists have the same elements with the same frequency, considering the order of elements. The function should return True if the lists are equivalent, and False otherwise.","solution":"def are_lists_equivalent(list1, list2): Checks if two lists have the same elements with the same frequency and order. Args: list1 (list): The first list to compare. list2 (list): The second list to compare. Returns: bool: True if the lists are equivalent, False otherwise. return list1 == list2"},{"question":"Write a script in Python that takes a list of strings and prints out the first letter of each string in uppercase without using the built-in \`upper()\` method.","solution":"def first_letter_uppercase(strings): Returns the first letter of each string in the input list in uppercase. result = [] for string in strings: if string: first_letter = string[0] uppercase_letter = chr(ord(first_letter) - 32) if 'a' <= first_letter <= 'z' else first_letter result.append(uppercase_letter) return result"},{"question":"Write a function that takes in a string and returns true if it is a valid IPv4 address and false otherwise. A valid IPv4 address consists of four decimal numbers, separated by periods, where each decimal number is between 0 and 255. Leading zeros are not allowed. For example, \\"127.0.0.1\\" is a valid IPv4 address, but \\"127.01.0.1\\" and \\"127.0.0.001\\" are not.","solution":"def is_valid_ipv4_address(address): Returns True if the provided string is a valid IPv4 address, False otherwise. parts = address.split('.') if len(parts) != 4: return False for part in parts: # Check if the part is a number if not part.isdigit(): return False # Check if the number is between 0 and 255 num = int(part) if num < 0 or num > 255: return False # Check for leading zeros if part.startswith('0') and len(part) > 1: return False return True"},{"question":"Write a Python program to sort a given array using the Quicksort algorithm.","solution":"def quicksort(arr): Sorts an array using the Quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Using the \\"duck typing\\" concept in Python, write a function that performs an operation only if the passed argument is \\"duck-like\\". In this context, \\"duck-like\\" means the presence of a specific method (like \`quack()\`) in the passed object. The function should check if the object has the method \`quack()\`, and if it does, it should call this method. If the argument does not have this method, the function should raise an appropriate exception.","solution":"class DuckNotFoundError(Exception): Custom exception to indicate that the object is not duck-like. pass def perform_duck_operation(duck): Calls the quack method on the provided object if it exists. Raises DuckNotFoundError if the quack method does not exist. if hasattr(duck, 'quack') and callable(getattr(duck, 'quack')): return duck.quack() else: raise DuckNotFoundError(\\"The provided object is not duck-like as it does not have a quack method.\\")"},{"question":"Create a function in python to find the minimum value in an array, but without using any built-in functions or libraries like min() or sorted(). The array can contain both positive and negative integers.","solution":"def find_min(arr): Returns the minimum value in an array without using built-in functions. if not arr: raise ValueError(\\"Array is empty\\") min_value = arr[0] for num in arr: if num < min_value: min_value = num return min_value"},{"question":"Write a Python program that not only verifies if a given string can be a valid floating-point number but also checks the precision of the floating-point number and validates the input based on scientific notation. For instance, the program should be able to correctly identify whether the input string can be a standard decimal floating-point number like \\"123.456\\", a number with an exponent like \\"1.5E2\\", or invalid inputs like \\"123.456.789\\" or \\"abc\\".","solution":"import re def is_valid_float_number(s: str) -> bool: Checks if the given string is a valid floating-point number, optionally in scientific notation. float_pattern = re.compile(r'^[+-]?(d+(.d*)?|.d+)([eE][+-]?d+)?') # Attempt to match the pattern with the input string if float_pattern.match(s): return True else: return False"},{"question":"Write a program to detect a loop in a linked list and return the starting node of the loop. If there is no loop, return None. The program should have a time complexity of O(n) and a space complexity of O(1).","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle(head): Detects a loop in a linked list. If a loop is found, it returns the starting node of the loop. If no loop is detected, it returns None. if not head or not head.next: return None slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if not fast or not fast.next: return None slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"I would like to write a Python Flask app that has functionality for managing clients for an IT consulting company. It should be able to create new clients, view clients, update clients, and delete clients. Can you provide a code example for how I might start building this application?","solution":"from flask import Flask, request, jsonify app = Flask(__name__) clients = {} @app.route('/clients', methods=['POST']) def create_client(): data = request.json client_id = data.get('id') if client_id in clients: return jsonify({'error': 'Client already exists'}), 400 clients[client_id] = data return jsonify(data), 201 @app.route('/clients/<client_id>', methods=['GET']) def get_client(client_id): client = clients.get(client_id) if not client: return jsonify({'error': 'Client not found'}), 404 return jsonify(client), 200 @app.route('/clients/<client_id>', methods=['PUT']) def update_client(client_id): data = request.json if client_id not in clients: return jsonify({'error': 'Client not found'}), 404 clients[client_id] = data return jsonify(data), 200 @app.route('/clients/<client_id>', methods=['DELETE']) def delete_client(client_id): if client_id not in clients: return jsonify({'error': 'Client not found'}), 404 del clients[client_id] return jsonify({'message': 'Client deleted'}), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a code to find the maximum subarray sum in an array using dynamic programming.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum using dynamic programming approach. Parameters: arr (list): List of integers Returns: int: Maximum subarray sum if len(arr) == 0: return 0 max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Generate a python program to print a multiplication table of a given number.","solution":"def multiplication_table(number, up_to=10): Prints the multiplication table for the given number up to 'up_to' (default is 10). for i in range(1, up_to + 1): print(f\\"{number} x {i} = {number * i}\\")"},{"question":"Write a Python program that converts a given RGB color to its corresponding hexadecimal color code. The program should also validate the input RGB values, ensuring that they fall within the valid range (0-255) for each component. If any RGB value is out of range, the program should print an error message and terminate.","solution":"def rgb_to_hex(r, g, b): Converts RGB values to hexadecimal color code. Args: r (int): Red component (0-255). g (int): Green component (0-255). b (int): Blue component (0-255). Returns: str: Hexadecimal color code in the format '#RRGGBB'. Raises: ValueError: If any of the RGB values are out of range (0-255). if not (0 <= r <= 255): raise ValueError(\\"Red value is out of range (0-255).\\") if not (0 <= g <= 255): raise ValueError(\\"Green value is out of range (0-255).\\") if not (0 <= b <= 255): raise ValueError(\\"Blue value is out of range (0-255).\\") return '#{:02X}{:02X}{:02X}'.format(r, g, b)"},{"question":"Modify the following code to turn it into a function that takes a list and an index as parameters and returns the element at the given index if it is within the list bounds, otherwise, returns None.","solution":"def get_element_at_index(lst, index): Returns the element at the given index if it is within the list bounds. Otherwise, returns None. if 0 <= index < len(lst): return lst[index] return None"},{"question":"How can I develop a Python program to print out the most recent prime numbers that are less than a provided input number?","solution":"def is_prime(n): Return True if the number is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def find_primes_less_than(n): Return a list of all prime numbers less than the given number n. primes = [] for i in range(2, n): if is_prime(i): primes.append(i) return primes # Example usage: # primes_list = find_primes_less_than(10) # print(primes_list) # Output: [2, 3, 5, 7]"},{"question":"Write a Python function that converts all the strings in a given list to lowercase. The function should take a list of strings as an input and return a new list where each string is converted to lowercase. Optionally, validate the input list to ensure it only contains strings before performing the conversion.","solution":"def convert_to_lowercase(strings): Converts all the strings in a given list to lowercase. Args: strings (list): A list of strings Returns: list: A new list where each string is converted to lowercase Raises: ValueError: If the input is not a list or if the list contains non-string elements if not isinstance(strings, list): raise ValueError(\\"Input should be a list\\") if not all(isinstance(s, str) for s in strings): raise ValueError(\\"All elements in the list should be strings\\") return [s.lower() for s in strings]"},{"question":"Given a 2D list, write a Python program to find the maximum value in each column and store these values in a list. However, there's a twist. You have to handle possible exceptions that may arise from the empty list or varying column lengths. Also, refer to the below piece of code that has some errors and improve upon it.","solution":"def find_column_max(matrix): Find the maximum value in each column of a 2D list (matrix). Parameters: - matrix: List of lists containing numerical values Returns: - A list containing the maximum value for each column. Raises: - ValueError: If the matrix is empty or columns have varying lengths. if not matrix or not matrix[0]: raise ValueError(\\"The matrix must not be empty.\\") num_columns = len(matrix[0]) for row in matrix: if len(row) != num_columns: raise ValueError(\\"All rows must have the same number of columns.\\") max_values = [float('-inf')] * num_columns for row in matrix: for col_index in range(num_columns): if row[col_index] > max_values[col_index]: max_values[col_index] = row[col_index] return max_values"},{"question":"Write a function that uses recursion to return the Fibonacci sequence up to n numbers. Your function should implement error checks to ensure that the input n is a positive integer greater than or equal to 2. Additionally, optimize the function to have a time complexity of O(n). The function should also handle large values of n (up to 10^6) efficiently.","solution":"def fibonacci_sequence(n): Returns the first n numbers in the Fibonacci sequence. Uses an iterative approach to optimize time complexity. if not isinstance(n, int) or n < 2: raise ValueError(\\"Input must be an integer greater than or equal to 2.\\") fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Can you write code in Python to sort an array of integers without using any in-built functions or libraries? Provide a detailed explanation of the sorting algorithm you choose to implement.","solution":"def bubble_sort(arr): Sorts a list of integers using the Bubble Sort algorithm. :param arr: List of integers :return: Sorted list of integers n = len(arr) for i in range(n): # Track whether we made any swaps in this pass swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no swaps were made, the list is already sorted if not swapped: break return arr"},{"question":"Write a function in Python that takes in a positive integer greater than 1 and returns the sum of its digits. The function should handle integers up to 10^18. Your solution should have a time complexity of O(log n), where n is the given number.","solution":"def sum_of_digits(n): Returns the sum of the digits of a positive integer greater than 1. if n <= 1: raise ValueError(\\"Input must be greater than 1\\") return sum(int(digit) for digit in str(n))"},{"question":"Create a program that determines whether a given number is a prime and prints all the prime numbers between 1 and the given number. Additionally, the program should handle large numbers efficiently and provide an optimized solution that has a time complexity of O(sqrt(n)).","solution":"import math def is_prime(n): Determines whether a given number n is a prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_up_to(n): Returns a list of prime numbers from 1 to n. primes = [] for num in range(2, n + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a function called \`fibonacci_slice\` that takes in two parameters: \`sequence\` (a list or tuple of integers) and \`n\` (an integer). The function should return a new list containing the first \`n\` elements of the \`sequence\` that are Fibonacci numbers.","solution":"def is_fibonacci(num): Helper function to check if a number is a Fibonacci number. a, b = 0, 1 while b < num: a, b = b, a + b return b == num or a == num def fibonacci_slice(sequence, n): Returns the first n elements of the sequence that are Fibonacci numbers. result = [] for num in sequence: if is_fibonacci(num): result.append(num) if len(result) == n: break return result"},{"question":"Build a Python script that inserts a line at the start of every .txt file in a directory. The line that needs to be inserted is \\"This is the beginning of the file\\". Make sure your script can handle errors gracefully and does not modify files that can't be opened or are read-only.","solution":"import os def insert_line_to_txt_files(directory, line=\\"This is the beginning of the file\\"): Inserts a line at the start of every .txt file in the specified directory. for filename in os.listdir(directory): if filename.endswith('.txt'): filepath = os.path.join(directory, filename) try: with open(filepath, 'r+') as file: content = file.read() file.seek(0, 0) file.write(line.strip() + 'n' + content) except (IOError, OSError) as e: print(f\\"Could not process file {filename}: {e}\\")"},{"question":"Can you write a Python program that determines whether the provided string is a half-rotation palindrome? A half-rotation palindrome is a string that when divided into equal halves, the second half is the reverse of the first one. For example, 'racecar', where the first half is 'rac' and its reverse ('car') forms the second half, making it a half-rotation palindrome.","solution":"def is_half_rotation_palindrome(s): Determines if the provided string is a half-rotation palindrome. A half-rotation palindrome is a string where the second half is the reverse of the first half. # Check if the string has an even length if len(s) % 2 != 0: return False n = len(s) // 2 # Split into two halves first_half = s[:n] second_half = s[n:] # Check if the second half is the reverse of the first half return first_half == second_half[::-1]"},{"question":"Given a list of words, write a program to convert the list into a set while removing any duplicate elements. The program should also sort the resulting set in alphabetical order. Additionally, the program should only use built-in functions and methods and avoid using any loops or conditional statements.","solution":"def convert_and_sort(words): Converts a list of words into a set to remove duplicates and then returns a sorted list of the unique words. Args: words: list of str - The list of words. Returns: list of str - The sorted list of unique words. return sorted(set(words))"},{"question":"Write a Python function that takes two arguments, an iterable and a target value, and returns the number of times the target value appears in the iterable. The iterable could be a list, a tuple, a string, or any other type that supports iteration. Include error handling for cases where the input is not iterable or the target is not of a compatible type for comparison.","solution":"def count_occurrences(iterable, target): Returns the number of times the target value appears in the iterable. if not hasattr(iterable, '__iter__'): raise TypeError(\\"First argument must be an iterable\\") count = 0 try: for item in iterable: if item == target: count += 1 except TypeError: raise TypeError(\\"Target value is not compatible for comparison\\") return count"},{"question":"Write a function in Python that takes a list of integers and returns the first integer that appears an odd number of times.","solution":"def first_odd_occurrence(nums): Returns the first integer that appears an odd number of times in the list. If no such integer is found, returns None. count_dict = {} for num in nums: count_dict[num] = count_dict.get(num, 0) + 1 for num in nums: if count_dict[num] % 2 != 0: return num return None"},{"question":"Define a Python Function which accepts a string as an argument and counts the number of vowels in it.","solution":"def count_vowels(s): Count the number of vowels in the given string. Args: s (str): The string to count vowels in. Returns: int: The number of vowels in the string. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels)"},{"question":"Write a function in Python to check if a given string is an isogram (a word or phrase without a repeating letter). Additionally, modify your function to identify if a phrase is a perfect isogram (a word or phrase in which every letter of the alphabet is used exactly once). Ensure your solution is case-insensitive and disregard spaces or punctuation.","solution":"import string def is_isogram(s): Check if the given string is an isogram. An isogram is a word or phrase without a repeating letter. This function is case-insensitive and disregards spaces and punctuation. s = s.lower() char_set = set() for char in s: if char in string.ascii_lowercase: if char in char_set: return False char_set.add(char) return True def is_perfect_isogram(s): Check if the given string is a perfect isogram. A perfect isogram is a word or phrase in which every letter of the alphabet is used exactly once. This function is case-insensitive and disregards spaces and punctuation. s = s.lower() char_count = [0] * 26 for char in s: if char in string.ascii_lowercase: char_count[ord(char) - ord('a')] += 1 return all(count == 1 for count in char_count)"},{"question":"Formulate a for loop in Python that traverses a two-dimensional array. However, instead of simply printing each item, your task is to implement a function that identifies if each element is a prime number or not. If the element is a prime number, print out its position in the array along with the number. Consider the array to be m x n where m is the number of rows and n is the number of columns.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def traverse_and_check_primes(matrix): Traverses a 2D array (matrix). For each element, checks if it is a prime number. If the element is a prime number, prints its position and value. for i in range(len(matrix)): for j in range(len(matrix[i])): if is_prime(matrix[i][j]): print(f\\"Prime number {matrix[i][j]} found at position ({i}, {j})\\")"},{"question":"Create a Python Flask application for about page of a website. The application should have a route for the about page and should display the content using HTML.","solution":"from flask import Flask, render_template_string app = Flask(__name__) @app.route('/about') def about(): Route to display the about page. about_html = <html> <head> <title>About Us</title> </head> <body> <h1>About Us</h1> <p>Welcome to the about page of our website!</p> </body> </html> return render_template_string(about_html) if __name__ == '__main__': app.run(debug=True)"},{"question":"Human: Hi, you've been assigned to me to help answer questions. Let's dive right in. How do I create type hints in Python for a function that has multiple input types and return types? Also, I'm particularly interested in knowing how to create a generic function that can work with different types of data structures.","solution":"from typing import Union, TypeVar, List def process_data(data: Union[int, float, str]) -> Union[int, float, str]: Process different types of data and return a result of the same type. if isinstance(data, int): return data * 2 elif isinstance(data, float): return data + 1.0 elif isinstance(data, str): return data[::-1] else: raise ValueError(\\"Unsupported type\\") T = TypeVar('T') def reverse_items(items: List[T]) -> List[T]: Function that reverses a list of any data type. return items[::-1]"},{"question":"How do I launch a web application using the Flask framework?","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def home(): return \\"Hello, Flask!\\" if __name__ == '__main__': app.run(debug=True)"},{"question":"Design an algorithm that can identify and highlight all palindromic substrings within a given string. For example, if the input string is \\"racecar\\", the algorithm should output all palindromic substrings such as \\"aceca\\", \\"cec\\", \\"a\\", \\"c\\", \\"e\\", \\"r\\".","solution":"def is_palindrome(s): Helper function to check if a given string is a palindrome. return s == s[::-1] def find_palindromic_substrings(s): Returns a list of all palindromic substrings in the given string s. n = len(s) palindromic_substrings = [] for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): palindromic_substrings.append(substring) return palindromic_substrings"},{"question":"Develop an OpenCV Python script to detect a red ball within an image, considering lighting variations and partial occlusions.","solution":"import cv2 import numpy as np def detect_red_ball(image_path): Detect a red ball within an image. :param image_path: path to the image file :return: the image with the red ball detected and highlighted # Load the image image = cv2.imread(image_path) if image is None: raise ValueError(\\"Image not found or unable to load.\\") # Convert the image to the HSV color space hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) # Define the red color range in HSV lower_red = np.array([0, 50, 50]) upper_red = np.array([10, 255, 255]) mask1 = cv2.inRange(hsv, lower_red, upper_red) lower_red = np.array([170, 50, 50]) upper_red = np.array([180, 255, 255]) mask2 = cv2.inRange(hsv, lower_red, upper_red) # Combine the two masks to capture all red hues mask = mask1 | mask2 # Apply the mask on the original image result = cv2.bitwise_and(image, image, mask=mask) # Find contours in the masked image contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) # Iterate over contours and highlight them for cnt in contours: area = cv2.contourArea(cnt) if area > 500: # Filter out small contours that could be noise approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True) if len(approx) > 8: # Check for circular-like shape (heuristic) cv2.drawContours(image, [approx], 0, (0, 255, 0), 3) return image"},{"question":"How can I convert a Python string, representing a number, into a double type without using the float() constructor? I want to parse strings like \\"-1\\" and \\"3.14\\". For context, I'm working on a functional clone of the C language as a Python module and I'm currently writing the standard library.","solution":"def str_to_double(s): Converts a string representing a number into a double type (float in Python). try: return 0.0 + eval(s) except: raise ValueError(\\"Invalid string for conversion to double: {}\\".format(s))"},{"question":"Design a Python function that accepts a string containing lowercase and uppercase letters as input, and utilizes the ASCII table to convert all lowercase letters in the string to uppercase. The function should then return the modified string with all letters in uppercase.","solution":"def to_uppercase(s): Converts all lowercase letters in the input string to uppercase and returns the new string. result = [] for char in s: if 'a' <= char <= 'z': # Convert lowercase to uppercase using ASCII value manipulation result.append(chr(ord(char) - 32)) else: result.append(char) return ''.join(result)"},{"question":"Write a function that takes in two sorted arrays as input and merges them into a single sorted array. The function should handle arrays of different lengths and should not use any built-in sorting functions or methods. You can assume that the input arrays will only contain non-negative integers.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: A single sorted array that merges arr1 and arr2. merged = [] i, j = 0, 0 # Traverse both arrays and append the smaller element to the merged array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If there are remaining elements in arr1, append them to merged while i < len(arr1): merged.append(arr1[i]) i += 1 # If there are remaining elements in arr2, append them to merged while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Compose a Python algorithm that extracts prime numbers from a provided series of numerical values, including an evaluation for the code's efficiency and its space complexity.","solution":"def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(numbers): Function to extract prime numbers from a provided series of numerical values. Parameters: numbers (list): List of integers to extract primes from. Returns: list: List of prime numbers extracted from the input list. primes = [num for num in numbers if is_prime(num)] return primes # Efficiency Evaluation: # Time Complexity: The is_prime function has O(sqrt(n)) complexity. # For each number in the list, we check primality, so overall complexity is O(m * sqrt(n)), # where m is the number of elements in the list. # Space Complexity: O(p), where p is the number of primes found (additional space for the result list)."},{"question":"Create a Python function that not only converts Hexadecimal numerals into their binary equivalents, but also includes the functionality to convert between all major numeral systems including Binary, Octal, Decimal, and Hexadecimal.","solution":"def convert_number(input_num, input_base, output_base): Convert a number from one base to another. Parameters: input_num (str): The number to convert, in string format. input_base (int): The base of the input number (2, 8, 10, or 16). output_base (int): The base of the output number (2, 8, 10, or 16). Returns: str: The converted number in string format. # Convert input number to decimal (base 10) if input_base == 10: decimal_value = int(input_num) else: decimal_value = int(input_num, input_base) # Convert decimal number to the output base if output_base == 10: return str(decimal_value) elif output_base == 2: return bin(decimal_value)[2:] elif output_base == 8: return oct(decimal_value)[2:] elif output_base == 16: return hex(decimal_value)[2:].upper()"},{"question":"Create a Python function that computes a Fibonacci sequence up to a designated \\"n-th\\" spot. This function should also incorporate a mechanism for cache storage to enhance performance for scenarios with repeated function calls. Below is a flawed function; modify it to include the caching mechanism and fix any other potential issues.","solution":"def fibonacci(n, cache={}): Computes Fibonacci sequence up to the n-th number with caching. Parameters: n (int): The position in the Fibonacci sequence to compute. Returns: int: The Fibonacci number at position n. if n in cache: return cache[n] if n <= 1: return n cache[n] = fibonacci(n - 1, cache) + fibonacci(n - 2, cache) return cache[n]"},{"question":"We will give you a list of lists, where each sublist represents a row of a 2D grid. The grid will consist of either 0s or 1s. Write a function that rotates the grid 90 degrees clockwise and returns it.","solution":"def rotate_grid_90_degrees(grid): Rotates a 2D grid 90 degrees clockwise. :param grid: List of lists, where each sublist represents a row of a 2D grid. :return: A 2D grid rotated 90 degrees clockwise. # Transpose the grid transposed_grid = list(zip(*grid)) # Reverse each row to turn the columns into rows rotated_grid = [list(row)[::-1] for row in transposed_grid] return rotated_grid"},{"question":"Develop a function 'detectDupes' that recognizes if a tuple has more than one of the same entries. Additionally, the function should return not just a boolean, but also the duplicated entries. Consider case sensitivity for string entries. For instance, tuple=(2, 6, \\"Dog\\", \\"dog\\", 6).","solution":"def detectDupes(input_tuple): Detects duplicates in a tuple and returns a boolean indicating if duplicates exist, along with a set of duplicated entries. Args: input_tuple (tuple): The input tuple to check for duplicates. Returns: tuple(bool, set): A tuple containing: - A boolean that is True if duplicates exist, False otherwise. - A set of duplicated entries. seen = set() duplicates = set() for item in input_tuple: if item in seen: duplicates.add(item) else: seen.add(item) return (len(duplicates) > 0, duplicates)"},{"question":"Develop a Python function named \`custom_sorting\` that accepts two arguments: a list of integers \`arr\` and a Boolean value \`descending\`.","solution":"def custom_sorting(arr, descending): Sorts the list of integers 'arr' either in ascending or descending order depending on the value of 'descending'. Parameters: arr (list of int): List of integers to sort. descending (bool): If True, sort in descending order, otherwise sort in ascending order. Returns: list of int: Sorted list of integers. return sorted(arr, reverse=descending)"},{"question":"In the pursuit of developing a Python program that reads a text file and counts the frequency of each word, I'm encountering an issue: the code is not handling punctuation and case sensitivity correctly, leading to inaccurate results. Could you propose a method to preprocess the text so that words are separated, punctuation is ignored, and the counting is case insensitive?","solution":"import string def preprocess_text(text): Preprocess the input text by converting it to lowercase, removing punctuation, and returning a list of words. # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans('', '', string.punctuation)) # Split text into words words = text.split() return words def count_word_frequencies(text): Counts the frequency of each word in the input text after preprocessing. Returns a dictionary with words as keys and their frequencies as values. words = preprocess_text(text) word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"Write a code to construct the following diamond pattern using a user defined function and loops. Incorporate input validation to ensure the user enters an odd number for the height of the diamond pattern.","solution":"def print_diamond(n): Prints a diamond pattern of height n. n must be an odd number greater than 0. if n <= 0 or n % 2 == 0: raise ValueError(\\"Height must be an odd number greater than 0.\\") mid_point = n // 2 for i in range(n): if i <= mid_point: # Top half and middle of the diamond stars_count = 2 * i + 1 else: # Bottom half of the diamond stars_count = 2 * (n - i - 1) + 1 spaces = (n - stars_count) // 2 print(\\" \\" * spaces + \\"*\\" * stars_count + \\" \\" * spaces)"},{"question":"Design a Python function that selects a random file from a specified directory, but also integrates an error handling mechanism to handle situations where the directory is empty or non-existent. Additionally, include functionality to exclude certain file types (like .txt or .csv) from selection.","solution":"import os import random def select_random_file(directory, exclude_extensions=[]): Selects a random file from the specified directory, excluding files with certain extensions. :param directory: The directory to select the file from. :param exclude_extensions: A list of file extensions to exclude from the selection. :return: The path to the randomly selected file. try: # Check if the directory exists if not os.path.exists(directory): raise FileNotFoundError(f\\"The directory '{directory}' does not exist.\\") # List all files in the directory files = [file for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file)) and not any(file.endswith(ext) for ext in exclude_extensions)] # Check if the directory is empty or all files are excluded if not files: raise ValueError(\\"The directory is empty or no files match the criteria.\\") # Select and return a random file return os.path.join(directory, random.choice(files)) except Exception as e: return str(e)"},{"question":"Use Python to write a code that displays a multiplication table of a given number 'n' up to a given range 'm'. Furthermore, implement an error handling mechanism for the cases where the input is not a number or the number is negative.","solution":"def multiplication_table(n, m): Returns a multiplication table of the given number 'n' up to the given range 'm'. Checks if 'n' and 'm' are positive integers. if not isinstance(n, (int, float)) or not isinstance(m, int): raise ValueError(\\"Both 'n' must be a number and 'm' must be a positive integer.\\") if n < 0 or m < 0: raise ValueError(\\"'n' and 'm' must be non-negative.\\") table = {} for i in range(1, m+1): table[i] = n * i return table"},{"question":"Design a Python function that rounds off a collection of complex numbers to the nearest integer part while maintaining their imaginary components intact. Additionally, sort the list in descending order based on the rounded real part.","solution":"def round_and_sort_complex_numbers(numbers): This function rounds off the real part of each complex number to the nearest integer while maintaining their imaginary part intact. It then sorts the list in descending order based on the rounded real part. :param numbers: List of complex numbers. :return: List of complex numbers sorted by rounded real part in descending order. # Round the real part and create a list of tuples (rounded, original) rounded_numbers = [(complex(round(c.real), c.imag), c) for c in numbers] # Sort the tuples by the first element (rounded real part) in descending order sorted_numbers = sorted(rounded_numbers, key=lambda x: x[0].real, reverse=True) # Return the sorted original complex numbers return [item[1] for item in sorted_numbers]"},{"question":"Write a python code that will read a string and count the frequency of every letter in that string. Ignore case sensitivity and non-alphabetical characters.","solution":"import string def count_letter_frequency(input_string): Returns a dictionary with the frequency of each letter in the input string. This function ignores case sensitivity and non-alphabetical characters. input_string = input_string.lower() # Ignore case sensitivity frequency_dict = {} for char in input_string: if char in string.ascii_lowercase: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Create a function that converts temperatures from Celsius to Fahrenheit and another function to convert Fahrenheit to Celsius. Ensure both functions are thoroughly error checked to handle non-numeric or negative values for absolute temperature. As an extra challenge, include a feature that identifies and manages any potential anomalies in temperature input, such as temperatures below absolute zero.","solution":"def celsius_to_fahrenheit(celsius): Converts a temperature from Celsius to Fahrenheit. If the input is not numeric or below absolute zero, raises a ValueError. try: celsius = float(celsius) except ValueError: raise ValueError(\\"Temperature must be a numerical value.\\") if celsius < -273.15: raise ValueError(\\"Temperature below absolute zero is not possible.\\") return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts a temperature from Fahrenheit to Celsius. If the input is not numeric or below absolute zero, raises a ValueError. try: fahrenheit = float(fahrenheit) except ValueError: raise ValueError(\\"Temperature must be a numerical value.\\") if fahrenheit < -459.67: raise ValueError(\\"Temperature below absolute zero is not possible.\\") return (fahrenheit - 32) * 5/9"},{"question":"Task: Write Python code to find the minimum number of moves required to move all disks of different size from one peg to another, following the Tower of Hanoi rules.","solution":"def hanoi_moves(n): Returns the minimum number of moves required to solve the Tower of Hanoi puzzle for n disks. if n <= 0: return 0 return 2 ** n - 1"},{"question":"Write a python program to print the indices of all occurrences of a number x in an array arr. Also, implement this function without using any built-in methods or libraries for index finding and looping, except for basic for loop and if statement.","solution":"def find_occurrences(arr, x): Returns a list of indices where the number x occurs in the array arr. indices = [] for i in range(len(arr)): if arr[i] == x: indices.append(i) return indices"},{"question":"I have a set of data points representing the coordinates of houses in a city, along with a set of two-dimensional \\"squares\\" that represent parcels of land. Both sets are stored in numpy arrays. I would like to code a function in python that given these two data types, returns a list of indices of the houses that fall within each parcel of land, even if it only intersects a corner. I would like the function to be able to handle any size parcel and any number of data points.","solution":"import numpy as np def houses_in_parcels(houses, parcels): Returns a list where each element is a list of indices of houses that fall within the corresponding parcel of land. Parameters: houses (numpy.ndarray): Array of shape (n, 2) representing coordinates of houses. parcels (numpy.ndarray): Array of shape (m, 4) representing bottom-left and top-right coordinates of parcels. Returns: list of lists: Each sublist contains indices of houses within the corresponding parcel. results = [] for parcel in parcels: bottom_left_x, bottom_left_y, top_right_x, top_right_y = parcel indices = [] for i, (x, y) in enumerate(houses): if bottom_left_x <= x <= top_right_x and bottom_left_y <= y <= top_right_y: indices.append(i) results.append(indices) return results"},{"question":"Consider the following code segment. Write a function that takes a function as a parameter and returns a closure which adds 1 to the input and passes it through a function.","solution":"def make_incrementor(func): Takes a function as a parameter and returns a closure which adds 1 to the input and passes the incremented value to the given function. def incrementor(x): return func(x + 1) return incrementor"},{"question":"Given the following code, write a function to calculate the length of the linked list without using any additional memory.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def get_length(head: ListNode) -> int: Returns the length of the linked list. :param head: ListNode - The head of the linked list. :return: int - The length of the linked list. length = 0 current = head while current: length += 1 current = current.next return length"},{"question":"Write a Python program to find the length of the longest palindromic subsequence in a given string using dynamic programming.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string s. n = len(s) # Create a DP table to store the length of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. # The outer loop considers lengths from 2 to n for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = 2 + dp[i + 1][j - 1] else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The length of the longest palindromic subsequence return dp[0][n - 1]"},{"question":"Define and explain a data structure used to implement a specific aspect of a video game. Include code examples in a language of your choice to demonstrate how this data structure is utilized in a game scenario.","solution":"class SpatialHashMap: def __init__(self, cell_size): self.cell_size = cell_size self.cells = {} def _hash(self, position): x, y = position return (x // self.cell_size, y // self.cell_size) def insert(self, position, entity): cell = self._hash(position) if cell not in self.cells: self.cells[cell] = [] self.cells[cell].append(entity) def remove(self, position, entity): cell = self._hash(position) if cell in self.cells: self.cells[cell].remove(entity) if not self.cells[cell]: del self.cells[cell] def query(self, position): cell = self._hash(position) return self.cells.get(cell, []) def move(self, old_position, new_position, entity): self.remove(old_position, entity) self.insert(new_position, entity) # Example usage: # Initialize SpatialHashMap with a cell size of 10 units game_map = SpatialHashMap(10) # Inserting entities into the spatial hash map game_map.insert((5, 8), 'Player1') game_map.insert((15, 20), 'Enemy1') # Querying entities in a specific cell print(game_map.query((15, 20))) # Output: ['Enemy1'] # Moving an entity from one position to another game_map.move((5, 8), (25, 30), 'Player1') # Query the new position print(game_map.query((25, 30))) # Output: ['Player1']"},{"question":"Develop an algorithm to detect and eliminate duplicate elements in a given array of numbers.","solution":"def remove_duplicates(arr): Returns a new list with duplicates removed from the input array. The order of elements is preserved. Parameters: arr (list): A list of numbers. Returns: list: A new list with duplicates removed. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Given two matrices of size \`m x n\`, find their transpose using Python. Additionally, implement matrix multiplication of the original matrices and their transposes, handling any potential dimension mismatches yourself. Use list comprehension, no library imports should be used for this task.","solution":"def transpose(matrix): Returns the transpose of the given matrix. return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] def can_multiply_matrices(mat1, mat2): Checks if two matrices can be multiplied. return len(mat1[0]) == len(mat2) def multiply_matrices(mat1, mat2): Returns the product of two matrices if they can be multiplied. Raises a ValueError if the matrices cannot be multiplied due to incompatible dimensions. if not can_multiply_matrices(mat1, mat2): raise ValueError(\\"Matrices have incompatible dimensions for multiplication.\\") return [[sum(a * b for a, b in zip(mat1_row, mat2_col)) for mat2_col in zip(*mat2)] for mat1_row in mat1]"},{"question":"Design a Python function that extracts all the unique words from a given string, with consideration for punctuation and case sensitivity. Additionally, implement a voting system for these words, where each word has a certain vote count. The function should return the top N words with the highest vote count, where N is an input parameter.","solution":"import re from collections import Counter def top_n_words_with_votes(text, votes, N): Extract all unique words from a given string and return the top N words with the highest vote count. :param text: String containing the words. :param votes: Dictionary with words as keys and their respective vote counts as values. :param N: Number of top words to return based on the vote count. :return: List of top N words sorted by vote count in descending order. # Extract words considering punctuation and case sensitivity words = re.findall(r'bw+b', text.lower()) unique_words = set(words) # Compute the vote counts for unique words vote_counts = {word: votes.get(word, 0) for word in unique_words} # Get the top N words with highest vote counts top_words = sorted(vote_counts, key=vote_counts.get, reverse=True)[:N] return top_words"},{"question":"Create a function that filters out repeating elements in an array. However, the function should only use a single loop and should not use any built-in functions or data structures (such as sets or dictionaries) to accomplish this task.","solution":"def filter_repeats(arr): Returns a list with repeating elements filtered out. The function uses a single loop and avoids using any built-in functions or data structures. n = len(arr) if n == 0: return [] result = [] i = 0 while i < n: is_duplicate = False j = 0 while j < len(result): if arr[i] == result[j]: is_duplicate = True break j += 1 if not is_duplicate: result.append(arr[i]) i += 1 return result"},{"question":"Given an array of integers, write a Python method to find the largest three unique numbers. The solution should have a time complexity of O(n), where n is the size of the array. You should also consider the case where the array may contain negative numbers and duplicates.","solution":"def largest_three_unique_numbers(arr): Returns the largest three unique numbers from the given array. if len(arr) < 3: raise ValueError(\\"Array should have at least three unique elements\\") first = second = third = float('-inf') for num in arr: if num > first: third = second second = first first = num elif first > num > second: third = second second = num elif second > num > third: third = num if third == float('-inf'): # This implies there are not enough unique numbers raise ValueError(\\"Array does not have three unique numbers\\") return [first, second, third]"},{"question":"Write a recursive function \`levenshtein_distance(a: str, b: str) -> int\`, which calculates the Levenshtein distance between two strings \`a\` and \`b\`. The Levenshtein distance is a measure of the similarity between two strings and is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.","solution":"def levenshtein_distance(a: str, b: str) -> int: Computes the Levenshtein distance between two strings a and b. The Levenshtein distance is the number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other. # Base case: If one of the strings is empty, return the length of the other string if not a: return len(b) if not b: return len(a) # If the last characters are the same, no increment needed if a[-1] == b[-1]: return levenshtein_distance(a[:-1], b[:-1]) # If the last characters are different, consider all possibilities and find the minimum insert = levenshtein_distance(a, b[:-1]) delete = levenshtein_distance(a[:-1], b) replace = levenshtein_distance(a[:-1], b[:-1]) return 1 + min(insert, delete, replace)"},{"question":"Create a fragment of code that is intended to evaluate whether a provided number is a perfect square or not. Your code must handle large numbers up to 2^64. Also, provide a function to calculate the square root (no use of library function) and incorporate error handling for non-integer or negative inputs.","solution":"def is_perfect_square(n): Determine whether n is a perfect square. Returns True if n is a perfect square, otherwise False. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") root = int(find_sqrt(n)) return root * root == n def find_sqrt(n): Computes the square root of a non-negative integer using binary search. if n == 0 or n == 1: return n left, right = 0, n while left <= right: mid = (left + right) // 2 if mid * mid == n: return mid elif mid * mid < n: left = mid + 1 approximation = mid else: right = mid - 1 return approximation"},{"question":"Write a Python function that takes a list of numbers as input, and returns a new list where each element is the cumulative sum up to that point in the original list. For example, for the input \`[1, 2, 3, 4]\`, the output should be \`[1, 3, 6, 10]\`.","solution":"def cumulative_sum(nums): Returns a new list where each element is the cumulative sum up to that point in the original list. result = [] sum_so_far = 0 for num in nums: sum_so_far += num result.append(sum_so_far) return result"},{"question":"Write a program in Python that enhances the functionality of the \\"lowest common ancestor\\" problem in a binary search tree. In addition, define the method in a way that it also considers the possibility of the tree nodes holding duplicate values and handle those cases. For extra complexity, implement a function to self-create a binary search tree from a given list of elements and incorporate error handling mechanism to control input validity.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, value): if not self.root: self.root = TreeNode(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, node, value): if value <= node.value: if node.left: self._insert_recursive(node.left, value) else: node.left = TreeNode(value) else: if node.right: self._insert_recursive(node.right, value) else: node.right = TreeNode(value) def lowest_common_ancestor(self, root, p, q): if not root: return None if root.value == p or root.value == q: return root left = self.lowest_common_ancestor(root.left, p, q) right = self.lowest_common_ancestor(root.right, p, q) if left and right: return root return left if left else right def create_tree_from_list(elements): Create a binary search tree from a list of elements. :param elements: List of elements to insert :return: BinarySearchTree object if not isinstance(elements, list): raise ValueError(\\"Input should be a list.\\") bst = BinarySearchTree() for element in elements: bst.insert(element) return bst"},{"question":"Create a Python script that implements the quicksort algorithm for sorting an array of integers.","solution":"def quicksort(arr): Implements the quicksort algorithm to sort an array in ascending order. Parameters: arr (list): A list of integers to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"How can I write a function in Python that switches the first and last elements of a given list?","solution":"def switch_first_last(lst): Switches the first and last elements of the provided list. Args: lst (list): A list where the first and last elements will be switched. Returns: list: A list with the first and last elements switched. If the list is empty or has only one element, it returns the list unchanged. if len(lst) > 1: lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Write a code to find the Kth smallest element from a given array of N elements. The code should have a time complexity of O(NlogK). Additionally, the solution should not use any built-in sorting functions or data structures. The array will contain distinct integers in the range of 1 to 10^6. The value of K will be between 1 and N (inclusive).","solution":"import heapq def kth_smallest(arr, k): Returns the Kth smallest element in the given array. # Create a max-heap with the first k elements of the array max_heap = [-x for x in arr[:k]] heapq.heapify(max_heap) # Iterate through the rest of the array for num in arr[k:]: if -num > max_heap[0]: # if the current number is smaller than the largest in the heap heapq.heappop(max_heap) # remove the largest heapq.heappush(max_heap, -num) # add the current number # The root of the heap is the kth smallest element return -max_heap[0]"},{"question":"Design a Python script that checks the length of a given string. If the length is greater than 10, print \\"Long string\\"; if it's less than or equal to 10, print \\"Short string\\". The script should also handle cases where the input is not a string by printing \\"Invalid input\\".","solution":"def check_string_length(input_value): Check the length of a given string. If the length is greater than 10, print \\"Long string\\"; if it's less than or equal to 10, print \\"Short string\\". If the input is not a string, print \\"Invalid input\\". if not isinstance(input_value, str): return \\"Invalid input\\" if len(input_value) > 10: return \\"Long string\\" else: return \\"Short string\\""},{"question":"Please write a recursive function to calculate the factorial of a number and provide the code. What is the benefit of using recursion in this scenario rather than an iterative approach? Additionally, what are some potential drawbacks of using recursion, and how can they be mitigated? Finally, can you provide an example of how the recursive function could be modified to handle large numbers without causing a stack overflow?","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) # To handle large numbers and avoid stack overflow, we can use iterative approach or memoization. # For example, using iterative approach: def iterative_factorial(n): Returns the factorial of n using an iterative approach to handle large numbers. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a Python program to sort the elements of an array in the form of a matrix in ascending order first by row and then by column.","solution":"import numpy as np def sort_matrix(matrix): Sorts the elements of a matrix in ascending order first by row and then by column. Args: matrix (list of list of int): 2D list representing the matrix to be sorted. Returns: list of list of int: The sorted matrix. array = np.array(matrix) flat = array.flatten() sorted_flat = np.sort(flat) sorted_matrix = sorted_flat.reshape(array.shape) return sorted_matrix.tolist()"},{"question":"How to find the maximum profit from a given stock price list in Python using a single pass through the list?","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of stock prices. The function uses a single pass through the list to find the solution. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: # Update min_price to the lowest price seen so far if price < min_price: min_price = price # Calculate the potential profit with the current price potential_profit = price - min_price # Update max_profit to the maximum profit seen so far if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Implement a Python function that validates a list of MAC (Media Access Control) addresses utilizing regex patterns. This function should return a list of valid MAC addresses while filtering out the invalid ones.","solution":"import re def validate_mac_addresses(mac_addresses): Validates the given list of MAC addresses. Returns a list of valid MAC addresses. A valid MAC address must match the pattern XX:XX:XX:XX:XX:XX where X is a hexadecimal digit (0-9, A-F). Args: mac_addresses (list of str): List of MAC addresses to validate. Returns: list of str: List of valid MAC addresses. mac_pattern = re.compile(r'^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}') return [mac for mac in mac_addresses if mac_pattern.match(mac)]"},{"question":"Reverse the order of elements in an array without using any built-in functions or creating a new array. The solution should have a time complexity of O(n) and should use a two-pointer approach.","solution":"def reverse_array(arr): Reverses the order of elements in the array in-place using a two-pointer approach. left = 0 right = len(arr) - 1 while left < right: # Swap elements arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Suppose you are designing a file system. Please write a function that takes a string path, which could contain directories, and returns the absolute simplified path to the file.","solution":"def simplify_path(path): Simplifies a given absolute path. parts = path.split('/') stack = [] for part in parts: if part == '' or part == '.': continue elif part == '..': if stack: stack.pop() else: stack.append(part) return '/' + '/'.join(stack)"},{"question":"Explain how to calculate the value of Pi using the Monte Carlo method in programming. Specifically, describe the algorithm and provide a code snippet in a language of your choice.","solution":"import random def monte_carlo_pi(num_samples): Estimates the value of Pi using the Monte Carlo method. Args: num_samples (int): The number of random samples to generate. Returns: float: The estimated value of Pi. inside_circle = 0 for _ in range(num_samples): x, y = random.random(), random.random() if x**2 + y**2 <= 1.0: inside_circle += 1 pi_estimate = 4 * (inside_circle / num_samples) return pi_estimate"},{"question":"Help me design a soccer ball with random numbers and letters, but make sure no two balls have the same combination. Can you create a function in Python that generates a unique design for each ball based on a given set of numbers and letters? Also, provide a code to check if the generated design is indeed unique.","solution":"import random import string class SoccerBallDesign: used_designs = set() def __init__(self): self.design = self.generate_unique_design() SoccerBallDesign.used_designs.add(self.design) @staticmethod def generate_unique_design(): characters = string.ascii_uppercase + string.digits while True: design = ''.join(random.choices(characters, k=10)) if design not in SoccerBallDesign.used_designs: return design def get_design(self): return self.design"},{"question":"Write a Python function to convert time from 12-hour format to military time and vice-versa. The function should be able to handle seconds as well. Consider day time situations (AM/PM) for 12-hour format. Also, remember to check if the input time is valid. You should include error handling for invalid inputs.","solution":"def time_conversion(time_str): Converts time between 12-hour format with AM/PM to 24-hour military time. Args: time_str (str): A string representing the time in either 12-hour (with AM/PM) or 24-hour format. Returns: str: Converted time string in the opposite format. Raises: ValueError: If the input format is invalid. # Check if input is in 12-hour format with AM/PM if time_str[-2:] in ['AM', 'PM']: try: if ' ' in time_str: raise ValueError(\\"Invalid format with space before AM/PM\\") time, period = time_str[:-2], time_str[-2:] hours, minutes, seconds = map(int, time.split(':')) if not (1 <= hours <= 12 and 0 <= minutes < 60 and 0 <= seconds < 60): raise ValueError(\\"Invalid time\\") # Convert to 24-hour time if hours == 12: hours = 0 if period == 'PM': hours += 12 return f'{hours:02}:{minutes:02}:{seconds:02}' except Exception: raise ValueError(\\"Invalid input time format\\") # Check if input is in 24-hour military time format else: try: hours, minutes, seconds = map(int, time_str.split(':')) if not (0 <= hours < 24 and 0 <= minutes < 60 and 0 <= seconds < 60): raise ValueError(\\"Invalid time\\") period = 'AM' if hours < 12 else 'PM' if hours == 0: hours = 12 elif hours > 12: hours -= 12 return f'{hours:02}:{minutes:02}:{seconds:02}{period}' except Exception: raise ValueError(\\"Invalid input time format\\")"},{"question":"Create a function to filter out strings containing only digits and having a length greater than or equal to 5 from a given list of strings.","solution":"def filter_strings(strings): Filters out strings from the given list that contain only digits and have a length greater than or equal to 5. Parameters: strings (list): A list of strings to be filtered. Returns: list: A list of strings that do not meet the filter criteria. return [s for s in strings if not (s.isdigit() and len(s) >= 5)]"},{"question":"Given a list of tuples which represents a set of edges in a graph, write a Python program to find the shortest path from vertex A to vertex B using Dijkstra's algorithm.","solution":"import heapq def dijkstra(edges, start, end): Finds the shortest path from start to end using Dijkstra's algorithm. :param edges: list of tuples representing edges in the graph (e.g., [(u, v, weight), ...]) :param start: the starting vertex :param end: the ending vertex :return: the shortest path and its cost as a tuple (path, cost) graph = {} for u, v, weight in edges: if u not in graph: graph[u] = [] if v not in graph: graph[v] = [] graph[u].append((v, weight)) graph[v].append((u, weight)) priority_queue = [(0, start, [])] seen = set() min_dist = {start: 0} while priority_queue: (cost, current_vertex, path) = heapq.heappop(priority_queue) if current_vertex in seen: continue seen.add(current_vertex) path = path + [current_vertex] if current_vertex == end: return (path, cost) for neighbor, weight in graph[current_vertex]: if neighbor in seen: continue prev_cost = min_dist.get(neighbor, float('inf')) new_cost = cost + weight if new_cost < prev_cost: min_dist[neighbor] = new_cost heapq.heappush(priority_queue, (new_cost, neighbor, path)) return ([], float('inf')) # No path found"},{"question":"Given a binary tree, write a function in Python to determine if it is a valid binary search tree (BST).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_valid_bst(root, low=float('-inf'), high=float('inf')): Determines if the binary tree with the given root is a valid binary search tree (BST). A binary tree is a BST if the left subtree of a node contains only nodes with keys less than the node's key, and the right subtree only nodes with keys greater than the node's key. if not root: return True if not (low < root.value < high): return False return (is_valid_bst(root.left, low, root.value) and is_valid_bst(root.right, root.value, high))"},{"question":"Generate a Flask route that handles both GET and POST requests. The route should return the sum of two numbers passed as query parameters in the URL for a GET request, and return the product of two numbers passed as JSON in the body for a POST request. Additionally, the route should validate the input and handle error cases such as invalid input or missing parameters. For GET requests, if either of the two numbers is missing or invalid, the route should return an error message with a 400 status code. For POST requests, if the JSON payload is missing or invalid, or if the two numbers are missing or invalid, the route should return an error message with a 400 status code.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/calculate', methods=['GET', 'POST']) def calculate(): if request.method == 'GET': a = request.args.get('a') b = request.args.get('b') if a is None or b is None: return jsonify({\\"error\\": \\"Missing parameters a or b\\"}), 400 try: a = float(a) b = float(b) except ValueError: return jsonify({\\"error\\": \\"Invalid input. Parameters a and b must be numbers.\\"}), 400 return jsonify({\\"result\\": a + b}) elif request.method == 'POST': if not request.is_json: return jsonify({\\"error\\": \\"Request body must be JSON\\"}), 400 data = request.get_json() a = data.get('a') b = data.get('b') if a is None or b is None: return jsonify({\\"error\\": \\"Missing parameters a or b in JSON body\\"}), 400 try: a = float(a) b = float(b) except ValueError: return jsonify({\\"error\\": \\"Invalid input. Parameters a and b must be numbers.\\"}), 400 return jsonify({\\"result\\": a * b}) if __name__ == \\"__main__\\": app.run(debug=True)"},{"question":"Create a python program to generate the Fibonacci sequence up to a given number n.","solution":"def generate_fibonacci(n): Generates the Fibonacci sequence up to a given number n. Returns a list of Fibonacci numbers up to and including n. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Implement a function that takes in two arrays as input and returns a new array that contains elements from both the input arrays. The function should have a time complexity of O(n), where n is the length of the longer input array. However, there should not be any direct copying of elements from one array to another, and you cannot use additional data structures. You can only modify the existing arrays to achieve the desired result. Additionally, the function should perform the operation without using the built-in array concatenation methods, such as \`concat\` or the spread operator \`...\`.","solution":"def merge_arrays(arr1, arr2): Merges elements from arr2 into arr1 without copying or using additional data structures. The operation will have O(n) time complexity, based on the longer input array. Parameters: arr1 (list): First list of elements. arr2 (list): Second list of elements. Returns: list: Merged list containing elements from both arr1 and arr2. # Append elements of arr2 to arr1 one-by-one for elem in arr2: arr1.append(elem) return arr1"},{"question":"Create a Python function to locate the immediate previous and next occurrence of a given number in a list, while handling multiple occurrences and considering circular arrangement of elements.","solution":"def find_prev_next_occurrences(arr, target): Returns the indices of the immediate previous and next occurrences of the target number in a circular list. If the target doesn't exist in the list, return None for previous and next indices. if target not in arr: return None, None n = len(arr) prev_index = next_index = None for i in range(n): if arr[i] == target: next_index = i break for i in range(n-1, -1, -1): if arr[i] == target: prev_index = i break return prev_index, next_index"},{"question":"Write a Python code to convert 12-hour time format to military (24-hour) time format. Code must also account for invalid user inputs such as non-numeric or out-of-range values, and include functionality to handle minutes and seconds.","solution":"def convert_to_military_time(time_str): Converts a 12-hour time format string to a 24-hour military time format string. Args: time_str (str): a time string in 12-hour format (HH:MM:SS AM/PM) Returns: str: a time string in 24-hour military format (HH:MM:SS) or an error message for invalid input try: time, period = time_str.strip().rsplit(maxsplit=1) if period not in [\\"AM\\", \\"PM\\"]: return \\"Error: Invalid period (must be 'AM' or 'PM')\\" hours, minutes, seconds = map(int, time.split(\\":\\")) if not (1 <= hours <= 12): return \\"Error: Invalid hour value\\" if not (0 <= minutes < 60): return \\"Error: Invalid minutes value\\" if not (0 <= seconds < 60): return \\"Error: Invalid seconds value\\" if period == \\"PM\\": hours = hours % 12 + 12 elif period == \\"AM\\" and hours == 12: hours = 0 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\" except ValueError: return \\"Error: Invalid time format\\""},{"question":"Write a function called \`calculate_price\` that takes a dictionary of item names and their prices, as well as another dictionary of item names and their quantities. The function should return the total price by multiplying the price of each item with its quantity and summing the results. However, there is a catch, if an item in the quantity dictionary is not found in the price dictionary, the function should raise a \`KeyError\` with the name of the missing item. Also, if a quantity is negative or if a price is negative, the function should raise a \`ValueError\` with an appropriate error message.","solution":"def calculate_price(prices, quantities): Calculates the total price of items based on given prices and quantities. Args: prices (dict): A dictionary with item names as keys and their prices as values. quantities (dict): A dictionary with item names as keys and their quantities as values. Returns: float: The total price of the items. Raises: KeyError: If an item in quantities is not found in prices. ValueError: If any price or quantity is negative. total = 0.0 for item, quantity in quantities.items(): if item not in prices: raise KeyError(f\\"Price of '{item}' not found in prices dictionary.\\") if quantity < 0: raise ValueError(f\\"Quantity for '{item}' cannot be negative.\\") if prices[item] < 0: raise ValueError(f\\"Price for '{item}' cannot be negative.\\") total += prices[item] * quantity return total"},{"question":"Fabricate a case-sensitive lexical ordering algorithm that arranges not only a supplied array of alphanumeric dog names, but any given array of strings including symbols in order of the ASCII table. The strings can vary greatly in length.","solution":"def lexical_ordering(strings): Arranges an array of strings in case-sensitive lexical order following ASCII values. return sorted(strings)"},{"question":"Write a function that finds the maximum element in a list using recursion instead of the built-in max function. Also, ensure your function can handle an empty list, a list of negative numbers, and a list with repeated numbers. Test your function on several test cases to ensure its accuracy.","solution":"def find_max_recursive(lst): Finds the maximum element in a list using recursion. Parameters: lst (list): A list of numbers. Returns: int/float: The maximum element in the list. Returns None if the list is empty. if not lst: return None def helper(index): # Base case: when we've traversed the whole list. if index == len(lst) - 1: return lst[index] # Recursively get the maximum of the remaining list max_of_rest = helper(index + 1) # Return the maximum of the current element and the max of the rest return lst[index] if lst[index] > max_of_rest else max_of_rest return helper(0)"},{"question":"Write a python code to parse the given JSON into a dictionary, but only include the keys that start with the letter 'a'.","solution":"import json def parse_json_with_a_keys(json_string): Parses the given JSON string into a dictionary and only includes keys that start with 'a'. Args: json_string (str): The JSON string to be parsed. Returns: dict: The resulting dictionary with only keys that start with 'a'. parsed_dict = json.loads(json_string) result_dict = {k: v for k, v in parsed_dict.items() if k.startswith('a')} return result_dict"},{"question":"Write a Python code to determine if two strings are isomorphic, considering only alphanumeric characters and ignoring cases. Make sure the function also returns the mapping of characters from the first string to the second string if they are isomorphic.","solution":"def is_isomorphic(str1, str2): Determines if two strings are isomorphic, considering only alphanumeric characters and ignoring cases. Returns a tuple (is_isomorphic: bool, char_mapping: dict). # Normalize both strings to lowercase and remove non-alphanumeric characters normalized_str1 = ''.join(filter(str.isalnum, str1.lower())) normalized_str2 = ''.join(filter(str.isalnum, str2.lower())) # If the lengths of the normalized strings are not the same, they can't be isomorphic if len(normalized_str1) != len(normalized_str2): return (False, {}) mapping = {} mapped_chars = set() for char1, char2 in zip(normalized_str1, normalized_str2): if char1 in mapping: if mapping[char1] != char2: return (False, {}) else: if char2 in mapped_chars: return (False, {}) mapping[char1] = char2 mapped_chars.add(char2) return (True, mapping)"},{"question":"Create a python code to identify the least used word in a provided string, excluding prevalent English filler words such as \\"the\\", \\"is\\", \\"in\\", among others.","solution":"from collections import Counter import re def least_used_word(text): Returns the least used word in the provided string, excluding prevalent English filler words. # List of common filler words to exclude filler_words = {\\"the\\", \\"is\\", \\"in\\", \\"and\\", \\"of\\", \\"to\\", \\"a\\", \\"that\\", \\"it\\", \\"on\\", \\"for\\", \\"as\\", \\"with\\", \\"was\\", \\"were\\", \\"this\\"} # Remove punctuation and convert to lower case text = re.sub(r'[^ws]', '', text).lower() # Split text into words words = text.split() # Filter out filler words words = [word for word in words if word not in filler_words] # Count the frequency of each word word_counts = Counter(words) # Find the least used word if not word_counts: return None least_used = min(word_counts, key=word_counts.get) return least_used"},{"question":"Write a program to sort a list of integers in ascending order without using any built-in sort functions or methods. Additionally, implement the sorting algorithm with a time complexity of O(n log n), and space complexity of O(1).","solution":"def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) def heap_sort(arr): n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) return arr"},{"question":"How can a function in Python access and modify a variable declared inside a nested function without violating the encapsulation principles? Provide an example showcasing the implementation of this technique while discussing the possible security concerns that might arise from this approach.Moreover, please propose measures that developers could take to mitigate any potential security risks identified.","solution":"def outer_function(): enclosing_variable = 0 def nested_function(): nonlocal enclosing_variable enclosing_variable += 1 return enclosing_variable def get_enclosing_variable(): return enclosing_variable return nested_function, get_enclosing_variable # Example Usage increment, get_value = outer_function() print(increment()) # Output: 1 print(increment()) # Output: 2 print(get_value()) # Output: 2"},{"question":"Write a code to calculate the age of a person given their date of birth (year, month, and day), and also account for leap years. Additionally, include a validation check for the input dates to ensure they are valid (i.e., ensure the given month is not greater than 12, the day is appropriate for the given month, and the year is a valid year in the Gregorian calendar).","solution":"from datetime import date def is_leap_year(year): Checks if a given year is a leap year. return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) def validate_date(year, month, day): Validates if the given year, month and day form a valid date. if month < 1 or month > 12: return False if day < 1: return False if month in [1, 3, 5, 7, 8, 10, 12] and day > 31: return False if month in [4, 6, 9, 11] and day > 30: return False if month == 2: if is_leap_year(year) and day > 29: return False if not is_leap_year(year) and day > 28: return False return True def calculate_age(year, month, day): Calculates the age of a person given their birth date. if not validate_date(year, month, day): raise ValueError(\\"Invalid date of birth\\") today = date.today() birth_date = date(year, month, day) age = today.year - birth_date.year if (today.month, today.day) < (birth_date.month, birth_date.day): age -= 1 return age"},{"question":"Given an array arr, remove the element \\"red\\" from the array and sort the remaining elements in alphabetical order. The array arr can contain duplicate elements and the solution should have a time complexity of O(n log n), where n is the length of the array.","solution":"def remove_red_and_sort(arr): Removes the element \\"red\\" from the array and sorts the remaining elements in alphabetical order. Parameters: arr (list): List of strings Returns: list: Sorted list of strings without \\"red\\" # Remove all \\"red\\" elements from the list filtered_list = [x for x in arr if x != \\"red\\"] # Sort the remaining elements in alphabetical order sorted_list = sorted(filtered_list) return sorted_list"},{"question":"Given two lists, listA and listB, write a function that returns the intersection of the two lists. The intersection of two lists is a list containing all the unique elements that are present in both lists. However, you are not allowed to use any built-in functions or modules for list operations or set operations. Additionally, the solution should have a time complexity of O(n), where n is the total number of elements in both lists combined.","solution":"def intersection(listA, listB): Returns the intersection of two lists without using built-in functions for list or set operations. The result list contains all unique elements found in both lists. # Create a dictionary to track appearances in the first list element_count = {} # Traverse listA and store the unique elements in the dictionary for element in listA: if element not in element_count: element_count[element] = 1 # Traverse listB and check if elements are in the dictionary, and count them as common elements common_elements = [] for element in listB: if element in element_count and element_count[element] == 1: common_elements.append(element) # To ensure uniqueness in the result, mark the element as processed element_count[element] = 0 return common_elements"},{"question":"Write a function that takes as input an array of strings and returns the longest common prefix of the array of strings. The longest common prefix is the longest string that is a prefix of all strings in the array. If there is no common prefix, the function should return an empty string.","solution":"def longest_common_prefix(strings): Returns the longest common prefix of an array of strings. if not strings: return \\"\\" # Find the string with the minimum length min_length = min(len(s) for s in strings) # Initialize the longest common prefix to be an empty string longest_common_prefix = \\"\\" # Iterate over the range of the minimum length string for i in range(min_length): # Get the character at the current position from the first string current_char = strings[0][i] # Compare the character with the same position character in other strings if all(s[i] == current_char for s in strings): longest_common_prefix += current_char else: break return longest_common_prefix"},{"question":"Write a Python script that takes a user input of a specific date and time in the format \\"YYYY-MM-DD HH:MM:SS\\" and prints the time elapsed since that specific date and time in seconds. However, the script should also take into account time zones and daylight saving time changes, if applicable.","solution":"from datetime import datetime import pytz def time_elapsed_since(user_input, timezone_str): Returns the time elapsed since the specified date and time in seconds, taking into account time zones and daylight saving time changes. Parameters: - user_input: str, date and time in the format \\"YYYY-MM-DD HH:MM:SS\\" - timezone_str: str, the name of the timezone Returns: - int: number of seconds elapsed try: # Parse the user input user_datetime = datetime.strptime(user_input, \\"%Y-%m-%d %H:%M:%S\\") # Set the timezone local_tz = pytz.timezone(timezone_str) # Make the datetime aware of the timezone local_datetime = local_tz.localize(user_datetime, is_dst=None) # Get the current time in the same timezone now = datetime.now(pytz.utc).astimezone(local_tz) # Calculate the time difference elapsed_seconds = int((now - local_datetime).total_seconds()) return elapsed_seconds except Exception as e: print(f\\"Error: {e}\\") return None"}]`),F={name:"App",components:{PoemCard:I},data(){return{searchQuery:"",visibleCount:4,poemsData:C,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},E={class:"card-container"},z={key:0,class:"empty-state"},N=["disabled"],S={key:0},L={key:1};function D(i,e,l,m,s,a){const f=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[b,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",E,[(n(!0),r(y,null,v(a.displayedPoems,(o,p)=>(n(),w(f,{key:p,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",z,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",L,"Loading...")):(n(),r("span",S,"See more"))],8,N)):u("",!0)])}const W=c(F,[["render",D],["__scopeId","data-v-23523f13"]]),O=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/18.md","filePath":"drive/18.md"}'),G={name:"drive/18.md"},H=Object.assign(G,{setup(i){return(e,l)=>(n(),r("div",null,[x(W)]))}});export{O as __pageData,H as default};
