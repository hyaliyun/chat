import{_ as h,o as n,c as r,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function A(i,e,l,m,s,a){return n(),r("div",q,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const F=h(k,[["render",A],["__scopeId","data-v-a7432bfd"]]),C=JSON.parse('[{"question":"Design a function to manage an inventory of items in a warehouse. The inventory should be represented as a list of dictionaries, where each dictionary contains \'item_id\', \'name\', \'quantity\', and \'price\'. Implement the following functionalities: 1. Add a new item to the inventory. Ensure that \'item_id\' is unique and handle the case where an item with the same \'item_id\' already exists. 2. Remove an item from the inventory based on \'item_id\'. Handle the case where the \'item_id\' does not exist. 3. Update the quantity and price of an existing item based on \'item_id\'. Handle the case where the \'item_id\' does not exist. 4. Search for an item based on \'item_id\' or \'name\'. Return all matching items. Your function should properly manage and maintain the inventory while providing appropriate error messages for the above cases.","solution":"class InventoryItem: def __init__(self, item_id, name, quantity, price): self.item_id = item_id self.name = name self.quantity = quantity self.price = price class WarehouseInventory: def __init__(self): self.inventory = [] def add_item(self, item_id, name, quantity, price): for item in self.inventory: if item.item_id == item_id: return \\"Error: Item with this ID already exists.\\" new_item = InventoryItem(item_id, name, quantity, price) self.inventory.append(new_item) return \\"Item added successfully.\\" def remove_item(self, item_id): for item in self.inventory: if item.item_id == item_id: self.inventory.remove(item) return \\"Item removed successfully.\\" return \\"Error: Item ID does not exist.\\" def update_item(self, item_id, quantity, price): for item in self.inventory: if item.item_id == item_id: item.quantity = quantity item.price = price return \\"Item updated successfully.\\" return \\"Error: Item ID does not exist.\\" def search_item(self, **kwargs): search_results = [] for item in self.inventory: for key, value in kwargs.items(): if hasattr(item, key) and getattr(item, key) == value: search_results.append(item) return search_results"},{"question":"Write a Python function `find_longest_word` that takes a list of strings as an input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first one that appears in the list. If the input list is empty, return an empty string. Example: ```python print(find_longest_word([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"])) # Output: \\"banana\\" print(find_longest_word([])) # Output: \\"\\" ```","solution":"def find_longest_word(words): Returns the longest word from the list of words. If multiple words have the same maximum length, the first one is returned. If the input list is empty, an empty string is returned. if not words: return \\"\\" longest_word = words[0] for word in words[1:]: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Design and implement a function that uses NumPy to generate an m x n matrix, where each element is the sum of its row and column indices. Example: ``` Input: m = 3, n = 4 Output: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]] ``` import numpy as np def generate_matrix(m, n): matrix = np.zeros((m,n), dtype=int) for i in range(m): for j in range(n): matrix[i, j] = i + j return matrix # Test the function print(generate_matrix(3, 4))","solution":"import numpy as np def generate_matrix(m, n): Generates an m x n matrix where each element is the sum of its row and column indices. Parameters: m (int): Number of rows n (int): Number of columns Returns: np.ndarray: Generated matrix matrix = np.zeros((m, n), dtype=int) for i in range(m): for j in range(n): matrix[i, j] = i + j return matrix"},{"question":"Create a function that takes a string containing only lowercase alphabets and returns the length of the longest substring that contains no repeated characters. Your solution should have a time complexity of O(n). Consider edge cases where the input string may be empty or have all identical characters.","solution":"def longest_unique_substring(s): Returns the length of the longest substring that contains no repeated characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Design a function in Python that takes a list of integers and returns a new list where each element is the difference between the corresponding elements of the input list and the average of the input list. Ensure that your function handles an empty list input gracefully. Example input: [10, 12, 14, 16, 18] Expected output: [-4.0, -2.0, 0.0, 2.0, 4.0]","solution":"def differences_from_average(numbers): Returns a list where each element is the difference between the corresponding elements of the input list and the average of the input list. Args: numbers (list of int): A list of integers Returns: list of float: A new list where each element is the difference from the average. if not numbers: return [] average = sum(numbers) / len(numbers) return [round(num - average, 1) for num in numbers]"},{"question":"You are given a grid of characters where each cell contains a character from a-z. Your task is to find the longest path in the grid where each consecutive character is lexicographically greater than the previous one (i.e., \'a\' -> \'b\', \'b\' -> \'c\', and so on). The path can start from any cell, and you can move in any of the four directions: up, down, left, or right. The length of the path is the total number of cells included in it. Write a function `longestLexicographicalPath(grid) -> int` that takes a list of strings representing the grid and returns the length of the longest path. Function Signature: ```python def longestLexicographicalPath(grid: List[str]) -> int: ``` # Input - A list of strings `grid`, where each string represents a row in the grid, and each character in the string represents a cell. # Output - An integer representing the length of the longest path where each character is lexicographically greater than the previous one. # Example ```python grid = [ \\"abcd\\", \\"bcda\\", \\"cdef\\", \\"dabc\\" ] print(longestLexicographicalPath(grid)) # Output: 6 ``` # Constraints - The grid dimensions will be such that 1 ≤ len(grid), len(grid[0]) ≤ 100. - Each cell contains a lowercase English letter from \'a\' to \'z\'.","solution":"from typing import List, Tuple def longestLexicographicalPath(grid: List[str]) -> int: rows = len(grid) cols = len(grid[0]) dp = [[-1] * cols for _ in range(rows)] # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(x: int, y: int) -> int: if dp[x][y] != -1: return dp[x][y] max_length = 1 # each cell is a path of length 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and ord(grid[nx][ny]) == ord(grid[x][y]) + 1: max_length = max(max_length, 1 + dfs(nx, ny)) dp[x][y] = max_length return dp[x][y] longest_path = 0 for i in range(rows): for j in range(cols): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. The function should be efficient, using a technique such as the Sieve of Eratosthenes for prime number detection. Provide examples and edge cases to illustrate the functionality of your implementation.","solution":"def sieve_of_eratosthenes(max_num): Return a list of prime numbers up to max_num using the Sieve of Eratosthenes algorithm. sieve = [True] * (max_num + 1) sieve[0] = sieve[1] = False for start in range(2, int(max_num**0.5) + 1): if sieve[start]: for multiple in range(start*start, max_num + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def filter_primes(numbers): Filter and return prime numbers from a list of integers. if not numbers: return [] max_num = max(numbers) primes = sieve_of_eratosthenes(max_num) prime_set = set(primes) return [num for num in numbers if num in prime_set]"},{"question":"Write a function that accepts a string as an input and checks whether it is an anagram of a palindrome. A string is said to be an anagram of a palindrome if it can be rearranged to form a palindrome. The function should return `True` if the input string is an anagram of a palindrome and `False` otherwise. Ignore spaces, capitalization, and punctuation while making the determination.","solution":"def is_anagram_of_palindrome(s): Checks if the input string is an anagram of a palindrome. An anagram of a palindrome has at most one character with an odd count. Args: s (str): The input string. Returns: bool: True if the input string is an anagram of a palindrome, False otherwise. from collections import Counter import re # Clean the string: remove non-alphanumeric characters and lower the case. cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count each character\'s frequency. char_count = Counter(cleaned_s) # Count how many characters have an odd frequency. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be an anagram of a palindrome, # there must be at most one character with an odd frequency. return odd_count <= 1"},{"question":"Devise a Python function that receives a list of strings and an integer \'n\', then returns a new list where each string is truncated to \'n\' characters. If a string is already shorter than or equal to \'n\' characters, it should remain unchanged. Ensure to maintain the original order of strings in the output.","solution":"def truncate_strings(strings, n): Truncate each string in the list to \'n\' characters. Strings shorter than or equal to \'n\' characters remain unchanged. Parameters: strings (list): A list of strings to be truncated. n (int): The maximum length for each string. Returns: list: A new list with truncated strings. return [s[:n] if len(s) > n else s for s in strings]"},{"question":"Design a function `sublist_sum_exists(arr, target_sum)` that determines whether there exists a contiguous sublist within a given array of integers that sums up to a specified target sum. - The function should return a boolean value: `True` if such a sublist exists, and `False` otherwise. - Aim for an optimal time complexity. Trying to solve the problem with a time complexity better than O(n^2) is preferred. - Assume the array can contain both positive and negative integers. Examples: ```python sublist_sum_exists([1, 2, 3, 7, 5], 12) # returns True, because [2, 3, 7] is a sublist summing to 12 sublist_sum_exists([1, 2, 3, 4, 5], 9) # returns True, because [2, 3, 4] is a sublist summing to 9 sublist_sum_exists([1, 2, 3, 4, 5], 20) # returns False, because no sublist sums to 20 sublist_sum_exists([-1, 2, 4, -2, 3], 3) # returns True, because [-1, 2, 4, -2] is a sublist summing to 3 ``` Ensure that the function adheres to the following signature: ```python def sublist_sum_exists(arr, target_sum): # Your code here ```","solution":"def sublist_sum_exists(arr, target_sum): Determines whether there exists a contiguous sublist within a given array of integers that sums up to a specified target sum. :param arr: List of integers :param target_sum: Integer target sum :return: True if such a sublist exists, False otherwise current_sum = 0 start = 0 sum_dict = {0: -1} for i, num in enumerate(arr): current_sum += num if (current_sum - target_sum) in sum_dict: return True if current_sum not in sum_dict: sum_dict[current_sum] = i return False"},{"question":"Write a Python function named `find_substring_start` that takes two strings as input: `text` and `substring`. The function should return the starting index of the first occurrence of `substring` in `text`. If `substring` is not found, the function should return -1. Your solution should not use Python\'s built-in `str.find()` method. # Example ```python find_substring_start(\\"hello world\\", \\"world\\") # Output: 6 find_substring_start(\\"hello world\\", \\"planet\\") # Output: -1 ``` # Constraints - The function should work with ASCII strings. - The length of `text` and `substring` can be up to 10,000 characters. - The function should have a time complexity of O(n * m), where n is the length of `text` and m is the length of `substring`. # Function Signature ```python def find_substring_start(text: str, substring: str) -> int: # Your code here pass ```","solution":"def find_substring_start(text: str, substring: str) -> int: Returns the starting index of the first occurrence of \'substring\' in \'text\'. If \'substring\' is not found, returns -1. text_len = len(text) substring_len = len(substring) # Edge case if substring is empty or longer than text if substring_len == 0: return 0 if substring_len > text_len: return -1 # Loop through each possible starting point in \'text\' for i in range(text_len - substring_len + 1): # Check the substring from this starting point if text[i:i + substring_len] == substring: return i return -1"},{"question":"In a certain kingdom, there is a magical tree with N nodes and N-1 edges. Each node is labeled from 1 to N, and the tree is rooted at node 1. You are given an array of integers A of length N, where A[i] represents the strength associated with the i-th node. The tree has the property that if you visit a node, you must also visit its children. Therefore, the strength of a visit to a node is the sum of the strengths of that node and its descendants in the subtree. Additionally, you are given Q queries. Each query consists of an integer x, and your task is to compute the strength of the subtree rooted at the node x. Write a function that takes an integer N, an array A of length N, a list of N-1 pairs of integers representing the edges of the tree, and a list of Q queries. Your function should return a list of integers where each integer is the result of a query. Function Signature: ```python def calculate_subtree_strength(N: int, A: List[int], edges: List[Tuple[int, int]], queries: List[int]) -> List[int]: ``` Example: ``` N = 5 A = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (2, 4), (3, 5)] queries = [1, 2, 3] Output: [15, 7, 8] ``` Explanation: - The entire tree\'s strength (subtree strength starting from node 1) is 1 + 2 + 4 + 3 + 5 = 15. - The subtree rooted at node 2 includes nodes 2 and 4, hence the strength is 2 + 4 = 6. - The subtree rooted at node 3 includes nodes 3 and 5, hence the strength is 3 + 5 = 8.","solution":"from typing import List, Tuple, Dict def calculate_subtree_strength(N: int, A: List[int], edges: List[Tuple[int, int]], queries: List[int]) -> List[int]: from collections import defaultdict, deque # Build the tree using adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Strength map to store the strength of sub-trees strength_map = {} # Perform DFS to calculate the subtree strengths def dfs(node, parent): total_strength = A[node - 1] for child in tree[node]: if child != parent: total_strength += dfs(child, node) strength_map[node] = total_strength return total_strength # Start DFS from the root node (1) dfs(1, -1) # Answer the queries result = [strength_map[x] for x in queries] return result"},{"question":"Given a list of words, identify the frequency of each word and output a list containing the words sorted by their frequency in descending order. If two words have the same frequency, sort them alphabetically. Implement a function `word_frequency(words: List[str]) -> List[str]` that takes in a list of words and returns the sorted list. # Example ```python words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] print(word_frequency(words)) ``` Output: ```python [\\"apple\\", \\"banana\\", \\"orange\\"] ``` # Constraints - You may assume that the input list `words` contains only lowercase alphabetic characters and is not empty. - The word frequencies can lie between 1 and 10^5 with a total word count up to 10^6. - Your solution should be optimized for both time and space complexity.","solution":"from collections import Counter from typing import List def word_frequency(words: List[str]) -> List[str]: Takes a list of words and returns a list of words sorted by their frequency in descending order. If two words have the same frequency, they are sorted alphabetically. word_count = Counter(words) sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return [word for word, _ in sorted_words]"},{"question":"Create a function that simulates the outcome of a series of dice rolls and returns the frequency of each face value rolled. The function should accept two parameters: the number of dice and the number of times the dice will be rolled. The function should: 1. Validate the inputs ensuring both are positive integers. 2. Simulate the dice rolls using a random number generator. 3. Count the frequency of each face value (from 1 to 6). 4. Return the results in a dictionary where the keys are the face values and the values are their respective counts. Additionally, handle cases where: - The number of dice or rolls is less than 1 by returning an appropriate error message. - Invalid formats or data types are provided and respond with a clear error message. Consider edge cases to ensure robustness in your solution. Use the following function signature: ```python def simulate_dice_rolls(num_dice, num_rolls): pass ``` Provide clear documentation and comments within the code to explain your implementation steps.","solution":"import random def simulate_dice_rolls(num_dice, num_rolls): Simulates dice rolls and returns the frequency of each face value. Parameters: num_dice (int): The number of dice to roll. num_rolls (int): The number of times to roll the dice. Returns: dict: A dictionary with face values (1 to 6) as keys and their frequencies as values. # Input validation if not isinstance(num_dice, int) or not isinstance(num_rolls, int): return \\"Error: Both inputs must be integers.\\" if num_dice < 1 or num_rolls < 1: return \\"Error: Both inputs must be greater than 0.\\" # Initialize the frequency dictionary frequency = {i: 0 for i in range(1, 7)} # Simulate the dice rolls for _ in range(num_rolls): for _ in range(num_dice): roll_result = random.randint(1, 6) frequency[roll_result] += 1 return frequency"},{"question":"Write a Python function that takes a string containing a mathematical expression (e.g., \\"2+3*4-5/2\\") and evaluates it as a floating point number. The function should correctly handle the order of operations (i.e., multiplication and division before addition and subtraction). Use only basic Python libraries and avoid using `eval` for security reasons.","solution":"import re def evaluate_expression(expression): Evaluates a mathematical expression string and returns the result as a floating point number. Handles order of operations: multiplication and division before addition and subtraction. def parse_term(term): # Split the term by multiplication and division operations parts = re.split(r\'(*|/)\', term) result = float(parts[0]) i = 1 while i < len(parts): if parts[i] == \'*\': result *= float(parts[i + 1]) elif parts[i] == \'/\': result /= float(parts[i + 1]) i += 2 return result # Split the expression by addition and subtraction operations terms = re.split(r\'(+|-)\', expression) result = parse_term(terms[0]) i = 1 while i < len(terms): if terms[i] == \'+\': result += parse_term(terms[i + 1]) elif terms[i] == \'-\': result -= parse_term(terms[i + 1]) i += 2 return result"},{"question":"Given an array of positive integers, find a contiguous subarray that has the maximum product of its elements. It is guaranteed that the length of the array is at least 1. Write a function `maxProduct` in Python that takes a list of integers as input and returns the maximum product of a contiguous subarray. **Input** - An array `nums` of integers where 1 ≤ len(nums) ≤ 10^4 and -10 ≤ nums[i] ≤ 10. **Output** - An integer representing the maximum product of a contiguous subarray **Example** ```python def maxProduct(nums): # Your code here print(maxProduct([2,3,-2,4])) # Output: 6 (subarray => [2,3]) print(maxProduct([-2,0,-1])) # Output: 0 (subarray => [0]) print(maxProduct([-2,3,-4])) # Output: 24 (subarray => [3,-4]) ``` **Constraints** - Negative numbers and zeros can be a part of the array. - The function should handle both positive and negative numbers efficiently.","solution":"def maxProduct(nums): Returns the maximum product of a contiguous subarray. if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function that takes a string of lowercase letters and compresses it using the counts of repeated characters. For example, a string \\"aaabbcccc\\" should become \\"a3b2c4\\". If the compressed string is not smaller than the original string, return the original string. Example input: \\"aabcccccaaa\\" Example output: \\"a2b1c5a3\\" Example input: \\"abcdef\\" Example output: \\"abcdef\\"","solution":"def compress_string(s): Compresses the string using counts of repeated characters. If the compressed string is not smaller than the original string, return the original string. if not s: return s compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(current_char + str(count)) current_char = char count = 1 compressed.append(current_char + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Create a function in Python that takes a dictionary where keys are strings and values are lists of integers, and returns a new dictionary where each key\'s value is replaced by the sum of the integers in the list. For example, given the dictionary `{\'a\': [1, 2, 3], \'b\': [4, 5, 6], \'c\': [7, 8, 9]}`, the function should return `{\'a\': 6, \'b\': 15, \'c\': 24}`.","solution":"def sum_dict_values(input_dict): Takes a dictionary where keys are strings and values are lists of integers, and returns a new dictionary where each key\'s value is replaced by the sum of the integers in the list. :param input_dict: Dictionary with lists of integers as values :return: Dictionary with summed integer values return {key: sum(values) for key, values in input_dict.items()}"},{"question":"Write a function that takes in a list of integers and an integer k, and returns the maximum sum of k consecutive elements in the list. If k is larger than the list length or any other edge case, return 0.","solution":"def max_consecutive_sum(nums, k): Returns the maximum sum of k consecutive elements in the list nums. If k is larger than the list length or any other edge case, return 0. if k > len(nums) or k <= 0: return 0 max_sum = current_sum = sum(nums[:k]) for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function called \\"spiral_matrix\\" that generates an m x n matrix filled with elements from 1 to m*n in spiral order, starting from the top-left corner and moving rightwards initially. The function should take two integers, m and n, as input and return a list of lists representing the matrix.","solution":"def spiral_matrix(m, n): Generates an m x n matrix filled with elements from 1 to m*n in spiral order. matrix = [[0] * n for _ in range(m)] num = 1 left, right, top, bottom = 0, n-1, 0, m-1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Design a Python function that accepts a string and reverses the order of words while preserving the order of characters within the words. For example, the input \\"hello world\\" should yield \\"world hello\\".","solution":"def reverse_words_order(s): Reverses the order of words in the input string while preserving the order of characters within the words. Parameters: s (str): Input string Returns: str: The string with the order of words reversed words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Implement a function in Python `rearrange_string(s)` that takes a string consisting of lowercase alphabets and returns a new string such that no two adjacent characters are the same. If it is not possible to rearrange the string, return an empty string. **Function Signature:** ```python def rearrange_string(s: str) -> str: ``` # Constraints: - The given string s will have a length between 1 and 500 inclusive. - The string only contains lowercase English letters (\'a\' to \'z\'). # Examples: ```python rearrange_string(\\"aab\\") # Returns: \\"aba\\" rearrange_string(\\"aaab\\") # Returns: \\"\\" rearrange_string(\\"aaabbc\\") # Returns: \\"ababac\\" rearrange_string(\\"aaabbcc\\") # Returns: \\"abacabc\\" rearrange_string(\\"abcd\\") # Returns: \\"abcd\\" ``` # Explanation: - In the first example, \\"aba\\" is a valid rearrangement of \\"aab\\" where no two adjacent characters are the same. - In the second example, it is impossible to rearrange \\"aaab\\" such that no two adjacent characters are the same, thus the output is an empty string. - The function should handle other key cases efficiently within given constraints.","solution":"from collections import Counter import heapq def rearrange_string(s: str) -> str: Rearranges the string s such that no two adjacent characters are the same. Returns an empty string if rearrangement is not possible. count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) result = [] prev_count, prev_char = 0, \'\' while max_heap: cur_count, cur_char = heapq.heappop(max_heap) result.append(cur_char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count = cur_count + 1 prev_char = cur_char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"Given a string `s` which contains only lowercase letters, write a function `longest_substring_without_repeating_characters` that finds the longest substring without repeating characters and returns its length. To ensure optimal performance, your solution should operate in O(n) time complexity. Additionally, handle edge cases, such as an empty string and strings with all identical characters. Include a test function to verify the correctness of your implementation with these edge cases. ```python def longest_substring_without_repeating_characters(s): pass def test_longest_substring_without_repeating_characters(): # Test cases pass ```","solution":"def longest_substring_without_repeating_characters(s): Finds the length of the longest substring without repeating characters. Args: s (str): The input string containing only lowercase letters. Returns: int: The length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} longest = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"You are developing a personal finance tracking application named \\"BudgetMaster\\". The application aims to help users track their income, expenses, and savings efficiently. You need to create various components of the application and ensure that it aligns with the users\' needs. Original Requirements: [BOSS: We need an app to help users manage their personal finances, including tracking income, expenses, and savings. The app should be user-friendly and provide insightful reports.] --- Product Goals ```python [ \\"Create an intuitive and user-friendly interface for tracking finances.\\", \\"Provide insightful reports on users\' financial status.\\", \\"Ensure the application is scalable and can handle a large number of users.\\", ] ``` User Stories ```python [ \\"As a user, I want to easily log my daily income and expenses.\\", \\"As a user, I want to categorize my expenses for better tracking.\\", \\"As a user, I want to view monthly reports of my financial status.\\", \\"As a user, I want to set savings goals and track my progress.\\", \\"As a user, I want to get notifications of upcoming bills and expenses.\\", ] ``` Competitive Analysis ```python [ \\"Mint: A widely used personal finance app with robust features but complex UI.\\", \\"YNAB (You Need A Budget): Great for budget planning but relatively expensive.\\", \\"PocketGuard: Good for tracking spending but lacks detailed customization.\\", \\"Personal Capital: Offers investment tracking but has a steep learning curve.\\", \\"GoodBudget: Envelope-based budgeting app, simple yet limited in features.\\", \\"Wally: Free app with good expense tracking but lacks integration options.\\", ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title Reach and engagement of personal finance apps x-axis Low Reach --> High Reach y-axis Low Engagement --> High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved \\"Mint\\": [0.8, 0.75] \\"YNAB\\": [0.7, 0.65] \\"PocketGuard\\": [0.6, 0.55] \\"Personal Capital\\": [0.65, 0.45] \\"GoodBudget\\": [0.4, 0.4] \\"Wally\\": [0.3, 0.5] \\"Our Target Product\\": [0.55, 0.7] ``` Requirement Analysis The product should be a user-friendly personal finance tracking application that helps users manage their income, expenses, and savings effectively. It should provide insightful reports and be scalable to accommodate a large number of users. Requirement Pool ```python [ (\\"Allow users to log income and expenses easily.\\", \\"P0\\"), (\\"Enable categorization of expenses.\\", \\"P0\\"), (\\"Generate monthly financial reports.\\", \\"P0\\"), (\\"Allow setting and tracking of savings goals.\\", \\"P1\\"), (\\"Provide notifications for upcoming bills.\\", \\"P2\\"), ] ``` UI Design draft The UI should have a clean and intuitive design. The main dashboard should show an overview of the user\'s financial status with sections for income, expenses, and savings. There should be easy navigation to log transactions, view reports, and set goals. The layout should be simple with easy-to-read fonts and charts. Anything UNCLEAR There are no unclear points.","solution":"class BudgetMaster: def __init__(self): self.income = [] self.expenses = [] self.savings_goals = [] def log_income(self, amount, date, source): self.income.append({\\"amount\\": amount, \\"date\\": date, \\"source\\": source}) def log_expense(self, amount, date, category): self.expenses.append({\\"amount\\": amount, \\"date\\": date, \\"category\\": category}) def set_savings_goal(self, goal_amount, deadline): self.savings_goals.append({\\"goal_amount\\": goal_amount, \\"deadline\\": deadline, \\"progress\\": 0}) def add_savings_progress(self, goal_index, amount): self.savings_goals[goal_index][\\"progress\\"] += amount def generate_report(self, month, year): income_in_month = sum(i[\\"amount\\"] for i in self.income if i[\\"date\\"].month == month and i[\\"date\\"].year == year) expenses_in_month = sum(e[\\"amount\\"] for e in self.expenses if e[\\"date\\"].month == month and e[\\"date\\"].year == year) savings_in_month = income_in_month - expenses_in_month report = { \\"income\\": income_in_month, \\"expenses\\": expenses_in_month, \\"savings\\": savings_in_month } return report"},{"question":"Reverse Words in a String III Description: Given a string `s`, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order. Example 1: Input: `s = \\"Let\'s take LeetCode contest\\"` Output: `\\"s\'teL ekat edoCteeL tsetnoc\\"` Example 2: Input: `s = \\"God Ding\\"` Output: `\\"doG gniD\\"` Note: - In the string, each word is separated by a single space and there will not be any extra spaces in the string. Constraints: - 1 <= s.length <= 5 * 10^4 - `s` contains printable ASCII characters.","solution":"def reverse_words(s): Reverses the characters in each word of the string s while preserving whitespace and initial word order. Parameters: s (str): The input string. Returns: str: The string with each word\'s characters reversed. return \' \'.join(word[::-1] for word in s.split())"},{"question":"In Python, we often use dictionaries to manage collections of paired data. You are tasked with creating a program that can merge two dictionaries, `dict1` and `dict2`, into a new dictionary. If both dictionaries contain the same key, their values should be added together (assuming all values are integers). For example, given: ```python dict1 = {\'a\': 2, \'b\': 3, \'c\': 1} dict2 = {\'a\': 1, \'b\': 2, \'d\': 4} ``` The merged dictionary should be: ```python {\'a\': 3, \'b\': 5, \'c\': 1, \'d\': 4} ``` Write a function `merge_dictionaries(dict1, dict2)` that takes two dictionaries and returns the merged dictionary as described. Ensure your solution is efficient and handles edge cases where either dictionary could be empty or contain non-overlapping keys.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries. If both dictionaries contain the same key, their values are added together. merged_dict = dict1.copy() # Start with a copy of dict1 for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value return merged_dict"},{"question":"Write a Python function that simulates an ATM transaction. The function should have the following features: - Accepts inputs for an initial balance, withdrawal amount, and deposit amount from the user. - Validates the inputs to ensure that withdrawal and deposit amounts are non-negative, and the withdrawal amount does not exceed the current balance. - Updates the balance after each transaction and outputs the final balance to the user. The function should handle various edge cases, such as incorrect input types and attempt to withdraw more money than available in the account. Provide a sample input/output for the function. Use exception handling to manage potential errors.","solution":"def atm_transaction(initial_balance, withdrawal_amount, deposit_amount): Simulates an ATM transaction. Parameters: initial_balance (float): the initial balance in the account withdrawal_amount (float): the amount to withdraw from the account deposit_amount (float): the amount to deposit into the account Returns: float: the final balance after the transactions try: # Validate input types if not (isinstance(initial_balance, (int, float)) and isinstance(withdrawal_amount, (int, float)) and isinstance(deposit_amount, (int, float))): raise ValueError(\\"All amounts must be numbers.\\") # Validate that amounts are non-negative if withdrawal_amount < 0 or deposit_amount < 0 or initial_balance < 0: raise ValueError(\\"Amounts must be non-negative.\\") # Validate that the withdrawal does not exceed the current balance if withdrawal_amount > initial_balance: raise ValueError(\\"Insufficient funds for the withdrawal.\\") # Update the balance final_balance = initial_balance - withdrawal_amount + deposit_amount return final_balance except ValueError as e: return str(e)"},{"question":"Develop a function to manage a task list for a project. The task list should support the following operations: adding a task, marking a task as complete, and removing a task. Each task should have a unique identifier, description, and a status indicating whether it is complete or not. Your implementation should include: - A class `TaskManager` that maintains the list of tasks. - Methods to add a new task, mark a task as complete, and remove a task by its identifier. Each method should handle potential errors such as adding a task with an existing identifier, marking a non-existent task as complete, or removing a non-existent task. - A method to list all tasks, showing their identifier, description, and status. Ensure the code is efficient, readable, and clean, with appropriate documentation. Provide test cases to cover typical scenarios, edge cases, and erroneous inputs. For example: ``` task_manager = TaskManager() task_manager.add_task(1, \\"Design the project architecture\\") task_manager.add_task(2, \\"Develop core functionalities\\") task_manager.mark_task_complete(1) task_manager.remove_task(2) task_manager.list_tasks() ``` Expected output: ``` 1: Design the project architecture - Complete ```","solution":"class TaskManager: def __init__(self): self.tasks = {} # Using a dictionary to store tasks with their unique identifiers def add_task(self, identifier, description): if identifier in self.tasks: raise ValueError(\\"Task with this identifier already exists.\\") self.tasks[identifier] = {\'description\': description, \'complete\': False} def mark_task_complete(self, identifier): if identifier not in self.tasks: raise ValueError(\\"Task with this identifier does not exist.\\") self.tasks[identifier][\'complete\'] = True def remove_task(self, identifier): if identifier not in self.tasks: raise ValueError(\\"Task with this identifier does not exist.\\") del self.tasks[identifier] def list_tasks(self): return [{\'identifier\': id, **details} for id, details in self.tasks.items()]"},{"question":"Write a function `balanced_brackets` that checks if a string containing brackets (`{`, `}`, `(`, `)`, `[`, `]`) is balanced. A string is considered balanced if the brackets are correctly nested and every opening bracket has a corresponding closing bracket of the same type. Your function should return a boolean indicating whether the input string is balanced. Additionally, write a test suite function `test_balanced_brackets` that verifies the correctness of your `balanced_brackets` function using multiple test cases. Below is an example of the expected behavior of your function: ```python def balanced_brackets(s): stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False return stack == [] def test_balanced_brackets(): assert balanced_brackets(\\"(){}[]\\") == True assert balanced_brackets(\\"([{}])\\") == True assert balanced_brackets(\\"(}\\") == False assert balanced_brackets(\\"[(])\\") == False assert balanced_brackets(\\"[({})](]\\") == False print(\\"All tests passed!\\") test_balanced_brackets() ```","solution":"def balanced_brackets(s): Checks if a string containing brackets is balanced. :param s: A string containing brackets. :return: A boolean indicating if the string is balanced. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue # Ignore non-bracket characters, although they should not appear return stack == []"},{"question":"Write a function in Python that takes a list of integers and returns the maximum sum of a contiguous subarray using the Kadane\'s algorithm. Additionally, provide an explanation of how the algorithm works and its time complexity. The function should have the following signature: ```python def max_subarray_sum(nums: List[int]) -> int: # Your code here ``` Here\'s an example: ```python print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4])) # Output: 6 (subarray is [4,-1,2,1]) ``` # Explanation The Kadane\'s algorithm works by iterating through the array while keeping track of the maximum sum of the subarray ending at the current position in a variable (`current_max`). It also maintains the global maximum sum seen so far (`global_max`). For each element in the array, you update `current_max` to be the maximum of the current element and `current_max + current element`. If `current_max` exceeds `global_max`, you update `global_max`. # Time Complexity The time complexity of Kadane\'s algorithm is O(n), where n is the number of elements in the array. This is because it only requires a single pass through the array.","solution":"from typing import List def max_subarray_sum(nums: List[int]) -> int: Returns the maximum sum of a contiguous subarray using Kadane\'s algorithm. Parameters: nums (List[int]): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 current_max = global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Write a function that takes a list of integers and an integer `N` as input, and returns the list with all instances of `N` moved to the end, preserving the order of the other elements. Ensure the function handles cases where `N` is not present in the list or where the list is empty. Additionally, the function should keep the number of operations minimal to achieve this rearrangement. Example: 1. Input: [4, 1, 2, 3, 4, 5, 4], N = 4 Output: [1, 2, 3, 5, 4, 4, 4] 2. Input: [1, 2, 3, 4, 5], N = 6 Output: [1, 2, 3, 4, 5] 3. Input: [], N = 3 Output: [] Write the function with the prototype: ```python def move_to_end(arr: List[int], N: int) -> List[int]: # your code here ```","solution":"def move_to_end(arr, N): Moves all instances of N to the end of the list while preserving the order of other elements. # Initialize two lists, one for elements to keep and another for elements to move to the end kept_elements = [] moved_elements = [] # Iterate through the array and distribute elements to the appropriate list for num in arr: if num == N: moved_elements.append(num) else: kept_elements.append(num) # Concatenate the lists, with kept elements first followed by the moved elements return kept_elements + moved_elements"},{"question":"You are given a list of students with their names and grades across various subjects in JSON format. Write a function that takes this JSON data and returns a dictionary with each student\'s name as a key and their average grade as the value. Ignore any subjects where the grade is not available for consistency in the average calculation. Ensure your function handles cases where the list could be empty and returns appropriate results. Example Input: ```json [ {\\"name\\": \\"Alice\\", \\"grades\\": {\\"math\\": 85, \\"science\\": 92, \\"literature\\": 78}}, {\\"name\\": \\"Bob\\", \\"grades\\": {\\"math\\": 79, \\"science\\": 85}}, {\\"name\\": \\"Charlie\\", \\"grades\\": {\\"literature\\": 91, \\"math\\": 83, \\"science\\": 87}} ] ``` Example Output: ```json { \\"Alice\\": 85.0, \\"Bob\\": 82.0, \\"Charlie\\": 87.0 } ``` Function Signature: ```python def calculate_average_grades(data: List[Dict[str, Any]]) -> Dict[str, float]: pass ```","solution":"from typing import List, Dict, Any def calculate_average_grades(data: List[Dict[str, Any]]) -> Dict[str, float]: Calculate the average grade for each student. :param data: List of dictionaries containing students\' names and their grades. :return: Dictionary with each student\'s name as a key and their average grade as the value. average_grades = {} for student in data: name, grades = student[\'name\'], student[\'grades\'] if grades: average = sum(grades.values()) / len(grades) average_grades[name] = average else: average_grades[name] = 0.0 return average_grades"},{"question":"Complete the `merge_sort` function to implement the Merge Sort algorithm. Given an unsorted list of integers, the function should return the sorted list in ascending order using the Merge Sort algorithm. Function Signature ```python def merge_sort(arr: List[int]) -> List[int]: ``` Input - `arr` (List[int]): A list of integers that needs to be sorted. Output - Returns a list of integers sorted in ascending order. Example ```python merge_sort([38, 27, 43, 3, 9, 82, 10]) ``` Should return: ```python [3, 9, 10, 27, 38, 43, 82] ``` Constraints - Do not use the built-in `sorted` function or any other built-in sorting method. - The function should handle lists with duplicate elements. - Assume the list length will not exceed 10^5. Implementation Notes 1. The function should divide the input list into two halves and sort each half recursively. 2. After sorting each half, merge the two sorted halves to form the final sorted list. 3. Be mindful of edge cases, such as empty lists or lists with only one element.","solution":"from typing import List def merge_sort(arr: List[int]) -> List[int]: if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left: List[int], right: List[int]) -> List[int]: sorted_list = [] i, j = 0, 0 while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_list.append(left[i]) i += 1 else: sorted_list.append(right[j]) j += 1 # Append remaining elements sorted_list.extend(left[i:]) sorted_list.extend(right[j:]) return sorted_list"},{"question":"Create a program in Python that simulates an online bookstore system. The program should allow users to add books to the inventory, search for books by different criteria (title, author, genre), and make a purchase. Implement the following features: a class to represent a book with properties such as title, author, genre, price, and stock quantity; methods to add a book, search for books, and purchase a book which updates the stock quantity.","solution":"class Book: def __init__(self, title, author, genre, price, stock_quantity): self.title = title self.author = author self.genre = genre self.price = price self.stock_quantity = stock_quantity class Bookstore: def __init__(self): self.inventory = [] def add_book(self, book): self.inventory.append(book) def search_books(self, title=None, author=None, genre=None): results = [] for book in self.inventory: if (title and title.lower() in book.title.lower()) or (author and author.lower() in book.author.lower()) or (genre and genre.lower() in book.genre.lower()): results.append(book) return results def purchase_book(self, title): for book in self.inventory: if book.title.lower() == title.lower() and book.stock_quantity > 0: book.stock_quantity -= 1 return book return None"},{"question":"Given a list of strings, write a function `group_anagrams(words)` that takes in the list and returns a dictionary grouping the list of strings into anagrams. The dictionary\'s keys should be the sorted version of the anagram strings, and the values should be lists of anagram strings from the input list. **Example:** ```python words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] group_anagrams(words) ``` **Output:** ```python { \'aet\': [\'eat\', \'tea\', \'ate\'], \'ant\': [\'tan\', \'nat\'], \'abt\': [\'bat\'] } ``` # Constraints: - All input strings will contain only lowercase letters. - The length of each word will not exceed 100 characters. - The number of words in the input list will not exceed 10,000. Ensure your solution efficiently handles the constraints and edge cases.","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of words into anagrams. Args: words (list of str): The list of words to group. Returns: dict: A dictionary where keys are sorted strings of anagrams, and values are lists of words that are anagrams. anagram_groups = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word].append(word) return dict(anagram_groups)"},{"question":"Sort a list of integers based on the frequency of each integer. The integers that have the same frequency should be sorted in ascending order. Complete the function in Python. Example: >>> frequency_sort([4, 3, 1, 6, 4, 7, 1, 4, 7]) [4, 4, 4, 1, 1, 7, 7, 3, 6] >>> frequency_sort([9, 9, 8, 7, 8, 9, 8]) [8, 8, 8, 9, 9, 9, 7] def frequency_sort(lst):","solution":"from collections import Counter def frequency_sort(lst): Sorts a list of integers based on the frequency of each integer in descending order. If multiple integers have the same frequency, those integers are sorted in ascending order. count = Counter(lst) # Sort primarily by frequency (descending), secondarily by value (ascending) sorted_lst = sorted(lst, key=lambda x: (-count[x], x)) return sorted_lst"},{"question":"Create a function named `find_missing_number` that takes a list of integers containing `n-1` distinct elements ranging from 1 to `n` (inclusive) with one number missing, and returns the missing number. # Function Signature ```python def find_missing_number(nums: List[int]) -> int: ``` # Input - `nums` (List[int]): A list of `n-1` integers ranging from 1 to `n`. # Output - Returns an integer that represents the missing number. # Examples ```python assert find_missing_number([1, 2, 4, 5, 6]) == 3 assert find_missing_number([3, 7, 1, 2, 8, 4, 5, 6]) == 9 assert find_missing_number([1, 2, 3, 5]) == 4 ``` # Constraints - All elements in the list are unique and within the range from 1 to `n`. - The list will contain exactly `n-1` elements.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Finds the missing number from the list of integers ranging from 1 to n. n = len(nums) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(nums) return total_sum - actual_sum"},{"question":"Imagine you are working for a logistics company, and you need to develop a function that helps to optimize the loading of delivery trucks based on package dimensions. Given a list of packages, each represented as a tuple (width, height, depth), you need to determine the maximum number of packages that can be loaded into a truck without exceeding the truck\'s dimensional limits. The truck\'s dimensions are provided as a tuple (truck_width, truck_height, truck_depth). Packages should be loaded without rotation, and packages must fit entirely within the truck dimensions. Write a function `max_packages_load(truck_dims, packages)` that takes in the truck dimensions and a list of packages, and returns the maximum number of packages that can be loaded into the truck. Example: ```python def max_packages_load(truck_dims, packages): This function should return the maximum number of packages that can fit into the truck without exceeding its dimensions. Args: truck_dims (tuple): A tuple of three integers (truck_width, truck_height, truck_depth) representing the dimensions of the truck. packages (list): A list of tuples, each containing three integers (width, height, depth) representing the dimensions of a package. Returns: int: The maximum number of packages that can be loaded into the truck. Example: >>> max_packages_load((10, 10, 10), [(1, 1, 1), (2, 2, 2), (5, 5, 5), (8, 8, 8)]) 4 >>> max_packages_load((5, 5, 5), [(3, 3, 2), (4, 4, 4), (1, 1, 1)]) 2 >>> max_packages_load((8, 8, 8), [(9, 9, 9), (1, 7, 7), (6, 6, 6), (5, 5, 5)]) 2 ```","solution":"def max_packages_load(truck_dims, packages): This function should return the maximum number of packages that can fit into the truck without exceeding its dimensions. Args: truck_dims (tuple): A tuple of three integers (truck_width, truck_height, truck_depth) representing the dimensions of the truck. packages (list): A list of tuples, each containing three integers (width, height, depth) representing the dimensions of a package. Returns: int: The maximum number of packages that can be loaded into the truck. truck_width, truck_height, truck_depth = truck_dims count = 0 for package in packages: width, height, depth = package if width <= truck_width and height <= truck_height and depth <= truck_depth: count += 1 return count"},{"question":"Write a Python function that accepts a list of strings as input, where each string represents a product review. The function should analyze the sentiments conveyed in the reviews and return a dictionary with two keys: \'positive\' and \'negative\'. Each key should map to a list of reviews categorized based on the presence of predefined positive or negative words. Ensure your function handles case insensitivity and punctuation properly. Include an explanation of how you choose your predefined words and any assumptions made in the sentiment analysis process.","solution":"import re def sentiment_analysis(reviews): Analyzes the sentiments of product reviews and categorizes them into positive and negative. Args: reviews (list of str): A list of product reviews. Returns: dict: A dictionary with \'positive\' and \'negative\' keys mapping to lists of reviews. # Predefined positive and negative words positive_words = {\'good\', \'great\', \'excellent\', \'amazing\', \'fantastic\', \'superb\', \'love\'} negative_words = {\'bad\', \'terrible\', \'poor\', \'horrible\', \'awful\', \'worst\', \'hate\'} # Result dictionary sentiments = {\'positive\': [], \'negative\': []} for review in reviews: # Clean and split the review into words, handling case insensitivity and punctuation words = re.findall(r\'bw+b\', review.lower()) if any(word in positive_words for word in words): sentiments[\'positive\'].append(review) elif any(word in negative_words for word in words): sentiments[\'negative\'].append(review) return sentiments"},{"question":"Write a function that takes a string as input and returns a dictionary. The dictionary should have keys as unique words in the string, and values as the count of occurrences of each word. The comparison of words should be case-insensitive, meaning \\"Word\\" and \\"word\\" should be considered the same. The punctuation marks such as comma, period, exclamation mark, and question mark should be ignored. # Example: ```python input_string = \\"Hello, hello! How are you? You are learning Python. Python is great.\\" result = word_count(input_string) print(result) ``` # Output: ```python { \'hello\': 2, \'how\': 1, \'are\': 2, \'you\': 2, \'learning\': 1, \'python\': 2, \'is\': 1, \'great\': 1 } ``` # Constraints: 1. The input string consists of alphanumeric characters, punctuation marks, and whitespace characters. # Notes: You may use Python\'s `str.split()` method to split the string into words, but you will need to process each word to remove punctuation marks and convert them to lowercase before tallying the counts. # Function Signature: ```python def word_count(input_string: str) -> dict: # Your code here ```","solution":"import re from collections import defaultdict def word_count(input_string: str) -> dict: Takes a string as input and returns a dictionary with keys as unique words (case-insensitive), and values as the count of occurrences of each word. Punctuation is ignored. # Remove punctuation and make the string lowercase cleaned_string = re.sub(r\'[^ws]\', \'\', input_string).lower() words = cleaned_string.split() # Create a dictionary to count occurrences of each word word_count_dict = defaultdict(int) for word in words: word_count_dict[word] += 1 return dict(word_count_dict)"},{"question":"Write a function that takes two sorted lists of integers as input and merges them into a single sorted list. You may not use any built-in sorting functions or libraries. Implement your solution as efficiently as possible in terms of time complexity. def merge_sorted_lists(list1, list2): # TODO: implement merging of two sorted lists without using built-in sorting functions pass","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. :param list1: First sorted list :param list2: Second sorted list :return: Merged sorted list merged_list = [] i, j = 0, 0 # Traverse both lists, comparing elements and appending the smaller one while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are any remaining elements in list1 or list2, add them to the merged list while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Design a Python class called \'MovieDatabase\' that manages information about movies. The information should include movie title, director, release year, genre, and rating. The class should provide methods to add and remove movies, search and update movie details, and sort the list of movies by title, release year, or rating. Ensure that data encapsulation is properly implemented, and methods should be included to write and read data to/from a JSON file for data persistence. Additionally, include methods to calculate and display the average rating of movies in the database. Implement proper error handling in your code.","solution":"import json class MovieDatabase: def __init__(self): self._movies = [] def add_movie(self, title, director, release_year, genre, rating): movie = { \\"title\\": title, \\"director\\": director, \\"release_year\\": release_year, \\"genre\\": genre, \\"rating\\": rating } self._movies.append(movie) def remove_movie(self, title): self._movies = [movie for movie in self._movies if movie[\\"title\\"] != title] def search_movie(self, title): for movie in self._movies: if movie[\\"title\\"] == title: return movie return None def update_movie(self, title, new_info): for movie in self._movies: if movie[\\"title\\"] == title: movie.update(new_info) return True return False def sort_movies(self, key): self._movies.sort(key=lambda movie: movie[key]) def calculate_average_rating(self): if not self._movies: return 0.0 total_rating = sum(movie[\\"rating\\"] for movie in self._movies) return total_rating / len(self._movies) def write_to_file(self, filepath): with open(filepath, \'w\') as file: json.dump(self._movies, file) def read_from_file(self, filepath): with open(filepath, \'r\') as file: self._movies = json.load(file)"},{"question":"Design an algorithm that takes an input string and returns the number of unique characters in the string, ignoring any spaces and punctuation marks. The algorithm should be case-insensitive, meaning \'A\' and \'a\' should be considered the same character.","solution":"def count_unique_characters(s): Returns the number of unique characters in the input string, ignoring spaces and punctuation marks, and considering case-insensitivity. # Convert string to lowercase and filter out non-alphanumeric characters filtered_chars = {char.lower() for char in s if char.isalnum()} return len(filtered_chars)"},{"question":"Given a list of dictionaries representing different books in a library, write a Python function that sorts the books first by the number of pages in ascending order, and for books with the same number of pages, by their title in alphabetical order. Each dictionary contains the keys \'title\' and \'pages\'. ```python from typing import List def sort_books(books: List[dict]) -> List[dict]: Sorts the books first by number of pages in ascending order, and for books with the same number of pages, by their title in alphabetical order. Args: books (List[dict]): List of dictionaries with the keys \'title\' and \'pages\'. Returns: List[dict]: Sorted list of dictionaries. >>> sort_books([{\\"title\\": \\"Book A\\", \\"pages\\": 150}, {\\"title\\": \\"Book B\\", \\"pages\\": 120}, {\\"title\\": \\"Book C\\", \\"pages\\": 120}]) [{\'title\': \'Book B\', \'pages\': 120}, {\'title\': \'Book C\', \'pages\': 120}, {\'title\': \'Book A\', \'pages\': 150}] ```","solution":"from typing import List def sort_books(books: List[dict]) -> List[dict]: Sorts the books first by number of pages in ascending order, and for books with the same number of pages, by their title in alphabetical order. Args: books (List[dict]): List of dictionaries with the keys \'title\' and \'pages\'. Returns: List[dict]: Sorted list of dictionaries. return sorted(books, key=lambda x: (x[\'pages\'], x[\'title\']))"},{"question":"Given a list of integers, write a function that returns a new list of the same integers sorted in ascending order, but with all prime numbers moved to the front of the list. Non-prime numbers should retain their relative order from the original list. For example, given the input [4, 3, 5, 7, 6, 2, 8], the output should be [3, 5, 7, 2, 4, 6, 8].","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sort_primes_to_front(lst): Returns a new list with prime numbers moved to the front, retaining the relative order of non-prime numbers. primes = [x for x in lst if is_prime(x)] non_primes = [x for x in lst if not is_prime(x)] return primes + non_primes"},{"question":"You are given a list of integers representing the ages of a group of people. Write a program that accomplishes the following tasks: 1. Generate a new list with each element showing the age difference from the youngest person in the group. 2. Determine and print the average age of the group. 3. Identify and print the median age of the group. Handle possible edge cases such as an empty list or a list with one element. For example, with the input ages = [25, 30, 35, 40, 45], your program should return the age differences [0, 5, 10, 15, 20], print \\"The average age is 35\\", and print \\"The median age is 35\\".","solution":"def process_ages(ages): Processes a list of ages to compute age differences, average age, and median age. Args: ages (list): A list of integers representing ages. Returns: tuple: A tuple containing the list of age differences, average age, and median age. if not ages: return ([], None, None) min_age = min(ages) age_differences = [age - min_age for age in ages] average_age = sum(ages) / len(ages) sorted_ages = sorted(ages) n = len(ages) if n % 2 == 0: median_age = (sorted_ages[n//2 - 1] + sorted_ages[n//2]) / 2 else: median_age = sorted_ages[n//2] return (age_differences, average_age, median_age)"},{"question":"Develop a function in Python that takes a list of tuples where each tuple contains two elements: a string and a number. Your function should return a dictionary in which the keys are the strings, and the values are the sum of the corresponding numbers from the tuples. If a string appears in multiple tuples, their numbers should be summed. # Example Input: [(\'apple\', 1), (\'banana\', 2), (\'apple\', 3), (\'banana\', 4), (\'cherry\', 5)] Output: {\'apple\': 4, \'banana\': 6, \'cherry\': 5} # Guidelines 1. Define a function named `sum_tuples`. 2. The function should accept a list of tuples as an argument. 3. Iterate through the tuples and construct the resultant dictionary using the described logic. # Function Signature ```python def sum_tuples(data): # Insert your code here ```","solution":"def sum_tuples(data): Takes a list of tuples where each tuple contains a string and a number, and returns a dictionary where the keys are the strings from the tuples and the values are the sums of the numbers corresponding to each string. result = {} for key, value in data: if key in result: result[key] += value else: result[key] = value return result"},{"question":"Write a function that takes a string representing a mathematical expression consisting of positive integers, \'+\' and \'*\' operators only, and returns the maximum possible result by properly placing parentheses. The input string contains no spaces, and the length of the string is more than 1 and less than 100. Example: Input: \\"2+3*2\\" Output: 10 Input: \\"1+2*3+4*5\\" Output: 105","solution":"def max_possible_result(expression): Returns the maximum possible result by properly placing parentheses into the mathematical expression consisting of positive integers, \'+\' and \'*\' operators only. # Cache for memoization memo = {} def compute(left, right): # Base Case: If the substring is a single number, convert and return it. if left == right: return int(expression[left]) # If the result is already computed, return it from the memo table. if (left, right) in memo: return memo[(left, right)] max_result = float(\'-inf\') # Traverse every operator in the substring for i in range(left, right): if expression[i] == \'+\' or expression[i] == \'*\': left_result = compute(left, i - 1) right_result = compute(i + 1, right) if expression[i] == \'+\': result = left_result + right_result elif expression[i] == \'*\': result = left_result * right_result max_result = max(max_result, result) memo[(left, right)] = max_result return max_result return compute(0, len(expression) - 1)"},{"question":"Given a 2D grid of size m x n and a list of people with their starting coordinates, return the minimum time required for all people to reach a meeting point. The movement can only be horizontal or vertical, and each move counts as 1 time unit. You may assume: - All cells are reachable. - There will be at least one person in the grid. Example 1: Input: grid = [[0,0,0],[1,0,0],[0,0,1]], people = [[1,0],[2,2]] Output: 3 Example 2: Input: grid = [[1,0,0],[0,0,0],[0,0,1]], people = [[0,0],[2,2]] Output: 4 Constraints: - The grid size is `m x n` where `1 <= m, n <= 300`. - The list of people will have `1 <= len(people) <= m * n`. - The coordinates for people in the list are within the grid and no two people occupy the same starting position. - The value of each cell in the grid is either 0 or 1, where 1 represents a person and 0 represents an empty cell.","solution":"def min_total_time(people): Returns the minimum total time required for all people to reach a meeting point. rows = sorted([p[0] for p in people]) cols = sorted([p[1] for p in people]) median_row = rows[len(rows) // 2] median_col = cols[len(cols) // 2] total_time = 0 for r, c in people: total_time += abs(r - median_row) + abs(c - median_col) return total_time"},{"question":"<p>Consider the concept of a <dfn>repetition-free</dfn> string, which is defined as a string in which no two adjacent characters are the same.</p> <p>For example, the strings \\"abc\\" and \\"abab\\" are repetition-free, while \\"abca\\" and \\"aa\\" are not.</p> <p>Given a string <code>s</code> of lowercase letters, your task is to transform it into a repetition-free string by removing as few characters as possible. If there are multiple solutions, return the lexicographically smallest one.</p> <p>For instance, given <code>s = \\"aabbcc\\"</code>, one optimal solution would be <code>\\"abc\\"</code>. If <code>s = \\"aabac\\"</code>, one optimal solution would be <code>\\"abc\\"</code>.</p> <p>Write a function <code>repetition_free_string(s: str) -> str</code> that returns the repetition-free string as described.</p>","solution":"def repetition_free_string(s): Transforms the input string into a repetition-free string by removing the fewest number of characters. If there are multiple solutions, it returns the lexicographically smallest one. if not s: return \\"\\" result = [s[0]] # Start with the first character for char in s[1:]: if char != result[-1]: result.append(char) return \\"\\".join(result)"},{"question":"Develop a Python program to simulate a simple library system. The program should have a class `Library` with methods for adding a book, borrowing a book, and returning a book. Each book in the library has a title and an author. The library should prevent the borrowing of a book that has already been borrowed and should track the total number of books available at any time. Provide a test example showing the interaction with the library system. Erroneous Code: ```python class Library: def __init__(self): self.books = [] self.borrowed_books = [] def add_book(self, title, author): self.books.append({\\"title\\": title, \\"author\\": author}) def borrow_book(self, title): for book in self.books: if book[\'title\'] == title: self.borrowed_books.append(book) self.books.remove(book) break def return_book(self, title): for book in self.borrowed_books: if book[\'title\'] == title: self.books.append(book) self.borrowed_books.remove(book) break # Example usage library = Library() library.add_book(\\"1984\\", \\"George Orwell\\") library.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") library.borrow_book(\\"1984\\") library.borrow_book(\\"1984\\") # Does not indicate that book is already borrowed library.return_book(\\"1984\\") print(library.books) print(library.borrowed_books) ``` Your task is to fix the error to indicate when a book is already borrowed and test the availability of the books correctly.","solution":"class Library: def __init__(self): self.books = [] self.borrowed_books = [] def add_book(self, title, author): self.books.append({\\"title\\": title, \\"author\\": author}) def borrow_book(self, title): for book in self.books: if book[\'title\'] == title: self.borrowed_books.append(book) self.books.remove(book) return f\\"You have successfully borrowed \'{title}\'\\" return f\\"\'{title}\' is already borrowed or not available in the library\\" def return_book(self, title): for book in self.borrowed_books: if book[\'title\'] == title: self.books.append(book) self.borrowed_books.remove(book) return f\\"You have successfully returned \'{title}\'\\" return f\\"\'{title}\' was not borrowed\\" # Example usage library = Library() library.add_book(\\"1984\\", \\"George Orwell\\") library.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") print(library.borrow_book(\\"1984\\")) # You have successfully borrowed \'1984\' print(library.borrow_book(\\"1984\\")) # \'1984\' is already borrowed or not available in the library print(library.return_book(\\"1984\\")) # You have successfully returned \'1984\' print(library.return_book(\\"1984\\")) # \'1984\' was not borrowed print(library.books) # [{\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\"}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\"}] print(library.borrowed_books) # []"},{"question":"You are given an encoded string containing only digits. Your task is to decode it and determine the total number of possible decodings. Each digit or group of digits can be mapped to a letter using the following mapping: \'A\' -> 1 \'B\' -> 2 ... \'Z\' -> 26 Your goal is to write a function that takes an encoded string `s` and returns the total number of ways to decode it. The decoding must be valid according to the mapping rules above. If the input string contains leading zeros or sequences that cannot map to any valid letter, the function should return `0`. Example 1: Input: s = \\"12\\" Output: 2 Explanation: \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: s = \\"226\\" Output: 3 Explanation: \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Example 3: Input: s = \\"0\\" Output: 0 Explanation: There\'s no valid mapping for the digit \'0\', so return 0. Example 4: Input: s = \\"10\\" Output: 1 Explanation: \\"10\\" can only be decoded as \\"J\\". Constraints: `1 <= s.length <= 100` `s` contains only digits and may not contain leading zeros except for the digit \'0\' itself. Function Signature: ```python def numDecodings(s: str) -> int: ```","solution":"def numDecodings(s: str) -> int: if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): if s[i-1] != \'0\': dp[i] += dp[i-1] if \'10\' <= s[i-2:i] <= \'26\': dp[i] += dp[i-2] return dp[n]"},{"question":"Write a function that accepts a list of dictionaries, where each dictionary contains details about a movie (title, director, release year, and IMDb rating). The function should perform the following tasks: 1. Filter the list to include only movies released in or after the year 2000. 2. Sort the filtered list of movies based on their IMDb rating in descending order. 3. Compute the average IMDb rating for the filtered list of movies. The function should return a tuple with the sorted list of movie titles and the average IMDb rating. Ensure the function handles potential errors gracefully, such as dictionaries missing required keys or non-numeric IMDb ratings.","solution":"def process_movies(movies): Processes a list of movie dictionaries to filter movies released from 2000 onwards, sort them by IMDb rating in descending order, and compute the average IMDb rating. Args: movies (list): A list of dictionaries where each dictionary contains details about a movie. Returns: tuple: A tuple containing a list of movie titles sorted by IMDb rating and the average IMDb rating. # Filter out movies that don\'t have required keys or have invalid data valid_movies = [ movie for movie in movies if ( \'title\' in movie and \'director\' in movie and \'release_year\' in movie and \'imdb_rating\' in movie and isinstance(movie[\'release_year\'], int) and movie[\'release_year\'] >= 2000 and isinstance(movie[\'imdb_rating\'], (int, float)) ) ] # Sort movies based on IMDb rating in descending order sorted_movies = sorted(valid_movies, key=lambda x: x[\'imdb_rating\'], reverse=True) # Extract titles sorted_titles = [movie[\'title\'] for movie in sorted_movies] # Calculate average IMDb rating if sorted_movies: average_rating = sum(movie[\'imdb_rating\'] for movie in sorted_movies) / len(sorted_movies) else: average_rating = 0.0 return (sorted_titles, average_rating)"},{"question":"Design a function that takes a 2D matrix (list of lists) and returns its \\"spiral order\\". The matrix consists of M rows and N columns. Spiral order starts at the top-left corner of the matrix and proceeds towards the right, then moves down the right-most column, then moves left across the bottom row, and finally moves up the left-most column of the remaining submatrix, repeating this process until all elements are traversed. The function should handle cases where the matrix can be square or rectangular, and the dimensions can be large. Ensure your algorithm has an optimal time complexity and uses space efficiently. The resulting spiral order should be returned as a list containing all the matrix elements in the desired order. Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] spiral_order(matrix) ``` Output: ```python [1, 2, 3, 6, 9, 8, 7, 4, 5] ```","solution":"def spiral_order(matrix): Returns the elements of a 2D matrix in spiral order. if not matrix or not matrix[0]: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"In the context of data structures, implement a custom class `CustomQueue` that mimics the behavior of a queue using a list. This class should include methods to enqueue an element, dequeue an element, check if the queue is empty, and return the size of the queue. Additionally, implement a method to reverse the queue elements in-place. As an additional task, here is a sample operation sequence to test your queue implementation. Analyze the operations and provide their respective outputs: ```python queue = CustomQueue() queue.enqueue(10) queue.enqueue(20) queue.enqueue(30) print(queue.dequeue()) # Expected Output: 10 print(queue.size()) # Expected Output: 2 queue.reverse() print(queue.dequeue()) # Expected Output: 20 print(queue.is_empty()) # Expected Output: False queue.dequeue() print(queue.is_empty()) # Expected Output: True ``` Ensure your class handles edge cases effectively, such as attempting to dequeue from an empty queue.","solution":"class CustomQueue: def __init__(self): self.queue = [] def enqueue(self, element): self.queue.append(element) def dequeue(self): if self.is_empty(): raise IndexError(\\"Dequeue from empty queue\\") return self.queue.pop(0) def is_empty(self): return len(self.queue) == 0 def size(self): return len(self.queue) def reverse(self): self.queue.reverse()"},{"question":"Create a function that simulates the processing of an order for an online store. The function should take a list of items with their prices and quantities, and calculate the total order cost, considering potential discounts. If the total price exceeds a certain threshold, apply a 10% discount. Additionally, if a customer orders more than 3 items of the same type, apply a \\"buy 3, get 1 free\\" offer to those items. The function should then return a summary of the order, including the itemized list with the applied discounts, the initial total price, any discounts applied, and the final total price.","solution":"def process_order(items): Processes an order for an online store. Parameters: items (list of dict): A list of dictionaries where each dictionary represents an item with \'name\', \'price\', and \'quantity\' keys. Returns: dict: A summary of the order, including initial total price, any discounts applied, and the final total price. threshold_for_discount = 100.00 order_summary = { \'items\': [], \'initial_total_price\': 0.0, \'discounts\': 0.0, \'final_total_price\': 0.0 } for item in items: name = item[\'name\'] price = item[\'price\'] quantity = item[\'quantity\'] # Apply \\"buy 3, get 1 free\\" offer free_items = quantity // 4 paid_quantity = quantity - free_items cost = paid_quantity * price order_summary[\'items\'].append({ \'name\': name, \'price_per_item\': price, \'quantity\': quantity, \'free_items\': free_items, \'total_cost\': cost }) order_summary[\'initial_total_price\'] += cost # Apply 10% discount if threshold is exceeded if order_summary[\'initial_total_price\'] > threshold_for_discount: discount = 0.10 * order_summary[\'initial_total_price\'] order_summary[\'discounts\'] += discount order_summary[\'final_total_price\'] = order_summary[\'initial_total_price\'] - order_summary[\'discounts\'] return order_summary"},{"question":"You are given a string consisting of lowercase English letters only. You need to write a function that finds the maximum number of distinct characters in any substring of the given string of a specified length. **Function Signature:** ```python def max_distinct_chars_in_substring(s: str, k: int) -> int: ``` **Input:** - `s` (1 <= len(s) <= 10^5): a string of lowercase English letters. - `k` (1 <= k <= len(s)): an integer representing the length of the substring. **Output:** - Returns the maximum number of distinct characters in any substring of length `k`. **Example:** ```python print(max_distinct_chars_in_substring(\\"abcabcbb\\", 3)) # Output: 3 print(max_distinct_chars_in_substring(\\"aaaa\\", 2)) # Output: 1 print(max_distinct_chars_in_substring(\\"abcd\\", 4)) # Output: 4 print(max_distinct_chars_in_substring(\\"aabbcc\\", 3)) # Output: 2 ``` **Note:** To solve this problem efficiently with larger strings, you should consider using a sliding window approach to maintain the count of distinct characters within a window of size `k`.","solution":"def max_distinct_chars_in_substring(s: str, k: int) -> int: from collections import defaultdict max_distinct = 0 char_count = defaultdict(int) distinct_chars = 0 for i in range(len(s)): char_count[s[i]] += 1 if char_count[s[i]] == 1: # new distinct character added distinct_chars += 1 if i >= k: char_count[s[i - k]] -= 1 if char_count[s[i - k]] == 0: # distinct character removed distinct_chars -= 1 if i >= k - 1: max_distinct = max(max_distinct, distinct_chars) return max_distinct"},{"question":"Create a function in Python called `fibonacci_sequence` that generates the first `n` numbers of the Fibonacci sequence, where `n` is a parameter provided to the function. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones, typically starting with 0 and 1. Your implementation should: 1. Validate the input to ensure `n` is a non-negative integer. 2. Use an iterative approach to generate the sequence. 3. Return the generated sequence as a list. 4. Handle exceptions where necessary to guard against invalid input. For instance, when `n = 10`, the function should return the list: `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`. Here\'s an initial implementation that needs to be completed and debugged: ```python def fibonacci_sequence(n): if isinstance(n, int) and n >= 0: sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence else: raise ValueError(\\"Input must be a non-negative integer\\") print(fibonacci_sequence(10)) ``` Complete the function and ensure it correctly handles edge cases, such as when `n` is 0 or when non-integer values are passed.","solution":"def fibonacci_sequence(n): Generates the first `n` numbers of the Fibonacci sequence. :param n: Non-negative integer representing the number of Fibonacci numbers to generate. :return: List containing the first `n` numbers of the Fibonacci sequence. :raises ValueError: If the input is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a Python function that takes a string representing a mathematical expression involving addition, subtraction, multiplication, and division (e.g., \\"3 + 5 * 2 / (7 - 9)\\"), and evaluates the expression to return the result. The function should correctly handle operator precedence and parentheses. You are not allowed to use the `eval` function.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression involving addition, subtraction, multiplication, and division. Parameters: expression (str): The string representing the expression to evaluate. Returns: float: The result of the evaluated expression. import re def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_operation(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': if right == 0: raise ValueError(\\"Division by zero\\") values.append(left / right) def is_operator(c): return c in \\"+-*/\\" tokens = re.findall(\\"[+-*/()]|d+.d+|d+\\", expression.replace(\\" \\", \\"\\")) values = [] operators = [] for token in tokens: if re.match(\\"d+.d+|d+\\", token): values.append(float(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operation(operators, values) operators.pop() # Pop the \'(\' elif is_operator(token): while (operators and precedence(operators[-1]) >= precedence(token)): apply_operation(operators, values) operators.append(token) while operators: apply_operation(operators, values) return values[0]"},{"question":"Write a function that merges two separate singly linked lists into one, maintaining sorted order, but without using additional data structures such as arrays or heaps. Additionally, the function should be able to remove a specified value from the final merged list, if it exists. def merge_linked_lists(l1: LinkedList, l2: LinkedList, remove: Optional[int] = None): Merge two singly linked lists into one while maintaining sorted order and removing an optional specified value from the final merged list, if present. Example: >>> merge_linked_lists({1, 4, 5}, {2, 3, 6}, 4) {1, 2, 3, 5, 6} >>> merge_linked_lists({1, 3, 5}, {2, 4, 6}) {1, 2, 3, 4, 5, 6}","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_linked_lists(l1, l2, remove=None): Merge two singly linked lists into one while maintaining sorted order. Remove the specified value from the final merged list, if present. :param l1: ListNode, the head of the first linked list :param l2: ListNode, the head of the second linked list :param remove: int (optional), value to be removed from the merged list :return: ListNode, the head of the merged linked list dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next current.next = l1 if l1 else l2 # Remove specified value if needed current = dummy.next prev = dummy while current: if current.val == remove: prev.next = current.next else: prev = current current = current.next return dummy.next"},{"question":"You are given a string consisting of only lowercase alphabets and an integer k. Your task is to find the lexicographically smallest substring of length k in the given string. Write a function that implements this requirement. from typing import List def smallest_k_substring(s: str, k: int) -> str: Given a string s and an integer k, return the lexicographically smallest substring of length k. :param s: The input string consisting of only lowercase alphabets :param k: The length of the substring to find :return: The lexicographically smallest substring of length k >>> smallest_k_substring(\'azcbob\', 3) \'azc\' >>> smallest_k_substring(\'leetcode\', 2) \'co\'","solution":"def smallest_k_substring(s: str, k: int) -> str: Given a string s and an integer k, return the lexicographically smallest substring of length k. :param s: The input string consisting of only lowercase alphabets :param k: The length of the substring to find :return: The lexicographically smallest substring of length k if not s or k <= 0 or k > len(s): return \\"\\" smallest_substring = s[:k] for i in range(1, len(s) - k + 1): current_substring = s[i:i+k] if current_substring < smallest_substring: smallest_substring = current_substring return smallest_substring"},{"question":"Design a function that calculates the nth Fibonacci number, where the first two Fibonacci numbers are 0 and 1. The function should handle incorrect inputs politely, providing meaningful error messages. For instance, if an input is negative, or not an integer, the function should inform the user appropriately. Additionally, include a faulty code snippet that attempts to solve this problem but has a logical error. Analyze the snippet, identify the issue, and provide a corrected version of the function. Example of a faulty function: ```python def faulty_fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return faulty_fibonacci(n - 1) + faulty_fibonacci(n - 2) ``` Problem with the faulty function: It does not efficiently calculate Fibonacci numbers for large values of n due to excessive recursive calls, leading to a significant performance issue. Provide the corrected version of the function below.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence Returns: int: The nth Fibonacci number Raises: ValueError: If the input is not a non-negative integer if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Given a string of lowercase letters, determine the most frequently occurring character. If there are multiple characters with the same highest frequency, return the one that appears earliest in the alphabet. For example, in the string \\"examplestring\\", the most frequent character is \'e\'. Write a function `most_frequent_char(s: str) -> str` that takes a single argument: - `s` (a string of lowercase letters) and returns: - the most frequently occurring character in the string. # Example: ```python most_frequent_char(\\"examplestring\\") # returns \'e\' most_frequent_char(\\"testingcode\\") # returns \'t\' ``` # Constraints: - The string `s` will contain at least one character and at most 1000 characters.","solution":"def most_frequent_char(s: str) -> str: Given a string of lowercase letters, determine the most frequently occurring character. If there are multiple characters with the same highest frequency, return the one that appears earliest in the alphabet. Args: s (str): A string of lowercase letters Returns: str: The most frequently occurring character in the string from collections import Counter # Count the frequency of each character freq_count = Counter(s) # Find the character with most frequency with earliest in alphabetic order most_frequent = None highest_frequency = 0 for char in sorted(freq_count.keys()): if freq_count[char] > highest_frequency: highest_frequency = freq_count[char] most_frequent = char return most_frequent"},{"question":"Context [A new project manager]: New Feature Request Since we are developing a comprehensive live streaming platform, it is crucial to incorporate a reporting and feedback mechanism to maintain community standards and gather user feedback. Product Goals ```python [ \\"Implement a feedback system allowing users to report streams and provide suggestions\\", \\"Ensure the feedback system is intuitive and easy to use\\", \\"Facilitate moderation by allowing admins to access and manage reports\\" ] ``` User Stories ```python [ \\"As a user, I want to report inappropriate streams so that I can help maintain community standards\\", \\"As a user, I want to provide feedback on the platform so that my experience can be improved\\", \\"As an admin, I want to review and manage user reports so that I can take appropriate actions\\" ] ``` Requirement Analysis The feedback system should allow users to report streams and submit general feedback. Admins must be able to review, manage, and respond to reports and feedback. Requirement Pool ```python [ (\\"User report functionality\\", \\"P0\\"), (\\"User feedback functionality\\", \\"P0\\"), (\\"Admin report management\\", \\"P1\\"), (\\"Admin feedback management\\", \\"P1\\") ] ``` UI Design draft The report button should be placed prominently on the stream page. The feedback form should be accessible from the user\'s profile. Admins should have a separate interface to review and manage reports and feedback. Implementation approach We will extend the current Flask application by adding new models, forms, and views. For real-time administration, we will integrate an admin panel accessible only to users with admin privileges. Python package name ```python \\"livestream_platform\\" ``` File list ```python [ \\"main.py\\", \\"user.py\\", \\"stream.py\\", \\"chat.py\\", \\"report.py\\", \\"feedback.py\\", \\"admin.py\\", \\"models.py\\", \\"forms.py\\", \\"static/styles.css\\", \\"templates/index.html\\", \\"templates/login.html\\", \\"templates/register.html\\", \\"templates/stream.html\\", \\"templates/profile.html\\", \\"templates/report.html\\", \\"templates/feedback.html\\", \\"templates/admin.html\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class User{ +str username +str email +str password_hash +bool is_admin +__init__(username: str, email: str, password: str, is_admin: bool = False) +check_password(password: str): bool } class Report{ +int id +User reporter +Stream stream +str reason +bool is_reviewed +__init__(reporter: User, stream: Stream, reason: str) +mark_reviewed(): None } class Feedback{ +int id +User user +str comment +__init__(user: User, comment: str) } User \\"1\\" -- \\"*\\" Report: creates User \\"1\\" -- \\"*\\" Feedback: submits Stream \\"1\\" -- \\"*\\" Report: receives ``` Program call flow ```mermaid sequenceDiagram participant U as User participant S as Stream participant R as Report participant F as Feedback participant A as Admin U->>R: submit_report(stream: Stream, reason: str) U->>F: submit_feedback(comment: str) A->>R: review_reports() A->>R: mark_reviewed(report: Report) A->>F: review_feedbacks() ``` Anything UNCLEAR The requirement is clear to me., Engineer: Implementation 1. Add models for Report and Feedback in `models.py`. 2. Create forms for report submission and feedback in `forms.py`. 3. Add views for submitting reports and feedback and for admin to review reports and feedback in `main.py`. 4. Update templates for report submission, feedback form, and admin review panel. ----- Code: models.py ```python from flask_sqlalchemy import SQLAlchemy from flask_login import UserMixin db = SQLAlchemy() class User(UserMixin, db.Model): __tablename__ = \'users\' id = db.Column(db.Integer, primary_key=True) username = db.Column(db.String(64), unique=True, nullable=False) email = db.Column(db.String(120), unique=True, nullable=False) password_hash = db.Column(db.String(128)) is_admin = db.Column(db.Boolean, default=False) reports = db.relationship(\'Report\', backref=\'reporter\', lazy=\'dynamic\') feedbacks = db.relationship(\'Feedback\', backref=\'user\', lazy=\'dynamic\') def __init__(self, username: str, email: str, password: str, is_admin: bool = False): self.username = username self.email = email self.password_hash = generate_password_hash(password) self.is_admin = is_admin def check_password(self, password: str) -> bool: return check_password_hash(self.password_hash, password) class Report(db.Model): __tablename__ = \'reports\' id = db.Column(db.Integer, primary_key=True) reporter_id = db.Column(db.Integer, db.ForeignKey(\'users.id\'), nullable=False) stream_id = db.Column(db.Integer, db.ForeignKey(\'streams.id\'), nullable=False) reason = db.Column(db.String(500), nullable=False) is_reviewed = db.Column(db.Boolean, default=False) def __init__(self, reporter: User, stream: Stream, reason: str): self.reporter = reporter self.stream = stream self.reason = reason def mark_reviewed(self): self.is_reviewed = True class Feedback(db.Model): __tablename__ = \'feedbacks\' id = db.Column(db.Integer, primary_key=True) user_id = db.Column(db.Integer, db.ForeignKey(\'users.id\'), nullable=False) comment = db.Column(db.String(500), nullable=False) def __init__(self, user: User, comment: str): self.user = user self.comment = comment ``` ----- Code: forms.py ```python from flask_wtf import FlaskForm from wtforms import StringField, TextAreaField, SubmitField from wtforms.validators import DataRequired, Length class ReportForm(FlaskForm): reason = TextAreaField(\'Reason\', validators=[DataRequired(), Length(max=500)]) submit = SubmitField(\'Submit Report\') class FeedbackForm(FlaskForm): comment = TextAreaField(\'Comment\', validators=[DataRequired(), Length(max=500)]) submit = SubmitField(\'Submit Feedback\') ``` ----- Code: main.py ```python from flask import Flask, render_template, redirect, url_for, request from flask_login import login_required, current_user from .models import db, User, Stream, Report, Feedback from .forms import ReportForm, FeedbackForm app = Flask(__name__) app.config[\'SECRET_KEY\'] = \'secret!\' app.config[\'SQLALCHEMY_DATABASE_URI\'] = \'sqlite:///site.db\' db.init_app(app) @app.route(\'/report/<int:stream_id>\', methods=[\'GET\', \'POST\']) @login_required def report(stream_id): form = ReportForm() stream = Stream.query.get_or_404(stream_id) if form.validate_on_submit(): report = Report(reporter=current_user, stream=stream, reason=form.reason.data) db.session.add(report) db.session.commit() return redirect(url_for(\'stream\', stream_id=stream_id)) return render_template(\'report.html\', form=form) @app.route(\'/feedback\', methods=[\'GET\', \'POST\']) @login_required def feedback(): form = FeedbackForm() if form.validate_on_submit(): feedback = Feedback(user=current_user, comment=form.comment.data) db.session.add(feedback) db.session.commit() return redirect(url_for(\'home\')) return render_template(\'feedback.html\', form=form) @app.route(\'/admin/reports\') @login_required def admin_reports(): if not current_user.is_admin: return redirect(url_for(\'home\')) reports = Report.query.filter_by(is_reviewed=False).all() return render_template(\'admin_reports.html\', reports=reports) @app.route(\'/admin/reports/<int:report_id>/review\', methods=[\'POST\']) @login_required def review_report(report_id): if not current_user.is_admin: return redirect(url_for(\'home\')) report = Report.query.get_or_404(report_id) report.mark_reviewed() db.session.commit() return redirect(url_for(\'admin_reports\')) @app.route(\'/admin/feedback\') @login_required def admin_feedback(): if not current_user.is_admin: return redirect(url_for(\'home\')) feedbacks = Feedback.query.all() return render_template(\'admin_feedback.html\', feedbacks=feedbacks) if __name__ == \'__main__\': app.run(debug=True) ``` ----- Code: templates/report.html ```html <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"> <title>Report Stream</title> </head> <body> <h1>Report Stream</h1> <form method=\\"POST\\"> {{ form.hidden_tag() }} <p> {{ form.reason.label }}<br> {{ form.reason(size=32) }}<br> {% for error in form.reason.errors %} <span style=\\"color: red;\\">{{ error }}</span><br> {% endfor %} </p> <p>{{ form.submit() }}</p> </form> </body> </html> ``` ----- Code: templates/feedback.html ```html <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"> <title>Submit Feedback</title> </head> <body> <h1>Submit Feedback</h1> <form method=\\"POST\\"> {{ form.hidden_tag() }} <p> {{ form.comment.label }}<br> {{ form.comment(size=32) }}<br> {% for error in form.comment.errors %} <span style=\\"color: red;\\">{{ error }}</span><br> {% endfor %} </p> <p>{{ form.submit() }}</p> </form> </body> </html> ``` ----- Code: templates/admin_reports.html ```html <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"> <title>Admin Reports</title> </head> <body> <h1>Admin Reports</h1> <ul> {% for report in reports %} <li> Report ID: {{ report.id }}<br> Stream Title: {{ report.stream.title }}<br> Reporter: {{ report.reporter.username }}<br> Reason: {{ report.reason }}<br> <form method=\\"POST\\" action=\\"{{ url_for(\'review_report\', report_id=report.id) }}\\"> <button type=\\"submit\\">Mark as Reviewed</button> </form> </li> {% endfor %} </ul> </body> </html> ``` ----- Code: templates/admin_feedback.html ```html <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"> <title>Admin Feedback</title> </head> <body> <h1>Admin Feedback</h1> <ul> {% for feedback in feedbacks %} <li> Feedback ID: {{ feedback.id }}<br> User: {{ feedback.user.username }}<br> Comment: {{ feedback.comment }}<br> </li> {% endfor %} </ul> </body> </html> ``` -----","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a Python function to merge two sorted linked lists into a single sorted linked list. Each linked list node is represented by a class `ListNode` with attributes `val` (the value of the node) and `next` (the pointer to the next node in the list). The function should take the heads of both linked lists as input and return the head of the merged sorted linked list. Ensure the merged list maintains the sorted order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1: ListNode, l2: ListNode) -> ListNode: Merges two sorted linked lists into a single sorted linked list. Args: l1 (ListNode): The head of the first sorted linked list. l2 (ListNode): The head of the second sorted linked list. Returns: ListNode: The head of the merged sorted linked list. dummy = ListNode(0) current = dummy while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"Develop a function that simulates a simplified version of an ATM machine. The ATM has the following operations: check_balance, deposit_money, withdraw_money, and view_transaction_history. The system should start with an initial balance of zero and an empty transaction history. Each transaction should be stored with a timestamp, transaction type, and amount. Implement the ATM functionalities as methods of an ATM class, and include error handling for invalid operations (like withdrawing more money than the current balance). Provide a simple command-line interface that allows a user to interact with the ATM by choosing operations via numeric inputs. Document your code clearly, ensuring to explain each method\'s purpose and logic adequately. Additionally, write unit tests to verify that all functionalities work as expected.","solution":"import datetime class ATM: def __init__(self): self.balance = 0.0 self.transaction_history = [] def check_balance(self): Returns the current balance. return self.balance def deposit_money(self, amount): Deposits the specified amount into the ATM and records the transaction. if amount <= 0: raise ValueError(\\"Deposit amount must be greater than zero\\") self.balance += amount self.transaction_history.append({ \'timestamp\': datetime.datetime.now(), \'transaction_type\': \'Deposit\', \'amount\': amount }) return self.balance def withdraw_money(self, amount): Withdraws the specified amount from the ATM if sufficient funds are available and records the transaction. if amount <= 0: raise ValueError(\\"Withdrawal amount must be greater than zero\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount self.transaction_history.append({ \'timestamp\': datetime.datetime.now(), \'transaction_type\': \'Withdrawal\', \'amount\': amount }) return self.balance def view_transaction_history(self): Returns the transaction history. return self.transaction_history # Command-line interface is excluded as it is not testable via unit tests"},{"question":"You are given a string that represents an encoded message. The encoding rule is peculiar: each letter from \'a\' to \'z\' is encoded to a number from \'1\' to \'26\' respectively. Given the encoded message, write a function to calculate the total number of ways to decode it. Consider the mapping \'A\' = 1, \'B\' = 2, ..., \'Z\' = 26. Implement a function: ```python def num_decodings(s): Your task is to write a function that accepts a string containing the encoded message and returns the total number of ways to decode it. For example: >>> num_decodings(\\"12\\") == 2 # \\"AB\\" (1 2), \\"L\\" (12) >>> num_decodings(\\"226\\") == 3 # \\"BZ\\" (2 26), \\"VF\\" (22 6), \\"BBF\\" (2 2 6) >>> num_decodings(\\"0\\") == 0 # no valid decoding >>> num_decodings(\\"10\\") == 1 # \\"J\\" (10) ``` Your implementation should handle edge cases and invalid inputs gracefully. For example, an input string starting with \'0\' or containing invalid characters should return zero as there are no valid decodings for these cases.","solution":"def num_decodings(s): Calculates the total number of ways to decode the given encoded message. :param s: A string representing the encoded message. :return: An integer representing the number of ways to decode the message. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 # Base case: an empty string has one way to be decoded (doing nothing) dp[1] = 1 # Base case: a single non-zero character has one way to be decoded for i in range(2, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if \'10\' <= s[i - 2:i] <= \'26\': dp[i] += dp[i - 2] return dp[n]"},{"question":"Design a decision tree classifier using the Scikit-learn library to predict customer churn based on the provided telecommunications dataset. Perform necessary data pre-processing steps including handling missing values, categorical data encoding, and feature scaling. Implement cross-validation to evaluate the model\'s performance and use techniques like pruning to prevent overfitting. Finally, present the model\'s accuracy, precision, recall, and F1-score along with the confusion matrix to interpret the classification results.","solution":"import pandas as pd from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV from sklearn.preprocessing import StandardScaler, LabelEncoder from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix from sklearn.impute import SimpleImputer def decision_tree_classifier(data): # Handling missing values imputer = SimpleImputer(strategy=\'mean\') for column in data.select_dtypes(include=[\'float64\', \'int64\']).columns: data[column] = imputer.fit_transform(data[[column]]) # Encoding categorical variables label_encoders = {} for column in data.select_dtypes(include=[\'object\']).columns: le = LabelEncoder() data[column] = le.fit_transform(data[column]) label_encoders[column] = le # Features and Target X = data.drop(\'Churn\', axis=1) y = data[\'Churn\'] # Splitting data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Feature Scaling scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Model Training with Cross-Validation dt = DecisionTreeClassifier(random_state=42) param_grid = {\'max_depth\': range(3, 20)} grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=\'accuracy\') grid_search.fit(X_train, y_train) # Best model best_model = grid_search.best_estimator_ # Predictions y_pred = best_model.predict(X_test) # Evaluation Metrics metrics = { \'accuracy\': accuracy_score(y_test, y_pred), \'precision\': precision_score(y_test, y_pred), \'recall\': recall_score(y_test, y_pred), \'f1_score\': f1_score(y_test, y_pred), \'confusion_matrix\': confusion_matrix(y_test, y_pred) } return best_model, metrics"},{"question":"Develop a Python function called `reverse_words` that takes a string as input and returns the string with the order of the words reversed. Words are defined as sequences of characters separated by spaces. Your function should handle multiple spaces between words and leading or trailing spaces gracefully. Illustrate how your function works with an example. ``` python def reverse_words(sentence: str) -> str: # Write your code here # Example usage: input_sentence = \\" the sky is blue \\" output_sentence = reverse_words(input_sentence) print(output_sentence) # Output should be \\"blue is sky the\\" ```","solution":"def reverse_words(sentence: str) -> str: Takes a string as input and returns the string with the order of words reversed. Handles multiple spaces between words and leading/trailing spaces. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Create a Python script that reads a CSV file containing a list of students with their respective scores in various subjects. Calculate the average score for each student and determine the top three students with the highest average scores. Output the names and average scores of these top three students.","solution":"import csv from statistics import mean def calculate_student_averages(file_path): Reads a CSV file containing students and their scores, calculates their average scores, and returns the top three students with the highest average scores. :param file_path: Path to the CSV file :return: A list of tuples containing the names and average scores of the top three students students_scores = {} with open(file_path, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: name = row[\'Name\'] scores = list(map(int, (row[\'Math\'], row[\'English\'], row[\'Science\']))) students_scores[name] = mean(scores) sorted_students = sorted(students_scores.items(), key=lambda item: item[1], reverse=True) return sorted_students[:3] # Example usage: # top_students = calculate_student_averages(\'students_scores.csv\') # print(top_students)"},{"question":"Create a function that takes a list of integers and returns a new list containing only the even numbers from the original list, but in reverse order. You should handle cases where the list might be empty, contain all odd numbers, or have a mix of even and odd numbers. Make sure to include error-checking code to manage non-integer values in the input list. Additionally, demonstrate the function with example inputs and expected outputs.","solution":"def reverse_even_numbers(nums): Returns a new list containing only the even numbers from the original list, but in reverse order. If the input list contains non-integer values, an error is raised. if not all(isinstance(num, int) for num in nums): raise ValueError(\\"All elements in the list must be integers.\\") even_nums_reversed = [num for num in reversed(nums) if num % 2 == 0] return even_nums_reversed # Example usage print(reverse_even_numbers([1, 2, 3, 4, 5, 6])) # Output: [6, 4, 2] print(reverse_even_numbers([1, 3, 5])) # Output: [] print(reverse_even_numbers([])) # Output: []"},{"question":"Design a function that takes a string input and returns a dictionary. The dictionary should contain each unique word from the string as a key and the number of times that word appears in the string as the value. The function should disregard case sensitivity and punctuation to ensure words are counted accurately. For example, the input \\"Hello, hello! How are you?\\" should result in {\\"hello\\": 2, \\"how\\": 1, \\"are\\": 1, \\"you\\": 1}.","solution":"import re from collections import Counter def word_count(sentence): Takes a string input and returns a dictionary with each unique word as key and the number of times it appears as value. Disregards case sensitivity and punctuation. # Normalize the sentence to lower case and remove punctuation sentence = re.sub(r\'[^ws]\', \'\', sentence.lower()) words = sentence.split() return dict(Counter(words))"},{"question":"Create a function that checks if a given string is a valid palindrome when considering only alphanumeric characters and ignoring cases. Return `true` if it is a valid palindrome, and `false` otherwise. The function should run efficiently in linear time.","solution":"def is_palindrome(s: str) -> bool: Check if the given string is a valid palindrome considering only alphanumeric characters and ignoring cases. # Filter only alphanumeric characters and convert to lower case. filtered_chars = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse. return filtered_chars == filtered_chars[::-1]"},{"question":"Given an integer array `arr`, compress the array such that if an element appears consecutively, it should be replaced with the element followed by the count of its consecutive repetitions. The resulting compressed array should be structured to occupy the least amount of additional space, modifying the input array in-place. If the compressed array length is greater than the original, retain the original array. Example 1: Input: [1,1,2,3,3,3,4] Output: null Explanation: After calling your function, the input array is modified to: [1,2,2,3,3,4] which represents (1 appears twice, 2 once, 3 thrice, 4 once). Example 2: Input: [1,1,1,1,1] Output: null Explanation: After calling your function, the input array is modified to: [1,5] which represents (1 appears five times). Note: `1 <= arr.length <= 10000` `0 <= arr[i] <= 9`","solution":"def compress_array(arr): Compresses the array in-place such that consecutive elements are replaced with the element followed by the count of its consecutive repetitions. If the compressed array is not shorter, retains the original array. n = len(arr) if n == 1: return i = 0 index = 0 while i < n: current_element = arr[i] count = 1 while i + 1 < n and arr[i + 1] == current_element: count += 1 i += 1 arr[index] = current_element index += 1 if count > 1: count_str = str(count) for char in count_str: arr[index] = int(char) index += 1 i += 1 # truncate the array if compressed version is shorter if index < n: del arr[index:]"},{"question":"You are provided with a Python script that reads a CSV file and computes the average value of a specified column. However, the script currently cannot handle cases where the CSV file might have missing or malformed data in the specified column. Your task is to modify the script to process such files correctly by skipping malformed data, handling missing values properly, and ensuring the calculated average is accurate. Here is the original, basic version of the script: ```Python import csv def compute_average(file_path, column_name): with open(file_path, mode=\'r\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) total = 0 count = 0 for row in reader: total += float(row[column_name]) count += 1 return total / count file_path = \\"<ENTER FILE PATH HERE>\\" column_name = \\"<ENTER COLUMN NAME HERE>\\" average = compute_average(file_path, column_name) print(f\\"The average value of column \'{column_name}\' is {average}\\") ``` You are required to: 1. Skip rows with missing or malformed data in the specified column. 2. Handle exceptions and potential errors while reading the file and parsing data. 3. Make sure the calculation of the average is still accurate after handling these cases.","solution":"import csv def compute_average(file_path, column_name): try: with open(file_path, mode=\'r\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) total = 0 count = 0 for row in reader: try: # Skip malformed or missing data value = float(row[column_name]) total += value count += 1 except (ValueError, KeyError): continue if count == 0: return 0 # Handle case where no valid data was found return total / count except (FileNotFoundError, IOError) as e: print(f\\"Error reading file: {e}\\") return None file_path = \\"<ENTER FILE PATH HERE>\\" column_name = \\"<ENTER COLUMN NAME HERE>\\" average = compute_average(file_path, column_name) if average is not None: print(f\\"The average value of column \'{column_name}\' is {average}\\") else: print(f\\"Could not compute the average due to file error\\")"},{"question":"Design and implement a polynomial regression model using Python to forecast housing prices based on historical sales data. Your solution should encompass the following steps: 1. Data Preprocessing: Import the dataset, handle missing values, and perform any necessary data transformations such as normalization. 2. Model Selection: Choose the degree of the polynomial considering the trade-off between bias and variance. 3. Model Training: Fit the polynomial regression model to the preprocessed data. 4. Model Evaluation: Evaluate the model\'s performance using metrics such as Mean Squared Error (MSE) and R-squared. 5. Cross-Validation: Implement cross-validation to ensure the model\'s robustness and generalizability. 6. Prediction: Use the fitted model to predict housing prices for new data points. 7. Visualization: Create plots that illustrate the fit of the model to the data, the residuals, and any relevant prediction intervals or confidence bands. Your implementation should account for potential challenges such as overfitting, multicollinearity, and heteroscedasticity. Additionally, include comments in your code to explain the logic behind each step. Ensure your code is modular, with functions defined for each major component of the task. Introduce error handling to manage any exceptions that may arise during data processing or model fitting. Finally, outline how this model can be expanded or refined in future work to incorporate additional features or more complex models.","solution":"import numpy as np import pandas as pd from sklearn.preprocessing import PolynomialFeatures, StandardScaler from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split, cross_val_score from sklearn.metrics import mean_squared_error, r2_score import matplotlib.pyplot as plt def preprocess_data(df): Preprocess the data by handling missing values and normalizing features. # Fill missing values with mean of the column df = df.fillna(df.mean()) # Normalize/standardize the data scaler = StandardScaler() df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns) return df_scaled, scaler def select_polynomial_degree(X_train, y_train, max_degree=5): Select the degree of polynomial using cross-validation to balance bias and variance. best_degree = 1 best_score = float(\'-inf\') for degree in range(1, max_degree + 1): poly_features = PolynomialFeatures(degree=degree) X_poly = poly_features.fit_transform(X_train) model = LinearRegression() scores = cross_val_score(model, X_poly, y_train, cv=5, scoring=\'r2\') mean_score = scores.mean() if mean_score > best_score: best_score = mean_score best_degree = degree return best_degree def train_model(X_train, y_train, degree): Train the polynomial regression model. poly_features = PolynomialFeatures(degree=degree) X_poly = poly_features.fit_transform(X_train) model = LinearRegression().fit(X_poly, y_train) return model, poly_features def evaluate_model(model, poly_features, X_test, y_test): Evaluate the model using MSE and R-squared metrics. X_poly_test = poly_features.transform(X_test) y_pred = model.predict(X_poly_test) mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) return mse, r2 def predict(model, poly_features, X_new): Predict housing prices for new data points using the fitted model. X_poly_new = poly_features.transform(X_new) return model.predict(X_poly_new) def create_plots(model, poly_features, X, y): Create plots to illustrate the fit of the model and the residuals. X_poly = poly_features.transform(X) y_pred = model.predict(X_poly) plt.scatter(X[:, 0], y, color=\'blue\', label=\'Original data\') plt.scatter(X[:, 0], y_pred, color=\'red\', label=\'Fitted data\') plt.legend() plt.xlabel(\'Feature\') plt.ylabel(\'Target\') plt.title(\'Polynomial Regression Fit\') plt.show() residuals = y - y_pred plt.hist(residuals, bins=30) plt.xlabel(\'Residuals\') plt.title(\'Residuals Distribution\') plt.show() # Future expansions: # - Incorporate additional features (e.g., number of rooms, location factors). # - Explore more complex models such as Ridge/Lasso regression. # - Handle potential issues like multicollinearity and heteroscedasticity. # Main Execution Area def polynomial_regression_pipeline(df, feature_columns, target_column): Full pipeline for polynomial regression including preprocessing, training, evaluation, and plotting. # Extract features and target X = df[feature_columns].values y = df[target_column].values # Preprocess data df_scaled, scaler = preprocess_data(df) X_scaled = df_scaled[feature_columns].values y = df_scaled[target_column].values # Split the data X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42) # Select polynomial degree degree = select_polynomial_degree(X_train, y_train) # Train the model model, poly_features = train_model(X_train, y_train, degree) # Evaluate the model mse, r2 = evaluate_model(model, poly_features, X_test, y_test) print(f\\"Mean Squared Error: {mse}, R-squared: {r2}\\") # Prediction example X_new = X_test[:5] predictions = predict(model, poly_features, X_new) print(f\\"Predictions for new data points: {predictions}\\") # Create plots create_plots(model, poly_features, X_test, y_test) return model, poly_features, scaler"},{"question":"Write a function that takes a string as input and returns the count of each character in the string. For example, given the string \\"aabbcc\\", the output should be a dictionary containing {\'a\': 2, \'b\': 2, \'c\': 2}. Ignore case sensitivity and consider only alphanumeric characters.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. Parameters: s (str): a string to count characters from. Returns: dict: a dictionary with characters as keys and their counts as values. s = s.lower() counts = {} for char in s: if char.isalnum(): if char in counts: counts[char] += 1 else: counts[char] = 1 return counts"},{"question":"Implement a function `reverse_string(s: str) -> str` that takes a single argument, a string `s`, and returns the string reversed. You are not allowed to use Python\'s built-in string reversal methods or functions. For example, given `s = \\"hello\\"`, the function should return `\\"olleh\\"`.","solution":"def reverse_string(s: str) -> str: Reverses the given string without using built-in reversal methods. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. reversed_str = \'\' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function `word_frequency` that takes a list of strings as input and returns a dictionary where the keys are the words present in the list, and the values are the number of times each word appears in the list, in a case-insensitive manner. Punctuation should be ignored. # Example: ```python input_list = [\\"Hello, world!\\", \\"HELLO!\\", \\"Python\'s the best.\\", \\"world of Python.\\"] ``` Output: ```python { \'hello\': 2, \'world\': 2, \'pythons\': 1, \'the\': 1, \'best\': 1, \'of\': 1, \'python\': 1 } ``` # Function Signature: ```python def word_frequency(words: List[str]) -> Dict[str, int]: ``` # Constraints: - The input list will contain at most 10^3 strings. - Each string will have at most 10^2 characters. - You may assume that the input strings contain only ASCII characters. # Notes: - You can use the `re` module to handle punctuation. - Convert all words to lowercase for case-insensitivity. - You need to account for the fact that punctuation shouldn\'t be part of the words. For example, \\"Hello!\\" and \\"hello\\" should count as the same word.","solution":"import re from typing import List, Dict def word_frequency(words: List[str]) -> Dict[str, int]: Returns a dictionary where the keys are the words present in the list, and the values are the number of times each word appears in the list, in a case-insensitive manner. Punctuation is ignored. frequency = {} for sentence in words: # Remove punctuation using regex and convert to lowercase cleaned_sentence = re.sub(r\\"[^ws]\\", \\"\\", sentence.lower()) # Split the sentence into words word_list = cleaned_sentence.split() for word in word_list: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"You are given an array of integers where each element represents the maximum number of steps you can jump forward from that position. Write a function to determine the minimum number of jumps required to reach the end of the array (starting from the first element). If reaching the end is impossible, return -1. Example: ```python def minimum_jumps(arr): # Your code here # Example usage: print(minimum_jumps([2, 3, 1, 1, 4])) # Output: 2 print(minimum_jumps([3, 2, 1, 0, 4])) # Output: -1 ``` Constraints: 1. The array will have at least one element. 2. Each element in the array will be a non-negative integer.","solution":"def minimum_jumps(arr): Determines the minimum number of jumps needed to reach the end of the array. Parameters: arr (list): List of non-negative integers representing the maximum number of steps that can be jumped forward from that position. Returns: int: The minimum number of jumps to reach the end, or -1 if it\'s not possible. if len(arr) == 1: return 0 jumps = 0 farthest = 0 end = 0 for i in range(len(arr) - 1): farthest = max(farthest, i + arr[i]) if i == end: jumps += 1 end = farthest if end >= len(arr) - 1: return jumps return -1"},{"question":"In a messaging application, chat histories are stored in a list of dictionaries, where each dictionary represents a message containing sender\'s ID, recipient\'s ID, timestamp, and message content. Here is an example: ``` chat_history = [ {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user2\\", \\"timestamp\\": \\"2023-05-01T14:48:00Z\\", \\"message\\": \\"Hello!\\"}, {\\"sender\\": \\"user2\\", \\"recipient\\": \\"user1\\", \\"timestamp\\": \\"2023-05-01T14:49:00Z\\", \\"message\\": \\"Hi! How are you?\\"}, {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user2\\", \\"timestamp\\": \\"2023-05-01T14:50:00Z\\", \\"message\\": \\"I\'m good, thanks!\\"}, {\\"sender\\": \\"user3\\", \\"recipient\\": \\"user1\\", \\"timestamp\\": \\"2023-05-02T12:00:00Z\\", \\"message\\": \\"Hey user1!\\"}, {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user3\\", \\"timestamp\\": \\"2023-05-02T12:01:00Z\\", \\"message\\": \\"Hey user3!\\"} ] ``` Write a function `filter_chat_history(chat_history, user_id)` that takes the chat history and a user ID as arguments and returns all the messages where the user is the sender or the recipient, sorted by timestamp in ascending order. The function signature is: ```python def filter_chat_history(chat_history: list, user_id: str) -> list: ``` # Constraints 1. Assume that the chat history list and user IDs are valid non-empty strings. 2. The timestamp format is consistent and sortable as shown in the example. # Example ```python chat_history = [ {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user2\\", \\"timestamp\\": \\"2023-05-01T14:48:00Z\\", \\"message\\": \\"Hello!\\"}, {\\"sender\\": \\"user2\\", \\"recipient\\": \\"user1\\", \\"timestamp\\": \\"2023-05-01T14:49:00Z\\", \\"message\\": \\"Hi! How are you?\\"}, {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user2\\", \\"timestamp\\": \\"2023-05-01T14:50:00Z\\", \\"message\\": \\"I\'m good, thanks!\\"}, {\\"sender\\": \\"user3\\", \\"recipient\\": \\"user1\\", \\"timestamp\\": \\"2023-05-02T12:00:00Z\\", \\"message\\": \\"Hey user1!\\"}, {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user3\\", \\"timestamp\\": \\"2023-05-02T12:01:00Z\\", \\"message\\": \\"Hey user3!\\"} ] result = filter_chat_history(chat_history, \\"user1\\") ``` Return value for the above example should be: ```python [ {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user2\\", \\"timestamp\\": \\"2023-05-01T14:48:00Z\\", \\"message\\": \\"Hello!\\"}, {\\"sender\\": \\"user2\\", \\"recipient\\": \\"user1\\", \\"timestamp\\": \\"2023-05-01T14:49:00Z\\", \\"message\\": \\"Hi! How are you?\\"}, {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user2\\", \\"timestamp\\": \\"2023-05-01T14:50:00Z\\", \\"message\\": \\"I\'m good, thanks!\\"}, {\\"sender\\": \\"user3\\", \\"recipient\\": \\"user1\\", \\"timestamp\\": \\"2023-05-02T12:00:00Z\\", \\"message\\": \\"Hey user1!\\"}, {\\"sender\\": \\"user1\\", \\"recipient\\": \\"user3\\", \\"timestamp\\": \\"2023-05-02T12:01:00Z\\", \\"message\\": \\"Hey user3!\\"} ] ```","solution":"def filter_chat_history(chat_history: list, user_id: str) -> list: Filters the chat history to return all messages where the user_id is either the sender or the recipient. Args: - chat_history (list): A list of dictionaries containing chat messages. - user_id (str): The user ID to filter messages for. Returns: - list: A list of dictionaries with the filtered chat messages sorted by timestamp. # Filtering the messages where user_id is either sender or recipient filtered_messages = [message for message in chat_history if message[\'sender\'] == user_id or message[\'recipient\'] == user_id] # Sorting the messages by timestamp filtered_messages.sort(key=lambda x: x[\'timestamp\']) return filtered_messages"},{"question":"Write a Python function that takes a list of integers and returns a list of all possible permutations of those integers. For example, if the input is [1, 2, 3], the output should be [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]].","solution":"from itertools import permutations def all_permutations(lst): Returns all possible permutations of a list of integers. :param lst: List of integers :return: List of all possible permutations return [list(p) for p in permutations(lst)]"},{"question":"I have a list of URLs, and I need to extract the domain names from them and save them in another list. Each URL follows the standard format \\"http://www.example.com\\" or \\"https://www.example.com\\". I want a solution that works for URLs with both \\"http\\" and \\"https\\". Also, it should ignore the \\"www.\\" part to keep only the domain name (i.e., \\"example.com\\"). How can I achieve this using Python?","solution":"from urllib.parse import urlparse def extract_domains(urls): Extracts domain names from a list of URLs, ignoring \'www.\' part. Args: urls (list): List of URLs in format \'http://www.example.com\' or \'https://www.example.com\'. Returns: list: List of domain names without \'www.\'. domains = [] for url in urls: parsed_url = urlparse(url) domain = parsed_url.netloc if domain.startswith(\'www.\'): domain = domain[4:] domains.append(domain) return domains"},{"question":"In the context of data structures, explain what a trie is and its primary use cases. Then, implement a Python class `Trie` with the following methods: - `insert(word: str) -> None`: to insert a word into the trie. - `search(word: str) -> bool`: to return True if the word is in the trie, and False otherwise. - `starts_with(prefix: str) -> bool`: to return True if there is any word in the trie that starts with the given prefix, and False otherwise. Finally, provide a set of example test cases to validate the correctness of your implementation.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): Initialize the Trie. self.root = TrieNode() def insert(self, word: str) -> None: Insert a word into the trie. node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word: str) -> bool: Return True if the word is in the trie, and False otherwise. node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def starts_with(self, prefix: str) -> bool: Return True if there is any word in the trie that starts with the given prefix, and False otherwise. node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the sum of that element and its neighbors in the original list. For elements at the beginning or end of the list, their \\"missing\\" neighbors should be treated as zeros. Example: Input: [1, 2, 3, 4, 5] Output: [3, 6, 9, 12, 9] Explanation: For element at index 0: 0 + 1 + 2 = 3 For element at index 1: 1 + 2 + 3 = 6 For element at index 2: 2 + 3 + 4 = 9 For element at index 3: 3 + 4 + 5 = 12 For element at index 4: 4 + 5 + 0 = 9","solution":"def sum_with_neighbors(nums): Given a list of integers, returns a new list where each element is the sum of that element and its neighbors in the original list. For elements at the beginning or end of the list, treat missing neighbors as zero. :param nums: List of integers :return: List of integers if not nums: return [] result = [] n = len(nums) for i in range(n): left = nums[i - 1] if i - 1 >= 0 else 0 right = nums[i + 1] if i + 1 < n else 0 current_sum = left + nums[i] + right result.append(current_sum) return result"},{"question":"Design a function that takes an input string and transforms it according to a specific set of rules related to Caesar cipher. The function should shift each letter in the string by a given number of positions in the alphabet, wrapping around if necessary (i.e., \'z\' shifted by 1 becomes \'a\'). The transformation should only apply to alphabetic characters while preserving case; non-alphabetic characters should remain unchanged. The function should also include validation to handle edge cases like empty strings or non-integer shift values. Improve the function to maintain optimal performance and ensure that it handles very large strings efficiently.","solution":"def caesar_cipher(input_string, shift): Applies a Caesar cipher transformation to the input string by shifting the letters by the given shift value while preserving the case. Non-alphabetical characters remain unchanged. Args: - input_string (str): The string to be transformed. - shift (int): The number of positions to shift each letter. Returns: - str: The transformed string. if not isinstance(input_string, str) or not isinstance(shift, int): raise ValueError(\\"Invalid input: input_string must be a string and shift must be an integer\\") result = [] for char in input_string: if char.isalpha(): if char.islower(): result.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) elif char.isupper(): result.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result)"},{"question":"Given a strictly increasing and then strictly decreasing integer array `arr` (reminiscent of a mountain array but without restriction on the peak placement), write a function to find the `k`-th largest element in the array in `O(n)` time complexity without using extra space for another array. # Function Signature ```python def find_kth_largest(arr: List[int], k: int) -> int: ``` # Input - `arr` - a list of integers, where the list is strictly increasing and then strictly decreasing. - `k` - an integer representing the position (1-based) of the largest element to find. # Output Return an integer representing the `k`-th largest element in the given list. # Constraints - All elements in the list are unique. - `3 <= len(arr) <= 10000` - `1 <= k <= len(arr)` # Example 1: Input ```python arr = [1, 3, 8, 12, 7, 5, 2] k = 3 ``` Output ```python 7 ``` Explanation The 3rd largest element is 7. # Example 2: Input ```python arr = [1, 2, 3, 6, 4, 2] k = 1 ``` Output ```python 6 ``` Explanation The largest element in the array is 6.","solution":"def find_kth_largest(arr, k): Returns the k-th largest element in the given array arr. The array is guaranteed to be strictly increasing and then strictly decreasing. return sorted(arr, reverse=True)[k-1]"},{"question":"You are given an array of integers that represents the stock price of a company over a series of days. Each element in the array corresponds to the stock price on that particular day. You can only perform one transaction, meaning you can buy the stock on one day and sell it on a different day in the future. Write a function `maxProfit(prices)` that calculates the maximum possible profit you can achieve from this single transaction. If no profit can be made, return 0. Example: ``` Input: [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Input: [7,6,4,3,1] Output: 0 Explanation: No profit can be made since the prices are always decreasing. ``` # Constraints: - The array of stock prices will have at least 2 elements and at most 10^5 elements. - Each stock price will be a non-negative integer not exceeding 10^4. # Instructions: 1. Create a function `maxProfit(prices)` that takes in an array of integers. 2. Implement an efficient solution with a time complexity of O(n). # Tips: - Consider using a single pass through the array to find the solution. - Keep track of the minimum price seen so far and the maximum profit possible at each step.","solution":"def maxProfit(prices): Calculates the maximum possible profit from a single transaction. :param prices: List[int] - list of stock prices :return: int - maximum profit if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Create a function that takes a string as input and returns a dictionary with the count of each character. The function should be case-sensitive and include punctuation marks and spaces in the character count. For instance, given the string \\"Hello, World!\\", the function should return: ``` { \'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \',\': 1, \' \': 1, \'W\': 1, \'r\': 1, \'d\': 1, \'!\': 1 } ```","solution":"def character_count(s): Returns a dictionary with the count of each character in the string s. The count is case-sensitive and includes punctuation marks and spaces. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Given a list of integers, write a function that finds the longest subsequence where the difference between consecutive integers is strictly increasing. Return the length of this longest subsequence. For instance, in the list [1, 2, 3, 6, 7, 8, 3, 2], the subsequence [1, 2, 3, 6, 7, 8] is strictly increasing and has the length 6. ```python def longest_strictly_increasing_subsequence(lst): # Your code here # Example usage: # longest_strictly_increasing_subsequence([1, 2, 3, 6, 7, 8, 3, 2]) should return 6 ```","solution":"def longest_strictly_increasing_subsequence(lst): Finds the length of the longest subsequence where the difference between consecutive integers is strictly increasing. if not lst: return 0 # Initialize variables max_length = 1 current_length = 1 for i in range(1, len(lst)): if lst[i] > lst[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Establish a data pipeline using the Pandas and Scikit-learn libraries to preprocess the famous Titanic dataset. The preprocessing steps should include handling missing values, encoding categorical variables, and standardizing numerical features. After completing these steps, use a RandomForestClassifier to predict the survival of passengers based on these preprocessed features.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.impute import SimpleImputer from sklearn.ensemble import RandomForestClassifier def preprocess_and_train_model(data): # Split data into features and target X = data.drop(columns=[\'Survived\']) y = data[\'Survived\'] # Define columns numerical_features = [\'Age\', \'Fare\'] categorical_features = [\'Pclass\', \'Sex\', \'Embarked\'] # Preprocessing for numerical data numerical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'median\')), (\'scaler\', StandardScaler()) ]) # Preprocessing for categorical data categorical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'most_frequent\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\')) ]) # Bundle preprocessing for numerical and categorical data preprocessor = ColumnTransformer( transformers=[ (\'num\', numerical_transformer, numerical_features), (\'cat\', categorical_transformer, categorical_features) ]) # Create pipeline with preprocessor and model model = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'classifier\', RandomForestClassifier(n_estimators=100, random_state=0)) ]) # Split data into training and validation sets X_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0) # Fit the model model.fit(X_train, y_train) # Get predictions predictions = model.predict(X_val) return model, predictions, y_val"},{"question":"Given a binary tree, where each node contains a value, write a function `is_subtree` that takes in two binary trees (A and B) and returns True if tree B is a subtree of tree A, and False otherwise. # Input - `A`: The root node of Binary Tree A. - `B`: The root node of Binary Tree B. # Output - A boolean value (True or False) indicating whether tree B is a subtree of tree A. # Example ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example Binary Tree A # 3 # / # 4 5 # / # 1 2 rootA = TreeNode(3) rootA.left = TreeNode(4) rootA.right = TreeNode(5) rootA.left.left = TreeNode(1) rootA.left.right = TreeNode(2) # Example Binary Tree B # 4 # / # 1 2 rootB = TreeNode(4) rootB.left = TreeNode(1) rootB.right = TreeNode(2) print(is_subtree(rootA, rootB)) # Output: True ``` # Constraints - Each node\'s value will be a unique integer. - Tree B is considered a subtree of tree A if there is a node n in tree A such that the subtree of n is identical to tree B. # Solution Here is the function signature: ```python def is_subtree(rootA: TreeNode, rootB: TreeNode) -> bool: # Your code here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_same_tree(s, t): if not s and not t: return True if not s or not t: return False if s.val != t.val: return False return is_same_tree(s.left, t.left) and is_same_tree(s.right, t.right) def is_subtree(rootA, rootB): if not rootB: return True if not rootA: return False if is_same_tree(rootA, rootB): return True return is_subtree(rootA.left, rootB) or is_subtree(rootA.right, rootB)"},{"question":"Create a function that takes a list of integers and returns a list of unique quadruples (a, b, c, d) such that a + b + c + d = target. Each quadruple should be sorted in non-descending order, and the list of quadruples should be sorted lexicographically. Avoid returning duplicate quadruples. Function signature: `def four_sum(nums: List[int], target: int) -> List[List[int]]` # Example: Input: ``` nums = [1, 0, -1, 0, -2, 2] target = 0 ``` Output: ``` [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` # Constraints: - All quadruples should be listed in non-descending order and no duplicate quadruples should be included in the output. - The algorithm should focus on minimizing complexity for large inputs.","solution":"from typing import List def four_sum(nums: List[int], target: int) -> List[List[int]]: Finds all unique quadruples in the list that sum up to the target. nums.sort() quadruples = set() n = len(nums) for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[j] + nums[left] + nums[right] if current_sum == target: quadruples.add((nums[i], nums[j], nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 # Sort and convert to list of lists result = [list(q) for q in sorted(quadruples)] return result"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is represented as a string of its binary equivalent in reverse order. Your solution should include error handling and edge cases: def reverse_binary_list(lst): Example: reverse_binary_list([2, 3, 4]) should return [\'01\', \'11\', \'001\'] reverse_binary_list([0, 7, 8]) should return [\'0\', \'111\', \'0001\'] reverse_binary_list([-1, 5, -8]) should handle error and may raise a ValueError result = [] for num in lst: # Ensure function handles non-negative integers only. if num < 0: raise ValueError(f\\"Negative number found: {num}\\") binary_str = bin(num)[2:] # Convert number to binary, strip \'0b\' reversed_binary_str = binary_str[::-1] # Reverse the binary string result.append(reversed_binary_str) return result","solution":"def reverse_binary_list(lst): Takes a list of integers and returns a new list where each integer is represented as a string of its binary equivalent in reverse order. Raises a ValueError if a negative integer is found. Example: reverse_binary_list([2, 3, 4]) should return [\'01\', \'11\', \'001\'] reverse_binary_list([0, 7, 8]) should return [\'0\', \'111\', \'0001\'] reverse_binary_list([-1, 5, -8]) should raise a ValueError :param lst: List of integers :return: List of reversed binary string equivalents result = [] for num in lst: if num < 0: raise ValueError(f\\"Negative number found: {num}\\") binary_str = bin(num)[2:] # Convert number to binary, strip \'0b\' reversed_binary_str = binary_str[::-1] # Reverse the binary string result.append(reversed_binary_str) return result"},{"question":"Implement a function in Python that takes a string composed of uppercase English letters and removes all instances of a specified character. Your function should also return the number of characters removed. # Function Signature: ```python def remove_char_and_count(input_str: str, char_to_remove: str) -> (str, int): ``` # Input - `input_str` (str): The original string containing only uppercase English letters. - `char_to_remove` (str): A single uppercase character to be removed from the original string. # Output - (str, int): A tuple where the first element is the modified string after removing all instances of `char_to_remove`, and the second element is the number of characters removed. # Example ```python assert remove_char_and_count(\\"HELLO\\", \\"L\\") == (\\"HEO\\", 2) assert remove_char_and_count(\\"TESTCASE\\", \\"E\\") == (\\"TSTCAS\\", 2) assert remove_char_and_count(\\"NOCHANGE\\", \\"Z\\") == (\\"NOCHANGE\\", 0) ``` # Constraints - The input string will have a length between 1 and 100, inclusive. - The character to remove will always be a single uppercase English letter. - There is no guarantee that `char_to_remove` will be present in `input_str`.","solution":"def remove_char_and_count(input_str: str, char_to_remove: str) -> (str, int): Removes all instances of \'char_to_remove\' from \'input_str\' and returns the modified string along with the count of characters removed. count_removed = input_str.count(char_to_remove) modified_str = input_str.replace(char_to_remove, \\"\\") return modified_str, count_removed"},{"question":"Implement a function `sort_by_frequency` that sorts a list of integers based on the frequency of elements in descending order. If two elements have the same frequency, they should be sorted by their value in ascending order. Your task is to complete the given code and make sure it passes the provided examples: ```python def sort_by_frequency(arr: list): Sorts the list based on frequency of elements in descending order. If frequencies match, sorts by element values in ascending order. >>> sort_by_frequency([5, 3, 9, 5, 5, 3, 3]) [5, 5, 5, 3, 3, 3, 9] >>> sort_by_frequency([8, 8, 7, 7, 7, 6, 6, 6, 5]) [6, 6, 6, 7, 7, 7, 8, 8, 5] # Use a dictionary to count frequencies freq_dict = {} for num in arr: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 # Sort the items first by frequency, then by value sorted_list = sorted(arr, key=lambda x: (-freq_dict[x], x)) return sorted_list print(sort_by_frequency([5, 3, 9, 5, 5, 3, 3])) # [5, 5, 5, 3, 3, 3, 9] print(sort_by_frequency([8, 8, 7, 7, 7, 6, 6, 6, 5])) # [6, 6, 6, 7, 7, 7, 8, 8, 5] ``` **Note**: Ensure to handle edge cases such as empty lists and lists with only one unique element.","solution":"def sort_by_frequency(arr: list) -> list: Sorts the list based on frequency of elements in descending order. If frequencies match, sorts by element values in ascending order. >>> sort_by_frequency([5, 3, 9, 5, 5, 3, 3]) [5, 5, 5, 3, 3, 3, 9] >>> sort_by_frequency([8, 8, 7, 7, 7, 6, 6, 6, 5]) [6, 6, 6, 7, 7, 7, 8, 8, 5] # Use a dictionary to count frequencies freq_dict = {} for num in arr: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 # Sort the items first by frequency, then by value sorted_list = sorted(arr, key=lambda x: (-freq_dict[x], x)) return sorted_list # Test cases to verify print(sort_by_frequency([5, 3, 9, 5, 5, 3, 3])) # [5, 5, 5, 3, 3, 3, 9] print(sort_by_frequency([8, 8, 7, 7, 7, 6, 6, 6, 5])) # [6, 6, 6, 7, 7, 7, 8, 8, 5]"},{"question":"Given a binary tree, return the sum of the values of nodes located at the k-th level from the root. The root itself is located at level 0. Note: - The binary tree nodes can contain any integer values (both positive and negative). Example 1: Input: root = [1,2,3,4,5], k = 2 Output: 9 Explanation: The nodes at the 2nd level are 4 and 5. Sum = 4 + 5 = 9. Example 2: Input: root = [1,2,3,4,null,5], k = 1 Output: 5 Explanation: The nodes at the 1st level are 2 and 3. Sum = 2 + 3 = 5. Constraints: - The number of nodes in the tree is between 1 and 10^4. - `k` is a non-negative integer less than the height of the tree. Function Signature: ```python def sum_at_kth_level(root: Optional[TreeNode], k: int) -> int: ```","solution":"from typing import Optional from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_at_kth_level(root: Optional[TreeNode], k: int) -> int: if not root: return 0 queue = deque([(root, 0)]) # Queue contains pairs of (node, level) sum_of_kth_level = 0 while queue: node, level = queue.popleft() if level == k: sum_of_kth_level += node.val if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return sum_of_kth_level"},{"question":"Implement a function to optimize the performance of a bubble sort algorithm to reduce the time complexity for nearly sorted datasets. The function should terminate the sorting process early if it detects that the array is already sorted during the intermediate stages. ```python def bubble_sort_optimized(arr): n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr ```","solution":"def bubble_sort_optimized(arr): Optimized Bubble Sort that terminates early if the array is already sorted. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Write a function `isogram(s)` that determines whether a given string `s` is an isogram. An isogram is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. Your function should return `True` if `s` is an isogram and `False` otherwise. Letter comparison should be case-insensitive. # Example ```python isogram(\\"lumberjack\\") → True isogram(\\"background\\") → True isogram(\\"downstream\\") → True isogram(\\"six-year-old\\") → True isogram(\\"Alphabet\\") → False ```","solution":"def isogram(s): Determines whether a given string s is an isogram. An isogram is a word or phrase without a repeating letter (case insensitive), however spaces and hyphens are allowed to appear multiple times. s = s.replace(\\" \\", \\"\\").replace(\\"-\\", \\"\\").lower() return len(s) == len(set(s))"},{"question":"Design a Python function that achieves two objectives: first, it verifies if a number is a perfect square; second, it confirms if the integer square root of that number itself forms a perfect square. The function should return a tuple, with the first element being the boolean result confirming if the number is a perfect square, and the second being the boolean result verifying if the integer square root is also a perfect square. For example, given the input number 16, the function should return: result = (True, True) In this case, 16 is a perfect square (4 * 4) and its square root, 4, is also a perfect square (2 * 2). Another example, given the input number 14, the function should return: result = (False, False) In this case, 14 is not a perfect square, and hence it does not meet the criteria for both checks. Implement the function taking into account the possibility of having large numerical inputs for better performance and efficiency. The function should properly handle input validation, ensuring only non-negative integers are processed.","solution":"import math def check_perfect_square(n): Checks if a number is a perfect square and its integer square root is also a perfect square. Args: n (int): The number to be checked. Must be a non-negative integer. Returns: tuple: A tuple where the first element indicates if n is a perfect square, and the second element indicates if the integer square root of n is a perfect square. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") # Check if n is a perfect square sqrt_n = int(math.isqrt(n)) is_perfect_square = sqrt_n * sqrt_n == n # Check if the integer square root of n is a perfect square if is_perfect_square: sqrt_sqrt_n = int(math.isqrt(sqrt_n)) is_sqrt_perfect_square = sqrt_sqrt_n * sqrt_sqrt_n == sqrt_n else: is_sqrt_perfect_square = False return (is_perfect_square, is_sqrt_perfect_square)"},{"question":"You are given an array of integers `nums` and an integer `target`. Write a function to return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. Constraints: The number of indices in the array is in the range [2, 10^4]. -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9 Your solution should make use of an efficient algorithm, ideally with a time complexity of O(n).","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. Args: nums (list): List of integers. target (int): Target sum. Returns: list: List of two indices. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Write a Python function that takes in a list of strings and returns a list of all the palindromic substrings (palindromes that are part of longer strings) found in each string. The function should handle special cases such as empty strings and should be optimized to handle large inputs efficiently. Additionally, include docstrings explaining each function and the main logic section of your script. Provide test cases to demonstrate that your function handles various edge cases and performs as expected with both small and large datasets.","solution":"def find_palindromic_substrings(s): Given a string s, return a list of all palindromic substrings in s. Parameters: s (str): The input string. Returns: list: A list of palindromic substrings found in s. def is_palindrome(sub): return sub == sub[::-1] palindromes = [] n = len(s) # Check each substring (n^2 complexity) for start in range(n): for end in range(start + 2, n + 1): # +2 ensures we only consider substrings of length 2 or more substring = s[start:end] if is_palindrome(substring): palindromes.append(substring) return palindromes def get_palindromic_substrings_in_list(strings): Given a list of strings, return a list where each element is a list of all palindromic substrings found in the corresponding input string. Parameters: strings (list): A list of input strings. Returns: list: A list of lists, where each list contains the palindromic substrings of the corresponding string. result = [] for s in strings: result.append(find_palindromic_substrings(s)) return result"},{"question":"Write a Python program to implement a Decision Tree Classifier from scratch without using any external libraries such as Scikit-learn. Your solution should include methods to train the model on a dataset, predict the class labels for new instances, and calculate the accuracy of the model based on test data. Additionally, implement a method to visualize the resulting decision tree in a textual format.","solution":"class DecisionTreeNode: def __init__(self, feature=None, threshold=None, left=None, right=None, value=None): self.feature = feature self.threshold = threshold self.left = left self.right = right self.value = value class DecisionTreeClassifier: def __init__(self, max_depth=None): self.max_depth = max_depth self.root = None def fit(self, X, y): self.num_classes = len(set(y)) self.num_features = X.shape[1] self.root = self._grow_tree(X, y) def predict(self, X): return [self._predict(inputs) for inputs in X] def _predict(self, inputs): node = self.root while node.value is None: if inputs[node.feature] < node.threshold: node = node.left else: node = node.right return node.value def _grow_tree(self, X, y, depth=0): num_samples_per_class = [sum(y == i) for i in range(self.num_classes)] predicted_class = num_samples_per_class.index(max(num_samples_per_class)) node = DecisionTreeNode(value=predicted_class) if depth < self.max_depth: idx, thr = self._best_split(X, y) if idx is not None: indices_left = X[:, idx] < thr left = self._grow_tree(X[indices_left], y[indices_left], depth + 1) right = self._grow_tree(X[~indices_left], y[~indices_left], depth + 1) return DecisionTreeNode(idx, thr, left, right) return node def _best_split(self, X, y): m, n = X.shape if m <= 1: return None, None num_parent = [sum(y == c) for c in range(self.num_classes)] best_gini = 1.0 - sum((num / m) ** 2 for num in num_parent) best_idx, best_thr = None, None for idx in range(n): thresholds, classes = zip(*sorted(zip(X[:, idx], y))) num_left = [0] * self.num_classes num_right = num_parent.copy() for i in range(1, m): c = classes[i - 1] num_left[c] += 1 num_right[c] -= 1 gini_left = 1.0 - sum((num_left[x] / i) ** 2 for x in range(self.num_classes)) gini_right = 1.0 - sum((num_right[x] / (m - i)) ** 2 for x in range(self.num_classes)) gini = (i * gini_left + (m - i) * gini_right) / m if thresholds[i] == thresholds[i - 1]: continue if gini < best_gini: best_gini = gini best_idx = idx best_thr = (thresholds[i] + thresholds[i - 1]) / 2 return best_idx, best_thr def accuracy(self, X, y): predictions = self.predict(X) return sum(predictions == y) / len(y) def print_tree(self, node=None, depth=0): if node is None: node = self.root if node.value is not None: print(f\\"{\'| \' * depth}Predict: {node.value}\\") else: print(f\\"{\'| \' * depth}[X{node.feature} < {node.threshold:.3f}]\\") self.print_tree(node.left, depth + 1) self.print_tree(node.right, depth + 1)"},{"question":"Develop a Python function that takes a list of integers and returns a new list containing only the elements that are Fibonacci numbers from the original list. Utilize an efficient algorithm to determine if a number is a Fibonacci number.","solution":"def is_fibonacci_number(n): Check if a number is a Fibonacci number by checking if one of (5*n*n + 4) or (5*n*n - 4) is a perfect square. if n < 0: return False def is_perfect_square(x): s = int(x ** 0.5) return s * s == x return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4) def filter_fibonacci_numbers(lst): Returns a list of elements from the original list that are Fibonacci numbers. return [x for x in lst if is_fibonacci_number(x)]"},{"question":"Implement a method called `merge_intervals` that takes a list of tuples, where each tuple represents an interval defined by a start and end time. The method should merge overlapping intervals and return a list of merged intervals. For example, given the input: `[(1, 3), (2, 6), (8, 10), (9, 18)]` The merged intervals should be: `[(1, 6), (8, 18)]` The intervals `(1, 3)` and `(2, 6)` overlap and are merged into `(1, 6)`. Similarly, the intervals `(8, 10)` and `(9, 18)` overlap and are merged into `(8, 18)`. If the input list is empty or contains intervals that do not overlap, the method should return the input list as-is. Additional to this, the method should raise a ValueError if any interval has the start time greater than the end time. For example, given the input: `[(3, 1), (5, 10)]` This should raise an error: `ValueError: Interval (3, 1) is invalid because the start time is greater than the end time.`","solution":"def merge_intervals(intervals): if not intervals: return intervals # Sort intervals by start time intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_start, current_end = intervals[0] for interval in intervals: start, end = interval if start > end: raise ValueError(f\\"Interval ({start}, {end}) is invalid because the start time is greater than the end time.\\") if start <= current_end: # Overlapping intervals current_end = max(current_end, end) else: # Non-overlapping interval, add the previous interval to the merged list merged_intervals.append((current_start, current_end)) current_start, current_end = start, end # Add the last interval merged_intervals.append((current_start, current_end)) return merged_intervals"},{"question":"Design a program that simulates a simple banking system. Your program should allow users to create accounts, deposit and withdraw money, check account balances, and transfer money between accounts. Implement a class `BankAccount` with appropriate methods to handle these operations. Ensure that users cannot withdraw more money than their current balance and that all transactions are logged with timestamps. Additionally, provide a summary report function that lists all accounts with their balances and a log of all transactions that occurred within a specified date range.","solution":"import datetime class BankAccount: def __init__(self, account_name): self.account_name = account_name self.balance = 0.0 self.transaction_log = [] def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount self.transaction_log.append((datetime.datetime.now(), f\\"Deposit: +{amount:.2f}\\", self.balance)) def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount self.transaction_log.append((datetime.datetime.now(), f\\"Withdrawal: -{amount:.2f}\\", self.balance)) def get_balance(self): return self.balance def transfer(self, target_account, amount): if amount <= 0: raise ValueError(\\"Transfer amount must be positive.\\") self.withdraw(amount) target_account.deposit(amount) self.transaction_log.append((datetime.datetime.now(), f\\"Transfer to {target_account.account_name}: -{amount:.2f}\\", self.balance)) target_account.transaction_log.append((datetime.datetime.now(), f\\"Transfer from {self.account_name}: +{amount:.2f}\\", target_account.balance)) def get_transaction_log(self, start_date=None, end_date=None): filtered_log = [] for log in self.transaction_log: if (start_date is None or log[0] >= start_date) and (end_date is None or log[0] <= end_date): filtered_log.append(log) return filtered_log @staticmethod def summary_report(accounts, start_date=None, end_date=None): report = \\"\\" for account in accounts: report += f\\"Account: {account.account_name}, Balance: {account.get_balance():.2f}n\\" report += \\"Transactions:n\\" transactions = account.get_transaction_log(start_date, end_date) for transaction in transactions: report += f\\"{transaction[0]} - {transaction[1]}, Balance after transaction: {transaction[2]:.2f}n\\" report += \\"n\\" return report"},{"question":"Create a function that takes a string and returns a dictionary containing the frequency of each character in the string. For example, given the input \\"hello world\\", the output should be {\\"h\\": 1, \\"e\\": 1, \\"l\\": 3, \\"o\\": 2, \\" \\": 1, \\"w\\": 1, \\"r\\": 1, \\"d\\": 1}.","solution":"def character_frequency(s): Returns a dictionary containing the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Given a list of dictionaries representing employees, where each dictionary contains \'name\', \'age\', \'department\', and \'salary\' fields, write a Python function that extracts and returns the names of employees from the \'Engineering\' department aged 30 and above. The function should also sort these names in descending order of their salaries. If two employees have the same salary, their names should be sorted alphabetically. If there are no such employees, return an empty list. Example input: ```python employees = [ {\'name\': \'Alice\', \'age\': 34, \'department\': \'Engineering\', \'salary\': 70000}, {\'name\': \'Bob\', \'age\': 28, \'department\': \'Marketing\', \'salary\': 60000}, {\'name\': \'Charlie\', \'age\': 32, \'department\': \'Engineering\', \'salary\': 150000}, {\'name\': \'Dana\', \'age\': 29, \'department\': \'Engineering\', \'salary\': 90000}, {\'name\': \'Eve\', \'age\': 40, \'department\': \'HR\', \'salary\': 120000} ] ``` Expected output: ```python [\'Charlie\', \'Alice\'] ```","solution":"def extract_engineers(employees): Extract and return the names of employees from the \'Engineering\' department aged 30 and above, sorted by descending salary, and alphabetically by name in case of salary ties. eligible_employees = [ employee for employee in employees if employee[\'department\'] == \'Engineering\' and employee[\'age\'] >= 30 ] sorted_employees = sorted(eligible_employees, key=lambda x: (-x[\'salary\'], x[\'name\'])) return [employee[\'name\'] for employee in sorted_employees]"},{"question":"Design a Python function that computes all the valid parenthetical expressions that can be constructed with a given number of pairs of parentheses, and returns a list containing all such expressions in lexicographical order. The function should accept an integer input `n`, which represents the desired number of pairs of parentheses, and generate all combinations of well-formed parentheses of length `2*n`. Moreover, include an initial implementation that attempts to solve the problem but contains a flaw. Carefully explain the flaw in this implementation and provide a corrected version of the function. The function should avoid using any pre-existing Python functions or libraries that directly solve the problem, and it should handle cases where `n` is zero, returning an empty list. # Example: For `n = 3`, the function should return: ``` [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] ``` # Initial (Flawed) Implementation Example: ```python def generate_parentheses(n): result = [] def backtrack(s=\'\', left=0, right=0): if len(s) == 2*n: result.append(s) return if left < n: backtrack(s+\'(\', left+1, right) if right < left: backtrack(s+\')\', left, right+1) backtrack() result.sort() # Intentional error: this is redundant as the combinations are already generated in sorted order. return result # Explanation of the flaw: # The error in this implementation lies in the unnecessary sorting step, which is not required # as the `backtrack` function generates the combinations in lexicographical order. # The `result.sort()` is redundant and can be removed to improve efficiency. # Additionally, the function does not handle cases where `n=0` correctly. ``` # Corrected Implementation Example: ```python def generate_parentheses(n): if n == 0: return [] result = [] def backtrack(s=\'\', left=0, right=0): if len(s) == 2*n: result.append(s) return if left < n: backtrack(s+\'(\', left+1, right) if right < left: backtrack(s+\')\', left, right+1) backtrack() return result # The corrected version removes the unnecessary sorting step and correctly handles the case where n=0. ```","solution":"def generate_parentheses(n): Generates all valid parenthetical expressions with n pairs of parentheses in lexicographical order. if n == 0: return [] result = [] def backtrack(s=\'\', left=0, right=0): if len(s) == 2*n: result.append(s) return if left < n: backtrack(s+\'(\', left+1, right) if right < left: backtrack(s+\')\', left, right+1) backtrack() return result"},{"question":"Write a function that takes a list of integers and a positive integer k, and returns a new list such that each element in the new list is the maximum of the current element and the next k elements in the original list. If there are fewer than k elements remaining in the list, just use the available elements. For example, given the list [1, 2, 3, 4, 5] and k=2, the function should return [3, 4, 5, 5, 5].","solution":"from typing import List def max_of_k_elements(nums: List[int], k: int) -> List[int]: Returns a new list such that each element in the new list is the maximum of the current element and the next k elements in the original list. Parameters: nums (List[int]): The list of integers. k (int): A positive integer. Returns: List[int]: A new list with the maximum values. n = len(nums) result = [] for i in range(n): # Get the current slice of elements we need to consider current_slice = nums[i:i + k + 1] # Find the maximum in the current slice max_value = max(current_slice) result.append(max_value) return result"},{"question":"You are given a list of strings. Write a function to count the occurrences of each unique string in the list and return a dictionary where the keys are the unique strings and the values are the counts of those strings. Implement the function `count_string_occurrences(lst: List[str]) -> Dict[str, int]` that takes a list of strings `lst` as input and returns a dictionary with the count of occurrences of each unique string in the list. Example: ```python lst = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"banana\\"] print(count_string_occurrences(lst)) # Output: {\'apple\': 2, \'banana\': 3, \'orange\': 1} ``` Constraints: - The input list can contain between 1 and 10^4 strings. - The length of each string will be between 1 and 100. - The strings will contain only alphabetical characters.","solution":"from typing import List, Dict def count_string_occurrences(lst: List[str]) -> Dict[str, int]: Counts the occurrences of each unique string in the list. Args: lst (List[str]): A list of strings. Returns: Dict[str, int]: A dictionary with the count of occurrences of each unique string. occurrence_dict = {} for string in lst: if string in occurrence_dict: occurrence_dict[string] += 1 else: occurrence_dict[string] = 1 return occurrence_dict"},{"question":"Given a list of non-negative integers representing the amount of money in each house, initialize a function in Python that determines the combination of houses that can be robbed without triggering an alert and can yield the highest possible monetary amount. Note that adjacent houses cannot be robbed on the same night. Modify the provided function to achieve the desired functionality using dynamic programming. Additionally, include validation checks for the input list and handle potential exceptions appropriately. ```python def rob_houses(nums): # Example implementation def _rob(nums, i): if i < 0: return 0 return max(_rob(nums, i-2) + nums[i], _rob(nums, i-1)) return _rob(nums, len(nums)-1) ```","solution":"def rob_houses(nums): Determines the highest amount of money that can be robbed from the houses without robbing two adjacent houses. if not isinstance(nums, list) or not all(isinstance(x, int) and x >= 0 for x in nums): raise ValueError(\\"Input must be a list of non-negative integers\\") if len(nums) == 0: return 0 if len(nums) == 1: return nums[0] # Dynamic programming implementation n = len(nums) dp = [0] * n # dp[i] will be the max amount that can be robbed up to house i dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[n-1]"},{"question":"Explain the concept of recursion in computer programming. Illustrate your definition with an example in Python, showing a basic recursive function to compute the factorial of a number. Discuss how the base case and the recursive call work together to solve the problem.","solution":"def factorial(n): Computes the factorial of a non-negative integer n. Args: n (int): A non-negative integer whose factorial is to be computed. Returns: int: The factorial of n. # Base case: factorial of 0 is 1 if n == 0: return 1 # Recursive case: n! = n * (n-1)! else: return n * factorial(n - 1)"},{"question":"Write a Python class that simulates a simple bank account. The class should support the following operations: 1. Create a new account with an initial balance. 2. Deposit an amount to the account. 3. Withdraw an amount from the account but ensure that the balance does not go negative. 4. Transfer an amount from one account to another. 5. Check the balance of the account. Additionally, ensure that: - If a withdrawal or transfer amount is greater than the available balance, an error message is displayed. - Implement proper error handling for any invalid operations such as negative deposits or withdrawals, and ensure that such errors do not crash the program. For example: ```python class BankAccount: def __init__(self, initial_balance): # constructor to initialize the account balance def deposit(self, amount): # method to add an amount to the account def withdraw(self, amount): # method to withdraw an amount from the account def transfer(self, amount, target_account): # method to transfer an amount to another account def get_balance(self): # method to check the balance of the account # Create accounts for Alice and Bob alice_account = BankAccount(1000) bob_account = BankAccount(500) # Perform operations alice_account.deposit(200) alice_account.withdraw(100) alice_account.transfer(300, bob_account) print(alice_account.get_balance()) # Expected output: 800 print(bob_account.get_balance()) # Expected output: 800 ``` Your task is to implement the `BankAccount` class following the specifications above.","solution":"class BankAccount: def __init__(self, initial_balance): if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative.\\") self.balance = initial_balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount def transfer(self, amount, target_account): if amount <= 0: raise ValueError(\\"Transfer amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.withdraw(amount) target_account.deposit(amount) def get_balance(self): return self.balance"},{"question":"Write a function that takes an input string and returns the first index of the substring \\"abc\\" if it exists. If \\"abc\\" does not exist in the string, return -1. The search should be case-insensitive, meaning that \\"AbC\\", \\"aBc\\", etc., should all be considered matches for \\"abc\\". The function should ignore any whitespace that may be present around \\"abc\\".","solution":"def find_abc_substring(s): Returns the first index of the substring \\"abc\\" in the input string s if exists. The search is case-insensitive and ignores any surrounding whitespace. If \\"abc\\" does not exist in the string, returns -1. # Convert the string to lower case to make the search case-insensitive s = s.lower() # Find the stripped version of \\"abc\\" presence stripped_s = \'\'.join(s.split()) index = stripped_s.find(\\"abc\\") if index == -1: return -1 # Calculate the actual index in the original string actual_index = 0 count = 0 for i, char in enumerate(s): if char.strip(): count += 1 if count == index + 1: actual_index = i break return actual_index"},{"question":"You are tasked with designing a sorting algorithm for an array of unique integers such that the difference between any consecutive elements in the sorted array is maximized. The challenge requires you to arrange the array in a specific manner to maximize the minimum difference between any two consecutive elements. For instance, consider an array `arr`: Given an array of integers `arr`, the goal is to return a new array that maximizes the minimum difference between any of its consecutive elements. The task can be broken down into the following steps: 1. Define the array `arr` consisting of unique integers. 2. Rearrange the integers such that the minimum difference between any two consecutive elements in the resulting array is maximized. 3. Return the newly arranged array. # Input - You will be given an array `arr` where all elements are unique integers. # Output - You should return an array of the same integers, rearranged in such a way that the minimum difference between any two consecutive elements is maximized. # Example Example 1: ``` Input: arr = [1, 5, 10, 15] Output: [1, 15, 5, 10] Explanation: The minimum difference between consecutive elements in the output array is maxized to 5. Example 2: ``` Input: arr = [9, 1, 19, 6] Output: [1, 19, 6, 9] Explanation: The minimum difference between consecutive elements in the output array is maximized to 3. Example 3: ``` Input: arr = [8, 5, 12, 11, 3] Output: [3, 12, 5, 11, 8] Explanation: The minimum difference between consecutive elements in the output array is maximized to 3. # Constraints - The length of the array `arr` will be between 2 and 100 inclusive. - All elements in the array `arr` will be unique and in the range from 1 to 10^9 inclusive.","solution":"def maximize_min_diff(arr): Given an array of unique integers, the function returns a new array that maximizes the minimum difference between any consecutive elements in the array. arr.sort() low = 0 high = len(arr) - 1 result = [] while low < high: result.append(arr[low]) low += 1 if low < high: result.append(arr[high]) high -= 1 if low == high: result.append(arr[low]) return result"},{"question":"Your task is to implement a function that takes an array of integers and an integer target as inputs. The function should return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. # Example Input: `nums = [2, 7, 11, 15], target = 9` Output: `[0, 1]` Explanation: `nums[0] + nums[1] = 2 + 7 = 9` # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: ``` # Constraints 1. `2 <= nums.length <= 10^5` 2. `-10^9 <= nums[i] <= 10^9` 3. `-10^9 <= target <= 10^9`","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to the target. Args: nums (List[int]): List of integers. target (int): The target integer. Returns: List[int]: Indices of the two numbers that add up to `target`. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Write a function that takes a list of integers as input and returns a dictionary with statistics about the list. The dictionary should contain the following keys and values: 1. \\"mean\\": the average of the integers in the list. 2. \\"median\\": the median value of the integers in the list. 3. \\"mode\\": the mode of the integers in the list. If there are multiple modes, return a list of all modes, sorted in ascending order. 4. \\"variance\\": the variance of the integers in the list. 5. \\"standard_deviation\\": the standard deviation of the integers in the list. Ensure that the function handles edge cases appropriately, such as an empty list (return an appropriate error message), a list with a single integer (mean, median, mode, variance, and standard deviation should all be that integer or zero where applicable), and a list with multiple identical integers. Additionally, to pose a challenge, include an erroneous piece of code as a reference. This piece of code should contain common mistakes such as improperly handling ties for the mode, incorrect calculations for variance or standard deviation, or failing to sort the modes correctly. The candidate should then identify and correct these mistakes.","solution":"import statistics import math from collections import Counter def list_statistics(lst): if not lst: return \\"Error: The list is empty\\" stats = {} stats[\'mean\'] = statistics.mean(lst) stats[\'median\'] = statistics.median(lst) counts = Counter(lst) max_count = max(counts.values()) mode_list = [k for k, v in counts.items() if v == max_count] stats[\'mode\'] = sorted(mode_list) stats[\'variance\'] = statistics.variance(lst) if len(lst) > 1 else 0 stats[\'standard_deviation\'] = statistics.stdev(lst) if len(lst) > 1 else 0 return stats"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Use the Sieve of Eratosthenes algorithm to identify the prime numbers. Provide the function signature as `def filter_primes(numbers: List[int]) -> List[int]:`. Example: ```python filter_primes([2, 3, 5, 7, 8, 10, 13, 15]) ``` Output: ```python [2, 3, 5, 7, 13] ```","solution":"from typing import List def sieve_of_eratosthenes(max_num: int) -> List[bool]: Returns a list of boolean values where True indicates that the index is a prime number. Uses the Sieve of Eratosthenes algorithm. sieve = [True] * (max_num + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(max_num**0.5) + 1): if sieve[start]: for multiple in range(start*start, max_num + 1, start): sieve[multiple] = False return sieve def filter_primes(numbers: List[int]) -> List[int]: Returns a list containing only the prime numbers from the given list. if not numbers: return [] max_num = max(numbers) sieve = sieve_of_eratosthenes(max_num) return [num for num in numbers if sieve[num]]"},{"question":"Given a list of integers, design a Python function called `partition_even_odd` that rearranges the list in place such that all even numbers appear before all odd numbers. The relative order of the even and odd numbers should remain unchanged. You may not use additional data structures like lists or arrays to accomplish this task. Provide an implementation that is efficient in terms of time and space complexity. # Example: ```python # Given the list lst = [3, 1, 2, 4, 7, 6, 9, 8] # After calling your function partition_even_odd(lst) # The list should be rearranged to: # [2, 4, 6, 8, 3, 1, 7, 9] ``` # Constraints: - The list should contain only integers. - The list may contain negative integers. - You should not mutate elements in the list other than swapping. Implement the function `partition_even_odd(lst)` to achieve the desired behavior.","solution":"def partition_even_odd(lst): Rearranges the list in place such that all even numbers appear before all odd numbers. The relative order of the even and odd numbers should remain unchanged. i, j = 0, 0 while j < len(lst): if lst[j] % 2 == 0: lst.insert(i, lst.pop(j)) i += 1 j += 1"},{"question":"In the context of a Python development environment, consider the following code snippet that is meant to determine if a point `(x, y, z)` lies within a sphere centered at the origin with radius `r`: ```python def is_point_in_sphere(x, y, z, r): return (x**2 + y**2 + z**2) <= r**2 # Example usage: print(is_point_in_sphere(1, 2, 3, 5)) # Expected: False print(is_point_in_sphere(1, 1, 1, 3)) # Expected: True ``` While the current implementation checks if a point lies within the sphere or not, it does not account for non-numeric inputs or negative radius values which are illogical in this context. Your task is to improve this code by adding appropriate input validation to: 1. Ensure `x`, `y`, `z`, and `r` are numeric values. 2. Check that the radius `r` is positive. Modify the function to validate the inputs and raise an appropriate error message if the inputs are invalid. Additionally, write a brief commentary on the necessity and implementation details of the input validation. Additional Requirement: Ensure to add clear and concise docstrings for your modified function and any helper functions you create.","solution":"def is_point_in_sphere(x, y, z, r): Determines if a point (x, y, z) lies within or on a sphere centered at the origin with radius r. Args: x (float): x-coordinate of the point y (float): y-coordinate of the point z (float): z-coordinate of the point r (float): Radius of the sphere Returns: bool: True if the point is inside or on the sphere, False otherwise. Raises: TypeError: If any of the coordinates or the radius are not numeric. ValueError: If the radius is not positive. if not all(isinstance(i, (int, float)) for i in (x, y, z, r)): raise TypeError(\\"All coordinates and the radius must be numeric values.\\") if r <= 0: raise ValueError(\\"The radius must be a positive value.\\") return (x**2 + y**2 + z**2) <= r**2"},{"question":"Write a Python function that takes a list of tuples, where each tuple consists of a product name and its price (both as strings). The function should return a dictionary where the keys are the product names and the values are the prices as floating-point numbers. If the price cannot be converted to a float, the function should skip that product. Example: Input: [(\'apple\', \'0.5\'), (\'banana\', \'abc\'), (\'orange\', \'0.75\')] Output: {\'apple\': 0.5, \'orange\': 0.75}","solution":"def convert_product_prices(product_list): Takes a list of tuples, with each tuple containing a product name and its price as strings. Returns a dictionary with product names as keys and prices as floats. Skips products with invalid prices. product_dict = {} for product, price in product_list: try: product_dict[product] = float(price) except ValueError: # Skip products with prices that can\'t be converted to float continue return product_dict"},{"question":"Design a Python program that simulates a ticket booking system for an event. The system should manage seat reservations, ensuring that no duplicate bookings are made for the same seat. The program should read the initial seating arrangement from a CSV file, which includes the seat number, row, and whether the seat is available or booked. Users should be able to: - View available seats. - Reserve a seat by entering the seat number. - Cancel a reservation by entering the seat number. - Save the updated seating arrangement back to the CSV file. Implement proper error checking to handle invalid seat numbers, duplicated reservations, and cancellations for seats that are not yet reserved. Optimize the program to handle operations efficiently even with a large seating arrangement. Additionally, provide a simple command-line interface for the user to interact with the system.","solution":"import csv class TicketBookingSystem: def __init__(self, csv_file): self.csv_file = csv_file self.seats = self._load_seats() def _load_seats(self): seats = {} with open(self.csv_file, mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: seats[row[\'seat_number\']] = { \'row\': row[\'row\'], \'available\': row[\'available\'] == \'yes\' } return seats def save_seats(self): fieldnames = [\'seat_number\', \'row\', \'available\'] with open(self.csv_file, mode=\'w\', newline=\'\') as file: writer = csv.DictWriter(file, fieldnames=fieldnames) writer.writeheader() for seat_number, data in self.seats.items(): writer.writerow({ \'seat_number\': seat_number, \'row\': data[\'row\'], \'available\': \'yes\' if data[\'available\'] else \'no\' }) def view_available_seats(self): return {seat_number: data for seat_number, data in self.seats.items() if data[\'available\']} def reserve_seat(self, seat_number): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number.\\") if not self.seats[seat_number][\'available\']: raise ValueError(\\"Seat already booked.\\") self.seats[seat_number][\'available\'] = False def cancel_reservation(self, seat_number): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number.\\") if self.seats[seat_number][\'available\']: raise ValueError(\\"Seat is not booked.\\") self.seats[seat_number][\'available\'] = True"},{"question":"Code: calculator.py Implement a Python class for a command-line calculator. The calculator should be able to handle basic arithmetic operations such as addition, subtraction, multiplication, and division. You are to create a single file `calculator.py` that includes the following: 1. Design a `Calculator` class that contains: - An initializer method to set up a starting value, which defaults to 0. - Methods for each of the basic arithmetic operations: add, subtract, multiply, and divide. Each method should take a single numeric argument and modify the current value of the `Calculator` object accordingly. - A method `reset` that resets the calculator\'s value back to its initial state. - A method `get_value` that returns the current value of the calculator. - Proper error handling for division by zero in the division method. 2. Design a `CalculatorCLI` class that uses the `curses` library to handle the command-line interface: - Implement methods to initialize the screen, handle user input, and display the calculator\'s current value and result. - Allow users to perform the arithmetic operations by inputting numbers and selecting operations via keyboard commands. - Provide the option for users to reset the calculator and exit the application at any time. Ensure that your code is modular, easy to read and understand, follows PEP8 guidelines, and includes appropriate docstrings for all classes and methods. ```python calculator.py import curses from typing import Tuple class Calculator: def __init__(self, value: float = 0.0): Initialize the calculator with a starting value. :param value: The starting value of the calculator. self.value = value def add(self, number: float) -> None: Add a number to the current value. :param number: The number to add. self.value += number def subtract(self, number: float) -> None: Subtract a number from the current value. :param number: The number to subtract. self.value -= number def multiply(self, number: float) -> None: Multiply the current value by a number. :param number: The number to multiply by. self.value *= number def divide(self, number: float) -> None: Divide the current value by a number. :param number: The number to divide by. :raises ZeroDivisionError: If an attempt is made to divide by zero. if number == 0: raise ZeroDivisionError(\\"Cannot divide by zero.\\") self.value /= number def reset(self) -> None: Reset the calculator\'s value to 0. self.value = 0.0 def get_value(self) -> float: Get the current value of the calculator. :return: The current value. return self.value class CalculatorCLI: def __init__(self): self.calculator = Calculator() self.screen, self.height, self.width = self.init_screen() def init_screen(self) -> Tuple: Initialize the screen for the calculator. Returns a tuple of the screen and its dimensions. screen = curses.initscr() curses.noecho() curses.cbreak() screen.keypad(True) screen.nodelay(True) height, width = screen.getmaxyx() return screen, height, width def end_screen(self) -> None: End the session and restore the terminal to its original state. curses.nocbreak() self.screen.keypad(False) curses.echo() curses.endwin() def handle_input(self) -> str: Handle user input from the keyboard. Returns a string representing the command. key = self.screen.getch() if key in range(48, 58): # numbers 0-9 return chr(key) elif key == curses.KEY_UP: return \'add\' elif key == curses.KEY_DOWN: return \'subtract\' elif key == curses.KEY_LEFT: return \'multiply\' elif key == curses.KEY_RIGHT: return \'divide\' elif key == ord(\'r\'): return \'reset\' elif key == ord(\'q\'): return \'quit\' else: return \'\' def clear_screen(self) -> None: Clear the command line area. self.screen.clear() def draw_interface(self) -> None: Draw the calculator interface on the command line. self.screen.addstr(0, 0, \\"Command-line Calculator\\") self.screen.addstr(1, 0, \\"Current value: \\" + str(self.calculator.get_value())) self.screen.addstr(2, 0, \\"Key commands: \\") self.screen.addstr(3, 0, \\" UP key - Add\\") self.screen.addstr(4, 0, \\" DOWN key - Subtract\\") self.screen.addstr(5, 0, \\" LEFT key - Multiply\\") self.screen.addstr(6, 0, \\" RIGHT key - Divide\\") self.screen.addstr(7, 0, \\" r key - Reset\\") self.screen.addstr(8, 0, \\" q key - Quit\\") def run(self) -> None: Run the calculator command line interface. while True: self.clear_screen() self.draw_interface() command = self.handle_input() try: if command == \'add\': self.screen.addstr(self.height - 1, 0, \\"Enter number to add: \\") curses.echo() number = float(self.screen.getstr().decode(\\"utf-8\\")) curses.noecho() self.calculator.add(number) elif command == \'subtract\': self.screen.addstr(self.height - 1, 0, \\"Enter number to subtract: \\") curses.echo() number = float(self.screen.getstr().decode(\\"utf-8\\")) curses.noecho() self.calculator.subtract(number) elif command == \'multiply\': self.screen.addstr(self.height - 1, 0, \\"Enter number to multiply: \\") curses.echo() number = float(self.screen.getstr().decode(\\"utf-8\\")) curses.noecho() self.calculator.multiply(number) elif command == \'divide\': self.screen.addstr(self.height - 1, 0, \\"Enter number to divide: \\") curses.echo() number = float(self.screen.getstr().decode(\\"utf-8\\")) curses.noecho() self.calculator.divide(number) elif command == \'reset\': self.calculator.reset() elif command == \'quit\': break except ValueError: self.screen.addstr(self.height - 1, 0, \\"Invalid input. Please enter a number.\\") except ZeroDivisionError as e: self.screen.addstr(self.height - 1, 0, str(e)) self.end_screen() if __name__ == \'__main__\': cli = CalculatorCLI() cli.run() ```","solution":"class Calculator: def __init__(self, value: float = 0.0): Initialize the calculator with a starting value. :param value: The starting value of the calculator. self.value = value def add(self, number: float) -> None: Add a number to the current value. :param number: The number to add. self.value += number def subtract(self, number: float) -> None: Subtract a number from the current value. :param number: The number to subtract. self.value -= number def multiply(self, number: float) -> None: Multiply the current value by a number. :param number: The number to multiply by. self.value *= number def divide(self, number: float) -> None: Divide the current value by a number. :param number: The number to divide by. :raises ZeroDivisionError: If an attempt is made to divide by zero. if number == 0: raise ZeroDivisionError(\\"Cannot divide by zero.\\") self.value /= number def reset(self) -> None: Reset the calculator\'s value to 0. self.value = 0.0 def get_value(self) -> float: Get the current value of the calculator. :return: The current value. return self.value"},{"question":"Design an algorithm to balance a binary search tree (BST). Given an unbalanced BST, the task is to convert it into a balanced BST that maintains the properties of a BST where the left subtree of a node contains only nodes with keys lesser than the node’s key, and the right subtree only nodes with keys greater than the node\'s key. The algorithm must run in O(n) time complexity where n is the number of nodes in the tree. Provide the complete implementation in your preferred programming language along with detailed comments.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.key = key def store_inorder(node, inorder_list): Helper function to store the inorder traversal of a tree. if node is None: return # Store nodes in the left subtree store_inorder(node.left, inorder_list) # Store the root node inorder_list.append(node.key) # Store nodes in the right subtree store_inorder(node.right, inorder_list) def sorted_array_to_bst(start, end, inorder_list): Helper function to convert a sorted array to a balanced BST. if start > end: return None # Get the middle element and make it root mid = (start + end) // 2 node = TreeNode(inorder_list[mid]) # Recursively construct the left subtree and make it left child of root node.left = sorted_array_to_bst(start, mid-1, inorder_list) # Recursively construct the right subtree and make it right child of root node.right = sorted_array_to_bst(mid+1, end, inorder_list) return node def balance_bst(root): This function takes an unbalanced BST and returns a balanced BST. inorder_list = [] store_inorder(root, inorder_list) # Store the inorder traversal of the BST # Convert the sorted inorder traversal list to a balanced BST balanced_root = sorted_array_to_bst(0, len(inorder_list)-1, inorder_list) return balanced_root"},{"question":"Write a Python function named `rotate_matrix90` that takes in a 2D list `matrix` representing an N x N matrix. The function should rotate the matrix 90 degrees clockwise in place. Do not use any additional arrays or lists. Demonstrate the function with a sample input and output.","solution":"def rotate_matrix90(matrix): Rotates an NxN matrix 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first # Save the top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last-offset][first] # bottom -> left matrix[last-offset][first] = matrix[last][last-offset] # right -> bottom matrix[last][last-offset] = matrix[i][last] # top -> right matrix[i][last] = top"},{"question":"Create a Python application that reads a CSV file containing product information and stores the data into a SQLite database. The CSV file will have columns: product_id, product_name, price, quantity, category, and supplier. The product_id should be a primary key in the SQLite database. Additionally, write functions to: 1. Insert new products into the database. 2. Update the price and quantity of a product based on its product_id. 3. Retrieve all products from a specific category. Provide a piece of erroneous code that attempts to handle the database operations and explain why it fails.","solution":"import csv import sqlite3 # Set up SQLite database connection def setup_database(db_name=\\"products.db\\"): conn = sqlite3.connect(db_name) c = conn.cursor() c.execute(\'\'\'CREATE TABLE IF NOT EXISTS products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL NOT NULL, quantity INTEGER NOT NULL, category TEXT NOT NULL, supplier TEXT NOT NULL )\'\'\') conn.commit() return conn # Load data from CSV file into SQLite database def load_csv_to_db(csv_file, conn): c = conn.cursor() with open(csv_file, \'r\') as file: reader = csv.DictReader(file) for row in reader: c.execute(\'\'\'INSERT OR REPLACE INTO products (product_id, product_name, price, quantity, category, supplier) VALUES (?, ?, ?, ?, ?, ?)\'\'\', (row[\'product_id\'], row[\'product_name\'], row[\'price\'], row[\'quantity\'], row[\'category\'], row[\'supplier\'])) conn.commit() # Insert new product into database def insert_product(conn, product_id, product_name, price, quantity, category, supplier): c = conn.cursor() c.execute(\'\'\'INSERT INTO products (product_id, product_name, price, quantity, category, supplier) VALUES (?, ?, ?, ?, ?, ?)\'\'\', (product_id, product_name, price, quantity, category, supplier)) conn.commit() # Update price and quantity of a product based on product_id def update_product(conn, product_id, price, quantity): c = conn.cursor() c.execute(\'\'\'UPDATE products SET price = ?, quantity = ? WHERE product_id = ?\'\'\', (price, quantity, product_id)) conn.commit() # Retrieve all products from a specific category def get_products_by_category(conn, category): c = conn.cursor() c.execute(\'SELECT * FROM products WHERE category = ?\', (category,)) return c.fetchall()"},{"question":"Write a function that takes a string as input and returns the longest palindrome substring within it. If multiple substrings of the same length are found, return the first one. For example, given the input string \\"babad\\", the longest palindrome substring is \\"bab\\". For the input \\"cbbd\\", the longest palindrome substring is \\"bb\\". Function signature should be: `def longest_palindrome_substring(s: str) -> str:`","solution":"def longest_palindrome_substring(s: str) -> str: Returns the longest palindromic substring in the given string. If there are multiple substrings of the same maximum length, return the first one. n = len(s) if n == 0: return \\"\\" # Initialize the start and end pointers for the largest palindrome start, end = 0, 0 def expand_around_center(left: int, right: int) -> (int, int): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): # Check for odd length palindromes (single character center) left1, right1 = expand_around_center(i, i) # Check for even length palindromes (two character center) left2, right2 = expand_around_center(i, i + 1) if right1 - left1 > end - start: start, end = left1, right1 if right2 - left2 > end - start: start, end = left2, right2 return s[start:end + 1]"},{"question":"Implement a function that takes a string as an input and returns the length of the longest substring without repeating characters. Additionally, write a function to display all distinct substrings of the input string that are of this maximum length. Ensure your solution efficiently handles edge cases and large inputs.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def longest_substrings(s): Returns all distinct substrings of maximum length without repeating characters. n = len(s) max_length = length_of_longest_substring(s) substrings = set() start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end if end - start + 1 == max_length: substrings.add(s[start:end+1]) return list(substrings)"},{"question":"Write a function that takes a list of integers and an integer k as arguments. The function should return the number of pairs of integers in the list that add up to k. Ensure that the function does not count pairs more than once, and each pair should consist of distinct indices. Use Python for the task.","solution":"def count_pairs_with_sum(nums, k): Returns the number of pairs of integers in the list that add up to k. Parameters: nums (list): List of integers. k (int): Target sum. Returns: int: Number of pairs that add up to k. seen = {} count = 0 for num in nums: complement = k - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Write a function that accepts a list of integers and returns a new list that contains only the prime numbers from the original list. Use helper functions to check for prime numbers and to filter the list. If no prime numbers are found, return an empty list. Example input: [11, 14, 17, 19, 21] Example output: [11, 17, 19]","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for i in range(3, max_divisor, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Given two integer arrays and a target sum, determine if any pair of numbers (one from each array) adds up to the target sum. Return `True` if such a pair exists, otherwise return `False`. Example: array1 = [1, 2, 3, 4] array2 = [10, 20, 30, 40] target = 42 In this case, the pair (2, 40) adds up to 42, so the output should be `True`.","solution":"def pair_with_target_sum(array1, array2, target): Determine if any pair of numbers (one from each array) adds up to the target sum. :param array1: List of integers :param array2: List of integers :param target: The target sum. :return: True if such a pair exists, otherwise False. nums = set(array1) for num in array2: if target - num in nums: return True return False"},{"question":"Write a function to compress a given string by replacing consecutive repeated characters with the character followed by the count of repetitions. If the compressed string is not shorter than the original string, return the original string. For example, given the string \\"aabcccccaaa\\", the compressed format should be \\"a2b1c5a3\\". If the string is \\"abc\\", the function should return \\"abc\\" since the compressed version \\"a1b1c1\\" is not shorter than the original.","solution":"def compress_string(s): Compresses the given string by replacing consecutive repeated characters with the character followed by the count of repetitions. If the compressed string is not shorter than the original string, return the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # Don\'t forget to add the last group compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Write a Python program that takes a list of tuples, each containing a student\'s name and their corresponding grades, and returns a dictionary where each key is a student\'s name and the value is the average of their grades. The program should handle cases where a student has no grades by assigning an average grade of `None` for that student. For example, given `input_data = [(\'Alice\', [85, 90, 92]), (\'Bob\', [78, 74, 80]), (\'Charlie\', [])]`, the program should produce `{\'Alice\': 89.0, \'Bob\': 77.33333333333333, \'Charlie\': None}`.","solution":"def calculate_average_grades(input_data): Takes a list of tuples, each containing a student\'s name and their grades, and returns a dictionary with the average grade for each student. :param input_data: list of tuples [(str, list of int)] :return: dictionary {str: float or None} result = {} for name, grades in input_data: if grades: average = sum(grades) / len(grades) else: average = None result[name] = average return result"},{"question":"Given a string containing only lowercase characters, write a function to determine if it is an anagram of a palindrome. An anagram is a rearrangement of the letters to form another word, and a palindrome is a word that reads the same backward as forward. You may ignore whitespaces and punctuation. Do this without using Python\'s standard library functions for sorting or counting characters. Here\'s an example function signature: ```python def is_anagram_of_palindrome(s: str) -> bool: # your code here pass # Test cases print(is_anagram_of_palindrome(\\"civic\\")) # Expected output: True (civic is already a palindrome) print(is_anagram_of_palindrome(\\"ivicc\\")) # Expected output: True (ivicc can be rearranged to form civic) print(is_anagram_of_palindrome(\\"hello\\")) # Expected output: False (hello cannot be rearranged to form a palindrome) print(is_anagram_of_palindrome(\\"aabb\\")) # Expected output: True (aabb can be rearranged to form abba) ``` Analyze and debug the following piece of code solving the task, which contains one or more errors: ```python def is_anagram_of_palindrome(s): char_count = {} odd_count = 0 for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for v in char_count.values(): if v % 2 == 1: odd_count += 1 if odd_count == 1: return True return False # Test code print(is_anagram_of_palindrome(\\"civic\\")) # Expected output: True print(is_anagram_of_palindrome(\\"ivicc\\")) # Expected output: True print(is_anagram_of_palindrome(\\"hello\\")) # Expected output: False print(is_anagram_of_palindrome(\\"aabb\\")) # Expected output: True ```","solution":"def is_anagram_of_palindrome(s: str) -> bool: char_count = {} odd_count = 0 # Count each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count characters that have an odd frequency for v in char_count.values(): if v % 2 == 1: odd_count += 1 # For a string to be an anagram of a palindrome: # It can have at most one character with an odd frequency return odd_count <= 1"},{"question":"Write a function that takes a list of integers and returns a new list with duplicates removed, but keeps the first occurrence of each element in their original order. The function should also count the number of duplicates removed and the final length of the list, returning these as a tuple (duplicates_removed, final_length). For example, given the list lst = [4, 5, 6, 4, 7, 8, 5, 9, 6], the output should be [4, 5, 6, 7, 8, 9], and the function should return the tuple (3, 6).","solution":"def remove_duplicates(lst): Removes duplicates from the given list while maintaining order of first occurrences, and returns a tuple (number of duplicates removed, length of list after removal). Args: lst (List[int]): The list of integers from which to remove duplicates. Returns: Tuple: A tuple containing the number of duplicates removed and the final length of the list. seen = set() unique_list = [] duplicates_removed = 0 for item in lst: if item not in seen: unique_list.append(item) seen.add(item) else: duplicates_removed += 1 return unique_list, (duplicates_removed, len(unique_list))"},{"question":"Write a function in Python that takes a string as input and returns the frequency of each character in the string. Ignore case sensitivity and non-alphabetical characters. The function should return a dictionary where the keys are the characters and the values are their respective frequencies. Function Signature: ```python def char_frequency(s: str) -> dict: ``` Example: ```python s = \\"Hello, World! 123\\" result = char_frequency(s) print(result) # Output should be {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` In your response, outline the steps of your approach, discuss the implications of case insensitivity on your solution, and address possible edge cases such as empty strings or strings with no alphabetical characters.","solution":"def char_frequency(s: str) -> dict: Returns a dictionary containing the frequency of each alphabetic character in the string s. Case is ignored, and non-alphabetical characters are excluded. freq = {} for char in s.lower(): if char.isalpha(): if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"You are given an integer matrix `grid` of size `m x n`. Your task is to find out if there is a path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1) such that you can only move right or down one cell at a time. Cells in the grid can either be 0 or 1, where 1 represents an obstacle that cannot be passed, and 0 represents a free cell. Return `true` if such a path exists, otherwise return `false`. For instance, consider the following examples: Example 1: Input: grid = [[0,0,0],[0,1,0],[0,0,0]] Output: true Explanation: One possible path is (0,0) → (0,1) → (0,2) → (1,2) → (2,2). Example 2: Input: grid = [[0,1],[1,0]] Output: false Explanation: There is no valid path from (0,0) to (1,1) due to obstacles. Example 3: Input: grid = [[0,0,1],[1,0,0],[0,0,0]] Output: true Explanation: One possible path is (0,0) → (0,1) → (1,1) → (2,1) → (2,2). The constraints are as follows: `1 <= m, n <= 100` `grid[i][j] == 0 or 1`","solution":"def is_path(grid): Determines if there is a path from the top-left to the bottom-right corner in the grid. :param grid: List[List[int]] - 2D list representing the grid with 0s and 1s. :return: bool - Whether such a path exists. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False m, n = len(grid), len(grid[0]) queue = [(0, 0)] directions = [(0, 1), (1, 0)] while queue: x, y = queue.pop(0) if (x, y) == (m - 1, n - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0: queue.append((nx, ny)) grid[nx][ny] = 1 # Mark as visited return False"},{"question":"Write a function that parses a string representation of a mathematical expression and evaluates its value. The expression may include integers, addition (+), subtraction (-), multiplication (*), and division (/). The function should handle parentheses to dictate the order of operations. Return the evaluated result as a float. Example input: \\"3 + 5 * (2 - 8) / 2\\" Expected output: 2.0 Make sure to handle any invalid input scenarios gracefully by raising appropriate exceptions. ```python def evaluate_expression(expression): def parse_expression(expr): stack = [] num = 0 prev_op = \'+\' operands = [] i = 0 while i < len(expr): char = expr[i] if char.isdigit() or char == \'.\': num_str = [] while i < len(expr) and (expr[i].isdigit() or expr[i] == \'.\'): num_str.append(expr[i]) i += 1 num_str = \'\'.join(num_str) operands.append(float(num_str)) i -= 1 # Adjust for the extra increment in the inner loop elif char in \'+-*/\': evaluate_stack(stack, prev_op, operands.pop()) prev_op = char operands.clear() elif char == \'(\': end = find_closing_bracket(expr, i) inner_expr = expr[i + 1:end] operands.append(parse_expression(inner_expr)) i = end i += 1 if operands: evaluate_stack(stack, prev_op, operands.pop()) return sum(stack) def evaluate_stack(stack, op, num): if op == \'+\': stack.append(num) elif op == \'-\': stack.append(-num) elif op == \'*\': stack[-1] *= num elif op == \'/\': stack[-1] /= num def find_closing_bracket(expr, start): stack = [] for i in range(start, len(expr)): if expr[i] == \'(\': stack.append(\'(\') elif expr[i] == \')\': stack.pop() if not stack: return i raise ValueError(\\"Mismatched parentheses in expression\\") try: return float(parse_expression(expression)) except Exception as e: raise ValueError(f\\"Invalid expression: {e}\\") # Example usage: try: result = evaluate_expression(\\"3 + 5 * (2 - 8) / 2\\") print(result) # Output: 2.0 except ValueError as e: print(e) ```","solution":"def evaluate_expression(expression): def parse_expression(expr): stack = [] num = 0 prev_op = \'+\' operands = [] i = 0 while i < len(expr): char = expr[i] if char.isdigit() or char == \'.\': num_str = [] while i < len(expr) and (expr[i].isdigit() or expr[i] == \'.\'): num_str.append(expr[i]) i += 1 num_str = \'\'.join(num_str) operands.append(float(num_str)) i -= 1 # Adjust for the extra increment in the inner loop elif char in \'+-*/\': evaluate_stack(stack, prev_op, operands.pop()) prev_op = char operands.clear() elif char == \'(\': end = find_closing_bracket(expr, i) inner_expr = expr[i + 1:end] operands.append(parse_expression(inner_expr)) i = end i += 1 if operands: evaluate_stack(stack, prev_op, operands.pop()) return sum(stack) def evaluate_stack(stack, op, num): if op == \'+\': stack.append(num) elif op == \'-\': stack.append(-num) elif op == \'*\': stack[-1] *= num elif op == \'/\': stack[-1] /= num def find_closing_bracket(expr, start): stack = [] for i in range(start, len(expr)): if expr[i] == \'(\': stack.append(\'(\') elif expr[i] == \')\': stack.pop() if not stack: return i raise ValueError(\\"Mismatched parentheses in expression\\") try: return float(parse_expression(expression)) except Exception as e: raise ValueError(f\\"Invalid expression: {e}\\") # Example usage: try: result = evaluate_expression(\\"3 + 5 * (2 - 8) / 2\\") print(result) # Output: 2.0 except ValueError as e: print(e)"},{"question":"Implement a Python function that takes a string `s` and an integer `k`, and returns the length of the longest substring that contains at most `k` distinct characters. If k is 0 or greater than the number of different characters in the string, return 0 or the length of the string respectively. Example: longest_substring_k_distinct(\\"eceba\\", 2) should return 3 longest_substring_k_distinct(\\"aa\\", 1) should return 2 def longest_substring_k_distinct(s, k): Code Here","solution":"def longest_substring_k_distinct(s, k): if k == 0: return 0 n = len(s) if n == 0: return 0 if k >= n: return n left = 0 right = 0 max_len = 0 char_count = {} while right < n: char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] if char_count[left_char] == 1: del char_count[left_char] else: char_count[left_char] -= 1 left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Create a function that accepts a string and returns a list of all possible palindromic substrings contained within the string. Palindromic substrings are sequences of characters that read the same backward as forward. Consider the following examples: - Input: \\"abba\\" - Output: [\\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\"] - Input: \\"racecar\\" - Output: [\\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", \\"racecar\\"] Your function should efficiently find all such substrings.","solution":"def palindromic_substrings(s): Returns a list of all possible palindromic substrings in the input string s. def is_palindrome(substr): return substr == substr[::-1] n = len(s) palindromes = [] for i in range(n): for j in range(i, n): substr = s[i:j+1] if is_palindrome(substr): palindromes.append(substr) return palindromes"},{"question":"You are given a list of strings containing individual items bought by customers in various grocery stores. Each string in the list is in the format \'Customer_ID,Store,Item\'. Write a Python function that computes and returns a dictionary where each key is a store and the value is another dictionary. This inner dictionary should have items as keys and the number of times each item was bought in that particular store as values. For example, given the list: ```python transactions = [ \\"C001,StoreA,Apples\\", \\"C002,StoreB,Oranges\\", \\"C001,StoreA,Oranges\\", \\"C003,StoreA,Apples\\", \\"C004,StoreB,Apples\\", \\"C002,StoreB,Apples\\" ] ``` Your function should return: ```python { \'StoreA\': {\'Apples\': 2, \'Oranges\': 1}, \'StoreB\': {\'Oranges\': 1, \'Apples\': 2} } ``` Here is the function signature: ```python def compute_store_item_frequencies(transactions: list) -> dict: # Your code here pass ```","solution":"def compute_store_item_frequencies(transactions): Computes and returns a dictionary where each key is a store and the value is another dictionary having items as keys and the number of times each item was bought in that particular store as values. store_item_frequencies = {} for transaction in transactions: customer_id, store, item = transaction.split(\',\') if store not in store_item_frequencies: store_item_frequencies[store] = {} if item not in store_item_frequencies[store]: store_item_frequencies[store][item] = 0 store_item_frequencies[store][item] += 1 return store_item_frequencies"},{"question":"Create a function that accepts a list of integers and returns a new list containing only the prime numbers from the original list. The function should efficiently check for primality to ensure optimal performance for large lists.","solution":"def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the input list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Create a Python function that takes a list of integers as an input and returns a list of integers that are the squares of the elements from the original list but sorted in non-decreasing order. For example, if the input is `[-4, -2, 0, 3, 5]`, the function should return `[0, 4, 9, 16, 25]`. Make sure your function continues to handle an empty input list properly by returning an empty list.","solution":"def sorted_squares(nums): Returns a list of the squares of the elements from the original list, sorted in non-decreasing order. Args: nums (list): List of integers. Returns: list: Sorted list of squared integers. return sorted(x ** 2 for x in nums)"},{"question":"Create a function that takes in a string representing a mathematical expression of integers and basic operations (addition, subtraction, multiplication, division) and evaluates it, returning the correct result. Ensure your function can handle spaces around the operators and numbers, as well as parentheses to indicate operation precedence. Example: ```python expression = \\" ( 2 + 3 ) * 4 - 5 / ( 1 + 1 ) \\" result = evaluate_expression(expression) # Should return 17 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression represented as a string. The expression can contain integers, basic operations (+, -, *, /), and parentheses. It also handles spaces around the operators, numbers, and parentheses. def parse_expression(expr): import re tokens = re.findall(r\'d+|[-+*/()]\', expr.replace(\' \', \'\')) def next_token(): return tokens.pop(0) if tokens else None def parse_term(): token = next_token() if token == \'(\': result = parse_expression() assert next_token() == \')\' return result return int(token) def parse_factor(): result = parse_term() while tokens and tokens[0] in \'*/\': op = next_token() if op == \'*\': result *= parse_term() elif op == \'/\': result /= parse_term() return result def parse_expression(): result = parse_factor() while tokens and tokens[0] in \'+-\': op = next_token() if op == \'+\': result += parse_factor() elif op == \'-\': result -= parse_factor() return result return parse_expression() return parse_expression(expression)"},{"question":"Write a Python function that takes a string as input and returns the longest palindrome substring within the input string. A palindrome is a string that reads the same forwards and backwards. If there are multiple palindromes of the same maximum length, return the first one that appears. Ensure the function handles cases where the input string is empty or has a length of one. Erroneous code: ```python def longest_palindrome_substring(s): if not s: return \\"\\" max_length = 1 start = 0 for i in range(1, len(s)): if s[i - max_length - 1:i + 1] == s[i - max_length - 1:i + 1][::-1]: start = i - max_length - 1 max_length += 2 elif s[i - max_length:i + 1] == s[i - max_length:i + 1][::-1]: start = i - max_length max_length += 1 return s[start:start + max_length] print(longest_palindrome_substring(\\"babad\\")) # returns \\"bb\\" instead of \\"bab\\" or \\"aba\\" ``` Your task is to fix the error and ensure the function correctly identifies the longest palindrome substring.","solution":"def longest_palindrome_substring(s): Finds the longest palindromic substring in the input string s. if not s: return \\"\\" n = len(s) start = 0 max_length = 1 table = [[False for x in range(n)] for y in range(n)] for i in range(n): table[i][i] = True for i in range(n-1): if s[i] == s[i+1]: table[i][i+1] = True start = i max_length = 2 for k in range(3, n+1): for i in range(n-k+1): j = i + k - 1 if table[i+1][j-1] and s[i] == s[j]: table[i][j] = True start = i max_length = k return s[start:start + max_length]"},{"question":"Write a Python script that reads a CSV file containing details about different e-commerce products such as \'product_id\', \'category\', \'price\', and \'rating\'. Utilize the Pandas library to perform the following tasks: 1. Load the CSV file into a DataFrame. 2. Calculate the average price of products in each category. 3. Identify the product with the highest rating in each category. 4. Save these results into a new CSV file. Ensure to handle any missing values appropriately in the dataset. Additionally, include error handling to manage situations where the CSV file might not be found or is improperly formatted.","solution":"import pandas as pd def read_csv(file_path): Reads a CSV file and returns a DataFrame. try: df = pd.read_csv(file_path) return df except FileNotFoundError: print(\\"The file was not found.\\") return None except pd.errors.EmptyDataError: print(\\"The file is empty.\\") return None except pd.errors.ParserError: print(\\"The file is not properly formatted.\\") return None def process_data(df): Processes the DataFrame to calculate the average price of products in each category and identify the product with the highest rating in each category. if df is None: return None, None # Handle missing values df = df.dropna(subset=[\'product_id\', \'category\', \'price\', \'rating\']) df[\'price\'] = pd.to_numeric(df[\'price\'], errors=\'coerce\') df[\'rating\'] = pd.to_numeric(df[\'rating\'], errors=\'coerce\') df = df.dropna(subset=[\'price\', \'rating\']) # Calculate the average price of products in each category avg_price_per_category = df.groupby(\'category\')[\'price\'].mean().reset_index() # Identify the product with the highest rating in each category idx = df.groupby(\'category\')[\'rating\'].idxmax() highest_rating_per_category = df.loc[idx, [\'category\', \'product_id\', \'rating\']].reset_index(drop=True) return avg_price_per_category, highest_rating_per_category def save_to_csv(avg_price_df, highest_rating_df, file_path): Saves the results to a new CSV file. if avg_price_df is None or highest_rating_df is None: print(\\"No data to save.\\") return # Merge the two results into a single DataFrame results = pd.merge(avg_price_df, highest_rating_df, on=\'category\', suffixes=(\'_avg_price\', \'_highest_rating\')) try: results.to_csv(file_path, index=False) except Exception as e: print(f\\"An error occurred while saving the file: {e}\\") def process_ecommerce_data(input_path, output_path): Processes a CSV file containing e-commerce product details and saves the results into a new CSV file. df = read_csv(input_path) avg_price_df, highest_rating_df = process_data(df) save_to_csv(avg_price_df, highest_rating_df, output_path)"},{"question":"Create a Python function that takes a list of integers as an input and returns a list of integers where each element is the result of multiplying all the numbers in the input list except the one at the current index, without using division. Optimize the function to maintain a linear time complexity, and ensure the function handles lists with zeros appropriately. Write appropriate test cases to validate your solution. Make sure your function handles edge cases such as empty lists or lists with single elements.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the numbers in the input list except the one at the current index. :param nums: List of integers. :return: List of integers. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"How can you implement a singleton pattern in Python ensuring that only one instance of a class can be created? Provide a sample class that uses this pattern. Additional Requirements 1. The singleton class should have an attribute to count the number of times its instance is accessed. 2. Include a method to display this count. Example Output ``` singleton1 = Singleton.get_instance() singleton2 = Singleton.get_instance() singleton1.increment_access_count() singleton2.increment_access_count() print(singleton1.get_access_count()) # Output should be 2 print(singleton2.get_access_count()) # Output should be 2 ``` # Solution: ```python class Singleton: _instance = None _access_count = 0 def __init__(self): if Singleton._instance is not None: raise Exception(\\"This class is a singleton!\\") else: Singleton._instance = self @classmethod def get_instance(cls): if cls._instance is None: cls._instance = Singleton() cls._access_count += 1 return cls._instance def increment_access_count(self): Singleton._access_count += 1 def get_access_count(self): return Singleton._access_count ```","solution":"class Singleton: _instance = None _access_count = 0 def __init__(self): if Singleton._instance is not None: raise Exception(\\"This class is a singleton!\\") else: Singleton._instance = self @classmethod def get_instance(cls): if cls._instance is None: cls._instance = Singleton() cls._access_count += 1 return cls._instance def increment_access_count(self): Singleton._access_count += 1 def get_access_count(self): return Singleton._access_count"},{"question":"Develop a software application that processes and evaluates arithmetic expressions containing integers, real numbers, variables, and the operators +, -, *, /, and ^ (exponentiation). The application should handle expressions in both infix and postfix notation and support parentheses for specifying the order of operations. Additionally, it must be capable of identifying and reporting syntax errors, such as unbalanced parentheses or invalid operator usage. The application should also support the evaluation of expressions with user-defined variables, for which the values should be provided at runtime. Consider scenarios with nested parentheses and combined usage of different operators.","solution":"import re from collections import deque import operator import math class ExpressionEvaluator: def __init__(self): self.operators = { \'+\': (1, operator.add), \'-\': (1, operator.sub), \'*\': (2, operator.mul), \'/\': (2, operator.truediv), \'^\': (3, operator.pow) } def parse_variables(self, expression, variable_values): for var, value in variable_values.items(): expression = expression.replace(var, str(value)) return expression def evaluate(self, expression, variable_values=None): if variable_values: expression = self.parse_variables(expression, variable_values) postfix = self.infix_to_postfix(expression) if postfix is None: # Syntax error return None return self.evaluate_postfix(postfix) def infix_to_postfix(self, expression): def get_precedence(op): return self.operators[op][0] def is_op(ch): return ch in self.operators stack = deque() postfix = [] number_buffer = [] i = 0 while i < len(expression): ch = expression[i] if ch.isdigit() or ch == \'.\': number_buffer.append(ch) else: if number_buffer: postfix.append(\'\'.join(number_buffer)) number_buffer = [] if ch in \' t\': i += 1 continue elif ch == \'(\': stack.append(ch) elif ch == \')\': while stack and stack[-1] != \'(\': postfix.append(stack.pop()) if stack and stack[-1] == \'(\': stack.pop() else: return None # Mismatched parenthesis elif is_op(ch): while (stack and stack[-1] != \'(\' and get_precedence(stack[-1]) >= get_precedence(ch)): postfix.append(stack.pop()) stack.append(ch) else: return None # Invalid character i += 1 if number_buffer: postfix.append(\'\'.join(number_buffer)) while stack: top = stack.pop() if top in \'()\': return None # Mismatched parenthesis postfix.append(top) return postfix def evaluate_postfix(self, postfix): stack = [] for token in postfix: if token in self.operators: if len(stack) < 2: return None # Insufficient values in expression b = stack.pop() a = stack.pop() try: result = self.operators[token][1](float(a), float(b)) except ZeroDivisionError: return None stack.append(result) else: stack.append(token) if len(stack) != 1: return None # Invalid syntax return stack[0]"},{"question":"Given a string comprised of lowercase and uppercase letters, write a function that counts and prints the number of each unique character in the string. Ignore any non-alphabetic characters in the input. The function should be case-insensitive, meaning \'A\' and \'a\' should be considered the same character. Your solution should take into account efficiency in both time and space. Example: ``` Input: \\"Hello, World!\\" Output: h: 1 e: 1 l: 3 o: 2 w: 1 r: 1 d: 1 ```","solution":"from collections import Counter import string def count_characters(s): Counts and prints the number of each unique character in the string, ignoring case and non-alphabetic characters. s = s.lower() # Convert the string to lowercase filtered_string = \'\'.join(filter(str.isalpha, s)) # Remove non-alphabetic characters counter = Counter(filtered_string) # Count each character for char, count in sorted(counter.items()): print(f\\"{char}: {count}\\")"},{"question":"Write a function that accepts a string containing a mathematical expression and evaluates it, ensuring that it handles nested parentheses correctly. The expression will contain non-negative digits and the operators `+`, `-`, `*`, and `/`. The function should return the result as a float. Additionally, the function should validate the input and raise appropriate exceptions for malformed expressions. Example test cases: ```python expression1 = \\"3 + (2 - (7 * 2))\\" expression2 = \\"(8 / 4) + ((3 + 5) * (2 - 1))\\" expression3 = \\"4 * ((3 + 1) / 2) + 7\\" Expected output: evaluate_expression(expression1) => -9.0 evaluate_expression(expression2) => 10.0 evaluate_expression(expression3) => 15.0 ``` The method should be able to parse and compute the given expression while throwing descriptive errors if an invalid input is provided. An example of an invalid input could be unbalanced parentheses or an illegal character in the expression. Ensure the solution is optimal and handles complex nested operations smoothly.","solution":"import re def evaluate_expression(expression): Evaluates a mathematical expression with support for nested parentheses. Parameters: expression (str): A string containing a mathematical expression. Returns: float: The evaluated result as a float. # Check for invalid characters if not re.match(r\'^[0-9+-*/(). ]*\', expression): raise ValueError(\\"The expression contains invalid characters.\\") # Check for balanced parentheses if expression.count(\'(\') != expression.count(\')\'): raise ValueError(\\"The expression contains unbalanced parentheses.\\") try: # Use eval safely result = eval(expression) return float(result) except Exception as e: raise ValueError(f\\"Invalid expression: {e}\\")"},{"question":"Create a function that takes a string of words separated by spaces and returns the length of the longest word in the string. \\"hello world some words are longer\\"","solution":"def longest_word_length(s): Returns the length of the longest word in the string s. Parameters: s (str): A string of words separated by spaces Returns: int: The length of the longest word in the string words = s.split() if not words: return 0 longest = max(words, key=len) return len(longest)"},{"question":"Write a Python program that checks if a given string is a valid palindrome, ignoring spaces, punctuation, and case sensitivity. Additionally, your program should handle error cases where the input is not a string and return an appropriate error message. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For instance, the string \\"A man, a plan, a canal, Panama!\\" is a valid palindrome. Here is a piece of code as a reference. The following code checks whether a string is a palindrome but does not ignore spaces, punctuation, or case: ```python def is_palindrome(s): return s == s[::-1] print(is_palindrome(\'madam\')) ``` Now, you need to modify this function to: 1. Ignore spaces, punctuation, and case. 2. Include an error-checking mechanism that handles non-string inputs. Good luck!","solution":"import string def is_palindrome(s): Check if a given string is a valid palindrome, ignoring spaces, punctuation, and case sensitivity. Args: s (str): The string to check. Returns: bool: True if the input string is a palindrome, False otherwise. if not isinstance(s, str): return \\"Input is not a string\\" # Remove spaces, punctuation and convert to lower case s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the string is equal to its reverse return s == s[::-1]"},{"question":"Write a function that takes a list of integers as input and processes it to find and return the length of the longest contiguous sub-list that contains exactly two distinct integers. The function should satisfy the following conditions: - The input list will contain only integers. # Example: ```python def longest_sublist_with_two_distinct(nums): # Your code here # Example Usage print(longest_sublist_with_two_distinct([1, 2, 1, 2, 3])) # Output: 4 (sub-list: [1, 2, 1, 2]) print(longest_sublist_with_two_distinct([1, 2, 3, 4])) # Output: 2 (sub-list: [1, 2] or [2, 3] or [3, 4]) print(longest_sublist_with_two_distinct([1, 1, 1, 1])) # Output: 4 (sub-list: [1, 1, 1, 1]) ``` # Constraints: 1. The function should be efficient with regards to time and space complexity. 2. Assume the input list will have at least one element and at most 10^5 elements.","solution":"def longest_sublist_with_two_distinct(nums): if not nums: return 0 n = len(nums) left = 0 right = 0 max_length = 0 count = {} while right < n: count[nums[right]] = count.get(nums[right], 0) + 1 while len(count) > 2: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Write a Python function called `flatten_nested_lists` that takes a list of nested lists as input and returns a single, flat list containing all the elements. The function should use recursion to handle arbitrarily deep nesting. **Function Signature:** ```python def flatten_nested_lists(nested_lists: list) -> list: pass ``` **Input:** - `nested_lists` (list): A list that may contain integers and/or other lists of integers. **Output:** - Returns a single list containing all the integers from `nested_lists` in the same order. **Example:** ```python assert flatten_nested_lists([1, [2, [3, 4], 5], [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8] assert flatten_nested_lists([[1, 2, [3]], [4, 5], 6]) == [1, 2, 3, 4, 5, 6] ``` **Constraint:** - The input list may contain an arbitrary level of nested lists.","solution":"def flatten_nested_lists(nested_lists): Flatten a list of nested lists into a single list. :param nested_lists: List that may contain integers and/or other lists of integers. :return: A flattened single list containing all the integers from the nested_lists in the same order. flat_list = [] for item in nested_lists: if isinstance(item, list): flat_list.extend(flatten_nested_lists(item)) else: flat_list.append(item) return flat_list"},{"question":"Create a function that takes a list of integers and returns a new list with duplicate integers removed. Ensure that the order of elements in the original list is maintained in the new list. For example, given the input `[4, 5, 6, 5, 4, 7, 8]`, the output should be `[4, 5, 6, 7, 8]`. Write the function and provide a test case to demonstrate its functionality.","solution":"def remove_duplicates(input_list): Removes duplicate integers from the input list while maintaining the order of elements. Args: input_list (list of int): The list of integers from which to remove duplicates. Returns: list of int: A new list with duplicates removed and the order maintained. seen = set() output_list = [] for num in input_list: if num not in seen: seen.add(num) output_list.append(num) return output_list"},{"question":"Create a Python application that simulates a library system. The application should include classes for Library, Book, and Member. - The **Book** class should have attributes for title, author, genre, and ISBN. It should also include a method to mark the book as borrowed or returned. - The **Member** class should include attributes for member ID, name, and a list of borrowed books. Add methods to borrow a book, return a book, and list all borrowed books. - The **Library** class should contain attributes for the library name, address, and a list of books. Include methods to add or remove books from the library, search for books by title or author, and list all available books. Additionally, the system should simulate interactions between these classes, such as a member borrowing and returning books, and the library updating its inventory accordingly. The objective is to demonstrate understanding of Object-Oriented Programming concepts, such as class inheritance, methods, and managing lists of objects.","solution":"class Book: def __init__(self, title, author, genre, isbn): self.title = title self.author = author self.genre = genre self.isbn = isbn self.is_borrowed = False def borrow(self): if not self.is_borrowed: self.is_borrowed = True return True return False def return_book(self): if self.is_borrowed: self.is_borrowed = False return True return False class Member: def __init__(self, member_id, name): self.member_id = member_id self.name = name self.borrowed_books = [] def borrow_book(self, book): if book.borrow(): self.borrowed_books.append(book) return True return False def return_book(self, book): if book in self.borrowed_books: book.return_book() self.borrowed_books.remove(book) return True return False def list_borrowed_books(self): return [book.title for book in self.borrowed_books] class Library: def __init__(self, name, address): self.name = name self.address = address self.books = [] def add_book(self, book): self.books.append(book) def remove_book(self, book): if book in self.books: self.books.remove(book) return True return False def search_books_by_title(self, title): return [book for book in self.books if title.lower() in book.title.lower()] def search_books_by_author(self, author): return [book for book in self.books if author.lower() in book.author.lower()] def list_available_books(self): return [book.title for book in self.books if not book.is_borrowed]"},{"question":"You are given an array of integers representing the heights of blocks in a histogram. Each block has a width of 1. Write a function that calculates the area of the largest rectangle that can be formed within the bounds of the histogram. The rectangle must be made from contiguous blocks and can only be as high as the shortest block in the selected range. Example: - Input: [2, 1, 5, 6, 2, 3] - Output: 10 In this example, the largest rectangle that can be formed has an area of 10 (the rectangle formed by heights 5 and 6). Function Signature: ```python def largest_rectangle_area(heights: List[int]) -> int: pass ``` Note: - You must write a function `largest_rectangle_area` which takes in a list of integers `heights` and returns an integer representing the area of the largest rectangle that can be formed. - You may assume the list always contains at least one element.","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: stack = [] # stack to store the indices of the histogram bars max_area = 0 # variable to store the maximum area index = 0 # index to traverse through the histogram bars while index < len(heights): # if the stack is empty or the current bar is taller than the bar at stack top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # pop the top element from the stack top_of_stack = stack.pop() # calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index) # update max_area, if needed max_area = max(max_area, area) # now pop the remaining bars from the stack and calculate area with each popped bar as the smallest bar while stack: top_of_stack = stack.pop() area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) return max_area"},{"question":"Create a function that accepts a list of dictionaries and a key. The function should return a new list containing the values associated with the given key from each dictionary in the input list. If a dictionary does not contain the given key, skip that dictionary. The function should handle edge cases such as an empty list or dictionaries with missing keys. Example input: [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 25} ] key: \\"age\\" Example output: [30, 25]","solution":"def get_values_by_key(dict_list, key): Returns a list of values associated with the given key from each dictionary in the input list. If a dictionary does not contain the given key, it will be skipped. :param dict_list: List of dictionaries :param key: Key to look for :return: List of values associated with the given key return [d[key] for d in dict_list if key in d]"},{"question":"Write a function that takes a string as input and returns the longest substring without repeating characters. The function should be case-sensitive, maintaining the original case of the letters. Additionally, your implementation should efficiently handle input strings of up to 100,000 characters. **Function Signature** ```python def longest_unique_substring(s: str) -> str: ``` **Example** ```python # Example 1 input_string = \\"abcabcbb\\" output = longest_unique_substring(input_string) # Output should be \\"abc\\" # Example 2 input_string = \\"bbbbb\\" output = longest_unique_substring(input_string) # Output should be \\"b\\" # Example 3 input_string = \\"pwwkew\\" output = longest_unique_substring(input_string) # Output should be \\"wke\\" ``` **Note:** - Your function should be well-documented with comments explaining the key steps. - Consider edge cases such as an empty string or a string with all unique characters.","solution":"def longest_unique_substring(s: str) -> str: Returns the longest substring without repeating characters. # Initialize variables to keep track of the longest substring start = 0 max_length = 0 max_substr = \\"\\" seen_chars = {} for end, char in enumerate(s): # If the character is already in the dictionary and its index is # within the current window, move the start to the right of this character\'s last index if char in seen_chars and seen_chars[char] >= start: start = seen_chars[char] + 1 # Update last index of current character seen_chars[char] = end # Update max substring if the current window is larger if end - start + 1 > max_length: max_length = end - start + 1 max_substr = s[start:end + 1] return max_substr"},{"question":"Create a function that takes a list of integers and returns a new list consisting of only the prime numbers from the original list. Ensure that the function is optimally efficient and handles edge cases, such as empty lists or lists with no prime numbers, appropriately. Additionally, implement a helper function to determine if a number is prime.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list consisting of only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Implement a function in your preferred programming language that takes a string as input and returns a tuple. The first element of the tuple should be the input string with all spaces removed, and the second element should be an integer representing the count of digits (\'0\'-\'9\') in the original string. Additionally, provide explanations on how your function handles both typical and edge cases, such as an empty string, strings with no spaces, and strings with no digits.","solution":"def process_string(s): Takes a string as input and returns a tuple. The first element of the tuple is the input string with all spaces removed. The second element is an integer representing the count of digits (\'0\'-\'9\') in the original string. no_spaces = s.replace(\\" \\", \\"\\") digit_count = sum(c.isdigit() for c in s) return (no_spaces, digit_count)"},{"question":"Write a program to reverse the words in a given sentence while maintaining word order. Example input: \\"Hello World from OpenAI\\" Example output: \\"olleH dlroW morf IAnepO\\"","solution":"def reverse_words_in_sentence(sentence): Reverses the characters of each word in the sentence while maintaining the word order. Parameters: sentence (str): The input sentence to be transformed. Returns: str: The sentence with each word reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Write a function to merge two dictionaries d1 and d2. The function should take both dictionaries as input and return a single dictionary that contains all keys and values from both dictionaries. If a key exists in both dictionaries, the value in the resulting dictionary should be a list containing both values from d1 and d2. Additionally, the function should be capable of handling dictionary values that are integers, strings, or lists. If merging results in lists of different data types, they should be combined into a single list maintaining the original data types. Example: ```python d1 = {\'a\': 1, \'b\': \'two\', \'c\': [3, 4]} d2 = {\'b\': 2, \'c\': \'three\', \'d\': [5, 6]} merge_dictionaries(d1, d2) # Output: {\'a\': 1, \'b\': [2, \'two\'], \'c\': [3, 4, \'three\'], \'d\': [5, 6]} ```","solution":"def merge_dictionaries(d1, d2): Merges two dictionaries d1 and d2. If a key exists in both dictionaries, the function will combine their values into a list. result = {} for key in d1: if key in d2: val_d1 = d1[key] if isinstance(d1[key], list) else [d1[key]] val_d2 = d2[key] if isinstance(d2[key], list) else [d2[key]] result[key] = val_d1 + val_d2 else: result[key] = d1[key] for key in d2: if key not in result: result[key] = d2[key] return result"},{"question":"Write a function merge_sorted_arrays that merges two sorted lists into a single sorted list. Your function should preserve the order of elements and efficiently handle large lists. You should not use any in-built sorting functions. def merge_sorted_arrays(arr1: list, arr2: list) -> list: This function takes two sorted lists arr1 and arr2, and returns a single sorted list that merges both lists. The merged list should have the elements in non-decreasing order and must handle large lists efficiently. >>> merge_sorted_arrays([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_arrays([-1, 0, 2], [-2, 0, 3, 4]) [-2, -1, 0, 0, 2, 3, 4] >>> merge_sorted_arrays([], [1, 2, 3]) [1, 2, 3] >>> merge_sorted_arrays([5, 6, 7], []) [5, 6, 7] >>> merge_sorted_arrays([], []) []","solution":"def merge_sorted_arrays(arr1, arr2): This function takes two sorted lists arr1 and arr2, and returns a single sorted list that merges both lists. The merged list should have the elements in non-decreasing order and must handle large lists efficiently. >>> merge_sorted_arrays([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_arrays([-1, 0, 2], [-2, 0, 3, 4]) [-2, -1, 0, 0, 2, 3, 4] >>> merge_sorted_arrays([], [1, 2, 3]) [1, 2, 3] >>> merge_sorted_arrays([5, 6, 7], []) [5, 6, 7] >>> merge_sorted_arrays([], []) [] merged_array = [] i, j = 0, 0 # Iterate over elements of both arrays and merge them in sorted order while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Create a function that takes an input string representing an algebraic expression with variables, constants, and basic operators (+, -, *, /). The function should parse the string, evaluate the algebraic expression, and return the result while correctly handling the order of operations and parentheses. The variables in the expression are provided as a dictionary with variable names as keys and their corresponding values.","solution":"import re def evaluate_expression(expression, variables): Evaluates an algebraic expression with variables, constants, and basic operators (+, -, *, /). Args: expression (str): The algebraic expression as a string. variables (dict): A dictionary where keys are variable names and values are their corresponding numerical values. Returns: float: The result of the evaluated expression. # Replace variables in the expression with their values from the dictionary for var, value in variables.items(): # Use regex to ensure we replace only whole words expression = re.sub(r\'b\' + re.escape(var) + r\'b\', str(value), expression) # Evaluate the expression using Python\'s eval result = eval(expression) return result"},{"question":"Develop a function that checks whether a given matrix is a Toeplitz matrix. A Toeplitz matrix is one in which each descending diagonal from left to right is constant. For example, the below matrix is a Toeplitz matrix: ``` matrix = [ [1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2] ] ``` Implement a function `is_toeplitz(matrix: List[List[int]]) -> bool` that returns `True` if the input matrix is a Toeplitz matrix and `False` otherwise. Assume the input will always be a non-empty matrix.","solution":"from typing import List def is_toeplitz(matrix: List[List[int]]) -> bool: Checks whether a given matrix is a Toeplitz matrix. A matrix is a Toeplitz matrix if each descending diagonal from left to right is constant. Parameters: matrix (List[List[int]]): The input matrix to check. Returns: bool: True if the matrix is a Toeplitz matrix, False otherwise. rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"Develop a Python function to find the longest word in a given string. The function should return the word itself along with its length. If there are multiple words with the same maximum length, return the first one encountered. The input string will only contain alphabets and spaces.","solution":"def find_longest_word(s): Returns the longest word in the given string s along with its length. Parameters: s (str): The input string containing words separated by spaces. Returns: tuple: A tuple containing the longest word and its length. words = s.split() longest_word = \\"\\" max_length = 0 for word in words: if len(word) > max_length: longest_word = word max_length = len(word) return longest_word, max_length"},{"question":"You are tasked with a problem titled \\"Maximum Subarray Sum\\". The problem\'s details are as follows: You are provided with an array of integers `nums`. Your task is to determine the contiguous subarray (containing at least one number) which has the largest sum and return that sum. For instance, consider the following examples: Example 1: Given Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Expected Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum = 6. Example 2: Given Input: nums = [1] Expected Output: 1 Explanation: The subarray [1] has the largest sum = 1. Example 3: Given Input: nums = [5,4,-1,7,8] Expected Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum = 23. Please note the constraints: The length of `nums` is within the range `1 <= nums.length <= 105` The value of each element in `nums` is within the range `-104 <= nums[i] <= 104`.","solution":"def max_subarray_sum(nums): Find the contiguous subarray within an array (containing at least one number) which has the largest sum. :param nums: List of integers :return: The largest sum of the contiguous subarray max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function, `temperature_translator(temp, scale)`, that takes a temperature value `temp` and a string `scale`, which can be either \'C\' or \'F\'. If `scale` is \'C\', the function returns the temperature converted to Fahrenheit. If `scale` is \'F\', the function returns the temperature converted to Celsius. If an invalid scale is provided, the function should return \'Invalid scale\'. Ensure the function handles both integer and floating-point temperature values accurately. ```python def temperature_translator(temp, scale): if scale == \'C\': return (temp * 9/5) + 32 elif scale == \'F\': return (temp - 32) * 5/9 else: return \'Invalid scale\' ``` Examples: ```python temperature_translator(0, \'C\') # 32.0 temperature_translator(32, \'F\') # 0.0 temperature_translator(100, \'C\') # 212.0 temperature_translator(212, \'F\') # 100.0 temperature_translator(75, \'G\') # \'Invalid scale\' ```","solution":"def temperature_translator(temp, scale): Converts the temperature from Celsius to Fahrenheit or vice versa. Parameters: - temp (int or float): The temperature value to be converted. - scale (str): The scale to convert to (\'C\' for Celsius, \'F\' for Fahrenheit). Returns: - float: The converted temperature. - str: \'Invalid scale\' if an invalid scale is provided. if scale == \'C\': return (temp * 9/5) + 32 elif scale == \'F\': return (temp - 32) * 5/9 else: return \'Invalid scale\'"},{"question":"Write a function that takes a list of integers and returns the length of the longest contiguous subarray where the difference between the maximum and minimum elements in the subarray is at most 1. list_of_numbers = [1, 2, 2, 1, 3]","solution":"def longest_contiguous_subarray(nums): Returns the length of the longest contiguous subarray where the difference between the maximum and minimum elements in the subarray is at most 1. if not nums: return 0 max_length = 0 start = 0 while start < len(nums): min_val = max_val = nums[start] for end in range(start, len(nums)): min_val = min(min_val, nums[end]) max_val = max(max_val, nums[end]) if max_val - min_val > 1: break max_length = max(max_length, end - start + 1) start += 1 return max_length"},{"question":"You are tasked with creating a function that mimics a real-world queue management system in a bank. The function should be able to add customers to the queue, serve customers in the order they arrived, and check the current status of the queue. Additionally, implement error handling for attempting to serve a customer when the queue is empty and other edge cases. Implement the following functionalities: 1. `join_queue(name)`: Add a customer with the given name to the queue. 2. `serve_customer()`: Serve the next customer in the queue (remove and return the name of the served customer). 3. `current_queue()`: Return a list of all customers currently in the queue. Demonstrate the functionality of your queue management system with appropriate test cases. Here\'s the template for your function: ```python class BankQueue: def __init__(self): self.queue = [] def join_queue(self, name): # Your code here to add the name to the queue def serve_customer(self): # Your code here to serve the customer and return their name. Implement appropriate error handling. def current_queue(self): # Your code here to return the list of names in the queue # Example usage: queue = BankQueue() queue.join_queue(\\"Alice\\") queue.join_queue(\\"Bob\\") queue.current_queue() # Expected output: [\\"Alice\\", \\"Bob\\"] queue.serve_customer() # Expected output: \\"Alice\\" queue.current_queue() # Expected output: [\\"Bob\\"] queue.serve_customer() # Expected output: \\"Bob\\" queue.serve_customer() # Expected output: None (or appropriate error message) queue.current_queue() # Expected output: [] ```","solution":"class BankQueue: def __init__(self): self.queue = [] def join_queue(self, name): self.queue.append(name) def serve_customer(self): if self.queue: return self.queue.pop(0) else: return \\"No customers in the queue to serve\\" def current_queue(self): return self.queue # Example usage: # queue = BankQueue() # queue.join_queue(\\"Alice\\") # queue.join_queue(\\"Bob\\") # print(queue.current_queue()) # Expected output: [\\"Alice\\", \\"Bob\\"] # print(queue.serve_customer()) # Expected output: \\"Alice\\" # print(queue.current_queue()) # Expected output: [\\"Bob\\"] # print(queue.serve_customer()) # Expected output: \\"Bob\\" # print(queue.serve_customer()) # Expected output: \\"No customers in the queue to serve\\" # print(queue.current_queue()) # Expected output: []"},{"question":"You are given an array of integers representing the daily profit margins of a company. Implement a function to find the maximum profit that can be achieved by buying and selling the stock once. The purchase must be made before the sale (you cannot sell before you buy). If no profit is possible, return 0. ``` def max_profit(prices: List[int]) -> int: # Your code here # Example Usage: prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 (Buy on day 2 at price 1 and sell on day 5 at price 6) prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 (No transaction possible) ``` Explain the time complexity of your solution.","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit that can be achieved by buying and selling the stock once. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit # Time Complexity: O(n) # Space Complexity: O(1)"},{"question":"Implement a function that takes a string representing a mathematical expression containing only non-negative integers, \'+\', \'-\', \'*\' and \'/\' (division operator, truncating towards zero), and evaluates it. Do not use any built-in functionality that directly evaluates an expression like `eval`. Your solution should parse the expression and correctly respect the order of operations (PEMDAS/BODMAS rules). Additionally, ensure that the function can handle white spaces flexibly and treat them as irrelevant to the calculation. Provide the implementation of this function and the set of test cases to verify the correctness of your solution. Specifically test for normal input scenarios, edge cases involving zero, and very large numbers to confirm the robustness of your implementation.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing only non-negative integers, \'+\', \'-\', \'*\', and \'/\' (with truncating towards zero). The expression respects the order of operations (PEMDAS/BODMAS rules). import re # Handling white spaces expression = expression.replace(\\" \\", \\"\\") def helper(tokens): stack = [] num = 0 sign = \\"+\\" while len(tokens) > 0: token = tokens.pop(0) if token.isdigit(): num = int(token) if token == \'(\': num = helper(tokens) if token in \'+-*/)\' or not tokens: if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack.append(stack.pop() * num) elif sign == \\"/\\": stack.append(int(stack.pop() / num)) sign = token num = 0 if token == \')\': break return sum(stack) # Tokenize the string by digits and operators tokens = re.findall(r\\"[d]+|[-+*/()]\\", expression) return helper(tokens)"},{"question":"Generate a matrix (2-dimensional array) where the number of rows (m) and columns (n) are given as input. Populate the matrix such that each element A[i][j] is populated using the formula: A[i][j] = (i+j)! / (i! * j!) where \\"!\\" denotes factorial. The result should be a matrix where each element is a binomial coefficient. Implement a function in Python that: 1. Takes two integers `m` and `n` as input. 2. Returns the generated matrix as a list of lists. Additionally, include a function to compute the factorial of a given number and handle any potential exceptions during matrix generation, such as invalid inputs for `m` and `n`. For an extra challenge, optimize your implementation to handle larger values of `m` and `n` efficiently, considering both time and space complexity.","solution":"import math def factorial(n): Compute the factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 return math.factorial(n) def binomial_coefficient(i, j): Compute binomial coefficient C(i, j) which is given by (i+j)! / (i! * j!) return factorial(i+j) // (factorial(i) * factorial(j)) def generate_matrix(m, n): Generate an m x n matrix populated with binomial coefficients. if m < 0 or n < 0: raise ValueError(\\"The number of rows and columns should be non-negative.\\") matrix = [] for i in range(m): row = [] for j in range(n): row.append(binomial_coefficient(i, j)) matrix.append(row) return matrix"},{"question":"Write a Python function to determine if a given string is a \\"happy string.\\" A string is considered happy if every letter in it appears at least twice consecutively. For instance, \\"hhaappyy\\" is a happy string, whereas \\"hello\\" or \\"hahppy\\" are not. **Function Signature:** ```python def is_happy_string(s: str) -> bool: pass ``` **Input:** - A single string `s` (1 ≤ len(s) ≤ 1000) containing only lowercase English letters. **Output:** - Return `True` if the string is a happy string, otherwise `False`. **Example:** ```python assert is_happy_string(\\"hhaappyy\\") == True assert is_happy_string(\\"hello\\") == False assert is_happy_string(\\"hahppy\\") == False assert is_happy_string(\\"aabbcc\\") == True assert is_happy_string(\\"abc\\") == False ``` **Constraints:** - You can assume the input string contains only lowercase English letters. - The function should run efficiently for all valid input lengths.","solution":"def is_happy_string(s: str) -> bool: Determine if a given string is a happy string. A string is considered happy if every letter appears at least twice consecutively. Parameters: - s: the input string containing only lowercase English letters. Returns: - True if the string is happy, otherwise False. n = len(s) if n < 2: # A string of length less than 2 cannot be happy return False i = 0 while i < n: char_count = 1 while i + 1 < n and s[i] == s[i + 1]: char_count += 1 i += 1 if char_count < 2: return False i += 1 return True"},{"question":"You are asked to implement a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequency, but possibly in a different order. **Function Signature:** ```python def are_anagrams(str1: str, str2: str) -> bool: pass ``` **Input:** - `str1`: A string (0 ≤ `len(str1)` ≤ 1000). It consists of only lowercase English letters. - `str2`: A string (0 ≤ `len(str2)` ≤ 1000). It consists of only lowercase English letters. **Output:** - Return `True` if `str1` and `str2` are anagrams of each other, otherwise `False`. **Examples:** ``` are_anagrams(\\"listen\\", \\"silent\\") -> True are_anagrams(\\"hello\\", \\"billion\\") -> False are_anagrams(\\"anagram\\", \\"nagaram\\") -> True are_anagrams(\\"rat\\", \\"car\\") -> False ``` **Constraints:** - The solution should have a time complexity better than O(n^2), where n is the length of the strings. - Consider edge cases like empty strings or strings of different lengths.","solution":"def are_anagrams(str1: str, str2: str) -> bool: Checks if two strings are anagrams of each other. :param str1: First string. :param str2: Second string. :return: True if str1 and str2 are anagrams, False otherwise. # If the lengths of the two strings are not equal, they cannot be anagrams. if len(str1) != len(str2): return False # Create frequency dictionaries for both strings. freq1 = {} freq2 = {} # Count the frequency of each character in both strings. for char in str1: freq1[char] = freq1.get(char, 0) + 1 for char in str2: freq2[char] = freq2.get(char, 0) + 1 # Compare the frequency dictionaries. return freq1 == freq2"},{"question":"請撰寫一個函數來計算兩個日期之間的天數。函數應接受兩個字符串參數，表示日期，日期格式為\\"YYYY-MM-DD\\"。函數須返回一個整數，代表兩個日期之間的絕對天數。 例如，當輸入日期為 \\"2023-10-01\\" 和 \\"2023-10-10\\" 時，函數應該返回 9。","solution":"from datetime import datetime def days_between_dates(date1, date2): Calculates the absolute number of days between two dates. Args: date1 (str): The first date in \\"YYYY-MM-DD\\" format. date2 (str): The second date in \\"YYYY-MM-DD\\" format. Returns: int: The absolute number of days between the two dates. date_format = \\"%Y-%m-%d\\" d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) delta = abs((d2 - d1).days) return delta"},{"question":"You are given an array of integers nums and an integer target. Write a function that returns all unique combinations of numbers from nums that sum up to target. Each number in nums can only be used once in a combination, and the combination should be in non-descending order. The solution set must not contain duplicate combinations. Function Signature: `def find_combinations(nums: List[int], target: int) -> List[List[int]]` # Example: Example 1: Input: nums = [2, 3, 6, 7], target = 7 Output: [[7]] Explanation: The only combination that sums up to 7 is [7]. Example 2: Input: nums = [2, 3, 5], target = 8 Output: [[3, 5]] Explanation: The only combination that sums up to 8 is [3, 5]. Example 3: Input: nums = [2, 5, 2, 1, 2], target = 5 Output: [[1, 2, 2], [5]] Explanation: The combinations that sum up to 5 are [1, 2, 2] and [5]. # Constraints: 1 <= nums.length <= 30 1 <= nums[i] <= 200 1 <= target <= 500 # Note: - Arrays returned must be sorted in ascending order. - The solution set must not contain duplicate combinations.","solution":"from typing import List def find_combinations(nums: List[int], target: int) -> List[List[int]]: def backtrack(start, path, target): # If target is met, add path to results if target == 0: results.append(path) return # If the target goes below zero, no need to proceed further if target < 0: return # Backtracking approach to find the combinations for i in range(start, len(nums)): # Skip duplicates if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, path + [nums[i]], target - nums[i]) results = [] nums.sort() # Sort nums to handle duplicates and enforce non-descending order backtrack(0, [], target) return results"},{"question":"Write a Python function that receives a list of integers and identifies whether the list is \\"wave sorted.\\" A \\"wave sorted\\" list is a list where every even-indexed element is greater than or equal to its neighboring odd-indexed elements. If the list matches this pattern, the function should return `True`. Otherwise, it should return `False`. Provide an example of the function call and the expected output for a sample input.","solution":"def is_wave_sorted(lst): Returns True if lst is wave sorted, otherwise returns False. A list is wave sorted if every even-indexed element is greater than or equal to its neighboring odd-indexed elements. for i in range(0, len(lst) - 1, 2): if i + 1 < len(lst) and lst[i] < lst[i + 1]: return False return True # Example of function call example_input = [3, 1, 4, 2, 5, 3] expected_output = True print(is_wave_sorted(example_input)) # Expected: True"},{"question":"```python # Context [Event Management System: Original Requirements The event team wants to build an all-in-one event management platform. Product Goals ```python [ \\"Develop a platform that allows users to create, manage, and promote events effortlessly.\\", \\"Provide an intuitive interface for users to register for events, buy tickets, and receive reminders.\\", \\"Implement features that set our platform apart from the competition, such as in-depth event analytics and social media integration.\\" ] ``` User Stories ```python [ \\"As an organizer, I want to be able to create and manage events, so that I can promote and sell tickets easily.\\", \\"As a user, I want to search for events by location, date, or category so I can find events of interest.\\", \\"As a user, I want to receive notifications and reminders about the events I registered for so I don\'t miss them.\\", \\"As an organizer, I want to see detailed analytics about my event, such as ticket sales and attendee demographics, so I can improve future events.\\", \\"As a user, I want to be able to share events I\'m attending on social media so my friends can join me.\\" ] ``` Competitive Analysis ```python [ \\"Eventbrite: Provides robust event creation and ticketing functionalities, but lacks personalized event recommendations.\\", \\"Meetup: Offers social features and group creation, but limited ticketing options.\\", \\"Ticketmaster: Great for large events and concerts, but not user-friendly for smaller or personal events.\\", \\"Cvent: Comprehensive event management with strong analytics, but complex for casual users.\\", \\"Bizzabo: Focused on business events with extensive marketing tools, but higher pricing.\\" ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title Market position of event management platforms x-axis Wide range of features --> Limited features y-axis Simple interface --> Complex interface quadrant-1 Need more features quadrant-2 Needs simplification quadrant-3 Optimal balance quadrant-4 Overloaded with features \\"Eventbrite\\": [0.8, 0.6] \\"Meetup\\": [0.4, 0.7] \\"Ticketmaster\\": [0.6, 0.5] \\"Cvent\\": [0.7, 0.3] \\"Bizzabo\\": [0.5, 0.4] \\"Our Target Product\\": [0.6, 0.7] ``` Requirement Analysis The platform should offer comprehensive event creation and management tools alongside an easy-to-use interface for users to register, buy tickets, and receive event notifications. Unique features, such as detailed event analytics and social media sharing, are also necessary for competitive differentiation. Requirement Pool ```python [ (\\"Implement a functionality for creating and managing events, including ticketing options.\\", \\"P0\\"), (\\"Develop a search function for users to find events by location, date, or category.\\", \\"P0\\"), (\\"Add notification and reminder features for registered events.\\", \\"P1\\"), (\\"Create a detailed analytics dashboard for event organizers.\\", \\"P1\\"), (\\"Enable social media integration for users to share events.\\", \\"P2\\") ] ``` UI Design draft The user interface should include a dashboard for event organizers with tools for creating and managing events, viewing analytics, and handling ticket sales. For users, a clean interface with a search bar, popular event sections, and an easy-to-navigate registration process is essential. Notifications and social media sharing options should be easily accessible. Anything UNCLEAR Everything seems clear, but verification of real-time ticket sales updating and notification delivery mechanisms might be needed.] Format example --- Implementation approach We will ... Python package name ```python \\"event_management\\" ``` File list ```python [ \\"main.py\\", \\"events.py\\", \\"search.py\\", \\"analytics.py\\", \\"notifications.py\\", \\"social_integration.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class Event{ +__init__(self, event_id: int, name: str, date: str, location: str, tickets: int) +create_event(self) -> None +update_event(self) -> None +delete_event(self) -> None } class User{ +__init__(self, user_id: int, name: str, email: str) +register_event(self, event_id: int) -> None +buy_ticket(self, event_id: int) -> str } class Search{ +__init__(self) +search_event(self, query: str) -> List[Event] } class Analytics{ +__init__(self, event_id: int) +generate_report(self) -> Dict } class Notifications{ +__init__(self) +send_reminder(self, user: User, event: Event) -> None } class SocialIntegration{ +__init__(self) +share_event(self, user: User, event: Event) -> None } Event \\"1\\" -- \\"1..*\\" User : attends Event \\"1\\" -- \\"1\\" Analytics : generates Event \\"1\\" -- \\"1\\" Notifications : triggers Event \\"1\\" -- \\"1\\" SocialIntegration : shares User \\"1\\" -- \\"1\\" Search : uses ``` Program call flow ```mermaid sequenceDiagram participant M as Main participant E as Event participant U as User participant S as Search participant A as Analytics participant N as Notifications participant SI as SocialIntegration M->>E: create_event() E->>M: event_created() M->>S: search_event(query) S->>M: event_list() M->>U: register_event(event_id) U->>N: send_reminder() N->>U: reminder_sent() M->>U: buy_ticket(event_id) U->>M: ticket_confirmation() M->>A: generate_report(event_id) A->>M: event_report() M->>SI: share_event(user, event) SI->>U: event_shared() ``` Anything UNCLEAR The requirement is clear to me. --- ```","solution":"def create_event(events, event_id, name, date, location, tickets): Function to create an event. :param events: dict holding the events :param event_id: int - unique identifier for the event :param name: str - name of the event :param date: str - event date :param location: str - event location :param tickets: int - number of tickets available :return: none events[event_id] = { \\"name\\": name, \\"date\\": date, \\"location\\": location, \\"tickets\\": tickets } def search_event(events, query): Function to search for events by name. :param events: dict holding the events :param query: str - search query :return: list of events matching the search query results = [] for event in events.values(): if query.lower() in event[\\"name\\"].lower(): results.append(event) return results"},{"question":"Write a Python function named `find_missing_number` that takes a list of integers as input and returns the missing number in the sequence. The list is supposed to contain integers from 1 to n, where one integer is missing. The length of the list is n-1 and contains no duplicates. The function should have a time complexity of O(n). Example: ```python find_missing_number([3, 7, 1, 2, 8, 4, 5]) # should return 6 find_missing_number([1, 2, 4, 5, 6]) # should return 3 ```","solution":"def find_missing_number(nums): Given a list of integers from 1 to n with one number missing, return the missing number. :param nums: List of integers :return: The missing integer n = len(nums) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(nums) missing_number = total_sum - actual_sum return missing_number"},{"question":"Suppose you are given a non-negative integer, `n`. Your task is to write a Python function, `sum_of_squares(n)`, that computes the sum of the squares of all integers from 1 to `n`. The function should return the result as an integer. You should aim to write a solution with a linear time complexity. Example: ```python n = 5 result = sum_of_squares(n) print(result) # Output: 55 (since 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55) ``` In this example, the function `sum_of_squares` computes the sum of the squares of numbers from 1 to 5, which equals 55.","solution":"def sum_of_squares(n): Returns the sum of the squares of all integers from 1 to n. return sum(i * i for i in range(1, n + 1))"},{"question":"Write a function in Python that takes a list of integers and returns a new list containing only the prime numbers from the original list. Additionally, create test cases to validate your solution with various inputs, including edge cases.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function `letter_case_permutation` that takes in a string `s` and returns a list of all possible strings we can obtain by capitalizing or non-capitalizing each letter in the string `s`. The order of the output does not matter. For simplicity, assume that `s` consists only of alphabetic characters and has a length between 1 and 12. # Input - A string `s` of length n (1 ≤ n ≤ 12) consisting only of alphabetic characters. # Output - A list of all permutations of the string where each letter can be either uppercase or lowercase. # Example ```python Input: \\"a1b2\\" Output: [\\"a1b2\\", \\"A1b2\\", \\"a1B2\\", \\"A1B2\\"] Input: \\"AB\\" Output: [\\"ab\\", \\"Ab\\", \\"aB\\", \\"AB\\"] ``` # Constraints - The length of the given string will not be more than 12. - The string will contain only alphabetic characters. # Note Consider both uppercase and lowercase transformations for each alphabetic character in the input string `s`; non-alphabetic characters should remain unaffected.","solution":"def letter_case_permutation(s): Returns all possible strings by capitalizing or non-capitalizing each letter in the string `s`. def backtrack(sub=\\"\\", i=0): if i == len(s): permutations.append(sub) return if s[i].isalpha(): backtrack(sub + s[i].lower(), i + 1) backtrack(sub + s[i].upper(), i + 1) else: backtrack(sub + s[i], i + 1) permutations = [] backtrack() return permutations"},{"question":"Write a Python function `find_anagram_indices` that identifies all the start indices of anagrams of the string `p` in the string `s`. An anagram is a rearrangement of letters. For your implementation, consider using a sliding window approach for efficient computation. ```python def find_anagram_indices(s, p): Given two strings s and p, return an array of all the start indices of p\'s anagrams in s. You may return the answer in any order. Args: s : str : input string p : str : string whose anagrams are to be found in s Returns: List[int] : start indices of each anagram of p in s Examples: >>> find_anagram_indices(\\"cbaebabacd\\", \\"abc\\") [0, 6] >>> find_anagram_indices(\\"abab\\", \\"ab\\") [0, 1, 2] >>> find_anagram_indices(\\"aaaaaa\\", \\"a\\") [0, 1, 2, 3, 4, 5] >>> find_anagram_indices(\\"abcdefg\\", \\"gfedcba\\") [0] >>> find_anagram_indices(\\"xyz\\", \\"abc\\") [] # Write your code here ``` Programming skills tested: - String manipulation - Sliding window techniques - Efficient searching algorithms - Understanding of anagram concepts","solution":"def find_anagram_indices(s, p): from collections import Counter # Resultant list result = [] p_len = len(p) s_len = len(s) p_counter = Counter(p) window_counter = Counter(s[:p_len-1]) for i in range(p_len-1, s_len): window_counter[s[i]] += 1 # include a new char in the window if window_counter == p_counter: # This step is O(1) since there are at most 26 English letters result.append(i-p_len+1) # Remove oldest char in the window window_counter[s[i-p_len+1]] -= 1 # Remove the count of character completely if it\'s zero if window_counter[s[i-p_len+1]] == 0: del window_counter[s[i-p_len+1]] return result"},{"question":"Consider the given code snippet which aims to implement a basic stack using a Python list. Unfortunately, there are several errors that prevent it from functioning correctly. Identify and correct the errors. Additionally, explain how you can incorporate exception handling to manage an attempt to pop from an empty stack. ```python class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return items.pop() def peek(self): return self.items[-1] def is_empty(self): return len(self.items) == 0 # Sample usage stack = Stack() stack.push(10) stack.push(20) print(stack.peek()) print(stack.pop()) print(stack.pop()) print(stack.pop()) ```","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if self.is_empty(): raise IndexError(\\"pop from empty stack\\") return self.items.pop() def peek(self): if self.is_empty(): raise IndexError(\\"peek from empty stack\\") return self.items[-1] def is_empty(self): return len(self.items) == 0 # Sample usage stack = Stack() stack.push(10) stack.push(20) print(stack.peek()) # Should print 20 print(stack.pop()) # Should print 20 print(stack.pop()) # Should print 10 try: print(stack.pop()) # Should raise an IndexError: pop from empty stack except IndexError as e: print(e)"},{"question":"Write a function that calculates the result of raising a number to a specific power without using the built-in power function or operator. You must implement your own method to handle both positive and negative powers, as well as zero. Note: - The base will be a floating-point number. - The exponent will be an integer. - For negative exponents, your function should return the reciprocal of the base raised to the absolute value of the exponent. - When the exponent is zero, the function should return 1, as any number raised to the power of zero is 1. Additionally, provide a piece of erroneous code that attempts to solve this problem and explain why it fails. Example 1: Input: base = 2.0 exponent = 3 Output: Result: 8.0 Example 2: Input: base = 2.0 exponent = -2 Output: Result: 0.25 Example 3: Input: base = 2.0 exponent = 0 Output: Result: 1.0","solution":"def power(base, exponent): Calculates base raised to the power of exponent without using built-in pow function or operator. Handles both positive and negative exponents, as well as zero. Args: base (float): The base number. exponent (int): The exponent (power) to raise the base. Returns: float: The result of raising base to the power of exponent. if exponent == 0: return 1.0 is_negative = exponent < 0 exponent = abs(exponent) result = 1.0 for _ in range(exponent): result *= base if is_negative: return 1 / result return result"},{"question":"Design a function that takes a list of integers and returns a list of tuples. Each tuple should contain a number from the list and its digital root. The digital root is obtained by iteratively summing the digits of a number until a single-digit number is obtained. For example, the digital root of 9875 is 2 (9+8+7+5=29, 2+9=11, 1+1=2). Ensure your function handles edge cases like negative numbers and zero.","solution":"def digital_root(n): Helper function to calculate the digital root of a number `n`. while n >= 10 or n <= -10: n = sum(int(digit) for digit in str(abs(n))) return n if n >= 0 else -n def list_with_digital_roots(numbers): For a given list of integers `numbers`, returns a list of tuples where each tuple contains a number and its digital root. return [(num, digital_root(num)) for num in numbers]"},{"question":"Write a Python function that takes a list of integers and an integer `k` as input, and returns a new list where each element is the product of every other element in the original list except the one at that position. Additionally, make sure that the solution does not use division and runs in O(n) time complexity. Provide your implementation and explain the logic behind your solution. **Input:** ```python arr = [1, 2, 3, 4] k = 2 ``` **Output:** ```python [24, 12, 8, 6] ``` **Note:** 1. In the example provided, each element of the output list is calculated as the product of all other elements in the input list. 2. The value of `k` is irrelevant to this problem and is given to mimic the input format of other similar problems. You can ignore `k` in your solution but keep it in the function parameters to maintain consistency. **Requirements:** - Avoid using the division operator. - Ensure the algorithm runs in O(n) time complexity. # Constraints: - The length of the input list will be between 1 and 10^5. - Each element of the input list will be a non-zero integer within the range [-10^4, 10^4]. **Function Signature:** Provide the function signature along with your solution. ```python def product_except_self(arr: List[int], k: int) -> List[int]: # Your code here ```","solution":"from typing import List def product_except_self(arr: List[int], k: int) -> List[int]: n = len(arr) # Initialize the output array with 1\'s for multiplication output = [1] * n # Generate prefix products prefix_product = 1 for i in range(n): output[i] = prefix_product prefix_product *= arr[i] # Generate postfix products and update the output array postfix_product = 1 for i in range(n-1, -1, -1): output[i] *= postfix_product postfix_product *= arr[i] return output"},{"question":"Implement a function in Python that takes an unsorted list of integers and returns the length of the longest consecutive subsequence in the list. For example: - Input: `nums = [100, 4, 200, 1, 3, 2]` - Output: `4` In this case, the longest consecutive subsequence is `[1, 2, 3, 4]`, and its length is `4`. **Function Signature:** ```python def longest_consecutive(nums: List[int]) -> int: # Your code here ```","solution":"from typing import List def longest_consecutive(nums: List[int]) -> int: Returns the length of the longest consecutive subsequence in an unsorted list of integers. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: # check if it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes a string as input and returns a new string where any run of consecutive identical characters is replaced by the character followed by the number of consecutive occurrences. For example, the string \\"aaabbccccddee\\" should be transformed to \\"a3b2c4d2e2\\". Ensure that the algorithm has a linear time complexity, O(n), where n is the length of the input string. Function signature: ```python def compress_string(s: str) -> str: pass ``` Example: ```python assert compress_string(\\"aaabbccccddee\\") == \\"a3b2c4d2e2\\" assert compress_string(\\"a\\") == \\"a1\\" assert compress_string(\\"aa\\") == \\"a2\\" assert compress_string(\\"aab\\") == \\"a2b1\\" ```","solution":"def compress_string(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 previous_char = s[0] for i in range(1, len(s)): current_char = s[i] if current_char == previous_char: count += 1 else: compressed.append(f\\"{previous_char}{count}\\") count = 1 previous_char = current_char compressed.append(f\\"{previous_char}{count}\\") return \'\'.join(compressed)"},{"question":"Consider a list of integers representing the prices of a stock on different days. Write a Python function that calculates the maximum profit that can be made by buying and selling the stock exactly once. The function should return an integer representing the maximum profit. If no profit can be made, the function should return 0. Function signature: ```python def max_profit(prices: List[int]) -> int: ``` Example: ```python prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 (Buy on day 2 at price 1 and sell on day 5 at price 6) prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 (No profit can be made) ``` Note: The solution should aim to have a time complexity of O(n).","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Construct a function that takes in a list of integers and returns a list of tuples. Each tuple should contain three values: the original integer, its square, and its cube. Ensure your function handles negative integers and zeros correctly.","solution":"def calculate_powers(numbers): Takes a list of integers and returns a list of tuples. Each tuple contains the original integer, its square, and its cube. return [(n, n**2, n**3) for n in numbers]"},{"question":"Write a function to determine if a given string is an anagram of another string. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. The function should be case-insensitive and ignore spaces and punctuation. Example: - Input: \\"Astronomer\\", \\"Moon starer\\" - Output: True - Input: \\"Hello\\", \\"Ollhe\\" - Output: True - Input: \\"Apple\\", \\"Pineapple\\" - Output: False","solution":"import re from collections import Counter def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, otherwise False. The function is case-insensitive and ignores spaces and punctuation. s1_cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s1).lower() s2_cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s2).lower() return Counter(s1_cleaned) == Counter(s2_cleaned)"},{"question":"Design a Python function that simulates the roll of a pair of dice 10,000 times, calculates the sum of each roll, and plots the distribution of these sums using Matplotlib.","solution":"import random import matplotlib.pyplot as plt def roll_dice(n_rolls=10000): Simulates rolling a pair of dice n_rolls times and returns a list of sums of each roll. sums = [] for _ in range(n_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) sums.append(die1 + die2) return sums def plot_distribution(sums): Plots the distribution of the sums of dice rolls. plt.hist(sums, bins=range(2, 14), edgecolor=\'black\', align=\'left\') plt.title(\'Distribution of Dice Roll Sums\') plt.xlabel(\'Sum of dice rolls\') plt.ylabel(\'Frequency\') plt.xticks(range(2, 13)) plt.show() # Example usage sums = roll_dice() plot_distribution(sums)"},{"question":"Implement a function to merge two sorted arrays into a single sorted array without using any built-in sort functions. arr1 = [1, 3, 5, 7]; arr2 = [2, 4, 6, 8]","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Note: The input arrays should be sorted in non-decreasing order. Parameters: arr1 (List[int]): The first sorted array. arr2 (List[int]): The second sorted array. Returns: List[int]: A merged sorted array. merged_array = [] i = j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append the remaining elements of arr1, if any. while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append the remaining elements of arr2, if any. while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function that finds the nth Fibonacci number using dynamic programming. The function should handle edge cases where the input may be a negative integer by returning \\"Invalid input\\". The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Your task is to efficiently compute the nth Fibonacci number and handle invalid input appropriately. n = 10","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. Returns \\"Invalid input\\" for negative integers. if n < 0: return \\"Invalid input\\" elif n == 0: return 0 elif n == 1: return 1 fib = [0, 1] for i in range(2, n + 1): fib.append(fib[i - 1] + fib[i - 2]) return fib[n]"},{"question":"You are given a string representing a mathematical expression containing integers, the operators \'+\', \'-\', \'*\', and \'/\', and spaces between the numbers and operators. Your task is to implement a Python function that evaluates the expression and returns the result as an integer. Note that division should truncate towards zero (i.e., result should be an integer). You are not allowed to use the `eval` function or any other built-in functions that directly evaluate the expression. Additionally, avoid direct use of the `exec` function due to security concerns. Consider the following test cases to understand the requirement: Example 1: Input: s = \\"3 + 2 * 2\\" Output: 7 Example 2: Input: s = \\" 3/2 \\" Output: 1 Example 3: Input: s = \\" 3+5 / 2 \\" Output: 5 Constraints: - The input string will not be empty and will only contain valid integers, operators, and space characters. - You can assume that integers within the string are non-negative integers. - The input will be a valid mathematical expression containing no special sequences like \\"++\\", \\"--\\", \\"+*\\", etc.","solution":"def evaluate_expression(s): Evaluate a mathematical expression containing integers and the operators \'+\', \'-\', \'*\', \'/\'. Division should truncate towards zero. def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(int(a / b)) # truncate towards zero operators = [] operands = [] i = 0 n = len(s) while i < n: if s[i] == \' \': i += 1 continue elif s[i] in \\"0123456789\\": num = 0 while i < n and s[i].isdigit(): num = num * 10 + int(s[i]) i += 1 operands.append(num) elif s[i] in \\"+-*/\\": while (operators and operators[-1] in \\"*/\\" and s[i] in \\"+-\\") or (operators and operators[-1] == \'*\' and s[i] == \'*\') or (operators and operators[-1] == \'/\' and s[i] == \'/\'): apply_operator(operands, operators.pop()) operators.append(s[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"Design a Python function that checks if all the elements in an array appear an even number of times. def all_elements_even_frequency(arr: list): Return True if every element in the list arr occurs an even number of times, otherwise return False. >>> all_elements_even_frequency([2, 4, 2, 4]) True >>> all_elements_even_frequency([3, 3, 4, 4, 4]) False","solution":"from collections import Counter def all_elements_even_frequency(arr: list) -> bool: Return True if every element in the list arr occurs an even number of times, otherwise return False. element_counts = Counter(arr) for count in element_counts.values(): if count % 2 != 0: return False return True"},{"question":"Craft a function that takes an unordered list of integer elements and returns the list in ascending order, while retaining any occurrences of duplicate elements. nums = [34, 7, 23, 32, 5, 62, 7, 3]","solution":"def sort_list(nums): Returns the input list sorted in ascending order. return sorted(nums)"},{"question":"Write a Python function that accepts a list of integers and a target integer. The function should determine if there are any two numbers in the list that add up to the target integer. If such a pair exists, return the indices of the two numbers as a tuple. If no such pair exists, return -1. The function should have a time complexity of O(n). Additionally, demonstrate the function by providing examples including edge cases (e.g., empty list, list with one element, multiple pairs adding up to the target). Include comments to explain the logic behind your solution.","solution":"def find_two_sum(nums, target): Finds two numbers in \'nums\' that add up to \'target\'. Args: nums (list of int): List of integers. target (int): Target integer. Returns: tuple: Indices of the two numbers if found, -1 otherwise. num_to_index = {} # Dictionary to store number to its index mapping for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return -1"},{"question":"Given an array of integers, write a function to find the first missing positive integer in linear time and constant space. You can modify the input array in-place. Function signature: ```python def first_missing_positive(nums: List[int]) -> int: ``` Example: ```python Input: [3, 4, -1, 1] Output: 2 Input: [1, 2, 0] Output: 3 ``` Explanation: 1. For the input [3, 4, -1, 1], the first missing positive integer is 2. 2. For the input [1, 2, 0], the first missing positive integer is 3. Note: - Your algorithm should run in O(n) time and use constant extra space. - The input array may contain duplicates and negative numbers.","solution":"from typing import List def first_missing_positive(nums: List[int]) -> int: n = len(nums) # First step is to separate positive numbers from non-positive numbers for i in range(n): while 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]: # Swap nums[i] with nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # After rearrangement, the first index which doesn\'t have the correct number means it is missing for i in range(n): if nums[i] != i + 1: return i + 1 # If all numbers in the range 1 to n are present, the missing number is n + 1 return n + 1"},{"question":"Write a function that takes a list of integers and a target sum as input and returns all unique pairs of integers from the list that add up to the target sum. Ensure your solution is efficient and avoids using the same element twice in different pairs. Additionally, write a unit test for this function to verify its correctness with at least three different test cases.","solution":"def find_pairs(nums, target): Find all unique pairs of integers from the list that add up to the target sum. Parameters: nums (list): List of integers target (int): Target sum Returns: list: List of tuples where each tuple contains a unique pair of integers that add up to the target sum seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"Write a Python function to determine if a given positive integer is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example, the number 28 is a perfect number because its proper divisors are 1, 2, 4, 7, and 14, and 1 + 2 + 4 + 7 + 14 = 28. Your function should take an integer input and return a boolean value indicating whether the number is perfect or not. Use appropriate algorithmic techniques to ensure your solution is efficient for large input values.","solution":"def is_perfect_number(n): Determines if a given positive integer is a perfect number. Parameters: n (int): A positive integer. Returns: bool: True if n is a perfect number, False otherwise. # Initial check for n to be greater than 1 as 1 doesn\'t have proper divisors if n <= 1: return False # Calculate sum of proper divisors sum_divisors = 1 # 1 is a proper divisor for any n > 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: sum_divisors += i if i != n // i: # Add the complement divisor if it\'s different sum_divisors += n // i return sum_divisors == n"},{"question":"Write a function that simulates the process of managing customer orders in a small bakery. This function should accept three parameters: an initial inventory list, a list of customer orders, and a dictionary of item prices. The inventory list should contain pairs of item names and their quantities, the customer order list should contain pairs of item names and the quantities ordered, and the price dictionary should map item names to their respective prices. The function should execute the following operations: 1. **Process Orders**: For each customer order, check if the requested quantity is available in the inventory. If an item is unavailable or its quantity is insufficient, return a message indicating which items cannot be fulfilled. If all items in the order can be fulfilled, reduce the inventory accordingly and calculate the total cost of the order. 2. **Inventory Update**: After processing all orders, return the updated inventory list. 3. **Revenue Report**: Calculate and return the total revenue generated from all orders. 4. **Handle Missing Items**: If an item in the order does not exist in the inventory or price list, handle this gracefully by indicating the missing item and continuing the processing of other items. The function should also handle edge cases, such as: - Orders containing non-numeric quantities. - Orders containing items not listed in the price dictionary. - Orders for more items than available in inventory. - An empty order list, which should return the initial inventory and zero revenue. Additionally, provide a sample piece of incorrect code that attempts to solve this problem but contains logical and syntactical errors. The candidate should identify and correct these errors. Python Code Example (Incorrect): ```python def manage_orders(inventory, orders, prices): revenue = 0 for order in orders: item, quantity = order if item not in inventory: return f\\"Item {item} not found in inventory\\" if inventory[item] < quantity: return f\\"Insufficient quantity for item {item}\\" inventory[item] -= quantity revenue += prices[item] * quantity return inventory, revenue # Incorrect usage of dictionary and no handling for missing items in price dictionary. inventory = {\\"bread\\": 10, \\"milk\\": 20} orders = [(\\"bread\\", 2), (\\"milk\\", 5), (\\"butter\\", 1)] prices = {\\"bread\\": 2, \\"milk\\": 1.5} print(manage_orders(inventory, orders, prices)) ```","solution":"def manage_orders(inventory, orders, prices): Manage customer orders in a small bakery, updating inventory and calculating total revenue. Parameters: inventory (list): A list of tuples where each tuple contains an item name and its quantity. orders (list): A list of tuples where each tuple contains an item name and the quantity ordered. prices (dict): A dictionary with item names as keys and their prices as values. Returns: dict: Updated inventory list. float: Total revenue generated. list: List of unfulfilled orders with reasons. inventory_dict = dict(inventory) revenue = 0 unfulfilled_orders = [] for item, quantity in orders: if item not in inventory_dict: unfulfilled_orders.append((item, quantity, \\"Item not found in inventory\\")) continue if type(quantity) is not int or quantity <= 0: unfulfilled_orders.append((item, quantity, \\"Invalid quantity\\")) continue if item not in prices: unfulfilled_orders.append((item, quantity, \\"Item not found in price list\\")) continue if inventory_dict[item] < quantity: unfulfilled_orders.append((item, quantity, \\"Insufficient quantity in inventory\\")) continue # Process valid order inventory_dict[item] -= quantity revenue += prices[item] * quantity updated_inventory = list(inventory_dict.items()) return updated_inventory, revenue, unfulfilled_orders"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Additionally, optimize the function to handle large inputs efficiently. Then, correct the errors in the provided code so the function works as intended. Sample Input: [29, 15, 23, 4, 7, 11, 91, 38] #Given Erroneous Code#: ```python def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True def filter_primes(numbers): primes = [] for num in numbers: if is_prime(num): primes.append(num) return primes # Example usage: nums = [29, 15, 23, 4, 7, 11, 91, 38] print(filter_primes(nums)) # Expected output: [29, 23, 7, 11] ```","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): primes = [] for num in numbers: if is_prime(num): primes.append(num) return primes # Example usage: # nums = [29, 15, 23, 4, 7, 11, 91, 38] # print(filter_primes(nums)) # Expected output: [29, 23, 7, 11]"},{"question":"Write a Python function `flatten_dict` that takes a nested dictionary and returns a flattened version of the dictionary. The keys in the flattened dictionary should be the path of keys in the nested dictionary joined by underscores. For example, the input: ```python { \\"a\\": { \\"b\\": 1, \\"c\\": 2 }, \\"d\\": 3 } ``` should result in: ```python { \\"a_b\\": 1, \\"a_c\\": 2, \\"d\\": 3 } ``` Write the function and include test cases to validate its correctness.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'_\'): items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function that takes a list of sentences and returns a new list where each sentence has its words reversed. Ensure that punctuation remains attached to the words they follow, and preserve the original capitalization. Example Input: [\\"Hello, world!\\", \\"Python is fun.\\", \\"Coding challenges are great.\\"] Example Output: [\\"world! Hello,\\", \\"fun. is Python\\", \\"great. are challenges Coding\\"]","solution":"def reverse_words_in_sentences(sentences): This function takes a list of sentences and returns a new list where each sentence has its words reversed. Punctuation remains attached to the words they follow, and original capitalization is preserved. reversed_sentences = [] for sentence in sentences: words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) reversed_sentences.append(reversed_sentence) return reversed_sentences"},{"question":"Compute the sum of all elements in the given list that are prime numbers. Array: [3, 5, 8, 13, 20, 23, 28]","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(arr): Returns the sum of all elements in the given list that are prime numbers. return sum(x for x in arr if is_prime(x))"},{"question":"# Problem Description: Implement a function that reads a given list of strings, where each string represents an arithmetic expression containing integers and the operators `+`, `-`, `*`, `/`. The function should evaluate each expression and return a list with the results of these evaluations. The expressions are guaranteed to be valid and follow the standard order of operations (PEMDAS/BODMAS rules). The function should handle division as integer division (//) which truncates towards zero. # Constraints: - The length of the list of expressions will be between 1 and 1000. - Each expression string will have a length of up to 100 characters. - The integers in the expressions will be between `-10,000` and `10,000`. # Example: ```python expressions = [\\"3+2*2\\", \\" 3/2 \\", \\" 3+5 / 2 \\"] evaluate_expressions(expressions) # Output: [7, 1, 5] ``` *Explanation*: - For `\\"3+2*2\\"`, evaluate `2*2` first, which gives `4`, then `3+4`, which gives `7`. - For `\\" 3/2 \\"`, perform integer division `3//2`, which gives `1`. - For `\\" 3+5 / 2 \\"`, evaluate `5 / 2` first, which gives `2` (since we\'re doing integer division), then `3 + 2`, which gives `5`. **Note:** - Whitespace in the expressions should be ignored. - Ensure robust error handling for edge cases and invalid inputs (e.g., division by zero should raise an appropriate error).","solution":"def evaluate_expressions(expressions): def evaluate(expression): expression = expression.replace(\' \', \'\') return eval(expression.replace(\'/\', \'//\')) return [evaluate(expr) for expr in expressions]"},{"question":"Write a function that takes an unsorted list of integers and determines the longest sequence of consecutive integers. The function should return the length of that sequence. This program should handle negative numbers and zeros as well. In addition, write a helper function that receives a list of integers and returns only the unique numbers in the original order they appeared in the list. For example: Given the input list: `[100, 4, 200, 1, 3, 2, 2, -1, 0]`, the function should return `5` because the longest sequence of consecutive integers is `-1, 0, 1, 2, 3, 4`.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest sequence of consecutive integers in an unsorted list of integers. if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak def unique_preserve_order(nums): Returns a new list with the unique numbers from the original list, preserving the order they appeared in. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function that takes a list of student records, each containing a student name and a list of their scores in various subjects, and returns the name of the student with the highest average score. If multiple students have the highest average, return the name that comes first alphabetically. Example input: [ (\'Alice\', [80, 90, 85]), (\'Bob\', [70, 85, 90]), (\'Charlie\', [95, 100, 90]) ] Example output: \'Charlie\'","solution":"def student_with_highest_average(records): Returns the name of the student with the highest average score. If multiple students have the highest average, returns the name that comes first alphabetically. :param records: List of tuples, each containing a student name and a list of their scores in various subjects :return: Name of the student with the highest average score def average(scores): return sum(scores) / len(scores) highest_average = -1 top_student = \\"\\" for name, scores in records: avg = average(scores) if avg > highest_average or (avg == highest_average and name < top_student): highest_average = avg top_student = name return top_student"},{"question":"Create a Python function that takes a dictionary with string keys and list of integers as values, and returns a new dictionary with the same keys, where each integer list is sorted in descending order. If a list contains less than 3 integers, the function should leave that list unchanged. Example: ```python input_data = { \'a\': [5, 2, 9, 1], \'b\': [3], \'c\': [8, 6, 4, 2] } output_data = { \'a\': [9, 5, 2, 1], \'b\': [3], \'c\': [8, 6, 4, 2] } ```","solution":"def sort_dict_values_desc(input_dict): Takes a dictionary with string keys and list of integers as values, and returns a new dictionary with the same keys, where each integer list is sorted in descending order if the list contains 3 or more integers. output_dict = {} for key, value in input_dict.items(): if len(value) >= 3: output_dict[key] = sorted(value, reverse=True) else: output_dict[key] = value return output_dict"},{"question":"Design a parking lot system using object-oriented programming principles. Your system should support the following functionalities: 1. Initialize the parking lot with a given number of parking slots. 2. Park a vehicle in the nearest available slot. 3. Exit a parked vehicle. 4. Check the availability of slots. 5. Find the slot number where a specific vehicle is parked. Consider the following constraints: - The parking lot accommodates cars of different sizes (e.g., small, medium, large), and each slot can only fit a car of its designated size or smaller. - The function to park a vehicle should return the slot number or indicate if the parking lot is full. - Use appropriate data structures to ensure efficient querying and updating of the parking lot status. Provide an implementation for the parking lot system and demonstrate its usage with a few test cases.","solution":"class ParkingSlot: def __init__(self, slot_number, size): self.slot_number = slot_number self.size = size self.is_occupied = False self.vehicle = None class ParkingLot: def __init__(self, slots): self.slots = {i[\'slot_number\']: ParkingSlot(i[\'slot_number\'], i[\'size\']) for i in slots} def park(self, vehicle): for slot_number, slot in self.slots.items(): if not slot.is_occupied and slot.size >= vehicle.size: slot.vehicle = vehicle slot.is_occupied = True return slot_number return \\"Parking lot is full\\" def exit_vehicle(self, slot_number): if self.slots[slot_number].is_occupied: self.slots[slot_number].vehicle = None self.slots[slot_number].is_occupied = False return True return False def check_availability(self): return [slot_number for slot_number, slot in self.slots.items() if not slot.is_occupied] def find_vehicle(self, vehicle_id): for slot_number, slot in self.slots.items(): if slot.is_occupied and slot.vehicle.vehicle_id == vehicle_id: return slot_number return \\"Vehicle not found\\" class Vehicle: def __init__(self, vehicle_id, size): self.vehicle_id = vehicle_id self.size = size"},{"question":"Create a function that accepts a string of mathematical expressions separated by semicolons and evaluates each expression. The expressions will only involve addition, subtraction, multiplication, and division, with parentheses to denote operation precedence. The function should output a list of results for each expression in the order they appear in the input string. Implement error handling to manage division by zero and malformed expressions, and provide meaningful error messages for these cases. Also, deliver a brief explanation of your solution and the strategies used to handle errors and maintain correct operation precedence.","solution":"def evaluate_expressions(expression_string): Evaluates a string of mathematical expressions separated by semicolons. Args: expression_string (str): A string containing mathematical expressions separated by semicolons. Returns: list: A list of results for each expression. Raises: ValueError: When there is a division by zero or malformed expression. def evaluate(expression): Evaluates a single mathematical expression. Args: expression (str): A mathematical expression. Returns: float: The result of the evaluated expression. Raises: ValueError: When there is a division by zero or malformed expression. try: # Using eval to evaluate the expression, `eval` is used here to handle the mathetical expressions correctly. result = eval(expression) return result except ZeroDivisionError: raise ValueError(\\"Division by zero in expression: {}\\".format(expression)) except (SyntaxError, NameError): raise ValueError(\\"Malformed expression: {}\\".format(expression)) expressions = expression_string.split(\\";\\") results = [] for expression in expressions: if expression.strip(): # Evaluate non-empty expressions results.append(evaluate(expression.strip())) return results # Example Usage # expression_string = \\"3 + 5; 10 / 2; (4 + 2) * 3; 5 - 0; 4 / 0\\" # print(evaluate_expressions(expression_string))"},{"question":"Design an efficient algorithm to solve the task of generating the nth term in the series of triangular numbers. The triangular number for a given n is defined by the formula T(n) = n*(n+1)/2. The solution should integrate both iterative and recursive approaches and should highlight the trade-offs between these methods. The algorithm must be robust to accommodate inputs that are not positive integers, numbers larger than 10,000, or decimal numbers, and round them to the nearest integer. It should also generate the complete series up to the nth term, along with computing the sum, and the product of all terms in the series. Additionally, the algorithm should handle arrays of numbers or ranges (e.g., from the 5th to 20th term) as inputs, producing the corresponding series for each element in the array or range. Proper error handling should be implemented to manage incorrect inputs like strings or negative numbers, providing tailored error messages. The candidate must illustrate a flawed code snippet that calculates the nth term using a basic iterative method without managing erroneous inputs or larger numbers and pinpoint the issues for correction. Furthermore, the solution should support parallel computing to address multiple input sets simultaneously, enhancing performance. The candidate should explain parallel processing implementation and its impact on the algorithm\'s efficiency. Space optimization of the algorithm should also be discussed. Candidates should describe how the algorithm can be made more memory efficient and its effects on overall performance. Candidates should also propose modifications to the algorithm to handle other polygonal number sequences, like pentagonal or hexagonal numbers, detailing the respective mathematical formulas and their implementation. Lastly, candidates must explain potential adaptations of the algorithm for different number sequences like the Fibonacci or prime numbers. They should also describe how to modify the algorithm for traversing and managing other data structures such as linked lists or binary trees, including handling circular references or self-referential structures.","solution":"import math from concurrent.futures import ThreadPoolExecutor def validate_and_round_input(n): # Validate and round the input to nearest integer if not isinstance(n, (int, float)): raise ValueError(\\"Input must be an integer or a float\\") if n < 0: raise ValueError(\\"Input must be a non-negative number\\") return round(n) def triangular_number_iterative(n): Generate the nth triangular number iteratively. n = validate_and_round_input(n) return n * (n + 1) // 2 def triangular_number_recursive(n): Generate the nth triangular number recursively. n = validate_and_round_input(n) if n == 0: return 0 return n + triangular_number_recursive(n - 1) def generate_series_and_aggregate(n): Generate the complete triangular number series up to nth term, along with computing the sum and product of all the terms in the series. n = validate_and_round_input(n) series = [triangular_number_iterative(i) for i in range(1, n + 1)] total_sum = sum(series) total_product = math.prod(series) return series, total_sum, total_product def process_input_array(inputs): Process an array or range of inputs, generating the corresponding series for each element. results = [] for n in inputs: series, total_sum, total_product = generate_series_and_aggregate(n) results.append({ \\"input\\": n, \\"series\\": series, \\"sum\\": total_sum, \\"product\\": total_product }) return results def parallel_processing(inputs): Utilize parallel processing to compute triangular number series for multiple input sets simultaneously. with ThreadPoolExecutor() as executor: results = list(executor.map(generate_series_and_aggregate, inputs)) return results # Example of incorrect iterative method. def flawed_triangular_number(n): return n * (n - 1) / 2 # Incorrect formula and doesn\'t handle errors"},{"question":"編寫一個函數，計算字串中最長的無重覆字元子字串的長度。 輸入= \\"abcabcbb\\"","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"I\'ve come across this snippet that is supposed to implement a basic stack data structure using Python\'s list methods, but it seems to have a few issues. Can you identify and correct the problems? cod9 ellas t@ck: qef __!ni3__1s€lf): s€lf.stack - list() def puh_ self » value): s€]f.stack.appendivalu}) ner pO(} -}€lf): % if len(sel.stack, -: return S0ne return sef.stack.pO())) df pr(k(self) % if lenjself.stack} - 0: return NOne return s€]f.stack_[-11 qsf is_empty=sef): g return 1En(self.-stack} - 0","solution":"class Stack: def __init__(self): self.stack = [] def push(self, value): self.stack.append(value) def pop(self): if len(self.stack) == 0: return None return self.stack.pop() def peek(self): if len(self.stack) == 0: return None return self.stack[-1] def is_empty(self): return len(self.stack) == 0"},{"question":"Formulate a robust function that traverses an unordered list of words to identify and extract the smallest lexicographical permutation of the input. Ensure the permutation retains unique elements only, thereby eliminating any repetitive entities to preserve data singularity. [\'beta\', \'alpha\', \'beta\', \'delta\', \'gamma\', \'alpha\']","solution":"def smallest_lexicographical_permutation(words): Returns the smallest lexicographical permutation of the unique words. # Remove duplicates by converting to a set unique_words = set(words) # Sort the unique words lexicographically sorted_unique_words = sorted(unique_words) return sorted_unique_words"},{"question":"Implement a function that simulates the process of managing a limited-capacity queue system for a theme park ride. The function should handle the following operations: 1. **ENQUEUE x**: Adds a person with identifier `x` to the queue, if there is space. 2. **DEQUEUE**: Removes the person at the front of the queue. 3. **LIST**: Returns the current state of the queue as a list. Your goal is to maintain the state of the queue across a series of operations, ensuring that the queue does not exceed its specified capacity at any point. The function should take a list of operations and a queue capacity as inputs and output the resulting state of the queue after all operations have been performed. Example: Input: - operations = [\\"ENQUEUE 1\\", \\"ENQUEUE 2\\", \\"ENQUEUE 3\\", \\"DEQUEUE\\", \\"ENQUEUE 4\\", \\"LIST\\"] - capacity = 3 Output: [2, 3, 4] Explanation: 1. \\"ENQUEUE 1\\" adds 1 to the queue: [1] 2. \\"ENQUEUE 2\\" adds 2 to the queue: [1, 2] 3. \\"ENQUEUE 3\\" adds 3 to the queue: [1, 2, 3] 4. \\"DEQUEUE\\" removes 1 from the queue: [2, 3] 5. \\"ENQUEUE 4\\" adds 4 to the queue: [2, 3, 4] 6. \\"LIST\\" returns the current queue: [2, 3, 4]","solution":"def manage_queue(operations, capacity): Manages a limited capacity queue system based on the given operations. Parameters: operations (list): A list of operations to be performed on the queue. capacity (int): The maximum capacity of the queue. Returns: list: The state of the queue after all operations have been performed. queue = [] for operation in operations: if operation.startswith(\\"ENQUEUE\\"): _, x = operation.split() if len(queue) < capacity: queue.append(int(x)) elif operation == \\"DEQUEUE\\": if queue: queue.pop(0) elif operation == \\"LIST\\": return queue return queue"},{"question":"You are given a string where some words are enclosed within square brackets (e.g., \\"Hello [world]\\"). Write a Python function that replaces each word within the square brackets with the reversed version of that word, maintaining the rest of the string as is. If there are nested brackets, process the innermost brackets first. **Constraints:** - The input string will only contain alphabetic characters and brackets. - Assume the input string will always be well-formed (every opening bracket has a corresponding closing bracket and vice versa). **Example:** - reverse_bracketed_words(\\"This is a [simple] test.\\") should return \\"This is a [elpmis] test.\\" - reverse_bracketed_words(\\"Nested [example [brackets]] are [fun].\\") should return \\"Nested [example [stekcarb]] are [nuf].\\" **Function Signature:** ```python def reverse_bracketed_words(input_string: str) -> str: pass ```","solution":"def reverse_bracketed_words(input_string: str) -> str: def reverse_word_in_brackets(s): stack, res, word = [], \\"\\", \\"\\" for char in s: if char == \'[\': if word: stack.append(word) stack.append(\'[\') word = \\"\\" elif char == \']\': if word: stack.append(word[::-1]) word = \\"\\" temp = [] while stack and stack[-1] != \'[\': temp.append(stack.pop()) stack.pop() # pop \'[\' stack.append(\'[\' + \'\'.join(temp[::-1]) + \']\') else: word += char return \'\'.join(stack) + word return reverse_word_in_brackets(input_string)"},{"question":"Given a list of transactions represented as dictionaries with \'id\', \'amount\' and \'type\' (either \'credit\' or \'debit\'), write a Python function that categorizes these transactions into two separate lists: one for \'credit\' and one for \'debit\'. Each list should preserve the original order of transactions. Ensure to return a dictionary with keys \'credit\' and \'debit\', where the values are the corresponding lists of transactions. The input will be a list of dictionaries, and the output should be a dictionary with two keys corresponding to the categorized lists. For example, the input `transactions` list might be: ```python [ {\\"id\\": 1, \\"amount\\": 100, \\"type\\": \\"debit\\"}, {\\"id\\": 2, \\"amount\\": 200, \\"type\\": \\"credit\\"}, {\\"id\\": 3, \\"amount\\": 50, \\"type\\": \\"debit\\"}, {\\"id\\": 4, \\"amount\\": 350, \\"type\\": \\"credit\\"} ] ``` And the correct output would be: ```python { \\"credit\\": [ {\\"id\\": 2, \\"amount\\": 200, \\"type\\": \\"credit\\"}, {\\"id\\": 4, \\"amount\\": 350, \\"type\\": \\"credit\\"} ], \\"debit\\": [ {\\"id\\": 1, \\"amount\\": 100, \\"type\\": \\"debit\\"}, {\\"id\\": 3, \\"amount\\": 50, \\"type\\": \\"debit\\"} ] } ```","solution":"def categorize_transactions(transactions): Categorizes transactions into credit and debit. Parameters: transactions (list): A list of dictionaries with \'id\', \'amount\', and \'type\' keys. Returns: dict: A dictionary with two keys \'credit\' and \'debit\' containing lists of corresponding transactions. result = {\\"credit\\": [], \\"debit\\": []} for transaction in transactions: if transaction[\'type\'] == \'credit\': result[\'credit\'].append(transaction) elif transaction[\'type\'] == \'debit\': result[\'debit\'].append(transaction) return result"},{"question":"You are given a list of integers. Write a function that finds the largest difference between any two integers where the larger integer comes after the smaller integer in the list. If no such elements exist, return 0. Your solution should efficiently handle large lists. ```python def maxDifference(arr): This function takes a list of integers and returns the maximum difference between two elements such that the larger element comes after the smaller element. Parameters: arr (list): List of integers Returns: int: The maximum difference if found, otherwise 0. pass # your implementation here # Example usage and test cases print(maxDifference([2, 3, 10, 2, 4, 8, 1])) # Output: 8 print(maxDifference([7, 9, 5, 6, 3, 2])) # Output: 2 print(maxDifference([5, 4, 3, 2, 1])) # Output: 0 print(maxDifference([1, 2, 3, 4, 5])) # Output: 4 ``` # Constraints: - You may assume all integers in the list are unique. - The list will have at least two elements and at most 10^5 elements. - Each element in the list will be in the range of -10^9 to 10^9.","solution":"def maxDifference(arr): This function takes a list of integers and returns the maximum difference between two elements such that the larger element comes after the smaller element. Parameters: arr (list): List of integers Returns: int: The maximum difference if found, otherwise 0. if len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for number in arr[1:]: if number - min_element > max_diff: max_diff = number - min_element if number < min_element: min_element = number return max_diff"},{"question":"Write a function `least_common_multiple(a, b)` that takes two positive integers, `a` and `b`, and returns their least common multiple (LCM). The LCM of two integers is the smallest positive integer that is divisible by both `a` and `b`. Your function should have a time complexity of O(log(min(a, b))) using the greatest common divisor (GCD) approach and without using any direct Python functions that calculate LCM or GCD.","solution":"def gcd(x, y): Calculate the greatest common divisor of x and y using the Euclidean algorithm. while y: x, y = y, x % y return x def least_common_multiple(a, b): Calculate and return the least common multiple (LCM) of two positive integers a and b using the relationship between LCM and GCD. LCM(a, b) = abs(a*b) // GCD(a, b). if a <= 0 or b <= 0: raise ValueError(\\"Input values must be positive integers.\\") gcd_value = gcd(a, b) return abs(a * b) // gcd_value"},{"question":"Given a Python list of dictionaries representing a personal library, where each dictionary contains the keys \'title\', \'author\', and \'pages\', like so: ```python library = [ {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'pages\': 281}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'pages\': 328}, {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'pages\': 180} ] ``` Write a Python program to: - Add a new book to the library with title \'Moby Dick\', author \'Herman Melville\', and pages 585. - Change the number of pages of \'1984\' to 350. - Remove \'To Kill a Mockingbird\' from the library. Additionally, here\'s a piece of erroneous code. Identify the errors and correct them to perform the above tasks: ```python # Adding a new book library[\'Moby Dick\'] = {\'title\': \'Moby Dick\', \'author\': \'Herman Melville\', \'pages\': \'585\'} # Changing the number of pages library[\'1984\'][\'pages\'] = \'350\' # Removing a book library.remove(\'To Kill a Mockingbird\') ```","solution":"def update_library(library): Updates the library with specified tasks: - Adds a new book titled \'Moby Dick\' by Herman Melville with 585 pages. - Updates the pages of \'1984\' to 350. - Removes \'To Kill a Mockingbird\' from the library. # Adding a new book new_book = {\'title\': \'Moby Dick\', \'author\': \'Herman Melville\', \'pages\': 585} library.append(new_book) # Changing the number of pages of \'1984\' for book in library: if book[\'title\'] == \'1984\': book[\'pages\'] = 350 # Removing \'To Kill a Mockingbird\' from the library library[:] = [book for book in library if book[\'title\'] != \'To Kill a Mockingbird\'] return library"},{"question":"Write a Python program that performs the following: 1. Reads an integer `N` from the user input. 2. Generates a list of `N` random integers between 1 and 100 inclusive. 3. Removes any duplicates from the list while keeping the order of the remaining elements. 4. Computes the sum of all the prime numbers in the resulting list (after duplicates have been removed). 5. Outputs the list after duplicates are removed and the sum of prime numbers. To achieve this, you need to: - Write a function `is_prime(num)` that returns `True` if `num` is a prime number, otherwise `False`. - Write a function `remove_duplicates(lst)` that removes duplicates from the list `lst` while maintaining the order. - Write a function `sum_primes(lst)` that computes the sum of all prime numbers in the list `lst`. Provide the complete code and a brief explanation of how each part works.","solution":"import random def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def remove_duplicates(lst): Removes duplicates from lst while maintaining order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result def sum_primes(lst): Returns the sum of all prime numbers in lst. return sum(num for num in lst if is_prime(num)) def process_numbers(n): Generates a list of n random integers between 1 and 100, removes duplicates, and returns the list and the sum of prime numbers in the list. random_numbers = [random.randint(1, 100) for _ in range(n)] unique_numbers = remove_duplicates(random_numbers) prime_sum = sum_primes(unique_numbers) return unique_numbers, prime_sum # To Read an integer N and perform the required operations if __name__ == \\"__main__\\": N = int(input(\\"Enter an integer N: \\")) unique_numbers, prime_sum = process_numbers(N) print(\\"List after removing duplicates:\\", unique_numbers) print(\\"Sum of prime numbers:\\", prime_sum)"},{"question":"Given a list of integers, write a program that splits the list into two sublists such that the difference between the sum of the first sublist and the sum of the second sublist is minimized. Your program should return the two sublists. Assume that the sum of elements in the list will not exceed 10,000. You are also provided an initial attempt at solving this problem, but it has some errors and inefficiencies. Identify the mistakes, rectify them, and optimize the code to ensure it achieves the goal efficiently. Make sure to explain your approach and the changes you made. Here is the erroneous code example: ```python def split_list(arr): total_sum = sum(arr) half_sum = total_sum // 2 subset_sum = 0 subset1 = [] subset2 = [] for num in arr: if subset_sum + num <= half_sum: subset1.append(num) subset_sum += num else: subset2.append(num) return subset1, subset2 lst = [5, 8, 6, 7, 3] result = split_list(lst) print(result) ``` Analyze the provided code, correct any errors, and explain why your solution is optimal. Finally, optimize your solution to handle larger lists efficiently and demonstrate its correctness with test cases.","solution":"def split_list(arr): Given a list of integers, split the list into two sublists such that the difference between the sum of the two sublists is minimized. The function returns the two sublists. n = len(arr) total_sum = sum(arr) target_sum = total_sum // 2 # Create a DP array dp = [[False] * (target_sum + 1) for _ in range(n + 1)] # Initialize DP array for i in range(n + 1): dp[i][0] = True # Fill the DP array for i in range(1, n + 1): for j in range(1, target_sum + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j - arr[i-1]] else: dp[i][j] = dp[i-1][j] # Find the maximum value where subset is possible and has the closest value to target_sum closest_sum = 0 for j in range(target_sum, -1, -1): if dp[n][j]: closest_sum = j break # Traceback to find the elements of each subset subset1 = [] subset2 = arr[:] w = closest_sum for i in range(n, 0, -1): if not dp[i-1][w] and w != 0: subset1.append(arr[i-1]) subset2.remove(arr[i-1]) w -= arr[i-1] return subset1, subset2"},{"question":"Write a function that accepts a list of integers as input, and returns the list sorted in non-decreasing order. However, any negative integers in the list should be placed at the end, sorted in non-increasing order. For example, given the input list [3, -1, -4, 2, 0, -2], the function should return [0, 2, 3, -1, -2, -4]. Ensure that your function handles edge cases, such as an empty list or a list with no negative integers.","solution":"def custom_sort(lst): Sorts a list such that non-negative integers are sorted in non-decreasing order and negative integers are sorted in non-increasing order and placed at the end. non_neg = sorted([x for x in lst if x >= 0]) neg = sorted([x for x in lst if x < 0], reverse=True) return non_neg + neg"},{"question":"Write a function that identifies continuous alphabetical characters in a string and returns a list of these substrings. For example, given the input string \\"Hello123World45Programming78\\", the function should return [\\"Hello\\", \\"World\\", \\"Programming\\"].","solution":"import re def extract_alphabetical_substrings(s): Identifies continuous alphabetical characters in a string and returns a list of these substrings. Args: s (str): Input string. Returns: List[str]: List of continuous alphabetical substrings. return re.findall(r\'[a-zA-Z]+\', s)"},{"question":"Design a function that processes a matrix of integers and returns the transpose of the given matrix. Pay attention to memory usage and assume the matrix is not necessarily square. Provide a sample input and output to illustrate the expected transformation.","solution":"def transpose(matrix): Returns the transpose of the given matrix. Args: matrix (list of list of ints): A 2D list representing the matrix. Returns: list of list of ints: The transposed matrix. # Check if the matrix is empty if not matrix: return [] # Transpose the matrix transposed_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] return transposed_matrix # Sample input input_matrix = [ [1, 2, 3], [4, 5, 6] ] # Sample output # [ # [1, 4], # [2, 5], # [3, 6] # ] print(transpose(input_matrix))"},{"question":"Write a Python function that takes a list of integers and an integer `n`. The function should return a new list containing all the elements of the original list that are divisible by `n`, but with the order of elements reversed. Example: - Input: list = [12, 4, 9, 10, 28, 45, 30], n = 3 - Output: [30, 45, 9, 12]","solution":"def divisible_and_reversed(lst, n): Returns a list of elements from lst that are divisible by n, in reversed order. Parameters: lst (list): A list of integers. n (int): The integer to check divisibility against. Returns: list: A list of integers divisible by n, in reversed order. # Filtering elements divisible by n divisible_elements = [x for x in lst if x % n == 0] # Reversing the order return divisible_elements[::-1]"},{"question":"Write a function `max_subarray_sum` that takes a list of integers as input and returns the sum of the maximum subarray. A subarray is a contiguous part of the array, and the maximum subarray is the one with the highest possible sum. For instance, given the input `[−2,1,−3,4,−1,2,1,−5,4]`, the function should return `6` as `[4,−1,2,1]` is the subarray with the maximum sum. The solution should have a time complexity of O(n). ```python def max_subarray_sum(nums): Calculate the sum of the maximum subarray of the input list of integers. :param nums: List[int] - List of integers :return: int - Sum of the maximum subarray # Your implementation here ``` Note: You are required to handle edge cases such as an empty list or a list containing all negative numbers.","solution":"def max_subarray_sum(nums): Calculate the sum of the maximum subarray of the input list of integers. :param nums: List[int] - List of integers :return: int - Sum of the maximum subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that takes in a list of dictionaries representing students and their scores in various subjects and returns a dictionary with each student\'s name and their average score across all subjects. The function should handle cases where the scores lists are of varying lengths and should round the average to two decimal places. def calculate_average_scores(students): pass Example input: students = [ {\'name\': \'Alice\', \'scores\': [90, 80, 85]}, {\'name\': \'Bob\', \'scores\': [100, 90]}, {\'name\': \'Charlie\', \'scores\': [78, 72, 80, 85]} ] Expected output: {\'Alice\': 85.0, \'Bob\': 95.0, \'Charlie\': 78.75}","solution":"def calculate_average_scores(students): Given a list of dictionaries representing students and their scores in various subjects, returns a dictionary with each student\'s name and their average score across all subjects, rounded to two decimal places. average_scores = {} for student in students: name = student[\'name\'] scores = student[\'scores\'] if scores: average = round(sum(scores) / len(scores), 2) average_scores[name] = average else: average_scores[name] = 0.0 return average_scores"},{"question":"You are given a list of stock prices for a company in chronological order. Write a function that identifies the best day to buy and the best day to sell to maximize profit. If there is no profit to be made, return 0 for both days. The function should return a tuple with the indices of the buy day and the sell day, respectively. For example, given the list: [7, 1, 5, 3, 6, 4], the best day to buy would be day 1 and the best day to sell would be day 4, resulting in the maximum profit of 5. Function Signature: ```python def best_buy_sell_days(prices: List[int]) -> Tuple[int, int]: ``` # Example ```python best_buy_sell_days([7, 1, 5, 3, 6, 4]) ``` Output: (1, 4) # Constraints 1. You must buy before you sell. 2. Prices are non-negative integers. 3. The list can have at least 1 to 10^5 elements. 4. If there is no profit to be made, return (0, 0).","solution":"from typing import List, Tuple def best_buy_sell_days(prices: List[int]) -> Tuple[int, int]: Find the best day to buy and the best day to sell to maximize profit. Returns a tuple with the indices of the buy day and the sell day. If there is no profit to be made, returns (0, 0). if not prices: return (0, 0) min_price = float(\'inf\') max_profit = 0 buy_day = 0 sell_day = 0 for i, price in enumerate(prices): if price < min_price: min_price = price potential_buy_day = i profit = price - min_price if profit > max_profit: max_profit = profit buy_day = potential_buy_day sell_day = i if max_profit == 0: return (0, 0) return (buy_day, sell_day)"},{"question":"Write a function that takes a list of integers and an integer `k` as input, and returns whether there are two distinct numbers in the list that add up to `k`. Your solution should have a time complexity of O(n). Handle edge cases such as an empty list, a list with only one element, and scenarios where no two numbers add up to `k`.","solution":"def has_pair_with_sum(nums, k): Returns True if there are two distinct numbers in the list that add up to k, otherwise False. seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Given a list of `n` integers and an integer `k`, write a function that returns the maximum sum of any subarray of length `k`. A subarray is a contiguous segment of the original array. If the array length is less than `k`, the function should return 0. You can assume the list contains at least one element, and `k` is a positive integer. # Function Signature ```python def max_subarray_sum(nums: List[int], k: int) -> int: ``` # Input - `nums` (List[int]): A list of integers where 1 <= len(nums) <= 10^5. - `k` (int): A positive integer where 1 <= k <= len(nums). # Output - Return the maximum sum of any subarray of length `k`. - If the array length is less than `k`, return 0. # Examples ```python max_subarray_sum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) # returns 39 max_subarray_sum([2, 3], 3) # returns 0 max_subarray_sum([2, 1, 5, 1, 3, 2], 3) # returns 9 ``` # Notes - Use a sliding window approach to achieve the most efficient solution. - Emphasize the efficiency of your code, aiming for a solution that runs in O(n) time complexity.","solution":"from typing import List def max_subarray_sum(nums: List[int], k: int) -> int: if len(nums) < k: return 0 # Calculate the sum of the first window of `k` elements max_sum = current_sum = sum(nums[:k]) # Slide the window from the start to the end of the list for i in range(k, len(nums)): current_sum = current_sum - nums[i - k] + nums[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Develop a Python function that accepts a list of integers and returns a new list containing only the prime numbers from the original list. Ensure that the function is optimized for handling large lists efficiently.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the given list. return [num for num in numbers if is_prime(num)]"},{"question":"You are given an integer array representing the height of people in a queue. The queue is supposed to be ordered by non-decreasing heights, but it got shuffled. Your task is to sort the array using the selection sort algorithm without using any built-in sorting functions or libraries. Implement the selection sort algorithm to sort the array in-place and return the sorted array. For example: Given input array: [150, 160, 155, 145, 165] The output should be: [145, 150, 155, 160, 165]","solution":"def selection_sort_heights(heights): Sorts the given list of heights using the selection sort algorithm. Args: heights (list): A list of integers representing heights. Returns: list: The sorted list of heights. n = len(heights) for i in range(n): min_idx = i for j in range(i + 1, n): if heights[j] < heights[min_idx]: min_idx = j heights[i], heights[min_idx] = heights[min_idx], heights[i] return heights"},{"question":"Write a function that takes a list of integers and a target integer value as inputs, and determines whether any two distinct numbers in the list add up to the target value. Your solution should avoid using nested loops to ensure optimal performance. For example, given the list `[10, 15, 3, 7]` and the target value `17`, the function should return `True` since `10 + 7` equals the target value. You will be provided an initial piece of code containing an error related to index manipulation, causing an index out of range error. The candidate is expected to correct the code and implement the described functionality effectively. Here\'s an erroneous code snippet as a reference: ```python def find_pair(nums, target): nums_sorted = sorted(nums) i, j = 0, len(nums) while i < j: current_sum = nums_sorted[i] + nums_sorted[j] if current_sum == target: return True elif current_sum < target: i += 1 else: j -= 1 return False print(find_pair([10, 15, 3, 7], 17)) ``` This code snippet has an error as it doesn\'t handle the index ranges correctly, which can lead to an index out of range error. Fix this code and implement the solution according to the problem specifications.","solution":"def find_pair(nums, target): Determines if any two distinct numbers in the list add up to the target value. Parameters: nums (list): List of integers. target (int): Target integer value. Returns: bool: True if any two distinct numbers add up to the target, False otherwise. nums_seen = set() for num in nums: complement = target - num if complement in nums_seen: return True nums_seen.add(num) return False"},{"question":"Develop a console-based Library Management System that allows users to issue and return books. The system should support the following operations: 1. Add a new book to the library. Each book should have a unique ISBN, title, author, and publication year. 2. Register a new user. Each user should have a unique user ID, name, and email address. 3. Issue a book to a user. A user can only issue one book at a time, and the book should be marked as issued in the system. 4. Return a book. The book should be marked as available, and it should be possible for another user to issue it. 5. Display the list of all available books. 6. Display the list of all users. The system should include validations to ensure: - ISBN and user ID are unique. - Email is in the correct format. - A book cannot be issued if it is already issued. - Ensure proper user information and book information are present before performing issue and return operations. Implement error handling for cases such as attempting to issue a non-existent book, returning a book that was not issued, or trying to register a user with an already existing email or user ID. Ensure these operations can be performed through a simple text-based menu within the console application.","solution":"import re class Book: def __init__(self, isbn, title, author, publication_year): self.isbn = isbn self.title = title self.author = author self.publication_year = publication_year self.issued_to = None class User: def __init__(self, user_id, name, email): self.user_id = user_id self.name = name self.email = email self.issued_book = None class Library: def __init__(self): self.books = {} self.users = {} def add_book(self, book): if book.isbn in self.books: return \\"Book with this ISBN already exists.\\" self.books[book.isbn] = book return \\"Book added successfully.\\" def register_user(self, user): if user.user_id in self.users or any(u.email == user.email for u in self.users.values()): return \\"User with this ID or email already exists.\\" self.users[user.user_id] = user return \\"User registered successfully.\\" def issue_book(self, user_id, isbn): if isbn not in self.books: return \\"Book not found.\\" if user_id not in self.users: return \\"User not found.\\" if self.books[isbn].issued_to is not None: return \\"Book already issued.\\" if self.users[user_id].issued_book is not None: return \\"User has already issued a book.\\" self.books[isbn].issued_to = user_id self.users[user_id].issued_book = isbn return \\"Book issued successfully.\\" def return_book(self, user_id, isbn): if isbn not in self.books: return \\"Book not found.\\" if user_id not in self.users: return \\"User not found.\\" if self.books[isbn].issued_to != user_id: return \\"This book was not issued to this user.\\" self.books[isbn].issued_to = None self.users[user_id].issued_book = None return \\"Book returned successfully.\\" def list_available_books(self): return [book for book in self.books.values() if book.issued_to is None] def list_users(self): return list(self.users.values()) @staticmethod def is_valid_email(email): return re.match(r\\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\", email) is not None"},{"question":"Write a python program that finds the second largest number in a given list. Consider edge cases where the list might have duplicate largest numbers or less than two distinct values. sample_list = [11, 27, 43, 27, 36, 50, 36, 50]","solution":"def second_largest(numbers): Returns the second largest number in the list. If there are fewer than two distinct numbers, it returns None. if len(numbers) < 2: return None first = second = float(\'-inf\') for num in numbers: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float(\'-inf\') else None"},{"question":"Write a Python function that checks whether a given positive integer is a prime number. If the number is prime, the function should return `True`; otherwise, it should return `False`.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if (n % i == 0) or (n % (i + 2) == 0): return False i += 6 return True"},{"question":"Develop a Python program that simulates a basic banking system. Your application should handle multiple customers accessing their accounts concurrently. Implement this using both threading and multiprocessing techniques. The system should support the following operations: 1. View balance 2. Deposit funds 3. Withdraw funds Implement necessary safeguards to ensure data consistency and to prevent race conditions or deadlocks. Your program should clearly demonstrate the differences in performance and potential issues when using threading versus multiprocessing for this simulation. Provide an explanation for scenarios where threading might be more advantageous than multiprocessing and vice versa.","solution":"import threading import multiprocessing from multiprocessing import Value, Lock import time class BankAccount: def __init__(self): self.balance = 0 self.lock = threading.Lock() def deposit(self, amount): with self.lock: self.balance += amount return self.balance def withdraw(self, amount): with self.lock: if self.balance >= amount: self.balance -= amount return self.balance else: raise ValueError(\\"Insufficient funds\\") def view_balance(self): with self.lock: return self.balance class BankAccountMP: def __init__(self): self.balance = Value(\'i\', 0) self.lock = Lock() def deposit(self, amount): with self.lock: self.balance.value += amount return self.balance.value def withdraw(self, amount): with self.lock: if self.balance.value >= amount: self.balance.value -= amount return self.balance.value else: raise ValueError(\\"Insufficient funds\\") def view_balance(self): with self.lock: return self.balance.value"},{"question":"Given the following Python function, modify it so that the code correctly calculates the factorial of a non-negative integer `n` using iteration. Ensure the function returns an appropriate result for an input of `0`. ```python def factorial(n): # To Do: Implement the iterative approach here pass ```","solution":"def factorial(n): Returns the factorial of a non-negative integer n using an iterative approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function `rotate_string(s, n)` that takes a string `s` and a non-negative integer `n`, and returns a new string with the characters rotated to the right by `n` positions. For example, given the string `\\"hello\\"` and `n = 2`, the function should return `\\"lohel\\"`. Additionally, provide a brief explanation of the algorithm used to perform the rotation. Use Python for your implementation.","solution":"def rotate_string(s, n): Rotates the characters of string s to the right by n positions. Parameters: s (str): The input string. n (int): A non-negative integer representing the number of positions to rotate. Returns: str: The rotated string. if not s or n < 1: return s n = n % len(s) # Handle the case where n is larger than the length of the string return s[-n:] + s[:-n]"},{"question":"Write a Python function that reads a JSON file containing a list of users and their respective tasks. Each user has a unique ID and an associated list of tasks with attributes like task ID, description, and status (completed or pending). The function should generate a summary report detailing the total number of tasks and the number of completed tasks for each user. Output the summary report as a dictionary where each key is the user ID and the value is another dictionary with \'total_tasks\' and \'completed_tasks\' as keys. Example JSON input: ```json [ { \\"user_id\\": 1, \\"tasks\\": [ {\\"task_id\\": 101, \\"description\\": \\"Task 1\\", \\"status\\": \\"completed\\"}, {\\"task_id\\": 102, \\"description\\": \\"Task 2\\", \\"status\\": \\"pending\\"} ] }, { \\"user_id\\": 2, \\"tasks\\": [ {\\"task_id\\": 201, \\"description\\": \\"Task 3\\", \\"status\\": \\"completed\\"}, {\\"task_id\\": 202, \\"description\\": \\"Task 4\\", \\"status\\": \\"completed\\"}, {\\"task_id\\": 203, \\"description\\": \\"Task 5\\", \\"status\\": \\"pending\\"} ] } ] ``` Expected output: ```python { 1: {\\"total_tasks\\": 2, \\"completed_tasks\\": 1}, 2: {\\"total_tasks\\": 3, \\"completed_tasks\\": 2} } ```","solution":"import json def generate_summary_report(json_file_path): Reads a JSON file and generates a summary report detailing the total number of tasks and the number of completed tasks for each user. Parameters: json_file_path (str): The path to the JSON file. Returns: dict: A dictionary where each key is the user ID and the value is another dictionary with \'total_tasks\' and \'completed_tasks\' as keys. with open(json_file_path, \'r\') as file: data = json.load(file) summary_report = {} for user in data: user_id = user[\'user_id\'] tasks = user[\'tasks\'] total_tasks = len(tasks) completed_tasks = sum(1 for task in tasks if task[\'status\'] == \'completed\') summary_report[user_id] = { \'total_tasks\': total_tasks, \'completed_tasks\': completed_tasks } return summary_report"},{"question":"Given a list of integers, your task is to group these integers based on their properties into one of three categories: \\"positive\\", \\"negative\\", or \\"even-and-divisible-by-three\\". The categorization should follow these rules: 1. Positive: The integer is greater than 0. 2. Negative: The integer is less than 0. 3. Even-and-divisible-by-three: The integer is even and divisible by 3. An integer can only belong to one category, and priorities are given in the above order. For instance, if an integer is positive and also even and divisible by three, it should go into the \\"positive\\" category. You need to write a Python function: def group_integers(lst): # your code here where, - lst: A list of integers (1 <= len(lst) <= 10^5) This function should return a dictionary with the keys as categories (\\"positive\\", \\"negative\\", \\"even-and-divisible-by-three\\") and values as lists of integers that fall into each category respectively. The integers in each list should maintain their original order as in the input list. Note: All integers are within the range [-10^6, 10^6]. The list may contain duplicate integers.","solution":"def group_integers(lst): Groups integers into categories: \\"positive\\", \\"negative\\", and \\"even-and-divisible-by-three\\". Parameters: lst (list of int): List of integers to be grouped. Returns: dict: Dictionary with keys as categories and values as lists of integers in those categories. result = {\\"positive\\": [], \\"negative\\": [], \\"even-and-divisible-by-three\\": []} for num in lst: if num > 0: result[\\"positive\\"].append(num) elif num < 0: result[\\"negative\\"].append(num) elif num % 2 == 0 and num % 3 == 0: result[\\"even-and-divisible-by-three\\"].append(num) return result"},{"question":"Write a function that accepts a string as input and returns a list of all the unique characters in the string. The list should be sorted in the order of their first occurrence in the string. For example, if the input string is \\"programming\\", the output should be [\'p\', \'r\', \'o\', \'g\', \'a\', \'m\', \'i\', \'n\'].","solution":"def unique_characters(s): Returns a list of unique characters in the string `s`, sorted in the order of their first occurrence. seen = set() unique_chars = [] for char in s: if char not in seen: unique_chars.append(char) seen.add(char) return unique_chars"},{"question":"Write a Python function `find_second_largest(arr)` that locates the second largest value in a list of integers. Ensure that the function gracefully handles edge cases, such as lists with fewer than two unique elements, by returning `None`. The function must adhere to the given specifications and examples: ```python def find_second_largest(arr): Returns the second largest value in the list or None if not applicable. >>> find_second_largest([3, 1, 4, 1, 5, 9, 2, 6]) 6 >>> find_second_largest([3, 3, 3]) None >>> find_second_largest([10]) None >>> find_second_largest([12, 35, 1, 10, 34, 1]) 34 >>> find_second_largest([]) None >>> find_second_largest([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) None ```","solution":"def find_second_largest(arr): Returns the second largest value in the list or None if not applicable. if len(arr) < 2: return None first, second = float(\'-inf\'), float(\'-inf\') for num in arr: if num > first: second = first first = num elif first > num > second: second = num return second if second != float(\'-inf\') else None"},{"question":"Given a list of integers, identify and return the contiguous subarray with the maximum sum. If multiple subarrays have the same maximum sum, return the subarray with the shortest length. Implement the incomplete function below: def max_sum_subarray(nums: list): Return the contiguous subarray with the maximum sum. If multiple subarrays have the same maximum sum, return the one with the shortest length. >>> max_sum_subarray([1, -3, 2, 1, -1]) [2, 1] >>> max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) [4, -1, -2, 1, 5] >>> max_sum_subarray([5, -1, 2, -1, 3]) [5, -1, 2, -1, 3] >>> max_sum_subarray([1, 2, 3, -1, 2, -1, 2, -1, 7]) [1, 2, 3, -1, 2, -1, 2, -1, 7]","solution":"def max_sum_subarray(nums: list): Return the contiguous subarray with the maximum sum. If multiple subarrays have the same maximum sum, return the one with the shortest length. if not nums: return [] max_sum = curr_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if curr_sum < 0: curr_sum = nums[i] temp_start = i else: curr_sum += nums[i] if (curr_sum > max_sum) or (curr_sum == max_sum and i - temp_start < end - start): max_sum = curr_sum start = temp_start end = i return nums[start:end + 1]"},{"question":"You are given a binary tree and a target sum. Your task is to determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given target sum. Note: A leaf is a node with no children. Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 Output: true Explanation: The path is 5 -> 4 -> 11 -> 2. Example 2: Input: root = [1,2,3], targetSum = 5 Output: false Explanation: There is no valid path. Example 3: Input: root = [1,2], targetSum = 0 Output: false Explanation: There is no valid path. Constraints: - The number of nodes in the tree is in the range `[0, 5000]`. - `-1000 <= Node.val <= 1000` - `-1000 <= targetSum <= 1000`","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def hasPathSum(root, targetSum): if not root: return False if not root.left and not root.right: return root.val == targetSum targetSum -= root.val return hasPathSum(root.left, targetSum) or hasPathSum(root.right, targetSum)"},{"question":"Write a function that takes a list of integers and returns the product of all the even numbers in the list. If there are no even numbers, the function should return 0. The function should ignore negative numbers and only consider positive integers. **Example:** ``` Input: [1, 2, 3, 4, 5] Output: 8 Input: [7, 35, -2, 0, 9] Output: 0 Input: [12, 15, 22, 33, 42] Output: 11088 ``` **Constraints:** - The input list will contain at least one integer and will have a maximum length of 100. - The integers in the list can be in the range of -1000 to 1000.","solution":"def product_of_even_numbers(lst): Returns the product of all positive even numbers in the list. Returns 0 if there are no positive even numbers. product = 1 has_even = False for num in lst: if num > 0 and num % 2 == 0: product *= num has_even = True return product if has_even else 0"},{"question":"Write a function in Python that takes a string and an integer k, and returns a new string with characters rotated to the right by k positions. The rotation should be circular, meaning that characters shifted off the end of the string should wrap around to the beginning. The function should handle cases where the string is empty, k is zero, or k is larger than the length of the string. Your implementation should accommodate both positive and negative values for k, where negative values indicate a left rotation. As an extension of the problem, provide a demonstration of unit testing for the function. Here is a function signature to get you started: ```python def rotateString(s, k): # Write your code here pass # Example usage: # Input : s = \\"abcdef\\", k = 2 # Output: \\"efabcd\\" (Rotating \\"abcdef\\" 2 positions to the right results in \\"efabcd\\") print(rotateString(\\"abcdef\\", 2)) # Expected output: \\"efabcd\\" ``` In addition, identify and address any edge cases.","solution":"def rotateString(s, k): Rotates a string s by k positions to the right, with circular rotation. If k is negative, rotates to the left by abs(k) positions. :param s: str - The string to rotate :param k: int - Number of positions to rotate :return: str - The rotated string if not s: return s n = len(s) k = k % n # Handle cases where k > len(s) and circular rotation return s[-k:] + s[:-k] # Example usage: # Input : s = \\"abcdef\\", k = 2 # Output: \\"efabcd\\" (Rotating \\"abcdef\\" 2 positions to the right results in \\"efabcd\\")"},{"question":"Develop a function that accepts a dictionary where keys are strings and values are lists of integers. The function should return a new dictionary where each key is mapped to the sum of its corresponding list of integers. For example: Input: ``` {\'a\': [1, 2, 3], \'b\': [4, 5], \'c\': [6]} ``` Output: ``` {\'a\': 6, \'b\': 9, \'c\': 6} ```","solution":"def sum_dict_values(input_dict): Accepts a dictionary where keys are strings and values are lists of integers, and returns a new dictionary where each key is mapped to the sum of its corresponding list of integers. :param input_dict: Dictionary (str -> list of int) :return: Dictionary (str -> int) return {key: sum(value) for key, value in input_dict.items()}"},{"question":"Design a program that takes a list of integers as input and returns a list containing only the primes from the input list, in the order they were given. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. To determine whether a number is prime, optimize the function to run in O(√n) time complexity. # Input - A list of integers. # Output - A list of integers which are prime numbers. # Example Input: `[10, 15, 3, 7, 2, 20, 11]` Output: `[3, 7, 2, 11]` # Constraints - The list will contain up to 10^3 integers, and each integer will be between 1 and 10^6. # Solution Requirements - Your solution should include a function to check for prime numbers optimized for O(√n) complexity. - Demonstrate the program with a few test cases to ensure correctness.","solution":"import math def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(nums): Returns a list containing only the prime numbers from the input list. return [num for num in nums if is_prime(num)]"},{"question":"A transportation company needs to manage the fleet of its delivery trucks in order to optimize fuel use and delivery efficiency. Each truck has a specific fuel consumption rate (liters per mile) and carries a different amount of packages. The goal is to determine which truck to send on a particular route to minimize fuel usage while ensuring that all packages can be delivered. Given: - A list of tuples where each tuple represents a truck in the fleet, and each tuple contains two elements: the first element is the fuel consumption rate in liters per mile, and the second element is the number of packages it can carry. - The distance of the delivery route in miles. - The total number of packages that need to be delivered. Write a Python function that determines the truck which should be used to minimize fuel consumption for the given delivery route while ensuring that it can carry all the packages. If no single truck can carry all the packages, return the truck that can carry the most packages without exceeding the total required packages. Here is an example of how the function should behave with given inputs: ```python # Example inputs: # fuel_consumption_rates = [(0.5, 100), (0.7, 200), (0.4, 150)] # route_distance = 50 # total_packages = 120 # Function call: # min_fuel_truck(fuel_consumption_rates, route_distance, total_packages) # Expected output: # (0.4, 150) ``` Write the complete function in Python. ```python def min_fuel_truck(fuel_consumption_rates, route_distance, total_packages): best_truck = None min_fuel = float(\'inf\') for truck in fuel_consumption_rates: fuel_rate, capacity = truck if capacity >= total_packages and fuel_rate * route_distance < min_fuel: min_fuel = fuel_rate * route_distance best_truck = truck if capacity < total_packages and (best_truck is None or capacity > best_truck[1]): best_truck = truck return best_truck # Test case print(min_fuel_truck([(0.5, 100), (0.7, 200), (0.4, 150)], 50, 120)) # Output should be (0.4, 150) ```","solution":"def min_fuel_truck(fuel_consumption_rates, route_distance, total_packages): Determines the truck which should be used to minimize fuel consumption for the given delivery route while ensuring that it can carry all the packages. If no single truck can carry all the packages, return the truck that can carry the most packages without exceeding the total required packages. Parameters: - fuel_consumption_rates: List[Tuple[float, int]], list of tuples where each tuple represents a truck, with fuel consumption rate (liters per mile) and number of packages it can carry. - route_distance: float, the distance of the delivery route in miles. - total_packages: int, the total number of packages that need to be delivered. Returns: - Tuple[float, int], the truck (fuel consumption rate, package capacity) that should be used. best_truck = None min_fuel = float(\'inf\') for truck in fuel_consumption_rates: fuel_rate, capacity = truck # Check if the truck can carry all packages and uses the least fuel if capacity >= total_packages: fuel_used = fuel_rate * route_distance if fuel_used < min_fuel: min_fuel = fuel_used best_truck = truck # Check if no truck can carry all the packages, pick the one with highest capacity elif best_truck is None or capacity > best_truck[1]: best_truck = truck return best_truck"},{"question":"Create a function in Python that takes a list of integers as input and returns the list with all duplicate numbers removed. The function should maintain the order of the first occurrence of each number and should not use any additional data structures such as sets or dictionaries. Implement the function and include a brief description explaining how it works. Here is an example input and output: - Input: [4, 5, 4, 6, 7, 6, 8] - Output: [4, 5, 6, 7, 8]","solution":"def remove_duplicates(lst): Takes a list of integers and returns a list with all duplicate numbers removed. Maintains the order of the first occurrence of each number. Args: lst (list): List of integers Returns: list: List of integers with duplicates removed result = [] for number in lst: if number not in result: result.append(number) return result"},{"question":"Implement a function that takes a string as input and returns a new string with all the vowels removed. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. The function should maintain the original capitalization of the consonants and non-alphabetic characters. Additionally, the function should handle edge cases such as: - Empty strings (should return an empty string) - Strings with no vowels (should return the original string) - Strings that are extremely long (test for performance) Example Input and Output: Input: \\"Hello, World!\\" Output: \\"Hll, Wrld!\\" Input: \\"Programming is fun!\\" Output: \\"Prgrmmng s fn!\\" Test the function with various input scenarios to ensure it\'s working correctly, covering different types of characters and cases.","solution":"def remove_vowels(input_string): Returns a new string with all vowels removed from the input string. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in input_string if char not in vowels)"},{"question":"Develop a function that receives a list of integers and returns the list with all duplicate numbers removed while maintaining the original order of first occurrences. inputList = [4, 5, 6, 4, 7, 6, 8]","solution":"def remove_duplicates(input_list): Returns a list with all duplicate numbers removed while maintaining the original order of first occurrences. seen = set() result = [] for num in input_list: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a `Python` function that takes as input a string containing an arithmetic expression with addition and subtraction only. The function should return the evaluated result of the expression without using the `eval()` function. The provided string will be a valid arithmetic expression with integer operands and may contain spaces. ```python def evaluate_expression(expression: str) -> int: # Your code here pass # Example usage: # Input: \\"3 + 5 - 2\\" # Output: 6 # Input: \\"10 - 3 + 8\\" # Output: 15 # Input: \\"7 + 8 - 4 + 2 - 5\\" # Output: 8 ``` In the function, the input string should be parsed to handle the whitespace and properly evaluate the arithmetic operations in left-to-right order. The expression will always be valid and contain only integers and the \'+\' and \'-\' operators.","solution":"def evaluate_expression(expression: str) -> int: Evaluate the arithmetic expression consisting of addition and subtraction without using the eval() function. tokens = expression.split() total = 0 current_sign = 1 # 1 for positive, -1 for negative for token in tokens: if token == \'+\': current_sign = 1 elif token == \'-\': current_sign = -1 else: # token is a number total += current_sign * int(token) return total"},{"question":"Develop a Python application that uses the `requests` library to fetch real-time weather data from a public API. Your application should retrieve the current temperature, humidity, and weather condition of a given city. Ensure your code handles potential HTTP and connection errors gracefully, including cases of invalid city names. Additionally, format and display the fetched data in a user-friendly manner.","solution":"import requests def fetch_weather(city_name): Fetches the current weather data for a given city and returns a formatted string with the temperature, humidity, and weather condition. api_key = \'your_api_key_here\' # replace with your actual API key base_url = f\\"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={api_key}&units=metric\\" try: response = requests.get(base_url) response.raise_for_status() except requests.exceptions.RequestException as e: return f\\"Error: Unable to fetch weather data. {e}\\" data = response.json() if data.get(\\"cod\\") != 200: return f\\"Error: {data.get(\'message\', \'Invalid city name\')}\\" weather_desc = data[\\"weather\\"][0][\\"description\\"] temperature = data[\\"main\\"][\\"temp\\"] humidity = data[\\"main\\"][\\"humidity\\"] formatted_data = (f\\"Weather in {city_name.capitalize()}:n\\" f\\"Temperature: {temperature}°Cn\\" f\\"Humidity: {humidity}%n\\" f\\"Condition: {weather_desc.capitalize()}\\") return formatted_data"},{"question":"Write a function that calculates the longest increasing subsequence (LIS) of an array of integers. An increasing subsequence is defined as a sequence of numbers such that each number is larger than the previous one. The function should return the length of the longest increasing subsequence. For example: >>> length_of_LIS([10, 9, 2, 5, 3, 7, 101, 18]) 4 // The LIS is [2, 3, 7, 101] >>> length_of_LIS([0, 1, 0, 3, 2, 3]) 4 // The LIS is [0, 1, 2, 3] >>> length_of_LIS([7, 7, 7, 7, 7]) 1 // The LIS is [7] The code starts as follows: from typing import List def length_of_LIS(nums: List[int]) -> int:","solution":"from typing import List def length_of_LIS(nums: List[int]) -> int: Returns the length of the longest increasing subsequence (LIS) in the given list of integers. if not nums: return 0 # Initialize the dp array, where dp[i] will be the length of the LIS ending at index i dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence will be the maximum value in dp return max(dp)"},{"question":"Create a Python script that processes a large dataset to extract meaningful insights by employing complex data analysis techniques. The script should be capable of reading raw data from a CSV file, cleaning and transforming the data (handling missing values, normalizing fields), and performing advanced analytics, such as calculating correlations, detecting outliers, and visualizing data trends using libraries like pandas, NumPy, and matplotlib. The objective is to design an efficient and robust data pipeline that can handle large volumes of data while providing accurate and insightful analysis, ensuring the script addresses potential issues such as memory management and performance optimization.","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from scipy.stats import zscore def read_data(filepath): Reads data from a CSV file. Parameters: filepath (str): Path to the CSV file. Returns: pd.DataFrame: DataFrame containing the data. return pd.read_csv(filepath) def clean_data(df): Cleans the data by handling missing values and normalizing fields. Parameters: df (pd.DataFrame): Raw data DataFrame. Returns: pd.DataFrame: Cleaned data DataFrame. # Handle missing values: drop rows with any missing value df_cleaned = df.dropna() # Normalize data: assuming all columns are numeric df_normalized = df_cleaned.apply(zscore) return df_normalized def analyze_data(df): Performs advanced analytics on the data. Parameters: df (pd.DataFrame): Cleaned and normalized data DataFrame. Returns: dict: A dictionary with correlation matrix and outliers indices. analysis_results = {} # Calculate correlation matrix correlation_matrix = df.corr() analysis_results[\'correlation_matrix\'] = correlation_matrix # Detect outliers using Z-score z_scores = np.abs(df.apply(zscore)) outliers = (z_scores > 3) # Z-score threshold for outlier detection analysis_results[\'outliers\'] = np.where(outliers) return analysis_results def visualize_data(df, analysis_results): Visualizes data trends using plots. Parameters: df (pd.DataFrame): Cleaned and normalized data DataFrame. analysis_results (dict): Analysis results containing correlation matrix and outliers. Returns: None # Plot correlation matrix as heatmap plt.figure(figsize=(10, 8)) plt.imshow(analysis_results[\'correlation_matrix\'], cmap=\'hot\', interpolation=\'nearest\') plt.colorbar() plt.title(\\"Correlation Matrix Heatmap\\") plt.show() # Visualize outliers for outlier in zip(*analysis_results[\'outliers\']): plt.figure() plt.plot(df.iloc[outlier[0]]) plt.title(f\\"Outlier at index {outlier[0]}, Column {df.columns[outlier[1]]}\\") plt.show() def main(filepath): The main function to run the data processing pipeline. Parameters: filepath (str): Path to the CSV file. Returns: None df = read_data(filepath) df_cleaned = clean_data(df) analysis_results = analyze_data(df_cleaned) visualize_data(df_cleaned, analysis_results) # Example usage # main(\'path/to/large_dataset.csv\')"},{"question":"Write a function that takes a non-negative integer n and returns a list of integers representing the first n terms of the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent term is the sum of the previous two terms. Implement your solution iteratively and ensure your function handles edge cases such as n = 0 appropriately. Also, include a method to retrieve the nth Fibonacci number directly without computing the entire sequence up to n.","solution":"def fibonacci_sequence(n): Returns the first n terms of the Fibonacci sequence. if n == 0: return [] if n == 1: return [0] sequence = [0, 1] for _ in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence def fibonacci_nth(n): Returns the nth term of the Fibonacci sequence directly. if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Implement a function in Python that takes a list of integers and returns a list of tuples. Each tuple should contain an integer from the input list and its corresponding factorial. The function should utilize a helper function to calculate the factorial of a given number. Provide type hints for the functions.","solution":"from typing import List, Tuple def factorial(n: int) -> int: Returns the factorial of the given integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def list_factorials(numbers: List[int]) -> List[Tuple[int, int]]: Takes a list of integers and returns a list of tuples. Each tuple contains an integer from the input list and its factorial. return [(number, factorial(number)) for number in numbers]"},{"question":"Write a Python function that accepts a list of student records, where each record is a dictionary containing the student’s name, subjects, and marks scored in each subject. The function should calculate the average marks for each student and return a list of dictionaries containing each student’s name and their calculated average marks. Ensure the function handles cases where a student may have varying numbers of subjects, and include appropriate error handling for missing or invalid data types in the input.","solution":"def calculate_average_marks(student_records): This function accepts a list of student records and calculates the average marks for each student. Parameters: student_records (list): A list of dictionaries, where each dictionary contains a student\'s name, subjects, and marks scored in each subject. Returns: list: A list of dictionaries containing each student\'s name and their calculated average marks. result = [] for record in student_records: try: name = record.get(\'name\') subjects = record.get(\'subjects\') if not name or not isinstance(name, str): raise ValueError(\\"Invalid name in record\\") if not subjects or not isinstance(subjects, dict): raise ValueError(\\"Invalid subjects in record\\") total_marks = sum(subjects.values()) average_marks = total_marks / len(subjects) result.append({\'name\': name, \'average_marks\': average_marks}) except (ValueError, TypeError): continue return result"},{"question":"Design a Python program to manage an inventory system for an electronic shop. The system should support adding new items, removing items, updating item quantities, and retrieving item details. Each item in the inventory should have attributes such as item name, category (e.g., phone, laptop, accessory), quantity, and price. Make sure your system can handle different categories efficiently and provide a method to generate insightful reports, such as lists of items that are low in stock, items sorted by price, or items grouped by category.","solution":"class InventoryItem: def __init__(self, name, category, quantity, price): self.name = name self.category = category self.quantity = quantity self.price = price class Inventory: def __init__(self): self.items = [] def add_item(self, name, category, quantity, price): self.items.append(InventoryItem(name, category, quantity, price)) def remove_item(self, name): self.items = [item for item in self.items if item.name != name] def update_quantity(self, name, quantity): for item in self.items: if item.name == name: item.quantity = quantity break def get_item_details(self, name): for item in self.items: if item.name == name: return vars(item) return None def get_low_stock_items(self, threshold): return [vars(item) for item in self.items if item.quantity < threshold] def get_items_sorted_by_price(self): return [vars(item) for item in sorted(self.items, key=lambda x: x.price)] def get_items_grouped_by_category(self): grouped_items = {} for item in self.items: if item.category not in grouped_items: grouped_items[item.category] = [] grouped_items[item.category].append(vars(item)) return grouped_items"},{"question":"What will the output of the following Python code be? def compute_result(numbers): result = 1 for num in numbers: if num > 5: result *= num return result numbers_list = [2, 4, 6, 8, 10] print(compute_result(numbers_list))","solution":"def compute_result(numbers): result = 1 for num in numbers: if num > 5: result *= num return result"},{"question":"Consider a list of integers that represents a series of daily rainfall figures in millimeters. Write a function to find the average rainfall, ignoring any days with no rainfall (represented by a value of 0). [23, 0, 12, 0, 8, 15, 27, 0, 7, 0] Your function should output the average daily rainfall as a floating-point number rounded to two decimal places.","solution":"def average_rainfall(rainfall): Returns the average rainfall, ignoring any days with no rainfall (represented by a value of 0). The result is rounded to two decimal places. # Filter out the days with no rainfall rainfall = [r for r in rainfall if r != 0] if not rainfall: return 0.0 # Calculate the average avg_rainfall = sum(rainfall) / len(rainfall) # Return the average rounded to two decimal places return round(avg_rainfall, 2)"},{"question":"Design a function that takes a string of lowercase alphabet characters and groups all anagrams together. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". The function should return a list of lists, where each inner list contains strings that are anagrams of each other. Do not make use of any external libraries for sorting or group-by operations. words = [\\"bat\\", \\"tab\\", \\"cat\\", \\"act\\", \\"rat\\", \\"tar\\", \\"car\\"]","solution":"def group_anagrams(words): Groups all anagrams together from the given list of words. Args: words (list): List of lowercase alphabet words. Returns: List[List[str]]: List of lists where each inner list contains anagrams. anagrams = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagrams: anagrams[sorted_word].append(word) else: anagrams[sorted_word] = [word] return list(anagrams.values())"},{"question":"Design a Python function called `string_frequency()` that takes a string and returns the frequency of each character in the string. The function should ignore non-alphabetic characters and be case-insensitive. Ensure that the output is displayed in alphabetical order of characters. For example, given the input \\"Hello, World!\\", the function should return: `{\'d\': 1, \'e\': 1, \'h\': 1, \'l\': 3, \'o\': 2, \'r\': 1, \'w\': 1}`.","solution":"def string_frequency(s): Returns a dictionary with the frequency of each alphabetic character in the string. The function ignores non-alphabetic characters and is case-insensitive. The output is sorted in alphabetical order of characters. from collections import Counter # Convert to lower case and filter alphabetic characters cleaned_string = \'\'.join(filter(str.isalpha, s.lower())) # Count frequencies of characters frequency = Counter(cleaned_string) # Return the dictionary sorted by keys (characters) return dict(sorted(frequency.items()))"},{"question":"Write a function that takes a list of integers and returns a new list containing only the integers that are perfect squares. Additionally, the function should only include perfect squares from the input list that are greater than a given threshold value. The threshold value should be an input parameter to the function. Example: ```python def filter_squares(int_list, threshold): pass # Input int_list = [1, 4, 9, 14, 16, 20, 25, 30] threshold = 10 # Output [16, 25] ```","solution":"import math def filter_squares(int_list, threshold): Returns a list containing only the integers that are perfect squares and greater than the given threshold. :param int_list: List of integers to filter. :param threshold: Integer threshold value that the perfect squares must be greater than. :return: List of integers that are perfect squares greater than the threshold. result = [] for number in int_list: if number > threshold and math.isqrt(number) ** 2 == number: result.append(number) return result"},{"question":"Design and implement a sorting algorithm using any programming language of your choice that can sort a list of integers in ascending order. Then, optimize your algorithm to handle very large lists efficiently. Discuss the time complexity of your algorithm and explain any optimizations you made to improve its performance.","solution":"def merge_sort(arr): Sorts a list of integers in ascending order using the Merge Sort algorithm. Args: arr (list): The list of integers to sort. Returns: list: The sorted list. if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 return arr"},{"question":"Write a Python script that reads a given CSV file containing sales data and calculates the total sales for each product. The CSV file has the following columns: ProductID, ProductName, QuantitySold, UnitPrice. Ensure the script handles potential errors such as missing values or incorrect data types gracefully. Output the results in a new CSV file with columns: ProductID, ProductName, TotalSales.","solution":"import csv def calculate_total_sales(input_file, output_file): Reads a CSV file containing sales data and calculates the total sales for each product. The results are output to a new CSV file with columns: ProductID, ProductName, TotalSales. :param input_file: Path to the input CSV file. :param output_file: Path to the output CSV file. sales_data = {} try: with open(input_file, mode=\'r\') as infile: reader = csv.DictReader(infile) for row in reader: try: product_id = row[\'ProductID\'] product_name = row[\'ProductName\'] quantity_sold = int(row[\'QuantitySold\']) unit_price = float(row[\'UnitPrice\']) if product_id in sales_data: sales_data[product_id][\'TotalSales\'] += quantity_sold * unit_price else: sales_data[product_id] = { \'ProductName\': product_name, \'TotalSales\': quantity_sold * unit_price } except (ValueError, KeyError) as e: print(f\\"Error processing row {row}: {e} - Skipping this row.\\") with open(output_file, mode=\'w\', newline=\'\') as outfile: fieldnames = [\'ProductID\', \'ProductName\', \'TotalSales\'] writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() for product_id, data in sales_data.items(): writer.writerow({ \'ProductID\': product_id, \'ProductName\': data[\'ProductName\'], \'TotalSales\': round(data[\'TotalSales\'], 2) }) except FileNotFoundError as e: print(f\\"Unable to open file: {e}\\")"},{"question":"Write a function in Python that takes a list of integers `nums` and an integer `target`, and returns a list of the three integers in `nums` that add up closest to `target`. If there are multiple combinations that match this criterion, return any one of them. Your function should handle cases where `nums` contains fewer than three integers by returning an empty list. Ensure your solution is efficient with a time complexity close to `O(n^2)`, and handle potential edge cases such as negative numbers and duplicate elements. Provide a brief explanation of your approach. Example: ```python nums = [-1, 2, 1, -4] target = 1 ``` should return ```python [-1, 2, 1] ``` because the sum is `2`, which is the closest to the target `1`. Function signature: ```python def three_sum_closest(nums: List[int], target: int) -> List[int]: # Your code here ```","solution":"from typing import List def three_sum_closest(nums: List[int], target: int) -> List[int]: Returns a list of three integers in nums that sum up closest to the target. If nums contains fewer than three integers, return an empty list. if len(nums) < 3: return [] nums.sort() closest_sum = float(\'inf\') closest_triplet = [] for i in range(len(nums) - 2): left = i + 1 right = len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum closest_triplet = [nums[i], nums[left], nums[right]] if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return closest_triplet return closest_triplet"},{"question":"Write a function that takes a string as input, reverses the words (not the characters) and returns the new string. For example, given the string \\"Hello there how are you\\", the function should return \\"you are how there Hello\\". Ensure that your function handles multiple spaces between words correctly.","solution":"def reverse_words(input_string): Reverses the words in the given string and returns the new string. Handles multiple spaces between words. # Split the input string into words based on spaces words = input_string.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a single space between them return \' \'.join(reversed_words)"},{"question":"Implement a function that performs a word frequency analysis on a list of sentences and returns the n most common words in descending order of frequency. Include a helper function to clean the words by removing punctuation and converting them to lower case. ```python def top_n_words(sentences: list, n: int): Return the n most common words in the list of sentences. >>> top_n_words([\\"Hello world!\\", \\"Hello, how are you, World?\\"], 2) [\'hello\', \'world\'] >>> top_n_words([\\"This is a test sentence.\\", \\"This is another test.\\"], 1) [\'this\'] def clean_word(word: str): # Helper function to clean a word by removing punctuation and converting to lower case. word_counts = {} for sentence in sentences: words = sentence.split() # Process each word using clean_word and update word_counts # Sort the words by frequency and return the top n words print(top_n_words([\\"Hello world!\\", \\"Hello, how are you, World?\\"], 2)) # [\'hello\', \'world\'] print(top_n_words([\\"This is a test sentence.\\", \\"This is another test.\\"], 1)) # [\'this\'] ```","solution":"import re from collections import Counter def top_n_words(sentences: list, n: int): Return the n most common words in the list of sentences. def clean_word(word: str): Helper function to clean a word by removing punctuation and converting to lower case. return re.sub(r\'[^ws]\', \'\', word).lower() word_counts = Counter() for sentence in sentences: words = sentence.split() cleaned_words = [clean_word(word) for word in words] word_counts.update(cleaned_words) most_common_words = [word for word, _ in word_counts.most_common(n)] return most_common_words"},{"question":"Write a function that takes a list of integers and returns a list of tuples, where each tuple contains an integer from the input list and the sum of its distinct prime factors. For example, given the input list [12, 15, 18], the output should be [(12, 5), (15, 8), (18, 5)], because 12 = 2 * 2 * 3 has distinct prime factors {2, 3} whose sum is 5; 15 = 3 * 5 has distinct prime factors {3, 5} whose sum is 8; and 18 = 2 * 3 * 3 has distinct prime factors {2, 3} whose sum is 5. ```python def sum_of_prime_factors(numbers): # Your implementation here pass # Example usage: numbers = [12, 15, 18] print(sum_of_prime_factors(numbers)) # Should print: [(12, 5), (15, 8), (18, 5)] ```","solution":"def sum_of_prime_factors(numbers): def prime_factors(n): i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return factors result = [] for number in numbers: factors = prime_factors(number) factors_sum = sum(factors) result.append((number, factors_sum)) return result"},{"question":"Task Design a product requirements document for a social media platform similar to Twitter. Objective Analyze the provided requirements and create a detailed specification that aligns with the initial vision, focusing on essential functionalities while ensuring clarity and completeness. Guidelines # Context - Clearly define the aim and scope of the product, referring to potential use cases and users. - Articulate product goals and objectives concisely in bullet points or a list. - Provide detailed user stories to highlight primary interactions and needs. - Conduct a competitive analysis to position the product within the market. # Requirement Analysis - Identify and prioritize essential features and functionalities. - Ensure coverage of core aspects, such as user registration, tweet creation, feed display, etc. # UI Design Draft - Sketch out a basic layout for key pages such as the home feed, user profile, and tweet composer. - Highlight important UI components and elements. # Requirement Pool - Define a requirement pool with features categorized by priority (P0, P1, etc.). Output Create a detailed product requirements document covering the given structure and content. Task Example --- Context [Product Manager: Original Requirements The boss wants to design a social media platform similar to Twitter. Product Goals ```python [ \\"Create a user-friendly platform for sharing short messages and updates\\", \\"Facilitate real-time interaction and engagement through comments, retweets, and likes\\", \\"Provide users with the ability to customize their profile and follow others\\" ] ``` User Stories ```python [ \\"As a user, I want to create an account so that I can access the platform\\", \\"As a user, I want to post tweets so that I can share my thoughts\\", \\"As a user, I want to follow other users so that I can see their tweets\\", \\"As a user, I want to like, retweet, and comment on tweets so that I can engage with the community\\", \\"As a user, I want to customize my profile so that it reflects my personality\\" ] ``` Competitive Analysis ```python [ \\"Twitter: A leading microblogging platform known for real-time updates and hashtags\\", \\"Parler: Promotes free speech and focuses on user privacy\\", \\"Mastodon: Decentralized platform with a focus on user control and federated instances\\", \\"Gab: Focuses on free speech and less content moderation\\", \\"Reddit: Social platform that combines news aggregation with user interaction through comments and upvotes\\" ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title Reach and engagement of campaigns x-axis Low Reach --> High Reach y-axis Low Engagement --> High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved \\"Twitter\\": [0.9, 0.8] \\"Parler\\": [0.6, 0.5] \\"Mastodon\\": [0.5, 0.6] \\"Gab\\": [0.4, 0.4] \\"Reddit\\": [0.7, 0.7] \\"Our Target Product\\": [0.5, 0.6] ``` Requirement Analysis The product should be a web-based platform that allows users to share short messages (tweets), follow other users, and interact with tweets through likes, retweets, and comments. Additionally, users should be able to customize their profiles and view a personalized feed of tweets. Requirement Pool ```python [ (\\"User registration and login\\", \\"P0\\"), (\\"Compose and post tweets\\", \\"P0\\"), (\\"Follow/unfollow users\\", \\"P0\\"), (\\"Display user feed with tweets\\", \\"P0\\"), (\\"Like, retweet, and comment on tweets\\", \\"P1\\"), (\\"Profile customization\\", \\"P1\\") ] ``` UI Design Draft The website should have a simple and intuitive interface. The homepage should feature a navigation bar at the top with options for home, notifications, and profile. The main feed should display tweets from followed users in the center, with the tweet composer at the top. The sidebars should contain information about trending topics and suggested users to follow. The color scheme should be modern and engaging. Anything UNCLEAR There are no unclear points. --- ----- Role: You are an architect; the goal is to design a SOTA PEP8-compliant python system; make the best use of good open source tools Requirement: Fill in the following missing information based on the context, note that all sections are response with code form separately Max Output: 8192 chars or 2048 tokens. Try to use them up. Attention: Use \'\' to split sections, not \'#\', and \' <SECTION_NAME>\' SHOULD WRITE BEFORE the code and triple quote. Implementation approach: Provide as Plain text. Analyze the difficult points of the requirements, select the appropriate open-source framework. Python package name: Provide as Python str with python triple quoto, concise and clear, characters only use a combination of all lowercase and underscores File list: Provided as Python list[str], the list of ONLY REQUIRED files needed to write the program(LESS IS MORE!). Only need relative paths, comply with PEP8 standards. ALWAYS write a main.py or app.py here Data structures and interface definitions: Use mermaid classDiagram code syntax, including classes (INCLUDING __init__ method) and functions (with type annotations), CLEARLY MARK the RELATIONSHIPS between classes, and comply with PEP8 standards. The data structures SHOULD BE VERY DETAILED and the API should be comprehensive with a complete design. Program call flow: Use sequenceDiagram code syntax, COMPLETE and VERY DETAILED, using CLASSES AND API DEFINED ABOVE accurately, covering the CRUD AND INIT of each object, SYNTAX MUST BE CORRECT. Anything UNCLEAR: Provide as Plain text. Make clear here.","solution":"def create_product_document(): Returns a detailed product requirements document for a social media platform similar to Twitter. product_document = { \\"Context\\": { \\"Aim\\": \\"Design a user-friendly social media platform where users can share short messages and updates in real-time.\\", \\"Scope\\": \\"Focus on providing core functionalities like user registration, tweeting, following others, engaging with tweets, and profile customization.\\", \\"Product Goals\\": [ \\"Create a user-friendly platform for sharing short messages and updates\\", \\"Facilitate real-time interaction and engagement through comments, retweets, and likes\\", \\"Provide users with the ability to customize their profile and follow others\\" ], \\"User Stories\\": [ \\"As a user, I want to create an account so that I can access the platform\\", \\"As a user, I want to post tweets so that I can share my thoughts\\", \\"As a user, I want to follow other users so that I can see their tweets\\", \\"As a user, I want to like, retweet, and comment on tweets so that I can engage with the community\\", \\"As a user, I want to customize my profile so that it reflects my personality\\" ], \\"Competitive Analysis\\": [ \\"Twitter: A leading microblogging platform known for real-time updates and hashtags\\", \\"Parler: Promotes free speech and focuses on user privacy\\", \\"Mastodon: Decentralized platform with a focus on user control and federated instances\\", \\"Gab: Focuses on free speech and less content moderation\\", \\"Reddit: Social platform that combines news aggregation with user interaction through comments and upvotes\\", \\"Our Target Product: A balanced platform prioritizing user engagement and privacy.\\" ] }, \\"Requirement Analysis\\": { \\"Core Features\\": [ \\"User registration and login\\", \\"Compose and post tweets\\", \\"Follow/unfollow users\\", \\"Display user feed with tweets\\", \\"Like, retweet, and comment on tweets\\", \\"Profile customization\\" ] }, \\"Requirement Pool\\": [ (\\"User registration and login\\", \\"P0\\"), (\\"Compose and post tweets\\", \\"P0\\"), (\\"Follow/unfollow users\\", \\"P0\\"), (\\"Display user feed with tweets\\", \\"P0\\"), (\\"Like, retweet, and comment on tweets\\", \\"P1\\"), (\\"Profile customization\\", \\"P1\\") ], \\"UIDesignDraft\\": { \\"Home Feed\\": \\"A navigation bar at the top with options for home, notifications, and profile. The main feed displays tweets from followed users in the center, with the tweet composer at the top.\\", \\"User Profile\\": \\"Profile page with user information, tweet history, and profile customization options.\\", \\"Tweet Composer\\": \\"A simple interface for composing and posting tweets, accessible from both the home feed and profile page.\\" } } return product_document"},{"question":"Write a function to determine if a given string contains balanced parentheses. A string with balanced parentheses has every opening parenthesis \'(\' matched with a closing parenthesis \')\' in the correct order. # Input - A single input string consisting of characters \'a-z\', \'A-Z\', \'0-9\', \'(\', \')\', and other special characters. # Output - Return `True` if the string has balanced parentheses, otherwise, return `False`. # Example ```python assert is_balanced(\\"abc(def)ghi\\") == True assert is_balanced(\\"a(b)c)d(\\") == False assert is_balanced(\\"(a+b)*(c+d)\\") == True assert is_balanced(\\")(\\") == False ```","solution":"def is_balanced(s): Determines if the given string contains balanced parentheses. :param s: Input string :return: True if balanced, otherwise False stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack and stack[-1] == \'(\': stack.pop() else: return False return not stack"},{"question":"Develop a Python script that simulates a simple library management system with the following features: - Add new books to the library inventory. Each book should have a unique identifier, title, author, and publication year. - Delete a book from the library using its unique identifier. - Search for books by title, author, or publication year. - Display a list of all books currently available in the library inventory. - Update the details of a book using its unique identifier. Your solution should include: - A Book class to represent individual book objects. - A Library class to manage the collection of books, encapsulating the required methods to add, delete, search, display, and update books. - Sample interactions to demonstrate each of the features working correctly.","solution":"class Book: def __init__(self, book_id, title, author, publication_year): self.book_id = book_id self.title = title self.author = author self.publication_year = publication_year def __repr__(self): return f\\"Book({self.book_id}, \'{self.title}\', \'{self.author}\', {self.publication_year})\\" class Library: def __init__(self): self.books = {} def add_book(self, book): if book.book_id in self.books: return \\"Book ID already exists.\\" self.books[book.book_id] = book return \\"Book added successfully.\\" def delete_book(self, book_id): if book_id in self.books: del self.books[book_id] return \\"Book deleted successfully.\\" return \\"Book ID not found.\\" def search_books(self, **kwargs): results = [] for book in self.books.values(): match = True for key, value in kwargs.items(): if getattr(book, key) != value: match = False break if match: results.append(book) return results def display_books(self): return list(self.books.values()) def update_book(self, book_id, **kwargs): if book_id not in self.books: return \\"Book ID not found.\\" for key, value in kwargs.items(): if hasattr(self.books[book_id], key): setattr(self.books[book_id], key, value) return \\"Book updated successfully.\\""},{"question":"Find the mode(s) in the following list of integers: 15, 21, 15, 18, 21, 24, 21, 24, 18, 30.","solution":"from collections import Counter def find_modes(lst): Finds the mode(s) in a list of integers. if not lst: # Empty list edge case return [] counter = Counter(lst) max_frequency = max(counter.values()) modes = [key for key, value in counter.items() if value == max_frequency] return modes # Example usage for the provided list of integers example_list = [15, 21, 15, 18, 21, 24, 21, 24, 18, 30] modes_example = find_modes(example_list)"},{"question":"Write a function that simulates the working of an ATM machine. The function should accept a list of sequential operations and maintain the balance accordingly. The operations include \\"deposit\\", \\"withdraw\\", and \\"check_balance\\". Ensure to handle edge cases such as attempting to withdraw more than the available balance or invalid operation types. The function should return a list of results for each \\"check_balance\\" operation in the order they were received. # Example: ```python operations = [ {\\"operation\\": \\"deposit\\", \\"amount\\": 100}, {\\"operation\\": \\"withdraw\\", \\"amount\\": 50}, {\\"operation\\": \\"check_balance\\"}, {\\"operation\\": \\"deposit\\", \\"amount\\": 200}, {\\"operation\\": \\"withdraw\\", \\"amount\\": 400}, {\\"operation\\": \\"check_balance\\"} ] ``` # Expected Output: ```python [50, -1] ``` # Explanation: - After depositing 100, the balance is 100. - Withdrawing 50 leaves the balance at 50. - The first check_balance returns 50. - After depositing 200, the balance is 250. - Attempting to withdraw 400 exceeds the balance, so the withdrawal request fails (-1). - The second check_balance returns -1 due to the failed withdrawal attempt. Implement the function `atm_machine(operations: list) -> list` to achieve this.","solution":"def atm_machine(operations): Simulates an ATM machine. Parameters: operations (list): A list of dictionaries where each dictionary represents an operation. Each dictionary has the keys \\"operation\\" (str) and \\"amount\\" (int). Returns: list: A list of results corresponding to each \\"check_balance\\" operation. balance = 0 results = [] for operation in operations: op_type = operation.get(\\"operation\\") amount = operation.get(\\"amount\\", 0) if op_type == \\"deposit\\": balance += amount elif op_type == \\"withdraw\\": if amount > balance: balance = -1 else: balance -= amount elif op_type == \\"check_balance\\": results.append(balance) return results"},{"question":"You are assigned to solve a problem of finding the Smallest Subarray with Sum Greater Than or Equal to a Given Value. The task requires you to write a function that takes an array of integers and a target sum, `S`, and returns the length of the smallest contiguous subarray such that the sum of the subarray is greater than or equal to `S`. If no such subarray exists, return 0. For instance, consider the following scenarios: Scenario 1: Input: nums = [2, 3, 1, 2, 4, 3], S = 7 Output: 2 Justification: The smallest subarray with a sum greater than or equal to 7 is [4,3] which is of length 2. Scenario 2: Input: nums = [1, 4, 4], S = 4 Output: 1 Justification: The smallest subarray with a sum greater than or equal to 4 is [4] which is of length 1. Scenario 3: Input: nums = [1, 1, 1, 1, 1, 1, 1, 1], S = 11 Output: 0 Justification: There is no subarray with a sum greater than or equal to 11. Limitations: The length of the array `nums` will be in the range `[1, 10^5]`. Each element in the array `nums` is a non-negative integer and does not exceed `10^4`. `0 <= S <= 10^9`","solution":"def smallest_subarray_with_sum(nums, S): n = len(nums) start = 0 sum_so_far = 0 min_length = float(\'inf\') for end in range(n): sum_so_far += nums[end] while sum_so_far >= S: min_length = min(min_length, end - start + 1) sum_so_far -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Write a function that takes as input a list of strings and returns a list of all possible unique substrings that can be formed by any two (or more) consecutive strings in the list. The substrings should be ordered by their first occurrence and substrings that appear more than once should be included only once. Assume the list always contains at least two strings.","solution":"def unique_consecutive_substrings(strings): Returns all possible unique substrings formed by any two (or more) consecutive strings in the list. :param strings: List of strings :return: List of unique substrings substrings = set() result = [] for i in range(len(strings) - 1): for j in range(i + 1, len(strings)): substring = \'\'.join(strings[i:j + 1]) if substring not in substrings: substrings.add(substring) result.append(substring) return result"},{"question":"Implement a function in Python that processes a list of student dictionaries and calculates the average score for each course. Each dictionary in the list represents a student and has a key `courses` that maps to a dictionary of the courses each student is enrolled in and the scores they obtained. The function should return a dictionary where the keys are the course names and the values are the average scores. Note: If a student is not enrolled in a course, their absence should not affect the average score calculation for that course. Assume all scores are integers and there is always at least one student enrolled in a course. Here is a sample list of student dictionaries and a sample incorrect function to guide you: ``` students = [ {\'name\': \'Alice\', \'courses\': {\'math\': 90, \'science\': 80}}, {\'name\': \'Bob\', \'courses\': {\'math\': 70, \'art\': 85}}, {\'name\': \'Charlie\', \'courses\': {\'math\': 85, \'science\': 90, \'art\': 78}}, ] sample_func(list_of_students): total_scores = {} num_students = len(list_of_students) for student in list_of_students: for course, score in student[\'courses\'].items(): if course not in total_scores: total_scores[course] = score else: total_scores[course] += score return {course: total / num_students for course, total in total_scores.items()} ```","solution":"def calculate_average_scores(students): Calculate the average score for each course from a list of student dictionaries. Args: students (list): List of dictionaries where each dictionary represents a student and contains a \'courses\' key with a dictionary of course: score pairs. Returns: dict: A dictionary where the keys are course names and the values are the average scores. total_scores = {} count_scores = {} for student in students: for course, score in student[\'courses\'].items(): if course not in total_scores: total_scores[course] = 0 count_scores[course] = 0 total_scores[course] += score count_scores[course] += 1 return {course: total_scores[course] / count_scores[course] for course in total_scores}"},{"question":"編寫一個函數來計算給定字串中每個字符出現的頻率。忽略大小寫，並將結果以字典形式返回。例如，對於輸入 \'Hello World\'，應返回 {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}。","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. The function ignores the case of the characters. Parameters: s (str): The input string whose characters\' frequencies are to be calculated. Returns: dict: A dictionary where keys are characters and values are their frequencies. s = s.lower() frequency = {} for char in s: if char != \\" \\": # Ignore spaces if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function called `frequency_sort` that takes a string as input and returns a new string where the characters are sorted in decreasing order based on their frequency. In case of a tie, the characters should be sorted in ascending alphabetical order. # Function Signature ```python def frequency_sort(s: str) -> str: ``` # Input - `s` (string): A string containing lowercase alphabetical characters. # Output - `string`: A new string where the characters are sorted by frequency in descending order. Characters with the same frequency should be sorted in ascending alphabetical order. # Example ```python print(frequency_sort(\\"banana\\")) # Output: \\"aaannb\\" print(frequency_sort(\\"cccaaa\\")) # Output: \\"aaaccc\\" print(frequency_sort(\\"abcd\\")) # Output: \\"abcd\\" print(frequency_sort(\\"eeeeee\\")) # Output: \\"eeeeee\\" ``` # Constraints - The string `s` will contain only lowercase alphabets. - The length of string `s` will be at most 10^5. # Notes - Use a dictionary or collections.Counter to count the frequency of each character. - Sort the characters by their frequency in descending order, and by alphabetical order if frequencies tie. - The function should be efficient enough to handle the upper limit of input size.","solution":"from collections import Counter def frequency_sort(s: str) -> str: Function to sort characters of the string \'s\' by frequency in decreasing order. Characters with the same frequency are sorted in ascending alphabetical order. # Count the frequency of each character char_count = Counter(s) # Sort the characters first by frequency (descending) then by character (ascending) sorted_chars = sorted(char_count.items(), key=lambda x: (-x[1], x[0])) # Build the result string result = \'\'.join([char * count for char, count in sorted_chars]) return result"},{"question":"Implement a function that takes a list of integers as an input and returns a list of the squares of those integers but in sorted order. Do not use the built-in `sort()` method for this task. For example: 1. Input: `[4, -1, 2, 3]` Output: `[1, 4, 9, 16]` 2. Input: `[-6, -3, 0, 2, 5]` Output: `[0, 4, 9, 25, 36]` The function should handle both positive and negative integers and should ensure the output is a sorted list containing the squares of the input integers.","solution":"def sorted_squares(nums): Given a list of integers, return a list of the squares of those integers in sorted order. Args: - nums (list of int): List of integers to be squared. Returns: - list of int: Sorted list of squared integers. # Square each number in the list squared_nums = [num ** 2 for num in nums] # Implementing a simple insertion sort to sort the squared numbers for i in range(1, len(squared_nums)): key = squared_nums[i] j = i - 1 while j >= 0 and key < squared_nums[j]: squared_nums[j + 1] = squared_nums[j] j -= 1 squared_nums[j + 1] = key return squared_nums"},{"question":"Design an algorithm in Python to sort an array of integers such that all even numbers appear before all odd numbers, while maintaining the original relative order of both even and odd numbers. Provide the function signature as `def sort_even_before_odd(arr: List[int]) -> List[int]:`. Demonstrate the algorithm with the input `[3, 8, 5, 12, 9, 1]` and the expected output `[8, 12, 3, 5, 9, 1]`.","solution":"from typing import List def sort_even_before_odd(arr: List[int]) -> List[int]: Sort the array such that all the even numbers appear before all the odd numbers, while maintaining the original relative order of both even and odd numbers. even_part = [x for x in arr if x % 2 == 0] odd_part = [x for x in arr if x % 2 != 0] return even_part + odd_part # Example usage # sorted_array = sort_even_before_odd([3, 8, 5, 12, 9, 1]) # print(sorted_array) # Output: [8, 12, 3, 5, 9, 1]"},{"question":"Write a function called `flatten_dict` that takes a nested dictionary as input and returns a new dictionary with all the keys flattened into a single level by concatenating the keys at each level, separated by periods. If a value is a dictionary, concatenate the nested keys with the parent key followed by a period. Assume all dictionary keys are strings. Example: ```python def flatten_dict(d, parent_key=\'\', sep=\'.\'): flat_dict = {} for k, v in d.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): flat_dict.update(flatten_dict(v, new_key, sep=sep)) else: flat_dict[new_key] = v return flat_dict # Sample Input: nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } } } # Sample Output: flatten_dict(nested_dict) # {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3} ```","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flatten a nested dictionary. Parameters: d (dict): The dictionary to flatten. parent_key (str): The base key string (used in recursion). sep (str): The separator to use between concatenated keys. Returns: dict: A new flattened dictionary. flat_dict = {} for k, v in d.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): flat_dict.update(flatten_dict(v, new_key, sep=sep)) else: flat_dict[new_key] = v return flat_dict"},{"question":"Write a function that accepts an integer `n` and returns a list of all prime numbers less than or equal to `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Use the Sieve of Eratosthenes algorithm to efficiently find all prime numbers up to the given number `n`. Additionally, ensure your implementation handles edge cases such as when `n` is less than 2.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start * start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Write a function that takes a dictionary representing a inventory of fruits in a store, and another dictionary representing the amount of fruit sold, and return the updated inventory. inventory = { \'apples\': 50, \'bananas\': 30, \'oranges\': 20 } sold = { \'apples\': 20, \'bananas\': 5, \'oranges\': 10, \'grapes\': 15 } Your function should take into account fruits that were not originally in the inventory, and add them if they are in the \'sold\' dictionary. The updated inventory should not have negative values.","solution":"def update_inventory(inventory, sold): Updates the inventory based on the items sold. Parameters: inventory (dict): A dictionary containing the current inventory of fruits. sold (dict): A dictionary containing the amount of fruit sold. Returns: dict: The updated inventory of fruits. updated_inventory = inventory.copy() for fruit, amount_sold in sold.items(): # If the fruit is in inventory, subtract the sold amount, but ensure it doesn\'t go negative if fruit in updated_inventory: updated_inventory[fruit] = max(0, updated_inventory[fruit] - amount_sold) # If the fruit is not in inventory, add it with a negative value indicating the sold amount else: updated_inventory[fruit] = max(0, -amount_sold) return updated_inventory"},{"question":"Given an array of integers, implement a function that rearranges the elements in such a way that all negative numbers appear before the positive numbers. The relative order of the negative numbers and positive numbers should be maintained. Do not use extra space for another array and try to complete it in O(n) time complexity. Provide a brief explanation of your approach and its time complexity.","solution":"def rearrange_negatives_before_positives(arr): Rearranges elements in the array such that all negative numbers appear before the positive numbers. The relative order of negative numbers and positive numbers is maintained. This function does not use extra space and works in O(n) time complexity. :param arr: List of integers :return: The array rearranged with negatives before positives, in-place n = len(arr) j = 0 # This will indicate the position where the next negative number should go for i in range(n): if arr[i] < 0: arr.insert(j, arr.pop(i)) j += 1 return arr"},{"question":"The task is to implement a string segmentation algorithm. Given a string `s` and a dictionary of words `dict`, determine if `s` can be segmented into a space-separated sequence of one or more dictionary words. Implement the function `canSegment(s, dict)`. # Specifications: - `canSegment(s, dict)` should return `True` if `s` can be segmented, otherwise `False`. - The function should accept a string `s` and a set of strings `dict`. - `s` consists only of lowercase English letters. - The dictionary `dict` contains a list of non-empty words. # Example 1: Input: s = \\"leetcode\\" dict = {\\"leet\\", \\"code\\"} Output: True Explanation: The input string can be segmented as \\"leet code\\". # Example 2: Input: s = \\"applepenapple\\" dict = {\\"apple\\", \\"pen\\"} Output: True Explanation: The input string can be segmented as \\"apple pen apple\\". # Example 3: Input: s = \\"catsandog\\" dict = {\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"} Output: False Explanation: The input string cannot be segmented into the dictionary words. # Constraints: - `1 <= len(s) <= 300` - `1 <= len(dict) <= 1000` - `1 <= dict[i].length <= 20` # Follow-up: What if we want to return all possible segmentations of the string instead of just checking if it\'s possible? Design and implement an additional function `allSegmentations(s, dict)` that returns a list of strings, each representing a valid segmentation of `s`.","solution":"def canSegment(s, dict): Determines if the string s can be segmented into a space-separated sequence of one or more dictionary words. Args: s: str - The input string to segment. dict: set of str - A set containing all dictionary words. Returns: bool - True if the string can be segmented, otherwise False. n = len(s) dp = [False] * (n + 1) dp[0] = True # Base case: empty string is always segmentable for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in dict: dp[i] = True break return dp[-1]"},{"question":"Write a function to identify and return the most frequent word in a list of strings that is not a stop word. Stop words are common words like \\"and\\", \\"the\\", \\"in\\", etc., which do not carry significant meaning. If two words have the same frequency, return the word which appears first in the list. Assume all input words are in lowercase. ```python stop_words = [\\"and\\", \\"the\\", \\"in\\", \\"on\\", \\"at\\", \\"is\\", \\"it\\", \\"an\\", \\"as\\", \\"are\\"] words_list = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"the\\", \\"orange\\", \\"kiwi\\", \\"orange\\", \\"kiwi\\", \\"the\\"] # Function to implement def most_frequent_word(words_list, stop_words): pass # Example calling the function result = most_frequent_word(words_list, stop_words) print(result) # Expected output: \\"apple\\" ```","solution":"def most_frequent_word(words_list, stop_words): Returns the most frequent non-stop word in the list. If multiple words have the same frequency, returns the word which appears first in the list of words. from collections import Counter # Remove stop words from the list valid_words = [word for word in words_list if word not in stop_words] # Count the frequency of each word word_counts = Counter(valid_words) # Find the most frequent word that appears first in the list most_frequent = None highest_count = 0 for word in words_list: if word in word_counts and word_counts[word] > highest_count: most_frequent = word highest_count = word_counts[word] return most_frequent"},{"question":"You are tasked with developing a function to determine whether a given list of integers contains any two distinct elements whose sum is equal to a specified target value. Write a function `has_pair_with_sum(lst, target)` that accepts the following parameters: - `lst` (list of integers): A list of integers where we need to find the pair. - `target` (integer): The target sum for which we are seeking a pair in the list. The function should return `True` if there exists at least one pair of distinct elements in the list that add up to the target value, otherwise, it should return `False`. Your solution should take into consideration the efficiency of the algorithm, aiming for an optimal solution. # Example ```python print(has_pair_with_sum([10, 15, 3, 7], 17)) # Output: True print(has_pair_with_sum([1, 2, 3, 9], 8)) # Output: False ``` # Explanation In the first example, the function returns `True` because the numbers 10 and 7 sum to 17. In the second example, the function returns `False` because no two distinct numbers in the list sum to 8. # Constraints - The input list may contain up to 10,000 integers. - Each integer in the list will be between -100,000 and 100,000. - The target value can be any integer within the same range. # Requirements - You must ensure that the solution efficiently handles the maximum input size. - The solution should handle edge cases, like an empty list or a list with only one element, by returning `False`. - Avoid using nested loops to check for pairs, as this approach may be inefficient for large lists. # Solution Template ```python def has_pair_with_sum(lst, target): # Your implementation here # Example usage print(has_pair_with_sum([10, 15, 3, 7], 17)) # Expected: True print(has_pair_with_sum([1, 2, 3, 9], 8)) # Expected: False ```","solution":"def has_pair_with_sum(lst, target): Determines if there are any two distinct elements in the list that sum up to a given target value. Parameters: lst (list of integers): List of integers. target (integer): Target sum value. Returns: bool: True if there exists a pair with the sum equal to target, else False. seen = set() for number in lst: if target - number in seen: return True seen.add(number) return False"},{"question":"Using the Iris Dataset from sklearn, implement a K-Nearest Neighbors classifier to predict the species of an iris based on its features. Perform hyperparameter tuning to find the optimal number of neighbors (k) and evaluate the model\'s performance using cross-validation. Provide visualizations to show the classification boundaries.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split, cross_val_score from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score from sklearn.preprocessing import StandardScaler def load_and_prepare_data(): iris = load_iris() X = iris.data y = iris.target # Standardize features by removing the mean and scaling to unit variance scaler = StandardScaler() X = scaler.fit_transform(X) return X, y def find_best_k(X, y): k_values = range(1, 31) cv_scores = [] for k in k_values: knn = KNeighborsClassifier(n_neighbors=k) scores = cross_val_score(knn, X, y, cv=10, scoring=\'accuracy\') cv_scores.append(scores.mean()) best_k = k_values[np.argmax(cv_scores)] return best_k, cv_scores def knn_classification(X, y, k): X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) knn = KNeighborsClassifier(n_neighbors=k) knn.fit(X_train, y_train) y_pred = knn.predict(X_test) accuracy = accuracy_score(y_test, y_pred) return knn, accuracy def plot_cross_validation_scores(k_values, cv_scores): plt.figure(figsize=(10, 6)) plt.plot(k_values, cv_scores, marker=\'o\') plt.xlabel(\'Number of Neighbors K\') plt.ylabel(\'Cross-Validated Accuracy\') plt.title(\'KNN Cross-Validated Accuracy for different K values\') plt.grid(True) plt.show() X, y = load_and_prepare_data() best_k, cv_scores = find_best_k(X, y) print(f\\"Best value for k: {best_k}\\") knn, accuracy = knn_classification(X, y, best_k) print(f\\"Accuracy with best k ({best_k}): {accuracy*100:.2f}%\\") plot_cross_validation_scores(list(range(1, 31)), cv_scores)"},{"question":"Implement a function `min_difference_powers_of_two` that takes a list of integers as input and returns the minimum absolute difference between any two numbers in the list where both numbers are powers of two. For this problem, a number is considered a \\"power of two\\" if it can be written as 2^k where k is a non-negative integer. You should handle inputs that might contain numbers which are not powers of two, and such numbers should be ignored. Here is an example of the function signature: ```python def min_difference_powers_of_two(numbers): Given a list of integers, returns the minimum absolute difference between any two numbers that are powers of two in the list. Parameters: numbers (list): List of integers Returns: int: Minimum absolute difference between any two powers of two, or -1 if there are fewer than two numbers that are powers of two. Example: >>> min_difference_powers_of_two([1, 2, 3, 4, 16]) 1 >>> min_difference_powers_of_two([10, 15, 23]) -1 >>> min_difference_powers_of_two([1, 128, 7, 64, 8, 2]) 1 ``` Your function should efficiently handle the given input and edge cases, including empty lists or lists with fewer than two powers of two.","solution":"def min_difference_powers_of_two(numbers): Given a list of integers, returns the minimum absolute difference between any two numbers that are powers of two in the list. Parameters: numbers (list): List of integers Returns: int: Minimum absolute difference between any two powers of two, or -1 if there are fewer than two numbers that are powers of two. Example: >>> min_difference_powers_of_two([1, 2, 3, 4, 16]) 1 >>> min_difference_powers_of_two([10, 15, 23]) -1 >>> min_difference_powers_of_two([1, 128, 7, 64, 8, 2]) 1 # Helper function to check if a number is a power of two def is_power_of_two(n): return n > 0 and (n & (n - 1)) == 0 # Extract the powers of two from the input list powers_of_two = sorted([num for num in numbers if is_power_of_two(num)]) # If there are fewer than two powers of two, return -1 if len(powers_of_two) < 2: return -1 # Find the minimum absolute difference between consecutive powers of two min_diff = float(\'inf\') for i in range(1, len(powers_of_two)): min_diff = min(min_diff, powers_of_two[i] - powers_of_two[i - 1]) return min_diff"},{"question":"Write a Python function called \'find_files\' that searches for files with a specific extension within a given directory and its subdirectories. The function should take two parameters: \'directory\' (a string representing the path to the directory) and \'extension\' (a string representing the file extension to search for, such as \'.txt\' or \'.py\'). The function should return a list of strings, each string representing the full path to a file that matches the extension. Here is the function signature: ```python def find_files(directory: str, extension: str) -> List[str]: # Your code here ``` # Example: ```python # Given the directory structure: # test_dir/ # ├── file1.txt # ├── file2.py # ├── sub_dir/ # │ ├── file3.txt # │ └── file4.py find_files(\'test_dir\', \'.txt\') # Output: [\'test_dir/file1.txt\', \'test_dir/sub_dir/file3.txt\'] find_files(\'test_dir\', \'.py\') # Output: [\'test_dir/file2.py\', \'test_dir/sub_dir/file4.py\'] ``` # Constraints: - Assume the directory path given exists and is readable. - The function should handle both relative and absolute paths. - The function should be case-insensitive with respect to file extensions.","solution":"import os from typing import List def find_files(directory: str, extension: str) -> List[str]: Find all files with a specific extension within a given directory and its subdirectories. Args: directory (str): The path to the directory to search within. extension (str): The file extension to search for (e.g., \'.txt\', \'.py\'). Returns: List[str]: A list of full paths to the files that match the extension. matching_files = [] for root, _, files in os.walk(directory): for file in files: if file.lower().endswith(extension.lower()): matching_files.append(os.path.join(root, file)) return matching_files"},{"question":"Given an array of integers, write a Python function that rearranges the elements of the array such that all negative numbers appear before all positive numbers. The rearrangement should be performed in-place (without using any extra space for another array). The relative order of the positive numbers and negative numbers should be preserved. ```python def rearrange_array(arr): # Your code here pass # Example usage: arr = [1, -2, 3, 4, -5, -6, 7, 8] rearrange_array(arr) print(arr) # Output should be: [-2, -5, -6, 1, 3, 4, 7, 8] ``` **Constraints:** - The input array may contain zero, one, or more elements. - The function should handle arrays with all positive, all negative, or a mix of positive and negative numbers. - The relative order of positive and negative numbers should not change. Provide a step-by-step explanation of your approach and the underlying logic used to solve the problem.","solution":"def rearrange_array(arr): This function rearranges the elements of the array such that all negative numbers appear before all positive numbers, while preserving their relative order. # Initialize pointers for the next position of negative and positive elements. neg_pointer = 0 # Traverse the array and check elements. for i in range(len(arr)): if arr[i] < 0: if i != neg_pointer: arr.insert(neg_pointer, arr.pop(i)) neg_pointer += 1 return arr"},{"question":"Given the following set of users\' ratings of movies, identify the most frequent rating provided by each user and return a dictionary where the keys are user IDs and the values are their most frequent rating. If there is a tie, return the smallest rating among the most frequent ratings. You are provided with a list of tuples where each tuple contains the user ID and their rating for a movie. **Function Signature:** ```python def most_frequent_ratings(ratings: list) -> dict: Identify the most frequent rating provided by each user. Args: ratings (list): A list of tuples containing user ID and their rating. Returns: dict: A dictionary where the keys are user IDs and the values are the most frequent ratings. Example: >>> most_frequent_ratings([(1, 4), (2, 3), (1, 3), (2, 3), (2, 4), (1, 5)]) {1: 3, 2: 3} # Your code here ``` The function should handle various edge cases, for instance: - Multiple users with different or similar rating patterns. - A user with only one rating. - Ratings that are tied in frequency. **Example 1:** ```python ratings = [(1, 4), (2, 3), (1, 3), (2, 3), (2, 4), (1, 5)] output = most_frequent_ratings(ratings) # Expected output: {1: 3, 2: 3} ``` **Example 2:** ```python ratings = [(1, 5), (1, 5), (1, 6), (2, 5), (2, 6), (3, 7)] output = most_frequent_ratings(ratings) # Expected output: {1: 5, 2: 5, 3: 7} ```","solution":"from collections import defaultdict, Counter def most_frequent_ratings(ratings): Identify the most frequent rating provided by each user. Args: ratings (list): A list of tuples containing user ID and their rating. Returns: dict: A dictionary where the keys are user IDs and the values are the most frequent ratings. user_ratings = defaultdict(list) # Populate the dictionary with user ratings for user_id, rating in ratings: user_ratings[user_id].append(rating) most_freq_ratings = {} # Find the most frequent rating for each user for user_id, ratings in user_ratings.items(): rating_counts = Counter(ratings) max_freq = max(rating_counts.values()) most_freq_rating = min([rating for rating, freq in rating_counts.items() if freq == max_freq]) most_freq_ratings[user_id] = most_freq_rating return most_freq_ratings"},{"question":"Create a function that takes an unsorted list of integers and returns a new list containing only the prime numbers from the original list. Each prime number in the returned list should be in the same order as they appeared in the input list.","solution":"def is_prime(n): Checks if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def extract_prime_numbers(lst): Returns a list of prime numbers from the input list. return [x for x in lst if is_prime(x)]"},{"question":"Write a function that takes a list of integers as input and returns a new list containing the square of each integer. The resulting list should maintain the same relative order of elements as the original list. ```python def square_list(input_list): # Your implementation here # Example usage: input_list = [1, 2, 3, 4] # Output should be: [1, 4, 9, 16] ```","solution":"def square_list(input_list): Takes a list of integers and returns a new list containing the square of each integer. return [x ** 2 for x in input_list]"},{"question":"Design a function that analyzes a given string and determines whether it is a valid mathematical expression. A valid mathematical expression includes numbers, operators (+, -, *, /), and parentheses. The function should return `True` if the input string is a valid expression and `False` otherwise. Consider the following rules: - Numbers can be integers or decimals (e.g., 3, 3.14). - Operators must be between numbers or closed parentheses. - Parentheses must be correctly matched and properly nested. - The string should not contain any characters other than numbers, operators, and parentheses. - Leading zeros in numbers are not permitted unless the number is \\"0\\" itself. Test your function with various test cases, including edge cases like empty strings, strings with unmatched parentheses, and strings with misplaced operators.","solution":"import re def valid_math_expression(s): Determines if a given string is a valid mathematical expression. A valid mathematical expression includes numbers, operators (+, -, *, /), and parentheses, and must be properly formatted. # Check for invalid characters if re.search(r\'[^0-9+-*/(). ]\', s): return False # Check for empty string or invalid start/end characters if not s or s[0] in \'*/)\' or s[-1] in \'+*/-(\': return False # Check for leading zeros in numbers if re.search(r\'b0[0-9]\', s): return False # Check for operators without numbers around them if re.search(r\'[+-*/]{2,}\', s) or re.search(r\'[+-*/][+-*/]\', s): return False # Check for misplaced periods if re.search(r\'.[^0-9]\', s) or re.search(r\'[0-9].[0-9]*.\', s): return False # Check for balanced parentheses stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() if stack: return False return True"},{"question":"Create a function that receives a string as input and checks if the string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function should return `true` if the string is a palindrome and `false` otherwise. Ensure that your implementation has a time complexity of O(n), where n is the length of the string. **Example:** ```python isPalindrome(\\"A man, a plan, a canal: Panama\\") -> true isPalindrome(\\"race a car\\") -> false isPalindrome(\\" \\") -> true ``` **Constraints:** - The input string consists of printable ASCII characters.","solution":"def isPalindrome(s: str) -> bool: Checks if the given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function that takes a list of integers and returns a new list with each integer increased by the sum of all elements preceding it in the original list (cumulative sum). For example, if the input list is [1, 2, 3], the output should be [1, 3, 6]. If the list is empty, the output should be an empty list. Implement this without using any external libraries or built-in functions explicitly meant for summation. Example: Input: [2, 4, 6] Output: [2, 6, 12]","solution":"def cumulative_sum(numbers): Takes a list of integers and returns a new list with each integer increased by the sum of all elements preceding it in the original list. result = [] current_sum = 0 for number in numbers: current_sum += number result.append(current_sum) return result"},{"question":"Refactor the given Python code to utilize list comprehensions for improved conciseness and readability. ```python def square_elements(input_list): result = [] for element in input_list: result.append(element ** 2) return result ```","solution":"def square_elements(input_list): Returns a list containing the squares of the elements in the input_list. return [element ** 2 for element in input_list]"},{"question":"Formulate an algorithm to determine the shortest path between two nodes in an unweighted graph. The complexity of your solution should be at most O(V + E), where V is the number of vertices and E is the number of edges in the graph. The algorithm should take into account that the graph is represented as an adjacency list. graph = { \'A\': [\'B\', \'C\', \'D\'], \'B\': [\'A\', \'E\', \'F\'], \'C\': [\'A\', \'G\'], \'D\': [\'A\', \'H\'], \'E\': [\'B\'], \'F\': [\'B\'], \'G\': [\'C\'], \'H\': [\'D\'] } start_node = \'A\' end_node = \'G\'","solution":"from collections import deque def shortest_path(graph, start, end): Returns the shortest path between start and end nodes in an unweighted graph. if start == end: return [start] queue = deque([(start, [start])]) visited = set() while queue: node, path = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph.get(node, []): if neighbor == end: return path + [neighbor] else: queue.append((neighbor, path + [neighbor])) return None # return None if there is no path"},{"question":"Write a function that takes a list of integers that represents the grades of students and returns a list where each grade has been rounded according to the following rules: 1. If the difference between the grade and the next multiple of 5 is less than 3, round the grade up to the next multiple of 5. 2. If the value of the grade is less than 38, no rounding occurs as the result will still be a failing grade. For example, if we had the input grades list `[73, 67, 38, 33]`, the function should return `[75, 67, 40, 33]`. **Function Signature:** ```python def grading_students(grades: List[int]) -> List[int]: pass ``` **Input:** - `grades` (List[int]): A list of integers representing the grades of students. **Output:** - Returns a list of integers where each grade has been rounded according to the given rules. **Example:** ```python grades = [73, 67, 38, 33] print(grading_students(grades)) # Output: [75, 67, 40, 33] ```","solution":"from typing import List def grading_students(grades: List[int]) -> List[int]: Takes a list of integers representing student grades and returns a new list of grades rounded according to specific rules. Parameters: grades (List[int]): A list of integers representing the grades of students. Returns: List[int]: A list of rounded grades. rounded_grades = [] for grade in grades: if grade >= 38: next_multiple_of_five = 5 * ((grade // 5) + 1) if next_multiple_of_five - grade < 3: rounded_grades.append(next_multiple_of_five) else: rounded_grades.append(grade) else: rounded_grades.append(grade) return rounded_grades"},{"question":"Write a function named `max_subarray_sum` that takes a list of integers as input and returns the maximum sum of any contiguous subarray within the list. Implement the function using Kadane’s Algorithm. The function should handle cases where all the elements of the list are negative, returning the highest negative number in such scenarios. Include error handling for empty lists by raising a `ValueError` with an appropriate error message.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the list. Uses Kadane\'s Algorithm. if not nums: raise ValueError(\\"The input list is empty.\\") max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Develop an algorithm to determine the longest substring without repeating characters from a given string. Implement a function that accepts a string as input and returns the length of such a substring. Ensure that your solution demonstrates time efficiency suitable for handling large input strings.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Implement a function called `flatten_dictionary` to convert a nested dictionary into a flattened dictionary, where the keys are represented in dot-notation to indicate their nested levels. Allow for integers and strings as keys, and handle edge cases such as empty dictionaries and dictionaries containing lists. The provided string representation of the flattened keys should reflect the hierarchy using dots. Here\'s the partial code (which contains errors) for reference: ```python def flatten_dictionary(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flatten a nested dictionary using dot-notation for nested keys. Handles keys as integers and strings, allows for lists within the dictionary. Examples: >>> flatten_dictionary({\'a\': 1, \'b\': {\'c\': 2, \'d\': {\'e\': 3}}, \'f\': {\'g\': 4}}) {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'f.g\': 4} >>> flatten_dictionary({1: {2: {3: 4}}}) {\'1.2.3\': 4} >>> flatten_dictionary({\'a\': []}) {\'a\': []} >>> flatten_dictionary({}) {} ```","solution":"def flatten_dictionary(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flatten a nested dictionary using dot-notation for nested keys. Handles keys as integers and strings, allows for lists within the dictionary. Examples: >>> flatten_dictionary({\'a\': 1, \'b\': {\'c\': 2, \'d\': {\'e\': 3}}, \'f\': {\'g\': 4}}) {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'f.g\': 4} >>> flatten_dictionary({1: {2: {3: 4}}}) {\'1.2.3\': 4} >>> flatten_dictionary({\'a\': []}) {\'a\': []} >>> flatten_dictionary({}) {} items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else str(k) if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are given a string consisting of lowercase letters and an integer \'k\'. Write a function that finds the length of the longest substring that contains at most \'k\' distinct characters. If \'k\' is zero or the string is empty, the function should return 0. Your function should also handle erroneous inputs gracefully. If \'k\' is negative or not an integer, or the input string contains non-lowercase characters, the function should raise a ValueError with an appropriate message indicating the type of error. Additionally, provide a piece of erroneous code that attempts to solve the problem but fails due to a common mistake. Analyze the code, identify the mistake, and explain how to correct it. The function should be optimized for performance and should be able to handle large strings efficiently. Finally, write unit tests to validate the functionality of your code in various edge cases, including empty strings, single character strings, and strings with all identical characters.","solution":"def longest_substring_with_k_distinct_chars(s, k): Returns the length of the longest substring that contains at most \'k\' distinct characters. Handles erroneous inputs by raising ValueError. if not isinstance(k, int): raise ValueError(\\"k must be an integer\\") if k < 0: raise ValueError(\\"k must be non-negative\\") if not isinstance(s, str) or any(not c.islower() for c in s): raise ValueError(\\"Input string must contain only lowercase letters\\") if k == 0 or not s: return 0 char_count = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_count: char_count[s[end]] += 1 else: char_count[s[end]] = 1 while len(char_count) > k: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function that takes an array of integers and an integer target and returns all unique quadruples [a, b, c, d] in the array such that a + b + c + d = target. The solution set must not contain duplicate quadruples. Constraints: 1. The algorithm should be optimized for time and space complexity. 2. The array may contain both positive and negative integers, as well as zero. 3. The function should include appropriate checks to handle various edge cases, such as the presence of less than four integers. For example, given the array nums = [1, 0, -1, 0, -2, 2] and target = 0, the solution set should be: [ [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1] ] The solution set should be returned as a list of lists, with each inner list representing one of the quadruples that sum up to the target. Describe your approach, including any optimizations you use to ensure the solution is both correct and efficient.","solution":"def four_sum(nums, target): Returns all unique quadruples [a, b, c, d] in nums such that a + b + c + d = target. The solution set must not contain duplicate quadruples. nums.sort() quadruples = [] n = len(nums) if n < 4: return quadruples for i in range(n - 3): if i > 0 and nums[i] == nums[i-1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j-1]: continue left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruples.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruples"},{"question":"Implement a function in Python that takes a list of integers and an integer target, and returns the pair of indices (i, j) of the two numbers in the list such that they add up to the target. The function should efficiently handle cases where no valid pair exists by returning `None`. Ensure your solution works in linear time.","solution":"def two_sum(nums, target): Finds two indices i, j such that nums[i] + nums[j] == target. :param nums: List[int] - List of integers. :param target: int - Target sum. :return: (int, int) or None - Tuple of indices or None if no valid pair is found. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Write a function `is_valid_schedule` that determines if a given list of task intervals can all be scheduled without overlap. The function should receive a list of tuples, where each tuple contains two integers representing the start and end times of a task, and return `True` if no tasks overlap, or `False` otherwise. The tasks are provided in no particular order. Example: - Input: [(1, 3), (2, 5), (4, 6)] - Output: False - Input: [(1, 2), (3, 5), (6, 8)] - Output: True","solution":"def is_valid_schedule(tasks): Determines if a given list of task intervals can all be scheduled without overlap. Parameters: tasks (list of tuples): List of tuples, where each tuple contains two integers representing the start and end times of a task. Returns: bool: True if no tasks overlap, or False otherwise. # Sort tasks based on the start time tasks.sort(key=lambda x: x[0]) for i in range(1, len(tasks)): # If the start time of the current task is less than the end time of the previous task, we have an overlap if tasks[i][0] < tasks[i-1][1]: return False return True"},{"question":"Write a function that takes two strings, `s1` and `s2`, and returns the longest common subsequence (LCS) of the two strings. The function should return the LCS as a string. If there are multiple LCS of the same length, return any one of them. # Constraints: - The strings `s1` and `s2` consist of upper-case English letters only. - The length of both strings is at most 1000. # Examples: 1. Input: `s1 = \\"ABCBDAB\\"`, `s2 = \\"BDCAB\\"` Output: `\\"BCAB\\"` 2. Input: `s1 = \\"AGGTAB\\"`, `s2 = \\"GXTXAYB\\"` Output: `\\"GTAB\\"` 3. Input: `s1 = \\"AAAA\\"`, `s2 = \\"AA\\"` Output: `\\"AA\\"` # Function Signature: ```python def longest_common_subsequence(s1: str, s2: str) -> str: # Your code here ```","solution":"def longest_common_subsequence(s1: str, s2: str) -> str: Finds and returns the longest common subsequence (LCS) between two strings. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the LCS from the dp table i, j = m, n lcs = [] while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] >= dp[i][j - 1]: i -= 1 else: j -= 1 # The lcs list will contain the LCS characters in reverse order return \\"\\".join(reversed(lcs))"},{"question":"Using the pandas library, load a CSV file containing information about a population of houses, including attributes like square footage, number of bedrooms, number of bathrooms, and location. Create a linear regression model to predict the price of a house based on these features. Generate and display a histogram of the predicted prices, and evaluate the model\'s performance by calculating the R-squared value.","solution":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.metrics import r2_score import matplotlib.pyplot as plt def load_data(file_path): Load CSV data into a pandas DataFrame. return pd.read_csv(file_path) def create_model(data): Creates a linear regression model based on the input data. # Select features and target variable from the data features = data[[\'square_footage\', \'num_bedrooms\', \'num_bathrooms\', \'location\']] target = data[\'price\'] # For simplicity, let\'s convert categorical data to dummy/indicator variables features = pd.get_dummies(features, drop_first=True) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42) # Create and train the linear regression model model = LinearRegression() model.fit(X_train, y_train) y_pred = model.predict(X_test) # Calculate R-squared value r_squared = r2_score(y_test, y_pred) # Return the model, predictions, and R-squared value return model, y_pred, y_test, r_squared def plot_histogram(predictions): Plots a histogram of the predicted house prices. plt.hist(predictions, bins=50, edgecolor=\'k\') plt.xlabel(\'Predicted Price\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Predicted House Prices\') plt.show() # Example usage: # file_path = \'house_data.csv\' # data = load_data(file_path) # model, predictions, actual, r_squared = create_model(data) # plot_histogram(predictions) # print(f\'R-squared value: {r_squared}\')"},{"question":"Write a function that reads from two files containing sorted lists of numbers and merges them into a single sorted list without using any built-in sort functions. The resulting list should be saved to a third file. Ensure your function handles error checking (e.g., file not found errors) and logs all steps in the process to a local log file. Your function should also handle cases where the files might not contain valid numeric data, logging such occurrences appropriately and skipping the invalid entries. Additionally, write a test script that validates the functionality of the merge function by creating sample input files, calling the merge function, and verifying the output. The test script should clean up any test files created during execution. #Your code should include the necessary imports and the following outlines: import os import logging def merge_sorted_files(file1, file2, output_file): # Your implementation here def test_merge_sorted_files(): # Test implementation here # Example usage: # merge_sorted_files(\'sorted_numbers1.txt\', \'sorted_numbers2.txt\', \'merged_output.txt\')","solution":"import os import logging logging.basicConfig(filename=\'merge_logs.log\', level=logging.DEBUG, format=\'%(asctime)s - %(levelname)s - %(message)s\') def merge_sorted_files(file1, file2, output_file): def read_file(file): numbers = [] try: with open(file, \'r\') as f: for line in f: try: numbers.append(int(line.strip())) except ValueError as e: logging.error(f\\"Value error in file {file}: {e}\\") except FileNotFoundError: logging.error(f\\"File not found: {file}\\") return numbers list1 = read_file(file1) list2 = read_file(file2) logging.info(f\\"Read {len(list1)} numbers from {file1}\\") logging.info(f\\"Read {len(list2)} numbers from {file2}\\") merged_list = [] i = j = 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) with open(output_file, \'w\') as f: for number in merged_list: f.write(f\\"{number}n\\") logging.info(f\\"Merged list of {len(merged_list)} numbers written to {output_file}\\")"},{"question":"Write a Python function that takes in two strings and determines whether one is a permutation of the other. Your implementation should consider the case where the input strings may contain any Unicode characters and should ignore whitespace and letter casing (i.e., abc and CBA are permutations of each other if you ignore case differences). Provide a demonstration using the inputs \\"Listen\\" and \\"Silent\\". ```python def check_permutation(str1: str, str2: str) -> bool: # Write your code here # Demonstration print(check_permutation(\\"Listen\\", \\"Silent\\")) # Expected output: True print(check_permutation(\\"Hello\\", \\"Olelh\\")) # Expected output: True print(check_permutation(\\"Test\\", \\"Tost\\")) # Expected output: False ```","solution":"def check_permutation(str1: str, str2: str) -> bool: Determines if one string is a permutation of the other, ignoring whitespace and letter casing. # Remove whitespace and convert to lower case str1_cleaned = \'\'.join(str1.split()).lower() str2_cleaned = \'\'.join(str2.split()).lower() # Check if the sorted characters of both strings match return sorted(str1_cleaned) == sorted(str2_cleaned) # Demonstration print(check_permutation(\\"Listen\\", \\"Silent\\")) # Expected output: True print(check_permutation(\\"Hello\\", \\"Olelh\\")) # Expected output: True print(check_permutation(\\"Test\\", \\"Tost\\")) # Expected output: False"},{"question":"Write a function that takes a string of parentheses and determines if the string is valid. A string is considered valid if: 1. All open parenthesis \'(\' have a corresponding closing parenthesis \')\'. 2. Open parenthesis \'(\' must be closed in the correct order. Assume that the input string contains only the characters \'(\' and \')\'. # Requirement: - Implement the function without using built-in stack data structures. - Your function should complete the task within O(n) time complexity, where n is the length of the input string. - Handle edge cases with empty strings, unbalanced parentheses, and nested parentheses effectively. # Example Inputs and Outputs: - Input: `\\"(())\\"` Output: `True` - Input: `\\"(()))\\"` Output: `False` - Input: `\\"()()\\"` Output: `True` - Input: `\\"((())\\"` Output: `False`","solution":"def is_valid_parentheses(s: str) -> bool: Determines if the string of parentheses is valid. A string is considered valid if: 1. All open parenthesis \'(\' have a corresponding closing parenthesis \')\'. 2. Open parenthesis \'(\' must be closed in the correct order. open_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count == 0: return False open_count -= 1 return open_count == 0"},{"question":"Implement a function that takes a string containing a mathematical expression written in Roman numerals with \'+\' and \'-\' operators and returns the result as an integer. You can assume the input will always be a valid expression. Roman numerals are limited to \'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\'. # Input: - A single string representing a mathematical expression in Roman numerals, e.g., \\"XIV+III-II\\". # Output: - A single integer representing the result of the expression. # Example: ```python def roman_expression(expr: str) -> int: pass print(roman_expression(\\"XIV+III-II\\")) # Output: 15 ``` # Notes: - The function should first convert the individual Roman numerals to integers. - It should then evaluate the resulting mathematical expression and return the computed integer. - You may write helper functions to assist with converting Roman numerals to integers and evaluating the expression.","solution":"def roman_to_int(s: str) -> int: Convert a Roman numeral string to an integer. roman_dict = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} prev_value = 0 total = 0 for char in s[::-1]: # Traverse the string from the end value = roman_dict[char] if value < prev_value: total -= value else: total += value prev_value = value return total def eval_roman_expression(tokens: list) -> int: Evaluate the integer math expression with addition and subtraction. total = tokens[0] idx = 1 while idx < len(tokens): op = tokens[idx] num = tokens[idx + 1] if op == \'+\': total += num elif op == \'-\': total -= num idx += 2 return total def roman_expression(expr: str) -> int: Convert a Roman numeral math expression to an integer result. import re # Split into Roman numeral tokens and operators tokens = re.split(\'([+-])\', expr) # Convert all Roman numeral tokens to integers for i in range(0, len(tokens), 2): tokens[i] = roman_to_int(tokens[i]) # Evaluate the expression return eval_roman_expression(tokens)"},{"question":"Write a function that takes a list of strings and returns a dictionary where each key is a string and the associated value is the number of times that string appeared in the list, but only include strings that appear more than once. ```python def count_duplicates(string_list): This function takes a list of strings and returns a dictionary with counts of strings that appear more than once in the list. Parameters: string_list (list): A list of strings. Returns: dict: A dictionary with strings as keys and their appearance counts as values, including only strings that appear more than once. # Your implementation here # Example usage input_list = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] result = count_duplicates(input_list) print(result) # Output should be: {\'apple\': 3, \'banana\': 2} ```","solution":"def count_duplicates(string_list): This function takes a list of strings and returns a dictionary with counts of strings that appear more than once in the list. Parameters: string_list (list): A list of strings. Returns: dict: A dictionary with strings as keys and their appearance counts as values, including only strings that appear more than once. from collections import Counter # Count occurrences of each string counts = Counter(string_list) # Filter out strings that appear only once duplicates = {string: count for string, count in counts.items() if count > 1} return duplicates"},{"question":"Develop a Python function that takes an integer \'n\' as input and returns a list of all prime numbers less than \'n\'. Ensure your implementation is efficient and consider edge cases such as when \'n\' is less than 2. Your solution should include appropriate error handling and be tested with a variety of input values.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. :param n: Upper limit (non-inclusive) to find prime numbers :type n: int :return: List of prime numbers less than n :rtype: list if n < 2: return [] primes = [] is_prime = [True] * n for i in range(2, n): if is_prime[i]: primes.append(i) for j in range(i * i, n, i): is_prime[j] = False return primes"},{"question":"Construct a Python function that accepts two parameters: a multiplication factor `M` and a list of integers `numbers`. The function should return a new list containing the elements from the original list multiplied by `M`. Ensure the function handles corner cases such as empty lists and non-integer values gracefully by raising appropriate exceptions.","solution":"def multiply_list(M, numbers): Multiplies each element in the list `numbers` by the factor `M`. Args: M (int): The multiplication factor. numbers (list of int): The list of integers to be multiplied. Returns: list of int: A new list with each element multiplied by M. Raises: ValueError: If M is not an integer or if the numbers list contains non-integer values. if not isinstance(M, int): raise ValueError(\\"The multiplication factor M must be an integer\\") if not all(isinstance(num, int) for num in numbers): raise ValueError(\\"All elements in the numbers list must be integers\\") return [M * num for num in numbers]"},{"question":"Design a program that simulates a simplified task manager. The program should allow for adding tasks with specified priorities, viewing all tasks ordered by priority, and removing tasks. Here\'s the breakdown of requirements: - A `Task` class that contains attributes such as `name` (string) and `priority` (integer). The `priority` attribute determines the importance of the task, with lower numbers indicating higher priority. - A `TaskManager` class that can: 1. `add_task` that accepts a `Task` object and adds it to the task list. 2. `view_tasks` that returns a list of tasks ordered by their priority (lowest priority number first). 3. `remove_task` that removes a task by its name. - The `TaskManager` should handle any attempts to remove a task that does not exist gracefully, without throwing an error. Provide an implementation of the `Task` and `TaskManager` classes, and demonstrate their usage with sample inputs and outputs.","solution":"class Task: def __init__(self, name, priority): self.name = name self.priority = priority class TaskManager: def __init__(self): self.tasks = [] def add_task(self, task): self.tasks.append(task) def view_tasks(self): return sorted(self.tasks, key=lambda task: task.priority) def remove_task(self, name): self.tasks = [task for task in self.tasks if task.name != name] # Sample usage # task1 = Task(\\"Task 1\\", 2) # task2 = Task(\\"Task 2\\", 1) # task3 = Task(\\"Task 3\\", 3) # manager = TaskManager() # manager.add_task(task1) # manager.add_task(task2) # manager.add_task(task3) # print([task.name for task in manager.view_tasks()]) # Expected: [\\"Task 2\\", \\"Task 1\\", \\"Task 3\\"] # manager.remove_task(\\"Task 2\\") # print([task.name for task in manager.view_tasks()]) # Expected: [\\"Task 1\\", \\"Task 3\\"]"},{"question":"Discuss the concept of recursion in programming, including its essential components: the base case and the recursive case. Explain how recursion can be advantageous compared to iterative solutions, and also outline potential drawbacks. Additionally, identify the issue in the following code snippet which aims to calculate the factorial of a given number, and provide a corrected version. ```python def factorial(n): if n == 1: return 1 else: return n * factorial(n - 1) print(factorial(0)) ```","solution":"def factorial(n): if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Implement a function that receives a string containing a mathematical expression, and returns the result of evaluating the expression. The function should handle addition, subtraction, multiplication, and division. Additionally, ensure that the function can appropriately handle any whitespace around the operators and operands. Examples: ```python evaluate_expression(\\"3 + 5\\") # should return 8 evaluate_expression(\\"10 - 2\\") # should return 8 evaluate_expression(\\"4 * 7\\") # should return 28 evaluate_expression(\\"16 / 4\\") # should return 4.0 evaluate_expression(\\" 9 + 3 \\") # should return 12 ```","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression string. Supports addition, subtraction, multiplication, and division operations. Handles whitespace around operators and operands. # Remove any leading/trailing whitespace expression = expression.strip() # Use Python\'s eval function to evaluate the expression try: result = eval(expression) except (SyntaxError, ZeroDivisionError): return None return result"},{"question":"You are given a string `s` consisting of only lowercase English letters. You can perform the following operations on the string: - Choose a non-empty substring `sub` and reverse it. Your task is to return the lexicographically smallest string that you can obtain after performing the above operations any number of times. **Note:** A string `a` is lexicographically smaller than a string `b` if in the first position where `a` and `b` differ, `a` has a character that comes before the corresponding character in `b` in the alphabet. Example 1: Input: s = \\"dcba\\" Output: \\"abcd\\" Explanation: By reversing the entire string, we get \\"abcd\\" which is the smallest lexicographical permutation. Example 2: Input: s = \\"bca\\" Output: \\"acb\\" Explanation: By reversing the substring \\"bc\\", we get \\"acb\\", which is the smallest lexicographical permutation possible. Example 3: Input: s = \\"cba\\" Output: \\"abc\\" Explanation: Various reversals can achieve the same result, but here reversing the entire string will do. Constraints: - 1 <= s.length <= 10^5 - s consists of only lowercase English letters.","solution":"def smallest_string_after_reversals(s): Returns the lexicographically smallest string that can be obtained by performing any number of substring reversals on the input string. return \'\'.join(sorted(s))"},{"question":"A small company has decided to implement a simple payroll system. For each employee, their hours worked in a week and their hourly wage are recorded. The company pays overtime at 1.5 times the hourly wage for any hours worked over 40 in a week. Write a function in Python that calculates the total weekly pay for an employee given their hours worked and hourly wage. Define the function as `calculate_weekly_pay(hours_worked, hourly_wage)`. Ensure that the function correctly handles cases where the hours worked are less than, equal to, or greater than 40. Additionally, provide a brief explanation for the logic used in your function and test it with three different scenarios: an employee who worked 35 hours with an hourly wage of 15, an employee who worked 40 hours with an hourly wage of 20, and an employee who worked 50 hours with an hourly wage of 18.","solution":"def calculate_weekly_pay(hours_worked, hourly_wage): Calculates the total weekly pay for an employee given their hours worked and hourly wage. Overtime (any hours worked over 40 in a week) is paid at 1.5 times the hourly wage. :param hours_worked: Number of hours worked in a week. :param hourly_wage: The hourly wage of the employee. :return: The total weekly pay. if hours_worked <= 40: return hours_worked * hourly_wage else: regular_pay = 40 * hourly_wage overtime_hours = hours_worked - 40 overtime_pay = overtime_hours * (hourly_wage * 1.5) return regular_pay + overtime_pay"},{"question":"Create a Python3 program that takes a list of integers and a target integer as input, and returns a list of tuples, with each tuple holding two distinct integers from the list that sum up to the target. The tuples should be unique, in that the same pair of numbers should not appear more than once, regardless of their order in the tuple. Your program should handle potential errors such as non-integer elements in the list and ignore them without interrupting the program functionality. Additionally, ensure to ignore duplicate integers in the input list to avoid redundant pairs in the output. Example input: list_of_integers = [1, 2, 3, 4, 3, 5, 6, \'a\', 7, 8, 3, 2] target = 9 Expected output: [(1, 8), (2, 7), (3, 6), (4, 5)]","solution":"def find_pairs_with_sum(list_of_integers, target): Returns a list of unique tuples, each containing two distinct integers from the input list that sum up to the target. Handles non-integer elements gracefully. # Filter out non-integer elements valid_integers = set() for item in list_of_integers: if isinstance(item, int): valid_integers.add(item) seen = set() # to keep track of numbers we have processed pairs = set() # to store unique pairs for number in valid_integers: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return list(pairs)"},{"question":"Problem: Given a linked list, rotate the list to the right by k places, where k is a non-negative integer. For example, given the linked list 1->2->3->4->5 and k = 2, it should return the list as 4->5->1->2->3. If k is greater than the length of the list, you should rotate it k % length times. You may assume k is a non-negative integer. A: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: if not head or not head.next or k == 0: return head # Compute the length of the linked list length = 1 current = head while current.next: current = current.next length += 1 # Connect the tail of the list to the head to create a circular list current.next = head # Find the point to break the circular list k = k % length if k == 0: current.next = None return head steps_to_new_head = length - k new_tail = head for _ in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: if not head or not head.next or k == 0: return head # Compute the length of the linked list length = 1 current = head while current.next: current = current.next length += 1 # Connect the tail of the list to the head to create a circular list current.next = head # Find the point to break the circular list k = k % length if k == 0: current.next = None return head steps_to_new_head = length - k new_tail = head for _ in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head"},{"question":"Write a Python function that takes as input a list of integers and returns True if there are three distinct elements in the list that add up to a specified target sum. The function should use a time-efficient algorithm such as sorting and the two-pointer technique. You are required to include error handling for invalid inputs such as non-list inputs or lists with fewer than three elements.","solution":"def three_sum(nums, target): Returns True if there are three distinct elements in the list that add up to the specified target sum. Uses sorting and the two-pointer technique for a time-efficient solution. Args: nums (list): A list of integers. target (int): The target sum. Returns: bool: True if there are three distinct elements that add up to the target sum, False otherwise. Raises: ValueError: If the input is not a list of integers or if the list has fewer than three elements. if not isinstance(nums, list) or len(nums) < 3: raise ValueError(\\"Input must be a list with at least three integers.\\") if any(not isinstance(num, int) for num in nums): raise ValueError(\\"All elements in the list must be integers.\\") nums.sort() for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Implement a function in your preferred programming language that takes an array of integers as input and returns a new array containing only the elements that appear an odd number of times in the input array. The returned array should be sorted in ascending order. Ensure that your function handles cases with zero or more elements and performs efficiently for larger inputs. Provide tests for your function to demonstrate its correctness.","solution":"def odd_occurrences(arr): Returns a new array containing only the elements that appear an odd number of times in the input array. The returned array is sorted in ascending order. from collections import Counter counts = Counter(arr) odd_elements = [elem for elem, count in counts.items() if count % 2 != 0] return sorted(odd_elements)"},{"question":"Build a program that constructs a binary search tree (BST) from an array of integers and then implements an in-order traversal to return the elements in ascending order. The program should also include functionality to search for a specific integer in the BST and return whether that integer is present in the tree or not. Ensure efficient handling of edge cases such as an empty array or a search for an integer not present in the tree.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = TreeNode(key) else: self._insert(root.left, key) else: if root.right is None: root.right = TreeNode(key) else: self._insert(root.right, key) def in_order_traversal(self): res = [] self._in_order_traversal(self.root, res) return res def _in_order_traversal(self, root, res): if root: self._in_order_traversal(root.left, res) res.append(root.val) self._in_order_traversal(root.right, res) def search(self, key): return self._search(self.root, key) def _search(self, root, key): if root is None or root.val == key: return root is not None if key < root.val: return self._search(root.left, key) return self._search(root.right, key) def construct_bst_from_array(arr): bst = BinarySearchTree() for num in arr: bst.insert(num) return bst"},{"question":"Write a Python function that determines if a given word is a palindrome, ignoring spaces, punctuation, and capitalization. A palindrome is a word that reads the same backward as forward (e.g., \\"Madam, in Eden, I\'m Adam\\"). For example, given the word \\"A man, a plan, a canal: Panama\\", your function should return True.","solution":"import re def is_palindrome(s): Determines if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function in your preferred programming language that takes a list of integers and returns the median value. The median is the middle value in a sorted, ascending or descending, list of numbers and can be more descriptive of that data set than the average. If the count of numbers is even, the median is the average of the two middle values. The input list will always contain at least one integer and may not necessarily be sorted. # Function Signature Python ```python def find_median(numbers: List[int]) -> float: # Your implementation here ``` # Examples **Example 1:** ```python print(find_median([2, 5, 1, 7, 3])) # Output: 3 ``` **Example 2:** ```python print(find_median([10, 20, 30])) # Output: 20 ``` **Example 3:** ```python print(find_median([1, 6, 2, 4])) # Output: 3.0 ``` # Additional Notes - You can assume the input list will contain only integers. - Aim for a solution with an efficient time complexity. - In the case where the number of elements in the list is even, the median should be calculated with floating point precision and rounded to the nearest more descriptive format.","solution":"from typing import List def find_median(numbers: List[int]) -> float: Returns the median value of a list of integers. numbers.sort() n = len(numbers) if n % 2 == 1: # If odd, return the middle element return numbers[n//2] else: # If even, return the average of the two middle elements middle1 = numbers[n//2 - 1] middle2 = numbers[n//2] return (middle1 + middle2) / 2"},{"question":"Create a Python function that simulates a simplified version of a genetic algorithm to solve a basic optimization problem. The problem involves finding the maximum value of a given mathematical function, F(x), within a predefined range of x values. The function should include the following steps: - Initialize a population of candidate solutions represented as random x values within the given range. - Compute the fitness of each candidate solution, where the fitness is the value of the function F(x) for each x. - Select a set of candidate solutions based on their fitness using a selection method of your choice (e.g., roulette wheel selection). - Create a new generation of candidate solutions using crossover and mutation operations. - Iterate through a predefined number of generations or until convergence criteria are met (e.g., negligible change in maximum fitness). - Return the best candidate solution and its corresponding function value found. The function should be robust, ensuring appropriate input validation and offering flexibility in the choice of crossover and mutation parameters. Include descriptive documentation for the function and comments within the code to explain the implementation details.","solution":"import random def F(x): Example fitness function F(x) = -(x-3)**2 + 9 return -(x - 3)**2 + 9 def initialize_population(pop_size, x_min, x_max): Initialize a population of random x values within the specified range. return [random.uniform(x_min, x_max) for _ in range(pop_size)] def compute_fitness(population): Compute the fitness of each candidate in the population. return [F(x) for x in population] def roulette_wheel_selection(population, fitness): Select a set of candidate solutions based on their fitness using roulette wheel selection. total_fitness = sum(fitness) selection_probs = [f/total_fitness for f in fitness] selected_indices = random.choices(range(len(population)), weights=selection_probs, k=len(population)) return [population[i] for i in selected_indices] def crossover(parent1, parent2): Simple crossover operation: take the average of the two parents. return (parent1 + parent2) / 2 def mutate(x, mutation_rate, x_min, x_max): Apply mutation to a candidate solution. if random.random() < mutation_rate: return random.uniform(x_min, x_max) return x def genetic_algorithm(pop_size, x_min, x_max, generations, mutation_rate): Genetic algorithm to find the maximum value of F(x) within the range [x_min, x_max]. population = initialize_population(pop_size, x_min, x_max) best_solution = None best_fitness = float(\'-inf\') for generation in range(generations): fitness = compute_fitness(population) if max(fitness) > best_fitness: best_fitness = max(fitness) best_solution = population[fitness.index(best_fitness)] selected_population = roulette_wheel_selection(population, fitness) new_population = [] for i in range(0, len(selected_population), 2): parent1 = selected_population[i] parent2 = selected_population[i+1] if i+1 < len(selected_population) else selected_population[0] child = crossover(parent1, parent2) child = mutate(child, mutation_rate, x_min, x_max) new_population.append(child) population = new_population return best_solution, best_fitness"},{"question":"Write a function called `find_missing_number` that takes a list of integers from 1 to n with one integer missing, and returns the missing integer. The input list will have a length of n-1. Assume there are no duplicates in the list and the list is not sorted. For example: ```python def find_missing_number(lst): pass print(find_missing_number([2, 3, 1, 5])) # Output should be 4 print(find_missing_number([1, 2, 4, 5, 6])) # Output should be 3 ``` Your task is to: 1. Implement the function `find_missing_number`. 2. Explain the logic used to find the missing number in your implementation. Use any Python built-in functions or operators you find necessary and justify your choices in the explanation.","solution":"def find_missing_number(lst): Finds the missing number in a list of integers from 1 to n with one missing number. :param lst: List of integers in the range 1 to n with one integer missing. :return: The missing integer. n = len(lst) + 1 expected_sum = n * (n + 1) / 2 actual_sum = sum(lst) return int(expected_sum - actual_sum)"},{"question":"Write a function in Python that accepts a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list. Additionally, sort the dictionary by its keys in ascending order. For example, given the list [4, 6, 2, 6, 7, 4, 2, 2], the function should return {2: 3, 4: 2, 6: 2, 7: 1}.","solution":"def count_integers(int_list): Returns a dictionary with the count of each unique integer in the input list. The dictionary keys are sorted in ascending order. count_dict = {} for num in int_list: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return dict(sorted(count_dict.items()))"},{"question":"Write a Python function that simulates a simple inventory management system for a bookstore. The function should start with an empty inventory and allow the following operations: 1. **Add a book**: Each book should have the following details: ```json { \\"isbn\\": \\"978-3-16-148410-0\\", \\"title\\": \\"Book Title\\", \\"author\\": \\"Author Name\\", \\"quantity\\": 10, \\"price\\": 15.99 } ``` 2. **Remove a book**: Based on its ISBN number. 3. **Update book details**: Update any of the book\'s details using the ISBN number as the key. 4. **Search for a book**: Retrieve a book\'s details by its ISBN number. 5. **Calculate total value of inventory**: This should be the sum of the quantity times price for all books in the inventory. 6. **Save inventory to a JSON file**: Save the current inventory to a JSON file. The function should print a menu and prompt the user for the operation they wish to perform and any necessary details. Example Menu: ``` 1. Add a book 2. Remove a book 3. Update book details 4. Search for a book 5. Calculate total value of inventory 6. Save inventory to JSON file 7. Exit ``` Example input for Adding a book: ```json { \\"isbn\\": \\"978-3-16-148410-0\\", \\"title\\": \\"Book Title\\", \\"author\\": \\"Author Name\\", \\"quantity\\": 10, \\"price\\": 15.99 } ``` Example input for Updating book details: ```json { \\"isbn\\": \\"978-3-16-148410-0\\", \\"title\\": \\"New Book Title\\", \\"author\\": \\"New Author Name\\", \\"quantity\\": 5, \\"price\\": 12.99 } ``` Ensure the function handles edge cases such as attempting to remove or update a book that does not exist, searching for a non-existent ISBN, and avoid duplicate ISBNs during addition.","solution":"import json class BookstoreInventory: def __init__(self): self.inventory = {} def add_book(self, book): isbn = book.get(\\"isbn\\") if isbn in self.inventory: print(\\"Error: Book with this ISBN already exists.\\") return False self.inventory[isbn] = book return True def remove_book(self, isbn): if isbn not in self.inventory: print(\\"Error: Book with this ISBN does not exist.\\") return False del self.inventory[isbn] return True def update_book(self, isbn, updated_details): if isbn not in self.inventory: print(\\"Error: Book with this ISBN does not exist.\\") return False self.inventory[isbn].update(updated_details) return True def search_book(self, isbn): return self.inventory.get(isbn, \\"Error: Book with this ISBN does not exist.\\") def calculate_total_value(self): total_value = sum(book[\\"quantity\\"] * book[\\"price\\"] for book in self.inventory.values()) return total_value def save_to_json(self, file_name): with open(file_name, \\"w\\") as f: json.dump(self.inventory, f) return True"},{"question":"Given a list of integers, we define a \\"cluster\\" as a contiguous subarray where all elements are identical. For instance, in the array [1, 2, 2, 2, 3, 3, 4], there are four clusters: [1], [2, 2, 2], [3, 3], and [4]. Write a function `count_clusters(L)` that takes a list of integers `L` as input and returns the number of clusters in the list. # Example Input `[1, 2, 2, 2, 3, 3, 4]` Output `4` # Constraints - The length of the list, n, will be at most 10^5. - The elements of the list will be integers between -10^9 and 10^9 inclusive. # Function Signature ```python def count_clusters(L: List[int]) -> int: ``` # Explanation To solve this problem, you need to traverse the list and count the number of transitions between different elements.","solution":"def count_clusters(L): Count the number of clusters in the list L. A cluster is defined as a contiguous subarray where all elements are identical. Parameters: L (list): A list of integers. Returns: int: The number of clusters in the list. if not L: return 0 clusters = 1 for i in range(1, len(L)): if L[i] != L[i - 1]: clusters += 1 return clusters"},{"question":"Write a function called `retrieve_shared_keys` that takes in two dictionaries as arguments and returns a new dictionary. The new dictionary should contain only the key-value pairs where the keys are common to both input dictionaries. The values associated with these keys in the new dictionary should be tuples, where the first element is the value from the first input dictionary, and the second element is the value from the second input dictionary. If there are no common keys, return an empty dictionary. You cannot use dictionary comprehension or set operations in your implementation. # Example ```python def retrieve_shared_keys(dict1, dict2): # Your code here # Sample inputs dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 3, \'c\': 4, \'d\': 5} # Expected output print(retrieve_shared_keys(dict1, dict2)) # Output: {\'b\': (2, 3), \'c\': (3, 4)} dict3 = {\'e\': 5, \'f\': 6} dict4 = {\'g\': 7, \'h\': 8} print(retrieve_shared_keys(dict3, dict4)) # Output: {} ```","solution":"def retrieve_shared_keys(dict1, dict2): Returns a new dictionary containing key-value pairs where the keys are common to both input dictionaries. The values in the new dictionary are tuples with the first element being from dict1 and the second from dict2. result = {} for key in dict1: if key in dict2: result[key] = (dict1[key], dict2[key]) return result"},{"question":"Write a Python function `sort_dict_by_values` that accepts a dictionary as input and returns a new dictionary with the items sorted by their values in descending order. Ensure the program raises a `ValueError` if the input is not a dictionary or if any of the values are not integers. Implement appropriate test cases to validate your function.","solution":"def sort_dict_by_values(d): Sort the given dictionary by its values in descending order. Raises a ValueError if the input is not a dictionary or if its values are not all integers. Parameters: d (dict): The input dictionary Returns: dict: A new dictionary sorted by values in descending order if not isinstance(d, dict): raise ValueError(\\"Input must be a dictionary\\") for value in d.values(): if not isinstance(value, int): raise ValueError(\\"All values in the dictionary must be integers\\") return dict(sorted(d.items(), key=lambda item: item[1], reverse=True))"},{"question":"Design a Python function to determine the maximum product of any pair of integers in a given list of integers. The function should accept the list as input and return the maximum product as an integer. If the list contains fewer than two integers, raise a ValueError.","solution":"def max_product_of_pairs(int_list): Returns the maximum product of any pair of integers in the given list of integers. Parameters: int_list (list): A list of integers. Returns: int: The maximum product of any pair of integers. Raises: ValueError: If the list contains fewer than two integers. if len(int_list) < 2: raise ValueError(\\"List must contain at least two integers\\") int_list.sort() # Maximum product is either from the two largest numbers or the two most negative numbers. return max(int_list[0] * int_list[1], int_list[-1] * int_list[-2])"},{"question":"Write a Python function that takes a string as input and returns a dictionary where each key is a character in the string, and the corresponding value is the number of times that character appears in the string. Provide an explanation of how you handle case sensitivity and any special characters. Additionally, discuss the time complexity of your solution.","solution":"def char_count(s): Returns a dictionary where each key is a character in the string `s`, and the corresponding value is the number of times that character appears in the string. Case sensitivity is preserved, and special characters are counted as well. Args: s (str): The input string. Returns: dict: A dictionary with characters as keys and their counts as values. result = {} for char in s: if char in result: result[char] += 1 else: result[char] = 1 return result # The time complexity of this function is O(n), where n is the length of the string. # This is because we iterate through the string once, and operations on the dictionary (insertion and update) # are average O(1) operations."},{"question":"Write a function that takes a list of integers and finds the maximum sum of a contiguous subarray within the list. The function should be optimized to handle lists with up to 10^5 elements efficiently. Additionally, the function should return not only the maximum sum but also the starting and ending indices of the subarray that provides this sum. If there are multiple subarrays with the same maximum sum, return the indices of the first one encountered.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray within the list. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing the maximum sum, starting index, and ending index of the subarray. if not arr: return (0, -1, -1) max_sum = arr[0] current_sum = arr[0] start = 0 end = 0 temp_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return (max_sum, start, end)"},{"question":"Given the following list of words, can you identify the one that begins with a vowel and return its length? A) \\"zebra\\" B) \\"apple\\" C) \\"computer\\" D) \\"orange\\"","solution":"def word_length_starting_with_vowel(words): Returns the length of the first word in the list that starts with a vowel. vowels = \'AEIOUaeiou\' for word in words: if word[0] in vowels: return len(word) return None"},{"question":"Implement a genetic algorithm from scratch in Python to solve a simple optimization problem. Your task is to maximize the function `f(x) = x * sin(10 * pi * x) + 1`, where `x` ranges from 0 to 1. The algorithm should include the following elements: population initialization, fitness evaluation, selection, crossover, mutation, and termination condition. Provide detailed explanations of each component and ensure to comment on your code thoroughly to demonstrate your understanding of the process.","solution":"import numpy as np import random def initialize_population(pop_size, chromosome_length): Initialize the population with random chromosomes. Each chromosome is binary encoded. return np.random.randint(2, size=(pop_size, chromosome_length)) def decode_chromosome(chromosome): Decode the binary chromosome to a float value in the range [0, 1]. binary_string = \'\'.join(map(str, chromosome)) return int(binary_string, 2) / (2**len(chromosome) - 1) def fitness_function(x): The fitness function to be maximized: f(x) = x * sin(10 * pi * x) + 1. return x * np.sin(10 * np.pi * x) + 1 def evaluate_population(population): Evaluate the entire population and return their fitness scores. return np.array([fitness_function(decode_chromosome(individual)) for individual in population]) def select_parents(population, fitness): Select parents using roulette wheel selection. total_fitness = np.sum(fitness) selection_probs = fitness / total_fitness return population[np.random.choice(len(population), size=len(population), p=selection_probs)] def crossover(parent1, parent2): Perform single point crossover between two parents. point = random.randint(1, len(parent1) - 1) child1 = np.concatenate((parent1[:point], parent2[point:])) child2 = np.concatenate((parent2[:point], parent1[point:])) return child1, child2 def mutate(chromosome, mutation_rate): Perform mutation on a chromosome with the given mutation rate. for i in range(len(chromosome)): if random.random() < mutation_rate: chromosome[i] = 1 - chromosome[i] # Flip the bit return chromosome def genetic_algorithm(pop_size=100, chromosome_length=10, generations=50, mutation_rate=0.01): Genetic Algorithm to maximize the function f(x) = x * sin(10 * pi * x) + 1. population = initialize_population(pop_size, chromosome_length) for generation in range(generations): fitness = evaluate_population(population) population = select_parents(population, fitness) # Crossover next_population = [] for i in range(0, pop_size, 2): parent1, parent2 = population[i], population[i+1] child1, child2 = crossover(parent1, parent2) next_population.extend([child1, child2]) # Mutation population = np.array([mutate(individual, mutation_rate) for individual in next_population]) # Find and return best solution fitness = evaluate_population(population) best_index = np.argmax(fitness) best_chromosome = population[best_index] best_solution = decode_chromosome(best_chromosome) best_fitness = fitness[best_index] return best_solution, best_fitness"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. Your task is to remove `k` characters from the string in such a way that the resulting string is lexicographically smallest. For example, s = \\"acdb\\", k = 1 should return \\"acb\\" as removing \'d\' results in the smallest lexicographical order. s = \\"abcde\\", k = 2 should return \\"abc\\" as removing \'d\' and \'e\' results in the smallest lexicographical order. Write a function `remove_k_characters(s, k)` that takes a string `s` and an integer `k` and returns the lexicographically smallest string after removing `k` characters. Keep in mind the time complexity, as a naive approach might not be efficient for large values of `s`.","solution":"def remove_k_characters(s, k): Returns the lexicographically smallest string after removing k characters from the input string s. stack = [] for char in s: while k > 0 and stack and stack[-1] > char: stack.pop() k -= 1 stack.append(char) # If k is still greater than 0, remove from the end return \'\'.join(stack[:len(stack) - k])"},{"question":"You are given a list of integers and asked to implement a function that finds the longest subarray where the absolute difference between any two elements is less than or equal to 1. Write a function `findLongestSubarray` in Python that takes in a list of integers and returns the length of the longest such subarray. Ensure your solution is efficient even for larger input sizes. # Example: ``` findLongestSubarray([1, 2, 2, 3, 1, 2]) -> 5 findLongestSubarray([4, 6, 5, 3, 3, 1]) -> 3 ``` # Constraints: - The input list will have at least one integer. - All integers in the input list will be between 1 and 1,000,000. - The length of the input list will be between 1 and 100,000. Your function should try to achieve a time complexity better than O(n^2). Describe the approach you used to solve the problem and why you chose it.","solution":"from collections import defaultdict def findLongestSubarray(arr): if not arr: return 0 # Dictionary to hold the frequency of each number freq = defaultdict(int) max_len = 0 for num in arr: freq[num] += 1 keys = sorted(freq.keys()) for i in range(len(keys) - 1): if abs(keys[i] - keys[i + 1]) <= 1: max_len = max(max_len, freq[keys[i]] + freq[keys[i + 1]]) # Considering subarrays with only one unique number for num in freq: max_len = max(max_len, freq[num]) return max_len"},{"question":"Write a Python function that takes a list of integers and returns the longest sequence of consecutive integers present in the list. If there are multiple sequences of the same length, return the one that starts with the smallest number. Example: Input: [3, 9, 1, 10, 4, 20, 2, 8, 11, 12] Output: [1, 2, 3, 4]","solution":"def longest_consecutive_sequence(nums): Finds the longest sequence of consecutive integers in the list. If there are multiple sequences of the same length, it returns the one that starts with the smallest number. if not nums: return [] nums = sorted(set(nums)) # Remove duplicates and sort the list longest_seq = [] current_seq = [] for num in nums: if not current_seq or num == current_seq[-1] + 1: current_seq.append(num) else: if len(current_seq) > len(longest_seq): longest_seq = current_seq current_seq = [num] if len(current_seq) > len(longest_seq): longest_seq = current_seq return longest_seq"},{"question":"You have been given a task to find the maximum product of any three distinct numbers in a list. The details of the problem are as follows: You are provided with an integer array `nums` which consists of `n` elements. The `nums` array can contain both positive and negative integers. Your task is to write a function that returns the maximum product of any three distinct numbers from the array. Consider the following examples: Example 1: Input: nums = [1, 2, 3] Output: 6 Explanation: The product of 1, 2, and 3 is 6. Example 2: Input: nums = [1, 2, 3, 4] Output: 24 Explanation: The product of 2, 3, and 4 is 24. Example 3: Input: nums = [-1, -2, -3, -4] Output: -6 Explanation: The product of -1, -2, and -3 is -6. Example 4: Input: nums = [-1, -2, 1, 2, 3] Output: 6 Explanation: The product of -1, -2, and 3 is 6. The problem has the following constraints: - 3 <= nums.length <= 10^4 - -10^3 <= nums[i] <= 10^3","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three distinct numbers in the array nums. nums.sort() # The maximum product can be either by: # - Multiplying the three largest positive numbers # - Multiplying the two smallest (most negative) numbers and the largest positive number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Given an integer `n`, write a Python function `divisor_pairs(n)` which returns a list of tuples where each tuple contains two positive integers `(a, b)` such that `a * b = n` and `a <= b`. The list should be of tuples sorted in ascending order by the first element of each tuple. Your function should also handle potential large inputs efficiently. Do not use extra space beyond what is necessary to store the result. # Example ```python divisor_pairs(16) ``` Output: ```python [(1, 16), (2, 8), (4, 4)] ``` # Constraints: 1. `n` is a positive integer within the range [1, 10^7].","solution":"def divisor_pairs(n): Returns a list of tuples where each tuple contains two positive integers `(a, b)` such that `a * b = n` and `a <= b`. result = [] for a in range(1, int(n**0.5) + 1): if n % a == 0: b = n // a if a <= b: result.append((a, b)) return result"},{"question":"Design a function `calculate_frequency` that takes a string `s` as input and returns a dictionary where each key is a unique character from the string and its value is the frequency of that character in the string. The function should ignore spaces and be case-insensitive (i.e., \'A\' and \'a\' should be treated as the same character). For example, given the input string \\"Hello World\\", the output should be `{\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}`. ```python # Example function usage def calculate_frequency(s): pass result = calculate_frequency(\\"Hello World\\") print(result) # Expected output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def calculate_frequency(s): Returns a dictionary where each key is a unique character from the string s (ignoring spaces and case), and its value is the frequency of that character. frequency_dict = {} for char in s.lower(): if char.isalpha(): if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Given a list of integers, the goal is to segment the list into consecutive increasing subsequences. For instance, given the list `[1, 2, 3, 1, 2, 3, 4, 1]`, the function should output `[[1, 2, 3], [1, 2, 3, 4], [1]]`. Consecutive means the numbers in the subsequence must be in a non-decreasing order, and the subsequence ends when the next number is less than or equal to the last number of the current subsequence. Implement the function `segment_increasing_subsequences(numbers)` that performs this task. The function should have the following signature: ```python def segment_increasing_subsequences(numbers): # your code here ``` # Input - `numbers` (list): A list of integers (1 ≤ len(numbers) ≤ 10^4, -10^4 ≤ numbers[i] ≤ 10^4). # Output - Returns a list of lists, where each sublist is a consecutive increasing subsequence. **Example:** ```python print(segment_increasing_subsequences([1, 2, 3, 1, 2, 3, 4, 1])) ``` Output: ```python [[1, 2, 3], [1, 2, 3, 4], [1]] ``` **Note:** - The function should efficiently handle the constraints and provide the correct segmentation of consecutive increasing subsequences. - The function should minimize unnecessary computations and handle edge cases properly.","solution":"def segment_increasing_subsequences(numbers): Segments the list of integers into consecutive increasing subsequences. if not numbers: return [] result = [] current_sequence = [numbers[0]] for i in range(1, len(numbers)): if numbers[i] > numbers[i - 1]: current_sequence.append(numbers[i]) else: result.append(current_sequence) current_sequence = [numbers[i]] result.append(current_sequence) return result"},{"question":"Write a function that takes a string as input and returns the longest word in the string. If there are multiple words of the same length, return the one that appears first. Words are defined as sequences of characters separated by spaces. For example, for the input \\"Write a program that finds the longest word\\", the output should be \\"program\\".","solution":"def longest_word(s): Returns the longest word in the input string. If there are multiple words of the same length, return the one that appears first. :param s: input string :return: longest word in the input string words = s.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a Python function that flattens a nested list of arbitrary depth. The function should take a list as an input and return a new list that contains all the elements from the original list, but with all nested structures removed. The function should handle edge cases like empty lists, lists with single elements, and deeply nested lists. Do not use any built-in functions that directly perform the flattening operation. For instance, for the list: lst = [1, [2, [3, 4], 5], 6, [7, 8, [9, 10]]]. The output should be: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].","solution":"def flatten(lst): Flattens a nested list of arbitrary depth. Parameters: lst (list): A nested list which can contain other lists Returns: list: A flattened list with no nested structures flattened_list = [] def _flatten(sub_lst): for item in sub_lst: if isinstance(item, list): _flatten(item) else: flattened_list.append(item) _flatten(lst) return flattened_list"},{"question":"Given an array of integers, write a function to determine if it contains any duplicate elements. If any value appears at least twice in the array, return `true`. If every element is distinct, return `false`. Example: - Input: [1, 2, 3, 1] - Output: true - Input: [1, 2, 3, 4] - Output: false","solution":"def contains_duplicate(nums): Determine if an array contains any duplicate elements. Args: nums (List[int]): List of integers. Returns: bool: True if there are duplicates, False otherwise. return len(nums) != len(set(nums))"},{"question":"Write a function to find the first non-repeating character in a given string. The function should return the character itself if there is a non-repeating character or `None` if all characters are repeating. Ensure your solution has a linear time complexity. Consider edge cases, such as an empty string or strings with all repeating characters.","solution":"def first_non_repeating_character(string): Returns the first non-repeating character in the given string. If all characters are repeating, returns None. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(string) # Find the first character that has a count of 1 for char in string: if char_count[char] == 1: return char # If no non-repeating character is found, return None return None"},{"question":"Write a code that determines if a given binary tree has a \\"zigzag level order traversal.\\" A zigzag traversal is when nodes at each level are visited in an alternating left-to-right and right-to-left order. The function should take as input the root of the binary tree and output the correct zigzag level order traversal. For example, given the tree: ``` 1 / 2 3 / / 4 5 6 7 ``` The output should be: ``` [[1], [3, 2], [4, 5, 6, 7]] ``` Ensure your function handles edge cases, such as an empty tree, appropriately.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): if not root: return [] results = [] current_level = deque([root]) left_to_right = True while current_level: level_result = [] next_level = deque() while current_level: node = current_level.popleft() level_result.append(node.val) if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) if not left_to_right: level_result.reverse() results.append(level_result) current_level = next_level left_to_right = not left_to_right return results"},{"question":"<p>Given a list of n integers [a_1, a_2, ldots, a_n], a sublist is defined as any contiguous portion of this list. For example, [a_2, a_3, a_4] is a sublist of [a_1, a_2, a_3, a_4, a_5] but [a_1, a_3] is not. The challenge is to find a sublist which has a sum exactly equal to a given integer S. If multiple sublists have this property, return any one of them. If no sublist sums to S, return an empty list.</p> <p>Write a function: <pre> def find_sublist_with_sum(arr: List[int], S: int) -> List[int]: </pre> The function should: - Take a list of integers arr of length n (1 leq n leq 10^5) and an integer S (-10^9 leq S leq 10^9). - Return a list containing the elements of the sublist that sums to S if such a sublist exists, otherwise return an empty list. <p>Examples:</p> <pre> find_sublist_with_sum([1, 2, 3, 4, 5], 9) == [2, 3, 4] find_sublist_with_sum([1, -1, 2, -2, 3, 4], 3) == [3] find_sublist_with_sum([1, 2, 3], 7) == [] </pre>","solution":"from typing import List def find_sublist_with_sum(arr: List[int], S: int) -> List[int]: Finds a sublist in the given list `arr` that sums up to `S`. If multiple sublists have this property, returns any one of them. If no sublist sums to `S`, returns an empty list. prefix_sum = 0 prefix_sum_map = {0: -1} # A map to store prefix sums and their first occurrence index for i, num in enumerate(arr): prefix_sum += num if (prefix_sum - S) in prefix_sum_map: # Found the sublist sum equals to S start_index = prefix_sum_map[prefix_sum - S] + 1 return arr[start_index:i+1] prefix_sum_map[prefix_sum] = i return [] # Example usage: # print(find_sublist_with_sum([1, 2, 3, 4, 5], 9)) # Output: [2, 3, 4]"},{"question":"Implement a function that simulates a simple version of the game \\"FizzBuzz\\". The function should take an integer `n` and return a list of strings representing the numbers from `1` to `n`. However, for multiples of 3, it should output \\"Fizz\\" instead of the number, and for multiples of 5, it should output \\"Buzz\\". For numbers which are multiples of both 3 and 5, it should output \\"FizzBuzz\\". Write test cases to validate your solution. Example Input: 15 Example Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"]","solution":"def fizzbuzz(n): Returns a list of strings representing the numbers from 1 to n. For multiples of 3, it outputs \\"Fizz\\" instead of the number. For multiples of 5, it outputs \\"Buzz\\" instead of the number. For numbers which are multiples of both 3 and 5, it outputs \\"FizzBuzz\\". result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Create a class called `StringAnalyzer` that takes in a list of strings upon instantiation. Implement the following functionalities: 1. **Finding the Longest Word**: Create a method to find and return the longest word in the list of strings. If there are multiple words of the same length, return the first one encountered. 2. **Word Frequency**: Create a method to compute and return a dictionary where each key is a word from the list and its corresponding value is the frequency of that word\'s occurrence in the list. 3. **Anagram Groups**: Create a method to group and return anagrams from the list of strings. Anagrams should be grouped into sublists, with each sublist containing all and only the anagrams. 4. **Palindromes**: Create a method which identifies and returns all the palindromes from the list of strings. A palindrome reads the same forward and backward. **Example Usage:** ```python string_list = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"racecar\\", \\"carrace\\", \\"hello\\", \\"world\\", \\"level\\"] analyzer = StringAnalyzer(string_list) print(analyzer.find_longest_word()) # Output: \\"racecar\\" print(analyzer.word_frequency()) # Output: {\\"listen\\": 1, \\"silent\\": 1, \\"enlist\\": 1, \\"google\\": 1, \\"racecar\\": 1, \\"carrace\\": 1, \\"hello\\": 1, \\"world\\": 1, \\"level\\": 1} print(analyzer.group_anagrams()) # Output: [[\\"listen\\", \\"silent\\", \\"enlist\\"], [\\"google\\"], [\\"racecar\\", \\"carrace\\"], [\\"hello\\"], [\\"world\\"], [\\"level\\"]] print(analyzer.find_palindromes()) # Output: [\\"racecar\\", \\"level\\"] ``` Please ensure your class is well-documented and handles edge cases, such as an empty string list.","solution":"class StringAnalyzer: def __init__(self, strings): self.strings = strings def find_longest_word(self): if not self.strings: return None longest_word = max(self.strings, key=len) return longest_word def word_frequency(self): frequency = {} for word in self.strings: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency def group_anagrams(self): from collections import defaultdict anagrams = defaultdict(list) for word in self.strings: key = \'\'.join(sorted(word)) anagrams[key].append(word) return list(anagrams.values()) def find_palindromes(self): return [word for word in self.strings if word == word[::-1]]"},{"question":"Write a function that takes a list of dictionaries, each containing student names and their respective scores in a subject (\'name\' and \'score\' keys), and returns the name of the student with the highest score. If more than one student has the highest score, return the name that comes first alphabetically. Sample input: [ { \\"name\\": \\"John\\", \\"score\\": 85 }, { \\"name\\": \\"Jane\\", \\"score\\": 92 }, { \\"name\\": \\"Alice\\", \\"score\\": 92 }, { \\"name\\": \\"Bob\\", \\"score\\": 78 } ]","solution":"def get_top_student(students): Returns the name of the student with the highest score. If there are multiple students with the highest score, return the one whose name comes first alphabetically. if not students: return None top_student = None top_score = float(\'-inf\') for student in students: name = student[\'name\'] score = student[\'score\'] if score > top_score or (score == top_score and name < top_student): top_student = name top_score = score return top_student"},{"question":"Design a function that determines the most frequent character in a given string. If there is a tie for the most frequent character, return the character that comes first alphabetically. Input: A string with lower-case letters. Example Input: \\"apple\\" \\"banana\\" \\"mango\\" Output: \'p\' \'a\' \'a\'","solution":"def most_frequent_character(s): Returns the most frequent character in the string. If there is a tie, returns the character that comes first alphabetically. from collections import Counter if not s: return None frequency = Counter(s) most_frequent = min(frequency, key=lambda x: (-frequency[x], x)) return most_frequent"},{"question":"Create a function that takes a string containing a mathematical expression with the operators \'+\', \'-\', \'*\', and \'/\', and returns the result of evaluating the expression. The string can include whitespace, which should be ignored. The input string is guaranteed to be a valid expression. Example input: \\"3 + 5 / 2 - 1\\" Example output: 5.5","solution":"def evaluate_expression(expression): Evaluates a mathematical expression provided as a string and returns the result. This function handles the operators \'+\', \'-\', \'*\', and \'/\' and ignores any whitespace. Parameters: expression (str): The mathematical expression to evaluate. Returns: float: The result of the evaluated expression. try: return eval(expression) except Exception as e: raise ValueError(f\\"Invalid expression: {expression}. Error: {e}\\")"},{"question":"With Python, write a function that takes a list of integers and returns a new list containing only the unique elements from the original list, but in sorted order.","solution":"def unique_sorted_elements(lst): Returns a new list containing only the unique elements from the original list, but in sorted order. return sorted(set(lst))"},{"question":"Write a function in Python that takes a string containing multiple words, separates the words, and returns a new string where the words are sorted alphabetically. The input string will contain only lower-case letters and spaces. Ensure that spaces are only used as word separators, and there are no leading or trailing spaces. Example: Input: \\"the quick brown fox jumps over the lazy dog\\" Output: \\"brown dog fox jumps lazy over quick the the\\"","solution":"def sort_words(sentence): Takes a string containing multiple words and returns a new string where the words are sorted alphabetically. Args: sentence (str): The input string containing only lower-case letters and spaces. Returns: str: A new string with the words sorted alphabetically. words = sentence.split() sorted_words = sorted(words) return \' \'.join(sorted_words)"},{"question":"Given an integer array `arr` and an integer `k`, write a function `maxSubArraySum(arr, k)` that computes the maximum sum of a subarray with at least length `k`. The function should return the maximum sum of such a subarray. If no valid subarray exists, return 0. **Example:** ``` Input: arr = [1, 2, 3, -2, 5, -1, 6, 10], k = 3 Output: 24 Input: arr = [1, 2, 3], k = 4 Output: 0 ``` **Constraints:** - The length of array `arr` is between 1 and 10^4. - The elements of `arr` are integers and can be negative. - The integer `k` is positive and will not exceed the length of `arr`.","solution":"def maxSubArraySum(arr, k): Computes the maximum sum of a subarray with at least length k. If no valid subarray exists, returns 0. n = len(arr) if n < k: return 0 # Step 1: Compute the sum of the first `k` elements current_sum = sum(arr[:k]) max_sum = current_sum # Step 2: Create prefix sums prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Step 3: Use a sliding window to compute sums of subarrays with at least `k` length for i in range(k, n): current_sum += arr[i] max_sum = max(max_sum, current_sum) for j in range(i - k + 1): max_sum = max(max_sum, current_sum - (prefix_sum[j + 1])) return max_sum"},{"question":"Create a program that takes a list of integers and returns a new list that contains only the prime numbers from the original list. Ensure the program performs efficiently even for large lists and correctly identifies prime numbers.","solution":"def is_prime(n): Determines if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Filters the list of numbers and returns a new list containing only the prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"In a social network graph, users are represented as nodes and their friendships as undirected edges. Write a Python function to determine the largest connected component in such a graph. A connected component is a subset of nodes where there is a path between any pair of nodes within this subset. The function should return the nodes that form the largest connected component. The input to the function is a dictionary where each key is a user and the value is a list of friends of that user. Assume the graph has at least one user. Validate your function with at least three different test cases, covering different graph structures and sizes. Do not use any external graph library.","solution":"def bfs(graph, start_node): Breadth-First Search to explore all nodes in the connected component from the start_node. visited = set() queue = [start_node] while queue: node = queue.pop(0) if node not in visited: visited.add(node) queue.extend([neighbor for neighbor in graph[node] if neighbor not in visited]) return visited def largest_connected_component(social_graph): Returns the largest connected component in the social graph. visited = set() largest_component = set() for node in social_graph: if node not in visited: current_component = bfs(social_graph, node) visited.update(current_component) if len(current_component) > len(largest_component): largest_component = current_component return list(largest_component)"},{"question":"You are given an array of integers `arr` and an integer `d` which represents the maximum allowed absolute difference between the elements of any subarray. Write a function `maxSubarrayLength` that takes `arr` and `d` as input and returns the length of the longest subarray such that the absolute difference between any two elements in the subarray is less than or equal to `d`. Example 1: Input: arr = [1, 5, 6, 7, 8, 10, 12, 14, 15], d = 3 Output: 4 Explanation: The longest subarray where the difference between elements is at most 3 is [5, 6, 7, 8] with length 4. Example 2: Input: arr = [10, 1, 2, 4, 7, 2], d = 5 Output: 4 Explanation: The longest subarray where the difference between elements is at most 5 is [2, 4, 7, 2] with length 4. Another option is [1, 2, 4, 7]. Constraints: - `1 <= arr.length <= 105` - `-109 <= arr[i] <= 109` - `0 <= d <= 109`","solution":"from collections import deque def maxSubarrayLength(arr, d): Returns the length of the longest subarray such that the absolute difference between any two elements in the subarray is less than or equal to d. if not arr: return 0 min_queue = deque() max_queue = deque() left = 0 max_len = 0 for right, num in enumerate(arr): while min_queue and num < min_queue[-1]: min_queue.pop() min_queue.append(num) while max_queue and num > max_queue[-1]: max_queue.pop() max_queue.append(num) while max_queue[0] - min_queue[0] > d: if arr[left] == min_queue[0]: min_queue.popleft() if arr[left] == max_queue[0]: max_queue.popleft() left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"def count_common_words(s1, s2): \'\'\' Given two strings containing sentences, this function should return the number of unique words that are common between both sentences. Assume sentences are case-insensitive and words are separated by spaces. Non-alphabetical characters should be treated as part of the word (e.g., \\"it\'s\\" is one word). count_common_words(\\"Hello world\\", \\"hello everyone\\") should yield a result of 1 (since \'hello\' is common in both sentences) count_common_words(\\"The quick brown fox\\", \\"the quick dog\\") will produce a final value of 2 (\'the\' and \'quick\' are common) count_common_words(\\"Hi there\\", \\"Hello there\\") should return 1 because \'there\' is common in both sentences count_common_words(\\"No common words\\", \\"Different phrase\\") would return 0 as there are no common words count_common_words(\\"\\", \\"\\") would derive an output of 0 since both strings are empty If either string is empty, the function will yield a result of 0. \'\'\'","solution":"def count_common_words(s1, s2): Given two strings containing sentences, this function returns the number of unique words that are common between both sentences. if not s1 or not s2: return 0 words1 = set(s1.lower().split()) words2 = set(s2.lower().split()) common_words = words1.intersection(words2) return len(common_words)"},{"question":"Write a function that takes a string containing a mathematical expression in infix notation (e.g., \\"3 + 2 * 2\\") and returns the result of the evaluation. The function should handle the basic mathematical operations: addition (+), subtraction (-), multiplication (*), and division (/). The expression will contain non-negative integers only and will not include any parentheses. Ensure that the operations respect the standard operator precedence (i.e., multiplication and division take precedence over addition and subtraction). Clean error handling should be implemented for any invalid expressions.","solution":"def eval_infix(expression): Evaluates a mathematical expression in infix notation with basic operations and respects the standard operator precedence. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': if right == 0: raise ZeroDivisionError(\\"division by zero\\") values.append(left / right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] in (\'+\', \'-\', \'*\', \'/\'): while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) else: raise ValueError(f\\"Invalid character in expression: {expression[i]}\\") i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Devise a function that accepts a list of strings and returns a new list compiled by removing all leading and trailing whitespace from each string in the original list. The function should handle edge cases such as null input, empty strings, and strings that contain only whitespace. Additionally, the function should preserve the order of the original list and be able to manage inputs containing Unicode and special characters. The function should be optimized for performance, given a substantial number of strings in the list, and demonstrate the ability to handle mixed character sets efficiently.","solution":"def trim_strings(string_list): Removes leading and trailing whitespace from each string in the input list. Parameters: string_list (list): A list of strings to be trimmed. Returns: list: A new list with trimmed strings. if string_list is None: return [] return [s.strip() for s in string_list]"},{"question":"Given a list of intervals representing lines on a 2D plane, merge all overlapping intervals and return the resulting list of non-overlapping intervals. Each interval is represented as a list of two integers [start, end], where start represents the starting point and end represents the ending point of the interval. Additionally, implement functions to add a new interval and to remove an existing interval from the list, ensuring that after each operation, the list of intervals remains merged properly. Example 1: Input: intervals = [[1,3], [2,4], [5,7]] Output: [[1,4], [5,7]] Explanation: Intervals [1,3] and [2,4] overlap, so they are merged into [1,4]. Example 2: Input: intervals = [[1,5], [6,9]], addInterval = [2,6] Output: [[1,9]] Explanation: Intervals [1,5] and [6,9] remain as they are, while [2,6] is added and merged into [1,9]. Example 3: Input: intervals = [[1,4], [5,8], [9,12]], removeInterval = [5,8] Output: [[1,4], [9,12]] Explanation: Interval [5,8] is removed, and the resulting list of intervals is [[1,4], [9,12]]. Constraints: 1. The number of intervals is between `1` and `10^4`. 2. Each interval\'s start and end values will be between `0` and `10^5`. 3. The addInterval and removeInterval values will be between `0` and `10^5`.","solution":"def merge_intervals(intervals): Merges the overlapping intervals. if not intervals: return [] intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] if current[0] <= last_merged[1]: last_merged[1] = max(last_merged[1], current[1]) else: merged.append(current) return merged def add_interval(intervals, new_interval): Adds a new interval and merges if there are overlapping intervals. intervals.append(new_interval) return merge_intervals(intervals) def remove_interval(intervals, remove_interval): Removes an interval and then merges the rest if necessary. new_intervals = [interval for interval in intervals if interval != remove_interval] return merge_intervals(new_intervals)"},{"question":"Write a function `analyze_string(s: str) -> dict` that takes a string as input and returns a dictionary with the following statistics: - `length`: The length of the string. - `num_vowels`: The number of vowels in the string. - `num_consonants`: The number of consonants in the string. - `num_digits`: The number of digits in the string. - `num_special_chars`: The number of special characters (anything that is not a letter or digit) in the string. For example, calling `analyze_string(\\"Hello World! 123\\")` should return: ``` { \'length\': 16, \'num_vowels\': 3, \'num_consonants\': 7, \'num_digits\': 3, \'num_special_chars\': 3 } ```","solution":"def analyze_string(s: str) -> dict: Analyzes the input string and returns a dictionary with the number of vowels, consonants, digits, and special characters in the string. vowels = \\"aeiouAEIOU\\" digits = \\"0123456789\\" special_chars = 0 num_vowels = 0 num_consonants = 0 num_digits = 0 for char in s: if char in vowels: num_vowels += 1 elif char.isalpha(): num_consonants += 1 elif char.isdigit(): num_digits += 1 else: special_chars += 1 return { \'length\': len(s), \'num_vowels\': num_vowels, \'num_consonants\': num_consonants, \'num_digits\': num_digits, \'num_special_chars\': special_chars }"},{"question":"Implement a Python function that calculates and returns the factorial of a given non-negative integer using recursion. The factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`, denoted as `n!`. For example, if the input number is `5`, the factorial will be `5*4*3*2*1 = 120`. Ensure your function handles edge cases such as the factorial of `0`, which is defined as `1`. Provide a faulty implementation and then ask for a correct one. Faulty implementation: ```python def calculate_factorial(n): if n == 0: return 0 else: return n * calculate_factorial(n-1) ``` Correct the implementation so that it accurately computes the factorial for any non-negative integer. Note: The function should be named `calculate_factorial` and take a single argument `n`. Please also include basic test cases to verify the correctness of your function.","solution":"def calculate_factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 else: return n * calculate_factorial(n - 1)"},{"question":"Create a Python function `calculate_median_age` that accepts a dictionary mapping names to ages and returns the median age. The median age is defined as the middle value when the ages are sorted. If there is an even number of ages, the median is the average of the two middle values. Ensure your function handles dictionaries with varying numbers of entries. Provide relevant test cases demonstrating the functionality of the function.","solution":"def calculate_median_age(ages_dict): Returns the median age from a dictionary mapping names to ages. Parameters: ages_dict (dict): A dictionary where keys are names (str) and values are ages (int). Returns: float: Median age. if not ages_dict: return None ages = sorted(ages_dict.values()) n = len(ages) mid = n // 2 if n % 2 == 0: return (ages[mid - 1] + ages[mid]) / 2.0 else: return ages[mid]"},{"question":"Create a program that simulates a basic banking system. The system should support creating new accounts, making deposits, withdrawing funds, and checking the balance. Each account should have a unique account number and an associated balance. Ensure your program includes appropriate error handling, such as preventing withdrawals that exceed the account balance and checking for valid account numbers during transactions. Additionally, provide a written explanation of your design choices and any trade-offs you encountered while implementing the system.","solution":"class Account: def __init__(self, account_number, initial_balance=0): self.account_number = account_number self.balance = initial_balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount def check_balance(self): return self.balance class Bank: def __init__(self): self.accounts = {} def create_account(self, account_number, initial_balance=0): if account_number in self.accounts: raise ValueError(\\"Account number already exists\\") self.accounts[account_number] = Account(account_number, initial_balance) def get_account(self, account_number): if account_number not in self.accounts: raise ValueError(\\"Invalid account number\\") return self.accounts[account_number]"},{"question":"Write a Python function that takes in a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. Demonstrate your solution with an example list and explain how your function handles edge cases such as an empty list or a list with only one unique integer. ```python def count_integers(arr): count_dict = {} for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict # Example usage: example_list = [1, 2, 2, 3, 4, 4, 4] print(count_integers(example_list)) ``` # Explanations: - **Edge case: Empty list**: The function should return an empty dictionary. - **Edge case: One unique integer**: The function should return a dictionary with that integer as the key and 1 as its value. - The function iterates through the list, updating the count for each integer encountered. In the example provided, the output should be: ```python {1: 1, 2: 2, 3: 1, 4: 3} ```","solution":"def count_integers(arr): Takes in a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. count_dict = {} for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict # Example usage: example_list = [1, 2, 2, 3, 4, 4, 4] print(count_integers(example_list))"},{"question":"Design a Python function that takes a list of strings and returns a new list with the length of each string. The function should exclude any non-string elements from the input list without causing an error. Ensure the output list contains lengths of strings in the same order as the input list. Additionally, extend the function to return the longest string(s) in the input list as a separate list. If there are multiple strings with the maximum length, all of them should be included in the result. Below is a Python code that attempts to achieve the initial part but has shortcomings: ```python def string_lengths(input_list): lengths = [] for item in input_list: lengths.append(len(item)) return lengths ``` Identify and correct any errors in the given code, and enhance the function to also return the longest string(s) from the input list. Provide the final result as a tuple with the first element being the list of string lengths and the second being the list of longest string(s).","solution":"def string_lengths(input_list): Given a list of elements, return a tuple with two elements: 1. A list with the length of each string in the input list. 2. A list of the longest string(s) in the input list. Non-string elements are ignored. lengths = [] strings = [] for item in input_list: if isinstance(item, str): lengths.append(len(item)) strings.append(item) if not strings: return (lengths, []) max_length = max(lengths) longest_strings = [s for s in strings if len(s) == max_length] return (lengths, longest_strings)"},{"question":"Write a function that takes an integer array `nums` and a target integer `target` as input and returns the indices of the two numbers such that they add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Function Signature: ```python def two_sum(nums: List[int], target: int) -> List[int]: ``` # Example ```python assert two_sum([2, 7, 11, 15], 9) == [0, 1] assert two_sum([3, 2, 4], 6) == [1, 2] assert two_sum([3, 3], 6) == [0, 1] ``` # Constraints - 2 <= `nums.length` <= 10^4 - -10^9 <= `nums[i]` <= 10^9 - -10^9 <= `target` <= 10^9 - Only one valid answer exists.","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns indices of the two numbers in the list `nums` that add up to the `target`. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Given a string `s` and a list of indices `indices`, you need to reorder the string `s` such that the character at the `i-th` position in the original string moves to the position `indices[i]` in the reordered string. Return the reordered string. # Example: ```plaintext Input: s = \\"abc\\", indices = [2, 0, 1] Output: \\"bca\\" Explanation: The character \'a\' is moved to index 2, \'b\' is moved to index 0, and \'c\' is moved to index 1. ``` ```plaintext Input: s = \\"aiohn\\", indices = [3, 1, 4, 2, 0] Output: \\"nihao\\" Explanation: The character \'a\' is moved to index 3, \'i\' is moved to index 1, \'o\' is moved to index 4, \'h\' is moved to index 2, and \'n\' is moved to index 0. ``` # Constraints: - `s.length == indices.length` - `1 <= s.length <= 100` - `indices` contains all integers from `0` to `s.length - 1` Your task is to implement a function that achieves the reordering of the string as described.","solution":"def reorder_string(s, indices): Reorder the string s such that the character at the i-th position moves to the position indices[i]. Parameters: s (str): The input string. indices (list of int): The list of indices indicating new positions for each character in s. Returns: str: The reordered string. # Initialize the result list with the same length as s. result = [\'\'] * len(s) # Iterate over the string and place each character at the new position. for char, index in zip(s, indices): result[index] = char # Join the list into a single string and return. return \'\'.join(result)"},{"question":"Design a Python function that takes in a string and returns another string, where each character is shifted to the right by one position in the alphabet. Ensure that \'z\' loops back around to \'a\'. For example, \'hello\' should become \'ifmmp\' and \'xyz\' should become \'yza\'. Implement input validation to handle edge cases like empty strings and non-alphabetic characters.","solution":"def shift_string_right(s): Returns a new string where each character is shifted to the right by one position in the alphabet. Non-alphabetic characters are not altered. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") result = [] for char in s: if \'a\' <= char <= \'z\': shifted_char = chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\')) result.append(shifted_char) elif \'A\' <= char <= \'Z\': shifted_char = chr((ord(char) - ord(\'A\') + 1) % 26 + ord(\'A\')) result.append(shifted_char) else: result.append(char) return \'\'.join(result)"},{"question":"Develop a function that accepts a dictionary and a list of keys. The function should return a new dictionary containing only the key-value pairs corresponding to the keys from the input list that exist in the original dictionary. If a key from the list is not found in the dictionary, it should be skipped. The order of the key-value pairs in the result should match the order of the keys provided in the input list. Additionally, if the first argument is not a dictionary, the function should raise a ValueError.","solution":"def filter_dict_by_keys(input_dict, keys): Returns a dictionary containing only the key-value pairs corresponding to the keys from the input list that exist in the original dictionary. If the first argument is not a dictionary, raises a ValueError. if not isinstance(input_dict, dict): raise ValueError(\\"First argument must be a dictionary\\") return {key: input_dict[key] for key in keys if key in input_dict}"},{"question":"Given an array of integers, find the length of the longest subarray in which the absolute difference between any two elements is no greater than the specified threshold. Your task is to implement a function that determines this length efficiently.","solution":"def longest_subarray_with_threshold(nums, threshold): from collections import deque max_deque, min_deque = deque(), deque() left = 0 longest = 0 for right, num in enumerate(nums): while max_deque and nums[max_deque[-1]] <= num: max_deque.pop() max_deque.append(right) while min_deque and nums[min_deque[-1]] >= num: min_deque.pop() min_deque.append(right) while nums[max_deque[0]] - nums[min_deque[0]] > threshold: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() longest = max(longest, right - left + 1) return longest"},{"question":"Write a Python function that takes a list of strings and an integer `k` as input. The function should return a list of the `k` most frequently occurring strings in the input list. If two strings have the same frequency, their order in the output list should follow their first occurrence in the input list. The program should include: - Input validation to ensure that the list contains only strings and that `k` is a non-negative integer. - Handling of edge cases where `k` is greater than the number of unique strings in the list. - Efficient computation to find the most frequent strings considering both time and space complexity. Example: If the input list is `[\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"]` and `k = 2`, the output should be `[\\"apple\\", \\"banana\\"]`. Additionally, provide the complexity analysis of your solution and discuss its performance with different input sizes and edge cases.","solution":"from collections import Counter def k_most_frequent_strings(lst, k): Returns a list of the k most frequently occurring strings in lst. Args: lst (list): List of strings. k (int): Non-negative integer. Returns: list: List of k most frequent strings in the given list. # Input validation if not all(isinstance(item, str) for item in lst): raise ValueError(\\"All elements of the input list must be strings.\\") if not isinstance(k, int) or k < 0: raise ValueError(\\"k must be a non-negative integer.\\") # Count frequencies of each string freq = Counter(lst) # Sort by frequency first, then by their first occurrence in the list sorted_items = sorted(freq.items(), key=lambda item: (-item[1], lst.index(item[0]))) # Extract the top k items return [item[0] for item in sorted_items[:k]]"},{"question":"Write a Python function called `can_form_palindrome` that takes a string as input and returns `True` if the given string can be rearranged to form a palindrome, and `False` otherwise. For the purpose of this question, you can ignore spaces, punctuation, and case-sensitivity. Examples: ```python can_form_palindrome(\\"A man, a plan, a canal, Panama\\") # Should return True can_form_palindrome(\\"No lemon, no melon\\") # Should return True can_form_palindrome(\\"Hello, World!\\") # Should return False ```","solution":"from collections import Counter import re def can_form_palindrome(s): Returns True if the given string can be rearranged to form a palindrome. Ignores spaces, punctuation, and is case-insensitive. cleaned_s = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() char_count = Counter(cleaned_s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Create a Python function that accepts a list of strings and returns a dictionary where the keys are the unique words from all the strings and the values are the counts of how many times each word appears. Normalize the words to lowercase and disregard any punctuation.","solution":"import re from collections import defaultdict def count_words(strings): Returns a dictionary where the keys are the unique words from all the strings and the values are the counts of how many times each word appears. Normalizes words to lowercase and disregards any punctuation. :param strings: List of strings :return: Dictionary with word counts word_count = defaultdict(int) for string in strings: # Normalize to lowercase and remove punctuation cleaned_string = re.sub(r\'[^ws]\', \'\', string.lower()) words = cleaned_string.split() for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Create a function that determines the number of unique words in a given string. Words are defined as sequences of characters separated by spaces or punctuation marks. Consider only the alphanumeric characters and handle case insensitivity (e.g., \\"Hello\\" and \\"hello\\" should be counted as the same word).","solution":"import re def count_unique_words(s): Returns the number of unique words in the given string s. Words are case insensitive and only alphanumeric characters are considered. # Convert the string to lowercase s = s.lower() # Use regex to find all words which consist of alphanumeric characters words = re.findall(r\'bw+b\', s) # Use a set to find the unique words unique_words = set(words) return len(unique_words)"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. Implement a helper function `is_prime(n)` to determine if a given number is prime. The function signature should be `filter_primes(numbers: List[int]) -> List[int]`.","solution":"from typing import List def is_prime(n: int) -> bool: Determine if a given number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers: List[int]) -> List[int]: Returns a list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that accepts an array of strings and a target string, and returns an array of indices where the target string appears in the input array. If the target string is not found, return an array with a single element -1. Your function should also handle invalid inputs, such as the input array not being an array of strings, or the target not being a string. For example: For arr = [\\"apple\\", \\"banana\\", \\"apple\\", \\"cherry\\"], target = \\"apple\\", the function should return [0, 2]. For arr = [\\"apple\\", \\"banana\\", \\"cherry\\"], target = \\"orange\\", the function should return [-1]. For arr = [\\"apple\\", 123, \\"banana\\"], target = \\"apple\\", or for arr = [\\"apple\\", \\"banana\\"], target = 123, the function should handle these cases properly.","solution":"def find_target_indices(arr, target): Returns a list of indices where the target string appears in the input array of strings. If the target string is not found, returns [-1]. Handles invalid inputs by returning [-1]. if not isinstance(target, str) or not all(isinstance(item, str) for item in arr): return [-1] indices = [i for i, val in enumerate(arr) if val == target] return indices if indices else [-1]"},{"question":"Write a Python function that takes a list of integers and returns the largest contiguous subarray sum. The function should handle both positive and negative integers and should have a time complexity of O(n). Test your function with at least three different cases, including edge cases where the list is empty or contains only negative numbers. Example: - Given the input `[-2,1,-3,4,-1,2,1,-5,4]`, the function should return `6`, which is the sum of the subarray `[4,-1,2,1]`. - Given the input `[1,2,3,4]`, the function should return `10`, which is the sum of the subarray `[1,2,3,4]`. - Given the input `[-1,-2,-3,-4]`, the function should return `-1`, which is the sum of the subarray `[-1]`.","solution":"def max_contiguous_subarray_sum(nums): Returns the largest sum of a contiguous subarray within the given list of integers. The function implements Kadane\'s Algorithm and runs in O(n) time complexity. :param nums: A list of integers :return: The largest sum of a contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Design a function that, given an N x N integer matrix, rotates the matrix 90 degrees clockwise. The transformation should be done in-place, i.e., without using any extra space for another matrix. Test your function against multiple test cases to ensure its correctness. **Input:** - An integer N (1 ≤ N ≤ 100), denoting the size of the matrix. - An N x N matrix of integers. **Output:** - The N x N matrix after being rotated 90 degrees clockwise. **Example:** ```python # Input N = 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Output [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Implement the method in Python and include multiple test cases to showcase the function’s robustness.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given N x N matrix 90 degrees clockwise in-place. N = len(matrix) for layer in range(N // 2): first = layer last = N - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] # save top # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top # right <- saved top return matrix"},{"question":"Write a Python function that takes a list of integers and returns a list of unique triplets (three integers) that sum up to zero. Each triplet should be sorted in ascending order, and the returned list of triplets should not contain duplicate triplets. Example input: [-1, 0, 1, 2, -1, -4] Expected output: [[-1, -1, 2], [-1, 0, 1]]","solution":"def three_sum(nums): Given a list of integers, returns a list of unique triplets that sum up to zero. Parameters: nums (list): List of integers. Returns: list: List of unique triplets that sum up to zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return result"},{"question":"Write a function in Python that takes a string as input and returns the longest substring without repeating characters. Provide the function signature and a brief explanation of your approach.","solution":"def longest_substring_without_repeating_characters(s: str) -> str: Returns the longest substring without repeating characters in the input string. :param s: Input string :return: Longest substring without repeating characters start = 0 max_len = 0 max_substr = \\"\\" char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end if end - start + 1 > max_len: max_len = end - start + 1 max_substr = s[start:end+1] return max_substr"},{"question":"Write a function that takes a list of strings and returns a new list where each string is reversed, but the relative order of the strings is preserved. For example, given the input `[\\"hello\\", \\"world\\"]`, the function should return `[\\"olleh\\", \\"dlrow\\"]`.","solution":"def reverse_strings(strings): Takes a list of strings and returns a new list where each string is reversed, but the relative order of the strings is preserved. :param strings: List of strings :return: List of reversed strings return [s[::-1] for s in strings]"},{"question":"Create a function `find_median_sorted_arrays` that takes in two sorted arrays of integers `arr1` and `arr2` and returns the median of the combined sorted array. The overall run-time complexity should be O(log(min(n,m))), where `n` and `m` are the lengths of `arr1` and `arr2` respectively. Provide test cases to validate the correctness of the implemented function.","solution":"def find_median_sorted_arrays(arr1, arr2): Returns the median of two sorted arrays. :param arr1: List[int], a sorted array of integers :param arr2: List[int], a sorted array of integers :return: float, the median of the two sorted arrays if len(arr1) > len(arr2): arr1, arr2 = arr2, arr1 x, y = len(arr1), len(arr2) low, high = 0, x while low <= high: partitionX = (low + high) // 2 partitionY = (x + y + 1) // 2 - partitionX maxX = float(\'-inf\') if partitionX == 0 else arr1[partitionX - 1] minX = float(\'inf\') if partitionX == x else arr1[partitionX] maxY = float(\'-inf\') if partitionY == 0 else arr2[partitionY - 1] minY = float(\'inf\') if partitionY == y else arr2[partitionY] if maxX <= minY and maxY <= minX: if (x + y) % 2 == 0: return (max(maxX, maxY) + min(minX, minY)) / 2 else: return max(maxX, maxY) elif maxX > minY: high = partitionX - 1 else: low = partitionX + 1 raise ValueError(\\"Input arrays are not sorted\\")"},{"question":"Given a string, write a method to determine if it can be rearranged to form a palindrome. Ignore spaces and treat uppercase and lowercase letters as equal. You may not use any built-in string manipulation methods or libraries to achieve this. Additionally, provide a test case to validate the solution. Example: Input: \\"Tact Coa\\" Output: True (Examples of palindromes: \\"tacocat\\", \\"atcocta\\")","solution":"def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. Ignore spaces and treat uppercase and lowercase letters as equal. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. # Create a dictionary to count occurrences of each character char_count = {} for char in s: if char == \' \': continue char = char.lower() if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with an odd number of occurrences odd_count = 0 for count in char_count.values(): if count % 2 == 1: odd_count += 1 if odd_count > 1: return False return True"},{"question":"Write a function that takes a string and an integer `n` as parameters. The function should return a new string where the first `n` characters of the original string are shifted to the end of the string. If `n` is greater than the length of the string, the function should return the original string. Additionally, provide a piece of code with a few logical errors and inadequate handling of edge cases. Correct those errors and improve the code by adding necessary validations and optimizations to ensure the function performs as expected. Example: ```python def shift_string(s, n): if n > len(s): return s return s[n:] + s[:n] # Testing the function print(shift_string(\\"python\\", 2)) # Output should be \\"thonpy\\" print(shift_string(\\"coding\\", 10)) # Output should be \\"coding\\" ``` Debug and enhance the function to handle cases where `n` is negative or other invalid inputs gracefully.","solution":"def shift_string(s, n): This function takes a string `s` and an integer `n` and returns a new string where the first `n` characters of the original string are shifted to the end of the string. If `n` is greater than the length of the string or negative, it returns the original string. # Validate input types if not isinstance(s, str) or not isinstance(n, int): raise TypeError(\\"Input must be a string and an integer.\\") # If n is outside the valid range, return the original string if n < 0 or n > len(s): return s return s[n:] + s[:n]"},{"question":"Create a function that takes an array of integers and a target integer. The function should determine whether there are two distinct elements in the array that sum up to the target. If such elements exist, return their indices as a tuple. If no such elements exist, return `None`. The function should handle negative numbers and should work with a time complexity better than O(n^2). ```python def find_two_sum(arr, target): # Your code here # Example usage: # arr = [2, 7, 11, 15] # target = 9 # Output: (0, 1) ```","solution":"def find_two_sum(arr, target): Given an array of integers and a target integer, determine whether two distinct elements in the array sum up to the target. If such elements exist, return their indices as a tuple. If no such elements exist, return None. :param arr: List of integers. :param target: Target sum. :return: Tuple of indices or None. # Dictionary to store the potential pair values and their indices value_to_index = {} for i, num in enumerate(arr): # Calculate the complement that would sum to the target complement = target - num if complement in value_to_index: return (value_to_index[complement], i) value_to_index[num] = i return None"},{"question":"Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. Example 1: Input: s = \\"babad\\" Output: \\"bab\\" Explanation: \\"aba\\" is also a valid answer. Example 2: Input: s = \\"cbbd\\" Output: \\"bb\\" Constraints: `1 <= s.length <= 1000` `s consist of only digits and English letters (lower-case and/or upper-case)`.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. n = len(s) if n <= 1: return s start, end = 0, 0 def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): left1, right1 = expand_around_center(i, i) left2, right2 = expand_around_center(i, i + 1) if right1 - left1 > end - start: start, end = left1, right1 if right2 - left2 > end - start: start, end = left2, right2 return s[start:end + 1]"},{"question":"Implement a Python function that takes two input lists and generates a new list containing their pairwise sum, but only at even indices. If the input lists are of different lengths, truncate the longer list to match the length of the shorter one before computing the pairwise sum.","solution":"def pairwise_sum_even_indices(list1, list2): Returns a new list containing pairwise sums of elements from list1 and list2 but only at even indices. If the two lists are of different lengths, truncate the longer list to the length of the shorter one. min_length = min(len(list1), len(list2)) truncated_list1 = list1[:min_length] truncated_list2 = list2[:min_length] result = [] for i in range(0, min_length, 2): result.append(truncated_list1[i] + truncated_list2[i]) return result"},{"question":"Write a Python function that simulates a basic ATM. The function should accept a series of commands formatted as strings and return the resulting balance. The commands are as follows: - \\"DEPOSIT amount\\": Adds the specified amount to the balance. - \\"WITHDRAW amount\\": Deducts the specified amount from the balance if sufficient funds are available. If not, return an \\"Insufficient funds\\" message. - \\"BALANCE\\": Returns the current balance. The function should also gracefully handle any invalid commands or amounts, returning an appropriate error message. Use initial balance as 0.","solution":"def atm_simulation(commands): Simulates a basic ATM based on the input commands and returns the resulting balance or appropriate messages. :param commands: List of command strings for the ATM operations. :return: The resulting balance or appropriate messages after executing all commands. balance = 0 results = [] for command in commands: parts = command.split() if len(parts) == 0: results.append(\\"Invalid command\\") continue action = parts[0].upper() if action == \\"DEPOSIT\\": if len(parts) != 2 or not parts[1].isdigit() or int(parts[1]) <= 0: results.append(\\"Invalid deposit amount\\") else: amount = int(parts[1]) balance += amount results.append(f\\"Deposited {amount}\\") elif action == \\"WITHDRAW\\": if len(parts) != 2 or not parts[1].isdigit() or int(parts[1]) <= 0: results.append(\\"Invalid withdrawal amount\\") else: amount = int(parts[1]) if amount > balance: results.append(\\"Insufficient funds\\") else: balance -= amount results.append(f\\"Withdrew {amount}\\") elif action == \\"BALANCE\\": results.append(balance) else: results.append(\\"Invalid command\\") return results, balance"},{"question":"Implement a function that takes a list of integers representing elevations and returns the maximum amount of water that can be trapped after raining. The water is trapped between the elevations, provided that each element in the list represents an elevation and the width of each elevation is 1 unit. # Function Signature ```python def max_water_trapped(elevations: List[int]) -> int: ``` # Input - `elevations`: A list of integers where each integer represents an elevation. # Output - An integer representing the maximum amount of water that can be trapped. # Constraints - The length of `elevations` will be greater than or equal to 1 and less than or equal to 10^4. - Each elevation will be an integer from 0 to 10^5. # Example ```python print(max_water_trapped([0,1,0,2,1,0,1,3,2,1,2,1])) # Output: 6 ``` Explanation: The elevations form the shape where water is trapped in between. The total water trapped is 6 units. # Notes - Ensure the function is optimized for performance given the constraints. - Consider edge cases such as an array with no element or only one element, which should return 0 since no water can be trapped. Implement the function using any algorithm or data structure you find suitable.","solution":"from typing import List def max_water_trapped(elevations: List[int]) -> int: Calculates the maximum amount of water that can be trapped between the elevations. :param elevations: List of integers representing the elevations. :return: The maximum amount of water that can be trapped. if not elevations or len(elevations) < 3: return 0 left, right = 0, len(elevations) - 1 max_left, max_right = elevations[left], elevations[right] water_trapped = 0 while left < right: if elevations[left] < elevations[right]: left += 1 max_left = max(max_left, elevations[left]) water_trapped += max(0, max_left - elevations[left]) else: right -= 1 max_right = max(max_right, elevations[right]) water_trapped += max(0, max_right - elevations[right]) return water_trapped"},{"question":"Can you articulate the method to accurately derive the longest substring of a given string that consists of only identical characters? The input string will exclusively contain lowercase alphabetical characters. inputString = \\"aabbbccdaaaa\\"","solution":"def longest_identical_char_substring(inputString): Derives the longest substring consisting of identical characters. Parameters: inputString (str): The string to analyze. Returns: str: The longest substring consisting of identical characters. if not inputString: return \\"\\" max_char = inputString[0] max_length = 1 current_char = inputString[0] current_length = 1 for i in range(1, len(inputString)): if inputString[i] == current_char: current_length += 1 else: if current_length > max_length: max_length = current_length max_char = current_char current_char = inputString[i] current_length = 1 # Check the last run if current_length > max_length: return current_char * current_length else: return max_char * max_length"},{"question":"Implement a function that takes a list of tuples, where each tuple contains a student\'s name and their score in a certain subject, and returns a dictionary that maps each student\'s name to their highest score in that subject. def highest_student_scores(student_scores: List[Tuple[str, int]]) -> Dict[str, int]: Given a list of tuples where the first element is a string representing the student\'s name and the second element is an integer representing the student\'s score, return a dictionary where the keys are student names and the values are the highest score obtained by that student. If the list is empty, return an empty dictionary. If a student has multiple scores, ensure only the highest score is recorded. Parameters: student_scores (List[Tuple[str, int]]): A list of tuples containing student names and their scores. Returns: Dict[str, int]: A dictionary mapping student names to their highest scores. Example: highest_student_scores([(\\"Alice\\", 92), (\\"Bob\\", 85), (\\"Alice\\", 98), (\\"Bob\\", 80)]) -> {\\"Alice\\": 98, \\"Bob\\": 85}","solution":"from typing import List, Tuple, Dict def highest_student_scores(student_scores: List[Tuple[str, int]]) -> Dict[str, int]: Given a list of tuples where the first element is a string representing the student\'s name and the second element is an integer representing the student\'s score, return a dictionary where the keys are student names and the values are the highest score obtained by that student. If the list is empty, return an empty dictionary. If a student has multiple scores, ensure only the highest score is recorded. highest_scores = {} for name, score in student_scores: if name not in highest_scores or score > highest_scores[name]: highest_scores[name] = score return highest_scores"},{"question":"Implement a function that performs matrix multiplication. Given two matrices A (m x n) and B (n x p), where m, n, and p are positive integers, your task is to compute the resulting matrix C (m x p) as the product of A and B. Ensure that your implementation handles edge cases such as empty matrices and non-conformable matrices, raising appropriate errors when necessary.","solution":"def matrix_multiplication(A, B): Returns the result of matrix multiplication of A and B. Parameters: A (list of list of int/float): The first matrix (m x n) B (list of list of int/float): The second matrix (n x p) Returns: list of list of int/float: The resulting matrix (m x p) Raises: ValueError: If the matrices cannot be multiplied due to incompatible dimensions if not A or not B or not A[0] or not B[0]: raise ValueError(\\"Matrices cannot be empty\\") m = len(A) n = len(A[0]) if len(B) != n: raise ValueError(\\"Matrices have incompatible dimensions for multiplication\\") p = len(B[0]) # Initialize the result matrix with zeros C = [[0 for _ in range(p)] for _ in range(m)] for i in range(m): for j in range(p): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Develop a software module that analyses the multi-threaded event logs generated by a distributed system. This module should be capable of parsing log entries to identify and categorize various types of events, including system warnings, errors, and informational messages. To elevate the challenge, the module should be designed to detect potential performance bottlenecks and concurrency issues such as race conditions and deadlocks by examining the sequence and timing of log entries from different threads. The module should also be capable of aggregating log data to produce visual representations, such as timelines and heatmaps, that highlight critical events and their correlations. It should be able to pinpoint areas of the system that may require optimization by analyzing the frequency and distribution of specific types of log entries. Furthermore, the module should offer an interface for querying log data using both pre-defined filters (e.g., by event type or thread ID) and custom user-defined criteria. It should also include robust error handling to manage malformed log entries and other anomalies in the data. The module should be efficient and scalable, able to handle large volumes of log data without a significant performance hit. Implementing the module in an object-oriented programming language and ensuring it utilizes appropriate design patterns for extensibility and maintainability is essential.","solution":"import re from collections import defaultdict from datetime import datetime class LogAnalyzer: log_pattern = re.compile( r\'(?P<timestamp>d{4}-d{2}-d{2} d{2}:d{2}:d{2}),\' r\'(?P<thread_id>d+),\' r\'(?P<event_type>w+),\' r\'(?P<message>.*)\' ) def __init__(self): self.logs = [] self.threads = defaultdict(list) self.bottlenecks = [] def parse_log(self, log_entry): match = self.log_pattern.match(log_entry) if match: log_data = match.groupdict() log_data[\'timestamp\'] = datetime.strptime(log_data[\'timestamp\'], \\"%Y-%m-%d %H:%M:%S\\") log_data[\'thread_id\'] = int(log_data[\'thread_id\']) self.logs.append(log_data) self.threads[log_data[\'thread_id\']].append(log_data) else: raise ValueError(f\\"Malformed log entry: {log_entry}\\") def categorize_logs(self): categorized_logs = { \'warnings\': [], \'errors\': [], \'info\': [], } for log in self.logs: if log[\'event_type\'].lower() == \'warning\': categorized_logs[\'warnings\'].append(log) elif log[\'event_type\'].lower() == \'error\': categorized_logs[\'errors\'].append(log) elif log[\'event_type\'].lower() == \'info\': categorized_logs[\'info\'].append(log) return categorized_logs def detect_bottlenecks_and_issues(self): # Place holder for bottleneck and concurrency issue detection pass def create_timeline(self): timeline = [] for log in self.logs: timeline.append((log[\'timestamp\'], log[\'event_type\'], log[\'message\'])) timeline.sort(key=lambda x: x[0]) return timeline def query_logs(self, filter_func=None): if not filter_func: return self.logs return [log for log in self.logs if filter_func(log)] def handle_malformed_log(self, log_entry): try: self.parse_log(log_entry) except ValueError as e: print(e) def add_log_entry(self, log_entry): self.handle_malformed_log(log_entry)"},{"question":"The following Python function named `merge_sorted_arrays` takes two sorted lists of integers, `arr1` and `arr2`, and returns a single merged list that maintains the sorted order. The current implementation uses list concatenation and sorting, which is not efficient given that the input lists are already sorted. Your task is to optimize the function to merge the arrays in linear time, utilizing the properties of the sorted input. ```python def merge_sorted_arrays(arr1, arr2): merged_array = arr1 + arr2 merged_array.sort() return merged_array # Example Usage arr1 = [1, 3, 5] arr2 = [2, 4, 6] print(merge_sorted_arrays(arr1, arr2)) ``` Optimize the function to merge the arrays in O(n) time, where n is the total number of elements in `arr1` and `arr2`.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted lists into a single sorted list in O(n) time. Args: arr1 (list of int): The first sorted list. arr2 (list of int): The second sorted list. Returns: list of int: A single merged and sorted list. merged_array = [] i, j = 0, 0 n1, n2 = len(arr1), len(arr2) while i < n1 and j < n2: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append any remaining elements of arr1 while i < n1: merged_array.append(arr1[i]) i += 1 # Append any remaining elements of arr2 while j < n2: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Create a function in Python that accepts a list of integers representing the scores of games played by a player. The function should return the maximum streak of consecutively increasing scores. For instance, if the input list is `[10, 20, 30, 15, 25, 35]`, the function should return `3`, as the longest increasing streak is `[10, 20, 30]`. Your solution should efficiently handle lists with at least 100,000 elements.","solution":"def max_increasing_streak(scores): This function accepts a list of integers representing scores of games played by a player. It returns the maximum streak of consecutively increasing scores. :param scores: List[int] - a list of integers (scores) :return: int - the length of the longest streak of increasing scores if not scores: return 0 max_streak = 1 current_streak = 1 for i in range(1, len(scores)): if scores[i] > scores[i - 1]: current_streak += 1 else: max_streak = max(max_streak, current_streak) current_streak = 1 max_streak = max(max_streak, current_streak) return max_streak"},{"question":"Write a Python function that receives a string representing a mathematical expression containing only non-negative integers, addition (+) and multiplication (*) operators, and computes its result correctly respecting the mathematical precedence of the operators. The input string may have spaces which the function should ignore. You are not allowed to use the `eval` function or any other built-in function that directly evaluates the expression. **Function signature:** ```python def calculate_expression(expression: str) -> int: pass ``` **Examples:** ```python assert calculate_expression(\\"3+5*2\\") == 13 assert calculate_expression(\\" 10 + 2 * 6 \\") == 22 assert calculate_expression(\\"100 * 2 + 12\\") == 212 assert calculate_expression(\\"100 * ( 2 + 12 )\\") == 1400 # Note: Parentheses can be considered an extra feature assert calculate_expression(\\"100 * ( 2 + 12 ) / 14\\") == 100 # Note: This example handles division which is extra, focus on addition and multiplication ```","solution":"import re def calculate_expression(expression: str) -> int: def apply_op(operands, operators): right = operands.pop() left = operands.pop() op = operators.pop() if op == \'+\': operands.append(left + right) elif op == \'*\': operands.append(left * right) expression = re.sub(r\\"s+\\", \\"\\", expression) operands = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) i -= 1 elif expression[i] in \'+*\': while (operators and operators[-1] == \'*\' and expression[i] == \'+\'): apply_op(operands, operators) operators.append(expression[i]) i += 1 while operators: apply_op(operands, operators) return operands[0] # Example assertions assert calculate_expression(\\"3+5*2\\") == 13 assert calculate_expression(\\" 10 + 2 * 6 \\") == 22 assert calculate_expression(\\"100 * 2 + 12\\") == 212"},{"question":"Write a program to check if a given year is a leap year. A leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400. Input: 2000 Output: Leap year","solution":"def is_leap_year(year): Checks if a given year is a leap year. A leap year is: - Exactly divisible by 4 - Except for century years (years ending in 00), which must be divisible by 400 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"You are managing a warehouse inventory system. The warehouse has rows of shelves, and each shelf has several slots where items are stored. Each slot can store exactly one item, and each item has a unique barcode. You need to implement a function that allows for finding items efficiently. Specifically, you will be given a list of row identifiers, and within each row, a list of slot identifiers and their corresponding barcodes. You are tasked with creating a function that, given a barcode, returns the row and slot identifier where the item is located. If the item is not found, return \\"Item not found\\". Write a function `find_item_location` that takes two arguments: 1. `inventory`: A dictionary where keys are row identifiers (strings) and values are dictionaries. The inner dictionaries have slot identifiers (integers) as keys and barcodes (strings) as values. 2. `barcode`: A string representing the barcode of the item to find. Return a tuple `(row_identifier, slot_identifier)` if the item is found or `\\"Item not found\\"` if the item is not found. Example: Input: inventory = { \'row1\': {1: \'abc123\', 2: \'def456\', 3: \'ghi789\'}, \'row2\': {1: \'xyz123\', 2: \'uvw456\', 3: \'rst789\'} }, barcode = \'uvw456\' Output: (\'row2\', 2) Input: inventory = { \'row1\': {1: \'abc123\', 2: \'def456\', 3: \'ghi789\'}, \'row2\': {1: \'xyz123\', 2: \'uvw456\', 3: \'rst789\'} }, barcode = \'nop012\' Output: \\"Item not found\\" Constraints: - The number of rows will not exceed 1000. - Each row will not have more than 100 slots. - Barcodes are unique strings with lengths between 5 and 20 characters. - All row and slot identifiers are guaranteed to be valid and unique within the input dictionary.","solution":"def find_item_location(inventory, barcode): Given an inventory dictionary and a barcode, find the row and slot where the item with the barcode is located. :param inventory: Dictionary with row identifiers as keys and dictionaries as values. Inner dictionaries have slot identifiers as keys and barcodes as values. :param barcode: String representing the barcode of the item to find. :return: Tuple (row_identifier, slot_identifier) if the item is found, otherwise \\"Item not found\\". for row_identifier, slots in inventory.items(): for slot_identifier, item_barcode in slots.items(): if item_barcode == barcode: return (row_identifier, slot_identifier) return \\"Item not found\\""},{"question":"You are given a list of integers. Write a Python function that finds the longest contiguous subsequence within the list where all the elements are unique. The function should return both the length of the longest subsequence and the subsequence itself. For example, given the list [1, 2, 3, 1, 2, 3, 4, 5], the function should return (5, [1, 2, 3, 4, 5]) since the longest sequence of unique elements is of length 5. Function Signature: ```python def longest_unique_subsequence(lst: list) -> tuple: pass ``` Example: ```python print(longest_unique_subsequence([1, 2, 3, 1, 2, 3, 4, 5])) # Output: (5, [1, 2, 3, 4, 5]) print(longest_unique_subsequence([1, 2, 2, 3, 4, 5, 5, 6])) # Output: (4, [2, 3, 4, 5]) ``` Constraints: - The length of the list can go up to 10,000. - The elements of the list are not necessarily in any particular order and can contain negative numbers. - The solution should have a reasonable runtime complexity and not exceed O(n^2). An optimal solution will target O(n) complexity using appropriate algorithms and data structures.","solution":"def longest_unique_subsequence(lst): Finds the longest contiguous subsequence within the list where all elements are unique. Args: lst: A list of integers. Returns: A tuple containing the length of the longest unique subsequence and the subsequence itself. if not lst: return (0, []) start = 0 max_len = 0 max_seq = [] current_set = set() current_list = [] for end in range(len(lst)): while lst[end] in current_set: current_set.remove(lst[start]) current_list.pop(0) start += 1 current_set.add(lst[end]) current_list.append(lst[end]) if len(current_list) > max_len: max_len = len(current_list) max_seq = current_list[:] return max_len, max_seq"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the multiples of a specified integer n. The function should handle negative multiples as well. If the input list is empty or the specified integer n is zero, the function should return an empty list. Additionally, provide code that demonstrates the handling of incorrect inputs, such as non-integer elements within the list or a non-integer value for the specified integer n. Example: Input: nums = [12, -24, 35, 70, 50, 91] n = 5 Output: [35, 70, 50]","solution":"def multiples_of_n(nums, n): Returns a list of integers that are multiples of n from the input list nums. Args: nums (list): List of integers. n (int): The multiple to check for. Returns: list: A list of integers that are multiples of n. if not isinstance(n, int) or n == 0: return [] if not all(isinstance(x, int) for x in nums): raise ValueError(\\"All elements in the input list must be integers.\\") return [x for x in nums if x % n == 0]"},{"question":"Write a function that takes a string as input and returns the length of the longest substring without repeating characters. The input string consists of lowercase letters (a-z) only and its length does not exceed 10^5. Your solution should have a linear runtime complexity.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. Parameters: s (str): Input string consisting of lowercase letters (a-z). Returns: int: Length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_map and char_map[s[end]] >= start: start = char_map[s[end]] + 1 char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a Python function that merges two sorted lists into a single sorted list, while maintaining the order of the elements. The function should also be able to handle lists that include negative integers and floating point numbers. Additionally, your function should manage lists containing nested lists and strings in such a way that strings are placed after numeric elements but still maintain their initial relative order. The merged list should be sorted such that: - Numeric elements (integers or floating point numbers) appear first in ascending order. - String elements appear after numbers in their original order. - Nested lists should be ordered based on the sum of their elements and follow the strings while maintaining relative order. Moreover, the function should be able to handle edge cases such as empty lists, lists with a single element, and lists with only numeric or only string elements. The solution should have a time complexity of O(n), where n is the combined length of both input lists. Below is an example of a flawed code snippet that attempts to merge and sort two lists, but fails to manage strings and nested lists according to the requirements. ```python def merge_and_sort(list1, list2): merged_list = list1 + list2 return sorted(merged_list) ``` Your task is to fix and enhance this code to comply with the problem requirements. Ensure the function returns the correctly merged and sorted list. # Examples: Example 1 ```python list1 = [1, 3, 5, \\"apple\\"] list2 = [2, 4, 6, \\"banana\\"] # Output: [1, 2, 3, 4, 5, 6, “apple”, “banana”] ``` Example 2 ```python list1 = [1, -2.5, [3, 1], \\"banana\\", [2, 3]] list2 = [4, 6, \\"apple\\", [1, 1]] # Output: [-2.5, 1, 4, 6, [3, 1], [2, 3], [1, 1], “banana”, “apple”] ``` # Note: - The order of string elements in the merged list should follow the order they appeared in the individual input lists. - Numeric elements should be sorted in ascending order. - Nested lists should appear after numeric and string elements and should be ordered by the sum of their elements.","solution":"def merge_and_sort(list1, list2): Merges two sorted lists into a single sorted list while maintaining the order specified: - Numeric elements first (integers and floats) in ascending order. - String elements next in their original order. - Nested lists last, ordered by the sum of their elements and maintaining relative order. merged_list = list1 + list2 # Separate numeric elements, string elements, and nested lists numbers = [] strings = [] nested_lists = [] for element in merged_list: if isinstance(element, (int, float)): numbers.append(element) elif isinstance(element, str): strings.append(element) elif isinstance(element, list): nested_lists.append(element) # Sort numeric elements numbers.sort() # Sort nested lists by the sum of their elements nested_lists.sort(key=lambda x: sum(x)) # Combine all sorted parts sorted_merged_list = numbers + strings + nested_lists return sorted_merged_list"},{"question":"Write a function that takes a string consisting of alphanumeric characters and returns the longest substring that contains unique characters. If there are multiple substrings with the maximum length, return the first one encountered. The function should be efficient and work in linear time. Example: Input: \\"abcdabc\\" Output: \\"abcd\\" Input: \\"abcabcbb\\" Output: \\"abc\\" Input: \\"pwwkew\\" Output: \\"wke\\" Hints: - Use a sliding window approach to avoid checking all possible substrings. - Utilize a set or a dictionary to keep track of the characters and their positions within the window.","solution":"def longest_unique_substring(s): Returns the longest substring with unique characters from the input string. If there are multiple longest substrings, the first one encountered is returned. char_index_map = {} start = 0 max_length = 0 max_substring_start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i current_length = i - start + 1 if current_length > max_length: max_length = current_length max_substring_start = start return s[max_substring_start:max_substring_start + max_length]"},{"question":"Write a Python function using matplotlib to create a bar chart from the given dictionary of fruits and their respective quantities: `{\'Apple\': 50, \'Banana\': 75, \'Cherry\': 45, \'Date\': 30, \'Grape\': 90}`. Ensure that the chart has appropriate labels for the axes, a title \\"Fruit Quantities\\", and that each bar has a different color. Finally, save the bar chart as a PNG file named \\"fruit_quantities.png\\".","solution":"import matplotlib.pyplot as plt def create_fruit_bar_chart(fruit_quantities): Creates a bar chart for given fruit quantities and saves it as \'fruit_quantities.png\'. Parameters: fruit_quantities (dict): A dictionary with fruit names as keys and their quantities as values. fruits = list(fruit_quantities.keys()) quantities = list(fruit_quantities.values()) colors = plt.cm.get_cmap(\'tab10\', len(fruits)) plt.figure(figsize=(10, 6)) plt.bar(fruits, quantities, color=colors(range(len(fruits)))) plt.xlabel(\'Fruits\') plt.ylabel(\'Quantities\') plt.title(\'Fruit Quantities\') plt.savefig(\'fruit_quantities.png\') plt.close()"},{"question":"Implement a function that converts a given string containing a mathematical expression in infix notation into postfix notation (Reverse Polish Notation). The input string will consist of single-digit numbers and operators `+`, `-`, `*`, and `/`. Assume the expression is well-formed and does not contain any parentheses. Your function should return the postfix expression as a string. Example: ```python def infix_to_postfix(expression: str) -> str: # Your code here # Example usage: print(infix_to_postfix(\\"3+4*2\\")) # Expected output: \\"342*+\\" print(infix_to_postfix(\\"3+4-2\\")) # Expected output: \\"34+2-\\" ```","solution":"def infix_to_postfix(expression: str) -> str: precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] stack = [] for char in expression: if char.isdigit(): output.append(char) elif char in precedence: while stack and precedence.get(stack[-1], 0) >= precedence[char]: output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return \'\'.join(output)"},{"question":"Write a program to flatten a deeply nested list of integers. Given a list that can contain more lists as elements that themselves can contain integers or more lists and so on, your program should return a flat list of all the integers in non-decreasing order. Implement a function `flatten_and_sort(lst)` that accepts a nested list `lst` and returns a single, flat sorted list of all integers. Example: ```python flatten_and_sort([1, [4, [6, 5], 2], [3, [7]]]) ``` Output: ```python [1, 2, 3, 4, 5, 6, 7] ```","solution":"def flatten_and_sort(lst): def flatten(nested_lst): for item in nested_lst: if isinstance(item, list): yield from flatten(item) else: yield item flat_list = list(flatten(lst)) return sorted(flat_list) # Example usage print(flatten_and_sort([1, [4, [6, 5], 2], [3, [7]]])) # Output: [1, 2, 3, 4, 5, 6, 7]"},{"question":"Write a function that takes an array of integers and returns a new array containing only the even numbers from the original array, but in reverse order. The input array should not be mutated. For example, if the input array is [1, 2, 3, 4, 5, 6], the returned array should be [6, 4, 2].","solution":"def reverse_even_numbers(arr): Returns a new array containing only the even numbers from the original array, but in reverse order. The input array is not mutated. :param arr: List of integers :return: List of even integers in reverse order # Filter out even numbers and reverse the order even_numbers = [num for num in arr if num % 2 == 0] return even_numbers[::-1]"},{"question":"Write a function `is_anagram` that takes two strings as input and returns `True` if one string is an anagram of the other, and `False` otherwise. An anagram is a word formed by rearranging the letters of another, typically using all the original letters exactly once. Note that the function should be case-insensitive and ignore spaces. Example: ```python is_anagram(\\"listen\\", \\"silent\\") # True is_anagram(\\"triangle\\", \\"integral\\") # True is_anagram(\\"apple\\", \\"pale\\") # False is_anagram(\\"A gentleman\\", \\"Elegant man\\") # True ``` Hints: - Consider using collections.Counter or dictionary to count character frequencies. - Remember to preprocess the input strings by removing spaces and converting to lowercase.","solution":"def is_anagram(str1, str2): Returns True if str1 is an anagram of str2, False otherwise. from collections import Counter # Preprocess the strings: remove spaces and convert to lowercase str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Use Counter to count character frequencies and compare return Counter(str1) == Counter(str2)"},{"question":"Create a Python program that reads data from a CSV file, processes it to find the average value of a specified column, and outputs the result. The program should handle exceptions such as missing files, incorrect file formats, and non-numeric data in the specified column. Provide a sample CSV file and an incorrect code snippet for reference.","solution":"import csv def calculate_average_from_csv(file_path, column_name): Reads data from a CSV file, processes it to find the average value of a specified column. Args: file_path (str): The path to the CSV file. column_name (str): The name of the column to find the average of. Returns: float: The average value of the specified column. Raises: FileNotFoundError: If the specified file does not exist. KeyError: If the specified column does not exist in the CSV. ValueError: If the data in the specified column is non-numeric. try: with open(file_path, mode=\'r\') as csvfile: reader = csv.DictReader(csvfile) values = [] for row in reader: try: value = float(row[column_name]) values.append(value) except ValueError: raise ValueError(f\\"Non-numeric data found in column: {column_name}\\") if not values: return 0.0 average = sum(values) / len(values) return average except FileNotFoundError: raise FileNotFoundError(f\\"The file at path {file_path} does not exist.\\") except KeyError: raise KeyError(f\\"The column {column_name} does not exist in the CSV file.\\") # Example usage: # avg = calculate_average_from_csv(\'sample.csv\', \'age\') # print(avg)"},{"question":"Design a function in Python that accepts a string containing a mathematical expression involving addition (+), subtraction (-), multiplication (*), and division (/) signs along with integers. The function should parse and compute the result of the given expression following the standard order of operations (PEMDAS/BODMAS rules). Do not use the eval() function. Handle cases where the input might include spaces and/or unnecessary parentheses. Ensure your function raises an appropriate error for invalid inputs. Provide a few examples to demonstrate the function\'s usage and expected output.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string with +, -, *, / operators and integers, following the standard order of operations (PEMDAS/BODMAS). import re import operator # Define the supported operators and their precedence ops = { \'+\': (1, operator.add), \'-\': (1, operator.sub), \'*\': (2, operator.mul), \'/\': (2, operator.truediv) } def parse(expression): Parses the input string into numbers and operators based on precedence tokens = re.findall(r\'d+|[+/*()-]\', expression.replace(\' \', \'\')) output = [] stack = [] for token in tokens: if token.isdigit(): output.append(int(token)) elif token in ops: while stack and stack[-1] in ops and ops[token][0] <= ops[stack[-1]][0]: output.append(stack.pop()) stack.append(token) elif token == \'(\': stack.append(token) elif token == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() while stack: output.append(stack.pop()) return output def compute(rpn): Computes the result from the reverse Polish notation list stack = [] for token in rpn: if type(token) == int: stack.append(token) else: b = stack.pop() a = stack.pop() stack.append(ops[token][1](a, b)) return stack[0] # Validate and clean the input expression if not re.match(r\'^[ds+/*()-]+\', expression): raise ValueError(\\"Invalid characters in the expression.\\") # Convert infix expression to Reverse Polish Notation (RPN) rpn = parse(expression) # Compute the result from the RPN result = compute(rpn) return result"},{"question":"Write a function that takes a string representing a mathematical expression consisting of non-negative integers, addition (+), and multiplication (*) operations, and returns the evaluated result as an integer. Ensure the function correctly handles the order of operations, where multiplication has higher precedence over addition. Example Input: \\"2+3*5+8\\" Example Output: 25","solution":"def evaluate_expression(expression): Evaluates a mathematical expression consisting of non-negative integers, addition (+), and multiplication (*) operations, respecting the order of operations. def evaluate(tokens): Helper function to evaluate tokens with correct precedence. # Process multiplication first result = [] i = 0 while i < len(tokens): if tokens[i] == \'*\': last_num = result.pop() next_num = tokens[i + 1] result.append(last_num * next_num) i += 1 else: result.append(tokens[i]) i += 1 # Process addition total = 0 for token in result: if token != \'+\': total += token return total # Tokenization import re tokens = re.findall(r\'d+|[+*]\', expression) tokens = [int(token) if token.isdigit() else token for token in tokens] return evaluate(tokens)"},{"question":"Write a function that takes a string and returns the frequency of each character in the string. The function should ignore case sensitivity and should not consider spaces in the frequency count. If the input is not a string, raise a TypeError.","solution":"def char_frequency(s): Returns the frequency of each character in the string s. The function ignores case sensitivity and spaces. :param s: input string :type s: str :return: dictionary with character frequencies :rtype: dict :raises TypeError: if input is not a string if not isinstance(s, str): raise TypeError(\'Input must be a string\') s = s.replace(\' \', \'\').lower() freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Develop a function that simulates a basic bank account. The function should support the following operations: - Create a new account with an initial balance. - Deposit a specified amount to the account. - Withdraw a specified amount from the account, but do not allow the balance to go below zero. - Transfer a specified amount from one account to another, ensuring that the total balance of each account is adjusted correctly and that no account goes into negative balance. Your solution should include appropriate error handling for invalid operations (like withdrawing more than the current balance, or transferring more than what’s available in the source account). Demonstrate the functionality of your function with a series of test cases.","solution":"class BankAccount: def __init__(self, initial_balance=0): if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative.\\") self.balance = initial_balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount def transfer(self, amount, other_account): if amount <= 0: raise ValueError(\\"Transfer amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount other_account.deposit(amount) def get_balance(self): return self.balance"},{"question":"In a string of parentheses, find the maximum length of a substring that consists of balanced parentheses. The input string will only contain the characters \'(\' and \')\'. Return the length of the longest balanced substring. For example, if the input string is \\"(()))(\\", the output should be 4 (corresponding to the substring \\"(())\\"). Compose the function as: def maxBalancedLength(s):","solution":"def maxBalancedLength(s): Returns the maximum length of a substring that consists of balanced parentheses. max_len = 0 stack = [-1] # Initialize stack with -1 to handle edge case of balanced substring at the start for i in range(len(s)): if s[i] == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_len = max(max_len, i - stack[-1]) return max_len"},{"question":"Develop a function that takes two inputs: a list of words and a string representing a target word. The function should return a list of all words from the original list that can be created by removing one letter from the target word. The returned list should be sorted in ascending order. Ensure the solution handles edge cases such as when the target word is a single letter or when the list of words is empty. Sample Input: words = [\\"cat\\", \\"hat\\", \\"bat\\", \\"at\\", \\"catat\\"] target = \\"that\\" Expected Output: [\\"hat\\"] Explanation: By removing \'t\' from \\"that\\", we get \\"hat\\", which is present in the input list of words. No other words match as required. - If the input list is empty, the function should return an empty list. - If the target word is just one letter, the function should also return an empty list since no valid word can be formed.","solution":"def find_possible_words(words, target): Returns a list of words that can be formed by removing one letter from the target word. if len(target) <= 1 or not words: return [] possible_words = set() for i in range(len(target)): # Generate the word formed when the ith letter is removed new_word = target[:i] + target[i+1:] if new_word in words: possible_words.add(new_word) return sorted(possible_words)"},{"question":"Implement a Sudoku solver that can fill in the missing numbers in a 9x9 Sudoku grid. The given grid will be represented as a list of lists, with empty spaces represented by 0. The solver should fill the grid in-place and ensure that each number from 1 to 9 appears exactly once in each row, column, and 3x3 subgrid. Provide a function with the following signature: def solve_sudoku(board: list): Solves the given Sudoku puzzle in-place. Args: board: A 9x9 list of lists where each sublist represents a row of the Sudoku puzzle. Empty cells are represented by 0. Returns: None. The board should be modified in-place to represent the solved Sudoku puzzle. Example: board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] solve_sudoku(board) After calling the function, the board should be solved: board == [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ]","solution":"def solve_sudoku(board: list): Solves the given Sudoku puzzle in-place. Args: board: A 9x9 list of lists where each sublist represents a row of the Sudoku puzzle. Empty cells are represented by 0. Returns: None. The board should be modified in-place to represent the solved Sudoku puzzle. def is_valid(board, row, col, num): # Check row for c in range(9): if board[row][c] == num: return False # Check column for r in range(9): if board[r][col] == num: return False # Check 3x3 subgrid start_row, start_col = 3 * (row//3), 3 * (col//3) for r in range(start_row, start_row + 3): for c in range(start_col, start_col + 3): if board[r][c] == num: return False return True def solve(): for row in range(9): for col in range(9): if board[row][col] == 0: # Empty cell for num in range(1, 10): # Numbers 1 to 9 if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 return False return True solve()"},{"question":"Determine the longest sequence of consecutive integers in an array. The sequence can appear in any order, but all elements of the sequence must be part of the array. For example: array = [100, 4, 200, 1, 3, 2] In this case, the longest sequence of consecutive integers is [1, 2, 3, 4], which has a length of 4. The function should return 4.","solution":"def longest_consecutive_sequence(nums): Determines the longest sequence of consecutive integers in an array. Args: nums: List[int] - A list of integers Returns: int - The length of the longest consecutive sequence if not nums: return 0 num_set = set(nums) longest_sequence = 0 for num in nums: # If this number is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_sequence = max(longest_sequence, current_streak) return longest_sequence"},{"question":"Create a Python class to manage student grades. The class should include functionalities to add grades, calculate the average grade, and retrieve the highest grade. Provide both erroneous and corrected code. 1. Class Initializer: The class should initialize with an empty list to store grades. 2. Method to add grades: This method should take a numerical grade (integer or float) and add it to the list. 3. Method to calculate the average grade: This method should calculate the average of the grades stored in the list and return it. 4. Method to retrieve the highest grade: This method should return the highest grade from the list. The class name should be **GradeManager**. Here’s a code to enhance your task: Faulty Code: ```python class StudentGrades: def __init__(self): grades = [] def add_grade(grade): grades.append(grade) def calculate_average(): return sum(grades) / len(grades) def get_highest(): return max(grades) mgr = StudentGrades() mgr.add_grade(90) mgr.add_grade(80) mgr.add_grade(85) print(\\"Average grade:\\", mgr.calculate_average()) print(\\"Highest grade:\\", mgr.get_highest()) ``` In the above code snippet: - The initializer does not assign the `grades` list to the instance, causing it to be undefined when accessed by methods. - The `self` parameter is missing in the method definitions, leading to errors when calling instance methods. Can you debug and rewrite this code according to the requirements?","solution":"class GradeManager: def __init__(self): self.grades = [] def add_grade(self, grade): self.grades.append(grade) def calculate_average(self): if not self.grades: return 0 return sum(self.grades) / len(self.grades) def get_highest(self): if not self.grades: return 0 return max(self.grades)"},{"question":"Design a Python function that takes a list of integers and an integer `n` as parameters, and returns the sum of all unique multiples of `n` found within the list of integers.","solution":"def sum_of_unique_multiples(lst, n): Returns the sum of all unique multiples of n found within the list lst. if n == 0: return 0 multiples = set(x for x in lst if x % n == 0) return sum(multiples)"},{"question":"Write a Python function that takes a string as input and returns the string with all vowels (a, e, i, o, u) replaced by the character \'*\'. The function should maintain the case of the original string. ```python def replace_vowels(input_str): # Implement the code here # Example print(replace_vowels(\\"Hello World\\")) # Output should be \\"H*ll* W*rld\\" print(replace_vowels(\\"Python Programming\\")) # Output should be \\"Pyth*n Pr*gr*mm*ng\\" ```","solution":"def replace_vowels(input_str): Replaces all vowels in the input string with \'*\' and maintains case of the original string. vowels = \'aeiouAEIOU\' return \'\'.join([\'*\' if char in vowels else char for char in input_str])"},{"question":"Consider a dataset containing daily weather measurements, including temperature, humidity, wind speed, and precipitation. Your task is to build a Decision Tree Regression model using the Scikit Learn library to predict the daily temperature based on the other features. Evaluate the performance of your model by calculating the Mean Squared Error (MSE).","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeRegressor from sklearn.metrics import mean_squared_error def train_decision_tree_regression(data): Trains a Decision Tree Regression model to predict daily temperature based on humidity, wind speed, and precipitation. Args: data (pd.DataFrame): DataFrame containing the dataset with columns \'temperature\', \'humidity\', \'wind_speed\', and \'precipitation\'. Returns: float: Mean Squared Error of the model on the test dataset. # Split the dataset into features (X) and target (y) X = data[[\'humidity\', \'wind_speed\', \'precipitation\']] y = data[\'temperature\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Initialize the Decision Tree Regressor regressor = DecisionTreeRegressor(random_state=42) # Train the model regressor.fit(X_train, y_train) # Predict the temperature on the test set y_pred = regressor.predict(X_test) # Calculate the Mean Squared Error mse = mean_squared_error(y_test, y_pred) return mse"},{"question":"Given an array of integers, where every element appears twice except for one, which appears exactly once. Write a program to find that single, unique element. You are required to ensure a solution with linear runtime complexity and constant space complexity. Use Python to solve this problem. For an additional challenge, suppose you\'ve been provided with a piece of code that is meant to solve the problem but contains logical errors and fails to identify the single unique element. Here is the erroneous code: ```python def find_unique_element(arr): unique_element = 0 for num in arr: unique_element = unique_element ^ num return unique_element if unique_element in arr else -1 ``` Debug the above code, correct the logical errors, and provide a corrected version that will accurately determine the single unique element. Note: Make sure to maintain the constraints of linear runtime complexity and constant space complexity in your solution.","solution":"def find_unique_element(arr): Finds the single unique element in the array where every element appears twice except for one. unique_element = 0 for num in arr: unique_element ^= num # XOR operation return unique_element"},{"question":"Write a function that receives a string containing a mix of words and numbers separated by spaces. The function should separate the words and numbers, return a list of words in alphabetical order and a list of numbers in numerical order. If no words or numbers are present, return an empty list for that category. For example: input_string = \\"apple 25 banana 10 22 cherry 15 5\\" Your function should return: ([\'apple\', \'banana\', \'cherry\'], [5, 10, 15, 22, 25])","solution":"def separate_and_sort(input_string): Separates words and numbers from an input string and returns them sorted. :param input_string: str, a string containing a mix of words and numbers separated by spaces. :return: tuple, (list of words in alphabetical order, list of numbers in numerical order). words = [] numbers = [] elements = input_string.split() for element in elements: if element.isdigit(): numbers.append(int(element)) else: words.append(element) words.sort() numbers.sort() return (words, numbers)"},{"question":"Design a Python function that receives an unsorted list of integers and returns a new list, preserving the original order, but with all prime numbers removed. Ensure the function performs efficiently even with large input lists. For example, given the input list [6, 17, 4, 7, 12, 19, 24], the output should be [6, 4, 12, 24].","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def remove_primes(lst): Returns a list with all primes removed from the input list, preserving the original order. return [x for x in lst if not is_prime(x)]"},{"question":"You are given a string that contains a sentence with alphanumeric words. Each word has multiple characters which can include digits and letters. Your task is to write a function `find_longest_decimal_word` that identifies the longest word in the string that consists solely of numeric characters (i.e., a whole number). If there are multiple words with the same length, return the first one found. If no such word exists, return an empty string. Here is an example function to start your work from: ```python def find_longest_decimal_word(sentence): words = sentence.split() longest_decimal_word = \\"\\" for word in words: if word.isdigit(): if len(word) > len(longest_decimal_word): longest_decimal_word = word return longest_decimal_word print(find_longest_decimal_word(\\"This is a test 123 sentence with 45678 numbers 90\\")) ``` Test your function with the following strings: ```python find_longest_decimal_word(\\"The 2023 year is closing with a 67890 highlight\\") #output: \\"67890\\" find_longest_decimal_word(\\"In the 12489567 middle of 1234 nowhere\\") #output: \\"12489567\\" find_longest_decimal_word(\\"No numbers here!\\") #output: \\"\\" ``` Ensure your final function adheres to this structure and handles edge cases gracefully.","solution":"def find_longest_decimal_word(sentence): Identifies the longest word in the sentence consisting solely of numeric characters. If there are multiple words with the same length, it returns the first one found. If no such word exists, it returns an empty string. words = sentence.split() longest_decimal_word = \\"\\" for word in words: if word.isdigit(): if len(word) > len(longest_decimal_word): longest_decimal_word = word return longest_decimal_word"},{"question":"Write a Python program that reads an integer `n` from the user and prints a staircase pattern of `n` steps using the `#` character. Each step should be right-aligned as demonstrated in the sample output below: # Example: Input: ``` 6 ``` Output: ``` # # # ``` # Guidelines: 1. Request the user to input a positive integer, validating the input to ensure it is a positive integer greater than zero. 2. Construct and print the staircase pattern where each step consists of `#` characters starting from `1` up to `n`. 3. Ensure proper alignment and spacing as shown in the example output. Handle any potential input errors gracefully by informing the user of the issue and prompting them to try again.","solution":"def print_staircase(n): Prints a right-aligned staircase pattern of `n` steps using the `#` character. Each step should have increasing number of `#` characters starting from 1 to n. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer greater than zero.\\") for i in range(1, n + 1): print(\' \' * (n - i) + \'#\' * i)"},{"question":"Create a function that classifies a list of numbers into three different categories and returns a dictionary with these categories as keys. Here\'s the list of numbers: nums = [17, 23, 42, 56, 67, 89, 90, 100, 123] The requirements are: 1. The dictionary should have the following keys: \\"prime\\", \\"even\\" and \\"odd\\". - \\"prime\\" should contain all the numbers that are prime. - \\"even\\" should contain all the even numbers. - \\"odd\\" should contain all the odd numbers. 2. Numbers that belong to more than one category should only be listed in their primary category in the order of priority: \\"prime\\" > \\"even\\" > \\"odd\\". 3. The function should work for any list of integers and not only for the given example. Your function should be efficient and handle lists with a significant number of elements.","solution":"from math import isqrt def is_prime(n): Check if a number is prime if n <= 1: return False for i in range(2, isqrt(n) + 1): if n % i == 0: return False return True def classify_numbers(nums): Classifies a list of numbers into \'prime\', \'even\', and \'odd\' categories. Returns: dict: A dictionary with keys \'prime\', \'even\', and \'odd\' containing lists of numbers in those categories. classification = { \'prime\': [], \'even\': [], \'odd\': [] } for num in nums: if is_prime(num): classification[\'prime\'].append(num) elif num % 2 == 0: classification[\'even\'].append(num) else: classification[\'odd\'].append(num) return classification # Example usage nums = [17, 23, 42, 56, 67, 89, 90, 100, 123] print(classify_numbers(nums))"},{"question":"Write a function that takes a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. For example, given the input list `[1, 2, 2, 3, 3, 3]`, the function should return `{1: 1, 2: 2, 3: 3}`. Ensure your function handles empty lists and lists with only one element correctly.","solution":"def count_occurrences(lst): Takes a list of integers and returns a dictionary where the keys are the integers, and the values are the number of times each integer appears in the list. occurrences = {} for num in lst: if num in occurrences: occurrences[num] += 1 else: occurrences[num] = 1 return occurrences"},{"question":"Your task is to determine the minimum number of deletions needed to make two strings, `str1` and `str2`, the same. Return the minimum number of deletions required. The answer is guaranteed to fit in a 32-bit signed integer. Operations: 1. Delete a character from `str1`. 2. Delete a character from `str2`. Example 1: Input: str1 = \\"sea\\", str2 = \\"eat\\" Output: 2 Explanation: You need to delete \'s\' from \\"sea\\" and \'t\' from \\"eat\\" to make both strings \\"ea\\". Example 2: Input: str1 = \\"abc\\", str2 = \\"ac\\" Output: 1 Explanation: You need to delete \'b\' from \\"abc\\" to make both strings \\"ac\\". Example 3: Input: str1 = \\"leetcode\\", str2 = \\"etco\\" Output: 4 Explanation: You need to delete \'l\', \'e\', \'d\', and \'e\' from \\"leetcode\\" to make both strings \\"etco\\". Constraints: `1 <= str1.length, str2.length <= 500` `str1[i], str2[i] are lowercase English letters.`","solution":"def min_deletions_to_make_strings_same(str1, str2): Return the minimum number of deletions required to make two strings the same. # Find the length of the longest common subsequence def longest_common_subsequence(str1, str2): m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] lcs_length = longest_common_subsequence(str1, str2) # Minimum deletions to make the strings the same return (len(str1) - lcs_length) + (len(str2) - lcs_length)"},{"question":"Create a Python function that manipulates a list of integers. The function should accept a list and perform the following operations: 1. Sort the list in ascending order. 2. Remove all duplicate elements from the list. 3. Reverse the sorted list. 4. Return the modified list. The function should handle edge cases such as an empty list or a list with single element. Provide a sample list and the expected output after performing these operations.","solution":"def manipulate_list(lst): Manipulates a list of integers by sorting, removing duplicates, and reversing. Parameters: lst (list of int): The list of integers to manipulate. Returns: list of int: The manipulated list. # Step 1: Sort the list in ascending order sorted_lst = sorted(lst) # Step 2: Remove all duplicate elements from the list unique_lst = list(dict.fromkeys(sorted_lst)) # Step 3: Reverse the sorted list reversed_lst = unique_lst[::-1] return reversed_lst # Example usage: # sample_list = [4, 6, 2, 4, 3, 3, 1] # print(manipulate_list(sample_list)) # Output should be [6, 4, 3, 2, 1]"},{"question":"Given a non-empty integer array `nums` and an integer `k`, write a function to return the `k` most frequent elements. The function should return the elements in any order. Consider handling edge cases like when `k` is greater than the number of unique elements in `nums`, or when all elements have the same frequency. Optimize the solution for better performance with large datasets. Your solution should also properly handle input validation and raise suitable exceptions when invalid inputs are provided. Use appropriate libraries for optimal performance and conciseness. Below is a starting point for your task. You are required to complete and enhance the code to meet the problem requirements: ```python from collections import Counter import heapq def topKFrequent(nums, k): count = Counter(nums) return heapq.nlargest(k, count.keys(), key=count.get) # Test cases print(topKFrequent([1,1,1,2,2,3], 2)) # Output: [1, 2] print(topKFrequent([1], 1)) # Output: [1] print(topKFrequent([1,2,3,4,1,2,3,1,2,1], 3)) # Output should include top 3 frequent elements ```","solution":"from collections import Counter import heapq def topKFrequent(nums, k): Return the k most frequent elements in an array. :param nums: List[int], a non-empty list of integers :param k: int, number of top frequent elements to return :return: List[int], list of k most frequent elements in any order if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): raise ValueError(\\"nums must be a list of integers\\") if not isinstance(k, int) or k <= 0: raise ValueError(\\"k must be a positive integer\\") count = Counter(nums) return heapq.nlargest(k, count.keys(), key=count.get)"},{"question":"You are working on a Python project that involves reading data from a CSV file and performing various transformations on it. One of the tasks involves filtering out specific rows based on a condition and then writing the filtered data back to a new CSV file. Here is the sample code that you have been provided: ```python import csv def filter_rows(input_file, output_file, condition): with open(input_file, mode=\'r\') as infile, open(output_file, mode=\'w\', newline=\'\') as outfile: reader = csv.reader(infile) writer = csv.writer(outfile) for row in reader: if condition(row): # Assuming condition is a function that takes a row and returns a boolean writer.writerow(row) ``` The current implementation has been found to have multiple shortcomings, such as not handling the header row appropriately and not dealing with cases where the CSV files have inconsistent data formats. Revise the code to address these issues, explain the changes you made, and demonstrate how your revised code works correctly. For additional difficulty, add error handling to manage cases where the input file does not exist or is not readable.","solution":"import csv import os def filter_rows(input_file, output_file, condition): # Check if the input file exists if not os.path.exists(input_file): raise FileNotFoundError(f\\"The file \'{input_file}\' does not exist.\\") with open(input_file, mode=\'r\', newline=\'\') as infile: reader = csv.reader(infile) headers = next(reader, None) # Read the header row if headers: with open(output_file, mode=\'w\', newline=\'\') as outfile: writer = csv.writer(outfile) writer.writerow(headers) # Write the header row to the output file for row in reader: # Catch the exception if row length is different from headers\' length if len(row) != len(headers): raise ValueError(f\\"Inconsistent row length: {row}\\") if condition(row): # Assuming condition is a function that takes a row and returns a boolean writer.writerow(row)"},{"question":"Given a string `s` consisting of upper and lowercase English letters, find the length of the longest substring, `t`, that contains at most `k` distinct characters. A substring is a contiguous sequence of characters within a string. Return the length of the longest substring `t` that meets the condition. Example 1: Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: t is \\"ece\\" which its length is 3. Example 2: Input: s = \\"aa\\", k = 1 Output: 2 Explanation: t is \\"aa\\" which its length is 2. Note: - `0 <= k <= len(s)` - The string `s` consists of upper/lowercase English letters. Constraints: - The length of the input string `s` does not exceed `10^4`. - 0 <= k <= 26","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 char_count = {} left = 0 max_length = 0 for right in range(len(s)): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Implement a Python function that takes a list of integers and an integer `k` as inputs and returns the maximum sum of any contiguous subarray of length `k` within the list. If the list has less than `k` elements, the function should return `None`. For example, given the list `[2, 1, 5, 1, 3, 2]` and `k = 3`, the maximum sum of any contiguous subarray of length 3 would be `5 + 1 + 3 = 9`. Here\'s the function signature: ```python def max_contiguous_subarray_sum(arr: list, k: int) -> int: pass ``` # Constraints: - The size of the input list (`arr`) will be between 1 and 1000. - The integer `k` will be a positive integer. # Example: Input: ```python arr = [2, 1, 5, 1, 3, 2] k = 3 ``` Output: ```python 9 ``` Input: ```python arr = [2, 3] k = 3 ``` Output: ```python None ```","solution":"def max_contiguous_subarray_sum(arr, k): Returns the maximum sum of any contiguous subarray of length k. Parameters: arr (list): List of integers. k (int): Length of the subarray. Returns: int or None: Maximum sum of contiguous subarray of length k or None if not possible. n = len(arr) if n < k: return None # Calculate the sum of the first window max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a library management system, there are \'n\' different books, each categorized under various genres. Each genre can have multiple books, but a book can belong to only one genre. The library offers a membership plan that allows the members to check out a maximum of \'k\' books at a time. Create a function that accepts \'n\' and \'k\' as arguments, along with a dictionary of genres and their respective book counts, and returns a list of all possible unique combinations of genres from which the member can check out a total of \'k\' books. Each combination should be distinct and should not exceed \'k\' books in total. If there are no possible combinations, the function should return an empty list. Consider the following example: ``` n = 5 k = 3 genres = { \\"Fiction\\": 2, \\"Science\\": 1, \\"History\\": 2, \\"Fantasy\\": 1 } ``` The function should return all possible combinations of genres that add up to 3 books (combinations are not sorted): ``` [ {\\"Fiction\\": 2, \\"Science\\": 1}, {\\"History\\": 2, \\"Fantasy\\": 1}, {\\"Science\\": 1, \\"History\\": 2}, ... ] ``` Implement this function with Python.","solution":"from itertools import combinations def possible_genre_combinations(n, k, genres): Find all possible unique combinations of genres that sum up to \'k\' books. Args: n (int): Total number of books. k (int): Maximum number of books that can be checked out at a time. genres (dict): A dictionary where keys are genre names and values are the number of books in each genre. Returns: list: A list of dictionaries, each representing a unique combination of genres that sum up to \'k\' books. genre_keys = list(genres.keys()) genre_values = list(genres.values()) result = [] # Generate all possible combinations of genres for num_genres in range(1, len(genre_keys) + 1): for combo in combinations(enumerate(genre_values), num_genres): if sum([val for _, val in combo]) == k: combination = {genre_keys[i]: val for i, val in combo} result.append(combination) return result"},{"question":"Write a function that takes two strings as input and returns their longest common subsequence (LCS). The LCS is defined as the longest sequence that appears in both strings in the same order, but not necessarily consecutively. If there are multiple LCS of the same length, return any one of them. In case there is no common subsequence, return an empty string.","solution":"def longest_common_subsequence(str1, str2): Returns the Longest Common Subsequence (LCS) of two input strings. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct LCS from dp table lcs = [] i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"Implement a Python function that checks if a string follows the rules of a valid identifier in the given programming language. The rules for the identifier are: 1. It must start with a letter (a-z, A-Z) or an underscore (_). 2. The remaining characters can be letters (a-z, A-Z), digits (0-9), or underscores (_). 3. It must not be a reserved keyword (like \'for\', \'if\', \'while\', etc.). Use the is_valid_identifier function to determine whether the given string is a valid identifier and return True or False accordingly. The function signature should be: def is_valid_identifier(identifier): Returns True if \'identifier\' is a valid identifier, False otherwise. >>> is_valid_identifier(\'variable1\') True >>> is_valid_identifier(\'_var\') True >>> is_valid_identifier(\'2invalid\') False >>> is_valid_identifier(\'for\') False >>> is_valid_identifier(\'whileTrue\') True Additionally, add a list of reserved keywords to check against within the function.","solution":"import keyword def is_valid_identifier(identifier): Returns True if \'identifier\' is a valid identifier, False otherwise. if not identifier: return False if identifier in keyword.kwlist: return False if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False for char in identifier[1:]: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"Write a Python function `squared_elements` that accepts a list of integers and returns a new list containing the squares of each element from the input list. The function should not use any built-in functions or list comprehensions for squaring the elements. Instead, it should use a loop to iterate through the list and manually compute the square of each element. Additionally, ensure the function handles the case where the input list is empty, returning an empty list in such cases. Example: ```python def squared_elements(numbers): # Your code here # Example usage: print(squared_elements([1, 2, 3, 4])) # Output: [1, 4, 9, 16] print(squared_elements([])) # Output: [] ```","solution":"def squared_elements(numbers): Returns a new list containing the squares of each element from the input list. Args: numbers (list): A list of integers. Returns: list: A list containing the squares of the input integers. squared_numbers = [] for number in numbers: squared_numbers.append(number * number) return squared_numbers"},{"question":"Develop a chatbot that uses natural language processing to parse user queries and provide appropriate responses based on a predefined set of rules. The chatbot should be able to handle different types of input, including greetings, questions about operating hours, and requests for product information. Make sure to implement a fallback response for any input that doesn\'t match the predefined rules. Your solution should include a function that interprets and responds to the user input, and another function that allows the user to interact with the chatbot.","solution":"import re def parse_query(user_input): Parses the user input and returns an appropriate response based on predefined rules. user_input = user_input.lower().strip() # Define predefined rules and responses greetings = [\\"hello\\", \\"hi\\", \\"hey\\", \\"good morning\\", \\"good afternoon\\", \\"good evening\\"] operating_hours_keywords = [\\"hours\\", \\"open\\", \\"close\\", \\"time\\", \\"when\\"] product_info_keywords = [\\"product\\", \\"stock\\", \\"available\\", \\"sell\\", \\"item\\"] # Check for greetings for greeting in greetings: if re.search(r\'b\' + greeting + r\'b\', user_input): return \\"Hello! How can I assist you today?\\" # Check for operating hours questions if any(keyword in user_input for keyword in operating_hours_keywords): return \\"Our operating hours are from 9 AM to 5 PM, Monday to Friday.\\" # Check for product information requests if any(keyword in user_input for keyword in product_info_keywords): return \\"We offer a wide range of products. Can you please specify which product you are looking for?\\" # Fallback response return \\"I\'m sorry, I didn\'t understand that. Can you please provide more details?\\" def chatbot_interface(): A simple interface function to interact with the chatbot. print(\\"Welcome to our chatbot! Type \'exit\' to end the conversation.\\") while True: user_input = input(\\"You: \\") if user_input.lower() == \\"exit\\": print(\\"Goodbye!\\") break response = parse_query(user_input) print(\\"Chatbot: \\" + response)"},{"question":"Given a list of dictionaries, where each dictionary contains the information of a student (with keys \\"name\\", \\"age\\", and \\"grades\\"), write a function that returns a dictionary grouping the students by their age. The keys of the returned dictionary should be the ages, and the values should be lists containing the student names with that age. students = [ {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"grades\\": [85, 90, 92]}, {\\"name\\": \\"Bob\\", \\"age\\": 20, \\"grades\\": [70, 85, 80]}, {\\"name\\": \\"Charlie\\", \\"age\\": 21, \\"grades\\": [88, 92, 85]}, {\\"name\\": \\"David\\", \\"age\\": 22, \\"grades\\": [95, 88, 90]} ] write a function that returns: { 20: [\\"Alice\\", \\"Bob\\"], 21: [\\"Charlie\\"], 22: [\\"David\\"] }","solution":"def group_students_by_age(students): Groups students by their age. Parameters: students (list of dict): A list of dictionaries, each containing information about a student. Returns: dict: A dictionary with ages as keys and lists of student names as values. age_group = {} for student in students: age = student[\\"age\\"] name = student[\\"name\\"] if age not in age_group: age_group[age] = [] age_group[age].append(name) return age_group"},{"question":"Create a function that generates all possible valid combinations of balanced parentheses for a given number `n`. The function should take an integer `n` as input, which represents the number of pairs of parentheses, and return a list of strings, where each string is a valid combination of balanced parentheses. Also, provide a brief explanation of the algorithm used to generate these combinations. **Constraints:** - `1 <= n <= 8` Example: ```python Input: n = 3 Output: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] Input: n = 1 Output: [\\"()\\"] ``` **Explanation:** The function generates all possible ways to place `n` pairs of parentheses such that they are balanced. A balanced set means every opening parenthesis has a corresponding closing parenthesis and they are correctly nested.","solution":"def generate_parentheses(n): Generates all combinations of n pairs of balanced parentheses. :param n: int - The number of pairs of parentheses. :return: List[str] - A list of all possible valid combinations of balanced parentheses. def backtrack(s, left, right): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack(\\"\\", 0, 0) return result"},{"question":"You are tasked with creating a Movie Recommendation System. You are given a list of movies where each movie is represented by a string array consisting of the movie title and a list of genres the movie belongs to. For example, the movie \\"Inception\\" can be represented as `[\\"Inception\\", \\"Action\\", \\"Sci-Fi\\", \\"Thriller\\"]`. Additionally, you have a list of user preferences where each user\'s preference is represented as a string array consisting of the user name and a list of preferred genres. For instance, a user\'s preferences can be represented as `[\\"Alice\\", \\"Action\\", \\"Comedy\\"]`. Your task is to recommend a list of movies for each user based on their preferred genres. A movie should be recommended to a user if at least one of the genres of the movie matches one of the user\'s preferred genres. Implement a function that takes two parameters, `movies` and `users`, and returns a dictionary where the keys are the user names and the values are lists of movie titles recommended for that user. Constraints: `1 <= movies.length <= 1000` `1 <= movies[i].length <= 20` `1 <= movies[i][0].length <= 100` `1 <= users.length <= 1000` `1 <= users[i].length <= 20` `1 <= users[i][0].length <= 100` Each movie title and genre will consist of only lower-case and upper-case English letters and spaces. ```python def recommend_movies(movies, users): # Your code here return {} ``` Example: ```python movies = [ [\\"Inception\\", \\"Action\\", \\"Sci-Fi\\", \\"Thriller\\"], [\\"The Godfather\\", \\"Crime\\", \\"Drama\\"], [\\"Toy Story\\", \\"Animation\\", \\"Comedy\\", \\"Family\\"] ] users = [ [\\"Alice\\", \\"Action\\", \\"Comedy\\"], [\\"Bob\\", \\"Crime\\", \\"Drama\\"] ] print(recommend_movies(movies, users)) # Output: {\\"Alice\\": [\\"Inception\\", \\"Toy Story\\"], \\"Bob\\": [\\"The Godfather\\"]} ```","solution":"def recommend_movies(movies, users): recommendations = {} # Build user preferences dictionary for easier access user_preferences = {} for user in users: user_preferences[user[0]] = set(user[1:]) # Iterate over each user and check which movies match their preferences for user, genres in user_preferences.items(): recommendations[user] = [] for movie in movies: movie_title = movie[0] movie_genres = set(movie[1:]) if not genres.isdisjoint(movie_genres): recommendations[user].append(movie_title) return recommendations"},{"question":"Create a Python function that takes a string s, which consists of words and spaces, and returns the most frequent word. If two or more words have the same frequency, return the word that comes first lexicographically. For example, given the string \\"apple banana apple orange banana apple\\", the function should return \\"apple\\" as it appears most frequently. If the input string is empty, the function should return an empty string.","solution":"from collections import Counter def most_frequent_word(s): Returns the most frequent word in the string s. If two or more words have the same frequency, return the word that comes first lexicographically. If the input string is empty, return an empty string. if not s: return \\"\\" # Split the string into words and count the frequencies words = s.split() word_count = Counter(words) # Find the most frequent word most_frequent = max(word_count.keys(), key=lambda word: (word_count[word], -ord(word[0]))) return most_frequent"},{"question":"Create a function called `unique_paths` that calculates the number of unique paths from the top-left corner to the bottom-right corner of an `m x n` grid. You can only move either down or right at any point in time. The function should take two parameters: `m` (the number of rows) and `n` (the number of columns). Constraints: `1 <= m, n <= 100`. Return the total number of unique paths. Example: ```python def unique_paths(m, n): # Your code here print(unique_paths(3, 7)) # Output: 28 print(unique_paths(3, 2)) # Output: 3 ``` Note: - Ensure your solution is efficient and can handle the upper limit of the constraints. - You may want to use dynamic programming to optimize your solution.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, moving only right or down. Parameters: m (int): number of rows n (int): number of columns Returns: int: number of unique paths # Create a 2D array to store the number of unique paths to each cell dp = [[1] * n for _ in range(m)] # Fill the dp array with the number of unique paths to each cell for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function that takes a list of integers and returns a new list with the squares of the original integers, sorted in ascending order. **Example:** ```python Input: [4, -3, 2, 1] Output: [1, 4, 9, 16] Input: [-1, 0, 2, 3] Output: [0, 1, 4, 9] ```","solution":"def sorted_squares(lst): Returns a new list with the squares of the original integers sorted in ascending order. Parameters: lst (list of integers): The input list of integers. Returns: list of integers: A new list with the squares of the original integers sorted in ascending order. squared_lst = [x**2 for x in lst] squared_lst.sort() return sorted(squared_lst)"},{"question":"Given a list of non-negative integers `nums`, partition the array into two subsets such that the sum of the elements in both subsets is minimized. Return the minimum possible absolute difference between the sums of the two subsets. # Example 1 Input: ```python nums = [1, 2, 3, 9] ``` Output: ```python 3 ``` Explanation: The array can be partitioned as [1, 2, 3] and [9] with sums 6 and 9 respectively. The absolute difference between the sums is |6 - 9| = 3. # Example 2 Input: ```python nums = [1, 2, 7, 1, 5] ``` Output: ```python 0 ``` Explanation: The array can be partitioned as [1, 2, 7] and [1, 5] with sums 10 and 10 respectively. The absolute difference between the sums is |10 - 10| = 0. # Constraints: ```plaintext 1 <= nums.length <= 200 1 <= nums[i] <= 100 ```","solution":"def minimum_difference(nums): Compute the minimum possible absolute difference between the sums of two subsets. total_sum = sum(nums) n = len(nums) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] for i in range(target, -1, -1): if dp[i]: return abs(total_sum - 2 * i)"},{"question":"Write a function that takes a string as input and returns the first non-repeating character in it. If all characters are repeating or the string is empty, return an underscore. The function should be case-sensitive. Example: For the input string \\"swiss\\", the function should return \'w\' because \'w\' is the first character that does not repeat.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns an underscore. The function is case-sensitive. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"Write a Python function that accepts a string containing only lowercase alphabetical characters and returns a dictionary where the keys are the characters from the string, and the values represent the frequency of each respective character. Example: Input: \\"abracadabra\\" Output: {\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1}","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Given an N x N matrix, write a function to rotate it 90 degrees clockwise. You must achieve this in-place, without using any additional space for another matrix. The function should modify the input matrix directly and must not exceed O(n^2) time complexity where n is the number of rows or columns in the matrix. For example: Example 1: Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Example 2: Input: ``` [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` Output: ``` [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` The constraints to be considered are: - The matrix size will be within the range [1, 20], where N = matrix.length = matrix[i].length. - Each element in the matrix will be an integer in the range [0, 2000]. Finally, write test cases to validate your solution, including edge cases like a 1x1 matrix and cases where the matrix is already rotated.","solution":"def rotate(matrix): Rotates the given NxN matrix 90 degrees clockwise in-place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Create a function that finds the unique characters in two given strings, combines these unique characters, and returns the result in alphabetical order. The function should take two strings as input and return a string as output. Example: ```python def unique_characters(str1, str2): # Your code here # Sample Input str1 = \\"hello\\" str2 = \\"world\\" # Sample Output \\"dewhr\\" ``` Explanation: The unique characters in \\"hello\\" are \\"h\\", \\"e\\", \\"h\\". In \\"world\\", the unique characters are \\"w\\", \\"r\\", \\"d\\". Combining these and sorting them alphabetically results in \\"dewhr\\".","solution":"def unique_characters(str1, str2): Finds the unique characters in two given strings, combines these unique characters, and returns the result in alphabetical order. unique_chars_str1 = set(str1) unique_chars_str2 = set(str2) combined_unique_chars = unique_chars_str1 | unique_chars_str2 return \'\'.join(sorted(combined_unique_chars))"},{"question":"Implement the function \'find_kth_largest\' and correct the errors in the provided function while developing a new helper function for additional steps: ```python def find_kth_largest(nums: list, k: int): Return the kth largest element in the list. >>> find_kth_largest([3, 2, 1, 5, 6, 4], 2) 5 >>> find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) 4 def partition(array: list, left: int, right: int) -> int: # Implement a helper function for partitioning the elements around a pivot pivot = array[right] i = left - 1 for j in range(left, right): if array[j] <= pivot: i += 1 array[i], array[j] = array[j], array[i] array[i + 1], array[right] = array[right], array[i + 1] return i + 1 def quickselect(array: list, left: int, right: int, k: int) -> int: if left == right: return array[left] pivot_index = partition(array, left, right) if k == pivot_index: return array[k] elif k < pivot_index: return quickselect(array, left, pivot_index - 1, k) else: return quickselect(array, pivot_index + 1, right, k) n = len(nums) if k < 1 or k > n: raise ValueError(\\"k is out of bounds\\") # Adjust for 0-based index return quickselect(nums, 0, n - 1, n - k) print(find_kth_largest([3, 2, 1, 5, 6, 4], 2)) # 5 print(find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4)) # 4 ``` **Take note**: The presented code contains errors and an unfinished helper function that you must identify and rectify.","solution":"def find_kth_largest(nums: list, k: int) -> int: Return the kth largest element in the list. Parameters: nums (list): List of numbers. k (int): The position of the largest element to find. Returns: int: The kth largest element. >>> find_kth_largest([3, 2, 1, 5, 6, 4], 2) 5 >>> find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) 4 def partition(array: list, left: int, right: int) -> int: # Implement a helper function for partitioning the elements around a pivot pivot = array[right] i = left - 1 for j in range(left, right): if array[j] <= pivot: i += 1 array[i], array[j] = array[j], array[i] array[i + 1], array[right] = array[right], array[i + 1] return i + 1 def quickselect(array: list, left: int, right: int, k: int) -> int: if left == right: return array[left] pivot_index = partition(array, left, right) if k == pivot_index: return array[k] elif k < pivot_index: return quickselect(array, left, pivot_index - 1, k) else: return quickselect(array, pivot_index + 1, right, k) n = len(nums) if k < 1 or k > n: raise ValueError(\\"k is out of bounds\\") # Adjust for 0-based index return quickselect(nums, 0, n - 1, n - k) print(find_kth_largest([3, 2, 1, 5, 6, 4], 2)) # 5 print(find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4)) # 4"},{"question":"Write a Python function that takes a string as input and returns a new string where each character in the original string is doubled. For example, given the input \\"hello\\", the output should be \\"hheelllloo\\". Ensure your solution efficiently handles longer input strings.","solution":"def double_characters(input_string): Returns a new string where each character in the input string is doubled. return \'\'.join([char * 2 for char in input_string])"},{"question":"I am developing a financial application using Django where users must be able to track and visualize their spending habits over time. User transaction data is stored in a PostgreSQL database, which includes information such as transaction amount, date, category, and payment method. The goal is to present data in a user-friendly dashboard that allows users to see their expenditure trends through charts and graphs. I have experience using matplotlib and seaborn for data visualization in Python scripts, but I want to integrate these charts directly into the Django web pages. Additionally, I would like the charts to be interactive, allowing users to filter data by date range, category, and payment method. Could you suggest a framework or library that can help me build interactive charts and smoothly integrate them into my Django web application? Any advice on the overall approach to achieve this would be greatly appreciated!","solution":"def get_recommended_framework(): Returns the recommended framework/library for building interactive charts that can be integrated into a Django web application. return \\"Plotly and Django Plotly Dash\\" def get_integration_approach(): Returns the recommended approach to integrate interactive charts into Django web application. return \'\'\' 1. Install Plotly and Django Plotly Dash: pip install plotly django-plotly-dash 2. Add plotly_dash to the list of INSTALLED_APPS in your Django settings. 3. Create a Dash app within your Django app: - In your Django app, create a new directory named embedded_dash - Inside embedded_dash, create an __init__.py file 4. Define your Dash app in the __init__.py file: from dash import Dash import dash_core_components as dcc import dash_html_components as html import plotly.express as px from django_plotly_dash import DjangoDash app = DjangoDash(\'SimpleExample\') # replaces dash.Dash app.layout = html.Div([ dcc.Graph( id=\'example-graph\', figure=px.bar(x=[\'A\', \'B\', \'C\'], y=[1, 3, 2], title=\\"Sample Chart\\") ) ]) 5. Create a Django template for your dashboard and embed Dash app: - Create a new HTML file (e.g., dashboard.html) and include the Dash app: {% load plotly_dash %} <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <title>Dashboard</title> </head> <body> {% plotly_app name=\\"SimpleExample\\" %} </body> </html> 6. Configure your Django URLs to include Dash: from django.urls import path from django_plotly_dash.views import add_to_session urlpatterns = [ path(\'your-dashboard-url/\', add_to_session, name=\'add_to_session\'), ] 7. Run your Django server and navigate to the URL for your dashboard to see the interactive charts. \'\'\'"},{"question":"Create a function that takes an array of integers and returns the sum of the two largest unique numbers in that array. If the array does not contain at least two unique numbers, the function should return 0. For example, given the array [1, 2, 3, 4, 5], the function should return 9 (4 + 5). If given the array [10, 10, 10, 10, 10], the function should return 0.","solution":"def sum_of_two_largest_unique_numbers(arr): Returns the sum of the two largest unique numbers in the array. If the array does not contain at least two unique numbers, returns 0. unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return 0 unique_numbers.sort(reverse=True) return unique_numbers[0] + unique_numbers[1]"},{"question":"Write a Python class that simulates a simplified bank account. This class should support the following functionalities: - Creating a new account with an initial balance. - Depositing an amount into the account. - Withdrawing an amount from the account, ensuring that withdrawals do not exceed the current balance. - A method to display the current balance. - A method to display the transaction history, which logs all deposits and withdrawals along with timestamps. Implement the class and demonstrate its usage with an example. Ensure that proper error handling is included for scenarios like attempting to withdraw more than the available balance or depositing/withdrawing negative amounts. Use Python\'s datetime module to generate timestamps for the transaction history.","solution":"from datetime import datetime class BankAccount: def __init__(self, initial_balance=0.0): if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative.\\") self.balance = initial_balance self.transaction_history = [] self._log_transaction(\\"Initial balance\\", initial_balance) def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount self._log_transaction(\\"Deposit\\", amount) def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Cannot withdraw more than the available balance.\\") self.balance -= amount self._log_transaction(\\"Withdrawal\\", amount) def display_balance(self): return self.balance def display_transaction_history(self): return self.transaction_history def _log_transaction(self, transaction_type, amount): timestamp = datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") self.transaction_history.append(f\\"{timestamp} - {transaction_type}: {amount}\\") # Example usage: # account = BankAccount(100) # account.deposit(50) # account.withdraw(30) # balance = account.display_balance() # history = account.display_transaction_history() # print(balance) # print(history)"},{"question":"Write a function that takes a list of integers and returns a string representing the type of sequence: \\"Arithmetic\\", \\"Geometric\\", or \\"None\\". An arithmetic sequence has a constant difference between consecutive elements, while a geometric sequence has a constant ratio between consecutive elements. Examples: - For the input `[3, 6, 9, 12]`, the function should return `\\"Arithmetic\\"`. - For the input `[2, 6, 18, 54]`, the function should return `\\"Geometric\\"`. - For the input `[1, 2, 4, 8, 16]`, the function should return `None`. Function signature: ```python def classify_sequence(sequence: list) -> str: ``` Hint: Consider edge cases such as lists with less than two elements.","solution":"def classify_sequence(sequence: list) -> str: Returns the type of sequence: \\"Arithmetic\\", \\"Geometric\\", or \\"None\\". if len(sequence) < 2: return \\"None\\" is_arithmetic = True is_geometric = True arithmetic_diff = sequence[1] - sequence[0] geometric_ratio = sequence[1] / sequence[0] if sequence[0] != 0 else None for i in range(1, len(sequence) - 1): if sequence[i + 1] - sequence[i] != arithmetic_diff: is_arithmetic = False if sequence[i] == 0 or sequence[i + 1] / sequence[i] != geometric_ratio: is_geometric = False if is_arithmetic: return \\"Arithmetic\\" elif is_geometric: return \\"Geometric\\" else: return \\"None\\""},{"question":"Write a Python function that reads a CSV file containing employee details and calculates the average salary of employees who have been working for more than 5 years. The CSV file is structured with columns: \'EmployeeID\', \'Name\', \'Department\', \'JoinDate\', and \'Salary\'. The function should handle cases where the \'Salary\' field might have missing or non-numeric values and ensure such records are excluded from the average salary calculation. Assume the \'JoinDate\' is in the format \\"YYYY-MM-DD\\".","solution":"import csv from datetime import datetime def calculate_average_salary(csv_file_path): Reads a CSV file and calculates the average salary of employees who have been working for more than 5 years. The CSV file should have the following columns: \'EmployeeID\', \'Name\', \'Department\', \'JoinDate\', \'Salary\'. Parameters: csv_file_path (str): The path to the CSV file. Returns: float: The average salary of employees who have been working for more than 5 years. total_salary = 0 count = 0 current_date = datetime.now() with open(csv_file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: join_date_str = row[\'JoinDate\'] salary_str = row[\'Salary\'] try: join_date = datetime.strptime(join_date_str, \\"%Y-%m-%d\\") years_of_service = (current_date - join_date).days / 365.25 salary = float(salary_str) if years_of_service > 5: total_salary += salary count += 1 except (ValueError, TypeError): # Skip this row if there is a parsing error in date or salary field continue if count == 0: return 0.0 return total_salary / count"},{"question":"Develop an efficient sorting algorithm that is capable of sorting a list which contains both numerical digits (0-9) and alphabetical characters (a-z, A-Z) in such a way that numerical digits appear first in ascending order followed by alphabetical characters in lexicographical order with lowercase letters preceding uppercase letters. Implement this algorithm in Python and explain your approach.","solution":"def custom_sort(arr): Sorts an array containing both numerical digits (0-9) and alphabetical characters (a-z, A-Z) such that numerical digits appear first in ascending order followed by alphabetical characters in lexicographical order with lowercase letters preceding uppercase letters. digits = [] lower_alpha = [] upper_alpha = [] for item in arr: if item.isdigit(): digits.append(item) elif item.islower(): lower_alpha.append(item) elif item.isupper(): upper_alpha.append(item) digits.sort() lower_alpha.sort() upper_alpha.sort() return digits + lower_alpha + upper_alpha"},{"question":"Write a Python function that takes a list of integers and returns the sum of all integers that are prime numbers. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. Avoid using built-in mathematical functions to check for prime numbers.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True for i in range(2, n): if n % i == 0: return False return True def sum_primes(numbers): Returns the sum of all prime numbers in the list. return sum(n for n in numbers if is_prime(n))"},{"question":"Write a function that takes an array of integers and returns a new array containing only the prime numbers from the original array, in the same order. Prime numbers are integers greater than 1 that are only divisible by 1 and themselves. For instance, if the input array is `[4, 7, 10, 13, 17, 22]`, the function should return `[7, 13, 17]`. Make sure your function is optimized for performance, and handle edge cases such as empty arrays or arrays with no prime numbers appropriately.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(arr): Returns an array containing only the prime numbers from the original array. return [x for x in arr if is_prime(x)]"},{"question":"You are given an array of integers, `arr`, and an integer `k`. Write a function `findMaxSum(arr, k)` to find the maximum sum of `k` consecutive elements in the array. If the array\'s length is less than `k`, return 0. **Function Signature:** ```python def findMaxSum(arr: List[int], k: int) -> int: ``` **Input:** - `arr`: A list of integers where `1 <= len(arr) <= 1000` and `-10^5 <= arr[i] <= 10^5`. - `k`: An integer where `1 <= k <= 1000`. **Output:** - Return an integer representing the maximum sum of `k` consecutive elements. **Example:** ```python findMaxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) # Output: 27 (which is the sum of the subarray [8, 9, 10]). findMaxSum([100, 200, 300, 400], 2) # Output: 700 (which is the sum of the subarray [300, 400]). ``` **Additional Conditions:** - The function needs to be efficient to handle input of maximum constraints. - Consider edge cases such as when the array contains both positive and negative numbers, and when `k` is equal to the length of the array.","solution":"from typing import List def findMaxSum(arr: List[int], k: int) -> int: Find the maximum sum of k consecutive elements in an array. Parameters: arr (List[int]): A list of integers. k (int): The number of consecutive elements to consider. Returns: int: The maximum sum of k consecutive elements. n = len(arr) if n < k: return 0 # Compute sum of first window of size k max_sum = sum(arr[:k]) current_sum = max_sum # Compute sums of remaining windows by sliding the window for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an integer array `nums` and an integer `target`, return all unique combinations of `nums` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen multiple times in the combination. Example 1: Input: nums = [2,3,6,7], target = 7 Output: [[2,2,3],[7]] Explanation: - 2 + 2 + 3 = 7 - 7 = 7 These are the only two combinations. Example 2: Input: nums = [2,3,5], target = 8 Output: [[2,2,2,2],[2,3,3],[3,5]] Explanation: - 2 + 2 + 2 + 2 = 8 - 2 + 3 + 3 = 8 - 3 + 5 = 8 These are all the combinations. Example 3: Input: nums = [2], target = 1 Output: [] Explanation: No combination can sum to the target. Example 4: Input: nums = [1], target = 1 Output: [[1]] Explanation: The single number is the only combination. Example 5: Input: nums = [1], target = 2 Output: [[1, 1]] Explanation: A number can be used multiple times in the combination. Constraints: `1 <= nums.length <= 30` `1 <= nums[i] <= 200` `All elements of nums are distinct.` `1 <= target <= 500`","solution":"def combination_sum(nums, target): def backtrack(remaining, start, path, result): if remaining < 0: return if remaining == 0: result.append(path[:]) return for i in range(start, len(nums)): path.append(nums[i]) backtrack(remaining - nums[i], i, path, result) path.pop() # backtrack result = [] nums.sort() # optional: helps to improve efficiency backtrack(target, 0, [], result) return result"},{"question":"Write a function that calculates the average test score from a list of student scores while dropping the lowest and highest score before calculating the average. Implement the function such that it reads the scores from a file named \\"scores.txt\\", where each line in the file contains a single integer score. Assume there will be at least three scores in the file.","solution":"def calculate_average_score(filename=\\"scores.txt\\"): Calculates the average student test score from a list of scores in a file, by dropping the lowest and highest scores before calculating the average. :param filename: Name of the file containing the scores, default is \\"scores.txt\\" :return: The average score after dropping the lowest and highest scores. # Read the scores from the file with open(filename, \\"r\\") as file: scores = [int(line.strip()) for line in file.readlines()] # Ensure there are at least three scores if len(scores) < 3: raise ValueError(\\"The file must contain at least three scores.\\") # Drop the lowest and highest score scores.remove(max(scores)) scores.remove(min(scores)) # Calculate and return the average of the remaining scores average_score = sum(scores) / len(scores) return average_score"},{"question":"Write a Python function that takes a list of dictionaries and a key, and returns a new list containing the values associated with the specified key from each dictionary. If a dictionary does not contain the specified key, skip that dictionary. Example: ```python dict_list = [{\'a\': 1, \'b\': 2}, {\'a\': 3, \'c\': 4}, {\'a\': 5, \'b\': 6}] key = \'a\' ``` Output: `[1, 3, 5]`","solution":"def extract_values(dict_list, key): Given a list of dictionaries and a key, returns a list of values associated with the specified key from each dictionary. If a dictionary does not contain the specified key, it is skipped. Args: dict_list (list): List of dictionaries key (str): Key to look for in dictionaries Returns: list: List of values associated with the key return [d[key] for d in dict_list if key in d]"},{"question":"Write a Python function that takes a list of integers and returns the list sorted in ascending order. However, if the list contains any negative numbers, the function should remove those negative numbers before sorting the list. Implement the function and provide sample input and output for verification. For example: **Input:** [3, -1, 5, -6, 0, 9, 1, -3] **Output:** [0, 1, 3, 5, 9] **Function signature:** ```python def clean_sort(lst: list) -> list: ```","solution":"def clean_sort(lst: list) -> list: Returns a sorted list in ascending order with all negative numbers removed. # Filter out negative numbers non_negative_lst = [x for x in lst if x >= 0] # Sort the remaining elements non_negative_lst.sort() return non_negative_lst"},{"question":"Develop a file management system with a focus on performance and user-friendly features. Add the following requirements to the task: 1. Design an abstract class for a generic file that includes attributes like file name, size, type, and creation/modification dates. Implement derived classes for different file types (e.g., text, image, video). 2. Implement an interface for file operations that supports basic functionalities like creating, reading, updating, and deleting files. 3. Integrate an efficient indexing mechanism to enable quick search and retrieval of files based on attributes such as name, type, size, and dates. 4. Allow users to organize files into hierarchical folders and provide operations to create, delete, move, and rename these folders. 5. Implement a version control system that maintains a history of changes for each file, allowing users to revert to previous versions if needed. 6. Include a method for users to share files and folders with others, incorporating proper access controls to manage read/write permissions. 7. Add a functionality for encrypting and decrypting files to enhance security, ensuring that only authorized users can access sensitive data.","solution":"from abc import ABC, abstractmethod import os import shutil from datetime import datetime class AbstractFile(ABC): def __init__(self, name, size, file_type, creation_date, modification_date): self.name = name self.size = size self.file_type = file_type self.creation_date = creation_date self.modification_date = modification_date @abstractmethod def get_info(self): pass class TextFile(AbstractFile): def get_info(self): return f\\"Text File: {self.name}, Size: {self.size}, Created: {self.creation_date}, Modified: {self.modification_date}\\" class ImageFile(AbstractFile): def get_info(self): return f\\"Image File: {self.name}, Size: {self.size}, Created: {self.creation_date}, Modified: {self.modification_date}\\" class VideoFile(AbstractFile): def get_info(self): return f\\"Video File: {self.name}, Size: {self.size}, Created: {self.creation_date}, Modified: {self.modification_date}\\" class FileOperations: def __init__(self): self.files = {} self.folders = {\\"root\\": {}} self.index = {} def create_file(self, folder, file): if folder not in self.folders: raise ValueError(\\"Folder does not exist\\") self.folders[folder][file.name] = file self.index[file.name] = file def read_file(self, folder, filename): return self.folders[folder][filename].get_info() def update_file(self, folder, filename, new_file): if filename in self.folders[folder]: self.folders[folder][filename] = new_file self.index[filename] = new_file def delete_file(self, folder, filename): if filename in self.folders[folder]: del self.folders[folder][filename] del self.index[filename] def search(self, attribute, value): result = [] for file in self.index.values(): if getattr(file, attribute) == value: result.append(file.get_info()) return result def create_folder(self, parent_folder, folder_name): if parent_folder not in self.folders: raise ValueError(\\"Parent folder does not exist\\") self.folders[folder_name] = {} self.folders[parent_folder][folder_name] = self.folders[folder_name] def delete_folder(self, folder_name): if folder_name in self.folders: del self.folders[folder_name] def move_folder(self, folder_name, new_parent): if folder_name in self.folders and new_parent in self.folders: self.folders[new_parent][folder_name] = self.folders[folder_name] del self.folders[folder_name] def rename_folder(self, old_name, new_name): if old_name in self.folders: self.folders[new_name] = self.folders[old_name] del self.folders[old_name] def share_file(self, filename, user, access_type): # Here we will implement access control which manages file read/write permissions pass def encrypt_file(self, filename, key): # Here we will implement the file encryption pass def decrypt_file(self, filename, key): # Here we will implement the file decryption pass"},{"question":"Write a function `analyze_string` that takes a string as input and returns a dictionary with the following statistics: 1. **Vowel Count**: Total number of vowels (a, e, i, o, u) in the string. 2. **Consonant Count**: Total number of consonants in the string. Ignore any non-alphabet characters. 3. **Digit Count**: Total number of digits (0-9) in the string. 4. **Special Characters Count**: Total number of special characters (non-alphabet and non-digit characters) in the string. Define appropriate type hints for the function. ```python def analyze_string(input_string: str) -> dict: # Your code here pass ```","solution":"def analyze_string(input_string: str) -> dict: Analyze the given string and return a dictionary with counts of vowels, consonants, digits, and special characters. :param input_string: The string to analyze. :return: A dictionary with keys \'vowel_count\', \'consonant_count\', \'digit_count\', and \'special_char_count\'. vowels = \\"aeiouAEIOU\\" digits = \\"0123456789\\" vowel_count = 0 consonant_count = 0 digit_count = 0 special_char_count = 0 for char in input_string: if char in vowels: vowel_count += 1 elif char.isalpha() and char not in vowels: consonant_count += 1 elif char in digits: digit_count += 1 else: special_char_count += 1 return { \\"vowel_count\\": vowel_count, \\"consonant_count\\": consonant_count, \\"digit_count\\": digit_count, \\"special_char_count\\": special_char_count }"},{"question":"Using a dataset of historical weather data from a link such as https://example.com/weather_data.csv, perform the following tasks: 1. Load the dataset and identify the temperature readings for New York City and Los Angeles for each day. 2. Calculate the average daily temperature for each month for both cities over a specified time period (e.g., from January 1, 2000, to December 31, 2020). 3. Create a dual-axis bar chart where the x-axis represents each month, the left y-axis represents the average monthly temperature for New York City, and the right y-axis represents the average monthly temperature for Los Angeles. 4. Allow your code to be adaptable such that it can be modified for any given time range or additional cities without major structural changes. Ensure that your approach can handle new data entries by appending them to the dataset. 5. Compute and visualize the annual average temperature for both cities in a line chart, indicating the trends over the specified time period. Note: Include appropriate labels, legends, and titles in your charts for better clarity and understanding of the visualized data.","solution":"import pandas as pd import matplotlib.pyplot as plt def load_data(url): Load the dataset from the specified URL. return pd.read_csv(url, parse_dates=[\'date\']) def filter_cities_and_dates(data, cities, start_date, end_date): Filter dataset for specified cities and date range. return data[(data[\'city\'].isin(cities)) & (data[\'date\'] >= start_date) & (data[\'date\'] <= end_date)] def calculate_monthly_averages(data): Calculate average daily temperature for each month for the filtered dataset. data[\'month\'] = data[\'date\'].dt.to_period(\'M\') return data.groupby([\'city\', \'month\']).temperature.mean().unstack(level=0) def plot_dual_axis_chart(monthly_averages, city1, city2): Plot a dual-axis bar chart for the given monthly averages of two cities. fig, ax1 = plt.subplots() ax2 = ax1.twinx() monthly_averages[city1].plot(kind=\'bar\', color=\'b\', ax=ax1, width=0.4, position=0) monthly_averages[city2].plot(kind=\'bar\', color=\'r\', ax=ax2, width=0.4, position=1) ax1.set_xlabel(\'Month\') ax1.set_ylabel(f\'Average Temperature ({city1})\', color=\'b\') ax2.set_ylabel(f\'Average Temperature ({city2})\', color=\'r\') ax1.tick_params(axis=\'y\', colors=\'b\') ax2.tick_params(axis=\'y\', colors=\'r\') plt.title(f\'Monthly Average Temperature: {city1} vs {city2}\') plt.show() def calculate_annual_averages(data): Calculate annual average temperature for each city. data[\'year\'] = data[\'date\'].dt.year return data.groupby([\'city\', \'year\']).temperature.mean().unstack(level=0) def plot_annual_averages(annual_averages, city1, city2): Plot a line chart for the annual average temperatures of two cities. annual_averages[[city1, city2]].plot() plt.xlabel(\'Year\') plt.ylabel(\'Average Temperature\') plt.title(\'Annual Average Temperature: Trends Over Time\') plt.legend([city1, city2]) plt.show() # Example usage: # url = \'https://example.com/weather_data.csv\' # data = load_data(url) # filtered_data = filter_cities_and_dates(data, [\'New York City\', \'Los Angeles\'], \'2000-01-01\', \'2020-12-31\') # monthly_averages = calculate_monthly_averages(filtered_data) # plot_dual_axis_chart(monthly_averages, \'New York City\', \'Los Angeles\') # annual_averages = calculate_annual_averages(filtered_data) # plot_annual_averages(annual_averages, \'New York City\', \'Los Angeles\')"},{"question":"Write a function that takes an array of integers and an integer `k` as input and returns the `k` largest elements from the array in descending order. If `k` is greater than the number of elements in the array, return the entire array sorted in descending order. Example: Input: [3, 5, 1, 4, 2], 3 Output: [5, 4, 3] Input: [1, 2], 5 Output: [2, 1]","solution":"def k_largest_elements(arr, k): Returns the k largest elements from the array `arr` in descending order. If `k` is greater than the number of elements in the array, returns the entire array sorted in descending order. if k >= len(arr): return sorted(arr, reverse=True) return sorted(arr, reverse=True)[:k]"},{"question":"Design and implement a function that calculates the minimum number of operations required to convert a given string into a palindrome. An operation is defined as changing one letter of the string to any other letter. Your solution should emphasize the algorithmic approach and optimization techniques used to achieve the most efficient result. Provide a brief explanation of your approach and include a test case demonstration.","solution":"def min_operations_to_palindrome(s): Calculate the minimum number of operations required to convert a given string into a palindrome. An operation is defined as changing one letter of the string to any other letter. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"Write a function that takes a string as input and returns the longest substring with all distinct characters. Implement an efficient solution, prioritizing time complexity, and ensure your approach can handle large strings within a reasonable time frame. Use appropriate data structures to achieve the desired performance.","solution":"def longest_distinct_substring(s): Returns the longest substring with all distinct characters. char_index_map = {} longest = 0 start = 0 longest_substr = \\"\\" for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end if end - start + 1 > longest: longest = end - start + 1 longest_substr = s[start:end+1] return longest_substr"},{"question":"Write a Python function that accepts a list of strings and returns the length of the longest string in the list. If the list is empty, the function should return 0. Make sure to handle the possibility of mixed data types within the list, by ignoring non-string elements.","solution":"def longest_string_length(lst): Returns the length of the longest string in the list. Ignores non-string elements. if not lst: return 0 max_length = 0 for item in lst: if isinstance(item, str): max_length = max(max_length, len(item)) return max_length"},{"question":"Given an erroneous code snippet, your task is to debug and modify it to solve the following problem: You are given a string `s` consisting of lowercase alphabets and an integer array `indices` where `indices[i]` represents the correct position of the character `s[i]` once the string `s` is shuffled according to the `indices` array. Write a function to return the newly shuffled string that is derived by reordering the characters of `s` using the `indices` array. Erroneous Code for Reference: ```python def shuffle_string(s, indices): shuffle_str_list = [\\"\\"] * len(s) for i in range(len(s)): shuffle_str_list[indices[i]] = s[i] return \\"\\".join(shuffle_str_list) ``` Let\'s test the code with an example: - Input: s = \\"abc\\", indices = [0, 1, 2] - Expected Output: \\"abc\\" - Input: s = \\"aiohn\\", indices = [3, 1, 4, 2, 0] - Expected Output: \\"nihao\\" The provided code needs to be debugged to handle all edge cases and produce the correct shuffled string consistently.","solution":"def shuffle_string(s, indices): Reorders the characters of the string s using the indices array. Args: s (str): The original string to be shuffled. indices (List[int]): The index positions for the characters of s in the shuffled string. Returns: str: The newly shuffled string. shuffle_str_list = [\\"\\"] * len(s) for i in range(len(s)): shuffle_str_list[indices[i]] = s[i] return \\"\\".join(shuffle_str_list)"},{"question":"Design a Python program to simulate a basic elevator control system in a multi-story building. Your solution should define an `Elevator` class that allows for requests to be made for the elevator to move to a specific floor. Implement methods to handle elevator movements, including requests made while the elevator is in motion, prioritizing requests efficiently, and supporting multiple passengers. Additionally, ensure that the elevator does not exceed its maximum capacity and implements emergency stop functionality.","solution":"class Elevator: def __init__(self, max_capacity, total_floors): self.current_floor = 1 self.requests = [] self.max_capacity = max_capacity self.passengers = 0 self.total_floors = total_floors self.emergency_stopped = False def add_request(self, floor): if not self.emergency_stopped and 1 <= floor <= self.total_floors: self.requests.append(floor) self.requests.sort() def move(self): if not self.requests or self.emergency_stopped: return destination = self.requests.pop(0) self.current_floor = destination def add_passenger(self, count=1): if self.passengers + count <= self.max_capacity: self.passengers += count def remove_passenger(self, count=1): if self.passengers >= count: self.passengers -= count def emergency_stop(self): self.emergency_stopped = True def reset_emergency_stop(self): self.emergency_stopped = False"},{"question":"Create a function in Python that reads a CSV file, processes the data to remove all rows that contain missing values, and then writes the cleaned data to a new CSV file. Use the pandas library to accomplish this task. Ensure your function takes two arguments: the input file path and the output file path. Demonstrate this functionality by providing a sample CSV file and the expected output after cleaning.","solution":"import pandas as pd def clean_csv(input_file_path, output_file_path): Reads a CSV file, removes all rows with missing values, and writes the cleaned data to a new CSV file. Parameters: input_file_path (str): The file path of the input CSV file. output_file_path (str): The file path to write the cleaned CSV file. # Read the CSV file df = pd.read_csv(input_file_path) # Remove rows with missing values cleaned_df = df.dropna() # Write the cleaned data to a new CSV file cleaned_df.to_csv(output_file_path, index=False)"},{"question":"Write a Python function to find the k most frequent elements in a given list of integers. The function should return the elements in descending order of their frequency. If two elements have the same frequency, return them in ascending order. The function should optimize for time complexity. ```python def k_most_frequent_elements(nums, k): # Your code here # Example usage: nums = [1,1,1,2,2,3] k = 2 print(k_most_frequent_elements(nums, k)) # Output: [1, 2] ```","solution":"from collections import Counter from heapq import heapify, heappush, heappop def k_most_frequent_elements(nums, k): Finds the k most frequent elements in nums, returning them in descending order of frequency. If two elements have the same frequency, they are returned in ascending order. # First, count the frequency of each element count = Counter(nums) # Define a comparator for the heap to sort by frequency, then by value heap = [] for num, freq in count.items(): heappush(heap, (-freq, num)) # Extract the k most frequent elements from the heap result = [heappop(heap)[1] for _ in range(k)] return result"},{"question":"Write a function in Python that takes a list of integers and returns a new list where each element is the cumulative sum of the elements up to that index. For example, given the input list `[1, 2, 3, 4]`, the output should be `[1, 3, 6, 10]`. You are not allowed to use the itertools.accumulate function. inputList = [5, 10, 15, 20]","solution":"def cumulative_sum(input_list): Returns a new list where each element is the cumulative sum of the elements up to that index. cumulative_list = [] current_sum = 0 for num in input_list: current_sum += num cumulative_list.append(current_sum) return cumulative_list"},{"question":"Implement a class `ParkingLot` in Python that simulates a parking lot with a limited number of parking spaces. The parking lot should be able to: 1. Add a new car to the parking lot if there is an available space. 2. Remove a car from the parking lot. 3. Check if a specific car is in the parking lot. 4. Get a list of all cars currently in the parking lot. Additionally, ensure that the parking lot does not exceed its capacity. The class should be initialized with a specified capacity and contain the following methods: 1. `__init__(self, capacity)`: Initializes the parking lot with a given capacity. 2. `add_car(self, car_license)`: Accepts a car\'s license plate number (string) and adds it to the parking lot if there is space available. 3. `remove_car(self, car_license)`: Accepts a car\'s license plate number and removes it from the parking lot if it is present. 4. `is_car_in_lot(self, car_license)`: Accepts a car\'s license plate number and returns `True` if the car is in the parking lot, or `False` otherwise. 5. `current_parked_cars(self)`: Returns a list of all license plate numbers of cars currently in the parking lot. Example usage: ```python lot = ParkingLot(2) lot.add_car(\\"ABC123\\") lot.add_car(\\"XYZ789\\") print(lot.is_car_in_lot(\\"ABC123\\")) # True print(lot.current_parked_cars()) # [\\"ABC123\\", \\"XYZ789\\"] lot.remove_car(\\"ABC123\\") print(lot.current_parked_cars()) # [\\"XYZ789\\"] lot.add_car(\\"LMN456\\") print(lot.current_parked_cars()) # [\\"XYZ789\\", \\"LMN456\\"] lot.add_car(\\"PQR678\\") # should not add as the lot is full ``` Ensure to handle edge cases such as adding a car when the lot is full and attempting to remove a car that is not in the lot.","solution":"class ParkingLot: def __init__(self, capacity): Initializes the parking lot with a given capacity. self.capacity = capacity self.cars = set() def add_car(self, car_license): Accepts a car\'s license plate number and adds it to the parking lot if there is space available. Returns True if the car was added, False otherwise (e.g., if the lot is full or the car is already in the lot). if len(self.cars) < self.capacity and car_license not in self.cars: self.cars.add(car_license) return True return False def remove_car(self, car_license): Accepts a car\'s license plate number and removes it from the parking lot if it is present. Returns True if the car was removed, False otherwise (e.g., if the car is not in the lot). if car_license in self.cars: self.cars.remove(car_license) return True return False def is_car_in_lot(self, car_license): Accepts a car\'s license plate number and returns True if the car is in the parking lot, False otherwise. return car_license in self.cars def current_parked_cars(self): Returns a list of all license plate numbers of cars currently in the parking lot. return list(self.cars)"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the unique elements, preserving the order of their first appearance. Use Python\'s built-in data structures to maintain optimal performance.","solution":"def unique_elements(lst): Returns a new list containing only the unique elements from the input list, preserving the order of their first appearance. Args: lst (list): A list of integers. Returns: list: A list of unique integers. seen = set() unique_lst = [] for elem in lst: if elem not in seen: seen.add(elem) unique_lst.append(elem) return unique_lst"},{"question":"Write a Python function called `find_common_elements` that takes two lists of integers as inputs and returns a list of their common elements in ascending order without duplicates. If there are no common elements, the function should return an empty list. Additionally, implement appropriate error handling to ensure that both inputs are lists of integers. Here is an example of the function signature: ```python def find_common_elements(list1: list, list2: list) -> list: # Your code here ``` # Example: ```python list1 = [4, 5, 7, 1, 4, 3] list2 = [0, 3, 4, 6, 7, 3] print(find_common_elements(list1, list2)) # Output: [3, 4, 7] list1 = [10, 12, 14] list2 = [1, 2, 3] print(find_common_elements(list1, list2)) # Output: [] list1 = [4, 5, \\"a\\", 1] list2 = [0, 3, 4, 6, 7] print(find_common_elements(list1, list2)) # Output: TypeError: Both inputs must be lists of integers. ```","solution":"def find_common_elements(list1: list, list2: list) -> list: Returns a list of the common elements between list1 and list2 in ascending order without duplicates. Raises TypeError if inputs are not lists of integers. if not all(isinstance(i, int) for i in list1) or not all(isinstance(i, int) for i in list2): raise TypeError(\\"Both inputs must be lists of integers.\\") common_elements = set(list1).intersection(set(list2)) return sorted(common_elements)"},{"question":"Find All Duplicates in an Array Description: Given an integer array `nums` of length `n` where all elements appear exactly twice except for one which appears once, return the element that appears only once. Example 1: Input: nums = [4,2,2,6,4,6,3] Output: 3 Explanation: Only number `3` appears once in the array while all other numbers appear twice. Example 2: Input: nums = [1,5,1,7,8,5,8] Output: 7 Explanation: Only number `7` appears once in the array while all other numbers appear twice. Constraints: 1. `1 <= nums.length <= 10^5` 2. `1 <= nums[i] <= 10^5` 3. Each element in the array appears twice except for one. Follow up: Could you implement a solution with linear runtime complexity and without using extra memory such as a hash set?","solution":"def find_single_number(nums): Returns the number that appears only once in the array nums. All other numbers appear exactly twice. Args: nums (list): The list of integers where exactly one element appears once, and all others appear twice. Returns: int: The single number that appears only once. result = 0 for num in nums: result ^= num return result"},{"question":"Design a Python function that accepts a list of integers and returns a dictionary categorizing each integer in the list based on whether it is a prime number, an even number, or an odd number. The keys of the dictionary should be \\"prime\\", \\"even\\", and \\"odd\\", corresponding to lists of integers from the input list that fall into each category. Additionally, implement the following erroneous Python function so that it classifies the input integers correctly: ```python def categorize_numbers(numbers): categories = {\\"prime\\": [], \\"even\\": [], \\"odd\\": []} def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True for number in numbers: if is_prime(number): categories[\\"prime\\"].append(number) if number % 2 == 0: categories[\\"even\\"].append(number) else: categories[\\"odd\\"].append(number) return categories ``` The corrected code should ensure a number is placed into the right categories distinctly — without overlap of \\"even\\" and \\"odd\\" numbers. Also, note that a number can simultaneously be prime and even/odd.","solution":"def categorize_numbers(numbers): categories = {\\"prime\\": [], \\"even\\": [], \\"odd\\": []} def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True for number in numbers: if is_prime(number): categories[\\"prime\\"].append(number) if number % 2 == 0: categories[\\"even\\"].append(number) else: categories[\\"odd\\"].append(number) return categories"},{"question":"Write a function that takes a list of integers and returns the sum of its elements excluding any integers that are prime numbers. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. In your solution, implement a helper function to determine if a number is prime. Provide both the main function and the helper function in your answer.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_excluding_primes(lst): Returns the sum of the elements in lst excluding any integers that are prime numbers. return sum(x for x in lst if not is_prime(x))"},{"question":"Write a Python function that performs matrix multiplication on two given matrices. Ensure that the function checks for compatibility of the matrices for multiplication and handles exceptions gracefully, providing meaningful error messages for incompatible inputs. Additionally, allow an optional parameter to specify whether the result should be returned as a nested list (the default behavior) or as a NumPy array. Provide test cases to demonstrate the function\'s usage with both square and non-square matrices, and show how to handle incompatible matrix dimensions.","solution":"import numpy as np def matrix_multiply(matrix_a, matrix_b, return_as_numpy=False): Multiplies two matrices, matrix_a and matrix_b. Parameters: - matrix_a: list of lists or a 2D numpy array representing the first matrix. - matrix_b: list of lists or a 2D numpy array representing the second matrix. - return_as_numpy: bool, optional, if True, return the result as a numpy array (default is False). Returns: - Resultant matrix as a list of lists or a numpy array based on return_as_numpy. Raises: - ValueError: If the matrices cannot be multiplied due to incompatible dimensions. - TypeError: If the input matrices are not list of lists or numpy arrays. if not isinstance(matrix_a, (list, np.ndarray)) or not isinstance(matrix_b, (list, np.ndarray)): raise TypeError(\\"Both inputs should be a list of lists or numpy arrays.\\") if isinstance(matrix_a, list): matrix_a = np.array(matrix_a) if isinstance(matrix_b, list): matrix_b = np.array(matrix_b) # Check compatibility for matrix multiplication if matrix_a.shape[1] != matrix_b.shape[0]: raise ValueError(\\"Matrices cannot be multiplied due to incompatible dimensions.\\") # Perform matrix multiplication result = np.dot(matrix_a, matrix_b) if return_as_numpy: return result else: return result.tolist()"},{"question":"Given a list of strings, write a function that receives this list and returns only those strings that are palindromes. A palindrome is a word that reads the same backward as forward. The function should handle case sensitivity and remove any spaces before checking for palindromes. In addition, make sure your function can handle scenarios where the input list is empty or contains non-string values. Example: ``` Input: [\\"radar\\", \\"hello\\", \\"level\\", \\"world\\", \\"A Santa at Nasa\\", 123, \\"madam\\"] Output: [\\"radar\\", \\"level\\", \\"A Santa at Nasa\\", \\"madam\\"] Input: [] Output: [] ``` Hint: You can use the `str.lower()` method to address case sensitivity and `str.replace()` method to handle spaces. Here is a starting point for your function: ```python def find_palindromes(strings): result = [] for item in strings: if isinstance(item, str): cleaned_item = item.replace(\\" \\", \\"\\").lower() if cleaned_item == cleaned_item[::-1]: result.append(item) return result ```","solution":"def find_palindromes(strings): Returns a list of strings from the input list that are palindromes. Handles case sensitivity and removes spaces before checking. Parameters: strings (list): List of strings (and possibly other types) to be checked. Returns: list: List of palindromic strings. result = [] for item in strings: if isinstance(item, str): cleaned_item = item.replace(\\" \\", \\"\\").lower() if cleaned_item == cleaned_item[::-1]: result.append(item) return result"},{"question":"**Problem Statement:** Write a Python function that accepts a string and checks if it is a valid IPv4 address. An IPv4 address is considered valid if it consists of four octets, with each octet being a number between 0 and 255, and no leading zeros are allowed unless the octet is zero itself (e.g., \'192.168.1.1\' is valid, \'192.168.01.1\' is not). Return True if the string is a valid IPv4 address, otherwise return False. # Example: ```python is_valid_ipv4(\\"192.168.1.1\\") # Returns: True is_valid_ipv4(\\"256.100.50.0\\") # Returns: False (256 is out of the valid range) is_valid_ipv4(\\"192.168.01.1\\") # Returns: False (leading zero in the second octet) is_valid_ipv4(\\"192.168.1\\") # Returns: False (not enough octets) is_valid_ipv4(\\"192.168.1.256\\") # Returns: False (256 is out of the valid range) ``` # Function Signature: ```python def is_valid_ipv4(ip: str) -> bool: pass ```","solution":"def is_valid_ipv4(ip: str) -> bool: Checks if the given string is a valid IPv4 address. An IPv4 address is valid if it: - Consists of four octets separated by dots. - Each octet is a number between 0 and 255. - No leading zeros in any octet unless the octet is zero itself. Parameters: - ip (str): The string to check. Returns: - bool: True if the string is a valid IPv4 address, False otherwise. octets = ip.split(\'.\') # There must be exactly 4 octets if len(octets) != 4: return False for octet in octets: # Each octet must be a number and within the range 0-255 if not octet.isdigit() or not 0 <= int(octet) <= 255: return False # No leading zeros are allowed, unless the octet is \\"0\\" if octet != \\"0\\" and octet.startswith(\\"0\\"): return False return True"},{"question":"Implement a function that takes a list of integers and returns the longest contiguous subarray with a sum equal to 0. If there are multiple subarrays with the same maximum length, return the one that appears first. Ensure the function is efficient and can handle large inputs. Evaluate its performance on arrays with both positive and negative integers as well as edge cases with all elements being zero.","solution":"def longest_zero_sum_subarray(arr): Returns the longest contiguous subarray which has a sum equal to 0. If multiple such subarrays exist with the same maximum length, returns the first one. # Dictionary to store the first occurrence of prefix sums prefix_sum_map = {} max_len = 0 prefix_sum = 0 start_index = -1 for i, num in enumerate(arr): prefix_sum += num # When subarray starts from index 0 if prefix_sum == 0: max_len = i + 1 start_index = 0 # If prefix_sum is seen before, then there exists at least one subarray ending # at index i with 0 sum if prefix_sum in prefix_sum_map: length = i - prefix_sum_map[prefix_sum] if length > max_len: max_len = length start_index = prefix_sum_map[prefix_sum] + 1 else: prefix_sum_map[prefix_sum] = i # If max_len is 0, it means no subarray has sum=0 if max_len == 0: return [] else: return arr[start_index:start_index + max_len]"},{"question":"Considering the Prompt: Refactor the given function to make use of the \'map\' function instead of the current implementation that utilizes a \'for\' loop for creating a new list. Maintain the original behavior and functionality of the code. Here is the current implementation: def square_numbers(nums): square_nums = [] for num in nums: square_nums.append(num ** 2) return square_nums","solution":"def square_numbers(nums): Returns a list of the squares of the numbers in the input list. return list(map(lambda num: num ** 2, nums))"},{"question":"Analyze the provided array of integers and determine the length of the longest subsequence where each element is either the same as or differs by 1 from the previous element. Implement a function, `longestSubsequence`, that takes an array of integers as input and returns the length of the longest such subsequence. Function Signature: ```python def longestSubsequence(arr: List[int]) -> int: pass ``` Example: ```python input: [1, 2, 3, 4, 3, 2, 1, 2, 3, 4] output: 10 ``` Explanation: In the example provided, the longest subsequence where each element is either the same as or differs by 1 from the previous element is the entire array itself, resulting in a length of 10.","solution":"def longestSubsequence(arr): if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) <= 1: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len"},{"question":"Design and implement a Depth-First Search (DFS) algorithm to traverse a graph represented using adjacency lists in Python. Ensure that your function can handle both cyclic and acyclic graphs. Test your implementation using the following matrix representation of a graph: ```python graph = { 0: [1, 2], 1: [2], 2: [0, 3], 3: [3] } ``` Your function should return a list of nodes in the order they are visited by the DFS algorithm, starting from node `0`.","solution":"def dfs(graph, start_node): Depth-First Search (DFS) traversal of a graph represented as an adjacency list. Args: graph (dict): The graph represented as an adjacency list. start_node (int): The node from which to start the DFS. Returns: list: A list of nodes in the order they are visited by the DFS algorithm. visited = set() result = [] def dfs_helper(node): if node not in visited: visited.add(node) result.append(node) for neighbor in graph.get(node, []): dfs_helper(neighbor) dfs_helper(start_node) return result"},{"question":"Create a function that takes a string as an input and returns True if the string is a well-formed mathematical expression using parentheses, brackets, and curly braces; otherwise, returns False. The function should validate that each opening symbol has a corresponding closing symbol and that they are correctly nested. Example: ``` Input: \\"{[()]}\\" Output: True Input: \\"{[(])}\\" Output: False ```","solution":"def is_well_formed(expression): Returns True if the input string is a well-formed mathematical expression using parentheses, brackets, and curly braces; otherwise, returns False. stack = [] matching_pairs = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in expression: if char in matching_pairs.values(): stack.append(char) elif char in matching_pairs.keys(): if stack == [] or matching_pairs[char] != stack.pop(): return False else: # Ignore non-bracket characters continue return stack == []"},{"question":"Construct a Python program that leverages the AWS SDK for Python (Boto3) to create an Amazon S3 bucket, upload a file to the newly created bucket, and then generate a pre-signed URL for the uploaded file to allow temporary access. The program should include exception handling to manage potential errors during the bucket creation, file upload, and URL generation processes.","solution":"import boto3 from botocore.exceptions import NoCredentialsError, PartialCredentialsError, ClientError import logging logging.basicConfig(level=logging.INFO) logger = logging.getLogger() def create_bucket(bucket_name, region=None): try: s3_client = boto3.client(\'s3\', region_name=region) if region: location = {\'LocationConstraint\': region} s3_client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) else: s3_client.create_bucket(Bucket=bucket_name) logger.info(f\\"Bucket {bucket_name} created.\\") return s3_client except (ClientError, NoCredentialsError, PartialCredentialsError) as e: logger.error(f\\"Failed to create bucket {bucket_name}: {str(e)}\\") raise def upload_file_to_bucket(bucket_name, file_name, object_name=None): if object_name is None: object_name = file_name try: s3_client = boto3.client(\'s3\') s3_client.upload_file(file_name, bucket_name, object_name) logger.info(f\\"File {file_name} uploaded to bucket {bucket_name}.\\") except (ClientError, NoCredentialsError, PartialCredentialsError) as e: logger.error(f\\"Failed to upload file {file_name} to bucket {bucket_name}: {str(e)}\\") raise def create_presigned_url(bucket_name, object_name, expiration=3600): try: s3_client = boto3.client(\'s3\') response = s3_client.generate_presigned_url(\'get_object\', Params={\'Bucket\': bucket_name, \'Key\': object_name}, ExpiresIn=expiration) logger.info(f\\"Presigned URL: {response}\\") return response except (ClientError, NoCredentialsError, PartialCredentialsError) as e: logger.error(f\\"Failed to create presigned URL for {object_name} in bucket {bucket_name}: {str(e)}\\") raise"},{"question":"Write a function that takes a list of integers and a target integer and determines whether there are three numbers in the list that add up to the target integer. If such a combination exists, return a list of these three integers in ascending order. If no such combination exists, return an empty list. For example, given the list `[5, 1, 3, 8, 12]` and the target `16`, the combination `[1, 3, 12]` sums up to 16. Function Signature: `def three_sum(nums: List[int], target: int) -> List[int]:`","solution":"from typing import List def three_sum(nums: List[int], target: int) -> List[int]: nums.sort() for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return [nums[i], nums[left], nums[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"Write a function to determine if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Additionally, the function should be capable of reconstructing the given string in such a way that it becomes a valid palindrome by adding the minimum number of characters necessary at any position within the string. For example, given the string \\"A man, a plan, a canal, Panama!\\", the function should return `True` for the validity check and reconstruct the palindrome as \\"AmanaplanacanalPanama\\". Ensure that the function provides proper handling of invalid inputs and displays suitable error messages.","solution":"def is_valid_palindrome(s): Determines if a given string is a valid palindrome, considering only alphanumeric characters and ignoring case. if not isinstance(s, str): return (False, \\"Invalid input: Not a string\\") # Filter only alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] reconstructed_string = \'\'.join(filtered_chars) # Check if the filtered string is a palindrome is_palindrome = reconstructed_string == reconstructed_string[::-1] return (is_palindrome, reconstructed_string)"},{"question":"Given `n` pairs of numbers where the first number in each pair represents the height of a person and the second number represents the number of people in front of this person who have a height greater than or equal to this person\'s height, reconstruct the queue. Write a function `reconstructQueue` that takes a list of pairs and returns the reconstructed queue represented by a list of pairs. # Function Signature ```python def reconstructQueue(people: List[List[int]]) -> List[List[int]]: ``` # Input - `people`: A list of `n` pairs, where `people[i] = [hi, ki]`. - `hi` is the height of the ith person. - `ki` is the number of people in front of the ith person with a height greater than or equal to `hi`. # Output - Return the reconstructed queue as a list of pairs. # Example ```python assert reconstructQueue([[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]) == [[5, 0], [7, 0], [5, 2], [6, 1], [4, 4], [7, 1]] assert reconstructQueue([[6, 0], [5, 0], [4, 0], [3, 2], [2, 2], [1, 4]]) == [[4, 0], [5, 0], [2, 2], [3, 2], [1, 4], [6, 0]] ``` # Constraints - The number of pairs is at most 1000. - The height of each person is a positive integer and no more than 10^9. - The number of people in front of each person with greater or equal height is a non-negative integer and less than the total number of people.","solution":"def reconstructQueue(people): Reconstructs the queue based on given list of pairs. :param people: List of pairs, where each pair represents a person\'s height and the number of people in front with a height greater or equal to this person\'s height. :return: Reconstructed queue as a list of pairs. # Sort people by height in descending order. # If heights are the same, sort by the number of people in front in ascending order. people.sort(key=lambda x: (-x[0], x[1])) queue = [] # Insert each person into the queue based on the number of people in front. for person in people: queue.insert(person[1], person) return queue"},{"question":"Given a string of words separated by spaces, write a Python function that reverses each word in the string while maintaining the original order of words. The function should use list comprehension. Additionally, write unit tests to make sure your function works as expected. To make this task more challenging, there is a piece of code below. However, this code incorrectly reverses the entire string, not individual words, and does not use list comprehension. You will need to correlate the code with the problem statement. ```python def reverse_string(s): return s[::-1] ```","solution":"def reverse_words(s): Reverses each word in the string while maintaining the original order of words. return \' \'.join([word[::-1] for word in s.split()])"},{"question":"Write a function `count_distinct_substrings` that takes a string `s` as input and returns the number of distinct substrings that can be formed using the characters of `s`. A substring is defined as a contiguous sequence of characters within the string. # Function Signature ```python def count_distinct_substrings(s: str) -> int: pass ``` # Example ```python assert(count_distinct_substrings(\\"abc\\")) == 6 assert(count_distinct_substrings(\\"aaa\\")) == 3 ``` # Explanation - For the input \\"abc\\", the distinct substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\", totaling 6. - For the input \\"aaa\\", the distinct substrings are \\"a\\", \\"aa\\", and \\"aaa\\", totaling 3. # Constraints - The length of the input string `s` will be between 1 and 1000 characters. - The input string `s` will only consist of lowercase English letters.","solution":"def count_distinct_substrings(s: str) -> int: Returns the number of distinct substrings that can be formed using the characters of s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Write a Python function to generate all possible permutations of a given string without using itertools. The generated permutations should not contain any duplicates, even if the input string contains duplicate characters. Function Signature: ```python def generate_permutations(s: str) -> List[str]: ``` **Example:** ```python input_str = \\"AAB\\" output = generate_permutations(input_str) print(output) # Should print: [\'AAB\', \'ABA\', \'BAA\'] ```","solution":"def generate_permutations(s: str) -> list: Generate all unique permutations of a given string. :param s: The input string. :return: A list of unique permutations. def permute(path, counter): if len(path) == len(s): result.append(\\"\\".join(path)) return for char in counter: if counter[char] > 0: path.append(char) counter[char] -= 1 permute(path, counter) path.pop() counter[char] += 1 result = [] counter = {char: s.count(char) for char in set(s)} permute([], counter) return result"},{"question":"Write a function that takes a list of integers and an integer `k`, and determines whether there are three distinct elements within the list that sum up to `k`. The function should return `True` if such a triplet exists, otherwise `False`. Example: ```python nums = [12, 3, 4, 1, 6, 9] k = 24 ``` In this case, the function should return `True` since 12, 3, and 9 sum up to 24. Notes: - Your solution should account for an efficient approach in terms of time complexity. - Consider edge cases such as lists with fewer than three elements.","solution":"def three_sum(nums, k): Determines whether there are three distinct elements within the list that sum up to k. Args: nums (list of int): List of integers. k (int): Target sum. Returns: bool: True if there are three distinct elements that sum up to k, otherwise False. nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == k: return True elif current_sum < k: left += 1 else: right -= 1 return False"},{"question":"Consider a sequence S consisting of integers. Define R(L, R) as the sum of the integers in the subarray of S from the L-th to the R-th element (1-indexed). We define a range sum query Q(a, b) as the operation where you must compute R(a, b). Additionally, you are allowed to perform an update operation U(i, v) to change the i-th element of sequence S to value v. Given a sequence S and a series of m queries, each of which is either a range sum query Q(a, b) or an update query U(i, v), return the results of all range sum queries in the order they were received. Example input: ``` S = [1, 2, 3, 4, 5] queries = [ (Q, 1, 3), (U, 2, 10), (Q, 1, 3), (Q, 3, 4) ] ``` Example output: ``` [6, 14, 13] ``` Explanation: 1. Initial sequence is [1, 2, 3, 4, 5]. 2. First query (Q, 1, 3) sums up elements from index 1 to 3: 1 + 2 + 3 = 6. 3. Second query (U, 2, 10) updates element at index 2 to 10, resulting in sequence [1, 10, 3, 4, 5]. 4. Third query (Q, 1, 3) sums up elements from index 1 to 3: 1 + 10 + 3 = 14. 5. Fourth query (Q, 3, 4) sums up elements from index 3 to 4: 3 + 4 = 7. Note: - Handle cases where there are consecutive updates or queries. - Implement efficient data structures for querying and updating the sequence.","solution":"def process_queries(S, queries): results = [] for query in queries: if query[0] == \'Q\': # Range sum query from a to b (1-indexed) a, b = query[1] - 1, query[2] - 1 # Convert to 0-indexed results.append(sum(S[a:b+1])) elif query[0] == \'U\': # Update query to change the i-th element to v (1-indexed) i, v = query[1] - 1, query[2] # Convert to 0-indexed S[i] = v return results # Example usage: S = [1, 2, 3, 4, 5] queries = [ (\'Q\', 1, 3), (\'U\', 2, 10), (\'Q\', 1, 3), (\'Q\', 3, 4) ] # Should return [6, 14, 7] print(process_queries(S, queries))"},{"question":"Write a function to determine if a given positive integer is a prime number. Your function should not use any built-in functions related to prime checking or mathematical libraries.","solution":"def is_prime(n): Determine if a given positive integer n is a prime number. :param n: Positive integer to check for primality. :return: True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a function that takes a string of words separated by a single space and returns the longest word. If there is a tie, return the word that appears first. Ignore any punctuation and consider words are made of alphabetical characters only. Function signature: ```python def longest_word(s: str) -> str: pass ``` Example: ```python Input: \\"The quick brown fox.\\" Output: \\"quick\\" Input: \\"A good day for every one.\\" Output: \\"every\\" Input: \\"Hello, world!\\" Output: \\"Hello\\" ``` # Constraints: - The input string will contain at least one word. - The input string will contain less than 1000 characters.","solution":"import re def longest_word(s: str) -> str: This function takes a string of words separated by a single space and returns the longest word. If there is a tie, it returns the word that appears first. Punctuation is ignored, and words are made of alphabetical characters only. words = re.findall(r\'bw+b\', s) longest = \\"\\" for word in words: if len(word) > len(longest) or (len(word) == len(longest) and s.index(word) < s.index(longest)): longest = word return longest"},{"question":"Write a Python program to simulate an ant moving on a 2D grid. The ant starts at position (0, 0) and moves in random directions, one of `[\'UP\', \'DOWN\', \'LEFT\', \'RIGHT\']`, with each step covering a distance of 1 unit. Implement a function that takes an integer `n` as input and returns the final position of the ant after `n` steps. Additionally, create a function to estimate the average Euclidean distance from the origin after 1000 simulations with `n` steps each. The Euclidean distance is calculated as `sqrt(x^2 + y^2)`, where `(x, y)` is the final position of the ant. Note: Use Python\'s `random` library to determine the direction of each step. Here\'s a breakdown of the challenge: - Use lists or tuples to represent coordinates and directions. - Utilize loops and conditionals to simulate the ant\'s movement. - Implement mathematical functions to compute Euclidean distance. - Aggregate results over multiple simulations to compute the average distance.","solution":"import random import math def simulate_ant_movement(n): Simulates the movement of an ant on a 2D grid for n steps. Returns the final position of the ant as a tuple (x, y). directions = [\'UP\', \'DOWN\', \'LEFT\', \'RIGHT\'] x, y = 0, 0 for _ in range(n): move = random.choice(directions) if move == \'UP\': y += 1 elif move == \'DOWN\': y -= 1 elif move == \'LEFT\': x -= 1 elif move == \'RIGHT\': x += 1 return x, y def average_distance_from_origin(n, simulations=1000): Simulates the ant movement `simulations` times, each with `n` steps. Returns the average Euclidean distance from the origin after the simulations. total_distance = 0 for _ in range(simulations): final_x, final_y = simulate_ant_movement(n) distance = math.sqrt(final_x**2 + final_y**2) total_distance += distance return total_distance / simulations"},{"question":"Given a list of positive integers, write a function that finds the smallest positive integer missing from the list. Your solution should have a time complexity of O(n) and use O(1) additional space (excluding the input list). # Function Signature ```python def find_missing_positive(nums: list) -> int: ``` # Input - A list `nums` containing `n` positive integers (0 < n <= 100000). # Output - Returns the smallest positive integer that does not appear in the list. # Example ```python assert find_missing_positive([3, 4, -1, 1]) == 2 assert find_missing_positive([1, 2, 0]) == 3 assert find_missing_positive([7, 8, 9, 11, 12]) == 1 ``` # Constraints 1. The algorithm must run in O(n) time. 2. The function should use O(1) extra space, not including the input list. # Explanation - The function should work for any list of positive integers, sorting is not allowed due to time complexity requirement. - The goal is to implement a solution using the given constraints efficiently.","solution":"def find_missing_positive(nums: list) -> int: Finds the smallest positive integer missing from the list. The function modifies the input list to achieve O(1) extra space complexity. n = len(nums) # Step 1: Replace non-positive numbers and out of range numbers with a number larger than the length of the array for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Mark positions corresponding to values in the array for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: The first positive index + 1 is the smallest missing positive integer for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Write a function in Python that takes two inputs: a list of integers and a target sum. The function should return a list of unique pairs of numbers that add up to the target sum. Each pair should be sorted in ascending order, and the list of pairs should also be sorted in ascending order based on the first element of each pair. numbers = [1, 2, 3, 4, 5, 6] target_sum = 7","solution":"def find_pairs_with_sum(numbers, target_sum): Finds all unique pairs of integers in the list \'numbers\' that add up to \'target_sum\'. Each pair (a, b) is such that a <= b and the list of pairs is sorted in ascending order based on the first element. Parameters: - numbers: list of integers - target_sum: integer representing the target sum Returns: - A list of unique pairs (as tuples) that add up to \'target_sum\', sorted as per the conditions mentioned above. numbers.sort() pairs = set() seen = set() for num in numbers: complement = target_sum - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) sorted_pairs = sorted(pairs, key=lambda x: (x[0], x[1])) return sorted_pairs"},{"question":"Write a Python function that takes a list of integers and returns a new list with all zero elements moved to the end while maintaining the relative order of the non-zero elements. Your solution should handle edge cases such as an empty list, a list with all zeros, and a list with no zeros. Additionally, implement error checking to ensure the input is a list of integers. Provide a clear and concise error message for invalid inputs.","solution":"def move_zeros_to_end(lst): Returns a new list with all zero elements moved to the end while maintaining the relative order of the non-zero elements. Parameters: lst (list): A list of integers. Returns: list: A new list with zeros moved to the end. Raises: ValueError: If the input is not a list of integers. if not isinstance(lst, list): raise ValueError(\\"Input must be a list.\\") if not all(isinstance(x, int) for x in lst): raise ValueError(\\"Input list must contain only integers.\\") non_zeros = [x for x in lst if x != 0] zeros = [x for x in lst if x == 0] return non_zeros + zeros"},{"question":"Write a function that performs matrix multiplication and includes a validity check of the input matrices. The function should first check if the matrices can be multiplied (i.e., the number of columns in the first matrix equals the number of rows in the second matrix) and ensure that all matrix elements are integers. If the validation fails, the function should return an error message. Define the function as follows: def matrix_multiplication(A: list, B: list): A and B are matrices represented as lists of lists, where each sublist is a row in the matrix. The function\'s task is to multiply matrix A by matrix B and return the resulting matrix. It should return an error message if the matrices cannot be multiplied or if they contain non-integer values. >>> matrix_multiplication([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]]) [[58, 64], [139, 154]] >>> matrix_multiplication([[1, 2], [3, 4]], [[5, 6, 7], [8, 9, 10]]) [[21, 24, 27], [47, 54, 61]] >>> matrix_multiplication([[1, 2]], [[3], [4], [5]]) \\"Invalid matrix dimensions\\" >>> matrix_multiplication([[1, 2], [3, \'a\']], [[5, 6], [7, 8]]) \\"Invalid matrix element\\" >>> matrix_multiplication([[1, 2]], [5, 6]) \\"Invalid matrix element\\"","solution":"def matrix_multiplication(A: list, B: list): A and B are matrices represented as lists of lists, where each sublist is a row in the matrix. The function\'s task is to multiply matrix A by matrix B and return the resulting matrix. It should return an error message if the matrices cannot be multiplied or if they contain non-integer values. # Check if all elements are lists of integers and matrix dimensions are correct def is_valid_matrix(matrix): if not all(isinstance(row, list) for row in matrix): return False for row in matrix: if not all(isinstance(col, int) for col in row): return False return True if not is_valid_matrix(A) or not is_valid_matrix(B): return \\"Invalid matrix element\\" # Check if number of columns in A equals number of rows in B if len(A[0]) != len(B): return \\"Invalid matrix dimensions\\" # Matrix multiplication result = [[sum(A[i][k] * B[k][j] for k in range(len(B))) for j in range(len(B[0]))] for i in range(len(A))] return result"},{"question":"Create a Python function called `sort_and_reverse` that takes a list of integers as input, sorts the list in ascending order, and then returns a new list that has the same elements but in reverse order. For instance, given the input `[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]`, the function should return `[9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]`.","solution":"def sort_and_reverse(lst): Sorts the list in ascending order and then returns a new list with the same elements in reverse order. sorted_list = sorted(lst) reversed_list = sorted_list[::-1] return reversed_list"},{"question":"Write a Python function that takes an integer array as input and returns an array containing the next greater element for each element in the input array. If there is no greater element, put -1 for that index. Example: Input: [4, 5, 2, 10] Output: [5, 10, 10, -1]","solution":"def next_greater_element(arr): result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: result[stack.pop()] = arr[i] stack.append(i) return result"},{"question":"Write a program that takes an integer as input and determines whether the integer is part of the Fibonacci sequence or not. If the integer is a Fibonacci number, the program should return its position in the sequence (starting from 1); otherwise, it should return -1. The program should handle edge cases, such as very large integers efficiently. Additionally, include error handling to ensure the input is a valid positive integer. Document each step in your code with explanatory comments to provide clarity on the logic being implemented. Implement this problem using at least one programming paradigm (e.g., iterative, recursive).","solution":"def is_fibonacci(n): Determines whether a given integer n is part of the Fibonacci sequence. If it is, returns its position in the sequence (starting from 1); otherwise, returns -1. Validates that the input is a positive integer. Uses an iterative approach to generate Fibonacci numbers up to n. if not isinstance(n, int) or n < 1: raise ValueError(\\"Input must be a positive integer.\\") # Initializing the first two Fibonacci numbers and their respective positions. a, b = 1, 1 position = 1 while a <= n: if a == n: return position a, b = b, a + b position += 1 return -1"},{"question":"Write a function `find_order_of_courses(courses, prerequisites)` that finds the order in which courses should be completed given a list of `courses` and a list of `prerequisites`. Each course is represented by a unique integer from 0 to n-1, and there are `n` courses in total. The `prerequisites` list contains pairs of courses, where each pair `[a, b]` indicates that course `a` must be taken before course `b`. The function should: 1. Return a list of integers in the order in which the courses should be completed. 2. If there are multiple valid orders, return any one of them. 3. If it is impossible to complete all courses, return an empty list. Note: - You can assume that there are no duplicate prerequisites. - You can assume that prerequisites do not form a cyclic dependency. Examples: - `find_order_of_courses(4, [[1, 0], [2, 0], [3, 1], [3, 2]])` => `[0, 1, 2, 3]` or `[0, 2, 1, 3]` - `find_order_of_courses(2, [[1, 0], [0, 1]])` => `[]` This problem tests the understanding of graph traversal algorithms like topological sorting which is typically solved using either Depth-First Search (DFS) or Kahn\'s Algorithm.","solution":"def find_order_of_courses(courses, prerequisites): from collections import defaultdict, deque # Create a list to keep track of the in-degree (number of incoming edges) of each course in_degree = [0] * courses # Create an adjacency list to represent the graph adjacency_list = defaultdict(list) # Fill the in-degree list and adjacency list considering the prerequisites for dest, src in prerequisites: in_degree[dest] += 1 adjacency_list[src].append(dest) # Queue for holding courses with no prerequisites (in-degree 0) queue = deque([course for course in range(courses) if in_degree[course] == 0]) course_order = [] while queue: current_course = queue.popleft() course_order.append(current_course) for neighbor in adjacency_list[current_course]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if the ordering contains all courses if len(course_order) == courses: return course_order else: return []"},{"question":"A warehouse manager needs to optimize the storage system by categorizing boxes into different sections based on their weights. Given a list of box weights, write a program that classifies each box into one of three categories: \'Light\', \'Medium\', or \'Heavy\'. The weight ranges for each category are as follows: - Light: up to 10 kg - Medium: greater than 10 kg and up to 20 kg - Heavy: greater than 20 kg Your program should output the number of boxes in each category and identify the heaviest and lightest box. Make sure your solution is efficient and can handle a scenario where the number of boxes is in the order of 10^6.","solution":"def classify_boxes(weights): Classify boxes into categories and find the heaviest and lightest boxes. Parameters: weights (list): List of box weights in kilograms. Returns: dict: A dictionary with the number of boxes in each category and the weights of the heaviest and lightest boxes. categories = {\'Light\': 0, \'Medium\': 0, \'Heavy\': 0} min_weight = float(\'inf\') max_weight = float(\'-inf\') for weight in weights: if weight <= 10: categories[\'Light\'] += 1 elif 10 < weight <= 20: categories[\'Medium\'] += 1 else: categories[\'Heavy\'] += 1 if weight < min_weight: min_weight = weight if weight > max_weight: max_weight = weight return { \'categories\': categories, \'heaviest\': max_weight, \'lightest\': min_weight }"},{"question":"Develop a function in Python that accepts a list of strings and returns a list of integers. Each integer represents the number of unique characters in the corresponding string from the input list. For example, given `[\\"hello\\", \\"world\\", \\"python\\"]`, the output should be `[4, 5, 6]` since \\"hello\\" has 4 unique characters (\'h\', \'e\', \'l\', \'o\'), \\"world\\" has 5 unique characters (\'w\', \'o\', \'r\', \'l\', \'d\'), and \\"python\\" has 6 unique characters (\'p\', \'y\', \'t\', \'h\', \'o\', \'n\'). Ensure your function handles an empty list or empty strings within the list correctly.","solution":"def count_unique_characters(strings): Given a list of strings, return a list of integers where each integer represents the number of unique characters in the corresponding string. :param strings: List of strings :return: List of integers result = [] for s in strings: unique_chars = set(s) result.append(len(unique_chars)) return result"},{"question":"Given an n x n grid filled with non-negative integers, find a path from the top-left corner to the bottom-right corner which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Your goal is to return the minimum sum obtained by following such a path. Example 1: Input: grid = [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Minimum path sum is indicated as follows: 1→3→1→1→1 Example 2: Input: grid = [ [1,2,3], [4,5,6], [7,8,9] ] Output: 21 Explanation: Minimum path sum is indicated as follows: 1→2→3→6→9 Constraints: - m == grid.length - n == grid[i].length - 1 <= m, n <= 200 - 0 <= grid[i][j] <= 100","solution":"def min_path_sum(grid): Returns the minimum sum obtained by following a path from the top-left corner to the bottom-right corner of the grid, moving only down or right at any point in time. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first column of dp table for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row of dp table for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Create a function to rotate the elements of an array to the right by `k` positions. Array: [1, 2, 3, 4, 5] k: 2","solution":"def rotate_array(arr, k): Rotates the elements of the array to the right by k positions. Parameters: arr (list): The array to rotate. k (int): The number of positions to rotate the array. Returns: list: The rotated array. if not arr or k <= 0: return arr n = len(arr) k %= n # In case k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"Create a function that takes a rectangle (defined as a dictionary with the keys \'length\' and \'width\') and determines the minimum number of identical square tiles required to cover the entire area of the rectangle without any overlap. The function should return the side length of the square tiles used and the total number of such tiles required. You can assume that length and width are positive integers and the rectangle can be perfectly covered by the square tiles. For example, given a rectangle with length 20 and width 15, the function should calculate the side length of the largest possible square tile and the number of such tiles needed.","solution":"import math def gcd(a, b): Calculate the Greatest Common Divisor of a and b. while b: a, b = b, a % b return a def min_square_tiles(rectangle): Determines the side length of the square tiles and the minimum number of square tiles required to cover the entire area of the rectangle. Parameters: - rectangle: A dictionary with \'length\' and \'width\' as keys representing the rectangle sides Returns: - (side_length, tile_count): Tuple containing the side length of the squares and the number of such tiles required length = rectangle[\'length\'] width = rectangle[\'width\'] # Calculate the side length of the largest possible square tile side_length = gcd(length, width) # Calculate the area of the rectangle area = length * width # Calculate the number of tiles required tile_count = area // (side_length ** 2) return side_length, tile_count"},{"question":"Write a Python function that accepts a list of integers and returns the list in sorted order, but such that all negative numbers appear before all positive numbers and zeros, while preserving their relative order from the original list. Additionally, provide a brief explanation as to why your solution works efficiently for this particular problem. Example: ```python Input: [4, -1, 9, 3, -5, 0, -2] Output: [-1, -5, -2, 4, 9, 3, 0] ``` Explanation: - Negative numbers `[-1, -5, -2]` preserve their relative order. - Non-negative numbers `[4, 9, 3, 0]` preserve their relative order after the negative numbers.","solution":"def rearrange_list(nums): Returns the list of integers sorted such that all negative numbers appear before all positive numbers and zeros, preserving their relative order from the original list. negatives = [num for num in nums if num < 0] non_negatives = [num for num in nums if num >= 0] return negatives + non_negatives # The function works efficiently because it performs a single pass through the input list # to separate negative and non-negative numbers, each in O(n) time complexity, # where n is the length of the input list. The final concatenation operation also # works in O(n). Thus, the overall time complexity is O(n)."},{"question":"Implement a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Use the Sieve of Eratosthenes algorithm for finding prime numbers efficiently. ```python def sieve_of_eratosthenes(numbers): max_num = max(numbers) is_prime = [True] * (max_num + 1) p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 prime_numbers = [num for num in numbers if is_prime[num]] return prime_numbers # Sample usage numbers = [10, 15, 23, 31, 42, 89] print(sieve_of_eratosthenes(numbers)) # Output: [23, 31, 89] ```","solution":"def sieve_of_eratosthenes(numbers): Returns a list of prime numbers from the input list using the Sieve of Eratosthenes algorithm. if not numbers: return [] max_num = max(numbers) if max_num < 2: return [] is_prime = [True] * (max_num + 1) is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers for p in range(2, int(max_num**0.5) + 1): if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False prime_numbers = [num for num in numbers if num >= 2 and is_prime[num]] return prime_numbers"},{"question":"Below is a Python function that attempts to count the number of unique paths in an `m x n` grid. The function contains logical and optimization errors. Your task is to correct the logic and improve the function to handle larger grids efficiently. You may choose to rewrite the function from scratch or fix the existing implementation. The grid has obstacles marked by 1 and empty spaces marked by 0. You can only move either down or right at any point. Implement a function that returns the number of unique paths from the top-left corner to the bottom-right corner of the grid, navigating around the obstacles. ```python def unique_paths_with_obstacles(grid): def helper(x, y): if x == len(grid) - 1 and y == len(grid[0]) - 1: return 1 if x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 1: return 0 return helper(x + 1, y) + helper(x, y + 1) if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 return helper(0, 0) # Test Cases print(unique_paths_with_obstacles([[0, 0, 0], [0, 1, 0], [0, 0, 0]])) # Expected output: 2 print(unique_paths_with_obstacles([[0, 1], [0, 0]])) # Expected output: 1 ``` Additionally, provide an optimized approach that efficiently computes the result for larger grids, up to `100 x 100`.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths in a grid with obstacles. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] # Initialize top-left corner if there\'s no obstacle dp[0][0] = 1 # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 # Fill the dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[-1][-1]"},{"question":"Create a function that accepts two inputs: a list of numerical values (either integers or floating point numbers) and an integer value. The function should treat the integer as the number of elements to sum from the start of the list. If the integer value is greater than the length of the list, sum all the elements of the list. Additionally, the function should be able to handle empty lists. Implement error checking to handle invalid inputs gracefully. Example input: ([1.5, 2.5, 3.5, 4.5], 3)","solution":"def sum_n_elements(numbers, n): Returns the sum of the first n elements in the list \'numbers\'. If n is greater than the length of the list, sum all elements. If the list is empty, return 0. Validates inputs to be of correct types. if not isinstance(numbers, list): raise TypeError(\\"The first argument must be a list.\\") if not all(isinstance(num, (int, float)) for num in numbers): raise TypeError(\\"All elements in the list must be integers or floats.\\") if not isinstance(n, int): raise TypeError(\\"The second argument must be an integer.\\") if n < 0: raise ValueError(\\"The integer value must be non-negative.\\") return sum(numbers[:n]) if numbers else 0"},{"question":"Design a function that takes as input two sorted linked lists and merges them into a single sorted linked list without using any extra space. The merging process should be done in place, and the function should return the head of the resulting merged sorted linked list. The function should handle edge cases like one or both of the input lists being empty. Additionally, ensure your function runs efficiently, with a time complexity of O(n + m), where n and m are the lengths of the input linked lists. For example: List 1: 1 -> 3 -> 5 List 2: 2 -> 4 -> 6 The merged list should be: 1 -> 2 -> 3 -> 4 -> 5 -> 6 Consider edge cases as well: List 1: 1 -> 3 -> 5 List 2: null The merged list should be: 1 -> 3 -> 5 Define your function and include error checking for invalid inputs such as nodes that are not linked lists or non-integer values.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def merge_sorted_lists(l1, l2): Merge two sorted linked lists into one sorted linked list in place. # Dummy node to hang the result on dummy = ListNode(0) tail = dummy # Traverse both lists and compare each node while l1 and l2: if l1.val <= l2.val: tail.next, l1 = l1, l1.next else: tail.next, l2 = l2, l2.next tail = tail.next # At this point, at least one of l1 or l2 is None tail.next = l1 if l1 is not None else l2 return dummy.next"},{"question":"Construct a function that evaluates the total score achieved by a student based on an array of test scores. The function should filter out the lowest score before calculating the total sum. Assume the array of test scores named \'scores\' contains at least two elements. For instance, given an array \'scores\' = [80, 90, 85, 70], your function should remove the lowest score 70 and sum the rest, resulting in a total score of 255.","solution":"def total_score(scores): Returns the total score achieved by summing all scores after removing the lowest score. :param scores: List of integers representing scores :return: Integer representing the total score after removing the lowest score if len(scores) < 2: raise ValueError(\\"The array must contain at least two elements\\") min_score = min(scores) total = sum(scores) - min_score return total"},{"question":"Develop a Python function that takes two parameters: a list of integers and an integer threshold value \\"t\\". The function should filter the list to only include elements that are greater than or equal to \\"t\\" and then remove duplicates while maintaining the original order. The function should return the filtered list. For example, if the input list is [4, 6, 7, 4, 3, 7, 9, 2] and the threshold value is 5, the function would return [6, 7, 9]. If the threshold is 8, the function would return [9].","solution":"def filter_and_deduplicate(lst, threshold): Filters the list to include elements greater than or equal to the threshold value and removes duplicates while maintaining the original order. Parameters: lst (list): A list of integers threshold (int): An integer threshold value Returns: list: The filtered and deduplicated list seen = set() result = [] for item in lst: if item >= threshold and item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function that merges two sorted arrays into a single sorted array without using any built-in functions for sorting. The input arrays will only contain integers and can have different lengths. Your function should handle edge cases where one or both of the arrays might be empty. Array1 = [1, 4, 6] Array2 = [2, 3, 5, 7]","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array without using any built-in sorting functions. Parameters: arr1 (list of int): The first sorted array. arr2 (list of int): The second sorted array. Returns: list of int: The merged sorted array. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append any remaining elements from arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # Append any remaining elements from arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Write a Python function `reverse_and_alternate` that takes in a list of integers and performs the following operations: 1. Reverses the list. 2. Alternates the sign of each element, starting with a negative sign for the first element. For example, if the input list is `[1, 2, 3, 4, 5]`, the reversed list would be `[5, 4, 3, 2, 1]`, and alternating the signs would result in `[-5, 4, -3, 2, -1]`. Your function should return the modified list. **Function Signature:** ```python def reverse_and_alternate(lst: List[int]) -> List[int]: ``` **Example:** ```python input_list = [1, 2, 3, 4, 5] print(reverse_and_alternate(input_list)) # Output: [-5, 4, -3, 2, -1] ``` **Constraints:** - The input list will contain at least one element. - The elements of the list will be integers.","solution":"from typing import List def reverse_and_alternate(lst: List[int]) -> List[int]: Reverses the list and alternates the sign of each element, starting with a negative sign for the first element. Parameters: lst (List[int]): The input list of integers. Returns: List[int]: The modified list after reversing and alternating signs. # Reverse the list reversed_lst = lst[::-1] # Alternate the sign of each element alternated_signs_lst = [num if i % 2 else -num for i, num in enumerate(reversed_lst)] return alternated_signs_lst"},{"question":"Design a function that receives a list of integers and returns the length of the longest increasing subsequence (LIS) within the array. The subsequence does not need to be contiguous, but the elements must remain in their original relative order. The implementation should have a time complexity of O(n log n). def longest_increasing_subsequence(arr: List[int]) -> int:","solution":"from typing import List import bisect def longest_increasing_subsequence(arr: List[int]) -> int: Returns the length of the longest increasing subsequence in `arr`. if not arr: return 0 tails = [] for num in arr: pos = bisect.bisect_left(tails, num) if pos == len(tails): tails.append(num) else: tails[pos] = num return len(tails)"},{"question":"Design a Python class named `Library` which allows adding books, borrowing them, and returning them. The class should manage a collection of books and their availability. The `Library` class should include the following methods: - `add_book(title)`: Adds a new book to the library collection. If the book already exists, it should increase the count of that book. - `borrow_book(title)`: If the book is available in the library, mark it as borrowed and return `True`. If the book is not available, return `False`. - `return_book(title)`: Marks the book as returned and makes it available in the library again. Additionally, implement the following behavior: - A book that has been borrowed should not be available for borrowing again until it has been returned. - Use dictionaries to keep track of the books and their availability. Here is an example of how the `Library` class should behave: ```python library = Library() library.add_book(\\"Python Programming\\") library.add_book(\\"Python Programming\\") print(library.borrow_book(\\"Python Programming\\")) # Should print: True print(library.borrow_book(\\"Python Programming\\")) # Should print: True print(library.borrow_book(\\"Python Programming\\")) # Should print: False library.return_book(\\"Python Programming\\") print(library.borrow_book(\\"Python Programming\\")) # Should print: True ```","solution":"class Library: def __init__(self): self.books = {} self.borrowed_books = {} def add_book(self, title): if title in self.books: self.books[title] += 1 else: self.books[title] = 1 self.borrowed_books[title] = 0 def borrow_book(self, title): if title in self.books and self.books[title] - self.borrowed_books[title] > 0: self.borrowed_books[title] += 1 return True else: return False def return_book(self, title): if title in self.borrowed_books and self.borrowed_books[title] > 0: self.borrowed_books[title] -= 1"},{"question":"Design a function that takes a string as input and returns a dictionary where each key is a unique word in the string and the corresponding value is the number of times that word appears. Treat words as case-insensitive and ignore punctuation. The function should also output a list of the unique words sorted in alphabetical order. For the purpose of this question, you can assume that words are separated by whitespace and punctuation marks include: ., !, ?, and ,.","solution":"import string def word_count(s): Returns a dictionary where the keys are unique words in the string `s` and the values are the number of times each word appears. Also returns a list of the unique words sorted in alphabetical order. :param s: Input string :type s: str :return: (dict, list) word count dictionary and sorted list of unique words :rtype: (dict, list) # Remove punctuation and convert to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) s = s.translate(translator).lower() # Split by whitespace to get words words = s.split() # Count words word_count_dict = {} for word in words: if word in word_count_dict: word_count_dict[word] += 1 else: word_count_dict[word] = 1 # Get sorted list of unique words sorted_unique_words = sorted(word_count_dict.keys()) return word_count_dict, sorted_unique_words"},{"question":"Write a function that takes a list of integers and a target integer. The function should determine if there are three distinct integers in the list that add up to the target integer. If such a combination exists, return `True`. Otherwise, return `False`. Avoid using nested loops to check for the combination.","solution":"def three_sum(nums, target): Determines if there are three distinct integers in the list that add up to the target integer. Args: nums (list of int): List of integers. target (int): Target integer. Returns: bool: True if such a combination exists, False otherwise. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target: return True elif total < target: left += 1 else: right -= 1 return False"},{"question":"Develop a Python function called `get_common_elements` that takes in two lists of integers and returns a list of integers representing their common elements. The resulting list should not contain any duplicates, and the elements should be in the order they appeared in the first list. Ensure your code handles edge cases such as empty lists and large datasets efficiently. Additionally, include clear and concise error handling for invalid inputs such as non-list types or lists containing non-integer elements.","solution":"def get_common_elements(list1, list2): Returns a list of common elements between list1 and list2 without duplicates, in the order they appeared in list1. if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both inputs must be lists.\\") if any(not isinstance(x, int) for x in list1 + list2): raise ValueError(\\"Both lists must contain only integers.\\") set2 = set(list2) common_elements = [] for element in list1: if element in set2 and element not in common_elements: common_elements.append(element) return common_elements"},{"question":"Implement a function that analyzes the given matrix and categorizes its elements: def matrix_analysis(matrix): \'\'\' Given an m x n matrix containing integers, perform the following tasks based on the matrix elements: 1. Find and return the sum of all prime numbers in the matrix. 2. If the sum of all prime numbers is zero, return -1. 3. Count the frequency of each unique integer in the matrix and return a dictionary with elements as keys and their frequencies as values. Examples: matrix_analysis([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) ➞ (17, {2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}) matrix_analysis([[1, 4, 6], [8, 9, 10], [12, 14, 15]]) ➞ (-1, {1: 1, 4: 1, 6: 1, 8: 1, 9: 1, 10: 1, 12: 1, 14: 1, 15: 1}) matrix_analysis([[2, 2, 2], [2, 2, 2], [2, 2, 2]]) ➞ (18, {2: 9}) Notes: - The function should first calculate the sum of all prime numbers found in the matrix. - If no prime numbers are found, the sum should be zero, and the function should then return -1 instead of zero. - Then, count and return the frequency of each integer as a dictionary. \'\'\' # Helper function to check if a number is prime def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_div = int(n ** 0.5) + 1 for i in range(3, max_div, 2): if n % i == 0: return False return True","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_div = int(n ** 0.5) + 1 for i in range(3, max_div, 2): if n % i == 0: return False return True def matrix_analysis(matrix): prime_sum = 0 freq_dict = {} for row in matrix: for number in row: if is_prime(number): prime_sum += number if number in freq_dict: freq_dict[number] += 1 else: freq_dict[number] = 1 if prime_sum == 0: prime_sum = -1 return (prime_sum, freq_dict)"},{"question":"Develop a function that filters and sorts a list of books based on multiple criteria provided by the user. Each book is represented by a dictionary containing the title, author, year of publication, and genre. The function should allow users to specify a genre to filter the books (if specified) and a field to sort the remaining books by (either title, author, or year). The sorting should be done in ascending order by default, but the user should be able to request descending order as well. books = [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author X\\", \\"year\\": 2005, \\"genre\\": \\"Fiction\\"}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author Y\\", \\"year\\": 2010, \\"genre\\": \\"Non-Fiction\\"}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author Z\\", \\"year\\": 2000, \\"genre\\": \\"Fiction\\"}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Author X\\", \\"year\\": 1995, \\"genre\\": \\"Science\\"} ] filter_and_sort_books(books, genre=\\"Fiction\\", sort_by=\\"year\\", descending=True)","solution":"from typing import List, Dict, Optional def filter_and_sort_books(books: List[Dict[str, str]], genre: Optional[str] = None, sort_by: str = \\"title\\", descending: bool = False) -> List[Dict[str, str]]: Filters and sorts a list of books based on the specified genre and sort criteria. Parameters: books (List[Dict[str, str]]): List of books where each book is represented by a dictionary. genre (Optional[str]): The genre to filter the books by. If None, no filtering is applied. Default is None. sort_by (str): The field to sort the books by. It can be \\"title\\", \\"author\\", or \\"year\\". Default is \\"title\\". descending (bool): If True, sorts in descending order. Default is False. Returns: List[Dict[str, str]]: The filtered and sorted list of books. # Filter books by genre if specified if genre: books = [book for book in books if book[\'genre\'].lower() == genre.lower()] # Sort books by the specified field sorted_books = sorted(books, key=lambda book: book[sort_by], reverse=descending) return sorted_books"},{"question":"Code: rupeeCollector_v2.py Write code with triple quote, based on the following list and context. 1. Do your best to implement THIS ONLY ONE FILE. ONLY USE EXISTING API. IF NO API, IMPLEMENT IT. 2. Requirement: Based on the context, implement one following code file, note to return only in code form, your code will be part of the entire project, so please implement complete, reliable, reusable code snippets. 3. Attention1: If there is any setting, ALWAYS SET A DEFAULT VALUE, ALWAYS USE STRONG TYPE AND EXPLICIT VARIABLE. 4. Attention2: YOU MUST FOLLOW \\"Data structures and interface definitions\\". DONT CHANGE ANY DESIGN. 5. Think before writing: What should be implemented and provided in this document? 6. CAREFULLY CHECK THAT YOU DONT MISS ANY NECESSARY CLASS/FUNCTION IN THIS FILE. 7. Do not use public member functions that do not exist in your design. ----- # Context [BOSS: Build a CLI rupee collector game with 5 levels, Product Manager: Original Requirements The boss has requested the creation of a CLI (Command Line Interface) rupee collector game with 5 levels. Product Goals ```python [ \\"Create a CLI rupee collector game\\", \\"Ensure the game has 5 distinct levels\\", \\"Ensure the game is engaging and fun for users\\" ] ``` User Stories ```python [ \\"As a user, I want to collect rupees in different levels using command line inputs\\", \\"As a user, I want each level to offer a unique challenge so that the game remains interesting\\", \\"As a user, I want to be able to save my progress so I can continue where I left off\\", \\"As a user, I want to see my score and level progress in the CLI\\", \\"As a user, I want the game to have a simple and intuitive command system\\" ] ``` Requirement Analysis The product should be a CLI-based rupee collector game with 5 distinct levels. The game should have a simple and intuitive command system, allowing users to navigate the character through different levels. Each level should offer a unique challenge to keep the game engaging. Users should be able to save their progress, see their score and level progress in the CLI. Requirement Pool ```python [ (\\"Create a CLI for user input and game output\\", \\"P0\\"), (\\"Develop 5 distinct levels with unique challenges\\", \\"P0\\"), (\\"Implement a scoring system and display it in the CLI\\", \\"P1\\"), (\\"Implement a save and load game feature\\", \\"P1\\"), (\\"Ensure the command system is simple and intuitive\\", \\"P0\\") ] ``` UI Design draft The UI will be text-based in the CLI. The game area will be represented with ASCII characters. The character\'s position, rupees, and obstacles will be represented by different characters. User\'s score, current level, and commands will be displayed at the top of the CLI. The command input will be at the bottom. Implementation approach We will use Python\'s built-in libraries like `os` for file handling (save/load game), `pickle` for object serialization/deserialization, and `random` for generating random obstacles/rupees. For the game logic, we will create classes for the Game, Level, Player, Obstacle, and Rupee. Each level will have a unique set of obstacles and rupees. The player will navigate the character using simple commands like \'move left\', \'move right\', \'collect\', etc. The game will be turn-based, i.e., the player makes a move, then the game updates the state of the level (like moving obstacles). The game state (current level, score, etc.) will be saved after each turn. Python package name ```python \\"cli_rupee_collector\\" ``` File list ```python [ \\"main.py\\", \\"game.py\\", \\"level.py\\", \\"player.py\\", \\"rupee.py\\", \\"obstacle.py\\", \\"utils.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class Game{ +int score +int current_level +Player player +Level[] levels +start() +play() +save_game() +load_game() } class Level{ +int level_number +Obstacle[] obstacles +Rupee[] rupees +generate_level() } class Player{ +int x_position +int y_position +move_left() +move_right() +collect() } class Obstacle{ +int x_position +int y_position } class Rupee{ +int x_position +int y_position +collect() } Game \\"1\\" -- \\"1\\" Player: has Game \\"1\\" -- \\"*\\" Level: has Level \\"1\\" -- \\"*\\" Obstacle: has Level \\"1\\" -- \\"*\\" Rupee: has ``` Program call flow ```mermaid sequenceDiagram participant M as Main participant G as Game participant P as Player participant L as Level participant O as Obstacle participant R as Rupee M->>G: create game G->>P: create player G->>L: create levels L->>O: create obstacles L->>R: create rupees M->>G: start game loop Game Play G->>P: get player move P-->>G: move G->>L: update level L->>R: collect rupees L->>O: move obstacles G->>G: check game state G->>G: save game end G-->>M: end game ``` Task list ```python [ \\"main.py\\", \\"game.py\\", \\"level.py\\", \\"player.py\\", \\"rupee.py\\", \\"obstacle.py\\", \\"utils.py\\" ] ``` utils.py import os import pickle def save_game(file_name: str, game_state: dict) -> None: Save the current game state to a file. Args: file_name (str): The name of the file to save the game state. game_state (dict): The current game state. with open(file_name, \'wb\') as f: pickle.dump(game_state, f) def load_game(file_name: str) -> dict: Load the game state from a file. Args: file_name (str): The name of the file to load the game state from. Returns: dict: The loaded game state. if not os.path.exists(file_name): return None with open(file_name, \'rb\') as f: return pickle.load(f) def file_exists(file_name: str) -> bool: Check if a file exists. Args: file_name (str): The name of the file to check. Returns: bool: True if the file exists, False otherwise. return os.path.exists(file_name) ----- Format example ----- Code: rupee.py ```python rupee.py class Rupee: def __init__(self, x_position: int, y_position: int) -> None: self.x_position = x_position self.y_position = y_position def collect(self) -> None: Action to collect the rupee. pass # Implementation for collecting the rupee def generate_rupees(level: int) -> list[Rupee]: Generate rupees for a given level. import random rupee_list = [] for _ in range(level): x_pos = random.randint(0, 10) y_pos = random.randint(0, 10) rupee_list.append(Rupee(x_pos, y_pos)) return rupee_list ``` -----","solution":"rupee.py class Rupee: def __init__(self, x_position: int, y_position: int) -> None: self.x_position = x_position self.y_position = y_position def collect(self) -> None: Action to collect the rupee. pass # Implementation for collecting the rupee def generate_rupees(level: int) -> list[Rupee]: Generate rupees for a given level. import random rupee_list = [] for _ in range(level): x_pos = random.randint(0, 10) y_pos = random.randint(0, 10) rupee_list.append(Rupee(x_pos, y_pos)) return rupee_list"},{"question":"Design a function that takes a list of integers and returns a new list where each element is the product of all the numbers in the original list except the one at the current index. Ensure your function handles edge cases such as lists containing zero or negative numbers. The function should be able to process large lists efficiently. Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [0, 1, 2, 3] Output: [6, 0, 0, 0]","solution":"def product_except_self(nums): Returns a list where each element is the product of all the numbers in the input list except the one at the current index. Args: nums (list): a list of integers Returns: list: a list of products length = len(nums) if length == 0: return [] left_products = [1] * length right_products = [1] * length output = [1] * length # Compute products from the left side for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Compute products from the right side for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Combine the products for i in range(length): output[i] = left_products[i] * right_products[i] return output"},{"question":"You are planning a road trip and want to visit several cities in a particular order. Given a list of cities and the distances between each pair, write a program that calculates the minimum total distance you need to travel to visit all cities starting from a specified city. Your program should take as input: 1. A list of cities. 2. A starting city. 3. A dictionary representing the distances between every pair of cities (keys are tuples of city pairs, and values are the distances). Output the minimum total distance for the trip and the sequence of cities visited in that order. If visiting all cities in the specified order is not possible, your program should output a suitable error message. Example input: 1. Cities: [\'A\', \'B\', \'C\', \'D\'] 2. Starting city: \'A\' 3. Distances: {(\'A\', \'B\'): 10, (\'A\', \'C\'): 15, (\'A\', \'D\'): 20, (\'B\', \'C\'): 35, (\'B\', \'D\'): 25, (\'C\', \'D\'): 30, (\'B\', \'A\'): 10, (\'C\', \'A\'): 15, (\'D\', \'A\'): 20, (\'C\', \'B\'): 35, (\'D\', \'B\'): 25, (\'D\', \'C\'): 30} Example output: Total distance: 80 Sequence of cities: A -> B -> D -> C -> A If the trip is not feasible: Feasibility error message: \\"Cannot visit all cities starting from the specified city.\\"","solution":"from itertools import permutations def calculate_minimum_distance(cities, starting_city, distances): Calculates the minimum total distance to visit all cities starting from a specified city. Args: cities (list of str): List of cities. starting_city (str): The starting city. distances (dict of tuple: int): Distances between pairs of cities. Returns: tuple: The minimum total distance and the sequence of cities visited, or an error message if not possible. if starting_city not in cities: return \\"Feasibility error message: Cannot visit all cities starting from the specified city.\\" cities_without_start = [city for city in cities if city != starting_city] min_distance = float(\'inf\') min_path = [] for perm in permutations(cities_without_start): current_distance = 0 current_city = starting_city feasible = True for next_city in perm: if (current_city, next_city) in distances: current_distance += distances[(current_city, next_city)] current_city = next_city else: feasible = False break if feasible and (current_city, starting_city) in distances: current_distance += distances[(current_city, starting_city)] if current_distance < min_distance: min_distance = current_distance min_path = [starting_city] + list(perm) + [starting_city] elif not feasible: continue if min_path: return min_distance, min_path else: return \\"Feasibility error message: Cannot visit all cities starting from the specified city.\\""},{"question":"Devise a function that calculates the largest rectangular area that can be formed within a given histogram. The histogram is represented by a list of non-negative integers, where each integer denotes the height of the histogram\'s bar and the width of each bar is 1. You should also provide an incorrect example implementation as a deceptive guide, along with the correct function implementation. In your correct function, explain why the initial code was flawed and describe how your updated solution appropriately resolves the issue. Consider this deceptive code snippet: ```python def largestRectangleArea(heights): max_area = 0 for i in range(len(heights)): for j in range(i, len(heights)): height = min(heights[i:j+1]) width = j - i + 1 max_area = max(max_area, height * width) return max_area ``` Point out the inefficiencies in the erroneous code and provide a more optimal solution that achieves the same task. ```python def largestRectangleArea(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area ``` Explanation: - The deceptive snippet employs a brute-force approach with nested loops that result in O(n^2) complexity, which is inefficient for larger inputs. - The correct implementation uses a stack-based approach with O(n) time complexity, ensuring that each bar is pushed and popped from the stack exactly once. - The stack helps to maintain the indexes of the histogram bars in a way that facilitates quick calculation of areas with current heights as the smallest heights.","solution":"def largestRectangleArea(heights): Calculate the largest rectangular area in a histogram represented by the list of heights. :param heights: List of non-negative integers representing the height of the histogram\'s bars :return: The largest rectangular area stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function to rotate the elements of a given list to the right by `k` positions. Ensure that the function handles cases where the list is empty, where `k` is zero, and where `k` is greater than the length of the list. The function should return the modified list after rotation.","solution":"def rotate_right(lst, k): Rotates the elements of the list lst to the right by k positions. :param lst: List of elements to be rotated. :param k: Number of positions to rotate the list. :return: The rotated list. if not lst: return lst # Handle cases where k is greater than the length of the list k = k % len(lst) return lst[-k:] + lst[:-k]"},{"question":"Write a Python function using the \'def\' statement that takes a list of integers as an input and returns a new list with each element squared. Use a combination of list comprehensions and lambda functions to achieve the desired result. Ensure your function handles both positive and negative integers effectively.","solution":"def square_elements(input_list): Returns a new list with each element squared. return list(map(lambda x: x ** 2, input_list))"},{"question":"Implement a function that finds the intersection of two lists without using any built-in set operations. The function should take two lists as inputs and return a list of elements that are present in both input lists. Ensure the order of the elements in the output list matches their order in the first input list. Example: ```python def list_intersection(list1, list2): # your code here # Sample Input a = [1, 2, 3, 4, 5] b = [4, 5, 6, 7, 8] # Sample Output print(list_intersection(a, b)) # Output: [4, 5] ```","solution":"def list_intersection(list1, list2): Finds the intersection of two lists and returns a list of elements that are present in both input lists. The order of elements in the output list matches their order in the first list. intersection = [] for element in list1: if element in list2: intersection.append(element) return intersection"},{"question":"A unique magic square is a n times n matrix filled with distinct integers from 1 to n^2 such that the sum of the integers in each row, column, and both main diagonals are equal. Generalizing from a standard magic square, define a *shifted magic square* where rows and columns may be cyclically shifted (rotated) but the sums remain consistent. Given an integer n, construct a n times n shifted magic square matrix, if possible. If not possible, return \\"NONE\\". Example 1: Input: n = 3 Output: ``` 8 1 6 3 5 7 4 9 2 ``` (Note: The above example is a standard 3x3 magic square with no shifts needed.) Example 2: Input: n = 4 Output: ``` NONE ``` Write a function `shifted_magic_square(n: int) -> Union[List[List[int]], str]` that returns the matrix as a list of lists (each inner list representing a row) or \\"NONE\\" if not possible.","solution":"from typing import List, Union def shifted_magic_square(n: int) -> Union[List[List[int]], str]: if n == 2 or n == 4: # 2x2 or 4x4 magic squares are not possible return \\"NONE\\" def magic_square_odd(n: int) -> List[List[int]]: Generate an odd-sized magic square using the Siamese method. magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n ** 2: magic_square[i][j] = num num += 1 newi, newj = (i - 1) % n, (j + 1) % n if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return magic_square def magic_square_doubly_even(n: int) -> List[List[int]]: Generate a doubly even-sized magic square. magic_square = [[(n * i) + j + 1 for j in range(n)] for i in range(n)] # change the values on the main diagonals and the 4 corners indices = [(i, j) for i in range(n) for j in range(n) if (i % 4 == j % 4 or (i + j) % 4 == 3)] for i, j in indices: magic_square[i][j] = n * n + 1 - magic_square[i][j] return magic_square if n % 2 == 1: return magic_square_odd(n) elif n % 4 == 0: return magic_square_doubly_even(n) else: return \\"NONE\\""},{"question":"Design a function that takes a string as input and returns the first non-repeating character. Ensure your solution handles both uppercase and lowercase characters but treat them as distinct (i.e., \'a\' and \'A\' are different characters). If there is no non-repeating character, return the string \\"None\\". Examples: ```python def first_non_repeating_character(s): # Your implementation here # Example cases print(first_non_repeating_character(\\"stress\\")) # Output: \\"t\\" print(first_non_repeating_character(\\"aAbBABac\\")) # Output: \\"b\\" print(first_non_repeating_character(\\"aabbcc\\")) # Output: \\"None\\" ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns \\"None\\". char_count = {} # Count occurrences of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"None\\""},{"question":"Write a function that simulates a coffee machine. The function should accept two inputs: a dictionary representing the available number of servings for different types of coffee (e.g., espresso, latte, cappuccino) and a string representing the type of coffee a user wants. The function should deduct one serving from the available servings for the selected coffee type and return a message confirming the order. If the requested coffee type is unavailable or has run out of servings, the function should return an appropriate error message. The coffee machine should not allow requests for multiple servings of coffee in a single function call. Example: ```python coffee_machine({\\"espresso\\": 3, \\"latte\\": 2, \\"cappuccino\\": 0}, \\"latte\\") ``` Output: ``` \\"Latte served! Remaining servings: 1\\" ``` Example: ```python coffee_machine({\\"espresso\\": 1, \\"latte\\": 0, \\"cappuccino\\": 0}, \\"cappuccino\\") ``` Output: ``` \\"Error: Cappuccino is unavailable!\\" ```","solution":"def coffee_machine(servings, coffee_type): Simulates a coffee machine. Deducts one serving from the available servings for the selected coffee type and returns a message confirming the order. Parameters: - servings: dict, a dictionary representing the available number of servings for different types of coffee - coffee_type: str, the type of coffee a user wants Returns: - str, a message confirming the order or an error message if the coffee type is unavailable or has no servings left if coffee_type not in servings: return f\\"Error: {coffee_type.capitalize()} is unavailable!\\" if servings[coffee_type] <= 0: return f\\"Error: {coffee_type.capitalize()} is unavailable!\\" servings[coffee_type] -= 1 return f\\"{coffee_type.capitalize()} served! Remaining servings: {servings[coffee_type]}\\""},{"question":"Write a function that accepts a string consisting of parenthesis characters \'(\' and \')\' and returns `True` if the parenthesis are balanced and `False` otherwise.","solution":"def is_balanced_parenthesis(s): Returns True if the parenthesis in the string are balanced, otherwise False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Task Design a **Coding Assessment Question**. Objective Create a function that processes a real-world dataset and applies a specific algorithm, ensuring the solution is modular, readable, and maintainable. Guidelines # Question Style - Follow the format and presentation of the given questions. - Maintain a consistent tone and language as the original set. # Question Length - Match the length to an average of the existing questions. # Difficulty Level - Match the technical and cognitive challenges presented in the sample questions. # Topic Alignment - Identify the core programming concepts within the existing questions. - Create a question exploring a related or complementary area within the same topic. # Question Uniqueness - While maintaining similarity, ensure your question introduces a novel problem or scenario. Output Create a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question_number or any other text in the beginning. ------ # Context Requirement: Based on the context, implement the following scenario in a single Python file, note to return only in code form. Your code will be part of an entire project, so ensure the code is complete, reliable, and reusable according to PEP8 coding standards. [PRODUCT MANAGER]: We want to create a feature that provides personalized book recommendations to users. The feature should analyze user preferences and book ratings to suggest books that users might like. Requirements 1. Implement a function to recommend books to users based on their preferences and ratings. 2. The recommendations should be generated using collaborative filtering. 3. Ensure the function is modular and can be easily integrated into a larger project. 4. Follow the PEP8 coding standards and ensure the code is maintainable and easy to read. User Stories ```python [ \\"As a user, I want to get book recommendations based on my reading preferences\\", \\"As a user, I want to see ratings of the recommended books\\", \\"As a user, I want to rate books I have read\\", \\"As a product manager, I want the recommendation system to be accurate and efficient\\" ] ``` Sample Data Structures ```python users = [ {\\"user_id\\": 1, \\"name\\": \\"Alice\\", \\"preferences\\": [\\"fiction\\", \\"adventure\\"]}, {\\"user_id\\": 2, \\"name\\": \\"Bob\\", \\"preferences\\": [\\"non-fiction\\", \\"history\\"]}, {\\"user_id\\": 3, \\"name\\": \\"Charlie\\", \\"preferences\\": [\\"fiction\\", \\"mystery\\"]} ] books = [ {\\"book_id\\": 1, \\"title\\": \\"Book A\\", \\"genre\\": \\"fiction\\"}, {\\"book_id\\": 2, \\"title\\": \\"Book B\\", \\"genre\\": \\"adventure\\"}, {\\"book_id\\": 3, \\"title\\": \\"Book C\\", \\"genre\\": \\"non-fiction\\"}, {\\"book_id\\": 4, \\"title\\": \\"Book D\\", \\"genre\\": \\"history\\"}, {\\"book_id\\": 5, \\"title\\": \\"Book E\\", \\"genre\\": \\"mystery\\"} ] ratings = [ {\\"user_id\\": 1, \\"book_id\\": 1, \\"rating\\": 5}, {\\"user_id\\": 1, \\"book_id\\": 2, \\"rating\\": 4}, {\\"user_id\\": 2, \\"book_id\\": 3, \\"rating\\": 5}, {\\"user_id\\": 2, \\"book_id\\": 4, \\"rating\\": 4}, {\\"user_id\\": 3, \\"book_id\\": 5, \\"rating\\": 5} ] ``` Example Function Signature ```python def recommend_books(user_id: int, users: list, books: list, ratings: list) -> list: pass ``` Task List - Import necessary libraries for data processing and collaborative filtering. - Implement the function to recommend books using collaborative filtering. - Ensure the function is efficient and scalable for larger datasets. - Write code that follows PEP8 coding standards and is easy to maintain. # Sample Input ```python user_id = 1 users = [ {\\"user_id\\": 1, \\"name\\": \\"Alice\\", \\"preferences\\": [\\"fiction\\", \\"adventure\\"]} ] books = [ {\\"book_id\\": 1, \\"title\\": \\"Book A\\", \\"genre\\": \\"fiction\\"}, {\\"book_id\\": 2, \\"title\\": \\"Book B\\", \\"genre\\": \\"adventure\\"} ] ratings = [ {\\"user_id\\": 1, \\"book_id\\": 1, \\"rating\\": 5} ] ``` # Expected Output ```python [ {\\"book_id\\": 2, \\"title\\": \\"Book B\\", \\"genre\\": \\"adventure\\", \\"predicted_rating\\": 4.5} ] ``` # Implementation Notes - Use libraries like NumPy, Pandas, and Scikit-learn. - Ensure the function can handle changes in the dataset size. - Validate inputs and handle edge cases gracefully. ------ Format Example ------ Code: book_recommendation.py ```python book_recommendation.py import numpy as np import pandas as pd from sklearn.metrics.pairwise import cosine_similarity Function to recommend books based on user preferences and ratings def recommend_books(user_id: int, users: list, books: list, ratings: list) -> list: Your code here pass ```","solution":"import pandas as pd from sklearn.metrics.pairwise import cosine_similarity from collections import defaultdict def recommend_books(user_id: int, users: list, books: list, ratings: list) -> list: # Convert lists to DataFrames for easier manipulation users_df = pd.DataFrame(users) books_df = pd.DataFrame(books) ratings_df = pd.DataFrame(ratings) # Prepare the user-book matrix user_book_matrix = ratings_df.pivot(index=\'user_id\', columns=\'book_id\', values=\'rating\').fillna(0) # Compute cosine similarity between users user_similarity = cosine_similarity(user_book_matrix) user_similarity_df = pd.DataFrame(user_similarity, index=user_book_matrix.index, columns=user_book_matrix.index) # Find similar users for the given user_id similar_users = user_similarity_df[user_id].nlargest(len(user_similarity_df)).index similar_users = similar_users.drop(user_id) # Remove self from similar users # Aggregate ratings from similar users similar_users_ratings = user_book_matrix.loc[similar_users] avg_similar_users_ratings = similar_users_ratings.mean() # Exclude books that the user has already rated user_rated_books = set(ratings_df[ratings_df[\'user_id\'] == user_id][\'book_id\']) recommendations = avg_similar_users_ratings.drop(user_rated_books) # Join recommended books with book details and prepare the result recommended_books = books_df.set_index(\'book_id\').loc[recommendations.index] recommended_books[\'predicted_rating\'] = recommendations.values return recommended_books.sort_values(by=\'predicted_rating\', ascending=False).reset_index().to_dict(orient=\'records\')"},{"question":"Could you write a function that returns a list of the first n Fibonacci numbers? The function should take a single argument n and produce the sequence starting with 0 and 1. For example, if the input is 5, the function should return [0, 1, 1, 2, 3].","solution":"def fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence"},{"question":"Write a program that takes as input a string representing a mathematical expression containing only integers, addition (+), and multiplication (*) operators without any spaces. Your task is to parse the string and compute the result following the standard rules of arithmetic regarding operator precedence. For example, given the input \\"3+5*2\\", the program should return 13, since multiplication takes precedence over addition. Requirements: 1. Implement a function `evaluate_expression(expression: str) -> int`. 2. Do not use the built-in `eval` function in Python. 3. Consider edge cases, such as input strings like \\"2\\" (single integer) and \\"4*3+6\\" (addition after multiplication). Analyze the time complexity of your solution and explain the reasoning behind the approach chosen, ensuring clarity in the handling of operator precedence within the expression.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing only integers, addition (+), and multiplication (*) operators. :param expression: A string representing the mathematical expression. :return: The result of the computation as an integer. def parse_expression(expression: str): num = 0 stack = [] current_op = \'+\' i = 0 while i < len(expression): ch = expression[i] if ch.isdigit(): num = num * 10 + int(ch) if ch in \\"+*\\" or i == len(expression) - 1: if current_op == \'+\': stack.append(num) elif current_op == \'*\': stack.append(stack.pop() * num) current_op = ch num = 0 i += 1 return sum(stack) return parse_expression(expression)"},{"question":"Design a todo-list application that allows users to manage their tasks efficiently. The application should include functionalities such as creating tasks, marking tasks as completed, filtering tasks based on their status (completed or pending), and deleting tasks. The UI should be clean, straightforward, and user-friendly to ensure a smooth user experience. Implement the application with appropriate classes, methods, and adhere to best practices for a maintainable and scalable codebase following PEP8 guidelines. Code: app/ - Implement the provided code file ensuring complete, reliable, reusable code snippets Objective Develop a todo-list application using Python and any web framework of your choice (e.g., Flask, Django). The application should allow users to create, update, delete, and filter tasks. Ensure the code is modular, easy to read, and follows best coding practices. Core Requirements - Use strong typing and explicit variable names. - Follow existing API or implement one if not available. - Include essential classes such as Task and TaskManager to handle task operations. - Provide backend and frontend components for the application. Sample Code Structure Implement the following classes and methods ensuring they are fully functional and PEP8 compliant. # context requirements ```python Original Requirements [ \\"Create a user-friendly todo-list application with straightforward task management features\\", \\"Include functionalities to add, edit, delete, and filter tasks\\", \\"Mark tasks as completed and provide a filter to view tasks based on their status\\" ] ``` # User Stories ```python [ \\"As a user, I want to add new tasks to my todo-list so that I can keep track of my activities\\", \\"As a user, I want to mark tasks as completed to manage my progress\\", \\"As a user, I want to filter my tasks based on their completion status to view pending and completed tasks\\", \\"As a user, I want to delete tasks that are no longer needed\\", \\"As a user, I want a simple and visually appealing interface to manage my tasks effectively\\" ] ``` # Implementation Guidelines ```python Code: app/ File list [ \\"main.py\\", \\"settings.py\\", \\"urls.py\\", \\"models.py\\", \\"views.py\\", \\"templates/\\", \\"static/\\", \\"tests.py\\", \\"admin.py\\", \\"apps.py\\", \\"migrations/\\" ] Data structures and interface definitions classDiagram class Task{ +int id +str title +str description +bool is_completed +__init__(title: str, description: str) +mark_as_completed() +edit(title: str, description: str) +delete() } class TaskManager{ +list tasks +__init__() +create_task(title: str, description: str) +get_task(task_id: int) +update_task(task_id: int, title: str, description: str) +delete_task(task_id: int) +filter_tasks(status: str) -> list } TaskManager \\"1\\" -- \\"*\\" Task: manages ``` Sample: Task Class Implementation ```python class Task: def __init__(self, title: str, description: str): self.id = id(self) self.title = title self.description = description self.is_completed = False def mark_as_completed(self): self.is_completed = True def edit(self, title: str, description: str): self.title = title self.description = description def delete(self): # Handle deletion logic here pass ``` Sample: TaskManager Class Implementation ```python class TaskManager: def __init__(self): self.tasks = [] def create_task(self, title: str, description: str): task = Task(title, description) self.tasks.append(task) return task def get_task(self, task_id: int): for task in self.tasks: if task.id == task_id: return task return None def update_task(self, task_id: int, title: str, description: str): task = self.get_task(task_id) if task: task.edit(title, description) return task return None def delete_task(self, task_id: int): task = self.get_task(task_id) if task: self.tasks.remove(task) task.delete() def filter_tasks(self, status: str): if status == \\"completed\\": return [task for task in self.tasks if task.is_completed] elif status == \\"pending\\": return [task for task in self.tasks if not task.is_completed] return [] ``` Implementation Details - The application should provide RESTful APIs for task operations. - Implement appropriate unit tests to ensure functionality. - Use a database to store task information persistently. - Design a simple and responsive frontend for interaction with the task manager (optional but recommended). Output Format Example ```python # migrations/ ... ``` Ensure the provided output is formatted correctly as shown in this example. Only return in code form without extra text or comments, making it ready for integration into the project.","solution":"class Task: def __init__(self, title: str, description: str): self.id = id(self) self.title = title self.description = description self.is_completed = False def mark_as_completed(self): self.is_completed = True def edit(self, title: str, description: str): self.title = title self.description = description def delete(self): # Handle deletion logic here pass class TaskManager: def __init__(self): self.tasks = [] def create_task(self, title: str, description: str) -> Task: task = Task(title, description) self.tasks.append(task) return task def get_task(self, task_id: int) -> Task: for task in self.tasks: if task.id == task_id: return task return None def update_task(self, task_id: int, title: str, description: str) -> Task: task = self.get_task(task_id) if task: task.edit(title, description) return task return None def delete_task(self, task_id: int): task = self.get_task(task_id) if task: self.tasks.remove(task) task.delete() def filter_tasks(self, status: str) -> list: if status == \\"completed\\": return [task for task in self.tasks if task.is_completed] elif status == \\"pending\\": return [task for task in self.tasks if not task.is_completed] return []"},{"question":"Write a function in Python to rotate a given NxN matrix 90 degrees clockwise. The solution should aim to achieve this in-place and employ divide-and-conquer or similar strategies to ensure efficient handling of the matrix elements. Given the constraints of in-place rotation, focus on optimizing both time and space complexity. The function signature should be: ```python def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the given NxN matrix 90 degrees clockwise in-place. Args: matrix: A List of List of integers representing the NxN matrix. Returns: None. The rotation should be done in-place. Example: >>> matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] >>> rotate_matrix(matrix) >>> matrix [[7, 4, 1], [8, 5, 2], [9, 6, 3]] # Your code here ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the given NxN matrix 90 degrees clockwise in-place. Args: matrix: A List of List of integers representing the NxN matrix. Returns: None. The rotation should be done in-place. Example: >>> matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] >>> rotate_matrix(matrix) >>> matrix [[7, 4, 1], [8, 5, 2], [9, 6, 3]] n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a Python function that takes a list of integers and returns a dictionary, where the keys are the integers from the list and the values are the positions of their first occurrence in the list. The function should handle scenarios with negative integers and varying list lengths, including an empty list. You can use the following piece of incorrect code as a reference to understand the problem better. The code should be debugged and improved to meet the requirements fully. ``` def err_func(lst): result = {} for i in range(len(lst)): result[lst[i]] = i return result ``` For example, given the list `lst = [4, 2, -1, 2, 4, 0, -1]`, the function should return `{4: 0, 2: 1, -1: 2, 0: 5}`.","solution":"def first_occurrences(lst): Returns a dictionary where keys are the integers from the list and values are the positions of their first occurrence in the list. result = {} for i, value in enumerate(lst): if value not in result: result[value] = i return result"},{"question":"使用一般的繼承來設計一個家庭成員類型，創建一個 `FamilyMember` 基類，並從中派生出兩個類，`Parent` 和 `Child`。基類應該包含成員的姓名和年齡屬性，以及一個方法來顯示成員的基本信息。派生類應該包含額外的屬性，例如 `Parent` 包含職業屬性，`Child` 包含學校名稱屬性，並覆蓋基類的方法以顯示完整的成員信息。","solution":"class FamilyMember: def __init__(self, name, age): self.name = name self.age = age def display_info(self): Display basic information of the family member. return f\\"Name: {self.name}, Age: {self.age}\\" class Parent(FamilyMember): def __init__(self, name, age, job): super().__init__(name, age) self.job = job def display_info(self): Display complete information of the parent. basic_info = super().display_info() return f\\"{basic_info}, Job: {self.job}\\" class Child(FamilyMember): def __init__(self, name, age, school): super().__init__(name, age) self.school = school def display_info(self): Display complete information of the child. basic_info = super().display_info() return f\\"{basic_info}, School: {self.school}\\""},{"question":"Develop a Python function that identifies all the prime numbers up to a given integer `n` through the Sieve of Eratosthenes algorithm. Then, calculate the product of these prime numbers. Additionally, validate the function to handle different edge cases by writing comprehensive test cases. ```python def sieve_of_eratosthenes(n): if n <= 1: return [] primes = [True] * (n+1) p = 2 while p ** 2 <= n: if primes[p]: for i in range(p * p, n+1, p): primes[i] = False p += 1 return [p for p in range(2, n+1) if primes[p]] def product_of_primes(n): primes = sieve_of_eratosthenes(n) product = 1 for prime in primes: product *= prime return product # Test cases print(product_of_primes(10)) # Should return 210 (2*3*5*7) print(product_of_primes(30)) # Should return 20397882081197443358640281739902897356800000000 print(product_of_primes(2)) # Should return 2 print(product_of_primes(0)) # Should return 1 print(product_of_primes(1)) # Should return 1 ``` Note: 1. If `n` is 0 or 1, return 1 as there are no prime numbers. 2. Consider edge cases and input validation to ensure robust code execution.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers up to the given integer n using the Sieve of Eratosthenes algorithm. if n <= 1: return [] primes = [True] * (n+1) p = 2 while p ** 2 <= n: if primes[p]: for i in range(p * p, n+1, p): primes[i] = False p += 1 return [p for p in range(2, n+1) if primes[p]] def product_of_primes(n): Returns the product of all prime numbers up to the given integer n. If there are no prime numbers in the range, returns 1. primes = sieve_of_eratosthenes(n) product = 1 for prime in primes: product *= prime return product"},{"question":"Construct a Python function that accepts a list of integers and returns a dictionary with two keys: \'odd\' and \'even\'. The value corresponding to each key should be a list containing all the odd or even numbers from the input list, sorted in ascending order. If the input list contains any negative numbers or non-integer values, your function should raise a ValueError with a relevant error message. Example: Input: [3, 12, 5, -1, 0, 8] Output: ValueError: \\"Input list contains negative numbers or non-integer values.\\" Input: [4, 1, 7, 0, 9, 2] Output: {\'odd\': [1, 7, 9], \'even\': [0, 2, 4]}","solution":"def classify_numbers(numbers): Classifies the input list of integers into odd and even numbers. Returns a dictionary with \'odd\' and \'even\' keys containing sorted lists of the respective numbers. Raises ValueError if the input list contains negative numbers or non-integer values. if any(not isinstance(num, int) or num < 0 for num in numbers): raise ValueError(\\"Input list contains negative numbers or non-integer values.\\") odd_numbers = sorted([num for num in numbers if num % 2 != 0]) even_numbers = sorted([num for num in numbers if num % 2 == 0]) return {\'odd\': odd_numbers, \'even\': even_numbers}"},{"question":"Devise a program to implement a binary search algorithm. Begin by explaining how the binary search algorithm works, breaking down the key steps involved in its execution, such as initially sorting the input data, selecting the midpoint element, and recursively or iteratively refining the search range based on comparisons. Additionally, present a detailed analysis of the algorithm’s time complexity in the best, worst, and average scenarios, and discuss the conditions under which binary search is more efficient than linear search.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target value. Parameters: arr (list of int): The list to search through. Must be sorted. target (int): The target value to search for. Returns: int: The index of the target value if found, else -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given an array of strings, I require a function that will determine the longest common prefix shared among the strings. If the array is empty or there is no common prefix, the function should return an empty string. [\\"flower\\", \\"flow\\", \\"flight\\"]","solution":"def longest_common_prefix(strs): Returns the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # The shortest string will limit the length of the common prefix shortest_str = min(strs, key=len) for i, char in enumerate(shortest_str): for other in strs: if other[i] != char: return shortest_str[:i] return shortest_str"},{"question":"Create a Python function that takes a list of integers and returns another list containing the cubes of the integers from the input list. However, the function should ignore even integers from the input list and only compute and include the cubes of odd integers. Additionally, your function should handle and generate an error message if the input list contains any non-integer elements.","solution":"def cube_odd_integers(int_list): Takes a list of integers and returns a list of cubes of the odd integers. If the input list contains any non-integer elements, an error message is returned. if not all(isinstance(x, int) for x in int_list): return \\"Input list contains non-integer elements.\\" return [x**3 for x in int_list if x % 2 != 0]"},{"question":"You are given a list of strings where each string is a series of lowercase alphabetical characters. Your task is to write a function that groups these strings into sets of anagrams. An anagram is defined as a word formed by rearranging the letters of another. The function should return a list of sets, where each set contains strings that are anagrams of each other. For an added challenge, ensure your solution is efficient even if the list contains a large number of strings. Here is an incomplete code snippet that provides a starting point for tackling this problem: ```python def group_anagrams(words): anagrams = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagrams: anagrams[sorted_word].append(word) else: anagrams[sorted_word] = [word] return list(anagrams.values()) ``` Sample Input: [\'bat\', \'tab\', \'cat\', \'act\', \'tac\', \'rat\', \'tar\', \'art\'] Expected Output: [[\'bat\', \'tab\'], [\'cat\', \'act\', \'tac\'], [\'rat\', \'tar\', \'art\']]","solution":"def group_anagrams(words): This function takes a list of words and groups them into sets of anagrams. :param words: List of strings where each string is a series of lowercase alphabetical characters. :return: List of sets, where each set contains strings that are anagrams of each other. from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return [set(group) for group in anagrams.values()]"},{"question":"Develop a function that checks if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. The function should ignore spaces, punctuation, and capitalization: str1 = \\"Listen\\" str2 = \\"Silent\\"","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, ignoring spaces, punctuation and capitalization. Otherwise, returns False. # Remove spaces and punctuation, and convert to lowercase str1 = \'\'.join(filter(str.isalnum, str1)).lower() str2 = \'\'.join(filter(str.isalnum, str2)).lower() # Check if sorted characters of both strings are equal return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes a list of integers and returns the product of all integers in the list that are not divisible by a given integer `k`. If the list is empty or if no integers are found that meet the criteria, return 1. The function should be able to handle both positive and negative numbers, as well as zero. Function signature: ```python def product_of_non_divisibles(nums: List[int], k: int) -> int: pass ``` Example: ```python # Example 1 nums = [2, 3, 4, 5, 6, 7] k = 2 # 3, 5, and 7 are not divisible by 2 # The product is 3 * 5 * 7 = 105 print(product_of_non_divisibles(nums, k)) # Output: 105 # Example 2 nums = [6, 8, 12, 18] k = 3 # 8 is the only number not divisible by 3 # The product is 8 print(product_of_non_divisibles(nums, k)) # Output: 8 # Example 3 nums = [-3, -6, -9, 0] k = 3 # No elements are found not divisible by 3 # The product of an empty subset is 1 print(product_of_non_divisibles(nums, k)) # Output: 1 ```","solution":"from typing import List def product_of_non_divisibles(nums: List[int], k: int) -> int: product = 1 found = False for num in nums: if num % k != 0: product *= num found = True return product if found else 1"},{"question":"Develop a function in Python that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the lengths of those strings. The function should ignore any strings that contain non-alphabetic characters and gracefully handle an empty list input. The solution should demonstrate the use of dictionary comprehensions.","solution":"def strings_to_length_dict(strings): Returns a dictionary where each key is a string from the input list and the value is the length of that string. Only strings containing alphabetic characters are included. return {s: len(s) for s in strings if s.isalpha()}"},{"question":"Write a Python function to determine whether a given string is a \\"happy string\\" or not. A \\"happy string\\" is defined as a string in which the number of vowels is greater than twice the number of consonants. For simplicity, consider only alphabetic characters and treat \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase) as vowels. ```python def is_happy_string(s): # Your implementation here # Example usage: input_str = \\"Happy coding!\\" print(is_happy_string(input_str)) # Output: False ```","solution":"def is_happy_string(s): Determine whether a given string is a \\"happy string\\". A happy string is defined as a string in which the number of vowels is greater than twice the number of consonants. :param s: Input string :return: Boolean value indicating if the string is happy vowels = set(\'aeiouAEIOU\') vowel_count = 0 consonant_count = 0 for char in s: if char.isalpha(): if char in vowels: vowel_count += 1 else: consonant_count += 1 return vowel_count > 2 * consonant_count"},{"question":"Create a function that parses a string representing a date and time in various valid formats and returns it as a standardized datetime object. The function should be able to handle different formats such as \\"YYYY-MM-DD\\", \\"MM/DD/YYYY\\", \\"DD-MM-YYYY HH:MM\\", \\"Month day, Year\\", etc. The output should always be in the format \\"YYYY-MM-DD HH:MM:SS\\". ```python from datetime import datetime def parse_datetime(date_str): formats = [ \\"%Y-%m-%d\\", \\"%m/%d/%Y\\", \\"%d-%m-%Y %H:%M\\", \\"%B %d, %Y\\", # Add more formats as needed ] for fmt in formats: try: return datetime.strptime(date_str, fmt).strftime(\\"%Y-%m-%d %H:%M:%S\\") except ValueError: continue raise ValueError(\\"Date format not recognized. Please use a valid date format.\\") # Example Usage: # print(parse_datetime(\\"2023-12-31\\")) # Output: \\"2023-12-31 00:00:00\\" # print(parse_datetime(\\"12/31/2023\\")) # Output: \\"2023-12-31 00:00:00\\" # print(parse_datetime(\\"31-12-2023 15:45\\")) # Output: \\"2023-12-31 15:45:00\\" # print(parse_datetime(\\"December 31, 2023\\")) # Output: \\"2023-12-31 00:00:00\\" ```","solution":"from datetime import datetime def parse_datetime(date_str): Parses a string representing a date and time in various valid formats and returns it as a standardized datetime object. The output format is always \\"YYYY-MM-DD HH:MM:SS\\". formats = [ \\"%Y-%m-%d\\", \\"%m/%d/%Y\\", \\"%d-%m-%Y %H:%M\\", \\"%B %d, %Y\\" # Add more formats as needed ] for fmt in formats: try: parsed_date = datetime.strptime(date_str, fmt) # If time is not included in the format, we add it manually if \\"%H\\" not in fmt: parsed_date = parsed_date.replace(hour=0, minute=0, second=0) return parsed_date.strftime(\\"%Y-%m-%d %H:%M:%S\\") except ValueError: continue raise ValueError(\\"Date format not recognized. Please use a valid date format.\\")"},{"question":"Write a function that accepts a dictionary where the keys are strings and the values are lists of integers. Your function should return a new dictionary where the keys are the same strings but the values are the average of the integers in the corresponding lists. If a list is empty, the corresponding value should be the string \\"N/A\\". Here is a sample input-output behavior: >>> calculate_averages({\'a\': [1, 2, 3], \'b\': [4, 5, 6], \'c\': []}) {\'a\': 2.0, \'b\': 5.0, \'c\': \'N/A\'} >>> calculate_averages({\'x\': [10, 20], \'y\': [30], \'z\': [40]}) {\'x\': 15.0, \'y\': 30.0, \'z\': 40.0} You should ensure that your function adheres to the following constraints: - Do not use any third-party libraries. - Handle both positive and negative integers. - The function should correctly handle dictionaries with varying lengths of lists. - Provide informative error messages if the input does not meet the expected format. Here is your function signature: def calculate_averages(data: dict) -> dict: Calculate the averages of list values in the dictionary. Parameters: data (dict): A dictionary with strings as keys and lists of integers as values. Returns: dict: A dictionary with the same keys and the average of the corresponding values, or \\"N/A\\" for empty lists. # Implement your function here ...","solution":"def calculate_averages(data: dict) -> dict: Calculate the averages of list values in the dictionary. Parameters: data (dict): A dictionary with strings as keys and lists of integers as values. Returns: dict: A dictionary with the same keys and the average of the corresponding values, or \\"N/A\\" for empty lists. result = {} for key, values in data.items(): if not isinstance(key, str): raise ValueError(\\"All keys must be strings\\") if not isinstance(values, list): raise ValueError(\\"All values must be lists of integers\\") if len(values) == 0: result[key] = \\"N/A\\" else: result[key] = sum(values) / len(values) return result"},{"question":"Create a function that analyzes a given text and calculates the number of unique words. The function should be case-insensitive unless specified otherwise by an optional parameter. It should be able to ignore common punctuation marks. Write your solution in Python below: ```python import re from typing import List def count_unique_words(text: str, case_sensitive: bool = False) -> int: This function takes a string of text and returns the count of unique words. If case_sensitive is set to True, \'Word\' and \'word\' are considered different. :param text: The input text string. :param case_sensitive: If True, the function considers word case, otherwise it treats words in a case-insensitive manner. :return: The number of unique words in the text. # Implement your function here. ```","solution":"import re from typing import List def count_unique_words(text: str, case_sensitive: bool = False) -> int: This function takes a string of text and returns the count of unique words. If case_sensitive is set to True, \'Word\' and \'word\' are considered different. :param text: The input text string. :param case_sensitive: If True, the function considers word case, otherwise it treats words in a case-insensitive manner. :return: The number of unique words in the text. # Remove common punctuation and split the text into words words = re.findall(r\'bw+b\', text) if not case_sensitive: words = [word.lower() for word in words] unique_words = set(words) return len(unique_words)"},{"question":"Given a list of integers, write a function to find two numbers in the list that add up to a given target sum. If such a pair exists, return the indices of the two numbers. If there are multiple pairs, return any one of them. If no such pair exists, return an empty list. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, return [0, 1]. Note: - You may assume that each input would have exactly one solution. - You may not use the same element twice. - Indices returned should be in ascending order.","solution":"def two_sum(nums, target): Given a list of integers, find two numbers in the list that add up to the target sum. Return the indices of the two numbers. If there are multiple pairs, return any one of them. If no such pair exists, return an empty list. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return sorted([i, num_to_index[complement]]) num_to_index[num] = i return []"},{"question":"Write a function that receives a list of integers and returns the index of the first peak element. A peak element is an element that is greater than its neighbors. If the input list is empty or no peak exists, return -1. A peak at the first or last position is acceptable. Example input: [1, 3, 2, 5, 4]","solution":"def find_peak(nums): Returns the index of the first peak element in the list. A peak element is an element that is greater than its neighbors. If the list is empty or no peak exists, returns -1. if not nums: return -1 n = len(nums) for i in range(n): if (i == 0 or nums[i] > nums[i - 1]) and (i == n - 1 or nums[i] > nums[i + 1]): return i return -1"},{"question":"Create a function that takes a given string consisting of multiple words and returns a dictionary where the keys are the unique words (case-insensitive) and the values are the count of their occurrences in the string. Punctuation should be ignored, and words should be compared in a case-insensitive manner. text = \\"Hello world! It\'s a great big world out there, hello!\\"","solution":"import re from collections import defaultdict def word_count(text): Returns a dictionary with the count of unique words in the given string. Words are considered case-insensitive and punctuation is ignored. # Remove punctuation and convert text to lower case cleaned_text = re.sub(r\'[^ws]\', \'\', text).lower() words = cleaned_text.split() word_dict = defaultdict(int) for word in words: word_dict[word] += 1 return dict(word_dict)"},{"question":"Write a Python program that takes a list of integers and returns a new list containing only the prime numbers from the original list. The algorithm should efficiently check for prime numbers.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # All other even numbers are not primes max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): # Test for factors from 3 to sqrt(n) if n % d == 0: return False return True def filter_primes(numbers): Filter the list to contain only prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that accepts an array of integers and an integer `k`. The function should compute the maximum sum of a contiguous sub-array with length `k`. If there are multiple sub-arrays with the same maximum sum, return the sub-array that appears first. Include appropriate error handling for cases where the length of the array is less than `k`. Begin your function outline as follows: from typing import List, Tuple def max_subarray_sum(arr: List[int], k: int) -> Tuple[int, List[int]]: Find the maximum sum of a contiguous sub-array with length k and return the sub-array.","solution":"from typing import List, Tuple def max_subarray_sum(arr: List[int], k: int) -> Tuple[int, List[int]]: Find the maximum sum of a contiguous sub-array with length k and return a tuple with the maximum sum and the sub-array. if len(arr) < k: raise ValueError(\\"Length of array must be greater than or equal to k.\\") max_sum = sum(arr[:k]) current_sum = max_sum start_index = 0 for i in range(k, len(arr)): current_sum = current_sum + arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 return max_sum, arr[start_index:start_index + k]"},{"question":"Write a Python function that extracts and returns the n-th largest unique element from a given list of numbers. The function should handle empty lists, lists with fewer than n unique elements, and lists containing non-numeric values by raising appropriate exceptions. Ensure the function operates efficiently even for large lists and provide a clear documentation string explaining its usage.","solution":"def nth_largest_unique_element(numbers, n): Returns the n-th largest unique element from a given list of numbers. :param numbers: List of numbers (integers or floats). :param n: The n-th largest unique element to be returned. :return: The n-th largest unique element. :raises ValueError: If the input list is empty, has fewer than n unique elements, or contains non-numeric values. if not numbers: raise ValueError(\\"The input list is empty.\\") unique_numbers = set() for num in numbers: if not isinstance(num, (int, float)): raise ValueError(\\"The input list contains non-numeric values.\\") unique_numbers.add(num) sorted_unique_numbers = sorted(unique_numbers, reverse=True) if len(sorted_unique_numbers) < n: raise ValueError(f\\"The input list has fewer than {n} unique elements.\\") return sorted_unique_numbers[n-1]"},{"question":"Write a Python function to simulate a simplified version of a queue system in a bank. Specifically, your task is to manage two queues: one for regular customers and another for VIP customers. VIP customers should be served before regular customers, but within each queue, customers are served in the order they arrive. Implement the following three functions: 1. `arrive(customer_name: str, is_vip: bool)`: Adds a customer to the appropriate queue based on their VIP status. 2. `serve_next() -> str`: Returns the name of the next customer to be served. If there are no more customers to serve, return `None`. 3. `get_queue_status() -> Tuple[List[str], List[str]]`: Returns a tuple containing two lists: the current regular and VIP queues in order. Use appropriate data structures to ensure that the operations are efficient. Demonstrate the usage of these functions with a sequence of operations, showcasing the correct functionality and ensuring queue order preservation.","solution":"from collections import deque from typing import List, Tuple class BankQueue: def __init__(self): self.vip_queue = deque() self.regular_queue = deque() def arrive(self, customer_name: str, is_vip: bool): Adds a customer to the appropriate queue based on their VIP status. if is_vip: self.vip_queue.append(customer_name) else: self.regular_queue.append(customer_name) def serve_next(self) -> str: Returns the name of the next customer to be served. If there are no more customers to serve, return None. if self.vip_queue: return self.vip_queue.popleft() elif self.regular_queue: return self.regular_queue.popleft() else: return None def get_queue_status(self) -> Tuple[List[str], List[str]]: Returns a tuple containing two lists: the current regular and VIP queues in order. return (list(self.vip_queue), list(self.regular_queue))"},{"question":"Implement a function that takes a list of integers and returns all the possible subsets of the list. The subsets should be presented in a way that no two subsets are identical, meaning each subset should be unique in both value and order. Optimize the function to handle an input list with up to 20 elements, and detail the time and space complexity of your approach. Discuss how you would handle larger input sizes if the constraints were relaxed.","solution":"from itertools import combinations def unique_subsets(nums): Returns all unique subsets of the list of integers. result = [] nums = sorted(nums) # Sort the list to handle duplicates for i in range(len(nums) + 1): for combo in combinations(nums, i): if combo not in result: result.append(combo) return result"},{"question":"Design an algorithm that simulates a simple maze-solving robot in a grid. The grid is represented as a 2D array where each cell can either be an open path (represented by 0) or a wall (represented by 1). The robot starts at the top-left corner of the grid (0, 0) and moves to the bottom-right corner (n-1, m-1) by only moving down or right. Implement a function that returns a possible path from the start to the finish if one exists. Function Signature: `def solve_maze(maze: List[List[int]]) -> List[Tuple[int, int]]:` # Constraints: - The maze is represented by a 2D list of integers. - The starting point (0, 0) and ending point (n-1, m-1) are always open (i.e., maze[0][0] == 0 and maze[n-1][m-1] == 0). - The function should return a list of tuples where each tuple represents the coordinates of a cell in the path. - If no path exists, the function should return an empty list. # Example: Input: ``` maze = [ [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 1, 1], [0, 0, 0, 0] ] ``` Output: ``` [(0, 0), (1, 0), (1, 1), (2, 1), (3, 1), (3, 2), (3, 3)] ``` # Explanation: In the example maze, a possible path from the top-left to the bottom-right is shown in the output. The robot avoids the walls (cells with value 1) and navigates through cells with value 0.","solution":"from typing import List, Tuple def solve_maze(maze: List[List[int]]) -> List[Tuple[int, int]]: n = len(maze) m = len(maze[0]) path = [] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == 0 def find_path(x, y): if x == n-1 and y == m-1: path.append((x, y)) return True if is_valid(x, y): path.append((x, y)) maze[x][y] = -1 # mark as visited if find_path(x + 1, y): return True if find_path(x, y + 1): return True path.pop() # backtrack maze[x][y] = 0 # unmark as visited return False if find_path(0, 0): return path else: return []"},{"question":"Write a function that takes a string representing a mathematical expression containing integers and the operators \'+\' and \'*\', and evaluates it following the standard order of operations (i.e., multiplication before addition). Your function should also handle potential syntax errors gracefully by returning an appropriate error message when the input is invalid (e.g., unsupported characters, incorrect operator usage). Additionally, provide unit tests for various edge cases including empty strings, single number strings, and incorrectly formatted expressions. Ensure your solution is efficient and can handle reasonably large inputs.","solution":"import re def eval_expression(expression): Evaluates a mathematical expression containing integers and the operators \'+\', \'*\' following the standard order of operations (multiplication before addition). Args: expression (str): The input mathematical expression as a string. Returns: int/str: The result of the evaluated expression or an error message if the input is invalid. if not expression: return \\"Empty expression\\" # Check for invalid characters if not re.match(r\'^[0-9+*s]+\', expression): return \\"Invalid characters in expression\\" try: parts = re.split(r\'(+)\', expression.replace(\' \', \'\')) for i in range(len(parts)): if \'*\' in parts[i]: parts[i] = str(eval(parts[i])) return eval(\'\'.join(parts)) except (SyntaxError, TypeError, ValueError): return \\"Invalid expression\\""},{"question":"Write a Python function that takes a list of integers and returns a new list with the square of each integer, but only if the original integer is an odd number.","solution":"def square_odds(nums): Returns a new list with the square of each odd integer from the input list of integers. Parameters: nums (list of int): The list of integers to process. Returns: list of int: A list containing the squares of each odd integer from the input list. return [x ** 2 for x in nums if x % 2 != 0]"},{"question":"Write a Python function `reverse_string(s)` that takes a string as an input and returns the string reversed without using any built-in Python function like `reversed` or slicing (e.g., `[::-1]`). Use recursion to achieve the desired output. For instance, `reverse_string(\\"hello\\")` should return `\\"olleh\\"`.","solution":"def reverse_string(s): Returns the reversed string of the given input string using recursion. if len(s) == 0: return \\"\\" else: return reverse_string(s[1:]) + s[0]"},{"question":"Write a Python program that simulates the roll of a six-sided die, n times, and counts the frequency of each face value. The program should take an integer input n, which specifies the number of times the die is rolled, and output a dictionary where the keys are the face values (1 through 6) and the values are the counts of each face value after n rolls. Ensure the program handles edge cases such as n being zero or a negative number.","solution":"import random def roll_die(n): Simulates rolling a six-sided die n times and counts the frequency of each face value. Parameters: n (int): Number of times to roll the die Returns: dict: Counts of each face value (1 through 6) if n <= 0: return {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0} counts = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0} for _ in range(n): roll = random.randint(1, 6) counts[roll] += 1 return counts"},{"question":"Implement a Python function that takes a list of integers and an integer `k` as input and returns the k-th largest element in the list. Ensure the function is efficient and handles edge cases properly. Do not use the built-in sort function. #Function signature: ```python def kth_largest_element(nums: [int], k: int) -> int: pass ``` #Example: ```python nums = [3, 2, 1, 5, 6, 4] k = 2 assert kth_largest_element(nums, k) == 5 nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 assert kth_largest_element(nums, k) == 4 ``` # Requirements: 1. Implement the function `kth_largest_element` to find the k-th largest element without using built-in sorting. 2. Handle cases where the input list is empty or `k` is out of the valid range. 3. Optimize the function to handle large inputs efficiently.","solution":"import heapq def kth_largest_element(nums: [int], k: int) -> int: Returns the k-th largest element in the list nums. if not nums or k < 1 or k > len(nums): raise ValueError(\\"Invalid input: list is empty or k is out of range\\") # Create a heap with the first k elements. This will be a min-heap. min_heap = nums[:k] heapq.heapify(min_heap) # Iterate through the remaining elements in the list for num in nums[k:]: if num > min_heap[0]: heapq.heapreplace(min_heap, num) # The root of the heap will be the k-th largest element return min_heap[0]"},{"question":"Write a code to find the subarray within a given list of numbers that has the maximum sum. The code should not only return the maximum sum but should also indicate the start and end index of the subarray in the list. The solution should consider optimal performance for large lists. For example, In the List: [-2, 1, -3, 4, -1, 2, 1, -5, 4], the subarray with the maximum sum is [4, -1, 2, 1] which starts at index 3 and ends at index 6, and the maximum sum is 6.","solution":"def max_subarray(nums): Returns the maximum sum of the subarray within nums and the start and end indices of that subarray. if not nums: return 0, -1, -1 # Return if the input list is empty. max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, start, end"},{"question":"Write a Python program to calculate the sum of the squares of the first N natural numbers. Your program should prompt the user to enter an integer value for N, and then output the sum of the squares. For example, if the user inputs 4, the program should calculate (1^2 + 2^2 + 3^2 + 4^2) and output 30.","solution":"def sum_of_squares(N): Returns the sum of squares of the first N natural numbers. return sum(i ** 2 for i in range(1, N + 1))"},{"question":"Create a function that takes a list of integers and returns the list sorted in ascending order, but with a twist: if the integer is a multiple of 3, it should be moved to the beginning of the list, if it is a multiple of 5 but not 3, it should be moved to the end, and all other numbers should be in the middle sorted normally. If an integer is a multiple of both 3 and 5, it should be placed at the beginning of the list, among the other multiples of 3. The function should handle an empty list as input without producing any errors.","solution":"def custom_sort(lst): Sorts the list of integers in ascending order but with a custom twist: - Multiples of 3 (and multiples of both 3 and 5) are moved to the beginning - Multiples of 5 but not 3 are moved to the end - All other numbers are sorted normally in the middle multiples_of_3 = sorted([x for x in lst if x % 3 == 0]) multiples_of_5 = sorted([x for x in lst if x % 5 == 0 and x % 3 != 0]) others = sorted([x for x in lst if x % 3 != 0 and x % 5 != 0]) return multiples_of_3 + others + multiples_of_5"},{"question":"Write a function that takes a string and returns a new string where each character in the original string is followed by its frequency count in the string. For example, given the string \\"hello\\", the function should return \\"h1e1l2l2o1\\". Note that the counts should reflect the total occurrences of each character in the entire string.","solution":"def char_with_freqs(string): Returns a new string where each character in the original string is followed by its frequency count in the string. from collections import Counter freqs = Counter(string) result = [] for char in string: result.append(f\\"{char}{freqs[char]}\\") return \'\'.join(result)"},{"question":"Create a function that takes an array of integers and a target sum as inputs and returns all unique combinations of integers from the array that add up to the target sum. Each number in the array can be used any number of times in the combination. The function should return the list of these combinations in any order. Additionally, provide an explanation of the approach and ensure the function is optimized for large input arrays. ```python def combination_sum(candidates, target): def dfs(nums, target, index, path, res): if target < 0: return # Backtrack elif target == 0: res.append(path) return for i in range(index, len(nums)): dfs(nums, target - nums[i], i, path + [nums[i]], res) results = [] dfs(candidates, target, 0, [], results) return results # Example usage candidates = [2, 3, 6, 7] target = 7 print(combination_sum(candidates, target)) # Output: [[2, 2, 3], [7]] ``` Explanation: - **Approach**: Use Depth-First Search (DFS) with backtracking to explore all possible combinations of numbers from the given array that add up to the target sum. - **DFS Recursive Function**: A helper function `dfs` is defined to perform the recursive search. It takes the current list of candidates, the remaining target sum, a starting index, the current combination path, and the result list. - If the target becomes negative, we backtrack since no combination is possible for that path. - If the target is zero, a valid combination is found, and we add it to the result list. - The for loop iterates through the candidates starting from the current index to avoid duplicates, and recursively calls `dfs` with updated parameters. - The main function initializes the results list and starts the DFS with an initial call. - **Optimization Consideration**: The function prioritizes early termination of paths that overshoot the target sum, which is essential for handling large arrays efficiently.","solution":"def combination_sum(candidates, target): Function to find all unique combinations in candidates that sum to target. :param candidates: List[int] - list of numbers to use for combinations :param target: int - target sum for combinations :return: List[List[int]] - list of unique combinations summing up to target def dfs(nums, target, index, path, res): if target < 0: return # If the current path exceeds the target, stop exploring further elif target == 0: res.append(path) # If the target is reached, add the current combination to the results return for i in range(index, len(nums)): # Recursively call dfs with reduced target and current path including nums[i] dfs(nums, target - nums[i], i, path + [nums[i]], res) results = [] dfs(candidates, target, 0, [], results) return results"},{"question":"Write a function that receives a list of student scores and returns the second highest unique score. If there is no second highest score, return None. # Example: ```python scores = [88, 92, 84, 92, 99, 76, 99] # The highest score is 99. The second highest unique score is 92. second_highest_score(scores) -> 92 scores = [88, 92] # There is only one score so second highest doesn\'t exist. second_highest_score(scores) -> None scores = [70, 70, 70] # All scores are the same, so no second highest score. second_highest_score(scores) -> None scores = [] # The list is empty, so no second highest score. second_highest_score(scores) -> None ``` # Function Signature ```python def second_highest_score(scores: List[int]) -> Optional[int]: pass ```","solution":"from typing import List, Optional def second_highest_score(scores: List[int]) -> Optional[int]: Returns the second highest unique score from a list of student scores. If there is no second highest unique score, returns None. unique_scores = list(set(scores)) if len(unique_scores) < 2: return None unique_scores.sort(reverse=True) return unique_scores[1]"},{"question":"Given an integer `n`, write a Python function `perfect_number_check(n)` that checks if `n` is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example: - 6 is a perfect number because its divisors 1, 2, and 3 sum up to 6. - 28 is a perfect number because its divisors 1, 2, 4, 7, and 14 sum up to 28. The function should return `True` if `n` is a perfect number, and `False` otherwise. # Function Signature ```python def perfect_number_check(n: int) -> bool: # your code here ``` # Input - An integer `n` (1 ≤ n ≤ 10^6) # Output - A boolean value: `True` if `n` is a perfect number, and `False` otherwise. # Example ```python print(perfect_number_check(6)) # Output: True print(perfect_number_check(28)) # Output: True print(perfect_number_check(10)) # Output: False ```","solution":"def perfect_number_check(n: int) -> bool: Checks if a given integer n is a perfect number. if n < 1: return False divisors_sum = 0 # Iterate over potential divisors for i in range(1, n//2 + 1): if n % i == 0: divisors_sum += i return divisors_sum == n"},{"question":"Develop a program that calculates the longest increasing subsequence (LIS) in a given list of integers. The longest increasing subsequence is a subsequence that consistently increases in value from left to right, and must not necessarily be contiguous. For instance, in the list `[10, 22, 9, 33, 21, 50, 41, 60, 80]`, the LIS would be `[10, 22, 33, 50, 60, 80]`. Implement a function `longest_increasing_subsequence(arr: List[int]) -> List[int]` that returns one such longest increasing subsequence for the provided array. **Example:** Input: ``` arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] ``` Output: ``` [10, 22, 33, 50, 60, 80] ```","solution":"def longest_increasing_subsequence(arr): Returns the longest increasing subsequence of the given list `arr`. if not arr: return [] # Store the length of LIS ending at each position n = len(arr) lis = [1] * n prev_index = [-1] * n # Compute the length of LIS for each element for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev_index[i] = j # Find the index of the maximum length of LIS max_index = 0 for i in range(1, n): if lis[i] > lis[max_index]: max_index = i # Retrieve the LIS by backtracking result = [] while max_index != -1: result.append(arr[max_index]) max_index = prev_index[max_index] return result[::-1]"},{"question":"Write a function `top_five_scorers` that takes a list of tuples containing player names and their scores, and returns the names of the top five players with the highest scores. If there are ties in scores, the players should be sorted alphabetically by their names. If there are fewer than five players, return the names of all players sorted by their scores and names. ```python def top_five_scorers(players): # Your code here # Example players = [(\'Alice\', 50), (\'Bob\', 75), (\'Charlie\', 60), (\'David\', 75), (\'Eve\', 50), (\'Fay\', 70), (\'Grace\', 60)] print(top_five_scorers(players)) # Output should be [\'Bob\', \'David\', \'Fay\', \'Grace\', \'Charlie\'] ```","solution":"def top_five_scorers(players): Returns the names of the top five scorers. If there are ties, sorts players alphabetically by name. If there are fewer than five players, returns all players sorted by their scores and names. # Sort players first by scores in descending order, then by names in ascending order players_sorted = sorted(players, key=lambda x: (-x[1], x[0])) # Extract the names of the top five players (or fewer if there are not enough players) top_five = [player[0] for player in players_sorted[:5]] return top_five"},{"question":"Write a Python function called `find_prime_factors(n)` that takes an integer `n` greater than 1 and returns a list of its prime factors in ascending order. A prime factor is a factor that is a prime number. If `n` is a prime number itself, the function should return a list containing only `n`. Additionally, provide test cases to validate your function. # Example ``` find_prime_factors(18) -> [2, 3, 3] find_prime_factors(29) -> [29] find_prime_factors(60) -> [2, 2, 3, 5] ``` # Constraints - Input `n` is guaranteed to be greater than 1. - The function should handle inputs up to `1000000`. # Test Cases Use the following test cases to validate your function: 1. `find_prime_factors(18)` should return `[2, 3, 3]`. 2. `find_prime_factors(29)` should return `[29]`. 3. `find_prime_factors(60)` should return `[2, 2, 3, 5]`. 4. `find_prime_factors(7)` should return `[7]`. 5. `find_prime_factors(100)` should return `[2, 2, 5, 5]`.","solution":"def find_prime_factors(n): Returns the list of prime factors of the given integer n. def is_prime(x): if x <= 1: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True prime_factors = [] # Check for number of 2s in n while n % 2 == 0: prime_factors.append(2) n = n // 2 # Check for odd factors from 3 onwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: prime_factors.append(i) n = n // i # This condition is to check if n is a prime number greater than 2 if n > 2: prime_factors.append(n) return prime_factors"},{"question":"Write a function that accepts a string and returns the length of the longest substring without repeating characters. This function should implement an efficient algorithm to solve the problem (O(n) time complexity or better). Consider both uppercase and lowercase characters as distinct. Additionally, write a method that prints all the distinct substrings of the given string that have the maximum length of non-repeating characters. For example, given the input string \\"abrkaabcdefghijjxxx\\", the function should return the length 10 (corresponding to the substring \\"abcdefghij\\") and print [\\"abcdefghij\\"]. If there are multiple substrings of the same maximum length, print all of them. Note: Use Python for implementation. ```python def longest_unique_substring_length(s: str) -> int: # Your implementation here pass def print_all_longest_unique_substrings(s: str) -> None: # Your implementation here pass input_string = \\"abrkaabcdefghijjxxx\\" print(longest_unique_substring_length(input_string)) # Output: 10 print_all_longest_unique_substrings(input_string) # Output: [\'abcdefghij\'] ```","solution":"def longest_unique_substring_length(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index = {} max_length = 0 start_index = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start_index: start_index = char_index[char] + 1 char_index[char] = i max_length = max(max_length, i - start_index + 1) return max_length def print_all_longest_unique_substrings(s: str) -> None: Prints all the distinct substrings of the given string that have the maximum length of non-repeating characters. char_index = {} max_length = 0 start_index = 0 substrings = set() for i, char in enumerate(s): if char in char_index and char_index[char] >= start_index: start_index = char_index[char] + 1 char_index[char] = i current_length = i - start_index + 1 if current_length > max_length: max_length = current_length substrings = {s[start_index:i+1]} # Reset the set with new max length substring elif current_length == max_length: substrings.add(s[start_index:i+1]) print(list(substrings))"},{"question":"Write a function in Python that takes a string as an input and returns a dictionary where the keys are the unique characters from the string, and the values are the ASCII values of those characters. Additionally, if a character appears more than once in the string, its corresponding value in the dictionary should be a list of all the positions (indexes) it appears in the string. Use the `ord()` function to get the ASCII value of a character. Provide appropriate documentation and at least three test cases. # Example: ```python # Input: \'hello\' # Output: {\'h\': 104, \'e\': 101, \'l\': [2, 3], \'o\': 111} ```","solution":"def char_info(s): Returns a dictionary where keys are unique characters from the string s. Values are ASCII values of those characters. If a character appears more than once, its value is a list of all positions in the string. Parameters: s (str): Input string. Returns: dict: Dictionary with unique characters and their respective ASCII values or positions. result = {} for index, char in enumerate(s): if char in result: if isinstance(result[char], int): result[char] = [result[char], index] else: result[char].append(index) else: result[char] = ord(char) return result"},{"question":"Implement a function that takes a string representing a mathematical expression containing \'+\', \'-\', \'*\', \'/\', \'(\', \')\', and integers, and calculates the result of the expression. Use the shunting-yard algorithm to parse the expression and the reverse Polish notation (RPN) to evaluate it. Make sure to handle operator precedence and parentheses correctly. For example: ``` Input: \\"3+(2*2)\\" Output: 7 Input: \\"(1+(4+5+2)-3)+(6+8)\\" Output: 23 ```","solution":"def evaluate_expression(expression): Given a mathematical expression string, this function evaluates the result using the shunting-yard algorithm and reverse Polish notation (RPN). def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] def is_higher_precedence(op1, op2): return precedence.get(op1, 0) >= precedence.get(op2, 0) i = 0 while i < len(expression): if expression[i].isdigit(): num = [] while i < len(expression) and expression[i].isdigit(): num.append(expression[i]) i += 1 output.append(\\"\\".join(num)) continue if expression[i] in \\"+-*/\\": while (operators and operators[-1] in \\"+-*/\\" and is_higher_precedence(operators[-1], expression[i])): output.append(operators.pop()) operators.append(expression[i]) elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # pop \'(\' i += 1 while operators: output.append(operators.pop()) return output def eval_postfix(postfix): stack = [] for token in postfix: if token.isdigit(): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) return stack[0] postfix = infix_to_postfix(expression) result = eval_postfix(postfix) return result"},{"question":"Write a function `check_brackets_balance(s)` that takes a string `s` containing various types of brackets (`(`, `)`, `{`, `}`, `[`, `]`) and returns a boolean indicating whether the brackets are balanced. A string is considered balanced if all opening brackets have their corresponding closing brackets in the correct order. Make sure your solution is efficient and handles edge cases, such as an empty string or a string without any brackets.","solution":"def check_brackets_balance(s): Returns True if the brackets in the string `s` are balanced, otherwise False. Handles `()`, `{}`, and `[]` brackets. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if not stack or stack.pop() != bracket_map[char]: return False return not stack"},{"question":"Write a function that takes a list of integers and returns a new list with each element being the sum of itself and all the previous elements from the original list. The function should handle both positive and negative integers correctly. Example: ``` Input: [1, 2, 3, 4] Output: [1, 3, 6, 10] Input: [4, -1, 2, 0, -3] Output: [4, 3, 5, 5, 2] ```","solution":"def cumulative_sum(nums): Returns a new list where each element is the sum of itself and all previous elements from the original list. result = [] current_sum = 0 for num in nums: current_sum += num result.append(current_sum) return result"},{"question":"Design and implement a Python program to manage a library system. The program should be able to add new books, remove old books, issue books to members, return books from members, and display the current list of books and their availability status. # Specifications: - **Adding a Book**: - Each book should have a unique ID, title, author, and a flag indicating if it is available or issued. - When a new book is added, it should be marked as available. - **Removing a Book**: - A book can only be removed if it is currently marked as available. - If a book is issued, it should not be removed and the system should notify the librarian. - **Issuing a Book**: - A book can only be issued if it is currently available. - The system should record the member\'s name and the date of issue. - **Returning a Book**: - The system should update the availability flag when a book is returned and clear the member\'s name and date of issue. - **Displaying Books**: - Display a list of all books with their status (available or issued). - If a book is issued, display the member\'s name and date of issue. # Requirements: - Build a class `Library` that encapsulates the above functionalities. - Use appropriate data structures (e.g., dictionaries, lists) to manage books. - Implement error handling for scenarios such as adding duplicate books, removing non-existent books, or issuing/returning books that don\'t exist. - Ensure proper input validation and user-friendly messages for each operation. # Implementation Notes: - Your solution should be well-commented, and code readability is crucial. - Include docstrings in your class and methods to explain their purpose and usage. - Provide a test suite or an interactive menu-driven program to demonstrate the functionality of your library system. # Example Interaction: ```plaintext 1. Add Book 2. Remove Book 3. Issue Book 4. Return Book 5. Display Books 6. Exit Enter your choice: 1 Enter Book ID: 1001 Enter Title: Python Programming Enter Author: John Doe Book added successfully! Enter your choice: 5 ID: 1001, Title: Python Programming, Author: John Doe, Status: Available Enter your choice: 3 Enter Book ID: 1001 Enter Member Name: Alice Enter Date of Issue (YYYY-MM-DD): 2023-10-01 Book issued successfully! Enter your choice: 5 ID: 1001, Title: Python Programming, Author: John Doe, Status: Issued to Alice on 2023-10-01 ``` Ensure that your program closely follows these specifications and handles edge cases appropriately.","solution":"from datetime import datetime class Book: def __init__(self, book_id, title, author): self.book_id = book_id self.title = title self.author = author self.is_available = True self.issued_to = None self.date_of_issue = None class Library: def __init__(self): self.books = {} def add_book(self, book_id, title, author): if book_id in self.books: return \\"Book with this ID already exists.\\" new_book = Book(book_id, title, author) self.books[book_id] = new_book return \\"Book added successfully.\\" def remove_book(self, book_id): if book_id not in self.books: return \\"Book ID not found.\\" if not self.books[book_id].is_available: return \\"Book is currently issued and can\'t be removed.\\" del self.books[book_id] return \\"Book removed successfully.\\" def issue_book(self, book_id, member_name, issue_date): if book_id not in self.books: return \\"Book ID not found.\\" if not self.books[book_id].is_available: return \\"Book is already issued.\\" self.books[book_id].is_available = False self.books[book_id].issued_to = member_name self.books[book_id].date_of_issue = issue_date return \\"Book issued successfully.\\" def return_book(self, book_id): if book_id not in self.books: return \\"Book ID not found.\\" self.books[book_id].is_available = True self.books[book_id].issued_to = None self.books[book_id].date_of_issue = None return \\"Book returned successfully.\\" def display_books(self): result = [] for book in self.books.values(): if book.is_available: result.append(f\\"ID: {book.book_id}, Title: {book.title}, Author: {book.author}, Status: Available\\") else: result.append(f\\"ID: {book.book_id}, Title: {book.title}, Author: {book.author}, Status: Issued to {book.issued_to} on {book.date_of_issue}\\") return result"},{"question":"Write a function that takes an array of integers and returns the index of the first occurrence of the maximum value in the array. If the array is empty, return -1. [Example Input]: [3, 9, 2, 9, 6] [Expected Output]: 1","solution":"def index_of_first_max(arr): Returns the index of the first occurrence of the maximum value in the array. If the array is empty, returns -1. if not arr: return -1 max_value = max(arr) return arr.index(max_value)"},{"question":"Given a string, your task is to return a new string with all the vowels (a, e, i, o, u) removed. Note that the input string may contain both upper-case and lower-case letters, and results should be case-sensitive. \\"Hello World\\"","solution":"def remove_vowels(s): Removes all vowels (a, e, i, o, u) from the input string s. vowels = \'aeiouAEIOU\' return \'\'.join(char for char in s if char not in vowels)"},{"question":"Implement a simple online store with a shopping cart feature. The system should support adding items to the cart, removing items from the cart, and displaying the total price of the items in the cart. Each item should have a name, price, and quantity. In addition, allow the user to apply a discount code that provides a percentage discount on the total cart value. Implement logic to validate the discount code before applying it. Hint: - Create a class to represent the shopping cart. - Use methods to handle adding, removing, and displaying cart items. - Ensure the discount code is validated against a predefined list of valid codes.","solution":"class ShoppingCart: def __init__(self): self.items = [] self.valid_discount_codes = { \\"DISCOUNT10\\": 10, \\"DISCOUNT20\\": 20, } def add_item(self, name, price, quantity=1): for item in self.items: if item[\'name\'] == name: item[\'quantity\'] += quantity return self.items.append({\'name\': name, \'price\': price, \'quantity\': quantity}) def remove_item(self, name, quantity=1): for item in self.items: if item[\'name\'] == name: if item[\'quantity\'] <= quantity: self.items.remove(item) else: item[\'quantity\'] -= quantity return def total_price(self): return sum(item[\'price\'] * item[\'quantity\'] for item in self.items) def apply_discount_code(self, code): if code in self.valid_discount_codes: discount_percentage = self.valid_discount_codes[code] total = self.total_price() discount_amount = total * (discount_percentage / 100) return total - discount_amount else: return -1 # Indicates invalid discount code"},{"question":"Create a Python program to manage a simple warehouse inventory system. Your task is to implement a class called `Warehouse` that models the essential operations of such a system. # Requirements 1. **Attributes**: - `inventory` (a dictionary where keys are item names and values are tuples of (quantity, price per unit)). 2. **Methods**: - `__init__(self)`: Initializes an empty inventory. - `add_item(self, item_name, quantity, price)`: Adds the specified quantity of an item to the inventory. If the item already exists, it should update the quantity and price. - `remove_item(self, item_name, quantity)`: Removes the specified quantity of an item from the inventory. If the quantity to remove is more than exists, it should throw an exception. - `get_stock(self, item_name)`: Returns the current stock of the item (quantity and price). If the item does not exist, return a message indicating that. - `total_value(self)`: Calculates and returns the total value of all items in the inventory. - `list_items(self)`: Lists all items in the inventory with their quantities and prices. # Additional Complexity Implement a method `import_items(self, item_list)` which takes a list of tuples where each tuple contains (item_name, quantity, price) and adds all items to the inventory. Ensure proper error handling for potential issues like negative quantities or prices. # Example Usage ```python def main(): warehouse = Warehouse() warehouse.add_item(\\"Laptop\\", 10, 999.99) warehouse.add_item(\\"Smartphone\\", 50, 499.99) warehouse.add_item(\\"Tablet\\", 30, 299.99) print(warehouse.get_stock(\\"Laptop\\")) print(warehouse.total_value()) warehouse.remove_item(\\"Smartphone\\", 5) print(warehouse.get_stock(\\"Smartphone\\")) items_to_import = [(\\"Headphone\\", 20, 49.99), (\\"Charger\\", 100, 19.99)] warehouse.import_items(items_to_import) print(warehouse.list_items()) if __name__ == \\"__main__\\": main() ``` # Expected Output ``` (\'Laptop\', 10, 999.99) 59999.0 (\'Smartphone\', 45, 499.99) [ (\'Laptop\', 10, 999.99), (\'Smartphone\', 45, 499.99), (\'Tablet\', 30, 299.99), (\'Headphone\', 20, 49.99), (\'Charger\', 100, 19.99) ] ```","solution":"class Warehouse: def __init__(self): self.inventory = {} def add_item(self, item_name, quantity, price): if quantity < 0 or price < 0: raise ValueError(\\"Quantity and price must be non-negative.\\") if item_name in self.inventory: current_quantity, _ = self.inventory[item_name] self.inventory[item_name] = (current_quantity + quantity, price) else: self.inventory[item_name] = (quantity, price) def remove_item(self, item_name, quantity): if item_name not in self.inventory: raise KeyError(f\\"Item {item_name} not found in inventory.\\") current_quantity, price = self.inventory[item_name] if quantity > current_quantity: raise ValueError(f\\"Cannot remove {quantity} units. Only {current_quantity} available.\\") if quantity < 0: raise ValueError(\\"Quantity to remove must be non-negative.\\") self.inventory[item_name] = (current_quantity - quantity, price) if self.inventory[item_name][0] == 0: del self.inventory[item_name] def get_stock(self, item_name): if item_name in self.inventory: return self.inventory[item_name] return f\\"Item {item_name} not found in inventory.\\" def total_value(self): return sum(quantity * price for quantity, price in self.inventory.values()) def list_items(self): return [(item, quantity, price) for item, (quantity, price) in self.inventory.items()] def import_items(self, item_list): for item_name, quantity, price in item_list: if quantity < 0 or price < 0: raise ValueError(\\"Quantity and price must be non-negative.\\") self.add_item(item_name, quantity, price)"},{"question":"Given an unsorted list of integers, implement a Python function that finds and returns the length of the longest contiguous subarray such that every element in that subarray differs by at most the specified integer `k` from every other element in the subarray. ```python def longest_contiguous_subarray(lst, k): Implement a function that finds the length of the longest contiguous subarray where the difference between any two elements is at most `k`. Example: longest_contiguous_subarray([1, 3, 2, 5, 4, 6], 1) returns 2. Explanation: The longest contiguous subarray where the differences between elements are within 1 is [1, 2] or [2, 3]. Args: lst: List of integers. k: Integer indicating the maximum allowed absolute difference between any two elements in the subarray. Returns: An integer representing the length of the longest contiguous subarray. ``` Please write the complete function and provide a brief explanation of the logic used.","solution":"def longest_contiguous_subarray(lst, k): Implement a function that finds the length of the longest contiguous subarray where the difference between any two elements is at most `k`. Example: longest_contiguous_subarray([1, 3, 2, 5, 4, 6], 1) returns 2. Explanation: The longest contiguous subarray where the differences between elements are within 1 is [1, 2] or [2, 3]. Args: lst: List of integers. k: Integer indicating the maximum allowed absolute difference between any two elements in the subarray. Returns: An integer representing the length of the longest contiguous subarray. if not lst: return 0 max_length = 1 current_length = 1 for i in range(1, len(lst)): if abs(lst[i] - lst[i - 1]) <= k: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Test the function print(longest_contiguous_subarray([1, 3, 2, 5, 4, 6], 1)) # Expected output: 2"},{"question":"Write a function in Python that takes a list of integers and a target integer as inputs. The function should return a list of tuples, where each tuple contains a pair of indices whose corresponding values in the list add up to the target integer. Ensure that the pairs are listed in ascending order based on the first index of each pair. If no such pairs exist, return an empty list. The function should handle lists of various lengths, including empty lists.","solution":"def find_pairs(nums, target): Finds all unique pairs of indices whose corresponding values add up to the target integer. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: list of tuples: A list of tuples with pairs of indices. pairs = [] num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: pairs.append((num_to_index[complement], i)) num_to_index[num] = i pairs.sort(key=lambda x: x[0]) return pairs"},{"question":"Write a Python function that simulates a simple bank account system. Implement the following operations within a class: 1. **Deposit** - Add a specified amount to the account balance. 2. **Withdrawal** - Subtract a specified amount from the account balance, but ensure the withdrawal amount does not exceed the available balance. 3. **Check balance** - Return the current account balance. 4. **Transfer** - Move a specified amount from one account to another, ensuring the transfer amount does not exceed the available balance of the sender account. Include error handling to manage invalid operations (e.g., withdrawing more than the available balance or transferring more than available funds), and demonstrate the usage of your class with two account instances.","solution":"class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount return self.balance def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds for withdrawal.\\") self.balance -= amount return self.balance def check_balance(self): return self.balance def transfer(self, amount, target_account): if not isinstance(target_account, BankAccount): raise ValueError(\\"Target account must be a BankAccount instance.\\") if amount <= 0: raise ValueError(\\"Transfer amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds for transfer.\\") self.withdraw(amount) target_account.deposit(amount) return self.balance # Demonstration of usage with two account instances account1 = BankAccount(1000) account2 = BankAccount(500) print(account1.check_balance()) # Output: 1000 print(account2.check_balance()) # Output: 500 account1.deposit(200) print(account1.check_balance()) # Output: 1200 account1.withdraw(300) print(account1.check_balance()) # Output: 900 account1.transfer(400, account2) print(account1.check_balance()) # Output: 500 print(account2.check_balance()) # Output: 900"},{"question":"Write a function `is_palindrome_permutation()` that determines if a given string is a permutation of a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. The function should return `True` if it is, and `False` otherwise. Consider only alphanumeric characters and ignore case sensitivity. **Function Signature:** ```python def is_palindrome_permutation(s: str) -> bool: pass ``` **Input:** - A single string `s` (1 <= |s| <= 1000) that may contain letters, digits, spaces, punctuation marks, etc. **Output:** - Return `True` if the string is a permutation of a palindrome, and `False` otherwise. **Example:** ```python assert is_palindrome_permutation(\\"Tact Coa\\") == True # Permutation: \\"taco cat\\" assert is_palindrome_permutation(\\"not a palindrome\\") == False assert is_palindrome_permutation(\\"A man, a plan, a canal, Panama\\") == True # Permutation: \\"a man a plan a canal panama\\" ``` **Notes:** - Consider letters and digits only. - Ignore the case of the letters. - A string is a permutation of a palindrome if it can be rearranged to form a palindrome, which means that at most one character can have an odd count.","solution":"def is_palindrome_permutation(s: str) -> bool: from collections import Counter import re # Normalize the string: Remove non-alphanumeric characters and convert to lowercase normalized_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count the frequency of each character char_count = Counter(normalized_str) # Check the number of characters with an odd frequency odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # If more than one character has an odd count, it can\'t be a permutation of a palindrome if odd_count > 1: return False return True"},{"question":"Write a Python function `flatten_nested_list` that takes a nested list (a list where elements can be integers or other lists) and returns a flat list. For example, given the nested list `[1, [2, [3, 4]], 5]`, the function should return `[1, 2, 3, 4, 5]`. Ensure that the function handles arbitrarily nested lists.","solution":"def flatten_nested_list(nested_list): Flattens a nested list into a flat list. :param nested_list: List of integers or other lists :return: A flat list of integers flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten_nested_list(item)) else: flat_list.append(item) return flat_list"},{"question":"Design a function to classify email messages as \\"spam\\" or \\"not spam\\" based on the presence of certain keywords. The function should take a list of email messages (each message is a string) and a list of spam keywords, and return a list of classifications (\\"spam\\" or \\"not spam\\") for each message. Implement filtering using regular expressions where an email is classified as spam if it contains at least one keyword from the list of spam keywords. The following code snippet may contain some errors which need to be modified to accurately perform the task. ```python import re # Sample data emails = [\\"Congratulations, you have won a lottery!\\", \\"Urgent: Your account has been compromised.\\", \\"Hello, how are you today?\\", \\"Earn money quickly by working from home.\\", \\"Hi, let\'s catch up over the weekend.\\"] # List of spam keywords spam_keywords = [\\"win\\", \\"lottery\\", \\"Urgent\\", \\"money\\"] # Incorrect function to classify emails def classify_emails(emails, spam_keywords): classifications = [] for email in emails: spam = False for keyword in spam_keywords: if re.search(keyword, email, re.IGNORECASE): classifications.append(\\"spam\\") spam = True break if not spam: classifications.append(\\"not spam\\") return classifications # Call the function with sample data results = classify_emails(emails, spam_keywords) print(results) ``` The code attempts to classify emails as \\"spam\\" or \\"not spam\\" based on the presence of spam keywords but fails to correctly do so due to logical errors in the implementation. Fix the errors and successfully perform the task.","solution":"import re def classify_emails(emails, spam_keywords): classifications = [] for email in emails: spam = False for keyword in spam_keywords: if re.search(keyword, email, re.IGNORECASE): classifications.append(\\"spam\\") spam = True break if not spam: classifications.append(\\"not spam\\") return classifications"},{"question":"Implement a function that receives a list of integers and returns a new list containing only the prime numbers from the original list. Make sure your solution is efficient and can handle large lists. def filter_primes(int_list): ??? # Example: # input: [10, 15, 3, 7, 9, 11, 13] # output: [3, 7, 11, 13]","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(int_list): Returns a new list containing only the prime numbers from the original list. return [num for num in int_list if is_prime(num)]"},{"question":"There is a popular online marketplace where sellers can list items, and buyers can search for items by keyword. Implement a function `search_items` that takes a list of items and a search keyword, and returns a list of items that contain the keyword. Each item is represented as a dictionary with keys: `id` (an integer), `title` (a string), and `description` (a string). The search should be case-insensitive and should match the keyword anywhere in the title or description. # Function Signature ```python def search_items(items: List[Dict[str, Union[int, str]]], keyword: str) -> List[Dict[str, Union[int, str]]]: ``` # Input - `items`: A list of dictionaries where each dictionary represents an item with the following keys: - `id`: an integer representing the unique identifier of the item. - `title`: a string representing the title of the item. - `description`: a string representing the description of the item. - `keyword`: a string representing the search keyword. # Output - A list of dictionaries representing the items that contain the search keyword in either the title or the description. The output list should maintain the order of the items as they appear in the input list. # Constraints - All `id` values are unique. - The length of `items` will not exceed 10,000. - The length of the `title` or `description` strings will not exceed 1,000 characters. - Keyword length will not exceed 100 characters. # Example ```python items = [ {\\"id\\": 1, \\"title\\": \\"Apple iPhone 12\\", \\"description\\": \\"Latest model with A14 Bionic chip\\"}, {\\"id\\": 2, \\"title\\": \\"Samsung Galaxy S21\\", \\"description\\": \\"New release with powerful performance\\"}, {\\"id\\": 3, \\"title\\": \\"Apple MacBook Pro\\", \\"description\\": \\"16-inch laptop with M1 chip\\"}, ] keyword = \\"apple\\" # The function should return: # [ # {\\"id\\": 1, \\"title\\": \\"Apple iPhone 12\\", \\"description\\": \\"Latest model with A14 Bionic chip\\"}, # {\\"id\\": 3, \\"title\\": \\"Apple MacBook Pro\\", \\"description\\": \\"16-inch laptop with M1 chip\\"} # ] print(search_items(items, keyword)) ```","solution":"from typing import List, Dict, Union def search_items(items: List[Dict[str, Union[int, str]]], keyword: str) -> List[Dict[str, Union[int, str]]]: Returns a list of items that contain the keyword in either the title or description. The search is case-insensitive. # Convert the keyword to lower case for case-insensitive search keyword_lower = keyword.lower() # Filter items based on the presence of the keyword in the title or description result = [ item for item in items if keyword_lower in item[\'title\'].lower() or keyword_lower in item[\'description\'].lower() ] return result"},{"question":"Consider an array of integers where each element represents the maximum number of steps that can be made forward from that element. For example, if the array is `[2, 3, 1, 1, 4]`, the maximum jumps are: - From index 0 (value 2), you can jump to index 1 or 2. - From index 1 (value 3), you can jump to index 2, 3, or 4. Write a function named `minJumps` that returns the minimum number of jumps required to reach the end of the array (starting from the first element). If it is not possible to reach the end of the array, return -1. Your solution should be optimized for time complexity since the array can be very large. Additionally, write a function `testMinJumps` to validate your solution using the following test cases: - `[2, 3, 1, 1, 4]` should return `2` - `[1, 0, 3, 2, 6, 7]` should return `-1` - `[6, 2, 4, 0, 5, 1, 1, 4, 2, 9]` should return `2` Note: - You can assume that you always start at the first element. - If you are already at the last element, then you don\'t need to make any jumps. Provide a detailed explanation of your approach and the time complexity of your solution.","solution":"def minJumps(arr): Function to return minimum number of jumps to reach end of array. n = len(arr) if n == 0 or arr[0] == 0: return -1 jumps = [0] * n for i in range(1, n): jumps[i] = float(\'inf\') for j in range(i): if i <= j + arr[j] and jumps[j] != float(\'inf\'): jumps[i] = min(jumps[i], jumps[j] + 1) break return jumps[n-1] if jumps[n-1] != float(\'inf\') else -1"},{"question":"Create a function in Python to simulate the operations of an ATM machine. This function should handle the following operations: deposit, withdraw, and check balance. The function should maintain a user\'s balance and output appropriate messages for each operation. 1. **Deposit Operation**: The function should allow the user to deposit a specified amount into their account. If the deposit amount is negative, return an error message stating that the deposit amount is invalid. 2. **Withdraw Operation**: The function should allow the user to withdraw a specified amount from their account. If the withdraw amount is more than the current balance, return an error message stating insufficient funds. 3. **Check Balance**: The function should return the current balance of the user\'s account. Additionally, structure your function to handle invalid non-numeric inputs gracefully by raising and catching exceptions as needed. Provide a simple text-based menu to let the user choose one of the operations. This will ensure the function can simulate an interaction with a user. Example of expected behavior: ``` Choose an operation: 1. Deposit 2. Withdraw 3. Check Balance 4. Exit ``` Ensure to wrap your interface in a loop that allows multiple operations until the user decides to exit.","solution":"def atm_machine(): balance = 0 while True: print(\\"nChoose an operation:\\") print(\\"1. Deposit\\") print(\\"2. Withdraw\\") print(\\"3. Check Balance\\") print(\\"4. Exit\\") choice = input(\\"Enter choice (1/2/3/4): \\") if choice == \'1\': try: amount = float(input(\\"Enter amount to deposit: \\")) if amount < 0: print(\\"Error: Invalid deposit amount.\\") else: balance += amount print(f\\"Deposited {amount}. New balance is {balance}.\\") except ValueError: print(\\"Error: Invalid input. Please enter a numeric value.\\") elif choice == \'2\': try: amount = float(input(\\"Enter amount to withdraw: \\")) if amount < 0: print(\\"Error: Invalid withdraw amount.\\") elif amount > balance: print(\\"Error: Insufficient funds.\\") else: balance -= amount print(f\\"Withdrew {amount}. New balance is {balance}.\\") except ValueError: print(\\"Error: Invalid input. Please enter a numeric value.\\") elif choice == \'3\': print(f\\"Current balance: {balance}\\") elif choice == \'4\': print(\\"Exiting the ATM machine. Have a great day!\\") break else: print(\\"Error: Invalid choice. Please select a valid option.\\")"},{"question":"Write a function that takes a list of strings and returns a new list where each string is replaced by the smallest lexicographical permutation of itself. Make sure the function handles edge cases, such as empty strings or strings with all identical characters. For example, given the list [\\"cba\\", \\"hello\\", \\"aaab\\"], the function should return [\\"abc\\", \\"ehllo\\", \\"aaab\\"].","solution":"def smallest_lexicographical_permutation(strings): Returns a new list where each string is replaced by the smallest lexicographical permutation of itself. :param strings: List of strings :return: List of strings with smallest lexicographical permutations return [\\"\\".join(sorted(string)) for string in strings]"},{"question":"Write a Python function `find_median` that takes a list of integers as input and returns the median value. If the list has an even number of elements, return the average of the two middle elements. Do not use any built-in sorting functions.","solution":"def find_median(nums): Given a list of integers, returns the median value. If the list has an even number of elements, returns the average of the two middle elements. # Insertion sort to sort the list for i in range(1, len(nums)): key = nums[i] j = i - 1 while j >= 0 and key < nums[j]: nums[j + 1] = nums[j] j -= 1 nums[j + 1] = key n = len(nums) if n % 2 == 1: return nums[n // 2] else: mid1 = nums[n // 2] mid2 = nums[n // 2 - 1] return (mid1 + mid2) / 2"},{"question":"Write a Python function that calculates the sum of all prime numbers less than a given integer n. The implementation should demonstrate the understanding of prime numbers and efficient primality testing techniques. ```python def sum_of_primes(n): # Your code here # Example usage: # sum_of_primes(10) should return 17 (2 + 3 + 5 + 7) print(sum_of_primes(10)) ```","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than n. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n, start): sieve[i] = False return sum(i for i, is_prime in enumerate(sieve) if is_prime)"},{"question":"Implement a function that accepts a string containing a mix of numbers and letters and returns the sum of all the numerical digits present in the string. For instance, given the input \\"abc123\\", the function should return 6. Note: If the string contains no digits, the function should return 0.","solution":"def sum_of_digits(s): Returns the sum of all numerical digits present in the string. :param s: str - The input string containing a mix of numbers and letters. :return: int - The sum of all numerical digits in the input string. return sum(int(char) for char in s if char.isdigit())"},{"question":"Write a Python function that takes a list of integers and returns the second largest number in the list. For example, given the list [3, 1, 4, 1, 5, 9, 2], the function should return 5. Ensure your function handles cases where duplicates or less than two elements are present appropriately.","solution":"def second_largest(nums): Returns the second largest number in the list nums. If the list does not contain at least two unique numbers, returns None. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Create a Python function called `check_subsequence` that determines whether a given subsequence exists in a list of integers. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your function should take two parameters: a list of integers and the target subsequence. Return `True` if the subsequence exists in the list, and `False` otherwise. For example, given lst = [5, 1, 22, 25, 6, -1, 8, 10] and subseq = [1, 6, -1, 10], the function should return `True` as this subsequence appears in the order specified.","solution":"def check_subsequence(lst, subseq): Determines whether the target subsequence exists in the list of integers. Parameters: lst (list): The list of integers to search in. subseq (list): The subsequence to find. Returns: bool: True if the subsequence exists in the list, False otherwise. subseq_index = 0 for num in lst: if subseq_index == len(subseq): break if num == subseq[subseq_index]: subseq_index += 1 return subseq_index == len(subseq)"},{"question":"Write a Python function that merges two sorted lists into one sorted list without using built-in sorting functions. The input lists may contain duplicate values. Example inputs: list1 = [1, 3, 5, 7] list2 = [2, 3, 6, 8, 9] Example output: merged_list = [1, 2, 3, 3, 5, 6, 7, 8, 9]","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list without using built-in sorting functions. Parameters: list1 (list): The first sorted list. list2 (list): The second sorted list. Returns: list: A merged, sorted list. i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Develop a function that takes an array of integers as an input and returns an array containing only the first instance of each duplicate number in the input array. The order of the returned elements should match the order of their first occurrence in the input array. For this task, an element is considered a duplicate if it has appeared more than once by the time we reach it in the array. Example: ``` Input: [1, 2, 2, 3, 4, 4, 5, 6, 6] Output: [2, 4, 6] ```","solution":"def first_instance_of_duplicates(arr): Returns an array of the first instance of each duplicate number in the input array. Parameters: arr (list): List of integers. Returns: list: List containing the first instance of each duplicate number. seen = set() duplicates = set() results = [] for num in arr: if num in seen: if num not in duplicates: results.append(num) duplicates.add(num) else: seen.add(num) return results"},{"question":"Write a Python function that takes a string containing a mix of letters and integers, and groups all the characters into contiguous sections of letters and integers respectively, maintaining the original order from the input. Subsequently, return the newly formed string. For example: ```python input_string = \\"ab12cd34ef\\" ``` The resulting string should be: ```python \\"abcdef1234\\" ``` Implement the function to achieve this transformation, ensuring it works for any valid input string.","solution":"def group_letters_and_digits(s): Group all letters and digits in the string into contiguous sections of letters and digits respectively, maintaining the original order from the input. Parameters: s (str): Input string containing a mix of letters and integers. Returns: str: Newly formed string with grouped letters and digits. letters = [] digits = [] for ch in s: if ch.isdigit(): digits.append(ch) elif ch.isalpha(): letters.append(ch) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Design a program that reads a series of temperatures (in Celsius) provided as input from the user, converts each temperature to Fahrenheit, and then determines and prints three things: the highest temperature in Fahrenheit, the lowest temperature in Fahrenheit, and the average temperature in Fahrenheit. Ensure the program can handle a varying number of inputs and validate that all inputs are valid numeric values.","solution":"def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32 def process_temperatures(temperatures): if not temperatures: raise ValueError(\\"No temperatures provided\\") fahrenheit_temps = [celsius_to_fahrenheit(temp) for temp in temperatures] highest_temp = max(fahrenheit_temps) lowest_temp = min(fahrenheit_temps) average_temp = sum(fahrenheit_temps) / len(fahrenheit_temps) return highest_temp, lowest_temp, average_temp"},{"question":"Develop a Python function that combines two sorted input lists (list1 and list2) into a single sorted list while removing any duplicate elements. The function should handle both lists being empty and should raise an appropriate exception if the inputs are not lists. Additionally, ensure the function is efficient, taking advantage of the fact that the input lists are already sorted. Also, debug the erroneous code given below and utilize it as your reference: ```python def merge_sorted_lists(list1, list2): if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both inputs must be lists\\") merged_list = list1 + list2 return sorted(set(merged_list)) print(merge_sorted_lists([1, 3, 5], \'2, 4, 6\')) ``` Example Lists: list1 - [1, 3, 5, 7], list2 - [2, 4, 6, 7, 8] Expected Output: [1, 2, 3, 4, 5, 6, 7, 8]","solution":"def merge_sorted_lists(list1, list2): Combines two sorted input lists into a single sorted list while removing any duplicated elements. Params: list1: List[int] - First sorted input list list2: List[int] - Second sorted input list Returns: List[int] - Merged sorted list without duplicates Raises: ValueError: If either of the inputs is not a list if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both inputs must be lists\\") # Initialize pointers for both lists i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] < list2[j]: if not merged_list or merged_list[-1] != list1[i]: merged_list.append(list1[i]) i += 1 elif list1[i] > list2[j]: if not merged_list or merged_list[-1] != list2[j]: merged_list.append(list2[j]) j += 1 else: if not merged_list or merged_list[-1] != list1[i]: merged_list.append(list1[i]) i += 1 j += 1 # Append any remaining elements from list1 while i < len(list1): if not merged_list or merged_list[-1] != list1[i]: merged_list.append(list1[i]) i += 1 # Append any remaining elements from list2 while j < len(list2): if not merged_list or merged_list[-1] != list2[j]: merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Design a function that takes an array of integers as input and returns a new array containing only the prime numbers from the original array. Write a function `isPrime(n)` that checks if a number is prime, and use it within your main function. Ensure your function handles edge cases such as an empty array or an array with no prime numbers. Provide an example to illustrate your solution.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(arr): Takes an array of integers and returns a new array containing only the prime numbers from the original array. return [num for num in arr if is_prime(num)]"},{"question":"Write a function that provides the shortest path in a grid from the top-left corner to the bottom-right corner if you can only move either right or down at any point in time. The grid may include obstacles, and your path cannot go through these obstacles. The grid is represented as a 2D list of integers where a 1 indicates an obstacle and a 0 indicates an empty space. Your function should return the length of the shortest path. If a path does not exist, return -1. def shortest_path(grid: List[List[int]]) -> int: Determine the shortest path from the top-left corner to the bottom-right corner of a grid. Args: grid (List[List[int]]): 2D list representing the grid with 1s as obstacles and 0s as paths. Returns: int: the length of the shortest path, or -1 if no path exists. Example: >>> shortest_path([ ... [0, 0, 0], ... [0, 1, 0], ... [0, 0, 0] ... ]) 4 >>> shortest_path([ ... [0, 1, 0], ... [1, 1, 0], ... [0, 0, 0] ... ]) -1 >>> shortest_path([ ... [0] ... ]) 0 # Your solution here","solution":"from collections import deque from typing import List, Tuple def shortest_path(grid: List[List[int]]) -> int: Determine the shortest path from the top-left corner to the bottom-right corner of a grid. Args: grid (List[List[int]]): 2D list representing the grid with 1s as obstacles and 0s as paths. Returns: int: the length of the shortest path, or -1 if no path exists. rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 # Start or end is blocked. directions = [(0, 1), (1, 0)] # Right, Down queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # If we reached the bottom-right corner if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1 # No path found"},{"question":"Design an efficient algorithm in Python for merging two sorted arrays into one sorted array. Your solution should aim for optimal time complexity and should not use any built-in sort functions. Explain the approach and provide the implementation in Python.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Args: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: A merged and sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a Python function to simulate the rolling of two six-sided dice. The function should take no parameters and return a tuple containing the result of each die roll. Additionally, create a main block that calls the function 10 times and prints the results for each roll in a formatted string. Ensure the function uses the `random` module to generate the dice rolls.","solution":"import random def roll_two_dice(): Simulates the rolling of two six-sided dice. Returns a tuple containing the result of each die roll. die1 = random.randint(1, 6) die2 = random.randint(1, 6) return (die1, die2) if __name__ == \\"__main__\\": for i in range(10): roll = roll_two_dice() print(f\\"Roll {i+1}: Die 1: {roll[0]}, Die 2: {roll[1]}\\")"},{"question":"You are given an array of integers representing the daily temperatures for a week. Return an array of integers where each element, at index i, represents the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, set the value at index i to 0. **Example:** Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] **Function signature:** ```python def daily_temperatures(temperatures: List[int]) -> List[int]: pass ```","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: Returns a list of integers where each element represents the number of days one would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the value is set to 0. result = [0] * len(temperatures) stack = [] for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"You have been provided a text file `server_logs.txt` containing web server logs in the Common Log Format. Write a Python function that reads this file, extracts the IP addresses, counts the number of times each IP address has accessed the server, and outputs the top 5 most frequent IP addresses along with their corresponding access counts. You must handle any potential file reading errors gracefully and include comments explaining your approach. Also, write a test case to verify your function using a sample log snippet.","solution":"import collections def get_top_ip_addresses(log_file_path): Reads a file containing web server logs, extracts IP addresses, counts the number of times each IP has accessed the server, and returns the top 5 most frequent IP addresses with their access counts. try: with open(log_file_path, \'r\') as log_file: logs = log_file.readlines() except FileNotFoundError: print(\\"Log file not found.\\") return [] except IOError: print(\\"Error reading the log file.\\") return [] ip_counter = collections.Counter() for log in logs: parts = log.split() if len(parts) > 0: ip_address = parts[0] ip_counter[ip_address] += 1 top_5_ips = ip_counter.most_common(5) return top_5_ips"},{"question":"Develop a function to simulate a simplified shopping cart system where users can add items, remove items, and calculate the total cost. The cart should keep track of the item names, their quantities, and their prices. Implement the following operations: 1. **Add item**: This operation takes the item name, price, and quantity, and adds it to the cart. If the item already exists, update its quantity and price. 2. **Remove item**: This operation takes the item name and removes it from the cart. 3. **Total cost**: This operation calculates and returns the total cost of all items in the cart. Use the following method headers: - `add_item(item_name: str, price: float, quantity: int)` - `remove_item(item_name: str)` - `total_cost() -> float` Additionally, write tests to verify that the cart behaves as expected.","solution":"class ShoppingCart: def __init__(self): self.cart = {} def add_item(self, item_name: str, price: float, quantity: int): Adds an item to the shopping cart. if item_name in self.cart: self.cart[item_name][\'quantity\'] += quantity self.cart[item_name][\'price\'] = price else: self.cart[item_name] = {\'price\': price, \'quantity\': quantity} def remove_item(self, item_name: str): Removes an item from the shopping cart. if item_name in self.cart: del self.cart[item_name] def total_cost(self) -> float: Calculates the total cost of the items in the shopping cart. return sum(item[\'price\'] * item[\'quantity\'] for item in self.cart.values())"},{"question":"Write a function that takes a positive integer `n` as input and returns the sum of all prime numbers less than `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your solution should efficiently handle large values of `n`, ensuring optimal performance in terms of both time and space complexity. You may assume that the input `n` will be a reasonable positive integer such as 1,000,000.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than `n`. if n < 2: return 0 # Sieve of Eratosthenes sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n, start): sieve[i] = False return sum(i for i in range(n) if sieve[i])"},{"question":"Library Management System: You are tasked with implementing a function to manage the inventory of books in a library. The library management system needs to track books for various operations like adding new books, searching for books by their title or author, and removing books by their title. Write a class `Library` that has the following methods: 1. `add_book(title: str, author: str) -> None`: Adds a new book with the specified title and author to the library. 2. `search_by_title(title: str) -> List[Dict[str, str]]`: Returns a list of all books that match the exact title. 3. `search_by_author(author: str) -> List[Dict[str, str]]`: Returns a list of all books by the given author. 4. `remove_by_title(title: str) -> bool`: Removes a book with the specified title. Returns `True` if a book was removed, otherwise `False`. Each book is represented as a dictionary with two keys: \'title\' and \'author\'. Example: ```python lib = Library() lib.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") lib.add_book(\\"1984\\", \\"George Orwell\\") lib.add_book(\\"Animal Farm\\", \\"George Orwell\\") print(lib.search_by_title(\\"1984\\")) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\'}] print(lib.search_by_author(\\"George Orwell\\")) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\'}, {\'title\': \'Animal Farm\', \'author\': \'George Orwell\'}] print(lib.remove_by_title(\\"1984\\")) # Output: True print(lib.search_by_title(\\"1984\\")) # Output: [] ``` Write the `Library` class with the mentioned methods to perform the described operations. Provide implementations and ensure that your code works as expected using the example provided.","solution":"from typing import List, Dict class Library: def __init__(self): self.books = [] def add_book(self, title: str, author: str) -> None: self.books.append({\'title\': title, \'author\': author}) def search_by_title(self, title: str) -> List[Dict[str, str]]: return [book for book in self.books if book[\'title\'] == title] def search_by_author(self, author: str) -> List[Dict[str, str]]: return [book for book in self.books if book[\'author\'] == author] def remove_by_title(self, title: str) -> bool: for book in self.books: if book[\'title\'] == title: self.books.remove(book) return True return False"},{"question":"You are given a Python function `uniquePaths` that incorrectly attempts to calculate the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. In this grid, you can only move either down or right at any point in time. ```python def uniquePaths(m, n): if m == 1 or n == 1: return 1 return uniquePaths(m - 1, n) + uniquePaths(m, n - 1) ``` The provided function is inefficient for large inputs as it uses a naive recursive approach. Your task is to optimize this function using dynamic programming to significantly reduce its time complexity. Here are the requirements for your optimized `uniquePaths` function: 1. Implement the dynamic programming approach to solve the problem efficiently. 2. Ensure your function can handle large values of `m` and `n` (up to 100 or more). 3. Explain the time and space complexity of your optimized solution. 4. Provide test cases to validate your implementation, including edge cases such as the smallest grid dimensions. **Example input/output**: ```python # Example 1 m = 3, n = 7 print(uniquePaths(m, n)) # Output: 28 # Example 2 m = 3, n = 2 print(uniquePaths(m, n)) # Output: 3 # Example 3 m = 1, n = 1 print(uniquePaths(m, n)) # Output: 1 ``` Explain your approach and create a detailed plan before implementing the solution. Make sure to handle any possible exceptions or edge cases in your implementation.","solution":"def uniquePaths(m, n): Calculates the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, where you can only move down or right. # Create a 2D DP array with (m x n) dimensions dp = [[1] * n for _ in range(m)] # Fill the DP table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right corner cell holds the number of unique paths return dp[m - 1][n - 1] # Time complexity: O(m * n) because we fill an m x n grid. # Space complexity: O(m * n) because we use an m x n DP array to store intermediate results."},{"question":"Write a Python function that takes a list of numbers and an integer `k`, and returns a list of the `k` largest numbers from the original list in descending order. Your function should be efficient, preferably with a time complexity better than O(n^2). Include necessary error handling for edge cases such as when `k` is greater than the length of the list.","solution":"import heapq def k_largest_numbers(arr, k): Returns a list of the k largest numbers from the original list in descending order. if k > len(arr): raise ValueError(\\"k cannot be greater than the length of the list\\") if k == 0: return [] # Use a min-heap to keep track of the k largest elements heap = heapq.nlargest(k, arr) # Convert the heap to a list and sort it in descending order return sorted(heap, reverse=True)"},{"question":"Implement a function that takes a list of integers representing daily temperatures over a month. The function should return the number of days where the temperature was higher than the previous day. temperatures = [70, 72, 68, 73, 75, 71, 69, 74, 76, 77]","solution":"def count_increase_days(temperatures): Returns the number of days where the temperature was higher than the previous day. :param temperatures: List of daily temperatures over a month. :type temperatures: list of int :return: Number of days with temperature higher than the previous day. :rtype: int count = 0 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i-1]: count += 1 return count"},{"question":"You\'ve been provided an incomplete function that takes a list of integers and returns a new list consisting of only the odd numbers, each multiplied by three. The original order of the numbers must be preserved. Finish the implementation of this function. ```python def process_numbers(numbers): Given a list of integers, return a new list consisting of only the odd numbers, each multiplied by three. Parameters: numbers (list of int): A list of integers. Returns: list of int: A list of odd numbers each multiplied by three. result = [] # Your code here return result ``` # Example ```python # Example 1 input_list = [1, 2, 3, 4, 5] # Output: [3, 9, 15] # Example 2 input_list = [10, 13, 19, 20] # Output: [39, 57] # Example 3 input_list = [] # Output: [] ``` # Constraints - The input list can contain up to `10^4` integers. - Each integer in the input list is between `-10^6` to `10^6`. Write your implementation of the `process_numbers` function below.","solution":"def process_numbers(numbers): Given a list of integers, return a new list consisting of only the odd numbers, each multiplied by three. Parameters: numbers (list of int): A list of integers. Returns: list of int: A list of odd numbers each multiplied by three. return [num * 3 for num in numbers if num % 2 != 0]"},{"question":"Write a Python function that takes a string containing a sentence and returns a dictionary with the count of each word in the sentence. The function should ignore case and punctuation. For example, given the string \\"Hello, hello world! Hello world.\\", the function should return {\'hello\': 3, \'world\': 2}. Use the following sentence for testing: \\"This is a test. This test is only a test.\\".","solution":"import re from collections import Counter def word_count(sentence): Returns a dictionary with the count of each word in the sentence. The function ignores case and punctuation. # Remove punctuation using regex and convert to lower case clean_sentence = re.sub(r\'[^ws]\', \'\', sentence).lower() # Split the sentence into words words = clean_sentence.split() # Use Counter to count the occurrences of each word return dict(Counter(words))"},{"question":"Design a Python class `Rectangle` that models a rectangle by storing its width and height. The class should include methods to: - Initialize the rectangle with a given width and height. - Calculate and return the area of the rectangle. - Calculate and return the perimeter of the rectangle. - Check if another rectangle is equal to the current rectangle based on the width and height. - Determine if the current rectangle can fit inside another rectangle, meaning both width and height of the current rectangle must be less than or equal to those of the other rectangle. Include error handling to manage invalid inputs (like negative values for width or height). Demonstrate the functionality of the class with appropriate test cases, showing examples of each method being used. Provide an explanation of OOP concepts such as encapsulation and how it is used in this example, and discuss the importance of these concepts in creating modular and maintainable code.","solution":"class Rectangle: Models a rectangle with width and height. def __init__(self, width, height): if width < 0 or height < 0: raise ValueError(\\"Width and height must be non-negative.\\") self.width = width self.height = height def area(self): Returns the area of the rectangle. return self.width * self.height def perimeter(self): Returns the perimeter of the rectangle. return 2 * (self.width + self.height) def is_equal(self, other): Checks if another rectangle is equal to the current rectangle based on width and height. return self.width == other.width and self.height == other.height def can_fit_inside(self, other): Determines if the current rectangle can fit inside another rectangle. return self.width <= other.width and self.height <= other.height # Example Explanation: # Encapsulation is practiced by restricting direct access to the attributes of the class (like width and height) # and allowing modifications only through methods. This concept ensures that the internal representation of the # object can be changed without altering the interface communicated between the object and the rest of the program. # Encapsulation increases modularity by making sure that each object\'s internal state (width and height) # can be modified without affecting other parts of the program. It helps create maintainable code by # enforcing that all interactions go through well-defined interfaces (methods)."},{"question":"Write a function `unique_pairs_with_sum(nums, target)` that takes an array of integers `nums` and an integer `target`, and returns a list of unique pairs of integers from the array that sum up to `target`. Each pair should be represented as a tuple `(a, b)` and should be sorted in increasing order (i.e., `a < b`). The list of pairs should also be sorted in increasing order based on the first element of the pair, and then the second element. If no such pairs exist, return an empty list. # Function Signature ```python def unique_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: pass ``` # Example ```python # Example 1: nums = [1, 2, 3, 4, 6, 2] target = 5 # Explanation: The pairs that sum up to 5 are (1, 4) and (2, 3). # The result should be [(1, 4), (2, 3)]. print(unique_pairs_with_sum(nums, target)) # Output: [(1, 4), (2, 3)] # Example 2: nums = [3, 2, 3, 7, 7, 9, 1] target = 10 # Explanation: The pairs that sum up to 10 are (3, 7) and (1, 9). # The pair (3, 7) occurs twice but should only appear once in the output. # The result should be [(1, 9), (3, 7)]. print(unique_pairs_with_sum(nums, target)) # Output: [(1, 9), (3, 7)] # Example 3: nums = [1, 1, 1, 1] target = 2 # Explanation: The pair that sums up to 2 is (1, 1), but should only appear once in the output. # The result should be [(1, 1)]. print(unique_pairs_with_sum(nums, target)) # Output: [(1, 1)] ``` # Constraints - The input list `nums` may contain duplicate elements. - The input list `nums` has at least one element and at most 1000 elements. - Each element in `nums` is an integer ranging from -1000 to 1000. - The target is an integer ranging from -2000 to 2000.","solution":"from typing import List, Tuple def unique_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(list(pairs))"},{"question":"Write a Python function that determines if a given string is a palindrome. A palindrome is a string that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Additionally, in the provided erroneous code below, a minor mistake has been made. Find the mistake, debug the code, and then add on the feature to ignore spaces, punctuation, and capitalization. ```python def incorrect_is_palindrome(s): s = s.replace(\\" \\", \\"\\").lower() return s == s[::-1] # Testing the function print(incorrect_is_palindrome(\\"A man a plan a canal Panama\\")) print(incorrect_is_palindrome(\\"Hello\\")) ``` Remember, punctuation can be removed by using string translate with the punctuation attribute from the string module and lowercase conversion can be done using the lower method. Please submit both the corrected code and the modified code as your final answer.","solution":"import string def is_palindrome(s): Determines if the provided string is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. # Remove punctuation, spaces, and convert to lowercase s = s.lower().translate(str.maketrans(\'\', \'\', string.punctuation)).replace(\\" \\", \\"\\") return s == s[::-1]"},{"question":"Design an algorithm to simulate a simplified version of a basic blackjack game using Python. In this game, the player and the dealer each receive two cards initially. The player can choose to \\"hit\\" to receive another card or \\"stand\\" to keep their current hand. The goal is to have the highest hand value without exceeding 21. The dealer must hit until their total is 17 or higher. Use a standard deck of 52 cards where face cards are worth 10 points and aces can be worth 1 or 11 points. Implement the following: 1. A function to shuffle and deal cards. 2. A function to calculate the value of a hand. 3. A main game loop that handles player and dealer actions and determines the winner.","solution":"import random # Function to shuffle and deal cards def shuffle_and_deal(): Shuffles the deck and deals the initial two cards for player and dealer. Returns: deck (list): Remaining cards in the deck. player_hand (list): Cards in player\'s hand. dealer_hand (list): Cards in dealer\'s hand. deck = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] * 4 random.shuffle(deck) player_hand = [deck.pop(), deck.pop()] dealer_hand = [deck.pop(), deck.pop()] return deck, player_hand, dealer_hand # Function to calculate the value of a hand def calculate_hand_value(hand): Calculates the value of a given hand of cards. Args: hand (list): Cards in the hand. Returns: int: Total value of the hand. value = 0 aces = 0 for card in hand: if card.isdigit(): value += int(card) elif card in \'JQK\': value += 10 elif card == \'A\': aces += 1 value += 11 while value > 21 and aces: value -= 10 aces -= 1 return value # Main game loop def blackjack(): Simulates a blackjack game. deck, player_hand, dealer_hand = shuffle_and_deal() print(f\\"Player\'s hand: {player_hand}\\") print(f\\"Dealer\'s hand: {dealer_hand[0]}, ?\\") while calculate_hand_value(player_hand) < 21: action = input(\\"Do you want to \'hit\' or \'stand\'? \\").lower() if action == \'hit\': player_hand.append(deck.pop()) print(f\\"Player\'s hand: {player_hand}\\") elif action == \'stand\': break player_value = calculate_hand_value(player_hand) if player_value > 21: print(f\\"Player busted with {player_value}. Dealer wins!\\") return print(f\\"Dealer\'s hand: {dealer_hand}\\") while calculate_hand_value(dealer_hand) < 17: dealer_hand.append(deck.pop()) print(f\\"Dealer\'s hand: {dealer_hand}\\") dealer_value = calculate_hand_value(dealer_hand) if dealer_value > 21: print(f\\"Dealer busted with {dealer_value}. Player wins!\\") elif player_value > dealer_value: print(f\\"Player wins with {player_value} against dealer\'s {dealer_value}!\\") elif dealer_value > player_value: print(f\\"Dealer wins with {dealer_value} against player\'s {player_value}!\\") else: print(\\"It\'s a tie!\\")"},{"question":"Write a function that takes an array of integers as input and returns the length of the longest subarray that forms an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. For example, in the array [1, 3, 5, 7, 9], the longest subarray that forms an arithmetic progression is the whole array itself.","solution":"def longest_arith_seq_length(arr): if len(arr) < 2: return len(arr) dp = [{} for _ in range(len(arr))] max_len = 2 for i in range(len(arr)): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len"},{"question":"Given an integer array, write a Python program to perform the following: 1. Identify and print the subarray with the maximum sum. If there is more than one subarray with the maximum sum, return the one with the smallest starting index. 2. Output the sum of the identified subarray. Example: Input: [1, -2, 3, 4, -1, 2, 1, -5, 4] Output: Subarray with maximum sum: [3, 4, -1, 2, 1] Maximum sum: 9","solution":"def max_subarray(nums): Finds the subarray with the maximum sum and returns the subarray and its sum. if not nums: return [], 0 max_sum = current_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return nums[start:end+1], max_sum"},{"question":"Create a function in Python that takes a list of integers and returns a new list containing only the unique absolute values from the original list, in the same order they first appeared. Ensure that the function handles an empty list and lists with negative numbers appropriately.","solution":"def unique_abs_values(lst): Takes a list of integers and returns a new list with unique absolute values. Parameters: lst (list): A list of integers Returns: list: A list with unique absolute values in the same order they first appeared. seen = set() result = [] for num in lst: abs_num = abs(num) if abs_num not in seen: seen.add(abs_num) result.append(num) return result"},{"question":"Write a Python function that takes a list of integers and returns a list of all prime numbers found in the input list. The function should handle exceptions for non-integer elements and negative integer values by raising appropriate errors. def find_prime_numbers(nums: List[Union[int, Any]]) -> List[int]: Return a list of all prime numbers from the input list while handling exceptions. >>> find_prime_numbers([3, \'a\', 4]) Error >>> find_prime_numbers([2, 13, -7, 4]) [2, 13]","solution":"from typing import List, Union, Any def find_prime_numbers(nums: List[Union[int, Any]]) -> List[int]: Return a list of all prime numbers from the input list while handling exceptions. Raises a ValueError if any non-integer or negative integer is found in the list. def is_prime(n: int) -> bool: if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True primes = [] for num in nums: if not isinstance(num, int): raise ValueError(\\"Input contains non-integer element(s).\\") if num < 0: raise ValueError(\\"Input contains negative integer value(s).\\") if is_prime(num): primes.append(num) return primes"},{"question":"Create a Python function that performs case-insensitive anagram detection. The function should take two strings as input and return `True` if one string is an anagram of the other, ignoring case distinctions, and `False` otherwise. Note that the function should ignore spaces, punctuation, and any special characters (consider only alphanumeric characters). For example, the strings \\"Astronomer\\" and \\"Moon starer\\", as well as \\"William Shakespeare\\" and \\"I am a weakish speller\\", should be considered anagrams.","solution":"import re def is_anagram(str1, str2): Returns True if str1 and str2 are anagrams of each other, ignoring case, spaces, and special characters. Otherwise, returns False. # Normalize the strings: remove non-alphanumeric characters, convert to lower case normalized_str1 = re.sub(r\'[^a-zA-Z0-9]\', \'\', str1).lower() normalized_str2 = re.sub(r\'[^a-zA-Z0-9]\', \'\', str2).lower() # Check if the sorted characters of both strings are equal return sorted(normalized_str1) == sorted(normalized_str2)"},{"question":"Write a function that takes an array of integers and a target integer as input. The function should return a list of all unique quadruplets [a, b, c, d] from the given array such that a + b + c + d equals the target value. You should ensure that the returned quadruplets are sorted in non-decreasing order, and the list of quadruplets itself should also be in non-decreasing order. If no such quadruplets exist, return an empty list. Provide a solution with a time complexity that is optimal for this type of problem.","solution":"def four_sum(nums, target): Finds all unique quadruplets in the array which gives the sum of target. Args: nums : List[int] -- list of integers target : int -- target integer Returns: List[List[int]] -- list of quadruplets nums.sort() n = len(nums) quadruplets = [] for i in range(n): if i > 0 and nums[i] == nums[i-1]: continue for j in range(i+1, n): if j > i + 1 and nums[j] == nums[j-1]: continue left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Write a function called `reverse_string_preserve_case` that takes a single string as input and returns a new string where the order of characters is reversed, but each character maintains its original case. For example, `reverse_string_preserve_case(\'Hello World!\')` should return `\'!DLROw OLLEh\'`. Also, identify and explain the error in the following incorrect code snippet provided as reference: ```python def reverse_string_preserve_case(s): return s[::-1].swap_case() ``` Explanation:","solution":"def reverse_string_preserve_case(s): Returns a new string where the order of characters is reversed, but each character maintains its original case. return s[::-1]"},{"question":"Design an efficient function in Python to solve the following problem. **Problem Statement:** Given a string `s`, return the length of the longest substring of `s` that contains at most two distinct characters. **Example:** ``` Input: s = \\"eceba\\" Output: 3 Explanation: The substring is \\"ece\\" which its length is 3. ``` ``` Input: s = \\"ccaabbb\\" Output: 5 Explanation: The substring is \\"aabbb\\" which its length is 5. ``` **Constraints:** - The input string `s` consists of English letters. - 1 <= len(s) <= 10^4 **Notes:** - Your solution should optimize for time complexity. - If the string is empty, the length of the longest substring is considered to be 0.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters in the given string s. if not s: return 0 left = 0 max_length = 0 char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Implement a function `is_symmetric(matrix)` that takes a 2D list (matrix) as an input and returns `True` if the matrix is symmetric, otherwise returns `False`. A matrix is considered symmetric if it is equal to its transpose. The transpose of a matrix is formed by swapping the rows and columns of the matrix. **Input:** - A 2D list (matrix) where each sub-list represents a row of the matrix. **Output:** - Return `True` if the matrix is symmetric, otherwise `False`. **Example:** ```python matrix = [ [1, 2, 3], [2, 4, 5], [3, 5, 6] ] print(is_symmetric(matrix)) # Output: True matrix = [ [1, 0, 3], [0, 4, 5], [3, 5, 6] ] print(is_symmetric(matrix)) # Output: True matrix = [ [1, 0, 3], [2, 4, 5], [3, 5, 6] ] print(is_symmetric(matrix)) # Output: False ``` Ensure the function handles edge cases such as empty matrices and matrices with significantly different row and column lengths.","solution":"def is_symmetric(matrix): Checks if the given 2D list (matrix) is symmetric. A matrix is symmetric if it is equal to its transpose. if not matrix: return True # An empty matrix is considered symmetric rows = len(matrix) for i in range(rows): if len(matrix[i]) != rows: return False # Not a square matrix for j in range(i, rows): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a Python function that takes a string as input and returns the length of the longest substring that contains at most two distinct characters. If the input string is empty, the function should return 0. Examples: Input: \\"eceba\\" Output: 3 Explanation: The longest substring with at most two distinct characters is \\"ece\\" with length 3. Input: \\"ccaabbb\\" Output: 5 Explanation: The longest substring with at most two distinct characters is \\"aabbb\\" with length 5. Note: The function should be efficient with a time complexity of O(n), where n is the length of the input string.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring which contains at most two distinct characters. if not s: return 0 left = 0 max_length = 0 char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a Python function that accepts a string containing digits and letters, then rearranges the digits in non-decreasing order while leaving the letters in their original positions. The function should return the newly formed string. For example, given the input \\"a3d1v5b2\\", the output should be \\"a1d2v3b5\\".","solution":"def rearrange_string(s): Rearranges the digits in non-decreasing order while leaving the letters in their original positions. :param s: String containing digits and letters :return: Newly formed string with digits sorted digits = sorted([c for c in s if c.isdigit()]) digit_index = 0 result = [] for char in s: if char.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"Design a Python function that takes a list of strings and returns a dictionary. The dictionary should map each character to a list of indices where that character appears in the string list. Ensure the function handles both uppercase and lowercase characters separately: def char_indices(strings: list): Maps each character in the list of strings to a list of indices where that character appears. :param strings: A list of strings. :return: A dictionary with characters as keys and lists of indices as values. >>> char_indices([\\"apple\\", \\"banana\\", \\"carrot\\"]) {\'a\': [0, 1, 4, 6, 10], \'p\': [1, 2], \'l\': [3], \'e\': [4], \'b\': [0], \'n\': [2, 3, 5], \'c\': [0], \'r\': [3, 5], \'o\': [4, 7], \'t\': [5, 8]}","solution":"def char_indices(strings): Maps each character in the list of strings to a list of indices where that character appears. :param strings: A list of strings. :return: A dictionary with characters as keys and lists of indices as values. char_map = {} for i, s in enumerate(strings): for j, char in enumerate(s): if char not in char_map: char_map[char] = [] char_map[char].append((i, j)) return char_map"},{"question":"Implement a k-means clustering algorithm to segment customers into distinct groups based on their purchase history. Your dataset contains various features representing customers\' buying behavior. Begin by determining an optimal number of clusters using techniques such as the Elbow method or Silhouette score. Ensure that you normalize the data before applying the k-means algorithm. Handle any outliers appropriately and describe the impact they might have on your clustering results. Once you have identified the optimal number of clusters, interpret the characteristics of each cluster, and present your findings using visualizations. Finally, discuss the practical implications of your clustering results for a retail business looking to enhance its marketing strategies.","solution":"import numpy as np import pandas as pd from sklearn.cluster import KMeans from sklearn.preprocessing import StandardScaler from sklearn.metrics import silhouette_score import matplotlib.pyplot as plt def kmeans_clustering(data, max_clusters=10): Perform K-means clustering on the provided dataset. Parameters: data (pd.DataFrame): customer purchase history data. max_clusters (int): maximum number of clusters to try for the Elbow method. Returns: tuple: fitted kmeans model, scaling object and the optimal number of clusters. # Normalize the data scaler = StandardScaler() normalized_data = scaler.fit_transform(data) # Determine the optimal number of clusters using the Elbow Method wcss = [] # within-cluster sum of squares silhouette_scores = [] for i in range(2, max_clusters + 1): kmeans = KMeans(n_clusters=i, random_state=42) kmeans.fit(normalized_data) wcss.append(kmeans.inertia_) silhouette_scores.append(silhouette_score(normalized_data, kmeans.labels_)) # Find the elbow point (optional: using Silhouette score to double check) optimal_clusters = np.argmax(silhouette_scores) + 2 # Plot the Elbow Method graph plt.figure(figsize=(12, 6)) plt.plot(range(2, max_clusters + 1), wcss, marker=\'o\') plt.title(\'Elbow Method\') plt.xlabel(\'Number of Clusters\') plt.ylabel(\'WCSS\') plt.show() # Silhouette Scores Plot plt.figure(figsize=(12, 6)) plt.plot(range(2, max_clusters + 1), silhouette_scores, marker=\'o\') plt.title(\'Silhouette Scores\') plt.xlabel(\'Number of Clusters\') plt.ylabel(\'Silhouette Score\') plt.show() # Perform final KMeans clustering with optimal clusters kmeans = KMeans(n_clusters=optimal_clusters, random_state=42) kmeans.fit(normalized_data) return kmeans, scaler, optimal_clusters def plot_clusters(data, kmeans, scaler): Plot the clusters from the K-means algorithm. Parameters: data (pd.DataFrame): customer purchase history data. kmeans (KMeans): fitted K-means model. scaler (StandardScaler): scaling object that was fit to the data. normalized_data = scaler.transform(data) labels = kmeans.labels_ plt.figure(figsize=(12, 6)) for i in range(kmeans.n_clusters): plt.scatter(data[labels == i].iloc[:, 0], data[labels == i].iloc[:, 1], label=f\'Cluster {i+1}\') plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c=\'red\', label=\'Centroids\') plt.title(\'Customer Segments\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.legend() plt.show() # Example usage: # data = pd.read_csv(\'purchase_history.csv\') # kmeans, scaler, optimal_clusters = kmeans_clustering(data) # plot_clusters(data, kmeans, scaler) # Practical implications: # Retail businesses can use these segments to tailor marketing strategies, design personalized offers, manage inventory better, and improve customer retention."},{"question":"Write a function called `reverse_words` that takes a single string as an argument, which contains a sentence of words separated by spaces. The function should return a new string with the words in reverse order, but each word itself must remain in the original form. Example: ``` reverse_words(\\"The quick brown fox\\") ``` should return: ``` \\"fox brown quick The\\" ```","solution":"def reverse_words(sentence): Reverses the order of words in the given sentence. Args: sentence (str): The input sentence to reverse the words of. Returns: str: A new sentence with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Write a function that takes a list of integers and a target sum, and returns all unique triplets (three numbers) in the list that add up to the target sum. The solution should avoid duplicate triplets. Example: ```python nums = [1, 0, -1, 2, -1, -4] target_sum = 0 ``` Expected Output: ```python [ [-1, 0, 1], [-1, -1, 2] ] ``` Note: The order of the triplets in the output list does not matter, and ensure that the solution is optimized for efficiency.","solution":"def three_sum(nums, target_sum): Returns a list of all unique triplets in nums that add up to target_sum. nums.sort() result = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target_sum: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target_sum: left += 1 else: right -= 1 return result"},{"question":"Write a Python Program that takes a string as input and returns a new string with all the vowels removed.","solution":"def remove_vowels(input_string): Returns a new string with all vowels removed from the input string. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in input_string if char not in vowels)"},{"question":"Given a binary tree, return the level order traversal of its nodes\' values. (i.e., from left to right, level by level). **Example:** ``` Input: [3, 9, 20, null, null, 15, 7] 3 / 9 20 / 15 7 Output: [[3], [9, 20], [15, 7]] ``` **Note:** You may assume that the binary tree only contains integer values. **Constraints:** - The number of nodes in the tree is in the range [0, 2000]. - -1000 <= Node.val <= 1000 **Hint:** Make use of a queue structure to facilitate level-order traversal.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): Perform a level order traversal on a binary tree and return the values of the nodes level by level. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"Write a Python function that takes in a list of integers, sorts the list without using built-in sort functions, and returns the sorted list. Ensure your function handles both positive and negative integers. list_of_integers = [3, -1, 2, 10, -4, 0]","solution":"def sort_list_of_integers(lst): Sorts a list of integers without using built-in sort functions. for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] > lst[j]: lst[i], lst[j] = lst[j], lst[i] return lst"},{"question":"Write a function that takes in a list of tuples where each tuple contains the name of a student and their score in a test. The function should create a bar plot using matplotlib to visualize the scores of the students. Additionally, add a horizontal line displaying the average score across all students. Each bar should be labeled with the student\'s name on the x-axis, and the y-axis should represent their scores. Provide appropriate titles and labels for the plot. ```python import matplotlib.pyplot as plt import numpy as np def plot_student_scores(student_scores): names, scores = zip(*student_scores) # Create the bar plot plt.figure(figsize=(10, 6)) plt.bar(names, scores, color=\'skyblue\') # Compute and plot the average score line avg_score = np.mean(scores) plt.axhline(avg_score, color=\'red\', linestyle=\'dashed\', linewidth=2, label=f\'Average Score: {avg_score:.2f}\') # Add titles and labels plt.title(\'Student Test Scores\') plt.xlabel(\'Students\') plt.ylabel(\'Scores\') plt.legend() # Show the plot plt.show() # Example usage student_scores = [(\'Alice\', 78), (\'Bob\', 95), (\'Charlie\', 88), (\'David\', 62), (\'Eva\', 85)] plot_student_scores(student_scores) ```","solution":"import matplotlib.pyplot as plt import numpy as np def plot_student_scores(student_scores): Plots a bar chart of student test scores and adds a horizontal line representing the average score. Parameters: student_scores (list of tuples): A list where each tuple contains the name of a student and their score. Example: student_scores = [(\'Alice\', 78), (\'Bob\', 95), (\'Charlie\', 88), (\'David\', 62), (\'Eva\', 85)] plot_student_scores(student_scores) names, scores = zip(*student_scores) # Create the bar plot plt.figure(figsize=(10, 6)) plt.bar(names, scores, color=\'skyblue\') # Compute and plot the average score line avg_score = np.mean(scores) plt.axhline(avg_score, color=\'red\', linestyle=\'dashed\', linewidth=2, label=f\'Average Score: {avg_score:.2f}\') # Add titles and labels plt.title(\'Student Test Scores\') plt.xlabel(\'Students\') plt.ylabel(\'Scores\') plt.legend() # Show the plot plt.show()"},{"question":"Create a Python function to determine if a given string is a valid palindrome and ignores any non-alphanumeric characters and is case-insensitive. Your function should pass various test cases, including empty strings, strings with only non-alphanumeric characters, and strings that are palindromes despite the presence of spaces and different cases. Write and explain the function, and provide a few example inputs along with the expected outputs to demonstrate the correct functionality. Consider the string `\\"A man, a plan, a canal: Panama\\"` as one of your test cases and show how your implementation processes this input. ```python def is_palindrome(s: str) -> bool: # Your implementation here pass # Example usage print(is_palindrome(\\"\\")) # Expected output: True print(is_palindrome(\\"race a car\\")) # Expected output: False print(is_palindrome(\\"A man, a plan, a canal: Panama\\")) # Expected output: True ``` Additionally, describe the computational complexity of your solution, and discuss any trade-offs you made between performance and readability.","solution":"def is_palindrome(s: str) -> bool: Determines if the given string is a valid palindrome, ignoring non-alphanumeric characters and case insensitive. :param s: input string :return: True if string is a valid palindrome, False otherwise clean_s = \'\'.join(char.lower() for char in s if char.isalnum()) return clean_s == clean_s[::-1]"},{"question":"Write a function that takes a list of strings and returns a dictionary where the keys are the lengths of the strings and the values are lists of strings that have that length. Ensure that all strings in the output dictionary are sorted alphabetically.","solution":"def group_strings_by_length(strings): Groups strings by their length and sorts each group alphabetically. Args: strings (list of str): List of strings to be grouped. Returns: dict: A dictionary where keys are lengths of strings and values are lists of strings sorted alphabetically. from collections import defaultdict length_dict = defaultdict(list) for string in strings: length_dict[len(string)].append(string) # Sort each list alphabetically for length in length_dict: length_dict[length].sort() return dict(length_dict)"},{"question":"Write a Python function that reads a text file and counts the frequency of each word in the file. The function should print the 10 most common words along with their frequencies in descending order of frequency. Additionally, plot a bar chart showing the frequencies of these words using the matplotlib library. Make sure your function handles punctuation and different cases appropriately (e.g., \\"Hello\\" and \\"hello\\" should be counted as the same word).","solution":"import string from collections import Counter import matplotlib.pyplot as plt def word_frequency_and_plot(file_path): Reads a text file and counts the frequency of each word in the file. Prints the 10 most common words along with their frequencies in descending order of frequency. Plots a bar chart showing the frequencies of these words using matplotlib. Parameters: file_path (str): Path to the text file. Returns: List of tuples containing the 10 most common words and their frequencies. with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() # Remove punctuation and convert to lowercase text = text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() words = text.split() word_count = Counter(words) # Get the 10 most common words common_words = word_count.most_common(10) # Print the 10 most common words and their frequencies for word, freq in common_words: print(f\\"{word}: {freq}\\") # Plot the bar chart words, frequencies = zip(*common_words) plt.figure(figsize=(10, 5)) plt.bar(words, frequencies, color=\'blue\') plt.xlabel(\'Words\') plt.ylabel(\'Frequency\') plt.title(\'Top 10 Most Common Words\') plt.show() return common_words"},{"question":"Design a function that calculates the mode of a list of integers. The mode is the integer that appears most frequently. If there are multiple modes, return the smallest one. Ensure your function handles both positive and negative integers as well as empty input lists gracefully. Examples: - Input: [1, 2, 2, 3, 3, 4] Output: 2 - Input: [4, 6, 2, 2, 3, 4, 4, 3] Output: 4 - Input: [-1, -1, -2, -2, -3] Output: -2","solution":"from collections import Counter from typing import List def mode(numbers: List[int]) -> int: Calculate the mode of a list of integers. If there are multiple modes, return the smallest one. If the list is empty, return None. if not numbers: return None frequency = Counter(numbers) mode_value, mode_count = min(frequency.items(), key=lambda x: (-x[1], x[0])) return mode_value"},{"question":"Design a Python function to translate an input plaintext phrase to Morse code. For this task, use the following mapping of letters and digits to Morse code: A: .- B: -... C: -.-. D: -.. E: . F: ..-. G: --. H: .... I: .. J: .--- K: -.- L: .-.. M: -- N: -. O: --- P: .--. Q: --.- R: .-. S: ... T: - U: ..- V: ...- W: .-- X: -..- Y: -.-- Z: --.. 0: ----- 1: .---- 2: ..--- 3: ...-- 4: ....- 5: ..... 6: -.... 7: --... 8: ---.. 9: ----. The function should conform to these specifics: 1. Non-alphanumeric characters (including spaces) are not encoded and should be replaced by a forward slash ( / ) in the output. 2. Each encoded character should be separated by a single space. 3. The function should be case insensitive (i.e., both \'a\' and \'A\' should be encoded as .-). **Example Input:** plaintext = \\"Hello World 123\\" **Example Output:** .... . .-.. .-.. --- / .-- --- .-. .-.. -.. / .---- ..--- ...-- Write the function `translate_to_morse(plaintext)` to accomplish the described translation.","solution":"def translate_to_morse(plaintext): Translate the given plaintext string to Morse code. Parameters: plaintext (str): The input plaintext string to be translated. Returns: str: The translated Morse code. morse_code_dict = {} translated = [] for char in plaintext.upper(): if char in morse_code_dict: translated.append(morse_code_dict[char]) else: translated.append(\'/\') return \' \'.join(translated)"},{"question":"Implement a function in Python that takes a list of integers and returns a new list containing only the prime numbers from the original list. Your function should check each element of the list and use an efficient algorithm to determine if an element is prime. Ensure your solution handles edge cases, such as an empty list or a list without any prime numbers. Write a Python function `find_primes(numbers: List[int]) -> List[int]` where: - `numbers` is a list of integers. - The function returns a list of integers containing only the prime numbers from the `numbers` list. Example: ```python def find_primes(numbers): # Your implementation here # Test cases print(find_primes([2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: [2, 3, 5, 7] print(find_primes([11, 13, 17, 19, 23, 29, 30])) # Output: [11, 13, 17, 19, 23, 29] print(find_primes([0, 1, 14, 15, 16, 18, 20])) # Output: [] ```","solution":"from typing import List def is_prime(number: int) -> bool: Check if the given number is a prime number. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def find_primes(numbers: List[int]) -> List[int]: Returns a list of prime numbers from the given list. return [number for number in numbers if is_prime(number)]"},{"question":"Write a Python function that when given a dictionary, returns a new dictionary with the keys and values swapped. If the original dictionary has duplicate values, only one of the corresponding keys will be kept in the new dictionary. ```python # Sample Input dict1 = {\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 2} # Expected Output # {\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 2} # Result: {1: \'a\', 2: \'d\', 3: \'c\'} ```","solution":"def swap_dict_keys_values(d): Returns a new dictionary with the keys and values swapped. If the original dictionary has duplicate values, only one of the corresponding keys will be kept in the new dictionary. return {v: k for k, v in d.items()}"},{"question":"Given a grid of letters and a word, write a function that checks if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Implement the function: ```python def word_search(grid: List[List[str]], word: str) -> bool: Given a grid of letters and a word, return True if the word exists in the grid, otherwise return False. The word can be constructed from sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Examples: >>> word_search([ ... [\'A\', \'B\', \'C\', \'E\'], ... [\'S\', \'F\', \'C\', \'S\'], ... [\'A\', \'D\', \'E\', \'E\'] ... ], \\"ABCCED\\") True >>> word_search([ ... [\'A\', \'B\', \'C\', \'E\'], ... [\'S\', \'F\', \'C\', \'S\'], ... [\'A\', \'D\', \'E\', \'E\'] ... ], \\"SEE\\") True >>> word_search([ ... [\'A\', \'B\', \'C\', \'E\'], ... [\'S\', \'F\', \'C\', \'S\'], ... [\'A\', \'D\', \'E\', \'E\'] ... ], \\"ABCB\\") False # Implement your code here. ```","solution":"from typing import List def word_search(grid: List[List[str]], word: str) -> bool: Given a grid of letters and a word, return True if the word exists in the grid, otherwise return False. The word can be constructed from sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. ROWS, COLS = len(grid), len(grid[0]) def dfs(r, c, i): if i == len(word): return True if r < 0 or c < 0 or r >= ROWS or c >= COLS or word[i] != grid[r][c]: return False temp = grid[r][c] grid[r][c] = \\"#\\" found = (dfs(r+1, c, i+1) or dfs(r-1, c, i+1) or dfs(r, c+1, i+1) or dfs(r, c-1, i+1)) grid[r][c] = temp return found for r in range(ROWS): for c in range(COLS): if grid[r][c] == word[0] and dfs(r, c, 0): return True return False"},{"question":"Implement a function that takes three inputs: a list of integers `arr`, a target integer `K`, and an integer `N` representing the number of elements in the list. Your task is to determine if there exists a subset of `arr` of size exactly `N` such that the sum of its elements is exactly `K`. If such a subset exists, return a list of these elements; otherwise, return an empty list. Additionally, analyze and provide the time complexity and space complexity of your solution, and justify your approach. ```python def subset_sum(arr, K, N): Determine if there exists a subset in `arr` of size exactly `N` that sums up to `K`. Parameters: arr (List[int]): The input list of integers. K (int): Target sum of the subset. N (int): The number of elements in the subset. Returns: List[int]: A list of elements in the subset if it exists, otherwise an empty list. # Implementation here ``` **Example:** ```python print(subset_sum([1, 2, 3, 4, 5], 10, 3)) # Output: [1, 4, 5] or any other valid subset that sums to 10 with exactly 3 elements print(subset_sum([1, 2, 3, 4, 5], 16, 3)) # Output: [] ``` **Constraints:** - Each element in `arr` is a positive integer. - The length of `arr` is at most 20. - `K` and `N` are positive integers.","solution":"def subset_sum(arr, K, N): Determine if there exists a subset in `arr` of size exactly `N` that sums up to `K`. Parameters: arr (List[int]): The input list of integers. K (int): Target sum of the subset. N (int): The number of elements in the subset. Returns: List[int]: A list of elements in the subset if it exists, otherwise an empty list. from itertools import combinations # Generate all combinations of arr of size N for comb in combinations(arr, N): if sum(comb) == K: return list(comb) return []"},{"question":"Write a Python function that checks whether a given string is a valid arithmetic expression containing only integers, parentheses, and the operators +, -, *, and /. The function should return a boolean indicating the validity of the expression. Ensure that the function takes into consideration proper usage of parentheses and correct operator placements (e.g., no two operators should be adjacent). Additionally, extend the function to return an error message if the expression contains invalid characters or incorrect syntax instead of just returning False. Examples: - \\"3 + (2 * 5) - 7\\" should return True - \\"(5 + 3) / (4 - 2))\\" should return False with error message: \\"Mismatched parentheses\\" - \\"10 * * 2\\" should return False with error message: \\"Consecutive operators\\" - \\"12 + 4a\\" should return False with error message: \\"Invalid character: a\\"","solution":"import re def is_valid_expression(expr): Checks if the given string is a valid arithmetic expression. # Remove spaces from the expression expr = expr.replace(\\" \\", \\"\\") # Define a regular expression for valid characters valid_char_regex = re.compile(r\'[^0-9+-*/()]\') # Check for invalid characters invalid_chars = valid_char_regex.findall(expr) if invalid_chars: return False, f\\"Invalid character(s): {\' \'.join(invalid_chars)}\\" # Check for mismatched parentheses open_parentheses = 0 for char in expr: if char == \\"(\\": open_parentheses += 1 elif char == \\")\\": open_parentheses -= 1 if open_parentheses < 0: return False, \\"Mismatched parentheses\\" if open_parentheses != 0: return False, \\"Mismatched parentheses\\" # Define a regular expression for invalid operator placements invalid_operator_regex = re.compile(r\'[+-*/]{2,}\') # Consecutive operators if invalid_operator_regex.search(expr): return False, \\"Consecutive operators\\" # Define a regular expression for invalid opening or closing parentheses placement invalid_parentheses_regex = re.compile(r\'()|(*|(/|(+(-|+*|/*-+)\') if invalid_parentheses_regex.search(expr): return False, \\"Improper parentheses usage or misplaced operators\\" return True, \\"\\""},{"question":"Write a function to merge two sorted arrays into a single sorted array. The function should take two input arrays of integers, which are already in non-decreasing order, and return a new array that contains all the elements from both input arrays, also in non-decreasing order. Ensure that your solution has a time complexity of O(n + m), where n and m are the sizes of the two input arrays.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. result = [] i, j = 0, 0 # Use two pointers to merge arrays while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Collect remaining elements from arr1 while i < len(arr1): result.append(arr1[i]) i += 1 # Collect remaining elements from arr2 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Develop a Python function that simulates a simplified stock trading system. The function should take an array of stock prices (representing the price of a single stock over consecutive days) and determine the maximum profit that could be achieved by making at most two transactions (a buy followed by a sell). Ensure that the second buy must occur after the first sell. Return the maximum profit. If no profit is possible, return 0.","solution":"def max_profit_with_two_transactions(prices): if not prices or len(prices) < 2: return 0 n = len(prices) # Initialize arrays for the maximum profit up to day i left_profits = [0] * n right_profits = [0] * n # Fill the left_profits array with maximum profit until each day min_price = prices[0] for i in range(1, n): left_profits[i] = max(left_profits[i-1], prices[i] - min_price) min_price = min(min_price, prices[i]) # Fill the right_profits array with maximum profit from each day to the end max_price = prices[-1] for i in range(n-2, -1, -1): right_profits[i] = max(right_profits[i+1], max_price - prices[i]) max_price = max(max_price, prices[i]) # Combine the profits to find the maximum profit with two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i]) return max_profit"},{"question":"Write a function to simulate a simple banking system. Your program should support the following operations: 1. `create_account(id, name, initial_balance)`: Creates a new account with a unique id, a user\'s name, and an initial balance. 2. `deposit(id, amount)`: Deposits a specified amount into the account with the given id. 3. `withdraw(id, amount)`: Withdraws a specified amount from the account with the given id. The operation should fail if the account has insufficient funds. 4. `transfer(sender_id, receiver_id, amount)`: Transfers a specified amount from the sender\'s account to the receiver\'s account. The operation should fail if the sender has insufficient funds. 5. `get_balance(id)`: Returns the current balance of the account with the given id. Your implementation should handle edge cases such as invalid account ids and transactions involving non-existent accounts. Write your solution in Python and demonstrate the functionality with an example usage of the banking system.","solution":"class BankingSystem: def __init__(self): self.accounts = {} def create_account(self, id, name, initial_balance): if id in self.accounts: raise ValueError(\\"Account with given id already exists\\") self.accounts[id] = {\'name\': name, \'balance\': initial_balance} def deposit(self, id, amount): if id not in self.accounts: raise ValueError(\\"Account with given id does not exist\\") if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.accounts[id][\'balance\'] += amount def withdraw(self, id, amount): if id not in self.accounts: raise ValueError(\\"Account with given id does not exist\\") if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if self.accounts[id][\'balance\'] < amount: raise ValueError(\\"Insufficient funds\\") self.accounts[id][\'balance\'] -= amount def transfer(self, sender_id, receiver_id, amount): if sender_id not in self.accounts: raise ValueError(\\"Sender account with given id does not exist\\") if receiver_id not in self.accounts: raise ValueError(\\"Receiver account with given id does not exist\\") if amount <= 0: raise ValueError(\\"Transfer amount must be positive\\") if self.accounts[sender_id][\'balance\'] < amount: raise ValueError(\\"Insufficient funds\\") self.accounts[sender_id][\'balance\'] -= amount self.accounts[receiver_id][\'balance\'] += amount def get_balance(self, id): if id not in self.accounts: raise ValueError(\\"Account with given id does not exist\\") return self.accounts[id][\'balance\']"},{"question":"Write a function that takes a list of integers and an integer `k`, and rearranges the list such that all numbers less than or equal to `k` come before numbers greater than `k`, without using the built-in `sort()` function or any other sorting functions. The relative ordering of the elements that are less than or equal to `k` and the elements greater than `k` should be preserved. # Example list = [10, 1, 15, 3, 7, 8, 12, 17, 2] k = 7 Expected output: [1, 3, 7, 10, 15, 8, 12, 17, 2]","solution":"def rearrange_list(nums, k): Rearranges the list such that all numbers less than or equal to k come before numbers greater than k, preserving the relative order of elements. Parameters: nums (list): List of integers. k (int): The pivot element. Returns: list: Rearranged list of integers. less_or_equal = [] greater = [] for num in nums: if num <= k: less_or_equal.append(num) else: greater.append(num) return less_or_equal + greater"},{"question":"Design and implement a Python class: `StringManipulator` that performs the following tasks: 1. Has a private string attribute. 2. Has a method `set_string(s)` to initialize the private string attribute where `s` is the argument. 3. A method `reverse` that returns the reverse of the private string attribute. 4. A method `format_string(case)` that first determines the string format based on the provided argument “case” with the following possible values: - \'Upper\': Convert the string to uppercase. - \'Lower\': Convert the string to lowercase. - \'Title\': Convert the string to title case. 5. A method `modify` that takes a list of indices and a character. Replace the characters in the private string attribute at the specified indices with the provided character. The final three methods `set_string`, `reverse`, and `format_string` should be invoked in that sequence inside another public method of the class named `execute_string_operations(case)` and should only execute if the provided `case` argument matches one of the possible values \'Upper\', \'Lower\' or \'Title\'. Additionally, validate the string modification from the `modify` method with appropriate test cases ensuring the indices are within the string length, and handle all edge cases such as invalid indices and empty input.","solution":"class StringManipulator: def __init__(self): self.__s = \\"\\" # private string attribute def set_string(self, s): self.__s = s def reverse(self): return self.__s[::-1] def format_string(self, case): if case == \'Upper\': return self.__s.upper() elif case == \'Lower\': return self.__s.lower() elif case == \'Title\': return self.__s.title() else: raise ValueError(f\\"Invalid case: {case}\\") def modify(self, indices, char): s_list = list(self.__s) for idx in indices: if 0 <= idx < len(self.__s): s_list[idx] = char else: raise IndexError(f\\"Index {idx} is out of range for the string of length {len(self.__s)}\\") self.__s = \\"\\".join(s_list) def execute_string_operations(self, case): valid_cases = [\'Upper\', \'Lower\', \'Title\'] if case in valid_cases: self.set_string(self.__s) # call to set_string reversed_string = self.reverse() # call to reverse formatted_string = self.format_string(case) # call to format_string return {\\"reversed\\": reversed_string, \\"formatted\\": formatted_string} else: raise ValueError(f\\"Case must be one of {valid_cases}\\")"},{"question":"Write a function that takes a string as input and checks whether all the characters in the string are unique. The function should be case-sensitive, meaning \'A\' and \'a\' should be considered different characters. Ignore any non-alphabetic characters and consider only letters from the English alphabet. For instance, \\"Hello, World!\\" should return False due to the repeated \'l\', while \\"Python3.8\\" should return True. Provide a comprehensive result indicating whether all characters are unique or not.","solution":"def is_unique_string(s): Check if all characters in the string are unique. Ignore non-alphabetic characters and be case-sensitive. Parameters: s (str): The input string to check. Returns: bool: True if all alphabetic characters in the string are unique, False otherwise. chars_seen = set() for char in s: if char.isalpha(): if char in chars_seen: return False chars_seen.add(char) return True"},{"question":"A transportation company wants to optimize its routes by finding the shortest path for delivering packages between multiple locations. Given a weighted, undirected graph where nodes represent locations and edges represent the travel time between them, write a program that finds the shortest path from a given start location to a target location using Dijkstra\'s algorithm. The graph data is provided as an adjacency list. Additionally, consider the following implementation of Dijkstra\'s algorithm, which contains logical errors. Your task is to identify and correct these errors and provide a correctly functioning implementation. ```python import heapq def dijkstra(graph, start, target): def relax(u, v, weight): if distances[v] > distances[u] + weight: distances[v] = distances[u] + weight predecessors[v] = u distances = {node: float(\'inf\') for node in graph} distances[start] = 0 predecessors = {node: None for node in graph} pq = [(0, start)] while pq: current_distance, u = heapq.heappop(pq) if current_distance > distances[u]: continue for neighbor, weight in graph[u]: relax(u, neighbor, weight) heapq.heappush(pq, (distances[neighbor], neighbor)) # Build the shortest path path = [] current_node = target while current_node is not None: path.append(current_node) current_node = predecessors[current_node] path = path[::-1] if distances[target] == float(\'inf\'): return [], float(\'inf\') # Return empty path and \\"infinite\\" distance if target is unreachable return path, distances[target] graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } start = \'A\' target = \'D\' shortest_path, distance = dijkstra(graph, start, target) print(f\'Shortest path: {shortest_path}, Distance: {distance}\') ``` Identify and correct the errors in the implementation. What corrections help in making this Dijkstra’s algorithm function correctly?","solution":"import heapq def dijkstra(graph, start, target): def relax(u, v, weight): if distances[v] > distances[u] + weight: distances[v] = distances[u] + weight predecessors[v] = u heapq.heappush(pq, (distances[v], v)) distances = {node: float(\'inf\') for node in graph} distances[start] = 0 predecessors = {node: None for node in graph} pq = [(0, start)] visited = set() while pq: current_distance, u = heapq.heappop(pq) if u in visited: continue visited.add(u) if u == target: break for neighbor, weight in graph[u]: if neighbor not in visited: relax(u, neighbor, weight) # Build the shortest path path = [] current_node = target while current_node is not None: path.append(current_node) current_node = predecessors[current_node] path = path[::-1] if distances[target] == float(\'inf\'): return [], float(\'inf\') # Return empty path and \\"infinite\\" distance if target is unreachable return path, distances[target] graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } start = \'A\' target = \'D\' shortest_path, distance = dijkstra(graph, start, target) print(f\'Shortest path: {shortest_path}, Distance: {distance}\')"},{"question":"Write a function `rotate_matrix` that takes an `n x n` matrix as input and returns the matrix rotated 90 degrees clockwise. The matrix is represented as a list of lists in Python, where each sub-list represents a row. # Example: ``` Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` # Constraints: - The function should handle matrices of size `1x1` and greater. - You may not use any external libraries or functions specifically designed to rotate matrices. - Focus on optimizing the solution for both time and space complexity. Write your function signature as `def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]:` and ensure it covers edge cases such as an empty matrix or matrix with varying row sizes.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates an n x n matrix 90 degrees clockwise. if not matrix or not matrix[0]: return matrix n = len(matrix) # Initialize the rotated matrix with the right dimensions rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a Python function that takes in a string and returns a dictionary. The dictionary should have the words from the string as keys and their respective frequencies as values. Ensure that the function is case-insensitive and handles punctuation marks appropriately by ignoring them. Here is an example showcasing how the function should behave: Input: ```python text = \\"Hello, World! Hello world.\\" ``` Output: ```python { \\"hello\\": 2, \\"world\\": 2 } ``` To assist in your implementation, consider the following erroneous function. Identify the issues and correct them in your final solution. ```python def word_count(text): words_list = text.split() # This would still include punctuation word_dict = {} for word in words_list: word = word.lower().strip() # Strip does not remove punctuation properly if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict ``` This existing function attempts to count word frequencies but does not correctly handle case sensitivity and punctuation marks.","solution":"import re from collections import Counter def word_count(text): Returns a dictionary with the frequency of each word in the given text. The function is case-insensitive and ignores punctuation. Args: text (str): The input string. Returns: dict: A dictionary with words as keys and their frequencies as values. # Convert text to lowercase and remove punctuation normalized_text = re.sub(r\'[^ws]\', \'\', text.lower()) words_list = normalized_text.split() word_dict = Counter(words_list) return dict(word_dict)"},{"question":"You are given a list of numbers where each value appears twice except for one value which appears only once. Write a program to find that unique number. Explain the process and logic used to identify the single element. Example: Input: [4, 1, 2, 1, 2] Output: 4","solution":"def find_single_number(nums): Returns the single number in a list where each value appears twice except for one. Args: nums (List[int]): A list of integers. Returns: int: The integer that appears only once in the list. unique = 0 for num in nums: unique ^= num # Using XOR operation to find the unique number return unique"},{"question":"Given a banking application, write a class that manages user accounts, allowing users to deposit, withdraw, and check their balance. The class should also enforce a daily withdrawal limit of 500. ``` class Account: def __init__(self, account_id, initial_balance=0): self.account_id = account_id self.balance = initial_balance self.daily_withdrawn = 0 self.withdrawal_limit = 500 def deposit(self, amount): if amount > 0: self.balance += amount return f\\"Deposited {amount}. Current balance is {self.balance}.\\" else: return \\"Deposit amount must be positive.\\" def withdraw(self, amount): if amount > 0: if self.daily_withdrawn + amount > self.withdrawal_limit: return \\"Withdrawal amount exceeds the daily limit of 500.\\" elif amount <= self.balance: self.balance -= amount self.daily_withdrawn += amount return f\\"Withdrew {amount}. Current balance is {self.balance}.\\" else: return \\"Insufficient balance to make this withdrawal.\\" else: return \\"Withdrawal amount must be positive.\\" def check_balance(self): return f\\"Current balance is {self.balance}.\\" def reset_daily_withdrawal(self): self.daily_withdrawn = 0 return \\"Daily withdrawal limit has been reset.\\" # Example usage: # account = Account(account_id=\\"12345\\", initial_balance=1000) # print(account.deposit(200)) # Deposited 200. Current balance is 1200. # print(account.withdraw(100)) # Withdrew 100. Current balance is 1100. # print(account.withdraw(450)) # Withdrew 450. Current balance is 650. # print(account.withdraw(50)) # Withdrawal amount exceeds the daily limit of 500. # print(account.check_balance()) # Current balance is 650. # print(account.reset_daily_withdrawal()) # Daily withdrawal limit has been reset. # print(account.withdraw(50)) # Withdrew 50. Current balance is 600. ``` In addition to writing the class, explain the key principles and practices involved in designing secure and efficient account management systems, particularly focusing on how to enforce transaction limits and handle errors gracefully.","solution":"class Account: def __init__(self, account_id, initial_balance=0): self.account_id = account_id self.balance = initial_balance self.daily_withdrawn = 0 self.withdrawal_limit = 500 def deposit(self, amount): if amount > 0: self.balance += amount return f\\"Deposited {amount}. Current balance is {self.balance}.\\" else: return \\"Deposit amount must be positive.\\" def withdraw(self, amount): if amount > 0: if self.daily_withdrawn + amount > self.withdrawal_limit: return \\"Withdrawal amount exceeds the daily limit of 500.\\" elif amount <= self.balance: self.balance -= amount self.daily_withdrawn += amount return f\\"Withdrew {amount}. Current balance is {self.balance}.\\" else: return \\"Insufficient balance to make this withdrawal.\\" else: return \\"Withdrawal amount must be positive.\\" def check_balance(self): return f\\"Current balance is {self.balance}.\\" def reset_daily_withdrawal(self): self.daily_withdrawn = 0 return \\"Daily withdrawal limit has been reset.\\""},{"question":"Write a function that accepts a list of integers and returns a new list containing all the elements of the original list but in reverse order. Do not use any built-in reverse functions or methods.","solution":"def reverse_list(lst): Returns a new list containing all elements of the original list but in reverse order. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"In Python, write a function that takes a list of integers and returns the smallest positive integer that is not present in the list. The function should handle possible duplicates and negative numbers in the list. Use an efficient algorithm to ensure the solution runs in linear time complexity, O(n). Do not use sorting or extra space proportional to the size of the list. Hint: You may use the properties of indices in the list to help track which integers have been encountered.","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer that is not present in the list. The function handles possible duplicates and negative numbers in the list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function to reverse the words in a given sentence while preserving the word order. For example, if the input string is \\"Hello World\\", the output should be \\"olleH dlroW\\". Assume the input only contains letters and spaces, and there is exactly one space between each word. Implement the solution without using any built-in string manipulation functions beyond basic iteration and indexing. Ensure the function handles large input efficiently.","solution":"def reverse_words(sentence): Reverse each word in the given sentence while preserving the word order. Parameters: sentence (str): The input sentence containing words separated by spaces. Returns: str: A new sentence with each word reversed but the order of the words preserved. def reverse_word(word): reversed_word = \'\' for char in word: reversed_word = char + reversed_word return reversed_word result = \'\' word = \'\' for char in sentence: if char == \' \': result += reverse_word(word) + \' \' word = \'\' else: word += char result += reverse_word(word) return result"},{"question":"Design a function that detects all unique anagram pairs within a given list of words. An anagram pair consists of two words that have the exact same characters but in a different order. The function should return a list of tuples, where each tuple consists of an anagram pair. Order of words in each pair and the order of pairs in the output list does not matter. The function should be case-insensitive. For example, for the list of words `[\\"listen\\", \\"silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"god\\", \\"dog\\"]`, your function would return `[(\\"listen\\", \\"silent\\"), (\\"listen\\", \\"enlist\\"), (\\"silent\\", \\"enlist\\"), (\\"rat\\", \\"tar\\"), (\\"god\\", \\"dog\\")]`. Here\'s a simple implementation that captures the structure and thinking process, but it might not completely solve the task correctly. Improve upon this to correctly store the anagram pairs in the list without duplicates and maintain uniqueness: ```python def find_anagram_pairs(words): words_lower = [word.lower() for word in words] anagram_pairs = [] for i in range(len(words_lower)): for j in range(i + 1, len(words_lower)): if sorted(words_lower[i]) == sorted(words_lower[j]): anagram_pairs.append((words[i], words[j])) return anagram_pairs # Example usage: # words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"god\\", \\"dog\\"] # print(find_anagram_pairs(words)) # Output should be: # [(\'listen\', \'silent\'), (\'listen\', \'enlist\'), (\'silent\', \'enlist\'), (\'rat\', \'tar\'), (\'god\', \'dog\')] ``` Ensure your improved function handles case insensitivity, does not return duplicate pairs, and correctly identifies unique anagram pairs.","solution":"def find_anagram_pairs(words): Returns a list of unique anagram pairs from the given list of words. Each pair is a tuple of two words that are anagrams of each other. from collections import defaultdict # Dictionary to store sorted characters as keys and words as values anagram_groups = defaultdict(list) # Populate the dictionary with lowercased, sorted versions of the words for word in words: sorted_word = \'\'.join(sorted(word.lower())) anagram_groups[sorted_word].append(word) # Generate the list of unique anagram pairs anagram_pairs = [] for group in anagram_groups.values(): for i in range(len(group)): for j in range(i + 1, len(group)): anagram_pairs.append((group[i], group[j])) return anagram_pairs"},{"question":"Discuss the utility and implementation of the \'divide and conquer\' strategy in algorithm design. Provide a detailed explanation of its theoretical foundations and illustrate its application with an example algorithm.","solution":"def merge_sort(arr): Sorts an array using the divide and conquer strategy known as Merge Sort. if len(arr) <= 1: return arr def merge(left, right): Merges two sorted arrays into one sorted array. result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right)"},{"question":"Write a function that takes a list of integers and returns the largest number possible by concatenating its elements. The function should return the number as a string. You are not allowed to use sorting. For example: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" Input: [10, 2] Output: \\"210\\"","solution":"def largest_concatenated_number(nums): Returns the largest concatenated number possible from the list elements. The number is returned as a string. def compare(a, b): Custom comparator for sorting in descending order based on concatenation. if a + b > b + a: return -1 else: return 1 from functools import cmp_to_key # Convert all numbers to strings str_nums = list(map(str, nums)) # Sort using the custom comparator sorted_nums = sorted(str_nums, key=cmp_to_key(compare)) # Combine into a single string and return return \'\'.join(sorted_nums)"},{"question":"You are given an integer array `arr` of size `n` and an integer `k`. Write a function that returns the maximum sum of a subarray with the length `k` from the array. The function should return 0 if `k` is greater than the length of the array. # Function Signature ```python def max_subarray_sum(arr: List[int], k: int) -> int: pass ``` # Input - `arr`: List of integers, the given array (1 ≤ `len(arr)` ≤ 10^5) - `k`: Integer, the length of the subarray (1 ≤ `k` ≤ 10^5) # Output - Integer, the maximum sum of a subarray with length `k` # Example ```python assert max_subarray_sum([1, 2, 3, 4, 5], 2) == 9 assert max_subarray_sum([3, -2, 5, -1], 3) == 6 assert max_subarray_sum([2, 1, 5, 1, 3, 2], 3) == 9 assert max_subarray_sum([1, 2, 3], 4) == 0 ``` # Note - Your solution should have a time complexity of O(n) to handle the upper constraint efficiently. - Consider using a sliding window approach for an optimal solution.","solution":"from typing import List def max_subarray_sum(arr: List[int], k: int) -> int: Returns the maximum sum of a subarray with the length k from arr. Returns 0 if k is greater than the length of the array. n = len(arr) if k > n: return 0 # Find initial window sum max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function that takes a list of integers as input and returns the length of the longest consecutive elements sequence. The sequence must be strictly increasing, meaning each element is exactly one greater than the previous one. Your function should return 0 if there is no such sequence. You may not sort the list or use any built-in sequence functions. For example, given the list `[100, 4, 200, 1, 3, 2]`, the function should return 4 because the longest consecutive elements sequence is `[1, 2, 3, 4]`.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in the list. The sequence must be strictly increasing, meaning each element is exactly one greater than the previous one. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: # Only check for the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Implement a function to generate the nth Fibonacci number. The Fibonacci sequence follows the formula: F(n) = F(n-1) + F(n-2), with initial values F(0) = 0 and F(1) = 1. Ensure your function runs efficiently for large values of n by utilizing memoization or an iterative approach.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"A company uses a list of integer employee IDs to manage its workforce. They want to implement a system that helps them quickly identify specific employee IDs based on certain criteria. Given a list of employee IDs and a list of queries, you need to implement a function that answers each query by checking if a given employee ID exists in the list. Your task is to write a function `employee_id_check(employee_ids, queries)` that takes in a list of integer `employee_ids` and a list of integer `queries`. The function should return a list of \\"Yes\\" or \\"No\\" strings, where \\"Yes\\" means the queried employee ID is found in the `employee_ids` list, and \\"No\\" means it is not found. **Function Signature:** ```python def employee_id_check(employee_ids: List[int], queries: List[int]) -> List[str]: ``` **Input:** - `employee_ids`: A list of integers representing employee IDs (1 ≤ len(employee_ids) ≤ 10^5, 1 ≤ employee_ids[i] ≤ 10^9). - `queries`: A list of integers representing the queries (1 ≤ len(queries) ≤ 10^5, 1 ≤ queries[i] ≤ 10^9). **Output:** - A list of strings (\\"Yes\\" or \\"No\\") for each query indicating whether the employee ID is present in the employee_ids list or not. **Example:** ```python employee_ids = [1001, 1002, 1003, 1004, 1005] queries = [1003, 1006, 1001] print(employee_id_check(employee_ids, queries)) # Output: [\\"Yes\\", \\"No\\", \\"Yes\\"] ``` **Note:** - Consider the efficiency of your function, as the length of `employee_ids` and `queries` can be quite large.","solution":"from typing import List def employee_id_check(employee_ids: List[int], queries: List[int]) -> List[str]: Checks if a given employee ID exists in the list of employee IDs. Parameters: employee_ids (List[int]): List of employee IDs. queries (List[int]): List of queries to check for existence in employee_ids. Returns: List[str]: List of \\"Yes\\" or \\"No\\" based on query results. employee_set = set(employee_ids) # Convert list to set for O(1) average-time complexity on lookups result = [\\"Yes\\" if q in employee_set else \\"No\\" for q in queries] return result"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Example: ```python def filter_primes(numbers): # Your code goes here # Test cases print(filter_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output should be [2, 3, 5, 7] print(filter_primes([12, 17, 19, 20, 23])) # Output should be [17, 19, 23] ``` Implement the `filter_primes` function with the constraints mentioned. Avoid using any built-in prime-checking functions.","solution":"def is_prime(n): Helper function to determine if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False i = 3 while i * i <= n: if n % i == 0: return False i += 2 return True def filter_primes(numbers): Returns a list of prime numbers from the input list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that takes a list containing elements of any data type (e.g., integers, strings, lists, dictionaries), and returns a new list where all the inflexible elements (integers, strings) are multiplied by 2, and all mutable elements (lists, dictionaries) are left unchanged. For instance, given the input: [1, \'a\', [2], {\'b\': 3}, 4], the output should be: [2, \'aa\', [2], {\'b\': 3}, 8].","solution":"def transform_list(input_list): Takes a list containing elements of any data type and returns a new list where all inflexible elements (integers, strings) are multiplied by 2 and mutable elements (lists, dictionaries) are left unchanged. result = [] for elem in input_list: if isinstance(elem, int): result.append(elem * 2) elif isinstance(elem, str): result.append(elem * 2) else: result.append(elem) return result"},{"question":"Given an array of integers `postorder`, which represents the postorder traversal of a binary search tree (BST), construct the tree and return its root. A binary search tree is a binary tree where for every node, any descendant of `Node.left` has a value strictly less than `Node.val`, and any descendant of `Node.right` has a value strictly greater than `Node.val`. A postorder traversal of a binary tree first traverses `Node.left`, then traverses `Node.right`, and finally displays the value of the node. Example 1: Input: postorder = [1,7,5,12,10,8] Output: [8,5,10,1,7,null,12] Example 2: Input: postorder = [2,3,1] Output: [1,null,3,2] Constraints: `1 <= postorder.length <= 100` `1 <= postorder[i] <= 108` All the values of `postorder` are unique. The `postorder` array represents the postorder traversal of a binary search tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def construct_bst_from_postorder(postorder): Constructs a BST from its postorder traversal. Args: postorder (List[int]): A list of integers representing the postorder traversal of a BST. Returns: TreeNode: The root node of the constructed BST. def construct_bst(start, end): if start > end: return None root_val = postorder[end] root = TreeNode(root_val) split_index = start while split_index <= end and postorder[split_index] < root_val: split_index += 1 root.left = construct_bst(start, split_index - 1) root.right = construct_bst(split_index, end - 1) return root return construct_bst(0, len(postorder) - 1)"},{"question":"Explain and implement the Dijkstra\'s algorithm for finding the shortest path in a graph. Your answer should include: - An explanation of the algorithm\'s logic and workflow. - A detailed discussion on its time complexity. - A Python function illustrating its implementation. - An example use case to demonstrate the algorithm in action.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra\'s algorithm to find the shortest paths from the start node to all other nodes in the graph. Parameters: graph (dict): A dictionary representing the graph where keys are nodes and values are lists of tuples, each tuple representing a neighbor and the weight of the edge to that neighbor. start (any): The starting node. Returns: distances (dict): A dictionary where keys are nodes and values are the shortest distance from the start node. # Initializing distances and priority queue distances = {node: float(\'infinity\') for node in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Example usage graph_example = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'C\', 2), (\'D\', 5)], \'C\': [(\'D\', 1)], \'D\': [] } shortest_paths = dijkstra(graph_example, \'A\') print(shortest_paths) # {\'A\': 0, \'B\': 1, \'C\': 3, \'D\': 4}"},{"question":"Write a function that, given a list of integers, returns a list of the integers that are prime numbers. Use the Sieve of Eratosthenes algorithm for an efficient solution. The function should be named `find_primes` and must handle lists with up to 10,000 elements. **Example:** ```python find_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ``` **Expected Output:** ```python [2, 3, 5, 7] ```","solution":"def find_primes(numbers): Returns a list of prime numbers from the given list of integers using the Sieve of Eratosthenes algorithm. if not numbers: return [] max_number = max(numbers) is_prime = [True] * (max_number + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(max_number**0.5) + 1): if is_prime[start]: for multiple in range(start*start, max_number + 1, start): is_prime[multiple] = False primes = [num for num in numbers if is_prime[num]] return primes"},{"question":"Consider an n times n matrix filled with integers where each element falls in the range [0, n-1]. We define a special type of transformation on the matrix: - Rotate the matrix 90 degrees clockwise. - Reflect the matrix horizontally (flip along the vertical axis). - Reflect the matrix vertically (flip along the horizontal axis). Two matrices A and B of the same size are considered equivalent if B can be obtained by performing a series of the above transformations on A. For example, the following matrices are equivalent: A = begin{pmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{pmatrix} quad B = begin{pmatrix} 7 & 4 & 1 8 & 5 & 2 9 & 6 & 3 end{pmatrix} where B is obtained by rotating A 90 degrees clockwise. Define f(n) to be the maximum number of n times n matrices, such that no two matrices in this set are equivalent to each other under the given transformations. For example, f(2) = 24. Find f(3) and provide the result modulo 10^9 + 7.","solution":"def factorial(n): Returns the factorial of n. if n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n+1): result *= i return result def f(n): Finds the maximum number of n x n matrices such that no two matrices are equivalent under the given transformations. MOD = 10**9 + 7 return factorial(n*n) % MOD # Calculate f(3) and take the result modulo 10^9 + 7 result_f3 = f(3) result_f3"},{"question":"Implement a function in Python that accepts a list of integers and returns a new list that contains only the prime numbers from the original list. In your response, demonstrate the use of fundamental principles and describe the steps taken to determine the primality of each number.","solution":"def is_prime(n): Determines if an integer n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Write a Python function that takes a string as input, counts the frequency of each character in the string, and returns a dictionary with characters as keys and their respective counts as values. Additionally, create a CSV file that contains two columns: \'Character\' and \'Count\', listing each character from the string and its frequency. Additionally, debug the following erroneous program related to this problem. Why is it failing and how can you fix it? ```python import csv def char_frequency(inputStr): frequency = {} for char in inputStr: frequency[char] = inputStr.count(char) with open(\\"char_frequency.csv\\", \\"w\\", newline=\'\') as csvfile: fieldnames = [\'Character\', \'Count\'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for key in frequency: writer.writerow({\'Character\': char, \'Count\': frequency[char]}) return frequency char_frequency(\\"hello world\\") #This code is currently failing to correctly generate the CSV file with accurate counts for each character and is also making logical errors in storing correct character counts. ``` To make the question more challenging, along with the solution approach also write a test case for your function. For instance, ensure your function accurately counts characters in a string that includes spaces and special characters (e.g., \\"hello, world!\\").","solution":"import csv def char_frequency(input_str): Takes a string as input and returns a dictionary with the frequencies of each character. Also writes the frequencies to a CSV file named \'char_frequency.csv\'. frequency = {} for char in input_str: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 with open(\\"char_frequency.csv\\", \\"w\\", newline=\'\') as csvfile: fieldnames = [\'Character\', \'Count\'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for key in frequency: writer.writerow({\'Character\': key, \'Count\': frequency[key]}) return frequency"},{"question":"Write a Python function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the counts of vowels (a, e, i, o, u) in each string. The function should be case insensitive and should skip any non-string elements in the list. Also ensure that the function handles any potential errors gracefully by printing an appropriate message and continuing the process. Here is a piece of code to help you get started: def count_vowels(strings): vowel_counts = {} for string in strings: try: if isinstance(string, str): count = sum(1 for char in string.lower() if char in \'aeiou\') vowel_counts[string] = count else: print(f\\"Skipping non-string element: {string}\\") except Exception as e: print(f\\"An error occurred: {e}\\") return vowel_counts","solution":"def count_vowels(strings): Takes a list of strings and returns a dictionary where the keys are the strings and the values are the counts of vowels (a, e, i, o, u) in each string. vowel_counts = {} for string in strings: try: if isinstance(string, str): count = sum(1 for char in string.lower() if char in \'aeiou\') vowel_counts[string] = count else: print(f\\"Skipping non-string element: {string}\\") except Exception as e: print(f\\"An error occurred: {e}\\") return vowel_counts"},{"question":"Write a function to manage a library where each book is represented as an object with the following structure: ``` book = { \'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'publicationYear\': 1925, \'genres\': [\'Classic\', \'Fiction\'], \'availableCopies\': 3, \'reservations\': [ {\'memberName\': \'Alice\', \'reservationDate\': \'2023-08-01\'}, {\'memberName\': \'Bob\', \'reservationDate\': \'2023-08-03\'} ] } ``` Implement the following functionalities with rigorous validations: 1. **Add a new book**: Ensure all fields are valid - \'title\' and \'author\' must be non-empty strings, \'publicationYear\' must be a valid year (integer ≥ 1500 and ≤ current year), \'genres\' must contain at least one non-empty string, \'availableCopies\' must be a non-negative integer. 2. **Reserve a book**: A member can reserve a book only if there are available copies. Ensure \'memberName\' is a non-empty string and \'reservationDate\' is in the valid YYYY-MM-DD format. 3. **Cancel a reservation**: Identify a reservation by \'memberName\' and remove it. Ensure \'memberName\' is a non-empty string. 4. **Check availability**: Return True if copies are available, else False. Ensure exceptions are thrown with relevant messages when validation of the fields fail and include edge test cases in your program.","solution":"import datetime def is_valid_year(year): current_year = datetime.datetime.now().year return isinstance(year, int) and 1500 <= year <= current_year def is_valid_date(date_str): try: datetime.datetime.strptime(date_str, \'%Y-%m-%d\') return True except ValueError: return False def add_book(library, book): if not isinstance(book[\'title\'], str) or not book[\'title\'].strip(): raise ValueError(\\"Invalid title\\") if not isinstance(book[\'author\'], str) or not book[\'author\'].strip(): raise ValueError(\\"Invalid author\\") if not is_valid_year(book[\'publicationYear\']): raise ValueError(\\"Invalid publication year\\") if not isinstance(book[\'genres\'], list) or any(not isinstance(genre, str) or not genre.strip() for genre in book[\'genres\']): raise ValueError(\\"Invalid genres\\") if not isinstance(book[\'availableCopies\'], int) or book[\'availableCopies\'] < 0: raise ValueError(\\"Invalid available copies\\") library.append(book) def reserve_book(book, memberName, reservationDate): if not isinstance(memberName, str) or not memberName.strip(): raise ValueError(\\"Invalid member name\\") if not is_valid_date(reservationDate): raise ValueError(\\"Invalid reservation date\\") if book[\'availableCopies\'] <= 0: raise ValueError(\\"No available copies for reservation\\") book[\'reservations\'].append({\'memberName\': memberName, \'reservationDate\': reservationDate}) book[\'availableCopies\'] -= 1 def cancel_reservation(book, memberName): if not isinstance(memberName, str) or not memberName.strip(): raise ValueError(\\"Invalid member name\\") for reservation in book[\'reservations\']: if reservation[\'memberName\'] == memberName: book[\'reservations\'].remove(reservation) book[\'availableCopies\'] += 1 return raise ValueError(\\"Reservation not found\\") def check_availability(book): return book[\'availableCopies\'] > 0"},{"question":"Given a string `s` consisting of lowercase letters, design an algorithm to find the length of the longest substring that contains no more than two distinct characters. The substring must be contiguous. Take note: - The algorithm should be optimized to handle large input strings efficiently. - If the input string is empty, the algorithm should return 0. - Consider edge cases such as strings with all identical characters or strings with exactly two distinct characters.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring containing at most two distinct characters. if not s: return 0 # Dictionary to count the characters in current window count = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in count: count[s[right]] += 1 else: count[s[right]] = 1 while len(count) > 2: count[s[left]] -= 1 if count[s[left]] == 0: del count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Implement a function in Python that takes a list of integers and returns a list of tuples. Each tuple should contain a pair of integers from the list where the first element is less than the second element. Ensure that the pairs are unique and no integer appears more than once in any tuple. For example, given the list: ```python numbers = [3, 1, 4, 1, 5, 9] ``` The function should return: ```python [(1, 3), (1, 4), (1, 5), (1, 9), (3, 4), (3, 5), (3, 9), (4, 5), (4, 9), (5, 9)] ``` Note that tuples like `(1, 1)` are not included because the integers must be distinct within each tuple, and `(3, 1)` is not included because the first element is not less than the second element.","solution":"def unique_pairs(nums): Returns a list of unique tuples where each tuple contains two distinct integers from the list, and the first integer is less than the second integer. result = [] nums = sorted(set(nums)) # Remove duplicates and sort the list for i in range(len(nums)): for j in range(i + 1, len(nums)): result.append((nums[i], nums[j])) return result"},{"question":"Develop a Python script to process the provided JSON file representing a collection of students along with their names, ages, and grades. The script should compute the average grade of the class and identify the student(s) with the highest grade. Ensure that the solution includes error handling mechanisms for potential issues such as missing data or incorrect data types. ```json { \\"students\\": [ {\\"name\\": \\"Alice\\", \\"age\\": 24, \\"grade\\": 85}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"grade\\": 90}, {\\"name\\": \\"Charlie\\", \\"age\\": 23, \\"grade\\": 95} ] } ```","solution":"import json def process_students(json_data): students = json.loads(json_data)[\\"students\\"] if not students: return {\\"average_grade\\": None, \\"top_students\\": None} total_grade = 0 top_grade = float(\'-inf\') top_students = [] for student in students: if \\"name\\" not in student or \\"age\\" not in student or \\"grade\\" not in student: raise ValueError(\\"Missing required student information.\\") try: grade = float(student[\\"grade\\"]) except ValueError: raise ValueError(\\"Invalid grade data type.\\") total_grade += grade if grade > top_grade: top_grade = grade top_students = [student[\\"name\\"]] elif grade == top_grade: top_students.append(student[\\"name\\"]) average_grade = total_grade / len(students) return {\\"average_grade\\": average_grade, \\"top_students\\": top_students}"},{"question":"Implement a function that simulates a basic file system. Your file system should support the following commands: - `create <file_path> <content>`: Create a new file with the specified file_path and content. If the file already exists, overwrite the content. - `read <file_path>`: Read the content of the specified file. If the file does not exist, return an error message \\"File not found\\". - `delete <file_path>`: Delete the specified file. If the file does not exist, return an error message \\"File not found\\". - `move <source_path> <destination_path>`: Move the file from source_path to destination_path. If the source file does not exist, return an error message \\"File not found\\". If the destination file already exists, overwrite it. Your function should handle file paths with nested directories and ensure that each command performs its operation efficiently. Assume valid file paths and content. The function should be able to process multiple commands sequentially and return the results of `read` commands in the order received. Provide sample faulty code that attempts to solve this problem but contains logical errors. Ask the candidate to identify and correct these errors, explain the time and space complexity of the corrected code, and suggest potential optimizations.","solution":"class FileSystem: def __init__(self): self.files = {} def create(self, file_path, content): self.files[file_path] = content def read(self, file_path): return self.files.get(file_path, \\"File not found\\") def delete(self, file_path): if file_path in self.files: del self.files[file_path] else: return \\"File not found\\" def move(self, source_path, destination_path): if source_path in self.files: self.files[destination_path] = self.files[source_path] del self.files[source_path] else: return \\"File not found\\""},{"question":"Write a Python program that processes a list of strings, where each string represents an instruction to either \\"add\\" or \\"remove\\" a number from a set. Your program should maintain the set of numbers accordingly and print the sum of the elements in the set after processing all the instructions. The instructions will be in the form of: 1. \\"add X\\" - where X is an integer to be added to the set. 2. \\"remove X\\" - where X is an integer to be removed from the set. The program should ignore \\"remove\\" instructions where the number is not present in the set. # Example ```python input_list = [\\"add 5\\", \\"add 10\\", \\"remove 5\\", \\"add 3\\", \\"remove 4\\"] ``` # Output After processing the above instructions, the set would be `{10, 3}` and the sum would be `13`. You should define a function with the following signature: ```python def process_instructions(instructions: list) -> int: # Your implementation here pass ``` # Constraints - Each instruction string will be in the format \\"add X\\" or \\"remove X\\", where X is an integer. - The input list will have at most 1000 instructions. - The integer X is guaranteed to be in the range of -1000 to 1000. # Example Usage ```python instructions = [\\"add 2\\", \\"add 8\\", \\"remove 10\\", \\"add -1\\"] print(process_instructions(instructions)) # Output: 9 instructions = [\\"add 15\\", \\"add 20\\", \\"add 35\\", \\"remove 15\\"] print(process_instructions(instructions)) # Output: 55 ``` # Code Template ```python def process_instructions(instructions): num_set = set() for instruction in instructions: action, value = instruction.split() value = int(value) if action == \\"add\\": num_set.add(value) elif action == \\"remove\\": num_set.discard(value) return sum(num_set) # Example usage instructions = [\\"add 2\\", \\"add 8\\", \\"remove 10\\", \\"add -1\\"] print(process_instructions(instructions)) # Output: 9 instructions = [\\"add 15\\", \\"add 20\\", \\"add 35\\", \\"remove 15\\"] print(process_instructions(instructions)) # Output: 55 ```","solution":"def process_instructions(instructions): num_set = set() for instruction in instructions: action, value = instruction.split() value = int(value) if action == \\"add\\": num_set.add(value) elif action == \\"remove\\": num_set.discard(value) return sum(num_set)"},{"question":"Write a function in Python that takes a positive integer n and returns a list of the first n elements of the Fibonacci sequence. Implement an iterative approach to solve this problem.","solution":"def fibonacci(n): Returns the first n elements of the Fibonacci sequence. if n <= 0: return [] sequence = [0] if n == 1: return sequence sequence.append(1) for i in range(2, n): next_element = sequence[-1] + sequence[-2] sequence.append(next_element) return sequence"},{"question":"A software company offers a special discount scheme for its premium customers. If a customer subscribes for \'n\' months, the total discount percentage they receive is calculated using the sum of the series: 5, 10, 20, 30, ..., with each subsequent term multiplying the previous term by 2. Write a function in Python that takes the number of months \'n\' as input and returns the total discount percentage. If \'n\' is 0 or less, the function should return 0. **Example:** Input: 3 Output: 35 Explanation: The series for 3 months is [5, 10, 20], and the sum is 35. Thus, the total discount percentage is 35%. ```python def total_discount(n): if n <= 0: return 0 total = 0 term = 5 for _ in range(n): total += term term *= 2 return total ```","solution":"def total_discount(n): Returns the total discount percentage for \'n\' months. Each subsequent term is twice the previous term starting from 5. :param n: Number of months (integer) :return: Total discount percentage (integer) if n <= 0: return 0 total = 0 term = 5 for _ in range(n): total += term term *= 2 return total"},{"question":"Write a function in your preferred programming language that takes a string representing a mathematical expression containing only non-negative integers, addition (+), subtraction (-), and parentheses. The function should evaluate and return the result of the expression. Your solution must properly handle the order of operations according to the standard mathematical rules. Ensure that your function can handle possible whitespace in the input string.","solution":"def evaluate_expression(expression): Evaluate a mathematical expression containing non-negative integers, addition (+), subtraction (-), and parentheses with proper handling of operator precedence. :param expression: str: The mathematical expression to evaluate :return: int: The result of the evaluated expression def helper(s, idx): num = 0 stack = [] sign = 1 # 1 means positive, -1 means negative while idx < len(s): char = s[idx] if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': # Add the current number to stack stack.append(sign * num) num = 0 sign = 1 elif char == \'-\': # Add the current number to stack stack.append(sign * num) num = 0 sign = -1 elif char == \'(\': # Calculate the result inside parentheses num, idx = helper(s, idx + 1) elif char == \')\': # On encountering \')\' we return the computed result so far stack.append(sign * num) return sum(stack), idx idx += 1 # Add the last number to stack stack.append(sign * num) return sum(stack), idx # Remove spaces and call the helper function expression = expression.replace(\\" \\", \\"\\") return helper(expression, 0)[0]"},{"question":"Design an algorithm that processes a list of transactions, where each transaction includes a unique identifier, a timestamp, and an amount. Group these transactions by their unique identifiers and calculate the sum of amounts for each identifier. Return a dictionary where the keys are the unique identifiers and the values are the corresponding summed amounts. Ensure your implementation can handle large datasets efficiently.","solution":"from collections import defaultdict def process_transactions(transactions): Processes a list of transactions, grouping by unique identifier and summing the amounts. Parameters: transactions (list): A list of transactions, where each transaction is a dictionary containing \'id\' (unique identifier), \'timestamp\', and \'amount\'. Returns: dict: A dictionary where the keys are unique identifiers and the values are the summed amounts. result = defaultdict(float) for transaction in transactions: identifier = transaction[\'id\'] amount = transaction[\'amount\'] result[identifier] += amount return dict(result)"},{"question":"Design a function `rotate_right` that takes an array `arr` and an integer `k`, and returns the array after rotating it to the right `k` times. Rotating the array to the right means that each element moves to the position with the next higher index, and the last element moves to the first position. For example, the array [1, 2, 3, 4, 5] rotated right once becomes [5, 1, 2, 3, 4]. Write the function `rotate_right` that performs this operation. Your function should fulfill the following examples: ```python def rotate_right(arr, k): Rotates the array arr to the right by k steps. Args: arr (list): The array to rotate. k (int): The number of steps to rotate the array. Returns: list: The rotated array. Examples: >>> rotate_right([1, 2, 3, 4, 5], 1) [5, 1, 2, 3, 4] >>> rotate_right([1, 2, 3, 4, 5], 2) [4, 5, 1, 2, 3] >>> rotate_right([1, 2, 3, 4, 5], 5) [1, 2, 3, 4, 5] >>> rotate_right([1, 2, 3, 4, 5], 7) [4, 5, 1, 2, 3] # Your code here ```","solution":"def rotate_right(arr, k): Rotates the array arr to the right by k steps. Args: arr (list): The array to rotate. k (int): The number of steps to rotate the array. Returns: list: The rotated array. Examples: >>> rotate_right([1, 2, 3, 4, 5], 1) [5, 1, 2, 3, 4] >>> rotate_right([1, 2, 3, 4, 5], 2) [4, 5, 1, 2, 3] >>> rotate_right([1, 2, 3, 4, 5], 5) [1, 2, 3, 4, 5] >>> rotate_right([1, 2, 3, 4, 5], 7) [4, 5, 1, 2, 3] if not arr: return arr k = k % len(arr) return arr[-k:] + arr[:-k]"},{"question":"Write a function that takes a list of integers and returns a new list containing the squares of only the even numbers from the original list. If the list contains any non-integer elements, the function should raise a TypeError with an appropriate error message. input_list = [4, 7, -2, \'a\', 5, 16, 21, 8, 19, 10]","solution":"def squares_of_even_numbers(input_list): Returns a list of squares of even numbers from the input list. If any non-integer is present in the input list, raises a TypeError. if not all(isinstance(x, int) for x in input_list): raise TypeError(\\"The list should only contain integers.\\") return [x**2 for x in input_list if x % 2 == 0]"},{"question":"Write a function to find the maximum product of three numbers in an array of integers. The function should return this maximum product. Assume the array contains at least three numbers. Example: Input: [1, 10, 2, 6, 5, 3] Output: 300 The input array may contain both positive and negative numbers.","solution":"def maximum_product_of_three(nums): Returns the maximum product of three numbers in an array of integers. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a Python function that takes a string input and returns the number of vowels and consonants in the string. The function should be case-insensitive and should ignore any non-alphabetic characters. Your solution should include two parts: 1. A function definition named `count_vowels_consonants`. 2. A test suite that verifies your function works with different types of input, including: - An empty string. - A string with only vowels. - A string with only consonants. - A mixed string with vowels, consonants, and non-alphabetic characters. - A string with uppercase and lowercase characters. Example: - Input: \\"Hello, World!\\" - Output: \\"Vowels: 3, Consonants: 7\\" Here\'s an example template to help you get started: ```python def count_vowels_consonants(s): vowels = \\"aeiou\\" s = s.lower() vowel_count = 0 consonant_count = 0 for char in s: if char.isalpha(): if char in vowels: vowel_count += 1 else: consonant_count += 1 return vowel_count, consonant_count # Test suite assert count_vowels_consonants(\\"\\") == (0, 0) assert count_vowels_consonants(\\"aeiou\\") == (5, 0) assert count_vowels_consonants(\\"bcdfg\\") == (0, 5) assert count_vowels_consonants(\\"Hello, World!\\") == (3, 7) assert count_vowels_consonants(\\"AEIOUaeiou\\") == (10, 0) ``` This will test your ability to work with strings, implement basic iteration and conditionals, and ensure your code handles different input scenarios effectively.","solution":"def count_vowels_consonants(s): Returns the number of vowels and consonants in the string. The function is case-insensitive and ignores any non-alphabetic characters. vowels = \\"aeiou\\" s = s.lower() vowel_count = 0 consonant_count = 0 for char in s: if char.isalpha(): if char in vowels: vowel_count += 1 else: consonant_count += 1 return vowel_count, consonant_count"},{"question":"Create a function `is_perfect_square(n)` that checks if a given positive integer `n` is a perfect square. A perfect square is an integer that is the square of another integer; for example, 1, 4, and 9 are perfect squares because they are 1*1, 2*2, and 3*3 respectively. Write a function that: 1. Takes a single argument `n`. 2. Returns `True` if `n` is a perfect square, `False` otherwise. Ensure that your solution does not use any in-built square root functions or libraries like math. Instead, implement a binary search algorithm to determine if `n` is a perfect square efficiently. Example usage: ```python assert is_perfect_square(16) == True # 4*4 assert is_perfect_square(14) == False # 14 is not a perfect square assert is_perfect_square(25) == True # 5*5 assert is_perfect_square(30) == False # 30 is not a perfect square ``` Write a suite of unittests that validate the correctness of your `is_perfect_square` function.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, otherwise returns False. if n < 1: return False left, right = 1, n while left <= right: mid = (left + right) // 2 mid_squared = mid * mid if mid_squared == n: return True elif mid_squared < n: left = mid + 1 else: right = mid - 1 return False"},{"question":"Write a Python function to generate and display a spiral matrix of size `n x n`, where `n` is a positive integer provided as an input parameter. The spiral should start with 1 at the top-left corner and increase by 1 in clockwise order. Additionally, ensure the function can handle edge cases, such as `n` being 1, and output an appropriate message if `n` is not valid.","solution":"def generate_spiral_matrix(n): Generates a n x n spiral matrix and returns it. The spiral starts with 1 at the top-left corner and increases by 1 in clockwise order. If n is not a positive integer, returns an appropriate message. if not isinstance(n, int) or n <= 0: return \\"Input must be a positive integer.\\" # Create an n x n matrix initialized with zeros. matrix = [[0] * n for _ in range(n)] # Define the directions for moving right, down, left, and up. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] current_dir = 0 # Start with moving to the right. x, y = 0, 0 # Start from the top-left corner. num = 1 for _ in range(n * n): matrix[x][y] = num num += 1 # Calculate the next position. next_x, next_y = x + directions[current_dir][0], y + directions[current_dir][1] # Change direction if the next position is out of bounds or already filled. if next_x < 0 or next_x >= n or next_y < 0 or next_y >= n or matrix[next_x][next_y] != 0: current_dir = (current_dir + 1) % 4 next_x, next_y = x + directions[current_dir][0], y + directions[current_dir][1] x, y = next_x, next_y return matrix"},{"question":"Write a Python function that takes two strings as input and returns True if one string is a permutation of the other, False otherwise. A permutation is a rearrangement of letters. The function must be case-sensitive and consider whitespace as valid characters. Implement this by verifying both strings contain the exact same characters in the exact same frequencies. Ensure your code handles edge cases, such as empty strings, different lengths of input strings, and strings containing special characters. Additionally, write tests to validate the correctness of your function.","solution":"def are_permutations(str1, str2): Returns True if str1 is a permutation of str2, False otherwise. A permutation is defined as a rearrangement of letters. The function is case-sensitive and considers whitespace and special characters as valid characters. if len(str1) != len(str2): return False # Create dictionaries for counting character frequencies char_counts1 = {} char_counts2 = {} for char in str1: char_counts1[char] = char_counts1.get(char, 0) + 1 for char in str2: char_counts2[char] = char_counts2.get(char, 0) + 1 return char_counts1 == char_counts2"},{"question":"Given an array of integers, create a function that finds the second smallest element and returns its value. If the array has less than two distinct elements, return None. Example: Input: [3, 1, 2, 1, 4] Output: 2","solution":"def second_smallest(arr): Finds the second smallest element in the array and returns its value. If the array has less than two distinct elements, returns None. if len(arr) < 2: return None first_min, second_min = float(\'inf\'), float(\'inf\') for num in arr: if num < first_min: first_min, second_min = num, first_min elif first_min < num < second_min: second_min = num return second_min if second_min < float(\'inf\') else None"},{"question":"Given a list of integers, write a function `find_kth_missing` that takes two parameters: a list of integers `nums` and an integer `k`. This function should return the k-th missing positive integer from the list when the list is sorted in ascending order. Do not consider duplicate numbers, and the function should account for the missing numbers sequentially starting from 1 upwards. Examples: ``` find_kth_missing([2, 3, 4, 7, 11], 5) # The missing positive integers in sequence are [1, 5, 6, 8, 9, 10, 12, ...]. # The 5th missing positive integer is 9. find_kth_missing([1, 2, 3, 4], 2) # The missing positive integers in sequence are [5, 6, 7, ...]. # The 2nd missing positive integer is 6. ``` Here\'s a function definition to complete: ```python def find_kth_missing(nums, k): Parameters: nums (List[int]): A list of integers that represents available numbers. k (int): The k-th missing positive integer to find. Returns: int: The k-th missing positive integer from the list. ```","solution":"def find_kth_missing(nums, k): Returns the k-th missing positive integer from a sorted list nums. Parameters: nums (List[int]): A list of integers that represents available numbers. k (int): The k-th missing positive integer to find. Returns: int: The k-th missing positive integer from the list. missing_counter = 0 current_num = 1 nums_set = set(nums) while True: if current_num not in nums_set: missing_counter += 1 if missing_counter == k: return current_num current_num += 1"},{"question":"Create a function that takes a list of integers and an integer `n` as inputs and rearranges the list so that all multiples of `n` appear at the beginning of the list, followed by all other elements. The relative order of the elements should be preserved. If the input list is empty, the function should return an empty list. Handle edge cases such as invalid input types gracefully. For example: input_list = [1, 3, 4, 6, 7, 9, 12] n = 3 The function should return: [3, 6, 9, 12, 1, 4, 7]","solution":"def rearrange_multiples(input_list, n): Rearranges the list so that all multiples of n appear at the beginning, followed by all other elements. The relative order of the elements is preserved. Parameters: input_list (List[int]): A list of integers. n (int): An integer to find multiples of. Returns: List[int]: A reordered list with multiples of n at the beginning. if not isinstance(input_list, list) or not all(isinstance(i, int) for i in input_list) or not isinstance(n, int): raise ValueError(\\"Invalid input. Please provide a list of integers and an integer as inputs.\\") multiples_of_n = [x for x in input_list if x % n == 0] non_multiples_of_n = [x for x in input_list if x % n != 0] return multiples_of_n + non_multiples_of_n"},{"question":"Implement a function that checks if a given list of strings can be concatenated to form a specific target string. The order of concatenation must follow their given sequence in the list, but you can omit any number of strings from the concatenation. Return True if it\'s possible to form the target string, and False otherwise. ```python def can_form_target_string(strings: List[str], target: str) -> bool: Determine if the target string can be formed by concatenating elements in the list in order. >>> can_form_target_string([\'cat\', \'dog\', \'bird\'], \'catdog\') True >>> can_form_target_string([\'cat\', \'dog\', \'bird\'], \'catbird\') True >>> can_form_target_string([\'cat\', \'dog\', \'bird\'], \'catdogbird\') True >>> can_form_target_string([\'cat\', \'dog\', \'bird\'], \'catfish\') False >>> can_form_target_string([\'cat\', \'dog\', \'bird\'], \'\') True >>> can_form_target_string([], \'catdog\') False # Your code goes here pass ```","solution":"def can_form_target_string(strings, target): Determine if the target string can be formed by concatenating elements in the list in order. target_index = 0 for s in strings: while target_index < len(target) and target.startswith(s, target_index): target_index += len(s) if target_index == len(target): return True return target_index == len(target)"},{"question":"Write a Python function `find_common_elements` that takes two lists of integers as input and returns a list of their common elements in ascending order. The lists may contain duplicate elements, but the returned list of common elements should contain unique values only. Function signature: ```python def find_common_elements(list1: list, list2: list) -> list: ``` # Example Input: ```python a = [4, 5, 7, 1, 5, 8, 5] b = [5, 9, 4, 5, 11, 15, 4] print(find_common_elements(a, b)) ``` Output: ```python [4, 5] ``` # Constraints - All elements of the input lists are integers. - You must not use any third-party libraries. - The function should handle input lists containing up to 10,000 elements each efficiently.","solution":"def find_common_elements(list1: list, list2: list) -> list: Returns a list of unique elements that are common to both list1 and list2 in ascending order. # Convert lists to sets to find common elements common_elements = set(list1) & set(list2) # Convert the set to a sorted list return sorted(common_elements)"},{"question":"Write a function that accepts a list of integers and strings, and returns a new list where all integers are squared and all strings are reversed. [\\"hello\\", 3, \\"world\\", 4, \\"foo\\", 5, \\"bar\\"]","solution":"def modify_list(input_list): Given a list of integers and strings, returns a new list where: - All integers are squared. - All strings are reversed. :param input_list: List of integers and strings. :return: Modified list with squared integers and reversed strings. result = [] for item in input_list: if isinstance(item, int): result.append(item ** 2) elif isinstance(item, str): result.append(item[::-1]) return result"},{"question":"Continues] You are given a dataset containing information about different kinds of fruits with the following structure: ```csv fruit, weight (g), color apple, 150, red banana, 120, yellow kiwi, 75, green apple, 130, red banana, 110, yellow kiwi, 80, brown grape, 50, purple grape, 45, green ``` Write a Python script to: 1. Read this dataset into a Pandas DataFrame. 2. Clean the dataset by ensuring there are no duplicate entries. 3. Calculate the average weight of each kind of fruit and add a new column to the DataFrame representing this average weight for each fruit. 4. Write a custom function that classifies the fruits based on their weight into three categories: light, medium, and heavy. This classification can be arbitrary (e.g., fruit weight < 100g is light, 100g <= fruit weight < 150g is medium, and fruit weight >= 150g is heavy). 5. Apply this classification function to the dataset and add a new column indicating the weight category of each fruit. 6. Finally, save the cleaned and enriched DataFrame to a new CSV file named `fruits_cleaned.csv`. Ensure that your code is well-documented with comments explaining each step of the process. An exemplary output DataFrame after processing the provided data might look as follows: ```python fruit weight (g) color avg_weight_category weight_category 0 apple 150 red 140.0 heavy 1 banana 120 yellow 115.0 medium 2 kiwi 75 green 77.5 light 3 apple 130 red 140.0 medium 4 banana 110 yellow 115.0 medium 5 kiwi 80 brown 77.5 light 6 grape 50 purple 47.5 light 7 grape 45 green 47.5 light ``` Session End","solution":"import pandas as pd def categorize_weight(weight): Classifies the fruits based on their weight into three categories: light, medium, and heavy. - light: weight < 100g - medium: 100g <= weight < 150g - heavy: weight >= 150g if weight < 100: return \\"light\\" elif 100 <= weight < 150: return \\"medium\\" else: return \\"heavy\\" # Read the dataset into a Pandas DataFrame data = { \\"fruit\\": [\\"apple\\", \\"banana\\", \\"kiwi\\", \\"apple\\", \\"banana\\", \\"kiwi\\", \\"grape\\", \\"grape\\"], \\"weight (g)\\": [150, 120, 75, 130, 110, 80, 50, 45], \\"color\\": [\\"red\\", \\"yellow\\", \\"green\\", \\"red\\", \\"yellow\\", \\"brown\\", \\"purple\\", \\"green\\"] } df = pd.DataFrame(data) # Drop duplicates if there are any df = df.drop_duplicates() # Calculate the average weight of each kind of fruit and add it to the DataFrame avg_weights = df.groupby(\'fruit\')[\'weight (g)\'].mean().rename(\\"avg_weight\\") df = df.merge(avg_weights, on=\'fruit\') # Apply the custom function to classify the fruits based on their weight df[\'weight_category\'] = df[\'weight (g)\'].apply(categorize_weight) # Save the cleaned and enriched DataFrame to a new CSV file df.to_csv(\'fruits_cleaned.csv\', index=False) # For demonstration, we will return the dataframe as this environment doesn\'t support file handling df"},{"question":"Create a Python function `find_roots(a, b, c)` that takes three integer coefficients of a quadratic equation `ax^2 + bx + c = 0`. The function should return a tuple containing the real roots of the equation. If there are no real roots, return an empty tuple. Utilize the discriminant `(b² - 4ac)` to determine the nature of the roots. Use the standard quadratic formula to find the roots when they exist.","solution":"import math def find_roots(a, b, c): Returns a tuple containing the real roots of the quadratic equation ax^2 + bx + c = 0. If there are no real roots, return an empty tuple. discriminant = b**2 - 4*a*c if discriminant < 0: return () elif discriminant == 0: root = -b / (2*a) return (root,) else: root1 = (-b + math.sqrt(discriminant)) / (2*a) root2 = (-b - math.sqrt(discriminant)) / (2*a) return (root1, root2)"},{"question":"In an online movie review platform, users can rate different movies, and each user can submit multiple reviews for the same movie. The platform wants to identify the N movies with the highest average ratings to display them on the homepage. You are given: 1. A list of unique movie IDs. 2. A list of reviews, where each review corresponds to a tuple (movie_id, user_id, rating). The rating is an integer between 1 and 10 inclusive. 3. An integer N indicating the number of top movies to retrieve. Write a function `top_movies(movie_ids, reviews, N)` that returns a list of the N movies with the highest average rating. In case of a tie in the average rating, movies should be sorted by their movie_id in ascending order. # Function Signature ```python def top_movies(movie_ids: List[int], reviews: List[Tuple[int, int, int]], N: int) -> List[int]: pass ``` # Input - `movie_ids` (List[int]): A list of unique integers representing movie IDs. - `reviews` (List[Tuple[int, int, int]]): A list of tuples where each tuple (movie_id, user_id, rating) represents a review. Ratings are integers from 1 to 10. - `N` (int): The number of movies with the highest average rating to return. # Output - A list of N integers representing movie IDs with the highest average ratings. If there are fewer than N movies, return the list of all movies sorted by their average rating. # Example ```python movie_ids = [1, 2, 3, 4] reviews = [(1, 1, 5), (1, 2, 7), (2, 1, 10), (2, 2, 8), (3, 1, 6)] N = 2 assert top_movies(movie_ids, reviews, N) == [2, 1] ``` In the above example: - Movie 1 has an average rating of (5+7)/2 = 6.0. - Movie 2 has an average rating of (10+8)/2 = 9.0. - Movie 3 has an average rating of 6.0 (only one rating). - No ratings for movie 4. Therefore, the top 2 movies by average rating are movies 2 and 1.","solution":"from typing import List, Tuple from collections import defaultdict def top_movies(movie_ids: List[int], reviews: List[Tuple[int, int, int]], N: int) -> List[int]: movie_ratings = defaultdict(list) # Aggregate ratings for each movie for movie_id, user_id, rating in reviews: movie_ratings[movie_id].append(rating) # Calculate average ratings avg_ratings = [] for movie_id in movie_ids: if movie_id in movie_ratings: avg_rating = sum(movie_ratings[movie_id]) / len(movie_ratings[movie_id]) avg_ratings.append((avg_rating, movie_id)) else: avg_ratings.append((0, movie_id)) # Consider movies with no reviews having 0 average rating # Sort by average rating (descending), then by movie_id (ascending) avg_ratings.sort(key=lambda x: (-x[0], x[1])) # Extract the top N movie IDs top_movie_ids = [movie_id for _, movie_id in avg_ratings[:N]] return top_movie_ids"},{"question":"Implement a function in Python that simulates the behavior of a simple cache using the Least Recently Used (LRU) replacement policy. The function should process a series of data access requests and return the order in which data is accessed from the cache. The cache should have a limited capacity, and once it exceeds this capacity, the least recently used data should be removed to make space for new data. Function Signature: ```python def lru_cache(capacity: int, data_requests: List[int]) -> List[int]: pass ``` Parameters: - `capacity` (int): The maximum number of data items the cache can hold. - `data_requests` (List[int]): A list representing a sequence of data access requests. Returns: - List[int]: A list showing the order in which data is accessed from the cache after processing all requests. Example: ```python # Example input: capacity = 3 data_requests = [1, 2, 3, 4, 2, 5, 1, 2, 4] # Example output: # [1, 2, 3, 4, 2, 4, 1, 2, 4] # The order of accessed cache elements lru_cache(capacity, data_requests) ``` Explanation: - Initially, the cache is empty. - Process each data request: - If the data is already in the cache, move it to the most recently used position. - If the data is not in the cache: - If the cache is not full, add the new data. - If the cache is full, remove the least recently used data and add the new data. - The function returns the order in which data was accessed from the cache.","solution":"from typing import List def lru_cache(capacity: int, data_requests: List[int]) -> List[int]: cache = [] access_order = [] for data in data_requests: if data in cache: cache.remove(data) elif len(cache) == capacity: cache.pop(0) cache.append(data) access_order.append(cache[-1]) return access_order"},{"question":"Develop a function that simulates a \\"Bank Transaction System\\". The function should process multiple types of transactions such as deposits, withdrawals, and transfers between accounts, each identified by a unique transaction ID. Each account is represented by an account ID and has an initial balance. The function should take an initial set of account balances and a list of transactions, then output the final balances of all accounts after processing all transactions. Ensure the function efficiently handles at least 10,000 transactions and gracefully manages edge cases such as overdrafts and invalid accounts. Implement the function according to the following constraints: 1. Each deposit increases an account balance by a specified amount. 2. Each withdrawal decreases an account balance by a specified amount, if sufficient funds are available. 3. Each transfer moves a specified amount from one account to another, if sufficient funds are available in the sender\'s account. 4. If a transaction cannot be completed due to insufficient funds or an invalid account, it should be ignored, and processing should continue with the next transaction. Input: - An initial dictionary where the keys are account IDs and the values are the initial balances. - A list of transactions, where each transaction is represented as a dictionary with the following structure: - `type` (string): either \\"deposit\\", \\"withdrawal\\", or \\"transfer\\". - `account_id` (string): the ID of the account to which the transaction applies (for transfer, this is the sender\'s account). - `amount` (float): the amount of the transaction. - `target_id` (string): the ID of the receiver\'s account for transfer transactions (ignored for deposit and withdrawal). Output: - The final dictionary of account balances after processing all transactions. Example: Input: ```python { \\"acc_1\\": 500.0, \\"acc_2\\": 300.0, \\"acc_3\\": 1000.0 }, [ {\\"type\\": \\"deposit\\", \\"account_id\\": \\"acc_1\\", \\"amount\\": 200.0}, {\\"type\\": \\"withdrawal\\", \\"account_id\\": \\"acc_2\\", \\"amount\\": 100.0}, {\\"type\\": \\"transfer\\", \\"account_id\\": \\"acc_1\\", \\"target_id\\": \\"acc_3\\", \\"amount\\": 150.0}, {\\"type\\": \\"withdrawal\\", \\"account_id\\": \\"acc_3\\", \\"amount\\": 2000.0} ] ``` Output: ```python { \\"acc_1\\": 550.0, \\"acc_2\\": 200.0, \\"acc_3\\": 1150.0 } ``` Implement a function `process_transactions(initial_balances, transactions)` to solve this problem.","solution":"def process_transactions(initial_balances, transactions): Processes a list of transactions and applies them to the initial balances of accounts. :param initial_balances: Dictionary with account IDs as keys and initial balances as values. :param transactions: List of transaction dictionaries. Each dictionary has a \'type\' (string, \\"deposit\\", \\"withdrawal\\", or \\"transfer\\"), \'account_id\' (string), \'amount\' (float), and \'target_id\' (string, optional for \'transfer\'). :return: Dictionary with account IDs as keys and final balances as values. for transaction in transactions: t_type = transaction[\\"type\\"] account_id = transaction[\\"account_id\\"] amount = transaction[\\"amount\\"] if t_type == \\"deposit\\": if account_id in initial_balances: initial_balances[account_id] += amount elif t_type == \\"withdrawal\\": if account_id in initial_balances and initial_balances[account_id] >= amount: initial_balances[account_id] -= amount elif t_type == \\"transfer\\": target_id = transaction[\\"target_id\\"] if (account_id in initial_balances and target_id in initial_balances and initial_balances[account_id] >= amount): initial_balances[account_id] -= amount initial_balances[target_id] += amount return initial_balances"},{"question":"Implement a function that takes two strings as input and returns the longest common subsequence (LCS) of the two strings. The function should return the LCS as a string. If there are multiple LCS with the same length, return any one of them. Function Signature: ```python def longest_common_subsequence(str1: str, str2: str) -> str: # Your code here ``` Input: - str1: A string consisting of uppercase English letters. - str2: A string consisting of uppercase English letters. Output: - A string representing the longest common subsequence of the input strings. Examples: ```python assert longest_common_subsequence(\\"ABCD\\", \\"ACBAD\\") == \\"ABD\\" or longest_common_subsequence(\\"ABCD\\", \\"ACBAD\\") == \\"ACD\\" assert longest_common_subsequence(\\"XMJYAUZ\\", \\"MZJAWXU\\") == \\"MJAU\\" or longest_common_subsequence(\\"XMJYAUZ\\", \\"MZJAWXU\\") == \\"XZU\\" ```","solution":"def longest_common_subsequence(str1: str, str2: str) -> str: Returns the longest common subsequence (LCS) of the two input strings. # Create a 2D table to store lengths of LCS m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the LCS from the dp array lcs = [] i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"Write a Python function that identifies any two distinct numbers in a list whose sum equals a specified target. The function should return the indices of these two numbers. If no such pair exists, the function should return an empty list.","solution":"def find_two_sum(nums, target): Returns the indices of the two distinct numbers in the list nums that sum up to the target. If no such pair exists, returns an empty list. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Create a function named \'find_median\' in Python that computes the median of a list of numbers. The median is the middle number in a sorted list of numbers. If the list has an odd number of entries, the median is the middle entry. If the list has an even number of entries, the median is the average of the two middle entries. Your task is to write the \'find_median\' function that performs the following: 1. Accepts a list of numbers as input. 2. Handles and returns suitable messages for the following edge cases: - If the list is empty, return \'List is empty\'. - If the list contains non-numeric entries, return \'List must contain only numbers\'. 3. Computes and returns the median of the list for valid numeric entries. 4. Ensure the function works efficiently for large lists. Additionally, write comprehensive test cases to validate the accuracy and robustness of your function. The test cases should cover: - An empty list. - A list with an odd number of numeric elements. - A list with an even number of numeric elements. - A list containing both numeric and non-numeric elements. - A large list of numbers (e.g., 1,000,000 elements). Ensure the function and test cases are well-documented and use Python\'s built-in assert statement for the test cases.","solution":"def find_median(numbers): Computes the median of a list of numbers. The median is the middle number in a sorted list. - If the list is empty, returns \'List is empty\'. - If the list contains non-numeric entries, returns \'List must contain only numbers\'. - Otherwise, calculates and returns the median value. :param numbers: List of numbers :return: Median value, or a string message for edge cases if not numbers: return \'List is empty\' try: sorted_numbers = sorted(numbers) except TypeError: return \'List must contain only numbers\' n = len(sorted_numbers) if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 return median"},{"question":"Develop a function that takes an integer array nums and an integer target as arguments and returns the indices of the two numbers in the array that add up to the target. There may be exactly one solution, and you may not use the same element twice. Write the function two_sum(nums, target) to solve this problem. Ensure your solution checks for edge cases, such as arrays with less than two elements.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array that add up to the target. Assumes there is exactly one solution and an element cannot be used twice. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Given a collection of interdependent tasks, design a function to determine the order in which to complete the tasks such that all dependencies are resolved before any task is executed. Each task is represented by a unique string identifier, and dependencies are represented as a list of pairs of task identifiers, where each pair (a, b) indicates that task a must be completed before task b. Rescue and handle exceptions for cases with circular dependencies or when a valid ordering of tasks is impossible. Additionally, provide a debugging script that identifies potential pitfalls in detecting cycles or resolving dependencies incorrectly. An erroneous piece of code to consider: ```python def find_order(tasks, dependencies): order = [] for task in tasks: for dep in dependencies: if dep[1] == task: order.append(dep[0]) order.append(task) return order ``` Identify what\'s wrong with the code above and provide the correct dependency resolution logic.","solution":"def find_order(tasks, dependencies): from collections import defaultdict, deque # Create a graph and in-degree count graph = defaultdict(list) in_degree = {task: 0 for task in tasks} # Build the graph for pre, task in dependencies: graph[pre].append(task) in_degree[task] += 1 # Initialize queue with tasks having no dependencies zero_in_degree = deque([task for task in tasks if in_degree[task] == 0]) order = [] while zero_in_degree: current = zero_in_degree.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) # If the number of tasks in the order is not equal to the original number of tasks, # it means there is a cycle, and it\'s not feasible to find a valid order. if len(order) != len(tasks): raise ValueError(\\"A valid task order is not possible due to a cycle.\\") return order"},{"question":"In Python, you are given a list of integers and a target sum. Your task is to identify if there is a pair of distinct elements in the list that adds up to the target sum. If such a pair exists, return the pair as a tuple. If multiple pairs add up to the target sum, return any one of them. If no such pair exists, return `None`. For example, given the list `[2, 7, 11, 15]` and the target sum `9`, the function should return `(2, 7)`. Here is the function signature: ```python def find_pair_with_sum(arr: list[int], target: int) -> tuple[int, int] or None: # Your code here ``` Constraints: - Each input list will have at least 2 integers. - Only one pair needs to be returned if multiple pairs exist. - The list may contain negative numbers and duplicates.","solution":"def find_pair_with_sum(arr: list[int], target: int) -> tuple[int, int] or None: Finds a pair of distinct elements in the list that add up to the target sum. If such a pair exists, returns the pair as a tuple. If no such pair exists, returns None. seen = set() for number in arr: complement = target - number if complement in seen: return (complement, number) seen.add(number) return None"},{"question":"Develop a software in Python that simulates a vending machine. The vending machine should be able to handle at least 5 different types of products, track the stock levels of each product, handle user inputs to select and dispense products, and manage money transactions. Implement a logging system to log transactions, and a restocking mechanism that allows an operator to restock products and collect money from the machine. Additionally, provide functionality to offer discounts when a user buys multiple items at once, and ensure the machine can return appropriate change.","solution":"import logging logging.basicConfig(filename=\'vending_machine.log\', level=logging.INFO, format=\'%(asctime)s:%(levelname)s:%(message)s\') class Product: def __init__(self, name, price, stock): self.name = name self.price = price self.stock = stock class VendingMachine: def __init__(self): self.products = { \'soda\': Product(\'soda\', 1.50, 10), \'chips\': Product(\'chips\', 1.00, 15), \'candy\': Product(\'candy\', 0.75, 20), \'water\': Product(\'water\', 1.00, 10), \'chocolate\': Product(\'chocolate\', 1.25, 12) } self.total_money_collected = 0 def restock(self, product_name, quantity): if product_name in self.products: self.products[product_name].stock += quantity logging.info(f\'Restocked {quantity} units of {product_name}. New stock: {self.products[product_name].stock}\') else: logging.error(f\'Restock failed. Product {product_name} not found.\') def collect_money(self): money_collected = self.total_money_collected self.total_money_collected = 0 logging.info(f\'Collected {money_collected}\') return money_collected def purchase(self, selections, money): total_cost = sum(self.products[item].price * selections[item] for item in selections) if money < total_cost: logging.warning(f\'Insufficient funds for purchase. Needed: {total_cost}, Provided: {money}\') return \\"Insufficient funds\\", money change = money - total_cost for item in selections: self.products[item].stock -= selections[item] self.total_money_collected += total_cost logging.info(f\'Transaction successful. Items purchased: {selections}, Total cost: {total_cost}, Change given: {change}\') return \\"Purchase successful\\", change def get_product_stock(self, product_name): if product_name in self.products: return self.products[product_name].stock return None"},{"question":"Write a Python function `rearrange_string(s: str) -> str` that takes a string containing alphanumeric characters and spaces as input. The function should rearrange the string such that all alphabetical characters appear first (maintaining their original order), followed by all numeric characters (also maintaining their original order), and spaces (in their original order) should be ignored. For example: - Input: `s = \\"a1 b2 c3\\"` - Output: `\\"abc123\\"`","solution":"def rearrange_string(s: str) -> str: Rearranges the string s such that all alphabetical characters appear first, followed by all numeric characters, maintaining their original order. Spaces are ignored. alphabets = [char for char in s if char.isalpha()] numbers = [char for char in s if char.isdigit()] return \'\'.join(alphabets) + \'\'.join(numbers)"},{"question":"Develop a Python function that determines if two given strings are anagrams, ignoring spaces, punctuation, and capitalization. Additionally, the function should handle cases where the strings contain numbers or special characters, treating them as valid characters to be considered in the anagram check. The function should handle edge cases such as empty strings, strings that only contain spaces or punctuation, and strings that are already identical after ignoring spaces, punctuation, and capitalization. # Function Signature: ```python def are_anagrams(str1: str, str2: str) -> bool: ``` # Example: ```python are_anagrams(\\"Listen\\", \\"Silent\\") # should return True are_anagrams(\\"Hello, World!\\", \\"dlroW ,olleH\\") # should return True are_anagrams(\\"123, 321!\\", \\"321, 123!\\") # should return True are_anagrams(\\"astronomer\\", \\"moon starer\\") # should return True are_anagrams(\\"The eyes\\", \\"They see\\") # should return True are_anagrams(\\"Dormitory\\", \\"Dirty room\\") # should return True are_anagrams(\\"\\", \\"\\") # should return True are_anagrams(\\"A gentleman\\", \\"Elegant man\\") # should return True ``` # Constraints: - Ignore spaces, punctuation, and capitalization while checking for anagrams. - Consider all characters (including numbers and special characters) as valid for the check. - Handle edge cases as specified. # Implementation Hint: - You may use a function to clean the strings by removing unwanted characters and converting them to lowercase. - Compare the cleaned versions of both strings to determine if they are anagrams. # Additional Task: - Write unit tests to validate your solution. The tests should cover normal cases, edge cases, and error handling. # Example Unit Tests: ```python def test_are_anagrams(): assert are_anagrams(\\"Listen\\", \\"Silent\\") assert are_anagrams(\\"Hello, World!\\", \\"dlroW ,olleH\\") assert are_anagrams(\\"123, 321!\\", \\"321, 123!\\") assert are_anagrams(\\"astronomer\\", \\"moon starer\\") assert are_anagrams(\\"The eyes\\", \\"They see\\") assert are_anagrams(\\"Dormitory\\", \\"Dirty room\\") assert are_anagrams(\\"\\", \\"\\") assert are_anagrams(\\"A gentleman\\", \\"Elegant man\\") assert not are_anagrams(\\"Hello\\", \\"Olele\\") assert not are_anagrams(\\"Hi\\", \\"Bye\\") test_are_anagrams() ```","solution":"import re def are_anagrams(str1: str, str2: str) -> bool: Checks if two strings are anagrams, ignoring spaces, punctuation, and capitalization. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. def clean_string(s: str) -> str: # Remove spaces and punctuation and convert to lowercase return \'\'.join(re.findall(r\'w\', s)).lower() return sorted(clean_string(str1)) == sorted(clean_string(str2))"},{"question":"Write a Python program that reads a list of email addresses from a text file and filters out the invalid email addresses. The valid email addresses should then be saved to a new text file. An email is considered valid if it follows this pattern: it must consist of a local part and a domain part separated by an \'@\' symbol, with the local part not exceeding 64 characters and being non-empty, followed by a domain part which has a maximum length of 255 characters, contains at least one period, and the last portion of the domain (after the last period) should be at least two characters long. The local part may contain alphanumeric characters and special characters such as ! # % & \' * + - / = ? ^ _ ` { | } ~ but not consecutive periods.","solution":"import re def is_valid_email(email): Validates if the given email follows the correct email format. # Define the regular expression for a valid email. local_part = r\\"[a-zA-Z0-9!#%&\'*+/=?^_`{|}~-]+(.[a-zA-Z0-9!#%&\'*+/=?^_`{|}~-]+)*\\" domain_part = r\\"([a-zA-Z0-9](?:[-a-zA-Z0-9]*[a-zA-Z0-9])?.)+[a-zA-Z]{2,}\\" email_regex = f\\"^{local_part}@{domain_part}\\" if re.fullmatch(email_regex, email): local, domain = email.split(\'@\') if len(local) <= 64 and len(domain) <= 255: return True return False def filter_emails(input_file, output_file): Reads emails from the input file, filters out the invalid ones, and writes the valid ones to the output file. with open(input_file, \'r\') as infile: emails = infile.readlines() valid_emails = [email.strip() for email in emails if is_valid_email(email.strip())] with open(output_file, \'w\') as outfile: for email in valid_emails: outfile.write(email + \'n\')"},{"question":"Create a function that takes as input a dictionary where the keys are strings representing usernames and values are lists of integers representing points earned in various games. The function should identify the top scorer and return the username of the highest scorer along with their total points. If there is a tie (two or more users have the same highest total points), return all usernames with the highest score in a list, maintaining the order they appear in the input dictionary. Example: Input: { \\"alice\\": [10, 20, 30], \\"bob\\": [5, 25, 35], \\"charlie\\": [20, 20, 20] } Output: [\\"bob\\"]","solution":"def top_scorer(scores): Returns the username(s) of the highest scorer(s) with their total points. :param scores: Dictionary with usernames as keys and lists of integers representing points as values :return: List of usernames with the highest total points max_score = -1 top_scorers = [] for username, points in scores.items(): total_points = sum(points) if total_points > max_score: max_score = total_points top_scorers = [username] elif total_points == max_score: top_scorers.append(username) return top_scorers"},{"question":"Find the maximum product of any two integers in a given list of integers. If the list contains fewer than two integers, return None. list = [3, 5, -2, 9, -10, 4]","solution":"def max_product_of_two(nums): Returns the maximum product of any two integers in a given list of integers. If the list contains fewer than two integers, return None. if len(nums) < 2: return None # Sort the list nums.sort() # The max product can either be the product of the two largest numbers # or the product of the two smallest numbers (which might produce a # positive product if both are negative). return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Write a function that takes a string containing alphanumeric characters and returns the first non-repeating character. Your solution should have an optimized time complexity. If no non-repeating character is found, return an appropriate message or indicator. Additionally, write logic to handle various edge cases such as an empty string, a string with all repeating characters, or a string where non-repeating characters only appear at the end. Example Input: \\"swiss\\" Expected Output: \\"w\\" Example Input: \\"aabbcc\\" Expected Output: \\"No non-repeating character found\\"","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string s, which contains alphanumeric characters. If no non-repeating character is found, returns \'No non-repeating character found\'. from collections import Counter char_count = Counter(s) for char in s: if char_count[char] == 1: return char return \'No non-repeating character found\'"},{"question":"Design an algorithm that receives an array of integers and a target integer. The algorithm should identify if there are two distinct elements in the array whose sum is equal to the target integer. If such a pair exists, print \\"True\\" and the pair of numbers. If no such pair exists, print \\"False\\". Ensure that the algorithm performs efficiently with both positive and negative integers. # Input: - A single list of integers `arr` - An integer `target` # Output: - \\"True\\" and the pair of numbers if a valid pair is found. - \\"False\\" if no valid pair is found. # Example: ```python input: arr = [2, 7, 11, 15], target = 9 output: True (2, 7) input: arr = [3, 2, 4], target = 6 output: True (2, 4) input: arr = [-1, 4, 3, 9, -2], target = 10 output: False ```","solution":"def find_pair_with_sum(arr, target): Identifies if there are two distinct elements in the array whose sum is equal to the target integer. If such a pair exists, returns (True, (num1, num2)). Otherwise, returns (False, None). num_set = set() for num in arr: complement = target - num if complement in num_set: return True, (complement, num) num_set.add(num) return False, None"},{"question":"Given the following dataset of products and their prices, write a Python function to help an online store owner identify the top n most expensive products. The function should take two parameters: a dictionary where the keys are product names and the values are their corresponding prices, and an integer n that indicates the number of top products to return. The function should return a list of tuples, where each tuple contains the product name and its price, ordered by price in descending order. If n is greater than the number of products available, return all products sorted by price. **Example:** ```python products = { \'laptop\': 999.99, \'smartphone\': 799.99, \'tablet\': 299.99, \'smartwatch\': 199.99, \'camera\': 599.99 } top_products(products, 3) ``` **Expected Output:** ```python [(\'laptop\', 999.99), (\'smartphone\', 799.99), (\'camera\', 599.99)] ``` **Function Signature:** ```python def top_products(products: Dict[str, float], n: int) -> List[Tuple[str, float]]: pass ```","solution":"from typing import Dict, List, Tuple def top_products(products: Dict[str, float], n: int) -> List[Tuple[str, float]]: Returns the top n most expensive products in descending order of price. Parameters: products (Dict[str, float]): A dictionary with product names as keys and prices as values. n (int): The number of top products to return. Returns: List[Tuple[str, float]]: A list of tuples where each tuple contains the product name and its price, ordered by price in descending order. sorted_products = sorted(products.items(), key=lambda item: item[1], reverse=True) return sorted_products[:n]"},{"question":"Create a function that checks whether a given string is a valid identifier in a programming language. The rules for a valid identifier are as follows: 1. It can only contain alphabetic characters (both uppercase and lowercase letters), digits, and underscores (_). 2. It must start with an alphabetic character or an underscore. 3. It must not contain any spaces or special characters other than underscores. Your function should take a string as input and return `True` if it is a valid identifier and `False` otherwise. Additionally, write test cases to ensure the function comprehensively validates different scenarios, including edge cases. Example input and outputs: - \\"validIdentifier_1\\": True - \\"_valid123\\": True - \\"1Invalid_Identifier\\": False (starts with a digit) - \\"invalid identifier\\": False (contains a space) - \\"invalid-identifier\\": False (contains a hyphen)","solution":"import re def is_valid_identifier(identifier): Check if the given string is a valid identifier. Parameters: identifier (str): The string to check. Returns: bool: True if the string is a valid identifier, False otherwise. # A valid identifier must start with an alphabetic character or an underscore and # can contain alphanumeric characters and underscores pattern = r\'^[A-Za-z_][A-Za-z0-9_]*\' return bool(re.match(pattern, identifier))"},{"question":"Write a function that, given a partially filled Sudoku board and a specific row and column, determines if placing a number in that position would violate Sudoku rules. The function should take three arguments: the board (a 2D list representing the 9x9 Sudoku grid), the row index, and the column index, as well as the number to be placed. It should return a Boolean value indicating whether the number can be legally placed without breaking any Sudoku constraints. Consider that the number must not already exist in the same row, column, or 3x3 subgrid. Function Signature: `def can_place_number(board: List[List[int]], row: int, col: int, num: int) -> bool:`","solution":"def can_place_number(board, row, col, num): Determines if placing a number in the given row and column of the Sudoku board would violate any Sudoku rules. # Check if the number is already in the row if num in board[row]: return False # Check if the number is already in the column for i in range(9): if board[i][col] == num: return False # Check if the number is in the corresponding 3x3 subgrid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False # If the number is not found in row, column and subgrid, it can be placed return True"},{"question":"Write a Python function `rotate_array(arr, n)` that takes a list `arr` and an integer `n`, and rotates the elements of the list to the right by `n` positions. If `n` is greater than the length of the list, it should rotate only the number of positions equivalent to `n` modulo the length of the list. Example: ```python rotate_array([1, 2, 3, 4, 5], 2) ``` Output: ``` [4, 5, 1, 2, 3] ```","solution":"def rotate_array(arr, n): Rotates the elements of the array `arr` to the right by `n` positions. If `n` is greater than the length of the array, it rotates only the number of positions equivalent to `n` modulo the length of the array. Parameters: arr (list): The list of elements to be rotated. n (int): The number of positions to rotate the array. Returns: list: The rotated list. if not arr: return [] n = n % len(arr) return arr[-n:] + arr[:-n]"},{"question":"Develop a program that reads a list of integers and groups them into clusters of consecutive sequences. The program should return a list of lists, where each inner list contains a consecutive sequence of integers from the input list. Ensure that the integers within each sequence are sorted in ascending order, and the sequences themselves are sorted according to their first element. The solution should efficiently handle edge cases, such as an empty list or lists with no consecutive sequences. For example: Input: [1, 3, 4, 5, 8, 9, 10, 12] Output: [[1], [3, 4, 5], [8, 9, 10], [12]] Input: [2, 4, 6, 8] Output: [[2], [4], [6], [8]] The algorithm should aim for a time complexity of O(n), where \'n\' is the number of elements in the input list.","solution":"def group_consecutive_numbers(nums): Groups consecutive numbers into clusters. Parameters: nums (list[int]): A list of integers. Returns: list[list[int]]: A list of lists, each containing a consecutive sequence of integers. if not nums: return [] nums.sort() clusters = [] current_cluster = [nums[0]] for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: current_cluster.append(nums[i]) else: clusters.append(current_cluster) current_cluster = [nums[i]] clusters.append(current_cluster) return clusters"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order without using built-in sorting functions.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. Parameters: arr (list): List of integers to sort. Returns: list: Sorted list in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python script that leverages the scikit-learn library to build a simple linear regression model. The script should read a dataset from a CSV file, split the data into training and testing sets, train the model using the training set, and then evaluate its performance on the testing set by printing out the Mean Squared Error (MSE). Ensure that the script accepts the file path of the CSV as a command-line argument and the CSV includes two columns: one for features and one for target values.","solution":"import sys import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def build_and_evaluate_model(csv_file_path): # Read the dataset from the provided CSV file data = pd.read_csv(csv_file_path) # Assume the CSV file has two columns: \'feature\' and \'target\' X = data[[\'feature\']] # Features y = data[\'target\'] # Target values # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the linear regression model model = LinearRegression() model.fit(X_train, y_train) # Predict on the testing set y_pred = model.predict(X_test) # Calculate and print Mean Squared Error (MSE) mse = mean_squared_error(y_test, y_pred) print(f\\"Mean Squared Error (MSE): {mse}\\") if __name__ == \\"__main__\\": # Ensure that a file path is provided as a command-line argument if len(sys.argv) != 2: print(\\"Usage: python script.py <path_to_csv_file>\\") else: csv_file_path = sys.argv[1] build_and_evaluate_model(csv_file_path)"},{"question":"Given a string containing a mix of parentheses - \'(\', \')\', \'{\', \'}\', \'[\' and \']\', write a function that determines if the string contains a valid sequence of correctly matched and nested parentheses. For example: ```python def is_valid_parentheses(s: str) -> bool: # Your code here # Example Usage assert is_valid_parentheses(\\"(){}[]\\") == True assert is_valid_parentheses(\\"([{}])\\") == True assert is_valid_parentheses(\\"(}\\") == False assert is_valid_parentheses(\\"[(])\\") == False assert is_valid_parentheses(\\"[({})](]\\") == False ``` Ensure that your function works for different combinations of parentheses and edge cases such as an empty string.","solution":"def is_valid_parentheses(s: str) -> bool: Determines if the string contains a valid sequence of correctly matched and nested parentheses. Args: s (str): The string containing parentheses Returns: bool: True if the sequence is valid, False otherwise. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Create a function that takes a list of strings and returns a new list containing only the anagrams from the original list. Two strings are considered anagrams if they contain the same characters with the same frequencies. The returned list should maintain the same order as the input list. Implement your solution in Python and provide an example input and output.","solution":"def find_anagrams(word_list): Returns a list of anagrams from the given list of words. Args: word_list (list of str): List of words to check for anagrams. Returns: list of str: List containing only the anagrams from the original list. anagram_dict = {} for word in word_list: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagram_dict: anagram_dict[sorted_word].append(word) else: anagram_dict[sorted_word] = [word] anagrams = [word for words in anagram_dict.values() if len(words) > 1 for word in words] return anagrams"},{"question":"Using Python\'s numpy and pandas libraries, create a DataFrame containing two columns: \'time\' and \'temperature\'. \'time\' should range from 0 to 23 representing hours in a day, and \'temperature\' should be a list of 24 floating-point numbers representing hourly temperature readings. Next, plot a line graph with \'time\' on the x-axis and \'temperature\' on the y-axis using matplotlib.pyplot. Add appropriate labels for both axes, and set the title of the plot to \\"Temperature Throughout the Day\\". Also, customize the line color to be blue and the line style to be dashed.","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt def create_temperature_dataframe(temperatures): Create a DataFrame with \'time\' and \'temperature\' columns. Parameters: temperatures (list): A list of 24 float numbers representing temperatures for each hour of the day. Returns: pd.DataFrame: A pandas DataFrame with \'time\' and \'temperature\' columns. if len(temperatures) != 24: raise ValueError(\\"Temperature list must have 24 elements.\\") df = pd.DataFrame({ \'time\': np.arange(24), \'temperature\': temperatures }) return df def plot_temperature(df): Plot a line graph with \'time\' on the x-axis and \'temperature\' on the y-axis. Parameters: df (pd.DataFrame): A pandas DataFrame with \'time\' and \'temperature\' columns. plt.figure(figsize=(10, 6)) plt.plot(df[\'time\'], df[\'temperature\'], color=\'blue\', linestyle=\'--\') plt.xlabel(\\"Time (hours)\\") plt.ylabel(\\"Temperature (°C)\\") plt.title(\\"Temperature Throughout the Day\\") plt.grid(True) plt.savefig(\\"temperature_plot.png\\") plt.show()"},{"question":"Write a function that, given a string containing only lowercase letters, rearranges its characters such that any two adjacent characters are not the same. If such an arrangement is not possible, return an empty string.","solution":"from heapq import heappop, heappush def rearrange_string(s): Rearranges the characters in the given string such that no two adjacent characters are the same. If such an arrangement is not possible, returns an empty string. if not s: return \\"\\" # Count frequency of each character freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 # Create a max heap of characters based on their frequency max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heappop(max_heap) result.append(char) # Add the previous character back to the heap if it still has count left if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Update previous character and count prev_count, prev_char = count + 1, char # decrease count by 1 rearranged_string = \'\'.join(result) # If the rearranged string length is not same as input string, return empty string if len(rearranged_string) != len(s): return \\"\\" return rearranged_string"},{"question":"Given an array of integers, write a function that returns the number of contiguous subarrays that sum up to a given target value. The function should take two parameters: the array of integers and the target value. Ensure that your solution is efficient, and consider edge cases such as an empty array or an array with only one element. Example: Input: array = [1, 1, 1], target = 2 Output: 2 Explanation: The subarrays [1, 1] at positions (0, 1) and (1, 2) sum to 2.","solution":"def count_subarrays_with_sum(nums, target): Returns the number of contiguous subarrays that sum up to a given target value. count = 0 current_sum = 0 sum_map = {0: 1} for num in nums: current_sum += num if (current_sum - target) in sum_map: count += sum_map[current_sum - target] if current_sum in sum_map: sum_map[current_sum] += 1 else: sum_map[current_sum] = 1 return count"},{"question":"Write a Python function that simulates a basic login system for a small web application. The function should accept a username and password, and then check these credentials against a predefined dictionary of usernames and associated passwords. The function should return a string \\"Login successful\\" if the credentials are correct, and \\"Login failed\\" otherwise. Ensure the solution handles case sensitivity appropriately. For added security, implement a mechanism to lock out the user after three consecutive failed attempts.","solution":"class LoginSystem: def __init__(self, users): Initialize the login system with a dictionary of usernames and passwords. self.users = users self.failed_attempts = {} self.locked_users = {} def login(self, username, password): Checks the username and password against the predefined users dictionary. Returns \\"Login successful\\" if the credentials are correct. Returns \\"Login failed\\" otherwise. Locks the user out after three consecutive failed attempts. # Check if the user is currently locked out if username in self.locked_users and self.locked_users[username]: return \\"User is locked out\\" # Validate the credentials if username in self.users and self.users[username] == password: self.failed_attempts.pop(username, None) # Reset failed attempts on successful login return \\"Login successful\\" else: # Record the failed attempt if username in self.failed_attempts: self.failed_attempts[username] += 1 else: self.failed_attempts[username] = 1 # Lock the user out after 3 failed attempts if self.failed_attempts[username] >= 3: self.locked_users[username] = True return \\"Login failed\\""},{"question":"<p>A robotic vacuum cleaner operates in a rectangular grid room where some grid cells represent obstacles it cannot pass through. The vacuum can move in four directions: up, down, left, and right. The aim is to clean all reachable spaces starting from a given position, and the vacuum turns off when it has visited all possible positions.</p> <p>Write a function <code>clean_room(grid, start)</code> that determines the order of cell visits required to clean the room. Your function should return a list of tuples representing the cell coordinates in the order they are cleaned.</p> <ul> <li><code>grid</code>: A 2D list of integers representing the room layout, where <code>0</code> indicates an empty space, and <code>1</code> indicates an obstacle.</li> <li><code>start</code>: A tuple <code>(x, y)</code> representing the starting position of the vacuum, where <code>x</code> is the row index, and <code>y</code> is the column index.</li> </ul> <p>Your function should minimize the cleaning path length while ensuring all reachable cells are cleaned. If a cell is cleaned more than once due to the path determined, that is acceptable.</p> <p><strong>Constraints:</strong></p> <ul> <li>The room grid dimensions do not exceed 50x50.</li> <li>There is at least one empty space in the grid.</li> <li>The starting position is always an empty space.</li> </ul> <p><strong>Example:</strong></p> <pre> <code> grid = [ [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0] ] start = (0, 0) clean_room(grid, start) # Output: [(0, 0), (1, 0), (1, 1), (1, 2), (2, 2), (2, 1), (3,0), (3, 1), (3, 3)] </code> </pre>","solution":"def clean_room(grid, start): Determines the order of cell visits required to clean the room. def is_valid(x, y, grid, visited): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0 and (x, y) not in visited def dfs(x, y, grid, visited, path): visited.add((x, y)) path.append((x, y)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, grid, visited): dfs(nx, ny, grid, visited, path) visited = set() path = [] start_x, start_y = start dfs(start_x, start_y, grid, visited, path) return path"},{"question":"You are given a function designed to find the smallest number greater than or equal to a target value in a sorted list of integers. Identify the primary logic this code employs, fix any mistakes present, and explain why this logic is suitable for the given task. Additionally, provide an alternative approach to solve this problem and discuss the advantages and disadvantages compared to the original method. Here is the provided code snippet: ```python def findCeiling(arr, target): low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return arr[mid] elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return arr[low] if low < len(arr) else None print(findCeiling([1, 2, 4, 6, 8, 9], 5)) ```","solution":"def findCeiling(arr, target): Returns the smallest number greater than or equal to the target in a sorted list. If such a number doesn\'t exist, returns None. low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return arr[mid] elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return arr[low] if low < len(arr) else None"},{"question":"Evaluate and rearrange a sequence of timestamps from a log in chronological order. Each timestamp is in the format \\"YYYY-MM-DD HH:MM:SS\\". Use an appropriate sorting algorithm to solve this problem efficiently. Ensure the final list maintains the integrity of the original timestamp structure. timestamps = [\\"2023-03-15 13:45:00\\", \\"2022-11-08 09:20:30\\", \\"2023-01-22 17:05:55\\", \\"2021-05-25 14:50:05\\"]","solution":"def sort_timestamps(timestamps): Sorts a list of timestamps in chronological order. :param timestamps: List of timestamp strings in the format \\"YYYY-MM-DD HH:MM:SS\\" :return: List of sorted timestamp strings # Sort the timestamps using Python\'s built-in sorted function sorted_timestamps = sorted(timestamps) return sorted_timestamps"},{"question":"Design an algorithm that dynamically adjusts resource allocation in a distributed computing environment to optimize performance under fluctuating workload conditions. The algorithm should analyze historical and real-time data, predict upcoming workloads, and automatically deploy or retract resources to maintain system stability and efficiency at minimal cost. Demonstrate how your approach can handle scenarios such as unexpected traffic spikes or gradual increase in user engagement over time, while ensuring high availability and low latency.","solution":"import datetime import numpy as np class ResourceAllocator: def __init__(self, min_resources, max_resources): self.min_resources = min_resources self.max_resources = max_resources self.current_resources = min_resources self.historical_data = [] def record_metrics(self, timestamp, workload): Records the metrics - timestamp and workload. self.historical_data.append((timestamp, workload)) def predict_workload(self, current_time): Predicts the workload based on historical data using a simple linear regression model. times = np.array([d[0].timestamp() for d in self.historical_data]).reshape(-1, 1) workloads = np.array([d[1] for d in self.historical_data]) # Using simple linear regression to predict the next workload if len(times) > 1: # Ensure there is enough data to make predictions from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(times, workloads) future_time = np.array([[current_time.timestamp()]]) predicted_workload = model.predict(future_time) return max(0, predicted_workload[0]) else: # Not enough data to predict, return current workload return workloads[-1] if workloads else 0 def adjust_resources(self, current_time, current_workload): Adjust the resources based on the predicted workload. predicted_workload = self.predict_workload(current_time) proposed_resources = int(predicted_workload // 10) # Assuming 1 resource unit per 10 units of workload # Ensuring resources are within the designated range proposed_resources = min(max(self.min_resources, proposed_resources), self.max_resources) self.current_resources = proposed_resources return self.current_resources"},{"question":"Design a function `compress_string(s)` that takes a string `s` as an input and returns a new string where each group of consecutive identical characters in `s` is replaced by a single character followed by the number of repeats. For example, the string `\\"aaabbbbbcc\\"` should be returned as `\\"a3b5c2\\"`. If the compressed string is not shorter than the original string, the function should return the original string.","solution":"def compress_string(s): Compresses the input string by replacing each group of consecutive identical characters with the character followed by the number of its repeats. If the compressed string is not shorter than the original string, it returns the original string. Args: s (str): The input string to be compressed. Returns: str: The compressed string or the original string if compression is not shorter. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Using Python, write a function to generate a list of Fibonacci numbers up to a given number n. The Fibonacci sequence is defined as: ``` F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1 ``` Your function should take an integer n as input and return a list of all Fibonacci numbers less than or equal to n. Additionally, write a code snippet that uses this function to print out the Fibonacci sequence up to 100. Here\'s an example of the expected output for n = 10: ``` [0, 1, 1, 2, 3, 5, 8] ``` Test your function with various values of n to ensure it works correctly.","solution":"def generate_fibonacci_up_to_n(n): Generates a list of Fibonacci numbers up to a given number n. :param n: The upper limit for Fibonacci numbers (inclusive) :return: A list of Fibonacci numbers less than or equal to n if n < 0: return [] fibonacci_list = [] a, b = 0, 1 while a <= n: fibonacci_list.append(a) a, b = b, a + b return fibonacci_list # Example usage: fibonacci_up_to_100 = generate_fibonacci_up_to_n(100) print(fibonacci_up_to_100)"},{"question":"Given an array of integers, write a function in Python that determines whether there is a pair of distinct elements in the array whose sum is equal to a specified target value. The function should return a boolean: `True` if such a pair exists, and `False` otherwise. The function should be efficient in terms of time complexity. Provide a detailed solution including the function signature, algorithm, and a brief explanation. Example: Input: arr = [10, 2, 3, 7, 5], target = 12 Output: True (because 10 + 2 = 12) Input: arr = [1, 2, 3, 4, 5], target = 10 Output: False","solution":"def has_pair_with_sum(arr, target): Determines if there is a pair of distinct elements in the array whose sum equals the target value. Parameters: arr (list): List of integers. target (int): The target sum value. Returns: bool: True if a pair exists that sums to the target, False otherwise. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a function `max_subarray_sum(arr, k)` that returns the maximum sum of k consecutive elements in the array `arr`. **Input:** - `arr`: a list of integers representing the array of numbers. - `k`: an integer indicating the number of consecutive elements to be summed. **Output:** - An integer representing the maximum sum of `k` consecutive elements in the array. **Constraints:** - The length of `arr` is at least `k`. - The length of `arr` is at most `10^5`. - Each element in `arr` is between `-10^4` and `10^4`. - `1 <= k <= len(arr)` **Example:** ```python def max_subarray_sum(arr, k): # Your code here # Example Usage arr = [2, 1, 5, 1, 3, 2] k = 3 print(max_subarray_sum(arr, k)) # Output: 9 arr = [2, 3, 4, 1, 5] k = 2 print(max_subarray_sum(arr, k)) # Output: 7 ``` In the first example, the subarray [5, 1, 3] has the maximum sum of 9. In the second example, the subarray [3, 4] has the maximum sum of 7.","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of k consecutive elements in the array `arr`. # Initialize the sum of the first window max_sum = current_sum = sum(arr[:k]) # Slide the window over the rest of the array for i in range(k, len(arr)): # Update the current sum by sliding the window to the right current_sum += arr[i] - arr[i - k] # Update the maximum sum found so far max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Design a Python function called `find_missing_numbers` that takes a sorted list of integers and returns a list of integers that are missing from the sequence. For example, given the list `[1, 2, 4, 6, 7, 9]`, the function should return `[3, 5, 8]`. Assume the list contains at least two elements, all of which are unique and already in sorted order.","solution":"def find_missing_numbers(arr): Returns a list of integers that are missing in the sequence of a sorted list. missing_numbers = [] for i in range(arr[0], arr[-1] + 1): if i not in arr: missing_numbers.append(i) return missing_numbers"},{"question":"NOTICE Role: You are a backend developer. Your main goal is to write PEP8 compliant, clean, modular, and maintainable Python 3.9 code (or later versions). You can use Django framework for implementing the given task. Code: settings.py Write code with triple quotes, based on the following list and context. 1. Ensure the code is intended to be a reliable and reusable snippet within the larger project. 2. Provide default values for settings, use strong typing, and explicit variables. 3. Follow the \\"Data structures and interface definitions\\" and do not change any design. 4. Consider what should be implemented and provided in this document before writing. 5. Ensure you do not miss any necessary classes or functions required. Context [BOSS: We are building an eCommerce platform and need to set up the necessary configurations for the project, including database, middleware, and other settings.] Product Goals ```python [ \\"Create a robust eCommerce platform\\", \\"Implement necessary configurations for database and middleware\\", \\"Ensure the platform is scalable and maintainable\\" ] ``` Tech Requirements ```python [ \\"The application should use PostgreSQL as the database\\", \\"Middleware should include standard security features\\", \\"Static files should be served efficiently\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class Settings{ +str BASE_DIR +str SECRET_KEY +bool DEBUG +list ALLOWED_HOSTS +list INSTALLED_APPS +list MIDDLEWARE +dict DATABASES +str LANGUAGE_CODE +str TIME_ZONE +bool USE_I18N +bool USE_L10N +bool USE_TZ +str STATIC_URL +str MEDIA_URL +str TEMPLATE_DIR +__init__() } ``` Program call flow ```mermaid sequenceDiagram participant U as User participant S as Settings U->>S: load_settings() S->>U: get_settings() ``` Task list ```python [ \\"Define BASE_DIR to represent the base directory of the project\\", \\"Set SECRET_KEY with a suitable default value for security\\", \\"DEBUG should be set to True by default, for development purposes\\", \\"Include a list of allowed hosts\\", \\"Define the applications to be installed\\", \\"Add necessary middleware components\\", \\"Set up the database configuration for PostgreSQL\\", \\"Include language and time zone settings\\", \\"Define static and media file URLs\\", \\"Specify the template directory\\" ] ``` Anything UNCLEAR The requirement is clear. ----- Code: settings.py ```python import os from pathlib import Path Define the base directory of the project BASE_DIR = Path(__file__).resolve().parent.parent Set the secret key for the project SECRET_KEY = \'django-insecure-*default-secret-key*\' Enable or disable debugging DEBUG = True Define the allowed hosts ALLOWED_HOSTS = [] List of installed applications INSTALLED_APPS = [ \'django.contrib.admin\', \'django.contrib.auth\', \'django.contrib.contenttypes\', \'django.contrib.sessions\', \'django.contrib.messages\', \'django.contrib.staticfiles\', # Add your apps here ] Middleware components MIDDLEWARE = [ \'django.middleware.security.SecurityMiddleware\', \'django.contrib.sessions.middleware.SessionMiddleware\', \'django.middleware.common.CommonMiddleware\', \'django.middleware.csrf.CsrfViewMiddleware\', \'django.contrib.auth.middleware.AuthenticationMiddleware\', \'django.contrib.messages.middleware.MessageMiddleware\', \'django.middleware.clickjacking.XContentOptionsMiddleware\', ] Database configuration DATABASES = { \'default\': { \'ENGINE\': \'django.db.backends.postgresql\', \'NAME\': \'your_database_name\', \'USER\': \'your_database_user\', \'PASSWORD\': \'your_database_password\', \'HOST\': \'localhost\', \'PORT\': \'5432\', } } Language and timezone settings LANGUAGE_CODE = \'en-us\' TIME_ZONE = \'UTC\' USE_I18N = True USE_L10N = True USE_TZ = True URL for serving static files STATIC_URL = \'/static/\' URL for serving media files MEDIA_URL = \'/media/\' Path to the templates directory TEMPLATE_DIR = os.path.join(BASE_DIR, \'templates\') Define templates settings TEMPLATES = [ { \'BACKEND\': \'django.template.backends.django.DjangoTemplates\', \'DIRS\': [TEMPLATE_DIR], \'APP_DIRS\': True, \'OPTIONS\': { \'context_processors\': [ \'django.template.context_processors.debug\', \'django.template.context_processors.request\', \'django.contrib.auth.context_processors.auth\', \'django.contrib.messages.context_processors.messages\', ], }, }, ] WSGI application WSGI_APPLICATION = \'your_project_name.wsgi.application\' ```","solution":"import os from pathlib import Path def load_settings(): Function to load and return Django settings. # Define the base directory of the project BASE_DIR = Path(__file__).resolve().parent.parent # Set the secret key for the project SECRET_KEY = \'django-insecure-*default-secret-key*\' # Enable or disable debugging DEBUG = True # Define the allowed hosts ALLOWED_HOSTS = [] # List of installed applications INSTALLED_APPS = [ \'django.contrib.admin\', \'django.contrib.auth\', \'django.contrib.contenttypes\', \'django.contrib.sessions\', \'django.contrib.messages\', \'django.contrib.staticfiles\', # Add your apps here ] # Middleware components MIDDLEWARE = [ \'django.middleware.security.SecurityMiddleware\', \'django.contrib.sessions.middleware.SessionMiddleware\', \'django.middleware.common.CommonMiddleware\', \'django.middleware.csrf.CsrfViewMiddleware\', \'django.contrib.auth.middleware.AuthenticationMiddleware\', \'django.contrib.messages.middleware.MessageMiddleware\', \'django.middleware.clickjacking.XContentOptionsMiddleware\', ] # Database configuration DATABASES = { \'default\': { \'ENGINE\': \'django.db.backends.postgresql\', \'NAME\': \'your_database_name\', \'USER\': \'your_database_user\', \'PASSWORD\': \'your_database_password\', \'HOST\': \'localhost\', \'PORT\': \'5432\', } } # Language and timezone settings LANGUAGE_CODE = \'en-us\' TIME_ZONE = \'UTC\' USE_I18N = True USE_L10N = True USE_TZ = True # URL for serving static files STATIC_URL = \'/static/\' # URL for serving media files MEDIA_URL = \'/media/\' # Path to the templates directory TEMPLATE_DIR = os.path.join(BASE_DIR, \'templates\') # Define templates settings TEMPLATES = [ { \'BACKEND\': \'django.template.backends.django.DjangoTemplates\', \'DIRS\': [TEMPLATE_DIR], \'APP_DIRS\': True, \'OPTIONS\': { \'context_processors\': [ \'django.template.context_processors.debug\', \'django.template.context_processors.request\', \'django.contrib.auth.context_processors.auth\', \'django.contrib.messages.context_processors.messages\', ], }, }, ] # WSGI application WSGI_APPLICATION = \'your_project_name.wsgi.application\' # Return all settings as a dictionary return { \'BASE_DIR\': BASE_DIR, \'SECRET_KEY\': SECRET_KEY, \'DEBUG\': DEBUG, \'ALLOWED_HOSTS\': ALLOWED_HOSTS, \'INSTALLED_APPS\': INSTALLED_APPS, \'MIDDLEWARE\': MIDDLEWARE, \'DATABASES\': DATABASES, \'LANGUAGE_CODE\': LANGUAGE_CODE, \'TIME_ZONE\': TIME_ZONE, \'USE_I18N\': USE_I18N, \'USE_L10N\': USE_L10N, \'USE_TZ\': USE_TZ, \'STATIC_URL\': STATIC_URL, \'MEDIA_URL\': MEDIA_URL, \'TEMPLATE_DIR\': TEMPLATE_DIR, \'TEMPLATES\': TEMPLATES, \'WSGI_APPLICATION\': WSGI_APPLICATION, }"},{"question":"Create a function that takes a list of integers and an integer `k` and returns True if the list contains two different elements that add up to `k`, and False otherwise. 1) Implement the function `contains_pair_with_sum(arr, k)`. 2) The function should accept a list of integers `arr` and an integer `k`. 3) The function should return True if there are two distinct integers in the list that sum up to `k`, and False otherwise. 4) Optimize the function for time complexity. # Examples: `contains_pair_with_sum([1, 2, 3, 9], 8)` should return `False`. `contains_pair_with_sum([1, 2, 4, 4], 8)` should return `True`.","solution":"def contains_pair_with_sum(arr, k): Returns True if there are two distinct integers in the list that sum up to k, False otherwise. seen = set() for num in arr: if (k - num) in seen: return True seen.add(num) return False"},{"question":"Use a loop to iterate over the numbers from 1 to 100. If a number is divisible by 3, print \\"Fizz\\". If a number is divisible by 5, print \\"Buzz\\". If a number is divisible by both 3 and 5, print \\"FizzBuzz\\". Otherwise, print the number itself. Note: Ensure to use appropriate Python syntax and indentation for defining loops and conditionals.","solution":"def fizzbuzz(): Prints \\"Fizz\\" for numbers divisible by 3, \\"Buzz\\" for numbers divisible by 5, \\"FizzBuzz\\" for numbers divisible by both 3 and 5, and the number itself otherwise. result = [] for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Implement a function that receives a list of integers representing a sequence of stock prices measured each day. Your task is to determine the maximum profit that can be achieved by buying on one day and selling on a later day. If no profit can be made, return 0. For instance, given the list [7, 1, 5, 3, 6, 4], the maximum profit is 5 (buying at 1 and selling at 6).","solution":"def max_profit(prices): Determines the maximum profit that can be achieved by buying on one day and selling on a later day. Parameters: prices (list of int): A list of stock prices. Returns: int: The maximum profit possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function that receives an array of positive integers and returns a new array where each element is the factorial of the corresponding element in the input array. Your function should handle arrays of varying sizes efficiently. Additionally, ensure that the function handles edge cases, such as an empty array or a single-element array, correctly. The implementation should be accomplished without using recursion. Example: Input: [1, 2, 3, 4, 5] Output: [1, 2, 6, 24, 120] Input: [0, 1, 2] Output: [1, 1, 2]","solution":"def factorial_array(arr): Returns a new array where each element is the factorial of the corresponding element in the input array. def factorial(n): result = 1 for i in range(2, n + 1): result *= i return result return [factorial(x) for x in arr]"},{"question":"Write a Python function `find_symmetric_pairs` that takes a list of tuples representing pairs of integers and returns a list of symmetric pairs. A pair (a, b) is considered symmetric if there exists another pair (b, a) in the list. # Example **Input:** ```python pairs = [(1, 2), (3, 4), (5, 9), (2, 1), (7, 8)] ``` **Output:** ```python [(1, 2), (2, 1)] ``` You need to implement the function such that it efficiently identifies all symmetric pairs given an input list. The function signature should be: ```python def find_symmetric_pairs(pairs: list) -> list: pass ``` # Constraints 1. The input list will contain at most `10^5` pairs. 2. Each element in the pairs will be a non-negative integer not exceeding `10^9`. # Guidelines - Optimize for time and space complexity. - Ensure that the returned list of symmetric pairs does not contain duplicates. - You can assume input pairs are unique, i.e., there will not be any duplicate pair `(a, b)` in the input list.","solution":"def find_symmetric_pairs(pairs: list) -> list: Returns a list of symmetric pairs from the input list. A pair (a, b) is considered symmetric if there exists another pair (b, a) in the list. seen_pairs = set() symmetric_pairs = [] for a, b in pairs: if (b, a) in seen_pairs: symmetric_pairs.append((a, b)) symmetric_pairs.append((b, a)) seen_pairs.add((a, b)) return list(set(symmetric_pairs))"},{"question":"You are given an array of integers, `nums`, and a target value `target`. Your task is to find all unique combinations in `nums` where the sum of the numbers equals `target`. Each number in `nums` can only be used once in each combination. The solution set must not contain duplicate combinations. The function signature should be: `List[List[int]] combinationSum2(int[] nums, int target)` Example 1: Input: nums = [10, 1, 2, 7, 6, 1, 5], target = 8 Output: [[1,1,6], [1,2,5], [1,7], [2,6]] Explanation: The unique combinations that sum up to 8 are [1,1,6], [1,2,5], [1,7], and [2,6]. These combinations are unique, and each number in `nums` is used at most once. Example 2: Input: nums = [2,5,2,1,2], target = 5 Output: [[1,2,2], [5]] Explanation: The unique combinations that sum up to 5 are [1,2,2] and [5]. Note that the combination [2,2,1] is not considered unique as it contains the same elements as [1,2,2]. Notes: - All numbers (including target) will be positive integers. - The solution set must not contain duplicate combinations. - The order of elements in the combinations does not matter.","solution":"from typing import List def combinationSum2(nums: List[int], target: int) -> List[List[int]]: def backtrack(start, end, temp_list, target_sum): if target_sum == 0: result.append(temp_list[:]) return if target_sum < 0: return for i in range(start, end): if i > start and nums[i] == nums[i-1]: continue temp_list.append(nums[i]) backtrack(i + 1, end, temp_list, target_sum - nums[i]) temp_list.pop() nums.sort() result = [] backtrack(0, len(nums), [], target) return result"},{"question":"Write a function that takes an unsorted array of integers and returns the length of the longest subsequence where the differences between consecutive elements are either all positive or all negative (strictly increasing or strictly decreasing). The solution should efficiently handle arrays of significant size, leveraging appropriate data structures and algorithms to optimize performance. Consider edge cases, such as arrays with single elements or multiple identical elements, in your implementation.","solution":"def longest_monotonic_subsequence(arr): if not arr: return 0 n = len(arr) if n == 1: return 1 # Initialize variables to keep track of the longest increasing and decreasing subsequences longest_inc = 1 longest_dec = 1 # Initialize current lengths of increasing and decreasing subsequences current_inc = 1 current_dec = 1 # Traverse the array for i in range(1, n): if arr[i] > arr[i - 1]: current_inc += 1 longest_inc = max(longest_inc, current_inc) current_dec = 1 # Reset decreasing subsequence count elif arr[i] < arr[i - 1]: current_dec += 1 longest_dec = max(longest_dec, current_dec) current_inc = 1 # Reset increasing subsequence count else: # Reset both if elements are equal because we need strictly increasing or decreasing current_inc = 1 current_dec = 1 return max(longest_inc, longest_dec)"},{"question":"Implement a function that simulates a simple file system. The file system has the following operations: 1. `createPath(path: string, value: number) -> boolean`: This creates a new path and assigns a value to it. The path is guaranteed to be a valid absolute path (i.e., it starts with a `/` and any intermediary directories must already exist). Returns `true` if the path was successfully created, and `false` if the path already exists or one of the intermediary directories does not exist. 2. `get(path: string) -> int`: This retrieves the value of a given path. Returns the value if the path exists, and `-1` if the path does not exist. Example: ```python FileSystem fs = FileSystem() fs.createPath(\\"/a\\", 1) -> True fs.get(\\"/a\\") -> 1 fs.createPath(\\"/a/b\\", 2) -> True fs.get(\\"/a/b\\") -> 2 fs.createPath(\\"/c/d\\", 1) -> False // because \\"/c\\" does not exist fs.get(\\"/c\\") -> -1 ``` Your solution should account for the efficiency of path lookup and creation. Consider the data structures that will allow quick retrieval and insertion in your file system simulation.","solution":"class FileSystem: def __init__(self): self.paths = {} def createPath(self, path: str, value: int) -> bool: if path in self.paths: return False parent_path = path.rsplit(\'/\', 1)[0] if parent_path != \\"\\" and parent_path not in self.paths: return False self.paths[path] = value return True def get(self, path: str) -> int: return self.paths.get(path, -1)"},{"question":"Given a list of integers, determine the contiguous subarray (containing at least one number) which has the largest sum and return its sum. If the list is empty, return 0. Example: Input: `[-2,1,-3,4,-1,2,1,-5,4]` Output: `6` Explanation: The contiguous subarray [4,-1,2,1] has the largest sum = 6. Input: `[1]` Output: `1` Input: `[]` Output: `0`","solution":"def max_subarray_sum(nums): Given a list of integers, determines the contiguous subarray with the largest sum and returns its sum. If the list is empty, returns 0. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that simulates a simplified online bookstore inventory system. Your function should take a list of tuples as input, where each tuple contains a book title (string), the author (string), and the number of copies in store (integer). The function should support the following operations: 1. **Add a book** - Given a book title, author, and number of copies, add the book to the inventory. If the book already exists, update the number of copies. 2. **Remove a book** - Given a book title, remove it from the inventory. If the book does not exist, output an appropriate message. 3. **Search for a book** - Given a book title, return the author and number of copies available. If the book does not exist, output an appropriate message. The function should return the updated inventory after each operation. **Example input-output pairs:** **Input:** ```python inventory = [ (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 5), (\\"1984\\", \\"George Orwell\\", 8), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 3) ] ``` **Operations:** ```python add_book(inventory, \\"Brave New World\\", \\"Aldous Huxley\\", 7) remove_book(inventory, \\"1984\\") search_book(inventory, \\"The Great Gatsby\\") search_book(inventory, \\"Moby Dick\\") ``` **Output:** ``` Inventory after adding \\"Brave New World\\", \\"Aldous Huxley\\", 7: [(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 5), (\\"1984\\", \\"George Orwell\\", 8), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 3), (\\"Brave New World\\", \\"Aldous Huxley\\", 7)] Inventory after removing \\"1984\\": [(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 5), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 3), (\\"Brave New World\\", \\"Aldous Huxley\\", 7)] Search for \\"The Great Gatsby\\": (\\"F. Scott Fitzgerald\\", 5) Search for \\"Moby Dick\\": \\"Book not found\\" ``` Implement your solution in a Python function `bookstore_operations` taking a list and a list of operations as inputs. Each operation can be represented as a dictionary with keys \'operation\', \'title\', \'author\' (if applicable), and \'copies\' (if applicable). The function should return the results of \'search\' operations and the final inventory.","solution":"def bookstore_operations(inventory, operations): Simulate an online bookstore inventory system. result = [] for op in operations: if op[\'operation\'] == \'add\': title = op[\'title\'] author = op[\'author\'] copies = op[\'copies\'] updated = False for i, book in enumerate(inventory): if book[0] == title: inventory[i] = (book[0], book[1], book[2] + copies) updated = True break if not updated: inventory.append((title, author, copies)) elif op[\'operation\'] == \'remove\': title = op[\'title\'] inventory = [book for book in inventory if book[0] != title] elif op[\'operation\'] == \'search\': title = op[\'title\'] found = False for book in inventory: if book[0] == title: result.append((book[1], book[2])) found = True break if not found: result.append(\\"Book not found\\") return result, inventory"},{"question":"写一段程序，以查找列表中的第二大数字 def find_second_largest(nums): if len(nums) < 2: raise ValueError(\\"列表中应至少有两个不同的数字\\") first, second = float(\'-inf\'), float(\'-inf\') for number in nums: if number > first: second = first first = number elif first > number > second: second = number return second","solution":"def find_second_largest(nums): Finds the second largest number in a list of numbers. if len(nums) < 2: raise ValueError(\\"列表中应至少有两个不同的数字\\") first, second = float(\'-inf\'), float(\'-inf\') for number in nums: if number > first: second = first first = number elif first > number > second: second = number if second == float(\'-inf\'): raise ValueError(\\"列表中应至少有两个不同的数字\\") return second"},{"question":"**[Question]:** Write a Python function to find the longest substring of a given string that contains at most k distinct characters. The function should return both the length of this substring and the substring itself. Additionally, provide a time complexity analysis for your solution. Discuss any potential improvements and edge cases that might affect the performance of your algorithm. Finally, write a few test cases to validate your function.","solution":"def longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters and the substring itself. if k == 0 or not s: return 0, \\"\\" start = 0 max_len = 0 max_substr = \\"\\" char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > k: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 if end - start + 1 > max_len: max_len = end - start + 1 max_substr = s[start:end+1] return max_len, max_substr"},{"question":"Develop a function that accepts a list of integers and returns the sum of the unique integers that appear exactly twice in the list. You should not use any external libraries or built-in functions that directly simplify this task. def sum_of_unique_twos(lst: List[int]) -> int: Compute the sum of unique integers that occur exactly twice in the provided list. Args: lst (List[int]): The list of integers. Returns: int: The sum of the unique integers that appear exactly twice.","solution":"def sum_of_unique_twos(lst): Compute the sum of unique integers that occur exactly twice in the provided list. Args: lst (List[int]): The list of integers. Returns: int: The sum of the unique integers that appear exactly twice. counts = {} for num in lst: if num in counts: counts[num] += 1 else: counts[num] = 1 result = 0 for num, count in counts.items(): if count == 2: result += num return result"},{"question":"Construct a function that assesses whether a given string representation of a mathematical expression is correctly parenthesized. The function should examine the usage of different types of parentheses, including round `()`, square `[]`, and curly `{}`, and determine if each opening parenthesis has a corresponding and correctly matching closing parenthesis. The expressions can include any number of nested and sequential parentheses, and the function should accurately account for their proper pairing and order. The input will be restricted to containing only digits, arithmetic operators (`+, -, *, /`), and the three types of parentheses. If the expression is well-parenthesized, the function should return `True`; otherwise, it should return `False`.","solution":"def is_well_parenthesized(expression): Checks if a given string representation of a mathematical expression is correctly parenthesized. :param expression: String representation of the input expression. :return: True if the expression is well parenthesized, False otherwise. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in expression: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack.pop() != matching_parentheses[char]: return False return not stack"},{"question":"Given a collection of \'N\' people standing in a circle, where each person has a distinct position numbered from 1 to N in a clockwise direction. A counting-out game is played where every k-th person is eliminated until only one person remains. The process starts with the first person and proceeds around the circle to eliminate every k-th person. For example, if N=7 and k=3, the elimination process would be as follows (positions shown sequentially each round): 3, 6, 2, 7, 5, 1 - thus leaving position 4 to be the last person standing. Write a function `lastPersonStanding(N: int, k: int) -> int` to determine the position of the last person standing given the total number of people \'N\' and the step count \'k\'. **Examples:** ```python assert lastPersonStanding(7, 3) == 4 assert lastPersonStanding(5, 2) == 3 ``` **Constraints:** 1 <= N <= 10^5 1 <= k <= 10^5 **Notes:** - Consider optimal strategies to handle large inputs efficiently. - This problem is a variation of the well-known Josephus problem and may require recursive or iterative approaches using techniques to reduce time complexity.","solution":"def lastPersonStanding(N: int, k: int) -> int: Returns the position of the last person standing in the Josephus problem. # Base case: if there\'s only one person, they are the last one standing if N == 1: return 1 else: # Recursive step using the Josephus formula # The position in a circle of size N for Jose(N, k) is: # (lastPersonStanding(N-1, k) + k - 1) % N + 1 return (lastPersonStanding(N - 1, k) + k - 1) % N + 1"},{"question":"Given an integer array, find a subarray that has the maximum sum among all subarrays and print the starting and ending indices of this subarray. If there are multiple subarrays with the same maximum sum, print any one of them. Here is an example input and its expected output: ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] ``` Expected output: ``` (3, 6) ``` This subarray has the maximum sum of 6 (i.e., `[4, -1, 2, 1]`). Complete the function `max_subarray_indices` to achieve this. ```python def max_subarray_indices(arr): max_sum = float(\'-inf\') curr_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(arr)): if curr_sum <= 0: temp_start = i curr_sum = arr[i] else: curr_sum += arr[i] if curr_sum > max_sum: max_sum = curr_sum start = temp_start end = i return (start, end) # Example usage: arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(max_subarray_indices(arr)) # Output should be (3, 6) ```","solution":"def max_subarray_indices(arr): max_sum = float(\'-inf\') curr_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(arr)): if curr_sum <= 0: temp_start = i curr_sum = arr[i] else: curr_sum += arr[i] if curr_sum > max_sum: max_sum = curr_sum start = temp_start end = i return (start, end) # Example usage: arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(max_subarray_indices(arr)) # Output should be (3, 6)"},{"question":"Write a function called `reverse_words` that takes a string as input and returns a new string with all the words reversed but the order of the words remains the same. Words are defined as sequences of non-space characters. For example, if the input is \\"hello world\\", the output should be \\"olleh dlrow\\". Consider punctuation as part of the word. Example: ``` reverse_words(\\"The quick, brown fox\\") should return \\"ehT ,kciuq nworb xof\\" ```","solution":"def reverse_words(s): Reverses each word in the string `s` while maintaining the order of the words. return \' \'.join(word[::-1] for word in s.split()) # Example usage print(reverse_words(\\"The quick, brown fox\\")) # Output: \\"ehT ,kciuq nworb xof\\""},{"question":"Create a function named `reverse_words` that takes a single string as an argument. The input string consists of words separated by spaces. The function should return a new string with the words in reversed order. Ensure that the order of characters within each word remains the same. For instance, given the input string \\"hello world\\", the function should return \\"world hello\\". Pay attention to leading and trailing spaces, and ensure your function handles multiple spaces between words correctly. ```python def reverse_words(sentence): # Your code goes here # Example usage: print(reverse_words(\\"The quick brown fox\\")) # Output: \\"fox brown quick The\\" ```","solution":"def reverse_words(sentence): Returns a new string with the words in reversed order. Leading, trailing, and multiple spaces between words are handled correctly. # Split the sentence by spaces words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list back into a string with a single space as separator return \' \'.join(reversed_words)"},{"question":"Design and implement a function that takes a 2D matrix and returns the transposed version of it. The transpose of a matrix is obtained by swapping the matrix\'s rows and columns. Ensure your solution efficiently handles matrices that might be non-square (i.e., the number of rows is not necessarily equal to the number of columns). Your function should have a time complexity of O(m * n), where m is the number of rows and n is the number of columns. ```python def transpose_matrix(matrix): Returns the transpose of a given 2D matrix. Parameters: matrix (list of list of int): The 2D matrix to transpose Returns: list of list of int: The transposed 2D matrix if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) transpose = [] for c in range(cols): new_row = [] for r in range(rows): new_row.append(matrix[r][c]) transpose.append(new_row) return transpose ```","solution":"def transpose_matrix(matrix): Returns the transpose of a given 2D matrix. Parameters: matrix (list of list of int): The 2D matrix to transpose Returns: list of list of int: The transposed 2D matrix if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) transpose = [] for c in range(cols): new_row = [] for r in range(rows): new_row.append(matrix[r][c]) transpose.append(new_row) return transpose"},{"question":"Develop a program that takes a list of integers as input and determines whether the list forms a zigzag pattern. A list forms a zigzag pattern if each element is either strictly greater than both its neighbors or strictly less than both its neighbors. For instance, [1, 3, 2, 4, 3] is a zigzag pattern. Your program should print \\"True\\" if the list forms a zigzag pattern and \\"False\\" otherwise. This task will test knowledge of array manipulation and conditional logic. Any programming language can be used, but ensure that your solution handles edge cases, such as very short lists. Please provide unit tests for your solution to validate the implementation.","solution":"def is_zigzag(lst): Determine if a list forms a zigzag pattern. Args: lst (list): A list of integers. Returns: bool: True if the list forms a zigzag pattern, False otherwise. if len(lst) < 2: return True for i in range(1, len(lst) - 1): if not ((lst[i] > lst[i-1] and lst[i] > lst[i+1]) or (lst[i] < lst[i-1] and lst[i] < lst[i+1])): return False return True"},{"question":"Write a Python function that takes an integer as input and returns a list of all prime numbers less than the given integer.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than the given integer n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a Python function that takes a non-negative integer as input and returns the largest integer whose factorial is less than or equal to the input number. The function should find the largest value `n` such that `n! ≤ input_number`. For example: - If the input is `10`, the function should return `3` (since `3! = 6` and `4! = 24` which is greater than 10). - If the input is `120`, the function should return `5` (since `5! = 120` and `6! = 720` which is greater than 120). Your task is to implement the function `largest_factorial_n(input_number)` that accomplishes this: ```python def largest_factorial_n(number: int) -> int: pass ```","solution":"def largest_factorial_n(number: int) -> int: Returns the largest integer n such that n! ≤ number. if number < 1: return 0 factorial = 1 n = 1 while True: next_factorial = factorial * n if next_factorial > number: return n - 1 factorial = next_factorial n += 1"},{"question":"Create a function in Python that takes a string containing an arithmetic expression and evaluates the expression using the operator precedence (`+`, `-`, `*`, `/`). Ensure the function handles parentheses correctly to override the typical precedence rules when necessary. Use stack data structures to achieve this. Additionally, provide test cases to demonstrate the function’s correct behavior.","solution":"def evaluate_expression(expression): Evaluate a string arithmetic expression with +, -, *, / and parentheses. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def precedence(operator): if operator in (\'+\', \'-\'): return 1 if operator in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Develop a Python function that takes a list of integers as input and returns a new list with all the prime numbers from the original list sorted in descending order. Ensure that your function handles edge cases, such as an empty list or a list with no prime numbers, appropriately.","solution":"def is_prime(n): Helper function that checks if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def filter_and_sort_primes(nums): Returns a new list with all the prime numbers from the original list sorted in descending order. primes = [num for num in nums if is_prime(num)] return sorted(primes, reverse=True)"},{"question":"Write a function in Python that accepts a dictionary where the keys are strings and the values are lists of integers. Your task is to return a new dictionary where each key from the original dictionary maps to the sum of the elements in its corresponding list. If a list is empty, the sum should be zero. Ensure that your solution efficiently handles large dictionaries and lists.","solution":"def sum_of_values(d): Returns a new dictionary where each key from the original dictionary maps to the sum of the elements in its corresponding list. If a list is empty, the sum should be zero. :param d: Dictionary with keys as strings and values as lists of integers :return: Dictionary with the same keys and the sum of the list of integers as values return {key: sum(value) for key, value in d.items()}"},{"question":"Write a function in Python that takes a string as an input and returns the same string with its characters reversed except for the digits which should remain in their original positions. For example, the input \\"a1b2c3d\\" should return \\"d1c2b3a\\". Ensure that your implementation is efficient and does not use Python\'s built-in reversed() function or slice notation for string reversal.","solution":"def reverse_except_digits(s): Returns the input string with its characters reversed except for the digits which should remain in their original positions. # Create a list from the string to manipulate characters s_list = list(s) # Two pointers to scan the string left = 0 right = len(s) - 1 while left < right: # Increment left pointer if it\'s on a digit if s_list[left].isdigit(): left += 1 continue # Decrement right pointer if it\'s on a digit if s_list[right].isdigit(): right -= 1 continue # Swap the characters at left and right positions s_list[left], s_list[right] = s_list[right], s_list[left] # Move both pointers towards the center left += 1 right -= 1 return \'\'.join(s_list)"},{"question":"Write a function that determines if a given string is a valid mathematical expression. The expression will contain digits, operators (+, -, *, /), and parentheses. The function should return `true` if the expression is valid and `false` otherwise. A valid expression: 1. Must not contain any characters other than digits (0-9), operators (+, -, *, /), and parentheses. 2. Must not have any misplaced parentheses (i.e., every open parenthesis `(` must have a corresponding close parenthesis `)`). 3. Must not have any consecutive operators (e.g., \\"1++2\\", \\"2**3\\" are invalid). 4. Must not have operators at the beginning or end of the expression (e.g., \\"-1+2\\", \\"3+4-\\" are invalid). 5. Must not have any redundant zeros (e.g., \\"03+4\\" is invalid, while \\"3+04\\" is valid in some contexts, it\'s considered invalid here). For example: Examples 1: Input: s = \\"3+5*2-(8/4)\\" Output: true Explanation: This is a valid mathematical expression, so return true. Examples 2: Input: s = \\"3++5\\" Output: false Explanation: This is an invalid mathematical expression due to consecutive operators, so return false. Examples 3: Input: s = \\"5*(4-2\\" Output: false Explanation: This is an invalid mathematical expression due to mismatched parentheses, so return false. Examples 4: Input: s = \\"7/03\\" Output: false Explanation: This is an invalid mathematical expression due to leading zero in the operand, so return false. Examples 5: Input: s = \\"5\\" Output: true Explanation: A single number is a valid mathematical expression, so return true. Constraints: - The length of the string `s` is at most 100. - `s` consists only of digits (0-9), `+`, `-`, `*`, `/`, and parentheses `(` and `)`.","solution":"def is_valid_math_expression(s): Determines if a given string is a valid mathematical expression. if not s: return False valid_chars = set(\'0123456789+-*/()\') operators = set(\'+-*/\') parentheses_stack = [] last_char = \'\' index = 0 while index < len(s): char = s[index] if char not in valid_chars: return False if char in operators: if index == 0 or index == len(s)-1: return False if last_char in operators or last_char == \'(\': return False elif char == \'(\': parentheses_stack.append(char) elif char == \')\': if not parentheses_stack or parentheses_stack[-1] != \'(\': return False parentheses_stack.pop() elif char in \'0123456789\': if last_char == \'0\' and (index == 1 or s[index-2] in operators or s[index-2] == \'(\'): return False last_char = char index += 1 if parentheses_stack: return False return True"},{"question":"Assuming you have a list of tuples, where each tuple consists of a student\'s name and their score in mathematics, write a Python function `find_top_students` that takes this list and an integer `N` as input and returns a list of names of the top `N` students with the highest scores. Ensure the names are returned in descending order of their scores. If two students have the same score, prioritize them by their names in alphabetical order. For example, given the list `[(\'John\', 88), (\'Emma\', 95), (\'Lucas\', 95), (\'Olivia\', 92)]` and `N=3`, the function should return `[\'Emma\', \'Lucas\', \'Olivia\']`. ```python def find_top_students(students, N): # Your code here ```","solution":"def find_top_students(students, N): Returns a list of the top N students with the highest scores. If two students have the same score, prioritize them by their names in alphabetical order. Parameters: students (list of tuples): Each tuple consists of a student\'s name and their math score. N (int): The number of top students to return. Returns: list: A list of names of the top N students. # Sort the student tuples first by score in descending order then by name in ascending order sorted_students = sorted(students, key=lambda x: (-x[1], x[0])) # Extract the names of the top N students top_students_names = [student[0] for student in sorted_students[:N]] return top_students_names"},{"question":"Write a Python program to check if a given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if the number of each character with odd counts does not exceed one. For example, \\"civic\\", \\"ivicc\\", and \\"aabb\\" can be rearranged to form palindromes, while \\"abc\\" and \\"aacbb\\" cannot. Input: \\"aabbccdd\\" Output: True Input: \\"abcd\\" Output: False","solution":"def can_form_palindrome(s): This function checks whether a given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if the number of each character with odd counts does not exceed one. from collections import Counter char_counts = Counter(s) odd_counts = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_counts <= 1"},{"question":"Write a Python function that accepts an integer list and returns a new list with all the even numbers squared and odd numbers left unchanged. Do not use any built-in functions or libraries for list processing.","solution":"def process_list(numbers): Returns a new list where all even numbers are squared and odd numbers are left unchanged. :param numbers: List of integers :return: List of integers with processed numbers result = [] for num in numbers: if num % 2 == 0: result.append(num * num) else: result.append(num) return result"},{"question":"You are tasked with implementing a function that validates email addresses from a given list. A valid email address must follow these rules: 1. It must contain exactly one \\"@\\" symbol. 2. The domain name must be at least 2 characters long and contain only alphanumeric characters or hyphens but must not start or end with a hyphen. 3. The top-level domain must be at least 2 characters long and contain only alphabetic characters. If the input list contains invalid email addresses, the function should return a list of those invalid emails. Additionally, handle errors for non-string values or lists containing more than 1000 email addresses. Below is a sample of an erroneous function. Correct and enhance it. #Erroneous Code: ```python emails = [\\"user@example.com\\", \\"admin@-site-.-com\\", \\"valid@domain.com\\", \\"invalid@site.c\\", 123, \\"missingatsign.com\\"] def validate_emails(email_list): invalid_emails = [] for email in email_list: if \\"@\\" in email: local, domain = email.split(\\"@\\") if len(domain) > 2 and domain.split(\\".\\")[1].isalpha(): continue invalid_emails.append(email) return invalid_emails result = validate_emails(emails) print(result) ```","solution":"import re def validate_emails(email_list): Validates a list of emails according to the specified rules. Args: email_list (list): List of email addresses to validate. Returns: list: List of invalid email addresses. if not isinstance(email_list, list): raise ValueError(\\"Input must be a list.\\") if len(email_list) > 1000: raise ValueError(\\"List cannot contain more than 1000 email addresses.\\") invalid_emails = [] email_regex = re.compile( r\'^([^@s]+)@(([a-zA-Z0-9-]+.)+[a-zA-Z]{2,})\' ) for email in email_list: if not isinstance(email, str) or not email_regex.match(email): invalid_emails.append(email) else: domain = email.split(\\"@\\")[1] domain_parts = domain.split(\\".\\") for part in domain_parts: if len(part) < 2 or part.startswith(\\"-\\") or part.endswith(\\"-\\"): invalid_emails.append(email) break return invalid_emails"},{"question":"Develop a Python function that takes a list of dictionaries representing sales data and returns the total sales for each product. Each dictionary in the list contains two keys: \'product\' and \'amount\'. The function should return a dictionary where the keys represent unique products and the values represent the total sales for each product. Example: ```python sales_data = [ {\'product\': \'apple\', \'amount\': 10}, {\'product\': \'banana\', \'amount\': 15}, {\'product\': \'apple\', \'amount\': 25} ] generate_sales_report(sales_data) ``` Output: ```python {\'apple\': 35, \'banana\': 15} ```","solution":"def generate_sales_report(sales_data): Returns a dictionary with the total sales for each product. Args: sales_data (list): A list of dictionaries where each dictionary contains \'product\' and \'amount\' keys. Returns: dict: A dictionary where keys are unique products and values are total sales for each product. sales_report = {} for record in sales_data: product = record[\'product\'] amount = record[\'amount\'] if product in sales_report: sales_report[product] += amount else: sales_report[product] = amount return sales_report"},{"question":"Write a function to find all unique triplets in an array that sum to zero. There must not be any duplicate triplets in the output. The input array may contain both positive and negative integers. Ensure that your solution is optimized and handles the input array efficiently, without using nested loops beyond the expected O(n^2) time complexity. Here is the function signature: ```python def find_triplets(nums): # Your code here pass ``` # Example Input: ```python nums = [-1, 0, 1, 2, -1, -4] ``` Output: ```python [[-1, -1, 2], [-1, 0, 1]] ``` Note: 1. Ensure that no triplets are repeated in the output. 2. Triplets should be listed in ascending order, and the internal order of elements should be maintained such that each triplet is ordered in non-decreasing fashion. 3. The solution should not alter the input array. Instead, it should return a new array containing the result. # Constraints - The length of the input array is in the range [3, 3000] - Each element within the input array is in the range [-10^5, 10^5] Write your function in a way that it handles large lists efficiently and avoids common pitfalls like duplicate triplets.","solution":"def find_triplets(nums): Returns a list of unique triplets in the array that sum up to zero. nums.sort() triplets = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return triplets"},{"question":"Implement a function `merge_sorted_arrays(arr1, arr2)` that merges two sorted arrays of integers into one sorted array. # Input - `arr1`: A list of integers sorted in non-decreasing order (e.g., `[1, 3, 5]`). - `arr2`: A list of integers sorted in non-decreasing order (e.g., `[2, 4, 6]`). # Output - Return a single list of integers that contains all elements from `arr1` and `arr2`, also sorted in non-decreasing order. # Constraints - The length of `arr1` and `arr2` will be between 1 and 10^5. - The elements of `arr1` and `arr2` will be in the range of -10^6 to 10^6. # Example ```python # Example 1 arr1 = [1, 3, 5] arr2 = [2, 4, 6] # merge_sorted_arrays(arr1, arr2) should return [1, 2, 3, 4, 5, 6] # Example 2 arr1 = [1, 2, 3] arr2 = [] # merge_sorted_arrays(arr1, arr2) should return [1, 2, 3] # Example 3 arr1 = [-5, -3, 0, 2] arr2 = [-4, -2, 1, 3] # merge_sorted_arrays(arr1, arr2) should return [-5, -4, -3, -2, 0, 1, 2, 3] ``` # Notes - You are not allowed to use any built-in sort function. - Aim to achieve O(n + m) time complexity, where n is the length of `arr1` and m is the length of `arr2`.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. i, j = 0, 0 merged_array = [] while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function that takes a string as an input and returns the number of vowels within that string. Additionally, the function should be able to return all the unique vowels present in the string as a list. For example, a string \\"hello world\\" would return the count as 3 and the list as [\'e\', \'o\']. string = \\"hello world\\"","solution":"def count_vowels(s): Returns the number of vowels in the string s and a list of unique vowels present in the string. vowels = \\"aeiouAEIOU\\" count = 0 unique_vowels = set() for char in s: if char in vowels: count += 1 unique_vowels.add(char.lower()) return count, list(unique_vowels)"},{"question":"Function name: `alternating_sequence` Implement a function `alternating_sequence` that takes three strings as input and creates an alternating sequence of characters from the three input strings in the order they are provided. If one string runs out of characters, the function should continue with the remaining strings until all characters are used. **Input:** - Three strings `str1`, `str2`, and `str3`. **Output:** - A single string that contains characters from the input strings in the specified alternating fashion. **Example:** Input: ```python \\"abc\\", \\"123\\", \\"xyz\\" ``` Output: ```python \\"a1x b2y c3z\\" ``` Explanation: - First character from first string: \'a\' - First character from second string: \'1\' - First character from third string: \'x\' - Second character from first string: \'b\' - Second character from second string: \'2\' - Second character from third string: \'y\' - Third character from first string: \'c\' - Third character from second string: \'3\' - Third character from third string: \'z\' If the input strings are different lengths, consider an example: Input: ```python \\"long\\", \\"short\\", \\"tiny\\" ``` Output: ```python \\"ls t o o nh r g t o n y\\" ``` In this case, append the remaining characters once one of the strings is exhausted. Note: The resulting string should not contain any spaces, the spaces are added in the example outputs for clarity. You may assume that only valid strings with alphanumeric characters will be provided.","solution":"def alternating_sequence(str1, str2, str3): Returns a single string that alternates characters from the three input strings. result = [] max_len = max(len(str1), len(str2), len(str3)) for i in range(max_len): if i < len(str1): result.append(str1[i]) if i < len(str2): result.append(str2[i]) if i < len(str3): result.append(str3[i]) return \\"\\".join(result)"},{"question":"Write a function that accepts a string of characters and returns a list of tuples, where each tuple consists of a character from the string and the number of times that character appears consecutively. Ensure that the order of characters in the output matches their first appearance in the input string. For example: - Input: `\\"aaabbc\\"` - Output: `[(\'a\', 3), (\'b\', 2), (\'c\', 1)]` - Input: `\\"aabcc\\"` - Output: `[(\'a\', 2), (\'b\', 1), (\'c\', 2)]` # Constraints: - The input string will only contain lowercase alphabetical characters. - The function should handle cases where the string has no consecutive duplicates gracefully.","solution":"def count_consecutive_characters(s): Given a string of characters, returns a list of tuples where each tuple consists of a character from the string and the number of times that character appears consecutively. if not s: return [] result = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: result.append((current_char, count)) current_char = char count = 1 # Append the last character group result.append((current_char, count)) return result"},{"question":"Write a function called `find_pair_with_sum` that takes a list of integers and a target sum as input. The function should return a tuple with the indices of two numbers in the list that add up to the target sum. If no such pair exists, return `None`. The function should have a time complexity of O(n). Do not use any in-built or external libraries for this task. You should also analyze and fix the provided incorrect function to ensure it meets the problem requirements. ```python def find_pair_with_sum(nums, target): for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: return (i, j) return None ``` **Input:** - A list of integers `nums`. - An integer `target` representing the target sum. **Output:** - A tuple with the indices of the two numbers that add up to the target sum, or `None` if no such pair exists. **Example:** ```python # Example 1 nums = [2, 7, 11, 15] target = 9 # Output: (0, 1) # Example 2 nums = [3, 2, 4] target = 6 # Output: (1, 2) # Example 3 nums = [3, 3] target = 6 # Output: (0, 1) ```","solution":"def find_pair_with_sum(nums, target): Finds indices of two numbers in the list that add up to the target sum. Args: nums (list of int): List of integers. target (int): The target sum. Returns: tuple: A tuple containing the indices of the two numbers if they exist, else None. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"Given a string, write a Python program to find and return the first non-repeating character in it. If all characters are repeating or the string is empty, return `None`. The solution should be efficient in both time and space complexity. As part of the task, you are also given a piece of erroneous code which you must debug and correct. In addition, please provide an explanation for your solution, detailing any assumptions or design decisions you made. The efficiency of the code in terms of time and space complexity should also be mentioned in your explanation. # Given Erroneous Code #: ```python def first_non_repeating_character(s): for i in s: if s.count(i) == 1: return i return None ``` Here is an example to start: Example: Input: \\"swiss\\" Output: \\"w\\" - \'w\' is the first non-repeating character in the string. Input: \\"aabbcc\\" Output: None - All characters are repeating.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns None. char_count = {} # First pass to count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"Design a function named `merge_sorted_lists` that takes two parameters: `list1` and `list2`, both of which are lists containing integers sorted in ascending order. The function should merge these two lists into a single sorted list and return it. Ensure your solution has a linear runtime complexity relative to the combined size of the two lists. Write your solution in Python and include a few test cases to demonstrate its correctness.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. :param list1: The first sorted list. :param list2: The second sorted list. :return: A merged sorted list. merged_list = [] i, j = 0, 0 # Traverse through both lists and append the smaller element to merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function that takes a string as an input and checks if all characters of the string are unique. The function should return True if all characters are unique, and False if there are any duplicate characters. For this task, you are not allowed to use any additional data structures like sets or lists to keep track of characters. Instead, utilize mathematical operations and bitwise manipulation for this purpose. You may assume that the string only contains lowercase alphabetic characters. ```python def are_all_characters_unique(s: str) -> bool: # Your code here ``` Example: ```python print(are_all_characters_unique(\\"hello\\")) # Output: False print(are_all_characters_unique(\\"world\\")) # Output: True ```","solution":"def are_all_characters_unique(s: str) -> bool: Check if all characters in the string are unique using bitwise operations. Assumes the input string only contains lowercase alphabetic characters. # There are 26 lowercase alphabetic characters checker = 0 for char in s: # Calculate the bit position for the current character bit_position = ord(char) - ord(\'a\') # Check if the bit is already set in checker if (checker & (1 << bit_position)) != 0: return False # Set the bit in checker checker |= (1 << bit_position) return True"},{"question":"Design a program that reads a list of names and determines the longest common suffix shared by all the names. If no common suffix exists, the program should return an empty string. For example, given the list `[\\"Richardson\\", \\"Peterson\\", \\"Harrison\\"]`, the program should return \\"son\\".","solution":"def longest_common_suffix(names): Determines the longest common suffix shared by all the names in the list. If no common suffix exists, returns an empty string. Args: names: list of str - List of names Returns: str: Longest common suffix or an empty string if none exists. if not names: return \\"\\" # Reverse all the names for easier comparison reversed_names = [name[::-1] for name in names] # Longest common prefix in reversed order means longest common suffix in original common_suffix_reversed = [] for chars in zip(*reversed_names): if all(char == chars[0] for char in chars): common_suffix_reversed.append(chars[0]) else: break common_suffix = \'\'.join(common_suffix_reversed)[::-1] return common_suffix"},{"question":"Write a Python function that takes a list of integers and rearranges the elements to form the largest possible integer. The function should return this largest integer as a string. Assume the input list will contain only non-negative integers. Example: ``` Input: [3, 30, 34, 5, 9] Output: \'9534330\' Input: [1, 20, 23, 4, 8] Output: \'8423201\' ```","solution":"from functools import cmp_to_key def compare(a, b): if a + b > b + a: return -1 elif a + b < b + a: return 1 else: return 0 def largest_number(nums): if not nums: return \\"\\" # Convert the numbers to strings for comparison nums_str = list(map(str, nums)) # Sort the numbers based on the comparison nums_str.sort(key=cmp_to_key(compare)) # Join sorted numbers into the largest number as string largest_num = \'\'.join(nums_str) # Edge case: when the array consists of only zeros, return \'0\' return largest_num if largest_num[0] != \'0\' else \'0\'"},{"question":"使用Python程式實作一個函數`reverse_string`，接受一個字串作為輸入，並返回反轉後的字串。例如： ```python def reverse_string(input_str): # 實作內容 ``` **範例：** ```python print(reverse_string(\\"hello world\\")) # 輸出：dlrow olleh print(reverse_string(\\"Python\\")) # 輸出：nohtyP ```","solution":"def reverse_string(input_str): Returns the reversed string of the input. return input_str[::-1]"},{"question":"Implement a function that simulates a game of Tic-Tac-Toe for two players. The function should accept a series of moves as input and determine the result of the game. Ensure that the function handles invalid moves (e.g., out-of-bounds or already occupied cells). The function should print the final state of the board after all moves are played and declare the winner or if the game is a draw. Consider edge cases such as moves beyond the game\'s end once a winner is decided early. Requirements: - Use a 3x3 grid to represent the board. - Accept moves in the format of tuples (row, column, player) where `player` is either \'X\' or \'O\'. - Validate each move before applying it to the board. - Output the final state of the board. - Announce the result: \\"X wins\\", \\"O wins\\", or \\"Draw\\".","solution":"def check_winner(board): Checks the board to determine if there is a winner. Returns \\"X\\" if player X wins, \\"O\\" if player O wins, and None otherwise. # Check rows, columns, and diagonals for a winner win_conditions = ( [(0, 0), (0, 1), (0, 2)], # first row [(1, 0), (1, 1), (1, 2)], # second row [(2, 0), (2, 1), (2, 2)], # third row [(0, 0), (1, 0), (2, 0)], # first column [(0, 1), (1, 1), (2, 1)], # second column [(0, 2), (1, 2), (2, 2)], # third column [(0, 0), (1, 1), (2, 2)], # major diagonal [(0, 2), (1, 1), (2, 0)], # minor diagonal ) for condition in win_conditions: if ( board[condition[0][0]][condition[0][1]] == board[condition[1][0]][condition[1][1]] == board[condition[2][0]][condition[2][1]] != \\" \\" ): return board[condition[0][0]][condition[0][1]] return None def is_full(board): Checks if the board is full. Returns True if the board is full, and False otherwise. for row in board: if \\" \\" in row: return False return True def tic_tac_toe(moves): Simulates a game of Tic-Tac-Toe. Accepts a series of moves as input and determines the result of the game. board = [[\\" \\" for _ in range(3)] for _ in range(3)] for move in moves: row, col, player = move # Validate move if row < 0 or row >= 3 or col < 0 or col >= 3: return \\"Invalid move: out-of-bounds\\" if board[row][col] != \\" \\": return \\"Invalid move: cell already occupied\\" if player not in [\\"X\\", \\"O\\"]: return \\"Invalid move: invalid player\\" # Apply move board[row][col] = player # Check for a winner winner = check_winner(board) if winner: print_board(board) return f\\"{winner} wins\\" if is_full(board): print_board(board) return \\"Draw\\" print_board(board) return \\"Game unfinished\\" def print_board(board): Prints the current state of the board. for row in board: print(\\"|\\".join(row)) print(\\"-\\" * 5)"},{"question":"You are given a function that finds the longest palindrome in a given string. There are errors in the implementation. Your task is to correct the given Python function. ```python def longest_palindrom(s): start = 0 end = 0 for i in range(len(str)): l1 = expandFromCenter(s, i, i) l2 = expandFromCenter(s, i, i + 1) l = max(l1, l2) if l > end - start: start = i - (l - 1) // 2 end = i + l // 2 return s[start:end+1] def expandFromCenter(s, left, right): L = left R = right while L >= 0 and R < len(s) and s[L] == s[R]: L -= 1 R += 1 return R - L - 1 ``` # Task: 1. Identify and correct the errors in the `longest_palindrom` function. 2. Ensure your corrected function is able to find the longest palindrome in a given string. # Example: - Input: \\"babad\\" - Output: \\"bab\\" (Note: \\"aba\\" is also a valid answer) # Constraints: - The input string length is between 1 and 1000. - The string will consists of only lowercase English letters. Correct the implementation and ensure all edge cases are handled appropriately.","solution":"def longest_palindrome(s): Returns the longest palindromic substring in the input string s. if not s: return \\"\\" start = 0 end = 0 for i in range(len(s)): l1 = expandFromCenter(s, i, i) l2 = expandFromCenter(s, i, i + 1) l = max(l1, l2) if l > end - start: start = i - (l - 1) // 2 end = i + l // 2 return s[start:end + 1] def expandFromCenter(s, left, right): Expands around the center and returns the length of the palindromic substring. L = left R = right while L >= 0 and R < len(s) and s[L] == s[R]: L -= 1 R += 1 return R - L - 1"},{"question":"Create a function that simulates a bank account system. The function should support the following operations: \\"deposit\\", \\"withdraw\\", and \\"check balance\\". The function should take an initial balance as an argument and then process a list of operations. Each operation is a tuple where the first element is a string (\\"deposit\\", \\"withdraw\\", or \\"check balance\\") and the second element is the amount for deposit or withdraw operations. The function should return the final balance after all operations are completed. Ensure that the function correctly handles insufficient funds for withdrawal operations by not allowing the balance to go negative.","solution":"def bank_account(initial_balance, operations): Simulates a bank account with deposit, withdraw, and check balance operations. Parameters: initial_balance (float): The initial balance of the account. operations (list of tuples): A list of operations where each operation is represented as a tuple. The first element is the operation type (string: \'deposit\', \'withdraw\', \'check balance\') and the second element is the amount (float) for deposit and withdraw operations. Returns: float: The final balance of the account after all operations. balance = initial_balance for operation in operations: op_type, op_amount = operation if op_type == \\"deposit\\": balance += op_amount elif op_type == \\"withdraw\\": if balance >= op_amount: balance -= op_amount else: print(\\"Insufficient funds for withdrawal\\") elif op_type == \\"check balance\\": pass # \\"check balance\\" operation does not change the balance return balance"},{"question":"Given an unsorted array of integers, devise an algorithm to find the length of the longest consecutive elements sequence. Implement a function `findLongestSequence(arr)` that accepts an array as input and returns the length of the sequence. For example, given the array `[100, 4, 200, 1, 3, 2]`, the longest consecutive elements sequence is `[1, 2, 3, 4]`, and the function should return its length, which is `4`. Ensure your solution has a time complexity of O(n).","solution":"def findLongestSequence(arr): This function returns the length of the longest consecutive elements sequence. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in arr: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes a positive integer `n` and returns the `n`-th Fibonacci number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Optimize your solution for efficiency, ensuring the function can handle relatively large values of `n` without excessive computation time. Example: ```python fibonacci(0) -> 0 fibonacci(1) -> 1 fibonacci(10) -> 55 ```","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a program in Python that interacts with the OpenWeatherMap API to retrieve and display current weather data for a given city. The program should: 1. Prompt the user to enter a city name. 2. Send an API request to OpenWeatherMap to fetch the current weather data for that city. Use the endpoint `http://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}` where `{city name}` is the user-input city name and `{API key}` is your personal API key (you may need to sign up for a free API key on the OpenWeatherMap website). From the response, extract and display the following information: - City name - Country - Weather description - Current temperature (in Celsius) - Minimum and maximum temperature (in Celsius) - Humidity - Wind speed Additionally, implement error handling to manage situations where the city name is not found or the API request fails for any reason (e.g., network issues). Ensure that your program provides user-friendly error messages in these cases. Lastly, format the output neatly so that the weather information is easy to read and understand. For example: ``` Weather information for {City}, {Country}: - Weather: {Weather description} - Current Temperature: {Current temperature}°C - Minimum Temperature: {Minimum temperature}°C - Maximum Temperature: {Maximum temperature}°C - Humidity: {Humidity}% - Wind Speed: {Wind speed} m/s ```","solution":"import requests def get_weather(city_name, api_key): url = f\\"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={api_key}&units=metric\\" try: response = requests.get(url) response.raise_for_status() # Raise an HTTPError if the HTTP request returned an unsuccessful status code weather_data = response.json() if weather_data[\\"cod\\"] != 200: raise ValueError(f\\"Error retrieving weather data: {weather_data[\'message\']}\\") city = weather_data[\\"name\\"] country = weather_data[\\"sys\\"][\\"country\\"] weather_description = weather_data[\\"weather\\"][0][\\"description\\"] current_temp = weather_data[\\"main\\"][\\"temp\\"] min_temp = weather_data[\\"main\\"][\\"temp_min\\"] max_temp = weather_data[\\"main\\"][\\"temp_max\\"] humidity = weather_data[\\"main\\"][\\"humidity\\"] wind_speed = weather_data[\\"wind\\"][\\"speed\\"] return { \\"city\\": city, \\"country\\": country, \\"weather_description\\": weather_description, \\"current_temp\\": current_temp, \\"min_temp\\": min_temp, \\"max_temp\\": max_temp, \\"humidity\\": humidity, \\"wind_speed\\": wind_speed } except requests.exceptions.RequestException as e: return {\\"error\\": str(e)} except ValueError as ve: return {\\"error\\": str(ve)} def display_weather(weather_data): if \\"error\\" in weather_data: print(f\\"Error: {weather_data[\'error\']}\\") else: print(f\\"Weather information for {weather_data[\'city\']}, {weather_data[\'country\']}:\\") print(f\\"- Weather: {weather_data[\'weather_description\']}\\") print(f\\"- Current Temperature: {weather_data[\'current_temp\']}°C\\") print(f\\"- Minimum Temperature: {weather_data[\'min_temp\']}°C\\") print(f\\"- Maximum Temperature: {weather_data[\'max_temp\']}°C\\") print(f\\"- Humidity: {weather_data[\'humidity\']}%\\") print(f\\"- Wind Speed: {weather_data[\'wind_speed\']} m/s\\")"},{"question":"Write a program that takes a list of strings as input and identifies the longest common prefix among them. The program should handle edge cases such as an empty list or elements that have no common prefix. Additionally, extend the program to work efficiently for a very large list of strings. The program should print the longest common prefix if there is one, or an appropriate message if there is none. Make sure to handle variations in string lengths and character cases.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. Args: strs (List[str]): A list of strings Returns: str: The longest common prefix if not strs: return \\"No common prefix\\" # Sort the list, the common prefix of the first and last item will be the common prefix of the whole list strs.sort() first = strs[0] last = strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 common_prefix = first[:i] if common_prefix: return common_prefix else: return \\"No common prefix\\""},{"question":"Given an array A of integers of size N, your task is to find the number of distinct pairs (i, j) where 1 <= i < j <= N such that `(A[i] + A[j]) % k == 0`, where `%` is the modulo operator. Return the total number of such pairs. Example 1: Input: A = [2, 5, 3, 1, 4] k = 3 Output: 4 Explanation: The distinct pairs (i, j) where A[i] + A[j] is divisible by 3 are: (2,5), (2,4), (5,1), (3,1). Example 2: Input: A = [1, 2, 3, 4, 5] k = 2 Output: 4 Explanation: The distinct pairs (i, j) where A[i] + A[j] is divisible by 2 are: (1,3), (1,5), (2,4), (3,5). Constraints: - 2 <= N <= 10^5 - 1 <= A[i] <= 10^9 - 1 <= k <= 10^5","solution":"def count_pairs(A, k): Returns the number of distinct pairs (i, j) in array A where (A[i] + A[j]) % k == 0. Args: A: List of integers k: Integer, the divisor value Returns: int: Number of such pairs from collections import defaultdict mod_count = defaultdict(int) # Count occurrences of remainders when elements are divided by k for num in A: remainder = num % k mod_count[remainder] += 1 count = 0 # Iterate through each pair of remainders for i in range(k): # Calculate the other remainder that can pair with remainder `i` complement = (k - i) % k if complement >= i: if i == complement: # If i and complement are same, then count pairs within that group count += (mod_count[i] * (mod_count[i] - 1)) // 2 else: # For different remainders, count cross-pairing count += mod_count[i] * mod_count[complement] return count"},{"question":"You are asked to design a function that finds the lowest common ancestor (LCA) of two given nodes in a binary tree. Your task is to take the root of a binary tree along with two integers, `p` and `q`, and determine the LCA of the nodes that hold the values `p` and `q`. The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in the tree that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself). For example, consider the following scenarios: Scenario 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 Output: 3 Justification: The lowest common ancestor of nodes 5 and 1 is 3. Scenario 2: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 Output: 5 Justification: The lowest common ancestor of nodes 5 and 4 is 5, since a node can be a descendant of itself. Scenario 3: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 6, q = 2 Output: 5 Justification: The lowest common ancestor of nodes 6 and 2 is 5. Limitations: The tree will have nodes in the range `[1, 104]`. `0 <= Node.val <= 109` Each `Node.val` is unique. `p` and `q` are guaranteed to be values present in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root, p, q): Finds the lowest common ancestor (LCA) of two given nodes in a binary tree. Parameters: root (TreeNode): The root node of the binary tree p (int): The value of the first node q (int): The value of the second node Returns: TreeNode: The LCA of the two nodes def findLCA(node, p, q): if not node: return None if node.val == p or node.val == q: return node left = findLCA(node.left, p, q) right = findLCA(node.right, p, q) if left and right: return node return left if left else right return findLCA(root, p, q)"},{"question":"Write a function that takes a list of integers and returns the sum of all the positive numbers in the list. Example: ```python def sum_positive_numbers(numbers): # Your code here # Test case numbers = [-1, 2, 3, -4, 5] print(sum_positive_numbers(numbers)) # Output should be 10 ```","solution":"def sum_positive_numbers(numbers): Returns the sum of all positive numbers in the list. return sum(num for num in numbers if num > 0)"},{"question":"Implement a function that takes a list of words and groups them by their anagrams. An anagram is a word formed by rearranging another word’s letters (e.g., \\"listen\\" and \\"silent\\"). The function should return a dictionary where the keys are strings representing sorted letters of the anagrams and the values are lists of words that are anagrams of each other. The input list may contain duplicate words, in which case the output should correctly account for these duplicates by including them in the appropriate anagram group. Additionally, handle input lists that are very large efficiently, ensuring that the solution is optimal in terms of both space and time complexity. Example input: ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"goolge\\", \\"lives\\", \\"viles\\", \\"evil\\", \\"vile\\"] ``` Expected output: ```python { \'eilnst\': [\'listen\', \'silent\', \'enlist\'], \'eggloo\': [\'google\', \'goolge\'], \'eilsv\': [\'lives\', \'viles\'], \'eilv\': [\'evil\', \'vile\'] } ``` Your solution should handle edge cases such as an empty list, lists containing no anagrams, and lists where every word is unique. Write the function and demonstrate its usage with a few test cases, ensuring each test covers different scenarios, such as lists with multiple anagram groups, single group, or no valid anagrams.","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of words into anagrams. :param words: List of words. :return: Dictionary where keys are sorted letters of the anagrams and values are lists of anagram words. anagram_groups = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word].append(word) return dict(anagram_groups) # Example usage: words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"goolge\\", \\"lives\\", \\"viles\\", \\"evil\\", \\"vile\\"] print(group_anagrams(words))"},{"question":"Design a function \\"reverseWords\\" that takes a string as input, splits the string into words, reverses the order of the words, and returns the resulting string. For example, if the input string is \\"hello world this is test\\", the function should return \\"test is this world hello\\". Write the function in a programming language of your choice.","solution":"def reverseWords(s): Reverses the order of words in a string. Parameters: s (str): The input string. Returns: str: The string with words in reversed order. if not s: return \\"\\" words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Implement a Breadth-First Search (BFS) traversal of a binary tree. Write a function in Python that takes the root of the tree as input and returns a list of values representing the level-order traversal of the tree. Additionally, provide a brief explanation of how Breadth-First Search works and its typical use cases in computer science. Make sure to include edge cases, such as an empty tree, in your function handling. # Example Input: A binary tree with the following structure: ``` 1 / 2 3 / 4 5 ``` Output: ```[1, 2, 3, 4, 5]```","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bfs_traversal(root): Perform a BFS (Breadth-First Search) traversal on a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: List[int]: The list of values representing the level-order traversal of the tree. if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Design a function that takes a string input and returns a dictionary where the keys are unique characters from the string, and the values are the number of times each character appears. Ensure the function handles both uppercase and lowercase letters appropriately, treating them as distinct characters. Example: ``` input: \\"Programming\\" output: {\'P\': 1, \'r\': 2, \'o\': 1, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1, \'n\': 1} ```","solution":"def character_count(s): Returns a dictionary with the count of each unique character in the string s. Treats uppercase and lowercase characters as distinct. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Design a Python function that uses the Pandas and NumPy libraries to fill missing values in a DataFrame. The function should take three parameters: the DataFrame, a list of column names to check for missing values, and a strategy to fill these missing values, which could be either \'mean\', \'median\', or \'mode\'. The function should return the updated DataFrame with the missing values filled according to the specified strategy.","solution":"import pandas as pd import numpy as np def fill_missing_values(df, columns, strategy): Fills missing values in the specified columns of the DataFrame according to the given strategy. Parameters: df (pd.DataFrame): The DataFrame to operate on. columns (list): List of column names to check for missing values. strategy (str): Strategy to fill missing values - \'mean\', \'median\', or \'mode\'. Returns: pd.DataFrame: DataFrame with missing values filled. for column in columns: if column in df.columns: if strategy == \'mean\': fill_value = df[column].mean() elif strategy == \'median\': fill_value = df[column].median() elif strategy == \'mode\': fill_value = df[column].mode()[0] else: raise ValueError(\\"Strategy must be either \'mean\', \'median\', or \'mode\'\\") df[column].fillna(fill_value, inplace=True) else: raise ValueError(f\\"Column {column} not found in DataFrame\\") return df"},{"question":"Write a Python function that accepts a string containing various characters and returns a dictionary where the keys are the characters and the values are their corresponding occurrences in the string. Ensure your function disregards the case (i.e., \'A\' and \'a\' should be considered the same character). Also, include functionality to handle and return appropriate messages for empty or null strings. example_string = \\"Hello World!\\"","solution":"def character_occurrences(input_string): Returns a dictionary with the count of each character in the input_string. The function is case insensitive and disregards empty or null strings. if not input_string: return {\\"message\\": \\"Empty or null string provided.\\"} char_count = {} for char in input_string.lower(): if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create an algorithm that accepts a list of integers and redistributes its elements such that all odd numbers retain their original order but appear at the beginning of the list, followed by all even numbers also retaining their original order. For example, given the list `[3, 1, 2, 4, 7, 6, 9, 10]`, the algorithm should produce `[3, 1, 7, 9, 2, 4, 6, 10]`. Provide a function with the following signature: ```python def segregate_odds_and_evens(nums: List[int]) -> List[int]: pass ``` Ensure your implementation is efficient and takes into account edge cases such as empty lists or lists with all even or all odd numbers.","solution":"from typing import List def segregate_odds_and_evens(nums: List[int]) -> List[int]: Returns a new list where all odd numbers retain their original order but appear at the beginning of the list, followed by all even numbers also retaining their original order. odds = [num for num in nums if num % 2 != 0] evens = [num for num in nums if num % 2 == 0] return odds + evens"},{"question":"Given a list of integers, write a function in Python that finds and returns the second smallest integer in the list. If the list contains less than two unique integers, the function should return `None`. **Function signature:** ```python def second_smallest(numbers: List[int]) -> Optional[int]: pass ``` **Input:** - A list of integers `numbers` with length up to 1000. **Output:** - An integer representing the second smallest number in the list, or `None` if there are fewer than two unique numbers. **Example:** ```python second_smallest([4, 2, 5, 1, 3]) # should return 2 second_smallest([1, 1, 1, 1]) # should return None second_smallest([10, 9, 8, 7]) # should return 8 second_smallest([7, 7, 7, 6]) # should return 7 ```","solution":"from typing import List, Optional def second_smallest(numbers: List[int]) -> Optional[int]: Finds the second smallest integer in the list. If the list contains less than two unique integers, returns None. if len(numbers) < 2: return None # Remove duplicates unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Implement a function `frequency_sort` in Python that takes a string as input and returns a string with characters sorted in descending order based on their frequency of occurrence. If two characters have the same frequency, their order relative to each other should be the same as in the original string. Provide examples to illustrate your solution.","solution":"from collections import Counter def frequency_sort(s): Sorts the characters of the input string s in descending order based on their frequency. If two characters have the same frequency, their order relative to each other is the same as in the original string. Parameters: s (str): The input string to be sorted. Returns: str: The string with characters sorted by their frequency. # Count the frequency of each character freq = Counter(s) # Sort the characters first by frequency (descending) and then by their order of appearance sorted_characters = sorted(freq.keys(), key=lambda x: (-freq[x], s.index(x))) # Build the result string based on sorted characters and their frequency result = \'\'.join(char * freq[char] for char in sorted_characters) return result"},{"question":"Create a function that generates all possible unique subsets from a list of integers. The function should return a list of lists, each representing a subset. The order of subsets and the order of elements within each subset does not matter, but no subset should be repeated. Example: ```python def unique_subsets(nums): Given a list of integers, generate all possible subsets (the power set) ensuring each subset is unique. Example: nums = [1, 2, 2] The unique subsets are: [[], [1], [2], [1, 2], [2, 2], [1, 2, 2]] Note: - There should not be any duplicate subsets. - The elements in the input list may contain duplicates, but the subsets themselves should be unique. - The order of the subsets and the order within each subset do not matter. ```","solution":"def unique_subsets(nums): Given a list of integers, generate all possible subsets (the power set) ensuring each subset is unique. nums.sort() result = [] subset = [] def backtrack(start): result.append(subset.copy()) for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: continue subset.append(nums[i]) backtrack(i + 1) subset.pop() backtrack(0) return result"},{"question":"Write a function in Python that receives a string containing a mathematical expression with integers and basic operators (+, -, *, /) and returns the result of the expression. The function should handle order of operations correctly and support the use of parentheses to change the priority of operations. Ensure your function handles potential edge cases, such as division by zero and invalid input. Additionally, provide test cases to validate the correctness of your function. ```python def evaluate_expression(expression): # Your implementation here pass ``` Example Input 1: ```python expression = \\"2 + 3 * 5\\" ``` Expected Output 1: ```python 17 ``` Example Input 2: ```python expression = \\"(2 + 3) * 5\\" ``` Expected Output 2: ```python 25 ``` Example Input 3: ```python expression = \\"10 + (3 * 5) / (2 + 3)\\" ``` Expected Output 3: ```python 13.0 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression contained in a string and returns the result. The expression can contain integers, +, -, *, / operators, and parentheses. try: # Evaluate the expression and return the result result = eval(expression) return result except ZeroDivisionError: return \\"Error: Division by zero\\" except Exception as e: return f\\"Error: Invalid input ({str(e)})\\""},{"question":"Write a Python function that generates all possible permutations of a given list of numbers. The function should take a list of unique integers as input and return a list of lists, where each list is a unique permutation of the input list. # Function Signature ```python def generate_permutations(nums: List[int]) -> List[List[int]]: pass ``` # Input - `nums` (List[int]): A list of unique integers. # Output - List[List[int]]: A list containing all possible permutations of the input list. # Example ```python print(generate_permutations([1, 2, 3])) # Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] print(generate_permutations([0, -1, 1])) # Output: [[0, -1, 1], [0, 1, -1], [-1, 0, 1], [-1, 1, 0], [1, 0, -1], [1, -1, 0]] ``` # Constraints - The length of `nums` will be between 1 and 6. - All integers within `nums` are unique. # Notes - You can use recursive or iterative approaches to implement the solution. - Ensure the order of the permutations in the output is not significant. - Avoid using libraries that directly solve the problem.","solution":"from typing import List def generate_permutations(nums: List[int]) -> List[List[int]]: def backtrack(start=0): # If we\'ve reached the end of the list, append the permutation if start == len(nums): permutations.append(nums[:]) for i in range(start, len(nums)): # Swap the current element with the start nums[start], nums[i] = nums[i], nums[start] # Recursively generate permutations for the rest of the list backtrack(start + 1) # Swap back to restore the original list state nums[start], nums[i] = nums[i], nums[start] permutations = [] backtrack() return permutations"},{"question":"Write a Python function that determines if a given string is a valid email address. The function should follow these rules: 1. The email should start with a sequence of alphanumeric characters (including underscores, periods, and hyphens). 2. The sequence should be followed by the \'@\' symbol. 3. After the \'@\' symbol, there should be a domain name which follows the pattern of alphanumeric characters separated by a single period (e.g., \'domain.com\' or \'sub.domain.com\'). 4. The domain name must not end with a period. The function should return `True` if the email address is valid according to the criteria above and `False` otherwise. For simplicity, you do not need to handle international domain names. Example: ```python >>> is_valid_email(\\"user.name@test-domain.com\\") True >>> is_valid_email(\\"user@.com\\") False ```","solution":"import re def is_valid_email(email): Checks if the given email follows the specified email address rules. Parameters: email (str): The email address to validate. Returns: bool: True if the email is valid, False otherwise. email_regex = re.compile( r\'^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\' ) if email_regex.match(email): local_part, domain_part = email.split(\'@\') if \\"..\\" in domain_part or domain_part.endswith(\\".\\"): return False return True return False"},{"question":"Create a multi-part test. Part 1: Provide an overview of the concept of recursion in programming, explaining how it works with examples of typical problems where recursion is applied. Part 2: Examine the following recursive function written in Python. Identify any inefficiencies or errors in the code and explain how they impact performance or correctness. Provide a corrected and optimized version of the code. ```python def factorial(n): if n == 0: return 1 else: return n * factorial(n) ``` Part 3: Design a recursive algorithm for calculating the nth Fibonacci number. Provide a step-by-step explanation of how the recursion works in this algorithm. Part 4: Discuss the potential drawbacks of using recursion, including stack overflow and performance issues. Provide examples of when it is more appropriate to use iterative solutions over recursive solutions. Part 5: Implement a memoization technique to improve the efficiency of the provided Fibonacci function. Compare and contrast this approach with the original recursive solution in terms of time complexity and space complexity.","solution":"# Part 2 - Optimized factorial function def factorial(n): Returns the factorial of n using a corrected recursive algorithm. If n == 0 or n == 1, return 1. Otherwise, return n * factorial(n - 1). if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) # Part 3 - Recursive Fibonacci function def fibonacci(n): Returns the nth Fibonacci number using a recursive algorithm. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) # Part 5 - Memoized Fibonacci function def memoized_fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n == 0: return 0 elif n == 1: return 1 else: memo[n] = memoized_fibonacci(n - 1, memo) + memoized_fibonacci(n - 2, memo) return memo[n]"},{"question":"Create and implement a sentiment analysis pipeline for a movie review dataset using a custom-built Naive Bayes classifier. The project should be able to classify reviews as positive or negative based on their content. Your implementation should include the following steps: 1. **Data Preprocessing**: Explain and implement the preprocessing steps needed for text data. This includes tokenization, stop-word removal, and any other steps you deem necessary. 2. **Text Vectorization**: Implement a Bag-of-Words (BoW) approach to convert the text data into feature vectors. Explain the underlying concept of the BoW model. 3. **Naive Bayes Classifier**: Build a custom Naive Bayes classifier from scratch. Provide a detailed explanation of its probabilistic model and mathematical framework. 4. **Training and Validation**: Split the dataset into training and validation sets. Train your Naive Bayes classifier on the training set and evaluate its performance on the validation set. Use accuracy, precision, recall, and F1-score as the performance metrics. 5. **Cross-Validation**: Implement stratified k-fold cross-validation to ensure your model\'s robustness. Report the performance metrics for each fold and provide a summary. 6. **Comparative Analysis**: Compare your custom Naive Bayes classifier\'s performance with an industry-standard library implementation such as sklearn\'s MultinomialNB. Discuss any differences in performance and potential reasons for these differences. 7. **Handling Imbalanced Classes**: Analyze the movie review dataset for class imbalance. If an imbalance exists, implement strategies to mitigate its effects, such as class weighting or over-sampling. Include all necessary code, outputs, and visualizations within your report, along with a comprehensive explanation for each step of the pipeline. Discuss any challenges faced during the implementation and how you overcame them.","solution":"import re import numpy as np from collections import Counter, defaultdict from sklearn.model_selection import train_test_split, StratifiedKFold from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score # Data Preprocessing def preprocess_text(text): # Tokenization, lowercasing, and removing non-alphabetic characters tokens = re.findall(r\'b[a-zA-Z]{2,}b\', text.lower()) return tokens # Text Vectorization (Bag-of-Words) def build_vocabulary(data): vocabulary = set() for text in data: tokens = preprocess_text(text) vocabulary.update(tokens) return vocabulary def text_to_bow(text, vocabulary): tokens = preprocess_text(text) bow_vector = np.zeros(len(vocabulary)) token_counts = Counter(tokens) for token in token_counts: if token in vocabulary: index = vocabulary.index(token) bow_vector[index] = token_counts[token] return bow_vector # Naive Bayes Classifier class NaiveBayesClassifier: def __init__(self): self.vocabulary = None self.class_probs = None self.word_probs = None def fit(self, X, y): self.vocabulary = list(build_vocabulary(X)) self.class_probs = defaultdict(float) self.word_probs = defaultdict(lambda: defaultdict(float)) class_counts = Counter(y) total_docs = len(y) for cls in class_counts: self.class_probs[cls] = class_counts[cls] / total_docs word_counts = Counter() for i in range(total_docs): if y[i] == cls: bow_vector = text_to_bow(X[i], self.vocabulary) for j, count in enumerate(bow_vector): word_counts[j] += count total_words = sum(word_counts.values()) for word_index in word_counts: self.word_probs[cls][word_index] = (word_counts[word_index] + 1) / (total_words + len(self.vocabulary)) def predict(self, X): results = [] for text in X: bow_vector = text_to_bow(text, self.vocabulary) log_probs = defaultdict(float) for cls in self.class_probs: log_probs[cls] = np.log(self.class_probs[cls]) for i in range(len(bow_vector)): if bow_vector[i] > 0: log_probs[cls] += bow_vector[i] * np.log(self.word_probs[cls].get(i, 1 / len(self.vocabulary))) results.append(max(log_probs, key=log_probs.get)) return results # Training and Validation def evaluate_model(model, X_train, y_train, X_val, y_val): model.fit(X_train, y_train) y_pred_train = model.predict(X_train) y_pred_val = model.predict(X_val) accuracy_train = accuracy_score(y_train, y_pred_train) accuracy_val = accuracy_score(y_val, y_pred_val) precision_val = precision_score(y_val, y_pred_val, pos_label=\'positive\') recall_val = recall_score(y_val, y_pred_val, pos_label=\'positive\') f1_val = f1_score(y_val, y_pred_val, pos_label=\'positive\') return accuracy_train, accuracy_val, precision_val, recall_val, f1_val # cross validation def cross_validation(model, X, y, k=5): skf = StratifiedKFold(n_splits=k) metrics = [] for train_index, val_index in skf.split(X, y): X_train, X_val = X[train_index], X[val_index] y_train, y_val = y[train_index], y[val_index] metrics.append(evaluate_model(model, X_train, y_train, X_val, y_val)) return metrics"},{"question":"You are given a list of strings that represents different types of transactions that have occurred in a store throughout the day. Each transaction is a string formatted as \\"type:amount\\", where \\"type\\" can be either \\"credit\\" or \\"debit\\", and \\"amount\\" is a positive integer representing the transaction amount. Write a function `calculate_balance(transactions)` that takes a list of transaction strings and returns the net balance at the end of the day. A \\"credit\\" transaction increases the balance, while a \\"debit\\" transaction decreases it. Assume the balance starts at 0. **Input:** - A list of strings, `transactions`, where each string is in the format \\"type:amount\\". **Output:** - An integer representing the net balance after processing all transactions. **Example:** ``` transactions = [\\"credit:100\\", \\"debit:50\\", \\"credit:200\\", \\"debit:150\\"] calculate_balance(transactions) ``` **Output:** ``` 100 ``` **Explanation:** Starting from a balance of 0: - \\"credit:100\\" increases the balance by 100 (balance = 100). - \\"debit:50\\" decreases the balance by 50 (balance = 50). - \\"credit:200\\" increases the balance by 200 (balance = 250). - \\"debit:150\\" decreases the balance by 150 (balance = 100).","solution":"def calculate_balance(transactions): Calculate the net balance given a list of transaction strings. Each transaction is in the format \\"type:amount\\", where type can be \\"credit\\" or \\"debit\\". Parameters: transactions (list of str): List of transaction strings. Returns: int: The net balance after processing all transactions. balance = 0 for transaction in transactions: type, amount = transaction.split(\':\') amount = int(amount) if type == \\"credit\\": balance += amount elif type == \\"debit\\": balance -= amount return balance"},{"question":"Write a function that takes a list of integers and returns a list of the digits reversed. Example: Input: [123, 456, 7890] Output: [[3, 2, 1], [6, 5, 4], [0, 9, 8, 7]]","solution":"def reverse_digits_list(nums): Takes a list of integers and returns a list of the digits reversed. Args: nums (list): List of integers. Returns: list: List of lists, with each inner list being the digits of the integers reversed. return [[int(digit) for digit in str(num)[::-1]] for num in nums]"},{"question":"A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward. Develop a Python function that takes a list of strings as input and returns a list with the same elements but reversed, only if they are palindromes. If the original string is not a palindrome, keep it unchanged. The function should be case insensitive, meaning \\"Level\\" and \\"level\\" should both be recognized as palindromes. Do not use any built-in Python libraries or functions for reversing strings or checking for palindromes.","solution":"def is_palindrome(s): s = s.lower() left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True def reverse_string(s): reversed_s = \'\' for char in s: reversed_s = char + reversed_s return reversed_s def reverse_palindromes(lst): result = [] for s in lst: if is_palindrome(s): result.append(reverse_string(s)) else: result.append(s) return result"},{"question":"Write a Python function that computes the final velocity of an object in free-fall, given the time (in seconds) it has been falling. Assume the acceleration due to gravity is 9.8 m/s^2. The parameters to consider are the initial velocity and the time it has been falling. Here are the respective values: initial_velocity = 0 # in m/s time = 7 # in seconds","solution":"def final_velocity(initial_velocity, time, acceleration=9.8): Computes the final velocity of an object in free-fall. Parameters: initial_velocity (float): Initial velocity in m/s. time (float): Time in seconds. acceleration (float): Acceleration due to gravity in m/s^2. Defaults to 9.8 m/s^2. Returns: float: Final velocity in m/s. return initial_velocity + (acceleration * time) # Example usage initial_velocity = 0 # in m/s time = 7 # in seconds # Should print 68.6 print(final_velocity(initial_velocity, time))"},{"question":"In this task, you are given a string of text which may include letters, digits, and special characters. The objective is to implement an algorithm that will analyze the text and identify the longest contiguous subsequence that contains only unique characters. Your function should return the length of this longest subsequence. To ensure efficiency, your algorithm should ideally operate within linear time complexity relative to the length of the input string. Constraints: - The text can be composed of upper and lower case English letters, digits, and special characters. - The length of the input string can be up to 10^5 characters. Example Input: \\"abcabcbb\\" Example Output: 3 (Explanation: The longest substring with all unique characters is \\"abc\\", which has a length of 3). Example Input: \\"bbbbb\\" Example Output: 1 (Explanation: The longest substring with all distinct characters is \\"b\\", which has a length of 1).","solution":"def length_of_longest_substring(s): Given a string s, find the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 # Dictionary to store the last positions of each character. char_index_map = {} max_length = 0 start = 0 # the starting index of the current window for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: # Update the starting index of the current window start = char_index_map[s[end]] + 1 # Update the last seen index of the current character char_index_map[s[end]] = end # Update the maximum length of the substring found so far max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a Python program that reads a text file containing a list of integers (one per line) and performs the following tasks: 1. Identifies and prints the smallest and largest integers in the list. 2. Calculates and prints the average of the integers. 3. Generates and prints a new list where each integer is replaced by the square of the difference between the integer and the average. 4. Ensures error handling for cases where the file might not exist or contains non-integer values, with appropriate error messages. Your solution should efficiently handle large files and maintain high performance.","solution":"def process_file(file_path): try: with open(file_path, \'r\') as file: numbers = [int(line.strip()) for line in file] if not numbers: print(\\"The file is empty.\\") return smallest = min(numbers) largest = max(numbers) average = sum(numbers) / len(numbers) squared_diffs = [(num - average) ** 2 for num in numbers] print(f\\"The smallest integer: {smallest}\\") print(f\\"The largest integer: {largest}\\") print(f\\"The average of the integers: {average}\\") print(f\\"List of squared differences: {squared_diffs}\\") except FileNotFoundError: print(\\"Error: The file does not exist.\\") except ValueError: print(\\"Error: The file contains non-integer values.\\")"},{"question":"Analyze the following Python function designed to determine whether a given year is a leap year or not. Identify any logical or syntactical errors and correct them. Provide a brief explanation of the leap year rules and how they are implemented in your corrected code. ```python def is_leap_year(year): if year % 4 == 0 and year % 100 != 0 or year % 400 == 0: return True else: return False ```","solution":"def is_leap_year(year): Determines if a given year is a leap year. A year is a leap year if: - It is evenly divisible by 4; - Except if it is evenly divisible by 100, then it is not a leap year; - Unless it is also evenly divisible by 400, then it is a leap year. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True else: return False"},{"question":"In an input string composed of lowercase alphabetical characters, devise a function to compute the frequency of each character and return the results in the format of a dictionary, where the keys represent the characters and the values represent their respective occurrences. input_str = \\"example\\"","solution":"def character_frequency(input_str): Returns the frequency of each character in the input string. Args: input_str (str): A string composed of lowercase alphabetical characters. Returns: dict: A dictionary where keys are characters and values are their frequencies. frequency_dict = {} for char in input_str: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a Python function that takes a list of integers and returns a dictionary where the keys are the integers from the list and the values are the factorial of each key. Provide two different implementations: one using recursion to calculate the factorial and another using an iterative approach. Additionally, implement a feature that allows the user to specify whether the computation of the factorial should include memoization for improved performance. The function should handle edge cases, such as empty lists and negative integers, gracefully, by skipping invalid entries and continuing computation for the rest of the list. Discuss the trade-offs between the recursive and iterative approaches, and analyze the potential performance improvements that memoization might offer. Provide examples of how the function can be used with and without memoization.","solution":"def factorial_recursion(n, memo=None): Calculates the factorial of n using recursion. Optionally uses memoization if a memo dictionary is provided. if n < 0: return None if n == 0 or n == 1: return 1 if memo is not None and n in memo: return memo[n] result = n * factorial_recursion(n-1, memo) if memo is not None: memo[n] = result return result def factorial_iterative(n): Calculates the factorial of n using an iterative approach. if n < 0: return None result = 1 for i in range(2, n + 1): result *= i return result def factorial_dict(numbers, use_recursion=True, use_memoization=False): Takes a list of integers and returns a dictionary where the keys are the integers from the list and the values are the factorial of each key. result = {} memo = {} if use_memoization else None for num in numbers: if use_recursion: fact = factorial_recursion(num, memo) else: fact = factorial_iterative(num) if fact is not None: result[num] = fact return result # Trade-offs and performance analysis Recursive approach is elegant and straightforward but can be inefficient due to the overhead of function calls and risk of stack overflow for large inputs. Memoization significantly improves the efficiency by storing previously computed results, avoiding redundant calculations. Iterative approach, while less elegant, avoids the issues of stack overflow and generally has better performance due to reduced function call overhead. However, without memoization, it computes each number\'s factorial from scratch, which can be less efficient for repeated calculations on the same data. Memoization can drastically improve performance by reducing redundant calculations, especially useful in recursive implementations. It adds additional space complexity but can make a noticeable difference in time complexity."},{"question":"Write a Python function to find the subarray with the maximum sum (the subarray can be of any length, but must be contiguous) from a given list of integers. Your function should implement an efficient algorithm with a time complexity of O(N). Additionally, return the starting and ending indices of this subarray. For example: If the input is: [-2,1,-3,4,-1,2,1,-5,4] The subarray with the maximum sum is: [4,-1,2,1] The sum is: 6 The output should be: (3, 6) which are the start and end indices of the subarray. Write the Python code to implement this. Your function should return the starting index, ending index, and the maximum sum of the subarray.","solution":"def max_subarray(nums): Find the subarray with the maximum sum. Parameters: nums (list): The list of integers. Returns: tuple: A tuple containing the starting index, ending index, and the maximum sum of the subarray. if not nums: return 0, 0, 0 max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return start, end, max_sum"},{"question":"Utilize the wine quality dataset from https://archive.ics.uci.edu/ml/datasets/wine+quality, implement a Random Forest classification algorithm to predict the quality of the wine. Evaluate your model\'s performance by reporting the classification accuracy, precision, recall, and F1-score.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import classification_report, accuracy_score def load_data(url): Load wine quality dataset from the given URL. df = pd.read_csv(url, sep=\';\') return df def preprocess_data(df): Preprocess the data by separating features and target variable. X = df.drop(\'quality\', axis=1) y = df[\'quality\'] return X, y def train_random_forest(X, y): Train a Random Forest Classifier on the given data. X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) clf = RandomForestClassifier(n_estimators=100, random_state=42) clf.fit(X_train, y_train) y_pred = clf.predict(X_test) return y_test, y_pred def evaluate_model(y_test, y_pred): Evaluate the model performance and print the classification report. print(f\\"Accuracy: {accuracy_score(y_test, y_pred)}\\") print(classification_report(y_test, y_pred)) # Use a direct URL to the dataset url_white = \'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv\' # Load and preprocess the data df_white = load_data(url_white) X, y = preprocess_data(df_white) # Train the model and evaluate it y_test, y_pred = train_random_forest(X, y) evaluate_model(y_test, y_pred)"},{"question":"Write a function that takes a list of integers and shifts all the zero elements to the end while maintaining the relative order of the non-zero elements. The function should not use any additional lists or collections and should operate in-place. **Example:** ``` Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0] ```","solution":"def shift_zeros_to_end(arr): Shifts all zeros in the list to the end while maintaining the relative order of non-zero elements. This function modifies the list in-place. :param arr: List of integers non_zero_index = 0 # to place the next non-zero element for i in range(len(arr)): if arr[i] != 0: arr[non_zero_index] = arr[i] if non_zero_index != i: arr[i] = 0 # set the current position to zero since we are moving non-zeros to front non_zero_index += 1"},{"question":"Given a string s made up of lowercase letters and an integer k, write a function to determine if s can be segmented into a space-separated sequence of words such that each word is of length k and consists of unique characters only. If possible, return such a sequence, otherwise return an empty list. Example: s = \\"abcdefabcghi\\", k = 3 Output: [\\"abc\\", \\"def\\", \\"abc\\", \\"ghi\\"] Example: s = \\"aabc\\", k = 2 Output: []","solution":"def can_segment_string(s, k): Determines if a string s can be segmented into a sequence of words each of length k with unique characters. If possible, returns the sequence, otherwise an empty list. if len(s) % k != 0: return [] segments = [s[i:i+k] for i in range(0, len(s), k)] for segment in segments: if len(set(segment)) != k: return [] return segments"},{"question":"Write a program that takes a string which contains different words and counts the frequency of each word. Ignore case and punctuation when calculating the frequencies and return the frequencies in a dictionary. For example, given the string \\"Hello, hello!! How are you? Are you okay?\\", the output should be: {\\"hello\\": 2, \\"how\\": 1, \\"are\\": 2, \\"you\\": 2, \\"okay\\": 1}.","solution":"import re from collections import Counter def word_frequency(text): Takes a string and returns a dictionary with the frequency of each word, ignoring case and punctuation. # Remove punctuation using regex text = re.sub(r\'[^ws]\', \'\', text) # Convert text to lowercase text = text.lower() # Split text into words words = text.split() # Count frequencies using Counter word_counts = Counter(words) return dict(word_counts)"},{"question":"Implement a function that takes an integer array as input and returns a new array where each element at index \'i\' is the product of all the values in the original array except the one at \'i\'. You must solve this problem without using the division operation and in O(n) time complexity.","solution":"def product_except_self(nums): Takes an integer array as input and returns a new array where each element at index \'i\' is the product of all the values in the original array except the one at \'i\'. Args: nums (list): List of integers. Returns: list: List of integers where each element is the product of all other elements in the input list except the current element. n = len(nums) if n == 0: return [] result = [1] * n # Compute prefix products prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] # Compute suffix products and combine with prefix products suffix = 1 for i in range(n-1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"You are given a string containing only lowercase alphabetical characters. Your task is to implement an algorithm that removes any duplicate characters and returns the string with only the first occurrence of each character, while preserving the original order of characters. Example: Input: \\"programming\\" Output: \\"progamin\\" Additional example: Input: \\"mississippi\\" Output: \\"misp\\"","solution":"def remove_duplicates(s): Returns a string after removing duplicate characters while preserving the original order of characters. Parameters: s (str): Input string consisting of lowercase alphabetical characters Returns: str: String with duplicates removed seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Design a function that takes an integer indicating the number of times a robot moves forward. The robot\'s path is a sequence of moves within a 2D grid that adheres to the following rules: 1. The robot starts at position (0, 0). 2. It moves right (increasing x-coordinate) for the first step. 3. With each step, it alternates between moving upwards (increasing y-coordinate) and moving right (increasing x-coordinate). The function should return a list of tuples representing the sequence of coordinates visited by the robot. # Function Signature ```python def robot_path(n: int) -> List[Tuple[int, int]]: ``` # Input - `n` (int): The number of steps the robot takes. # Output - Returns a list of tuples, where each tuple represents the coordinates `(x, y)` of the robot\'s position after each step. # Example ```python robot_path(5) # Output: [(0, 0), (1, 0), (1, 1), (2, 1), (2, 2), (3, 2)] robot_path(0) # Output: [(0, 0)] ``` # Constraints - `0 <= n <= 10^4`","solution":"from typing import List, Tuple def robot_path(n: int) -> List[Tuple[int, int]]: Generates the sequence of coordinates visited by the robot in an n-step path. path = [(0, 0)] # Starting position x, y = 0, 0 for i in range(1, n + 1): if i % 2 != 0: x += 1 # Move right else: y += 1 # Move up path.append((x, y)) return path"},{"question":"Create a function that takes a list of integers and a target integer and returns all unique combinations of integers from the list that sum up to the target. Each number in the list can be used multiple times in the combination. Ensure the function only returns unique combinations, even if the same number appears multiple times in the input list. Additionally, write a brief analysis of the algorithm’s time complexity and explain how you ensure the uniqueness of the combinations.","solution":"def combination_sum(candidates, target): Returns all unique combinations of candidates where the numbers sum to target. Each number in candidates may be used unlimited times in the combination. :param candidates: List of integers :param target: Target sum integer result = [] candidates.sort() def backtrack(remaining, path, start): if remaining == 0: result.append(list(path)) return for i in range(start, len(candidates)): if candidates[i] > remaining: break path.append(candidates[i]) backtrack(remaining - candidates[i], path, i) path.pop() backtrack(target, [], 0) return result"},{"question":"Write a function that processes a string which either represents a list of integers or a sentence and performs specific operations based on the input type: def process_string(input_string): \'\'\' Given an input string, if it contains only numerical characters separated by spaces, return the maximum number in the list. If the string contains any alphabetical characters, return the length of the longest word in the sentence. Words are defined as sequences of characters separated by spaces. Examples: process_string(\\"4 19 8 12 31\\") ➞ 31 process_string(\\"The quick brown fox jumps over the lazy dog\\") ➞ 5 process_string(\\"Python3 is awesome!\\") ➞ 8 \'\'\'","solution":"def process_string(input_string): Given an input string, if it contains only numerical characters separated by spaces, return the maximum number in the list. If the string contains any alphabetical characters, return the length of the longest word in the sentence. Words are defined as sequences of characters separated by spaces. # Check if the input_string is just numbers and spaces if all(c.isdigit() or c.isspace() for c in input_string): numbers = list(map(int, input_string.split())) return max(numbers) if numbers else None # Otherwise, find the length of the longest word words = input_string.split() longest_word_length = max(len(word) for word in words) return longest_word_length"},{"question":"Write a Python function that determines if the sum of all the even numbers in a given list is a prime number or not. If the list contains non-integer elements, the function should raise a ValueError. Additionally, write appropriate test cases to ensure the function works correctly. Demonstrate your solution following Object-Oriented Programming principles. Here\'s a faulty code to consider: ```python class PrimeSumChecker: def __init__(self, num_list): self.num_list = num_list def isPrime(self, n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def checkSum(self): even_sum = sum(num for num in self.num_list if num % 2 == 0) return self.isPrime(even_sum) num_list = [2, 4, 6, 7, \'10\'] checker = PrimeSumChecker(num_list) print(checker.checkSum()) ``` The code above will result in TypeError due to the list containing a string element. Improve upon this code and correct its faults in your answer.","solution":"class PrimeSumChecker: def __init__(self, num_list): self.num_list = num_list self.validate_list() def validate_list(self): if not all(isinstance(num, int) for num in self.num_list): raise ValueError(\\"List contains non-integer elements\\") def is_prime(self, n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def check_sum(self): even_sum = sum(num for num in self.num_list if num % 2 == 0) return self.is_prime(even_sum)"},{"question":"You are given a piece of erroneous code that\'s supposed to reverse the words in a given sentence while maintaining the order of punctuation, but it isn\'t working as expected. Erroneous code: ```python def reverse_words(sentence): words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) return reversed_sentence print(reverse_words(\\"Hello, world! How are you?\\")) ``` Please correct the given faulty code and make sure it correctly reverses the words while maintaining the punctuation at their respective positions in the original sentence. Additionally, modify your function so it\'s robust against erroneous input, such as an empty string, and throws an appropriate custom error message when an invalid input is provided.","solution":"import re def reverse_words(sentence): if not sentence: raise ValueError(\\"Input sentence cannot be empty\\") pattern = re.compile(r\'(w+|W+)\') tokens = pattern.findall(sentence) words = [token for token in tokens if token.isalnum()] reversed_words = list(reversed(words)) reversed_sentence = [] word_index = 0 for token in tokens: if token.isalnum(): reversed_sentence.append(reversed_words[word_index]) word_index += 1 else: reversed_sentence.append(token) return \'\'.join(reversed_sentence) # Example usage: # print(reverse_words(\\"Hello, world! How are you?\\"))"},{"question":"Write a function that receives a string containing a mix of uppercase and lowercase letters. The function should return a new string with only the lowercase letters. For example, if the input string is \\"HeLLoWoRLd\\", the function should return \\"eood\\".","solution":"def extract_lowercase(s): Returns a new string containing only the lowercase letters from the input string `s`. return \'\'.join([char for char in s if char.islower()])"},{"question":"Write a function that takes a string of comma-separated numbers and returns the highest product that can be obtained from any three numbers in the list. You can assume all input numbers are non-negative integers. Example: Input: \\"1,2,3,4,5\\" Output: 60 Explanation: The highest product is obtained by multiplying 3, 4, and 5 which gives 60.","solution":"def highest_product_of_three(string): Given a string of comma-separated numbers, returns the highest product that can be obtained from any three numbers in the list. # Convert the string to a list of integers nums = list(map(int, string.split(\',\'))) # Sort the list of numbers in non-descending order nums.sort() # The maximum product of three numbers can be obtained by: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (negative or zero) and the largest number max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) return max_product"},{"question":"Write a function that takes an unsorted list of integers and returns a new list containing only the prime numbers from the original list, sorted in ascending order. Ensure that the solution has an optimal time complexity for verification of primality and sorting the numbers.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_from_list(numbers): Takes an unsorted list of integers and returns a new list containing only the prime numbers from the original list, sorted in ascending order. primes = [num for num in numbers if is_prime(num)] return sorted(primes)"},{"question":"Using Python, implement a class `Library` that manages a collection of books. Implement the following methods: - `add_book(title, author)`: Adds a book with the given title and author to the library. - `remove_book(title)`: Removes a book with the given title from the library. - `find_books_by_author(author)`: Returns a list of titles by the given author. - `get_all_books()`: Returns a list of all books in the library in the format `\\"{title} by {author}\\"`. Ensure you handle cases where a book to be removed does not exist and searching for an author with no books in the library. Additionally, provide a small demonstration of the functionality, showing how the class handles several different operations, including edge cases.","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author): Adds a book with the given title and author to the library. self.books.append({\\"title\\": title, \\"author\\": author}) def remove_book(self, title): Removes a book with the given title from the library. Returns True if the book was removed, otherwise False. for book in self.books: if book[\\"title\\"] == title: self.books.remove(book) return True return False def find_books_by_author(self, author): Returns a list of titles by the given author. return [book[\\"title\\"] for book in self.books if book[\\"author\\"] == author] def get_all_books(self): Returns a list of all books in the library in the format \\"{title} by {author}\\". return [f\'{book[\\"title\\"]} by {book[\\"author\\"]}\' for book in self.books] # Demonstration library = Library() library.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\") library.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") library.add_book(\\"1984\\", \\"George Orwell\\") library.add_book(\\"Animal Farm\\", \\"George Orwell\\") print(\\"All Books:\\") print(library.get_all_books()) print(\\"nBooks by George Orwell:\\") print(library.find_books_by_author(\\"George Orwell\\")) print(\\"nRemoving \'1984\':\\") library.remove_book(\\"1984\\") print(library.get_all_books()) print(\\"nAttempting to remove \'Nonexistent Book\':\\") result = library.remove_book(\\"Nonexistent Book\\") print(f\\"Book removed: {result}\\") print(library.get_all_books())"},{"question":"You need to write a function in Python that simulates an ATM machine. The ATM machine must support the following operations: 1. `deposit(amount: int) -> None`: Deposits the given amount into the account. 2. `withdraw(amount: int) -> bool`: Withdraws the given amount from the account if there are sufficient funds. Returns `True` if the withdrawal was successful, or `False` otherwise. 3. `check_balance() -> int`: Returns the current balance of the account. Implement the ATM machine as a class with the specified methods. Below is the expected behavior with an example of method calls: # Example Usage: ```python atm = ATM() atm.deposit(500) print(atm.check_balance()) # Output: 500 successful = atm.withdraw(200) print(successful) # Output: True print(atm.check_balance()) # Output: 300 successful = atm.withdraw(400) print(successful) # Output: False print(atm.check_balance()) # Output: 300 ``` # Constraints: - All amounts involved (both for deposits and withdrawals) will be non-negative integers. - The operations should handle edge cases like withdrawing when balance is zero, depositing zero amount, etc. - Methods should not print any output; they should only return the necessary values. Complete the class `ATM` with the required methods: ```python class ATM: def __init__(self): # Initialize balance to 0 pass def deposit(self, amount: int) -> None: # Add the deposit amount to the balance pass def withdraw(self, amount: int) -> bool: # Withdraw the amount from the balance if sufficient funds are available, return True # Otherwise, return False pass def check_balance(self) -> int: # Return the current balance pass ```","solution":"class ATM: def __init__(self): # Initialize balance to 0 self.balance = 0 def deposit(self, amount: int) -> None: # Add the deposit amount to the balance self.balance += amount def withdraw(self, amount: int) -> bool: # Withdraw the amount from the balance if sufficient funds are available, return True if amount <= self.balance: self.balance -= amount return True # Otherwise, return False return False def check_balance(self) -> int: # Return the current balance return self.balance"},{"question":"You are given two lists of integers, `list1` and `list2`. Write a Python function that merges these two lists into a single list such that the resultant list is sorted in non-decreasing order. Do not use any built-in sort functions. Instead, implement the merge operation manually as you would in the merge step of the merge sort algorithm. Assume both `list1` and `list2` are already sorted in non-decreasing order. Return the resultant sorted list. ```python def merge_sorted_lists(list1, list2): # Your code here # Example Usage: # list1 = [1, 3, 5, 7] # list2 = [2, 4, 6, 8] # Output: [1, 2, 3, 4, 5, 6, 7, 8] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Args: - list1: List of integers sorted in non-decreasing order. - list2: List of integers sorted in non-decreasing order. Returns: - A list of integers sorted in non-decreasing order. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function that computes the n-th Fibonacci number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Your task is to write a function `def fibonacci(n: int) -> int` that efficiently calculates the n-th Fibonacci number. The function should handle large values of `n` (up to 10^5) efficiently. Constraints: 1. n is a non-negative integer (0 ≤ n ≤ 10^5). Example: ```python assert fibonacci(0) == 0 assert fibonacci(1) == 1 assert fibonacci(10) == 55 assert fibonacci(50) == 12586269025 ``` Requirements: - Provide a single function as solution. - Explain how the efficiency of your solution is achieved, focusing on the time and space complexities.","solution":"def fibonacci(n: int) -> int: Returns the n-th Fibonacci number using an iterative approach for efficiency. This method achieves a time complexity of O(n) and a space complexity of O(1). if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Implement a Python program based on the following requirements. # Task: Write a Python class `BankAccount` that simulates a simple bank account. This class should have the following functionalities: - Ability to initialize a bank account with a balance and an account holder\'s name. - Methods to deposit money into the account, withdraw money from the account, and check the balance. - Add a method to calculate the interest for a given period based on an annual interest rate. The interest should be added to the balance at the end of the period. Additionally, create a subclass `SavingsAccount` that extends `BankAccount`: - The `SavingsAccount` class should have an additional attribute to track the number of withdrawals. For every third withdrawal, an additional fee of 2 should be charged. - Override the withdraw method to implement this additional fee logic. Finally, identify and fix the errors in the following piece of code: ```python class BankAccount def __init__(self, balance = 0, account_holder): self.balance = balance self.account_holder = account_holder def deposit(amount): balance += amount def withdraw(amount): balance -= amount class SavingsAccount(BankAccount): def __init__(self, balance, account_holder): BankAccount.__init__(balance, account_holder) withdrawals = 0 def withdraw(amount): self.withdrawals += 1 if withdrawals % 3 == 0: amount += 2 BankAccount.withdraw(amount) def balance_check(): print(\\"Current balance:\\", balance) ```","solution":"class BankAccount: def __init__(self, account_holder, balance=0): self.balance = balance self.account_holder = account_holder def deposit(self, amount): self.balance += amount def withdraw(self, amount): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount def check_balance(self): return self.balance def calculate_interest(self, annual_rate, years): interest = self.balance * (annual_rate / 100) * years self.balance += interest return interest class SavingsAccount(BankAccount): def __init__(self, account_holder, balance=0): super().__init__(account_holder, balance) self.withdrawals = 0 def withdraw(self, amount): self.withdrawals += 1 if self.withdrawals % 3 == 0: amount += 2 # Charging an additional fee of 2 every third withdrawal super().withdraw(amount)"},{"question":"Evaluate the grammatical coherence of the following sentence and correct it if necessary. The sentence is: \\"Despite of the rain, the event was continued as originally schedule.\\"","solution":"def correct_sentence(sentence): Corrects the grammatical errors in the given sentence. Args: sentence (str): The grammatically incorrect sentence. Returns: str: The corrected sentence. return \\"Despite the rain, the event was continued as originally scheduled.\\""},{"question":"Write a function in Python that takes a string as input and returns a new string where each character has been replaced by the next character in the alphabet. For example, \'a\' becomes \'b\', \'b\' becomes \'c\', and so on. The last character \'z\' should wrap around to \'a\'. Preserve the case of the characters, which means \'a\' is replaced by \'b\', \'A\' is replaced by \'B\', and \'Z\' is replaced by \'A\'. If the input string contains non-alphabet characters like digits or punctuation, leave them unchanged in the output. Provide a function definition along with a few examples to demonstrate its usage.","solution":"def next_char_string(s): Takes a string as input and returns a new string where each character has been replaced by the next character in the alphabet. Non-alphabet characters are left unchanged. Case is preserved. def next_char(c): if \'a\' <= c <= \'z\': return \'a\' if c == \'z\' else chr(ord(c) + 1) elif \'A\' <= c <= \'Z\': return \'A\' if c == \'Z\' else chr(ord(c) + 1) else: return c return \'\'.join(next_char(c) for c in s) # Examples print(next_char_string(\\"abcd\\")) # \\"bcde\\" print(next_char_string(\\"xyz\\")) # \\"yza\\" print(next_char_string(\\"ABCD\\")) # \\"BCDE\\" print(next_char_string(\\"XYZ\\")) # \\"YZA\\" print(next_char_string(\\"Hello, World!\\")) # \\"Ifmmp, Xpsme!\\" print(next_char_string(\\"Python 3.8\\")) # \\"Qzuipo 3.8\\""},{"question":"Design a function that accepts a list of strings, filters out any strings that contain non-alphabetic characters, and returns the list of filtered strings in sorted order. Example: Input: [\'abc\', \'123\', \'hello1\', \'world\', \'test!\'] Output: [\'abc\', \'world\']","solution":"def filter_and_sort_strings(strings): Filters out any strings that contain non-alphabetic characters and returns the list of filtered strings in sorted order. :param list strings: List of strings to be filtered and sorted. :return: List of filtered and sorted strings containing only alphabetic characters. :rtype: list # Filter strings that contain only alphabetic characters filtered_strings = [s for s in strings if s.isalpha()] # Sort the filtered list sorted_filtered_strings = sorted(filtered_strings) return sorted_filtered_strings"},{"question":"Write a Python function `reverse_words(sentence: str) -> str` that takes a sentence as input and returns the sentence with the order of the words reversed. The function should preserve the original punctuation and spacing. For example, given the input `\\"Hello, world! How are you?\\"`, the output should be `\\"you? are How world! Hello,\\"`. **Constraints:** - The input sentence will only contain printable ASCII characters and spaces. - Preserve punctuation and capitalization. - You may assume that there is exactly one space between words.","solution":"def reverse_words(sentence: str) -> str: Reverses the order of words in a sentence while preserving punctuation and capitalization. words = sentence.split() reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"Create a function in Python that takes a single string where each character represents a unique binary number (\'0\' or \'1\'). The function should identify and return the length of the longest contiguous subsequence of identical digits in the provided string. If there are multiple subsequences with the same maximum length, the function should return the first one encountered in the string.","solution":"def longest_continuous_subseq(binary_string): Returns the length of the longest contiguous subsequence of identical digits in the provided binary string. if not binary_string: return 0 max_length = 1 current_length = 1 # Iterate through the binary string to find the longest contiguous subsequence for i in range(1, len(binary_string)): if binary_string[i] == binary_string[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 # This final check is needed in case the longest subsequence is at the end of the string if current_length > max_length: max_length = current_length return max_length"},{"question":"Develop a function that computes the longest sequence of unique characters in a given string. The function should return the length of this sequence. Use a sliding window approach to optimize the function\'s performance. def longest_unique_substring(s): Calculate the length of the longest substring with all unique characters. Examples: >>> longest_unique_substring(\\"abrkaabcdefghijjxxx\\") == 10 # \\"abcdefghij\\" >>> longest_unique_substring(\\"geeksforgeeks\\") == 7 # \\"eksforg\\" >>> longest_unique_substring(\\"\\") == 0 >>> longest_unique_substring(\\"bbbbbb\\") == 1 # \\"b\\" # Include your code here","solution":"def longest_unique_substring(s): Calculate the length of the longest substring with all unique characters. Args: s (str): The input string. Returns: int: The length of the longest substring with all unique characters. if not s: return 0 max_length = 0 start = 0 seen_chars = {} for end in range(len(s)): if s[end] in seen_chars and seen_chars[s[end]] >= start: start = seen_chars[s[end]] + 1 seen_chars[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Develop a function that simulates a simplified version of the \\"Game of Life\\" on an m x n board. The function should take the initial state of the board and an integer k as input and return the state of the board after k iterations. In this game, the board is made up of an m x n grid of cells, where each cell can be either alive (1) or dead (0). Every cell interacts with its eight neighbors. The rules of the game are as follows: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Implement the function with the following signature: def game_of_life(board: List[List[int]], k: int) -> List[List[int]]:","solution":"from typing import List def game_of_life(board: List[List[int]], k: int) -> List[List[int]]: def count_live_neighbors(board: List[List[int]], x: int, y: int) -> int: directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(board) and 0 <= ny < len(board[0]): count += board[nx][ny] return count def next_state(board: List[List[int]]) -> List[List[int]]: m, n = len(board), len(board[0]) new_board = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): live_neighbors = count_live_neighbors(board, i, j) if board[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: new_board[i][j] = 0 else: new_board[i][j] = 1 else: if live_neighbors == 3: new_board[i][j] = 1 return new_board for _ in range(k): board = next_state(board) return board"},{"question":"Implement a function that takes in a string representing a mathematical expression and returns the evaluated result. The string will contain non-negative integers and the operators +, -, *, and /. Assume the expression will always be valid and no parenthesis are used. The function should be able to handle the order of operations correctly (i.e., multiplication and division before addition and subtraction). For example: - Input: \\"3+5*2\\" - Output: 13 - Input: \\"10+6/2-4\\" - Output: 9 Your task is to write a function `evaluate_expression(expression: str) -> int`.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression given as a string, implementing order of operations. Parameters: expression (str): The mathematical expression containing non-negative integers and operators +, -, *, / Returns: int: The evaluated result of the expression. import re # Helper function to apply operator between two numbers def apply_operator(op, second, first): if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return first // second # use integer division # Precedence and associativity of operators precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} # Parse into tokens (numbers and operators) tokens = re.findall(r\'d+|[+-*/]\', expression) values = [] ops = [] for token in tokens: if token.isdigit(): values.append(int(token)) else: while (ops and precedence[ops[-1]] >= precedence[token]): op = ops.pop() second = values.pop() first = values.pop() values.append(apply_operator(op, second, first)) ops.append(token) while ops: op = ops.pop() second = values.pop() first = values.pop() values.append(apply_operator(op, second, first)) return values[0]"},{"question":"Write a function that takes an input list of integers and returns a new list where each element is the square of the corresponding element in the input list. Ensure your solution efficiently handles large input sizes.","solution":"def square_elements(input_list): Returns a new list where each element is the square of the corresponding element in the input list. return [x ** 2 for x in input_list]"},{"question":"Design a Python function that takes a list of integers as input and returns a dictionary where the keys are the integers that appear in the list and the values are the number of times each integer appears in the list. Your function should handle cases where the list is empty and return an empty dictionary in that case.","solution":"def count_occurrences(lst): Returns a dictionary with the count of each integer in the input list. Args: lst (list): A list of integers. Returns: dict: A dictionary where the keys are integers from the list and the values are the number of times each integer appears in the list. occurrence_dict = {} for number in lst: if number in occurrence_dict: occurrence_dict[number] += 1 else: occurrence_dict[number] = 1 return occurrence_dict"},{"question":"Devise a function that checks whether a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization). The function should return `True` if the string can be rearranged to form a palindrome, and `False` otherwise. Additionally, a piece of code is provided below that attempts to solve this task but may contain an error. Analyze the code, identify the mistake, and modify it to ensure it meets the problem\'s requirements. ```python def can_form_palindrome(s): s = s.lower().replace(\\" \\", \\"\\") char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 2 print(can_form_palindrome(\\"Tact Coa\\")) # Expected output: True, because it can be rearranged as \\"taco cat\\" or \\"atco cta\\" print(can_form_palindrome(\\"A man a plan a canal Panama\\")) # Expected output: True, ignoring spaces, \\"amanaplanacanalpanama\\" is a palindrome print(can_form_palindrome(\\"No lemon no melon\\")) # Expected output: True, ignoring spaces, \\"nolemonnomelon\\" is a palindrome ``` The flaw in the code may not be immediately obvious, especially to beginners. Can you detect and correct the issue?","solution":"def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd count (for odd-length strings) and all other characters have even counts. For even-length strings, all characters must have even counts. # Only consider alphanumeric characters and make them lower case s = \'\'.join(char.lower() for char in s if char.isalnum()) # Create a count dictionary for characters char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be able to form a palindrome, we can have at most one odd character count return odd_count <= 1"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a list of all unique pairs of integers from the input list that sum up to the target integer. Each pair should be sorted in ascending order and the list of pairs should also be sorted by the first element of each pair. For example, given the list `[1, 2, 3, 4, 3, 6, 8]` and the target `6`, the function should return `[(2, 4), (3, 3)]`. The function should handle cases where there are no pairs that sum up to the target by returning an empty list. The input list can have negative, zero, and positive integers, and may contain duplicate values.","solution":"def find_pairs_with_sum(nums, target): Returns a list of unique pairs (sorted in ascending order) from the input list that sum up to the target integer. The list of pairs is also sorted by the first element of each pair. found_pairs = set() pairs = [] # Create a set to track seen numbers and avoid duplicates seen = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) if pair not in found_pairs: found_pairs.add(pair) pairs.append(pair) seen.add(num) # Sort pairs by the first element of each pair pairs.sort() return pairs"},{"question":"Create a function that takes a list of integers and returns a new list with the squares of the original integers that are even numbers. The function should maintain the order of the even numbers from the original list. Example input: numbers = [1, 2, 3, 4, 5, 6]","solution":"def even_squares(numbers): Takes a list of integers and returns a new list with the squares of the original integers that are even numbers. return [x**2 for x in numbers if x % 2 == 0]"},{"question":"Given a string comprised of parentheses (\'(\', \')\'), braces (\'{\', \'}\'), and brackets (\'[\', \']\'), design a function in Python that determines if the string represents a valid sequence. A valid sequence is one where every opening bracket has a corresponding closing bracket in the correct order. # Constraints: - The input string only contains the characters \'(\', \')\', \'{\', \'}\', \'[\', and \']\'. - The length of the string does not exceed 10^4. # Example Input: `\\"{[()]}\\"` Output: `True` Input: `\\"{[(])}\\"` Output: `False` # Instructions - Define a function `is_valid_sequence(s: str) -> bool` that returns True if the string `s` is a valid sequence of brackets, and False otherwise. - Use appropriate data structures and algorithms to ensure an efficient solution. - Include comments in your code to explain the logic and flow of your function.","solution":"def is_valid_sequence(s: str) -> bool: Determines if the input string \'s\' containing parentheses, braces, and brackets is a valid sequence. A valid sequence has every opening bracket matched by a corresponding closing bracket in the correct order. stack = [] closing_to_opening = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for character in s: if character in closing_to_opening.values(): # If it\'s an opening bracket stack.append(character) elif character in closing_to_opening.keys(): # If it\'s a closing bracket if not stack or stack.pop() != closing_to_opening[character]: return False return len(stack) == 0"},{"question":"Write a function `findTheMostFrequent(str)` that takes a string `str` as an argument and returns the character that appears the most frequently in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. Consider only alphanumeric characters (both lowercase and uppercase letters should be treated as distinct characters), and ignore any other characters. The function should have a time complexity of O(n), where n is the length of the string.","solution":"def findTheMostFrequent(s): Returns the character that appears the most frequently in the string `s`. If there are multiple characters with the same highest frequency, returns the one that appears first. Only alphanumeric characters are considered. from collections import defaultdict # Dictionary to store the frequency of alphanumeric characters frequency = defaultdict(int) max_freq = 0 most_frequent_char = None for char in s: if char.isalnum(): # consider only alphanumeric characters frequency[char] += 1 # Update the most frequent character and its frequency if frequency[char] > max_freq: max_freq = frequency[char] most_frequent_char = char return most_frequent_char"},{"question":"Design an algorithm that efficiently merges two sorted linked lists into one, while preserving the order. Both linked lists contain integers and are sorted in ascending order. Implement your solution in a programming language of your choice, ensuring the function signature matches conventional practices. Additionally, provide a brief explanation of the time complexity of your algorithm.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1: ListNode, l2: ListNode) -> ListNode: Merges two sorted linked lists into one sorted linked list. :param l1: ListNode | The head of the first sorted linked list. :param l2: ListNode | The head of the second sorted linked list. :return: ListNode | The head of the merged sorted linked list. # Create a prehead node to simplify edge cases prehead = ListNode(-1) # Maintain a reference to the current node we\'ll be adding to current = prehead # Traverse both lists while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If we reach the end of one list, append the other list current.next = l1 if l1 is not None else l2 return prehead.next"},{"question":"Implement a Python function that takes a string of words separated by spaces and outputs a dictionary where the keys are the unique words from the string and the values are their respective frequencies. Exclude common stopwords such as \\"the,\\" \\"is,\\" \\"in,\\" \\"and,\\" etc., from the dictionary. Additionally, provide a function to display the top three most frequent words from the dictionary. **Example Input**: \\"The quick brown fox jumps over the lazy dog and the dog barked and barked\\" **Example Output**: ```python { \'quick\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 2, \'barked\': 2 } Most frequent words: dog, barked, quick/brown/fox/jumps/over/lazy (any one of these depending upon the order in implementation) ``` **Requirements**: - Implement the function for calculating word frequencies excluding stopwords. - Implement the function for extracting and displaying the top three most frequent words. - Validate your functions with the provided example. **Challenge**: Analyze how your solution handles edge cases such as punctuation marks, varying case (uppercase vs. lowercase), and how you ensure stopwords are excluded effectively. Use suitable data structures in your implementation for optimal performance.","solution":"import re from collections import Counter # List of common stopwords STOPWORDS = set([ \'the\', \'is\', \'in\', \'and\', \'of\', \'to\', \'a\', \'that\', \'it\', \'on\', \'for\', \'with\', \'as\', \'by\', \'an\', \'be\', \'this\', \'or\', \'are\', \'was\', \'at\', \'which\', \'but\', \'from\', \'has\' ]) def word_frequencies(text): Returns a dictionary with the frequencies of unique words in the text, excluding common stopwords. # Normalize text to lowercase and remove punctuation text = re.sub(r\'[^ws]\', \'\', text.lower()) words = text.split() # Filter out stopwords and count word frequencies filtered_words = [word for word in words if word not in STOPWORDS] word_count = Counter(filtered_words) return dict(word_count) def top_three_words(word_freq): Returns the top three most frequent words from the given word frequency dictionary. # Sort words by frequency in descending order sorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True) # Get the top three words return [word for word, freq in sorted_words[:3]]"},{"question":"Create a Python script that processes a text file containing a list of student names and their grades. The script should read the file, calculate the average grade for the class, identify the top three students based on their grades, and output a new file with the original data, the calculated average, and a list of the top three students. Ensure the script handles cases where multiple students have the same grade in a consistent manner.","solution":"def process_grades(input_file, output_file): Processes student grades from an input file, calculates the class average, identifies the top three students, and writes the results to an output file. Args: input_file (str): The name of the input file containing student names and grades. output_file (str): The name of the output file where results will be saved. students = [] # Read the input file and extract student names and grades with open(input_file, \'r\') as file: for line in file: name, grade = line.strip().split(\',\') students.append((name, float(grade))) # Calculate the average grade total_grades = sum(grade for _, grade in students) average_grade = total_grades / len(students) # Identify the top three students students_sorted = sorted(students, key=lambda x: x[1], reverse=True) top_three_students = students_sorted[:3] # Write the results to the output file with open(output_file, \'w\') as file: for student in students: file.write(f\\"{student[0]},{student[1]}n\\") file.write(f\\"nAverage Grade: {average_grade:.2f}n\\") file.write(f\\"Top Three Students:n\\") for student in top_three_students: file.write(f\\"{student[0]}: {student[1]}n\\")"},{"question":"Create a function in Python that takes a list of integers and an integer value k, and returns the k most frequent elements in the list. If there is a tie for the k-th place in terms of frequency, return the smallest elements first. Implement your solution with a time complexity better than O(n^2). The function should be named most_frequent_elements and have the following signature: ```python def most_frequent_elements(numbers, k): Returns the k most frequent elements in the list. In case of a tie for k-th place, return the smallest elements first. >>> most_frequent_elements([4, 1, -1, 2, -1, 2, 3], 2) [-1, 2] >>> most_frequent_elements([1, 2, 3, 1, 2, 3, 1, 2, 3], 2) [1, 2] >>> most_frequent_elements([4, 4, 4, 1, 1, 2, 2, 3, 3], 2) [4, 1] ``` Your implementation should handle the following: - If `k` is greater than the number of unique elements in the list, return the entire list of unique elements sorted by frequency and then by value. - If `k` is 0, return an empty list. - Ensure that the function does not modify the original list.","solution":"from collections import Counter def most_frequent_elements(numbers, k): Returns the k most frequent elements in the list. In case of a tie for k-th place, return the smallest elements first. if k == 0: return [] # Count frequency of each number frequency_counter = Counter(numbers) # Create a sorted list of the elements based on frequency first, then value sorted_elements = sorted(frequency_counter.items(), key=lambda item: (-item[1], item[0])) # Extract only the elements, not the frequency count result = [element for element, count in sorted_elements] # Return the top k elements return result[:k]"},{"question":"Implement a function to merge two sorted linked lists into a single sorted linked list. Ensure that your function maintains the order of the elements in the merged list. Additionally, provide a detailed analysis of the time and space complexity of your solution. Finally, create test cases to demonstrate that your function handles all edge cases such as empty lists, lists of different lengths, and lists where all elements are the same. **Guidelines:** 1. Define the `ListNode` class to represent a node in the linked list. 2. Implement the `mergeTwoLists` function that takes two sorted linked lists as input and returns the head of the merged sorted linked list. 3. Analyze the time and space complexity of your implementation. 4. Write comprehensive test cases to verify the correctness of your implementation, including edge cases.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists into one sorted linked list. :param l1: ListNode | None, the head of the first sorted linked list :param l2: ListNode | None, the head of the second sorted linked list :return: ListNode | None, the head of the merged sorted linked list dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 if l1 else l2 return dummy.next # Time Complexity: O(n + m), where n and m are the lengths of the two linked lists. # Space Complexity: O(1), because we are not using any extra space except for the pointers."},{"question":"Implement a file versioning system in a Python-based desktop application that uses SQLite to manage and store file versions. The system should allow users to: 1. Save different versions of a file with timestamps. 2. Retrieve and restore any previous version of the file. 3. Automatically manage storage to prevent excessive space usage by implementing a strategy to keep only the most recent versions and deleting older ones. 4. Ensure that the system is robust against improper shutdowns or crashes by incorporating a mechanism for integrity checks and recovery when the application is restarted. Additionally, the system should provide an intuitive user interface to handle these functionalities seamlessly.","solution":"import sqlite3 import os import datetime class FileVersioningSystem: def __init__(self, db_path, max_versions=5): self.db_path = db_path self.max_versions = max_versions self.conn = sqlite3.connect(self.db_path) self._create_table() def _create_table(self): with self.conn: self.conn.execute( CREATE TABLE IF NOT EXISTS file_versions ( id INTEGER PRIMARY KEY, file_name TEXT NOT NULL, version INTEGER NOT NULL, timestamp TEXT NOT NULL, file_content BLOB NOT NULL ) ) def save_version(self, file_path): file_name = os.path.basename(file_path) timestamp = datetime.datetime.utcnow().isoformat() with open(file_path, \'rb\') as file: file_content = file.read() with self.conn: self.conn.execute( INSERT INTO file_versions (file_name, version, timestamp, file_content) VALUES (?, COALESCE((SELECT MAX(version) FROM file_versions WHERE file_name = ?), 0) + 1, ?, ?) , (file_name, file_name, timestamp, file_content)) self._manage_storage(file_name) def retrieve_version(self, file_name, version): cursor = self.conn.execute( SELECT file_content FROM file_versions WHERE file_name = ? AND version = ? , (file_name, version)) row = cursor.fetchone() return row[0] if row else None def restore_version(self, file_name, version, restore_path): file_content = self.retrieve_version(file_name, version) if file_content: with open(restore_path, \'wb\') as file: file.write(file_content) return True return False def _manage_storage(self, file_name): cursor = self.conn.execute( SELECT COUNT(*) FROM file_versions WHERE file_name = ? , (file_name,)) versions_count = cursor.fetchone()[0] if versions_count > self.max_versions: cursor = self.conn.execute( SELECT id FROM file_versions WHERE file_name = ? ORDER BY version ASC LIMIT ? , (file_name, versions_count - self.max_versions)) ids_to_delete = [row[0] for row in cursor.fetchall()] with self.conn: self.conn.executemany( DELETE FROM file_versions WHERE id = ? , [(id_,) for id_ in ids_to_delete]) def close(self): self.conn.close() # Example UI can be implemented using tkinter or any other GUI framework # For simplicity, we omit the UI implementation in this example"},{"question":"Create a function that simulates a simplified library system in which users can borrow and return books. The library should maintain a catalog of available books and track which books are currently borrowed by users. Implement the following functionalities: 1. **Add a Book:** Add a new book to the catalog. Each book has a title and an author. 2. **Borrow a Book:** Allow a user to borrow a book if it is available. Track the username along with the borrowed book\'s title and author. 3. **Return a Book:** Allow a user to return a borrowed book. The book should be marked as available in the catalog once returned. 4. **List Available Books:** List all books currently available in the library. 5. **List Borrowed Books:** List all books currently borrowed and the respective usernames. Additionally, ensure that the function handles cases where a user attempts to borrow a book that is not available or tries to return a book that was not borrowed.","solution":"class Library: def __init__(self): self.catalog = {} self.borrowed_books = {} def add_book(self, title, author): if title not in self.catalog: self.catalog[title] = author def borrow_book(self, username, title): if title in self.catalog and title not in self.borrowed_books: self.borrowed_books[title] = username return True return False def return_book(self, username, title): if title in self.borrowed_books and self.borrowed_books[title] == username: del self.borrowed_books[title] return True return False def list_available_books(self): return {title: author for title, author in self.catalog.items() if title not in self.borrowed_books} def list_borrowed_books(self): return {title: (author, username) for title, author in self.catalog.items() if title in self.borrowed_books and (username := self.borrowed_books[title])}"},{"question":"Write a Python function that accepts a list of integers and returns a list of tuples representing the prime factorization of each integer. Each tuple within the list should contain a prime factor and its exponent in order of smallest to largest prime factor. For example, the prime factorization of 28 is (2, 2), (7, 1). Additionally, include a secondary function to cross-verify the results by reconstructing each integer from its prime factors and comparing it to the original list of integers. If any discrepancy is found, the function should return a message indicating the error.","solution":"def prime_factors(n): Returns the prime factorization of n as a list of tuples containing each prime factor and its exponent. i = 2 factors = [] while i * i <= n: count = 0 while (n % i) == 0: n //= i count += 1 if count > 0: factors.append((i, count)) i += 1 if n > 1: factors.append((n, 1)) return factors def prime_factorization_list(lst): Returns a list of prime factorization for each integer in the input list. Each element in the result contains tuples representing prime factors and their exponents. return [prime_factors(x) for x in lst] def verify_prime_factorizations(lst, factorizations): Verifies the factorizations by reconstructing the numbers and comparing them to the original list. Returns a message if any discrepancy is found, otherwise returns \\"All factorizations are correct\\". for original, factors in zip(lst, factorizations): reconstructed = 1 for base, exponent in factors: reconstructed *= (base ** exponent) if reconstructed != original: return f\\"Discrepancy found: original {original}, reconstructed {reconstructed}\\" return \\"All factorizations are correct\\""},{"question":"Given an unsorted array of integers, find the length of the longest increasing subsequence in the array. The subsequence need not be contiguous, but the order of elements must be preserved as in the original array. Your task is to write a function that determines the length of the longest increasing subsequence in the array with optimal time complexity. Here is the function header: ```python def longest_increasing_subsequence(arr): # Implement your solution here pass ``` Considerations: 1. You should aim for an efficient algorithm with a time complexity better than O(n^2). 2. Include comments explaining your logic and approach to solving the problem. 3. Handle edge cases, such as an empty array, appropriately.","solution":"import bisect def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the array using an O(n log n) approach with dynamic programming and binary search. if not arr: return 0 # Helper list to store the smallest end elements of increasing subsequences of different lengths subseq_ends = [] for num in arr: # Find the index of the smallest element greater than or equal to `num` idx = bisect.bisect_left(subseq_ends, num) # If `num` is greater than all elements in subseq_ends, it extends the largest subsequence if idx == len(subseq_ends): subseq_ends.append(num) else: # Otherwise, replace the existing element with `num` to keep subseq_ends optimal subseq_ends[idx] = num # The length of the subseq_ends list is the length of the longest increasing subsequence return len(subseq_ends)"},{"question":"Given a string, return a map where each word is a key and the value is the number of times that word appears in the string. Ignore case sensitivity and punctuation. Example: \\"Hello world, hello! This is a test. Hello, world...\\" Output: {\\"hello\\": 3, \\"world\\": 2, \\"this\\": 1, \\"is\\": 1, \\"a\\": 1, \\"test\\": 1}","solution":"import re from collections import defaultdict def word_count(s): Returns a map where each word is a key and the value is the number of times that word appears in the string. Ignores case sensitivity and punctuation. # Removing punctuation and converting to lower case words = re.findall(r\'bw+b\', s.lower()) # Counting words using a dictionary word_map = defaultdict(int) for word in words: word_map[word] += 1 return dict(word_map)"},{"question":"Implement a function `count_letter_occurrences` that takes two arguments: a list of words and a single character (a letter). The function should return a dictionary where each key is a word from the list and the corresponding value is the number of times the given character appears in that word. # Input - `words`: A list of strings representing the words. Each string consists of lowercase alphabetic characters (a-z). - `char`: A string of length 1, representing the character whose occurrences are to be counted in each word. # Output - A dictionary where each key is a word from the input list and the value is an integer representing the number of times the given character appears in that word. # Example ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\"] char = \\"a\\" result = count_letter_occurrences(words, char) print(result) ``` Output: ```python { \\"apple\\": 1, \\"banana\\": 3, \\"cherry\\": 0 } ``` # Constraints - The length of each word in the words list is between 1 and 100. - The number of words in the words list is between 1 and 1000. - The character to be counted will always be a lowercase letter. # Note - Do not use built-in functions like `str.count`; try to implement the counting logic manually.","solution":"def count_letter_occurrences(words, char): Returns a dictionary with each word and the count of the specified character in that word. Parameters: words (list): List of words (strings). char (str): Single character to count in each word. Returns: dict: Dictionary with words as keys and count of char as values. result = {} for word in words: count = 0 for letter in word: if letter == char: count += 1 result[word] = count return result"},{"question":"Implement a Python function that takes a list of integers and returns a new list where each element is the square of the original element, but only if the original element is non-negative. Ensure your function effectively filters out any negative numbers before performing the squaring operation. Use the following list for testing: input_list = [-3, 1, 4, -2, 0, 5]","solution":"def square_non_negative_numbers(input_list): Returns a new list where each element is the square of the original element, but only if the original element is non-negative. Parameters: input_list (list): A list of integers. Returns: list: A list of squared non-negative integers. return [x ** 2 for x in input_list if x >= 0]"},{"question":"This program requires you to calculate the minimum number of coins needed to make a given amount using a specified set of coin denominations. Write a function `min_coins(coins, amount)` that takes in a list of integers `coins` representing the coin denominations, and an integer `amount` representing the total amount of money, and returns the minimum number of coins needed to make up that amount. If it\'s not possible to make that amount with the given coins, return -1. # Requirements - You can assume that there are infinite amounts of each coin denomination. - The coins list will contain at least one coin, and each coin denomination will be a positive integer. - The amount will be a non-negative integer. # Function Signature ```python def min_coins(coins: List[int], amount: int) -> int: pass ``` # Example ```python assert min_coins([1, 2, 5], 11) == 3 # Explanation: 11 = 5 + 5 + 1 assert min_coins([2], 3) == -1 # Explanation: It is not possible to make 3 with only 2 as a denomination assert min_coins([1], 0) == 0 # Explanation: 0 amount requires 0 coins ``` # Constraints - Use dynamic programming to solve this problem efficiently. - Ensure your solution works within a reasonable time and space complexity even for larger amounts.","solution":"from typing import List def min_coins(coins: List[int], amount: int) -> int: Returns the minimum number of coins needed to make up the given amount. If it\'s not possible to make that amount with the given coins, returns -1. # Create a DP array to store the minimum coins needed for each amount up to the given amount dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make amount 0 # Populate the DP array for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"You are given a dataset containing a series of timestamps and associated temperature readings from various sensors. Your task is to implement a solution to determine and visualize the daily average temperature collected from these sensors over a given month. Use Python libraries (such as pandas and matplotlib) to process the data and generate a time series plot. Provide a thorough interpretation of the temperature trends revealed by your visualization, and discuss any anomalies or patterns that emerge in the data.","solution":"import pandas as pd import matplotlib.pyplot as plt def calculate_daily_average_temperature(data): Calculate the daily average temperature from a dataset. Parameters: data (pd.DataFrame): A dataframe containing \'timestamp\' and \'temperature\' columns. Returns: pd.DataFrame: A dataframe containing \'date\' and \'average_temperature\' columns. # Ensure that \'timestamp\' is of datetime type and \'temperature\' is numeric data[\'timestamp\'] = pd.to_datetime(data[\'timestamp\']) data[\'temperature\'] = pd.to_numeric(data[\'temperature\']) # Set the \'timestamp\' as index data.set_index(\'timestamp\', inplace=True) # Resample data by day and calculate average temperature daily_avg_temp = data.resample(\'D\').mean() # Reset the index to have \'date\' as a column once again daily_avg_temp.reset_index(inplace=True) daily_avg_temp.rename(columns={\'timestamp\': \'date\', \'temperature\': \'average_temperature\'}, inplace=True) return daily_avg_temp def plot_daily_average_temperature(daily_avg_temp): Plot daily average temperature. Parameters: daily_avg_temp (pd.DataFrame): A dataframe containing \'date\' and \'average_temperature\' columns. plt.figure(figsize=(12, 6)) plt.plot(daily_avg_temp[\'date\'], daily_avg_temp[\'average_temperature\'], marker=\'o\') plt.title(\\"Daily Average Temperature\\") plt.xlabel(\\"Date\\") plt.ylabel(\\"Average Temperature (°C)\\") plt.grid(True) plt.xticks(rotation=45) plt.show()"},{"question":"Write a Python function that merges two sorted lists into a single sorted list without using the built-in sorted or sort functions. Consider the following edge cases: - What if one or both lists are empty? - What if one list is significantly longer than the other? - What if the lists contain duplicate elements? In addition to the main function, inspect and fix the provided erroneous merging function that fails to fully combine the lists correctly. Identify the mistake and adjust your solution accordingly. Here\'s the incorrect function for reference: ```python def merge_lists(list1, list2): merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 return merged_list ``` Use the following test cases to verify your function: - List1: [1, 3, 5, 7], List2: [2, 4, 6, 8] - List1: [], List2: [10, 20, 30] - List1: [5, 10, 15], List2: [5, 10, 15] - List1: [1, 4, 5], List2: [2, 3]","solution":"def merge_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Add any remaining elements from list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Add any remaining elements from list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a Python function that identifies and retrieves the \\"Happy Number\\" from a given range. A happy number is defined as a number which eventually reaches 1 when replaced by the sum of the square of each digit. If it loops endlessly in a cycle that does not include 1, then it is not a happy number. Your function should accept two integers as input corresponding to the range\'s start and end (inclusive), and return a list of all happy numbers within this range. Additionally, ensure the function includes appropriate error handling for invalid inputs.","solution":"def is_happy_number(n): Helper function to determine if a number n is a happy number. seen = set() while n != 1 and n not in seen: seen.add(n) n = sum(int(x) ** 2 for x in str(n)) return n == 1 def happy_numbers_in_range(start, end): Returns a list of happy numbers in the given range [start, end] inclusive. if not (isinstance(start, int) and isinstance(end, int)): raise ValueError(\\"Start and end must be integers.\\") if start > end: raise ValueError(\\"End must be greater than or equal to start.\\") happy_numbers = [] for num in range(start, end + 1): if is_happy_number(num): happy_numbers.append(num) return happy_numbers"},{"question":"Write a function that takes a list of integers and returns the list sorted in such a way that they appear in descending order based on their frequency of occurrence. If multiple integers have the same frequency, they should appear in ascending numerical order. For example, given the list `[4, 4, 1, 1, 1, 2, 2, 3]`, the output should be `[1, 1, 1, 2, 2, 4, 4, 3]` since `1` appears three times, `2` and `4` appear twice, and `3` appears once.","solution":"from collections import Counter def sort_by_frequency(arr): This function takes a list of integers and returns it sorted such that they appear in descending order based on their frequency of occurrence. If multiple integers have the same frequency, they appear in ascending numerical order. count = Counter(arr) # Sort first by frequency in descending order and then by value in ascending order sorted_arr = sorted(arr, key=lambda x: (-count[x], x)) return sorted_arr"},{"question":"Write a Python function `find_missing_number(arr)` that takes a list of integers representing a sequence of consecutive numbers with exactly one number missing, and returns the missing number. The list will contain at least two elements. Provide an example usage of the function with an explanation of how it operates.","solution":"def find_missing_number(arr): Returns the missing number in a sequence of consecutive numbers. :param arr: List of integers with exactly one number missing. :return: The missing number in the sequence. n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Given a dictionary that contains the frequency of different items sold in a store, your task is to write a Python function that takes this dictionary as input and returns a sorted list of tuples. Each tuple should contain the item as the first element and its frequency as the second element, sorted in descending order of frequency. If two items have the same frequency, they should be sorted alphabetically by item name. Here is an example of the input dictionary and the expected output list of tuples: Input: ```python items_sold = { \'apples\': 10, \'bananas\': 15, \'oranges\': 7, \'grapes\': 15, \'pears\': 10 } ``` Expected output: ```python [(\'bananas\', 15), (\'grapes\', 15), (\'apples\', 10), (\'pears\', 10), (\'oranges\', 7)] ``` Write a function `sort_items_by_frequency(items_sold)` that achieves this.","solution":"def sort_items_by_frequency(items_sold): Takes a dictionary of items sold with their frequencies and returns a sorted list of tuples. The list is sorted by frequency in descending order, and alphabetically by item name for ties. return sorted(items_sold.items(), key=lambda x: (-x[1], x[0]))"},{"question":"Write a function in Python that takes a list of integers and returns the largest sum of any contiguous subarray within the original array. The function should implement Kadane\'s Algorithm. Additionally, provide a brief explanation of Kadane\'s Algorithm and how it optimizes the search for the maximum subarray sum. ```python def max_subarray_sum(arr): # Assuming arr is a non-empty list of integers max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global # Explanation of Kadane\'s Algorithm: # Kadane\'s Algorithm works by iterating through the array while maintaining two values: # 1. `max_current`: the maximum sum of the subarray that ends at the current position. # 2. `max_global`: the maximum sum encountered so far. # At each position, the algorithm decides whether to add the current element to the existing subarray # `max_current + arr[i]` or to start a new subarray `arr[i]`. The more significant value is stored in `max_current`. # `max_global` is then updated accordingly to ensure it retains the greatest sum found so far. ```","solution":"def max_subarray_sum(arr): Returns the largest sum of any contiguous subarray within the given array using Kadane\'s Algorithm. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global # Explanation of Kadane\'s Algorithm: # Kadane\'s Algorithm works by iterating through the array while maintaining two values: # 1. `max_current`: the maximum sum of the subarray that ends at the current position. # 2. `max_global`: the maximum sum encountered so far. # At each position, the algorithm decides whether to add the current element to the existing subarray # `max_current + arr[i]` or to start a new subarray `arr[i]`. The more significant value is stored in `max_current`. # `max_global` is then updated accordingly to ensure it retains the greatest sum found so far."},{"question":"Write a Python function that takes a list of strings and an integer n as input and returns a new list containing only the strings that have exactly n characters. For instance, given the list [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"fig\\"], if n = 5, the function should return [\\"apple\\"].","solution":"def filter_strings_by_length(strings, n): Returns a list containing only the strings that have exactly n characters. Parameters: strings (list): A list of strings. n (int): The target length of the strings to filter. Returns: list: A list of strings that have exactly n characters. return [s for s in strings if len(s) == n]"},{"question":"Write a Python function that takes a list of strings and returns a new list that contains only the strings that are anagrams of the first string in the input list. The function does not need to handle case sensitivity. You also need to debug and fix the provided erroneous code which intends to do the same but is not returning the correct list of anagrams: ```python def find_anagrams(input_list): if not input_list: return [] base_word = input_list[0] sorted_base_word = sorted(base_word) return [word for word in input_list if sorted(word) == sorted_base_word] ``` The above code incorrectly returns the list of words with exact character matches, regardless of case. You need to modify the function to handle case sensitivity properly. Additionally, write a function that accepts two strings and returns `True` if both strings are anagrams of each other, and `False` otherwise. ```python is_anagram(\\"listen\\", \\"silent\\") # Should return True is_anagram(\\"hello\\", \\"world\\") # Should return False ``` Example: ```python input_list = [\\"listen\\", \\"enlist\\", \\"silent\\", \\"google\\", \\"inlets\\"] find_anagrams(input_list) ``` Should return: ```python [\\"listen\\", \\"enlist\\", \\"silent\\", \\"inlets\\"] ``` The second function should validate the anagram pairs ignoring case sensitivity: ```python is_anagram(\\"Listen\\", \\"Silent\\") # Should return True is_anagram(\\"Hello\\", \\"World\\") # Should return False ```","solution":"def find_anagrams(input_list): Returns a list of anagrams from the input list that match the first word in the list. if not input_list: return [] base_word = input_list[0].lower() sorted_base_word = sorted(base_word) return [word for word in input_list if sorted(word.lower()) == sorted_base_word] def is_anagram(str1, str2): Returns True if str1 and str2 are anagrams of each other, False otherwise. return sorted(str1.lower()) == sorted(str2.lower())"},{"question":"Given a list of integers, create a function that returns a new list where each element is the product of all the numbers in the original list except the number at the current index. Do not use division in your solution. For example, given the list [1, 2, 3, 4], the function should return [24, 12, 8, 6]. Complete the partial code provided: ```python def product_except_self(nums): Given a list of integers, returns a new list such that each element at index i is the product of all elements in the original list except the one at i. >>> product_except_self([1, 2, 3, 4]) [24, 12, 8, 6] # Initialize the left and right product lists and the result list left_products = [1] * len(nums) right_products = [1] * len(nums) result = [1] * len(nums) # Calculate left products left_cum_product = 1 for i in range(len(nums)): left_products[i] = left_cum_product left_cum_product *= nums[i] # Calculate right products right_cum_product = 1 for i in range(len(nums) - 1, -1, -1): right_products[i] = right_cum_product right_cum_product *= nums[i] # Calculate the result by multiplying left and right products for i in range(len(nums)): result[i] = left_products[i] * right_products[i] return result ```","solution":"def product_except_self(nums): Given a list of integers, returns a new list such that each element at index i is the product of all elements in the original list except the one at i. >>> product_except_self([1, 2, 3, 4]) [24, 12, 8, 6] # Initialize the left and right product lists and the result list left_products = [1] * len(nums) right_products = [1] * len(nums) result = [1] * len(nums) # Calculate left products left_cum_product = 1 for i in range(len(nums)): left_products[i] = left_cum_product left_cum_product *= nums[i] # Calculate right products right_cum_product = 1 for i in range(len(nums) - 1, -1, -1): right_products[i] = right_cum_product right_cum_product *= nums[i] # Calculate the result by multiplying left and right products for i in range(len(nums)): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a Python function to merge two given lists by alternatingly taking elements. If one list is longer than the other, append the remaining elements of the longer list to the end of the merged list. For example: list1 = [1, 2, 3, 4] list2 = [\'a\', \'b\', \'c\'] The resulting list should be: [1, \'a\', 2, \'b\', 3, \'c\', 4] Here is the function signature: ```python def merge_alternatingly(list1: list, list2: list) -> list: # Your code here ```","solution":"def merge_alternatingly(list1: list, list2: list) -> list: Merge two lists by alternatingly taking elements from each list. If one list is longer than the other, append the remaining elements of the longer list to the end of the merged list. merged_list = [] len1, len2 = len(list1), len(list2) min_length = min(len1, len2) for i in range(min_length): merged_list.append(list1[i]) merged_list.append(list2[i]) if len1 > len2: merged_list.extend(list1[min_length:]) elif len2 > len1: merged_list.extend(list2[min_length:]) return merged_list"},{"question":"Design a function that, given a list of integers, rearranges the elements such that all even numbers come before all the odd numbers while maintaining their relative order. For example, given the input list [3, 1, 2, 4], the function should return [2, 4, 3, 1]. Example: Input: [3, 1, 2, 4] Output: [2, 4, 3, 1] Input: [1, 3, 5, 7, 2, 4, 6] Output: [2, 4, 6, 1, 3, 5, 7]","solution":"def rearrange_even_before_odd(lst): Rearranges the list such that all even numbers come before all odd numbers while maintaining their relative order. Parameters: lst (list): List of integers Returns: list: Rearranged list with all even numbers before all odd numbers evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds # Example Usage: # print(rearrange_even_before_odd([3, 1, 2, 4])) # Output: [2, 4, 3, 1]"},{"question":"Extend the functional requirements of the current code by introducing an additional feature: Examine the erroneous Python code snippet presented below. Then, offer the corrected version and embed a new functionality. Erroneous Python code snippet: ```python def filter_and_add(numbers: List[int], threshold: int): result = [] for number in numbers if number > threshold result.append(number) return sum(result) ``` Deliver the adjusted solution: From typing import List, Tuple def filter_and_add(numbers: List[int], threshold: int) -> Tuple[int, List[int]]: You will be furnished with a list of integers and a threshold value. Your task is to extract all integers from the list that surpass the given threshold, accumulate these integers into a new list, and compute the sum of the integers in this new list. The function should return a tuple containing the sum of these integers and the new list. Illustration Examples: >>> filter_and_add([1, 2, 3, 4, 5], 3) (9, [4, 5]) >>> filter_and_add([5, 10, 3, 7, 2], 6) (17, [10, 7]) # Now, provide your corrected and enhanced solution here.","solution":"from typing import List, Tuple def filter_and_add(numbers: List[int], threshold: int) -> Tuple[int, List[int]]: You will be furnished with a list of integers and a threshold value. Your task is to extract all integers from the list that surpass the given threshold, accumulate these integers into a new list, and compute the sum of the integers in this new list. The function should return a tuple containing the sum of these integers and the new list. Illustration Examples: >>> filter_and_add([1, 2, 3, 4, 5], 3) (9, [4, 5]) >>> filter_and_add([5, 10, 3, 7, 2], 6) (17, [10, 7]) result = [] for number in numbers: if number > threshold: result.append(number) return sum(result), result"},{"question":"Write a function `get_odd_occurrence(arr)` that takes a list of integers `arr` where every integer occurs an even number of times, except for one integer which occurs an odd number of times. The function should return the integer that occurs an odd number of times. You may assume that there is exactly one such integer. # Example: ```python get_odd_occurrence([1, 2, 3, 2, 3, 1, 3]) ``` Output: ```3``` # Constraints: - The input list will have a length between 1 and 10^6. - Input numbers are -10^9 <= number <= 10^9.","solution":"def get_odd_occurrence(arr): Given a list of integers where every integer occurs an even number of times except for one, this function returns the integer that occurs an odd number of times. :param arr: List[int] - list of integers :return: int - the integer that occurs an odd number of times result = 0 for num in arr: result ^= num return result"},{"question":"Write a Python function that accepts a string and returns the longest substring that contains only vowels (a, e, i, o, u). If there are multiple substrings with the same maximum length, return the first one. For example, given the string \\"earthproblem\\" the output should be \\"ea\\".","solution":"def longest_vowel_substring(s): Returns the longest substring that contains only vowels. If there are multiple substrings with the same maximum length, return the first one. Parameters: s (str): Input string Returns: str: Longest substring containing only vowels vowels = set(\'aeiou\') max_length = 0 max_substring = \\"\\" current_length = 0 current_substring = \\"\\" for char in s: if char in vowels: current_length += 1 current_substring += char if current_length > max_length: max_length = current_length max_substring = current_substring else: current_length = 0 current_substring = \\"\\" return max_substring"},{"question":"Write a Python function that takes an integer as input and returns a string of the number spelled out in English words. The function should be able to handle numbers from 0 to 999,999. # Requirements: 1. If the input is 0, the function should return \\"zero\\". 2. Numbers less than 20 should be handled as special cases (e.g., 13 -> \\"thirteen\\"). 3. Tens place (20, 30, ... 90) should be handled as special cases (e.g., 20 -> \\"twenty\\"). 4. Hundreds and thousands should be constructed by combining the appropriate strings (e.g., 123 -> \\"one hundred twenty-three\\", 3456 -> \\"three thousand four hundred fifty-six\\"). 5. The function should handle both single words and hyphenated words correctly (e.g., 21 -> \\"twenty-one\\"). # Example: ```python print(number_to_words(123)) # Output: \\"one hundred twenty-three\\" print(number_to_words(45)) # Output: \\"forty-five\\" print(number_to_words(1000)) # Output: \\"one thousand\\" print(number_to_words(100000)) # Output: \\"one hundred thousand\\" ```","solution":"def number_to_words(num): Converts an integer into its English words representation. if num == 0: return \\"zero\\" def one_to_nineteen(n): return [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"][n] def tens(n): return [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"][n] def two_digit_number_to_words(n): if n < 20: return one_to_nineteen(n) else: return tens(n // 10) + (\\"-\\" + one_to_nineteen(n % 10) if n % 10 != 0 else \\"\\") def three_digit_number_to_words(n): return (one_to_nineteen(n // 100) + \\" hundred\\" + (\\" \\" + two_digit_number_to_words(n % 100) if n % 100 != 0 else \\"\\") if n >= 100 else two_digit_number_to_words(n)) if num < 1000: return three_digit_number_to_words(num) else: thousand_part = num // 1000 rest_part = num % 1000 return (three_digit_number_to_words(thousand_part) + \\" thousand\\" + (\\" \\" + three_digit_number_to_words(rest_part) if rest_part != 0 else \\"\\"))"},{"question":"You are presented with a challenge titled \'Word Ladders\'. The task involves two words, `beginWord` and `endWord`, along with a dictionary containing a list of words, `wordList`. The goal is to determine the length of the shortest transformation sequence from `beginWord` to `endWord` such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the wordList. Note that `beginWord` is not a part of the wordList. For instance, consider the following examples: Example 1: Input: beginWord = \\"hit\\", endWord = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] Output: 5 Explanation: One shortest transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which has a length of 5. Example 2: Input: beginWord = \\"hit\\", endWord = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"] Output: 0 Explanation: The endWord \\"cog\\" is not contained in the wordList, hence no valid transformation sequence exists. Example 3: Input: beginWord = \\"abc\\", endWord = \\"def\\", wordList = [\\"dbc\\",\\"dec\\",\\"dgc\\",\\"dft\\"] Output: 0 Explanation: No sequence of transformations can convert \\"abc\\" to \\"def\\" with the given wordList. The constraints are as follows: `1 <= beginWord.length <= 10` `endWord.length == beginWord.length` `1 <= wordList.length <= 5000` `wordList[i].length == beginWord.length` `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters only.","solution":"from collections import deque def ladderLength(beginWord, endWord, wordList): Returns the length of the shortest transformation sequence from beginWord to endWord. If no such sequence exists, returns 0. if endWord not in wordList: return 0 wordList = set(wordList) queue = deque([(beginWord, 1)]) while queue: current_word, steps = queue.popleft() if current_word == endWord: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordList: wordList.remove(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"Given a list of integers, write a Python function that returns a new list containing only the even numbers, sorted in descending order. The function should be named `filter_and_sort_evens` and should take a list of integers as an argument. Ensure that your solution handles both positive and negative integers appropriately. # Example Usage ```python # Example 1 input_list = [3, 7, 2, 5, 4, 1, 10] # The even numbers are [2, 4, 10] # After sorting in descending order, the result is [10, 4, 2] print(filter_and_sort_evens(input_list)) # Output: [10, 4, 2] # Example 2 input_list = [6, -3, -2, -1, 5, -4, 3] # The even numbers are [6, -2, -4] # After sorting in descending order, the result is [6, -2, -4] print(filter_and_sort_evens(input_list)) # Output: [6, -2, -4] ``` # Constraints - The input list will contain both positive and negative integers. - The list may contain duplicate numbers. - If there are no even numbers in the input list, the function should return an empty list. Implement your solution in Python.","solution":"def filter_and_sort_evens(input_list): Filters the input list to contain only even numbers and sorts them in descending order. :param input_list: List of integers :return: List of even integers sorted in descending order even_numbers = [num for num in input_list if num % 2 == 0] return sorted(even_numbers, reverse=True)"},{"question":"Write a program in a language of your choice that processes the provided list of integers to output various transformations. The operations should include sorting the list in ascending order, removing duplicate values, appending numbers based on user input, and removing specific numbers based on user input. The goal is to manipulate the initial list and display the outcomes. Initial given list: num_list = [3, 6, 9, 2, 6, 3, 5]","solution":"def process_list(num_list): Processes the provided num_list by performing several operations: - Sorts the list in ascending order - Removes duplicate values Returns the processed list. # Remove duplicates and sort the list processed_list = sorted(set(num_list)) return processed_list def append_numbers(num_list, numbers_to_append): Appends the given numbers to the num_list and returns the updated list. num_list.extend(numbers_to_append) return num_list def remove_numbers(num_list, numbers_to_remove): Removes the given numbers from the num_list if they exist and returns the updated list. num_list = [num for num in num_list if num not in numbers_to_remove] return num_list"},{"question":"Implement a decision tree algorithm for classifying a dataset with three numerical features and a binary output. The model should be able to handle missing values and output the classification accuracy on the provided test set.","solution":"import numpy as np from sklearn.tree import DecisionTreeClassifier from sklearn.impute import SimpleImputer from sklearn.metrics import accuracy_score from sklearn.model_selection import train_test_split def decision_tree_classifier(X, y): Classifies a dataset with three numerical features and a binary output using a decision tree algorithm. Args: X: numpy array, shape (n_samples, 3) Feature matrix containing three numerical features per sample. y: numpy array, shape (n_samples,) Binary output label array. Returns: float: Classification accuracy on the test set. # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Handle missing values using mean imputation imputer = SimpleImputer(strategy=\'mean\') X_train = imputer.fit_transform(X_train) X_test = imputer.transform(X_test) # Create and train the decision tree classifier clf = DecisionTreeClassifier(random_state=42) clf.fit(X_train, y_train) # Make predictions on the test set y_pred = clf.predict(X_test) # Calculate the classification accuracy accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"Analyze the following functions and determine which one is more efficient in summing a list of numbers. Function 1: ```python def sum_list_1(nums): total = 0 for num in nums: total += num return total ``` Function 2: ```python def sum_list_2(nums): return sum(nums) ```","solution":"def sum_list_1(nums): total = 0 for num in nums: total += num return total def sum_list_2(nums): return sum(nums)"},{"question":"Write a function that takes a list of students\' scores and returns the average, the highest, and the lowest score. The scores will be represented as a list of dictionaries, where each dictionary contains \'name\' and \'score\' keys. For example: ```python students = [ {\'name\': \'Alice\', \'score\': 90}, {\'name\': \'Bob\', \'score\': 80}, {\'name\': \'Charlie\', \'score\': 85} ] ``` Your function should return a dictionary with \'average\', \'highest\', and \'lowest\' keys. For example, given the above list, the function should return: ```python {\'average\': 85.0, \'highest\': 90, \'lowest\': 80} ``` If the list is empty, the function should return: ```python {\'average\': None, \'highest\': None, \'lowest\': None} ```","solution":"def analyze_scores(students): Returns a dictionary with the average, highest, and lowest score from a list of students\' scores. :param students: List of dictionaries containing \'name\' and \'score\' keys. :return: A dictionary with \'average\', \'highest\', and \'lowest\' keys. if not students: return {\'average\': None, \'highest\': None, \'lowest\': None} scores = [student[\'score\'] for student in students] average_score = sum(scores) / len(scores) highest_score = max(scores) lowest_score = min(scores) return {\'average\': average_score, \'highest\': highest_score, \'lowest\': lowest_score}"},{"question":"Design a program that performs matrix multiplication for two matrices input by the user. The program should check if the matrices can be multiplied based on their dimensions and handle cases where they cannot be multiplied by displaying an appropriate error message. Additionally, the program should include input validation to handle non-numeric entries or empty input gracefully.","solution":"def matrix_multiply(matrix1, matrix2): Multiplies two matrices if they can be multiplied. Returns the resulting matrix or raises a ValueError if they cannot be multiplied. # Check if matrix1 and matrix2 can be multiplied if len(matrix1[0]) != len(matrix2): raise ValueError(\\"The matrices cannot be multiplied due to incompatible dimensions.\\") # Initialize result matrix with zeros result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))] # Perform matrix multiplication for i in range(len(matrix1)): for j in range(len(matrix2[0])): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result def validate_matrix(matrix): Validates the input matrix to ensure all entries are numeric. Raises a ValueError for any non-numeric entries or if the matrix is empty. if not matrix or not all(matrix): raise ValueError(\\"The matrix should not be empty.\\") for row in matrix: for elem in row: if not isinstance(elem, (int, float)): raise ValueError(\\"The matrix should only contain numeric values.\\") def input_and_validate_matrices(matrix1, matrix2): Validates and multiplies two input matrices. validate_matrix(matrix1) validate_matrix(matrix2) return matrix_multiply(matrix1, matrix2)"},{"question":"Problem: Rotate Array **Description:** You are given an integer array `nums` and an integer `k`, where `k` is the number of steps to rotate the array to the right. Implement a function to rotate the array `k` steps to the right. Your function should have a time complexity of O(n) and should use O(1) extra space. **Function Signature:** ```python def rotateArray(nums, k): ``` **Input:** - `nums` (List[int]): A list of integers. - `k` (int): The number of steps to rotate the array to the right. **Output:** - `None`. The array should be modified in-place. **Examples:** ```python # Example 1 Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] # Example 2 Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] # Example 3 Input: nums = [1,2], k = 1 Output: [2,1] ``` **Constraints:** - `1 <= nums.length <= 105` - `-231 <= nums[i] <= 231 - 1` - `0 <= k <= 105` **Note:** You are given a piece of erroneous code that attempts to solve the problem. Your task is to identify the error in the code, correct it, and then solve the problem. Erroneous Code: ```python def rotateArray(nums, k): n = len(nums) k = k % n # To handle cases where k is greater than the length of the array nums[:] = nums[::-1] # Reverse the whole array nums[:k] = nums[:k][::-1] # Reverse the first k elements nums[k:] = nums[k:][::-1] # Reverse the rest ```","solution":"def rotateArray(nums, k): Rotates the array nums in-place k steps to the right. :param nums: List[int] - A list of integers :param k: int - The number of steps to rotate the array n = len(nums) k = k % n # To handle cases where k is greater than the length of the array def reverse(nums, start, end): while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1 # Reverse the whole array reverse(nums, 0, n - 1) # Reverse the first k elements reverse(nums, 0, k - 1) # Reverse the elements from k to the end of the array reverse(nums, k, n - 1)"},{"question":"Write a Python function that takes in a list of words and returns all the unique sets of anagrams in the list. An anagram is a word or a phrase formed by rearranging the letters of another, typically using all the original letters exactly once. Your function should return a list of lists, where each inner list contains words that are anagrams of each other. The words in the inner lists should be in the same order as they appeared in the input. If there are no anagrams, return an empty list. Example: ```python def find_anagrams(words): # Your code here # Example usage words_list = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"goolge\\", \\"gooegl\\", \\"abc\\", \\"cab\\"] print(find_anagrams(words_list)) ``` Output: ```python [[\'listen\', \'silent\', \'enlist\'], [\'google\', \'goolge\', \'gooegl\'], [\'abc\', \'cab\']] ```","solution":"def find_anagrams(words): from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) result = [group for group in anagrams.values() if len(group) > 1] return result"},{"question":"Your task is to implement a function in Python that processes a given list of integers and returns a list containing only the even numbers. Additionally, the function should raise an appropriate exception if the input is not a list or contains non-integer values. Optimize the function for efficiency and ensure that it handles large lists efficiently. Provide error handling for possible edge cases and include meaningful error messages. ```python def extract_even_numbers(data): if not isinstance(data, list): raise TypeError(\\"Input data must be a list\\") even_numbers = [] for item in data: if not isinstance(item, int): raise ValueError(\\"The list must contain only integer values\\") if item % 2 == 0: even_numbers.append(item) return even_numbers # Example usage: # data = [1, 2, 3, 4, 5, 6] # The function should return: [2, 4, 6] ```","solution":"def extract_even_numbers(data): This function takes a list of integers and returns a list containing only the even numbers. Raises a TypeError if the input is not a list. Raises a ValueError if the list contains non-integer values. if not isinstance(data, list): raise TypeError(\\"Input data must be a list\\") even_numbers = [] for item in data: if not isinstance(item, int): raise ValueError(\\"The list must contain only integer values\\") if item % 2 == 0: even_numbers.append(item) return even_numbers"},{"question":"Write a function that takes two lists as input and returns a list containing only the common elements between the two lists. list1 = [1, 3, 4, 6, 7] list2 = [2, 3, 5, 6, 8]","solution":"def common_elements(list1, list2): Returns a list containing only the common elements between the two lists. return list(set(list1) & set(list2))"},{"question":"Implement a function `max_subarray_sum` in Python that takes a list of integers as input and returns the maximum sum of any contiguous subarray within the list. Use the Kadane\'s Algorithm approach for an optimal solution. For empty input lists, return 0. The function should work efficiently even when the input list contains up to 100,000 elements. Example: ```python def max_subarray_sum(arr): # Your implementation here print(max_subarray_sum([1, -3, 2, 1, -1])) # Output: 3 print(max_subarray_sum([4, -1, 2, 1])) # Output: 6 print(max_subarray_sum([-1, -2, -3, -4])) # Output: -1 print(max_subarray_sum([])) # Output: 0 ```","solution":"def max_subarray_sum(arr): if not arr: return 0 max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function called `reverse_words` that takes a string as input and returns the string with the order of words reversed. Each word is defined as a sequence of non-space characters. The input string may contain leading or trailing spaces and multiple spaces between words. Your function should handle these cases appropriately and return a correctly formatted string with words properly reversed and single spaces between them. For example: ```python def reverse_words(s: str) -> str: # Your implementation here # Example Usage input_string = \\" the sky is blue \\" output_string = reverse_words(input_string) print(output_string) # Expected output: \\"blue is sky the\\" ``` To help you out, here\'s a piece of code where you need to identify and correct the mistakes: ```python def reverse_words(s): words = s.split(\' \') return \' \'.join(reversed(words)) ``` Once you have identified and corrected the mistakes, test your function to ensure it works as expected. Adjust the function to handle multiple spaces and leading/trailing spaces correctly.","solution":"def reverse_words(s: str) -> str: Returns the string with the order of words reversed. Handles multiple spaces and leading/trailing spaces correctly. words = s.split() return \' \'.join(reversed(words))"},{"question":"Write a function that takes two integers as input and returns a string. The string should represent a rectangular grid composed of the two integers, where the first integer defines the number of rows and the second integer defines the number of columns. Each cell in the grid should be filled with a character that alternates between \'X\' and \'O\', starting with \'X\' in the top-left corner. The function should handle edge cases where the input integers might be zero or negative. In such cases, the function should return an empty string. Complete the code below: ```python def generate_grid(rows: int, cols: int) -> str: Generate a rectangular grid using two input integers. Each cell in the grid alternates between \'X\' and \'O\', starting with \'X\'. >>> generate_grid(0, 5) \'\' >>> generate_grid(4, 0) \'\' >>> generate_grid(3, 4) \'XOXOnOXOXnXOXO\' >>> generate_grid(2, 5) \'XOXOXnOXOXO\' ```","solution":"def generate_grid(rows: int, cols: int) -> str: Generate a rectangular grid using two input integers. Each cell in the grid alternates between \'X\' and \'O\', starting with \'X\'. Returns an empty string if rows or columns are zero or negative. if rows <= 0 or cols <= 0: return \'\' grid = [] for i in range(rows): row = [] for j in range(cols): if (i + j) % 2 == 0: row.append(\'X\') else: row.append(\'O\') grid.append(\'\'.join(row)) return \'n\'.join(grid)"},{"question":"Write a function that takes in a list of integers and an integer k. The function should determine if there exists a subarray within the list whose sum is exactly equal to k. If such a subarray exists, return \\"YES\\", otherwise return \\"NO\\". The input list will certainly not be empty, and k is a non-negative integer. ```python def subarray_sum(lst, k): Example: subarray_sum([1, 4, 20, 3, 10, 5], 33) => \\"YES\\" subarray_sum([1, 4, 20, 3, 10, 5], 50) => \\"NO\\" ```","solution":"def subarray_sum(lst, k): Returns \\"YES\\" if there exists a subarray within the list whose sum is exactly equal to k. Otherwise, returns \\"NO\\". curr_sum = 0 sum_set = set() for num in lst: curr_sum += num # Check if curr_sum is equal to k if curr_sum == k: return \\"YES\\" # Check if there is a subarray sum that equals k if (curr_sum - k) in sum_set: return \\"YES\\" sum_set.add(curr_sum) return \\"NO\\""},{"question":"Given the following data set that represents an inventory of products in an e-commerce store: Data set: [ {\'product_id\': \'P001\', \'name\': \'Laptop\', \'price\': 1500, \'quantity\': 10, \'category\': \'Electronics\'}, {\'product_id\': \'P002\', \'name\': \'Phone\', \'price\': 800, \'quantity\': 15, \'category\': \'Electronics\'}, {\'product_id\': \'P003\', \'name\': \'Desk Chair\', \'price\': 120, \'quantity\': 20, \'category\': \'Furniture\'}, ] Tasks: 1. Write a function to sort the products by their price in descending order. 2. Create a search function to retrieve products based on their category. 3. Enhance the search function to include a filter for products within a specified price range. 4. Upgrade the search function to support multiple filters, including category, price range, and minimum quantity in stock. 5. Assess the computational efficiency of your functions considering both time and space complexity. 6. Develop a comprehensive suite of tests to validate the correct functionality of your algorithm and functions. Deduction: Discuss your choices of algorithms and data structures for each part in terms of their performance and efficiency. Provide justifications for the approaches adopted in creating the search functions.","solution":"def sort_products_by_price(products): Sorts the list of products by their price in descending order. return sorted(products, key=lambda x: x[\'price\'], reverse=True) def search_products_by_category(products, category): Searches for products based on their category. return [product for product in products if product[\'category\'] == category] def search_products_within_price_range(products, min_price, max_price): Searches for products within a specified price range. return [product for product in products if min_price <= product[\'price\'] <= max_price] def search_products(products, category=None, min_price=None, max_price=None, min_quantity=None): Searches for products with multiple filters such as category, price range, and minimum quantity in stock. result = products if category is not None: result = [product for product in result if product[\'category\'] == category] if min_price is not None and max_price is not None: result = [product for product in result if min_price <= product[\'price\'] <= max_price] if min_quantity is not None: result = [product for product in result if product[\'quantity\'] >= min_quantity] return result"},{"question":"Design a function to interpret a list of strings, each representing a simple algebraic expression. Each string consists of variables (\'a\' to \'z\'), integers, and the operations \'+\' and \'-\'. The function should compute the value of each expression given a dictionary of variable values. from typing import List, Dict def evaluate_expressions(expressions: List[str], variables: Dict[str, int]) -> List[int]: Given a list of strings each representing a simple algebraic expression, and a dictionary mapping variables to their integer values, this function computes and returns the value of each expression. Example: >>> expressions = [\'a + b\', \'c - d\', \'e + f - g\'] >>> variables = {\'a\': 1, \'b\': 2, \'c\': 10, \'d\': 3, \'e\': 4, \'f\': 5, \'g\': 6} >>> evaluate_expressions(expressions, variables) [3, 7, 3]","solution":"from typing import List, Dict def evaluate_expressions(expressions: List[str], variables: Dict[str, int]) -> List[int]: results = [] for expression in expressions: for var, value in variables.items(): expression = expression.replace(var, str(value)) results.append(eval(expression)) return results"},{"question":"Write a function to merge two sorted arrays into a single sorted array without using any built-in sort functions. The function should take two lists and return a new list containing all elements from both input lists in sorted order. The solution should have a time complexity of O(n + m) and space complexity of O(n + m), where n and m are the lengths of the two input arrays. ```python # Example usage: arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] # merge_sorted_arrays(arr1, arr2) -> [1, 2, 3, 4, 5, 6, 7, 8] def merge_sorted_arrays(arr1, arr2): # Your implementation here pass ```","solution":"def merge_sorted_arrays(arr1, arr2): Merge two sorted arrays into a single sorted array, without using any built-in sort functions. Parameters: arr1 (list): A sorted list of elements. arr2 (list): Another sorted list of elements. Returns: list: A new sorted list containing all elements from both input lists. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are tasked with developing a function that determines if a given string can be a valid palindrome after at most one character replacement. A palindrome is a string that reads the same backward as forward. It is not necessary to replace a character to achieve the palindrome; the function should also account for strings that are already palindromes or can become one by replacing only one character. **Function Signature:** ```python def can_be_palindrome(s: str) -> bool: ``` # Input: - A string `s` of length `n` (1 <= n <= 10^5), consisting of only lowercase English letters. # Output: - Return `True` if the string can be a palindrome after at most one character replacement, otherwise return `False`. # Example: ```python assert can_be_palindrome(\\"abca\\") == True assert can_be_palindrome(\\"racecar\\") == True assert can_be_palindrome(\\"abcdef\\") == False assert can_be_palindrome(\\"a\\") == True assert can_be_palindrome(\\"ab\\") == True assert can_be_palindrome(\\"aa\\") == True assert can_be_palindrome(\\"abcba\\") == True assert can_be_palindrome(\\"abc\\") == False assert can_be_palindrome(\\"abccba\\") == True ``` # Explanation: 1. In the first example, \\"abca\\" -> replacing \'b\' with \'c\' or \'c\' with \'b\' can yield \\"acca\\" or \\"abca\\" -> valid palindrome. 2. The word \\"racecar\\" is already a palindrome. 3. The word \\"abcdef\\" cannot become a palindrome with only one character change. 4. The function needs to handle edge cases such as single-character strings or strings that are already palindromes with even and odd lengths.","solution":"def can_be_palindrome(s: str) -> bool: Determines if a string s can be turned into a palindrome by replacing at most one character. # Helper function: Check if a substring is a palindrome def is_palindrome_range(l, r): while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True left = 0 right = len(s) - 1 while left < right: if s[left] != s[right]: # If mismatch found, check by skipping one character either from left or right return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True # Return true if no mismatches found and it was already a palindrome"},{"question":"Write a Python function named `find_lonely_elements` that takes a list of integers as input and returns a list of integers that appear exactly once in the input list. The output list should maintain the order of their first occurrence in the input list. For example: ```python def find_lonely_elements(nums): # Your code here # Example usage: print(find_lonely_elements([4, 5, 7, 4, 7, 8, 8, 9, 10])) # Output should be: [5, 9, 10] ```","solution":"def find_lonely_elements(nums): Returns a list of integers that appear exactly once in the input list. The output list maintains the order of their first occurrence in the input list. from collections import Counter # Count the occurrence of each number in the list counts = Counter(nums) # Filter numbers that occur exactly once, maintaining their order lonely_elements = [num for num in nums if counts[num] == 1] return lonely_elements # Example usage: # print(find_lonely_elements([4, 5, 7, 4, 7, 8, 8, 9, 10])) # Output should be: [5, 9, 10]"},{"question":"You have been provided with a list of objects, each represented as a dictionary, where each dictionary contains details about a book - its `title`, `author`, `year`, and `rating`. Your task is to write two functions: 1. `sort_books_by_year(books: List[Dict[str, Union[str, int, float]]]) -> List[Dict[str, Union[str, int, float]]]`: This function should accept a list of dictionaries and return the list sorted by the `year` key in ascending order. If two books have the same year, they should appear in the order they were originally present. 2. `group_books_by_author(books: List[Dict[str, Union[str, int, float]]]) -> Dict[str, List[Dict[str, Union[str, int, float]]]]`: This function should accept a list of dictionaries and group the books by their `author`. The return value should be a dictionary where each key is an author, and the corresponding value is a list of books by that author. Each book should be represented as a dictionary. The order of books in each group should match their order in the original list. # Input 1. A list of dictionaries where each dictionary represents a book. Each dictionary has the following format: ```python { \\"title\\": \\"The Example Book\\", \\"author\\": \\"Jane Doe\\", \\"year\\": 2001, \\"rating\\": 4.5 } ``` The list can contain any number of such dictionaries, and the values for `year` will always be integers while `rating` will always be floats. # Output - For the `sort_books_by_year` function, return a new list of dictionaries where the dictionaries are sorted by the `year`. - For the `group_books_by_author` function, return a dictionary where the keys are author names (strings), and the values are lists of dictionaries representing the books. # Example ```python books = [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author X\\", \\"year\\": 2001, \\"rating\\": 4.5}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author Y\\", \\"year\\": 1999, \\"rating\\": 4.7}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author X\\", \\"year\\": 2005, \\"rating\\": 4.2}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Author Z\\", \\"year\\": 2001, \\"rating\\": 4.3} ] sorted_books = sort_books_by_year(books) grouped_books = group_books_by_author(books) ``` # Expected Output For `sorted_books`, the output should be: ```python [ {\\"title\\": \\"Book B\\", \\"author\\": \\"Author Y\\", \\"year\\": 1999, \\"rating\\": 4.7}, {\\"title\\": \\"Book A\\", \\"author\\": \\"Author X\\", \\"year\\": 2001, \\"rating\\": 4.5}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Author Z\\", \\"year\\": 2001, \\"rating\\": 4.3}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author X\\", \\"year\\": 2005, \\"rating\\": 4.2} ] ``` For `grouped_books`, the output should be: ```python { \\"Author X\\": [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author X\\", \\"year\\": 2001, \\"rating\\": 4.5}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author X\\", \\"year\\": 2005, \\"rating\\": 4.2} ], \\"Author Y\\": [ {\\"title\\": \\"Book B\\", \\"author\\": \\"Author Y\\", \\"year\\": 1999, \\"rating\\": 4.7} ], \\"Author Z\\": [ {\\"title\\": \\"Book D\\", \\"author\\": \\"Author Z\\", \\"year\\": 2001, \\"rating\\": 4.3} ] } ``` # Constraints - You can assume that all dictionaries in the list will have the same set of keys. - Assume that the input list of books will have at least one book. - Authors\' names, book titles, and years will not be empty or null. - The functions should be optimized for lists containing up to 10^4 books. # Explanation - Provide a clear explanation of your algorithms\' time complexity. - Your solution should handle edge cases such as multiple books by the same author, multiple books with the same year, etc. - Formulate relevant test cases to validate your solution.","solution":"from typing import List, Dict, Union def sort_books_by_year(books: List[Dict[str, Union[str, int, float]]]) -> List[Dict[str, Union[str, int, float]]]: Sorts a list of book dictionaries by the year in ascending order. return sorted(books, key=lambda book: book[\'year\']) def group_books_by_author(books: List[Dict[str, Union[str, int, float]]]) -> Dict[str, List[Dict[str, Union[str, int, float]]]]: Groups books by author. grouped_books = {} for book in books: author = book[\'author\'] if author not in grouped_books: grouped_books[author] = [] grouped_books[author].append(book) return grouped_books"},{"question":"Using Python, implement a function that takes a list of file paths and a search term as inputs. This function should search for the term in each file and return a dictionary where the keys are the file paths and the values are the number of occurrences of the search term in the respective files. Ensure to handle potential errors such as files not being found, files being unreadable, or other file I/O errors gracefully. Additionally, consider performance implications when reading large files.","solution":"def search_term_in_files(file_paths, search_term): Searches for the search_term in each file specified in file_paths. Returns a dictionary where keys are file paths and values are the number of occurrences of the search term. Args: file_paths (list of str): List of file paths to search. search_term (str): Term to search for in the files. Returns: dict: A dictionary with file paths as keys and occurrence counts as values. If a file cannot be read, the value will be None. occurrences = {} for file_path in file_paths: try: with open(file_path, \'r\', errors=\'ignore\') as file: content = file.read() occurrences[file_path] = content.count(search_term) except Exception as e: occurrences[file_path] = None return occurrences"},{"question":"# Context As a software engineer, you are required to develop a Python package for a Library Management System (LMS). The LMS should cater to the needs of librarians and library members. The goal of this package is to ensure efficient handling of book lending, return processes, and member management. Product Goals ```python [ \\"Develop a user-friendly system for managing library operations\\", \\"Ensure accurate and real-time tracking of books\\", \\"Facilitate easy user registration and book borrowing process\\", \\"Provide secure access to the system for both librarians and members\\", \\"Generate useful reports on book usage and member activities\\" ] ``` User Stories ```python [ \\"As a librarian, I want to add, update, or remove books from the catalog\\", \\"As a librarian, I want to register and manage library members\\", \\"As a librarian, I want to keep track of books borrowed by members\\", \\"As a member, I want to search for books available in the library\\", \\"As a member, I want to borrow and return books\\", \\"As a member, I want to see my borrowing history\\" ] ``` Requirement Analysis The system should facilitate the easy addition, update, and deletion of books. It should enable the registration of new members and maintenance of member records. The system must also track the borrowing and returning of books accurately and generate relevant reports. Requirement Pool ```python [ (\\"Create a database schema for books and members management\\", \\"P0\\"), (\\"Implement CRUD operations for books\\", \\"P0\\"), (\\"Implement user registration and authentication\\", \\"P0\\"), (\\"Develop borrowing and returning workflows\\", \\"P0\\"), (\\"Generate reports on book usage and member activity\\", \\"P1\\"), ] ``` UI Design draft The application should have a clean and intuitive UI. The main sections of the application should include: 1. Dashboard with key library statistics. 2. Book Catalog with functionalities to add, remove, or update books. 3. Member Management with functionalities to register new members and update or remove existing ones. 4. Borrowing Section to facilitate the borrowing and returning of books. 5. Reports Section to view and download reports. Anything UNCLEAR The scope of reports and the types of analytics expected need further clarification. --- Implementation approach We will use the Django framework to build the Library Management System. Django\'s Model-View-Template architecture and built-in ORM make it an ideal choice for handling our data models and views efficiently. Django\'s authentication system also simplifies user management and security. For the front end, Django templates will be used initially, with potential enhancements using React.js for a more dynamic user experience. Python package name ```python \\"library_management_system\\" ``` File list ```python [ \\"manage.py\\", \\"library_management_system/__init__.py\\", \\"library_management_system/settings.py\\", \\"library_management_system/urls.py\\", \\"library_management_system/wsgi.py\\", \\"library_management_system/asgi.py\\", \\"books/__init__.py\\", \\"books/admin.py\\", \\"books/apps.py\\", \\"books/models.py\\", \\"books/views.py\\", \\"books/urls.py\\", \\"members/__init__.py\\", \\"members/admin.py\\", \\"members/apps.py\\", \\"members/models.py\\", \\"members/views.py\\", \\"members/urls.py\\", \\"borrow_return/__init__.py\\", \\"borrow_return/admin.py\\", \\"borrow_return/apps.py\\", \\"borrow_return/models.py\\", \\"borrow_return/views.py\\", \\"borrow_return/urls.py\\", \\"reports/__init__.py\\", \\"reports/admin.py\\", \\"reports/apps.py\\", \\"reports/models.py\\", \\"reports/views.py\\", \\"reports/urls.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class Book { +int id +str title +str author +str isbn +AvailableStatus status +__init__(self, id:int, title:str, author:str, isbn:str, status:AvailableStatus) } class AvailableStatus { <<enumeration>> AVAILABLE BORROWED } class Member { +int member_id +str name +str email +MembershipType membership_type +__init__(self, member_id:int, name:str, email:str, membership_type:MembershipType) } class MembershipType { <<enumeration>> STANDARD PREMIUM } class BorrowReturn { +int transaction_id +int book_id +int member_id +date borrow_date +date return_date +__init__(self, transaction_id:int, book_id:int, member_id:int, borrow_date:date, return_date:date) } Book --|> AvailableStatus Member --|> MembershipType BorrowReturn \\"1\\" --> \\"1\\" Book: involves BorrowReturn \\"1\\" --> \\"1\\" Member: involves class BookService { +add_book(self, title:str, author:str, isbn:str, status:AvailableStatus) +update_book(self, book_id:int, title:str, author:str) +remove_book(self, book_id:int) +get_book(self, book_id:int) } class MemberService { +register_member(self, name:str, email:str, membership_type:MembershipType) +update_member(self, member_id:int, name:str, email:str) +remove_member(self, member_id:int) +get_member(self, member_id:int) } class BorrowReturnService { +record_borrowing(self, book_id:int, member_id:int) +record_return(self, book_id:int, member_id:int) +generate_report(self) } Book <|-- BookService Member <|-- MemberService BorrowReturn <|-- BorrowReturnService ``` Program call flow ```mermaid sequenceDiagram participant L as Librarian participant UI as User Interface actor Mem as Member participant BK as BookService participant MB as MemberService participant BR as BorrowReturnService L->>UI: Add/Update/Remove Book UI->>BK: add_book()/update_book()/remove_book() BK-->>UI: Confirmation/Updated List UI-->>L: Updates Success/Failure L->>UI: Register/Update/Remove Member UI->>MB: register_member()/update_member()/remove_member() MB-->>UI: Confirmation/Updated List UI-->>L: Updates Success/Failure Mem->>UI: Borrow Book UI->>BR: record_borrowing() BR-->>UI: Borrow Record Confirmation UI-->>Mem: Confirmation of Borrowing Mem->>UI: Return Book UI->>BR: record_return() BR-->>UI: Return Record Confirmation UI-->>Mem: Confirmation of Return L->>UI: Generate Reports UI->>BR: generate_report() BR-->>UI: Report Data UI-->>L: Display Report ``` Anything UNCLEAR Currently, the scope of the reports and the type of analytics required are not well-defined. Further clarification on the specific requirements for reporting would be helpful.","solution":"def add(x, y): Returns the sum of x and y. return x + y"},{"question":"Write a Python program to simulate a simple banking system. Your program should allow users to create an account with a unique account number, name, and initial balance. It should support depositing money, withdrawing money (if there are sufficient funds), and checking the current balance. Additionally, implement a feature that displays the transaction history for each account, including timestamps for each transaction. Use appropriate data structures to manage account information and ensure efficient access and updates.","solution":"from datetime import datetime class BankAccount: def __init__(self, account_number, name, initial_balance=0): self.account_number = account_number self.name = name self.balance = initial_balance self.transaction_history = [] self._record_transaction(\'Account creation\', initial_balance) def _record_transaction(self, transaction_type, amount): timestamp = datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\') self.transaction_history.append({ \'transaction_type\': transaction_type, \'amount\': amount, \'timestamp\': timestamp }) def deposit(self, amount): self.balance += amount self._record_transaction(\'Deposit\', amount) def withdraw(self, amount): if amount > self.balance: raise ValueError(\'Insufficient funds\') self.balance -= amount self._record_transaction(\'Withdrawal\', amount) def get_balance(self): return self.balance def get_transaction_history(self): return self.transaction_history # Example usage: # account = BankAccount(123456, \'John Doe\', 1000) # account.deposit(200) # account.withdraw(100) # print(account.get_balance()) # print(account.get_transaction_history())"},{"question":"Write a function in Python that takes as input a list of integers representing the scores of players in a game. The function should identify the player with the highest score and return a tuple containing the player\'s score and the indices of all players having that score. If no player scores above 0, return (0, []). Assume the list will contain at least one score. Write appropriate test cases to validate your solution.","solution":"def highest_scorers(scores): Returns a tuple containing the highest score and a list of indices of players with that score. Parameters: scores (list of int): List of player scores Returns: tuple: A tuple containing the highest score and list of indices of players with that score if not scores: return (0, []) max_score = max(scores) if max_score <= 0: return (0, []) indices = [index for index, score in enumerate(scores) if score == max_score] return (max_score, indices)"},{"question":"Given a dataset of house prices from https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.csv, construct a machine learning model to predict house prices based on the features provided in the dataset. Additionally, discuss and provide the code for at least three advanced data preprocessing techniques used to clean and prepare the dataset for your model. Suggestions for these techniques could include, but are not limited to: handling missing values, feature scaling, and encoding categorical variables.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.compose import ColumnTransformer from sklearn.impute import SimpleImputer from sklearn.pipeline import Pipeline from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error def load_data(): url = \\"https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.csv\\" return pd.read_csv(url) def preprocess_data(data): # Handling missing values, feature scaling, and encoding categorical variables num_pipeline = Pipeline([ (\'imputer\', SimpleImputer(strategy=\\"median\\")), (\'scaler\', StandardScaler()), ]) cat_pipeline = Pipeline([ (\'imputer\', SimpleImputer(strategy=\\"most_frequent\\")), (\'onehot\', OneHotEncoder()), ]) num_attribs = list(data.drop(\\"ocean_proximity\\", axis=1)) cat_attribs = [\\"ocean_proximity\\"] full_pipeline = ColumnTransformer([ (\\"num\\", num_pipeline, num_attribs), (\\"cat\\", cat_pipeline, cat_attribs), ]) data_prepared = full_pipeline.fit_transform(data) return data_prepared def train_model(): data = load_data() data_labels = data[\\"median_house_value\\"].copy() data = data.drop(\\"median_house_value\\", axis=1) data_prepared = preprocess_data(data) X_train, X_test, y_train, y_test = train_test_split(data_prepared, data_labels, test_size=0.2, random_state=42) model = RandomForestRegressor() model.fit(X_train, y_train) predictions = model.predict(X_test) mse = mean_squared_error(y_test, predictions) rmse = mse ** 0.5 return model, rmse if __name__ == \\"__main__\\": model, rmse = train_model() print(f\\"Root Mean Squared Error: {rmse}\\")"},{"question":"Write a function that takes a list of integers and returns a dictionary with two keys: \'unique\' and \'duplicates\'. The \'unique\' key should map to a list of integers that appear exactly once in the input list, while the \'duplicates\' key should map to a list of integers that appear more than once (each integer should appear only once in the \'duplicates\' list). Both lists should be sorted in ascending order. Example: Input: [4, 5, 6, 5, 9, 9, 8, 7] Output: {\'unique\': [4, 6, 7, 8], \'duplicates\': [5, 9]}","solution":"def categorize_numbers(numbers): Categorizes numbers in the given list as unique or duplicates. Args: numbers (list): A list of integers. Returns: dict: A dictionary with keys \'unique\' and \'duplicates\'. The value for \'unique\' is a list of numbers that appear exactly once, and for \'duplicates\', it\'s a list of numbers that appear more than once. Both lists are sorted in ascending order. from collections import Counter # Count the occurrences of each number counts = Counter(numbers) unique = sorted([num for num, count in counts.items() if count == 1]) duplicates = sorted([num for num, count in counts.items() if count > 1]) return {\'unique\': unique, \'duplicates\': duplicates}"},{"question":"Create a Python function called `find_largest_sum_subarray` that accepts a list of integers and returns the sum of the largest contiguous subarray. The function should handle both negative and positive numbers efficiently. Additionally, include a brief explanation of the time complexity of your solution and consider edge cases such as an empty list or a list with a single element.","solution":"def find_largest_sum_subarray(nums): Returns the sum of the largest contiguous subarray in the given list of integers. Parameters: nums (list): A list of integers. Returns: int: The sum of the largest contiguous subarray. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"How would you implement a function in Python that takes a list of dictionaries, with each dictionary containing information about a different employee (name, age, and department), and returns a new list of dictionaries but only with employees who are older than 30 and belong to the \\"Engineering\\" department?","solution":"def filter_employees(employees): Filters employees who are older than 30 and belong to the \\"Engineering\\" department. Parameters: employees (list): A list of dictionaries, each dictionary contains \'name\', \'age\', and \'department\'. Returns: list: A new list of dictionaries with only the filtered employees. return [ employee for employee in employees if employee[\'age\'] > 30 and employee[\'department\'] == \\"Engineering\\" ]"},{"question":"Your task is to write a Python function that takes a list of integers and returns a new list with the elements sorted in ascending order, but only odd numbers should be sorted, while even numbers should remain in their original positions. For example, given a list `[5, 3, 2, 8, 1, 4]`, the function should return `[1, 3, 2, 8, 5, 4]`. # Function Signature ```python def sort_odds(lst: List[int]) -> List[int]: ``` # Input - `lst`: A list of integers (1 <= len(lst) <= 1000) # Output - The function should return a new list where odd numbers are sorted, and even numbers remain at the same position. # Constraints - The order of even numbers in the input list should be preserved. - The position of odd numbers should be preserved while sorting them among the odd numbers. # Example Input ```python lst = [5, 3, 2, 8, 1, 4] ``` Output ```python [1, 3, 2, 8, 5, 4] ``` # Notes - It is guaranteed that all numbers in the input list will be non-negative integers. - You may assume all numbers fit within the 32-bit integer range.","solution":"from typing import List def sort_odds(lst: List[int]) -> List[int]: Returns a new list where odd numbers from the input list are sorted in ascending order, while even numbers remain in their original positions. odds = sorted([num for num in lst if num % 2 != 0]) result = [] odd_index = 0 for num in lst: if num % 2 != 0: result.append(odds[odd_index]) odd_index += 1 else: result.append(num) return result"},{"question":"Implement a function that takes a list of integers and returns a tuple containing two elements. The first element is a new list which has been sorted in descending order, and the second element is the original list with duplicates removed but the relative order of the first occurrence preserved. Your implementation should make use of a helper function to handle the removal of duplicates. Do not use any built-in sorting or set functionalities. **Example:** ```python def process_list(numbers: list) -> tuple: Given a list of integers, returns a tuple containing: 1. A list sorted in descending order 2. The original list with duplicates removed, preserving the order of first occurrence. >>> process_list([4, 2, 9, 4, 2, 1, 10, 4]) ([10, 9, 4, 4, 4, 2, 2, 1], [4, 2, 9, 1, 10]) >>> process_list([1, 2, 2, 3, 3, 3, 4]) ([4, 3, 3, 3, 2, 2, 1], [1, 2, 3, 4]) def remove_duplicates(orig_list): Helper function to remove duplicates while preserving order of first occurrence. >>> remove_duplicates([4, 2, 9, 4, 2, 1, 10, 4]) [4, 2, 9, 1, 10] >>> remove_duplicates([1, 2, 2, 3, 3, 3, 4]) [1, 2, 3, 4] result = [] seen = set() for item in orig_list: if item not in seen: seen.add(item) result.append(item) return result def sort_descending(orig_list): Helper function to sort elements in descending order. >>> sort_descending([4, 2, 9, 4, 2, 1, 10, 4]) [10, 9, 4, 4, 4, 2, 2, 1] >>> sort_descending([1, 2, 2, 3, 3, 3, 4]) [4, 3, 3, 3, 2, 2, 1] if len(orig_list) <= 1: return orig_list else: pivot = orig_list[0] greater = [x for x in orig_list[1:] if x > pivot] lesser = [x for x in orig_list[1:] if x <= pivot] return sort_descending(greater) + [pivot] + sort_descending(lesser) return (sort_descending(numbers), remove_duplicates(numbers)) ```","solution":"def process_list(numbers: list) -> tuple: Given a list of integers, returns a tuple containing: 1. A list sorted in descending order 2. The original list with duplicates removed, preserving the order of first occurrence. def remove_duplicates(orig_list): Helper function to remove duplicates while preserving order of first occurrence. result = [] seen = set() for item in orig_list: if item not in seen: seen.add(item) result.append(item) return result def sort_descending(orig_list): Helper function to sort elements in descending order. if len(orig_list) <= 1: return orig_list else: pivot = orig_list[0] greater = [x for x in orig_list[1:] if x > pivot] lesser = [x for x in orig_list[1:] if x <= pivot] return sort_descending(greater) + [pivot] + sort_descending(lesser) return (sort_descending(numbers), remove_duplicates(numbers))"},{"question":"Design a class `ManageData` in Python which encapsulates the functionality of managing a fixed-size list of elements with methods to update and retrieve the values. The class should be initialized with a specified size for the list and should include the capability to reset the list to its default state. **Example Usage:** ```python data_manager = ManageData(15) data_manager.update_value(5, 10) print(data_manager.get_value(5)) # Output should be 10 data_manager.reset() print(data_manager.get_value(5)) # Output should be 0 (default state) ``` **Requirements:** 1. Implement the `__init__` method to initialize the list to the given size with all elements set to 0. 2. Implement the `update_value` method to update a value at a specific position. 3. Implement the `get_value` method to retrieve a value from a specific position. 4. Implement the `reset` method to set all elements in the list back to 0.","solution":"class ManageData: def __init__(self, size): Initialize the list to the given size with all elements set to 0. :param size: integer size of the internal list self.size = size self.data = [0] * size def update_value(self, index, value): Update the value at the specific position. :param index: integer index at which to update the value :param value: value to set at the specified index if 0 <= index < self.size: self.data[index] = value else: raise IndexError(\\"Index out of range\\") def get_value(self, index): Retrieve the value from the specific position. :param index: integer index from which to retrieve the value :return: value at the specified index if 0 <= index < self.size: return self.data[index] else: raise IndexError(\\"Index out of range\\") def reset(self): Reset all elements in the list back to 0. self.data = [0] * self.size"},{"question":"Write a Python function that takes a list of strings as input and returns a dictionary where the keys are the lengths of the strings and the values are lists containing strings of that length.","solution":"def group_strings_by_length(strings): Groups strings by their length. Parameters: strings (list): A list of strings. Returns: dict: A dictionary where keys are lengths and values are lists of strings of that length. length_dict = {} for string in strings: length = int(len(string)) if length not in length_dict: length_dict[length] = [] length_dict[length].append(string) return length_dict"},{"question":"Given a string consisting of lowercase alphabets and spaces, write a function to count the occurrences of each character, ignoring spaces. The function should return a dictionary where the keys are characters and the values are the counts of each character in the string. Example: ``` Input: \\"hello world\\" Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s, ignoring spaces. char_count = {} for char in s: if char != \' \': if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a Python function to implement a Least Recently Used (LRU) Cache. The cache should support two operations: `get` and `put`. The `get` method should retrieve the value of the key if the key exists in the cache, otherwise it should return -1. The `put` method should set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item. Your implementation should use the `OrderedDict` from the `collections` module to maintain the order of the items. Additionally, provide a brief explanation on how the LRU cache helps in performance optimization in real-world scenarios such as web browsers or database queries.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): Initialize the LRU Cache with a given capacity. self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: Retrieve the value of the key if the key exists in the cache, otherwise return -1. if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: Insert the value if the key is not already present. When the cache reaches its capacity, invalidate the least recently used item before inserting the new item. if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"Implement a function that takes a list of integers and returns the list with its elements reversed, excluding any even numbers. The order of the remaining elements should be reversed from their original order. Handle edge cases such as an empty list or a list with all even numbers.","solution":"def reverse_odd_elements(lst): Returns the list with its elements reversed, excluding any even numbers. Parameters: lst (list of int): The input list of integers. Returns: list of int: The modified list. return [x for x in reversed(lst) if x % 2 != 0]"},{"question":"Given a list of integers, write a function that finds the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. For example, given the list: ```python arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] ``` The function should return `6`, as the longest increasing subsequence is `[10, 22, 33, 50, 60, 80]`. # Function Signature ```python def longest_increasing_subsequence(arr: List[int]) -> int: # Your code here # Example usage arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] print(longest_increasing_subsequence(arr)) # Output: 6 ``` # Constraints - The list can contain up to 10^3 elements. - Each element of the list is an integer within the range ([-10^3, 10^3]). # Requirements - Your function should operate with a time complexity better than O(n^2). - Use dynamic programming techniques to optimize your function\'s performance.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Finds the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. if not arr: return 0 # DP array initialized with 1s as the minimum length of increasing subsequence will be 1 dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of integers that represent the balance of a bank account over time. Write a Python function that calculates the maximum possible profit that could have been made by buying at the lowest point and selling at the highest point after the buy. If no profit can be made, return 0. Your function should take a list of integers as input and return an integer representing the maximum profit. **Example:** ```python def maxProfit(prices): # Your code here # Example usage: print(maxProfit([7, 1, 5, 3, 6, 4])) # Output: 5 print(maxProfit([7, 6, 4, 3, 1])) # Output: 0 ``` **Explanation:** - In the first example, the maximum profit can be achieved by buying at price 1 and selling at price 6, resulting in a profit of 5. - In the second example, no profit can be made, so the function returns 0.","solution":"def maxProfit(prices): Calculate the maximum profit that could be achieved by buying at the lowest price and selling at the highest price after the buy. :param prices: List of integers representing the balance of a bank account over time. :return: Integer representing the maximum possible profit. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Implement a Python class that simulates a simple in-memory key-value store. The class should support the following operations: 1. `set(key, value)` – Stores the key-value pair. 2. `get(key)` – Returns the value associated with the key. If the key does not exist, return \'None\'. 3. `delete(key)` – Removes the key-value pair from the store if it exists. 4. `get_all_keys()` – Returns a list of all keys currently stored. Ensure that the operations handle edge cases gracefully, such as setting a key that already exists, deleting a key that does not exist, and retrieving keys when the store is empty. Additionally, the `get_all_keys()` method should return the keys in the order they were added to the store.","solution":"class KeyValueStore: def __init__(self): self.store = {} self.keys_in_order = [] def set(self, key, value): if key not in self.store: self.keys_in_order.append(key) self.store[key] = value def get(self, key): return self.store.get(key, \'None\') def delete(self, key): if key in self.store: del self.store[key] self.keys_in_order.remove(key) def get_all_keys(self): return self.keys_in_order[:]"},{"question":"You are tasked with creating a function that takes two arguments: a target string and a dictionary of synonym sets. The function should return a list of all possible strings generated by replacing words from the target string with any of their synonyms provided in the dictionary. The dictionary argument will be in the form of a list of lists, where each inner list contains synonym words. Your function should replace words only if they are present in the synonym sets. For instance, given the target statement \\"I feel happy today\\" and a list of synonym sets `[[\'happy\', \'pleased\', \'content\'], [\'today\', \'now\', \'this moment\']]`, the potential outputs could include \\"I feel pleased today\\", \\"I feel happy now\\", etc. # Requirements: 1. The function signature must be `generate_synonym_sentences(target: str, synonyms: list) -> list` where `target` is the string and `synonyms` is the list of synonym sets. 2. Handle cases where no synonyms are available for replacement. 3. Implement error handling to manage cases of empty strings or an improperly formatted synonym dictionary. # Example: ```python def generate_synonym_sentences(target: str, synonyms: list) -> list: # Your code goes here # Sample usage target = \\"I feel happy today\\" synonyms = [[\'happy\', \'pleased\', \'content\'], [\'today\', \'now\', \'this moment\']] print(generate_synonym_sentences(target, synonyms)) ``` Output could be: ```python [\'I feel happy today\', \'I feel happy now\', \'I feel happy this moment\', \'I feel pleased today\', \'I feel pleased now\', \'I feel pleased this moment\', \'I feel content today\', \'I feel content now\', \'I feel content this moment\'] ``` # Template Code: ```python def generate_synonym_sentences(target: str, synonyms: list) -> list: # Helper function to find synonym sets for a word def find_synonyms(word): for synonym_set in synonyms: if word in synonym_set: return synonym_set return [word] # Splitting target string to words words = target.split() # For each word, retrieve synonyms or use the word itself synonym_options = [find_synonyms(word) for word in words] # Recursive function to generate combinations def generate_combinations(options, index=0, current_sentence=[]): if index == len(options): return [\' \'.join(current_sentence)] combinations = [] for synonym in options[index]: combinations += generate_combinations(options, index + 1, current_sentence + [synonym]) return combinations # Error handling for improper inputs if not isinstance(target, str) or not isinstance(synonyms, list) or len(target) == 0: raise ValueError(\\"Invalid input. Ensure target is a non-empty string and synonyms is a list of lists.\\") # Generating all combinations return generate_combinations(synonym_options) # Sample usage target = \\"I feel happy today\\" synonyms = [[\'happy\', \'pleased\', \'content\'], [\'today\', \'now\', \'this moment\']] print(generate_synonym_sentences(target, synonyms)) ```","solution":"def generate_synonym_sentences(target: str, synonyms: list) -> list: # Helper function to find synonym sets for a word def find_synonyms(word): for synonym_set in synonyms: if word in synonym_set: return synonym_set return [word] # Splitting target string into words words = target.split() # For each word, retrieve synonyms or use the word itself synonym_options = [find_synonyms(word) for word in words] # Recursive function to generate combinations def generate_combinations(options, index=0, current_sentence=[]): if index == len(options): return [\' \'.join(current_sentence)] combinations = [] for synonym in options[index]: combinations += generate_combinations(options, index + 1, current_sentence + [synonym]) return combinations # Error handling for improper inputs if not isinstance(target, str) or not isinstance(synonyms, list) or len(target) == 0: raise ValueError(\\"Invalid input. Ensure target is a non-empty string and synonyms is a list of lists.\\") # Generating all combinations return generate_combinations(synonym_options) # Sample usage target = \\"I feel happy today\\" synonyms = [[\'happy\', \'pleased\', \'content\'], [\'today\', \'now\', \'this moment\']] print(generate_synonym_sentences(target, synonyms))"},{"question":"Rotating the Matrix You are given an `n x n` 2D integer matrix. Your task is to rotate the matrix 90 degrees clockwise in place, which means you have to modify the input 2D matrix directly without using any extra space for another 2D matrix. Write a function that takes the matrix as input, rotates the matrix 90 degrees clockwise, and outputs the modified matrix. # Example: **Input:** ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` **Output:** ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Input:** ``` matrix = [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` **Output:** ``` [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` # Constraints: * `n == matrix.length == matrix[i].length` * `1 <= n <= 20` * `-1000 <= matrix[i][j] <= 1000`","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given n x n 2D matrix 90 degrees clockwise in place. n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): # Save the top element top = matrix[i][j] # Move left to top matrix[i][j] = matrix[n - 1 - j][i] # Move bottom to left matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j] # Move right to bottom matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i] # Move top to right matrix[j][n - 1 - i] = top"},{"question":"Write a function that takes a list of integers and an integer target as inputs. The function should return a list of unique pairs (as tuples) of integers from the input list that add up to the target value. Ensure that each pair is included only once, and the order of the pairs in the output does not matter. You may not use the same element twice in one pair. Consider the efficiency of the solution.","solution":"def find_pairs(nums, target): Returns a list of unique pairs (as tuples) of integers from the input list that add up to the target value. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"Write a function to merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists, not by creating new nodes. Implement the function using an iterative approach. Ensure your solution handles edge cases where one or both of the lists might be empty. Include sample input and output for validation.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merges two sorted linked lists and returns it as a new list. The new list is created by splicing together the nodes of the first two lists. :param ListNode l1: The head of the first sorted linked list. :param ListNode l2: The head of the second sorted linked list. :return: The head of the merged, sorted linked list. :rtype: ListNode dummy = ListNode(0) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next current.next = l1 if l1 else l2 return dummy.next"},{"question":"Write a function to calculate the longest contiguous subarray sum within a given list of integers. The function should return the maximum sum possible. If all elements are negative, return the maximum value (which is the smallest negative number). Ensure that your function can handle arrays containing both positive and negative integers and perform efficiently on large input sizes. Example: ```python def max_subarray_sum(arr): # Your implementation here # Test the function with the following input arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(max_subarray_sum(arr)) # Output should be 6 ([4, -1, 2, 1] has the largest sum = 6) ```","solution":"def max_subarray_sum(arr): Finds the sum of the longest contiguous subarray with the maximum sum. :param arr: List of integers :return: Integer representing the maximum sum of any contiguous subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that takes a string as input and returns the string with all spaces replaced by underscores. Additionally, the function should convert all alphabetic characters to lowercase. For example, if the input string is \\"Hello World\\", the output should be \\"hello_world\\". Ensure your solution handles edge cases such as an empty string or a string with no alphabetic characters. Function Signature: ```python def replace_and_convert(input_str: str) -> str: pass ``` Example Usage: ```python assert replace_and_convert(\\"Hello World\\") == \\"hello_world\\" assert replace_and_convert(\\" A B C \\") == \\"__a_b_c__\\" assert replace_and_convert(\\"\\") == \\"\\" assert replace_and_convert(\\"123 456\\") == \\"123_456\\" ```","solution":"def replace_and_convert(input_str: str) -> str: Takes a string as input and returns the string with all spaces replaced by underscores. Additionally, converts all alphabetic characters to lowercase. # Replace spaces with underscores transformed_str = input_str.replace(\\" \\", \\"_\\") # Convert all alphabetic characters to lowercase transformed_str = transformed_str.lower() return transformed_str"},{"question":"Create a function that takes a string containing parentheses, brackets, and curly braces, and checks if the string has balanced and correctly nested pairs of these symbols. The function should return `True` if the string is balanced, and `False` otherwise. For example, the string \\"([]{})\\" is balanced, while the string \\"([)]\\" is not balanced. # Function Signature def is_balanced(input_string: str) -> bool: pass # Example Inputs input_string = \\"([]{})\\" input_string = \\"([)]\\" # Example Outputs output = True # For input \\"([]{})\\" output = False # For input \\"([)]\\"","solution":"def is_balanced(input_string: str) -> bool: Checks whether the input string has balanced and correctly nested pairs of parentheses, brackets, and curly braces. Parameters: input_string (str): The input string containing (), [], {} characters. Returns: bool: True if the string is balanced, False otherwise. stack = [] matching_pairs = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in input_string: if char in matching_pairs.values(): stack.append(char) elif char in matching_pairs.keys(): if stack == [] or stack.pop() != matching_pairs[char]: return False else: # Invalid character, return False return False return stack == []"},{"question":"Write a function that takes a string as input and identifies if the string is a pangram. A pangram is a sentence containing every letter of the alphabet at least once (case insensitive). Return `True` if it is a pangram and `False` otherwise. Example Input: ``` \\"The quick brown fox jumps over the lazy dog\\" ``` Example Output: ``` True ``` Example Input: ``` \\"Hello World\\" ``` Example Output: ``` False ```","solution":"def is_pangram(s): Returns True if the input string is a pangram, otherwise False. alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') return alphabet.issubset(set(s.lower()))"}]'),R={name:"App",components:{PoemCard:F},data(){return{searchQuery:"",visibleCount:4,poemsData:C,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},P={class:"search-container"},S={class:"card-container"},L={key:0,class:"empty-state"},D=["disabled"],O={key:0},N={key:1};function z(i,e,l,m,s,a){const p=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",P,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",S,[(n(!0),r(b,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",L,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",N,"Loading...")):(n(),r("span",O,"See more"))],8,D)):u("",!0)])}const j=h(R,[["render",z],["__scopeId","data-v-bd1eef18"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/5.md","filePath":"drive/5.md"}'),W={name:"drive/5.md"},M=Object.assign(W,{setup(i){return(e,l)=>(n(),r("div",null,[x(j)]))}});export{B as __pageData,M as default};
