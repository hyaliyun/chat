import{_ as c,o as n,c as r,a as t,m as f,t as h,C as p,M as b,U as _,f as l,F as v,p as y,e as w,q}from"./chunks/framework.B1z0IdBH.js";const x={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},C={class:"review"},T={class:"review-title"},R={class:"review-content"};function I(s,e,u,d,i,a){return n(),r("div",k,[t("div",C,[t("div",T,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),f(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),f(h(u.poem.solution),1)])])])}const A=c(x,[["render",I],["__scopeId","data-v-18812dfa"]]),F=JSON.parse(`[{"question":"Create a function that takes a string as input and returns a dictionary where the keys are the characters in the string and the values are the counts of those characters. If a character appears multiple times in the string, it should appear multiple times in the dictionary as well.","solution":"def char_counts(s): Returns a dictionary where the keys are characters from the input string and the values are lists containing the counts of those characters for each occurrence. result = {} for char in s: if char in result: result[char].append(result[char][-1] + 1) else: result[char] = [1] return result"},{"question":"Create a function that takes a list of strings and returns the most frequently occurring string. If there is a tie for the most frequently occurring string, return all of them in a list. Can you provide a Python implementation?","solution":"from collections import Counter def most_frequent_string(strings): Returns the most frequently occurring string in the list. If there is a tie, returns all the most frequent strings in a list. if not strings: return [] # Return an empty list if the input list is empty counter = Counter(strings) max_count = max(counter.values()) most_frequent = [string for string, count in counter.items() if count == max_count] if len(most_frequent) == 1: return most_frequent[0] else: return most_frequent"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of all numbers from 1 to \`n\` (inclusive). However, the function should also account for an optional parameter \`step\` that defaults to 1. If \`step\` is not 1, the function should sum numbers in steps of \`step\`, meaning it should sum numbers like 1, 3, 5, 7, etc. if \`step\` is 2.","solution":"def sum_with_step(n, step=1): Returns the sum of all numbers from 1 to n (inclusive), taking steps of \`step\`. return sum(range(1, n + 1, step))"},{"question":"Create a function that takes a list of usernames and renames them by adding a prefix \\"user_\\" to each username.","solution":"def add_prefix_to_usernames(usernames): Takes a list of usernames and renames them by adding the prefix 'user_'. Parameters: - usernames (list): A list of strings representing usernames. Returns: - list: A list of strings with 'user_' prefix added to each original username. return [f\\"user_{username}\\" for username in usernames]"},{"question":"Create a function that returns a random question from a list of questions.","solution":"import random def get_random_question(questions): Returns a random question from a list of questions. Parameters: questions (list of str): List containing questions as strings. Returns: str: A random question from the list. if not questions: raise ValueError(\\"The list of questions cannot be empty.\\") return random.choice(questions)"},{"question":"Create a function that checks whether a given list is a palindrome. A palindrome is a sequence that reads the same backward as forward, e.g., ['a', 'b', 'a'] or ['1', '2', '2', '1']. Ensure your function is recursive.","solution":"def is_palindrome(lst): Checks if the given list is a palindrome. def helper(start, end): # Base case: if the start index is greater than or equal to the end index, it's a palindrome if start >= end: return True # If elements at the start and the end do not match, it is not a palindrome if lst[start] != lst[end]: return False # Move towards the middle of the list return helper(start + 1, end - 1) return helper(0, len(lst) - 1)"},{"question":"Create a function that takes an array of integers and returns a new array containing only the distinct elements from the input array.","solution":"def distinct_elements(arr): Returns a list containing the distinct elements from the input array. return list(set(arr))"},{"question":"Create a function that takes two lists as input and returns a list of lists, where each sublist contains elements from the two lists that share the same index.","solution":"def combine_lists(list1, list2): Takes two lists as input and returns a list of lists, where each sublist contains elements from the two lists that share the same index. # Using zip to iterate through both lists concurrently return [list(a) for a in zip(list1, list2)]"},{"question":"Create a function that reverses an array in reverse order.","solution":"def reverse_array(arr): Returns a new array that is the reverse of the input array 'arr'. return arr[::-1]"},{"question":"Create a function that takes in an array and an integer value 'k', and returns the number of elements in the array that are greater than 'k'.","solution":"def count_greater_than_k(arr, k): Returns the number of elements in the array that are greater than k. Parameters: arr (list): List of integers. k (int): The integer value to compare against. Returns: int: Number of elements greater than k. return sum(1 for x in arr if x > k)"},{"question":"Create a function that generates a list containing the first n Fibonacci numbers. The function should be efficient and utilize recursion with memoization. Memoization will help in avoiding the exponential time complexity associated with plain recursion. Your Python function should handle cases where n is less than zero by returning an empty list.","solution":"def fibonacci(n, memo={}): Generates the first n Fibonacci numbers using recursion with memoization. Returns an empty list if n is less than zero. if n <= 0: return [] def fib_helper(x, memo): if x in memo: return memo[x] if x == 1: memo[x] = [0] elif x == 2: memo[x] = [0, 1] else: seq = fib_helper(x - 1, memo) memo[x] = seq + [seq[-1] + seq[-2]] return memo[x] return fib_helper(n, memo)"},{"question":"Create a function that implements the Caesar cipher, shifting letters by a given positive integer n. The function should also handle case sensitivity and maintain spaces and punctuation correctly.","solution":"def caesar_cipher(text, n): Shifts the letters in the string 'text' by 'n' positions in the alphabet, maintaining the case, and leaves spaces and punctuation unchanged. result = [] for char in text: if char.isalpha(): shift = n % 26 if char.islower(): shifted_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a')) elif char.isupper(): shifted_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A')) result.append(shifted_char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes two parameters: a list of integers and a target integer. The function should return the indices of the two numbers such that they add up to the target. If no such pair exists, return an empty list. How would you implement this problem in Python?","solution":"def two_sum(nums, target): Finds two indices of the numbers in the list that add up to the target. Parameters: nums (list): List of integers. target (int): The target integer. Returns: list: Indices of the two numbers that add up to the target, or an empty list if no pair exists. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i return []"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string. The binary representation should be zero-padded to a minimum length of 8 bits.","solution":"def int_to_padded_binary(n): Convert an integer to its binary representation as a string zero-padded to a minimum length of 8 bits. Args: n (int): The integer to be converted. Returns: str: The binary representation of the integer, zero-padded to at least 8 bits. return format(n, '08b')"},{"question":"Create a function that takes two parameters: an array of numbers and a number. The function should return the count of all numbers in the array that are divisible by the given number without leaving a remainder.","solution":"def count_divisible_numbers(numbers, divisor): Returns the count of all numbers in the array that are divisible by the given divisor without leaving a remainder. Parameters: numbers (list): List of integers. divisor (int): The number to divide by. Returns: int: The count of divisible numbers. return sum(1 for number in numbers if number % divisor == 0)"},{"question":"Create a function that takes three arguments: an array of integers, a start index, and an end index. The function should return the sum of all integers in the array from the start index to the end index (inclusive), but only if the sum is even. If the sum is odd, the function should return -1.","solution":"def sum_even_only(arr, start_idx, end_idx): Returns the sum of integers in the array from start_idx to end_idx (inclusive) if the sum is even. If the sum is odd, return -1. if start_idx < 0 or end_idx >= len(arr) or start_idx > end_idx: return -1 total_sum = sum(arr[start_idx:end_idx+1]) if total_sum % 2 == 0: return total_sum else: return -1"},{"question":"Create a function that takes the number of seconds as input and returns the time in the format \`HH:MM:SS\`. How can I implement this in Python?","solution":"def convert_seconds(seconds): Converts a number of seconds to a time format HH:MM:SS. :param seconds: Number of seconds to convert :return: A string representing the time in HH:MM:SS format hours = seconds // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"Create a function that can encode a plain text string to Base64 format. Please provide a Python function to accomplish this.","solution":"import base64 def encode_to_base64(plain_text): Encodes a plain text string to Base64. Parameters: plain_text (str): The text to be encoded. Returns: str: The Base64 encoded string. plain_bytes = plain_text.encode('utf-8') base64_bytes = base64.b64encode(plain_bytes) base64_string = base64_bytes.decode('utf-8') return base64_string"},{"question":"Create a function that takes in two parameters: a list of strings and a string s. The function should return True if any string in the list contains the substring s, and False otherwise.","solution":"def contains_substring(lst, s): Returns True if any string in the lst contains the substring s, else returns False. :param lst: List of strings :param s: Substring to search for :return: Boolean return any(s in string for string in lst)"},{"question":"Create a function that accepts a list of integers and returns a new list containing only the integers that are palindromic numbers. A palindromic number reads the same forward and backward. Additionally, the function should return the count of such palindromic numbers.","solution":"def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def palindromic_numbers(nums): Return a list of palindromic numbers and the count of such numbers from the provided list of integers. Args: nums (list of int): The list of integers to be checked. Returns: tuple: A tuple containing a list of palindromic numbers and the count of such numbers. palindromic_list = [num for num in nums if is_palindrome(num)] return palindromic_list, len(palindromic_list)"},{"question":"Create a function that calculates and returns the factorial of a number, considering both positive integer inputs and the special case of zero. You should handle the case where the input is a non-integer or negative number by raising an appropriate exception message.","solution":"def factorial(n): Returns the factorial of the given number n. If n is not an integer or if n is negative, raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n+1): result *= i return result"},{"question":"Create a function that takes in a list of strings and returns a new list with all strings that contain at least one number.","solution":"import re def strings_with_numbers(lst): Returns a list of strings that contain at least one number. Args: lst (list): List of strings. Returns: list: List of strings with at least one number. return [s for s in lst if re.search(r'd', s)]"},{"question":"Create a function that takes a string and returns the number of unique characters in the string. Unique characters are defined as characters that appear exactly once in the string, case-sensitive.","solution":"def unique_char_count(s): Returns the number of unique characters in the string s. Unique characters appear exactly once in the string and are case-sensitive. Args: s (str): The input string. Returns: int: The number of unique characters. from collections import Counter char_count = Counter(s) return sum(1 for count in char_count.values() if count == 1)"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, and returns the result of multiplying \`a\` and \`b\` without using the multiplication operator, addition operator, or any built-in functions for multiplication or division. You should implement the multiplication using bit manipulation.","solution":"def multiply(a, b): Returns the product of a and b using bit manipulation. def add(x, y): while y != 0: carry = x & y x = x ^ y y = carry << 1 return x if a == 0 or b == 0: return 0 negative_result = False if a < 0: a = add(~a, 1) negative_result = not negative_result if b < 0: b = add(~b, 1) negative_result = not negative_result product = 0 while b != 0: if b & 1: product = add(product, a) a <<= 1 b >>= 1 if negative_result: product = add(~product, 1) return product"},{"question":"Create a function that takes a list lst of integers and an integer K. The function returns the sum of all integers in lst that are multiples of K. If no integers in the list meet the criteria, return 0.","solution":"def sum_of_multiples(lst, K): Returns the sum of all integers in lst that are multiples of K. If no integers in the list are multiples of K, return 0. :param lst: List of integers :param K: Integer to check multiples of :return: Sum of multiples of K if K == 0: raise ValueError(\\"K cannot be zero.\\") return sum(x for x in lst if x % K == 0)"},{"question":"Create a function that takes a string as input and returns its reverse. Then, create a check function that takes a string and the reversed version of the string and verifies if the reverse function is correct.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] def check_reverse(original, reversed_version): Checks if the reversed_version is the correct reverse of original string. return original[::-1] == reversed_version"},{"question":"Create a function that can generate a list of prime numbers up to a given number \`n\` using the Sieve of Eratosthenes algorithm. The function should be optimized to handle large numbers.","solution":"def sieve_of_eratosthenes(n): Generate a list of prime numbers up to a given number \`n\` using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n + 1, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that sorts an array using the 'Bubble Sort' algorithm. Explain each step of the Bubble Sort algorithm and how it works.","solution":"def bubble_sort(arr): Sorts an array using the Bubble Sort algorithm. :param arr: List of elements to be sorted :return: Sorted list n = len(arr) for i in range(n): # Track if any swap happens; if none, then the list is already sorted swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: # Swap the elements arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no elements were swapped, then the list is already sorted if not swapped: break return arr"},{"question":"Create a function that can accept a variable number of positional arguments and keyword arguments, and return a dictionary containing these arguments.","solution":"def collect_arguments(*args, **kwargs): Collects variable number of positional arguments and keyword arguments into a dictionary. Args: *args: Variable number of positional arguments. **kwargs: Variable number of keyword arguments. Returns: dict: Dictionary containing positional arguments under the key 'args' and keyword arguments under the key 'kwargs'. return {'args': args, 'kwargs': kwargs}"},{"question":"Create a function that , given an integer array, returns the length of the longest consecutive sequence of increasing numbers. If the array is empty, return 0.","solution":"def longest_increasing_sequence_length(arr): Given an integer array, returns the length of the longest consecutive sequence of increasing numbers. If the array is empty, return 0. :param arr: List[int] - The input array of integers. :return: int - The length of the longest consecutive increasing sequence. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Create a function that takes an array of integers as input and returns the frequency of each integer in the array. The function should be implemented using Python.","solution":"def frequency_count(arr): Returns the frequency of each integer in the array. Parameters: arr (list): A list of integers. Returns: dict: A dictionary where keys are the integers from the array and values are their corresponding frequencies. frequency_dict = {} for num in arr: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return frequency_dict"},{"question":"Create a function that checks whether a given string is a valid IPv4 address or not. An IPv4 address is a 32-bit unsigned integer. It consists of four decimal numbers separated by dots. Each decimal number should be between 0 and 255, inclusive.","solution":"def is_valid_ipv4_address(ip): Checks whether the given string is a valid IPv4 address. An IPv4 address is valid if: - It consists of four segments - Each segment is a decimal number between 0 and 255 Parameters: ip (str): The string to check. Returns: bool: True if the string is a valid IPv4 address, False otherwise. parts = ip.split('.') # Validate that there are exactly 4 parts if len(parts) != 4: return False for part in parts: # Validate that each part is a number and within the 0-255 range if not part.isdigit() or not (0 <= int(part) <= 255): return False return True"},{"question":"Create a function that takes two integers \`a\` and \`b\` as input and returns their product. If the product is a multiple of 3, return the sum of \`a\` and \`b\`; otherwise, return the difference between \`a\` and \`b\`.","solution":"def custom_logic(a, b): Returns the product of a and b if it's a multiple of 3, returns the sum of a and b; otherwise, returns the difference between a and b. product = a * b if product % 3 == 0: return a + b else: return a - b"},{"question":"Create a function that takes a list of integers as an argument. The function will return a new list that contains only the elements that appear more than once in the input list. If an element appears only once, it should not be included in the output list.","solution":"def find_repeated_elements(lst): Returns a list of elements that appear more than once in the input list. Parameters: lst (list of int): The list of integers to check. Returns: list of int: A list of integers that appear more than once in the input list. from collections import Counter # Count occurrences of each element counts = Counter(lst) # Filter elements that appear more than once repeated_elements = [element for element, count in counts.items() if count > 1] return repeated_elements"},{"question":"Create a function that generates a random string of a given length, containing lowercase and uppercase characters, and digits from 0 to 9. Also, ensure that the string does not contain repeated characters.","solution":"import random import string def generate_unique_random_string(length): Generates a random string of a given length, containing unique lowercase and uppercase characters, and digits from 0 to 9. Args: length (int): The length of the random string to generate. Must not exceed 62. Returns: str: A random string of the given length with unique characters. Raises: ValueError: If length is greater than 62. characters = string.ascii_letters + string.digits if length > len(characters): raise ValueError(\\"Length must not exceed 62.\\") return ''.join(random.sample(characters, length))"},{"question":"Create a function that accepts a string parameter with date - month - year format (e.g., \\"01-05-2021\\") and returns the day of the week. If the input string does not match the format, return \\"Invalid date format\\". For example, for the given string \\"01-05-2021\\", the function should return \\"Wednesday\\".","solution":"from datetime import datetime def get_day_of_week(date_str): Given a string with the date in the \\"DD-MM-YYYY\\" format, returns the day of the week. If the input string does not match the format, return \\"Invalid date format\\". try: date_obj = datetime.strptime(date_str, '%d-%m-%Y') return date_obj.strftime('%A') except ValueError: return \\"Invalid date format\\""},{"question":"Create a function that takes a string as input and returns the string with only unique characters, preserving the order they appeared in the original string. If a character is repeated, the first occurrence should be kept and all subsequent repeated characters should be removed. For instance, if the input string is \\"programming\\", the output should be \\"progamin\\" only keeping the first occurrence of 'm'. How can I achieve this in Python?","solution":"def unique_chars(s): Returns a string with only unique characters, preserving the order of first occurrences. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes a string as input and returns the string with all the vowels replaced by the corresponding number from the sequence 2, 4, 6, 8 respectively for the vowels a, e, i, o.","solution":"def replace_vowels(input_string): Replaces vowels in the input_string with numbers 2, 4, 6, 8 respectively for the vowels a, e, i, o. vowel_to_number = {'a': '2', 'e': '4', 'i': '6', 'o': '8'} result = [] for char in input_string: if char in vowel_to_number: result.append(vowel_to_number[char]) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a string as input and returns the count of all uppercase and lowercase letters in the string, respectively. The result should be a tuple containing the counts in the order \`(uppercase_count, lowercase_count)\`.","solution":"def count_letters(s): This function takes a string as input and returns a tuple with the counts of uppercase and lowercase letters in the string respectively. uppercase_count = 0 lowercase_count = 0 for char in s: if char.isupper(): uppercase_count += 1 elif char.islower(): lowercase_count += 1 return (uppercase_count, lowercase_count)"},{"question":"Create a function that takes a string and a list of strings, and replaces all occurrences of the given string in the list with another string. How would you approach solving this problem in Python?","solution":"def replace_occurrences(original, replacement, strings): Replaces all occurrences of 'original' with 'replacement' in a list of strings 'strings'. Args: - original (str): The string to be replaced. - replacement (str): The string to replace with. - strings (list of str): A list of strings to perform replacements in. Returns: - list of str: A new list of strings with the replacements made. return [s.replace(original, replacement) for s in strings]"},{"question":"Create a function that calculates the number of occurrences of a substring within a given string. The function should return the count of the substring's occurrences.","solution":"def count_substring_occurrences(string, substring): Returns the number of occurrences of substring in the given string. Parameters: string (str): The string in which to search. substring (str): The substring to count. Returns: int: The number of occurrences of the substring. return string.count(substring)"},{"question":"Create a function that takes as its input an array of numbers and returns the product of all the numbers in the array.","solution":"def product_of_array(nums): Returns the product of all the numbers in the array nums. product = 1 for num in nums: product *= num return product"},{"question":"Create a function that takes two integers, \`m\` and \`n\`, and returns the sum of their last digits. If the sum is greater than or equal to 10, return the last digit of the sum.","solution":"def sum_of_last_digits(m, n): Takes two integers, m and n, and returns the sum of their last digits. If the sum is greater than or equal to 10, returns the last digit of the sum. last_digit_m = abs(m) % 10 last_digit_n = abs(n) % 10 sum_last_digits = last_digit_m + last_digit_n return sum_last_digits % 10 if sum_last_digits >= 10 else sum_last_digits"},{"question":"Create a function that takes a string and returns a dictionary where the keys are the unique words in the string and the values are their frequency counts. For example, if the input string is \\"apple banana apple orange banana apple\\", the output should be {'apple': 3, 'banana': 2, 'orange': 1}.","solution":"def word_frequency(s): Returns a dictionary where the keys are the unique words in the string and the values are their frequency counts. Args: s (str): The input string. Returns: dict: A dictionary with words as keys and their frequencies as values. words = s.split() # Split the string into words freq_dict = {} for word in words: if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 return freq_dict"},{"question":"Create a function that generates a random string of a given length using Python. You can use the string letters (a-z and A-Z) and digits (0-9).","solution":"import random import string def generate_random_string(length): Generates a random string of a given length using letters (a-z, A-Z) and digits (0-9). characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Create a function that takes a string as input and returns a dictionary mapping each character to its frequency in the string. For example, if the input string is \\"apple\\", the function should return {'a': 1, 'p': 2, 'l': 1, 'e': 1}.","solution":"def char_frequency(s): Returns a dictionary mapping each character in the input string to its frequency. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that takes in three integers: num1, num2, and num3 and returns the number of occurrences of a pattern where \`num2\` falls between \`num1\` and \`num3\`. The function should not count cases where \`num2\` is equal to \`num1\` or \`num2\` is equal to \`num3\`.","solution":"def count_occurrences_between(num1, num2, num3): Returns the number of occurrences where num2 falls strictly between num1 and num3. if num1 < num2 < num3 or num1 > num2 > num3: return 1 return 0"},{"question":"Create a function that takes an integer and returns the sum of its digits in string format. For example, if the input is 123, the output should be \\"6\\" because 1 + 2 + 3 = 6.","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n in string format. # Convert the integer to its absolute value in case it's negative. n = abs(n) # Calculate the sum of the digits. digit_sum = sum(int(digit) for digit in str(n)) # Return the result in string format. return str(digit_sum)"},{"question":"Create a function that generates a list of all unique characters from a given string. The function should ignore whitespace and be case-insensitive.","solution":"def unique_characters(s): Returns a list of unique characters from a given string, ignoring whitespace and considering characters case-insensitively. s = s.replace(\\" \\", \\"\\").lower() # Remove whitespace and convert to lowercase. return list(sorted(set(s))) # Use set to get unique characters, then convert back to list and sort."},{"question":"Create a function that takes two parameters: an integer \`n\` and a string \`s\`. The function should return the minimum number of deletions required to make the substring \`s[i: j]\` of \`s\` a palindrome for all \`i\` and \`j\` in the range \`[0, n)\`.","solution":"def min_deletions_to_palindrome(n, s): Returns the minimum number of deletions required to make any substring of s a palindrome. # Prepare a 2D list to store the minimum deletions for substring s[i:j+1] dp = [[0] * n for _ in range(n)] # Loop for substrings of all possible lengths for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 # Return the dp array, which contains the min deletions for all substrings # This array can be used to quickly find min deletions for any substring s[i:j+1] return dp"},{"question":"Create a function that can “add” two linked lists that represent numbers in reverse order. The function should return the sum as a linked list in reverse order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Adds two numbers represented by linked lists in reverse order. Args: l1 (ListNode): The first linked list. l2 (ListNode): The second linked list. Returns: ListNode: The linked list representing the sum in reverse order. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 is not None or l2 is not None: x = l1.val if l1 is not None else 0 y = l2.val if l2 is not None else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1 is not None: l1 = l1.next if l2 is not None: l2 = l2.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"Create a function that takes two strings as input: a main string and a search string. The function should return the number of occurrences of the search string in the main string, considering that the search is case-insensitive. If either of the strings is empty, the function should return -1.","solution":"def count_occurrences(main_string, search_string): Returns the number of occurrences of search_string in main_string, case-insensitive. If either of the strings is empty, returns -1. if not main_string or not search_string: return -1 main_string = main_string.lower() search_string = search_string.lower() return main_string.count(search_string)"},{"question":"Create a function that checks whether a given string contains only alphabetic characters (either uppercase or lowercase) or not. How would you implement this in Python?","solution":"def is_alpha_string(s): Checks whether a given string contains only alphabetic characters (either uppercase or lowercase). Parameters: s (str): The input string to check. Returns: bool: True if the string contains only alphabetic characters, False otherwise. return s.isalpha()"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the sum of all elements before it in the original array. For example, given the input array \`[1, 2, 3, 4]\`, the output should be \`[1, 3, 6, 10]\`.","solution":"def cumulative_sum(arr): Takes an array of integers and returns a new array where each element is the sum of all elements before it in the original array. if not arr: # return empty list if input is empty return [] result = [arr[0]] for i in range(1, len(arr)): result.append(result[-1] + arr[i]) return result"},{"question":"Create a function that finds the longest palindrome in a given string. A palindrome is a string that reads the same backward as forward, e.g., \\"radar\\" or \\"level\\". The function should return the longest palindrome found in the string. If there are multiple longest palindromes, return the first one found. If no palindrome is found, return an empty string.","solution":"def longest_palindrome(s): Returns the longest palindrome found in the string s. If there are multiple longest palindromes, it returns the first one found. If no palindrome is found, it returns an empty string. n = len(s) if n == 0: return \\"\\" longest = \\"\\" for i in range(n): # Check for odd length palindromes odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Check for even length palindromes even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest def expand_around_center(s, left, right): Expands around the center to find the longest palindrome and returns it. while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right]"},{"question":"Create a function that takes in a list of integers and returns the most frequent element. If there are multiple elements with the same highest frequency, return the smallest one among them.","solution":"def most_frequent_element(lst): Returns the most frequent element in the list. If there are multiple elements with the same highest frequency, returns the smallest one among them. if not lst: return None from collections import Counter count = Counter(lst) most_frequent = max(count, key=lambda x: (count[x], -x)) return most_frequent"},{"question":"Create a function that accepts two parameters, a positive integer n and a list of strings words, and returns a list of strings containing all the words from the input list that are of length n. The order of the words in the resulting list should be the same as in the input list.","solution":"def filter_words_by_length(n, words): Returns a list of words that are of the specified length n. Parameters: n (int): The length of words to filter. Must be a positive integer. words (list of str): The list of words to filter. Returns: list of str: A list containing words of length n from the input list. return [word for word in words if len(word) == n]"},{"question":"Create a function that takes a list and returns a list with all unique elements preserving the original order of elements.Keep duplicates in order as usual but remove them when returned.","solution":"def unique_elements(lst): Returns a list with all unique elements preserving the original order of elements. Parameters: lst (list): The input list from which duplicates need to be removed. Returns: list: A list with unique elements in their original order. seen = set() unique_lst = [] for elem in lst: if elem not in seen: seen.add(elem) unique_lst.append(elem) return unique_lst"},{"question":"Create a function that takes an integer as input and returns the square root of the number. If the number is negative, the function should return a message indicating that the square root is not defined for negative numbers. Additionally, ensure that the function handles cases where the input is a non-positive integer (i.e., zero or negative integers).","solution":"import math def sqrt_integer(num): Returns the square root of the number if it is non-negative. If the number is negative, returns a message indicating that the square root is not defined. if num < 0: return \\"Square root is not defined for negative numbers\\" return math.sqrt(num)"},{"question":"Create a function that takes an integer n as an input and returns the sum of the squares of all even numbers from 1 to n inclusive. For example, if n is 10, the function should return the sum of the squares of 2, 4, 6, and 8, which is 120.","solution":"def sum_of_squares_of_even_numbers(n): Returns the sum of the squares of all even numbers from 1 to n inclusive. return sum(i**2 for i in range(2, n+1, 2))"},{"question":"Create a function that takes a string as input and returns a dictionary with each word as a key and its frequency as the value. Also, handle cases where the input string might be empty or null. Ensure that your function properly counts words so that consecutive spaces, leading and trailing spaces, and newlines are treated as separators. To make the function more efficient, consider using Python's built-in data structures and libraries.","solution":"import re from collections import defaultdict def word_frequency(s): Returns a dictionary with each word as a key and its frequency as the value. if not s: return {} # Use regular expressions to handle multiple spaces and newlines words = re.findall(r'bw+b', s.lower()) frequencies = defaultdict(int) for word in words: frequencies[word] += 1 return dict(frequencies)"},{"question":"Create a function that takes a list of integers as input and returns the missing number in the sequence. The sequence is expected to be a sorted list of consecutive integers starting from 1.","solution":"def find_missing_number(seq): Given a sorted list of consecutive integers starting from 1, returns the missing number in the sequence. n = len(seq) + 1 # including the missing number expected_sum = n * (n + 1) // 2 actual_sum = sum(seq) return expected_sum - actual_sum"},{"question":"Create a function that takes an array of integers as input and returns the sum of all positive numbers in the array, excluding any negative numbers. If the array is empty or contains only negative numbers, the function should return 0.","solution":"def sum_positive_numbers(arr): Returns the sum of all positive numbers in the array, excluding any negative numbers. If the array is empty or contains only negative numbers, the function returns 0. return sum(x for x in arr if x > 0)"},{"question":"Create a function that sums up all the numbers in a given list of integers. The function should be named \\"sum_numbers\\" and it should take one parameter: a list of integers. The function should return the total sum of all the numbers in the list.","solution":"def sum_numbers(numbers): Returns the sum of all numbers in the given list. :param numbers: List of integers to sum up :return: The sum of all integers in the list return sum(numbers)"},{"question":"Create a function that can handle a list of integers and return the total count of positive numbers in the list. You should also return the average of these positive numbers. If there are no positive numbers, return 0 for the average.","solution":"def count_and_average_positives(numbers): Returns the count of positive numbers in the list and their average. If there are no positive numbers, return 0 for the average. positives = [num for num in numbers if num > 0] count = len(positives) average = sum(positives) / count if count > 0 else 0 return count, average"},{"question":"Create a function that takes a single integer parameter and prints \\"Fizz\\" if the number is divisible by 3 and \\"Buzz\\" if the number is divisible by 5. If the number is divisible by both 3 and 5, print \\"FizzBuzz\\". Otherwise, print the number itself. Additionally, the function should handle exceptions for non-integer inputs.","solution":"def fizz_buzz(n): Prints \\"Fizz\\" if the number is divisible by 3, \\"Buzz\\" if the number is divisible by 5, \\"FizzBuzz\\" if the number is divisible by both 3 and 5, or the number itself if none of the above. Handles exceptions for non-integer inputs. try: if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n % 3 == 0 and n % 5 == 0: print(\\"FizzBuzz\\") elif n % 3 == 0: print(\\"Fizz\\") elif n % 5 == 0: print(\\"Buzz\\") else: print(n) except ValueError as e: print(e)"},{"question":"Create a function that identifies if a given string contains a valid sequence of balanced brackets (parentheses). The function should return True if the string is valid, and False otherwise.","solution":"def is_balanced_parentheses(s): Returns True if the parentheses in the string s are balanced, otherwise False. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that takes a string as input and returns the length of the string without using the built-in len() function.","solution":"def string_length(s): Returns the length of the string s without using the built-in len() function. count = 0 for char in s: count += 1 return count"},{"question":"Create a function that takes in a list of numbers and returns a list of only those numbers that appear three or more times in the input list.","solution":"def frequent_numbers(nums): Returns a list of numbers that appear three or more times in the input list. Args: nums (list): A list of numbers. Returns: list: A list of numbers that appear three or more times in the input list. from collections import Counter num_counts = Counter(nums) result = [num for num, count in num_counts.items() if count >= 3] return result"},{"question":"Create a function that takes a list of dictionaries and returns a list of tuples where each tuple contains the keys and values from a dictionary in the list. Ensure the function implementation is efficient in terms of time and space complexity.","solution":"def dicts_to_tuples(dict_list): Converts a list of dictionaries into a list of tuples where each tuple contains the keys and values from a dictionary. Args: dict_list (list): List of dictionaries to be converted. Returns: list: List of tuples containing keys and values from dictionaries. return [(k, v) for d in dict_list for k, v in d.items()]"},{"question":"Create a function that takes two integers \`a\` and \`b\` as input and returns the sum of all integers between \`a\` and \`b\`, inclusive. The function should handle both cases where \`a\` is less than or greater than \`b\`.","solution":"def sum_integers_between(a, b): Returns the sum of all integers between a and b, inclusive. The function handles both cases where a is less than or greater than b. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, as arguments and returns a new list that contains only the elements that are common in both \`list1\` and \`list2\`, preserving the order of the first occurrences in \`list1\`.","solution":"def common_elements(list1, list2): Returns a list containing only the elements that are common in both list1 and list2, preserving the order of their first occurrences in list1. set_list2 = set(list2) return [element for element in list1 if element in set_list2]"},{"question":"Create a function that takes a string as input and returns a new string with all the vowels in reversed order.","solution":"def reverse_vowels(s): Reverses the order of vowels in the input string and returns the modified string. Args: s (str): The input string. Returns: str: The string with vowels reversed. vowels = \\"aeiouAEIOU\\" s = list(s) i, j = 0, len(s) - 1 while i < j: if s[i] in vowels and s[j] in vowels: s[i], s[j] = s[j], s[i] i += 1 j -= 1 if s[i] not in vowels: i += 1 if s[j] not in vowels: j -= 1 return ''.join(s)"},{"question":"Create a function that receives a number and returns the product of its digits.","solution":"def product_of_digits(n): Returns the product of the digits of the given number n. product = 1 for digit in str(abs(n)): product *= int(digit) return product"},{"question":"Create a function that takes an integer as input and returns a string that is a reversed version of the integer, but only considering the digits of the integer. For example, if the input is 12345, the output should be \\"54321\\". However, if the input is -12345, the output should be \\"54321\\" as well, since we are only considering the digits.","solution":"def reverse_digits(n): This function takes an integer as input and returns a string that is a reversed version of the integer, considering only its digits. Args: n (int): The input integer. Returns: str: The reversed string of digits. # Convert the absolute value of the integer to a string, reverse it, and return. return str(abs(n))[::-1]"},{"question":"Create a function that takes three parameters: \`input_list\`, \`start_index\`, and \`end_index\`. The function should return the sum of elements from \`start_index\` to \`end_index\` in \`input_list\`. The function should handle cases where \`start_index\` is greater than \`end_index\` by raising a ValueError.","solution":"def sum_of_elements(input_list, start_index, end_index): Returns the sum of elements from \`start_index\` to \`end_index\` in \`input_list\`. Raises ValueError if \`start_index\` is greater than \`end_index\`. if start_index > end_index: raise ValueError(\\"start_index cannot be greater than end_index\\") return sum(input_list[start_index:end_index+1])"},{"question":"Create a function that takes a single argument, a string \`s\`, and returns the string in reverse order, but only for the characters that are alphabetic (a-z, A-Z). Non-alphabetic characters should remain in their original positions.","solution":"def reverse_alphabetic_only(s): Returns the string s in reverse order, but only for the alphabetic characters. Non-alphabetic characters remain in their original positions. # Collect all alphabetic characters alpha_chars = [c for c in s if c.isalpha()] # Reverse the collected alphabetic characters reversed_alpha_chars = reversed(alpha_chars) # Create an iterator for the reversed alphabetic characters reversed_alpha_iter = iter(reversed_alpha_chars) # Build the final string by replacing alphabetic characters with reversed ones result = ''.join(next(reversed_alpha_iter) if c.isalpha() else c for c in s) return result"},{"question":"Create a function that takes a list of strings and returns a list of the unique words in the input list, ignoring case sensitivity and punctuation. For example, given the list \`[\\"Hello, world!\\", \\"The world is great.\\", \\"Hello, everyone.\\"]\`, the function should return \`['hello', 'world', 'the', 'is', 'great', 'everyone']\`.","solution":"import string def get_unique_words(strings): Takes a list of strings and returns a list of the unique words, ignoring case sensitivity and punctuation. words = set() for s in strings: # Remove punctuation and convert to lower case s = s.translate(str.maketrans('', '', string.punctuation)).lower() for word in s.split(): words.add(word) return list(words)"},{"question":"Create a function that accepts a string as an argument and returns the length of the string. If the input string is \\"Programming is fun\\", what is the length of the string?","solution":"def string_length(s): Returns the length of the given string. return len(s)"},{"question":"Create a function that accepts an array of integers and returns the maximum sum of a continuous subarray using Kadane's algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a continuous subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes an integer \`n\` as an argument and returns the sum of the squares of the first \`n\` positive integers. For example, if \`n = 4\`, the function should return \`1^2 + 2^2 + 3^2 + 4^2 = 30\`.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n positive integers. :param n: int - Number of first positive integers to square and sum. :return: int - Sum of the squares of the first n positive integers. return sum(i ** 2 for i in range(1, n+1))"},{"question":"Create a function that takes an integer array and returns the majority element. The majority element is the element that appears more than n/2 times in the array, where n is the size of the array. If there is no majority element, the function should return -1. The function should be efficient in terms of both time and space complexity.","solution":"def majority_element(nums): Returns the majority element in the array. The majority element is the element that appears more than n/2 times in the array. If there is no majority element, returns -1. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) if nums.count(candidate) > len(nums) // 2: return candidate else: return -1"},{"question":"Create a function that prints the Fibonacci sequence up to the nth number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. For example, the first 10 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, and 34. Your function should take an integer \`n\` as input and print each number in the sequence up to the nth number. If \`n\` is less than or equal to 0, the function should print an error message.","solution":"def fibonacci(n): Prints the Fibonacci sequence up to the nth number. if n <= 0: print(\\"Error: Input should be a positive integer.\\") return sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b for num in sequence: print(num)"},{"question":"Create a function that checks if a rectangular garden can fit inside a square plot without rotating the garden. Given the size of the garden (width and height) and the size of the plot (side length), determine if the garden will fit. The garden can only fit if both its sides are less than or equal to the side length of the plot.","solution":"def can_fit_garden(garden_width, garden_height, plot_side): Checks if a rectangular garden can fit inside a square plot without rotating the garden. Parameters: - garden_width (float): The width of the garden. - garden_height (float): The height of the garden. - plot_side (float): The side length of the square plot. Returns: - bool: True if the garden fits inside the plot, otherwise False. return garden_width <= plot_side and garden_height <= plot_side"},{"question":"Create a function that implements the concept of reverse a string using two's complement integer.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, and returns the bitwise AND of two numbers.","solution":"def bitwise_and(a, b): Returns the bitwise AND of a and b. return a & b"},{"question":"Create a function that takes a list of words and return the longest word in it.","solution":"def longest_word(words): Returns the longest word in the list of words. If multiple words have the same length, returns the first one. if not words: return \\"\\" return max(words, key=len)"},{"question":"Create a function that takes a string and returns the longest consecutive repeating character in it. For example, if the input is \\"aabbbcc\\", the function should return 'b' because 'b' is repeated consecutively three times.","solution":"def longest_consecutive_repeating_char(s): Finds the longest consecutive repeating character in the string \`s\`. If there are multiple characters with the same longest length, it returns the first one. if not s: return \\"\\" max_count = 0 max_char = '' current_count = 1 current_char = s[0] for i in range(1, len(s)): if s[i] == current_char: current_count += 1 else: if current_count > max_count: max_count = current_count max_char = current_char current_char = s[i] current_count = 1 # Check the last sequence if current_count > max_count: max_char = current_char return max_char"},{"question":"Create a function that takes a list of integers as input and returns the sum of all the integers in the list. Your function should be named \`sum_of_integers\` and should not use any built-in Python functions for summing the list elements.","solution":"def sum_of_integers(int_list): Returns the sum of all the integers in the input list. total = 0 for num in int_list: total += num return total"},{"question":"Create a function that takes two lists of numbers as input and returns a list of the numbers that are popular (have more than one occurrence) in the first list but do not appear in the second. To solve this, please ensure you import any necessary packages before starting.","solution":"from collections import Counter def popular_not_in_second(list1, list2): Returns a list of numbers that are popular (more than one occurrence) in list1 but do not appear in list2. count1 = Counter(list1) result = [item for item in count1 if count1[item] > 1 and item not in list2] return result"},{"question":"Create a function that takes an integer \`n\` as input and returns a new function that multiplies any number by \`n\`.","solution":"def multiplier(n): Returns a function that multiplies any input by n. def multiply_by_n(x): return x * n return multiply_by_n"},{"question":"Create a function that takes in a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list.","solution":"def count_integers(lst): Takes in a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list. count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"Create a function that takes a nested dictionary as input and returns all keys that contain the substring 'user' at any level of nesting. The function should return these keys in a list.","solution":"def find_keys_with_substring_user(nested_dict): Finds all keys that contain the substring 'user' at any level of nesting in the input dictionary. :param nested_dict: The nested dictionary to search. :return: A list of keys containing the substring 'user'. result = [] def search_keys(d): for key, value in d.items(): if 'user' in key: result.append(key) if isinstance(value, dict): search_keys(value) search_keys(nested_dict) return result"},{"question":"Create a function that takes a list of numbers and returns their sum. You should then create another function that takes a list of numbers and returns their maximum value. Finally, create a function that takes a list of numbers and returns both the sum and the maximum value.","solution":"def sum_numbers(numbers): Returns the sum of the numbers in the list. return sum(numbers) def max_number(numbers): Returns the maximum number in the list. return max(numbers) def sum_and_max(numbers): Returns a tuple containing the sum and the maximum number in the list. return (sum_numbers(numbers), max_number(numbers))"},{"question":"Create a function that converts a given string to a snake case format.","solution":"import re def to_snake_case(s): Converts a given string to snake_case format. :param s: Input string :type s: str :return: String in snake_case format :rtype: str s = re.sub(r'([A-Z])', r' 1', s) s = s.replace('-', ' ').replace('.', ' ') s = '_'.join(s.split()).lower() return s"},{"question":"Create a function that calculates the factorial of a given number n. The function should handle large numbers and return the result as a string. The factorial of a number is the product of all positive integers less than or equal to that number.","solution":"def factorial(n): Returns the factorial of a given number n as a string. if n == 0: return '1' result = 1 for i in range(2, n + 1): result *= i return str(result)"},{"question":"Create a function that accepts two arguments, a string and an integer. The function should return a new string which is the result of repeating the original string the specified number of times.","solution":"def repeat_string(s, n): Returns a new string which is the result of repeating the original string s, n times. Args: s (str): The string to be repeated. n (int): The number of times to repeat the string. Returns: str: The new repeated string. return s * n"},{"question":"Create a function that takes any number of integer arguments and returns the sum of all the even numbers among them.","solution":"def sum_of_even_numbers(*args): Returns the sum of all even numbers among the given arguments. return sum(x for x in args if x % 2 == 0)"},{"question":"Create a function that takes a string as input and returns the string with the first letter of each word capitalized. Write a solution in Python that handles both uppercase and lowercase input.","solution":"def capitalize_first_letter(s): Returns the string with the first letter of each word capitalized. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that generates a Fibonacci sequence up to a given number n and then sums all the elements in the sequence. For example, the function should return 44 for \`fibonacci_sum(10)\`, since the Fibonacci sequence up to 10 is 0, 1, 1, 2, 3, 5, 8, and the sum is 20.","solution":"def fibonacci_sum(n): Generates a Fibonacci sequence up to a given number n and returns the sum of all elements in the sequence. Parameters: n (int): The upper limit for the Fibonacci sequence. Returns: int: The sum of all Fibonacci numbers up to n. if n < 0: return 0 fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return sum(fib_sequence)"},{"question":"Create a function that generates Fibonacci numbers and yields them one at a time. How can you implement this in Python using generators? What is a generator in Python?","solution":"def fibonacci(): A generator function that yields Fibonacci numbers indefinitely. a, b = 0, 1 while True: yield a a, b = b, a + b"},{"question":"Create a function that takes two string parameters and returns True if the first string is a rotation of the second string, otherwise returns False. A string rotation is when you take a string and rotate it cyclically by removing some prefix and appending it to the end. For example, \\"rotation\\" can be rotated to \\"otationr\\" by removing the prefix \\"rot\\" and appending it to the end.","solution":"def is_rotation(s1, s2): Check if s1 is a rotation of s2. A string s1 is a rotation of s2 if and only if s1 is a substring of s2 concatenated with s2. Args: s1 (str): First string s2 (str): Second string Returns: bool: True if s1 is a rotation of s2, False otherwise if len(s1) != len(s2): return False return s1 in s2 + s2"},{"question":"Create a function that calculates the sum of two numbers passed as parameters in Python.","solution":"def sum_two_numbers(a, b): Returns the sum of two numbers a and b. return a + b"},{"question":"Create a function that generates a combination of uppercase letters, lowercase letters, digits, and special characters of given lengths. The function should take in the desired lengths for uppercase letters, lowercase letters, digits, and special characters and then return a random combination of these characters.","solution":"import random import string def generate_combination(upper_len, lower_len, digit_len, special_len): Generates a random combination of uppercase letters, lowercase letters, digits, and special characters with the given lengths. Parameters: upper_len (int): Number of uppercase letters. lower_len (int): Number of lowercase letters. digit_len (int): Number of digits. special_len (int): Number of special characters. Returns: str: A random combination of the specified characters. upper = ''.join(random.choices(string.ascii_uppercase, k=upper_len)) lower = ''.join(random.choices(string.ascii_lowercase, k=lower_len)) digits = ''.join(random.choices(string.digits, k=digit_len)) specials = ''.join(random.choices(string.punctuation, k=special_len)) combination = upper + lower + digits + specials combination_list = list(combination) random.shuffle(combination_list) return ''.join(combination_list)"},{"question":"Create a function that takes in two parameters \`a\` and \`b\`. The function should return the sum of the squares of the two numbers.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. return a**2 + b**2"},{"question":"Create a function that generates a random string of 10 characters comprising uppercase and lowercase letters along with digits. How can I achieve this in Python?","solution":"import random import string def generate_random_string(): Generates a random string of 10 characters comprising uppercase and lowercase letters along with digits. characters = string.ascii_letters + string.digits random_string = ''.join(random.choice(characters) for i in range(10)) return random_string"},{"question":"Create a function that calculates the nth root of a given number using the Newton-Raphson method. The function should be named \`calculate_nth_root\` and take two parameters: \`number\` (the number whose nth root needs to be calculated) and \`n\` (the degree of the root).","solution":"def calculate_nth_root(number, n, tolerance=1e-10): Calculates the nth root of a given number using the Newton-Raphson method. Parameters: number (float): The number whose nth root needs to be calculated. n (int): The degree of the root. tolerance (float, optional): The tolerance for convergence of the method. Default is 1e-10. Returns: float: The nth root of the number. # Initial guess x = number / n # Newton-Raphson method while True: # Calculate the next guess x_next = (1 / n) * ((n - 1) * x + number / (x**(n - 1))) # Check for convergence if abs(x - x_next) < tolerance: return x_next # Update current guess x = x_next"},{"question":"Create a function that takes in an image and converts it to grayscale.","solution":"from PIL import Image def convert_to_grayscale(image_path, output_path): Converts an image to grayscale and saves it to the specified output path. :param image_path: Path to the input image. :param output_path: Path where the grayscale image will be saved. with Image.open(image_path) as img: grayscale_img = img.convert(\\"L\\") grayscale_img.save(output_path)"},{"question":"Create a function that generates a list of all prime numbers up to a given number n.","solution":"def generate_primes(n): Generates a list of all prime numbers up to a given number n. :param int n: The upper limit (inclusive) for generating prime numbers. :return: A list of prime numbers up to n. :rtype: list if n < 2: return [] sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start * start, n + 1, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that takes two integers as input and returns their greatest common divisor (GCD). You should use the Euclidean algorithm to find the GCD. The function should be efficient and work for large numbers.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Create a function that takes in a string and returns a reversed version of that string. Implement this function in Python.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that accepts an input of an integer array and returns an array of dictionaries, where each dictionary represents an object with numerical properties formed from the elements of the input array.","solution":"def convert_to_dict_array(input_array): Converts an input integer array to an array of dictionaries. Each dictionary represents an object with a single \\"value\\" key set to the array element value. return [{\\"value\\": num} for num in input_array]"},{"question":"Create a function that accepts a string as input and returns a dictionary where the keys are the distinct characters in the string (excluding case), and the values are their corresponding ASCII values.","solution":"def string_to_ascii_dict(input_str): Accepts a string as input and returns a dictionary where the keys are the distinct characters in the string (excluding case), and the values are their corresponding ASCII values. result = {} # Convert string to lowercase and remove duplicate characters for char in set(input_str.lower()): result[char] = ord(char) return result"},{"question":"Create a function that filters out numbers from a list based on whether they are divisible by a specified divisor or not.","solution":"def filter_divisibles(numbers, divisor): Filters out numbers from the list that are divisible by the specified divisor. Parameters: numbers (list): List of integers to be filtered. divisor (int): The divisor used to filter numbers. Returns: list: List of numbers that are divisible by the divisor. return [num for num in numbers if num % divisor == 0]"},{"question":"Create a function that takes an array of integers and returns a copy of the array with all negative numbers removed.","solution":"def remove_negatives(array): Returns a copy of the array with all negative numbers removed. Parameters: array (list): A list of integers. Returns: list: A list of integers with no negative numbers. return [num for num in array if num >= 0]"},{"question":"Create a function that takes two strings as input and returns the longest common subsequence (LCS) of the two strings. A subsequence is a sequence that appears in the same relative order but not necessarily contiguous. For example, \\"ace\\" is a subsequence of \\"abcde\\". Write the function and then explain how it works.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence (LCS) of two input strings. m, n = len(str1), len(str2) # Create a 2D list (matrix) to store lengths of LCS # dp[i][j] will be the length of LCS of str1[0..i-1] and str2[0..j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp matrix in bottom-up fashion for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # Following code is used to construct LCS index = dp[m][n] # Create a list to store LCS lcs = [''] * (index + 1) lcs[index] = '' # Start from the right-most-bottom-most corner and one by one store characters in lcs[] i, j = m, n while i > 0 and j > 0: if str1[i-1] == str2[j-1]: lcs[index-1] = str1[i-1] i -= 1 j -= 1 index -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 return ''.join(lcs)"},{"question":"Create a function that gets the filename from a full path (\`foo/bar/baz/quux.txt\`). The function should return only the filename part (\`quux.txt\`).","solution":"import os def get_filename_from_path(path): Returns the filename from a full path. Args: path (str): The full path from which to extract the filename. Returns: str: The filename extracted from the full path. return os.path.basename(path)"},{"question":"Create a function that checks if a number is a perfect square. The function should take an integer as input and return \`True\` if the number is a perfect square, otherwise \`False\`. For example, it should return \`True\` for 16 (since 4 * 4 = 16) and \`False\` for 14 (since there is no integer that when squared equals 14).","solution":"import math def is_perfect_square(n): Checks if n is a perfect square. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False root = int(math.sqrt(n)) return root * root == n"},{"question":"Create a function that accepts two arguments, a string and an integer n, and returns the string with the n-th character replaced by its reverse. The first character is considered to be at position 1 (not position 0). If n is negative, replace the character from the end of the string. For example, replace_char(\\"hello\\", 2) returns \\"holle\\", and replace_char(\\"world\\", -2) should return \\"worlD\\".","solution":"def replace_char(s, n): Replaces the n-th character of the string \`s\` with its reverse (upper->lower or lower->upper). Parameters: s (str): The input string. n (int): The position of the character to replace. Positive for forward indexing, negative for backward indexing. Returns: str: The modified string. if not s or abs(n) > len(s): return s # Return the unchanged string if index is out of range or string is empty index = n - 1 if n > 0 else len(s) + n char_to_replace = s[index] if char_to_replace.islower(): new_char = char_to_replace.upper() else: new_char = char_to_replace.lower() return s[:index] + new_char + s[index + 1:]"},{"question":"Create a function that capitalizes the first letter of a string and makes all other letters lowercase.","solution":"def capitalize_first_letter(s): Capitalizes the first letter of a string and makes all other letters lowercase. Parameters: s (str): The input string. Returns: str: The modified string with the first letter capitalized and other letters in lowercase. if not s: return s return s[0].upper() + s[1:].lower()"},{"question":"Create a function that can read from and write to a JSON file.","solution":"import json def read_json(file_path): Reads a JSON file and returns the data. Args: file_path (str): The path to the JSON file. Returns: dict: The data from the JSON file. with open(file_path, 'r') as file: data = json.load(file) return data def write_json(file_path, data): Writes data to a JSON file. Args: file_path (str): The path to the JSON file. data (dict): The data to write to the JSON file. with open(file_path, 'w') as file: json.dump(data, file, indent=4)"},{"question":"Create a function that takes an array of numbers and returns the maximum sum of a non-empty subarray of numbers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a non-empty subarray. Uses Kadane's Algorithm for an O(n) solution. if not nums: raise ValueError(\\"Input array should not be empty.\\") max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a string of characters and returns the count of vowels in the string. However, the count should be case-insensitive, i.e., count both uppercase and lowercase vowels. The task should be completed without using Python's built-in functions for counting or case conversion.","solution":"def count_vowels(s): Returns the count of vowels (both uppercase and lowercase) in the input string s. vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Create a function that identifies whether a given string is a palindrome or not without considering spaces, punctuation, and capitalization. A palindrome is a sequence of characters which reads the same backward as forward, such as 'madam' or 'racecar'.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, ignoring spaces, punctuation, and capitalization. import string s = s.lower() s = ''.join(char for char in s if char in string.ascii_lowercase) return s == s[::-1]"},{"question":"Create a function that takes an array of strings as input and returns the string with the smallest length in the array. If there are multiple strings with the same smallest length, return the first one encountered in the array.","solution":"def smallest_string(strings_list): Returns the string with the smallest length in the array strings_list. If there are multiple strings with the same smallest length, returns the first one encountered. :param strings_list: List of strings :return: String with the smallest length if not strings_list: return \\"\\" smallest = strings_list[0] for string in strings_list: if len(string) < len(smallest): smallest = string return smallest"},{"question":"Create a function that takes a list of integers as input and returns the sum of all the even numbers in the list. How can this be done using a loop and conditional statements?","solution":"def sum_of_even_numbers(numbers): Returns the sum of all the even numbers in the given list. total = 0 for number in numbers: if number % 2 == 0: total += number return total"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the first \`n\` odd numbers.","solution":"def sum_of_first_n_odd_numbers(n): Returns the sum of the first n odd numbers. return n * n"},{"question":"Create a function that takes a string and returns a dictionary where the keys are the unique characters in the string and the values are the number of times each character appears. Implement this function using Python.","solution":"def char_count(s): Returns a dictionary where the keys are the unique characters in the string and the values are the number of times each character appears. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Create a function that takes in an array of integers and returns the second largest number in the array. If the array has less than two unique numbers, return -1.","solution":"def second_largest(nums): Returns the second largest number in the array. If the array has less than two unique numbers, returns -1. if len(nums) < 2: return -1 unique_nums = list(set(nums)) # Remove duplicates if len(unique_nums) < 2: return -1 unique_nums.sort(reverse=True) # Sort in descending order return unique_nums[1] # Return second largest"},{"question":"Create a function that takes an array of integers and returns an array of its largest and smallest elements.","solution":"def find_largest_and_smallest(arr): Returns a list containing the largest and smallest elements from the given array. Parameters: arr (list): A list of integers. Returns: list: A list containing the smallest and largest elements of the input list. if not arr: return [None, None] largest = max(arr) smallest = min(arr) return [smallest, largest]"},{"question":"Create a function that takes an array as an input and returns the frequency of each element in the array. The function should create a dictionary with the elements as keys and their occurrence count as values.","solution":"def element_frequency(arr): Returns a dictionary with the frequency of each element in the array. Parameters: arr (list): The input array. Returns: dict: A dictionary with elements as keys and their counts as values. frequency_dict = {} for element in arr: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 return frequency_dict"},{"question":"Create a function that converts a string to its hexadecimal representation and then append a specific string (\\"Converted: \\") to the front of the hexadecimal string.","solution":"def string_to_hex_with_prefix(s): Converts a string to its hexadecimal representation and appends 'Converted: ' to the front. Parameters: s (str): The input string to convert. Returns: str: A string in the format 'Converted: ' followed by the hexadecimal representation of the input string. hex_string = ''.join(format(ord(char), '02x') for char in s) return f\\"Converted: {hex_string}\\""},{"question":"Create a function that generates and returns a list of prime numbers up to a given number \`n\`.","solution":"def generate_primes(n): Returns a list of prime numbers up to the given number n (inclusive). if n < 2: return [] primes = [True] * (n + 1) p = 2 primes[0] = primes[1] = False # 0 and 1 are not prime numbers while (p * p <= n): if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 return [p for p in range(2, n + 1) if primes[p]]"},{"question":"Create a function that takes a list of strings as an input and returns a string that is the concatenation of all the capitalized words in the list.","solution":"def concatenate_capitalized_words(words): Takes a list of strings and returns a concatenated string of all capitalized words in the list. Args: words (list): A list of strings. Returns: str: A concatenated string of all capitalized words. return ''.join(word for word in words if word.istitle())"},{"question":"Create a function that takes a list of integers and returns the sum of the squares of all the positive numbers in the list.","solution":"def sum_of_squares_of_positive_numbers(numbers): Returns the sum of the squares of all the positive numbers in the list. :param numbers: List of integers :return: Sum of squares of positive integers return sum(x ** 2 if x > 0 else 0 for x in numbers)"},{"question":"Create a function that takes an array of integers, \`arr\`, and a single integer value \`value\`, and returns a new array where all occurrences of \`value\` in the original array are replaced with 0.","solution":"def replace_value(arr, value): Replaces all occurrences of 'value' in 'arr' with 0 and returns the modified array. Parameters: arr (list of int): The input array of integers. value (int): The integer value to be replaced with 0. Returns: list of int: The modified array with 'value' replaced by 0. return [0 if x == value else x for x in arr]"},{"question":"Create a function that takes an array of integers as input and returns the maximum product of any two distinct elements in the array. The function should handle cases where the array contains both positive and negative numbers, and should consider the scenario where the maximum product is obtained by multiplying the two smallest negative numbers.","solution":"def max_product_of_two(arr): Returns the maximum product of any two distinct elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") max1 = max2 = float('-inf') min1 = min2 = float('inf') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Create a function that takes in the size of an array and returns an array of integers from 0 to the given size, inclusively. If no size is provided, the function should return an array from 0 to 9.","solution":"def create_array(size=9): Returns an array of integers from 0 to the given size, inclusively. If no size is provided, returns an array from 0 to 9. return list(range(size + 1))"},{"question":"Create a function that takes an integer as input and returns a boolean value that corresponds to whether or not that integer is a perfect square.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False root = int(math.isqrt(n)) return root * root == n"},{"question":"Create a function that swaps the second and third characters of a given string. If the string is less than 3 characters long, the function should return the original string without any modifications.","solution":"def swap_second_and_third_characters(s): Swaps the second and third characters in the input string \`s\`. If \`s\` is less than 3 characters long, returns the original string. if len(s) < 3: return s return s[0] + s[2] + s[1] + s[3:]"},{"question":"Create a function that takes in a user's age and returns their age in days. Assume there are 365 days in a year for simplicity.","solution":"def age_in_days(age): Converts age in years to age in days. Args: age (int): The age in years. Returns: int: The age in days. return age * 365"},{"question":"Create a function that takes a list of integers and returns the minimum and maximum values as a tuple. If the list is empty, the function should return None.","solution":"def min_and_max(values): Returns a tuple of the minimum and maximum values in the list 'values'. If the list is empty, returns None. if not values: return None return (min(values), max(values))"},{"question":"Create a function that takes an integer as a parameter and returns the sum of all numbers between 1 to that number (inclusive). This function should only use iteration not recursion. How would you write this function in Python?","solution":"def sum_numbers(n): Returns the sum of all numbers from 1 to n (inclusive). total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Create a function that calculates the sum of an array of integers. The function should be named \`sumArray\` and take a single parameter \`numbers\`, which is an array of integers. The function should return the sum of all the integers in the array.","solution":"def sumArray(numbers): Returns the sum of all integers in the array \`numbers\`. return sum(numbers)"},{"question":"Create a function that accepts an array of integers. The function should return the sum of all integers in the array. However, if the array contains any negative numbers, your function should return \\"Invalid array\\".","solution":"def sum_array(arr): Returns the sum of all integers in the array. If the array contains any negative numbers, returns \\"Invalid array\\". if any(x < 0 for x in arr): return \\"Invalid array\\" return sum(arr)"},{"question":"Create a function that takes in a list of tuples and returns a new list containing only the tuples where all elements are even numbers.","solution":"def filter_even_tuples(lst): Returns a list of tuples where all elements in each tuple are even numbers. Parameters: lst (list): List of tuples containing integers. Returns: list: List of tuples with all elements being even numbers. return [tup for tup in lst if all(element % 2 == 0 for element in tup)]"},{"question":"Create a function that takes a list of integers and returns a list where each element is the square of the original element. If the original element is negative, raise an exception. The function should also return the count of squared elements.","solution":"def square_list(nums): Takes a list of integers and returns a list where each element is the square of the original element. If the original element is negative, raises an exception. Args: nums (list): List of integers. Returns: tuple: A tuple containing the list of squared numbers and the count of squared elements. squared_nums = [] for num in nums: if num < 0: raise ValueError(\\"Negative integers are not allowed\\") squared_nums.append(num ** 2) return squared_nums, len(squared_nums)"},{"question":"Create a function that calculates the factorial of a given number in Python, with proper usage of exception handling.","solution":"def factorial(n): Calculates the factorial of a given number n. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that finds the length of the longest palindromic substring in a given string 's'. A palindromic substring is a sequence of characters that reads the same backward as forward. For example, \\"radar\\" is a palindromic substring because it reads the same both ways. The function should return the length of this substring.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n == 0: return 0 longest = 1 def expand_around_center(left, right): nonlocal longest while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > longest: longest = current_length left -= 1 right += 1 for i in range(n): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i + 1) # Even length palindromes return longest"},{"question":"Create a function that takes in two integers as parameters: the 'first_num' and the 'second_num'. The function should calculate the area of a rectangle with the given dimensions. If the dimensions are not positive integers, the function should return -1. Otherwise, return the area of the rectangle.","solution":"def calculate_rectangle_area(first_num, second_num): This function returns the area of a rectangle given its two dimensions: first_num and second_num. If either dimension is not a positive integer, it returns -1. if not(isinstance(first_num, int) and isinstance(second_num, int)) or first_num <= 0 or second_num <= 0: return -1 return first_num * second_num"},{"question":"Create a function that generates and returns a custom Fibonacci sequence up to a given length. The sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. The function should be named \`custom_fibonacci_sequence\`.","solution":"def custom_fibonacci_sequence(length): Generates and returns a custom Fibonacci sequence up to the given length. The sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. :param length: The length of the Fibonacci sequence to generate. :return: A list representing the Fibonacci sequence up to the given length. if length <= 0: return [] elif length == 1: return [0] elif length == 2: return [0, 1] sequence = [0, 1] while len(sequence) < length: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that takes a sorted array of integers and a target integer as input and returns the index of the target in the array if it's present. Otherwise, return -1.","solution":"def binary_search(arr, target): Uses binary search to find the index of the target in the sorted array. Returns the index of the target if found, otherwise returns -1. :param arr: List of sorted integers :param target: Integer to be found :return: Index of target in array if present, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that calculates the total cost of items in a store, given the prices of individual items and the quantities of each item. The function should return the total cost as a floating-point number. If any of the prices or quantities are not provided, they should be treated as zero.","solution":"def total_cost(prices, quantities): Calculates the total cost of items given their prices and quantities. :param prices: list of prices of items :param quantities: list of quantities of items :return: total cost as a float if prices is None: prices = [] if quantities is None: quantities = [] total = 0.0 for price, quantity in zip(prices, quantities): total += price * quantity return total"},{"question":"Create a function that finds the maximum value in a given list of numbers. If the list is empty, return None. Additionally, the function should handle exceptions gracefully and return None if an error occurs during the process.","solution":"def find_maximum(numbers): Returns the maximum value in a given list of numbers. If the list is empty or an error occurs, returns None. try: if not numbers: return None return max(numbers) except Exception: return None"},{"question":"Create a function that takes in a dictionary with the elements as employees in an organization and their respective job titles. The function should ensure that there are no duplicate job titles and return the dictionary if valid. If duplicate job titles are found, the function should return an error message.","solution":"def validate_employees(employees): Validate if the dictionary of employees has unique job titles. Args: employees (dict): A dictionary where keys are employee names and values are job titles. Returns: dict or str: The original dictionary if job titles are unique, otherwise an error message string. job_titles = list(employees.values()) if len(job_titles) != len(set(job_titles)): return \\"Error: Duplicate job titles found.\\" return employees"},{"question":"Create a function that takes a string and prints it in Pascal case (also known as Title Case): where the first letter of each word is uppercase and the rest of the letters are lowercase. For example, if given the string \\"hello world\\", the function should print \\"Hello World\\".","solution":"def to_pascal_case(s): Converts a string to Pascal case (Title Case), where the first letter of each word is uppercase and the rest are lowercase. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that calculates the sum of all even numbers between two given numbers (inclusive). For instance, if the inputs are 2 and 8, the function should return 20 (2 + 4 + 6 + 8 = 20).","solution":"def sum_even_numbers(a, b): Returns the sum of all even numbers between a and b (inclusive). if a > b: a, b = b, a return sum(x for x in range(a, b+1) if x % 2 == 0)"},{"question":"Create a function that takes a list of tuples as a parameter. Each tuple contains two integers and a string. The function should concatenate the string with an integer value of a tuple. For example, if the tuple is (3, \\"hello\\"), the function should return \\"hello3\\".","solution":"def concatenate_tuple_elements(tuples_list): Takes a list of tuples, each containing an integer and a string. Returns a list where each string is concatenated with the integer value. return [f\\"{string}{integer}\\" for integer, string in tuples_list]"},{"question":"Create a function that takes a string and converts it to spinal case. Spinal case is a type of casing in strings that uses lowercase letters with dashes to separate words. The function should handle various cases, including strings containing spaces, capital letters, and punctuation.","solution":"import re def to_spinal_case(s): Converts a string to spinal case. Parameters: s (str): The input string. Returns: str: The converted spinal case string. # Replace spaces or underscores with dashes s = re.sub(r'[s_]+', '-', s) # Replace camelCase with dash-separated words s = re.sub(r'([a-z])([A-Z])', r'1-2', s) # Convert the entire string to lowercase s = s.lower() # Remove punctuation and any remaining multiple dashes s = re.sub(r'[^w-]', '', s) return s"},{"question":"Create a function that prints out the Fibonacci sequence up to a given number 'n'.","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to the number 'n'. Args: n (int): The upper bound of the sequence to be printed. if n <= 0: print([]) return [] sequence = [0] next_value = 1 while next_value <= n: sequence.append(next_value) next_value = sequence[-1] + sequence[-2] print(sequence) return sequence"},{"question":"Create a function that takes two parameters, a matrix (list of lists) and a list of coordinates, then returns the sum of all the values at the given coordinates. If a coordinate is out of bounds, ignore it and continue summing the valid coordinates.","solution":"def sum_at_coordinates(matrix, coordinates): Returns the sum of all values at the given coordinates in the matrix. If a coordinate is out of bounds, it is ignored. Parameters: matrix (list of lists): A 2D list representing the matrix. coordinates (list of tuples): A list of (row, column) tuples. Returns: int: The sum of all values at the given coordinates. total_sum = 0 rows = len(matrix) if rows == 0: return total_sum # Return 0 if the matrix is empty cols = len(matrix[0]) for (row, col) in coordinates: if 0 <= row < rows and 0 <= col < cols: total_sum += matrix[row][col] return total_sum"},{"question":"Create a function that takes a string as input and returns a list of words.","solution":"def string_to_words(input_string): Takes a string as input and returns a list of words. Args: input_string (str): The input string Returns: list: A list containing words from the input string return input_string.split()"},{"question":"Create a function that takes in a list of words and returns a new list of words with the first letter capitalized and the rest in lowercase. For example, \`capitalize_words(['apple', 'banana', 'cherry'])\` should return \`['Apple', 'Banana', 'Cherry']\`.","solution":"def capitalize_words(words): Takes in a list of words and returns a new list of words with the first letter capitalized and the rest in lowercase. return [word.capitalize() for word in words]"},{"question":"Create a function that returns the smallest's absolute sum of a ^ b for a, b ranging from 1 to 10.","solution":"def smallest_abs_sum(): Returns the smallest absolute sum of a^b for a, b ranging from 1 to 10. min_sum = float('inf') for a in range(1, 11): for b in range(1, 11): abs_sum = abs(a ** b) if abs_sum < min_sum: min_sum = abs_sum return min_sum"},{"question":"Create a function that takes a string as input and prints the occurrences of each character in the string. The function should ignore the case and consider spaces and punctuation.","solution":"def count_characters(s): Counts and prints the occurrences of each character in the string \`s\`. The function ignores case and considers spaces and punctuation. :param s: input string s = s.lower() character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 return character_count"},{"question":"Create a function that takes an integer as input and returns a list of its prime factors. Prime factors are the prime numbers that divide the input number exactly. Your function should return the prime factors in ascending order. If the input number is less than 2, return an empty list.","solution":"def prime_factors(n): Returns the list of prime factors of n in ascending order. if n < 2: return [] factors = [] factor = 2 while n >= factor ** 2: if n % factor == 0: factors.append(factor) n //= factor else: factor += 1 if n > 1: # for the remaining prime factor which is n itself if it is greater than 1 factors.append(n) return factors"},{"question":"Create a function that takes a positive integer n and returns the sum of the squares of its digits. For example, if n = 123, the function should return 1^2 + 2^2 + 3^2 = 14.","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of a positive integer n. return sum(int(digit) ** 2 for digit in str(n))"},{"question":"Create a function that takes in two parameters, n and m. The function should return the sum of all numbers from n to m where n is always less than or equal to m.","solution":"def sum_range(n, m): Returns the sum of all numbers from n to m inclusive. return sum(range(n, m + 1))"},{"question":"Create a function that takes a string as input and returns a new string with each character's ASCII value increased by 1. For example, if the input is \\"hello\\", the output should be \\"ifmmp\\".","solution":"def increase_ascii_by_one(s): Takes a string as input and returns a new string with each character's ASCII value increased by 1. return ''.join(chr(ord(char) + 1) for char in s)"},{"question":"Create a function that searches for the minimum value in an unsorted array. What is the Big O notation for this function?","solution":"def find_minimum(arr): Returns the minimum value in an unsorted array. if not arr: raise ValueError(\\"Array is empty\\") minimum = arr[0] for value in arr: if value < minimum: minimum = value return minimum # The Big O notation for this function is O(n) where n is the number of elements in the array. # This is because the function iterates through all the elements of the array once to find the minimum value."},{"question":"Create a function that takes two parameters, an integer and a string, and returns a dictionary. The dictionary should have the integer as a key and the string as a value.","solution":"def create_dict(integer, string): Creates a dictionary with the given integer as a key and the string as a value. :param integer: int, the key of the dictionary :param string: str, the value of the dictionary :return: dict, dictionary with the given integer as key and string as value return {integer: string}"},{"question":"Create a function that takes in an array of integers and returns the maximum sum of a contiguous subarray within the array. You can use Kadane's algorithm to solve this problem, which involves iterating through the array and keeping track of the maximum sum of the subarray found so far. The function should also return the starting and ending indices of the subarray that gives this maximum sum.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the array and the starting and ending indices of that subarray. Parameters: arr (list): List of integers. Returns: tuple: A tuple containing the maximum subarray sum, the starting index, and the ending index. max_ending_here = max_so_far = arr[0] start = end = s = 0 for i in range(1, len(arr)): if arr[i] > max_ending_here + arr[i]: max_ending_here = arr[i] s = i else: max_ending_here += arr[i] if max_ending_here > max_so_far: max_so_far = max_ending_here start = s end = i return (max_so_far, start, end)"},{"question":"Create a function that calculates the sum of the first \`n\` natural numbers. Write this in Python and ensure the function handles edge cases and exceptions properly.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number of terms to be summed. Returns: int: The sum of the first n natural numbers if n is a positive integer. Otherwise, raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 1: raise ValueError(\\"Input must be a positive integer.\\") return n * (n + 1) / 2"},{"question":"Create a function that takes an integer \`n\` and a list \`arr\` as input, and returns a new list containing every \`n\`-th element from the original list \`arr\`. If \`n\` is less than or equal to zero, the function should return an empty list.","solution":"def get_nth_elements(n, arr): Returns a list containing every n-th element from the original list arr. If n is less than or equal to 0, returns an empty list. if n <= 0: return [] return arr[n-1::n]"},{"question":"Create a function that takes an array as an input and splits it into parts of arbitrary given size. If an array is 87 elements long, and if I ask to split it into arrays of sizes 5, 15, and 2, each resulting array should contain 5, 15, and 2 elements respectively, and the split arrays should be in the same order as the given sizes. Can you provide a Python solution for this problem?","solution":"def split_array(arr, sizes): Splits an array into parts defined by sizes. :param arr: List of elements to be split :param sizes: List of integers defining the sizes of the parts :return: List of subarrays of defined sizes result = [] index = 0 for size in sizes: if index + size <= len(arr): result.append(arr[index:index + size]) index += size else: raise ValueError(\\"Insufficient elements in the array to split as per the provided sizes\\") return result"},{"question":"Create a function that evaluates a boolean expression given as a string. The expression is given in Reverse Polish Notation (RPN) format. For example, the expression \\"3 4 + 5 *\\" should return 25. The function should support the following operators: \\"+\\", \\"-\\", \\"*\\", and \\"/\\". Assume that all numbers and operators are valid and that the expression is well-formed and balanced.","solution":"def eval_rpn(expression): Evaluates a boolean expression given in Reverse Polish Notation (RPN) format. Args: expression (str): The RPN expression as a string. Returns: float: The result of evaluating the RPN expression. stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == '+': result = a + b elif token == '-': result = a - b elif token == '*': result = a * b elif token == '/': result = a / b stack.append(result) else: stack.append(float(token)) return stack[0]"},{"question":"Create a function that takes a list of integers and returns a new list containing the squares of even numbers from the original list, sorted in ascending order.","solution":"def square_and_sort_evens(numbers): Returns a new list containing the squares of even numbers from the original list, sorted in ascending order. :param numbers: List of integers :return: List of squared even numbers sorted in ascending order even_squares = [num ** 2 for num in numbers if num % 2 == 0] return sorted(even_squares)"},{"question":"Create a function that takes a list of integers and a divisor, and return the count of numbers divisible by the given divisor.","solution":"def count_divisibles(numbers, divisor): Returns the count of numbers in the list that are divisible by the given divisor. :param numbers: List of integers :param divisor: Integer divisor :return: Integer count of numbers divisible by divisor if divisor == 0: raise ValueError(\\"Divisor cannot be zero.\\") count = 0 for num in numbers: if num % divisor == 0: count += 1 return count"},{"question":"Create a function that takes in two numbers and returns the result of multiplying them together. The function should also handle cases where one or both of the numbers are floating-point numbers. Additionally, the function should return a boolean value indicating whether the product is even or odd.","solution":"def multiply_and_check_even_odd(a, b): Returns a tuple where the first element is the product of a and b, and the second element is a boolean indicating if the product is even (True) or odd (False). product = a * b is_even = (int(product) % 2 == 0) return (product, is_even)"},{"question":"Create a function that takes two strings, both of equal length, and outputs a new string consisting of the characters from the two input strings alternated. If the input strings are of different lengths, return an error message.","solution":"def alternate_strings(str1, str2): Returns a new string consisting of characters from str1 and str2 alternated. If str1 and str2 are of different lengths, returns an error message. if len(str1) != len(str2): return \\"Error: Strings must be of equal length\\" result = \\"\\".join(a + b for a, b in zip(str1, str2)) return result"},{"question":"Create a function that takes a string of space-separated integers as input and returns the sum of the odd numbers located at even indices in the list.","solution":"def sum_odd_numbers_at_even_indices(s): Returns the sum of the odd numbers located at even indices in the list. Parameters: s (str): A string of space-separated integers. Returns: int: The sum of the odd numbers at even indices. numbers = list(map(int, s.split())) return sum(num for i, num in enumerate(numbers) if i % 2 == 0 and num % 2 != 0)"},{"question":"Create a function that takes a string as an input and returns the string reversed, but only if the string contains alphanumeric characters. If the string does not contain any alphanumeric characters, the function should return the original string.","solution":"def reverse_if_alphanumeric(s): Returns the reversed string if it contains alphanumeric characters. If the string does not contain any alphanumeric characters, returns the original string. Args: s (str): The input string. Returns: str: The reversed string if it contains alphanumeric characters, otherwise the original string. # Check if the string contains any alphanumeric characters if any(char.isalnum() for char in s): return s[::-1] else: return s"},{"question":"Create a function that calculates the factorial of a number using recursion in Python. The function should handle large integers without using the built-in factorial function from the math library.","solution":"def factorial(n): Returns the factorial of a number using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that calculates the total cost of an item after tax, considering different tax rates depending on the item's category. Given a list of tuples where each tuple contains the item's name, category, and price, and a dictionary mapping each category to its corresponding tax rate, write the function calculate_total_cost.","solution":"def calculate_total_cost(items, tax_rates): Calculate the total cost of items after tax. :param items: List of tuples where each tuple contains (item_name, category, price) :param tax_rates: Dictionary mapping each category to its corresponding tax rate (as a decimal) :return: Total cost of all items after tax total_cost = 0 for item_name, category, price in items: tax_rate = tax_rates.get(category, 0) total_cost += price * (1 + tax_rate) return total_cost"},{"question":"Create a function that takes a list of numbers and a target number as input. The function should return a list of all unique pairs of numbers from the list that sum up to the target number. This function should avoid duplicates pairs like (a, b) and (b, a). Additionally, the function should be efficient. Consider both time and space complexity in your function design.","solution":"def find_pairs(nums, target): Returns a list of unique pairs of numbers that sum up to the target number. nums = sorted(nums) left, right = 0, len(nums) - 1 pairs = [] seen = set() while left < right: curr_sum = nums[left] + nums[right] if curr_sum == target: if (nums[left], nums[right]) not in seen: pairs.append((nums[left], nums[right])) seen.add((nums[left], nums[right])) left += 1 right -= 1 elif curr_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Create a function that finds the intersection of two arrays. The function should return a new array containing only the elements that are present in both input arrays. The function should not include any duplicate elements in the returned array.","solution":"def intersection(array1, array2): Returns an array containing the intersection of array1 and array2. The result includes only the elements present in both arrays, without duplicates. set1 = set(array1) set2 = set(array2) intersected_set = set1.intersection(set2) return list(intersected_set)"},{"question":"Create a function that prints the Fibonacci series up to n numbers.","solution":"def fibonacci(n): Prints the Fibonacci series up to n numbers. if n <= 0: print(\\"Please enter a positive integer\\") return a, b = 0, 1 for _ in range(n): print(a, end=' ') a, b = b, a + b print()"},{"question":"Create a function that takes a string as input and returns the count of each vowel (a, e, i, o, u) individually in the string. The function should be case-insensitive.","solution":"def count_vowels(s): Returns a dictionary with the count of each vowel (a, e, i, o, u) in the string. The function is case-insensitive. vowels = 'aeiou' s = s.lower() count_dict = {vowel: 0 for vowel in vowels} for char in s: if char in vowels: count_dict[char] += 1 return count_dict"},{"question":"Create a function that takes a string as an argument and returns the most common character in the string. If there are multiple characters with the same highest frequency, return all of them in an array.","solution":"from collections import Counter from typing import Union, List def most_common_char(s: str) -> Union[str, List[str]]: Returns the most common character(s) in the string s. If there are multiple characters with the same highest frequency, returns them in a list. if not s: return [] # Return empty list if input string is empty count = Counter(s) max_freq = max(count.values()) most_common_chars = [char for char, freq in count.items() if freq == max_freq] if len(most_common_chars) == 1: return most_common_chars[0] else: return most_common_chars"},{"question":"Create a function that takes an array of integers as input, and returns the maximum sum of a contiguous subarray within the array. The function should have a time complexity of at least O(n) and space complexity of O(1).","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the input array. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes in a dictionary where keys are strings representing item names and values are lists of integers representing prices for different stores. The function should return the name of the item with the cheapest price among all stores. If there are multiple items with the same lowest price, return all such items.","solution":"def cheapest_item(items): Returns the name(s) of the item(s) with the cheapest price among all stores. Parameters: items (dict): A dictionary where keys are item names (str) and values are lists of integers representing prices. Returns: list: A list of item name(s) with the cheapest price. min_price = float('inf') cheapest_items = [] for item, prices in items.items(): lowest_price = min(prices) if lowest_price < min_price: min_price = lowest_price cheapest_items = [item] elif lowest_price == min_price: cheapest_items.append(item) return cheapest_items"},{"question":"Create a function that accepts a sorted array and returns a new array with duplicate elements removed. The function should maintain the original order of the elements.","solution":"def remove_duplicates_sorted(arr): Removes duplicate elements from the sorted array while maintaining the original order. Parameters: arr (list): A sorted list with possible duplicate elements. Returns: list: A new list with duplicates removed. if not arr: return arr result = [arr[0]] # Start with the first element because it's sorted for element in arr[1:]: if element != result[-1]: # Only add if it's different from the last element in result result.append(element) return result"},{"question":"Create a function that generates a random password for a user. The password should consist of 12 characters, including at least one uppercase letter, one lowercase letter, one digit, and one special character.","solution":"import random import string def generate_password(length=12): Generates a random password with at least one uppercase letter, one lowercase letter, one digit, and one special character. if length < 4: raise ValueError(\\"Password length must be at least 4\\") # Define possible characters for each category uppercase_letters = string.ascii_uppercase lowercase_letters = string.ascii_lowercase digits = string.digits special_characters = string.punctuation # Ensure each category is represented at least once password = [ random.choice(uppercase_letters), random.choice(lowercase_letters), random.choice(digits), random.choice(special_characters) ] # Fill the rest of the password length with random choices from all categories all_characters = uppercase_letters + lowercase_letters + digits + special_characters password += random.choices(all_characters, k=length-4) # Shuffle the list to avoid predictable patterns and convert to a string random.shuffle(password) return ''.join(password)"},{"question":"Create a function that returns the minimum value among three given numbers.","solution":"def find_minimum(a, b, c): Returns the minimum value among three given numbers. return min(a, b, c)"},{"question":"Create a function that takes in two integers, a and b, and returns the smallest number that is divisible by a AND b. The smallest such number is known as the least common multiple or LCM.","solution":"import math def lcm(a, b): Returns the least common multiple of a and b. if a == 0 or b == 0: return 0 return abs(a * b) // math.gcd(a, b)"},{"question":"Create a function that is called \`containsDuplicate\` that takes in an integer array \`nums\` and returns a boolean value. This function should return \`true\` if any value in the array appears at least twice, and \`false\` if every element is distinct.","solution":"def containsDuplicate(nums): Returns true if any value in the array appears at least twice, and false if every element is distinct. return len(nums) != len(set(nums))"},{"question":"Create a function that accumulates values from a nested dictionary and returns a flat sum.","solution":"def accumulate_values(nested_dict): Recursively accumulates values from a nested dictionary and returns a flat sum. Assumes that all values in the dictionary are integers. Args: nested_dict (dict): The nested dictionary containing integer values. Returns: int: The sum of all values in the nested dictionary. total_sum = 0 for key, value in nested_dict.items(): if isinstance(value, dict): total_sum += accumulate_values(value) else: total_sum += value return total_sum"},{"question":"Create a function that removes duplicates from a list while maintaining the original order of the elements. For example, if the input list is \`[1, 2, 2, 3, 4, 4, 5]\`, the output should be \`[1, 2, 3, 4, 5]\`.","solution":"def remove_duplicates(input_list): Removes duplicates from a list while maintaining the original order of the elements. Parameters: input_list: A list of elements which may contain duplicates. Returns: A list with duplicates removed, maintaining the original order. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Create a function that takes an integer list and returns the longest sequence of consecutive integers in the list. If there are multiple sequences of the same length, return the one that appears first in the list. If the list is empty, return an empty list.","solution":"def longest_consecutive_sequence(nums): Returns the longest sequence of consecutive integers in the provided list. If there are multiple sequences of the same length, returns the first. If the list is empty, returns an empty list. if not nums: return [] nums = sorted(set(nums)) # Remove duplicates and sort the numbers longest = [] current = [nums[0]] for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: current.append(nums[i]) else: if len(current) > len(longest): longest = current current = [nums[i]] if len(current) > len(longest): longest = current return longest"},{"question":"Create a function that checks if a given number is a prime number. A prime number is a number that has exactly two distinct divisors: 1 and itself. For example, 2, 3, 5, and 7 are prime numbers, but 4, 6, 8, and 9 are not.","solution":"def is_prime(n): Returns True if the number n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # other even numbers are not primes for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes in a list of numbers and returns the mean, median, and mode of the list.","solution":"from typing import List, Tuple from collections import Counter def calculate_mean(lst: List[float]) -> float: return sum(lst) / len(lst) def calculate_median(lst: List[float]) -> float: sorted_lst = sorted(lst) n = len(lst) mid = n // 2 if n % 2 == 0: return (sorted_lst[mid-1] + sorted_lst[mid]) / 2 else: return sorted_lst[mid] def calculate_mode(lst: List[float]) -> List[float]: count = Counter(lst) max_count = max(count.values()) return [k for k, v in count.items() if v == max_count] def mean_median_mode(lst: List[float]) -> Tuple[float, float, List[float]]: mean = calculate_mean(lst) median = calculate_median(lst) mode = calculate_mode(lst) return mean, median, mode"},{"question":"Create a function that takes a number as an argument and returns the factorial of the number. You should handle error cases for negative numbers and non-integer inputs. Factorial is the product of all positive integers less than or equal to a given number. For example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. You should also include unit tests for your function.","solution":"def factorial(n): Returns the factorial of the given number n. If n is not an integer or is negative, raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes in an array of integers and returns the product of the two largest numbers in the array. Assume the array contains at least two integers.","solution":"def product_of_two_largest(nums): Returns the product of the two largest numbers in the array. Parameters: nums (list of int): List of integers containing at least two elements. Returns: int: Product of the two largest numbers. # Sort the array in descending order and then multiply the first two elements sorted_nums = sorted(nums, reverse=True) return sorted_nums[0] * sorted_nums[1]"},{"question":"Create a function that takes a string and returns the most frequently occurring characters and their frequencies. For instance, if the input is \\"aabbbc\\", the function should return \\"b 3 a 2\\". If there are multiple characters with the same highest frequency, return all of them. For instance, for the input \\"abccabcc\\", the function should return \\"c 3 a 2\\". If the string is empty, return an empty string.","solution":"from collections import Counter def frequent_characters(s): Returns the most frequently occurring characters and their frequencies. if not s: return \\"\\" count = Counter(s) max_freq = max(count.values()) result = sorted([(char, freq) for char, freq in count.items() if freq == max_freq] + [(char, freq) for char, freq in count.items() if freq < max_freq], key=lambda x: (-x[1], x[0])) return ' '.join(f\\"{char} {freq}\\" for char, freq in result)"},{"question":"Create a function that takes 3 arguments - \`first_name\`, \`last_name\`, and \`age\`, and then outputs a string that includes this information in a nice format.","solution":"def format_person_info(first_name, last_name, age): Returns a formatted string with the person's first name, last name, and age. return f\\"{first_name} {last_name} is {age} years old.\\""},{"question":"Create a function that takes two arguments: \`age\` and \`isStudent\`. The function should return \\"You are a student!\\" if \`isStudent\` is True and \`age\` is less than 18. If the age is less than 18 but \`isStudent\` is False, return \\"You are not a student, but still young!\\"","solution":"def check_status(age, isStudent): Returns a message based on the age and student status of the person. Args: age (int): The age of the person. isStudent (bool): Whether the person is a student. Returns: str: A message based on the person's age and student status. if age < 18: if isStudent: return \\"You are a student!\\" else: return \\"You are not a student, but still young!\\""},{"question":"Create a function that converts feet to inches in Python.","solution":"def feet_to_inches(feet): Converts feet to inches. Parameters: feet (float): The length in feet. Returns: float: The length in inches. return feet * 12"},{"question":"Create a function that takes a string of space-separated numbers and returns an array of those numbers as integers. Ensure that the function also includes error handling for cases where the string contains non-numeric characters or cannot be transformed into integers.","solution":"def string_to_int_list(s): Takes a string of space-separated numbers and returns an array of those numbers as integers. Args: s (str): The string to be converted. Returns: list: The list of integers. Raises: ValueError: If the string contains non-numeric characters. try: int_list = [int(num) for num in s.split()] return int_list except ValueError as e: raise ValueError(\\"The string contains non-numeric characters or cannot be transformed into integers.\\") from e"},{"question":"Create a function that accepts two parameters: a list of strings and a separator. The function should return a new string where the elements of the list are joined by the separator, and any leading or trailing spaces in the elements are removed.","solution":"def join_strings(strings, separator): Joins the list of strings using the specified separator after stripping leading and trailing spaces from each string. Parameters: strings (list): A list of strings to be joined. separator (str): A string separator to join the list of strings. Returns: str: A new string with the list elements joined by the separator. cleaned_strings = [s.strip() for s in strings] return separator.join(cleaned_strings)"},{"question":"Create a function that converts inches to centimeters. The function should take the number of inches as input and return the corresponding number of centimeters.","solution":"def inches_to_centimeters(inches): Converts inches to centimeters. Args: inches (float): The number of inches. Returns: float: The number of centimeters. return inches * 2.54"},{"question":"Create a function that can accept any number of arguments, and return the sum of all the numbers passed to the function. If a non-numeric argument is included, it should be ignored in the sum.","solution":"def sum_numbers(*args): Returns the sum of all numeric arguments passed. Non-numeric arguments are ignored. return sum(arg for arg in args if isinstance(arg, (int, float)))"},{"question":"Create a function that takes no parameters and returns a random integer between 1 and 10. The function should use the \`random\` module in Python.","solution":"import random def get_random_integer(): Returns a random integer between 1 and 10 inclusive. return random.randint(1, 10)"},{"question":"Create a function that takes two integers as input and returns the result of their division. If the divisor is zero, the function should handle this gracefully by returning \\"Division by zero error\\" and should handle this exception in the main function that calls this division function. The division should be handled in Python.","solution":"def divide(a, b): Returns the result of dividing a by b. If b is zero, returns an error message. try: return a / b except ZeroDivisionError: return \\"Division by zero error\\""},{"question":"Create a function that takes in an integer as input and checks if it is even or odd and prints the result. Also handle exceptions if the input is not an integer.","solution":"def check_even_or_odd(number): Checks if the input number is even or odd. If the input is not an integer, it raises a ValueError. if not isinstance(number, int): raise ValueError(\\"Input must be an integer\\") if number % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"Create a function that prints the even numbers in an array in their original order.","solution":"def print_even_numbers(arr): Prints the even numbers from the array \`arr\` in their original order. even_numbers = [num for num in arr if num % 2 == 0] for num in even_numbers: print(num)"},{"question":"Create a function that returns the maximum value in an array.","solution":"def find_max_value(arr): Returns the maximum value in an array. Parameters: arr (list): List of numbers. Returns: int/float: The maximum value in the array. if len(arr) == 0: raise ValueError(\\"Array cannot be empty.\\") max_val = arr[0] for num in arr: if num > max_val: max_val = num return max_val"},{"question":"Create a function that takes an array of integers as inputs. The function should return the array with all the even numbers moved to the beginning of the array and all the odd numbers to the end in-place, without copying values.","solution":"def segregate_even_odd(arr): This function rearranges the elements of the given array so that all even numbers are at the beginning and all odd numbers are at the end. :param arr: List[int] - list of integers :return: None - the array is modified in-place left = 0 right = len(arr) - 1 while left < right: # Increment left index while we see even numbers at left while left < right and arr[left] % 2 == 0: left += 1 # Decrement right index while we see odd numbers at right while left < right and arr[right] % 2 == 1: right -= 1 if left < right: # Swap, putting even number on left and odd number on right arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Create a function that takes an array as an argument. Function should return true if all elements are unique and false otherwise. The function should work for any data type.","solution":"def are_all_elements_unique(arr): Returns True if all elements in the array are unique, False otherwise. return len(arr) == len(set(arr))"},{"question":"Create a function that takes two parameters, a project name and a version number, and generates a project name if it doesn't exist in the database, and returns the project ID. If the project exists, it should return the project ID of the existing project. The project name and version number should be validated to ensure they adhere to specific rules: the project name must start with a letter and consist only of letters and digits, and the version number must be in the format \\"X.Y.Z\\" where X, Y, and Z are integers.","solution":"import re DATABASE = { \\"projects\\": [] } def validate_project_name(name): Validates if the project name starts with a letter and contains only letters and digits. return bool(re.match(r'^[a-zA-Z][a-zA-Z0-9]*', name)) def validate_version_number(version): Validates if the version number is in the format 'X.Y.Z' where X, Y, and Z are integers. return bool(re.match(r'^d+.d+.d+', version)) def get_project_id(project_name, version_number): Fetches the project ID if the project exists, else creates a new entry in the database and returns the project ID. if not validate_project_name(project_name): raise ValueError(\\"Invalid project name. It must start with a letter and contain only letters and digits.\\") if not validate_version_number(version_number): raise ValueError(\\"Invalid version number. It must be in the format 'X.Y.Z'.\\") project_key = f\\"{project_name}-{version_number}\\" for project in DATABASE[\\"projects\\"]: if project[\\"key\\"] == project_key: return project[\\"id\\"] # Create new project new_project_id = len(DATABASE[\\"projects\\"]) + 1 new_project = { \\"id\\": new_project_id, \\"key\\": project_key, \\"name\\": project_name, \\"version\\": version_number } DATABASE[\\"projects\\"].append(new_project) return new_project_id"},{"question":"Create a function that computes the area of a triangle given the length of its three sides. Use Heron's formula to calculate the area. Return the area rounded to two decimal places.","solution":"import math def triangle_area(a, b, c): Returns the area of a triangle with sides of length a, b, and c using Heron's formula. The result is rounded to two decimal places. # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) # Return the area rounded to two decimal places return round(area, 2)"},{"question":"Create a function that helps to organize a list of tasks by their priorities. The function takes a list of tuples, where each tuple represents a task and contains the task name and its priority. The function should return a new list of tasks sorted by the priority in ascending order. Tie in the sorting, sort the tasks by their names in case of tie in priorities.","solution":"def organize_tasks(tasks): Organizes a list of tasks by their priorities. If there is a tie in the priorities, the tasks are sorted by their names. Parameters: tasks (list of tuples): A list where each tuple contains the task name and its priority. Returns: list of tuples: A new list of tasks sorted by priority and name in ascending order. return sorted(tasks, key=lambda x: (x[1], x[0]))"},{"question":"Create a function that takes a list of numbers and returns the product of all the numbers in the list. If the list is empty, return None.","solution":"def product_of_list(numbers): Returns the product of all numbers in the given list. If the list is empty, returns None. if not numbers: return None result = 1 for number in numbers: result *= number return result"},{"question":"Create a function that takes a filename and returns the file's content as a string. If the file does not exist, the function should return an empty string.","solution":"def read_file_content(filename): Returns the file's content as a string. If the file does not exist, returns an empty string. try: with open(filename, 'r') as file: return file.read() except FileNotFoundError: return ''"},{"question":"Create a function that reverses the words in a sentence given as an input string. For example, the input \\"Hello World\\" should be reversed to \\"World Hello\\".","solution":"def reverse_words(sentence): Reverses the words in a given sentence. Parameters: sentence (str): The sentence to reverse the words in. Returns: str: A new sentence with the words in reverse order. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Create a function that takes a list of strings, where each string represents a word. The function should return the longest word in the list and its length. If there are multiple words with the same maximum length, return the word that appears first in the list.","solution":"def find_longest_word(words): Takes a list of strings and returns the longest word and its length. If multiple words have the same maximum length, returns the first one. if not words: return None, 0 longest_word = words[0] max_length = len(longest_word) for word in words[1:]: if len(word) > max_length: longest_word = word max_length = len(word) return longest_word, max_length"},{"question":"Create a function that takes two parameters: an array of numbers and a target number. The function should return True if there are two distinct indices \`i\` and \`j\` in the array such that \`arr[i] + arr[j] == target\`, and False otherwise.","solution":"def two_sum(arr, target): Checks if there are two distinct indices i and j in the array such that arr[i] + arr[j] == target. Parameters: arr (list): A list of integers. target (int): The target sum. Returns: bool: True if such indices exist, False otherwise. seen = {} for index, number in enumerate(arr): complement = target - number if complement in seen: return True seen[number] = index return False"},{"question":"Create a function that takes two lists of integers and returns a list containing the common elements between the two lists. The function should efficiently find the common elements without requiring extra space for another list. The function should have a time complexity_of O(n), where n is the total number of elements in both lists.","solution":"def find_common_elements(list1, list2): Returns a list containing the common elements between list1 and list2. The function is designed to be efficient with O(n) time complexity. # Convert the lists to sets to efficiently find common elements. set1 = set(list1) set2 = set(list2) # Find the common elements using the intersection of the two sets. common_elements = list(set1 & set2) return common_elements"},{"question":"Create a function that takes two lists as input and returns true if the second list is a sublist of the first one. To further challenge, ensure your function works correctly even when the second list is longer than the first one or when one or both lists are empty.","solution":"def is_sublist(main_list, sub_list): Returns True if sub_list is a sublist of main_list, otherwise False. if not sub_list: return True if not main_list and sub_list: return False len_main = len(main_list) len_sub = len(sub_list) for i in range(len_main - len_sub + 1): if main_list[i:i + len_sub] == sub_list: return True return False"},{"question":"Create a function that is called \`calculate_area_of_circle(radius)\` and return the area of a circle given the radius. The formula to calculate the area of a circle is πr². Use the value of π as 3.14159.","solution":"def calculate_area_of_circle(radius): Returns the area of a circle given the radius. The formula used is πr², where π is approximated to 3.14159. pi = 3.14159 return pi * (radius ** 2)"},{"question":"Create a function that takes a single argument, a number, and returns the factorial of that number. The function should handle both positive and negative numbers, and return an appropriate error message for non-integer and non-negative inputs.","solution":"def factorial(n): Returns the factorial of a given number n. Handles: - Positive integers: computes the factorial - Zero: returns 1 (0! = 1) - Negative integers: returns an error message - Non-integer and non-negative inputs: returns an error message if not isinstance(n, int): return \\"Input must be an integer\\" if n < 0: return \\"Input must be a non-negative integer\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes an integer, a list, a set, and a tuple as parameters and checks if any of these parameters contain a duplicate element. If a duplicate is found, the function should return \`True\`, and if no duplicates are found, it should return \`False\`.","solution":"def check_for_duplicates(integer, lst, st, tpl): Checks if any of the parameters contain duplicate elements. Parameters: integer (int): An integer value. lst (list): A list of elements. st (set): A set of elements. tpl (tuple): A tuple of elements. Returns: bool: True if any parameter contains duplicates, otherwise False. # Convert list, set, and tuple to list for easy checking combined_list = [integer] + lst + list(st) + list(tpl) # Use a set to check for duplicates seen = set() for element in combined_list: if element in seen: return True seen.add(element) return False"},{"question":"Create a function that takes a list of integers \`nums\` and returns a new list where each element is the product of all elements in \`nums\` except the element at the current index. For example, if the input list is \`[1, 2, 3, 4]\`, the output should be \`[24, 12, 8, 6]\` because \`1*2*3*4/(nums[i])\` for each element \`nums[i]\` should give \`[24, 12, 8, 6]\`.","solution":"def product_except_self(nums): Returns a list where each element is the product of all elements in nums except the element at the current index. length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Create a function that takes two numbers x and y and returns the quotient and remainder when x is divided by y.","solution":"def divide_and_modulo(x, y): Returns the quotient and remainder when x is divided by y. Parameters: x (int): The dividend y (int): The divisor Returns: tuple: A tuple containing the quotient and remainder (quotient, remainder) quotient = x // y remainder = x % y return (quotient, remainder)"},{"question":"Create a function that takes a string as an input. This function will check if all the alphabets in the string are lowercase and return True if all are lowercase, otherwise return False. Additionally, the function must ignore non-alphabet characters.","solution":"def all_lowercase(s): Checks if all alphabetical characters in the string are lowercase. Args: s (str): The string to check. Returns: bool: True if all alphabetical characters are lowercase, False otherwise. for char in s: if char.isalpha() and not char.islower(): return False return True"},{"question":"Create a function that returns the last word of a string.","solution":"def last_word(s): Returns the last word of the string s. words = s.split() if words: return words[-1] return \\"\\""},{"question":"Create a function that takes in two lists of integers, \`list1\` and \`list2\`, as input and returns their union. The union of two lists should remove any duplicate elements. Additionally, the function should return the union in descending order.","solution":"def union_lists_descending(list1, list2): Returns the union of two lists in descending order, removing duplicates. # Create a set for unique elements from both lists union_set = set(list1).union(set(list2)) # Sort the resulting set in descending order and convert to list union_list = sorted(union_set, reverse=True) return union_list"},{"question":"Create a function that parses a string into an integer. The function should handle both valid and invalid inputs gracefully. For valid inputs (strings consisting only of digits and an optional leading '-' sign), the function should convert the string to an integer. For invalid inputs, the function should return \`null\` or equivalent to indicate that the conversion was unsuccessful.","solution":"def parse_int(s): Parses a string into an integer. Parameters: s (str): The input string to parse. Returns: int or None: The integer representation of the string, or None if the input is invalid. try: return int(s) except ValueError: return None"},{"question":"Create a function that takes a single integer \`n\` as input and returns a new integer which is the reverse of \`n\`.","solution":"def reverse_integer(n): Reverses the digits of the integer n. Args: n (int): The integer to reverse. Returns: int: The integer with its digits reversed. negative = n < 0 n_str = str(abs(n)) reversed_str = n_str[::-1] reversed_int = int(reversed_str) if negative: reversed_int = -reversed_int return reversed_int"},{"question":"Create a function that takes a string as input and returns a dictionary with the count of each word in the string. The function should ignore case and punctuation.","solution":"import string def word_count(s): Returns a dictionary with the count of each word in the input string s. This function ignores case and punctuation. Parameters: s (str): The input string. Returns: dict: A dictionary where keys are words and values are their counts. # Remove punctuation from the string translator = str.maketrans('', '', string.punctuation) clean_str = s.translate(translator) # Convert string to lower case clean_str = clean_str.lower() # Split string into words words = clean_str.split() # Count the frequency of each word word_count_dict = {} for word in words: word_count_dict[word] = word_count_dict.get(word, 0) + 1 return word_count_dict"},{"question":"Create a function that generates the first \`n\` Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first five Fibonacci numbers are 0, 1, 1, 2, 3. Your function should return a list of these numbers.","solution":"def generate_fibonacci(n): Generate the first n Fibonacci numbers. if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Create a function that will print \\"This is not a triangle\\" if the three lengths of a triangle are not valid. Otherwise, it will print \\"This is a triangle\\" if they are valid.","solution":"def validate_triangle(a, b, c): Prints whether the given lengths can form a triangle. A valid triangle must satisfy the triangle inequality theorem which states that: The sum of any two sides of a triangle must be greater than the third side. :param a: Length of the first side. :param b: Length of the second side. :param c: Length of the third side. if a + b > c and a + c > b and b + c > a: print(\\"This is a triangle\\") else: print(\\"This is not a triangle\\")"},{"question":"Create a function that calculates the area of a circle given its radius as input. The function should return the area of the circle. If the radius is less than or equal to zero, the function should return an error message indicating that the radius must be greater than zero.","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given its radius. If the radius is less than or equal to zero, returns an error message. if radius <= 0: return \\"Error: Radius must be greater than zero.\\" return math.pi * radius ** 2"},{"question":"Create a function that takes an integer and returns a boolean value indicating if the integer is a palindrome.","solution":"def is_palindrome(n): Checks if an integer is a palindrome. s = str(n) return s == s[::-1]"},{"question":"Create a function that receives a string called \\"input_string\\" as an argument and returns the longest substring that appears at least twice. If there are multiple substrings with the same longest length, return any one of them.","solution":"def longest_repeated_substring(input_string): Returns the longest substring that appears at least twice in the input string. def get_suffix_array(s): Builds the suffix array for given string s. return sorted(range(len(s)), key=lambda k: s[k:]) def longest_common_prefix(s, a, b): Returns the length of the longest common prefix of s starting from indexes a and b. lcp = 0 while a + lcp < len(s) and b + lcp < len(s) and s[a + lcp] == s[b + lcp]: lcp += 1 return lcp n = len(input_string) if n == 0: return \\"\\" suffix_array = get_suffix_array(input_string) max_len = 0 start_index = 0 for i in range(1, n): lcp = longest_common_prefix(input_string, suffix_array[i - 1], suffix_array[i]) if lcp > max_len: max_len = lcp start_index = suffix_array[i] return input_string[start_index:start_index + max_len] if max_len > 0 else \\"\\""},{"question":"Create a function that sums the numbers in a list.","solution":"def sum_list(numbers): Returns the sum of all numbers in the given list. :param numbers: A list of numbers. :return: The sum of all numbers in the list. return sum(numbers)"},{"question":"Create a function that takes a string \`input\` and returns the length of the longest substring without repeating characters. You should consider the length of the substring itself, not the number of unique characters.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Create a function that takes in a list of integers and returns the first duplicate integer in the list. If there are no duplicates, return -1. For example, with the input [2,3,4,2,5], the function should return 2 because it is the first integer that appears more than once. If the list is [1,2,3,4,5] without any duplicates, the function should return -1.","solution":"def first_duplicate(nums): Returns the first duplicate integer in the list. If there are no duplicates, return -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Create a function that takes a single piece of text as input and identifies whether it contains any repetition of substrings, including repeated patterns of two characters or more.","solution":"def contains_repeated_substring(text): Determines if the input text contains any repeated substrings of two characters or more. n = len(text) for i in range(n // 2, 0, -1): # Length of potential repeated substring for j in range(n - 2*i + 1): # Starting index for checking repeated substring if text[j:j + i] == text[j + i:j + 2 * i]: return True return False"},{"question":"Create a function that takes a string as input and returns the minimum number of deletions required to make the string a palindrome.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = 1 + min(dp[l][r - 1], dp[l + 1][r]) # The result is the top right corner of the table return dp[0][n - 1]"},{"question":"Create a function that takes a string input and returns the frequency of each character in the string. The function should ignore case and consider only alphabetic characters. Non-alphabetic characters should be ignored. The function should return a dictionary with the characters as keys and their frequencies as values.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each alphabetic character in the string s, ignoring case and non-alphabetic characters. # Initialize an empty dictionary freq = {} # Convert string to lowercase s = s.lower() # Iterate over each character in the string for char in s: # Check if the character is alphabetic if char.isalpha(): # Increment the frequency of the character if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Create a function that takes a string input and returns a dictionary with the frequency of each character in the string. Consider spaces as characters as well.","solution":"def char_frequency(s): Takes a string input and returns a dictionary with the frequency of each character in the string. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that can take an integer and return a string of the binary string representation of the integer.","solution":"def int_to_binary_string(n): Converts an integer to its binary string representation. Parameters: n (int): The integer to convert. Returns: str: The binary string representation of the integer. return bin(n)[2:]"},{"question":"Create a function that takes in a string argument and returns the pig latin equivalent of that string. Pig Latin is a language game where the first letter of a word is moved to the end and 'ay' is added to the end of the word. For example, the word 'hello' becomes 'ellohay' and 'world' becomes 'orldway'. Assume the input string is in lowercase and contains only letters.","solution":"def to_pig_latin(s): Converts a given string to its pig latin equivalent. Parameters: s (str): The input string to be converted. Returns: str: The pig latin equivalent of the input string. if len(s) == 0: return s # Moving the first letter to the end and adding 'ay' return s[1:] + s[0] + 'ay'"},{"question":"Create a function that takes a list of integers and returns a new list containing only the even numbers from the original list. How can you accomplish this using a list comprehension?","solution":"def filter_even_numbers(numbers): Returns a list of only the even numbers from the original list using list comprehension. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that takes two arrays as input, calculates the product of the corresponding elements of these arrays, and returns the resulting array. The arrays can be of different lengths. If an array is shorter, treat the missing elements as 0.","solution":"def multiply_arrays(arr1, arr2): Takes two arrays as input, calculates the product of the corresponding elements of these arrays, and returns the resulting array. If one array is shorter, treat the missing elements as 0. max_length = max(len(arr1), len(arr2)) result = [] for i in range(max_length): val1 = arr1[i] if i < len(arr1) else 0 val2 = arr2[i] if i < len(arr2) else 0 result.append(val1 * val2) return result"},{"question":"Create a function that checks if a given number is a perfect square. If it is, return the number as a string. If it's not, return \\"Not a perfect square\\". Use Python.","solution":"import math def is_perfect_square(n): Checks if a given number 'n' is a perfect square. If it is, returns the number as a string. Otherwise, returns \\"Not a perfect square\\". if n < 0: return \\"Not a perfect square\\" root = int(math.sqrt(n)) if root * root == n: return str(n) else: return \\"Not a perfect square\\""},{"question":"Create a function that takes a list of integer values and returns a new list where all the even numbers from the original list have been squared. The odd numbers remain unchanged. How would you implement this in Python?","solution":"def square_evens(nums): Takes a list of integers and returns a new list where all the even numbers are squared and the odd numbers remain unchanged. Parameters: nums (List[int]): The list of integers. Returns: List[int]: A new list with squared even numbers and unchanged odd numbers. return [(x ** 2 if x % 2 == 0 else x) for x in nums]"},{"question":"Create a function that takes an array of numbers and return the total number of unique combinations of those numbers that add up to a target sum. Each number in the array may only be used once in each combination.","solution":"def combination_sum(nums, target): def backtrack(start, target): if target == 0: return 1 if target < 0: return 0 total_combinations = 0 for i in range(start, len(nums)): total_combinations += backtrack(i + 1, target - nums[i]) return total_combinations return backtrack(0, target)"},{"question":"Create a function that calculates the sum of the first 'n' natural numbers using a loop.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first 'n' natural numbers. total = 0 for i in range(1, n+1): total += i return total"},{"question":"Create a function that compares two strings and returns the lexicographically smallest one.","solution":"def smallest_string(s1, s2): Compares two strings and returns the lexicographically smallest one. return min(s1, s2)"},{"question":"Create a function that identifies the smallest string in a list of strings. Write a Python function for this task. Your function should return the smallest string based on lexicographical order.","solution":"def smallest_string(strings): Returns the smallest string in lexicographical order from a list of strings. if not strings: return None return min(strings)"},{"question":"Create a function that takes an array with your friends' people data. Each element is a dictionary with the following keys: name, age, and hobbies. You need to find the youngest person among your friends and return their age.","solution":"def find_youngest_age(friends): Returns the age of the youngest person among the given friends data. Parameters: friends (list): A list of dictionaries with keys 'name', 'age', and 'hobbies'. Returns: int: Age of the youngest person. if not friends: return None youngest_age = min(friend['age'] for friend in friends) return youngest_age"},{"question":"Create a function that takes as input the text of an article headline, and returns the count of words that start with a capital letter. How do I solve this problem using Python?","solution":"def count_capital_words(headline): Returns the count of words that start with a capital letter in the given headline. words = headline.split() capital_count = sum(1 for word in words if word[0].isupper()) return capital_count"},{"question":"Create a function that takes an array 'nums' and returns the maximum product of any triplet in the array. The array can contain positive, negative integers, and zeros.","solution":"def maximum_product_of_triplet(nums): Returns the maximum product of any triplet in the array. nums.sort() # Option 1: the three largest numbers max1 = nums[-1] * nums[-2] * nums[-3] # Option 2: the two smallest and the largest numbers (in case of large negatives) max2 = nums[0] * nums[1] * nums[-1] return max(max1, max2)"},{"question":"Create a function that prints out a message to the user indicating whether a given number is odd or even. The function should take an integer as input and print out \\"Even\\" if the number is even, and \\"Odd\\" if the number is odd. If the input is not an integer, the function should handle this gracefully by printing an error message.","solution":"def check_odd_even(number): Prints out whether a given number is odd or even. Prints an error message if the input is not an integer. if not isinstance(number, int): print(\\"Error: Input must be an integer.\\") elif number % 2 == 0: print(\\"Even\\") else: print(\\"Odd\\")"},{"question":"Create a function that accepts an array of integers and an integer k. The function should return the k highest integers from the array in descending order, sorted as a list. If the array is empty, return an empty list. If k is greater than the number of elements in the array, return an error indicating that k is too large.","solution":"def highest_k_integers(arr, k): Returns the k highest integers from the array in descending order. If the array is empty, returns an empty list. If k is greater than the number of elements in the array, raises a ValueError. if len(arr) == 0: return [] if k > len(arr): raise ValueError(\\"k is too large\\") sorted_arr = sorted(arr, reverse=True) return sorted_arr[:k]"},{"question":"Create a function that takes a string as input and returns its SHA-256 hash. If the input string is empty, return an empty string. Make sure to include the necessary import and include a check function to validate your solution with provided data points.","solution":"import hashlib def sha256_hash(input_string): Returns the SHA-256 hash of the input string. If the input string is empty, returns an empty string. if input_string == \\"\\": return \\"\\" sha256 = hashlib.sha256() sha256.update(input_string.encode('utf-8')) return sha256.hexdigest()"},{"question":"Create a function that , given an array of integers, returns the maximum sum of non-adjacent elements in the array.","solution":"def max_sum_non_adjacent(nums): Returns the maximum sum of non-adjacent elements in the array. if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) prev_prev = 0 prev = max(0, nums[0]) for i in range(1, len(nums)): current = max(prev, prev_prev + nums[i]) prev_prev = prev prev = current return prev"},{"question":"Create a function that takes an array of integers and returns a new array containing only the even numbers from the original array. I am requesting a solution in Python.","solution":"def filter_even_numbers(arr): Returns a list of only the even numbers from the input list arr. return [num for num in arr if num % 2 == 0]"},{"question":"Create a function that calculates the factorial of a number. The function should handle both positive and negative inputs and should not allow the input to be a floating-point number. If the input is not a number at all, the function should raise an appropriate error.","solution":"def factorial(n): Returns the factorial of n. n must be a non-negative integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that converts a Roman numeral to an integer. The function should take a Roman numeral as a string and return the corresponding integer. The function should handle all Roman numeral cases including those involving subtractive notation (e.g., IV, IX, XL, XC, CD, CM).","solution":"def roman_to_int(roman): Converts a Roman numeral to an integer. roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} total = 0 i = 0 while i < len(roman): if i + 1 < len(roman) and roman_values[roman[i]] < roman_values[roman[i + 1]]: total += roman_values[roman[i + 1]] - roman_values[roman[i]] i += 2 else: total += roman_values[roman[i]] i += 1 return total"},{"question":"Create a function that calculates the average of all integers in a list. However, if the list is empty, the function should return None. Here's a Python function to calculate the average of a list of integers. The function should be designed to handle an empty list gracefully.","solution":"def calculate_average(numbers): Returns the average of all integers in the list numbers. If the list is empty, returns None. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Create a function that checks if one string is a permutation of another string. You should include a brief description of your approach and identify any assumptions you or the question do not clarify. The function should return \`True\` if the strings are permutations of each other and \`False\` otherwise.","solution":"def are_permutations(s1, s2): Checks if one string is a permutation of another. Approach: - If the lengths of the two strings are different, they cannot be permutations. - Count the frequency of each character in both strings and compare these counts. Assumptions: - The function is case-sensitive (i.e., 'a' is different from 'A'). - Whitespace and special characters are considered as part of the strings. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if s1 is a permutation of s2, False otherwise. if len(s1) != len(s2): return False from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"Create a function that checks if a given string is a valid binary string. A binary string is made up of only '0's and '1's. The function should return True if the input string is a valid binary string, and False otherwise.","solution":"def is_valid_binary_string(s): Check if the given string is a valid binary string. A valid binary string contains only '0's and '1's. Parameters: s (str): The string to check Returns: bool: True if the string is a valid binary string, False otherwise for char in s: if char not in ('0', '1'): return False return True"},{"question":"Create a function that generates the first \`n\` Fibonacci numbers using Python. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first five Fibonacci numbers are 0, 1, 1, 2, 3.","solution":"def fibonacci(n): Generates the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that checks whether a binary search tree (BST) is empty, takes a root node as an argument, and returns True if the BST is empty, False otherwise.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_bst_empty(root): Checks whether a binary search tree (BST) is empty. Parameters: root (TreeNode): The root node of the BST. Returns: bool: True if the BST is empty (root is None), False otherwise. return root is None"},{"question":"Create a function that takes a Python dictionary and returns a new dictionary where the keys are the original values and the values are the keys. Essentially, it inverts the key-value relationship in the dictionary.","solution":"def invert_dictionary(d): Inverts the key-value relationship of the input dictionary. Parameters: d (dict): A dictionary to be inverted. Returns: dict: A new dictionary with keys and values inverted. return {v: k for k, v in d.items()}"},{"question":"Create a function that takes two parameters and returns their sum. If the sum is greater than 10, also return a message saying \\"Sum is greater than 10\\".","solution":"def add_with_message(a, b): Returns the sum of a and b. If the sum is greater than 10, also returns a message saying \\"Sum is greater than 10\\". result = a + b if result > 10: return result, \\"Sum is greater than 10\\" return result, \\"\\""},{"question":"Create a function that takes a list of integers as input and returns a new list where each integer is doubled and each integer is greater than or equal to 10. The function should also handle the case where the input list is empty.","solution":"def double_and_filter(int_list): Takes a list of integers as input and returns a new list where each integer is doubled and each integer is greater than or equal to 10. Handles the case where the input list is empty. doubled_filtered_list = [2 * x for x in int_list if 2 * x >= 10] return doubled_filtered_list"},{"question":"Create a function that takes an input of a string and converts all the characters to lowercase. Then, it should check if the resulting string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. The function should return a tuple containing the converted string and a boolean indicating whether it is a palindrome.","solution":"def to_lowercase_and_check_palindrome(input_str): Converts the input string to lowercase and checks if it is a palindrome. Args: input_str (str): The input string. Returns: tuple: A tuple containing the converted lowercase string and a boolean indicating whether it is a palindrome. lower_str = input_str.lower() is_palindrome = lower_str == lower_str[::-1] return (lower_str, is_palindrome)"},{"question":"Create a function that finds all the prime numbers between 1 and a given integer n. The function should use the Sieve of Eratosthenes algorithm to efficiently find all the prime numbers within the range. The function should return a list of these prime numbers.","solution":"def sieve_of_eratosthenes(n): Finds all prime numbers between 1 and n using the Sieve of Eratosthenes algorithm. :param n: The upper limit of the range to find prime numbers :return: A list of prime numbers between 1 and n if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]]"},{"question":"Create a function that takes an array of integers as input and returns the product of all the integers in the array.","solution":"def array_product(arr): Returns the product of all the integers in the array. product = 1 for num in arr: product *= num return product"},{"question":"Create a function that takes in two integers, \`a\` and \`b\`, and returns the result of \`a\` divided by \`b\`. If \`b\` is zero, return a default value of \`-1\`. Can you provide a Python implementation of this function?","solution":"def divide(a, b): Returns the result of \`a\` divided by \`b\`. If \`b\` is zero, returns -1. if b == 0: return -1 return a / b"},{"question":"Create a function that calculates the sum of all numbers in a given list. The function should be named \`sum_of_numbers\` and should take a single parameter: \`numbers\`, which is a list of integers.","solution":"def sum_of_numbers(numbers): Calculates the sum of all numbers in a given list. Args: - numbers (list of int): A list of integers. Returns: - int: The sum of all integers in the list. return sum(numbers)"},{"question":"Create a function that accepts an integer array and calculates the sum of all numbers. If the sum is even, return the sum; otherwise, return the sum - 1.","solution":"def sum_numbers(arr): Returns the sum of all numbers in the array. If the sum is even, returns the sum. If the sum is odd, returns the sum - 1. total_sum = sum(arr) if total_sum % 2 == 0: return total_sum else: return total_sum - 1"},{"question":"Create a function that takes no arguments and returns a string that says \\"Hello, World!\\" when it is called.","solution":"def greet(): Returns the string \\"Hello, World!\\". return \\"Hello, World!\\""},{"question":"Create a function that prints the first n Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. The function should take one integer parameter n and should not return anything (void).","solution":"def print_fibonacci(n): Prints the first n Fibonacci numbers. if n <= 0: return a, b = 0, 1 if n >= 1: print(a, end=' ') if n >= 2: print(b, end=' ') for _ in range(n - 2): a, b = b, a + b print(b, end=' ') print() # Example usage: # print_fibonacci(10) would print: 0 1 1 2 3 5 8 13 21 34"},{"question":"Create a function that takes a string \`str\` and returns a new string with all the characters in reverse order.","solution":"def reverse_string(s): Returns a new string with all the characters of the input string in reverse order. Args: s (str): The input string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Create a function that generates a list of prime numbers up to a given number n, where n is a positive integer. You want to use a helper function to check if a number is prime. The primes should be generated in ascending order. For example, for n=10, the function should return \`[2, 3, 5, 7]\`.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True # 2 is the only even prime number if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def generate_primes(n): Generates a list of prime numbers up to a given number n. primes = [] for num in range(2, n + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Create a function that generates a list of the first n Fibonacci numbers. The function should be efficient and avoid excessive recursion. You can use an iterative approach.","solution":"def generate_fibonacci(n): Generate a list of the first n Fibonacci numbers. :param n: The count of Fibonacci numbers to generate. :return: A list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci = [0, 1] for i in range(2, n): fibonacci.append(fibonacci[-1] + fibonacci[-2]) return fibonacci"},{"question":"Create a function that can evaluate the result of mathematical operations (addition, subtraction, multiplication, division) on two input integers.","solution":"def evaluate_operation(a, b, operation): Evaluates the result of a mathematical operation on two input integers. Parameters: a (int): The first integer. b (int): The second integer. operation (str): The operation to perform. It can be 'add', 'subtract', 'multiply', or 'divide'. Returns: int or float: The result of the operation. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b else: raise ValueError(\\"Invalid operation\\")"},{"question":"Create a function that takes a string as input and prints each word in reverse order without using any built-in string manipulation functions like reverse(). How can I do this in Python?","solution":"def reverse_words(input_string): This function takes a string as input and returns a new string with each word in reverse order. def reverse_word(word): reversed_word = \\"\\" for char in word: reversed_word = char + reversed_word return reversed_word words = [] current_word = \\"\\" for char in input_string: if char == \\" \\": words.append(current_word) current_word = \\"\\" else: current_word += char words.append(current_word) # append the last word reversed_words = [reverse_word(word) for word in words] return \\" \\".join(reversed_words)"},{"question":"Create a function that returns a list of non-repeated elements in the given list.","solution":"def non_repeated_elements(lst): Returns a list of non-repeated elements in the given list. from collections import Counter element_counts = Counter(lst) return [element for element, count in element_counts.items() if count == 1]"},{"question":"Create a function that takes a string and returns the longest substring which is both a palindrome and odd in length. A palindrome is a string that reads the same backward as forward. An odd-length substring means the substring has a length that is an odd number.","solution":"def longest_odd_palindromic_substring(s): Returns the longest substring of s which is both a palindrome and has an odd length. def is_palindrome(subs): return subs == subs[::-1] max_len = 0 longest_palindrome = \\"\\" n = len(s) for i in range(n): for j in range(i, n): sub = s[i:j+1] if len(sub) % 2 == 1 and is_palindrome(sub): if len(sub) > max_len: max_len = len(sub) longest_palindrome = sub return longest_palindrome"},{"question":"Create a function that takes a two-dimensional list as an argument and returns the sum of all the elements in the two-dimensional list.","solution":"def sum_2d_list(matrix): Returns the sum of all elements in a two-dimensional list. total = 0 for row in matrix: for element in row: total += element return total"},{"question":"Create a function that checks if a given number is a perfect square without using any built-in functions for square roots or exponentiation.","solution":"def is_perfect_square(n): Checks if n is a perfect square without using built-in functions for square roots or exponentiation. if n < 0: return False i = 0 while i * i <= n: if i * i == n: return True i += 1 return False"},{"question":"Create a function that asks users to input a number and returns whether it is even or odd. How can I do that in Python?","solution":"def is_even_or_odd(): Asks the user to input a number and returns whether it is even or odd. while True: try: number = int(input(\\"Enter a number: \\")) if number % 2 == 0: return \\"Even\\" else: return \\"Odd\\" except ValueError: print(\\"Invalid input. Please enter an integer.\\")"},{"question":"Create a function that takes a list of integers as an argument and returns a new list containing the squares of all the integers in the original list. The function should be named \`square_numbers\`.","solution":"def square_numbers(lst): Takes a list of integers and returns a new list containing the squares of the original integers. Parameters: lst (list): A list of integers. Returns: list: A list of integers where each integer is the square of the corresponding integer in the input list. return [x**2 for x in lst]"},{"question":"Create a function that checks if a string is a palindrome. A string is considered a palindrome if it reads the same backward as forward. For example, \\"racecar\\" and \\"level\\" are palindromes. \\"hello\\" is not a palindrome.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, otherwise returns False. s = s.replace(\\" \\", \\"\\").lower() # Removing spaces and converting to lower case to handle case insensitivity and spaces. return s == s[::-1]"},{"question":"Create a function that generates a random IP address. The IP address should be in the format x.x.x.x, where each 'x' is a number in the range from 0 to 255. At first, you need to import the random module. Then, create a function that calls the random.randint() function to generate random numbers between 0 and 255, inclusive. Lastly, construct the IP address as a string using f-strings.","solution":"import random def generate_random_ip(): Generates a random IP address in the format x.x.x.x, where each 'x' is a number in the range from 0 to 255. return f'{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}'"},{"question":"Create a function that takes an integer \`x\` as an input and returns a boolean value indicating whether \`x\` is divisible by 3, 5, or both. The function is named \`isDivisibleBy3Or5\`.","solution":"def isDivisibleBy3Or5(x): Returns True if the input \`x\` is divisible by 3, 5, or both. Returns False otherwise. return x % 3 == 0 or x % 5 == 0"},{"question":"Create a function that takes in two lists of integers and returns a new list containing all the elements that are present in both lists but not present in any other lists. To overlap only unique elements, meaning that an element that appears in two lists but not in any other lists will be included, even if it appears more than once in one of the lists.","solution":"def unique_overlap(list1, list2): Returns a list of unique elements that are present in both list1 and list2. # Convert both lists to sets to find unique elements in both lists set1 = set(list1) set2 = set(list2) # Find intersection of both sets overlap = set1 & set2 # Convert the resultant set back to a list return list(overlap)"},{"question":"Create a function that checks if a word is \\"bad\\" or a \\"good\\" word.","solution":"def is_good_word(word): Checks if a word is 'good' or 'bad'. A word is considered 'good' if it contains only alphabetic characters and doesn't contain any of the \\"bad\\" words: 'bad', 'ugly', 'horrible'. Return True if the word is good, otherwise return False. bad_words = {'bad', 'ugly', 'horrible'} if not word.isalpha(): return False return word.lower() not in bad_words"},{"question":"Create a function that takes in an array of integers and returns the maximum sum of a subarray that can be obtained by combining adjacent elements in the array. For example, given the array \`[1, -1, 2, 1]\`, the function should return \`4\` because the maximum sum is obtained by combining \`1\`, \`-1\`, \`2\`, and \`1\` into a single subarray \`[1, -1, 2, 1]\`, which gives a sum of \`4\`. The maximum sum of a subarray that can be obtained by combining adjacent elements in the given array is \`4\`.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray that can be obtained by combining adjacent elements in the array. Uses Kadane's algorithm. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes two parameters: an integer \`n\` and a string \`s\`. The function should return the count of distinct substrings of length \`n\` in the string \`s\`.","solution":"def count_distinct_substrings(n, s): Returns the count of distinct substrings of length \`n\` in the string \`s\`. Parameters: n (int): Length of the substrings. s (string): Input string. Returns: int: Count of distinct substrings of length \`n\`. if n > len(s) or n <= 0: return 0 substrings = set() for i in range(len(s) - n + 1): substr = s[i:i+n] substrings.add(substr) return len(substrings)"},{"question":"Create a function that takes two numbers and returns the sum of all prime numbers between these two numbers (inclusive). Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_of_primes(a, b): Returns the sum of all prime numbers between a and b (inclusive). return sum(n for n in range(a, b + 1) if is_prime(n))"},{"question":"Create a function that takes two parameters, an \`int\` and a \`list\` of \`int\`s, and returns the index of the first element in the list that is equal to the given \`int\`. If no such element exists, the function should return \`-1\`.","solution":"def find_first_index(target, lst): Returns the index of the first occurrence of \`target\` in \`lst\`. If \`target\` is not in \`lst\`, returns -1. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a function that takes two strings as input and returns the total number of characters in both strings combined.","solution":"def total_characters(string1, string2): Returns the total number of characters in both input strings combined. return len(string1) + len(string2)"},{"question":"Create a function that checks if the given string is a palindrome or not. A palindrome is a string that remains the same when its characters are reversed.","solution":"def is_palindrome(s): Checks if the given string is a palindrome. A palindrome is a string that reads the same backward as forward. :param s: The string to check. :return: True if the string is a palindrome, False otherwise. # Convert string to lower case to make the check case-insensitive s = s.lower() # Remove all non-alphanumeric characters s = ''.join(char for char in s if char.isalnum()) # Check if the string reads the same forward and backward return s == s[::-1]"},{"question":"Create a function that takes a string as input, reverses the string, and then adds the reversed string to the original string. For example, the input \\"hello\\" should return \\"helloolleh\\".","solution":"def reverse_and_add(original_str): Reverses the input string and concatenates it with the original string. Parameters: original_str (str): The original string to be reversed and concatenated. Returns: str: The concatenated string of original and its reverse. reversed_str = original_str[::-1] return original_str + reversed_str"},{"question":"Create a function that takes a string and returns true if all characters in the string are in ascending order, and false otherwise. For example, the string \\"abcde\\" should return true, while \\"bacde\\" should return false.","solution":"def is_ascending(s): Returns true if all characters in the string are in ascending order, and false otherwise. return all(s[i] <= s[i + 1] for i in range(len(s) - 1))"},{"question":"Create a function that accepts an array and uses a bubble sort algorithm to sort the array in ascending order.","solution":"def bubble_sort(arr): Sorts an array in ascending order using the bubble sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes in two integers as parameters and determines whether they are co-prime or not. Two numbers are said to be co-prime if their highest common factor (HCF) is 1.","solution":"import math def are_coprime(a, b): Determines whether two integers a and b are co-prime. Parameters: a (int): First integer. b (int): Second integer. Returns: bool: True if a and b are co-prime, False otherwise. return math.gcd(a, b) == 1"},{"question":"Create a function that takes a string as input and reverses each word in the string in Python.","solution":"def reverse_each_word(string): Takes a string and reverses each word in the string. Parameters: string (str): The input string. Returns: str: A string with each word reversed. return ' '.join(word[::-1] for word in string.split())"},{"question":"Create a function that determines the longest string in a list that contains only uppercase letters. If there are strings with the same length and they are the longest, return the first one found. If the list is empty or contains no strings with only uppercase letters, return an empty string.","solution":"def longest_uppercase_string(strings): Determines the longest string in the list that contains only uppercase letters. If there are strings with the same length and they are the longest, returns the first one found. If the list is empty or contains no strings with only uppercase letters, returns an empty string. result = \\"\\" for string in strings: if string.isupper() and len(string) > len(result): result = string return result"},{"question":"Create a function that can remove all unused spaces in a given string and return the string with the remaining spaces compacted. For example, the string \\" My String \\" should be transformed to \\"MyString\\".","solution":"def remove_unused_spaces(s): Returns the string with all unused spaces removed. return ''.join(s.split())"},{"question":"Create a function that will take an arbitrary number of arguments and return their sum. Here's the part I'm confused about thing is, how would I create a function that accepts an arbitrary number of arguments, I know that it should take \`*args\` as the parameter but how can I make sure that only integers and floats are accepted and the sum of them is returned?","solution":"def sum_numbers(*args): Returns the sum of all the provided arguments. Only integers and floats are accepted. Args: *args: A variable number of arguments that are integers or floats. Returns: float: The sum of all the provided numbers. Raises: TypeError: If any of the arguments is not an integer or a float. total = 0 for arg in args: if not isinstance(arg, (int, float)): raise TypeError(f\\"Unsupported type: {type(arg)}. Only integers and floats are accepted.\\") total += arg return total"},{"question":"Create a function that checks if a given number is divisible by each number in the range 2 to 10 without leaving any remainder.","solution":"def is_divisible_by_range(num): Returns True if num is divisible by every number from 2 to 10, inclusive. Returns False otherwise. for i in range(2, 11): if num % i != 0: return False return True"},{"question":"Create a function that takes a sentence as input and returns the length of the longest word in that sentence.","solution":"def longest_word_length(sentence): Returns the length of the longest word in the given sentence. words = sentence.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"Create a function that takes an array and an integer \`n\`, and returns a new array with the first \`n\` elements of the original array and the rest filled with zeros.","solution":"def fill_with_zeros(arr, n): Takes an array and an integer \`n\`, returns a new array with the first \`n\` elements of the original array and the rest filled with zeros. result = arr[:n] + [0] * (len(arr) - n) return result"},{"question":"Create a function that takes a non-empty SortedList and a target value as input. The function should return the least upper bound of the target value in the list. An upper bound is defined as the smallest element in the list that is greater than the target value. If the target is greater than or equal to every element in the list, the function should return None.","solution":"def least_upper_bound(sorted_list, target): Finds the least upper bound of the target value in a sorted list. Parameters: sorted_list (list): A list of sorted integers. target (int): The target value. Returns: int/None: The least upper bound of the target value or None if no upper bound exists. for element in sorted_list: if element > target: return element return None"},{"question":"Create a function that takes a positive integer and returns a list of its prime factors. Prime factors are the prime numbers that divide the integer without leaving a remainder. For example, the prime factors of 18 are [2, 3, 3] because 18 = 2 * 3 * 3.","solution":"def prime_factors(n): Returns a list of prime factors of the given positive integer n. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a function that takes in two strings, and returns True if the second string is a rotation of the first string, and False otherwise. For example, if the first string is \\"waterbottle\\" and the second is \\"erbottlewat\\", the function should return True since \\"erbottlewat\\" is just a rotation of \\"waterbottle\\".","solution":"def is_rotation(s1, s2): Returns True if s2 is a rotation of s1, otherwise False. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Create a function that takes an array of numbers and returns the size of the largest continuous subarray whose sum is less than or equal to \`k\`.","solution":"def largest_subarray_with_sum_less_than_k(arr, k): Returns the size of the largest continuous subarray whose sum is less than or equal to k. Parameters: arr (list of int): The array of numbers. k (int): The sum threshold. Returns: int: Size of the largest continuous subarray with sum <= k. max_len = 0 current_sum = 0 start = 0 for end in range(len(arr)): current_sum += arr[end] while current_sum > k: current_sum -= arr[start] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Create a function that replaces all the characters in a string that are not alphanumeric and not a special character ('^', '', '*', '.', '+', '?', '|', '(', ')', '[', ']', '{', '}', '', '/', '<', '>', '!', '@', '#', '', '%', '&', '*', '(', ')', '-', '_', '=', '+', ',', '.', '/', ';', \\":\\", '\\"', \\"'\\", unterminated, improperly formatted or otherwise invalid escape sequences in a string.","solution":"import re def replace_invalid_characters(text): Replaces all the characters in a string that are not alphanumeric and not a special character. # Define the valid characters: alphanumeric + the given special characters valid_chars = r'[^a-zA-Z0-9^*.+?|()[]{}/<>,!@#%&*()-_=+/;:\\"']' return re.sub(valid_chars, '', text)"},{"question":"Create a function that takes a string as an input and returns a string containing only the uppercase letters from the input. You should use a for loop to iterate through the string and a conditional statement to check if a character is uppercase. If it is, add it to a result list. Finally, join the result list into a string before returning it.","solution":"def extract_uppercase_letters(input_string): Returns a string containing only the uppercase letters from the input string. result = [] for char in input_string: if char.isupper(): result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of integers as input and returns the maximum number of unique triplets (a, b, c) from the list such that a + b + c equals zero. The function should have a time complexity of O(n^2).","solution":"def find_zero_sum_triplets(nums): Returns the maximum number of unique triplets (a, b, c) from the list such that a + b + c equals zero. Each triplet is sorted in ascending order within the tuple. The function has a time complexity of O(n^2). nums.sort() triplets = set() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: continue # skip same element to avoid duplicate triplets left, right = i + 1, len(nums) - 1 while left < right: curr_sum = nums[i] + nums[left] + nums[right] if curr_sum == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif curr_sum < 0: left += 1 else: right -= 1 return len(triplets)"},{"question":"Create a function that takes in a positive integer as an argument. The function should return a list of its prime factors in ascending order. For example, the prime factors of 12 are 2, 2, and 3, so the function should return [2, 2, 3].","solution":"def prime_factors(n): Returns a list of the prime factors of the given positive integer n in ascending order. factors = [] divisor = 2 while n >= divisor: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a function that takes an integer as an argument and returns a new integer that represents the sum of all the even numbers in the given integer. The integer can be positive or negative. You also need to validate the input to make sure it's an integer.","solution":"def sum_of_even_digits(number): Returns the sum of all even digits in the given integer. If the input is not an integer, raise a ValueError. if not isinstance(number, int): raise ValueError(\\"Input must be an integer\\") number = abs(number) # Take the absolute value to handle negative numbers return sum(int(digit) for digit in str(number) if int(digit) % 2 == 0)"},{"question":"Create a function that calculates the factorial of a number using both recursive and iterative methods. Then, compare the efficiency of both approaches.","solution":"import time def factorial_recursive(n): Returns the factorial of n using recursive method. if n == 0: return 1 else: return n * factorial_recursive(n-1) def factorial_iterative(n): Returns the factorial of n using iterative method. result = 1 for i in range(1, n+1): result *= i return result def compare_efficiency(n): Compares the efficiency of recursive and iterative methods for calculating the factorial of n. Returns a tuple with the times taken by the recursive and iterative methods respectively. # Measure time for recursive method start_time = time.time() factorial_recursive(n) recursive_time = time.time() - start_time # Measure time for iterative method start_time = time.time() factorial_iterative(n) iterative_time = time.time() - start_time return (recursive_time, iterative_time)"},{"question":"Create a function that takes two lists of integers and returns a list containing the unique integers present in both lists, sorted in ascending order. The function should also handle cases where one or both lists are empty.","solution":"def find_common_unique_sorted(list1, list2): Returns a sorted list of unique integers present in both input lists. # Find the common integers in both lists common_integers = set(list1).intersection(set(list2)) # Return the sorted list of unique common integers return sorted(common_integers)"},{"question":"Create a function that accepts a string and returns a new string where every character in the original string is repeated twice. For instance, the input 'hello' would result in the output 'hheelllloo'.","solution":"def double_characters(s): Returns a string where every character in the input string is repeated twice. return ''.join([char * 2 for char in s])"},{"question":"Create a function that takes a list of integers, filters out the even numbers, and returns a new list containing only odd numbers. Write the function in Python.","solution":"def filter_odd_numbers(numbers): Takes a list of integers and returns a new list containing only odd numbers. Args: numbers (list): List of integers. Returns: list: A list containing only odd numbers from the input list. return [num for num in numbers if num % 2 != 0]"},{"question":"Create a function that takes two sorted lists and returns a sorted list containing the unique elements from both lists.","solution":"def merge_unique_sorted_lists(list1, list2): Takes two sorted lists and returns a sorted list containing the unique elements from both lists. merged_list = sorted(set(list1).union(set(list2))) return merged_list"},{"question":"Create a function that checks if a given number is a perfect square. A perfect square is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared, while 14 is not. Your function should return \`true\` if the number is a perfect square, and \`false\` otherwise. The function should handle both positive and negative numbers, as well as zero.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. A perfect square is an integer that is the square of another integer. if n < 0: return False root = int(math.sqrt(n)) return root * root == n"},{"question":"Create a function that takes an integer as an input and prints \\"FizzBuzz\\" for multiples of three and five, \\"Fizz\\" for multiples of three, \\"Buzz\\" for multiples of five, and the number itself for all other numbers. Here's the challenge: you should only use a for loop to accomplish this task.","solution":"def fizz_buzz(n): Prints \\"FizzBuzz\\" for multiples of three and five, \\"Fizz\\" for multiples of three, \\"Buzz\\" for multiples of five, and the number itself for all other numbers. for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"question":"Create a function that calculates the power of a base number to an exponent without using the built-in power function. How would you approach this problem?","solution":"def power(base, exponent): Returns the result of raising base to the power of exponent. if exponent == 0: return 1 if exponent < 0: base = 1 / base exponent = -exponent result = 1 for _ in range(exponent): result *= base return result"},{"question":"Create a function that takes a list of integers and returns a new list with each number multiplied by 2. Use Python programming language.","solution":"def multiply_by_two(numbers): Takes a list of integers and returns a new list with each number multiplied by 2. Args: numbers (list): A list of integers. Returns: list: A new list with each number multiplied by 2. return [number * 2 for number in numbers]"},{"question":"Create a function that generates a random string of a specified length consisting of lowercase letters.","solution":"import random import string def generate_random_string(length): Generate a random string of specified length consisting of lowercase letters. Parameters: length (int): The length of the random string to generate. Returns: str: A random string of the specified length. return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))"},{"question":"Create a function that will return the greatest value among all the digits of a number in Python.","solution":"def greatest_digit(num): Returns the greatest digit in the given number. num_str = str(num) max_digit = max(int(digit) for digit in num_str if digit.isdigit()) return max_digit"},{"question":"Create a function that takes in a dictionary as an argument and returns the dictionary sorted by its keys in descending order. The function should handle cases where the dictionary has nested dictionaries.","solution":"def sort_dict_by_keys_desc(d): Sorts a dictionary by its keys in descending order, handling nested dictionaries. Args: d (dict): The dictionary to sort. Returns: dict: A new dictionary sorted by keys in descending order. sorted_dict = {} for key in sorted(d.keys(), reverse=True): if isinstance(d[key], dict): sorted_dict[key] = sort_dict_by_keys_desc(d[key]) else: sorted_dict[key] = d[key] return sorted_dict"},{"question":"Create a function that takes in a list of numbers and returns the sum of the list if the list contains only integers. If the list contains any non-integer values, the function should return -1.","solution":"def sum_integers(lst): Returns the sum of the list if it contains only integers. If the list contains any non-integer values, returns -1. if all(isinstance(x, int) for x in lst): return sum(lst) else: return -1"},{"question":"Create a function that takes a list of strings and returns the one with the maximum length. If there are multiple with the same length, return the first one encountered.","solution":"def longest_string(strings): Returns the longest string from a list of strings. If there are multiple strings with the same maximum length, the first one encountered is returned. if not strings: return None max_length = -1 longest = None for s in strings: if len(s) > max_length: max_length = len(s) longest = s return longest"},{"question":"Create a function that validates the credentials (username and password) entered by a user and returns \`True\` if they are correct and \`False\` otherwise. Assume the correct credentials are \\"admin\\" and \\"password123\\". The function should handle empty inputs as invalid.","solution":"def validate_credentials(username, password): Validates the provided username and password. Args: username (str): The username entered by the user. password (str): The password entered by the user. Returns: bool: True if the credentials are correct, False otherwise. correct_username = \\"admin\\" correct_password = \\"password123\\" if not username or not password: return False return username == correct_username and password == correct_password"},{"question":"Create a function that takes an integer and returns its factorial using recursion. Ensure that the function should handle large numbers, and consider using a language that supports arbitrary precision arithmetic (like Python).","solution":"def factorial(n): Returns the factorial of a non-negative integer \`n\` using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes an array of integers and returns the maximum sum of subarrays using Kadane's algorithm. Explain the solution and the algorithm in detail.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a string as input and returns true if the string contains a repeated substring pattern. Otherwise, it returns false.","solution":"def repeated_substring_pattern(s): Returns True if the string contains a repeated substring pattern, otherwise False. if not s: return False ss = (s + s)[1:-1] return s in ss"},{"question":"Create a function that checks if a given item name is in the list and also checks if the quantity is greater than or equal to a specified threshold.","solution":"def check_item_and_quantity(item_list, item_name, threshold): Checks if the given item name is in the item list and its quantity is greater than or equal to the specified threshold. Parameters: item_list (list of tuples): Each tuple contains an item name and its quantity. item_name (str): The name of the item to check. threshold (int): The quantity threshold to check against. Returns: bool: True if the item is found and its quantity is >= threshold, else False. for item in item_list: if item[0] == item_name: return item[1] >= threshold return False"},{"question":"Create a function that takes an array of integers and a string representing the operation to be performed. The function should perform the specified operation on the elements of the array and return the result as a new array. The operations include addition (+), multiplication (*), and division (/).","solution":"def perform_operation(arr, operation): Performs the specified operation on the elements of the array and returns the result as a new array. Parameters: arr (list of int): Array of integers operation (str): Operation to be performed. One of '+', '*', '/' Returns: list of int: New array after performing the operation if not arr: return arr if operation == '+': return [element + element for element in arr] elif operation == '*': return [element * element for element in arr] elif operation == '/': return [element / 2 for element in arr if element != 0] else: raise ValueError(\\"Unsupported operation. Please use one of '+', '*', '/'\\")"},{"question":"Create a function that takes a string as input and returns the string with all the vowels replaced by the next vowel in the sequence \\"aeiou\\". Also, make sure that the function handles both upper and lower case vowels and returns the modified string.","solution":"def replace_vowels(s): This function takes a string as input and returns the string with all the vowels replaced by the next vowel in the sequence 'aeiou'. It handles both uppercase and lowercase vowels. vowels = \\"aeiou\\" next_vowel = {v: vowels[(i + 1) % len(vowels)] for i, v in enumerate(vowels)} next_vowel.update({v.upper(): next_vowel[v].upper() for v in vowels}) return ''.join(next_vowel.get(char, char) for char in s)"},{"question":"Create a function that takes two lists of integers, list1 and list2, and returns a new list containing only the elements that are in both lists but not in the intersect between list1 and list2.","solution":"def symmetric_difference(list1, list2): Returns a list containing elements that are in list1 or list2 but not in both. set1 = set(list1) set2 = set(list2) return list(set1.symmetric_difference(set2))"},{"question":"Create a function that takes a string and a character as input and returns the count of occurrences of the character in the string. The function should be case-insensitive and should count both upper and lower case instances of the character.","solution":"def count_occurrences(s, char): Returns the count of occurrences of char in s, case insensitive. return s.lower().count(char.lower())"},{"question":"Create a function that takes a string as input and returns the longest substring with the maximum number of vowels. A vowel is defined as one of the following characters: 'a', 'e', 'i', 'o', 'u'.","solution":"def longest_vowel_substring(s): Returns the longest substring with the maximum number of vowels in the given string. vowels = set('aeiou') max_vowel_count = 0 max_length_substring = \\"\\" current_substring = \\"\\" current_vowel_count = 0 for char in s: if char in vowels: current_substring += char current_vowel_count += 1 else: if current_vowel_count > max_vowel_count: max_vowel_count = current_vowel_count max_length_substring = current_substring elif current_vowel_count == max_vowel_count: if len(current_substring) > len(max_length_substring): max_length_substring = current_substring current_substring = \\"\\" current_vowel_count = 0 if current_vowel_count > max_vowel_count: max_length_substring = current_substring elif current_vowel_count == max_vowel_count: if len(current_substring) > len(max_length_substring): max_length_substring = current_substring return max_length_substring"},{"question":"Create a function that validates the data type of input parameters in Python. The function should accept a variable number of arguments and validate the data type of each argument against a list of expected types. If all arguments match their expected types, the function returns \`True\`; otherwise, it returns \`False\`. If an expected type is not provided, the function should default to checking if the argument is of any type (\`Any\`).","solution":"from typing import Any, List, Tuple def validate_types(args: Tuple, expected_types: List[type]) -> bool: Validate the data type of each argument against the expected types. Parameters: args (tuple): A tuple of arguments to validate. expected_types (list): A list of expected data types. If not provided, the type validation defaults to \`Any\`. Returns: bool: True if all arguments match their expected types, False otherwise. for i, arg in enumerate(args): expected_type = expected_types[i] if i < len(expected_types) else Any if expected_type is Any: continue if not isinstance(arg, expected_type): return False return True"},{"question":"Create a function that converts a given string into a \\"spaced string\\". A \\"spaced string\\" is a string where each character is separated by a space. For example, \\"hello\\" becomes \\"h e l l o\\".","solution":"def spaced_string(s): Converts a given string into a \\"spaced string\\" where each character is separated by a space. :param s: Input string :return: Spaced string return ' '.join(s)"},{"question":"Create a function that takes a list of integers and returns the sum of the squares of only even numbers in the list. If there are no even numbers or the list is empty, the function should return 0. The function should be implemented in Python.","solution":"def sum_of_squares_of_even_numbers(numbers): Returns the sum of the squares of only even numbers in the list. If there are no even numbers or the list is empty, returns 0. return sum(x ** 2 for x in numbers if x % 2 == 0)"},{"question":"Create a function that takes in the number of items (n) and an array (arr) as arguments. The function should return an array of all prime numbers between the smallest and largest numbers in the given array.","solution":"def sieve_of_eratosthenes(max_num): primes = [True] * (max_num + 1) p = 2 while (p * p <= max_num): if primes[p] == True: for i in range(p * p, max_num + 1, p): primes[i] = False p += 1 prime_numbers = [] for p in range(2, max_num + 1): if primes[p]: prime_numbers.append(p) return prime_numbers def find_primes_between_min_max(n, arr): if n == 0 or not arr: return [] min_num = min(arr) max_num = max(arr) prime_numbers = sieve_of_eratosthenes(max_num) return [p for p in prime_numbers if min_num <= p <= max_num]"},{"question":"Create a function that checks if a string contains any of the words \\"hello\\" or \\"hi\\" at the beginning of the string, followed by any number of spaces, and then any number of letters (excluding spaces). The function should return \\"Match found!\\" if the pattern is found, and \\"No match.\\" if not.","solution":"import re def check_greeting(s): Checks if the string contains the words \\"hello\\" or \\"hi\\" at the beginning, followed by any number of spaces and then any number of letters. Args: s (str): The string to be checked. Returns: str: \\"Match found!\\" if the pattern is found, else \\"No match.\\" pattern = r'^(hello|hi)s*[a-zA-Z]*' if re.match(pattern, s): return \\"Match found!\\" else: return \\"No match.\\""},{"question":"Create a function that takes a single string as an input and returns the number of uppercase and lowercase letters in the string.","solution":"def count_upper_and_lower(s): Returns the number of uppercase and lowercase letters in the given string. Parameters: s (str): Input string Returns: tuple: A tuple containing the number of uppercase letters and the number of lowercase letters in the format (uppercase_count, lowercase_count) uppercase_count = 0 lowercase_count = 0 for char in s: if char.isupper(): uppercase_count += 1 elif char.islower(): lowercase_count += 1 return uppercase_count, lowercase_count"},{"question":"Create a function that takes two strings, a and b, as arguments. The function should return a new string composed of the first string (a) followed by a space, the second string (b), and a space, and finally the concatenation of every corresponding character from the first and second string combined.","solution":"def combine_strings(a, b): Takes two strings a and b as arguments and returns a new string composed of a followed by a space, then b followed by a space, then the concatenation of corresponding characters from a and b. combined = ''.join(x + y for x, y in zip(a, b)) if len(a) > len(b): combined += a[len(b):] elif len(b) > len(a): combined += b[len(a):] return f\\"{a} {b} {combined}\\""},{"question":"Create a function that checks whether a number is odd or even. You should return true if the number is odd, and false if the number is even. The function should be able to handle very large integers.","solution":"def is_odd(number): Returns True if the number is odd, and False if the number is even. return number % 2 == 1"},{"question":"Create a function that finds the maximum number in a list of integers. However, ensure that the function handles empty lists by returning \`None\`. If the list contains non-integer values, the function should raise a ValueError.","solution":"def find_max(nums): Returns the maximum number in a list of integers. Handles empty lists by returning None and raises ValueError if list contains non-integer values. if not nums: return None if any(not isinstance(x, int) for x in nums): raise ValueError(\\"All elements must be integers\\") return max(nums)"},{"question":"Create a function that prints the Fibonacci sequence up to n terms. The function should handle edge cases such as when n is less than or equal to 0, and when n is a floating-point number.","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to n terms. If n is less than or equal to 0 or not an integer, return an appropriate message. if not isinstance(n, int) or n <= 0: return \\"Input must be a positive integer.\\" sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that takes an array of integers, where each integer is in the range [0, 255], and an integer k, as inputs. The function should return the length of the longest subarray where the difference between the maximum and minimum values in that subarray is at most k.","solution":"def longest_subarray(nums, k): Returns the length of the longest subarray where the difference between the maximum and minimum values is at most k. Parameters: nums (list of int): Array of integers in the range [0, 255]. k (int): The allowed maximum difference between the maximum and minimum values. Returns: int: The length of the longest such subarray. from collections import deque # Two deques to store indices of the maximum and minimum values of the subarray max_deque, min_deque = deque(), deque() left = 0 max_length = 0 for right in range(len(nums)): while max_deque and nums[max_deque[-1]] <= nums[right]: max_deque.pop() while min_deque and nums[min_deque[-1]] >= nums[right]: min_deque.pop() max_deque.append(right) min_deque.append(right) while nums[max_deque[0]] - nums[min_deque[0]] > k: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Create a function that takes two parameters: an array of strings \`arr\` and a string \`str\`. The function should return the count of strings in the array that have the substring \`str\` present in them.","solution":"def count_substring_occurrences(arr, substr): Returns the count of strings in the array \`arr\` that contain the substring \`substr\`. Parameters: - arr: list of strings - substr: string Returns: int: count of strings in the array that contain the substring return sum(substr in string for string in arr)"},{"question":"Create a function that takes in a list of strings and returns the longest string in the list. If the list is empty, the function should return \`None\`.","solution":"def longest_string(strings): Returns the longest string in the list of strings. If the list is empty, returns None. Args: strings (list): A list of strings. Returns: str: The longest string in the list or None if the list is empty. if not strings: return None return max(strings, key=len)"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the squares of these integers. The function should handle both positive and negative integers. Use list comprehension for this task.","solution":"def square_integers(int_list): Takes a list of integers and returns a new list containing the squares of these integers. return [x**2 for x in int_list]"},{"question":"Create a function that checks whether a given string is a palindrome or not. A palindrome is a string that reads the same backward as forward. Also, write a check function to test your function using several test cases.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. A palindrome is a string that reads the same backward as forward. s = s.replace(\\" \\", \\"\\").lower() # Normalize the string by removing spaces and converting to lower case return s == s[::-1]"},{"question":"Create a function that will check if all the values in an array are the same.","solution":"def all_values_same(arr): Returns True if all values in the array are the same, otherwise False. if not arr: return True first_value = arr[0] for value in arr: if value != first_value: return False return True"},{"question":"Create a function that can convert a given string to its corresponding integer. How can a binary string be converted to a decimally using Python, without using in-built conversion functions like int()?","solution":"def binary_to_decimal(binary_str): Converts a binary string to its corresponding decimal integer. decimal_value = 0 power = 0 for digit in reversed(binary_str): if digit == '1': decimal_value += 2 ** power power += 1 return decimal_value"},{"question":"Create a function that takes a string and returns the frequency count of each character in the string. The function should ignore case sensitivity and return the frequency in a dictionary where keys are characters and values are their frequencies.","solution":"def char_frequency(s): Returns the frequency count of each character in the string s, ignoring case sensitivity. s = s.lower() freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that takes an integer as input and returns the result of dividing the integer by 2 and adding 3 to the quotient. If the input is not divisible by 2, the function should divide the integer by 2, round down to the nearest whole number, add 3 to the quotient, and return the result. If the input is 0, return a custom error message \\"Cannot divide by zero\\".","solution":"def divide_and_add(integer): Takes an integer input, divides it by 2, rounds down, and adds 3 to the quotient. If the input is 0, returns \\"Cannot divide by zero\\". if integer == 0: return \\"Cannot divide by zero\\" quotient = integer // 2 result = quotient + 3 return result"},{"question":"Create a function that receives an array of integers and returns the most frequent number in the array. If there are multiple numbers with the same frequency, return the smallest one. How can I solve this problem?","solution":"from collections import Counter def most_frequent_number(arr): Returns the most frequent number in the array. If there are multiple numbers with the same frequency, return the smallest one. if not arr: return None count = Counter(arr) max_frequency = max(count.values()) most_frequent_numbers = [num for num, freq in count.items() if freq == max_frequency] return min(most_frequent_numbers)"},{"question":"Create a function that will take a list of integers as a parameter and return a list of the sums of each pair of adjacent numbers in the input list.","solution":"def sum_adjacent_pairs(numbers): Returns a list of the sums of each pair of adjacent numbers. :param numbers: List of integers :return: List of sums of adjacent pairs if not numbers or len(numbers) == 1: return [] return [numbers[i] + numbers[i+1] for i in range(len(numbers) - 1)]"},{"question":"Create a function that takes an integer \`n\` and returns a list of Fibonacci numbers up to \`n\`, but only include those Fibonacci numbers that are even.","solution":"def even_fibonacci(n): Returns a list of even Fibonacci numbers up to n. fib_list = [] a, b = 0, 1 while a <= n: if a % 2 == 0: fib_list.append(a) a, b = b, a + b return fib_list"},{"question":"Create a function that takes two binary strings as input and returns their binary sum as a string. For example, if the input is \\"10\\" and \\"11\\", the function should return \\"101\\";","solution":"def add_binary(a, b): Returns the sum of two binary strings as a binary string. # convert binary strings to integers int_a = int(a, 2) int_b = int(b, 2) # sum the integers int_sum = int_a + int_b # convert the sum back to a binary string binary_sum = bin(int_sum)[2:] return binary_sum"},{"question":"Create a function that returns a sorted list in descending order.","solution":"def sort_descending(lst): Returns the input list sorted in descending order. Parameters: lst (list): A list of elements to be sorted. Returns: list: A list sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Create a function that checks if a given string is a valid IP address in both IPv4 and IPv6 formats. Return \\"Valid IPv4\\", \\"Valid IPv6\\", or \\"Neither\\". A valid IPv4 address is in the form of \\"A.B.C.D\\", where A, B, C, and D are integers from 0 to 255. An IPv6 address is in the form of \\"A:B:C:D:E:F:G:H\\", where A, B, C, D, E, F, G, and H are hexadecimal numbers from 0 to FFFF. Here is a sample input: \\"192.168.1.1\\" and \\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\\".","solution":"import re def is_valid_ip_address(ip): Check if the given string is a valid IPv4 or IPv6 address. Args: ip (str): The IP address string to check. Returns: str: \\"Valid IPv4\\" if the IP address is valid IPv4, \\"Valid IPv6\\" if the IP address is valid IPv6, \\"Neither\\" if the IP address is neither valid IPv4 nor valid IPv6. def is_valid_ipv4(ip): pattern = re.compile(r'^(d{1,3}.){3}d{1,3}') if not pattern.match(ip): return False parts = ip.split('.') for part in parts: if not 0 <= int(part) <= 255: return False return True def is_valid_ipv6(ip): pattern = re.compile(r'^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}') if not pattern.match(ip): return False return True if is_valid_ipv4(ip): return \\"Valid IPv4\\" elif is_valid_ipv6(ip): return \\"Valid IPv6\\" else: return \\"Neither\\""},{"question":"Create a function that takes a list and an integer \`x\`. The function should return a new list where every \`x\`th element from the original list is included in the new list. For example, if the original list is \`[1, 2, 3, 4, 5, 6, 7, 8, 9]\` and \`x\` is 2, the function should return \`[1, 3, 5, 7, 9]\`.","solution":"def take_every_xth(lst, x): Returns a new list containing every xth element from the original list. Parameters: lst (list): The original list. x (int): The step interval. Returns: list: A new list containing every xth element from the original list. if x <= 0: raise ValueError(\\"x must be a positive integer\\") return [lst[i] for i in range(0, len(lst), x)]"},{"question":"Create a function that takes in an array of integers and returns the two largest numbers in the array. The function should have a time complexity of O(n).","solution":"def two_largest_numbers(arr): Returns the two largest numbers in the array. if len(arr) < 2: return \\"Array should have at least two numbers\\" first = second = float('-inf') for num in arr: if num > first: second = first first = num elif num > second: second = num return first, second"},{"question":"Create a function that takes a list of integers and returns the number of unique pairs that can be formed with those integers. A pair is defined as unique if the integers in the pair are different. The order of the numbers in the pair does not matter, meaning ((1,2)) is considered the same as ((2,1)).","solution":"def unique_pairs(lst): Returns the number of unique pairs that can be formed with the integers in the list. A pair is defined as unique if the integers in the pair are different. unique_numbers = list(set(lst)) n = len(unique_numbers) return n * (n - 1) // 2"},{"question":"Create a function that calculates the total cost of a shopping list where each item might be purchased multiple times. The function should take a dictionary where the keys are item names and the values are the prices of each item. It should also take a list of tuples, where each tuple represents an item purchased and the count of that item. The function should return the total cost of the items purchased.","solution":"def calculate_total_cost(prices, items_purchased): Calculates the total cost of a shopping list. :param prices: Dictionary with keys as item names and values as item prices. :param items_purchased: List of tuples, where each tuple contains an item name and the quantity purchased. :return: Total cost of the items purchased. total_cost = 0 for item, count in items_purchased: if item in prices: total_cost += prices[item] * count return total_cost"},{"question":"Create a function that takes an array of integers and returns the minimum number of jumps required to reach the last element of the array where each element of the array represents the maximum jump length at that position. For example, given the array \`[2, 3, 1, 1, 4]\`, the function should return \`2\` because the minimum number of jumps to reach the last index is two: jump from index 0 to index 1, then jump from index 1 to index 4.","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the last element of the array. Parameters: arr (List[int]): List of integers where each element represents the maximum jump length at that position. Returns: int: Minimum number of jumps required to reach the last index. n = len(arr) if n <= 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] step = arr[0] jump = 1 for i in range(1, n): if i == n - 1: return jump max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"Create a function that takes a string location, and constructs a URL from that string. The function should take into account parameters such as protocol, subdomain, domain, and extension. It should also handle cases where optional parameters are not provided.","solution":"def construct_url(protocol=\\"http\\", subdomain=\\"\\", domain=\\"\\", extension=\\"com\\"): Constructs a URL from the provided parameters. Parameters: - protocol: The protocol to use, e.g., 'http', 'https'. Default is 'http'. - subdomain: The subdomain to use, e.g., 'www'. Default is an empty string. - domain: The domain name, e.g., 'example'. Default is an empty string. - extension: The domain extension, e.g., 'com', 'net'. Default is 'com'. Returns: - A string representing the constructed URL. if domain == \\"\\": raise ValueError(\\"Domain must be provided\\") url = f\\"{protocol}://\\" if subdomain: url += f\\"{subdomain}.\\" url += f\\"{domain}.{extension}\\" return url"},{"question":"Create a function that calculates whether it is possible to convert a quadratic equation into a perfect square trinomial (PST) using a given number of operations. Each operation consists of adding or subtracting a constant to/from one of the terms in the equation. The PST is a quadratic equation that forms a perfect square.","solution":"def can_convert_to_pst(a, b, c, operations): Determines if it's possible to convert the quadratic equation a*x^2 + b*x + c into a perfect square trinomial with a given number of operations. An operation is defined as adding or subtracting a constant to/from one of the terms in the equation. Parameters: a (int): Coefficient of x^2 b (int): Coefficient of x c (int): Constant term operations (int): Available number of operations Returns: bool: True if conversion is possible with the given operations, otherwise False # A quadratic equation is a perfect square trinomial if it matches (px + q)^2 = p^2*x^2 + 2*p*q*x + q^2 # We have a*x^2 + b*x + c, and it must match p^2*x^2 + 2*p*q*x + q^2 # Therefore we must have: # a = p^2 # b = 2*p*q # c = q^2 # Check if a is a perfect square import math if int(math.sqrt(a))**2 != a: return False p = int(math.sqrt(a)) # We need: 2 * p * q = b and q^2 = c # Rearrange to find q: q = b / (2 * p) if b % (2 * p) != 0: # if b is not divisible by 2 * p, it can't be a perfect square trinomial return False q = b // (2 * p) # Now check if q^2 equals c, or if it can be adjusted with the given number of operations target_c = q**2 # Calculate the difference between current c and target c difference_c = abs(c - target_c) # Check if the number of operations required is within the allowed range if difference_c <= operations: return True else: return False"},{"question":"Create a function that checks if a given string is a palindrome (a string that reads the same forwards and backwards). The function should return \`True\` if the string is a palindrome and \`False\` otherwise. Make sure to include a few test cases to verify the correctness of your function.","solution":"def is_palindrome(s): Checks if the given string is a palindrome. Parameters: s (str): Input string to check Returns: bool: True if the string is a palindrome, False otherwise sanitized = ''.join(c.lower() for c in s if c.isalnum()) return sanitized == sanitized[::-1]"},{"question":"Create a function that converts minutes and seconds into a formatted time string, like \\"HH:MM:SS\\". How can I achieve this in Python?","solution":"def time_format(minutes, seconds): Converts minutes and seconds into a formatted time string \\"HH:MM:SS\\". total_seconds = minutes * 60 + seconds hours = total_seconds // 3600 remaining_seconds = total_seconds % 3600 minutes = remaining_seconds // 60 seconds = remaining_seconds % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"Create a function that converts an array of integers into a binary tree. Each node in the binary tree should contain a value from the array. The function should insert the values in the order they are found in the array, creating a complete binary tree. Write the function in Python.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def array_to_binary_tree(arr): Converts an array of integers into a complete binary tree. :param arr: List[int], array of integers :return: TreeNode, the root of the binary tree if not arr: return None nodes = [TreeNode(val) for val in arr] for i in range(len(arr) // 2): left_index = 2 * i + 1 right_index = 2 * i + 2 if left_index < len(arr): nodes[i].left = nodes[left_index] if right_index < len(arr): nodes[i].right = nodes[right_index] return nodes[0]"},{"question":"Create a function that takes a string as an input and returns the number of alphabetical characters in the string.","solution":"def count_alpha_characters(s): Returns the number of alphabetical characters in the input string. return sum(1 for char in s if char.isalpha())"},{"question":"Create a function that takes a variable number of string arguments and returns the longest string among them.","solution":"def longest_string(*args): Returns the longest string from the given arguments. Parameters: *args (str): Variable number of string arguments. Returns: str: The longest string among the input strings. If there are multiple strings with the same maximum length, returns the first one encountered. if not args: return \\"\\" return max(args, key=len)"},{"question":"Create a function that checks if a number is a perfect cube. The function should be named is_perfect_cube and should take one argument, a number n. It should return True if n is a perfect cube, and False otherwise. You should consider both positive and negative numbers, as well as zero.","solution":"def is_perfect_cube(n): Checks if a number is a perfect cube. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect cube, False otherwise. if n == 0: return True abs_n = abs(n) cube_root = round(abs_n ** (1.0 / 3.0)) return cube_root ** 3 == abs_n"},{"question":"Create a function that takes a positive integer as input and returns the integer with its digits reversed. For example, if the input is 123, the function should return 321. Note that the function should handle multiple digits and ensure that the reversed number does not exceed the integer limit in Python (typically 2^31 - 1).","solution":"def reverse_integer(n): Returns the integer with its digits reversed. Parameters: n (int): A positive integer Returns: int: An integer with its digits reversed if n < 0: raise ValueError(\\"Input must be a positive integer\\") # Convert integer to string, reverse it and convert it back to integer reversed_int = int(str(n)[::-1]) return reversed_int"},{"question":"Create a function that takes a string as an argument and returns a new string with each character's case swapped.","solution":"def swap_case(s): Returns a new string with each character's case swapped. return s.swapcase()"},{"question":"Create a function that takes an array of integers and returns the array sorted in a zigzag pattern.","solution":"def zigzag_sort(arr): Sorts the array in a zigzag pattern. A zigzag pattern is defined such that each adjacent set of elements do not maintain a strictly increasing or decreasing order, meaning arr[0] < arr[1] > arr[2] < arr[3] > ... :param arr: List of integers to be sorted :return: List of integers sorted zigzag-wise arr.sort() for i in range(1, len(arr)-1, 2): arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"Create a function that accepts a pointer to a struct Person, and modifies its fields based on certain conditions.","solution":"class Person: def __init__(self, name, age, location): self.name = name self.age = age self.location = location def update_person(person): Modifies the fields of the person based on certain conditions: - If the person's age is less than 18, set location to 'School'. - If the person's age is 65 or older, set location to 'Retirement Home'. - If the person's name starts with 'A', set location to 'VIP Lounge'. if person.age < 18: person.location = 'School' elif person.age >= 65: person.location = 'Retirement Home' if person.name.startswith('A'): person.location = 'VIP Lounge'"},{"question":"Create a function that accepts a string as an argument and returns a version of that string where all non-alphanumeric characters have been removed. You can assume that the input string will only contain alphabetical letters, spaces, and punctuation.","solution":"import re def remove_non_alphanumeric(s): Returns a version of the input string s with all non-alphanumeric characters removed. return re.sub(r'[^a-zA-Z0-9]', '', s)"},{"question":"Create a function that takes a string and a dictionary as input and returns a new dictionary with keys from the string and values from the dictionary passed as input.","solution":"def create_dict_from_string_and_input_dict(string, input_dict): Creates a new dictionary from the given string and dictionary. Characters from the string form the keys of the new dictionary. Values of those keys are taken from the input dictionary. return {char: input_dict[char] for char in string if char in input_dict}"},{"question":"Create a function that accepts two integer arrays and returns a new array containing the common elements between the two arrays. If there are no common elements, the function should return an empty array. The function should aim to be efficient and handle large arrays comfortably.","solution":"def common_elements(arr1, arr2): Returns a list containing the common elements between the two input lists. :param arr1: List of integers :param arr2: List of integers :return: List of common integers set1 = set(arr1) set2 = set(arr2) return list(set1 & set2)"},{"question":"Create a function that accepts an array and returns the sum of its elements, but only for the elements that are greater than 0.","solution":"def sum_positive_elements(arr): Returns the sum of elements in arr that are greater than 0. return sum(x for x in arr if x > 0)"},{"question":"Create a function that generates all possible combinations of elements from given two lists and then finds the maximum sum of pairs from these combinations.","solution":"from itertools import product def max_sum_of_combinations(list1, list2): Returns the maximum sum of pairs formed by combinations of elements from list1 and list2. max_sum = -float('inf') for a, b in product(list1, list2): if a + b > max_sum: max_sum = a + b return max_sum"},{"question":"Create a function that can take an array of numbers (arrayA) and a positive integer n, such that it returns the n-th largest number from arrayA. If n is greater than the length of arrayA, throw an exception. The function should be efficient and handle edge cases appropriately.","solution":"def nth_largest(arrayA, n): Returns the n-th largest number from arrayA. If n is greater than the length of arrayA, raises a ValueError. if len(arrayA) < n: raise ValueError(\\"n is greater than the length of the array\\") sorted_array = sorted(arrayA, reverse=True) return sorted_array[n - 1]"},{"question":"Create a function that takes a string as input and returns the longest palindromic substring within that string. For example, if the input string is \\"babad\\", the function should return \\"bab\\" or \\"aba\\", as both are valid longest palindromic substrings. If there are multiple substrings with the same length, the function should return the first one encountered.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring within the input string. if len(s) == 0: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Check for odd-length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Check for even-length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Create a function that will return the factorial of a number, given the number as an input. Factorial of a number is the product of an integer and all the integers below it, starting from 1 up to that given number. For instance, the factorial of 5 is 15, since 5*4*3*2*1 = 15. If the number is less than 0, return \\"Input must be a non-negative integer\\".","solution":"def factorial(n): Returns the factorial of the given non-negative integer n. If n is negative, returns \\"Input must be a non-negative integer\\". if n < 0: return \\"Input must be a non-negative integer\\" elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that accepts a positive integer and return the sum of the squares of its digits. Also, handle the exception for invalid input values.","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of a positive integer n. Raises ValueError if n is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") return sum(int(digit) ** 2 for digit in str(n))"},{"question":"Create a function that checks if a given string \`s\` is a palindrome. A palindrome is a string that reads the same backward as forward. You should ignore case and non-alphanumeric characters when determining if a string is a palindrome. For example, \\"A man, a plan, a canal, Panama\\" is a palindrome when considering case insensitivity and ignoring non-alphanumeric characters.","solution":"import re def is_palindrome(s): Check if a given string \`s\` is a palindrome. Ignores case and non-alphanumeric characters. Parameters: s (str): The string to check. Returns: bool: True if \`s\` is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Create a function that displays all prime numbers up to a given number n. For example, if n is 20, the output should be 2, 3, 5, 7, 11, 13, 17, 19.","solution":"def prime_numbers_up_to(n): Returns a list of all prime numbers up to a given number n. if n < 2: return [] primes = [] for num in range(2, n+1): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes a string \`s\` and checks if the string contains repeated patterns of characters. It should return \`True\` if there are repeated patterns, otherwise return \`False\`.","solution":"def has_repeated_pattern(s): Returns True if the string contains repeated patterns of characters, otherwise False. if not s: return False n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: pattern = s[:i] if pattern * (n // i) == s: return True return False"},{"question":"Create a function that takes as input a string and returns a new string with the first character of each word capitalized. For example, 'hello world' should turn into 'Hello World'.","solution":"def capitalize_words(s): Takes a string and returns a new string with the first character of each word capitalized. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that takes in an array of integers and returns a new array with all the duplicates removed. The order of the elements should be preserved. You are not allowed to use any built-in methods or libraries that directly solve this problem.","solution":"def remove_duplicates(arr): Returns a new array with all duplicates removed while preserving the order of elements. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes a number, n, and returns a list of integers up to n (inclusive).","solution":"def generate_list(n): Returns a list of integers from 1 up to and including n. return list(range(1, n+1))"},{"question":"Create a function that finds all the unique elements in a given input parameter. If the input parameter is a list or a tuple, the function should return a list of its unique elements. If the input parameter is a dictionary, the function should return a list of its unique keys. If the input parameter is a string, the function should return a list of its unique characters, ignoring duplicates.","solution":"def find_unique_elements(input_param): Returns a list of unique elements in the input parameter. - For list or tuple: returns unique elements. - For dict: returns unique keys. - For string: returns unique characters ignoring duplicates. if isinstance(input_param, (list, tuple)): return list(set(input_param)) elif isinstance(input_param, dict): return list(set(input_param.keys())) elif isinstance(input_param, str): return list(set(input_param)) else: raise TypeError(\\"Unsupported input type. Only list, tuple, dict, and str are allowed.\\")"},{"question":"Create a function that calculates the area of a triangle given its base and height. The function should take two parameters, base and height, and return the area calculated using the formula area = (base * height) / 2.","solution":"def triangle_area(base, height): Returns the area of a triangle given its base and height. return (base * height) / 2"},{"question":"Create a function that takes a string of space-separated numbers and returns a vector containing the count of positive, negative, and zero numbers.","solution":"def count_numbers(s): Returns a vector [count of positive numbers, count of negative numbers, count of zero numbers] from a string of space-separated numbers. numbers = map(int, s.split()) positives, negatives, zeros = 0, 0, 0 for num in numbers: if num > 0: positives += 1 elif num < 0: negatives += 1 else: zeros += 1 return [positives, negatives, zeros]"},{"question":"Create a function that takes in two parameters - a string and a character. The function should return a substring containing all characters of the original string that come after the last occurrence of the given character. If the character is not found in the string, the function should return an empty string.","solution":"def get_substring_after_last_occurrence(s, c): Returns a substring containing all characters of the given string that come after the last occurrence of the given character. Parameters: s (str): The input string. c (str): The character to find in the string. Returns: str: Substring after the last occurrence of the character. Returns an empty string if the character is not found. index = s.rfind(c) if index == -1: return \\"\\" else: return s[index+1:]"},{"question":"Create a function that designed to search for a specific value in a sorted array and return its index if found. If the value is not found, return -1. Additionally, ensure that your solution is optimized for performance.","solution":"def binary_search(arr, target): Performs binary search on a sorted array to find the index of the target value. Returns the index if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes a list of integers as an argument. This function will divide each number in the list by 2.5 and return a new list with the results.","solution":"def divide_by_2_5(numbers): Takes a list of integers and divides each number by 2.5. Args: numbers (list of int): List of integers to be divided. Returns: list of float: List of results after division. return [number / 2.5 for number in numbers]"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, and returns their intersection, meaning a list of elements that are present in both lists. The intersection should contain unique elements only.","solution":"def list_intersection(list1, list2): Returns the intersection of two lists, i.e., a list of unique elements that are present in both lists. return list(set(list1) & set(list2))"},{"question":"Create a function that takes in a list of integers and returns a new list containing the elements of the original list but sorted in descending order. If the input list is empty or contains none integers, the function should return an empty list. Additionally, the function should handle unexpected data gracefully, ensuring that non-integer values are not included in the sorted list.","solution":"def sort_descending(inp_list): Takes a list of integers and returns a new list containing the elements of the original list sorted in descending order. If the input list is empty or contains non-integers, it returns an empty list. if not isinstance(inp_list, list): return [] filtered_list = [x for x in inp_list if isinstance(x, int)] if not filtered_list: return [] return sorted(filtered_list, reverse=True)"},{"question":"Create a function that sums up all the numbers in an array.","solution":"def sum_array(arr): Sums up all the numbers in an array. Parameters: arr (list of int/float): The list of numbers to sum up. Returns: int/float: The sum of all the numbers in the array. return sum(arr)"},{"question":"Create a function that takes a list of integers and returns the median of these integers. If the list has an even number of elements, the median should be the average of the two middle numbers.","solution":"def median(lst): Returns the median of a list of integers. If the list length is even, returns the average of the two middle numbers. sorted_lst = sorted(lst) n = len(sorted_lst) mid = n // 2 if n % 2 == 1: return sorted_lst[mid] else: return (sorted_lst[mid - 1] + sorted_lst[mid]) / 2"},{"question":"Create a function that sums the squares of the given sequence \`sequence\`","solution":"def sum_of_squares(sequence): Returns the sum of the squares of the given sequence. Parameters: sequence (list or tuple): A sequence of numbers. Returns: int or float: The sum of the squares of the numbers in the sequence. return sum(x**2 for x in sequence)"},{"question":"Create a function that takes an array of integers, removes duplicates, and then rearranges the elements in ascending order. The function should be able to handle an array of any size and return the sorted array without duplicates.","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from the array and sorts it in ascending order. Parameters: arr (list of int): The input array of integers. Returns: list of int: The sorted array without duplicates. return sorted(set(arr))"},{"question":"Create a function that takes in a dictionary where the keys are integers and the values are lists. The function should return a new dictionary with the same keys but with lists that only contain unique elements.","solution":"def unique_elements_dict(input_dict): Takes a dictionary with integer keys and list values, and returns a dictionary with lists containing only unique elements. return {key: list(set(value)) for key, value in input_dict.items()}"},{"question":"Create a function that takes an array of strings as input and returns a new array with the strings in reverse order.","solution":"def reverse_strings(strings): Returns a new array with the strings in reverse order. return strings[::-1]"},{"question":"Create a function that sorts an array using the Bubble Sort algorithm. The function should return the sorted array.","solution":"def bubble_sort(arr): Sorts an array using the Bubble Sort algorithm. Parameters: arr (list): A list of numerical values to sort. Returns: list: The sorted list in ascending order. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes an array of integers and returns the number of unique triplets in the array that sum up to zero. A triplet is a set of three distinct elements in the array.","solution":"def three_sum_zero(arr): This function returns the number of unique triplets in the array that sum up to zero. arr.sort() n = len(arr) unique_triplets = set() for i in range(n-2): if i > 0 and arr[i] == arr[i-1]: continue left, right = i+1, n-1 while left < right: total = arr[i] + arr[left] + arr[right] if total == 0: triplet = (arr[i], arr[left], arr[right]) unique_triplets.add(triplet) while left < right and arr[left] == arr[left+1]: left += 1 while left < right and arr[right] == arr[right-1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return len(unique_triplets)"},{"question":"Create a function that takes an array of integers and returns the sum of all even numbers in the array. You should also include error handling to ensure that the input is indeed an array of integers.","solution":"def sum_of_evens(arr): Returns the sum of all even numbers in the array. Parameters: arr (list): List of integers Returns: int: Sum of all even integers in the array if not isinstance(arr, list): raise ValueError('Input must be a list.') sum_evens = 0 for num in arr: if not isinstance(num, int): raise ValueError('All elements of the array must be integers.') if num % 2 == 0: sum_evens += num return sum_evens"},{"question":"Create a function that takes an integer array as an input and returns the smallest number in the array. If the array is empty, return a specific message or value.","solution":"def find_smallest_number(arr): Returns the smallest number in the input array. If the array is empty, returns 'Array is empty'. if not arr: return 'Array is empty' return min(arr)"},{"question":"Create a function that takes in an array of numbers and returns a new array of numbers that is sorted in ascending order.","solution":"def sort_array(arr): Returns a new array that is sorted in ascending order. Parameters: arr (list): A list of numbers. Returns: list: A new list with numbers sorted in ascending order. return sorted(arr)"},{"question":"Create a function that takes an array of integers and returns the second smallest number in the array. If the array has less than two unique numbers, the function should return -1.","solution":"def second_smallest(array): Returns the second smallest unique number in the array. If the array has less than two unique numbers, returns -1. unique_numbers = list(set(array)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"Create a function that will insert a specified element into a given list at a specific position. The function should also handle cases where the index is out of bounds by either inserting at the end or not inserting at all, depending on the \`out_of_bounds\` parameter.","solution":"def insert_element(lst, element, position, out_of_bounds='end'): Inserts an element into a given list at a specified position. :param lst: List where the element will be inserted. :param element: Element to insert. :param position: Index at which to insert the element. :param out_of_bounds: If 'end', inserts at the end if position is out of bounds. If 'ignore', does not insert if position is out of bounds. :return: Modified list with the element inserted. if position < 0 or position >= len(lst): if out_of_bounds == 'end': lst.append(element) # If out_of_bounds is 'ignore', don't do anything else: lst.insert(position, element) return lst"},{"question":"Create a function that takes a string and returns a new string with each character replaced by the character that is 2 places later in the alphabet. For example, 'a' becomes 'c', 'b' becomes 'd', etc. The function should handle both uppercase and lowercase letters, and also non-alphabetical characters should remain unchanged.","solution":"def shift_characters(s): Returns a new string with each character replaced by the character that is 2 places later in the alphabet. def shift_char(c): if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + 2) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + 2) % 26 + ord('A')) else: return c return ''.join(shift_char(c) for c in s)"},{"question":"Create a function that accepts an array of integers and returns the sum of the elements. However, the sum should only include elements whose indices are multiples of three.","solution":"def sum_indices_multiple_of_three(arr): Returns the sum of the elements in 'arr' whose indices are multiples of three. return sum(value for index, value in enumerate(arr) if index % 3 == 0)"},{"question":"Create a function that takes two lists of numbers and returns a new list containing only the numbers that are present in both lists, without duplicates.","solution":"def common_elements(list1, list2): Returns a list containing only the numbers that are present in both lists, without duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that takes two numbers, a and b, and returns their sum. If a is not a number, convert it to a number before the operation. If b is also not a number, convert it to a number before the operation. If both a and b are not numbers, return 0.","solution":"def convert_to_number(value): Attempt to convert the value to a number. If it fails, return None. try: return float(value) except (ValueError, TypeError): return None def sum_with_conversion(a, b): Return the sum of a and b after converting them to numbers. If both cannot be converted, return 0. a = convert_to_number(a) b = convert_to_number(b) if a is None and b is None: return 0 return (a or 0) + (b or 0)"},{"question":"Create a function that takes an integer n as input and returns the sum of all distinct prime factors of n.","solution":"def sum_of_prime_factors(n): Returns the sum of all distinct prime factors of n. if n <= 1: return 0 sum_factors = 0 # Check for 2 as a prime factor if n % 2 == 0: sum_factors += 2 while n % 2 == 0: n //= 2 # Check for odd numbers greater than 2 factor = 3 while factor * factor <= n: if n % factor == 0: sum_factors += factor while n % factor == 0: n //= factor factor += 2 # If n is a prime number greater than 2 if n > 2: sum_factors += n return sum_factors"},{"question":"Create a function that takes two parameters: a string and a character. The function should find all the positions of the character in the string and return them as a list of indices. If the character is not found in the string, return an empty list.","solution":"def find_char_positions(s, char): Returns a list of indices where the character is found in the string. Parameters: s (str): The string to search in. char (str): The character to search for. Returns: List[int]: A list of indices where the character is found. return [i for i, c in enumerate(s) if c == char]"},{"question":"Create a function that checks whether a given string is a palindrome ignoring case sensitivity. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. For example, \\"Racecar\\" is considered a palindrome ignoring case. How can we implement this?","solution":"def is_palindrome(s): Checks whether a given string is a palindrome ignoring case sensitivity. Args: s (str): Input string to check Returns: bool: True if the string is a palindrome, False otherwise # Convert the string to lowercase to ensure case insensitivity s = s.lower() # Check if the string reads the same backward as forward return s == s[::-1]"},{"question":"Create a function that takes in a string and returns True if all characters in the string are unique, and False otherwise. You should ignore case sensitivity and all non-alphabetical characters.","solution":"def are_all_characters_unique(s): Returns True if all alphabetic characters in the string are unique (case insensitive), and False otherwise. Non-alphabetic characters are ignored. s = s.lower() seen = set() for char in s: if char.isalpha(): if char in seen: return False seen.add(char) return True"},{"question":"Create a function that generates a list of dictionaries, each representing a person with their name, age, and city of residence. The function should allow for a variable number of arguments, where each argument is a tuple containing a person's name, age, and city. The function should return the list of dictionaries. demonstrate the function with an example.","solution":"def generate_person_list(*args): Generates a list of dictionaries, each representing a person with their name, age, and city of residence. The function accepts a variable number of arguments, where each argument is a tuple containing a person's name, age, and city. :param args: Tuples containing person's name, age, and city. :return: List of dictionaries. person_list = [] for arg in args: if len(arg) != 3: raise ValueError(\\"Each argument must be a tuple of 3 elements (name, age, city).\\") name, age, city = arg person_list.append({\\"name\\": name, \\"age\\": age, \\"city\\": city}) return person_list # Example example_person_list = generate_person_list((\\"John Doe\\", 30, \\"New York\\"), (\\"Jane Smith\\", 25, \\"Los Angeles\\")) print(example_person_list)"},{"question":"Create a function that takes one argument, a list of dictionaries, and return a dictionary that contains the count of each value in each dictionary. For example, given the list of dictionaries \`[{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 2, 'b': 2}]\`, the function should return \`{'1': 2, '2': 2, '3': 1}\`.","solution":"def count_values(list_of_dicts): Takes a list of dictionaries and returns a dictionary that contains the count of each value in each dictionary. value_count = {} for dictionary in list_of_dicts: for value in dictionary.values(): value = str(value) if value in value_count: value_count[value] += 1 else: value_count[value] = 1 return value_count"},{"question":"Create a function that prompts a user to enter a number within a specific range. The function will keep asking for input until the user enters a valid number within the desired range.","solution":"def get_number_in_range(prompt, min_value, max_value): Prompts the user to enter a number between min_value and max_value (inclusive). Keeps asking until a valid number is entered. while True: try: user_input = float(input(prompt)) if min_value <= user_input <= max_value: return user_input else: print(f\\"Please enter a number between {min_value} and {max_value}.\\") except ValueError: print(\\"Invalid input. Please enter a valid number.\\")"},{"question":"Create a function that takes two parameters, \`arr1\` and \`arr2\`, both of which are lists of strings. The function should return a new list containing only the strings that are present in both \`arr1\` and \`arr2\`, without any duplicates. The comparison should be case-insensitive.","solution":"def common_strings(arr1, arr2): Returns a list of strings that appear in both arr1 and arr2, case-insensitive and without duplicates. # Convert all strings to lower case and use sets for common elements without duplicates set1 = set(s.lower() for s in arr1) set2 = set(s.lower() for s in arr2) common_set = set1.intersection(set2) # Return the list of common strings return list(common_set)"},{"question":"Create a function that takes an integer as an argument and returns the number of prime numbers that are less than the given integer. For example, if you input 10, the function should return 4, as there are 4 prime numbers less than 10 (2, 3, 5, 7).","solution":"def count_primes(n): Returns the number of prime numbers less than n. if n <= 2: return 0 sieve = [True] * n sieve[0], sieve[1] = False, False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(sieve)"},{"question":"Create a function that takes a string of text and returns the string with all the vowels removed. I am using python.","solution":"def remove_vowels(text): Returns the text with all vowels removed. vowels = \\"aeiouAEIOU\\" return \\"\\".join([char for char in text if char not in vowels])"},{"question":"Create a function that takes in a string and a substring as parameters and returns the number of times the substring appears in the string. You need to implement this function without using the built-in \`count\` method in Python.","solution":"def count_substring(string, substring): Returns the number of times the substring appears in the string. if not string or not substring: return 0 count = 0 substr_len = len(substring) for i in range(len(string) - substr_len + 1): if string[i:i + substr_len] == substring: count += 1 return count"},{"question":"Create a function that realizes the classic game of \\"FizzBuzz\\". This function should accept a single integer argument, \`n\`, and print each number from 1 to \`n\` on a new line. But for multiples of three, print \\"Fizz\\" instead of the number, for multiples of five, print \\"Buzz\\" instead of the number, and for multiples of both three and five, print \\"FizzBuzz\\".","solution":"def fizzbuzz(n): Prints numbers from 1 to n with replacement rules: - For multiples of three, print \\"Fizz\\" - For multiples of five, print \\"Buzz\\" - For multiples of both three and five, print \\"FizzBuzz\\" for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"question":"Create a function that takes an integer n and returns a list of prime numbers less than n using the Sieve of Eratosthenes algorithm. Ensure your function is well-documented and includes a check function to validate its correctness with a few test cases.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers less than n using the Sieve of Eratosthenes algorithm. :param n: An integer up to which prime numbers are to be found. :return: A list of prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]]"},{"question":"Create a function that takes a string and returns a dictionary where the keys are the unique characters in the string and the values are their corresponding ASCII numeric values (int).","solution":"def char_to_ascii_dict(s): Returns a dictionary where the keys are unique characters in the string and the values are their corresponding ASCII numeric values. return {char: ord(char) for char in set(s)}"},{"question":"Create a function that takes three integers as input and returns the sum of the three integers.","solution":"def sum_of_three(a, b, c): Returns the sum of a, b, and c. return a + b + c"},{"question":"Create a function that takes three string parameters a, b, and c. How can I ensure that each string is of the same length? If the strings are not of the same length, how can I modify the function to pad the shorter strings with a space character until all strings have the same length?","solution":"def pad_strings(a, b, c): Ensures that each string (a, b, c) is of the same length by padding the shorter strings with space characters from the right. Args: a (str): The first string. b (str): The second string. c (str): The third string. Returns: tuple: A tuple containing the three strings, all of the same length. max_length = max(len(a), len(b), len(c)) a_padded = a.ljust(max_length) b_padded = b.ljust(max_length) c_padded = c.ljust(max_length) return a_padded, b_padded, c_padded"},{"question":"Create a function that takes an array of integers and returns the maximum absolute difference between any two elements in the array.","solution":"def max_absolute_difference(arr): Returns the maximum absolute difference between any two elements in the array. if not arr: return 0 max_elem = max(arr) min_elem = min(arr) return abs(max_elem - min_elem)"},{"question":"Create a function that accepts three arguments: an integer and two strings. The function should return the integer multiplied by the length of the combined string of the two input strings. For example, if the input integer is 2, and the input strings are \\"hello\\" and \\"world\\", the output should be 14 because the length of \\"helloworld\\" is 10, and 2 * 10 equals 20.","solution":"def multiply_by_combined_length(number, string1, string2): Multiplies the input number by the length of the combined input strings. Parameters: number (int): The integer to be multiplied. string1 (str): The first string. string2 (str): The second string. Returns: int: Result of number multiplied by the length of the combined strings. combined_length = len(string1 + string2) return number * combined_length"},{"question":"Create a function that generates a random password of specified length with a mix of uppercase letters, lowercase letters, digits, and special characters. Then, build a unit test to validate this function.","solution":"import random import string def generate_random_password(length): Generates a random password of the specified length with a mix of uppercase letters, lowercase letters, digits, and special characters. if length < 4: # Need at least one of each type of character raise ValueError(\\"Password length must be at least 4.\\") characters = { 'uppercase': string.ascii_uppercase, 'lowercase': string.ascii_lowercase, 'digits': string.digits, 'special': string.punctuation } # Ensure at least one character from each category password = [ random.choice(characters['uppercase']), random.choice(characters['lowercase']), random.choice(characters['digits']), random.choice(characters['special']) ] # Fill the rest of the password length with random choices from all categories combined all_characters = string.ascii_letters + string.digits + string.punctuation password += random.choices(all_characters, k=length-4) # Shuffle the password to avoid predictable patterns random.shuffle(password) return ''.join(password)"},{"question":"Create a function that takes one parameter, a list of integers, and returns the index of the first occurrence of the integer 5 in the list. If 5 is not found, return -1.","solution":"def find_first_five(arr): Returns the index of the first occurrence of the integer 5 in the list. If 5 is not found, returns -1. try: return arr.index(5) except ValueError: return -1"},{"question":"Create a function that , when executed, generates 100 random integers between 1 and 1000, and then identifies and returns the three largest numbers from these integers.","solution":"import random def generate_and_find_largest_three(): Generates 100 random integers between 1 and 1000. Returns the three largest numbers from these integers. random_integers = [random.randint(1, 1000) for _ in range(100)] largest_three = sorted(random_integers, reverse=True)[:3] return largest_three"},{"question":"Create a function that returns the interleave sum of the two input vectors of integers. The interleave sum is defined as the sum of elements from each vector alternately, starting with the first element of the first vector. If the vectors are of unequal length, the remaining elements of the longer vector are added at the end.","solution":"def interleave_sum(vec1, vec2): Returns the interleave sum of two input vectors of integers. The interleave sum is defined as the sum of elements from each vector alternately, starting with the first element of the first vector. If the vectors are of unequal length, the remaining elements of the longer vector are added at the end. result = [] length1 = len(vec1) length2 = len(vec2) min_length = min(length1, length2) # Add elements alternately from each vector for i in range(min_length): result.append(vec1[i]) result.append(vec2[i]) # Add the remaining elements from the longer vector if length1 > length2: result.extend(vec1[min_length:]) else: result.extend(vec2[min_length:]) return sum(result)"},{"question":"Create a function that generates a random color represented by a hexadecimal string. Each color should be in the format '#RRGGBB'. Here, 'RR', 'GG', and 'BB' are hexadecimal strings representing the red, green, and blue components, respectively, each ranging from '00' to 'FF'.","solution":"import random def generate_random_color(): Generates a random color represented by a hexadecimal string in the format '#RRGGBB'. return f'#{random.randint(0, 255):02X}{random.randint(0, 255):02X}{random.randint(0, 255):02X}'"},{"question":"Create a function that reverses a string. For example, the input \\"hello world\\" should return \\"dlrow olleh\\".","solution":"def reverse_string(s): Reverses the input string s. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Create a function that takes an array of integers and returns the sum of all the positive elements. Write your solution in Python.","solution":"def sum_of_positive_elements(arr): Returns the sum of all positive elements in the array. :param arr: List of integers :return: Sum of positive integers return sum(x for x in arr if x > 0)"},{"question":"Create a function that generates a list of all prime numbers between two integers, \`start\` and \`end\`. The function should include the start and end integers if they are prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # Other even numbers are not prime max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def generate_primes(start, end): Generate a list of all prime numbers between the integers start and end, inclusive. return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Create a function that checks if a given string \`s\` contains only numeric characters. The function should return \`true\` if the string contains only numbers, and \`false\` otherwise. You need to implement this function without using any built-in string methods that directly check if a string is numeric.","solution":"def is_numeric(s): Checks if the given string s contains only numeric characters. Parameters: s (str): The string to check Returns: bool: True if the string contains only numeric characters, False otherwise for char in s: if char < '0' or char > '9': return False return True"},{"question":"Create a function that takes a string as an input and returns a new string where all the vowels (a, e, i, o, u) are removed from the original string. This function should only be case-sensitive, meaning lowercase and uppercase vowels should be removed separately.","solution":"def remove_vowels(input_string): This function takes a string as input and returns a new string with all vowels (a, e, i, o, u) removed. Case-sensitive removal is used. vowels = \\"aeiouAEIOU\\" return \\"\\".join(char for char in input_string if char not in vowels)"},{"question":"Create a function that checks if it's possible to insert at most one character anywhere in the string to make the string lexicographically sorted (from smallest to largest).","solution":"def can_insert_char_to_sort(s): Checks if it's possible to insert at most one character anywhere in the string to make the string lexicographically sorted. if len(s) < 2: return True insertions_needed = 0 for i in range(1, len(s)): if s[i-1] > s[i]: insertions_needed += 1 if insertions_needed > 1: return False return True"},{"question":"Create a function that takes an array of integers and returns the first even number it finds in the array. If there are no even numbers, return -1.","solution":"def first_even_number(arr): Returns the first even number in the array. If there are no even numbers, returns -1. for num in arr: if num % 2 == 0: return num return -1"},{"question":"Create a function that takes in an input list and an index, and outputs a new list ( L ) such that ( L[i] = A[i] ) for all ( i in {0, 1, ldots, 2^k - 1} , text{with} , i text{ odd} ), and ( L[i] = -A[i] ) for all ( i in {0, 1, ldots, 2^k - 1} , text{with} , i text{ even} ) where ( k ) is the number of bits required to represent the largest index in binary. For instance, if ( k = 2 ), then the list indices are ( {0, 1, 2, 3} ) and ( L ) would be ( [-A[0], A[1], -A[2], A[3]] ).","solution":"def transform_list(A): Transform the list according to the rule specified: - Set L[i] = A[i] if i is odd - Set L[i] = -A[i] if i is even :param A: List of integers :return: Transformed list L L = [] for i in range(len(A)): if i % 2 == 0: L.append(-A[i]) else: L.append(A[i]) return L"},{"question":"Create a function that translates a given number into its Morse code representation, both upper and lower case letters. The function should handle numbers 0-9 and special characters (.,?!;:()[]{}'\\"/&@#%^*+=-) but ignore spaces.","solution":"def to_morse_code(text): Converts the given text into its Morse code representation. Only handles numbers (0-9) and special characters (.,?!;:()[]{}'\\"/&@#%^*+=-). Ignores spaces. morse_code_dict = { '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', '!': '-.-.--', ';': '-.-.-.', ':': '---...', '(': '-.--.', ')': '-.--.-', '[': '-.--.', ']': '-.--.-', '{': '-.--.', '}': '-.--.-', ''': '.----.', '\\"': '.-..-.', '/': '-..-.', '&': '.-...', '@': '.--.-.', '#': '......', '': '...-..-', '%': '-----', '^': '.......', '*': '-.-.', '+': '.-.-.', '=': '-...-', '-': '-....-' } morse_representation = [] for char in text: if char in morse_code_dict: morse_representation.append(morse_code_dict[char]) return ' '.join(morse_representation)"},{"question":"Create a function that takes an array of integers as input. It should reverse the order of the integers in the array and return the new array. The integers should be stored in the same memory location as the original array. That is, you should not use a new array to store the reversed values.","solution":"def reverse_in_place(arr): Reverses the order of the integers in the array in place and returns the same array. start = 0 end = len(arr) - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"question":"Create a function that calculates the sum of all unique numbers in an array of integers. If a number is repeated, it should only be counted once. For example, given the array [1, 2, 2, 3, 4, 4, 4, 5], the function should return 15 because 1, 2, 3, 4, and 5 are unique, and their sum is 15.","solution":"def sum_of_unique_numbers(arr): Returns the sum of all unique numbers in the array. return sum(set(arr))"},{"question":"Create a function that takes an array of integers and returns a new array containing only the odd numbers from the original array, but sorted in reverse order. The function should also handle cases where the input array is empty or contains no odd numbers.","solution":"def filter_and_reverse_odds(arr): Returns a new array containing only the odd numbers from the original array, sorted in reverse order. Parameters: arr (list): A list of integers. Returns: list: A list of odd integers, sorted in reverse order. odd_numbers = [num for num in arr if num % 2 != 0] return sorted(odd_numbers, reverse=True)"},{"question":"Create a function that takes an integer as a parameter and returns the reverse of that integer. If the reversed integer exceeds the maximum or minimum value allowed for a 32-bit signed integer, return 0. A 32-bit signed integer’s maximum value is 2147483647 and its minimum value is -2147483648. Include error handling for invalid input types.","solution":"def reverse_integer(n): Reverses the given integer within the bounds of a 32-bit signed integer. Returns the reversed integer or 0 if it exceeds the 32-bit signed integer range. try: if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") sign = -1 if n < 0 else 1 reversed_int = int(str(abs(n))[::-1]) * sign if reversed_int < -2147483648 or reversed_int > 2147483647: return 0 return reversed_int except ValueError as e: raise e"},{"question":"Create a function that takes in two lists and checks if one list is a sublist of the second. A sublist is defined as a sequence of elements that appear in the same order within a list.","solution":"def is_sublist(sublist, mainlist): Returns True if sublist is a sublist of mainlist, otherwise False. if not sublist: return True sub_len = len(sublist) for i in range(len(mainlist) - sub_len + 1): if mainlist[i:i + sub_len] == sublist: return True return False"},{"question":"Create a function that takes in an array of integers and returns the first element that is both even and divisible by 3, or return -1 if no such element exists in the array.","solution":"def find_even_and_divisible_by_3(arr): Returns the first element that is both even and divisible by 3, or -1 if no such element exists in the array. :param arr: List of integers. :return: The first integer that is even and divisible by 3, or -1 if no such element exists. for num in arr: if num % 2 == 0 and num % 3 == 0: return num return -1"},{"question":"Create a function that takes an integer as input and returns the factorial of that number. The function should handle both positive and negative inputs, where a negative factorial is undefined (return None or raise an error). For positive numbers, compute the factorial using a loop.","solution":"def factorial(n): Returns the factorial of a positive integer n. If n is negative, returns None as factorial is undefined for negative numbers. if n < 0: return None elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes a list of integers and returns a new list containing only the even numbers from the original list. Write a Python function \`filter_even_numbers(numbers)\` to achieve this. For example, if the input is \`filter_even_numbers([1, 2, 3, 4, 5, 6])\`, the output should be \`[2, 4, 6]\`. Assume the input list will only contain integer values.","solution":"def filter_even_numbers(numbers): Returns a list containing only the even numbers from the input list 'numbers'. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that converts a given string to a list containing each character of the string.","solution":"def string_to_list(s): Converts a given string to a list containing each character of the string. return list(s)"},{"question":"Create a function that reverses the order of the elements in a given list. The function should take a list as an input and return a new list with the elements in reverse order. Make sure to do this without using built-in reverse functions.","solution":"def reverse_list(lst): Returns a new list with the elements of the input list in reverse order. reversed_list = [] for elem in lst: reversed_list.insert(0, elem) return reversed_list"},{"question":"Create a function that takes a positive integer n and returns a string that contains n consecutive numbers, starting from 1. The numbers should be zero-padded so that each number has the same width, and the numbers should be separated by a comma. For example, if n is 3, the function should return \\"01,02,03\\". If n is 5, the function should return \\"01,02,03,04,05\\". Ensure that all numbers are zero-padded to have at least two digits.","solution":"def consecutive_numbers(n): Returns a string containing n consecutive numbers starting from 1, each zero-padded to have at least two digits, separated by commas. return ','.join(f'{i:02d}' for i in range(1, n+1))"},{"question":"Create a function that converts a given string to a binary representation without using the built-in function. Here's the string to be converted: \\"Hello World\\".","solution":"def string_to_binary(s): Converts a given string to its binary representation without using the built-in \`bin\` function. def char_to_binary(c): return ''.join(str((ord(c) >> i) & 1) for i in range(7, -1, -1)) return ' '.join(char_to_binary(c) for c in s)"},{"question":"Create a function that adds a trailing zero to a given number. If the number is already a multiple of 10, it should simply return the number as it is.","solution":"def add_trailing_zero(n): Adds a trailing zero to the given number \`n\`. If \`n\` is already a multiple of 10, it returns \`n\` as it is. Parameters: n (int): The input number. Returns: int: The number with a trailing zero added if it is not a multiple of 10. if n % 10 == 0: return n return int(f\\"{n}0\\")"},{"question":"Create a function that takes a string of a binary number and converts it to a decimal number. The function should return the decimal equivalent as an integer. If the input string is not a valid binary number (contains characters other than '0' and '1'), the function should return None.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. If the input string is not a valid binary number, returns None. :param binary_str: A string representing a binary number :return: The decimal equivalent as an integer or None if the input is invalid if not all(char in '01' for char in binary_str): return None try: decimal_number = int(binary_str, 2) return decimal_number except ValueError: return None"},{"question":"Create a function that computes the sum of the squares of the first n natural numbers, where n is a positive integer. The function should be designed for both time and space efficiency. For instance, if n=3, the function should return 14 because (1^2 + 2^2 + 3^2 = 14).","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. Parameters: n (int): A positive integer Returns: int: Sum of squares of the first n natural numbers return (n * (n + 1) * (2 * n + 1)) // 6"},{"question":"Create a function that takes two lists of equal size and returns the sum of corresponding elements. If the lists are not of equal size, the function should return an error message.","solution":"def sum_lists(lst1, lst2): Returns a new list with the sum of corresponding elements from lst1 and lst2. If the lists are not of equal size, returns an error message. if len(lst1) != len(lst2): return \\"Error: Lists are not of equal size.\\" return [a + b for a, b in zip(lst1, lst2)]"},{"question":"Create a function that converts temperatures from Celsius to Fahrenheit. The function should take a single parameter: the temperature in Celsius, and return the temperature converted to Fahrenheit. The formula to convert Celsius to Fahrenheit is \`(Celsius * 9/5) + 32\`.","solution":"def celsius_to_fahrenheit(celsius): Converts the given temperature from Celsius to Fahrenheit. Parameters: celsius (float): Temperature in Celsius. Returns: float: Temperature in Fahrenheit. return (celsius * 9/5) + 32"},{"question":"Create a function that takes two strings as input: \`username\` and \`roles\`. The function should return a new string where each character of the \`roles\` string is appended to the \`username\` string based on the length of the \`username\`. If the \`roles\` string is longer than the \`username\`, then the characters of \`roles\` should be appended to the end of the \`username\` string.","solution":"def append_roles_to_username(username, roles): Returns a new string where each character of the roles string is appended to the username string based on the length of the username. If the roles string is longer than the username, then the characters of roles should be appended to the end of the username string. combined = '' len_username = len(username) for i in range(len(roles)): if i < len_username: combined += username[i] + roles[i] else: combined += roles[i] # If username is longer than roles, append the remaining part of username if len(username) > len(roles): combined += username[len(roles):] return combined"},{"question":"Create a function that accepts two parameters, a string and a character, and returns the substring of the given string which contains all the consecutive occurrences of the given character. If the character is not found in the string, return an empty string.","solution":"def get_consecutive_characters(s, char): Returns the substring of s that contains all the consecutive occurrences of char. Parameters: s (str): The input string. char (str): The character whose consecutive occurrences are to be found. Returns: str: The substring with all consecutive occurrences of char, or an empty string if char is not found. max_sequence = \\"\\" current_sequence = \\"\\" for c in s: if c == char: current_sequence += c else: if len(current_sequence) > len(max_sequence): max_sequence = current_sequence current_sequence = \\"\\" if len(current_sequence) > len(max_sequence): max_sequence = current_sequence return max_sequence"},{"question":"Create a function that takes a user's name, age, and a hobby as input and returns a formatted string that includes the user's name, age, and hobby in a specific format.","solution":"def format_user_info(name, age, hobby): Returns a formatted string containing the user's name, age, and hobby. Parameters: name (str): The user's name. age (int): The user's age. hobby (str): The user's hobby. Returns: str: A formatted string. return f\\"{name} is {age} years old and enjoys {hobby}.\\""},{"question":"Create a function that takes in a string and returns the string with the first letter of every word capitalized. Here is an example of the output you should get: 'HeLlO WOrLd'","solution":"def capitalize_odd_letters(s): Capitalizes the first letter of every word in the given string s. Only alphabets are considered for capitalization based on their position in the word. words = s.split() capitalized_words = [] for word in words: new_word = ''.join([char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(word)]) capitalized_words.append(new_word) return ' '.join(capitalized_words)"},{"question":"Create a function that takes as arguments two lists of strings, A and B, and returns the list that has more 'A' occurrences than 'B' occurrences. If both lists have an equal number of 'A' and 'B' occurrences, return None.","solution":"def compare_lists_by_A_B(A, B): Compares two lists of strings and returns the list with more 'A' occurrences than 'B' occurrences. If both lists have an equal number of 'A' and 'B' occurrences, return None. def count_A_and_B(lst): count_A = lst.count('A') count_B = lst.count('B') return count_A, count_B count_A_A, count_B_A = count_A_and_B(A) count_A_B, count_B_B = count_A_and_B(B) if count_A_A - count_B_A > count_A_B - count_B_B: return A elif count_A_A - count_B_A < count_A_B - count_B_B: return B else: return None"},{"question":"Create a function that takes an input string and returns the string in reverse order. Additionally, the function should also remove any leading or trailing whitespace characters.","solution":"def reverse_and_trim(s): Returns the input string reversed and with leading/trailing whitespace removed. return s.strip()[::-1]"},{"question":"Create a function that takes two strings as input and returns the number of common characters between the two strings. The function should consider both upper and lower case characters as distinct, and it should ignore case sensitivity when comparing the common characters.","solution":"def common_characters_count(s1, s2): Returns the number of common characters between two strings, case insensitive. # Convert both strings to lower case to ignore case sensitivity s1 = s1.lower() s2 = s2.lower() # Create sets of characters for both strings set1 = set(s1) set2 = set(s2) # Find the common characters common_characters = set1.intersection(set2) # Return the number of common characters return len(common_characters)"},{"question":"Create a function that takes two lists of integers as arguments. The function should first validate if the second list is a proper subset of the first list. If it is not, the function should throw an exception. Once validated, the function should return a new list that contains all elements from both lists, with no duplicates (i.e., the union of the two sets). Additionally, the resulting list should be sorted in ascending order.","solution":"def union_sorted_list_if_subset(list1, list2): Returns the sorted union of list1 and list2 if list2 is a proper subset of list1. Raises: ValueError: If list2 is not a proper subset of list1. set1 = set(list1) set2 = set(list2) if not set2.issubset(set1): raise ValueError(\\"list2 is not a proper subset of list1\\") result_set = set1.union(set2) return sorted(result_set)"},{"question":"Create a function that takes two integers as parameters and returns their difference. However, if the first integer is less than the second integer, then return the product of the two integers instead. If the first integer is equal to the second integer, then return the sum of the integers.","solution":"def calculate(a, b): Returns the difference of a and b if a is greater than b. Returns the product of a and b if a is less than b. Returns the sum of a and b if a is equal to b. if a > b: return a - b elif a < b: return a * b else: return a + b"},{"question":"Create a function that takes an integer as input and outputs a list of all prime factors of the number. The function should be efficient and work for large numbers.","solution":"def prime_factors(n): Returns a list of prime factors of the given integer n. factors = [] # Start with 2, the smallest prime number while n % 2 == 0: factors.append(2) n = n // 2 # Now check for all odd numbers from 3 upward for i in range(3, int(n ** 0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # If n is a prime number greater than 2, then add it to the list if n > 2: factors.append(n) return factors"},{"question":"Create a function that takes in two arrays of numbers (\`arr1\` and \`arr2\`) and returns an array containing the greatest value from each position compared between the two arrays. For example, if \`arr1\` has the values \`[1, 3, 5]\` and \`arr2\` has the values \`[2, 1, 6]\`, the function should return \`[2, 3, 6]\`. If either array is empty, the function should return an empty array.","solution":"def max_elements_at_positions(arr1, arr2): Returns an array containing the greatest value from each position compared between arr1 and arr2. If either array is empty, return an empty array. if not arr1 or not arr2: return [] return [max(a, b) for a, b in zip(arr1, arr2)]"},{"question":"Create a function that takes a string as input and returns a new string with every vowel replaced by the letter 'z' if it's lowercase or 'Z' if it's uppercase.","solution":"def replace_vowels(input_string): Returns a new string with every vowel replaced by 'z' if it's lowercase or 'Z' if it's uppercase. vowels = \\"aeiouAEIOU\\" return ''.join('z' if c in 'aeiou' else 'Z' if c in 'AEIOU' else c for c in input_string)"},{"question":"Create a function that takes two integers, A and B, as input. The function should return the sum of A and B. If the sum is even, divide it by 2. If the sum is odd, multiply it by 2. Return the final result.","solution":"def process_sum(a, b): Returns the processed sum of a and b. If the sum is even, divides it by 2. If the sum is odd, multiplies it by 2. total = a + b if total % 2 == 0: return total // 2 else: return total * 2"},{"question":"Create a function that takes in an array of integers, and returns the largest product of any two numbers in the array. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def largest_product_of_two(nums): Returns the largest product of any two numbers in the array. if len(nums) < 2: return None # Not enough elements to form a product # Initialize the highest and lowest values highest = max(nums[0], nums[1]) lowest = min(nums[0], nums[1]) # Initialize the highest product of two highest_product_of_2 = nums[0] * nums[1] for i in range(2, len(nums)): current = nums[i] # Update highest product of two highest_product_of_2 = max(highest_product_of_2, current * highest, current * lowest) # Update highest and lowest value highest = max(highest, current) lowest = min(lowest, current) return highest_product_of_2"},{"question":"Create a function that takes a list of integers and returns the sum of all the even numbers in the list. Use Python code.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all the even numbers in the list. Parameters: numbers (list of int): The list of integers to evaluate. Returns: int: The sum of all the even integers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that finds the maximum number without using any comparison operators '>' and '<'. You can use logical operators and arithmetic operations.","solution":"def max_number(a, b): Returns the maximum of a and b without using comparison operators. # Using the formula (a+b+|a-b|)//2 to find the maximum of two numbers return (a + b + abs(a - b)) // 2"},{"question":"Create a function that calculates the area and perimeter of a circle given its radius. Then, use this function to calculate and print the area and perimeter for a circle with radius 5.","solution":"import math def circle_area_perimeter(radius): Given the radius of a circle, calculate and return the area and perimeter. Parameters: radius (float): The radius of the circle. Returns: tuple: A tuple containing the area and the perimeter of the circle. area = math.pi * radius ** 2 perimeter = 2 * math.pi * radius return area, perimeter # Example usage for radius 5 radius = 5 area, perimeter = circle_area_perimeter(radius) print(f\\"Area: {area}, Perimeter: {perimeter}\\")"},{"question":"Create a function that takes a number as a parameter and output the Fibonacci number at that position in the sequence.","solution":"def fibonacci(n): Returns the Fibonacci number at position n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that calculates the average of a list of numbers and returns the result rounded to two decimal places.","solution":"def calculate_average(numbers): Returns the average of a list of numbers rounded to two decimal places. if not numbers: raise ValueError(\\"The list of numbers cannot be empty.\\") average = sum(numbers) / len(numbers) return round(average, 2)"},{"question":"Create a function that , given a string of text, returns a dictionary of anagrams for each word in the string.","solution":"from collections import defaultdict def find_anagrams(text): Given a string of text, returns a dictionary of anagrams for each word in the string. Args: text (str): The input string. Returns: dict: A dictionary where the keys are words and the values are sets of anagrams from the text. words = text.split() anagrams = defaultdict(set) # Populate anagrams dictionary for word in words: sorted_word = ''.join(sorted(word)) anagrams[sorted_word].add(word) # Convert the dictionary to have original words as keys result = {} for word in words: sorted_word = ''.join(sorted(word)) result[word] = anagrams[sorted_word] return result"},{"question":"Create a function that reverses the order of the words in a string. The function should ignore leading and trailing spaces and return a cleaned string with the words in reverse order.","solution":"def reverse_words(sentence): Reverse the order of words in a given sentence. Leading and trailing spaces are ignored. # Split the sentence by spaces to extract words and remove extra spaces words = sentence.strip().split() # Reverse the list of words and join them into a single string reversed_sentence = ' '.join(words[::-1]) return reversed_sentence"},{"question":"Create a function that takes two positive integers as parameters and returns the number of unique prime factors for the product of these two numbers. A prime factor is a prime number that divides a number without leaving a remainder. For example, the prime factors of 15 are 3 and 5 (since 15 = 3 * 5).","solution":"def unique_prime_factors(a, b): Returns the number of unique prime factors for the product of two positive integers. def prime_factors(n): i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return factors product = a * b return len(prime_factors(product))"},{"question":"Create a function that takes a string as input and returns the longest string made up of consecutive characters that appears at least twice in the input string. If there are multiple strings of the same maximum length, return the first one found.","solution":"def longest_consecutive_duplicate_substring(s): Returns the longest substring made up of consecutive characters that appears at least twice in the input string. If there are multiple substrings of the same maximum length, returns the first one found. n = len(s) if n == 0: return \\"\\" suffixes = sorted([s[i:] for i in range(n)]) def longest_common_prefix(str1, str2): i = 0 while i < min(len(str1), len(str2)) and str1[i] == str2[i]: i += 1 return str1[:i] longest_dup = \\"\\" for i in range(n - 1): lcp = longest_common_prefix(suffixes[i], suffixes[i + 1]) if len(lcp) > len(longest_dup): longest_dup = lcp return longest_dup"},{"question":"Create a function that returns the smallest number from a list of integers without using any built-in functions like min(), max(), sort(), etc. Additionally, the function should not use any loops or conditional statements, and should make use of the ternary operator.","solution":"def smallest_number(arr): Returns the smallest number from a list of integers using recursion and ternary operator. def find_smallest(nums, current_smallest): return current_smallest if not nums else find_smallest(nums[1:], nums[0] if nums[0] < current_smallest else current_smallest) return find_smallest(arr, arr[0])"},{"question":"Create a function that accepts an integer of any digit length and returns the sum of its digits. However, the function should handle negative numbers as well and should ignore non-integer inputs, returning \`None\` in such cases.","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. For negative numbers, consider the digits as positive (i.e. ignore the sign). If n is not an integer, return None. if not isinstance(n, int): return None return sum(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that calculates the least common multiple (LCM) of two positive integers. The function should return the LCM if it exists. If the integers are not valid or no LCM can be calculated, the function should return -1.","solution":"import math def lcm(a, b): Returns the least common multiple (LCM) of two positive integers a and b. If the integers are not valid or no LCM can be calculated, the function returns -1. if isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0: return abs(a * b) // math.gcd(a, b) else: return -1"},{"question":"Create a function that takes two parameters: a string and an integer. The function should return a new string where the characters of the input string are repeated the specified number of times. For example, if the string is \\"abc\\" and the integer is 3, the function should return \\"abcabcabc\\". If the integer is 0, the function should return an empty string.","solution":"def repeat_string(s, n): Returns a new string where the characters of the input string s are repeated n times. Parameters: s (str): The input string to be repeated. n (int): The number of times to repeat the string. Returns: str: The repeated string. return s * n"},{"question":"Create a function that takes in a list of strings and returns a new list containing only the strings that have at least one uppercase letter. How would you solve this problem using Python?","solution":"def filter_uppercase_strings(strings): Returns a new list containing only strings that have at least one uppercase letter. :param strings: List of strings. :return: List of strings with at least one uppercase letter. return [string for string in strings if any(char.isupper() for char in string)]"},{"question":"Create a function that reads in a file, processes its contents, and outputs the result to another file. The file contains lines of integers separated by spaces, and you need to compute the sum of even numbers in each line, then write the sum of even numbers for each line into an output file.","solution":"def process_file(input_file_path, output_file_path): Reads an input file, processes its contents, and writes the results to an output file. Each line in the input file contains integers separated by spaces. The function computes the sum of even numbers for each line and writes it into the output file. :param input_file_path: Path to the input file :param output_file_path: Path to the output file with open(input_file_path, 'r') as infile, open(output_file_path, 'w') as outfile: for line in infile: numbers = map(int, line.split()) even_sum = sum(num for num in numbers if num % 2 == 0) outfile.write(f\\"{even_sum}n\\")"},{"question":"Create a function that takes a pattern string and a list of files. It should return a list of files that contain the pattern. Consider case-insensitive searching. Also, consider that the files are text files.","solution":"def search_files(pattern, file_list): Returns a list of files that contain the pattern. :param pattern: str, pattern to search for in files :param file_list: list of str, filenames to search the pattern in :return: list of str, filenames that contain the pattern pattern_lower = pattern.lower() matching_files = [] for file in file_list: try: with open(file, 'r', encoding='utf-8') as f: content = f.read().lower() if pattern_lower in content: matching_files.append(file) except FileNotFoundError: continue return matching_files"},{"question":"Create a function that takes in 3 values, a lower bound, an upper bound, and the step size. The function should return a list of numbers in the sequence from the lower to the upper bound in steps of the provided step size. The upper bound does not need to be in the returned list if it does not match exactly with the next number in the sequence. For example, \`range_step(2, 8, 2)\` should return \`[2, 4, 6]\`.","solution":"def range_step(lower_bound, upper_bound, step_size): Generates a list of numbers from lower_bound to upper_bound in steps of step_size. Parameters: lower_bound (int or float): The starting value of the sequence. upper_bound (int or float): The endpoint of the sequence. step_size (int or float): The step size between values in the sequence. Returns: list: A list of numbers in the sequence. sequence = [] current_value = lower_bound while current_value < upper_bound: sequence.append(current_value) current_value += step_size return sequence"},{"question":"Create a function that takes two numbers as parameters and returns the larger of the two. If the numbers are equal, return one of the numbers. Write this function in Python.","solution":"def larger_of_two(a, b): Returns the larger of the two numbers. If they are equal, returns one of the numbers. if a >= b: return a else: return b"},{"question":"Create a function that generates a list of unique tuples containing pairs of integers where the first integer is from a given list and the second integer is a multiple of the first integer. The function should work for any list of positive integers and should return a list of tuples.","solution":"def generate_tuples(input_list): This function generates a list of unique tuples containing pairs of integers. The first integer is from the given input_list and the second integer is a multiple of the first integer. :param input_list: List of positive integers :return: List of unique tuples (a, b) where a is from input_list and b is a multiple of a result = [] seen = set() for a in input_list: for b in range(a, 101, a): # Generate multiples up to 100 for practicality. if (a, b) not in seen: result.append((a, b)) seen.add((a, b)) return result"},{"question":"Create a function that returns the first non-repeated character in a string. If there is no such character, it should return -1. The function should be case-sensitive, meaning that 'A' and 'a' are considered different characters.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string \`s\`. If there is no such character, returns -1. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that appears only once for char in s: if char_count[char] == 1: return char return -1"},{"question":"Create a function that will return the maximum profit achievable given a list of prices (where each price represents the price of a stock on a given day) and you are allowed to complete at most one transaction. Here, a transaction consists of buying and then selling one share of the stock. Note that you cannot sell a stock before you buy one.","solution":"def max_profit(prices): Returns the maximum profit achievable from a list of stock prices where only one transaction is allowed. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Create a function that takes a string and returns the length of the longest common prefix among all the prefixes of the string.","solution":"def longest_common_prefix_length(s): Returns the length of the longest common prefix among all the prefixes of the string. if not s: # if the string is empty return 0 prefix = s[0] for char in s[1:]: if char == prefix[-1]: prefix += char else: break return len(prefix)"},{"question":"Create a function that prints the Fibonacci sequence up to a given number n using recursion.","solution":"def fibonacci_sequence(n, a=0, b=1): Prints the Fibonacci sequence up to the given number n using recursion. if a > n: return print(a, end=' ') fibonacci_sequence(n, b, a + b)"},{"question":"Create a function that returns the sum of all even-valued terms in the Fibonacci sequence up to a certain limit. For example, if the limit is 10, the function should return 10 because the sequence up to 10 is 0, 1, 1, 2, 3, 5, 8, and the sum of the even terms is 2 + 8 = 10.","solution":"def sum_even_fibonacci(limit): Returns the sum of all even-valued terms in the Fibonacci sequence up to a certain limit. a, b = 0, 1 even_sum = 0 while a <= limit: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum"},{"question":"Create a function that takes a string as an input and returns the reversed version of the string. Also, ensure that the function handles edge cases, such as an empty string or a string with only whitespace.","solution":"def reverse_string(s): Returns the reversed version of the input string. return s[::-1]"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is multiplied by a given factor. The function should handle different data types within the list and return an error if the data type is not supported.","solution":"def multiply_elements(lst, factor): Takes a list of integers and returns a new list where each integer is multiplied by the given factor. If an unsupported data type is encountered, it raises a ValueError. Parameters: lst (list): List of elements to be multiplied factor (int): The factor to multiply each element by Returns: list: A new list with each element multiplied by the given factor if not isinstance(factor, (int, float)): raise ValueError(\\"Factor must be an integer or a float\\") result = [] for elem in lst: if isinstance(elem, (int, float)): result.append(elem * factor) else: raise ValueError(f\\"Unsupported data type: {type(elem)}\\") return result"},{"question":"Create a function that takes an array of integers as input and returns the sum of all numbers in the array using a for loop.","solution":"def sum_of_array(arr): Returns the sum of all numbers in the array. total = 0 for num in arr: total += num return total"},{"question":"Create a function that takes an array of integers and returns the sum of the absolute values of the integers, but only for those integers that are divisible by 3.","solution":"def sum_abs_divisible_by_3(arr): Returns the sum of the absolute values of integers in the array that are divisible by 3. :param arr: List of integers :return: Sum of absolute values of integers divisible by 3 return sum(abs(x) for x in arr if x % 3 == 0)"},{"question":"Create a function that generates a list of prime numbers between two given numbers, a and b (inclusive). The function should take two integers a and b as input and return a list of all prime numbers in the range [a, b].","solution":"def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes_between(a, b): Returns a list of all prime numbers between a and b (inclusive). return [num for num in range(a, b + 1) if is_prime(num)]"},{"question":"Create a function that can generate a maze from a given 2D array representing the maze. Each cell in the array represents either a walkable path (0) or a barrier (1). The function should return a string representation of the maze, where the walkable paths are represented by dots (.) and the barriers are represented by asterisks (*).","solution":"def generate_maze(maze_array): Generates a string representation of a maze from the given 2D array. Args: - maze_array: List[List[int]], a 2D array where each cell is either 0 (walkable path) or 1 (barrier) Returns: - str: String representation of the maze rows = len(maze_array) if rows == 0: return \\"\\" cols = len(maze_array[0]) maze_str = \\"\\" for i in range(rows): for j in range(cols): if maze_array[i][j] == 0: maze_str += \\".\\" else: maze_str += \\"*\\" if i < rows - 1: maze_str += \\"n\\" return maze_str"},{"question":"Create a function that returns a string with the keys of the object sorted in reverse order based on their value length.","solution":"def sort_keys_by_value_length(obj): Returns a string with the keys of the object sorted in reverse order based on their value length. if not isinstance(obj, dict): raise ValueError(\\"Input should be a dictionary.\\") sorted_keys = sorted(obj.keys(), key=lambda k: len(str(obj[k])), reverse=True) return \\", \\".join(sorted_keys)"},{"question":"Create a function that checks if a given list is balanced. A list is considered balanced if for every element in the list, the absolute difference between the sum of all elements before it and the sum of all elements after it is less than or equal to 1. The function should return true if the list is balanced, otherwise false. The list will contain only integers.","solution":"def is_balanced(lst): Checks if a given list is balanced. A list is considered balanced if for every element in the list, the absolute difference between the sum of all elements before it and the sum of all elements after it is less than or equal to 1. for i in range(len(lst)): sum_before = sum(lst[:i]) sum_after = sum(lst[i+1:]) if abs(sum_before - sum_after) > 1: return False return True"},{"question":"Create a function that determines the second largest number in a list. This function should be able to handle lists of integers. If the list contains less than two distinct numbers, the function should return \`None\`. If the list is empty, the function should also return \`None\`.","solution":"def second_largest(numbers): Returns the second largest distinct number in a list. If the list contains less than two distinct numbers, returns None. if len(numbers) < 2: return None first = second = None for num in numbers: if first is None or num > first: second = first first = num elif num != first and (second is None or num > second): second = num return second"},{"question":"Create a function that takes a number as an argument and returns the sum of all the odd numbers less than or equal to that number. Consider both positive and negative numbers. The function should efficiently handle large numbers as well.","solution":"def sum_of_odds(n): Returns the sum of all odd numbers less than or equal to n. if n == 0: return 0 # To handle both positive and negative numbers if n < 0: n = -n return -sum_of_odds(n) # Sum odd numbers up to the positive n sum_odds = sum(i for i in range(1, n + 1, 2)) return sum_odds"},{"question":"Create a function that takes a list as an argument and returns the list sorted in descending order without using Python's built-in \`sorted()\` function or any libraries. Implement this using a bubble sort algorithm.","solution":"def bubble_sort_descending(arr): Sorts a list in descending order using bubble sort algorithm. Parameters: arr (list): A list of numbers to be sorted. Returns: list: A list sorted in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes a sorted array of integers and a target integer. The function should return the index of the target integer in the array if found, otherwise return -1.","solution":"def binary_search(arr, target): Returns the index of target in the sorted array arr, or -1 if target is not in arr. Parameters: arr (list of int): A sorted list of integers. target (int): The integer to search for in the array. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that calculates the sum of all numbers from 1 to n (inclusive) that are divisible by either 3 or 5. If n is less than 1, the function should return 0.","solution":"def sum_divisible_by_3_or_5(n): Returns the sum of all numbers from 1 to n (inclusive) that are divisible by either 3 or 5. If n is less than 1, the function returns 0. if n < 1: return 0 return sum(i for i in range(1, n+1) if i % 3 == 0 or i % 5 == 0)"},{"question":"Create a function that generates a pseudo-random password of length \`n\` and checks if the password contains at least one digit, one uppercase letter, and one lowercase letter. The function should return \`true\` if all conditions are met, and \`false\` otherwise.","solution":"import random import string def generate_password(n): Generates a pseudo-random password of length n and checks if the password contains at least one digit, one uppercase letter, and one lowercase letter. Returns the generated password and a boolean indicating if all conditions are met. if n < 3: return '', False # Not enough room for all conditions # Ensure at least one lower case letter, one upper case letter, and one digit password_chars = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits) ] # Fill the remaining characters all_chars = string.ascii_letters + string.digits password_chars += random.choices(all_chars, k=n-3) # Shuffle the characters to ensure randomness random.shuffle(password_chars) password = ''.join(password_chars) # Check conditions has_digit = any(char.isdigit() for char in password) has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) return password, (has_digit and has_upper and has_lower)"},{"question":"Create a function that takes two variables named 'a' and 'b', and prints 'a is greater than b', 'a is less than b', or 'a is equal to b' based on the values of 'a' and 'b'.","solution":"def compare(a, b): Compares two values a and b and prints their relationship. if a > b: print('a is greater than b') elif a < b: print('a is less than b') else: print('a is equal to b')"},{"question":"Create a function that identifies the maximum number from an unsorted array of integers.","solution":"def find_max(arr): Returns the maximum number from an unsorted array of integers. if not arr: raise ValueError(\\"Array cannot be empty\\") max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num"},{"question":"Create a function that returns the number of occurrences of a given substring within a string, as well as the starting index of each occurrence. For example, given the string \\"abcabcabc\\" and the substring \\"abc\\", the function should return the count of occurrences and their starting indices. The function should work regardless of case sensitivity.","solution":"def find_substring_occurrences(main_string, substring): Returns the number of occurrences of a given substring within a string, and the starting index of each occurrence. The function is case insensitive. :param main_string: str, the string to search within :param substring: str, the substring to search for :return: tuple(int, list), the count of occurrences and a list of starting indices main_string_lower = main_string.lower() substring_lower = substring.lower() count = 0 indices = [] index = main_string_lower.find(substring_lower) while index != -1: count += 1 indices.append(index) index = main_string_lower.find(substring_lower, index + 1) return count, indices"},{"question":"Create a function that can calculate the sum of an arbitrary number of arguments and return the result. The function should be able to accept any number of numeric arguments and return the total sum of these arguments. Additionally, the function should handle the case where no arguments are passed by returning a default value of 0.","solution":"def sum_all(*args): Returns the sum of all numeric arguments passed. If no arguments are passed, returns 0. return sum(args)"},{"question":"Create a function that implements the heat equation numerically using the finite difference method with Python. The function should take four parameters: the size of the spatial domain (L), the temporal domain (T), the number of spatial points (N), and the number of temporal points (M). The function should return the heat distribution at each spatial and temporal point.","solution":"import numpy as np def heat_equation(L, T, N, M): Solves the heat equation numerically using the finite difference method. Parameters: L (float): size of the spatial domain. T (float): size of the temporal domain. N (int): number of spatial points. M (int): number of temporal points. Returns: np.ndarray: Heat distribution at each spatial and temporal point. # Spatial and temporal step sizes dx = L / (N - 1) dt = T / (M - 1) # Stability criterion alpha = dt / dx**2 # Initialize the u matrix u = np.zeros((M, N)) # Initial condition: u(x, 0) u[0, :] = 0.0 # Adjust as needed for different initial conditions # Boundary conditions: u(0, t) and u(L, t) u[:, 0] = 0.0 # Adjust as needed for different boundary conditions u[:, -1] = 0.0 # Adjust as needed for different boundary conditions # Time-stepping for k in range(0, M-1): for i in range(1, N-1): u[k+1, i] = u[k, i] + alpha * (u[k, i+1] - 2*u[k, i] + u[k, i-1]) return u"},{"question":"Create a function that takes a number n as a parameter and returns its factorial. The function should be designed to handle large numbers efficiently, ideally using Python's \`decimal\` module to avoid integer overflow.","solution":"import decimal from decimal import Decimal def factorial(n): Returns the factorial of n using the decimal module to handle large numbers. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") decimal.getcontext().prec = max(100, n) # Ensure enough precision for large n result = Decimal(1) for i in range(2, n + 1): result *= Decimal(i) return result"},{"question":"Create a function that takes an integer \`n\` and returns the sum of all numbers from 1 to \`n\` without using recursion or any iterative constructs (like for, while loops). How can you achieve this in a purely functional way?","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n using the formula for the sum of an arithmetic series. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Create a function that implements a Fibonacci sequence generator. The function should take a single integer N as input and return a list containing the first N numbers in the Fibonacci sequence.","solution":"def fibonacci_sequence(n): Returns the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that decomposes a number into its prime factors.","solution":"def prime_factors(n): Decomposes a number into its prime factors. Args: n (int): The number to decompose. Returns: List[int]: A list of prime factors of the number. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Create a function that takes a string as input and returns the number of occurrences of the substring 'abc' within it, regardless of case (upper or lower). The search should be case-insensitive.","solution":"def count_abc_occurrences(s): Counts the occurrences of the substring 'abc' in the input string regardless of case. Parameters: s (str): The input string. Returns: int: The number of 'abc' occurrences in the input string. # Convert the string to lowercase to perform a case-insensitive search s_lower = s.lower() return s_lower.count('abc')"},{"question":"Create a function that takes a single parameter: a list of integers. The function should return \`true\` if all integers in the list are even, and \`false\` otherwise.","solution":"def all_even(numbers): Returns True if all integers in the list are even, and False otherwise. return all(number % 2 == 0 for number in numbers)"},{"question":"Create a function that takes a string and returns a new string with all the characters in uppercase.","solution":"def to_uppercase(s): Takes a string and returns a new string with all characters in uppercase. return s.upper()"},{"question":"Create a function that takes an array of integers as input and returns the sum of the squares of these integers. However, if the integer is even, you should consider the negative version of it before squaring. If the integer is odd, just square the integer as is. If the number is 0, return it as is.","solution":"def sum_of_squares(arr): Takes an array of integers and returns the sum of the squares of these integers. For even integers, consider the negative version before squaring. For odd integers, square the integer as is. If the integer is 0, return it as is. total = 0 for num in arr: if num == 0: total += 0 elif num % 2 == 0: total += (-num) ** 2 else: total += num ** 2 return total"},{"question":"Create a function that takes a list of integers and returns a list of the same integers sorted in descending order. Provide the solution in Python.","solution":"def sort_descending(lst): Returns a list of the same integers sorted in descending order. Parameters: lst (list): A list of integers. Returns: list: A list of integers sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Create a function that takes in a list of strings and returns a string that is the concatenation of all the strings in the list. If the list is empty, return an empty string.","solution":"def concatenate_strings(string_list): Concatenates all the strings in the input list into a single string. Parameters: string_list (list): A list of strings to concatenate. Returns: str: The concatenated string or an empty string if the list is empty. return ''.join(string_list)"},{"question":"Create a function that converts a given string to a list of unique characters, preserving the order of their first appearance. For example, if the input string is \\"programming\\", the function should return ['p', 'r', 'o', 'g', 'a', 'm', 'i', 'n']. Note that the function should remove any duplicate characters.","solution":"def unique_characters(s): Returns a list of unique characters from the input string, preserving the order of their first appearance. Parameters: s (str): Input string. Returns: list: List of unique characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return result"},{"question":"Create a function that takes three arguments, a string, and two integers. The function should return a new string that is the original string but with the substring from the first integer index to the second integer index removed.","solution":"def remove_substring(s, start, end): This function takes a string \`s\` and two integer indices \`start\` and \`end\`, and returns a new string with the substring from \`start\` to \`end\` removed. if start < 0 or end > len(s) or start >= end: raise ValueError(\\"Invalid start and end indices\\") return s[:start] + s[end:]"},{"question":"Create a function that takes a dictionary as an input and returns the count of all unique values in the dictionary. If a value is a list, count each item in the list as a unique value. If a value is another dictionary, recursively count the unique values in that dictionary.","solution":"def count_unique_values(d): Recursively counts unique values in a dictionary. If a value is a list, counts each item in the list as a unique value. If a value is another dictionary, recursively counts unique values in that dictionary. Args: - d (dict): The input dictionary. Returns: - int: The count of unique values. unique_values = set() def recurse(input_data): nonlocal unique_values if isinstance(input_data, list): for item in input_data: recurse(item) elif isinstance(input_data, dict): for value in input_data.values(): recurse(value) else: unique_values.add(input_data) recurse(d) return len(unique_values)"},{"question":"Create a function that supports a binary search based algorithm using recursion. I want a function that takes in two lists (list1 and list2) and uses binary search to find a target value in the combined list of list1 and list2. The combined list should not exceed 1000 elements.","solution":"def binary_search_recursive(arr, target, left, right): if left > right: return -1 mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: return binary_search_recursive(arr, target, mid + 1, right) else: return binary_search_recursive(arr, target, left, mid - 1) def combined_binary_search(list1, list2, target): combined_list = sorted(list1 + list2) if len(combined_list) > 1000: raise ValueError(\\"The combined list exceeds the maximum allowed length of 1000 elements.\\") return binary_search_recursive(combined_list, target, 0, len(combined_list) - 1)"},{"question":"Create a function that accepts a 2D array of integers and returns the sum of all its elements. Ensure that your solution effectively handles edge cases, such as an empty 2D array.","solution":"def sum_2d_array(arr): Returns the sum of all elements in a 2D array. Parameters: arr (list of list of int): 2D array of integers Returns: int: Sum of all elements in the 2D array return sum(sum(row) for row in arr) if arr else 0"},{"question":"Create a function that returns true if a given string contains any of the words in the list ['apple', 'banana', 'cherry', 'date']. If the string contains any of these words, the function should return true. If it does not contain any of these words, the function should return false.","solution":"def contains_specific_words(s): Returns true if the given string contains any of the words in the list ['apple', 'banana', 'cherry', 'date'], otherwise returns false. words = ['apple', 'banana', 'cherry', 'date'] for word in words: if word in s: return True return False"},{"question":"Create a function that takes two arguments: a list of integers and a target sum. Find all unique pairs of numbers in the list that add up to the target sum. Return a list of these pairs.","solution":"def find_pairs_with_sum(nums, target): Finds all unique pairs of integers in the list that add up to the target sum. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: list of tuples: A list of unique pairs (tuples) that add up to the target sum. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"Create a function that takes an array of integers and returns an array of unique integers sorted in ascending order.","solution":"def unique_sorted_array(arr): This function takes an array of integers and returns an array of unique integers sorted in ascending order. :param arr: List of integers :return: List of unique integers sorted in ascending order return sorted(set(arr))"},{"question":"Create a function that takes a number as an input and returns a boolean value if the number is a prime number or not.","solution":"def is_prime(n): Return True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that takes a list of tuples, where each tuple consists of a string and a list of integers. The function should return a new list of tuples, where each tuple contains the original string and the sum of the integers in the list.","solution":"def sum_tuples(input_list): Given a list of tuples, where each tuple consists of a string and a list of integers, returns a new list of tuples, where each tuple contains the original string and the sum of the integers in the list. :param input_list: List[Tuple[str, List[int]]] :return: List[Tuple[str, int]] return [(item[0], sum(item[1])) for item in input_list]"},{"question":"Create a function that accepts two parameters: \`name\` (a string) and \`age\` (an integer). The function should check if the \`age\` is greater than or equal to 18 and return the string \\"合法用户\\" if it is, otherwise return the string \\"未成年人\\".","solution":"def check_legal_age(name, age): Returns '合法用户' if age is 18 or older, otherwise returns '未成年人'. if age >= 18: return \\"合法用户\\" else: return \\"未成年人\\""},{"question":"Create a function that takes two arguments, a list of numbers and a target number. The function should return \`True\` if any two distinct numbers in the list add up to the target number, and \`False\` otherwise. Use a set to keep track of numbers we've seen so far for efficient lookups.","solution":"def has_pair_with_sum(numbers, target): Returns True if there are any two distinct numbers in the list that add up to the target number. Otherwise, returns False. seen_numbers = set() for number in numbers: if target - number in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"Create a function that takes the values of two sides of a right triangle and calculates the length of the third side (hypotenuse). The function should return the length of the hypotenuse if both sides are positive, and an error message if either side is non-positive.","solution":"import math def calculate_hypotenuse(a, b): Returns the length of the hypotenuse of a right triangle given the lengths of the other two sides. If either side is non-positive, it returns an error message. if a <= 0 or b <= 0: return \\"Both sides must be positive values.\\" return math.sqrt(a**2 + b**2)"},{"question":"Create a function that takes an integer as an input and returns the reversed version of that integer as an output. Ensure that the output is also an integer.","solution":"def reverse_integer(n): Takes an integer n and returns the reversed version of that integer. # Convert the integer to string to reverse it if n < 0: reversed_str = '-' + str(n)[:0:-1] else: reversed_str = str(n)[::-1] # Convert the reversed string back to integer return int(reversed_str)"},{"question":"Create a function that can calculate the factorial of a number using both iterative and recursive methods. Additionally, provide a brief explanation for each method.","solution":"def factorial_iterative(n): Calculates the factorial of a number iteratively. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result def factorial_recursive(n): Calculates the factorial of a number recursively. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return n * factorial_recursive(n - 1)"},{"question":"Create a function that takes two lists and returns their union.","solution":"def union(list1, list2): Returns the union of two lists. return list(set(list1) | set(list2))"},{"question":"Create a function that identifies the largest sum that can be made from any contiguous subarray within a given array of integers. The function should return this largest sum. If the array is empty, the function should return \`null\`.","solution":"def max_subarray_sum(arr): Identify the largest sum that can be made from any contiguous subarray within a given array of integers. If the array is empty, return None. if not arr: return None current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that converts a list of numbers into a dictionary where each number is the key and its frequency is the value.","solution":"def list_to_frequency_dict(lst): Converts a list of numbers into a dictionary where each number is the key and its frequency is the value. Parameters: lst (list of int/float): A list of numbers. Returns: dict: A dictionary with the numbers as keys and their frequencies as values. freq_dict = {} for number in lst: if number in freq_dict: freq_dict[number] += 1 else: freq_dict[number] = 1 return freq_dict"},{"question":"Create a function that returns true if a given string contains only whitespace characters or is an empty string.","solution":"def is_whitespace_or_empty(s): Returns True if the given string contains only whitespace characters or is an empty string. Returns False otherwise. return s.strip() == ''"},{"question":"Create a function that allows a user to enter a list of numbers and then returns the sum of those numbers.","solution":"def sum_of_list(numbers): Returns the sum of a list of numbers. Parameters: numbers (list): A list of numbers. Returns: int/float: The sum of the numbers in the list. return sum(numbers)"},{"question":"Create a function that accepts two parameters, a string and an integer, and returns the string repeated the number of times specified by the integer.","solution":"def repeat_string(string, times): Repeats the given string the specified number of times. Parameters: string (str): The string to be repeated. times (int): The number of times to repeat the string. Returns: str: The resulting string after repetition. return string * times"},{"question":"Create a function that will calculate the area and perimeter of a rectangle, given its length and breadth.","solution":"def rectangle_area_perimeter(length, breadth): Returns the area and perimeter of a rectangle given its length and breadth. Parameters: length (float): The length of the rectangle. breadth (float): The breadth of the rectangle. Returns: tuple: A tuple containing the area and perimeter of the rectangle. area = length * breadth perimeter = 2 * (length + breadth) return area, perimeter"},{"question":"Create a function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are their frequencies in the list.","solution":"def count_frequencies(lst): Takes a list of integers and returns a dictionary with the count of each unique integer. frequency_dict = {} for num in lst: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return frequency_dict"},{"question":"Create a function that processes a list of integers and return the indices of all elements that are not divisible by 3.","solution":"def indices_not_divisible_by_3(lst): Returns the indices of all elements in the list that are not divisible by 3. Parameters: lst (list of int): A list of integers. Returns: list of int: A list of indices where the corresponding elements in the input list are not divisible by 3. return [index for index, value in enumerate(lst) if value % 3 != 0]"},{"question":"Create a function that converts a given number into words. For example, if the input number is 123, the function should return the string \\"One Hundred Twenty Three\\".}","solution":"def number_to_words(num): Converts a given number into words. Args: num (int): The number to be converted to words. Returns: str: The number in words. if num == 0: return \\"Zero\\" below_20 = [\\"\\", \\"One\\", \\"Two\\", \\"Three\\", \\"Four\\", \\"Five\\", \\"Six\\", \\"Seven\\", \\"Eight\\", \\"Nine\\", \\"Ten\\", \\"Eleven\\", \\"Twelve\\", \\"Thirteen\\", \\"Fourteen\\", \\"Fifteen\\", \\"Sixteen\\", \\"Seventeen\\", \\"Eighteen\\", \\"Nineteen\\"] tens = [\\"\\", \\"Ten\\", \\"Twenty\\", \\"Thirty\\", \\"Forty\\", \\"Fifty\\", \\"Sixty\\", \\"Seventy\\", \\"Eighty\\", \\"Ninety\\"] thousands = [\\"\\", \\"Thousand\\", \\"Million\\", \\"Billion\\"] def helper(n): if n == 0: return \\"\\" elif n < 20: return below_20[n] + \\" \\" elif n < 100: return tens[n // 10] + \\" \\" + helper(n % 10) else: return below_20[n // 100] + \\" Hundred \\" + helper(n % 100) res = \\"\\" for i, unit in enumerate(thousands): if num % 1000 != 0: res = helper(num % 1000) + unit + \\" \\" + res num //= 1000 return res.strip()"},{"question":"Create a function that takes a string of variable names, separates them by commas and removes any that match either a list of reserved keywords or are not valid Python identifiers. You should consider using regular expressions to match the variable names.","solution":"import re import keyword def clean_variable_names(var_names): Takes a string of variable names separated by commas, removes any that match Python reserved keywords or are not valid Python identifiers, and returns a cleaned list of valid variable names. Params: var_names (str): A string of variable names separated by commas. Returns: List[str]: A list of valid and cleaned variable names. # Split the input string by commas and strip whitespace variables = [var.strip() for var in var_names.split(',')] # Check each variable against reserved keywords and valid identifier cleaned_vars = [var for var in variables if var.isidentifier() and not keyword.iskeyword(var)] return cleaned_vars"},{"question":"Create a function that calculates the Euclidean distance between two points in a 2D space.","solution":"import math def euclidean_distance(point1, point2): Calculates the Euclidean distance between two points in 2D space. :param point1: A tuple representing the (x, y) coordinates of the first point. :param point2: A tuple representing the (x, y) coordinates of the second point. :return: The Euclidean distance between the two points. return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)"},{"question":"Create a function that takes a sorted array and a range of values. This function should return an array of elements that fall within the specified range. For example, if you are given the array: [1,2,3,4,5,6,7,8,9,10], and range [3,8], the function should return [3,4,5,6,7,8].","solution":"def filter_range(arr, start, end): Given a sorted array and a range defined by start and end, return an array of elements that fall within the specified range. :param arr: List of sorted integers :param start: Integer, the start of the range :param end: Integer, the end of the range :return: List of integers within the specified range return [x for x in arr if start <= x <= end]"},{"question":"Create a function that takes an integer \`x\` and returns the largest/minimum value between 0 and \`x\` based on its sign.","solution":"def extreme_value(x): Returns the largest or smallest value between 0 and x based on its sign. If x is positive, returns x (largest value between 0 and x). If x is negative, returns x (smallest value between 0 and x). if x >= 0: return x else: return x"},{"question":"Create a function that finds the closest value from a list to a given target value. The function should take two parameters: a list of numbers (\`numbers_list\`) and a target number (\`target\`). If the list is empty or contains a single element that equals the target, return that element as the closest match. If the list contains multiple elements, return the smallest of the closest elements.","solution":"def find_closest(numbers_list, target): Returns the value from numbers_list that is closest to the target. If multiple values are equally close, returns the smallest of those values. :param numbers_list: List of numbers to search. :param target: Target number to find the closest value to. :return: The value from numbers_list that is closest to target. if not numbers_list: # If the list is empty, return None return None closest_value = numbers_list[0] min_difference = abs(numbers_list[0] - target) for number in numbers_list[1:]: difference = abs(number - target) if difference < min_difference or (difference == min_difference and number < closest_value): closest_value = number min_difference = difference return closest_value"},{"question":"Create a function that takes two strings as input and returns a new string that is the result of concatenating the first string with the second string. If the second string starts with 'x', prepend it with a 'y' and then concatenate. If the second string starts with 'y', prepend it with 'x' and then concatenate. If the second string starts with any other character, return 'Invalid string'.","solution":"def concatenate_strings(str1, str2): Concatenates two strings with special rules for the second string. If the second string starts with 'x', prepend 'y' and concatenate. If the second string starts with 'y', prepend 'x' and concatenate. If the second string starts with any other character, return 'Invalid string'. if str2.startswith('x'): return str1 + 'y' + str2 elif str2.startswith('y'): return str1 + 'x' + str2 else: return 'Invalid string'"},{"question":"Create a function that takes a list of intergers and returns the largest number in the list.","solution":"def find_largest(numbers): Returns the largest number in the given list of integers. if not numbers: raise ValueError(\\"The list must contain at least one number.\\") return max(numbers)"},{"question":"Create a function that takes a string as input and returns the result of encrypting the string using the Caesar cipher with a shift of 3. The Caesar cipher is a type of substitution cipher where each letter in the plaintext is shifted a certain number of places down the alphabet.","solution":"def caesar_cipher(text, shift=3): Encrypts the input text using the Caesar cipher with a shift of 3. result = [] for char in text: if char.isalpha(): # ASCII code for 'A' if Uppercase, 'a' if Lowercase base = ord('A') if char.isupper() else ord('a') # Shift char and wrap around the alphabet using modulo (%) operator result.append(chr((ord(char) - base + shift) % 26 + base)) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a positive integer num and returns the sum of all the positive integers less than num that are multiples of its divisors.","solution":"def sum_of_multiples_of_divisors(num): Returns the sum of all the positive integers less than \`num\` that are multiples of its divisors. if num <= 1: return 0 divisors = [i for i in range(1, num) if num % i == 0] multiples = set() for divisor in divisors: multiples.update(range(divisor, num, divisor)) return sum(multiples)"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have a length of 4 or more. Filtering the list to include strings with a length less than 4. How can you achieve this using list comprehension in Python? Provide code examples and a brief explanation.","solution":"def filter_strings(strings): Filters a list of strings to include only those with length 4 or more. Args: strings (list): A list of strings. Returns: list: A new list containing strings with length 4 or more. return [string for string in strings if len(string) >= 4]"},{"question":"Create a function that finds the smallest even number in an array. If the array does not contain any even numbers, return \`-1\`.","solution":"def smallest_even_number(arr): Returns the smallest even number in the array. If there are no even numbers, return -1. even_numbers = [x for x in arr if x % 2 == 0] return min(even_numbers, default=-1)"},{"question":"Create a function that generates Fibonacci numbers up to a given limit. The function should take an integer 'limit' as a parameter and return a list of Fibonacci numbers that are less than or equal to the given limit. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.","solution":"def generate_fibonacci(limit): Generates a list of Fibonacci numbers up to a given limit. Parameters: limit (int): The upper limit for the Fibonacci numbers. Returns: list: A list of Fibonacci numbers less than or equal to the limit. if limit < 0: return [] fibonacci_list = [] a, b = 0, 1 while a <= limit: fibonacci_list.append(a) a, b = b, a + b return fibonacci_list"},{"question":"Create a function that takes a string as input and returns a new string with all vowels replaced by the letter 'a'. How can I solve this problem in Python?","solution":"def replace_vowels_with_a(s): Replaces all vowels in the input string with the letter 'a'. Args: s (str): The input string. Returns: str: The modified string with all vowels replaced by 'a'. vowels = \\"aeiouAEIOU\\" return ''.join('a' if c in vowels else c for c in s)"},{"question":"Create a function that takes an integer \`n\` as an input. The function should return a list of all prime numbers less than \`n\`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n < 2: return [] primes = [] for num in range(2, n): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that will read a JSON file, parse it, and return a Python dictionary.","solution":"import json def read_json_file(file_path): Reads a JSON file, parses it, and returns a dictionary. Parameters: - file_path: str: The path to the JSON file Returns: dict: The parsed JSON content as a dictionary with open(file_path, 'r') as file: data = json.load(file) return data"},{"question":"Create a function that removes duplicate numbers from a list in Python and returns a sorted list.","solution":"def remove_duplicates_and_sort(numbers): Removes duplicates from the list and returns a sorted list. Parameters: numbers (list): The list of numbers to process. Returns: list: A sorted list with duplicates removed. return sorted(list(set(numbers)))"},{"question":"Create a function that takes two strings, \`s\` and \`t\` as input. The function should return the lexicographically smallest string that can be formed by rearranging the characters of \`s\` and \`t\`. The strings \`s\` and \`t\` can contain only lowercase English alphabets, and they might be empty.","solution":"def smallest_lexicographic_string(s, t): Returns the lexicographically smallest string that can be formed by rearranging the characters of s and t combined. # Combine and sort the characters of both strings. combined_string = s + t sorted_string = \\"\\".join(sorted(combined_string)) return sorted_string"},{"question":"Create a function that generates a histogram of a given list of numbers. The function should group the numbers into bins (randomly calculated), and then calculate the frequency of numbers falling into each bin. The function should return a list of frequencies corresponding to each bin.","solution":"import numpy as np def calculate_histogram(numbers, bins=None): Generates a histogram from a list of numbers. Args: - numbers (list): A list of numbers. - bins (int): Number of bins to group the numbers into. If None, uses the square root method. Returns: - list: Frequencies of numbers in each bin. if bins is None: bins = int(np.ceil(np.sqrt(len(numbers)))) histogram, bin_edges = np.histogram(numbers, bins=bins) return histogram.tolist()"},{"question":"Create a function that takes two lists as parameters. The function should compare the elements of both lists and return a new list containing only the elements that are common to both lists. The function should also be case-sensitive and should not return any duplicates.","solution":"def common_elements(list1, list2): Returns a list of elements that are common to both list1 and list2, without duplicates. The comparison is case-sensitive. :param list1: List of elements :param list2: List of elements :return: List of common elements without duplicates return list(set(list1).intersection(set(list2)))"},{"question":"Create a function that takes in a string of space-separated numbers and returns an array of those numbers as integers. If a number is an odd number, square it, and if it's an even number, cube it. The function should handle both positive and negative numbers. For example, given the string \\"1 2 3 4\\", the function should return \`[1, 8, 9, 64]\`.","solution":"def transform_numbers(s): Takes in a string of space-separated numbers, and returns a list of those numbers as integers. If a number is odd, it squares the number, and if it's even, it cubes the number. :param s: A string of space-separated numbers :return: A list of transformed numbers numbers = map(int, s.split()) transformed_numbers = [ x ** 2 if x % 2 != 0 else x ** 3 for x in numbers ] return transformed_numbers"},{"question":"Create a function that takes three parameters: an integer \`n\`, a list of integers \`arr\`, and a list of integers \`queries\`. Each query in \`queries\` is a list containing three elements: \`[inci, incj, amount]\`. For each query, increment the elements from \`inci\` to \`incj\` (inclusive) in \`arr\` by \`amount\`.","solution":"def increment_array(n, arr, queries): Increment elements in the list \`arr\` based on the provided \`queries\`. Each query is a list [inci, incj, amount] which increments elements from index inci to incj (inclusive) by \`amount\`. :param n: Length of the array \`arr\` :param arr: List of integers :param queries: List of queries, where each query is a list [inci, incj, amount] :return: The modified list \`arr\` after applying all queries for query in queries: inci, incj, amount = query for i in range(inci, incj + 1): arr[i] += amount return arr"},{"question":"Create a function that takes an integer and returns the count of prime numbers less than the given integer.","solution":"def count_primes(n): Returns the count of prime numbers less than the given integer n. if n <= 2: return 0 primes = [True] * n primes[0], primes[1] = False, False for start in range(2, int(n**0.5) + 1): if primes[start]: for multiple in range(start*start, n, start): primes[multiple] = False return sum(primes)"},{"question":"Create a function that generates the nth Fibonacci number using both iterative and recursive approaches.","solution":"def fibonacci_iterative(n): Returns the nth Fibonacci number using an iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b def fibonacci_recursive(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: return 0 elif n == 1: return 1 return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)"},{"question":"Create a function that accepts a string and returns a new string with the letters in reverse order.","solution":"def reverse_string(s): Returns the string s with letters in reverse order. return s[::-1]"},{"question":"Create a function that reverses an array in place using Python. The function should take a list of integers and reverse the elements of the list without using extra space for another list. You can only use a constant amount of extra space. The function should return \`None\` as it modifies the list in place.","solution":"def reverse_in_place(arr): Reverses the elements of the list arr in place. left, right = 0, len(arr) - 1 while left < right: # Swap the elements at the left and right indices arr[left], arr[right] = arr[right], arr[left] # Move towards the center left += 1 right -= 1"},{"question":"Create a function that takes an integer n as an argument and returns a string greeting with the number n.","solution":"def greet(n): Returns a greeting string with the number n. return f\\"Hello, number {n}!\\""},{"question":"Create a function that takes a number as an argument and returns its factorial. The function should handle large numbers by using Python's \`decimal\` module for precision, as well as negative inputs by returning \\"Invalid input\\" for negative numbers.","solution":"from decimal import Decimal, getcontext getcontext().prec = 1000 def factorial(n): Returns the factorial of the given number n. If n is negative, returns \\"Invalid input.\\" if n < 0: return \\"Invalid input\\" if n == 0 or n == 1: return Decimal(1) factorial_result = Decimal(1) for i in range(2, n + 1): factorial_result *= Decimal(i) return factorial_result"},{"question":"Create a function that takes in two integer arrays of the same length and returns a boolean indicating whether the two arrays are identical.","solution":"def are_identical_arrays(arr1, arr2): Checks if two integer arrays are identical. Parameters: arr1 (list of int): First array. arr2 (list of int): Second array. Returns: bool: True if arrays are identical, False otherwise. return arr1 == arr2"},{"question":"Create a function that takes an integer as an input. If the number is positive, return the string \\"The number is positive\\". If the number is zero, return the string \\"The number is zero\\". If the number is negative, return the string \\"The number is negative\\".","solution":"def describe_number(n): Returns a string describing whether the number is positive, zero or negative. if n > 0: return \\"The number is positive\\" elif n == 0: return \\"The number is zero\\" else: return \\"The number is negative\\""},{"question":"Create a function that checks if a given string \`s\` contains repeating substrings that can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward. For example, \\"radar\\" or \\"level\\".","solution":"from collections import Counter def can_form_palindromic_rearrangement(s): Checks if the given string \`s\` contains repeating substrings that can be rearranged to form a palindrome. counter = Counter(s) odd_count = sum(1 for count in counter.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count. return odd_count <= 1"},{"question":"Create a function that generates the nth Fibonacci number using recursion. The function should be named \`fibonacci\` and take a single integer argument \`n\`. The nth Fibonacci number is the sum of the (n-1)th and (n-2)th Fibonacci numbers, with the base cases being that the 0th Fibonacci number is 0 and the 1st Fibonacci number is 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Base cases: - fibonacci(0) returns 0 - fibonacci(1) returns 1 For n > 1, returns fibonacci(n-1) + fibonacci(n-2) if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes three integer parameters as input and returns the greatest of the three integers. You should illustrate this with a code snippet in Python.","solution":"def greatest_of_three(a, b, c): Returns the greatest of the three integers a, b and c. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Create a function that takes a positive integer and returns its binary equivalent as a string. The function should also handle the case where the input is not a positive integer. If the input is not a positive integer, the function should return an appropriate error message.","solution":"def integer_to_binary(n): Takes a positive integer and returns its binary equivalent as a string. Returns an error message if the input is not a positive integer. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer.\\" return bin(n)[2:]"},{"question":"Create a function that takes a number and a base as input and returns a boolean value if the number is a perfect power of the given base. A perfect power is a number that can be expressed as an integer raised to an integer power of at least 2. For example, 8 is a perfect power of 2 (2^3), and 27 is a perfect power of 3 (3^3). IceCube wants to check if certain numbers are perfect powers of given bases.","solution":"def is_perfect_power(number, base): Returns True if \`number\` is a perfect power of \`base\`. A perfect power is a number that can be expressed as an integer raised to an integer power of at least 2. if base < 2 or number < 1: return False power = 2 while base ** power <= number: if base ** power == number: return True power += 1 return False"},{"question":"Create a function that checks if a given string is a palindrome (reads the same forwards and backwards) and returns \`True\` if it is, and \`False\` if it is not. The function should ignore spaces, punctuation, and capitalization.","solution":"import re def is_palindrome(s): Check if the given string is a palindrome. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes a string input and returns the string in reverse order. For instance, if the input is \\"Hello, World!\\", the function should return \\"!dlroW ,olleH\\". Additionally, ensure that the function ignores any leading or trailing whitespace And handles special characters and numbers correctly.","solution":"def reverse_string(input_string): Returns the input string in reverse order, ignoring any leading or trailing whitespace. This function also handles special characters and numbers correctly. trimmed_string = input_string.strip() reversed_string = trimmed_string[::-1] return reversed_string"},{"question":"Create a function that returns the factorial of a given number. The function should be named \`calculate_factorial\`. Use a loop or a recursive approach to solve this problem. You are not allowed to use any in-built factorial functions from Python's math library.","solution":"def calculate_factorial(n): Returns the factorial of a given number using a recursive approach. This function does not use any in-built factorial functions from Python's math library. :param n: Non-negative integer to calculate the factorial of :return: Factorial of the given number if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 else: return n * calculate_factorial(n - 1)"},{"question":"Create a function that returns the first non-repeating character in a string. If all characters repeat, return an underscore.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat, returns an underscore. char_count = {} # Counting occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Finding the first non-repeating character for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Create a function that checks if a list of numbers is sorted in either ascending or descending order.","solution":"def is_sorted(lst): Checks if a list of numbers is sorted in either ascending or descending order. Args: lst: List of numbers to be checked. Returns: True if the list is sorted either in ascending or descending order, False otherwise. return lst == sorted(lst) or lst == sorted(lst, reverse=True)"},{"question":"Create a function that accepts an integer \`n\` and a list \`lst\`. The function should add \`n\` to each element in the list and return the modified list.","solution":"def add_n_to_list(n, lst): Adds the integer n to each element in the list lst. Parameters: n (int): The integer to add to each element. lst (list): A list of integers. Returns: list: A list with n added to each of its elements. return [x + n for x in lst]"},{"question":"Create a function that accepts an integer and checks whether that integer is a perfect number. If it is, your function should return true; otherwise, it should return false. A perfect number is a positive integer that is equal to the sum of its positive divisors (excluding itself).","solution":"def is_perfect_number(n): Checks if a given integer n is a perfect number. A perfect number is equal to the sum of its positive divisors, excluding itself. Parameters: n (int): The integer to check Returns: bool: True if n is a perfect number, False otherwise if n <= 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n"},{"question":"Create a function that takes in a list of integers and returns the number of unique pairs where the difference between the elements is exactly 1.","solution":"def count_unique_pairs_with_diff_one(nums): Returns the number of unique pairs where the difference between the elements is exactly 1. nums_set = set(nums) count = 0 for num in nums_set: if num + 1 in nums_set: count += 1 return count"},{"question":"Create a function that takes a list of strings and returns a new list where each string is reversed and concatenated with the original string.","solution":"def reverse_and_concatenate(strings): Takes a list of strings and returns a new list where each string is reversed and concatenated with the original string. :param strings: List of strings :return: List of strings where each string is reversed and concatenated with the original string return [s + s[::-1] for s in strings]"},{"question":"Create a function that rotates an array to the right by \`k\` steps where \`k\` is an integer. The rotation should be done in as fast as possible.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): The original array k (int): Number of steps to rotate the array to the right Returns: list: The rotated array if not arr: return arr n = len(arr) k = k % n # To handle cases where k > n return arr[-k:] + arr[:-k]"},{"question":"Create a function that takes in a list of integers and returns the frequency of each integer in the list. The function should return a dictionary where the keys are the integers and the values are the frequencies of those integers in the input list.","solution":"def frequency_of_integers(lst): Returns a dictionary with the frequency of each integer in the list. Parameters: lst (list): A list of integers Returns: dict: A dictionary where keys are integers and values are their frequencies freq_dict = {} for num in lst: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Create a function that takes in a list of elements, and returns a new list with all duplicates removed, keeping only the first occurrence of each element.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed, keeping only the first occurrence of each element. seen = set() result = [] for item in lst: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Create a function that takes an input and prints whether the number is even or odd.","solution":"def check_even_or_odd(number): Prints whether the given number is even or odd. if number % 2 == 0: print(\\"Even\\") else: print(\\"Odd\\")"},{"question":"Create a function that generates a list of the first N natural numbers that contain a specific substring within them.","solution":"def generate_numbers_with_substring(n, substring): Generates a list of the first N natural numbers that contain the specified substring. Args: n (int): The number of natural numbers to generate. substring (str): The substring to look for within the natural numbers. Returns: List[int]: A list of the first N natural numbers containing the substring. result = [] current_number = 1 while len(result) < n: if substring in str(current_number): result.append(current_number) current_number += 1 return result"},{"question":"Create a function that checks if the sum of the absolute values of the elements in an array is greater than the sum of the elements themselves.","solution":"def is_abs_sum_greater(arr): Returns True if the sum of the absolute values of the elements in the array is greater than the sum of the elements themselves, otherwise False. abs_sum = sum(abs(x) for x in arr) regular_sum = sum(arr) return abs_sum > regular_sum"},{"question":"Create a function that takes an integer N and returns the largest palindrome made from the product of two N-digit numbers.","solution":"def is_palindrome(number): Checks if a number is a palindrome. return str(number) == str(number)[::-1] def largest_palindrome_product(n): Find the largest palindrome made from the product of two n-digit numbers. max_num = 10**n - 1 min_num = 10**(n-1) max_palindrome = 0 # start from max_num and go backward for i in range(max_num, min_num - 1, -1): # start from i and go backward to avoid recalculating pairs for j in range(i, min_num - 1, -1): product = i * j if product <= max_palindrome: break # Since j is decreasing, products will get smaller if is_palindrome(product): max_palindrome = product return max_palindrome"},{"question":"Create a function that takes in two integers (m, n) and returns the factorial of m and then multiplies it by n.","solution":"def multiply_factorial(m, n): Returns the factorial of m multiplied by n. def factorial(x): if x == 0 or x == 1: return 1 else: return x * factorial(x - 1) return factorial(m) * n"},{"question":"Create a function that takes four parameters, a, b, c, and d, and returns true if the sum of a and b is equal to the sum of c and d, and false otherwise. Make sure to handle edge cases, such as when a, b, c, or d are not integers or are of different types.","solution":"def are_sums_equal(a, b, c, d): Returns True if the sum of a and b is equal to the sum of c and d, and False otherwise. if not all(isinstance(i, (int, float)) for i in (a, b, c, d)): raise ValueError(\\"All parameters must be integers or floats.\\") return (a + b) == (c + d)"},{"question":"Create a function that finds the number of words in a given string.","solution":"def word_count(s): Returns the number of words in the given string. words = s.split() return len(words)"},{"question":"Create a function that takes in a sentence and returns the count of all the vowels in the sentence. Vowels are defined as 'a', 'e', 'i', 'o', and 'u'. The function should be case-insensitive and should ignore any non-alphabetical characters.","solution":"def count_vowels(sentence): Returns the count of all vowels (a, e, i, o, u) in the sentence. The function is case-insensitive and ignores non-alphabetical characters. vowels = 'aeiouAEIOU' count = 0 for char in sentence: if char in vowels: count += 1 return count"},{"question":"Create a function that takes an array of integers as input and returns the maximum subarray sum. Should this be implemented using Kadane's algorithm? If so, how?","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum using Kadane's algorithm. if not arr: return 0 max_ending_here = arr[0] max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that takes two lists, list A and list B, and a target sum. The function should return true if there exists any pair (a, b) such that a belongs to list A, b belongs to list B, and a + b equals the target sum. Otherwise, return false.","solution":"def has_pair_with_sum(list_a, list_b, target_sum): Returns True if there exists any pair (a, b) such that a is in list_a, b is in list_b, and a + b equals the target sum. Otherwise, returns False. set_a = set(list_a) # Convert list_a to set for faster lookup for b in list_b: if target_sum - b in set_a: return True return False"},{"question":"Create a function that takes a list of integers as input and returns a new list with the integers sorted in reverse order. The function should not modify the original list.","solution":"def reverse_sort_list(int_list): Takes a list of integers as input and returns a new list with the integers sorted in reverse order. Parameters: int_list (list): List of integers to be sorted in reverse order Returns: list: A new list with the integers sorted in reverse order return sorted(int_list, reverse=True)"},{"question":"Create a function that sorts numbers in a list using the merge sort algorithm, which involves dividing the list into halves, sorting each half recursively, and then merging the sorted halves back together.","solution":"def merge_sort(arr): Sorts a list of numbers using the merge sort algorithm. if len(arr) > 1: mid = len(arr) // 2 # Finding the middle of the array left_half = arr[:mid] # Dividing the elements into 2 halves right_half = arr[mid:] merge_sort(left_half) # Sorting the first half recursively merge_sort(right_half) # Sorting the second half recursively i = j = k = 0 # Copy data to temp arrays left_half[] and right_half[] while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 # Checking if any element was left while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 return arr"},{"question":"Create a function that generates all possible subsequences of a give array of unique integers. Beware of duplicates and make sure each subsequence is unique.","solution":"def generate_subsequences(arr): Returns a list of all possible unique subsequences of a given array of unique integers. Arguments: arr -- list of unique integers Returns: List of unique subsequences def subsequences_helper(idx, path): if idx == len(arr): if path: result.append(path) return subsequences_helper(idx + 1, path) subsequences_helper(idx + 1, path + [arr[idx]]) result = [] subsequences_helper(0, []) return result"},{"question":"Create a function that accepts an array and finds the sum of all elements in the array. Then, modify this function to accept two parameters and find the sum of elements within a specified range.","solution":"def sum_array(array, start=None, end=None): Returns the sum of all elements in the array within the specified range. Parameters: array (list of int/float): The list of numbers to be summed. start (int, optional): The starting index of the range (inclusive). Defaults to the beginning of the array. end (int, optional): The ending index of the range (inclusive). Defaults to the end of the array. Returns: int/float: The sum of the elements in the specified range. if start is None: start = 0 if end is None: end = len(array) - 1 return sum(array[start:end + 1])"},{"question":"Create a function that takes a list of integers and returns a dictionary where the keys are the integers and the values are their frequencies.","solution":"def frequency_dict(int_list): Takes a list of integers and returns a dictionary where keys are the integers and values are their frequencies. freq_dict = {} for num in int_list: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Create a function that calculates the area of a square given the length of its side.","solution":"def area_of_square(side_length): Returns the area of a square given the length of its side. Parameters: side_length (float): The length of the side of the square. Returns: float: The area of the square. if side_length < 0: raise ValueError(\\"Side length cannot be negative\\") return side_length ** 2"},{"question":"Create a function that takes an array of integers and returns the array with all the negative numbers moved to the front. The solution should be efficient and consider array manipulation techniques.","solution":"def move_negatives_to_front(nums): Moves all negative numbers in the array to the front, preserving the order of the rest of the elements. Args: nums (list): List of integers. Returns: list: List with all negative numbers moved to the front. negative_nums = [num for num in nums if num < 0] non_negative_nums = [num for num in nums if num >= 0] return negative_nums + non_negative_nums"},{"question":"Create a function that generates a Fibonacci sequence up to the nth term and returns the sequence as a list. Ensure the function does not use any iterative constructs. Use recursion to achieve this.","solution":"def fibonacci(n, sequence=None): if sequence is None: sequence = [] if n <= 0: return sequence elif n == 1: return [0] elif n == 2: return [0, 1] else: if len(sequence) < 2: sequence = fibonacci(2) if len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return fibonacci(n, sequence) else: return sequence"},{"question":"Create a function that checks for the presence of a sub-string within a string. If the sub-string is found, return the starting index of the sub-string in the given string. If not, return -1.","solution":"def find_substring(main_string, sub_string): Returns the starting index of the sub-string in the main string if found, otherwise returns -1. :param main_string: The string to be searched. :param sub_string: The string to search for. :return: The starting index of the sub-string, or -1 if not found. return main_string.find(sub_string)"},{"question":"Create a function that takes in three integers representing the lengths of the sides of a triangle and returns true if they can form a valid triangle using the triangle inequality theorem. The function should also check if the triangle is equilateral, isosceles, or scalene.","solution":"def is_valid_triangle_and_type(a, b, c): This function checks if the given side lengths can form a valid triangle and determines whether the triangle is equilateral, isosceles, or scalene. Returns a tuple (is_valid, triangle_type): is_valid: True if the sides form a valid triangle, False otherwise. triangle_type: \\"equilateral\\", \\"isosceles\\", or \\"scalene\\" if valid. None if invalid. # Check for the validity of the triangle using the triangle inequality theorem if a + b > c and a + c > b and b + c > a: # Determine the type of triangle if a == b == c: triangle_type = \\"equilateral\\" elif a == b or b == c or a == c: triangle_type = \\"isosceles\\" else: triangle_type = \\"scalene\\" return True, triangle_type else: return False, None"},{"question":"Create a function that takes a number as an argument and returns the count of how many digits are present in the number. If the number is not an integer, the function should return -1 indicating an invalid input.","solution":"def count_digits(number): Returns the count of digits in the given number. If the number is not an integer, returns -1. if not isinstance(number, int): return -1 return len(str(abs(number)))"},{"question":"Create a function that takes a string as input and returns the result of evaluating the string as a mathematical expression. You can assume this input is always a valid string containing only mathematical operations (addition, subtraction, multiplication, division) and numbers. The function should only consider integer arithmetic and not support floating point numbers or more complex Python operations.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression in string format involving addition, subtraction, multiplication, and division with integers. Parameters: expression (str): The mathematical expression to evaluate. Returns: int: The result of the evaluated expression. return eval(expression)"},{"question":"Create a function that retrieves the string value of the first object in a list of objects. Assume that the list might be empty, and you should handle that gracefully by returning an empty string.","solution":"def get_first_string_value(objects): Retrieves the string value of the first object in a list of objects. If the list is empty, returns an empty string. if not objects: return \\"\\" return str(objects[0])"},{"question":"Create a function that generates all possible combinations of a given list of integers using backtracking. The function should return a list of lists, where each inner list is a unique combination of the input list's integers.","solution":"def generate_combinations(arr): Generates all possible combinations of the given list of integers using backtracking. Args: arr (list): A list of integers. Returns: list: A list of lists containing all possible combinations of the input list's integers. def backtrack(start, path): result.append(path[:]) for i in range(start, len(arr)): # Include arr[i] in the current combination path.append(arr[i]) # Move on to the next element backtrack(i + 1, path) # Backtrack, remove arr[i] from current combination path.pop() result = [] backtrack(0, []) return result"},{"question":"Create a function that accepts an array of integers as input and returns a new array where each element of the original array is equal to the sum of its last and second last digits.","solution":"def sum_last_two_digits(arr): Returns a new array where each element of the original array is equal to the sum of its last and second last digits. If a number has only one digit, it is treated as if the second last digit is zero. Example: [123, 45, 6] -> [5, 9, 6] def sum_digits(num): str_num = str(abs(num)) # Convert number to string to easily access digits last_digit = int(str_num[-1]) second_last_digit = int(str_num[-2]) if len(str_num) > 1 else 0 return last_digit + second_last_digit return [sum_digits(num) for num in arr]"},{"question":"Create a function that takes a list of lists and an integer n as arguments and returns a list containing the n-th element of each sublist if it exists. Otherwise, return None for that position.","solution":"def nth_elements(lists, n): Returns a list containing the n-th element of each sublist if it exists, otherwise returns None for that position. :param lists: List of lists :param n: The index of the element to return from each sublist :return: A list of elements or None result = [] for sublist in lists: if n < len(sublist): result.append(sublist[n]) else: result.append(None) return result"},{"question":"Create a function that takes an integer x and returns the square root of x. However, you cannot use any built-in functions or libraries to calculate the square root. Instead, you must implement a solution using the Newton-Raphson method. Explain the method and provide the code.","solution":"def sqrt_newton_raphson(x): Returns the square root of x using the Newton-Raphson method. if x < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") tolerance = 1e-10 y = x / 2.0 # Initial guess while abs(y * y - x) > tolerance: y = (y + x / y) / 2.0 return y"},{"question":"Create a function that will sort a list of numbers from smallest to largest using bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts a list of numbers in ascending order using the bubble sort algorithm. Parameters: arr (list): The list of numbers to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break # Stop iteration if the list is already sorted. return arr"},{"question":"Create a function that builds and returns a dictionary from two lists, where the elements of the first list are used as keys and the elements of the second list are used as values. However, the function should only include entries where the value is an integer. If any entry's value is not an integer, it should be omitted from the resulting dictionary. Additionally, the function should convert string representations of integers into actual integers.","solution":"def build_dict(keys, values): Builds a dictionary using the provided keys and values, including only entries where the value is an integer or a string representation of an integer. result = {} for key, value in zip(keys, values): if isinstance(value, int): result[key] = value elif isinstance(value, str) and value.isdigit(): result[key] = int(value) return result"},{"question":"Create a function that generates a list of prime numbers within a given range. The range is defined by two integers, \`start\` and \`end\`.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def generate_primes(start, end): Generates a list of prime numbers in the given range [start, end]. return [n for n in range(start, end+1) if is_prime(n)]"},{"question":"Create a function that takes in a string and returns its lexicographically smallest rotation.","solution":"def lexicographically_smallest_rotation(s): Returns the lexicographically smallest rotation of the input string s. if not s: return \\"\\" smallest_rotation = min(s[i:] + s[:i] for i in range(len(s))) return smallest_rotation"},{"question":"Create a function that removes duplicates from a sorted list. The function should accept a sorted list of integers and return a new list with all duplicates removed. Advanced users should consider optimizing the function for performance.","solution":"def remove_duplicates(sorted_list): Removes duplicates from a sorted list of integers. Parameters: sorted_list (list of int): A list of sorted integers Returns: list of int: A new list with duplicates removed. if not sorted_list: return [] unique_list = [sorted_list[0]] for current in sorted_list[1:]: if current != unique_list[-1]: unique_list.append(current) return unique_list"},{"question":"Create a function that takes a string of words, where words are separated by either commas or semicolons, and returns a list of words.","solution":"def split_words(input_string): Splits a string of words separated by commas or semicolons into a list of words. Parameters: input_string (str): The string to be split. Returns: list: A list of words. import re return re.split(r'[;,]', input_string)"},{"question":"Create a function that takes a list of integers and returns the sum of all the numbers in the list. If the list contains any non-integer values, the function should raise a TypeError.","solution":"def sum_of_list(nums): Returns the sum of all integers in the list. If the list contains non-integer values, raises a TypeError. if not all(isinstance(num, int) for num in nums): raise TypeError(\\"All items in the list must be integers.\\") return sum(nums)"},{"question":"Create a function that takes two integers \`a\` and \`b\` and returns a list of 100 random integers between \`a\` and \`b\` (inclusive).","solution":"import random def generate_random_integers(a, b): Returns a list of 100 random integers between a and b (inclusive). if a > b: raise ValueError(\\"The first parameter 'a' should be less than or equal to the second parameter 'b'\\") return [random.randint(a, b) for _ in range(100)]"},{"question":"Create a function that generates an HTML form for user input.","solution":"def generate_html_form(action_url, method=\\"post\\"): Generates a basic HTML form with a single text input and submit button. Params: - action_url (str): The URL where the form data will be submitted. - method (str): The HTTP method to use when submitting the form (e.g., 'post' or 'get'). Returns: str: A string containing the HTML form. form_html = f <form action=\\"{action_url}\\" method=\\"{method}\\"> <label for=\\"username\\">Username:</label><br> <input type=\\"text\\" id=\\"username\\" name=\\"username\\"><br><br> <input type=\\"submit\\" value=\\"Submit\\"> </form> return form_html.strip()"},{"question":"Create a function that takes two parameters: (a) a string of lowercase letters and (b) an integer. The function should return a new string that is the result of repeating the original string 'a' 'b' number of times consecutively. For example, if the original string is \\"hello\\" and the integer is 3, the function should return \\"hellohellohello\\". However, if 'b' is less than or equal to 0, the function should return an empty string.","solution":"def repeat_string(s, n): Repeats the string 's' 'n' number of times consecutively. If 'n' is less than or equal to 0, returns an empty string. if n <= 0: return \\"\\" return s * n"},{"question":"Create a function that calculates the factorial of a given number using recursion. Then, use this function to calculate the factorial of 5.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) # Calculate the factorial of 5 factorial_of_5 = factorial(5)"},{"question":"Create a function that takes a string as input and returns a new string containing only the odd-indexed characters from the original string. In Python, indexing starts at 0, so the first character is considered to be at even index 0. For example, if the input string is \\"hello\\", the function should return \\"el\\".","solution":"def odd_indexed_characters(s): Returns a new string containing only the odd-indexed characters from the original string. Args: s (str): Input string. Returns: str: String with characters at odd indices. return s[1::2]"},{"question":"Create a function that accepts an array of integers as input and finds the second smallest unique number in the array. If the array does not contain at least two unique numbers, return None. The function should be efficient in terms of both time and space complexity. Here is a sample array: [5, 3, 1, 2, 3, 5].","solution":"def second_smallest_unique(arr): Returns the second smallest unique number in the array. If the array does not contain at least two unique numbers, return None. unique_numbers = set(arr) if len(unique_numbers) < 2: return None unique_sorted = sorted(unique_numbers) return unique_sorted[1]"},{"question":"Create a function that takes in two parameters and multiplies them together. The function should return the product of the two numbers.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that generates a calendar for a given year and month, and display the days of the week in a neat format. The function should return a string or newline-separated text in a 'month-day' format. You should use some form of abstraction (like a class or function) to manage the calendar data and formatting.","solution":"import calendar class CalendarGenerator: def __init__(self, year, month): self.year = year self.month = month def generate(self): c = calendar.TextCalendar(calendar.SUNDAY) formatted_calendar = c.formatmonth(self.year, self.month) return formatted_calendar def generate_calendar(year, month): Returns the calendar for the given year and month as a string. calendar_gen = CalendarGenerator(year, month) return calendar_gen.generate()"},{"question":"Create a function that clones a given list of dictionaries in Python. The function should return a new list where all dictionaries in the original list have been duplicated.","solution":"import copy def clone_list_of_dicts(lst): Clones a given list of dictionaries. Parameters: lst (list): List of dictionaries to be cloned. Returns: list: A new list where all dictionaries have been duplicated. return [copy.deepcopy(d) for d in lst]"},{"question":"Create a function that generates the Fibonacci sequence up to a given number \`n\`, where \`n\` is the last number in the sequence. The function should return the sequence as a list. If \`n\` is less than the first number in the sequence, the function should return an empty list. If \`n\` is in the sequence but not the last number, return only up to that number.","solution":"def generate_fibonacci(n): Generates the Fibonacci sequence up to the given number \`n\`. Parameters: n (int): The upper limit for the Fibonacci sequence generation. Returns: list: A list containing the Fibonacci sequence up to \`n\`. if n < 0: return [] fib_sequence = [0, 1] while True: next_val = fib_sequence[-1] + fib_sequence[-2] if next_val > n: break fib_sequence.append(next_val) return [x for x in fib_sequence if x <= n]"},{"question":"Create a function that will accept an integer as an argument and return a dictionary with keys as the divisors of the integer and values as their corresponding amounts. For example, if the input integer is 12, the function should return {1: 1, 2: 6, 3: 4, 4: 3, 6: 2, 12: 1}.","solution":"def divisor_count(n): Returns a dictionary with keys as the divisors of the integer n, and values as how many times each divisor can fit into n. divisors = {} for i in range(1, n + 1): if n % i == 0: divisors[i] = n // i return divisors"},{"question":"Create a function that , when given a string of characters, converts it into a number by summing the ASCII values of each character in the string. Then, find the remainder when the sum is divided by 255. Return this remainder.","solution":"def ascii_remainder(s): Given a string of characters, converts it into a number by summing the ASCII values of each character in the string. Then, finds the remainder when the sum is divided by 255. Parameters: s (str): The input string of characters. Returns: int: The remainder when the ASCII sum is divided by 255. ascii_sum = sum(ord(char) for char in s) remainder = ascii_sum % 255 return remainder"},{"question":"Create a function that calculates the sum of an array of numbers.","solution":"def sum_array(numbers): Returns the sum of an array of numbers. Parameters: numbers (list): A list of numbers to sum up. Returns: int or float: The sum of the numbers in the array. return sum(numbers)"},{"question":"Create a function that checks if two strings are equal or not. If the strings are equal, return True; if they are not equal, return False. Your function should also handle case differences, meaning that 'Hello' and 'hello' should be considered as not equal.","solution":"def are_strings_equal(s1, s2): Checks if two strings s1 and s2 are equal. The comparison is case sensitive. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if both strings are equal, False otherwise. return s1 == s2"},{"question":"Create a function that removes duplicate strings from an array of strings.","solution":"def remove_duplicates(strings): Removes duplicate strings from an array of strings. Args: strings (list of str): The list of strings from which duplicates should be removed. Returns: list of str: A list of strings with duplicates removed, preserving the original order. seen = set() result = [] for string in strings: if string not in seen: seen.add(string) result.append(string) return result"},{"question":"Create a function that takes a sequence of integers as input and returns the sum of the absolute values of all integers in the sequence.","solution":"def sum_of_absolute_values(seq): Returns the sum of the absolute values of all integers in the sequence. Params: seq (list of int): The input sequence of integers. Returns: int: The sum of the absolute values of integers in the sequence. return sum(abs(x) for x in seq)"},{"question":"Create a function that solves the problem of finding the shortest common supersequence (SCS) between two strings. EXPLAIN YOUR CODE STEP BY STEP.","solution":"def shortest_common_supersequence(str1, str2): m, n = len(str1), len(str2) dp = [[0]*(n+1) for _ in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]) i, j = m, n scs = [] while i > 0 and j > 0: if str1[i-1] == str2[j-1]: scs.append(str1[i-1]) i -= 1 j -= 1 elif dp[i-1][j] < dp[i][j-1]: scs.append(str1[i-1]) i -= 1 else: scs.append(str2[j-1]) j -= 1 while i > 0: scs.append(str1[i-1]) i -= 1 while j > 0: scs.append(str2[j-1]) j -= 1 scs.reverse() return ''.join(scs)"},{"question":"Create a function that finds the third largest number in an array of integers. If the array does not contain at least three unique numbers, the function should return \`null\`. This function should be efficient and work well with large arrays.","solution":"def third_largest(numbers): Returns the third largest unique number in the array of integers. If there are less than three unique numbers, returns None. if len(numbers) < 3: return None first = second = third = None for num in numbers: if num == first or num == second or num == third: continue if first is None or num > first: first, second, third = num, first, second elif second is None or num > second: second, third = num, second elif third is None or num > third: third = num return third"},{"question":"Create a function that calculates the surface area of a sphere using Python. The function should take two parameters: the radius of the sphere and the azimuthal angle in radians. The function should return the surface area of the sphere.","solution":"import math def surface_area_of_sphere(radius, phi): Calculates the surface area of a sphere. Parameters: radius (float): The radius of the sphere. phi (float): The azimuthal angle in radians (not required for surface area calculation). Returns: float: The surface area of the sphere. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return 4 * math.pi * radius ** 2"},{"question":"Create a function that takes a list of integers and uses the \`reduce\` function to sum all the integers in the list. If no integers are present, the function should return 0. How can you implement this in Python?","solution":"from functools import reduce def sum_integers(integers): Returns the sum of all integers in the list using reduce. If the list is empty, returns 0. return reduce(lambda x, y: x + y, integers, 0)"},{"question":"Create a function that takes a list of product names and returns a dictionary where the keys are the product names and the values are their lengths.","solution":"def product_name_lengths(products): Takes a list of product names and returns a dictionary where the keys are the product names and the values are their lengths. return {product: len(product) for product in products}"},{"question":"Create a function that compares the similarity between two strings based on their Hamming distance. The Hamming distance between two strings is defined as the number of positions at which the corresponding symbols are different. For example, the Hamming distance between \\"kitten\\" and \\"sitting\\" is 3 ('k' != 's', 'i' != 'i', 'n' != 'g').","solution":"def hamming_distance(str1, str2): Calculate the Hamming distance between two strings str1 and str2. The Hamming distance is defined as the number of positions at which the corresponding symbols are different. The two strings must be of the same length to calculate the Hamming distance. :param str1: First string :param str2: Second string :return: Hamming distance between str1 and str2 :raises ValueError: If the input strings are of different lengths if len(str1) != len(str2): raise ValueError(\\"Strings must be of the same length\\") return sum(c1 != c2 for c1, c2 in zip(str1, str2))"},{"question":"Create a function that calculates the number of distinct permutations of length \`n\` using elements from a given array \`arr\` without repetition.","solution":"from itertools import permutations def distinct_permutations(arr, n): Returns the number of distinct permutations of length \`n\` using elements from \`arr\` without repetition. if n > len(arr): return 0 return len(set(permutations(arr, n)))"},{"question":"Create a function that will encrypt a string using the Caesar cipher algorithm. The function should take a string and a key as input, and return the encrypted string. Assume the key is a number.","solution":"def caesar_cipher(text, key): Encrypts the input text using the Caesar cipher algorithm. Args: text (str): the plaintext string to encrypt. key (int): the number of positions to shift each character. Returns: str: the encrypted string. encrypted = [] for char in text: if char.isalpha(): shift = key % 26 if char.islower(): encrypted.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a'))) else: encrypted.append(chr((ord(char) - ord('A') + shift) % 26 + ord('A'))) else: encrypted.append(char) return ''.join(encrypted)"},{"question":"Create a function that takes a list of integers and returns True if every element in the list is unique and False otherwise. In Python, you can use the built-in data structure 'set' to help solve this problem. However, you are not allowed to use Python's built-in set() function. You can only use the list structure and loops. How can we achieve this?","solution":"def all_unique(lst): Returns True if all elements in the list are unique, False otherwise. seen_elements = [] for element in lst: if element in seen_elements: return False seen_elements.append(element) return True"},{"question":"Create a function that generates the longest possible palindrome by repeating a substring from a given string \`s\`. The substring can be any part of the string \`s\`. For example, if \`s = \\"XYXZY\\"\`, the function should return \`\\"XYXZYXYXZY\\"\`, which is the longest palindrome by repeating a substring from \`s\` (in this case, the repeat is the entire string).","solution":"def longest_palindrome_by_repeating_substring(s): Generate the longest possible palindrome by repeating a substring from a given string. Parameters: s (str): The input string. Returns: str: The longest palindrome by repeating a substring from s. # Since we can repeat the entire string to form a palindrome return s + s[::-1]"},{"question":"Create a function that takes a list as input and returns a new list containing the length of each string in the original list. For example, given the input list [\\"apple\\", \\"orange\\", \\"banana\\"], the function should return [5, 6, 6].","solution":"def string_lengths(strings): Returns a list containing the length of each string in the input list. :param strings: List of strings :return: List of integers representing the length of each string return [len(string) for string in strings]"},{"question":"Create a function that takes two sequences of numbers and returns the sequence of numbers that appear in both sequences.","solution":"def intersection(seq1, seq2): Returns a list of numbers that appear in both sequences. return list(set(seq1) & set(seq2))"},{"question":"Create a function that takes an integer and returns whether it's an even integer or not.","solution":"def is_even(n): Returns True if n is an even integer, otherwise False. return n % 2 == 0"},{"question":"Create a function that determines the maximum sum of any non-empty contiguous subarray within a one-dimensional array of integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty contiguous subarray within a one-dimensional array of integers. if not nums: return 0 current_max = global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Create a function that generates a list of the squares of the first n natural numbers. The function should take a single integer parameter \`n\` and return a list of squares from \`1^2\` to \`n^2\`.","solution":"def generate_squares(n): Generates a list of the squares of the first n natural numbers. Parameters: n (int): The number of natural numbers to square. Returns: list: A list of squares from 1^2 to n^2. return [i ** 2 for i in range(1, n + 1)]"},{"question":"Create a function that takes two lists of integers, and returns a new list containing the intersection of the two lists. The intersection should only include unique elements from each list. For example, given the lists [1, 2, 3, 4] and [3, 4, 5, 6], the function should return [3, 4].","solution":"def intersect_lists(list1, list2): Returns a list containing the intersection of list1 and list2, with unique elements only. set1 = set(list1) set2 = set(list2) intersection = set1 & set2 return list(intersection)"},{"question":"Create a function that generates a random number between \`min\` and \`max\` values. Use Python's \`random\` library.","solution":"import random def generate_random_number(min_value, max_value): Generates a random number between min_value and max_value inclusive. Parameters: min_value (int): The minimum value in the range. max_value (int): The maximum value in the range. Returns: int: A random integer between min_value and max_value inclusive. return random.randint(min_value, max_value)"},{"question":"Create a function that generates a dictionary with keys from a list of integers and values from a list of strings. Both lists will have the same length.","solution":"def generate_dict(keys, values): Generates a dictionary with keys from a list of integers and values from a list of strings. Arguments: keys -- list of integers values -- list of strings Both lists must have the same length. Returns a dictionary where each key from the 'keys' list maps to the corresponding value from the 'values' list. if len(keys) != len(values): raise ValueError(\\"Both lists must have the same length.\\") return dict(zip(keys, values))"},{"question":"Create a function that checks whether all elements in an array are equal. If they are not equal, find the first element that is not equal to the first element.","solution":"def check_elements_equality(arr): Returns True if all elements in the list are equal, otherwise returns the first element that is not equal to the first element of the list. if not arr: return True # Empty list is considered to have all elements equal first_element = arr[0] for element in arr: if element != first_element: return element return True"},{"question":"Create a function that returns the factorial of a given number, n, using recursion. The function should handle numbers from 0 to 10. Ensure that your function includes error handling for invalid inputs, such as negative numbers or non-integer values.","solution":"def factorial(n): Returns the factorial of the given number n using recursion. Handles numbers from 0 to 10. Raises ValueError for negative numbers or non-integer values. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n > 10: raise ValueError(\\"Input must be 10 or less\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that converts a string representation of a binary number to a decimal number and vice versa.","solution":"def binary_to_decimal(binary_str): Converts a string representation of a binary number to a decimal number. :param binary_str: str, binary number as string :return: int, decimal number return int(binary_str, 2) def decimal_to_binary(decimal_num): Converts a decimal number to its binary string representation. :param decimal_num: int, decimal number :return: str, binary number as string return bin(decimal_num)[2:]"},{"question":"Create a function that takes a string as input and returns a new string which is the reverse of the input string. Additionally, the returned string should have all non-alphabetic characters removed and converted to uppercase.","solution":"def reverse_and_clean_string(input_string): Takes a string as input, reverses it, removes all non-alphabetic characters, and converts to uppercase. cleaned_string = ''.join(filter(str.isalpha, input_string)).upper() reversed_string = cleaned_string[::-1] return reversed_string"},{"question":"Create a function that takes a list of integers as input and returns a new list where each integer is the sum of the corresponding elements in the input list and a constant value \`k\`. The function should handle lists of any length, including empty lists.","solution":"def add_constant_to_list(input_list, k): Returns a new list where each integer is the sum of the corresponding elements in the input list and a constant value \`k\`. Args: input_list (list): A list of integers. k (int): A constant value to add to each element of the input list. Returns: list: A new list with each element incremented by \`k\`. return [x + k for x in input_list]"},{"question":"Create a function that generates a list of all possible substrings of a given string. A substring is a contiguous sequence of characters within a string.","solution":"def generate_substrings(s): Generates all possible substrings of the given string s. :param s: A string whose possible substrings are to be generated :return: A list containing all possible substrings of s substrings = [] for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.append(s[i:j]) return substrings"},{"question":"Create a function that takes a string and return its Fibonacci sequence. The length of the sequence should be equal to the length of the given string. Each number in the sequence is the sum of the two preceding ones, starting from 0 and 1. For example, if the input string is \\"Hello\\", the output should be [0, 1, 1, 2, 1]. Note: The function should handle strings of varying lengths and return the Fibonacci sequence with the same length.","solution":"def fibonacci_sequence_from_string(s): Returns a list representing the Fibonacci sequence of length equal to the length of the input string. length = len(s) if length == 0: return [] elif length == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < length: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:length]"},{"question":"Create a function that takes in two strings and returns the smallest dictionary order string that concatenates the two input strings in any order. For example, if the input strings are \\"abc\\" and \\"def\\", the function should return \\"abcd\\" because \\"abcd\\" is the smallest dictionary order string that concatenates the two input strings.","solution":"def smallest_concatenation(s1, s2): Returns the smallest dictionary order string that concatenates the two input strings in any order. if s1 + s2 < s2 + s1: return s1 + s2 else: return s2 + s1"},{"question":"Create a function that takes a string and returns a new string with each word replaced by its longest palindrome substring.","solution":"def longest_palindrome_substring(word): Return the longest palindromic substring in the given word. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not word: return \\"\\" longest_palindrome = \\"\\" for i in range(len(word)): # Odd length palindromes palindrome_1 = expand_around_center(word, i, i) if len(palindrome_1) > len(longest_palindrome): longest_palindrome = palindrome_1 # Even length palindromes palindrome_2 = expand_around_center(word, i, i + 1) if len(palindrome_2) > len(longest_palindrome): longest_palindrome = palindrome_2 return longest_palindrome def replace_words_with_longest_palindromes(s): Replace each word in the input string with its longest palindrome substring. words = s.split() replaced_words = [longest_palindrome_substring(word) for word in words] return ' '.join(replaced_words)"},{"question":"Create a function that will accept a string of words in camelCase and then convert them into a title case string.","solution":"def camel_to_title(camel_str): Converts a camelCase string to a Title Case string. title_str = '' for char in camel_str: if char.isupper(): title_str += ' ' + char else: title_str += char return title_str.strip().title()"},{"question":"Create a function that generates the longest increasing subsequence (LIS) from a list of integers.","solution":"def longest_increasing_subsequence(arr): Returns the longest increasing subsequence from a given list of integers. if not arr: return [] # Length of the Longest Increasing Subsequence at each index LIS = [[] for _ in range(len(arr))] LIS[0] = [arr[0]] for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j] and len(LIS[i]) < len(LIS[j]) + 1: LIS[i] = LIS[j].copy() LIS[i].append(arr[i]) max_lis = [] for seq in LIS: if len(seq) > len(max_lis): max_lis = seq return max_lis"},{"question":"Create a function that takes a list of integers as input and returns the maximum difference between any two elements in the list.","solution":"def max_difference(lst): Returns the maximum difference between any two elements in the list. if not lst or len(lst) < 2: return 0 max_val = max(lst) min_val = min(lst) return max_val - min_val"},{"question":"Create a function that generates all the possible combinations of a given list of elements without repetition.","solution":"from itertools import combinations def generate_combinations(lst): Generate all possible combinations of the given list of elements without repetition. Parameters: lst (list): List of elements to generate combinations from. Returns: list: A list containing tuples, each representing a combination of elements. result = [] for r in range(len(lst) + 1): result.extend(combinations(lst, r)) return result"},{"question":"Create a function that takes an input number and returns its factorial using a stack in Python.","solution":"def factorial_with_stack(n): Returns the factorial of a given number n using a stack. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") stack = [] result = 1 for i in range(1, n + 1): stack.append(i) while stack: result *= stack.pop() return result"},{"question":"Create a function that takes two integers as parameters and returns the sum of all odd numbers between (and including) those two integers. The function should work regardless of whether the first integer is greater than or less than the second integer.","solution":"def sum_of_odds_between(a, b): Returns the sum of all odd numbers between and including a and b. start = min(a, b) end = max(a, b) return sum(x for x in range(start, end + 1) if x % 2 != 0)"},{"question":"Create a function that takes a string, with numbers representing 0 to 9, and returns the sum of those numbers. However, you must also handle cases where the string contains non-numeric characters or fractions. If the string contains non-numeric characters, return the sum of the numeric characters found so far. If the string contains fractions, return the sum of the integer parts of these fractions. For example, if the input is \\"123abc45\\", the function should return 111 (1+2+3+4+5). If the input is \\"123abc45.678\\", the function should return 114 (1+2+3+4+5).","solution":"def sum_of_numbers_in_string(s): Returns the sum of the numbers represented as individual digits in the input string. Handles non-numeric characters by ignoring them and sums up the integer parts. Ignores decimals and fractions. Parameters: s (str): Input string containing digits and potentially other characters. Returns: int: The sum of the digits in the input string. total_sum = 0 for char in s: if char.isdigit(): total_sum += int(char) elif char.isalpha() or char == '.': continue return total_sum"},{"question":"Create a function that allows users to input an array and a target sum. The function should return the index of the pair of elements in the array that add up to the target sum.","solution":"def two_sum(nums, target): Given an array of integers \`nums\` and an integer \`target\`, return the indices of the two numbers such that they add up to \`target\`. :param nums: List[int] :param target: int :return: Tuple[int, int] num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"Create a function that takes an array of integers as input and outputs the maximum sum of a contiguous subarray. This function should be implemented in Python.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes an integer n and returns the nth element of a sequence defined as follows: the sequence starts with 1, and each subsequent element is the sum of the previous element and the square of its position in the sequence. For example, the sequence starts as [1, 4, 10, 22, 39, ...].","solution":"def sequence_element(n): Returns the nth element of a sequence where each element is the sum of the previous element and the square of its position in the sequence. The sequence starts with 1. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") if n == 1: return 1 sequence = [1] for i in range(2, n + 1): next_element = sequence[-1] + i**2 sequence.append(next_element) return sequence[-1]"},{"question":"Create a function that , given a string s consisting of digits 0-9, and a positive integer n, returns all possible permutations of the digits in s from length n to n.","solution":"from itertools import permutations def get_digit_permutations(s, n): Given a string s consisting of digits 0-9, and a positive integer n, this function returns all possible permutations of the digits in s of length n. return [''.join(p) for p in permutations(s, n)]"},{"question":"Create a function that takes an array of positive integers and returns an array containing the sum of all prime numbers found in the input array.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(arr): Returns the sum of all prime numbers in the input array. return sum(n for n in arr if is_prime(n))"},{"question":"Create a function that accepts two arguments, both strings. Return a new string that is the result of appending the argument strings together and then removing all characters that are not letters. Finally, return the reversed string.","solution":"import re def append_and_reverse(str1, str2): Appends str1 and str2, removes non-letter characters, and returns the reversed string. combined_str = str1 + str2 letters_only_str = re.sub(r'[^a-zA-Z]', '', combined_str) reversed_str = letters_only_str[::-1] return reversed_str"},{"question":"Create a function that calculates the sum of the greatest common divisors (GCD) of all pairs of numbers from 1 to n. The function should be named \`sum_of_gcds(n)\` and take an integer \`n\` as its argument. The function should return the sum of the GCDs of all pairs (i, j) where 1 <= i < j <= n.","solution":"import math def sum_of_gcds(n): Calculate the sum of the greatest common divisors (GCD) of all pairs of numbers from 1 to n. :param n: integer :return: sum of GCDs of all pairs (i, j) where 1 <= i < j <= n total_gcd_sum = 0 for i in range(1, n): for j in range(i+1, n+1): total_gcd_sum += math.gcd(i, j) return total_gcd_sum"},{"question":"Create a function that takes in an array of integers and return an array containing the sum and the average of the integers in the input array.","solution":"def sum_and_average(arr): Returns a list containing the sum and the average of the integers in the input array. if not arr: return [0, 0] # Handles empty array case total_sum = sum(arr) average = total_sum / len(arr) if arr else 0 return [total_sum, average]"},{"question":"Create a function that takes an integer \`n\` and prints n asterisks ( asterisks are represented by the character '*'). How can I do this in Python?","solution":"def print_asterisks(n): Prints n asterisks in a single line. print('*' * n)"},{"question":"Create a function that takes an integer number as a parameter and prints that number's reverse.","solution":"def reverse_number(n): Returns the reverse of the integer number n. reversed_str = str(abs(n))[::-1] reversed_number = int(reversed_str) return reversed_number if n >= 0 else -reversed_number"},{"question":"Create a function that takes in an array of integers as an argument. The function must calculate and return the maximum sum of a subarray (contiguous elements) within the given array. If the array contains only non-positive integers, the function should return 0.","solution":"def max_sum_subarray(arr): Calculate and return the maximum sum of a subarray within the given array. If the array contains only non-positive integers, return 0. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 max_sum = float('-inf') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max(max_sum, 0)"},{"question":"Create a function that takes an integer as input and returns the factorial of that number using recursion. The function should handle negative numbers and return an appropriate error message.","solution":"def factorial(n): Returns the factorial of a positive integer \`n\` using recursion. For negative integers, returns an error message. if n < 0: return \\"Error: Factorial is not defined for negative numbers\\" elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes an integer as an argument and returns the result of multiplying all the digits in that number together.","solution":"def multiply_digits(n): Returns the result of multiplying all the digits in the given integer n. If n is negative, the negative sign is ignored. n = abs(n) # Ignore the sign of the number product = 1 # Initialize the product while n > 0: digit = n % 10 # Get the last digit product *= digit # Multiply the digit to the product n //= 10 # Remove the last digit return product"},{"question":"Create a function that takes as input an array, and returns that array with all values repeated twice. For example, given the array [1, 2, 3], the function should return [1, 1, 2, 2, 3, 3].","solution":"def repeat_elements(arr): Takes an array and returns it with all values repeated twice. result = [] for item in arr: result.extend([item, item]) return result"},{"question":"Create a function that implements a bubble sort algorithm. Bubble sort is a simple comparison-based algorithm that iterates over the list, compares adjacent elements, and swaps them if they are in the wrong order. The process is repeated until the list is sorted. In this function, you should not use any built-in sorting functions.","solution":"def bubble_sort(arr): Implements the bubble sort algorithm to sort a list in ascending order. n = len(arr) for i in range(n): # Track if any swaps are made in this pass swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: # Swap the elements arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no elements were swapped, the list is already sorted if not swapped: break return arr"},{"question":"Create a function that takes a list of integers, and returns a new list that contains every second element from the original list, starting from the first element. For example, if the input list is \`[1, 2, 3, 4, 5]\`, the output list should be \`[1, 3, 5]\`.","solution":"def every_second_element(lst): Returns a list of every second element starting from the first element. :param lst: List of integers :return: New list containing every second element from the original list return lst[::2]"},{"question":"Create a function that takes in a single integer as an argument and returns the next greatest integer that is divisible by 6.","solution":"def next_greatest_divisible_by_6(n): Returns the next greatest integer that is divisible by 6. while True: n += 1 if n % 6 == 0: return n"},{"question":"Create a function that accepts an integer matrix as input and returns the minimum sum of the path from the top-left corner to the bottom-right corner, moving only down or right.","solution":"def min_path_sum(matrix): Returns the minimum sum of the path from the top-left corner to the bottom-right corner of a given integer matrix, moving only down or right. if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) # Initialize a DP matrix with the same dimensions as the input matrix dp = [[0] * cols for _ in range(rows)] # Set the starting point dp[0][0] = matrix[0][0] # Fill the first row (can only come from the left) for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column (can only come from above) for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp matrix for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right corner contains the minimum path sum return dp[rows-1][cols-1]"},{"question":"Create a function that generates random integers within a specified range.","solution":"import random def generate_random_integer(min_value, max_value): Generates a random integer within the specified range (inclusive). Parameters: min_value (int): The minimum value of the range. max_value (int): The maximum value of the range. Returns: int: A random integer between min_value and max_value (inclusive). if min_value > max_value: raise ValueError(\\"min_value should not be greater than max_value\\") return random.randint(min_value, max_value)"},{"question":"Create a function that takes a list of strings and prints each string in the list in ascending order. Please write the solution in Python.","solution":"def sort_and_print(strings): Takes a list of strings and prints each string in ascending order. for string in sorted(strings): print(string)"},{"question":"Create a function that takes a string as input and returns a new string with each character repeated twice. For example, if the input string is \\"hello\\", the output should be \\"hheelllloo\\".","solution":"def repeat_characters(s): Returns a new string with each character in the input string repeated twice. Parameters: s (str): The input string. Returns: str: A new string where each character is repeated twice. return ''.join([char * 2 for char in s])"},{"question":"Create a function that takes a single integer n as input and returns a list containing n elements where each element is the nth Fibonacci number. The Fibonacci sequence is a series of numbers where a number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, and so on.","solution":"def fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that will accept a string of text as input and return a dictionary with the lipogrammatic occurrences in the text. A lipogram is a sentence or passage in which a given letter (here the letter 'e') does not appear. Your function should ignore case sensitivity and punctuation.","solution":"import string def find_lipogrammatic_occurrences(text): Returns a dictionary with the count of words that do not contain the letter 'e'. The function ignores case sensitivity and punctuation. # Convert the text to lower case to ignore case sensitivity text = text.lower() # Remove punctuation from the text text = text.translate(str.maketrans('', '', string.punctuation)) # Split text into words words = text.split() # Find words that do not contain the letter 'e' lipogrammatic_words = [word for word in words if 'e' not in word] # Count the occurrences of each lipogrammatic word lipogrammatic_occurrences = {} for word in lipogrammatic_words: if word in lipogrammatic_occurrences: lipogrammatic_occurrences[word] += 1 else: lipogrammatic_occurrences[word] = 1 return lipogrammatic_occurrences"},{"question":"Create a function that validates if a given string is a palindrome (reads the same backward as forward). Also, check if this function can be used to determine if a number when converted to a string is a palindrome.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. s = str(s) return s == s[::-1] # Test if a number when converted to a string is a palindrome def is_number_palindrome(n): Returns True if the given number n is a palindrome, False otherwise. return is_palindrome(str(n))"},{"question":"Create a function that takes列表(list) as input and returns the second largest integer in the list. If the list has fewer than two unique elements, the function should return None.","solution":"def second_largest(nums): Returns the second largest integer in a list. If the list has fewer than two unique elements, returns None. unique_nums = list(set(nums)) # Remove duplicates if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) # Sort in descending order return unique_nums[1]"},{"question":"Create a function that takes in three arguments then print the arguments in reverse order.","solution":"def print_reverse(a, b, c): Prints the three arguments in reverse order. print(c, b, a)"},{"question":"Create a function that can accept a number and return the sum of all the numbers from 1 to the number that was passed in. Use recursion to implement this functionality.","solution":"def recursive_sum(n): Returns the sum of all numbers from 1 to n using recursion. if n <= 0: return 0 return n + recursive_sum(n - 1)"},{"question":"Create a function that takes a list of strings and returns a new list where each element is the length of the corresponding string from the input list.","solution":"def string_lengths(strings): Takes a list of strings and returns a list of integers representing the lengths of the corresponding strings. return [len(s) for s in strings]"},{"question":"Create a function that validates and returns whether a provided string is a valid email format. The function should take into consideration the standard rules for email validation, such as the presence of an '@' symbol, domain name, and top-level domain.","solution":"import re def is_valid_email(email): Validates if the provided string is a valid email address format. An email is considered valid if it contains: - A single '@' symbol - A domain name - A top-level domain email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return re.match(email_regex, email) is not None"},{"question":"Create a function that takes two integers as input and returns the sum of all the even numbers between them (inclusive). If no even number is found between them, the function should return -1. Assume that the first integer is always less than or equal to the second integer.","solution":"def sum_of_evens(a, b): Returns the sum of all the even numbers between a and b (inclusive). If no even number is found between them, the function returns -1. total = 0 even_found = False for num in range(a, b + 1): if num % 2 == 0: total += num even_found = True return total if even_found else -1"},{"question":"Create a function that generates all possible subsets of a given set and returns a list of these subsets. This function should include an optional parameter \`subsetSize\` that allows the user to retrieve subsets of a specific size. If \`subsetSize\` is not provided, the function should return all possible subsets.","solution":"from itertools import combinations def generate_subsets(input_set, subset_size=None): Generates all possible subsets of a given set. If subset_size is provided, returns only subsets of that size. :param input_set: list, the set to generate subsets from :param subset_size: int, optional, size of the subsets to return :return: list of subsets (each subset is a list) if subset_size is None: all_subsets = [] for size in range(len(input_set) + 1): all_subsets.extend([list(subset) for subset in combinations(input_set, size)]) return all_subsets else: return [list(subset) for subset in combinations(input_set, subset_size)]"},{"question":"Create a function that will compute the Fibonacci sequence up to a given number \`n\` using recursion.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Create a function that takes as input a 2D list \`matrix\`, where \`matrix[i][j]\` is an integer. The function should return a 2D list \`result\` where each element \`result[i][j]\` is the sum of all elements in \`matrix\` that are located above the element \`matrix[i][j]\`, not including \`matrix[i][j]\` itself. If the element is on the first row, its sum should be 0. Additionally, if any element in the input matrix is less than 0, the sum should not include that element.","solution":"def sum_above(matrix): Returns a 2D list where each element is the sum of all elements in the input matrix that are located above it. Only non-negative elements are included in the sum calculation. if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) result = [[0]*cols for _ in range(rows)] for col in range(cols): cumulative_sum = 0 for row in range(1, rows): if matrix[row-1][col] >= 0: cumulative_sum += matrix[row-1][col] result[row][col] = cumulative_sum return result"},{"question":"Create a function that reads a file and counts the occurrences of each word in the file. The function should ignore case sensitivity and punctuation. Then, return a dictionary with words as keys and their counts as values. Assume the file is large and text processing efficiency is crucial.","solution":"import re from collections import defaultdict def count_word_occurrences(file_path): Reads a file and counts the occurrences of each word, ignoring case sensitivity and punctuation. Parameters: file_path (str): The path to the file to be read. Returns: dict: A dictionary with words as keys and their counts as values. word_counter = defaultdict(int) with open(file_path, 'r', encoding='utf-8') as file: for line in file: # Remove punctuation and make all words lower case cleaned_line = re.sub(r'[^ws]', '', line).lower() words = cleaned_line.split() for word in words: word_counter[word] += 1 return dict(word_counter)"},{"question":"Create a function that swaps the first and last elements of an array and returns the modified array.","solution":"def swap_first_last(arr): Swaps the first and last elements of the array and returns the modified array. If the array has less than two elements, it returns the array as is. if len(arr) < 2: return arr arr[0], arr[-1] = arr[-1], arr[0] return arr"},{"question":"Create a function that takes two integers as input parameters and add them together. Then, create a new function that calls this addition function and prints the result.","solution":"def add(a, b): Returns the sum of a and b. return a + b def add_and_print(a, b): Adds a and b using add function, and prints the result. result = add(a, b) print(result) return result"},{"question":"Create a function that takes two arguments, an array of integers, and a threshold, and returns an array of booleans indicating whether each number in the input array is greater than the threshold.","solution":"def greater_than_threshold(arr, threshold): Given an array of integers and a threshold, return an array of booleans indicating whether each integer is greater than the threshold. :param arr: List[int] - list of integers :param threshold: int - the threshold :return: List[bool] - list of booleans return [num > threshold for num in arr]"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the squares of the original numbers, but only if the squares are even.","solution":"def even_squares(lst): Returns a list containing the squares of the integers from the input list, but only if the square is even. return [x ** 2 for x in lst if (x ** 2) % 2 == 0]"},{"question":"Create a function that takes a list of strings and returns the string that has the most unique characters. If there are multiple strings with the maximum number of unique characters, return the one that comes first lexicographically. If the list is empty, return an empty string.","solution":"def string_with_most_unique_characters(strings): Returns the string with the most unique characters. If there are multiple strings with the same number of unique characters, returns the one that comes first lexicographically. If the list is empty, returns an empty string. if not strings: return \\"\\" # Calculate the number of unique characters for each string unique_char_counts = [(len(set(s)), s) for s in strings] # Sort primarily by the number of unique characters (descending), then lexicographically sorted_strings = sorted(unique_char_counts, key=lambda x: (-x[0], x[1])) # Return the first string from the sorted list return sorted_strings[0][1]"},{"question":"Create a function that takes a list of strings and an integer x as parameters. The function should return a new list containing only the strings from the original list where the length of the string is greater than x.","solution":"def filter_strings_by_length(strings, x): Returns a list of strings whose lengths are greater than x. Parameters: strings (list): List of strings to be filtered. x (int): Length threshold. Returns: list: List of strings with length greater than x. return [s for s in strings if len(s) > x]"},{"question":"Create a function that takes two integers as input and returns their difference if the first number is greater than or equal to the second number. If the first number is less than the second number, it should print \\"Invalid input\\".","solution":"def calculate_difference(a, b): Returns the difference between a and b if a >= b. Otherwise, prints 'Invalid input'. if a >= b: return a - b else: print(\\"Invalid input\\") return None"},{"question":"Create a function that takes a number as an input and outputs the corresponding ASCII character.","solution":"def number_to_ascii(number): Returns the corresponding ASCII character for the given number. return chr(number)"},{"question":"Create a function that takes a string containing parentheses and returns the maximum depth of nesting. For example, the string \\"(()())\\" has a maximum nesting depth of 2.","solution":"def max_depth(s): Returns the maximum depth of nesting for the parentheses in the string. current_depth = 0 max_depth = 0 for char in s: if char == '(': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == ')': current_depth -= 1 return max_depth"},{"question":"Create a function that takes a string and returns the number of occurrences of each character in the string. The function should handle strings of arbitrary length.","solution":"def char_occurrences(s): Returns the number of occurrences of each character in the string s. Args: s (str): The input string. Returns: dict: A dictionary with characters as keys and their counts as values. occurrences = {} for char in s: if char in occurrences: occurrences[char] += 1 else: occurrences[char] = 1 return occurrences"},{"question":"Create a function that outputs the number of days in a given month and year. The function should accept two parameters, one for the month and one for the year. For leap years, the function should correctly calculate the number of days in February.","solution":"def days_in_month(month, year): Returns the number of days in a given month and year. Parameters: month (int): The month (1-12). year (int): The year (e.g., 2020). Returns: int: Number of days in that month and year. # List with the number of days in each month for a common year days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for February and leap year if month == 2: # Leap year condition: divisible by 4 but not by 100, unless divisible by 400 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 else: # For all other months return days_in_months[month - 1]"},{"question":"Create a function that takes in three integers and returns the maximum of the three. Analyze the time complexity and space complexity of your solution.","solution":"def maximum_of_three(a, b, c): Returns the maximum of three given integers a, b, and c. return max(a, b, c) # Time Complexity: O(1) - The operation is performed in constant time regardless of the input values. # Space Complexity: O(1) - The function uses a constant amount of space."},{"question":"Create a function that takes two parameters, \`a\` and \`b\`, which are positive integers. The function should check if \`b\` is a perfect square of \`a\`. If it is, return \`True\`. Otherwise, return \`False\`.","solution":"def is_perfect_square(a, b): Checks if b is a perfect square of a. Parameters: a (int): The base positive integer. b (int): The number to check if it is a perfect square of a. Returns: bool: True if b is a perfect square of a, False otherwise. return b == a * a"},{"question":"Create a function that receives a string as an input and prints out the reversed version of said string. Also, identify and fix any common mistakes that might occur during implementation.","solution":"def reverse_string(s): Returns the reversed version of the input string s. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") return s[::-1]"},{"question":"Create a function that takes an integer \`n\` and returns the number of trailing zeros in the factorial of \`n\`.","solution":"def trailing_zeros_in_factorial(n): Returns the number of trailing zeros in the factorial of n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Create a function that takes a list of integers as input and returns all possible subsets of the list, including the empty set.","solution":"from itertools import chain, combinations def all_subsets(lst): Returns all possible subsets of the input list, including the empty set. Args: lst (list): A list of integers. Returns: list: A list of lists, where each sublist is a possible subset of the input list. return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst) + 1)))"},{"question":"Create a function that sums the elements of an array of integers. The function should take an array of integers as input and output the sum of these integers.","solution":"def sum_array(arr): Returns the sum of the elements in the array. return sum(arr)"},{"question":"Create a function that , takes three integers and determines whether they are the three consecutive integers or not.","solution":"def are_three_consecutive(a, b, c): Returns True if a, b, and c are consecutive integers in any order. Otherwise, returns False. nums = sorted([a, b, c]) return nums[1] - nums[0] == 1 and nums[2] - nums[1] == 1"},{"question":"Create a function that takes in two parameters: an array of integers and an integer \`k\`. The function should return the \`k\`th largest element in the array. If the array does not contain at least \`k\` elements, the function should return \`-1\`.","solution":"def kth_largest_element(arr, k): Returns the kth largest element in the array. If the array does not contain at least k elements, returns -1. if len(arr) < k: return -1 arr.sort(reverse=True) return arr[k-1]"},{"question":"Create a function that generates and prints all permutations of a given string.","solution":"from itertools import permutations def generate_permutations(s): Generates and prints all permutations of a given string s. perm_list = [''.join(p) for p in permutations(s)] for perm in perm_list: print(perm) return perm_list"},{"question":"Create a function that takes a string as input and returns a string that contains only the vowels from the input string, but in a reverse order.","solution":"def reverse_vowels(input_string): Returns a string containing only the vowels from the input string, in reverse order. vowels = \\"aeiouAEIOU\\" found_vowels = [char for char in input_string if char in vowels] return ''.join(found_vowels[::-1])"},{"question":"Create a function that takes a number as an input and returns its factorial. In Python, how can you implement this function?","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes as input a list of positive integers and returns the smallest positive integer that is not present in the list. Your function should have a time complexity of O(n) and a space complexity of O(1). Can you also provide an explanation of your approach?","solution":"def first_missing_positive(nums): Returns the smallest positive integer that is not present in the list. Uses O(n) time complexity and O(1) space complexity. n = len(nums) # Step 1: Place each number in its correct position (1 should be at index 0, 2 at index 1, etc.) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Step 2: Find the first index which doesn't have the correct number for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, the missing number is n + 1 return n + 1"},{"question":"Create a function that takes a list of integers and returns a string with a representation of an array in delete format.","solution":"def array_to_delete_format(arr): Converts a list of integers to a string representation in a delete format. The delete format: for each element in the array 'n' (starting from the first element), the result string will look like: \\"[0]n, [1]m, [2]p, ...\\", where indices in square brackets represent the positions of elements in the initial list. :param arr: List of integers. :return: String representation in delete format. return \\", \\".join(f\\"[{i}]{x}\\" for i, x in enumerate(arr))"},{"question":"Create a function that takes a sorted list of integers and returns a new list containing only the elements that appear exactly twice.","solution":"def elements_appearing_twice(sorted_list): Returns a new list containing elements that appear exactly twice in the sorted_list. :param sorted_list: List[int] - A sorted list of integers. :return: List[int] - A new list containing elements that appear exactly twice. if not sorted_list: return [] result = [] count = 1 for i in range(1, len(sorted_list)): if sorted_list[i] == sorted_list[i-1]: count += 1 else: if count == 2: result.append(sorted_list[i-1]) count = 1 if count == 2: result.append(sorted_list[-1]) return result"},{"question":"Create a function that takes a string and returns the reversed version of the string without using any built-in functions or additional data structures.","solution":"def reverse_string(s): Reverses the input string without using any built-in functions or additional data structures. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that identifies the smallest number in a given array. If all elements are identical, the function should return \`null\`.","solution":"def smallest_number(arr): Returns the smallest number in the array. If all elements are identical, returns None. if len(arr) == 0: return None smallest = min(arr) if arr.count(smallest) == len(arr): return None return smallest"},{"question":"Create a function that determines the maximum profit that can be earned by buying and selling stocks on different days. You are only allowed to make one transaction (i.e., buy one and sell one share of the stock), and you must buy before you can sell. The function should return the maximum profit. If no profit can be made, return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock once. If no profit can be made, returns 0. :param prices: List of stock prices where prices[i] is the price of the stock on the ith day. :return: Maximum profit, or 0 if no profit can be made. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Create a function that takes a list of integers and returns the sum of all the squares of the numbers. The function should be efficient and handle large lists without causing a performance issue.","solution":"def sum_of_squares(numbers): Returns the sum of all the squares of the numbers in the list. Parameters: numbers (list of int): List of integers. Returns: int: Sum of squares of all the integers in the list. return sum(x ** 2 for x in numbers)"},{"question":"Create a function that accepts two lists of integers as input and returns a new list containing only the even numbers from both lists.","solution":"def filter_even_numbers(list1, list2): Returns a new list containing only the even numbers from both input lists. combined_list = list1 + list2 even_numbers = [num for num in combined_list if num % 2 == 0] return even_numbers"},{"question":"Create a function that takes a string as input and returns the number of uppercase letters, lowercase letters, digits, and special characters in the string.","solution":"def count_string_components(s): Returns the number of uppercase letters, lowercase letters, digits, and special characters in the string s. uppercase_count = 0 lowercase_count = 0 digit_count = 0 special_char_count = 0 for char in s: if char.isupper(): uppercase_count += 1 elif char.islower(): lowercase_count += 1 elif char.isdigit(): digit_count += 1 else: special_char_count += 1 return uppercase_count, lowercase_count, digit_count, special_char_count"},{"question":"Create a function that takes in a list of integers and returns a new list containing only the elements that are even numbers. The function should ignore any numbers that are odd or not integers.","solution":"def filter_even_numbers(lst): Filters the input list to return a new list containing only the even integers. Args: lst (list): A list containing integer elements. Returns: list: A new list containing only even integers from the input list, ignoring odd numbers and non-integers. return [x for x in lst if isinstance(x, int) and x % 2 == 0]"},{"question":"Create a function that takes an array of integers and returns the length of the longest strictly increasing subsequence (LIS). A strictly increasing subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements, and the values in the subsequence are strictly increasing.","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence in the array of integers nums. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that takes a string and returns the string with all the vowels replaced by a specified replacement character, except for the vowels in the word \\"challenge\\". The vowels in the word \\"challenge\\" should not be replaced if they are part of the word itself, but should be replaced in other words if they appear.","solution":"def replace_vowels(s, replacement_char): Returns the string with all the vowels replaced by replacement_char, except for the vowels in the word \\"challenge\\". vowels = \\"aeiouAEIOU\\" word_to_ignore = \\"challenge\\" def replace_func(word): if word.lower() == word_to_ignore: return word return ''.join([replacement_char if char in vowels else char for char in word]) words = s.split() result = ' '.join([replace_func(word) for word in words]) return result"},{"question":"Create a function that takes as its input 4 numbers and outputs the smallest of the four.","solution":"def find_smallest_of_four(a, b, c, d): Returns the smallest of four numbers a, b, c, and d. return min(a, b, c, d)"},{"question":"Create a function that takes an array of integers and rearranges the array so that all negative numbers are on the left side, followed by all positive numbers. The order among negative and positive numbers should be the same as in the input array. For example, given the array \`[-2, -1, 3, 2, 4, -7, -3, 8, 9, -5]\`, the function should return \`[-2, -1, -7, -3, -5, 3, 2, 4, 8, 9]\`.","solution":"def rearrange_negatives_and_positives(arr): Rearranges the array so that all negative numbers are on the left side, followed by all positive numbers. The order among negative and positive numbers is the same as in the input array. Parameters: arr (list of int): The input array of integers. Returns: list of int: The rearranged array. negative_numbers = [x for x in arr if x < 0] positive_numbers = [x for x in arr if x >= 0] return negative_numbers + positive_numbers"},{"question":"Create a function that takes in a list of integers and returns the count of elements that are greater than the value of the last element in the list.","solution":"def count_greater_than_last(lst): Returns the count of elements that are greater than the value of the last element in the list. if not lst: return 0 last_element = lst[-1] count = sum(1 for x in lst if x > last_element) return count"},{"question":"Create a function that takes two lists of strings as arguments and returns a list containing the strings that appear in both lists. The function should ignore case sensitivity and should return the result in the order of their first appearance in the first list.","solution":"def common_elements_ignore_case(list1, list2): Returns a list of strings appearing in both lists, ignoring case sensitivity, in the order of their first appearance in the first list. list2_case_insensitive = set(item.lower() for item in list2) return [item for item in list1 if item.lower() in list2_case_insensitive]"},{"question":"Create a function that accepts a string as an input and returns the length of the longest substring containing all distinct characters. For example, the string \\"abcabcbb\\" should return 3 because the longest substring with all distinct characters is \\"abc\\".","solution":"def longest_unique_substring(s): Returns the length of the longest substring containing all distinct characters. char_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a function that takes a string as an input and returns the string with all the vowels removed. For example, if the input is \\"Hello World\\", the output should be \\"Hll Wrld\\". You can define the function signature as \`def remove_vowels(s: str) -> str\`.","solution":"def remove_vowels(s: str) -> str: Removes all vowels from the given string. Parameters: s (str): The input string. Returns: str: The string with all vowels removed. vowels = 'aeiouAEIOU' return ''.join([char for char in s if char not in vowels])"},{"question":"Create a function that takes a number \`n\` as input and returns the sum of the digits of \`n\`. For example, if \`n\` is 89, the function should return 17 (since 8 + 9 = 17).","solution":"def sum_of_digits(n): Returns the sum of the digits of the number n. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that takes two parameters: an integer n and a list of integers arr. The function should return the highest integer in the list that is less than or equal to n. If no such integer exists in the list, return -1.","solution":"def highest_less_equal(n, arr): Returns the highest integer in the list \`arr\` that is less than or equal to \`n\`. If no such integer exists, returns -1. valid_numbers = [num for num in arr if num <= n] return max(valid_numbers) if valid_numbers else -1"},{"question":"Create a function that takes two arguments, a list of integers and a target integer. The function should return a list of all indices where the target integer is found in the list.","solution":"def find_target_indices(nums, target): Returns a list of indices where the target is found in the list nums. return [i for i, num in enumerate(nums) if num == target]"},{"question":"Create a function that swaps the first and last element in a list. If the list has only one element, it should return the list as is.","solution":"def swap_first_last(lst): Swaps the first and last elements of a list. Parameters: lst (list): The list to swap elements in. Returns: list: The list with first and last elements swapped. if len(lst) > 1: lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Create a function that takes a single string argument and returns the longest palindromic substring in the input string. A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\". Note that you should return the first longest palindromic substring found.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the input string. if s == \\"\\": return \\"\\" n = len(s) longest_palindrome_start = 0 longest_palindrome_length = 1 def expand_around_center(left, right): nonlocal longest_palindrome_start nonlocal longest_palindrome_length while left >= 0 and right < n and s[left] == s[right]: current_palindrome_length = right - left + 1 if current_palindrome_length > longest_palindrome_length: longest_palindrome_start = left longest_palindrome_length = current_palindrome_length left -= 1 right += 1 for index in range(n): # Check for odd length palindromes expand_around_center(index, index) # Check for even length palindromes expand_around_center(index, index + 1) return s[longest_palindrome_start:longest_palindrome_start + longest_palindrome_length]"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the result of multiplying every other element in the original array except for the current element. For example, if the input array is [1, 2, 3, 4], the output should be [24, 12, 8, 6].","solution":"def array_of_products(array): Given an array of integers, returns a new array where each element is the result of multiplying every other element in the original array except for the current element. :param array: List[int], input array of integers :return: List[int], output array of products if len(array) == 0: return [] n = len(array) left_products = [1] * n right_products = [1] * n products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * array[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * array[i + 1] for i in range(n): products[i] = left_products[i] * right_products[i] return products"},{"question":"Create a function that takes a string and counts the occurrences of each distinct vowel in the string, where vowels are 'a', 'e', 'i', 'o', and 'u'. The function should return a dictionary where the keys are the vowels and the values are the counts of each vowel in the string.","solution":"def count_vowels(s): Counts the occurrences of each distinct vowel in the string. Args: s (str): The input string. Returns: dict: A dictionary with the keys as vowels ('a', 'e', 'i', 'o', 'u') and values as the counts of each vowel in the string. vowels = 'aeiou' counts = {vowel: 0 for vowel in vowels} s = s.lower() for char in s: if char in vowels: counts[char] += 1 return counts"},{"question":"Create a function that converts a string to a boolean value in Python, handling cases where the string is not a valid representation of a boolean.","solution":"def str_to_bool(value): Convert a string to a boolean value. Args: value (str): The string representation of the boolean. Returns: bool: The boolean value of the string. Raises: ValueError: If the string is not a valid boolean representation. if isinstance(value, str): val = value.strip().lower() if val in ['true', '1', 'yes', 'y']: return True elif val in ['false', '0', 'no', 'n']: return False raise ValueError(\\"Invalid boolean string representation\\")"},{"question":"Create a function that takes in a dictionary and checks if all the values are either all even or all odd, and returns True if they are uniform in parity and False otherwise.","solution":"def is_uniform_parity(d): Check if all values in the dictionary have the same parity (all even or all odd). Parameters: d (dict): The dictionary to check. Returns: bool: True if all values are either all even or all odd, False otherwise. if not d: return True it = iter(d.values()) first_value_parity = next(it) % 2 for value in it: if value % 2 != first_value_parity: return False return True"},{"question":"Create a function that prints out all numbers from 1 to n using a loop.","solution":"def print_numbers(n): Prints out all numbers from 1 to n using a loop. for i in range(1, n + 1): print(i)"},{"question":"Create a function that checks if a number is a \\"Lucas number\\" in Python. A Lucas number is a number in the integer sequence that starts with 2 and 1 (2, 1, 3, 4, 7, 11, ...). The sequence is defined by the recursive formula: L(n) = L(n-1) + L(n-2), where L(0) = 2 and L(1) = 1.","solution":"def is_lucas_number(number): Returns True if the number is a Lucas number, otherwise False. A Lucas number is defined by the sequence that starts with 2 and 1, and each subsequent number is the sum of the two previous numbers. if number < 0: return False lucas_0, lucas_1 = 2, 1 if number == lucas_0 or number == lucas_1: return True while lucas_1 < number: lucas_0, lucas_1 = lucas_1, lucas_0 + lucas_1 if lucas_1 == number: return True return False"},{"question":"Create a function that takes in a sorted list of integers and an integer target and returns the index of the target in the list, or -1 if the target is not in the list. This is a classic binary search algorithm problem to solve.","solution":"def binary_search(sorted_list, target): Performs binary search on the sorted_list to find the target. Returns the index of the target if found, otherwise returns -1. left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] == target: return mid elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that implements the merge sort algorithm in Python.","solution":"def merge_sort(arr): Perform merge sort on the given list and return the sorted list. if len(arr) <= 1: return arr # Finding the middle of the array mid = len(arr) // 2 # Dividing the array elements into 2 halves left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merging the sorted halves sorted_array = merge(left_half, right_half) return sorted_array def merge(left, right): Merge two sorted lists into one sorted list. result = [] i = 0 j = 0 # Traverse both lists and append smaller element to result while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 # Append remaining elements of left (if any) while i < len(left): result.append(left[i]) i += 1 # Append remaining elements of right (if any) while j < len(right): result.append(right[j]) j += 1 return result"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the maximum element found in the original list up to that index. For example, given the input list \`[1, 3, 2, 5, 4]\`, the output should be \`[1, 3, 3, 5, 5]\`.","solution":"def max_up_to_index(lst): Returns a new list where each element is the maximum element found in the original list up to that index. Args: lst (list of int): The original list of integers. Returns: list of int: A new list where each element is the maximum element found in the original list up to that index. if not lst: return [] max_lst = [lst[0]] current_max = lst[0] for num in lst[1:]: if num > current_max: current_max = num max_lst.append(current_max) return max_lst"},{"question":"Create a function that accepts a string and returns the count of distinct characters in the string, ignoring case sensitivity. For example, 'Aa' and 'a' should be counted as the same character.","solution":"def count_distinct_characters(s): Returns the count of distinct characters in the string, ignoring case sensitivity. distinct_chars = set(s.lower()) return len(distinct_chars)"},{"question":"Create a function that takes a string representing the name of a developer as a parameter and returns \\"Hello, [Developer Name]\\".","solution":"def greet_developer(name): Returns a greeting message for the given developer's name. return f\\"Hello, {name}\\""},{"question":"Create a function that gets an integer input from the user. Inside the function, use a loop to make sure the input is a valid integer. If the input is not a valid integer, keep asking until a valid integer is provided. Once the valid integer is obtained, return it.","solution":"def get_valid_integer(): Continuously prompts the user for an integer until a valid integer is provided. Returns the valid integer. while True: user_input = input(\\"Please enter a valid integer: \\") try: valid_integer = int(user_input) return valid_integer except ValueError: print(\\"Invalid input. Please enter an integer.\\")"},{"question":"Create a function that generates all possible combinations of strings from a list of strings.","solution":"from itertools import combinations def generate_combinations(strings): Generates all possible combinations of strings from a list of strings. Parameters: strings (list of str): A list of strings. Returns: list of str: A list of all possible combinations of strings, including combinations of different lengths. result = [] for r in range(1, len(strings) + 1): for comb in combinations(strings, r): result.append(\\"\\".join(comb)) return result"},{"question":"Create a function that takes a string containing a mix of uppercase, lowercase, and unnecessary spaces, and returns the string in title case. Title case means the first letter of each word is uppercase, and all other letters are lowercase.","solution":"def to_title_case(input_string): Converts a string to title case, with the first letter of each word in uppercase and all other letters in lowercase. return ' '.join(word.capitalize() for word in input_string.split())"},{"question":"Create a function that reads from a text file and returns its contents as a string. If the file does not exist, the function should raise a FileNotFoundError exception.","solution":"def read_file(file_path): Reads the contents of the file at the given file_path and returns it as a string. Raises a FileNotFoundError if the file does not exist. :param file_path: Path to the file to be read. :return: Contents of the file as a string. try: with open(file_path, 'r') as file: content = file.read() return content except FileNotFoundError: raise FileNotFoundError(f\\"The file at {file_path} does not exist.\\")"},{"question":"Create a function that can convert a list of strings into a single string by concatenating all the elements.","solution":"def concatenate_strings(strings): Concatenates a list of strings into a single string. Parameters: strings (list of str): The list of strings to concatenate. Returns: str: The concatenated string. return ''.join(strings)"},{"question":"Create a function that takes a JSON object, modifies it according to a set of rules, and returns the modified JSON object.","solution":"def modify_json(data): Modifies the JSON object (dictionary) according to the given rules. Args: data (dict): The JSON object to be modified. Returns: dict: The modified JSON object. # Rule 1: Modify \\"name\\" if \\"name\\" in data and data[\\"name\\"] == \\"John Doe\\": data[\\"name\\"] = \\"Jane Doe\\" # Rule 2: Modify \\"age\\" if \\"age\\" in data and data[\\"age\\"] < 18: data[\\"age\\"] = 18 # Rule 3: Remove \\"location\\" if value is \\"unknown\\" if \\"location\\" in data and data[\\"location\\"] == \\"unknown\\": del data[\\"location\\"] return data"},{"question":"Create a function that takes an array of integers and returns the largest sum of a contiguous subsequence (also known as a subarray) in the array. This is often known as the Kadane's Algorithm problem. For example, if the input array is [-2, -3, 4, -1, -2, 1, 5, -3], the function should return 7, as the contiguous subsequence [4, -1, -2, 1, 5] has the largest sum.","solution":"def max_subarray_sum(arr): Returns the largest sum of a contiguous subsequence in the array. Uses Kadane's algorithm to solve the problem efficiently. if len(arr) == 0: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a positive integer n as input and returns \`True\` if the number is a power of two, and \`False\` otherwise.","solution":"def is_power_of_two(n): Returns True if n is a power of two, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that can find the element with the maximum XOR value in a given array of integers. The function should return the maximum XOR value found.","solution":"def find_max_xor(nums): Returns the maximum XOR value found between any two elements in the array nums. max_xor = 0 n = len(nums) # Iterate over each pair of elements for i in range(n): for j in range(i + 1, n): max_xor = max(max_xor, nums[i] ^ nums[j]) return max_xor"},{"question":"Create a function that takes a URL as a string and returns the domain name from the URL. For example, if the input is \\"https://www.example.com/path/to/page\\", the function should return \\"example.com\\".","solution":"from urllib.parse import urlparse def get_domain_name(url): Extracts the domain name from the given URL. netloc = urlparse(url).netloc if netloc.startswith('www.'): netloc = netloc[4:] return netloc"},{"question":"Create a function that takes in two strings, str1 and str2, and returns a string that is the longest common subsequence of str1 and str2. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence of str1 and str2. m, n = len(str1), len(str2) # Create a dp array to store lengths of subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the LCS from the dp array lcs = [] i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(reversed(lcs))"},{"question":"Create a function that accepts three numbers as parameters and returns their product.","solution":"def multiply_three_numbers(a, b, c): Returns the product of the three numbers a, b, and c. return a * b * c"},{"question":"Create a function that takes an array of integers as input and returns the sum of the maximum and minimum numbers in the array. If the array is empty, the function should return 0.","solution":"def sum_of_max_min(arr): Returns the sum of the maximum and minimum numbers in the array. If the array is empty, return 0. if not arr: return 0 return max(arr) + min(arr)"},{"question":"Create a function that generates a list of prime numbers between a given range of numbers. Provide an example usage of the function.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes(start, end): Generate a list of prime numbers in the given range [start, end]. return [num for num in range(start, end + 1) if is_prime(num)] # Example usage: primes = generate_primes(10, 50) print(primes) # Output: [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"},{"question":"Create a function that can detect duplicate arrays within a list. For example, given the list \`[[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]\`, the function should return \`[1, 2, 3]\` as it is the duplicate array.","solution":"def find_duplicate_arrays(arrays): Detects duplicate arrays within a list of arrays. Parameters: arrays (list of list of int): A list containing multiple arrays. Returns: list: The first duplicate array detected, or an empty list if no duplicates exist. seen = set() for array in arrays: array_tuple = tuple(array) if array_tuple in seen: return array seen.add(array_tuple) return []"},{"question":"Create a function that returns the first letter of each word in a given string.","solution":"def first_letter_of_each_word(s): Returns the first letter of each word in a given string. :param s: The input string :type s: str :return: A string containing the first letter of each word :rtype: str return ''.join(word[0] for word in s.split())"},{"question":"Create a function that calculates the altitude of a rocket at a given time. The rocket starts at a height of 0 meters and ascends at a constant rate of 10 meters per second. Additionally, there is a delay of 5 seconds before the rocket starts moving. The function should take the time in seconds as input and return the height of the rocket at that time. If the time is less than 5 seconds, the rocket is still on the launchpad.","solution":"def rocket_altitude(time_in_seconds): Calculates the altitude of a rocket at a given time. The rocket ascends at a constant rate of 10 meters per second but starts ascending only after a delay of 5 seconds. Parameters: time_in_seconds (int): The time in seconds since the rocket launch countdown started. Returns: int: The altitude of the rocket in meters. if time_in_seconds < 5: return 0 else: return (time_in_seconds - 5) * 10"},{"question":"Create a function that reverses a string in Python without using any built-in reverse functions or slicing. You can only use loops and a few operations.","solution":"def reverse_string(s): Reverses a string s without using built-in reverse functions or slicing. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that takes a list of integers as input and returns a new list of integers that is the reverse of the input list. The function should not use the built-in reverse method.","solution":"def reverse_list(input_list): Returns a new list that is the reverse of the input list. Args: input_list (list): List of integers to be reversed. Returns: list: New list with integers in reverse order. reversed_list = [] for i in range(len(input_list)-1, -1, -1): reversed_list.append(input_list[i]) return reversed_list"},{"question":"Create a function that receives a string and replaces all non-alphanumeric characters with a space.","solution":"import re def replace_non_alphanumeric_with_space(s): Replaces all non-alphanumeric characters in the string s with a space. Parameters: s (str): The input string. Returns: str: The modified string with non-alphanumeric characters replaced by spaces. return re.sub(r'W+', ' ', s)"},{"question":"Create a function that checks if a string starts with a sequence of numbers and then followed by a hyphen and a sequence of letters, using regular expressions. Return 'Match found!' if the pattern is found, and 'No match.' if it is not.","solution":"import re def check_string_pattern(s): Checks if a string starts with a sequence of numbers followed by a hyphen and a sequence of letters. Args: s (str): The input string. Returns: str: 'Match found!' if the pattern is found, otherwise 'No match.'. pattern = r\\"^d+-[a-zA-Z]+\\" if re.match(pattern, s): return 'Match found!' else: return 'No match.'"},{"question":"Create a function that outputs the Fibonacci sequence up to the nth term, where each term is produced by adding the two preceding ones, starting from 0 and 1. The function should use recursion to calculate the sequence.","solution":"def fib(n): Returns the Fibonacci sequence up to the nth term using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = fib(n - 1) sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that can handle two inputs, an array of integers (each integer representing a number in a base system between 2 and 36) and a base system (between 2 and 36). The function should return an array of integers, each converted to the specified base.","solution":"def convert_number_to_base(number, base): Converts a given number to the specified base. :param number: The number to be converted, in base 10. :param base: The base to convert the number to, between 2 and 36. :return: A string representing the number in the specified base. if number == 0: return '0' digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = \\"\\" while number > 0: result = digits[number % base] + result number //= base return result def convert_array_to_base(numbers, base): Converts each number in the input array to the given base system and returns an array of results. :param numbers: List of integers, each representing a number in base 10. :param base: The base to convert the numbers to, between 2 and 36. :return: List of integers represented as strings in the specified base. return [convert_number_to_base(number, base) for number in numbers]"},{"question":"Create a function that generates a list of n random numbers between a minimum value (min_value) and a maximum value (max_value), including both the minimum and maximum values. The function should be designed to handle cases where the input parameters are not integers or valid numbers, and should raise appropriate exceptions for these cases.","solution":"import random def generate_random_numbers(n, min_value, max_value): Generates a list of n random numbers between min_value and max_value (inclusive). Parameters: - n: The number of random numbers to generate. - min_value: The minimum value for the random numbers. - max_value: The maximum value for the random numbers. Returns: List of n random numbers between min_value and max_value. if not isinstance(n, int) or n <= 0: raise ValueError(\\"n must be a positive integer\\") if not (isinstance(min_value, (int, float)) and isinstance(max_value, (int, float))): raise ValueError(\\"min_value and max_value must be numbers\\") if min_value > max_value: raise ValueError(\\"min_value cannot be greater than max_value\\") return [random.uniform(min_value, max_value) for _ in range(n)]"},{"question":"Create a function that checks whether a given number is a perfect cube or not. A number is considered a perfect cube if it can be expressed as the cube of an integer.","solution":"def is_perfect_cube(n): Checks whether a given number is a perfect cube. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect cube, False otherwise. if n < 0: n = -n cube_root = round(n ** (1 / 3)) return cube_root ** 3 == n"},{"question":"Create a function that takes a list of strings and returns a list of the strings that contain at least one vowel.","solution":"def contains_vowel(strings): Takes a list of strings and returns a list of the strings that contain at least one vowel. vowels = set('aeiouAEIOU') result = [s for s in strings if any(char in vowels for char in s)] return result"},{"question":"Create a function that takes an integer and returns its factorial. If the input is negative, return an appropriate error message. Additionally, ensure that the function handles large numbers efficiently. You can use Python's standard libraries for handling large numbers.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an error message. if n < 0: return \\"Error: Negative numbers do not have factorials.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that simulates the rolling of a 6-sided die and then prints the result. The function should not take any parameters and should return the result of the dice roll. You can use the \`random\` module to generate a random number for the dice roll.","solution":"import random def roll_die(): Simulates the rolling of a 6-sided die and returns the result. return random.randint(1, 6)"},{"question":"Create a function that accepts two parameters, a string and an integer, and return an array containing all the substrings of the string that are exactly the length of the integer.","solution":"def substrings_of_length(s, length): Returns a list of all substrings of the input string \`s\` that are exactly \`length\` characters long. Parameters: s (str): The input string. length (int): The length of the substrings to be returned. Returns: List[str]: A list of substrings of the specified length. if length <= 0: return [] return [s[i:i+length] for i in range(len(s) - length + 1)]"},{"question":"Create a function that , given a number, checks whether it is a perfect number or not.","solution":"def is_perfect_number(n): Returns True if n is a perfect number, else False. A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding the number itself). if n <= 1: return False divisors_sum = 1 # 1 is a proper divisor for any n > 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum == n"},{"question":"Create a function that calculates the sum of all values in a nested dictionary in Python, ignoring non-numeric values.","solution":"def sum_nested_dict(d): Calculate the sum of all numeric values in a nested dictionary, ignoring non-numeric values. Parameters: d (dict): The dictionary to sum the values of, which can have nested dictionaries. Returns: int/float: The sum of all numeric values in the dictionary. total = 0 for value in d.values(): if isinstance(value, dict): total += sum_nested_dict(value) elif isinstance(value, (int, float)): total += value return total"},{"question":"Create a function that takes a dictionary and returns a new dictionary with the keys and values swapped. If any value in the original dictionary is not hashable, it should throw an error.","solution":"def swap_dict_keys_values(d): Returns a new dictionary with the keys and values swapped. If any value in the original dictionary is not hashable, raises a TypeError. swapped_dict = {} for key, value in d.items(): if not isinstance(value, (int, float, str, tuple, frozenset, bytes)): raise TypeError(f\\"Value {value} is not hashable\\") swapped_dict[value] = key return swapped_dict"},{"question":"Create a function that inverts the case of a given string.","solution":"def invert_case(s): Inverts the case of every character in the given string. return s.swapcase()"},{"question":"Create a function that checks if the provided linked list is a palindrome or not. The function will take three parameters: the first node of the linked list, the length of the linked list, and a boolean flag to indicate whether the linked list is a palindrome or not.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def is_palindrome_util(head, length): if head is None or length <= 0: # Even length base case return True, head elif length == 1: # Odd length base case return True, head.next # Recurse to the end is_pal, next_node = is_palindrome_util(head.next, length - 2) # If we get a false from deeper in the recursion, bubble it up if not is_pal or next_node is None: return False, next_node # Check current nodes for palindrome is_pal_current = (head.value == next_node.value) # Move \`next_node\` one step next_node = next_node.next return is_pal_current, next_node def is_palindrome(head, length): is_pal, _ = is_palindrome_util(head, length) return is_pal"},{"question":"Create a function that divides two numbers, handling division by zero. Write the function in Python and provide a brief explanation of your code.","solution":"def divide(a, b): Returns the result of dividing a by b. If b is zero, return 'Error: Division by zero'. if b == 0: return 'Error: Division by zero' return a / b"},{"question":"Create a function that prints a message to the console. Answer in Python.","solution":"def print_message(message): Prints a message to the console. print(message)"},{"question":"Create a function that takes a tuple containing a string and an integer as its argument. The function should return a new tuple with the string repeated the number of times specified by the integer.","solution":"def repeat_string_tuple(input_tuple): Takes a tuple containing a string and an integer and returns a new tuple with the string repeated the number of times specified by the integer. Parameters: input_tuple (tuple): A tuple containing a string and an integer Returns: tuple: A new tuple with the string repeated as many times as specified by the integer string, times = input_tuple return (string * times, times)"},{"question":"Create a function that solves the problem of finding the longest increasing subsequence (LIS) in a given array of integers. The function should return the length of the LIS. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the function should return 4, as the increasing subsequence [2, 3, 7, 101] is the longest.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given array of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that takes a string of numbers and returns the sum of those numbers. The string of numbers will be separated by either commas or spaces.","solution":"def sum_of_numbers(number_string): Returns the sum of numbers in a string, separated by commas or spaces. # Replace commas with spaces to unify the delimiters clean_string = number_string.replace(',', ' ') # Split the string by spaces numbers = clean_string.split() # Convert split strings to integers and sum them up total = sum(int(num) for num in numbers) return total"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the first \`n\` even natural numbers. Additionally, include a code snippet to test the correctness of the function.","solution":"def sum_of_first_n_even_numbers(n): Returns the sum of the first n even natural numbers. return n * (n + 1)"},{"question":"Create a function that accepts a string and returns the longest palindrome substring. A palindrome is a string that reads the same backward as forward. For example, \\"racecar\\" is a palindrome.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string. if s == \\"\\": return s n = len(s) longest_start = 0 max_len = 1 # A table to keep track of palindromes - table[i][j] will be True if s[i:j+1] is palindrome table = [[False for x in range(n)] for y in range(n)] # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: table[i][i + 1] = True longest_start = i max_len = 2 # Check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if table[i + 1][j - 1] and s[i] == s[j]: table[i][j] = True if k > max_len: longest_start = i max_len = k return s[longest_start:longest_start + max_len]"},{"question":"Create a function that checks whether a user's input is a valid number. The function should handle integers, floating-point numbers, and numbers in scientific notation. It should also handle negative numbers. Your function should return True if the input is a valid number, and False otherwise.","solution":"import re def is_valid_number(s): Checks whether the provided string s is a valid number. A valid number can be: - An integer (e.g., \\"123\\", \\"-123\\"). - A floating-point number (e.g., \\"123.45\\", \\"-123.45\\"). - In scientific notation (e.g., \\"1e10\\", \\"-1.5e-10\\"). Args: s (str): The string to check. Returns: bool: True if s is a valid number, False otherwise. number_regex = re.compile(r'^[+-]?(d+(.d*)?|.d+)([eE][+-]?d+)?') return bool(number_regex.match(s))"},{"question":"Create a function that takes a string and prints each character on a new line. Here is a sample string to test this function: \`Hello, World!\`","solution":"def print_characters(s): Takes a string and prints each character on a new line. for char in s: print(char)"},{"question":"Create a function that takes a string and converts it into a list of words. Split the string at each comma and then split each word at each space. The function should return the final list of words.","solution":"def convert_string_to_word_list(input_string): Converts a string into a list of words. Splits the string at each comma and then splits each comma-separated part at each space. Args: input_string (str): The input string to be converted. Returns: list: A list of words. parts = input_string.split(',') words = [] for part in parts: words.extend(part.split()) return words"},{"question":"Create a function that takes an integer n and returns the first n Fibonacci numbers in an array.","solution":"def fibonacci(n): Returns the first n Fibonacci numbers in an array. if n <= 0: return [] fib_sequence = [0] * n if n > 0: fib_sequence[0] = 0 if n > 1: fib_sequence[1] = 1 for i in range(2, n): fib_sequence[i] = fib_sequence[i-1] + fib_sequence[i-2] return fib_sequence"},{"question":"Create a function that takes an integer \`n\` and returns the smallest integer greater than \`n\` that is a multiple of both 3 and 5. If no such number exists, it should return -1.","solution":"def smallest_multiple_3_and_5(n): Returns the smallest integer greater than n that is a multiple of both 3 and 5. If no such number exists, it should return -1. if n >= 0: return ((n // 15) + 1) * 15 else: return 15 # The smallest positive integer that is a multiple of both 3 and 5. # Example Usage # print(smallest_multiple_3_and_5(10)) # Output should be 15 # print(smallest_multiple_3_and_5(30)) # Output should be 45 # print(smallest_multiple_3_and_5(-5)) # Output should be 15"},{"question":"Create a function that checks for duplicates in an array of strings and returns the duplicates. If there are no duplicates, return an empty list.","solution":"def find_duplicates(arr): Returns a list of duplicate strings in the given array. If there are no duplicates, returns an empty list. from collections import Counter count = Counter(arr) duplicates = [item for item, freq in count.items() if freq > 1] return duplicates"},{"question":"Create a function that returns the running total of an array. The function should handle both positive and negative integers. Additionally, the function should be implemented without using any built-in sum or reduce functions.","solution":"def running_total(arr): Returns the running total of the input array. Parameters: arr (list of int): A list of integers (both positive and negative). Returns: list of int: A list representing the running total. running_totals = [] current_total = 0 for num in arr: current_total += num running_totals.append(current_total) return running_totals"},{"question":"Create a function that takes no parameters and returns a string that contains the message \\"This is a test message.\\" Is the function then called, it should print \\"Test passed.\\".","solution":"def get_test_message(): Returns the test message string. return \\"This is a test message.\\" def print_test_passed(): Prints 'Test passed.' if \`get_test_message\` returns the correct message. if get_test_message() == \\"This is a test message.\\": print(\\"Test passed.\\")"},{"question":"Create a function that sorts an array of integers using the Insertion Sort algorithm in Python. The function should take an array of integers as input and return the sorted array.","solution":"def insertion_sort(arr): Sorts an array of integers using the Insertion Sort algorithm. Args: arr: List of integers to be sorted. Returns: List of sorted integers. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Create a function that takes a string \`s\` as an argument and returns the number of unique characters in \`s\`. The function should ignore case sensitivity (i.e., 'A' should be considered the same as 'a') and all non-alphabetic characters should be ignored.","solution":"def count_unique_characters(s): Returns the number of unique alphabetic characters in the string s, ignoring case sensitivity. unique_chars = set() for char in s: if char.isalpha(): unique_chars.add(char.lower()) return len(unique_chars)"},{"question":"Create a function that sums all number in an array of numbers using recursion.","solution":"def sum_array(arr): Recursively sums all numbers in an array. :param arr: List of numbers :return: Sum of all numbers in the array if len(arr) == 0: return 0 return arr[0] + sum_array(arr[1:])"},{"question":"Create a function that takes a list of arrays and an integer k. The function should return a list containing the k-th element (0-indexed) from each array.","solution":"def kth_elements(arrays, k): Returns a list containing the k-th element from each array in the input list of arrays. Parameters: arrays (list of list of int): List of arrays. k (int): The index of the element to be retrieved from each array. Returns: list of int: List containing the k-th element from each array. Raises: IndexError: If \`k\` is out of bounds for any array. return [array[k] for array in arrays]"},{"question":"Create a function that takes a list of integers and returns a new list with all duplicates removed. Write the function in Python.","solution":"def remove_duplicates(lst): Returns a new list with all duplicates removed from the input list. seen = set() # Order preserving removal of duplicates return [x for x in lst if not (x in seen or seen.add(x))]"},{"question":"Create a function that converts a hexadecimal string into its binary equivalent string, using Python.","solution":"def hex_to_bin(hex_string): Convert a hexadecimal string to its binary equivalent string. Parameters: hex_string (str): The hexadecimal string to convert to binary. Returns: str: The binary equivalent string of the hexadecimal input. # Converting hexadecimal string to integer num = int(hex_string, 16) # Converting integer to binary string and removing the '0b' prefix bin_string = bin(num)[2:] return bin_string"},{"question":"Create a function that accepts an integer array and return the sum of all the even numbers in the array. If there are no even numbers, return 0. **Problem Statement:** Given an integer array, your task is to write a code snippet in Python that calculates the sum of all the even numbers in the array. If there are no even numbers, your function should return 0. Remember to handle the case where the array is empty.","solution":"def sum_of_even_numbers(arr): Returns the sum of all the even numbers in the array. If there are no even numbers, return 0. return sum(x for x in arr if x % 2 == 0)"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in descending order. If the list contains duplicates, they should be included in the sorted list as well. The function should handle both empty lists and lists with a single element.","solution":"def sort_descending(lst): Takes a list of integers and returns a new list with the integers sorted in descending order. Parameters: lst (list): A list of integers Returns: list: A new list with integers sorted in descending order return sorted(lst, reverse=True)"},{"question":"Create a function that accepts a list of strings and returns a new list where each element is the reverse of the corresponding element in the input list.","solution":"def reverse_strings(input_list): Accepts a list of strings and returns a new list where each element is the reverse of the corresponding element in the input list. Parameters: input_list (list of str): The list of strings to be reversed Returns: list of str: A list of reversed strings return [s[::-1] for s in input_list]"},{"question":"Create a function that takes two arguments. The first argument is a string \`str\` and the second argument is a single character \`char\`. The function should return the index of the last occurrence of \`char\` in \`str\`, or -1 if \`char\` is not present in \`str\`.","solution":"def last_occurrence(str, char): Returns the index of the last occurrence of char in str, or -1 if char is not present in str. return str.rfind(char)"},{"question":"Create a function that calculates the square root of a given number using the Newton-Raphson method, with a precision of 10^-7. The function should return the square root value.","solution":"def sqrt_newton_raphson(value, precision=1e-7): Calculates the square root of a given number using the Newton-Raphson method. Parameters: value (float): The number to find the square root of. precision (float): The precision of the result. Returns: float: The square root of the given number. if value < 0: raise ValueError(\\"Cannot compute square root of negative number\\") if value == 0: return 0.0 estimate = value while True: guess = 0.5 * (estimate + value / estimate) if abs(guess - estimate) < precision: return guess estimate = guess"},{"question":"Create a function that receives a list of integers and returns a new list containing only the even numbers from the original list, sorted in ascending order. For example, given the list \`numbers = [5, 3, 9, 4, 6, 2]\`, the function should return \`[2, 4, 6]\`.","solution":"def get_sorted_even_numbers(numbers): Returns a sorted list of even numbers from the given list of integers. even_numbers = [num for num in numbers if num % 2 == 0] even_numbers.sort() return even_numbers"},{"question":"Create a function that takes a string and returns the substring that appears first in alphabetical order. If there are multiple substrings that are the first, return all of them in a list.","solution":"def first_substring_alphabetical(s): Returns the substring that appears first in alphabetical order. If multiple substrings are first, returns all in a list. if not s: return [] substrings = {s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)} first_alpha = min(substrings) return [substring for substring in substrings if substring == first_alpha]"},{"question":"Create a function that calculates the number of bits needed to represent a number in binary. Write the function in Python and provide a detailed explanation of your solution.","solution":"def number_of_bits(n): Returns the number of bits needed to represent the integer n in binary. if n == 0: return 1 # 0 is represented by a single bit '0' count = 0 while n > 0: count += 1 n = n >> 1 # Right shift n by 1 bit return count"},{"question":"Create a function that can accept a list of strings and return a dictionary where the key is a string and the value is the number of times that string has appeared in the list. How can this function be optimized?","solution":"def count_strings(string_list): Returns a dictionary with count of each string in the list. Args: string_list (list of str): List of strings Returns: dict: A dictionary with strings as keys and their counts as values. string_count = {} for string in string_list: if string in string_count: string_count[string] += 1 else: string_count[string] = 1 return string_count # Optimization: The function can be optimized using collections.Counter: from collections import Counter def count_strings_optimized(string_list): Returns a dictionary with count of each string in the list using Counter for optimization. Args: string_list (list of str): List of strings Returns: dict: A dictionary with strings as keys and their counts as values. return dict(Counter(string_list))"},{"question":"Create a function that takes two integers, \`m\` and \`n\`, and returns their sum. If \`m\` is not provided, the function should use a default value of 10. If \`n\` is not provided, the function should use a default value of 5.","solution":"def sum_with_defaults(m=10, n=5): Returns the sum of m and n, with default values of 10 for m and 5 for n. return m + n"},{"question":"Create a function that takes three arguments and returns the sum The function should be able to handle different data types for the arguments (integer, float, string, etc.), but for string arguments, it should concatenate them instead of adding them.","solution":"def custom_sum(a, b, c): Returns the sum of a, b, and c if they are numbers. If any of the arguments is a string, it concatenates them as strings. if isinstance(a, str) or isinstance(b, str) or isinstance(c, str): return str(a) + str(b) + str(c) else: return a + b + c"},{"question":"Create a function that takes in an array of numbers and returns an array of the same length where each element is the sum of the original array's elements that are less than the current element.","solution":"def sum_of_elements_less_than_current(arr): Takes in an array of numbers and returns an array of the same length where each element is the sum of the original array's elements that are less than the current element. result = [] for i in range(len(arr)): current_sum = sum(x for x in arr if x < arr[i]) result.append(current_sum) return result"},{"question":"Create a function that takes a list of integers and returns the length of the list after removing all duplicates. The function should ensure that the original order of elements is preserved.","solution":"def unique_length(numbers): Returns the length of the list after removing all duplicates, while preserving the original order of elements. seen = set() unique_numbers = [] for num in numbers: if num not in seen: seen.add(num) unique_numbers.append(num) return len(unique_numbers)"},{"question":"Create a function that accepts a list of integers and returns a new list containing the first and last elements of the input list. If the input list is empty, the function should return an empty list.","solution":"def first_and_last_elements(lst): Returns a list containing the first and last elements of the input list. If the input list is empty, returns an empty list. if not lst: return [] return [lst[0], lst[-1]]"},{"question":"Create a function that takes an array of strings and returns a new array containing the reversed strings. If the input array is empty, return an empty array. The function should handle strings of varying lengths and non-alphabetic characters.","solution":"def reverse_strings(arr): Takes an array of strings and returns a new array containing the reversed strings. :param arr: List[str] - input array of strings :return: List[str] - output array of reversed strings return [s[::-1] for s in arr]"},{"question":"Create a function that takes a string and returns the length of the string. You should make sure the function can handle an empty string and a string with null or undefined values. How should the function behave in these cases?","solution":"def string_length(s): Returns the length of the string. If the input is None or undefined, returns 0. if s is None: return 0 if not isinstance(s, str): raise ValueError(\\"Input must be a string.\\") return len(s)"},{"question":"Create a function that finds the single number in an array where every other number appears twice. You may assume that there will always be only one number that appears once.","solution":"def single_number(nums): Finds the single number in the array where every other number appears twice. Assumes there is exactly one such number. Args: nums (List[int]): The list of numbers containing exactly one single number and all other numbers appearing twice. Returns: int: The single number. result = 0 for num in nums: result ^= num return result"},{"question":"Create a function that takes a string as input and returns the most frequent character. If there are multiple characters with the same highest frequency, return the one that comes first in alphabetical order. If the string is empty, return an empty string.","solution":"def most_frequent_char(s): Returns the most frequent character in the given string. If there are multiple characters with the same highest frequency, returns the one that comes first in alphabetical order. If the string is empty, returns an empty string. if not s: return \\"\\" from collections import Counter count = Counter(s) most_frequent = max(count.items(), key=lambda x: (x[1], -ord(x[0]))) return most_frequent[0]"},{"question":"Create a function that returns the middle element(s) of a list of integers. If the list has an odd number of elements, return the single middle element. If the list has an even number of elements, return the two middle elements as a list. The function should handle empty lists gracefully by returning an empty list.","solution":"def middle_elements(lst): Returns the middle element(s) of a list of integers. If the list has an odd number of elements, return the single middle element. If the list has an even number of elements, return the two middle elements as a list. If the list is empty, return an empty list. n = len(lst) if n == 0: return [] mid = n // 2 if n % 2 == 0: return [lst[mid-1], lst[mid]] else: return [lst[mid]]"},{"question":"Create a function that accepts two integers as parameters and return the sum of the squares of those integers. The function should correctly handle negative numbers and zero.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. return a**2 + b**2"},{"question":"Create a function that accepts two parameters: a string and an integer. The function should insert the integer into the string at the position corresponding to the integer's value. For instance, if the string is \\"hello\\" and the integer is 3, the output should be \\"hel3lo\\".","solution":"def insert_integer_in_string(s, num): Inserts the integer 'num' into the string 's' at the position of 'num'. If the position 'num' is out of bounds of the string, it appends 'num' to the end of the string. if num < 0: raise ValueError(\\"num should be a non-negative integer\\") if num >= len(s): return s + str(num) else: return s[:num] + str(num) + s[num:]"},{"question":"Create a function that takes an array and a target sum as inputs. The function should iterate through the array and return the first pair of numbers that add up to the target sum. If no such pair exists, the function should return an empty array.","solution":"def find_pair_with_sum(arr, target_sum): Finds the first pair of numbers in the array that add up to the target sum. Args: arr (list): The array of numbers. target_sum (int): The target sum. Returns: list: A list containing the first pair of numbers that add up to the target sum, or an empty list if no such pair exists. seen_numbers = set() for number in arr: needed_number = target_sum - number if needed_number in seen_numbers: return [needed_number, number] seen_numbers.add(number) return []"},{"question":"Create a function that generates a matrix of size \`n*n\` that contains numbers from 1 to \`n*n\` in a spiral order.","solution":"def generate_spiral_matrix(n): Generates a matrix of size n*n with numbers from 1 to n*n in spiral order. :param n: The size of the matrix (int) :return: The n*n spiral matrix (list of lists) if n <= 0: return [] matrix = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n - 1, 0, n - 1 num = 1 while left <= right and top <= bottom: # Fill top row for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Fill right column for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Fill bottom row if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Fill left column if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Create a function that calculates the new balance after an interest is applied to a given amount. The function should take three arguments: the initial amount of money, the利息 rate (as a percentage), and the number of times the interest is applied per year. The function should return the new balance. Assume that the interest is compounded annually.","solution":"def calculate_new_balance(principal, interest_rate, times_per_year): Calculates the new balance after interest is applied. principal: float - The initial amount of money. interest_rate: float - The interest rate as a percentage. times_per_year: int - The number of times the interest is applied per year. Returns the new balance as a float. interest_rate_decimal = interest_rate / 100 new_balance = principal * (1 + interest_rate_decimal) ** times_per_year return new_balance"},{"question":"Create a function that takes an array of integers and returns the index of the first element that is smaller than its predecessor. The function should return -1 if every element in the array is greater than or equal to the previous element.","solution":"def first_smaller_than_predecessor(arr): Returns the index of the first element that is smaller than its predecessor. If no such element exists, returns -1. for i in range(1, len(arr)): if arr[i] < arr[i - 1]: return i return -1"},{"question":"Create a function that takes in two numbers and returns the sum, difference, product, and quotient of those numbers.","solution":"def calculate_operations(a, b): Returns a tuple containing the sum, difference, product, and quotient (a/b) of the two numbers a and b. If b is 0, the quotient is set to None to avoid division by zero error. sum_result = a + b difference_result = a - b product_result = a * b quotient_result = a / b if b != 0 else None return (sum_result, difference_result, product_result, quotient_result)"},{"question":"Create a function that takes in three parameters (length, width, and height) and calculate the volume and surface area of a cuboid. The function should return a dictionary with keys \\"volume\\" and \\"surface_area\\" containing the calculated values.","solution":"def cuboid_properties(length, width, height): Calculate the volume and surface area of a cuboid. Parameters: length (float): The length of the cuboid. width (float): The width of the cuboid. height (float): The height of the cuboid. Returns: dict: A dictionary with keys \\"volume\\" and \\"surface_area\\" containing the calculated values. volume = length * width * height surface_area = 2 * (length * width + width * height + height * length) return { \\"volume\\": volume, \\"surface_area\\": surface_area }"},{"question":"Create a function that takes a sequence of integers and returns the number of inversions in the sequence. An inversion is defined as a pair of indices i < j such that the value at index i is greater than the value at index j.","solution":"def count_inversions(arr): Count inversions in the array using a modified merge sort. :param arr: List[int] Sequence of integers. :return: int Number of inversions in the sequence. return merge_sort_and_count(arr, 0, len(arr) - 1) def merge_sort_and_count(arr, left, right): if left >= right: return 0 mid = (left + right) // 2 count = merge_sort_and_count(arr, left, mid) count += merge_sort_and_count(arr, mid + 1, right) count += merge_and_count(arr, left, mid, right) return count def merge_and_count(arr, left, mid, right): # Left and right subarrays left_sub = arr[left: mid + 1] right_sub = arr[mid + 1: right + 1] i = j = 0 k = left inv_count = 0 while i < len(left_sub) and j < len(right_sub): if left_sub[i] <= right_sub[j]: arr[k] = left_sub[i] i += 1 else: arr[k] = right_sub[j] j += 1 inv_count += (mid - i + 1 - left) k += 1 while i < len(left_sub): arr[k] = left_sub[i] i += 1 k += 1 while j < len(right_sub): arr[k] = right_sub[j] j += 1 k += 1 return inv_count"},{"question":"Create a function that converts an integer to a string.","solution":"def int_to_string(number): Converts an integer to a string. Args: number (int): The integer to convert. Returns: str: The string representation of the integer. return str(number)"},{"question":"Create a function that generates a simple HTML content that represents a paragraph with a text.","solution":"def create_paragraph(text): Generates a simple HTML content that represents a paragraph with the given text. Args: text (str): The text to be wrapped in an HTML paragraph tag. Returns: str: A string representing the HTML paragraph. return f\\"<p>{text}</p>\\""},{"question":"Create a function that takes an integer as a parameter and returns the next number that has the same number of 1s in its binary representation. The function should be efficient and utilize bitwise operations. Provide a detailed explanation of your solution, including any libraries used and the logic behind the bitwise operations.","solution":"def next_number_with_same_ones(n): Returns the next number with the same number of 1s in the binary representation as the input integer n. c = n c0 = c1 = 0 while (c & 1) == 0 and (c != 0): c0 += 1 c >>= 1 while (c & 1) == 1: c1 += 1 c >>= 1 if c0 + c1 == 31 or c0 + c1 == 0: return -1 pos = c0 + c1 n |= (1 << pos) n &= ~((1 << pos) - 1) n |= (1 << (c1 - 1)) - 1 return n"},{"question":"Create a function that considers three numbers: \`a\`, \`b\`, and \`c\`. The function will return the highest value among \`a\`, \`b\`, and \`c\`.","solution":"def highest_of_three(a, b, c): Returns the highest value among a, b, and c. return max(a, b, c)"},{"question":"Create a function that takes an integer as an argument and returns a string in SQL format. The integer represents the number of rows to insert into a database, and the values of the row.","solution":"def generate_sql_insert_statement(num_rows): Generates an SQL insert statement inserting a specified number of rows. Args: num_rows (int): The number of rows to insert. Returns: str: SQL insert statement string. if num_rows <= 0: return \\"INSERT INTO table_name (id, value) VALUES ();\\" values_list = [] for i in range(1, num_rows + 1): values_list.append(f\\"({i}, 'value_{i}')\\") values_str = ', '.join(values_list) sql_statement = f\\"INSERT INTO table_name (id, value) VALUES {values_str};\\" return sql_statement"},{"question":"Create a function that prints \\"Welcome!!!\\" to the console.","solution":"def welcome_message(): Prints 'Welcome!!!' to the console. print(\\"Welcome!!!\\")"},{"question":"Create a function that takes an integer 'n' as input and returns a list containing the first 'n' Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first 5 Fibonacci numbers are 0, 1, 1, 2, 3.","solution":"def fibonacci(n): Returns a list containing the first 'n' Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that counts the number of vowels in a given string. Let's call this function \`countVowels\`. The function should be case-insensitive (i.e., it should count both 'a' and 'A' as vowels).","solution":"def count_vowels(s): Returns the number of vowels in the given string. :param s: Input string :type s: str :return: Number of vowels in the input string :rtype: int vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Create a function that takes a list of numbers and returns a new list where each number is the product of the original numbers from the input list, excluding the number at the current index. The function should be efficient and handle larger lists effectively.","solution":"def product_except_self(nums): Returns a list where each element is the product of all elements in the input list \`nums\` except for the element at the current index. length = len(nums) # Create an array for the results result = [1] * length # Create arrays for left and right products left_products = [1] * length right_products = [1] * length # Fill left_products array left_product = 1 for i in range(length): left_products[i] = left_product left_product *= nums[i] # Fill right_products array right_product = 1 for i in range(length - 1, -1, -1): right_products[i] = right_product right_product *= nums[i] # Calculate result array by multiplying left and right products for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Create a function that takes a number as input and returns the factorial of that number. The function should handle edge cases such as negative numbers and return an appropriate message for invalid inputs.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an error message. if not isinstance(n, int): return \\"Invalid input: input is not an integer.\\" if n < 0: return \\"Invalid input: factorial is not defined for negative numbers.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that will generate all odd numbers from 1 to n using a generator. The function should yield each odd number one by one.","solution":"def generate_odd_numbers(n): Yields all odd numbers from 1 to n (inclusive). Parameters: n (int): The upper limit for odd numbers to be generated. Yields: int: Odd numbers from 1 to n. for number in range(1, n + 1): if number % 2 != 0: yield number"},{"question":"Create a function that converts a binary string into a decimal number. The function should take a string as an input, where each character of the string is either '0' or '1', and return the decimal equivalent as an integer.","solution":"def binary_to_decimal(binary_str): Converts a binary string to a decimal number. Args: binary_str (str): A string consisting of '0's and '1's representing a binary number. Returns: int: The decimal equivalent of the binary number. return int(binary_str, 2)"},{"question":"Create a function that takes a string as an argument and returns the number of upper-case and lower-case letters in the string. The function should return a dictionary with the keys \\"upper\\" and \\"lower\\" and respective values representing the count of upper-case and lower-case letters.","solution":"def count_upper_lower(s): Takes a string and returns a dictionary with the count of upper-case and lower-case letters. :param s: string :return: dictionary with keys \\"upper\\" and \\"lower\\" counts = {\\"upper\\": 0, \\"lower\\": 0} for char in s: if char.isupper(): counts[\\"upper\\"] += 1 elif char.islower(): counts[\\"lower\\"] += 1 return counts"},{"question":"Create a function that identifies if a particular string exists in a list of strings. If the string is found, return \\"Found\\"; otherwise, return \\"Not Found\\".","solution":"def find_string(target, string_list): Checks if a target string is present in a list of strings. Parameters: - target: The string to find. - string_list: List of strings to search within. Returns: - \\"Found\\" if target is in string_list, otherwise \\"Not Found\\". if target in string_list: return \\"Found\\" else: return \\"Not Found\\""},{"question":"Create a function that calculates the sum of all numbers in a list. Write this function in Python.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the list. Parameters: numbers (list): A list of numbers. Returns: int: The sum of all numbers in the list. return sum(numbers)"},{"question":"Create a function that checks if a number is a prime number. If it is, return \`true\`, otherwise return \`false\`. A prime number is a greater than 1 and has no divisors other than 1 and itself.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes two arrays of integers, arr1 and arr2, and returns an array containing the common elements between them. The order of elements in the output array should be the same as their order in arr1. If there are no common elements, the function should return an empty array.","solution":"def common_elements(arr1, arr2): Returns a list of common elements between arr1 and arr2, preserving the order of arr1. set_arr2 = set(arr2) return [item for item in arr1 if item in set_arr2]"},{"question":"Create a function that determines if a string is a rotation of another string. The function should take two parameters: \`original\` and \`rotated\`. The function should return \`true\` if \`rotated\` is a rotation of \`original\`, and \`false\` otherwise. A rotation involves taking \`original\`, and moving any number of characters to the end or beginning of the string.","solution":"def is_rotation(original, rotated): Determines if \`rotated\` is a rotation of \`original\`. Args: original (str): The original string. rotated (str): The string to be checked for rotation. Returns: bool: True if \`rotated\` is a rotation of \`original\`, False otherwise. if len(original) != len(rotated): return False return rotated in (original + original)"},{"question":"Create a function that calculates the sum of all factors of a number excluding the number itself. This excludes 1 if it's not the only factor, as 1 is a common divisor for all numbers.","solution":"def sum_of_factors(n): Returns the sum of all factors of n, excluding the number itself. if n <= 1: return 0 factors_sum = 0 for i in range(1, n): if n % i == 0: factors_sum += i return factors_sum"},{"question":"Create a function that takes a list of strings as input and returns a new list with the strings sorted alphabetically.","solution":"def sort_strings(strings_list): Returns a new list with the strings sorted alphabetically. Parameters: strings_list (list): A list of strings to be sorted. Returns: list: A new list with the strings sorted alphabetically. return sorted(strings_list)"},{"question":"Create a function that takes a dictionary as an argument and returns a new dictionary with all the keys converted to uppercase. For example, if the input dictionary is {\\"name\\": \\"John\\", \\"age\\": 30}, the output should be {\\"NAME\\": \\"John\\", \\"AGE\\": 30}.","solution":"def convert_keys_to_uppercase(d): Returns a new dictionary with all the keys from input dictionary converted to uppercase. Args: d (dict): The input dictionary with string keys. Returns: dict: A new dictionary with keys in uppercase. return {key.upper(): value for key, value in d.items()}"},{"question":"Create a function that generates Fibonacci numbers up to a given count \`n\`. The function should return the Fibonacci numbers as a list. The time complexity should not exceed O(n).","solution":"def generate_fibonacci(n): Generate the first n Fibonacci numbers. Parameters: - n: int, the count of Fibonacci numbers to generate Returns: - list, a list containing the first n Fibonacci numbers if n <= 0: return [] fib_sequence = [0, 1] for _ in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence[:n]"},{"question":"Create a function that takes three parameters - a start date (as a string in the format 'YYYY-MM-DD'), an end date (as a string in the same format), and a list of dates (each as a string in the same format). The function should return a list of dates that are within the range of the start and end dates but not included in the provided list of dates.","solution":"from datetime import datetime, timedelta def filter_dates(start_date, end_date, exclude_dates): Returns a list of dates that are within the range of start_date and end_date but not included in the exclude_dates list. :param start_date: str, format 'YYYY-MM-DD' :param end_date: str, format 'YYYY-MM-DD' :param exclude_dates: list of str, each format 'YYYY-MM-DD' :return: list of str, dates within range but not in exclude_dates start = datetime.strptime(start_date, '%Y-%m-%d') end = datetime.strptime(end_date, '%Y-%m-%d') exclude_set = set(datetime.strptime(date, '%Y-%m-%d') for date in exclude_dates) result = [] current_date = start while current_date <= end: if current_date not in exclude_set: result.append(current_date.strftime('%Y-%m-%d')) current_date += timedelta(days=1) return result"},{"question":"Create a function that converts a string into a list of words. The function should handle cases where the string contains multiple spaces, leading and trailing spaces, and multiple consecutive spaces between words.","solution":"def string_to_word_list(input_string): Converts a string into a list of words. Handles multiple spaces, leading and trailing spaces, and multiple consecutive spaces. Args: input_string (str): The string to be converted. Returns: list: A list of words. return input_string.split()"},{"question":"Create a function that accepts two parameters, both of which are lists of integers. The function should return a new list containing the common elements between the two lists without any duplicates.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2 without duplicates. return list(set(list1).intersection(set(list2)))"},{"question":"Create a function that takes a non-empty string \`s\` and returns a list of all the substrings of \`s\` that start with the character at the same index as the first character of the string. For example, if the first character is 'a', then the substrings starting from 'a' would include 'ab', 'abc', 'abcd', etc.","solution":"def substrings_starting_with_first_char(s): Takes a non-empty string \`s\` and returns a list of all the substrings of \`s\` that start with the character at the same index as the first character of the string. Parameters: s (str): non-empty input string Returns: list: list of substrings starting with the first character of \`s\` if not s: raise ValueError(\\"The input string must be non-empty.\\") first_char = s[0] substrings = [] for i in range(1, len(s) + 1): substrings.append(s[:i]) return substrings"},{"question":"Create a function that checks if a given list of numbers contains any duplicates. If it does, return \`true\`, otherwise return \`false\`. Additionally, the function should identify and return the first duplicate number found in the list. If there are no duplicates, return \`None\`.","solution":"def find_duplicates(nums): Checks if a given list of numbers contains any duplicates. If duplicates are found, returns True and the first duplicate number. If no duplicates are found, returns False and None. seen = set() for num in nums: if num in seen: return True, num seen.add(num) return False, None"},{"question":"Create a function that generates a list of the first \`n\` numbers that are multiples of both 3 and 5, up to the limit \`k\`.","solution":"def multiples_of_3_and_5(n, k): Generates a list of the first n numbers that are multiples of both 3 and 5, up to the limit k. multiples = [] count = 0 number = 15 # since 15 is the first number that is a multiple of both 3 and 5. while count < n and number <= k: multiples.append(number) count += 1 number += 15 # Next number that is a multiple of both 3 and 5. return multiples"},{"question":"Create a function that takes a list of integers as input and returns the second largest unique number in the list.","solution":"def second_largest_unique(numbers): Returns the second largest unique number in the list. If there are no such elements, returns None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that takes an array of integers as input and returns the largest number in the array. If the array is empty, return an error message.","solution":"def find_largest_number(arr): Returns the largest number in the array. If the array is empty, returns an error message. Parameters: arr (list): A list of integers. Returns: int/str: The largest number in the array or an error message if the array is empty. if not arr: return \\"Error: The array is empty.\\" return max(arr)"},{"question":"Create a function that takes a WebSocket connection as an argument and sends a message to it. The message should be \\"Hello WebSockets!\\".","solution":"import asyncio import websockets async def send_message(websocket): Sends a fixed message \\"Hello WebSockets!\\" to a given WebSocket connection. message = \\"Hello WebSockets!\\" await websocket.send(message)"},{"question":"Create a function that checks if a number is a prime number. a prime number is greater than 1 and has no divisors other than 1 and itself.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that takes an integer N and an integer K as inputs. The function should return the factorial of N divided by K raised to the power of N.","solution":"def factorial_div_by_k_power_n(N, K): Returns the factorial of N divided by K raised to the power of N. def factorial(n): if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) fact_N = factorial(N) k_power_n = K ** N return fact_N / k_power_n"},{"question":"Create a function that takes two lists of integers as input and returns a list containing the product of all possible pairs between the two lists.","solution":"def products_of_pairs(list1, list2): Returns a list containing the product of all possible pairs between the two lists. Parameters: - list1: List of integers - list2: List of integers Returns: - List of integers: Each element is the product of some pair of elements from list1 and list2. return [a * b for a in list1 for b in list2]"},{"question":"Create a function that takes an array of integers, and finds the second smallest unique number in the array. If there is no second smallest unique number, return None.","solution":"def second_smallest_unique(numbers): Returns the second smallest unique number in the array, or None if it does not exist. unique_numbers = list(set(numbers)) unique_numbers.sort() return unique_numbers[1] if len(unique_numbers) > 1 else None"},{"question":"Create a function that splits a string into words.","solution":"def split_into_words(sentence): Splits the input sentence into words. :param sentence: str :return: list of str return sentence.split()"},{"question":"Create a function that takes a string as input and returns the string in reverse order. If the string contains digits, reverse only the digits in the string, leaving all other characters in their original positions. For example, if the input is \\"abc123def\\", the output should be \\"abc321def\\".","solution":"def reverse_digits_in_string(s): Reverses only the digits in the input string, leaving all other characters in their original positions. Args: s (str): The input string. Returns: str: The modified string with digits reversed. digits = [char for char in s if char.isdigit()] digits.reverse() result = [] digit_index = 0 for char in s: if char.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(char) return ''.join(result)"},{"question":"Create a function that finds the first occurrence of a character that repeats in a given string and returns its index.","solution":"def first_repeating_char_index(s): Finds the first occurrence of a character that repeats in the given string and returns its index. Returns -1 if no repeating character is found. char_indices = {} for index, char in enumerate(s): if char in char_indices: return char_indices[char] char_indices[char] = index return -1"},{"question":"Create a function that takes a 2D array (list of lists in Python) and returns the sum of all elements in the array.","solution":"def sum_2d_array(arr): Returns the sum of all elements in a 2D array. :param arr: List of lists (2D array) of numbers :return: Sum of all elements in the array total_sum = 0 for row in arr: total_sum += sum(row) return total_sum"},{"question":"Create a function that generates a list of prime numbers less than a given number n using the Sieve of Eratosthenes algorithm. The function should use recursion to implement the Sieve algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers less than the given number n using the Sieve of Eratosthenes algorithm implemented recursively. def sieve_rec(nums): if not nums: return [] prime = nums[0] return [prime] + sieve_rec([x for x in nums if x % prime != 0]) return sieve_rec(list(range(2, n)))"},{"question":"Create a function that converts a string to a numeric value. How can we approach this in Python?","solution":"def string_to_numeric(s): Converts a string representation of a number into a numeric value. try: # Try converting to an integer first return int(s) except ValueError: try: # If that fails, try converting to a float return float(s) except ValueError: # If all conversions fail, raise an error raise ValueError(\\"The provided string cannot be converted to a numeric value\\")"},{"question":"Create a function that takes an array and a target value and returns the nearest value to the target in the array. If there are two values equally close to the target, return the larger one.","solution":"def nearest_value(arr, target): Returns the nearest value to the target in the array. If there are two values equally close to the target, returns the larger one. nearest = min(arr, key=lambda x: (abs(x - target), -x)) return nearest"},{"question":"Create a function that takes a string representing a date in the format 'YYYY-MM-DD' and returns the day of the week for that date. The function should handle both valid and invalid dates gracefully.","solution":"from datetime import datetime def get_day_of_week(date_string): Returns the day of the week for the given date string in 'YYYY-MM-DD' format. If the date is invalid, returns 'Invalid date'. try: date_obj = datetime.strptime(date_string, '%Y-%m-%d') return date_obj.strftime('%A') except ValueError: return 'Invalid date'"},{"question":"Create a function that takes two parameters, an array of integers and an integer value \`n\`. The function should return a new array where each element of the original array is multiplied by \`n\`.","solution":"def multiply_array(arr, n): Returns a new array where each element of the input array 'arr' is multiplied by 'n'. return [x * n for x in arr]"},{"question":"Create a function that returns the sum of the first N natural numbers, where N is a positive integer. Write a function named \`sumOfFirstN\` that takes a single argument, \`N\`, and returns the sum of the first N natural numbers.","solution":"def sumOfFirstN(N): Returns the sum of the first N natural numbers. Parameters: N (int): The number of first natural numbers to sum. Returns: int: The sum of the first N natural numbers. if N <= 0: raise ValueError(\\"N must be a positive integer.\\") return N * (N + 1) // 2"},{"question":"Create a function that takes an integer as input and returns the sum of all its divisors, excluding the number itself. For example, the sum of divisors of 6 is 1 + 2 + 3 = 6, but since 6 is included, the function should return 1 + 2 + 3 = 6. If the number has no divisors, the function should return 0.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of n, excluding n itself. if n <= 1: return 0 divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that takes two integers as input and determines if they are both odd or even. The function should return \`true\` if both are odd or even, and \`false\` otherwise.","solution":"def both_odd_or_even(a, b): Determines if both integers are either odd or even. Parameters: a (int): First integer b (int): Second integer Returns: bool: True if both are odd or even, False otherwise return (a % 2 == b % 2)"},{"question":"Create a function that sums the numbers in a list and returns the result.","solution":"def sum_list(numbers): Returns the sum of the numbers in the list. return sum(numbers)"},{"question":"Create a function that checks if two vectors of integers are equal in terms of both their elements and the order of elements. If they are not equal, return the indices of the first non-matching element. If both vectors are exactly the same, return an empty vector.","solution":"def compare_vectors(vec1, vec2): Checks if two vectors of integers are equal in terms of both their elements and the order of elements. If they are not equal, returns the indices of the first non-matching element. If both vectors are exactly the same, returns an empty list. min_len = min(len(vec1), len(vec2)) for i in range(min_len): if vec1[i] != vec2[i]: return [i] if len(vec1) != len(vec2): return [min_len] return []"},{"question":"Create a function that returns the sum, difference, and product of two integers. The function should take two integers as input and return a tuple containing the sum, difference, and product of the two integers. Make sure to include comments in your function to explain the purpose of each part.","solution":"def calculate_operations(a, b): Takes two integers as input and returns a tuple containing the sum, difference, and product of the two integers. :param a: First integer :param b: Second integer :return: Tuple containing the sum, difference (a - b), and product of a and b # Calculate the sum of a and b sum_result = a + b # Calculate the difference of a and b (a - b) difference_result = a - b # Calculate the product of a and b product_result = a * b # Return the results as a tuple return (sum_result, difference_result, product_result)"},{"question":"Create a function that returns the first non-repeated character in a string. If there are no non-repeated characters, the function should return \`None\`. Here's a string to test the function with: \`test_str = \\"swiss\\"\`. What is the first non-repeated character in the string \`test_str\`?","solution":"def first_non_repeated_char(s): Returns the first non-repeated character in a string. If there are no non-repeated characters, returns None. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeated character for char in s: if char_count[char] == 1: return char return None test_str = \\"swiss\\" first_non_repeated_char(test_str)"},{"question":"Create a function that counts the number of odd numbers in an array. Write a function that accepts an array of integers as input and returns the count of odd numbers in that array. An odd number is an integer that is not divisible by 2. For instance, -3, -1, 1, 7, 9 are odd numbers, while -4, -2, 2, 4, 8 are not.","solution":"def count_odd_numbers(arr): Returns the count of odd numbers in an array. An odd number is an integer that is not divisible by 2. Parameters: arr (list): List of integers. Returns: int: Count of odd numbers in the array. return sum(1 for x in arr if x % 2 != 0)"},{"question":"Create a function that takes in two parameters: a list of integers and a target integer. The function should return \`true\` if any two distinct integers in the list sum up to the target integer, and \`false\` otherwise.","solution":"def two_sum(nums, target): Returns true if there are two distinct integers in the list that add up to the target. Otherwise, returns false. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Create a function that accepts two parameters, an integer n and a list of strings s. The function should return true if all strings in the list have exactly n characters, and false otherwise. How should I approach this problem?","solution":"def all_strings_length_n(n, s): Returns True if all strings in the list s have exactly n characters, otherwise False. for string in s: if len(string) != n: return False return True"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, and returns the sum of all even numbers between them, inclusive. If \`a\` is greater than \`b\`, return \`0\`. If either of the numbers is not an integer, return an error message.","solution":"def sum_even_numbers(a, b): Returns the sum of all even numbers between a and b, inclusive. If a is greater than b, return 0. If either of the numbers is not an integer, return an error message. if not isinstance(a, int) or not isinstance(b, int): return \\"Both inputs must be integers\\" if a > b: return 0 return sum(number for number in range(a, b + 1) if number % 2 == 0)"},{"question":"Create a function that checks if all elements in the first half of a list are less than all elements in the second half of the list.","solution":"def is_first_half_smaller_than_second(lst): Checks if all elements in the first half of the list are less than all elements in the second half of the list. if not lst: return True mid = len(lst) // 2 first_half = lst[:mid] second_half = lst[mid:] return all(x < min(second_half) for x in first_half)"},{"question":"Create a function that takes an array of integers and returns an array of their sum.","solution":"def sum_array(numbers): Returns the sum of elements in the array 'numbers'. Args: numbers (list of int): List of integers to be summed up. Returns: int: Sum of integers in the list. return sum(numbers)"},{"question":"Create a function that calculates the sum of all natural numbers from the start number to the end number (inclusive) using recursion. You should also include error handling for non-integer and out-of-range inputs. The function should return the sum if both inputs are within the valid range, and an appropriate error message otherwise.","solution":"def sum_natural_numbers(start, end): Recursively calculates the sum of natural numbers from start to end inclusive. Returns an error message for non-integer or out-of-range inputs. # Input validation if not isinstance(start, int) or not isinstance(end, int): return \\"Inputs must be integers.\\" if start < 1 or end < 1 or start > end: return \\"Inputs must be natural numbers and start must be less than or equal to end.\\" # Base case if start == end: return start # Recursive case return start + sum_natural_numbers(start + 1, end)"},{"question":"Create a function that takes in a list of integers and returns a new list where each element is its factorial. The function should be able to handle large numbers efficiently and use an iterative approach for calculating the factorial.","solution":"def factorial(n): Returns the factorial of a number n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def list_factorials(nums): Takes in a list of integers and returns a new list where each element is its factorial. return [factorial(num) for num in nums]"},{"question":"Create a function that takes two strings as parameters and checks if the first string contains the second string. If it does, return True, otherwise, return False.","solution":"def contains(substring, string): Returns True if 'substring' is found within 'string', otherwise False. return substring in string"},{"question":"Create a function that takes a variable length list of integers as a parameter and returns the sum of all the integers in the list. If the list is empty, the function should return a message saying \\"List is empty\\".","solution":"def sum_integers(*args): Returns the sum of all the integers in the list. If the list is empty, returns \\"List is empty\\". if not args: return \\"List is empty\\" return sum(args)"},{"question":"Create a function that takes an array of integers as input and returns the maximum number of pairs that can be made from the array, where each pair is formed by two consecutive integers. A pair is considered valid if the absolute difference between the two integers in the pair is exactly 1.","solution":"def max_consecutive_pairs(arr): Returns the maximum number of valid pairs from the array, where each pair consists of two consecutive integers with an absolute difference of 1. arr.sort() count = 0 i = 0 while i < len(arr) - 1: if abs(arr[i] - arr[i + 1]) == 1: count += 1 i += 2 # Skip over the next element since we just used it to form a pair else: i += 1 # Move to the next element return count"},{"question":"Create a function that checks if a string is a pangram or not. A pangram is a sentence that contains every letter of the alphabet at least once. For example, \\"The quick brown fox jumps over the lazy dog\\" is a pangram. You should return \\"Yes, the string is a pangram.\\" if it is a pangram, and \\"No, the string is not a pangram.\\" if it is not.","solution":"def is_pangram(s): Checks if the string s is a pangram. A pangram is a sentence containing every letter of the alphabet at least once. Args: s (str): The string to check Returns: str: \\"Yes, the string is a pangram.\\" if s is a pangram, \\"No, the string is not a pangram.\\" otherwise. alphabet = set('abcdefghijklmnopqrstuvwxyz') s_lower = s.lower() s_set = set(s_lower) if alphabet.issubset(s_set): return \\"Yes, the string is a pangram.\\" else: return \\"No, the string is not a pangram.\\""},{"question":"Create a function that takes in a string as an argument and checks if it is a palindrome or not. If the string is a palindrome, return \`True\`. Otherwise, return \`False\`.","solution":"def is_palindrome(s): Checks if the given string is a palindrome. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. s = s.replace(\\" \\", \\"\\").lower() return s == s[::-1]"},{"question":"Create a function that takes an integer as an argument and returns a tuple of that integer divided by each number in a list: [10, 5, 2]. The result should be rounded to two decimal places.","solution":"def divide_by_list(num): Takes an integer 'num' and returns a tuple of 'num' divided by each number in the list [10, 5, 2]. The results are rounded to two decimal places. divisors = [10, 5, 2] result = tuple(round(num / divisor, 2) for divisor in divisors) return result"},{"question":"Create a function that takes a 2D list \`grid\` of integers representing a grid of a map, and two integers \`row\` and \`col\` representing the starting row and column. The function should find the next position to move to in the grid based on certain rules. The grid can be of any size, and the starting position will always be within the grid. Your function should return a tuple \`(next_row, next_col)\`.","solution":"def next_position(grid, row, col): Finds the next position to move to in the grid based on certain rules. Args: grid: List[List[int]] - 2D list representing the grid of a map. row: int - starting row position. col: int - starting col position. Returns: tuple (next_row, next_col) representing the next position in the grid. rows = len(grid) cols = len(grid[0]) if rows > 0 else 0 # Simulated rules for the next move # For simplicity, moving right if possible, otherwise down if possible if col + 1 < cols: return (row, col + 1) elif row + 1 < rows: return (row + 1, col) else: return (row, col) # If no move is possible, return the same position"},{"question":"Create a function that finds the minimum element in an array of integers. The function should take an array of integers and its size as input parameters and return the minimum element found in the array.","solution":"def find_minimum(arr): Returns the minimum element in the array of integers. :param arr: List[int] :return: int if not arr: raise ValueError(\\"The array is empty\\") minimum = arr[0] for num in arr: if num < minimum: minimum = num return minimum"},{"question":"Create a function that takes an integer as input and returns true if the number is a palindrome, false otherwise.","solution":"def is_palindrome(num): Returns True if the input number is a palindrome, False otherwise. num_str = str(num) return num_str == num_str[::-1]"},{"question":"Create a function that takes in an array and returns the product of all numbers in the array. If the array is empty, return 1 (since the product of no numbers should be considered as 1).","solution":"def product_of_array(arr): Returns the product of all numbers in the array. If the array is empty, the function returns 1. if not arr: return 1 product = 1 for num in arr: product *= num return product"},{"question":"Create a function that takes two integers as input, finds the greatest common divisor (GCD) of the two numbers, and then finds all multiples of the GCD within the range of the two input numbers. The function should return a list of these multiples.","solution":"import math def gcd_multiples(a, b): Returns a list of all multiples of the GCD of 'a' and 'b' which fall within the range of 'a' and 'b'. # Calculate GCD of a and b g = math.gcd(a, b) # Determine the range range_start = min(a, b) range_end = max(a, b) # Find all multiples of GCD in the range multiples = [] for i in range(range_start, range_end + 1): if i % g == 0: multiples.append(i) return multiples"},{"question":"Create a function that takes an integer as input and outputs the largest divisible number of 3.","solution":"def largest_divisible_by_3(n): Returns the largest number less than or equal to n that is divisible by 3. if n % 3 == 0: return n return n - (n % 3)"},{"question":"Create a function that takes in a list of integers and returns a dictionary where the keys are those unique numbers and the values are their corresponding indices.","solution":"def list_to_dict(lst): Takes a list of integers and returns a dictionary where the keys are unique numbers and the values are their corresponding indices. :param lst: List of integers :return: A dictionary with unique numbers as keys and their first occurrence index as values num_dict = {} for i, num in enumerate(lst): if num not in num_dict: num_dict[num] = i return num_dict"},{"question":"Create a function that takes a string as input and returns a new string where every character in the original string is repeated twice consecutively.","solution":"def double_characters(s): Returns a new string where every character in the original string is repeated twice consecutively. Parameters: s (str): The input string. Returns: str: The string with every character repeated twice. return ''.join([char * 2 for char in s])"},{"question":"Create a function that generates and returns all the unique combinations of a given length from an array of numbers. The function should work for arrays of variable sizes.","solution":"from itertools import combinations def unique_combinations(arr, length): Generates and returns all unique combinations of a given length from an array of numbers. Parameters: arr (list of int/float): The input array of numbers. length (int): The length of each combination. Returns: list of tuples: A list of unique combinations. return list(combinations(arr, length))"},{"question":"Create a function that takes in a list and returns the maximum element from the list. If the list is empty, the function should return None.","solution":"def find_max(lst): Returns the maximum element from the list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Create a function that takes a string and returns only the unique characters in that string in the order they first appear. For example, given the string \\"hello\\", the function should return \\"helo\\" because 'l' appears twice but it should only be included once in the result.","solution":"def unique_chars(s): Returns a string of unique characters from the input string s in the order they first appear. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes an integer as a parameter and returns a list of all the divisors of that number, including 1 and the number itself.","solution":"def find_divisors(n): Returns a list of all the divisors of the given integer n, including 1 and n itself. Parameters: n (int): The number to find the divisors of. Returns: list: A list of divisors of n. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") divisors = [i for i in range(1, n + 1) if n % i == 0] return divisors"},{"question":"Create a function that takes in a list and an integer value k. The function should return all the distinct combinations of k elements from the list.","solution":"from itertools import combinations def get_combinations(lst, k): Returns all distinct combinations of k elements from the list. :param lst: List of elements. :param k: Number of elements to combine. :return: List of tuples, each containing a distinct combination. return list(combinations(lst, k))"},{"question":"Create a function that receives an array and returns a new array containing only the elements that are greater than 10.","solution":"def filter_greater_than_ten(arr): Returns a new array containing only the elements that are greater than 10. Parameters: arr (list): A list of numbers. Returns: list: A list containing numbers greater than 10. return [x for x in arr if x > 10]"},{"question":"Create a function that takes three parameters: a list of positive integers, \`n\`, and a boolean flag \`mode\`. If \`mode\` is \`True\`, the function should return the indices of the \`n\` smallest numbers in the list. If \`mode\` is \`False\`, the function should return the indices of the \`n\` largest numbers in the list.","solution":"def find_indices(lst, n, mode): Returns the indices of the n smallest or n largest numbers in the list. Parameters: lst (list): A list of positive integers. n (int): The number of elements to find. mode (bool): If True, find indices of n smallest numbers; if False, find indices of n largest numbers. Returns: list: A list of indices of the n smallest or n largest numbers in the list. if mode: return sorted(range(len(lst)), key=lambda x: lst[x])[:n] else: return sorted(range(len(lst)), key=lambda x: lst[x], reverse=True)[:n]"},{"question":"Create a function that takes in a list of tuples, where each tuple contains a string and a list of integers. The function should return the string that is paired with the list of integers that has the highest sum. If there are multiple strings with the same highest sum, return the string that appears first in the list.","solution":"def string_with_highest_sum(tuple_list): Returns the string paired with the list of integers that has the highest sum. In case of tie, returns the string that appears first in the list. Args: tuple_list (list of tuples): Each tuple contains a string and a list of integers. Returns: str: The string with the highest sum of integers. max_sum = float('-inf') result_string = \\"\\" for string, int_list in tuple_list: current_sum = sum(int_list) if current_sum > max_sum: max_sum = current_sum result_string = string return result_string"},{"question":"Create a function that takes a dictionary as an input and returns a list of all the keys in the dictionary. You are to use the \`list()\` function and not any built-in dictionary methods for extracting keys.","solution":"def extract_keys(input_dict): Returns a list of all the keys in the input dictionary. Args: input_dict (dict): The dictionary from which to extract keys. Returns: list: A list containing all keys from the dictionary. return list(input_dict)"},{"question":"Create a function that takes a list of strings, \`str_list\`, and returns a single string where each element from the list is concatenated together, separated by a space.","solution":"def concatenate_strings(str_list): Concatenates a list of strings into a single string separated by spaces. return ' '.join(str_list)"},{"question":"Create a function that takes a string as input and returns a string with all vowels removed from it. Only consider 'a', 'e', 'i', 'o', and 'u' as vowels, and ignore the case (both uppercase and lowercase).","solution":"def remove_vowels(input_str): Remove all vowels ('a', 'e', 'i', 'o', 'u') from the input string. Ignore case. Parameters: input_str (str): The string from which vowels need to be removed. Returns: str: The string with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_str if char not in vowels])"},{"question":"Create a function that takes an integer as an argument and returns a string representation of the integer. The function should handle both positive and negative integers.","solution":"def int_to_string(n): Converts an integer to its string representation. return str(n)"},{"question":"Create a function that takes a list of strings and returns a list of lists where each inner list contains one string from the original list that starts with a specific prefix. The prefix is determined by the length of the string in the original list.","solution":"def group_by_prefix(strings): Groups strings by prefix length. Each string is grouped by its length as the prefix. Args: strings (list): List of strings to be grouped. Returns: list: A list of lists where each sublist contains strings grouped by prefix (length of the string). groups = {} for s in strings: prefix = len(s) if prefix not in groups: groups[prefix] = [] groups[prefix].append(s) return [group for group in groups.values()]"},{"question":"Create a function that generates a list of prime numbers from 2 to a given maximum integer \`n\`. The function should use the Sieve of Eratosthenes algorithm for better efficiency.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers from 2 up to a given maximum integer n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [x for x in range(2, n + 1) if is_prime[x]]"},{"question":"Create a function that takes an integer n, and returns the nth Fibonacci number using both iterative and recursive methods.","solution":"def fibonacci_iterative(n): Returns the nth Fibonacci number using iterative method. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def fibonacci_recursive(n): Returns the nth Fibonacci number using recursive method. if n <= 0: return 0 elif n == 1: return 1 return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"Create a function that takes three parameters: \`a\`, \`b\`, and \`c\`. The function should check if all three numbers are equal. If they are, return a message saying \\"All numbers are equal\\". If not, return a message saying \\"Numbers are not equal\\".","solution":"def check_equal(a, b, c): Returns a message indicating whether all three numbers are equal. if a == b == c: return \\"All numbers are equal\\" else: return \\"Numbers are not equal\\""},{"question":"Create a function that generates a potency table. Write a function called \`generate_potency_table\` that takes in two parameters \`n\` and \`m\`. The function will generate a printed table where each cell in the table corresponds to \`i\` to the power of \`j\`, where \`i\` varies from 1 to \`n\` and \`j\` varies from 1 to \`m\`.","solution":"def generate_potency_table(n, m): Generates and prints a potency table of size n x m. Each cell (i, j) contains the value of i ** j. table = [] for i in range(1, n + 1): row = [] for j in range(1, m + 1): row.append(i ** j) table.append(row) for row in table: print(\\" \\".join(map(str, row))) # Example of usage (not part of the solution to be tested) # generate_potency_table(3, 4)"},{"question":"Create a function that never returns and uses a loop that goes on forever. In Python, how would you define such a function? Also, explain why it's not a good idea to run such a function on a system.","solution":"def infinite_loop(): This function runs an infinite loop and never returns. while True: pass"},{"question":"Create a function that takes in a list of words, counts the occurrences of each word, and returns a dictionary with the words as keys and their counts as values.","solution":"def word_count(words): Takes a list of words and returns a dictionary with the words as keys and their counts as values. count_dict = {} for word in words: if word in count_dict: count_dict[word] += 1 else: count_dict[word] = 1 return count_dict"},{"question":"Create a function that generates a unique identifier based on a given string. The identifier should be a string consisting of 16 characters, combining uppercase letters, lowercase letters, and digits. The function should ensure that the identifier is unique for a given input string within its execution context.","solution":"import hashlib import base64 def generate_unique_identifier(input_string): Generates a unique identifier based on the given input string. The identifier is a string of 16 characters composed of uppercase letters, lowercase letters, and digits. # Create a SHA-256 hash object sha256_hash = hashlib.sha256() # Update the hash object with the bytes of the input string sha256_hash.update(input_string.encode()) # Get the digest message in bytes, then encode it to base64 hashed_bytes = sha256_hash.digest() base64_encoded = base64.urlsafe_b64encode(hashed_bytes) # Take the first 16 characters of the base64 encoded string unique_identifier = base64_encoded[:16].decode('utf-8') return unique_identifier"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the odd numbers from the input list. Define the function as a lambda function inside a main function. The main function should use this lambda function to filter and return the odd numbers.","solution":"def filter_odd_numbers(numbers): Filters and returns only odd numbers from the input list. :param numbers: List of integers :return: List of odd numbers return list(filter(lambda x: x % 2 != 0, numbers))"},{"question":"Create a function that takes three arguments: an array, a number, and a frequency range. The function should return an array containing the indices of all elements in the input array that have a value greater than the given number and fall within the specified frequency range (inclusive).","solution":"def find_indices(arr, num, freq_range): Returns indices of elements in arr that are greater than num and whose frequency in arr is within the specified freq_range (inclusive). :param arr: List of numbers. :param num: Threshold number. :param freq_range: A tuple containing the min and max frequency (inclusive). :return: List of indices. from collections import Counter freq = Counter(arr) min_freq, max_freq = freq_range result_indices = [] for i, value in enumerate(arr): if value > num and min_freq <= freq[value] <= max_freq: result_indices.append(i) return result_indices"},{"question":"Create a function that takes in an array of integers and returns a new array that contains only the positive integers from the original array. Write a solution in Python.","solution":"def filter_positive_numbers(arr): Returns a new array that contains only the positive integers from the original array. return [num for num in arr if num > 0]"},{"question":"Create a function that converts a given positive integer into its binary representation in string format. The output string should start with '0b' and end with 'b' to indicate binary format. The function should validate that the input is indeed a positive integer and produce an appropriate error message if this condition is not met.","solution":"def int_to_binary_string(n): Converts a given positive integer into its binary representation in string format. The string starts with '0b' and ends with 'b'. Parameters: n (int): The positive integer to convert to binary. Returns: str: Binary representation starting with '0b' and ending with 'b'. Raises: ValueError: If the input is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") return f\\"0b{bin(n)[2:]}b\\""},{"question":"Create a function that counts the number of words in a sentence. A word is defined as any sequence of characters separated by spaces. For example, the sentence \\"Hello World\\" contains 2 words. Make sure to handle multiple spaces between words and leading/trailing spaces.","solution":"def count_words(sentence): Returns the number of words in a given sentence. A word is defined as any sequence of characters separated by spaces. Handles multiple spaces between words and leading/trailing spaces. words = sentence.strip().split() return len(words)"},{"question":"Create a function that takes a string as an input and returns a list of all possible permutations of that string using a recursive approach. Your function should not use any built-in library functions for generating permutations, such as itertools.permutations.","solution":"def string_permutations(s): Returns a list containing all possible permutations of the input string s. if len(s) == 1: return [s] perms = [] for i in range(len(s)): for p in string_permutations(s[:i] + s[i+1:]): perms.append(s[i] + p) return perms"},{"question":"Create a function that takes an array and prints the second largest number in the array. If the array does not have a second largest number, the function should print the message \\"No second largest number\\".","solution":"def print_second_largest(arr): Prints the second largest number in the array. If the array does not have a second largest number, prints \\"No second largest number\\". if len(arr) < 2: print(\\"No second largest number\\") return first = second = float('-inf') for number in arr: if number > first: second = first first = number elif first > number > second: second = number if second == float('-inf'): print(\\"No second largest number\\") else: print(second)"},{"question":"Create a function that takes in a list of the stock prices of a company over a period of time and returns the maximum profit that could have been made by buying and selling a single share of that stock. You are not allowed to buy and sell stock on the same day.","solution":"def max_profit(prices): Returns the maximum profit possible from a single buy and sell transaction. Parameters: prices (list): List of stock prices. Returns: int: Maximum profit. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Create a function that takes an input \\"n\\" and outputs a string of n lines of Pascal's Triangle.","solution":"def generate_pascals_triangle(n): Generate Pascal's Triangle up to n lines. :param n: number of lines in Pascal's Triangle :return: A list of strings where each string is a line in Pascal's Triangle if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) formatted_triangle = [\\" \\".join(map(str, row)) for row in triangle] return formatted_triangle"},{"question":"Create a function that takes an integer n as input and returns the square of n. If n is negative, the function should return the negative square of n (i.e., n^2 but with the negative sign). If n is zero, the function should return zero.","solution":"def custom_square(n): Returns the square of n. If n is negative, returns the negative square of n. If n is zero, returns zero. if n > 0: return n * n elif n < 0: return -(n * n) else: return 0"},{"question":"Create a function that takes a sorted list of integers and returns a new list where each pair of adjacent integers is summed. For example, given the list [1, 2, 3, 4], the function should return [3, 5, 7].","solution":"def sum_adjacent_pairs(sorted_list): Takes a sorted list of integers and returns a new list where each pair of adjacent integers is summed. :param sorted_list: List[int] - A sorted list of integers :return: List[int] - A new list with the summed adjacent pairs return [sorted_list[i] + sorted_list[i+1] for i in range(len(sorted_list) - 1)]"},{"question":"Create a function that takes two parameters, a string \`s\` and an integer \`n\`, and returns a new string where the string \`s\` is repeated \`n\` times. If \`n\` is less than or equal to zero, the function should return an empty string. If \`n\` is a positive integer, the function should return the string \`s\` repeated \`n\` times.","solution":"def repeat_string(s, n): Returns a new string where the string s is repeated n times. If n is less than or equal to zero, returns an empty string. if n <= 0: return \\"\\" return s * n"},{"question":"Create a function that takes a string and a character as arguments. The function should return the index of the last occurrence of the character in the string. If the character is not found, return -1.","solution":"def last_occurrence(s, ch): Returns the index of the last occurrence of the character ch in the string s. If the character is not found, returns -1. return s.rfind(ch)"},{"question":"Create a function that takes an array of integers as input and returns a new array containing only the distinct elements from the original array, sorted in ascending order.","solution":"def distinct_sorted(arr): Returns a new array with distinct elements from the input array, sorted in ascending order. return sorted(set(arr))"},{"question":"Create a function that generates a list of prime numbers up to a given non-negative integer.","solution":"def generate_primes(n): Generates a list of all prime numbers up to a given non-negative integer n. Parameters: - n (int): The non-negative integer up to which to generate prime numbers. Returns: - list: A list containing all prime numbers up to n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for current in range(2, n + 1): if is_prime[current]: primes.append(current) for multiple in range(current * current, n + 1, current): is_prime[multiple] = False return primes"},{"question":"Create a function that outputs a string \\"hello world\\" no matter what parameters it receives.","solution":"def hello_world(*args, **kwargs): Returns the string 'hello world' regardless of the input parameters. return \\"hello world\\""},{"question":"Create a function that takes \\"n\\" as an argument and multiplies every even number in the range from 1 to \\"n\\" (inclusive) by 2. Return the sum of these new values.","solution":"def sum_doubled_evens(n): Multiplies every even number from 1 to n (inclusive) by 2 and returns the sum of these values. Args: n (int): The upper limit of the range, inclusive. Returns: int: The sum of doubled even numbers. return sum((2 * i) for i in range(1, n + 1) if i % 2 == 0)"},{"question":"Create a function that takes an array of integers as input and returns an array with the integers sorted in descending order. Please ensure that the function uses a simple bubble sort algorithm for sorting. Bubble sort is a straightforward sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. It is not the most efficient sorting algorithm, but it is the easiest to understand. Your function should accept an integer array and return the sorted array in descending order.","solution":"def bubble_sort_desc(arr): Sorts the input array of integers in descending order using the bubble sort algorithm. n = len(arr) for i in range(n - 1): for j in range(0, n - i - 1): if arr[j] < arr[j + 1]: # Swap if the element found is less than the next element arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Create a function that takes a list of numbers and returns the smallest highest and largest lowest values from the list. The function should return these values as a tuple. If the list is empty, return an empty tuple.","solution":"def smallest_highest_largest_lowest(numbers): Returns a tuple containing the smallest and largest numbers in the list. If the list is empty, returns an empty tuple. Args: numbers (list): A list of numbers. Returns: tuple: A tuple containing (smallest, largest) if list is not empty, or an empty tuple if list is empty. if not numbers: return () smallest = min(numbers) largest = max(numbers) return (smallest, largest)"},{"question":"Create a function that takes in three arguments: a list of integers, a target integer, and a number of results to return. The function should return a list of tuples that represent the positions and values of the target integer within the list. If the target is not found, the function should return an empty list. Additionally, the function should only return the first 'n' results where 'n' is the number of results to return.","solution":"def find_target_positions(nums, target, n): Returns a list of tuples representing the positions and values of the target integer within the list. Only the first 'n' results are returned. If target is not found, returns an empty list. Args: nums (list): A list of integers. target (int): The target integer to find in the list. n (int): The number of results to return. Returns: list: A list of tuples (index, value) of the target integer in the list. results = [(idx, val) for idx, val in enumerate(nums) if val == target] return results[:n]"},{"question":"Create a function that takes a sorted array of integers as input and returns a new sorted array that contains elements that are common between the input array and an array of predefined values [3, 5, 7, 9].","solution":"def common_elements_with_predefined(arr): Takes a sorted array of integers as input and returns a new sorted array that contains elements that are common between the input array and a predefined array of values [3, 5, 7, 9]. predefined_values = [3, 5, 7, 9] common_elements = list(set(arr).intersection(predefined_values)) common_elements.sort() return common_elements"},{"question":"Create a function that calculates the sum of squares of all even numbers up to a given number n. The function should take an integer \`n\` as input and return the sum of squares of all even numbers from 2 to n (inclusive).","solution":"def sum_of_squares_of_evens(n): Returns the sum of squares of all even numbers from 2 to n (inclusive). Parameters: n (int): The upper limit to consider for calculating the sum of squares of even numbers. Returns: int: The sum of squares of all even numbers from 2 to n. return sum(i**2 for i in range(2, n+1) if i % 2 == 0)"},{"question":"Create a function that generates Fibonacci numbers using a generator. A generator is a special type of iterator that can produce a sequence of values dynamically.","solution":"def fibonacci_generator(): Generator function that produces Fibonacci numbers. a, b = 0, 1 while True: yield a a, b = b, a + b"},{"question":"Create a function that takes in two lists as arguments and returns a new list containing the elements that are common to both input lists. Additionally, the function should return the frequency of each common element.","solution":"from collections import Counter def common_elements_with_frequency(list1, list2): Returns a list of elements that are common to both input lists along with their frequencies in the two lists. The output list will contain tuples in the format (element, frequency). counter1 = Counter(list1) counter2 = Counter(list2) common_elements = counter1 & counter2 result = [(element, common_elements[element]) for element in common_elements] return result"},{"question":"Create a function that generates a list of all the prime numbers between two given numbers (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes(start, end): Generates a list of all the prime numbers between start and end inclusive. return [x for x in range(start, end + 1) if is_prime(x)]"},{"question":"Create a function that takes an integer as input and checks if it is a Fibonacci number. If it is, the function returns \`True\`; otherwise, it returns \`False\`. Additionally, the function should return the position of the Fibonacci number in the sequence if it is found.","solution":"def is_fibonacci(n): Determines if a number n is a Fibonacci number. If it is, return True and its position in the sequence, otherwise, return False and -1. Parameters: n (int): The number to check. Returns: (bool, int): Tuple containing a boolean indicating whether n is a Fibonacci number, and the position in the Fibonacci sequence if True, otherwise -1. if n < 0: return False, -1 if n == 0: return True, 0 elif n == 1: return True, 1 # As per the problem statement fib1, fib2 = 0, 1 pos = 1 # Position of fib2 while fib2 <= n: if fib2 == n: return True, pos fib1, fib2 = fib2, fib1 + fib2 pos += 1 return False, -1"},{"question":"Create a function that takes an array of integers. The function should return the maximum sum of a contiguous subsequence within the array. For example, for the array [-2, 1, -3, 4, -1, 2, 1, -5, 4], the maximum sum is 6 ([4, -1, 2, 1]).","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subsequence within the array. if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Create a function that finds the minimum number of coins required to make a given amount. We can use coins of denominations 1, 2, and 3. How can we solve this problem using dynamic programming?","solution":"def min_coins(amount): Find the minimum number of coins required to make a given amount using coins of denominations 1, 2, and 3. Uses dynamic programming approach. # Create an array to store the minimum coins for each amount up to the given amount dp = [float('inf')] * (amount + 1) # Base case: 0 coins are needed to make the amount 0 dp[0] = 0 for i in range(1, amount + 1): if i - 1 >= 0: dp[i] = min(dp[i], dp[i - 1] + 1) if i - 2 >= 0: dp[i] = min(dp[i], dp[i - 2] + 1) if i - 3 >= 0: dp[i] = min(dp[i], dp[i - 3] + 1) return dp[amount]"},{"question":"Create a function that can generate prime numbers up to a given limit n (inclusive). The function should return a list of all prime numbers up to n. Prime numbers are numbers that are greater than 1 and have no divisors other than 1 and themselves.","solution":"def generate_primes(n): Generate a list of prime numbers up to a given limit n (inclusive). :param n: int, the upper limit (inclusive) to generate prime numbers. :return: list of int, containing all prime numbers up to n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0:2] = [False, False] # 0 and 1 are not prime numbers for p in range(2, n + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return primes"},{"question":"Create a function that processes a list of numbers and returns a new list containing the cubes of the even numbers that are greater than 10.","solution":"def process_numbers(numbers): Takes a list of numbers and returns a new list containing the cubes of the even numbers that are greater than 10. result = [num ** 3 for num in numbers if num > 10 and num % 2 == 0] return result"},{"question":"Create a function that takes a list of integers, an index, and a value to insert. The function should insert the value at the specified index in the list, while maintaining the order of the other elements. However, if the index is out of bounds, the function should not insert the value and instead return the original list unchanged.","solution":"def insert_value(lst, index, value): Inserts the value at the specified index in the list, if the index is within bounds. If the index is out of bounds, the original list is returned unchanged. Parameters: lst (list): A list of integers. index (int): The index at which to insert the value. value (int): The value to be inserted. Returns: list: The list with the value inserted at the specified index if in bounds, or the unchanged list if the index is out of bounds. if 0 <= index <= len(lst): return lst[:index] + [value] + lst[index:] return lst"},{"question":"Create a function that takes an integer \`n\` as input and returns a new integer \`m\` such that \`m\` is the reverse of \`n\`. For example, if the input is \`12345\`, the function should return \`54321\`.","solution":"def reverse_integer(n): Returns the reverse of the integer n. If n is negative, the reversed number will also be negative. sign = -1 if n < 0 else 1 n = abs(n) reversed_n = int(str(n)[::-1]) return sign * reversed_n"},{"question":"Create a function that generates a sequence of numbers and then maps and returns the sequence based on a given logic.","solution":"def generate_and_map_sequence(start, end, logic_function): Generates a sequence from start to end (inclusive) and applies a logic function to each element in the sequence. Parameters: - start: The start of the sequence. - end: The end of the sequence. - logic_function: A function that defines the logic to be applied to each element of the sequence. Returns: A list containing the generated sequence after applying the logic function to each element. sequence = list(range(start, end + 1)) return [logic_function(x) for x in sequence] # Example logic functions def square(x): return x * x def double(x): return x * 2 def increment(x): return x + 1"},{"question":"Create a function that takes a list of integers as input and returns a list of integers that have an odd number of factors. The function should be named \`find_odd_factors\` and should take a single argument, \`numbers\`, which is a list of integers.","solution":"def find_odd_factors(numbers): Returns a list of integers from the input list that have an odd number of factors. def has_odd_number_of_factors(n): Returns True if n has an odd number of factors, else returns False. count = 0 for i in range(1, int(n**0.5) + 1): if n % i == 0: if i * i == n: count += 1 else: count += 2 return count % 2 != 0 return [num for num in numbers if has_odd_number_of_factors(num)]"},{"question":"Create a function that takes in two integers as arguments and returns their average. If the integers are both even or both odd, return the average as an integer. If the integers are of different parity (one even and one odd), return the average as a float.","solution":"def average_of_two(a, b): Returns the average of two integers. If both integers are even or both are odd, the average is returned as an integer. If one integer is even and the other is odd, the average is returned as a float. avg = (a + b) / 2 if (a % 2 == b % 2): return int(avg) else: return float(avg)"},{"question":"Create a function that prints \\"Hello, World!\\" followed by the user's name and age. The function should take three parameters: the user's name, age, and a greeting message. The greeting message should be optional and should default to \\"Hello, World!\\". Use default arguments to achieve this.","solution":"def greet_user(name, age, greeting=\\"Hello, World!\\"): Prints a greeting message followed by the user's name and age. Parameters: name (str): The name of the user. age (int): The age of the user. greeting (str): An optional greeting message. print(f\\"{greeting} My name is {name} and I am {age} years old.\\")"},{"question":"Create a function that receives as input a list of integers, and checks if the frequency of each distinct integer is unique. In other words, no two distinct integers have the same frequency. If the function finds that any two integers have the same frequency, it should return False. If all frequencies are unique, it should return True.","solution":"def unique_frequencies(lst): Check if the frequency of each distinct integer in the list is unique. Parameters: lst (list): A list of integers Returns: bool: True if all frequencies are unique, False otherwise. from collections import Counter # Count the frequency of each integer freq_counter = Counter(lst) # Get the list of frequencies frequencies = list(freq_counter.values()) # Check if all frequencies are unique by converting to a set and comparing sizes return len(frequencies) == len(set(frequencies))"},{"question":"Create a function that takes an input list of strings, removes duplicates, and returns the list sorted in reverse order, with each string prefixed with its index in the list (0-based index).","solution":"def process_strings(strings): Takes an input list of strings, removes duplicates, and returns the list sorted in reverse order, with each string prefixed with its index in the list (0-based index). unique_strings = sorted(set(strings), reverse=True) result = [f\\"{index}{string}\\" for index, string in enumerate(unique_strings)] return result"},{"question":"Create a function that takes two parameters. A list and an integer. Return the Nth element of the list.","solution":"def get_nth_element(lst, n): Returns the Nth element of the list. Parameters: lst (list): The list from which to get the Nth element. n (int): The index of the element to return. Returns: element: The Nth element of the list. if n < 0 or n >= len(lst): raise IndexError(\\"Index out of range\\") return lst[n]"},{"question":"Create a function that takes a string as input and returns a new string where every even-indexed character is converted to uppercase and every odd-indexed character is converted to lowercase. The indexing starts at 0.","solution":"def alternate_case(s): Returns a new string where every even-indexed character is uppercase and every odd-indexed character is lowercase. :param s: Input string :return: Transformed string result = [] for index, char in enumerate(s): if index % 2 == 0: result.append(char.upper()) else: result.append(char.lower()) return ''.join(result)"},{"question":"Create a function that takes an integer as input, adds up all its digits together and returns the result. For example, if the input is 123, the function should return 1+2+3 = 6. The function should be implemented in Python.","solution":"def sum_of_digits(n): Returns the sum of all digits of the input integer n. n = abs(n) # Ensure n is non-negative. return sum(int(digit) for digit in str(n))"},{"question":"Create a function that returns the sum of the squares of the first \`n\` natural numbers. Example: if \`n\` is 3, the function should return \`1^2 + 2^2 + 3^2 = 14\`.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. Parameters: n (int): The number of first natural numbers to consider. Returns: int: Sum of the squares of the first n natural numbers. return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Create a function that takes a number and returns its prime factors in ascending order. For example, if the input is 45, the function should return [3, 3, 5] as 45 = 3*3*5.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n in ascending order. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Create a function that takes two lists as input, \`list1\` and \`data_list\`. The function should return a new list where each element in \`list1\` is replaced with the corresponding element in \`data_list\` at the same index. If an element in \`list1\` does not have a corresponding element in \`data_list\` (i.e., if the indices do not match), the function should skip the element from \`list1\`. The function should also handle cases where \`list1\` and \`data_list\` have different lengths and only process elements up to the length of the shorter list.","solution":"def replace_list_elements(list1, data_list): Replaces each element in list1 with the corresponding element in data_list at the same index. If indices do not match, skips the element from list1. Args: list1 (list): The list of elements to be replaced. data_list (list): The list of elements to replace with. Returns: list: A new list with elements from data_list replacing elements in list1 at the same index. min_length = min(len(list1), len(data_list)) new_list = [data_list[i] for i in range(min_length)] return new_list"},{"question":"Create a function that reads numbers from the user. To break the infinite loop, use certain input, for example, END can be the terminating input. If the user inputs END, terminate the loop; if the user inputs a number, add it to a list. Finally, return the list of numbers.","solution":"def read_numbers(): Reads numbers from the user until 'END' is input. Returns a list of the input numbers. numbers = [] while True: user_input = input(\\"Enter a number (or 'END' to finish): \\") if user_input == 'END': break try: number = float(user_input) numbers.append(number) except ValueError: print(\\"Invalid input. Please enter a valid number.\\") return numbers"},{"question":"Create a function that generates a Fibonacci sequence up to a given number of terms. The function should return the sequence as a list. For example, if the input is 5, the function should return [0, 1, 1, 2, 3]. Ensure that your function handles cases where the input is less than 1.","solution":"def fibonacci(n): Generates a Fibonacci sequence of 'n' terms. Args: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to 'n' terms. if n < 1: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that returns the last word from a sentence.","solution":"def get_last_word(sentence): Returns the last word from a given sentence. Args: sentence (str): The sentence from which to extract the last word. Returns: str: The last word in the sentence. words = sentence.split() return words[-1] if words else ''"},{"question":"Create a function that takes an integer and returns a new integer with the digits in reverse order. What should be done if the reversed integer overflows or underflows?","solution":"def reverse_integer(x): Reverses the digits of an integer x. INT_MAX = 2**31 - 1 INT_MIN = -2**31 negative = x < 0 x = abs(x) reversed_x = int(str(x)[::-1]) if negative: reversed_x = -reversed_x if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Create a function that takes an array of integers and an integer k, then returns the maximum sum of k consecutive numbers in the array. If the array has fewer than k elements, return None.","solution":"def max_sum_k_consecutive(arr, k): Returns the maximum sum of k consecutive numbers in the array. If the array has fewer than k elements, return None. n = len(arr) if n < k: return None max_sum = current_sum = sum(arr[:k]) for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Create a function that accepts two integer arrays, each containing n elements, and returns an array of length n containing the pairwise element-wise multiplication of the two input arrays. The function should handle large arrays efficiently without using excessive memory.","solution":"def pairwise_multiply(arr1, arr2): Returns an array containing the pairwise element-wise multiplication of the two input arrays. Both arrays must be of the same length. if len(arr1) != len(arr2): raise ValueError(\\"Both arrays must be of the same length\\") return [a * b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that takes a single argument, a string, and returns the string reversed. If the input is not a string, the function should handle the exception and return an appropriate error message.","solution":"def reverse_string(s): Reverses the input string s. If s is not a string, returns an error message. Args: s (str): Input string to be reversed. Returns: str: Reversed string or an error message if s is not a string. try: if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") return s[::-1] except Exception as e: return str(e)"},{"question":"Create a function that generates Fibonacci numbers up to a given limit. The function should take two parameters: the first parameter is the limit up to which Fibonacci numbers should be generated, and the second parameter is the starting point of the Fibonacci sequence. The function should return a list of Fibonacci numbers up to the limit.","solution":"def generate_fibonacci(limit, start): Generates Fibonacci numbers up to a given limit starting from a given start value. :param limit: The limit up to which Fibonacci numbers should be generated. :param start: The starting point of the Fibonacci sequence. :return: A list of Fibonacci numbers up to the limit. if limit <= 0: return [] fib_sequence = [start, start + 1 if start <= 1 else start + start] while fib_sequence[-1] + fib_sequence[-2] <= limit: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that determines if a given string is a valid IPv4 address. An IP address is a numeric representation used to identify devices connected to a network. A valid IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots. For example, \\"192.168.1.1\\" is a valid IPv4 address, while \\"256.100.50.25\\" is not due to one of the numbers being greater than 255. Also, \\"192.168.1\\" is not a valid IPv4 address because it lacks a number.","solution":"def is_valid_ipv4_address(ip): Checks whether a given string is a valid IPv4 address. Parameters: ip (str): The input string to be checked. Returns: bool: True if valid IPv4 address, False otherwise. parts = ip.split('.') # There must be exactly four parts if len(parts) != 4: return False for part in parts: # Each part must be a number and in the range 0-255 if not part.isdigit() or not (0 <= int(part) <= 255): return False return True"},{"question":"Create a function that calculates the perimeter of a rectangle. The function should take the length and width of the rectangle as arguments. The perimeter of a rectangle can be calculated by adding together the length of all four sides. For example, if the length of the rectangle is 5 and the width is 3, the perimeter would be (5*2) + (3*2) = 16. Write this in Python code.","solution":"def perimeter_of_rectangle(length, width): Returns the perimeter of a rectangle given its length and width. return 2 * (length + width)"},{"question":"Create a function that takes a number and returns the sum of all the even numbers up to that number.","solution":"def sum_of_evens(n): Returns the sum of all the even numbers up to and including n. return sum(x for x in range(2, n+1, 2))"},{"question":"Create a function that reverses the elements in an array. The function should take an array as input and return the reversed array.","solution":"def reverse_array(arr): Reverses the elements in an array. :param arr: List of elements to be reversed. :return: List of elements in reversed order. return arr[::-1]"},{"question":"Create a function that takes three arguments: an array of integers, and two integers representing a range. The function should return a list of all integers from the array that fall within the specified range, inclusive. Ensure that the returned list is sorted in ascending order.","solution":"def filter_range(arr, start, end): Returns a sorted list of integers from arr that are within the range [start, end] inclusive. Parameters: arr (list of int): The list of integers to filter. start (int): The starting range (inclusive). end (int): The ending range (inclusive). Returns: list of int: A sorted list of integers within the specified range. return sorted([x for x in arr if start <= x <= end])"},{"question":"Create a function that takes two strings as input and returns true if they are anagrams, and false otherwise. An anagram is a word or phrase made by rearranging the letters of another, such as \\"cinema\\" and \\"iceman\\".","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Sort the characters in both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes a number as input and returns a new number formed by rotating the digits of the input number to the left by one position. For example, if the input number is 12345, the output should be 23451.","solution":"def rotate_left(number): Rotates the digits of the input number to the left by one position. str_num = str(number) if len(str_num) == 1: return number rotated_str = str_num[1:] + str_num[0] return int(rotated_str)"},{"question":"Create a function that takes a linear sequence of integers as input and returns a flattened list of all the integer values, assuming the linear sequence is nested up to any level. The nested integers can be lists, tuples, or single integers.","solution":"def flatten(sequence): Flattens a nested sequence of integers which can be lists, tuples, or single integers. Arguments: sequence -- a list or tuple containing nested lists, tuples, or integers. Returns: A flat list containing all the integers. result = [] for item in sequence: if isinstance(item, (list, tuple)): result.extend(flatten(item)) else: result.append(item) return result"},{"question":"Create a function that takes a list of integers as input. This function should have a runtime of O(n log n). The function should then remove all the duplicates from the list while maintaining the original sequence of the elements. If a number appears more than once in the list, it should only appear once in the output list. Additionally, the function should return the output list in reverse order.","solution":"def remove_duplicates_and_reverse(lst): Removes duplicates while maintaining the original sequence, then returns the list in reverse order. Parameters: lst (list): A list of integers. Returns: list: A list with duplicates removed and in reverse order. seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst[::-1]"},{"question":"Create a function that takes a list of integers and returns the maximum and minimum values in the list.","solution":"def find_max_min(values): Returns the maximum and minimum values in the list. if not values: return None, None max_value = max(values) min_value = min(values) return max_value, min_value"},{"question":"Create a function that returns a list of the indexes of elements in an array that are greater than a specified threshold. The function should take an array of integers and a threshold value as input and return a list of indexes where the values are greater than the threshold.","solution":"def find_indexes_greater_than_threshold(arr, threshold): Returns a list of indexes of elements in \`arr\` that are greater than \`threshold\`. Parameters: arr (list of int): The array of integers. threshold (int): The threshold value. Returns: list of int: List of indexes where the values in \`arr\` are greater than \`threshold\`. return [index for index, value in enumerate(arr) if value > threshold]"},{"question":"Create a function that generates random pairs of numbers between 1 and 100 and returns them as a dictionary where the keys are the numbers and the values are also the numbers. Essentially, this function should act like a set of twins for numbers, where each number is its own twin.","solution":"import random def generate_random_twin_pairs(n): Generates a dictionary of n unique numbers between 1 and 100 where each number is its own twin. Parameters: n (int): The number of pairs to generate. Returns: dict: A dictionary where the keys are numbers and values are the same numbers. if n > 100: raise ValueError(\\"Cannot generate more than 100 unique pairs from the range 1 to 100\\") numbers = random.sample(range(1, 101), n) twin_pairs = {num: num for num in numbers} return twin_pairs"},{"question":"Create a function that calculates the number of vowels in a given string, and the number of consonants. Return the result as a dictionary where the keys are 'vowels' and 'consonants'.","solution":"def count_vowels_and_consonants(s): Returns a dictionary with the counts of vowels and consonants in the given string. vowels = 'aeiouAEIOU' result = {'vowels': 0, 'consonants': 0} for char in s: if char.isalpha(): if char in vowels: result['vowels'] += 1 else: result['consonants'] += 1 return result"},{"question":"Create a function that finds the maximum and minimum values in an array using the divide and conquer approach. The function should divide the array into two halves, find the maximum and minimum in each half recursively, and then merge the results to find the overall maximum and minimum. If the array has only one element, return that element as both the maximum and minimum.","solution":"def find_max_min(arr): Finds the maximum and minimum values in an array using the divide and conquer approach. def max_min_helper(arr, low, high): # If there is only one element if low == high: return arr[low], arr[low] # If there are two elements if high == low + 1: if arr[low] < arr[high]: return arr[low], arr[high] else: return arr[high], arr[low] # If there are more than two elements mid = (low + high) // 2 min_left, max_left = max_min_helper(arr, low, mid) min_right, max_right = max_min_helper(arr, mid + 1, high) return min(min_left, min_right), max(max_left, max_right) if not arr: raise ValueError(\\"The array cannot be empty\\") return max_min_helper(arr, 0, len(arr) - 1)"},{"question":"Create a function that takes a list of numbers as an input and returns the sum of all the numbers in the list that are greater than a specified threshold. The function should also return the count of numbers that are above the threshold. In addition, the function should handle and return -1 if the input list does not contain any numbers greater than the threshold.","solution":"def sum_and_count_above_threshold(numbers, threshold): Returns the sum of all the numbers in the list that are greater than the specified threshold, along with the count of such numbers. Returns -1 if no numbers are greater than the threshold. Arguments: numbers -- list of numbers threshold -- specified threshold Returns: tuple (sum, count) or -1 if no numbers are greater than the threshold filtered_numbers = [num for num in numbers if num > threshold] if len(filtered_numbers) == 0: return -1 return sum(filtered_numbers), len(filtered_numbers)"},{"question":"Create a function that inserts a value into a list at a specific index in Python.","solution":"def insert_value(lst, index, value): Inserts a value into a list at a specific index. Parameters: lst (list): The list to insert the value into. index (int): The index at which to insert the value. value: The value to be inserted into the list. Returns: list: The list after insertion. lst.insert(index, value) return lst"},{"question":"Create a function that receives an integer, a lowercase string, and a boolean value as inputs and returns a value depending on the boolean. If the boolean is True, the function should return the string repeated the number of times specified by the integer. If the boolean is False, the function should return the integer converted to a string and concatenated with the input string.","solution":"def process_inputs(n, s, b): Processes the inputs and returns a value based on the boolean flag. Parameters: - n (int): an integer value. - s (str): a lowercase string. - b (bool): a boolean value. Returns: - If b is True, returns the string s repeated n times. - If b is False, returns the integer n converted to string and concatenated with s. if b: return s * n else: return str(n) + s"},{"question":"Create a function that compares two version numbers to determine which one is greater. The version numbers are given as strings in the format \\"X.Y.Z\\", where X, Y, and Z are non-negative integers. If the function is provided with an input like \\"1.2.4\\" and \\"1.2.5\\", it should output a message indicating that \\"1.2.5\\" is greater than \\"1.2.4\\". If the input is \\"2.0.0\\" and \\"1.9.9\\", it should output that \\"2.0.0\\" is greater than \\"1.9.9\\". If the input is \\"0.1.0\\" and \\"0.1.1\\", it should output \\"0.1.1\\" is greater than \\"0.1.0\\". If the input is \\"3.4.5\\" and \\"3.4.5\\", it should output \\"Both versions are equal\\". You can assume that the version numbers do not contain leading zeros.","solution":"def compare_versions(version1, version2): Compares two version numbers and determines which one is greater. The version numbers are given as strings in the format \\"X.Y.Z\\". :param version1: str, first version number. :param version2: str, second version number. :return: str, a message indicating the comparison result. v1 = list(map(int, version1.split('.'))) v2 = list(map(int, version2.split('.'))) if v1 > v2: return f\\"{version1} is greater than {version2}\\" elif v1 < v2: return f\\"{version2} is greater than {version1}\\" else: return \\"Both versions are equal\\""},{"question":"Create a function that accepts a single string as input and returns the reverse of that string. You should not use built-in string reverse methods or slicing to solve this problem.","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a function that determines if a list contains all elements of another list.","solution":"def contains_all_elements(list1, list2): Determines if list1 contains all elements of list2. Parameters: list1 (list): The list to be checked. list2 (list): The list of elements to be checked against list1. Returns: bool: True if list1 contains all elements of list2, otherwise False. return all(elem in list1 for elem in list2)"},{"question":"Create a function that takes an array of integers and returns the maximum and minimum values as a tuple. If the array is empty, the function should return \`(None, None)\`. The function should be named \`find_max_min\`.","solution":"def find_max_min(arr): Returns a tuple with the maximum and minimum values from the array. If the array is empty, returns (None, None). if not arr: return (None, None) return (max(arr), min(arr))"},{"question":"Create a function that accepts a positive integer n and returns its binary representation as a string without the '0b' prefix.","solution":"def int_to_binary(n): Converts a positive integer n to its binary representation as a string without the '0b' prefix. if n < 0: raise ValueError(\\"Input must be a positive integer\\") return bin(n)[2:]"},{"question":"Create a function that takes in two sorted arrays of numbers and returns a new array containing only the elements that are present in both arrays, while also removing any duplicates. How should you handle edge cases such as empty arrays or arrays with no common elements?","solution":"def intersect_sorted_arrays(arr1, arr2): Returns a new array containing only the elements that are present in both input sorted arrays, while also removing any duplicates. Handles edge cases such as empty arrays or arrays with no common elements. index1, index2 = 0, 0 result = [] while index1 < len(arr1) and index2 < len(arr2): if arr1[index1] == arr2[index2]: if not result or result[-1] != arr1[index1]: result.append(arr1[index1]) index1 += 1 index2 += 1 elif arr1[index1] < arr2[index2]: index1 += 1 else: index2 += 1 return result"},{"question":"Create a function that takes an integer as its input and returns the month name corresponding to that integer. For example, January would be 1, February would be 2, and so on. If the integer is not a valid month number, the function should return \\"Invalid month\\". Handle both positive and negative integers.","solution":"def get_month_name(month_number): Returns the month name corresponding to the month_number. If the integer is not a valid month number, returns \\"Invalid month\\". Args: month_number (int): The month number (1-12) Returns: str: The name of the corresponding month or \\"Invalid month\\" month_names = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] if 1 <= month_number <= 12: return month_names[month_number - 1] else: return \\"Invalid month\\""},{"question":"Create a function that calculates the sum of all divisors of a given number. A divisor of a number is a smaller number that evenly divides the given number. For example, the divisors of 6 are 1, 2, 3, and 6.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of the given number n. Parameters: - n (int): The number for which the sum of divisors is to be calculated. Returns: - int: Sum of all divisors of n. if n < 1: return 0 # No divisors for non-positive numbers divisors_sum = 0 for i in range(1, n + 1): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that takes two parameters: a string and an integer. The function should return every nth character in the string. If the integer is less than 1, the function should return an empty string.","solution":"def every_nth_character(s, n): Returns every nth character in the string s. If n is less than 1, returns an empty string. :param s: The input string :param n: The integer step to select characters :return: A string containing every nth character from the input string if n < 1: return \\"\\" return s[n-1::n]"},{"question":"Create a function that takes two lists as an input, list1 and list2. The lists contain only integers. The function should return the sum of elements that are present in both lists without using any built-in functions like sum(), filter() or any other high-level built-in functions. The solution should run in O(n) time complexity.","solution":"def sum_of_common_elements(list1, list2): Returns the sum of elements that are present in both list1 and list2. element_count = {} for elem in list1: if elem not in element_count: element_count[elem] = 0 element_count[elem] += 1 total_sum = 0 for elem in list2: if elem in element_count and element_count[elem] > 0: total_sum += elem element_count[elem] = 0 # Ensure each element is only added once return total_sum"},{"question":"Create a function that generates a list of all prime numbers up to a specified limit. The function should take two parameters: \`start\` and \`end\`, where \`start\` is the lower bound of the range (inclusive) and \`end\` is the upper bound of the range (inclusive). The function should return a list of prime numbers within this range.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes(start, end): Generates a list of all prime numbers within the range [start, end]. return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Create a function that takes in two strings as input and returns the longest common substring between them. If there is no common substring, return an empty string. A common substring is a sequence of characters that appears in both strings.","solution":"def longest_common_substring(s1, s2): Returns the longest common substring between two strings s1 and s2. If there is no common substring, returns an empty string. if not s1 or not s2: return \\"\\" len_s1, len_s2 = len(s1), len(s2) longest, end_index = 0, 0 # Create a 2D array to store the length of longest common suffix # Initialize all values to 0 dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest: longest = dp[i][j] end_index = i else: dp[i][j] = 0 # Extract the longest common substring from the original string if longest == 0: return \\"\\" return s1[end_index - longest:end_index]"},{"question":"Create a function that calculates the area of a circle given its radius. The function should be named \`calculate_circle_area\` and take a single parameter, \`radius\`. The function should return the area of the circle.","solution":"import math def calculate_circle_area(radius): Calculate the area of a circle given its radius. Parameters: radius (float): The radius of the circle Returns: float: The area of the circle if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Create a function that takes a list of integers as input and returns the maximum sum of increasing subsequence. An increasing subsequence is defined as a sequence where all elements are in increasing order. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.","solution":"def max_sum_increasing_subsequence(arr): Returns the maximum sum of an increasing subsequence in the given list of integers. if not arr: return 0 n = len(arr) dp = arr[:] # DP array to store maximum sum of increasing subsequences ending at each element for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + arr[i]) return max(dp)"},{"question":"Create a function that takes a string representing an IPv4 address and returns the corresponding 32-bit integer. The function should handle both IPv4 addresses in dot-decimal format and binary representation.","solution":"def ipv4_to_int(ip): Converts an IPv4 address in dot-decimal format or binary to a 32-bit integer. Parameters: ip (str): The IPv4 address in dot-decimal format (e.g., \\"192.168.0.1\\") or a 32-bit binary string (e.g., \\"11000000101010000000000000000001\\"). Returns: int: The corresponding 32-bit integer. if '.' in ip: # Dot-decimal format octets = ip.split('.') return (int(octets[0]) << 24) | (int(octets[1]) << 16) | (int(octets[2]) << 8) | int(octets[3]) else: # Binary format return int(ip, 2)"},{"question":"Create a function that accepts any number of positional and keyword arguments and prints out their types and values.","solution":"def print_args_and_kwargs(*args, **kwargs): Accepts any number of positional and keyword arguments and prints out their types and values. for arg in args: print(f\\"Positional argument: {arg} (Type: {type(arg)})\\") for key, value in kwargs.items(): print(f\\"Keyword argument {key}: {value} (Type: {type(value)})\\")"},{"question":"Create a function that converts a given number into its corresponding word representation. For example, the number 123 should be converted to \\"one hundred twenty-three\\".","solution":"def number_to_words(n): if n == 0: return \\"zero\\" num_to_19 = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'] tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'] thousands = ['','thousand', 'million', 'billion'] def words_below_1000(num): if num < 100: if num < 20: return num_to_19[num] else: return tens[num // 10] + ('' if num % 10 == 0 else '-' + num_to_19[num % 10]) else: return num_to_19[num // 100] + \\" hundred\\" + ('' if num % 100 == 0 else ' ' + words_below_1000(num % 100)) if n < 0: return \\"minus \\" + number_to_words(-n) result = [] for i, chunk in enumerate(split_by_thousands(n)): if chunk: result.append(words_below_1000(chunk) + ('' if thousands[i] == '' else ' ' + thousands[i])) return ' '.join(result[::-1]) def split_by_thousands(n): result = [] while n > 0: result.append(n % 1000) n //= 1000 return result"},{"question":"Create a function that takes a decimal number and converts it to a binary number. The function should return the binary representation as a string.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation. Parameters: n (int): The decimal number to convert. Returns: str: The binary representation of the number. if n == 0: return \\"0\\" binary_str = \\"\\" while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 return binary_str"},{"question":"Create a function that takes in an integer N (where N is the number of items in the list). The function should return true if a given integer is found in the list, and false otherwise. You will need to implement this function using linear search.","solution":"def linear_search(lst, n): Perform a linear search to find integer n in the list lst. :param lst: List of integers to search through :param n: Integer to find in the list :return: True if n is found in lst, else False for item in lst: if item == n: return True return False"},{"question":"Create a function that takes in a string and returns a boolean indicating whether the string is a palindrome. A palindrome is a word that reads the same backward as forward. For example, \\"radar\\" is a palindrome.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. # Normalize the string by removing spaces and converting to lower case normalized_str = ''.join(s.split()).lower() return normalized_str == normalized_str[::-1]"},{"question":"Create a function that converts a snake_case string to PascalCase in Python.","solution":"def snake_to_pascal(snake_str): Converts a snake_case string to PascalCase. Args: snake_str (str): A string in snake_case format. Returns: str: The string converted to PascalCase. return ''.join(word.capitalize() for word in snake_str.split('_'))"},{"question":"Create a function that takes two lists of integers as input and returns their intersection as a list. Both lists may contain duplicates. The function should handle duplicates by returning each unique number from the intersection only once.","solution":"def intersection(list1, list2): Returns the intersection of two lists as a new list with unique numbers. # Convert lists to sets to get unique values set1 = set(list1) set2 = set(list2) # Get the intersection of two sets result_set = set1.intersection(set2) # Convert the result set back to a list return list(result_set)"},{"question":"Create a function that takes a list of integers and returns a list of booleans where each boolean represents whether the corresponding integer in the original list is even or not.","solution":"def is_even_list(int_list): Returns a list of booleans indicating whether each integer in the input list is even. return [x % 2 == 0 for x in int_list]"},{"question":"Create a function that takes in two arguments, an integer 'n' indicating the number of elements in the array, and an array 'arr' containing 'n' elements. The function should return the second largest number in the array. If there is no second largest number, return -1.","solution":"def second_largest(n, arr): Returns the second largest number in the array. If there is no second largest number, return -1. if n < 2: return -1 first_largest = float('-inf') second_largest = float('-inf') for number in arr: if number > first_largest: second_largest = first_largest first_largest = number elif number > second_largest and number < first_largest: second_largest = number return second_largest if second_largest != float('-inf') else -1"},{"question":"Create a function that takes a string as input and returns the longest substring with consecutive repeating characters.","solution":"def longest_repeating_substring(s): Returns the longest substring with consecutive repeating characters. if not s: return \\"\\" max_len = 0 max_substring = \\"\\" curr_char = s[0] curr_length = 1 curr_substring = s[0] for i in range(1, len(s)): if s[i] == curr_char: curr_length += 1 curr_substring += s[i] else: if curr_length > max_len: max_len = curr_length max_substring = curr_substring curr_char = s[i] curr_length = 1 curr_substring = s[i] if curr_length > max_len: max_substring = curr_substring return max_substring"},{"question":"Create a function that finds the largest palindrome in a given array of strings. A palindrome is a word that reads the same backward as forward, e.g., \\"aba\\" or \\"racecar\\".","solution":"def largest_palindrome(strings): Returns the largest palindrome in the array of strings. If there are multiple palindromes of the same length, it returns the first one encountered. If no palindromes are found, it returns an empty string. :param strings: A list of strings :return: The largest palindrome string largest = \\"\\" for s in strings: if s == s[::-1] and len(s) > len(largest): largest = s return largest"},{"question":"Create a function that takes as an input a string and returns the reverse of the string. If the input string is empty or only contains whitespace, return an empty string. If the input string is not a palindrome, return the reversed string. If the input string is a palindrome, return the reversed string followed by the word \\"palindrome\\" and original string.","solution":"def reverse_string(s): Returns the reverse of the input string. If the input string is empty or only contains whitespace, returns an empty string. If the input string is not a palindrome, returns the reversed string. If the input string is a palindrome, returns the reversed string followed by the word \\"palindrome\\" and the original string. stripped_s = s.strip() if not stripped_s: return \\"\\" reversed_s = stripped_s[::-1] if stripped_s == reversed_s: return f\\"{reversed_s} palindrome {stripped_s}\\" return reversed_s"},{"question":"Create a function that determines the highest score for a student based on their scores in three different subjects: Mathematics, Science, and English. The student's score in each subject is represented as an integer between 0 and 100. The maximum score for each subject is 100.","solution":"def highest_score(math, science, english): Returns the highest score from the given scores of Mathematics, Science, and English. return max(math, science, english)"},{"question":"Create a function that takes in three numbers and returns their average as an integer. The function should also handle cases where the numbers are not integers. For any invalid input, the function should return None.","solution":"def average_of_three(a, b, c): Returns the average of three numbers as an integer. If any of the inputs are not numbers, returns None. try: # Convert inputs to float, and calculate the average avg = (float(a) + float(b) + float(c)) / 3 return int(avg) except (ValueError, TypeError): return None"},{"question":"Create a function that takes in an integer and returns the sum of all the odd numbers between 1 and the integer (inclusive). The function should handle cases where the input is less than 1 by returning None.","solution":"def sum_odd_numbers(n): Returns the sum of all the odd numbers between 1 and n (inclusive). If n is less than 1, returns None. if n < 1: return None return sum(i for i in range(1, n + 1) if i % 2 != 0)"},{"question":"Create a function that takes any integer (n) and returns the sum of numbers from 1 to n if it is positive, and the sum of all negative numbers up to abs(n) if n is negative. If n is 0, the function should return 0. Additionally, create a function to test your solution with various data points.","solution":"def sum_numbers(n): Returns the sum of numbers from 1 to n if n is positive. Returns the sum of all negative numbers up to abs(n) if n is negative. Returns 0 if n is 0. if n > 0: return sum(range(1, n + 1)) elif n < 0: return sum(range(n, 1)) else: return 0"},{"question":"Create a function that generates the nth Fibonacci number. The function should take an integer as an input and return the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence. Returns: int: The nth Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that converts a decimal number to its binary representation. The function should return the binary number as an integer.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation. Parameters: n (int): The decimal number to be converted. Returns: int: The binary representation of the input decimal number as an integer. if n == 0: return 0 binary_string = bin(n)[2:] # Convert number to binary, remove '0b' prefix. return int(binary_string)"},{"question":"Create a function that will check if a given string \`s\` is a valid parentheses string (VPS). A valid parentheses string (VPS) is one where every opening parenthesis '(' has a corresponding closing parenthesis ')', and the pairs of parentheses are correctly nested.","solution":"def is_valid_parentheses(s): Check if the input string s is a valid parentheses string (VPS). A valid parentheses string is one where every opening parenthesis '(' has a corresponding closing parenthesis ')', and the pairs are correctly nested. :param s: input string containing only parentheses :return: True if the string is a valid parentheses string, False otherwise stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that checks if a given string is a plaindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome(s): Check if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. import string # Remove spaces, punctuation and make the string lowercase cleaned_s = ''.join(char.lower() for char in s if char not in string.punctuation and not char.isspace()) # Compare the cleaned string with its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes two strings and returns a boolean value if the two strings are anagrams of each other (i.e., contain exactly the same letters in any order).","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, otherwise False. # Normalize strings by converting to lowercase and removing spaces str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Compare sorted versions of the strings return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes in two parameters: a list of integers and a divisor. The function should return the sum of all integers in the list that are divisible by the given divisor. If no such integers exist, the function should return 0.","solution":"def sum_of_divisibles(numbers, divisor): Returns the sum of all integers in the list that are divisible by the given divisor. If no such integers exist, returns 0. :param numbers: List of integers. :param divisor: Integer divisor. :return: Sum of all integers in the list divisible by the divisor. return sum(num for num in numbers if num % divisor == 0)"},{"question":"Create a function that takes a list of numbers as an argument and returns a list containing the first and the last elements of the input list. If the input list is empty or has only one element, return a list with a single element containing that single element.","solution":"def first_and_last(elements): Returns a list containing the first and the last elements of the input list. If the list is empty or has only one element, return a list with that single element. if len(elements) == 0: return [] elif len(elements) == 1: return [elements[0]] else: return [elements[0], elements[-1]]"},{"question":"Create a function that takes a list of integers as input and returns the frequency of each integer in the list. The function should be able to handle any range of integers efficiently.","solution":"def frequency_count(int_list): Returns a dictionary with the frequency of each integer in the list. Parameters: int_list (list): A list of integers. Returns: dict: A dictionary with integers as keys and their frequencies as values. frequency_dict = {} for num in int_list: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return frequency_dict"},{"question":"Create a function that takes in a string and returns the string with consecutive duplicate characters removed.","solution":"def remove_consecutive_duplicates(s): Returns a string with consecutive duplicate characters removed. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Create a function that takes two strings as input and returns the longer string. If both strings are of equal length, the function should return the second string. Here is the Python function that implements this logic.","solution":"def longer_string(str1, str2): Returns the longer of the two input strings. If both strings have the same length, returns the second string. if len(str1) > len(str2): return str1 else: return str2"},{"question":"Create a function that takes in a string and checks if it contains only letters or spaces. If it contains any other character, the function should return false. After that, it should determine if the string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces and punctuation. Make sure to ignore case sensitivity when checking for palindromes.","solution":"def is_letter_or_space(s): Checks if the string contains only letters or spaces. return all(c.isalpha() or c.isspace() for c in s) def is_palindrome(s): Checks if the string is a palindrome, ignoring case, spaces and punctuation. # Filter only letters and make lowercase for palindrome check filtered_chars = ''.join(c.lower() for c in s if c.isalpha()) # Check if the filtered string is palindrome return filtered_chars == filtered_chars[::-1] def check_string(s): Checks if the string contains only letters and spaces, and if it is a palindrome. Returns a tuple containing a boolean for each check. if not is_letter_or_space(s): return (False, False) return (True, is_palindrome(s))"},{"question":"Create a function that converts a string to a list of words in Python. The function should handle multiple spaces between words and leading/trailing spaces.","solution":"def string_to_words(s): Converts a given string to a list of words, handling multiple spaces and leading/trailing spaces. Args: s (str): The input string. Returns: list: A list of words in the string. return s.split()"},{"question":"Create a function that accepts a number and returns the number of digits in it. You are not allowed to use any built-in functions or libraries that directly give the number of digits, such as length() or log10(). You must implement this without converting the number to a string.","solution":"def count_digits(n): Returns the number of digits in the given number n. # handle negative numbers if n < 0: n = -n # handle zero case if n == 0: return 1 count = 0 while n > 0: count += 1 n //= 10 return count"},{"question":"Create a function that calculates the Fibonacci number at a given position in the sequence. Here is the sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, ...","solution":"def fibonacci(n): Returns the Fibonacci number at the given position n. if n < 0: raise ValueError(\\"The input must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Create a function that generates a heatmap of a given 2D array of numbers. The function should accept a 2D array as input and display the heatmap using matplotlib. The heatmap should reflect the numerical values in the array, varies in color intensity.","solution":"import matplotlib.pyplot as plt import numpy as np def generate_heatmap(data): Generates a heatmap from a given 2D array of numbers. Parameters: data (list of list of int/float): A 2D array containing numerical values. Returns: None: The function displays the heatmap. # Ensure data is a numpy array data = np.array(data) plt.imshow(data, cmap='hot', interpolation='nearest') plt.colorbar() plt.show()"},{"question":"Create a function that takes a single string argument and prints \\"Yes\\" if the string is a palindrome and \\"No\\" otherwise. A palindrome is a word that reads the same backward as forward, ignoring cases, spaces, and punctuation.","solution":"import re def is_palindrome(s: str) -> str: Returns \\"Yes\\" if the string is a palindrome, otherwise \\"No\\". A palindrome reads the same backward as forward, ignoring cases, spaces, and punctuation. s = re.sub(r'[^A-Za-z0-9]', '', s).lower() return \\"Yes\\" if s == s[::-1] else \\"No\\""},{"question":"Create a function that receives two integers and swaps their values without using a temporary variable. How can you achieve this using bitwise operations in C?","solution":"def swap(a, b): Swaps two integers without using a temporary variable using bitwise XOR operations. a = a ^ b b = a ^ b a = a ^ b return a, b"},{"question":"Create a function that can output the numbers of each column in a given 2-dimensional list. Answer the code in Python.","solution":"def get_columns(matrix): Returns a list of lists, where each sublist contains the elements of a column in the input matrix. if not matrix or not matrix[0]: return [] num_columns = len(matrix[0]) columns = [[] for _ in range(num_columns)] for row in matrix: for col_idx in range(num_columns): columns[col_idx].append(row[col_idx]) return columns"},{"question":"Create a function that takes an integer array and finds the contiguous subarray within it that has the greatest product. The function should return the maximum product found.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray in the given integer array. :param nums: List of integers :return: Maximum product of a contiguous subarray if not nums: return 0 current_max = current_min = max_product = nums[0] for num in nums[1:]: if num == 0: current_max = current_min = 1 max_product = max(max_product, 0) continue temp_max = current_max current_max = max(num, current_max * num, current_min * num) current_min = min(num, temp_max * num, current_min * num) max_product = max(max_product, current_max) return max_product"},{"question":"Create a function that generates all subsets of a set in Python.","solution":"def generate_subsets(s): Generate all subsets of a given set \`s\`. Args: s (set): A set of elements. Returns: list: A list of sets, where each set is a subset of \`s\`. subsets = [[]] for element in s: subsets += [current + [element] for current in subsets] return [set(subset) for subset in subsets]"},{"question":"Create a function that takes as input a list of numbers, and returns the list sorted in ascending order using the Bubble Sort algorithm. Write a solution in Python and utilize a loop to implement the sorting.","solution":"def bubble_sort(arr): Sorts a list of numbers in ascending order using the Bubble Sort algorithm. :param arr: List of numbers to be sorted :return: List of numbers sorted in ascending order n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that generates a list of all possible combinations of a given list of elements. For example, given the list [1, 2, 3], the function should return [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]].","solution":"from itertools import combinations def all_combinations(elements): Generates all combinations of a given list of elements. Args: elements (list): The list of elements. Returns: list of lists: A list containing all combinations of the input list. result = [] for r in range(1, len(elements) + 1): result.extend(combinations(elements, r)) return [list(combo) for combo in result]"},{"question":"Create a function that takes a variable number of arguments and returns a list containing only the arguments that are of type string.","solution":"def filter_strings(*args): Takes a variable number of arguments and returns a list containing only the arguments that are of type string. return [arg for arg in args if isinstance(arg, str)]"},{"question":"Create a function that takes a number as an argument and returns the factorial of that number. You need to implement it using recursion.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes a list of integers and returns the product of the two smallest numbers in the list.","solution":"def product_of_two_smallest(numbers): Returns the product of the two smallest numbers in the list. :param numbers: List of integers :return: Product of the two smallest numbers if len(numbers) < 2: raise ValueError(\\"The list must contain at least two numbers\\") sorted_numbers = sorted(numbers) return sorted_numbers[0] * sorted_numbers[1]"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the sum of the corresponding elements in the input array, but only if the corresponding elements are multiples of 3. If an element is not a multiple of 3, it should remain unchanged.","solution":"def sum_multiples_of_3(arr): Takes an array of integers and returns a new array where each element is the sum of the corresponding elements in the input array if the element is a multiple of 3. If the element is not a multiple of 3, it remains unchanged. return [x + x if x % 3 == 0 else x for x in arr]"},{"question":"Create a function that calculates the number of capitals in a sentence","solution":"def count_capitals(sentence): Returns the number of capital letters in the given sentence. Parameters: sentence (str): The sentence in which to count capital letters. Returns: int: The number of capital letters in the sentence. return sum(1 for char in sentence if char.isupper())"},{"question":"Create a function that takes an array of integers and returns a new array where each element is the square of the original element. If the original number is negative, it should be raised to the power of three. Additionally, if any number in the array is divisible by both 3 and 5, it should be replaced by its absolute value. How would you approach this?","solution":"def transform_array(arr): Transforms the input array based on the following rules: - Each element is squared. - If the element is negative, it is raised to the power of three. - If any number is divisible by both 3 and 5, it is replaced by its absolute value. result = [] for num in arr: if num % 3 == 0 and num % 5 == 0: result.append(abs(num)) elif num < 0: result.append(num ** 3) else: result.append(num ** 2) return result"},{"question":"Create a function that will print \\"Hello\\" and an input name, and call the function with the name \\"Alice\\".","solution":"def hello(name): Prints \\"Hello\\" followed by the input name. print(f\\"Hello {name}\\") # Call the function with the name \\"Alice\\" as requested hello(\\"Alice\\")"},{"question":"Create a function that takes two integers as input and returns a list containing all the common divisors of the two integers, sorted in descending order.","solution":"def common_divisors(a, b): Returns a list of all the common divisors of a and b, sorted in descending order. def gcd(x, y): while y: x, y = y, x % y return x def get_divisors(n): divisors = set() for i in range(1, int(n ** 0.5) + 1): if n % i == 0: divisors.add(i) if i != n // i: divisors.add(n // i) return divisors gcd_value = gcd(a, b) common_divisors = get_divisors(gcd_value) return sorted(common_divisors, reverse=True)"},{"question":"Create a function that takes a string as an argument and returns the number of words in the string. How can I ensure that I only count actual words and not punctuation as part of the word count?","solution":"import re def count_words(s): Returns the number of words in the string s. Punctuation is not counted as part of the words. Args: s (str): Input string. Returns: int: The number of words in the input string. # Using regex to split the string by non-word characters and filtering out empty strings words = re.findall(r'bw+b', s) return len(words)"},{"question":"Create a function that determines the largest and smallest numbers in a list of integers. The function should return these two values as a tuple.","solution":"def find_extremes(numbers): Determines the largest and smallest numbers in a list of integers. Args: numbers (list): A list of integers. Returns: tuple: A tuple containing the smallest and largest numbers. if not numbers: raise ValueError('The list cannot be empty') smallest = min(numbers) largest = max(numbers) return (smallest, largest)"},{"question":"Create a function that takes a string as input and returns the reverse of the string using recursion in Python.","solution":"def reverse_string(s): Returns the reverse of the input string s using recursion. if len(s) == 0: return s return reverse_string(s[1:]) + s[0]"},{"question":"Create a function that finds the intersection points of two line segments in a two-dimensional space. The function should take four arguments: the coordinates of the endpoints of the first line segment and the coordinates of the endpoints of the second line segment. Each coordinate is represented as a tuple of two integers.","solution":"def get_intersection_point(A, B, C, D): Returns the intersection point of two line segments AB and CD. Each point is represented as a tuple (x, y). Arguments: A -- Tuple, coordinates of the first endpoint of the first line segment. B -- Tuple, coordinates of the second endpoint of the first line segment. C -- Tuple, coordinates of the first endpoint of the second line segment. D -- Tuple, coordinates of the second endpoint of the second line segment. Returns: A tuple (x, y) representing the intersection point, or None if there is no intersection. def det(a, b, c, d): return a * d - b * c x1, y1 = A x2, y2 = B x3, y3 = C x4, y4 = D # Calculate the denominator den = det(x1 - x2, y1 - y2, x3 - x4, y3 - y4) if den == 0: # Lines are parallel or coincident return None # Calculate the intersection point inter_x = det(det(x1, y1, x2, y2), x1 - x2, det(x3, y3, x4, y4), x3 - x4) / den inter_y = det(det(x1, y1, x2, y2), y1 - y2, det(x3, y3, x4, y4), y3 - y4) / den # Check if the intersection point is within the bounds of both line segments if (min(x1, x2) <= inter_x <= max(x1, x2) and min(y1, y2) <= inter_y <= max(y1, y2) and min(x3, x4) <= inter_x <= max(x3, x4) and min(y3, y4) <= inter_y <= max(y3, y4)): return (inter_x, inter_y) return None"},{"question":"Create a function that takes in a dictionary and a string, and returns a list of values from the dictionary where the keys are substrings of the input string.","solution":"def find_values_with_substring_keys(d, s): Returns a list of values from the dictionary where the keys are substrings of the input string. Parameters: d (dict): The dictionary from which to take the values. s (str): The input string to check for substring keys. Returns: list: A list of values whose keys are substrings of the input string. return [value for key, value in d.items() if key in s]"},{"question":"Create a function that converts a single character to its ASCII value representation.","solution":"def char_to_ascii(char): Converts a single character to its ASCII value representation. Parameters: char (str): A single character string. Returns: int: ASCII value of the character. if len(char) != 1: raise ValueError(\\"Input must be a single character.\\") return ord(char)"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a word that reads the same backward as forward, like \\"madam\\" or \\"racecar\\". Answer this in pseudocode before translating it into Python.","solution":"import re def is_palindrome(s): Checks whether the given string is a palindrome. :param s: Input string :return: True if the string is a palindrome, False otherwise cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Remove non-alphanumeric and convert to lowercase return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that can be used to determine if a given list of numbers is sorted in ascending order or not.","solution":"def is_sorted(lst): Determines if the given list of numbers is sorted in ascending order. Parameters: lst (list): List of numbers to check. Returns: bool: True if the list is sorted in ascending order, False otherwise. return all(earlier <= later for earlier, later in zip(lst, lst[1:]))"},{"question":"Create a function that takes a list of integers and return the list of all possible subsets of the input list, including the empty set and the set itself.","solution":"def subsets(nums): Returns all possible subsets of the given list of integers. def backtrack(start, path): res.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) res = [] backtrack(0, []) return res"},{"question":"Create a function that checks if a given number is a perfect square. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, and 16 are perfect squares (1^2, 2^2, 3^2, and 4^2), but 2 and 3 are not. Write a function named \`is_perfect_square\` that takes an integer \`num\` as its parameter and returns \`True\` if \`num\` is a perfect square, otherwise returns \`False\`.","solution":"import math def is_perfect_square(num): Returns True if num is a perfect square, otherwise False. if num < 0: return False root = int(math.sqrt(num)) return root * root == num"},{"question":"Create a function that generates a random integer value between 0 (inclusive) and n (exclusive) using the Python random module. The function should take an integer n as an input and return a random integer between 0 (inclusive) and n (exclusive).","solution":"import random def generate_random_int(n): Returns a random integer between 0 (inclusive) and n (exclusive). Parameters: n (int): The upper bound (exclusive) for the random number generation. Returns: int: A random integer between 0 and n-1. if n <= 0: raise ValueError(\\"n must be a positive integer greater than 0.\\") return random.randint(0, n-1)"},{"question":"Create a function that takes a DNA sequence as input and returns the complementary DNA sequence. A DNA sequence is composed of the bases A, T, C, and G. The complementary base pairing is A-T and C-G.","solution":"def complementary_dna_sequence(dna_sequence): Returns the complementary DNA sequence. Parameters: dna_sequence (str): A string representing the DNA sequence Returns: str: The complementary DNA sequence complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'} return ''.join(complement[base] for base in dna_sequence)"},{"question":"Create a function that returns the modulus of two numbers when \`modulus\` is called with two arguments, and returns the \`__mod__\` method when called with three arguments.","solution":"def modulus(a, b, *args): If 2 arguments are passed, return the modulus of a and b. If 3 arguments are passed, return the __mod__ method of the first argument. if len(args) == 0: return a % b elif len(args) == 1: return a.__mod__ else: raise TypeError(\\"modulus() takes 2 or 3 arguments but more were given\\")"},{"question":"Create a function that checks if a string contains only ASCII printable characters. ASCII printable characters are those in the range of 32 to 126 (inclusive).","solution":"def is_ascii_printable(s): Checks if the string contains only ASCII printable characters. ASCII printable characters are those in the range of 32 to 126 (inclusive). :param s: Input string to check. :return: True if all characters in the string are ASCII printable, False otherwise. return all(32 <= ord(char) <= 126 for char in s)"},{"question":"Create a function that converts turns an integer into its English word representation. For example, given the number 512, the function would return \\"five hundred twelve\\".","solution":"def number_to_words(n): Converts an integer into its English word representation. if n == 0: return \\"zero\\" below_20 = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'] tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'] thousands = ['', 'thousand', 'million', 'billion'] def words(num): if num < 20: return below_20[num] elif num < 100: return tens[num // 10] + ('' if num % 10 == 0 else ' ' + below_20[num % 10]) elif num < 1000: return below_20[num // 100] + ' hundred' + ('' if num % 100 == 0 else ' ' + words(num % 100)) for p, w in enumerate(thousands): if num < 1000 ** (p + 1): return words(num // 1000 ** p) + ' ' + w + ('' if num % 1000 ** p == 0 else ' ' + words(num % 1000 ** p)) return words(n)"},{"question":"Create a function that takes two sorted lists as input and returns a sorted list as output by merging both lists. The lists may have duplicate elements, and these should also be preserved in the merged output list.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list while preserving duplicates. Args: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: Merged sorted list with elements from both list1 and list2. i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Create a function that takes four parameters (integer a, integer b, integer c, and integer d). The function will return the maximum value among the four integers provided. Use the Math.max() function to solve the problem.","solution":"def max_of_four(a, b, c, d): Returns the maximum value among the four integers provided. return max(a, b, c, d)"},{"question":"Create a function that takes a string and checks if all the letters in the string are contiguous in Unicode. Contiguous in Unicode means that the Unicode value of each character in the string increases by 1 from the previous character.","solution":"def are_letters_contiguous(s): Checks if all the letters in the string are contiguous in Unicode. Arguments: s -- the input string Returns: True if the letters are contiguous in Unicode, False otherwise if len(s) <= 1: return True for i in range(1, len(s)): if ord(s[i]) != ord(s[i-1]) + 1: return False return True"},{"question":"Create a function that outputs the first N prime numbers. For example, calling this function with N=5 should return the first 5 prime numbers: [2, 3, 5, 7, 11].","solution":"def first_n_primes(N): Returns a list containing the first N prime numbers. if N <= 0: return [] primes = [] num = 2 while len(primes) < N: for i in range(2, int(num ** 0.5) + 1): if num % i == 0: break else: primes.append(num) num += 1 return primes"},{"question":"Create a function that takes three values as arguments: \`name\`, \`age\`, and \`city\`. The function should return a string that says \\"Hello, my name is [name], I am [age] years old, and I live in [city].\\"","solution":"def introduction(name, age, city): Returns a string introducing a person with the given name, age, and city. return f\\"Hello, my name is {name}, I am {age} years old, and I live in {city}.\\""},{"question":"Create a function that takes an integer as an input and returns the factorial of the number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. You cannot use any built-in factorial functions.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a string of text and returns a dictionary where the keys are words and the values are the number of occurrences of each word in the text. Consider punctuation as part of the word, meaning that \\"word,\\" and \\"word\\" would be considered different words.","solution":"def word_count(text): Takes a string of text and returns a dictionary where the keys are words and the values are the number of occurrences of each word in the text. words = text.split() # Split the text into words word_dict = {} for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"question":"Create a function that converts a given string representing a binary number to its equivalent decimal integer. The function should be able to handle strings of binary numbers with a length up to 32 characters. The function should also consistently report the same value on both big-endian and little-endian machines, regardless of their hardware architecture. The function should be robust against potential errors or exceptions that may arise during the execution of the function.","solution":"def binary_to_decimal(binary_str): Converts a binary number (given as a string) to its equivalent decimal integer. Parameters: binary_str (str): A string representing a binary number (up to 32 characters). Returns: int: The decimal equivalent of the binary number. if not isinstance(binary_str, str): raise TypeError(\\"Input must be a string\\") if not all(char in '01' for char in binary_str): raise ValueError(\\"Input string must contain only '0' and '1'\\") if len(binary_str) > 32: raise ValueError(\\"Binary string too long. Must be up to 32 characters\\") return int(binary_str, 2)"},{"question":"Create a function that takes two positive integers, a and b, and returns the sum of their greatest common divisor (GCD) and least common multiple (LCM).","solution":"import math def gcd_lcm_sum(a, b): Returns the sum of the greatest common divisor (GCD) and the least common multiple (LCM) of two positive integers a and b. gcd_value = math.gcd(a, b) lcm_value = (a * b) // gcd_value return gcd_value + lcm_value"},{"question":"Create a function that will accept an array of numbers, sum these numbers, and return their average. If the array is empty or contains no valid numbers, the function should return \`None\`. If the array contains other data types, they should be ignored.","solution":"def average(numbers): Accepts an array of numbers, sums these numbers and returns their average. If the array is empty or contains no valid numbers, returns None. Ignores non-numeric data types in the array. if not numbers: return None valid_numbers = [num for num in numbers if isinstance(num, (int, float))] if not valid_numbers: return None return sum(valid_numbers) / len(valid_numbers)"},{"question":"Create a function that takes a string input and counts the number of unique words in it. Here is a sample string: \\"this is a sample string with some sample words\\".","solution":"def count_unique_words(input_string): Returns the count of unique words in the input string. # Split the input string into words words = input_string.split() # Create a set to track unique words unique_words = set(words) # Return the number of unique words return len(unique_words)"},{"question":"Create a function that takes an array of numbers as input and returns the sum of all the numbers in the array. Implement this function in Python.","solution":"def sum_array(numbers): Returns the sum of all numbers in the array. :param numbers: List of numbers :return: Sum of numbers in the list return sum(numbers)"},{"question":"Create a function that takes a string and returns the number of occurrences of a specified character in the string. The function should ignore case sensitivity.","solution":"def count_char_occurrences(s, char): Returns the number of occurrences of a specified character in the string. Ignores case sensitivity. Arguments: s -- input string char -- character to count in the string Returns: int -- number of occurrences of char in s return s.lower().count(char.lower())"},{"question":"Create a function that takes in a string and returns the reverse of the string. When you call the function with the string \\"hello\\", it should return \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Create a function that takes in an array of integers and returns the maximum sum of any non-empty subarray within the array. For instance, given an array [-2, 1, -3, 4, -1, 2, 1, -5, 4], the function should return 6 because the subarray [4, -1, 2, 1] has the largest sum.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty subarray. :param nums: List of integers :return: Maximum sum of any non-empty subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes an integer as input and returns a list of its digits. If the input is negative, the function should return an empty list. Also, ensure that the function handles large numbers efficiently.","solution":"def digits_of_number(n): Takes an integer n and returns a list of its digits. If n is negative, returns an empty list. if n < 0: return [] return [int(digit) for digit in str(n)]"},{"question":"Create a function that takes an array as input and returns a new array where all elements have been doubled.","solution":"def double_elements(arr): Returns a new list with each element of the input list doubled. Parameters: arr (list): List of integers or floats Returns: list: New list with doubled elements return [element * 2 for element in arr]"},{"question":"Create a function that returns the sum of all even numbers within a given range from \`start\` to \`end\` (inclusive).","solution":"def sum_even_numbers(start, end): Returns the sum of all even numbers within a given range from start to end (inclusive). return sum(n for n in range(start, end + 1) if n % 2 == 0)"},{"question":"Create a function that takes a list of integers and returns a new list with only the prime numbers from the original list.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that takes two parameters, a string and a number, and returns the string repeated the number of times specified by the number parameter.","solution":"def repeat_string(s: str, n: int) -> str: Returns the string s repeated n times. return s * n"},{"question":"Create a function that takes a string consisting of a list of words, and words are separated by either spaces or commas. The function should return a list of words sorted alphabetically and without duplicates.","solution":"def sort_words(input_string): Takes a string consisting of a list of words separated by spaces or commas and returns a list of words sorted alphabetically and without duplicates. # Replace commas with spaces and split the string into words words = input_string.replace(',', ' ').split() # Remove duplicates by converting the list to a set unique_words = set(words) # Sort the unique words alphabetically and return as a list sorted_words = sorted(unique_words) return sorted_words"},{"question":"Create a function that takes in two lists of integers A and B, and returns a new list containing the elements that are common to both A and B. The function should be efficient and aim for a time complexity of O(n), where n is the total number of elements in both lists combined.","solution":"def common_elements(A, B): Returns a list containing the elements that are common to both A and B. set_A = set(A) common_list = [element for element in B if element in set_A] return common_list"},{"question":"Create a function that converts a given number to its corresponding binary representation in string format.","solution":"def to_binary(n): Converts a given number to its binary representation in string format. return bin(n)[2:] # bin() returns a string that starts with '0b'"},{"question":"Create a function that takes a dictionary as an input and returns two lists: one containing the keys and another containing the values from the dictionary. The function should also sort these lists in ascending order.","solution":"def extract_and_sort_dict_keys_and_values(input_dict): Extracts keys and values from a dictionary, sorts keys and values, and returns them as two separate lists. :param input_dict: Dictionary from which to extract keys and values :return: Tuple of two lists - sorted keys list and sorted values list sorted_keys = sorted(input_dict.keys()) sorted_values = sorted(input_dict.values()) return sorted_keys, sorted_values"},{"question":"Create a function that takes an input \`n\` and returns \`n\` raised to the power of \`n\`. You can use \`**\` operator to raise \`n\` to the power of \`n\`.","solution":"def power_of_n(n): Returns n raised to the power of n. return n ** n"},{"question":"Create a function that takes a list of strings and returns a list of the indices where each string in the original list starts with the letter 'a'.","solution":"def indices_start_with_a(strings): Returns a list of indices where each string in the original list starts with the letter 'a'. return [i for i, s in enumerate(strings) if s.lower().startswith('a')]"},{"question":"Create a function that takes two numbers as parameters. It should print the larger of the two numbers.","solution":"def print_larger_number(a, b): Prints the larger of the two given numbers a and b. if a > b: print(a) else: print(b)"},{"question":"Create a function that takes a list as input and returns the sum of all the elements in the list. Use Python as the programming language.","solution":"def sum_of_list(lst): Returns the sum of all the elements in the list. Parameters: lst (list): A list of numbers Returns: int/float: The sum of the numbers in the list return sum(lst)"},{"question":"Create a function that takes an array of strings and returns a new array with each string capitalized. You need to handle both uppercase and lowercase letters properly.","solution":"def capitalize_strings(strings): Returns a new array with each string in the input array capitalized. return [s.capitalize() for s in strings]"},{"question":"Create a function that generates a UUID in Python. UUID stands for Universally Unique Identifier and is commonly used to assign unique identifiers to objects. Python's \`uuid\` module provides a straightforward way to generate these identifiers.","solution":"import uuid def generate_uuid(): Generates a UUID (Universally Unique Identifier). return uuid.uuid4()"},{"question":"Create a function that stabilizes an image using a median filter. The function should take a two-dimensional array as input and return a two-dimensional array with the median values.","solution":"def median_filter(image): Apply a median filter to a 2D array (image). Args: image (list of list of int): 2D array representing the image. Returns: list of list of int: 2D array with median filter applied. def get_median(values): sorted_vals = sorted(values) length = len(sorted_vals) if length % 2 == 1: return sorted_vals[length // 2] else: return (sorted_vals[length // 2 - 1] + sorted_vals[length // 2]) / 2 import numpy as np image_array = np.array(image) filtered_image = np.copy(image_array) for i in range(1, image_array.shape[0] - 1): for j in range(1, image_array.shape[1] - 1): neighbors = [] for k in range(-1, 2): for l in range(-1, 2): neighbors.append(image_array[i + k, j + l]) filtered_image[i, j] = get_median(neighbors) return filtered_image.tolist()"},{"question":"Create a function that calculates the sum of all the numbers in a given list using recursion. Write the function in Python and provide a brief explanation of how it works.","solution":"def sum_recursive(lst): Returns the sum of all the numbers in the given list using recursion. if not lst: return 0 else: return lst[0] + sum_recursive(lst[1:])"},{"question":"Create a function that reads lines from a file and returns them as a list of strings. Every line should be stripped of leading and trailing whitespace.","solution":"def read_lines_from_file(file_path): Reads lines from a file and returns them as a list of strings. Each line is stripped of leading and trailing whitespace. with open(file_path, 'r') as file: lines = file.readlines() return [line.strip() for line in lines]"},{"question":"Create a function that returns the Fibonacci sequence up to N numbers using recursion in Python.","solution":"def fibonacci(n, sequence=None): Returns the Fibonacci sequence up to n numbers using recursion. if sequence is None: sequence = [0, 1] if len(sequence) >= n: return sequence[:n] next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return fibonacci(n, sequence)"},{"question":"Create a function that takes in an array of integers and determines whether they are all odd numbers or all even numbers or mixed.","solution":"def determine_number_parity(arr): Determines whether an array of integers contains all odd numbers, all even numbers, or a mix of both. Args: arr (list of int): The array of integers to be checked. Returns: str: 'all_odd' if all numbers are odd, 'all_even' if all numbers are even, 'mixed' if the array contains both odd and even numbers. if not arr: return 'mixed' all_odd = all(num % 2 != 0 for num in arr) if all_odd: return 'all_odd' all_even = all(num % 2 == 0 for num in arr) if all_even: return 'all_even' return 'mixed'"},{"question":"Create a function that takes an array of Fahrenheit temperatures and converts them to Celsius. If the array contains any non-numeric values, the function should throw an error with a descriptive message.","solution":"def fahrenheit_to_celsius(f_temps): Converts an array of Fahrenheit temperatures to Celsius. Parameters: f_temps (list): List of temperatures in Fahrenheit to be converted. Returns: list: List of temperatures converted to Celsius. Raises: ValueError: If the array contains any non-numeric values. if not all(isinstance(temp, (int, float)) for temp in f_temps): raise ValueError(\\"All items in the array must be numeric values (int or float).\\") c_temps = [(temp - 32) * 5.0/9.0 for temp in f_temps] return c_temps"},{"question":"Create a function that takes an array of integers and returns the sum of all even numbers in the array. In Python, how would you define such a function, and what precautions would you take to ensure it handles potential errors effectively?","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the given array of integers. :param arr: List of integers. :return: Sum of even integers. :raises ValueError: If arr is not a list or contains non-integer elements. if not isinstance(arr, list): raise ValueError(\\"Input should be a list of integers.\\") for element in arr: if not isinstance(element, int): raise ValueError(\\"All elements in the list should be integers.\\") return sum(x for x in arr if x % 2 == 0)"},{"question":"Create a function that takes a list and returns the first element.","solution":"def get_first_element(lst): Returns the first element of the list. if not lst: raise ValueError(\\"The list is empty\\") return lst[0]"},{"question":"Create a function that takes three integers \`a\`, \`b\`, and \`c\`, and returns the largest of the three using the ternary operator.","solution":"def largest_of_three(a, b, c): Returns the largest of the three integers a, b, and c using the ternary operator. return a if a > b and a > c else b if b > c else c"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, as inputs and returns a new list that is the result of concatenating \`list1\` and \`list2\`, but only if \`list1\` is not empty. If \`list1\` is empty, the function should return \`list2\`. Additionally, the function should handle the case where one or both of the input lists are empty.","solution":"def concatenate_lists(list1, list2): Concatenates list1 and list2 if list1 is not empty. If list1 is empty, returns list2. if list1: return list1 + list2 return list2"},{"question":"Create a function that takes a string as input and verifies whether it is a valid integer. The function should return \`True\` if the string represents a valid integer, including handling negative integers and ignoring leading/trailing whitespaces. However, the function should not convert the string to an integer. Instead, it should use string manipulation to check if the string is a valid integer without actually converting it. The function should handle edge cases such as leading/trailing whitespaces, an optional leading '+' or '-', and strings that are not integers (e.g., \\"123abc\\").","solution":"def is_valid_integer(s: str) -> bool: Checks if a given string is a valid integer. A valid integer can have optional leading/trailing whitespaces, an optional leading '+' or '-', and must contain only digits otherwise. :param s: Input string :return: True if the string is a valid integer, False otherwise s = s.strip() if not s: return False if s[0] in ('+', '-'): s = s[1:] return s.isdigit()"},{"question":"Create a function that takes a list of numbers and returns the maximum product possible by multiplying any two numbers in the list. The list will always have at least two numbers.","solution":"def max_product_of_two(nums): Returns the maximum product possible by multiplying any two numbers in the given list. The list will always have at least two numbers. Args: nums (list): A list of integers. Returns: int: The maximum product of any two numbers. if len(nums) < 2: raise ValueError(\\"Input list must contain at least two numbers.\\") max1 = max2 = float('-inf') min1 = min2 = float('inf') for num in nums: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Create a function that takes an array of integers, and returns a new array with sub-arrays of size \`k\` formed from the original array. If the original array is not perfectly divisible by \`k\`, the last sub-array should contain the remaining elements.","solution":"def split_array(arr, k): Split the input array into sub-arrays of size k. If the array is not perfectly divisible by k, the last sub-array will contain the remaining elements. Parameters: arr (list): The input array of integers. k (int): The size of each sub-array. Returns: list: A list of sub-arrays. return [arr[i:i + k] for i in range(0, len(arr), k)]"},{"question":"Create a function that takes an array of integers as input and returns an array containing the second smallest and the second largest numbers in the array. If the array is empty or does not contain at least two distinct numbers, return an empty array.","solution":"def second_smallest_largest(arr): Returns an array containing the second smallest and the second largest numbers in the array. If the array is empty or does not contain at least two distinct numbers, return an empty array. if len(arr) < 2: return [] # Create a sorted list of unique elements unique_arr = sorted(set(arr)) if len(unique_arr) < 2: return [] return [unique_arr[1], unique_arr[-2]]"},{"question":"Create a function that takes two parameters: an integer \`n\` and a list of integers. The function should return the sum of all integers in the list that are multiples of \`n\`.","solution":"def sum_of_multiples(n, numbers): Returns the sum of all integers in the list that are multiples of n. Parameters: n (int): The integer to find multiples of. numbers (list of int): The list of integers. Returns: int: The sum of multiples of n in the list. return sum(x for x in numbers if x % n == 0)"},{"question":"Create a function that takes an integer as input and returns the integer with its digits reversed. If the input number is negative, the function should return the reversed integer, but with a negative sign at the beginning. For example, if the input is -123, the output should be -321. Additionally, ensure that the reversed number does not contain any leading zeros.","solution":"def reverse_integer(n): Reverses the digits of an integer. Parameters: n (int): The input integer. Returns: int: The integer with its digits reversed. If the original integer was negative, the result is also negative. negative = n < 0 n = abs(n) reversed_str = str(n)[::-1] reversed_int = int(reversed_str) return -reversed_int if negative else reversed_int"},{"question":"Create a function that checks if a given array is sorted in descending order and all elements are unique.","solution":"def is_sorted_and_unique(arr): Checks if the given array is sorted in descending order and all elements are unique. Args: arr (list): The array to check. Returns: bool: True if the array is sorted in descending order and all elements are unique, False otherwise. return arr == sorted(arr, reverse=True) and len(arr) == len(set(arr))"},{"question":"Create a function that takes an integer \`n\` and returns the first \`n\` non-corner positions of a square grid. A non-corner position is defined as any position other than those in the first and last row and column of a square grid. To solve this problem, consider corner positions to be at the grid boundaries.","solution":"def non_corner_positions(n): Returns the first n non-corner positions of a square grid. A non-corner position is defined as any position which is not in the first or last row and column. if n <= 0: return [] # Determine the size of the smallest square grid that can accommodate n non-corner positions size = 2 while (size - 2) ** 2 < n: size += 1 positions = [] for row in range(2, size): for col in range(2, size): positions.append((row, col)) if len(positions) == n: return positions return positions"},{"question":"Create a function that generates a list of Fibonacci numbers up to the specified limit using generator expressions.","solution":"def fibonacci(limit): Generates Fibonacci numbers up to the specified limit using a generator. a, b = 0, 1 while a <= limit: yield a a, b = b, a + b"},{"question":"Create a function that reverses the case of each character in a given string. For example, if you input \\"Python123!\\", the function should return \\"pYTHON123!\\".","solution":"def reverse_case(s): Returns a string with reversed case for each character in s. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Create a function that takes in a string as a parameter. If the string is empty or only contains whitespace, return None. If the string does not consist only of numeric characters, return False. If the string contains only numeric characters but has leading/trailing whitespace, trim the whitespace and return the numeric string. Example: trim_and_check(\\" 123 \\" evaluates to \\"123\\").","solution":"def trim_and_check(s): Takes in a string as a parameter and processes it according to the following rules: 1. If the string is empty or only contains whitespace, return None. 2. If the string does not consist only of numeric characters, return False. 3. If the string contains only numeric characters but has leading/trailing whitespace, trim the whitespace and return the numeric string. # Trim leading and trailing whitespaces trimmed_s = s.strip() # Check if string is empty after trimming if trimmed_s == \\"\\": return None # Check if the string consists only of numeric characters if trimmed_s.isdigit(): return trimmed_s # If string contains non-numeric characters return False"},{"question":"Create a function that returns the last 'n' words from an input string. If 'n' is greater than the number of words in the string, return all the words in the string. If 'n' is less than or equal to zero, return an empty string.","solution":"def get_last_n_words(input_string, n): Returns the last 'n' words from the input string. If 'n' is greater than the number of words in the string, returns all words. If 'n' is less than or equal to zero, returns an empty string. if n <= 0: return \\"\\" words = input_string.split() return \\" \\".join(words[-n:])"},{"question":"Create a function that removes duplicates from a list and returns a new list with the unique elements in the same order as they appeared in the original list.","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining the order of appearance of elements. seen = set() unique_list = [] for item in lst: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Create a function that takes an array of positive integers and returns the smallest positive integer that cannot be formed by the sum of any subset of the array elements.","solution":"def smallest_non_constructible_value(arr): Takes an array of positive integers and returns the smallest positive integer that cannot be formed by the sum of any subset of the array elements. arr.sort() smallest_missing = 1 for number in arr: if number > smallest_missing: break smallest_missing += number return smallest_missing"},{"question":"Create a function that takes as input a sentence and returns a new sentence where the first letter of each word is capitalized. How can I achieve this in Python?","solution":"def capitalize_sentence(sentence): Returns a new sentence where the first letter of each word is capitalized. return ' '.join(word.capitalize() for word in sentence.split())"},{"question":"Create a function that determines whether a number is a perfect square. The function should take one argument, \`n\`, which is the number to check. The function should return \`True\` if \`n\` is a perfect square, and \`False\` otherwise. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.","solution":"import math def is_perfect_square(n): Determines whether the given number is a perfect square. Parameters: n (int): The number to check. Returns: bool: True if \`n\` is a perfect square, False otherwise. if n < 0: return False root = int(math.sqrt(n)) return root * root == n"},{"question":"Create a function that converts a given number to a specified base (between 2 and 36) and returns the representation as a string. The function should handle both positive and negative numbers.","solution":"def convert_to_base(number, base): Convert a given number to a specified base (between 2 and 36) and return the representation as a string. Handles both positive and negative numbers. Parameters: number (int): The number to be converted. base (int): The base to convert to (between 2 and 36). Returns: str: The representation of the number in the specified base. if not (2 <= base <= 36): raise ValueError(\\"Base must be between 2 and 36.\\") if number == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" neg_flag = number < 0 if neg_flag: number = -number result = \\"\\" while number: result = digits[number % base] + result number //= base if neg_flag: result = \\"-\\" + result return result"},{"question":"Create a function that takes an infinite sequence of integers and generates an infinite sequence of integers where every integer is the sum of the previous integer and the index of the integer in the sequence, starting from index 1.","solution":"def generate_sequence(): A generator that returns an infinite sequence of integers where each integer is the sum of the previous integer and its index in the sequence, starting from index 1. current = 0 index = 1 while True: current += index yield current index += 1"},{"question":"Create a function that takes a binary tree as input and prints out the leaf nodes. A leaf node is defined as a node with no children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def print_leaf_nodes(root): Prints the leaf nodes of a binary tree. if root is None: return if root.left is None and root.right is None: print(root.value) return if root.left is not None: print_leaf_nodes(root.left) if root.right is not None: print_leaf_nodes(root.right)"},{"question":"Create a function that takes an array of integers and returns its maximum contiguous sum using Kadane's Algorithm.","solution":"def max_subarray_sum(arr): Returns the maximum contiguous sum in an array using Kadane's Algorithm. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a list of integers and returns the element that is most frequent in the list. If there is more than one such element, return the one that is smallest. If the list is empty, return None.","solution":"def most_frequent_element(lst): Return the most frequent element in the list. If there is a tie, return the smallest element. If the list is empty, return None. if not lst: return None frequency = {} for num in lst: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 most_frequent = None highest_frequency = 0 for num, freq in frequency.items(): if freq > highest_frequency or (freq == highest_frequency and num < most_frequent): highest_frequency = freq most_frequent = num return most_frequent"},{"question":"Create a function that calculates the product of all elements in an array that are greater than a given value.","solution":"def product_of_elements_greater_than(arr, threshold): Returns the product of all elements in the array that are greater than the given threshold. :param arr: List of numbers. :param threshold: A number that elements in arr are compared against. :return: The product of elements greater than threshold. product = 1 found = False for num in arr: if num > threshold: product *= num found = True return product if found else None"},{"question":"Create a function that takes a list of user objects and returns the user with the highest availability score.","solution":"def user_with_highest_availability(users): Takes a list of user objects (dictionaries) and returns the user with the highest availability score. Each user object must have at least the 'username' and 'availability' keys. Args: users (list): List of user objects (dictionaries) Returns: dict: User object with the highest availability score if not users: return None return max(users, key=lambda user: user.get('availability', float('-inf')))"},{"question":"Create a function that finds the largest element in a given array and returns its index. If the array is empty, return -1. Also, the function should handle arrays of integers and floats.","solution":"def find_largest_index(arr): Returns the index of the largest element in the given array. If the array is empty, returns -1. Handles arrays of integers and floats. if not arr: return -1 max_index = 0 max_value = arr[0] for i in range(1, len(arr)): if arr[i] > max_value: max_index = i max_value = arr[i] return max_index"},{"question":"Create a function that checks if a given string is a valid social security number (SSN). A valid SSN in the United States typically matches the pattern of three sets of three digits, separated by hyphens.","solution":"import re def is_valid_ssn(ssn: str) -> bool: Checks if the given string is a valid US Social Security Number (SSN). A valid SSN matches the pattern 'XXX-XX-XXXX' where X is a digit (0-9). Parameters: ssn (str): The string to check. Returns: bool: True if valid, False otherwise. pattern = r\\"^d{3}-d{2}-d{4}\\" return bool(re.match(pattern, ssn))"},{"question":"Create a function that takes a list of tuples as input, where each tuple is expected to contain two elements - a string and an integer. The function should split each string in the tuples based on a hyphen ('-') and return a new list of tuples with the string elements split and the integer elements unchanged.","solution":"def split_tuples_in_list(input_list): Takes a list of tuples containing a string and an integer. Splits the string based on hyphens and returns a new list of tuples with the string elements split and the integer elements unchanged. Example: input: [(\\"a-b\\", 1), (\\"c-d-e\\", 2)] output: [((\\"a\\", \\"b\\"), 1), ((\\"c\\", \\"d\\", \\"e\\"), 2)] return [((tuple(string_part.split('-'))), integer_part) for string_part, integer_part in input_list]"},{"question":"Create a function that calculates the percentage of a given number, out of a total. It should take two parameters, the number and the total, and return the percentage as a floating-point number. Ensure that if the total is zero or a negative number, an error message is returned.","solution":"def calculate_percentage(number, total): Calculates the percentage of 'number' out of 'total'. Args: number (float): The part value. total (float): The total value. Returns: float: The percentage of 'number' out of 'total'. Returns an error message if 'total' is zero or a negative number. if total <= 0: return \\"Error: Total must be greater than zero.\\" return (number / total) * 100"},{"question":"Create a function that echoes the first element of an array variable.","solution":"def echo_first_element(arr): Returns the first element of the array if the array is not empty. Parameters: arr (list): List of elements. Returns: The first element of the arr if the array is not empty. Otherwise, returns None. if arr: return arr[0] return None"},{"question":"Create a function that takes an array of integers and returns a new array with all the integers sorted in descending order. Use Python.","solution":"def sort_descending(arr): Returns a new array with all the integers from the input array sorted in descending order. Parameters: arr (list of int): The input array of integers. Returns: list of int: A new array with the integers sorted in descending order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes in two strings, \`str1\` and \`str2\`, and determines if they are anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams. # Clean and sort the strings return sorted(str1.replace(\\" \\", \\"\\").lower()) == sorted(str2.replace(\\" \\", \\"\\").lower())"},{"question":"Create a function that takes a positive integer and returns \`true\` if that integer is a prime number, and \`false\` otherwise. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. The function should also handle edge cases such as when the input is less than 2.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Create a function that takes an array of strings and returns a new array containing only the strings with more than 5 characters.","solution":"def filter_long_strings(strings): Takes an array of strings and returns a new array containing only the strings with more than 5 characters. return [s for s in strings if len(s) > 5]"},{"question":"Create a function that accepts a single parameter \`n\`, and returns the sum of all positive integers up to \`n\` (inclusive). If \`n\` is less than 1, the function should return 0.","solution":"def sum_up_to(n): Returns the sum of all positive integers up to n (inclusive). If n is less than 1, return 0. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Create a function that finds the sum of all numbers in a given list. The function should return the sum.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. :param numbers: List of numbers :return: Sum of numbers return sum(numbers)"},{"question":"Create a function that checks if a list of strings are all anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.","solution":"def are_anagrams(strings): Check if all strings in the list are anagrams of each other. Parameters: strings (list): List of strings to check. Returns: bool: True if all strings are anagrams of each other, False otherwise. if not strings: return True # Sort the characters in the first string sorted_first_string = sorted(strings[0]) # Compare the sorted version of every string with the sorted first string for s in strings[1:]: if sorted(s) != sorted_first_string: return False return True"},{"question":"Create a function that takes a string as an input and returns the string with all duplicate characters removed.","solution":"def remove_duplicates(input_string): Returns the input string with all duplicate characters removed. The function retains the order of the first occurrence of each character. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that generates Tribonacci numbers up to the nth term. The Tribonacci sequence starts with three fixed numbers, say 0, 1, and 1, and each subsequent number is the sum of the preceding three numbers. The function should return a list containing these numbers up to the nth term. For instance, if n = 5, the function should return [0, 1, 1, 2, 4].","solution":"def tribonacci_sequence(n): Generates the Tribonacci sequence up to the nth term. Parameters: n (int): The number of terms in the sequence to generate. Returns: list: A list containing the Tribonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] elif n == 3: return [0, 1, 1] tribonacci = [0, 1, 1] for i in range(3, n): next_value = tribonacci[-1] + tribonacci[-2] + tribonacci[-3] tribonacci.append(next_value) return tribonacci"},{"question":"Create a function that can take in a list of numbers and return the frequently occurring number in the list. If there are multiple numbers with the same highest frequency, return all of them in a list. If the list is empty, return an empty list.","solution":"from collections import Counter def most_frequent(numbers): Returns the most frequently occurring number(s) in the list. If there are multiple numbers with the same highest frequency, all of them are returned in a list. If the list is empty, an empty list is returned. if not numbers: return [] count = Counter(numbers) max_freq = max(count.values()) most_frequent_numbers = [num for num, freq in count.items() if freq == max_freq] return most_frequent_numbers"},{"question":"Create a function that accepts a string and returns the string in reverse order. For example, if the input is 'Hello', the output should be 'olleH'. Assume the input string contains only alphabets and spaces and has no punctuation. Do not use built-in reverse functions or slicing.","solution":"def reverse_string(s): Returns the given string in reverse order. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that takes two numbers as parameters, rounds each number to the nearest integer, and returns the sum of these rounded numbers.","solution":"def rounded_sum(a, b): Takes two numbers, rounds each to the nearest integer, and returns the sum of these rounded numbers. return round(a) + round(b)"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have an even number of characters. If the input list is empty, the function should return an empty list.","solution":"def filter_even_length_strings(strings): Filters the list of strings, returning only those with an even number of characters. Parameters: - strings: list of str Returns: - list of str return [s for s in strings if len(s) % 2 == 0]"},{"question":"Create a function that finds the largest number in a list. Write a Python function \`find_largest_number\` that takes a list of numbers as input and returns the largest number in the list.","solution":"def find_largest_number(numbers): Returns the largest number in a list of numbers. Args: numbers (list of int/float): List of numbers. Returns: int/float: The largest number in the list. if not numbers: raise ValueError(\\"The list is empty\\") return max(numbers)"},{"question":"Create a function that takes in a number and returns the sum of its digits. If the number is negative, the function should return \\"Invalid Input\\" since the sum of digits of a negative number is not defined in this context.","solution":"def sum_of_digits(number): Returns the sum of the digits of the given number. If the number is negative, returns \\"Invalid Input\\". if number < 0: return \\"Invalid Input\\" return sum(int(digit) for digit in str(number))"},{"question":"Create a function that takes a string \`input_string\` and returns the length of the longest palindromic substring within that string. A palindromic substring is a string that reads the same backward as forward.","solution":"def longest_palindromic_substring(input_string): n = len(input_string) if n == 0: return 0 table = [[False] * n for _ in range(n)] maxLength = 1 for i in range(n): table[i][i] = True start = 0 for i in range(n-1): if input_string[i] == input_string[i + 1]: table[i][i + 1] = True start = i maxLength = 2 for k in range(3, n+1): for i in range(n - k + 1): j = i + k - 1 if table[i + 1][j - 1] and input_string[i] == input_string[j]: table[i][j] = True if k > maxLength: start = i maxLength = k return maxLength"},{"question":"Create a function that analyzes the weather data and returns the number of days with a temperature above a specified threshold. The weather data is represented as a list of tuples, where each tuple contains the date (as a string in \\"YYYY-MM-DD\\" format) and the temperature (as a float).","solution":"def days_above_threshold(weather_data, threshold): Analyzes the weather data and returns the number of days with a temperature above the specified threshold. Parameters: weather_data (list of tuples): List where each tuple contains the date (as string in \\"YYYY-MM-DD\\" format) and the temperature (as float). threshold (float): The temperature threshold. Returns: int: The number of days with a temperature above the threshold. return sum(1 for date, temp in weather_data if temp > threshold)"},{"question":"Create a function that takes a single integer input and returns the binary representation of that integer as a string. The integer can be in the range of 0 to 255.","solution":"def int_to_binary(n): Converts a single integer (0-255) to its binary representation as a string. Args: n (int): The integer to be converted. It should be in the range 0 to 255. Returns: str: The binary representation of the integer. if not (0 <= n <= 255): raise ValueError(\\"The integer must be in the range 0 to 255\\") return f\\"{n:08b}\\""},{"question":"Create a function that generates a simple maze using a 2D array in Python. The maze should be a grid where 0 represents a path and 1 represents a wall. The function will accept parameters for the maze's width, height, and percentage of walls. Your task is to ensure that the maze is solvable by beginning at the top-left corner and reaching the bottom-right corner.","solution":"import random def generate_maze(width, height, wall_percentage): def create_blank_maze(): return [[0 for _ in range(width)] for _ in range(height)] def fill_walls(maze): for i in range(height): for j in range(width): if random.random() < wall_percentage / 100.0: maze[i][j] = 1 maze[0][0] = 0 # Ensure start is always a path maze[height-1][width-1] = 0 # Ensure end is always a path def is_solvable(maze): visited = [[0 for _ in range(width)] for _ in range(height)] def dfs(x, y): if x == width - 1 and y == height - 1: # Reached the end return True if x < 0 or x >= width or y < 0 or y >= height or visited[y][x] or maze[y][x] == 1: return False visited[y][x] = 1 if dfs(x + 1, y) or dfs(x, y + 1) or dfs(x - 1, y) or dfs(x, y - 1): return True return False return dfs(0, 0) while True: maze = create_blank_maze() fill_walls(maze) if is_solvable(maze): break return maze # Example usage maze = generate_maze(10, 10, 30) for row in maze: print(row)"},{"question":"Create a function that takes two integers as input and returns their sum. Then, write a test function to validate your sum function with a few test cases.","solution":"def sum_two_numbers(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that returns the number of items in an array.","solution":"def count_items(array): Returns the number of items in the provided array. return len(array)"},{"question":"Create a function that takes two integer arrays as input and returns an array containing the common elements between them, sorted in ascending order. If there are no common elements, the function should return an empty array.","solution":"def common_elements(array1, array2): Returns a sorted array of common elements between array1 and array2. common = set(array1) & set(array2) return sorted(common)"},{"question":"Create a function that takes an array of integers and returns the number of unique pairs in the array that sum up to a specific target value.","solution":"def count_unique_pairs(nums, target): Returns the number of unique pairs in the array such that the sum of each pair equals the target value. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(pairs)"},{"question":"Create a function that checks if a given string is a palindrome or not. Provide code for two different programming languages.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, otherwise False. s_cleaned = ''.join(char.lower() for char in s if char.isalnum()) return s_cleaned == s_cleaned[::-1]"},{"question":"Create a function that takes in a list of integers and returns a new list where every pair of adjacent elements is swapped. The function should be designed to handle an empty list and lists with an odd number of elements gracefully.","solution":"def swap_adjacent_elements(lst): Returns a new list where every pair of adjacent elements in lst is swapped. For lists with odd number of elements, the last element remains in its original position. swapped_lst = lst[:] for i in range(1, len(lst), 2): swapped_lst[i - 1], swapped_lst[i] = swapped_lst[i], swapped_lst[i - 1] return swapped_lst"},{"question":"Create a function that will validate an email address format.","solution":"import re def is_valid_email(email): Validates if the provided email address is in a correct format. # Email pattern according to the general rules of email structure pattern = r\\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\" return re.match(pattern, email) is not None"},{"question":"Create a function that takes a string and returns the count of unique substrings of the string.","solution":"def count_unique_substrings(s: str) -> int: Returns the count of unique substrings of the string s. unique_substrings = set() for length in range(1, len(s) + 1): for start in range(len(s) - length + 1): substring = s[start:start + length] unique_substrings.add(substring) return len(unique_substrings)"},{"question":"Create a function that takes an integer as a parameter and returns the factorial of that integer using recursion. The function should handle cases where the input is negative by returning a message indicating that factorial is not defined for negative numbers.","solution":"def factorial(n): Returns the factorial of n using recursion. If n is negative, returns a message indicating that factorial is not defined for negative numbers. if n < 0: return \\"Factorial is not defined for negative numbers\\" elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that receives as input a list of integers and returns a new list containing only the even numbers from the original list. Make sure to include a docstring for the function and a few test cases within a doctest.","solution":"def filter_even_numbers(numbers): Filters out the even numbers from a list of integers. Args: numbers (list of int): The list of integers to filter. Returns: list of int: A list containing only the even numbers from the original list. >>> filter_even_numbers([1, 2, 3, 4, 5, 6]) [2, 4, 6] >>> filter_even_numbers([7, 11, 9]) [] >>> filter_even_numbers([4, 4, 4, 4]) [4, 4, 4, 4] >>> filter_even_numbers([]) [] return [number for number in numbers if number % 2 == 0]"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should handle the base case for 0! and ensure that only non-negative integers are accepted input. If the input is not a non-negative integer, the function should return an appropriate error message.","solution":"def factorial(n): Calculate the factorial of a non-negative integer n using recursion. Return an error message if the input is not a non-negative integer. if not isinstance(n, int) or n < 0: return \\"Input must be a non-negative integer.\\" if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes two integers \`a\` and \`b\` and returns their greatest common divisor (GCD).","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using Euclidean algorithm. while b: a, b = b, a % b return abs(a)"},{"question":"Create a function that calculates the number of ways to choose k items from a set of n items, also known as the binomial coefficient. The function should be named \`calculate_combinations\` and should take two parameters: \`n\` (the total number of items) and \`k\` (the number of items to choose). The function should return the binomial coefficient, which is the number of ways to choose k items from a set of n items, where order does not matter.","solution":"def calculate_combinations(n, k): Calculates the binomial coefficient (n choose k), the number of ways to choose k items from n items. if k > n: return 0 if k == 0 or k == n: return 1 k = min(k, n - k) # Take advantage of symmetry numerator = 1 denominator = 1 for i in range(1, k + 1): numerator *= (n - i + 1) denominator *= i return numerator // denominator"},{"question":"Create a function that takes an integer array as input and returns the array element that occurred the most number of times.","solution":"from collections import Counter def most_frequent_element(arr): Returns the element that occurs the most number of times in the array. If there are multiple elements with the same highest frequency, returns the smallest one. if not arr: return None count = Counter(arr) # Get the highest frequency max_count = max(count.values()) # Get all elements that have the highest frequency and return the smallest one most_frequent = [k for k, v in count.items() if v == max_count] return min(most_frequent)"},{"question":"Create a function that takes two numbers \`a\` and \`b\` as input and returns the sum of all even numbers between \`a\` and \`b\` (inclusive). If \`a\` is greater than \`b\`, the function should return -1. The function should be named \`sumOfEvens\`.","solution":"def sumOfEvens(a, b): Returns the sum of all even numbers between a and b (inclusive). If a is greater than b, returns -1. if a > b: return -1 sum_even = 0 for num in range(a, b + 1): if num % 2 == 0: sum_even += num return sum_even"},{"question":"Create a function that formats a given list of integers into a string in the format \\"x1, x2, ..., xn\\" where xi represents each integer in the list. The function must return this string if the list is not empty. If the list is empty, it should return the string \\"-\\".","solution":"def format_list_of_ints(int_list): Formats a given list of integers into a string in the format \\"x1, x2, ..., xn\\" where xi represents each integer in the list. If the list is empty, returns \\"-\\". if not int_list: return \\"-\\" return \\", \\".join(map(str, int_list))"},{"question":"Create a function that checks if a string is a palindrome. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes because they remain the same when their characters are reversed. However, \\"python\\" is not a palindrome because \\"python\\" is not the same as \\"nohtyp\\".","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Parameters: s (str): The string to be checked. Returns: bool: True if s is a palindrome, False otherwise. return s == s[::-1]"},{"question":"Create a function that , given a sorted integer array nums, deletes duplicate numbers in-place and returns the new length of the array. After removing duplicates, the relative order of the elements should be the same.","solution":"def remove_duplicates(nums): Given a sorted integer array nums, deletes duplicate numbers in-place and returns the new length of the array. # Return 0 if the list is empty if not nums: return 0 # Initialize the new length and index to update elements new_length = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[new_length] = nums[i] new_length += 1 return new_length"},{"question":"Create a function that takes in a JSON object and recursively converts all the keys and values to snake_case.","solution":"import re import json def to_snake_case(s): Convert a string to snake_case. s = re.sub('(.)([A-Z][a-z]+)', r'1_2', s) s = re.sub('([a-z0-9])([A-Z])', r'1_2', s) return s.lower() def convert_to_snake_case(obj): Recursively convert all keys and string values of a JSON-like object to snake_case. if isinstance(obj, dict): new_dict = {} for key, value in obj.items(): new_key = to_snake_case(key) new_value = convert_to_snake_case(value) new_dict[new_key] = new_value return new_dict elif isinstance(obj, list): return [convert_to_snake_case(item) for item in obj] elif isinstance(obj, str): return to_snake_case(obj) else: return obj"},{"question":"Create a function that checks if a list is a sublist of another list. If the list provided is a sublist, return True, otherwise, return False. The second list can be as long as needed.","solution":"def is_sublist(sublist, mainlist): Check if sublist is a sublist of mainlist. Args: sublist (list): The list which should be checked if it is a sublist. mainlist (list): The list in which the sublist will be checked. Returns: bool: True if sublist is a sublist of mainlist, False otherwise. sub_length = len(sublist) main_length = len(mainlist) for i in range(main_length - sub_length + 1): if mainlist[i:i + sub_length] == sublist: return True return False"},{"question":"Create a function that takes two lists as input and returns their intersection, i.e., a list of elements that are common to both lists.","solution":"def intersection(lst1, lst2): Returns a list of elements that are common to both lst1 and lst2. set1 = set(lst1) set2 = set(lst2) return list(set1 & set2)"},{"question":"Create a function that determines the minimum number of flips required to convert an array of numbers from all 1's to all 0's. A flip operation is defined as changing all 0's to 1's (or 1's to 0's) in a contiguous subarray. The function should return the minimum number of such flips necessary.","solution":"def min_flips(arr): Determine the minimum number of flips required to convert an array of numbers from all 1's to all 0's. :param arr: List[int] - array containing 1's and 0's :return: int - minimum number of flips needed if not arr: return 0 flip_count = 0 current = arr[0] for num in arr: if num != current: flip_count += 1 current = num # At the end check last element to determine if an additional flip is needed if arr[-1] == 1: flip_count += 1 return flip_count"},{"question":"Create a function that accepts two integers (x and y) as input and returns the sum of the numbers in their binary representations where each bit is the product of the corresponding bits of x and y. This operation is known as the bitwise AND operation before conversion.","solution":"def binary_and_sum(x, y): Returns the sum of the numbers in their binary representations where each bit is the product of the corresponding bits of x and y. result = x & y return sum(int(bit) for bit in bin(result)[2:])"},{"question":"Create a function that takes an integer as an input and returns the string \\"Even\\" if the number is even and \\"Odd\\" if the number is odd. Make sure to handle both positive and negative integers.","solution":"def even_or_odd(number): Returns \\"Even\\" if the number is even and \\"Odd\\" if the number is odd. return \\"Even\\" if number % 2 == 0 else \\"Odd\\""},{"question":"Create a function that identifies the largest number in a list.","solution":"def find_largest(numbers): Returns the largest number in a list of numbers. if not numbers: raise ValueError(\\"The list should not be empty\\") largest = numbers[0] for num in numbers: if num > largest: largest = num return largest"},{"question":"Create a function that checks the balance between two accounts. If the balance of the first account is higher than the second, the function should return the difference between the balances. If the balance of the second account is higher, the function should return the negative difference. If the balances are equal, return 0.","solution":"def check_balance(account1, account2): Compares the balances of two accounts and returns the difference. Args: account1 (float): Balance of the first account. account2 (float): Balance of the second account. Returns: float: The difference between the balances of the two accounts. return account1 - account2"},{"question":"Create a function that takes a single integer argument and returns the sum of the squares of its digits. For example, given the number \`123\`, the function should return \`1^2 + 2^2 + 3^2 = 14\`.","solution":"def sum_of_squares_of_digits(n): Given an integer n, return the sum of the squares of its digits. return sum(int(digit) ** 2 for digit in str(n))"},{"question":"Create a function that takes an integer and returns it as a reversed string","solution":"def reverse_integer(n): Returns the integer n as a reversed string. return str(n)[::-1]"},{"question":"Create a function that calculates the sum of all numbers in a list. The function should take a list of numbers as an argument and return the sum of those numbers.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the list. Args: numbers (list): List of numbers. Returns: int/float: Sum of numbers in the list. return sum(numbers)"},{"question":"Create a function that takes in an array of integers and returns the maximum product of two distinct elements in the array.","solution":"def max_product_of_two(arr): Returns the maximum product of two distinct elements in the array. If the array contains less than two elements or all elements are the same, it returns None. if len(arr) < 2: return None # Find the two largest and the two smallest values in the array. # Largest and second largest: max1 = max2 = float('-inf') # Smallest and second smallest: min1 = min2 = float('inf') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Create a function that takes in two linked lists, each node containing a single digit from a number, where the digits are stored in reverse order (i.e., the least significant digit is at the head). The function should return a new linked list representing the sum of the two numbers.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Add two numbers represented by linked lists. Each node contains a single digit and the digits are stored in reverse order. Returns the sum as a linked list also in reverse order. # Create a dummy node to help build the result list dummy = ListNode() # This will be used to iterate current = dummy carry = 0 # Initialize carry to 0 # Loop as long as there are nodes in l1 or l2 or there is a carry while l1 or l2 or carry: # Sum the values of the two nodes plus carry val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry # Update carry for the next iteration carry = total // 10 # Create a new node for the current digit in the result list current.next = ListNode(total % 10) # Move to the next nodes in the lists current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy.next"},{"question":"Create a function that takes a number as an input and returns the list of even numbers from that number to 1 (inclusive).","solution":"def get_even_numbers(n): Returns a list of even numbers from n to 1 (inclusive). return [i for i in range(n, 0, -1) if i % 2 == 0]"},{"question":"Create a function that takes in a string as a parameter and returns a new string that contains only the even-indexed characters from the original string. Indexing starts from 0, meaning the first character is at index 0.","solution":"def even_indexed_characters(s): Returns a string that contains only the even-indexed characters from the original string. Parameters: s (str): The input string from which to extract even-indexed characters. Returns: str: A new string with only the even-indexed characters. return s[::2]"},{"question":"Create a function that takes a list of integers as an argument and returns the sum of all the integers in the list. Additionally, the function should also return the average of these integers. The function should return these values as a tuple.","solution":"def sum_and_average(numbers): Takes a list of integers and returns a tuple where the first element is the sum of the integers and the second element is the average of the integers. if not numbers: return (0, 0) total_sum = sum(numbers) average = total_sum / len(numbers) return (total_sum, average)"},{"question":"Create a function that takes an array of integers and returns an array of the same length where each element is the sum of itself and the next element in the input array. If the input array has only one element, the function returns an array with that single element repeated.","solution":"def sum_with_next(arr): Returns an array where each element is the sum of itself and the next element in the input array. If the input array has only one element, the array contains that single element repeated. if not arr: return [] if len(arr) == 1: return [arr[0], arr[0]] result = [] for i in range(len(arr) - 1): result.append(arr[i] + arr[i + 1]) result.append(arr[-1]) # Add the last element itself because there's no next element return result"},{"question":"Create a function that takes in two lists of integers and checks if they are identical in all elements and order. If they are identical, return True. Otherwise, return False.","solution":"def are_lists_identical(list1, list2): Checks if two lists of integers are identical in all elements and order. Returns True if they are identical, otherwise returns False. return list1 == list2"},{"question":"Create a function that takes two lists of integers and returns a list of their intersection, ensuring the result is sorted and contains no duplicates. For example, if the input lists are [1, 3, 3, 5, 7], [3, 4, 5, 6, 7], the function should return [3, 5, 7].","solution":"def intersection_sorted_unique(list1, list2): Returns the sorted list of unique integers that are present in both input lists. # Convert lists to sets to remove duplicates and find the intersection set1, set2 = set(list1), set(list2) intersection = set1.intersection(set2) # Convert the set back to a sorted list return sorted(intersection)"},{"question":"Create a function that can take in a string input and return the number of words in the string. The function should ignore any leading or trailing spaces and should consider words as sequences of characters separated by spaces. If the input string is empty or contains only spaces, the function should return 0.","solution":"def count_words(s): Returns the number of words in the input string. Ignores leading and trailing spaces. Words are sequences of characters separated by spaces. If the input string is empty or contains only spaces, returns 0. if not s.strip(): return 0 return len(s.strip().split())"},{"question":"Create a function that generates a list of all Fibonacci numbers less than a given number n.","solution":"def fibonacci_less_than(n): Generates a list of all Fibonacci numbers less than a given number n. Parameters: n (int): The upper limit for the Fibonacci numbers. Returns: List[int]: A list of all Fibonacci numbers less than n. if n <= 0: return [] fibs = [0, 1] while True: next_fib = fibs[-1] + fibs[-2] if next_fib >= n: break fibs.append(next_fib) return fibs[:-1] if n <= 1 else fibs"},{"question":"Create a function that takes a list of integers and returns the list sorted in non-decreasing order. The function should also handle empty lists and lists with a single element correctly. Additionally, ensure the function is efficient in terms of time complexity.","solution":"def sort_integers(lst): Returns the list of integers sorted in non-decreasing order. Handles empty lists and lists with a single element. return sorted(lst)"},{"question":"Create a function that takes an array of integers as input and returns the index of the maximum value in the array. If there are multiple occurrences of the maximum value, return the index of the first occurrence.","solution":"def index_of_max_value(arr): Returns the index of the maximum value in the array. If there are multiple occurrences of the maximum value, return the index of the first occurrence. :param arr: List of integers :return: Integer index of the maximum value if not arr: raise ValueError(\\"Input array should not be empty\\") max_index = 0 max_value = arr[0] for i in range(1, len(arr)): if arr[i] > max_value: max_value = arr[i] max_index = i return max_index"},{"question":"Create a function that takes a string as input and returns a list of all possible distinct substrings of the string in reverse order.","solution":"def distinct_substrings_reverse(s): Returns a list of all possible distinct substrings of the input string in reverse order. substrings = set() length = len(s) for i in range(length): for j in range(i + 1, length + 1): substrings.add(s[i:j]) return sorted(list(substrings), reverse=True)"},{"question":"Create a function that takes an integer as an input and returns a string representation of a binary number. For example, if the input integer is 5, the output should be \\"101\\". Make sure the function handles negative integers as well.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. Parameters: n (int): The input integer. Returns: str: The binary representation of the input integer. if n == 0: return \\"0\\" elif n > 0: return bin(n)[2:] else: return \\"-\\" + bin(n)[3:]"},{"question":"Create a function that takes an integer \`n\` as input and returns the maximum value that can be obtained by mutliplying each digit of \`n\` by its position in the number (from left to right), and then summing up these values. Position starts from 1. For example, if \`n = 123\`, the function should return \`1*1 + 2*2 + 3*3 = 14\`.","solution":"def max_digit_pos_sum(n): Takes an integer n and returns the maximum value that can be obtained by multiplying each digit of n by its position and summing up these values. Position starts from 1. n_str = str(n) total_sum = 0 for idx, digit in enumerate(n_str): total_sum += (idx + 1) * int(digit) return total_sum"},{"question":"Create a function that takes a number as an argument and returns whether the number is odd or even.","solution":"def is_odd_or_even(number): Returns 'odd' if the number is odd, and 'even' if the number is even. if number % 2 == 0: return 'even' else: return 'odd'"},{"question":"Create a function that takes in a string as a parameter and returns a tuple containing the most common character and its frequency count. If there are multiple characters with the same maximum frequency, return only one of them. If the input string is empty, return a tuple with both elements as \`None\`.","solution":"def most_common_character(s): Returns a tuple containing the most common character in the string and its frequency count. If there are multiple characters with the same maximum frequency, returns only one of them. If the input string is empty, returns (None, None). if not s: return None, None from collections import Counter counter = Counter(s) most_common = counter.most_common(1)[0] return most_common"},{"question":"Create a function that takes two arrays as input and returns a new array containing common elements of the two arrays. The function should also identify common elements that occur more than once and count the number of times each occurs. Use Python.","solution":"from collections import Counter def common_elements(arr1, arr2): Returns a list of common elements between two arrays along with their counts in both arrays. # Create counters for both arrays counter1 = Counter(arr1) counter2 = Counter(arr2) # Find common elements common = counter1 & counter2 # Create result list with elements appearing the common number of times result = [] for element, count in common.items(): result.extend([element] * count) return result"},{"question":"Create a function that takes a string as input and returns the most common character in the string. If there are multiple characters with the same maximum frequency, return the character that appears first in the string.","solution":"def most_common_char(s): Returns the most common character in the input string s. In case of a tie, returns the character that appears first in the string. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Initialize variables to track the most common character and its count most_common = None max_count = 0 # Iterate through the string in order to maintain the first appearance condition for char in s: if char_count[char] > max_count: most_common = char max_count = char_count[char] return most_common"},{"question":"Create a function that reads in a string, reverses it, and returns the reversed string.","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Create a function that , given a string and an integer num, return the string with the first num characters reversed and the rest of the string unchanged.","solution":"def reverse_first_n_chars(s, num): Returns the string with the first num characters reversed and the rest unchanged. Parameters: s (str): The string to be manipulated. num (int): The number of characters to reverse from the beginning. Returns: str: The manipulated string with the first num characters reversed. # Handle the edge case where num is greater than the length of the string if num > len(s): num = len(s) return s[:num][::-1] + s[num:]"},{"question":"Create a function that takes an array of integers, finds the two numbers that add up to a specific target, and returns their indices. The indices should be returned as an array where the first element is the smaller index and the second is the larger index. If no two numbers add up to the target, return an empty array. Assume that each input will have exactly one solution, and you cannot use the same element twice.","solution":"def two_sum(nums, target): Finds two numbers in the list that add up to the target and returns their indices. Parameters: nums (list of int): The list of integers. target (int): The target sum to find within the list. Returns: list of int: The indices of the two numbers that add up to the target. index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return sorted([index_map[complement], i]) index_map[num] = i return []"},{"question":"Create a function that takes an integer n and returns a string representation of the nth Fibonacci number in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. The function should use recursion for this calculation.","solution":"def fibonacci(n): Returns the nth Fibonacci number as a string. if n < 0: raise ValueError(\\"Negative arguments are not allowed.\\") if n == 0: return \\"0\\" elif n == 1: return \\"1\\" else: return str(int(fibonacci(n - 1)) + int(fibonacci(n - 2)))"},{"question":"Create a function that takes in a list of integers and returns the sum of all numbers greater than 10. Use Python.","solution":"def sum_greater_than_10(numbers): Returns the sum of all numbers in the list that are greater than 10. :param numbers: List of integers :return: Sum of integers greater than 10 return sum(num for num in numbers if num > 10)"},{"question":"Create a function that takes a list of integers and another integer as parameters. The function should return the list with the integer appended to the end of the list. If the list is empty, the function should return a new list containing only the integer.","solution":"def append_to_list(lst, num): Appends an integer to the end of a list. If the list is empty, returns a new list containing only the integer. Args: lst (list of int): The list to which the integer will be appended. num (int): The integer to append to the list. Returns: list of int: The list with the integer appended to the end. lst.append(num) return lst"},{"question":"Create a function that will take two arrays and return a new array that represents the intersection of the two arrays.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays. return list(set(arr1) & set(arr2))"},{"question":"Create a function that takes an integer n as input and returns the maximum value of the expression x^y^z where x, y, and z are integers whose sum is n. How should I approach this problem?","solution":"import math def max_expression_value(n): Returns the maximum value of the expression x^(y^z) where x, y, and z are integers whose sum is n. if n < 3: raise ValueError(\\"Value of n must be at least 3\\") max_val = -math.inf for x in range(1, n): for y in range(1, n - x): z = n - x - y if z > 0: # calculate x^(y^z) try: val = x ** (y ** z) except OverflowError: val = float('inf') if val > max_val: max_val = val return max_val"},{"question":"Create a function that takes in two lists of strings and returns a list of common strings between the two, preserving the order they appear in the first list.","solution":"def common_strings(list1, list2): Returns a list of common strings between list1 and list2, preserving the order they appear in list1. return [item for item in list1 if item in list2]"},{"question":"Create a function that calculates the total cost of items in a shopping cart. Each item in the cart is represented as a dictionary with 'name', 'price', and 'quantity' keys. You should use list comprehension and the \`sum\` function to calculate the total cost.","solution":"def total_cost(cart): Calculate the total cost of items in a shopping cart. :param cart: List of dictionaries, each containing 'name', 'price', and 'quantity' keys :return: Total cost of all items return sum(item['price'] * item['quantity'] for item in cart)"},{"question":"Create a function that takes an integer x and returns the projection of x. This function should only use bitwise operators. The projection of a number is defined as the number with all bits set to the right of the most significant set bit to 0.","solution":"def projection(x): Returns the projection of x by keeping only the most significant set bit. if x == 0: return 0 # Make all bits lower than the most significant bit 1 x |= (x >> 1) x |= (x >> 2) x |= (x >> 4) x |= (x >> 8) x |= (x >> 16) # Isolate the most significant bit x = x + 1 return x >> 1"},{"question":"Create a function that takes a list of numbers as input and returns a list containing the squares of those numbers. The function should support handling both positive and negative numbers.","solution":"def square_elements(numbers): Returns a list containing the squares of the input list of numbers. return [x**2 for x in numbers]"},{"question":"Create a function that takes a list of integers as input, where each integer represents a unique number from 1 to n. The function should return the maximum sum of a contiguous subarray of numbers within the given list. Use Kadane's algorithm for efficiency.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes in two parameters, an array of integers and a target number, and returns the indices of the first two numbers from the array that add up to the target number.","solution":"def two_sum(nums, target): Returns the indices of the first two numbers in the array that add up to the target. num_map = {} # To store the difference and index of each number for index, num in enumerate(nums): difference = target - num if difference in num_map: return [num_map[difference], index] num_map[num] = index return []"},{"question":"Create a function that takes a dictionary as a parameter and returns a new dictionary where the keys are the values from the original dictionary, and the values are the keys from the original dictionary.","solution":"def invert_dictionary(original): Inverts the given dictionary such that the keys become values and the values become keys. Parameters: original (dict): The original dictionary to be inverted. Returns: dict: The inverted dictionary. return {v: k for k, v in original.items()}"},{"question":"Create a function that reverses a string in Python. Can you provide a Python function that achieves this?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of all the divisors of \`n\` including 1 and \`n\` itself, but only the divisors that are even.","solution":"def even_divisors(n): Takes an integer n and returns a list of all the even divisors of n, including 1 and n itself if they are even. return [i for i in range(1, n+1) if n % i == 0 and i % 2 == 0]"},{"question":"Create a function that takes an integer as input and returns a list of its prime factors, from the smallest to the largest. If a prime number appears more than once, it should be included in the list as many times as it divides the number.","solution":"def prime_factors(n): Returns a list of prime factors of the given integer n. factors = [] div = 2 while n > 1: while n % div == 0: factors.append(div) n //= div div += 1 return factors"},{"question":"Create a function that accepts two arguments, a list and an element, and returns the index of the element in the list. If the element is not found, return -1.","solution":"def find_index(lst, element): Returns the index of the element in the list. If the element is not found, returns -1. try: return lst.index(element) except ValueError: return -1"},{"question":"Create a function that takes a list of integers and returns a list of the squared values of those integers.","solution":"def square_list(int_list): Takes a list of integers and returns a list of the squared values of those integers. Parameters: int_list (List[int]): A list of integers. Returns: List[int]: A list of squared integers. return [x**2 for x in int_list]"},{"question":"Create a function that takes two parameters, a list of integers, and a target sum, and returns the indices of the two numbers such that they add up to the target sum. If no two numbers add up to the target sum, return \`None\`.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in nums that add up to target. If no such numbers exist, returns None. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"Create a function that takes an integer (n) as an argument and returns a list of length (n) where each element at index (i) contains a string of binary representations starting from '0' to '2^n-1'. The binary strings should be zero-padded to ensure they all have the same number of digits.","solution":"def generate_binary_list(n): Generates a list of binary representations from '0' to '2^n - 1', zero-padded to ensure each binary string has the same number of digits. Parameters: n (int): The length of the binary list and the number of bits for binary representation. Returns: list: A list of binary strings. return [format(i, f'0{n}b') for i in range(2 ** n)]"},{"question":"Create a function that will convert a given number into its binary equivalent and return it as a string.","solution":"def to_binary(n): Converts a given number into its binary equivalent. Args: n: int, the number to convert to binary Returns: str: the binary equivalent of the number as a string if n == 0: return \\"0\\" else: return bin(n)[2:]"},{"question":"Create a function that prints the digits of a given number when read from the rightmost digit to the leftmost digit.","solution":"def print_digits_reverse(number): Prints the digits of the given number from rightmost to leftmost. digits = str(number) for digit in reversed(digits): print(digit)"},{"question":"Create a function that takes an integer as input and returns its square root.","solution":"import math def square_root(x): Returns the square root of the input integer x. Raises ValueError if x is negative. if x < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") return math.sqrt(x)"},{"question":"Create a function that is passed a list of numbers. The function will print the sum and average.","solution":"def print_sum_and_average(numbers): Prints the sum and average of a list of numbers. :param numbers: list of numeric values if not numbers: print(\\"Sum: 0\\") print(\\"Average: 0\\") return total_sum = sum(numbers) average = total_sum / len(numbers) print(f\\"Sum: {total_sum}\\") print(f\\"Average: {average}\\")"},{"question":"Create a function that calculates the total number of times a specific number occurs within a nested list structure in Python. The function should handle nested lists and int values. The function should be able to work with any depth of nesting.","solution":"def count_occurrences(nested_list, target): Counts the total number of times \`target\` occurs within the nested_list. This function works with any depth of nesting. :param nested_list: List[List[...]], A nested list structure. :param target: int, The target number to count occurrences of. :return: int, The count of occurrences of \`target\` in the nested structures. if isinstance(nested_list, int): return 1 if nested_list == target else 0 count = 0 for element in nested_list: if isinstance(element, list): count += count_occurrences(element, target) elif element == target: count += 1 return count"},{"question":"Create a function that takes an array of integers and returns the maximum and minimum values in the array. The function should efficiently find both values using a single pass through the array.","solution":"def find_max_min(arr): Returns a tuple with the maximum and minimum values in the array. :param arr: List of integers :return: Tuple (max_value, min_value) if not arr: raise ValueError(\\"Array must not be empty\\") max_value = min_value = arr[0] for num in arr[1:]: if num > max_value: max_value = num elif num < min_value: min_value = num return (max_value, min_value)"},{"question":"Create a function that takes in a list of integers and returns the longest increasing subsequence (LIS) within the list. The LIS is the longest sequence of numbers in which each number is greater than the preceding one.","solution":"def longest_increasing_subsequence(nums): Returns the longest increasing subsequence in list nums. :param nums: List of integers. :return: List of integers representing the longest increasing subsequence. if not nums: return [] # initialize the list to hold the longest increasing subsequence length at each index lis = [1] * len(nums) # backtracking array to help construct the LIS prev_index = [-1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev_index[i] = j # find the index of the maximum value in lis max_len = max(lis) max_index = lis.index(max_len) # reconstruct the LIS by backtracking result = [] while max_index != -1: result.append(nums[max_index]) max_index = prev_index[max_index] return result[::-1]"},{"question":"Create a function that selects a random word from the given text string array.","solution":"import random def select_random_word(text_array): Selects a random word from the given text string array. Args: text_array (list of str): List of strings (words). Returns: str: A randomly selected word from the text array. if not text_array: return None return random.choice(text_array)"},{"question":"Create a function that takes an integer parameter and returns the sum of all odd numbers between 1 and the input integer (inclusive), excluding even numbers. If the input integer is less than 1, the function should return 0. Additionally, if the input integer is an even number, only even numbers up to that integer should be summed.","solution":"def sum_odd_numbers(n): Returns the sum of odd numbers between 1 and n (inclusive). If n is less than 1, returns 0. if n < 1: return 0 return sum(i for i in range(1, n + 1) if i % 2 != 0)"},{"question":"Create a function that reads input from the user, reverses it, and then prints it out.","solution":"def reverse_input(): Reads a string input from the user, reverses it, and prints out the reversed string. user_input = input(\\"Enter a string: \\") reversed_input = user_input[::-1] print(reversed_input) return reversed_input"},{"question":"Create a function that returns the first word of a passed sentence.","solution":"def first_word(sentence): Returns the first word of the given sentence. words = sentence.split() return words[0] if words else ''"},{"question":"Create a function that returns the average of all numbers in an array, excluding the highest and lowest values. If the array has 3 or fewer elements, the function should return 0.","solution":"def average_excluding_extremes(arr): Returns the average of all numbers in the array excluding the highest and lowest values. If the array has 3 or fewer elements, returns 0. :param arr: list of numbers :return: float or int if len(arr) <= 3: return 0 sorted_arr = sorted(arr) return sum(sorted_arr[1:-1]) / (len(sorted_arr) - 2)"},{"question":"Create a function that finds the longest palindrome in a string. If there are multiple palindromes of the same length, return the first one.","solution":"def longest_palindrome(s): Finds the longest palindrome in a string. If there are multiple palindromes of the same length, returns the first one. n = len(s) if n == 0: return \\"\\" def expand_around_center(s, left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(n): # Check for odd length palindromes palindrome_odd = expand_around_center(s, i, i) if len(palindrome_odd) > len(longest): longest = palindrome_odd # Check for even length palindromes if i < n - 1: palindrome_even = expand_around_center(s, i, i + 1) if len(palindrome_even) > len(longest): longest = palindrome_even return longest"},{"question":"Create a function that takes a list of numbers and returns a new list containing the squares of the original numbers, but only if the number is greater than 5. If the number is greater than 5, add 3 before squaring it; otherwise, just square the number.","solution":"def process_and_square(numbers): Takes a list of numbers and returns a new list containing the squares of the original numbers, but only if the number is greater than 5. If the number is greater than 5, add 3 before squaring it; otherwise, just square the number. result = [] for number in numbers: if number > 5: result.append((number + 3) ** 2) else: result.append(number ** 2) return result"},{"question":"Create a function that takes an array \`a\` and an integer \`n\`, and returns the \`n\`th smallest element in the array. Assume that the array contains \`n\` distinct integers. For example, \`findNthSmallest([1, 7, 3, 4, 5], 2)\` should return \`4\`.","solution":"def findNthSmallest(a, n): Returns the nth smallest element in the array a. Assumes that the array contains n distinct integers. if n <= 0 or n > len(a): raise ValueError(\\"n should be between 1 and the length of the list\\") return sorted(a)[n - 1]"},{"question":"Create a function that takes an input list of integers and returns a dictionary that groups the integers by their parity (even or odd). For example, for the input \`[1, 2, 3, 4, 5, 6]\`, the function should return \`{1: True, 2: False, 3: True, 4: False, 5: True, 6: False}\`. Here, \`True\` represents that the number is odd, and \`False\` represents that the number is even.","solution":"def group_by_parity(nums): Returns a dictionary that groups the integers by their parity (odd or even). Args: nums: A list of integers. Returns: dict: A dictionary where keys are the integers from the input list and values are True if the integer is odd, and False if the integer is even. return {num: num % 2 != 0 for num in nums}"},{"question":"Create a function that finds the average of all elements in a list. The list can contain both integers and floats. The function should return the average as a float. If the list is empty, the function should return None.","solution":"def average(lst): Returns the average of all elements in the list lst. If the list is empty, returns None. if not lst: return None return sum(lst) / len(lst)"},{"question":"Create a function that converts a string to an integer without using the built-in int() function in Python. You should handle both positive and negative integers.","solution":"def string_to_int(s): Converts a string to an integer without using the built-in int() function. This function handles both positive and negative integers. if not s: raise ValueError(\\"Input string is empty\\") num = 0 n = len(s) sign = 1 start_index = 0 if s[0] == '-': sign = -1 start_index = 1 elif s[0] == '+': start_index = 1 for i in range(start_index, n): if s[i] < '0' or s[i] > '9': raise ValueError(\\"Input string contains non-numeric characters\\") num = num * 10 + (ord(s[i]) - ord('0')) return sign * num"},{"question":"Create a function that takes in three arguments: a string, a starting index, and an ending index. The function should return the substring of the input string from the starting index up to, but not including, the ending index. If either the starting or ending index is out of the bounds of the string, the function should handle these cases gracefully.","solution":"def safe_substring(string, start, end): Returns the substring of the input string from the starting index up to, but not including, the ending index. Handles out of bounds cases gracefully. if start < 0: start = 0 if end > len(string): end = len(string) if start > end: return \\"\\" return string[start:end]"},{"question":"Create a function that converts a given decimal number to a binary number using an iterative approach. The function needs to handle both positive and negative integers as well as zero. Assume that the output binary number is represented as a string containing '0's and '1's.","solution":"def decimal_to_binary(n): Converts a given decimal number to a binary number (string representation). Handles positive, negative integers and zero. if n == 0: return \\"0\\" result = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: result = str(n % 2) + result n = n // 2 if is_negative: result = \\"-\\" + result return result"},{"question":"Create a function that generates a Fibonacci sequence with a given length. The function should take an integer \`n\` as the input and return an array containing the first \`n\` numbers in the Fibonacci sequence.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence of length n. Parameters: n (int): Length of the Fibonacci sequence to generate. Returns: list: Fibonacci sequence of length n. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that determines whether an input string is a palindrome. A palindrome is a string that reads the same forward and backward, such as \\"madam\\" or \\"level\\".","solution":"def is_palindrome(s): Determines whether the input string s is a palindrome. :param s: input string to check :return: True if s is a palindrome, False otherwise # Remove any non-alphanumeric characters and convert to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes a list of integers as an input and returns a list of lists where each sublist contains all the even numbers from the input list.","solution":"def get_even_sublists(input_list): Returns a list of lists where each sublist contains all the even numbers from the input list. Args: input_list (list): A list of integers. Returns: list: A list of lists with even numbers. even_sublists = [[]] for num in input_list: if num % 2 == 0: even_sublists[0].append(num) return even_sublists"},{"question":"Create a function that takes a list of integers, and returns a new list where each integer is repeated four times.","solution":"def repeat_four_times(int_list): Takes a list of integers and returns a new list where each integer is repeated four times. Args: int_list (list): List of integers. Returns: list: New list where each integer is repeated four times. return [item for item in int_list for _ in range(4)]"},{"question":"Create a function that calculates the sum of the squares of the first 'n' natural numbers and then subtracts the sum of the squares of the first 'm' natural numbers from it. The function should be efficient and utilize mathematical formulas to achieve this.","solution":"def sum_of_squares_difference(n, m): Calculates the sum of the squares of the first 'n' natural numbers and subtracts the sum of the squares of the first 'm' natural numbers from it. Utilizes the formula for the sum of squares of the first k natural numbers: k*(k+1)*(2k+1)/6. def sum_of_squares(k): return k * (k + 1) * (2 * k + 1) // 6 sum_squares_n = sum_of_squares(n) sum_squares_m = sum_of_squares(m) return sum_squares_n - sum_squares_m"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the product of the corresponding elements in the input array. However, if an element in the input array is 0, the corresponding element in the new array should be -1. If there is at least one 0 in the input array, the entire output array should be filled with -1. If the input array is empty, the function should return an empty array.","solution":"def transform_array(arr): Transforms the input array such that each element is the product of the corresponding elements in the input array. If an element in the input array is 0, the corresponding element in the new array will be -1. If there is at least one 0 in the input array, the entire output array should be filled with -1. If the input array is empty, the function should return an empty array. if not arr: # Return empty array if input is empty return [] if 0 in arr: # Return array filled with -1 if at least one 0 is present return [-1] * len(arr) # Otherwise, return the same array (concept assumes we're working # element-wise, and if no zeros, then return array as is). return arr"},{"question":"Create a function that , given an array of positive integers, calculates and returns the second smallest unique number in the array. If the array does not contain at least two unique numbers, the function should return \`None\`.","solution":"def second_smallest_unique(nums): Returns the second smallest unique number in the array. If there are less than two unique numbers, returns None. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort() return unique_nums[1]"},{"question":"Create a function that takes a string of comma-separated numbers and returns the sum and average of these numbers as a tuple. Write Python code for this function.","solution":"def sum_and_average(numbers): Takes a string of comma-separated numbers and returns a tuple containing the sum and the average of these numbers. Args: numbers (str): A string of comma-separated numbers. Returns: tuple: A tuple containing the sum and the average of the numbers. num_list = [float(num) for num in numbers.split(',')] total_sum = sum(num_list) avg = total_sum / len(num_list) return total_sum, avg"},{"question":"Create a function that generates a list of the first n prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def generate_primes(n): Generate a list of the first n prime numbers. :param n: Number of prime numbers to generate :return: List of the first n prime numbers if n <= 0: return [] primes = [] num = 2 # The first prime number while len(primes) < n: is_prime = True for divisor in range(2, int(num**0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes"},{"question":"Create a function that takes two integers as input and returns the maximum value between them. If the values are equal, return either value.","solution":"def max_value(a, b): Returns the maximum value between a and b. If values are equal, returns either value. return a if a > b else b"},{"question":"Create a function that generated a random even number between 10 and 20.","solution":"import random def generate_random_even_number(): Generates a random even number between 10 and 20. return random.choice([10, 12, 14, 16, 18, 20])"},{"question":"Create a function that takes two parameters, a string and an integer, and returns the substring from the given string starting from the given integer position and having the length of the given integer.","solution":"def get_substring(s, start, length): Returns the substring from the given string starting from the given start position and having the length of the given length. Parameters: s (str): The input string. start (int): The starting position of the substring. length (int): The length of the substring. Returns: str: The resulting substring. return s[start:start+length]"},{"question":"Create a function that takes two integers, m and n, as input and returns the product of the digits of m when added to n. For example, if m=123 and n=45, the product of the digits of 123 is 6 (1*2*3), and the function should return 6 + 45 = 51.","solution":"def product_of_digits(m, n): Returns the sum of the product of the digits of m and n. product = 1 for digit in str(m): product *= int(digit) return product + n"},{"question":"Create a function that generates the shortest palindrome by appending characters to a given non-empty string. The function should return the shortest palindrome that can be created from the input string without changing its order.","solution":"def shortest_palindrome(s): This function takes a non-empty string and returns the shortest palindrome that can be created by appending characters to the original string without changing its order. for i in range(len(s)): if s[:len(s)-i] == s[:len(s)-i][::-1]: return s[len(s)-i:][::-1] + s return \\"\\""},{"question":"Create a function that takes two lists as arguments and returns a new list containing the union of the two input lists without duplicates.","solution":"def union_lists(list1, list2): Returns the union of two lists without duplicates. return list(set(list1 + list2))"},{"question":"Create a function that takes a string as input and returns a new string with all the letters in uppercase.","solution":"def to_uppercase(s): Returns the input string with all letters in uppercase. return s.upper()"},{"question":"Create a function that takes an integer as its input and returns a list of the integer's factors. The factors are all numbers less than or equal to the number itself that divide the number evenly, with no remainder. You should consider 1 and the number itself to be valid factors.","solution":"def find_factors(n): Returns a list of all factors of n. Factors are defined as numbers less than or equal to n which divide n evenly. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") return [i for i in range(1, n + 1) if n % i == 0]"},{"question":"Create a function that splits a string into a list of words, sorts them alphabetically and removes duplicates. How would this function work?","solution":"def split_sort_unique(s): Splits the string \`s\` into a list of words, sorts them alphabetically, and removes duplicates. words = s.split() unique_words = sorted(set(words)) return unique_words"},{"question":"Create a function that takes a string as input and returns a string where each word is reversed. However, the order of the words should remain the same as in the original string. For example, if the input string is \\"Hello World\\", the output should be \\"olleH dlroW\\".","solution":"def reverse_words_in_string(s): Reverses each word in the input string while maintaining the original order of the words. Parameters: s (str): Input string containing words separated by spaces. Returns: str: A string where each word is reversed but the order of the words remains the same. return ' '.join(word[::-1] for word in s.split())"},{"question":"Create a function that takes two parameters, a string and an integer, and returns a new string that is a repetition of the original string the specified number of times. If the integer is less than 1, the function should return an empty string.","solution":"def repeat_string(s, n): Repeats the given string s, n times. If n is less than 1, returns an empty string. if n < 1: return \\"\\" return s * n"},{"question":"Create a function that converts a given string to a snake_case string.","solution":"def to_snake_case(s): Converts a given camelCase or PascalCase string to snake_case. Parameters: s (str): Input string in camelCase or PascalCase. Returns: str: Converted string in snake_case. import re # Insert underscore before each capital letter and convert to lowercase s = re.sub(r'(?<!^)(?=[A-Z])', '_', s).lower() return s"},{"question":"Create a function that accepts an integer as a parameter and returns the same integer divided by 2. If the division results in a non-integer, append \\".5\\" to the integer part of the result and return it as a string. If the input integer is negative, return the absolute value of the integer divided by 2, appended with \\".5\\" and as a string.","solution":"def divide_and_format(n): Returns n divided by 2. If n is negative, the absolute value of n is used. If the result is not an integer, \\".5\\" is appended to the integer part of the result and returned as a string. Parameters: n (int): The integer to be divided. Returns: int or str: The result of the division as an integer, or as a formatted string if the result is not an integer. abs_n = abs(n) quotient = abs_n // 2 remainder = abs_n % 2 if remainder == 0: return quotient else: return f\\"{quotient}.5\\""},{"question":"Create a function that takes in a Dictionary (in Python) as an input and returns a sorted list of keys in the dictionary based on their corresponding values in descending order. If two keys have the same value, then the key that comes first lexicographically (in dictionary order) should appear first in the result.","solution":"def sort_dict_by_values(d): Sorts dictionary keys based on their values in descending order. If two keys have the same value, the key that comes first lexicographically (in dictionary order) appears first in the result. Args: d (dict): Input dictionary Returns: list: Sorted list of keys return sorted(d.keys(), key=lambda x: (-d[x], x))"},{"question":"Create a function that converts a JSON string to a dictionary and then, filter this dictionary based on a list of specific keys.","solution":"import json def json_filter(json_string, keys): Converts a JSON string to a dictionary, then filters this dictionary based on a list of specific keys. Parameters: - json_string (str): JSON string to be converted and filtered. - keys (list): List of keys to filter the dictionary. Returns: dict: Filtered dictionary containing only the specified keys. # Convert JSON string to dictionary data_dict = json.loads(json_string) # Filter dictionary based on the provided keys filtered_dict = {key: data_dict.get(key) for key in keys} return filtered_dict"},{"question":"Create a function that constructs a sentence from a given list of words.","solution":"def construct_sentence(words): Constructs a sentence from a given list of words. Parameters: words (list of str): List of words to form a sentence. Returns: str: A sentence created by joining the words with a single space between them and a period at the end. if not words: return \\"\\" sentence = ' '.join(words) + '.' return sentence"},{"question":"Create a function that returns an array of the same length where each value is the sum of all the values in the input array except for the value at the same index.","solution":"def sum_except_self(nums): Returns an array where each value at index 'i' is the sum of all elements in the input array except for the element at index 'i'. Args: nums (List[int]): The input array of integers. Returns: List[int]: The resultant array. total_sum = sum(nums) return [total_sum - num for num in nums]"},{"question":"Create a function that will sort a list of numbers in descending order.","solution":"def sort_descending(arr): Sorts the list of numbers in descending order. Parameters: arr (list): The list of numbers to sort. Returns: list: The sorted list in descending order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes in two arrays, one that has three numbers for each element, and another that has the corresponding weight for each element in the first array. The function should return a weighted sum of all the elements based on the corresponding weights. The sum should be calculated by multiplying each number in the first array with its corresponding weight and then adding all these products together.","solution":"def weighted_sum(numbers, weights): This function takes an array of numbers and an array of weights, and returns the weighted sum. :param numbers: A list of lists with three numbers for each element. E.g., [[1, 2, 3], [4, 5, 6]] :param weights: A list of weights corresponding to each list in the numbers array. E.g., [0.5, 0.75] :return: A single number representing the weighted sum. if len(numbers) != len(weights): raise ValueError(\\"The numbers and weights arrays must have the same length.\\") total = 0 for i in range(len(numbers)): if len(numbers[i]) != 3: raise ValueError(\\"Each element in the numbers array must be a list of exactly three numbers.\\") weight = weights[i] weighted_sum_part = sum(x * weight for x in numbers[i]) total += weighted_sum_part return total"},{"question":"Create a function that generates the shortest sequence of bytes that can represent a binary number with exactly \`n\` bits.","solution":"def generate_bytes(n): Generates the shortest sequence of bytes that can represent a binary number with exactly n bits. Args: n (int): Number of bits. Returns: bytearray: The shortest sequence of bytes where at least n bits can be represented. if n <= 0: return bytearray() # No bits needed, so return an empty bytearray num_bytes = (n + 7) // 8 # Compute the number of bytes needed using integer division and ceiling return bytearray(num_bytes)"},{"question":"Create a function that checks if the input is an integer or a string. If the input is an integer, multiply it by 2. If the input is a string, check if it can be converted to an integer and multiply by 2 if it can. If the string cannot be converted to an integer, return \\"Invalid input\\". If the input is neither an integer nor a string, return \\"Input not recognized\\".","solution":"def process_input(input_value): Checks if the input is an integer or a string. If the input is an integer, multiply it by 2. If the input is a string, checks if it can be converted to an integer and multiply by 2 if it can. If the string cannot be converted to an integer, return \\"Invalid input\\". If the input is neither an integer nor a string, return \\"Input not recognized\\". if isinstance(input_value, int): return input_value * 2 elif isinstance(input_value, str): try: value = int(input_value) return value * 2 except ValueError: return \\"Invalid input\\" else: return \\"Input not recognized\\""},{"question":"Create a function that takes an integer n and returns the n-th Fibonacci number. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, 0, 1, 1, 2, 3, 5, 8, 13, ... and so on.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that accepts a list of positive integers, and returns the second largest number in the list. If there is no second largest number, return None.","solution":"def second_largest(numbers): Returns the second largest number in the list of positive integers. If there is no second largest number, returns None. if len(numbers) < 2: return None first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Create a function that finds the middle elements of an array. If the array has an odd length, return the middle element. If the array has an even length, return the two middle elements as an array.","solution":"def middle_elements(arr): Returns the middle element(s) of an array. If the array has an odd length, returns the middle element. If the array has an even length, returns an array of the two middle elements. n = len(arr) if n == 0: return [] # If the array is empty, return an empty list if n % 2 == 1: return arr[n // 2] else: return [arr[(n // 2) - 1], arr[n // 2]]"},{"question":"Create a function that takes an array of integers as input and returns the maximum and minimum values that are greater than 0 and less than a specified positive integer n, specifically excluding the integer n itself.","solution":"def get_max_min_excluding_n(arr, n): Returns the maximum and minimum values in array \`arr\` that are greater than 0 and less than \`n\`, excluding the value \`n\` itself. filtered = [x for x in arr if 0 < x < n] if not filtered: return None, None return max(filtered), min(filtered)"},{"question":"Create a function that takes an array of positive integers and returns a sorted array containing the squares of each number.","solution":"def sorted_squares(arr): Takes an array of positive integers and returns a sorted array containing the squares of each number. return sorted(x * x for x in arr)"},{"question":"Create a function that takes three parameters - a string, a number n, and a character. The function should return a new string where the given string is repeated n times and the character is placed between each repetition.","solution":"def repeat_string_with_char(s, n, c): Returns a new string where the given string s is repeated n times and the character c is placed between each repetition. :param s: The string to be repeated :param n: The number of repetitions :param c: The character to place between repetitions :return: A new string with the formatted repetitions if n <= 0: return \\"\\" return (s + c) * (n - 1) + s"},{"question":"Create a function that reads from a file and counts the occurrences of a specific word in the file. The function should return the count.","solution":"def count_word_occurrences(file_path, word): Counts the occurrences of a specific word in a file. Args: file_path (str): The path to the file. word (str): The word to count in the file. Returns: int: The count of occurrences of the word in the file. count = 0 with open(file_path, 'r') as file: for line in file: words = line.split() count += words.count(word) return count"},{"question":"Create a function that can convert a string to an integer. How can this be done in Python?","solution":"def string_to_integer(s): Converts a string to an integer. Parameters: s (str): The string to convert to an integer. Returns: int: The integer representation of the string. try: return int(s) except ValueError: raise ValueError(f\\"Cannot convert {s} to integer\\")"},{"question":"Create a function that takes a list of tuples as input and returns the sum of all numbers in the tuples. The function should handle lists with multiple nested tuples and treat each number as they were all in a flat list.","solution":"def sum_of_tuples(nested_tuples): Takes a list of tuples (with possible nested tuples) and returns the sum of all the numbers in the tuples. total = 0 def flatten_and_sum(something): nonlocal total if isinstance(something, (int, float)): # Check if it's a number total += something elif isinstance(something, (list, tuple)): # If it's a list or tuple for item in something: flatten_and_sum(item) flatten_and_sum(nested_tuples) return total"},{"question":"Create a function that takes a string of DNA (composed of 'A', 'T', 'C', and 'G') and returns a string that is the reverse complement of the input DNA string. The reverse complement of a DNA strand is formed by reversing the sequence and changing all 'A's to 'T's, 'T's to 'A's, 'C's to 'G's, and 'G's to 'C's.","solution":"def reverse_complement(dna): Returns the reverse complement of a DNA string. complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'} reversed_dna = dna[::-1] return ''.join(complement[base] for base in reversed_dna)"},{"question":"Create a function that takes a string as input and returns a string with all the vowels removed. The function should ignore case sensitivity and only remove vowels ('a', 'e', 'i', 'o', 'u').","solution":"def remove_vowels(input_string): Removes all vowels from the input string, ignoring case sensitivity. :param input_string: str, the string from which vowels will be removed :return: str, the input string without vowels vowels = 'aeiouAEIOU' return ''.join([char for char in input_string if char not in vowels])"},{"question":"Create a function that takes an array of integers as a parameter and returns the second largest number in the array. If the array contains fewer than two unique numbers, return \`null\`. Ensure your solution is efficient and suitable for large arrays.","solution":"def second_largest(nums): Returns the second largest number in the array or null if there are fewer than two unique numbers. if len(nums) < 2: return None first = second = float('-inf') for num in nums: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that checks whether a number \`n\` is prime or not. The function should be named \`is_prime\`. It should return \`True\` if the number \`n\` is a prime number, otherwise \`False\`. Don't forget to test your function with a few example cases.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that will generate and return an array of even integers from 0 to \`n\` miners, inclusive. If the input \`n\` is less than 0, the function should return an empty array.","solution":"def generate_even_numbers(n): Generates and returns an array of even integers from 0 to n, inclusive. If n is less than 0, returns an empty array. if n < 0: return [] return [i for i in range(0, n+1) if i % 2 == 0]"},{"question":"Create a function that divides two numbers, handling cases where the divisor is zero and returning an appropriate message. If both numbers are integers, the function should return the divisibility result. If the divisor is zero, return a message \\"Cannot divide by zero.\\" If either of the numbers is a float, return the result with two decimal places.","solution":"def divide(a, b): Divides a by b and handles cases where the divisor is zero. If b is zero, it returns \\"Cannot divide by zero.\\" If both numbers are integers, it returns the integer division result. If either number is a float, it returns the division result rounded to two decimal places. Parameters: a (int/float): The dividend b (int/float): The divisor Returns: int/str/float: The result of the division or an error message if division by zero is attempted. if b == 0: return \\"Cannot divide by zero.\\" # Checking if both numbers are integers if isinstance(a, int) and isinstance(b, int): return a // b # Otherwise, perform floating-point division and round to two decimal places return round(a / b, 2)"},{"question":"Create a function that checks if the input string is a palindrome, ignoring case and spaces. For example, \\"A man a plan a canal Panama\\" should return true, while \\"Hello World\\" should return false.","solution":"def is_palindrome(s): Checks if the input string is a palindrome ignoring case and spaces. Args: s (str): Input string. Returns: bool: True if the string is a palindrome, False otherwise. cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that reverses the order of words in a sentence, but keeps the order of characters in the words.","solution":"def reverse_words(sentence): Reverses the order of words in a sentence, but keeps the order of characters in the words. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Create a function that takes an integer n, and returns a new integer that is a rearrangement of the digits of n, such that the new number is the smallest possible integer that can be formed using the digits of n. For example, if n is 310, the function should return 130 (which is the smallest number that can be formed using the digits 3, 1, and 0).","solution":"def smallest_number(n): Returns the smallest possible integer that can be formed using the digits of n. if n == 0: return 0 digits = sorted(str(n)) # If the smallest digit is '0', we need to swap it with the first non-zero digit. if digits[0] == '0': for i in range(1, len(digits)): if digits[i] != '0': digits[0], digits[i] = digits[i], '0' break return int(''.join(digits))"},{"question":"Create a function that takes an array of strings as input and outputs a new array where each string is repeated twice. For example, if the input array is [\\"apple\\", \\"banana\\"], the output should be [\\"appleapple\\", \\"bananabana\\"].","solution":"def repeat_strings_twice(input_list): Takes an array of strings and outputs a new array where each string is repeated twice. :param input_list: List[str] - The array of strings to be modified. :return: List[str] - The new array with each string repeated twice. return [s*2 for s in input_list]"},{"question":"Create a function that takes an array of integers and returns the sum of the absolute differences between each pair of adjacent integers in the array. The function should be named \`sum_adjacent_diffs\` and should work for any size of the array.","solution":"def sum_adjacent_diffs(arr): Returns the sum of the absolute differences between each pair of adjacent integers in the array. Parameters: arr (list of int): List of integers to compute the sum of absolute differences. Returns: int: The sum of absolute differences between each pair of adjacent integers. if len(arr) < 2: return 0 total_diff = 0 for i in range(1, len(arr)): total_diff += abs(arr[i] - arr[i-1]) return total_diff"},{"question":"Create a function that takes a list of integers and returns a tuple containing the sum of all even numbers and the sum of all odd numbers in the list.","solution":"def sum_even_odd(numbers): Returns a tuple containing the sum of all even numbers and the sum of all odd numbers in the list. Parameters: numbers (list): List of integers. Returns: tuple: Two integers representing the sum of even numbers and the sum of odd numbers respectively. even_sum = sum(x for x in numbers if x % 2 == 0) odd_sum = sum(x for x in numbers if x % 2 != 0) return (even_sum, odd_sum)"},{"question":"Create a function that can return the number of unique characters in a string that ignores case sensitivity and ignores non-alphanumeric characters.","solution":"import re def unique_characters(s): Returns the number of unique alphanumeric characters in a string, ignoring case and non-alphanumeric characters. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Use a set to find unique characters unique_chars = set(filtered_chars) return len(unique_chars)"},{"question":"Create a function that checks if a point is inside or outside a non-convex polygon. The input will be a list of tuples representing the vertices of the polygon and a tuple representing the point to check.","solution":"def is_point_in_polygon(vertices, point): Determines if a point is inside or outside a non-convex polygon. vertices: List of tuples representing the vertices of the polygon in (x, y) format. point: A tuple representing the point to check in (x, y) format. Returns True if the point is inside the polygon, otherwise False. x, y = point n = len(vertices) inside = False p1x, p1y = vertices[0] for i in range(n + 1): p2x, p2y = vertices[i % n] if y > min(p1y, p2y): if y <= max(p1y, p2y): if x <= max(p1x, p2x): if p1y != p2y: xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x if p1x == p2x or x <= xinters: inside = not inside p1x, p1y = p2x, p2y return inside"},{"question":"Create a function that takes a list of tuples as an argument and returns a new list containing only the tuples where the second element is a prime number.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_tuples_with_prime_second_element(tuples_list): Takes a list of tuples and returns a new list containing only the tuples where the second element is a prime number. return [tup for tup in tuples_list if is_prime(tup[1])]"},{"question":"Create a function that takes as input a list of tuples, where each tuple contains two elements. The function should return a new list containing the tuples that have the second element as the maximum value among all the tuples.","solution":"def filter_max_value_tuples(lst): Filters out and returns the tuples from the input list that have the second element as the maximum value among all the tuples. Parameters: lst (list of tuples): A list where each tuple contains two elements. Returns: list of tuples: A list containing the tuples with the second element as the maximum value. if not lst: return [] max_value = max(lst, key=lambda x: x[1])[1] return [tup for tup in lst if tup[1] == max_value]"},{"question":"Create a function that checks if a given number can be divided by both 2 and 3 without any remainder. I would like to know how it can be done in Python.","solution":"def is_divisible_by_2_and_3(num): Check if the given number is divisible by both 2 and 3 without any remainder. :param num: The number to check :return: True if divisible by both 2 and 3, otherwise False return num % 2 == 0 and num % 3 == 0"},{"question":"Create a function that takes an array of integers from 1 to n in any order and returns the smallest number of operations required to sort the array in non-decreasing order. An operation is defined as a rotation to the left.","solution":"def min_operations_to_sort(arr): Returns the smallest number of operations required to sort the array in non-decreasing order. An operation is defined as a rotation to the left. Parameters: arr (list): The list of integers. Returns: int: The minimum number of left rotations required to sort the array. n = len(arr) # Finding the index of 1 in the array idx = arr.index(1) # No of rotations required to bring 1 to the start rotations = idx # Rotating the array to left by rotations sorted_arr = arr[rotations:] + arr[:rotations] # Checking if the rotated array is sorted return rotations if sorted_arr == sorted(arr) else -1"},{"question":"Create a function that takes in an array of integers and returns the max minimum pair in the array. A max minimum pair is defined as the maximum and minimum values in an array that are equidistant from the start and end of the array.","solution":"def max_min_pair(arr): This function takes a list of integers and returns a tuple containing the maximum and minimum values found in pairs that are equidistant from the start and end of the list. if not arr: return None, None n = len(arr) max_val = float('-inf') min_val = float('inf') for i in range((n + 1) // 2): pair_max = max(arr[i], arr[n - 1 - i]) pair_min = min(arr[i], arr[n - 1 - i]) if pair_max > max_val: max_val = pair_max if pair_min < min_val: min_val = pair_min return max_val, min_val"},{"question":"Create a function that returns the sorted version of a list of positive integers in ascending order. However, if a number in the list is divisible by 3, it should be treated as negative. How can this be done without modifying the original list, and ensure the sorting is done efficiently?","solution":"def custom_sort(lst): Returns a sorted version of the list, treating numbers divisible by 3 as negative. # Create a custom key function for sorting def sort_key(x): return -x if x % 3 == 0 else x return sorted(lst, key=sort_key)"},{"question":"Create a function that takes an integer and returns a string that represents the integer in binary format. For example, if the input is 10, the function should return \\"1010\\".","solution":"def int_to_binary(n): Converts an integer n to its binary string representation. if n == 0: return \\"0\\" binary_str = \\"\\" while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 return binary_str"},{"question":"Create a function that takes a string as an input and returns a new string with the characters in the string in reverse order. Your function should not reverse individual words but the entire string of characters including spaces.","solution":"def reverse_string(s): Returns the entire string reversed, including spaces and punctuation. return s[::-1]"},{"question":"Create a function that takes a list of integers as input and returns the sum of the squares of those integers. If the list contains any negative numbers, then raise a ValueError.","solution":"def sum_of_squares(lst): Returns the sum of the squares of the integers in the list. Raises a ValueError if the list contains any negative numbers. if any(x < 0 for x in lst): raise ValueError(\\"List contains negative numbers\\") return sum(x ** 2 for x in lst)"},{"question":"Create a function that sorts an array of integers in ascending order.","solution":"def sort_array(arr): Sorts an array of integers in ascending order. Parameters: arr (list of int): The list of integers to be sorted Returns: list of int: Sorted list of integers in ascending order return sorted(arr)"},{"question":"Create a function that takes two strings as input and returns a new string that is a combination of the two strings, but with each character from the first string followed by the corresponding character from the second string. If the strings are of unequal length, append the remaining characters of the longer string at the end of the new string.","solution":"def interleave_strings(str1, str2): Returns a new string that interleaves characters from the two input strings. If the strings are of unequal length, the remaining characters of the longer string are appended. min_len = min(len(str1), len(str2)) combined = ''.join([str1[i] + str2[i] for i in range(min_len)]) combined += str1[min_len:] + str2[min_len:] return combined"},{"question":"Create a function that takes an number as an argument and return a string. If the number is a perfect cube, return the string \\"Perfect cube\\". If the number is not, return the string \\"Not a perfect cube\\".","solution":"def is_perfect_cube(n): Check if a number n is a perfect cube. Parameters: - n: int Returns: - str: \\"Perfect cube\\" if n is a perfect cube, otherwise \\"Not a perfect cube\\". if n < 0: n = -n cube_root = round(n ** (1/3)) if cube_root ** 3 == n: return \\"Perfect cube\\" else: return \\"Not a perfect cube\\""},{"question":"Create a function that computes the sum of all integers in a given array. The array can contain both positive and negative integers.","solution":"def sum_of_integers(arr): Computes the sum of all integers in the given array. Parameters: arr (list of int): The array containing integers (can be both positive and negative) Returns: int: The sum of all integers in the array return sum(arr)"},{"question":"Create a function that takes two arrays of integers, one representing actions (0 for move left, 1 for move right) and the other representing time steps, and returns the final position of an object.","solution":"def final_position(actions, time_steps): Calculate the final position of an object based on the actions and time steps. Parameters: actions (list): List of integers where each integer is 0 (move left) or 1 (move right). time_steps (list): List of integers where each integer represents the number of steps to move in the corresponding action. Returns: int: The final position of the object. position = 0 for action, time_step in zip(actions, time_steps): if action == 0: position -= time_step elif action == 1: position += time_step return position"},{"question":"Create a function that takes an integer as input and returns a string of asterisks (*) that represent the binary representation of the input integer. The output string should not have the '0b' prefix that Python adds to binary literals.","solution":"def int_to_asterisks(n): Converts an integer to a string of asterisks representing its binary value. return bin(n)[2:].replace('1', '*').replace('0', '')"},{"question":"Create a function that converts a time in 24H format to 12H format. Assume that the time input is always valid, non-empty, and in the 24H format.","solution":"def convert_to_12h_format(time_24h: str) -> str: Converts a time from 24-hour format to 12-hour format. Parameters: time_24h (str): Time in 24-hour format (e.g., '14:30', '23:45', '09:00'). Returns: str: Time in 12-hour format with AM/PM (e.g., '2:30 PM', '11:45 PM', '9:00 AM'). hours, minutes = map(int, time_24h.split(':')) period = \\"AM\\" if hours < 12 else \\"PM\\" if hours == 0: hours = 12 elif hours > 12: hours -= 12 return f\\"{hours}:{minutes:02d} {period}\\""},{"question":"Create a function that returns the maximum value in a list of integers. If the list is empty, return -1. For example, given [3, 5, 1, 2, 4], the function should return 5.","solution":"def get_max_value(lst): Returns the maximum value in a list of integers. If the list is empty, returns -1. Parameters: lst (list): A list of integers. Returns: int: The maximum value in the list or -1 if the list is empty. if not lst: return -1 return max(lst)"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of all positive even integers less than or equal to \`n\`.","solution":"def sum_of_positive_even_integers(n): Returns the sum of all positive even integers less than or equal to n. Parameters: n (int): The upper limit integer. Returns: int: The sum of all positive even integers <= n. if n < 2: return 0 return sum(i for i in range(2, n + 1, 2))"},{"question":"Create a function that takes in two arrays of integers and returns an array of their intersection. The function should be optimized for performance and should work even if the input arrays contain duplicates. The function should also remove any duplicates in the resulting intersection array before returning it.","solution":"def array_intersection(arr1, arr2): Returns the intersection of two arrays, with duplicates removed. # Convert lists to sets to find the intersection set1 = set(arr1) set2 = set(arr2) # Find the intersection intersection = set1 & set2 # Convert the set back to a sorted list to ensure a consistent order return sorted(list(intersection))"},{"question":"Create a function that computes the factorial of a number, where the number is given as a string. The function should also handle very large numbers by returning the result as a string.","solution":"def factorial_string(number): Computes the factorial of the given number (as a string) and returns the result as a string. :param number: Number in string format. :return: Factorial of the number in string format. n = int(number) if n == 0 or n == 1: return \\"1\\" result = 1 for i in range(2, n + 1): result *= i return str(result)"},{"question":"Create a function that converts a string to a list of characters, reverses the list, and then returns it. Implement this in Python.","solution":"def reverse_string_to_list(s): Converts a string to a list of characters, reverses the list, and returns it. :param s: input string :return: reversed list of characters return list(s)[::-1]"},{"question":"Create a function that converts a given array of integers into a list of strings where each string represents the integer in binary form. The binary representation should be prefixed with \\"bin\\" and suffixed with \\"end\\". For example, converting the array [1, 2, 3] should result in the list [\\"bin1end\\", \\"bin10end\\", \\"bin11end\\"].","solution":"def convert_to_binary_strings(arr): Converts an array of integers into a list of strings where each string represents the integer in binary form, prefixed with 'bin' and suffixed with 'end'. Parameters: arr (list of int): The list of integers to convert. Returns: list of str: The list of binary string representations. return [f\\"bin{bin(num)[2:]}end\\" for num in arr]"},{"question":"Create a function that takes in three parameters: the length of the hypotenuse (c), and the lengths of the two legs (a and b) of a right triangle. The function should return 'right' if the given sides form a right triangle, 'obtuse' if the triangle is obtuse, or 'acute' if the triangle is acute. Assume all inputs are positive integers.","solution":"def classify_triangle(a, b, c): Classifies a triangle based on the lengths of its sides. Parameters: a (int): Length of first leg of the triangle. b (int): Length of second leg of the triangle. c (int): Length of the hypotenuse of the triangle. Returns: str: 'right' if it's a right triangle, 'obtuse' if it's an obtuse triangle, 'acute' if it's an acute triangle. if (a * a + b * b == c * c): return 'right' elif (a * a + b * b < c * c): return 'obtuse' else: return 'acute'"},{"question":"Create a function that accepts a list and returns the number of elements in the list that are less than 10.","solution":"def count_less_than_ten(lst): Returns the number of elements in the list that are less than 10. Parameters: lst (list): A list of numbers. Returns: int: The number of elements in the list that are less than 10. return sum(1 for x in lst if x < 10)"},{"question":"Create a function that implements a bubble sort algorithm in Python. Bubble sort is a simple sorting algorithm that repeatedly steps through a list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The function should take a list of integers and return a sorted list of those integers.","solution":"def bubble_sort(arr): Implements bubble sort algorithm to sort a list of integers. Args: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes two strings, and checks if they are a mix-up of each other. Two strings are considered mix-ups if all characters in one string appear in the other string and in the same frequency, regardless of the order.","solution":"def are_mixups(s1, s2): Checks if two strings are mix-ups of each other. # If lengths are unequal, they cannot be mix-ups if len(s1) != len(s2): return False # Count the frequency of each character in both strings from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"Create a function that prints \\"Hello World\\" 10 times. How would you do it in Python?","solution":"def print_hello_world(): Prints \\"Hello World\\" 10 times. for _ in range(10): print(\\"Hello World\\")"},{"question":"Create a function that converts a list of tuples with a specific format into a dictionary where the first element of each tuple serves as a key and the second element as its corresponding value. If there are duplicate keys, the function should return an error message. How would you do this in Python?","solution":"def convert_to_dict(tuples_list): Given a list of tuples, convert it into a dictionary. Each tuple must have exactly two elements where: - The first element is the key. - The second element is the value. If duplicate keys are detected, return an error message. result_dict = {} for key, value in tuples_list: if key in result_dict: return \\"Error: Duplicate key found.\\" result_dict[key] = value return result_dict"},{"question":"Create a function that takes a list of numbers as input and returns a list of the same numbers in reverse order. How would you do this in Python?","solution":"def reverse_list(numbers): Returns a list of numbers in reverse order. :param numbers: List of numbers :return: List of numbers in reverse order return numbers[::-1]"},{"question":"Create a function that measures the execution time of another function in Python. You need to use decorators to measure the time taken by the function being decorated.","solution":"import time import functools def measure_time(func): Decorator that measures the execution time of the function it decorates. @functools.wraps(func) def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() execution_time = end_time - start_time print(f\\"Function '{func.__name__}' executed in {execution_time:.4f} seconds\\") return result return wrapper # Example usage: @measure_time def example_function(): time.sleep(1) example_function() # This should print something like \\"Function 'example_function' executed in 1.0001 seconds\\""},{"question":"Create a function that takes two integers as inputs and returns the maximum of the two using a lambda function.","solution":"def max_of_two(a, b): Returns the maximum of two integers a and b using a lambda function. return (lambda x, y: x if x > y else y)(a, b)"},{"question":"Create a function that converts minutes to seconds.","solution":"def minutes_to_seconds(minutes): Converts minutes to seconds. Parameters: minutes (int): The number of minutes to be converted into seconds. Returns: int: The equivalent number of seconds. return minutes * 60"},{"question":"Create a function that selects the first N elements from a given list and reverses the order of these elements. For example, if the given list is \`[1, 2, 3, 4, 5, 6]\` and \`N\` is \`3\`, the function should return \`[3, 2, 1]\`.","solution":"def select_and_reverse(lst, n): Selects the first n elements from the given list and reverses the order of these elements. Parameters: lst (list): The list from which elements are to be selected. n (int): The number of elements to select and reverse. Returns: list: The first n elements reversed in order. return lst[:n][::-1]"},{"question":"Create a function that generates a list of prime numbers within a specified range. The function should handle edge cases, such as negative numbers and numbers less than 2.","solution":"def generate_primes(start, end): Returns a list of prime numbers between start and end (inclusive). Parameters: start (int): Starting value of the range. end (int): Ending value of the range. Returns: list: List of prime numbers in the specified range. if end < 2: return [] primes = [] for num in range(max(2, start), end + 1): for i in range(2, int(num ** 0.5) + 1): if num % i == 0: break else: primes.append(num) return primes"},{"question":"Create a function that takes two parameters, \`n\` and \`m\`, and returns the product of the numbers from \`n\` to \`m\` (inclusive). For example, the product of numbers from 2 to 5 (inclusive) is 24 (2 * 3 * 4 * 5).","solution":"def product_of_range(n, m): Returns the product of all numbers from n to m (inclusive). product = 1 for i in range(n, m + 1): product *= i return product"},{"question":"Create a function that takes a dictionary as input and returns the sum of all the values that are integers in the dictionary.","solution":"def sum_of_integers_in_dict(input_dict): Returns the sum of all the integer values in the input dictionary. :param input_dict: Dictionary with values of any type :return: Sum of all integer values total = 0 for value in input_dict.values(): if isinstance(value, int): total += value return total"},{"question":"Create a function that takes two arrays as input and returns a new array containing the intersection of the two input arrays. The intersection should contain unique elements only, meaning no duplicates should be present.","solution":"def array_intersection(arr1, arr2): Returns the intersection of two arrays containing unique elements only. set1 = set(arr1) set2 = set(arr2) intersection = list(set1 & set2) return intersection"},{"question":"Create a function that checks if a given integer is a \\"Perfect Cube\\" or not. A number is a perfect cube if there exists an integer that, when raised to the power of three, gives the original number. For instance, 8 is a perfect cube because it can be written as (2^3).","solution":"def is_perfect_cube(n): Checks if a given integer is a perfect cube. Args: n (int): The number to check. Returns: bool: True if n is a perfect cube, otherwise False. if n < 0: n = -n cube_root = round(n ** (1/3)) return cube_root ** 3 == n"},{"question":"Create a function that converts Celsius to Fahrenheit using the formula: Fahrenheit = (Celsius * 9/5) + 32. Implement this in a C# program.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. :param celsius: Temperature in Celsius :return: Temperature in Fahrenheit return (celsius * 9/5) + 32"},{"question":"Create a function that takes two strings, \`s1\` and \`s2\`, as input and outputs their concatenation.","solution":"def concatenate(s1, s2): Concatenates two strings s1 and s2. return s1 + s2"},{"question":"Create a function that fills an array with some value if it is present in another array.","solution":"def fill_array_with_value_if_present(input_array, value_to_check, fill_value): This function fills an output array with fill_value if value_to_check is present in the input_array. Parameters: input_array (list): The array to check for the presence of value_to_check. value_to_check: The value to check for in the input array. fill_value: The value to fill in the output array if value_to_check is present. Returns: list: The array filled with fill_value if value_to_check is present in input_array, else empty list. if value_to_check in input_array: return [fill_value] * len(input_array) return []"},{"question":"Create a function that multiplies two matrices in Python.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B. :param A: List of lists where each list represents a row in matrix A. :param B: List of lists where each list represents a row in matrix B. :return: Resultant matrix after multiplication of A and B. # Get dimensions of matrices rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) # Validate dimensions if cols_A != rows_B: raise ValueError(\\"Number of columns in A must be equal to number of rows in B\\") # Initialize resultant matrix with zeros C = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Create a function that picks three random words from a list of words and returns them in a tuple. Each tuple should be unique and not have repeated words. How can we implement this in Python?","solution":"import random def pick_three_random_words(word_list): Picks three random unique words from the given list and returns them as a tuple. :param word_list: List of words to pick from :return: A tuple containing three unique random words if len(word_list) < 3: raise ValueError(\\"The list must contain at least three words.\\") return tuple(random.sample(word_list, 3))"},{"question":"Create a function that takes an array of integers as input and returns the sum of all numbers that are multiples of 3 or 5. If the input array is empty, return 0.","solution":"def sum_of_multiples(arr): Returns the sum of all numbers in the array that are multiples of 3 or 5. If the input array is empty, returns 0. Parameters: arr (list of int): List of integers. Returns: int: Sum of multiples of 3 or 5. return sum(x for x in arr if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that , given a list of integers, returns the index of the first even number in the list or -1 if there is no even number.","solution":"def find_first_even_index(lst): Returns the index of the first even number in the list or -1 if there is no even number. for index, num in enumerate(lst): if num % 2 == 0: return index return -1"},{"question":"Create a function that generates a string of HTML code for an unordered list (\`<ul>\`) with a specified number of list items (\`<li>\`). Each list item should contain the text \\"Item X\\" where X is the index (starting from 1) of the list item.","solution":"def generate_html_list(number_of_items): Generates a string of HTML code for an unordered list (<ul>) with a specified number of list items (<li>). Each list item contains text \\"Item X\\" where X is the index (starting from 1) of the list item. Parameters: number_of_items (int): The number of list items to generate. Returns: str: A string of HTML code representing the unordered list. if number_of_items < 1: return '<ul></ul>' list_items = ''.join(f'<li>Item {i}</li>' for i in range(1, number_of_items + 1)) return f'<ul>{list_items}</ul>'"},{"question":"Create a function that accepts a list of strings and returns a list of lists, where each sublist contains consecutive repeated strings from the input list. For example, given the list \`[\\"apple\\", \\"apple\\", \\"banana\\", \\"banana\\", \\"banana\\", \\"orange\\"]\`, the function should return \`[[\\"apple\\", \\"apple\\"], [\\"banana\\", \\"banana\\", \\"banana\\"], [\\"orange\\"]]\`.","solution":"def group_consecutive_repeated_strings(lst): Groups consecutive repeated strings into sublists. Args: lst (list of str): The input list of strings. Returns: list of lists of str: A list where each sublist contains consecutive repeated strings. if not lst: return [] result = [] current_group = [lst[0]] for i in range(1, len(lst)): if lst[i] == lst[i - 1]: current_group.append(lst[i]) else: result.append(current_group) current_group = [lst[i]] result.append(current_group) return result"},{"question":"Create a function that generates a list of all unique permutations of a given list of elements.","solution":"from itertools import permutations def unique_permutations(elements): Returns a list of all unique permutations of the given list of elements. return list(set(permutations(elements)))"},{"question":"Create a function that takes an integer index n as input and returns a generator that yields the nth Fibonacci number in the sequence. The Fibonacci sequence starts with 0, 1, 1, 2, 3, and so on. The generator should efficiently compute Fibonacci numbers without storing them all in memory at once.","solution":"def fibonacci_generator(n): A generator function to generate the nth Fibonacci number. a, b = 0, 1 for i in range(n + 1): if i == n: yield a a, b = b, a + b # Example usage: # fib = fibonacci_generator(5) # print(next(fib)) # Output will be 5"},{"question":"Create a function that takes two parameters, \`firstNumber\` and \`secondNumber\`, and returns the product of these two numbers. If the product of these numbers is a palindrome, return the product. Otherwise, return the sum of the two input numbers. A palindrome number reads the same forward and backward.","solution":"def is_palindrome(number): Check if a number is a palindrome. return str(number) == str(number)[::-1] def process_numbers(firstNumber, secondNumber): Returns the product of firstNumber and secondNumber if the product is a palindrome. Otherwise, returns the sum of the two numbers. product = firstNumber * secondNumber if is_palindrome(product): return product else: return firstNumber + secondNumber"},{"question":"Create a function that takes an array of integers and returns a tuple of the sum and product of all the integers in the array.","solution":"def sum_and_product(arr): Returns the sum and product of all integers in the array. Parameters: arr (list of int): List of integers Returns: tuple: (sum of integers, product of integers) total_sum = sum(arr) total_product = 1 for num in arr: total_product *= num return (total_sum, total_product)"},{"question":"Create a function that takes a list of integers as input and returns a dictionary where the keys are the unique integers from the list and the values are their corresponding counts of occurrences in the list. TreeMap is not required, but the output should be a dictionary sorted by keys.","solution":"def count_occurrences(lst): Takes a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are their counts of occurrences in the list, sorted by the keys. occurrences = {} for num in lst: if num in occurrences: occurrences[num] += 1 else: occurrences[num] = 1 return dict(sorted(occurrences.items()))"},{"question":"Create a function that takes a string as an argument and returns true if the string is a valid email address. Otherwise, return false. The function should also check if the email address is from \\"gmail.com\\" or \\"yahoo.com\\".","solution":"import re def is_valid_email(email): Checks if the provided email is valid and belongs to gmail.com or yahoo.com. Parameters: email (str): The email address to be validated. Returns: bool: True if the email is valid and belongs to gmail.com or yahoo.com, else False. # Define the email pattern email_pattern = r'^[a-zA-Z0-9._%+-]+@(gmail.com|yahoo.com)' # Use regular expression to validate email if re.match(email_pattern, email): return True return False"},{"question":"Create a function that checks if a given character is an alphabet. You should use ASCII values to determine this. ASCII values for 'a' to 'z' are 97 to 122 and for 'A' to 'Z' are 65 to 90. Your function should return \`True\` if the character is an alphabet and \`False\` otherwise.","solution":"def is_alphabet(char): Returns \`True\` if the given character is an alphabet (either uppercase or lowercase), \`False\` otherwise. if len(char) != 1: return False ascii_value = ord(char) if (65 <= ascii_value <= 90) or (97 <= ascii_value <= 122): return True return False"},{"question":"Create a function that converts minutes to hours, minutes, and seconds. For example, 65 minutes should be converted to 1 hour, 5 minutes, and 0 seconds.","solution":"def minutes_to_hms(minutes): Converts total minutes to hours, minutes, and seconds. hours = minutes // 60 minutes_remaining = minutes % 60 seconds = 0 return hours, minutes_remaining, seconds"},{"question":"Create a function that takes two parameters, \`num\` and \`target\`. The function should print all the combinations of the numbers from 1 to \`num\` that sum up to \`target\`.","solution":"def combination_sum(num, target): Prints all the combinations of numbers from 1 to \`num\` that sum up to \`target\`. def find_combinations(remaining, start, path): if remaining == 0: print(path) return for i in range(start, num + 1): if i > remaining: break find_combinations(remaining - i, i + 1, path + [i]) find_combinations(target, 1, [])"},{"question":"Create a function that takes a list of integers and returns the minimum value in the list. If the list is empty, return infinity.","solution":"def minimum_value(lst): Returns the minimum value in the list. If the list is empty, returns infinity. if not lst: return float('inf') return min(lst)"},{"question":"Create a function that accepts two arguments: an array of integers and a list of operations. Each operation is a tuple containing two integers and the operation type ('add', 'subtract', 'multiply', 'divide'). The function should apply each operation in the order they are given to the integers in the array and return the final result after all operations are executed.","solution":"def apply_operations(arr, operations): Apply a list of operations to an array of integers. Parameters: arr (list of int): The array of integers to which operations will be applied. operations (list of tuple): A list of operations. Each operation is a tuple containing (index, value, operation_type), where operation_type is one of 'add', 'subtract', 'multiply', 'divide'. Returns: list of int: The array after applying all the operations. for operation in operations: index, value, operation_type = operation if operation_type == 'add': arr[index] += value elif operation_type == 'subtract': arr[index] -= value elif operation_type == 'multiply': arr[index] *= value elif operation_type == 'divide': arr[index] //= value # Using integer division for simplicity else: raise ValueError(f\\"Unsupported operation type: {operation_type}\\") return arr"},{"question":"Create a function that takes an input as a list of integers and returns the maximum sum of the subarray. This is known as Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray in nums using Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a string and returns a new string with all the vowels (both uppercase and lowercase) removed from the original string.","solution":"def remove_vowels(s): Returns a new string with all vowels removed from the original string. vowels = 'aeiouAEIOU' return ''.join([char for char in s if char not in vowels])"},{"question":"Create a function that converts a binary number to its decimal equivalent. The function should accept a string representing a binary number and return the decimal equivalent as an integer. Assume the input string is always a valid non-negative binary number (i.e., it contains only the digits 0 and 1).","solution":"def binary_to_decimal(binary_str): Converts a binary number (as a string) to its decimal equivalent. Args: binary_str (str): A string representing a binary number. Returns: int: The decimal equivalent of the binary number. return int(binary_str, 2)"},{"question":"Create a function that returns a random item from a given list.","solution":"import random def get_random_item(input_list): Returns a random item from the given list. Parameters: input_list (list): A list from which to choose a random item. Returns: item: A random item from the list. if not input_list: # if the list is empty return None return random.choice(input_list)"},{"question":"Create a function that takes an array of integers as input and returns an array containing the products of all pairs of distinct integers in the original array.","solution":"def product_of_pairs(arr): Takes an array of integers as input and returns an array containing the products of all pairs of distinct integers in the original array. products = [] n = len(arr) for i in range(n): for j in range(i + 1, n): products.append(arr[i] * arr[j]) return products"},{"question":"Create a function that takes in two integers as parameters and returns the largest number. You can't use the built-in max() function for this task.","solution":"def find_largest(a, b): Returns the larger of two integers a and b. if a > b: return a else: return b"},{"question":"Create a function that returns the sum of the first n natural numbers. What should be the time complexity of this function?","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. :param n: A positive integer representing the number of natural numbers to sum. :return: The sum of the first n natural numbers. return n * (n + 1) // 2"},{"question":"Create a function that generates the Fibonacci sequence up to a given number \`n\` and prints each number in the sequence.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to a given number n and prints each number in the sequence. :param n: The end limit for the Fibonacci sequence. fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Create a function that takes a number as an argument and returns the binary representation of that number as a string. If the number is 0, the function should return \\"0\\".","solution":"def to_binary(n): Converts an integer to its binary representation as a string. if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"Create a function that finds the number of times a character appears in a string. Write the function in Python.","solution":"def count_character_occurrences(s, char): Returns the number of times a character appears in a string. Parameters: s (str): The input string. char (str): The character to count in the string. Returns: int: The number of occurrences of char in s. return s.count(char)"},{"question":"Create a function that takes two lists of integers and return their intersection.","solution":"def intersection(lst1, lst2): Returns the intersection of two lists of integers. return list(set(lst1) & set(lst2))"},{"question":"Create a function that converts a binary number to its decimal equivalent. The function should take a string \`binary_string\` as input, which represents a binary number, and return the decimal equivalent as an integer.","solution":"def binary_to_decimal(binary_string): Converts a binary number (given as a string) to its decimal equivalent. return int(binary_string, 2)"},{"question":"Create a function that returns the sum of an array of numbers in Python.","solution":"def sum_array(numbers): Returns the sum of an array of numbers. :param numbers: List of numbers to sum :type numbers: list :return: Sum of the numbers :rtype: int/float return sum(numbers)"},{"question":"Create a function that takes a list of tuples and checks if all tuples have the same length. The function should return \`True\` if they do, and \`False otherwise\`. Additionally, check if all elements in the tuples are integers. The function should return \`False\` if any element is not an integer.","solution":"def check_tuples_length_and_integers(tuples_list): Check if all tuples in the list have the same length and if all elements in the tuples are integers. if not tuples_list: return True first_length = len(tuples_list[0]) for tpl in tuples_list: if len(tpl) != first_length: return False if not all(isinstance(item, int) for item in tpl): return False return True"},{"question":"Create a function that rotates an array to the left by a number of positions. For example, given the array [1, 2, 3, 4, 5] and rotation count of 2, the function should return [3, 4, 5, 1, 2].","solution":"def rotate_left(array, n): Rotates the array to the left by n positions. :param array: List of elements :param n: Number of positions to rotate :return: Rotated list if not array: return [] n = n % len(array) # In case n is larger than the list length return array[n:] + array[:n]"},{"question":"Create a function that takes a list of integers as input and returns the second minimum value in the list. If the list has fewer than 2 unique values, the function should return \`None\`.","solution":"def second_minimum(lst): Returns the second minimum value in the list. If the list has fewer than 2 unique values, returns None. unique_values = list(set(lst)) if len(unique_values) < 2: return None unique_values.sort() return unique_values[1]"},{"question":"Create a function that sums all the digits in a given positive integer.","solution":"def sum_of_digits(n): Returns the sum of all digits in a given positive integer n. return sum(int(digit) for digit in str(n))"},{"question":"Create a function that generates a countdown from 10 to 1 and prints each number. The function should also handle any potential errors gracefully and ensure the countdown completes accurately.","solution":"def countdown(): Generates a countdown from 10 to 1 and prints each number. Handles potential errors gracefully to ensure the countdown completes accurately. try: for number in range(10, 0, -1): print(number) except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Create a function that takes in a string and a character, then removes all occurrences of that character from the string and returns the modified string.","solution":"def remove_character(s, char): Removes all occurrences of char from the string s and returns the modified string. :param s: Input string :param char: Character to be removed :return: Modified string without the specified character return s.replace(char, '')"},{"question":"Create a function that checks if a string contains only unique characters. The function should return \`true\` if all characters in the string are unique, and \`false\` otherwise. Consider both lowercase and uppercase letters as distinct characters.","solution":"def has_unique_characters(s): Returns True if the given string contains only unique characters, and False otherwise. return len(set(s)) == len(s)"},{"question":"Create a function that takes in two lists of integers and returns the list of common integers, maintaining their order based on the first list's order of appearance.","solution":"def common_elements(list1, list2): Returns a list of common integers between list1 and list2, preserving the order of their first appearance in list1. set_list2 = set(list2) return [element for element in list1 if element in set_list2]"},{"question":"Create a function that takes as input a string and returns the first character that appears more than once. If no character repeats, it should return a message indicating no duplicates were found. The function should be case-sensitive, meaning 'a' and 'A' are considered different characters. Additionally, the function should consider spaces and punctuation as valid characters.","solution":"def first_repeating_character(s): Returns the first character that appears more than once in the string s. If no character repeats, returns a message indicating no duplicates were found. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"No duplicates found\\""},{"question":"Create a function that converts a string to an integer, and then increment it by 1. If the string doesn't contain any digits, return -1. The function should use regular expressions to identify the sequence of digits and use them for conversion.","solution":"import re def increment_string_number(s): Converts a string to an integer using regex to find the first sequence of digits, increments the integer by 1, and returns the result. If no digits are found in the string, return -1. match = re.search(r'd+', s) if match: return int(match.group()) + 1 else: return -1"},{"question":"Create a function that takes a list of integers, and returns a tuple containing the sum and the product of all the integers in the list. If the list is empty, the function should return (0, 1).","solution":"def sum_and_product(lst): Returns a tuple containing the sum and the product of all integers in the list. If the list is empty, it returns (0, 1). if not lst: return (0, 1) total_sum = sum(lst) total_product = 1 for number in lst: total_product *= number return (total_sum, total_product)"},{"question":"Create a function that generates a sequence of numbers from 1 to n, but for multiples of 3, it outputs \\"Fizz\\" instead of the number, for multiples of 5, it outputs \\"Buzz\\", and for multiples of both 3 and 5, it outputs \\"FizzBuzz\\". The function should take an integer n as its parameter and return a list containing the sequence as a string.","solution":"def fizz_buzz(n): Generates a sequence from 1 to n with the following rules: - For multiples of 3, output \\"Fizz\\" instead of the number. - For multiples of 5, output \\"Buzz\\" instead of the number. - For multiples of both 3 and 5, output \\"FizzBuzz\\" instead of the number. Parameters: n (int): The upper limit of the sequence (inclusive). Returns: List[str]: The generated sequence as a list of strings. result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Create a function that takes three strings \`a\`, \`b\`, and \`c\` as arguments. The function should return a string where \`b\` is inserted into the middle of \`a\` at the 10th character (or the end of \`a\` if \`a\` has less than 10 characters).","solution":"def insert_middle(a, b, c): Inserts string b into the middle of string a at the 10th character. If a has less than 10 characters, insert b at the end of a. insert_position = min(10, len(a)) return a[:insert_position] + b + a[insert_position:]"},{"question":"Create a function that sums up all numbers between 1 and n (where n is a positive integer) that are divisible by both 3 and 5.","solution":"def sum_divisible_by_3_and_5(n): Returns the sum of all numbers between 1 and n (inclusive) that are divisible by both 3 and 5. return sum(i for i in range(1, n + 1) if i % 3 == 0 and i % 5 == 0)"},{"question":"Create a function that takes an integer N as an input and returns a list of lists representing Pascal's Triangle up to the Nth level. Each inner list represents a row in Pascal's Triangle. The number of elements in each inner list should be equal to the row number + 1.","solution":"def generate_pascals_triangle(n): Generates Pascal's Triangle up to the Nth level. Parameters: n (int): The number of levels of Pascal's Triangle to generate Returns: List[List[int]]: A list of lists representing Pascal's Triangle up to the Nth level if n < 0: raise ValueError(\\"The input must be a non-negative integer.\\") triangle = [] for i in range(n + 1): level = [1] * (i + 1) for j in range(1, i): level[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(level) return triangle"},{"question":"Create a function that takes an array of words, and returns a new array containing only the words that have more than three characters and are in alphabetical order.","solution":"def filter_and_sort_words(words): Returns a new array containing only the words that have more than three characters and are in alphabetical order. filtered_words = [word for word in words if len(word) > 3] return sorted(filtered_words)"},{"question":"Create a function that takes a dictionary where keys and values are all integers and returns a new dictionary with all values doubled.","solution":"def double_values(input_dict): Returns a new dictionary with all values doubled. :param input_dict: Dictionary with integer keys and values :return: New dictionary with all values doubled return {k: v * 2 for k, v in input_dict.items()}"},{"question":"Create a function that takes an array as input and returns the minimum element in the array.","solution":"def find_minimum(arr): Returns the minimum element in the array. :param arr: List of numbers :return: Minimum number in the list if not arr: raise ValueError(\\"The array is empty\\") return min(arr)"},{"question":"Create a function that subtracts the second number from the first number in the given array, starting from index 0. Then, perform this operation for the remaining pairs of numbers in the array.","solution":"def subtract_pairs(arr): Subtracts the second number from the first number in each pair in the given array. Parameters: arr (list of int): A list of integers to be processed in pairs. Returns: list of int: A list containing the results of the subtractions. if not arr: return [] result = [] for i in range(0, len(arr) - 1, 2): result.append(arr[i] - arr[i+1]) return result"},{"question":"Create a function that takes two numbers as parameters and returns the sum of all numbers from the first number to the second number (inclusive).","solution":"def sum_range(start, end): Returns the sum of all numbers from start to end inclusive. :param int start: The beginning number of the range. :param int end: The ending number of the range. :return: The sum of all numbers from start to end. :rtype: int if start > end: start, end = end, start return sum(range(start, end + 1))"},{"question":"Create a function that takes a string and returns true if the string is a \\"unique\\" string, meaning no character in the string appears more than once. For example, \\"abcdefg\\" should return true, and \\"hello\\" should return false.","solution":"def is_unique_string(s): Returns True if the string has all unique characters, otherwise False. return len(s) == len(set(s))"},{"question":"Create a function that accepts a list of tuples as a parameter and returns the list sorted based on the second element of each tuple in ascending order.","solution":"def sort_by_second_element(tuples_list): Sorts a list of tuples based on the second element of each tuple in ascending order. :param tuples_list: List of tuples to be sorted. :return: Sorted list of tuples. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Create a function that takes a string as an input and returns the string in reverse order. The function should use recursion to achieve this. Also, handle the case where the input is not a string and return an error message indicating the input type is invalid.","solution":"def reverse_string(s): Takes a string as input and returns the string in reverse order using recursion. If the input is not a string, returns an error message indicating the input type is invalid. if not isinstance(s, str): return \\"Invalid input type\\" if len(s) == 0: return \\"\\" else: return s[-1] + reverse_string(s[:-1])"},{"question":"Create a function that takes a string with words, and returns the count of words in the string. Assume that words are separated by spaces. However, the function should ignore leading, trailing, and multiple consecutive spaces.","solution":"def count_words(s): Returns the count of words in the string s. Words are separated by spaces, and leading, trailing, and multiple consecutive spaces are ignored. # Strip leading and trailing spaces, then split by spaces and filter out empty strings words = [word for word in s.strip().split(' ') if word] return len(words)"},{"question":"Create a function that reverses the memory order for a slice (or array) in Numpy. This function should be equivalent to numpy.flipud() for 2D arrays, but it should work for any given number of dimensions.","solution":"import numpy as np def reverse_memory_order(arr): Reverses the memory order of an array in all dimensions. return arr[::-1, ...]"},{"question":"Create a function that checks if a given string represents a valid phone number in the format +1-XXX-XXX-XXXX. Here, X can represent any digit from 0 to 9. The function should return True if the string is a valid phone number and False otherwise.","solution":"import re def is_valid_phone_number(phone_number): Check if the given string represents a valid phone number in the format +1-XXX-XXX-XXXX. Args: phone_number (str): The phone number string to validate. Returns: bool: True if the string is a valid phone number, False otherwise. pattern = r'^+1-d{3}-d{3}-d{4}' return bool(re.match(pattern, phone_number))"},{"question":"Create a function that takes a list of strings as input and returns a new string that is the concatenation of all the strings in the list, but reversed. For example, if the input is [\\"Hello\\", \\"World\\"], the output should be \\"dlroWolleH\\".","solution":"def concatenate_reversed(strings): Takes a list of strings and returns a new string that is the concatenation of all the strings in the list, but reversed. concatenated_string = ''.join(strings) reversed_string = concatenated_string[::-1] return reversed_string"},{"question":"Create a function that generates a list of prime numbers up to a given limit. The aim is to identify numbers that have no divisors other than 1 and themselves. Please ensure that the function is efficient and works correctly for inputs as large as possible within the constraints.","solution":"def generate_primes(limit): Generates a list of prime numbers up to the given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num in range(2, limit + 1) if sieve[num]]"},{"question":"Create a function that calculates the Fibonacci sequence up to a given number n using recursion. The function should return the sequence in a list.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth number using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: seq = fibonacci(n - 1) seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Create a function that takes a list of tuples as input. Each tuple contains two integers. The function should return a new list where each tuple is replaced by the sum of its elements.","solution":"def sum_tuples(input_list): Takes a list of tuples with two integers each and returns a new list with the sums of each tuple's elements. Parameters: input_list (list of tuples): A list where each element is a tuple containing two integers. Returns: list: A list containing the sum of the elements of each tuple. return [a + b for a, b in input_list]"},{"question":"Create a function that takes a list of integers and intersperse it with another value. For example, if you have a list \`[1, 2, 3]\` and you intersperse it with the value \`-1\`, you should get the following output: \`[1, -1, 2, -1, 3]\`.","solution":"def intersperse(lst, value): Takes a list of integers and intersperses it with another value. Args: lst (list): The list of integers. value (any): The value to intersperse. Returns: list: The interspersed list. if not lst: return [] result = [lst[0]] for elem in lst[1:]: result.append(value) result.append(elem) return result"},{"question":"Create a function that takes an integer as an input and returns the largest possible number that can be formed by rearranging its digits.","solution":"def largest_possible_number(n): Given an integer n, this function returns the largest possible number that can be formed by rearranging its digits. # Convert the integer to a string to easily access each digit str_n = str(n) # Sort digits in descending order sorted_digits = sorted(str_n, reverse=True) # Join the sorted digits back into a string largest_number_str = ''.join(sorted_digits) # Convert the string back to an integer largest_number = int(largest_number_str) return largest_number"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the first \`n\` natural numbers. The function should be efficient and work for large values of \`n\`.","solution":"def sum_of_n_natural_numbers(n): Returns the sum of the first n natural numbers. The sum of the first n natural numbers can be efficiently computed using the formula: Sum = n * (n + 1) // 2 return n * (n + 1) // 2"},{"question":"Create a function that takes in a dictionary with keys as names and values as scores and returns a string stating the highest score and the name associated with it.","solution":"def highest_score(scores): Returns a string stating the highest score and the name associated with it. Parameters: - scores (dict): Dictionary with keys as names and values as scores Returns: - str: String stating the highest score and the name associated with it if not scores: return \\"No scores\\" max_name = max(scores, key=scores.get) max_score = scores[max_name] return f\\"The highest score is {max_score} by {max_name}\\""},{"question":"Create a function that takes an array of integers and a target integer \`target\`. Implement the function \`find_combinations\` to return all unique combinations of three numbers from the array that sum up to the target.","solution":"def find_combinations(arr, target): Returns all unique combinations of three numbers from arr that sum up to target. arr.sort() result = [] for i in range(len(arr) - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, len(arr) - 1 while left < right: sum = arr[i] + arr[left] + arr[right] if sum == target: result.append((arr[i], arr[left], arr[right])) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif sum < target: left += 1 else: right -= 1 return result"},{"question":"Create a function that takes a string and returns the longest palindrome substring within that string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring within the given string s. n = len(s) if n == 0: return \\"\\" longest = s[0] def expand_from_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] for i in range(n): # Odd length palindromes palindrome1 = expand_from_center(i, i) if len(palindrome1) > len(longest): longest = palindrome1 # Even length palindromes palindrome2 = expand_from_center(i, i + 1) if len(palindrome2) > len(longest): longest = palindrome2 return longest"},{"question":"Create a function that generates all possible subsets of a given list of integers. The function should handle lists of integers with duplicates and return the subsets without any duplicates.","solution":"def unique_subsets(nums): Generates all unique subsets of a given list of integers. nums.sort() subsets = [] def backtrack(index, path): subsets.append(path) for i in range(index, len(nums)): if i > index and nums[i] == nums[i - 1]: continue backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return subsets"},{"question":"Create a function that takes a list of consecutive numbers as input and returns the first and the last number in the list. If the list is empty, return None for both values.","solution":"def first_and_last(numbers): Returns the first and last number from a list of consecutive numbers. If the list is empty, returns (None, None). :param numbers: List of consecutive numbers :return: Tuple containing the first and last number (first, last) if not numbers: # the list is empty return (None, None) return (numbers[0], numbers[-1])"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, as input and calculates the greatest common divisor (GCD) using the Euclidean algorithm. The function should return the GCD of \`a\` and \`b\`.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that takes an array and returns the count of the number of occurrences of the maximum value in the array.","solution":"def count_max_occurrences(arr): Returns the count of the number of occurrences of the maximum value in the array. if not arr: return 0 max_value = max(arr) return arr.count(max_value)"},{"question":"Create a function that calculates the total cost of a shopping cart. The function should take a list of tuples as input, where each tuple represents an item in the cart with the format (item_name, price, quantity). The function should return the total cost of all items in the cart rounded to 2 decimal places. If the list is empty, the function should return 0.","solution":"def calculate_total_cost(cart): Calculate the total cost of a shopping cart. Parameters: cart (list of tuples): Each tuple contains (item_name, price, quantity). Returns: float: Total cost rounded to 2 decimal places. total_cost = sum(price * quantity for _, price, quantity in cart) return round(total_cost, 2)"},{"question":"Create a function that takes an array of integers and returns the length of the longest subsequence of consecutive numbers.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest subsequence of consecutive numbers in the array. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # Start of a new sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a function that checks if a number is a prime number. A prime number is a number greater than 1 that has no divisors other than 1 and itself. You can assume the input number is always a non-negative integer.","solution":"def is_prime(n): Returns True if n is a prime number, and False otherwise. if n <= 1: return False elif n == 2: return True elif n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes in a matrix as a parameter and returns the sum of all elements in the matrix. The function should also handle matrices of varying sizes and should ensure that only numeric elements are included in the sum.","solution":"def sum_matrix(matrix): Returns the sum of all numeric elements in the matrix. Parameters: matrix (list of lists): A 2D list representing the matrix. Returns: int/float: Sum of all numeric elements in the matrix. total_sum = 0 for row in matrix: for element in row: if isinstance(element, (int, float)): total_sum += element return total_sum"},{"question":"Create a function that takes an array and returns an array with all the elements shifted one position to the right. The last element should move to the first position.","solution":"def shift_right(arr): Returns an array with all the elements shifted one position to the right. The last element moves to the first position. If the array is empty, it returns an empty array. if not arr: return arr return [arr[-1]] + arr[:-1]"},{"question":"Create a function that takes a single parameter, an array of integers, and returns the sum of the squares of its elements. The function should also handle the case where the array is empty or contains non-integer elements by raising an appropriate exception.","solution":"def sum_of_squares(arr): Returns the sum of the squares of the elements in the array 'arr'. Raises ValueError if the array contains non-integer elements. if not isinstance(arr, list): raise ValueError(\\"Input should be a list.\\") if any(not isinstance(e, int) for e in arr): raise ValueError(\\"All elements of the array must be integers.\\") return sum(x ** 2 for x in arr)"},{"question":"Create a function that takes in a list of integers and returns a new list with the integers sorted in ascending order. You should not use the built-in sort function or method.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using bubble sort algorithm. Parameters: arr (list): A list of integers. Returns: list: A new list with the integers sorted in ascending order. n = len(arr) sorted_arr = arr.copy() # Create a copy to avoid mutating the input list for i in range(n): for j in range(0, n-i-1): if sorted_arr[j] > sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the factorial of each integer.","solution":"import math def factorial_list(int_list): Returns a list containing the factorial of each integer in the input list. return [math.factorial(num) for num in int_list]"},{"question":"Create a function that returns the sum of the squares of the numbers in a list using Python. You are not allowed to use any built-in functions or libraries. Please implement the function from scratch.","solution":"def sum_of_squares(numbers): Returns the sum of the squares of the numbers in the list. total = 0 for number in numbers: total += number * number return total"},{"question":"Create a function that takes a list of integers and returns a copy of the list with each element incremented by 1. If the list is empty, return an empty list. The function should also handle negative numbers.","solution":"def increment_list(lst): Returns a copy of the list with each element incremented by 1. Args: lst (list): A list of integers. Returns: list: A list with each element incremented by 1. return [x + 1 for x in lst]"},{"question":"Create a function that checks if all elements in a list are even. If they are, return True; otherwise, return False.","solution":"def all_elements_even(lst): Returns True if all elements in the list are even, otherwise returns False. return all(x % 2 == 0 for x in lst)"},{"question":"Create a function that generates a sequence of Fibonacci numbers up to N consecutive terms.","solution":"def fibonacci_sequence(N): Generates a sequence of Fibonacci numbers up to N consecutive terms. Parameters: N (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to N terms. if N <= 0: return [] elif N == 1: return [0] elif N == 2: return [0, 1] sequence = [0, 1] for i in range(2, N): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence"},{"question":"Create a function that takes an array of integers and returns the maximum sum of all possible subarrays. This is known as the Kadane's algorithm.","solution":"def max_subarray_sum(nums): Function to return the maximum sum of all possible subarrays using Kadane's algorithm. Parameters: nums (list): List of integers. Returns: int: The maximum sum of all possible subarrays. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a list of integers and converts them into a string where each number is separated by a comma and a space. For instance, if the input list is \`[1, 2, 3, 4, 5]\`, the output should be \`\\"1, 2, 3, 4, 5\\"\`.","solution":"def list_to_string(lst): Converts a list of integers into a string where each number is separated by a comma and a space. Args: lst (list of int): A list of integers. Returns: str: A string representation of the list with each number separated by a comma and a space. return ', '.join(map(str, lst))"},{"question":"Create a function that multiplies two numbers and returns the product.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that takes an array and a number, then concats them together.","solution":"def concat_array_number(array, number): Concatenates a number to an array. Parameters: array (list): A list of elements number (int or float): A number to be appended to the list Returns: list: A new list with the number appended to the original list return array + [number]"},{"question":"Create a function that accepts two arguments: an array and a value. The function should return the index of the first occurrence of the value in the array. If the value is not found, return -1.","solution":"def find_first_occurrence(arr, value): Returns the index of the first occurrence of the value in the array. If the value is not found, returns -1. try: return arr.index(value) except ValueError: return -1"},{"question":"Create a function that takes a list of integers and returns the sorted list in descending order. Sort the list using the method of your choice. For this problem, use the Bubble Sort algorithm.","solution":"def bubble_sort_descending(lst): Sorts a list of integers in descending order using Bubble Sort algorithm. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] < lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Create a function that takes a string and a number as arguments and returns a slice of that string starting from the given index and with the given length. If the index is out of range or the length is negative, return an empty string.","solution":"def string_slice(s, index, length): Returns a slice of the string \`s\` starting from the given \`index\` and with the given \`length\`. If the \`index\` is out of range or the \`length\` is negative, return an empty string. if not (0 <= index < len(s)) or length < 0: return \\"\\" return s[index:index + length]"},{"question":"Create a function that takes an array of strings and returns a new array with all the strings sorted in descending alphabetical order.","solution":"def sort_strings_desc(strings): Returns a new array with all the strings sorted in descending alphabetical order. return sorted(strings, reverse=True)"},{"question":"Create a function that identifies the most frequently occurring element in a list of integers and returns it along with its frequency. If there are multiple elements with the same highest frequency, return all of them along with their corresponding frequencies.","solution":"from collections import Counter def most_frequent_elements(lst): Identifies the most frequently occurring element(s) in a list of integers and returns them along with their frequencies. Parameters: lst (list): A list of integers. Returns: list of tuples: A list of tuples where each tuple contains an integer and its frequency. if not lst: return [] counter = Counter(lst) max_freq = max(counter.values()) most_frequent = [(key, freq) for key, freq in counter.items() if freq == max_freq] return most_frequent"},{"question":"Create a function that takes two integers as input and returns the sum of all integers between them, inclusive. If the first integer is greater than the second, the function should return \\"Error: Invalid Input\\".","solution":"def sum_in_between(a, b): Takes two integers, a and b, and returns the sum of all integers between them, inclusive. If a is greater than b, returns \\"Error: Invalid Input\\". if a > b: return \\"Error: Invalid Input\\" total_sum = sum(range(a, b + 1)) return total_sum"},{"question":"Create a function that takes a list of integers as input, where each integer is a number between 1 and 100. The function should return the number and its frequency in the list, in the order of most frequent to least frequent. If there are multiple numbers with the same frequency, they should be returned in ascending order.","solution":"from collections import Counter def number_frequency(numbers): Returns a list of tuples with numbers and their frequencies, ordered by frequency from most to least frequent. If frequencies are the same, orders by number ascending. if not all(1 <= x <= 100 for x in numbers): raise ValueError(\\"All numbers must be between 1 and 100 inclusive.\\") freq_dict = Counter(numbers) sorted_freq = sorted(freq_dict.items(), key=lambda item: (-item[1], item[0])) return sorted_freq"},{"question":"Create a function that paints a one-dimensional histogram from an inputted array. This function requires two arguments: \`data\` - an array of integers representing values, and \`max_value\` - the maximum value that can be present in the array. The histogram should display the count of occurrences of each integer from 0 up to \`max_value\` (inclusive).","solution":"def paint_histogram(data, max_value): Paints a one-dimensional histogram from the input array. Args: data : list of int : an array of integers representing values. max_value : int : the maximum value that can be present in the array. Returns: dict : a dictionary where keys are integers from 0 to max_value (inclusive) and values are their counts in the data array. histogram = {i: 0 for i in range(max_value + 1)} for value in data: if 0 <= value <= max_value: histogram[value] += 1 return histogram"},{"question":"Create a function that accepts two parameters, the time in 24-hour format and the duration in minutes, and returns the future time after the duration. The function should return the result in a string in 24-hour format. Ensure the function handles overtimes correctly.","solution":"def add_time(time, duration_minutes): Returns the time in 24-hour format after adding the duration_minutes to the given time. Args: time (str): a string representing time in 24-hour format (HH:MM). duration_minutes (int): the duration in minutes to be added to the time. Returns: str: the future time in 24-hour format (HH:MM). hours, minutes = map(int, time.split(':')) total_minutes = hours * 60 + minutes + duration_minutes future_hours = (total_minutes // 60) % 24 future_minutes = total_minutes % 60 return f\\"{future_hours:02}:{future_minutes:02}\\""},{"question":"Create a function that takes two numbers as input and returns the sum, difference, product, and quotient of the two numbers. If the divisor is zero in the case of the quotient, the function should return None for the quotient.","solution":"def calculate_operations(a, b): Returns the sum, difference, product, and quotient of a and b. If b is zero, quotient is returned as None. sum_result = a + b difference_result = a - b product_result = a * b if b == 0: quotient_result = None else: quotient_result = a / b return sum_result, difference_result, product_result, quotient_result"},{"question":"Create a function that takes three parameters: an array of integers, the starting index, and the ending index. The function should return a boolean value indicating whether or not the elements in the array between the specified start and end indices are sorted in either ascending or descending order.","solution":"def is_sorted_subarray(arr, start, end): Checks if the subarray from start to end indices is sorted either in ascending or descending order. :param arr: List of integers. :param start: Starting index of subarray. :param end: Ending index of subarray. :return: Boolean value indicating whether the subarray is sorted. if start < 0 or end >= len(arr) or start > end: return False ascending = True descending = True for i in range(start, end): if arr[i] > arr[i + 1]: ascending = False if arr[i] < arr[i + 1]: descending = False return ascending or descending"},{"question":"Create a function that takes a string as an input and returns a new string that is a version of the original string but with every vowel replaced by a specified vowel.","solution":"def replace_vowels(input_string, new_vowel): Replaces every vowel in the input_string with the specified new_vowel. Parameters: input_string (str): The original string. new_vowel (str): The vowel to replace original vowels with. Returns: str: A new string with all vowels replaced by new_vowel. vowels = \\"aeiouAEIOU\\" return ''.join([new_vowel if char in vowels else char for char in input_string])"},{"question":"Create a function that calculates the sum of all even digits in a given number. If a number contains only odd digits, the function should return 0. If the number is negative, treat it as a positive number.","solution":"def sum_even_digits(n): Returns the sum of all even digits in a given number. If no even digits are present, returns 0. Treats negative numbers as positive. n = abs(n) even_digit_sum = 0 for digit in str(n): if int(digit) % 2 == 0: even_digit_sum += int(digit) return even_digit_sum"},{"question":"Create a function that takes in a list of integers and returns a boolean that indicates whether any integer in the list is divisible by the sum of the other integers in the list. If there are no other integers to sum, return false if the list has more than one element, and true if it has only one element.","solution":"def is_divisible_by_sum(numbers): Check if any integer in the list is divisible by the sum of the other integers in the list. Args: numbers (list): A list of integers. Returns: bool: True if any integer is divisible by the sum of the other integers, otherwise False. if len(numbers) == 0: return False if len(numbers) == 1: return True total_sum = sum(numbers) for number in numbers: if number == 0: continue if (total_sum - number) != 0 and number % (total_sum - number) == 0: return True return False"},{"question":"Create a function that accepts an array of numbers as an argument. The function should return the sum of all numbers in the array.","solution":"def sum_array(numbers): Returns the sum of all numbers in the array. :param numbers: List of numbers :return: Sum of all numbers in the list return sum(numbers)"},{"question":"Create a function that takes a JSON object and returns a new JSON object where the keys of the original object are replaced with their corresponding values, and the values are replaced with their corresponding keys. This is essentially swapping the key-value pairs of the original JSON object.","solution":"def swap_key_value_pairs(json_obj): Takes a JSON object and returns a new JSON object with keys and values swapped. Args: json_obj (dict): The original JSON object. Returns: dict: A new JSON object with keys and values swapped. return {value: key for key, value in json_obj.items()}"},{"question":"Create a function that returns the sum of all even numbers from 1 to n. The function should be named \`sum_even_numbers(n)\`. Please provide a Python implementation of this function.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 1 to n. return sum(i for i in range(2, n+1, 2))"},{"question":"Create a function that calculates the Fibonacci sequence up to the nth number. The function should be efficient and use recursion to achieve this. However, due to the limitations of recursion depth in many programming languages, an iterative approach is also provided for comparison. Which approach would you recommend and why?","solution":"def fibonacci_recursive(n, memo={}): Calculates the Fibonacci sequence up to the nth number using recursion with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci_recursive(n - 1, memo) + fibonacci_recursive(n - 2, memo) return memo[n] def fibonacci_iterative(n): Calculates the Fibonacci sequence up to the nth number using an iterative approach. if n <= 1: return n a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b # Recommendation: # I recommend using the iterative approach for calculating Fibonacci sequences. # The reason is that while recursion with memoization (dynamic programming) is efficient, # the iterative approach typically has lower overhead in both time and space, # making it more suitable for large n values."},{"question":"Create a function that identifies if two strings are anagrams, meaning they contain the same characters but in different orders. The function should return \\"true\\" if they are anagrams and \\"false\\" otherwise. Ensure your function includes detailed documentation in your comment block and handles both uppercase and lowercase letters. For instance, \\"Anagram\\" and \\"nagaram\\" should be considered anagrams.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function is case insensitive. Parameters: str1 (str): First string to compare. str2 (str): Second string to compare. Returns: bool: Returns True if str1 and str2 are anagrams, otherwise False. # Sanitize the input by converting to lowercase and removing spaces str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # If lengths differ, they can't be anagrams if len(str1) != len(str2): return False # Compare sorted versions of the strings return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes an integer input and returns the sum of all even numbers from 0 up to and including the input number. Also, handle the case where the input number is negative.","solution":"def sum_even_numbers(n): This function returns the sum of all even numbers from 0 up to and including the input number n. If n is negative, it returns 0 as there are no non-negative even numbers to sum. if n < 0: return 0 return sum(number for number in range(0, n+1) if number % 2 == 0)"},{"question":"Create a function that takes a list of numbers and writes each number to a file, adding a prefix \\"Number: \\" before the number. The file should be named \\"output.txt\\".","solution":"def write_numbers_to_file(numbers, filename=\\"output.txt\\"): Writes each number in the list to the specified file, prefixed with \\"Number: \\". :param numbers: List of numbers to write to the file. :param filename: The name of the file to write to (default is \\"output.txt\\"). with open(filename, 'w') as file: for number in numbers: file.write(f\\"Number: {number}n\\")"},{"question":"Create a function that determines if a string represents a valid IP address in the IPv4 standard format. An IPv4 address consists of four integers, each ranging from 0 to 255, separated by dots.","solution":"def is_valid_ipv4_address(ip): Determines if a string represents a valid IPv4 address. :param ip: str, the string to check :return: bool, True if the string is a valid IPv4 address, False otherwise parts = ip.split('.') # An IPv4 address must have exactly four parts if len(parts) != 4: return False for part in parts: # Each part must be a digit and in the range 0 to 255 if not part.isdigit() or not (0 <= int(part) <= 255): return False # Leading zeroes are not allowed unless the part is exactly '0' if len(part) > 1 and part[0] == '0': return False return True"},{"question":"Create a function that will solve a quadratic equation of the form ax^2 + bx + c = 0 and return the roots. The function should handle both real and complex roots.","solution":"import cmath def solve_quadratic(a, b, c): Solves a quadratic equation of the form ax^2 + bx + c = 0 and returns the roots. Handles both real and complex roots. # Calculate the discriminant discriminant = b**2 - 4*a*c # Use cmath to handle complex numbers sqrt_discriminant = cmath.sqrt(discriminant) # Calculate the two roots root1 = (-b + sqrt_discriminant) / (2*a) root2 = (-b - sqrt_discriminant) / (2*a) return root1, root2"},{"question":"Create a function that takes 2 parameters: and int array and an int. The function will return true if an element in the array is equal to the given int. If not, return false.","solution":"def contains_element(array, element): Check if the array contains the given element. Parameters ---------- array : list of int The array of integers to check. element : int The integer to find in the array. Returns ------- bool True if the element is found in the array, False otherwise. return element in array"},{"question":"Create a function that takes a list of tuples, where each tuple consists of two elements: an integer and a string. The function should return a dictionary where each key is the string from the tuples and each value is a list of integers corresponding to the integers in the tuples with the same string key.","solution":"def tuples_to_dict(tuples_list): Converts a list of tuples into a dictionary where the keys are strings and values are lists of integers. :param tuples_list: List of tuples where each tuple consists of (integer, string) :return: Dictionary with strings as keys and lists of integers as values result_dict = {} for integer, string in tuples_list: if string not in result_dict: result_dict[string] = [] result_dict[string].append(integer) return result_dict"},{"question":"Create a function that takes a single integer input and returns the sum of the digits of that integer. If the input is negative, the function should return the sum of the absolute values of the digits. How can this be done in Python?","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. If n is negative, the function returns the sum of the absolute values of the digits. n = abs(n) # Use the absolute value to handle negative numbers digits = [int(digit) for digit in str(n)] # Convert the number to a list of its digits return sum(digits) # Return the sum of the digits"},{"question":"Create a function that takes a string as an argument and returns an array of words within that string, split by spaces.","solution":"def split_string_by_spaces(s): Takes a string as an argument and returns an array of words within that string, split by spaces. return s.split()"},{"question":"Create a function that takes in two numbers and returns True if they are equal, and returns False otherwise. Is there a one-liner solution to this problem in Python?","solution":"def are_equal(a, b): Returns True if a and b are equal, False otherwise. return a == b"},{"question":"Create a function that takes a list of numbers as input and returns the count of numbers greater than zero. The function should use a for loop to iterate through the list and a conditional statement to check if each number is greater than zero.","solution":"def count_greater_than_zero(lst): Takes a list of numbers as input and returns the count of numbers greater than zero. Args: lst (list): List of numbers. Returns: int: Count of numbers greater than zero. count = 0 for num in lst: if num > 0: count += 1 return count"},{"question":"Create a function that will take a string as an argument and return a list of all the unique characters in the string, without considering the order of the characters.","solution":"def unique_characters(s): Returns a list of unique characters in the given string, disregarding the order. return list(set(s))"},{"question":"Create a function that takes two arrays of numbers and returns an array containing the union and intersection of the two arrays. The function should be efficient and handle large data sets well.","solution":"def union_and_intersection(arr1, arr2): Returns a tuple containing the union and intersection of two arrays. Args: arr1: List of numbers. arr2: List of numbers. Returns: A tuple where the first element is the union of the two arrays and the second element is the intersection of the two arrays. Both union and intersection are returned as lists. set1 = set(arr1) set2 = set(arr2) union = list(set1 | set2) intersection = list(set1 & set2) return (union, intersection)"},{"question":"Create a function that takes an integer n and returns the sum of all integers from 1 to n using recursion.","solution":"def sum_recursive(n): Returns the sum of all integers from 1 to n using recursion. if n <= 1: return n else: return n + sum_recursive(n - 1)"},{"question":"Create a function that returns the number of distinct permutations that can be formed from the given string. A permutation is defined as a rearrangement of all or part of a string's characters. For example, \\"abc\\" can be rearranged to \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\".","solution":"from math import factorial from collections import Counter def distinct_permutations_count(s): Returns the number of distinct permutations that can be formed from the given string. # Count the occurrences of each character in the string freq = Counter(s) # Calculate the factorial of the length of the string numerator = factorial(len(s)) # Calculate the product of factorials of the frequencies of the characters denominator = 1 for count in freq.values(): denominator *= factorial(count) # Number of distinct permutations return numerator // denominator"},{"question":"Create a function that can convert a string to an integer. Handle cases where the string might contain leading or trailing spaces, and convert it to the correct integer, taking into account sign numbers (- and +).","solution":"def string_to_int(s): Converts a string to an integer, handling leading or trailing spaces and taking into account sign numbers. s = s.strip() # Remove leading and trailing whitespaces if not s: return 0 sign = 1 if s[0] == '-': sign = -1 s = s[1:] elif s[0] == '+': s = s[1:] num = 0 for char in s: if char.isdigit(): num = num * 10 + int(char) else: break return sign * num"},{"question":"Create a function that takes a positive integer and returns its factorial using recursion. Ensure the function gracefully handles edge cases like negative numbers or non-integer inputs.","solution":"def factorial(n): Returns the factorial of a positive integer n using recursion. Handles edge cases for negative numbers and non-integer inputs. if not isinstance(n, int) or n < 0: return \\"Invalid input\\" if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes an array of integers as input and returns an array where each integer is repeated twice.","solution":"def repeat_elements_twice(arr): Returns an array where each integer is repeated twice. Parameters: arr (list): A list of integers. Returns: list: A list where each integer from the input list is repeated twice. result = [] for num in arr: result.extend([num, num]) return result"},{"question":"Create a function that converts a string into a binary representation, but only for a specific set of characters. In this case, we define a character to be \\"special\\" if it is a digit, a letter, or a punctuation mark. Non-special characters should not be included in the binary representation. Also, prepend each binary number with characters indicating whether it's a digit, a letter, or a punctuation mark.","solution":"def char_to_binary(c): if c.isdigit(): return 'd' + bin(ord(c))[2:].zfill(8) elif c.isalpha(): return 'l' + bin(ord(c))[2:].zfill(8) elif c in '!\\"#%&'()*+,-./:;<=>?@[]^_\`{|}~': return 'p' + bin(ord(c))[2:].zfill(8) else: return None def string_to_special_binary(s): result = [] for c in s: binary_representation = char_to_binary(c) if binary_representation: result.append(binary_representation) return ' '.join(result)"},{"question":"Create a function that can convert a given string to its hexadecimal representation. Users may provide any string, and the function should output the string in hexadecimal format. For example, \\"hello\\" should be \\"68656c6c6f\\".","solution":"def string_to_hex(s): Converts a given string to its hexadecimal representation. Parameters: s (str): Input string to be converted to hexadecimal. Returns: str: Hexadecimal representation of the input string. return ''.join(format(ord(c), '02x') for c in s)"},{"question":"Create a function that accepts a list of integers as an argument and return the average of all the numbers in the list. If the list is empty, the function should return \`None\`. Additionally, handle any potential exceptions and cover all edge cases, including empty input and non-integer items in the list.","solution":"def average(numbers): Returns the average of a list of numbers. If the list is empty, returns None. If the list contains non-integer items, raises a ValueError. if not numbers: return None total = 0 count = 0 for num in numbers: if not isinstance(num, int): raise ValueError(\\"List contains non-integer items\\") total += num count += 1 return total / count if count else None"},{"question":"Create a function that , given an array of integers, returns the minimum and maximum values in the array. However, you should try to minimize the number of comparisons required.","solution":"def find_min_and_max(arr): Finds the minimum and maximum values in an array with minimized comparisons. Parameters: arr (list): List of integers. Returns: tuple: A tuple containing the minimum and maximum values. if not arr: raise ValueError(\\"Array is empty.\\") if len(arr) == 1: return (arr[0], arr[0]) if arr[0] > arr[1]: min_val = arr[1] max_val = arr[0] else: min_val = arr[0] max_val = arr[1] for i in range(2, len(arr), 2): if i + 1 < len(arr): if arr[i] > arr[i + 1]: min_val = min(min_val, arr[i + 1]) max_val = max(max_val, arr[i]) else: min_val = min(min_val, arr[i]) max_val = max(max_val, arr[i + 1]) else: min_val = min(min_val, arr[i]) max_val = max(max_val, arr[i]) return (min_val, max_val)"},{"question":"Create a function that takes two string parameters, \`A\` and \`B\`, and returns a string of their concatenation. Additionally, implement a check function to verify the correctness of your main function with predefined data points.","solution":"def concatenate_strings(A, B): Returns the concatenation of strings A and B. return A + B"},{"question":"Create a function that checks if a string contains only decimal digits and returns True if it does, False otherwise. Provide an example of how to call the function and print its results.","solution":"def is_decimal_digit(s): Checks if the string contains only decimal digits. Args: s (str): The string to check. Returns: bool: True if the string contains only decimal digits, False otherwise. return s.isdigit() # Example usage: example = \\"12345\\" result = is_decimal_digit(example) print(result) # Output: True"},{"question":"Create a function that calculates the total number of occurrences of each character in a given string. The function should return a dictionary where the keys are the characters and the values are the counts of those characters in the string. If a character appear more than once, it should only appear once in the dictionary, but with its total count in the value.","solution":"def count_characters(s): Returns a dictionary with the total number of occurrences of each character in the given string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that prints the pyramid pattern using numbers. The function should accept an integer as the number of rows for the pyramid. The numbers should increment sequentially from the left to the right, and then reset to 1 at the start of each row. The pattern should be reversed for the second half of the pyramid.","solution":"def print_pyramid(n): Prints a pyramid pattern using numbers with \`n\` rows. The numbers increment sequentially from the left to the right, and then reset to 1 at the start of each row. The pattern is reversed for the second half of the pyramid. # \`n\` total rows in the pyramid. # print the first half of the pyramid for i in range(1, n+1): num = 1 # create a string for the ith row row = '' for j in range(i): row += str(num) + ' ' num += 1 print(row.rstrip()) # print the second half of the pyramid in reverse order for i in range(n-1, 0, -1): num = 1 row = '' for j in range(i): row += str(num) + ' ' num += 1 print(row.rstrip())"},{"question":"Create a function that , given an integer \`n\`, returns the \`n\`-th Fibonacci number using recursion and memoization.","solution":"def fibonacci(n, memo={}): Returns the n-th Fibonacci number using recursion and memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a function that takes two arguments, a string and an integer n. The function should return the first n characters of the string. If the string is shorter than n, return the entire string.","solution":"def first_n_characters(s, n): Returns the first n characters of the string s. If the string is shorter than n, returns the entire string. return s[:n]"},{"question":"Create a function that generates a bar chart.","solution":"import matplotlib.pyplot as plt def generate_bar_chart(data, title, xlabel, ylabel): Generates a bar chart from a dictionary of data. Parameters: data (dict): A dictionary where keys are categories (str) and values are numerical values. title (str): The title of the bar chart. xlabel (str): The label for the x-axis. ylabel (str): The label for the y-axis. Returns: None categories = list(data.keys()) values = list(data.values()) plt.figure(figsize=(10, 5)) plt.bar(categories, values, color='blue') plt.title(title) plt.xlabel(xlabel) plt.ylabel(ylabel) plt.show()"},{"question":"Create a function that takes in two strings and returns true if they are anagrams (contain the same characters in any order).","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams (contain the same characters in any order), False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Create a function that takes a list of integers as input and returns the longest subsequence in which the elements are in non-decreasing order.","solution":"def longest_non_decreasing_subsequence(arr): Returns the longest subsequence in which the elements are in non-decreasing order. Parameters: arr (list): A list of integers. Returns: list: The longest subsequence in non-decreasing order. if not arr: return [] n = len(arr) # List to store the longest non-decreasing subsequence lengths dp = [1] * n # List to track previous indices for reconstruction of subsequence prev = [-1] * n # Populate the dp and prev arrays for i in range(1, n): for j in range(i): if arr[i] >= arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j # Find the index of the maximum value in dp max_index = max(range(n), key=lambda x: dp[x]) # Reconstruct the longest non-decreasing subsequence longest_subseq = [] while max_index != -1: longest_subseq.append(arr[max_index]) max_index = prev[max_index] # Reverse the subsequence to get it in the correct order longest_subseq.reverse() return longest_subseq"},{"question":"Create a function that takes an integer \`n\` and a list of integers \`A\`, and calculates the sum of all elements in \`A\` that are greater than \`n\`.","solution":"def sum_greater_than_n(n, A): Returns the sum of all elements in A that are greater than n. total = 0 for number in A: if number > n: total += number return total"},{"question":"Create a function that takes a string of a simple mathematical expression as an argument and returns the result of the expression. Consider the expression will only contain integers, addition (+), subtraction (-), multiplication (*), and division (/), and will be in the correct format.","solution":"def evaluate_expression(expression): Evaluates a simple mathematical expression containing integers and the operators +, -, *, / and returns the result. try: # Evaluate the expression using eval result = eval(expression) return result except Exception as e: raise ValueError(f\\"Invalid expression: {expression}. Error: {e}\\")"},{"question":"Create a function that takes in 2 numbers, num1 and num2, and returns the sum of all integers from num1 to num2 (inclusive), where num1 and num2 are positive integers and num1 <= num2.","solution":"def sum_of_integers(num1, num2): Returns the sum of all integers from num1 to num2 (inclusive). return sum(range(num1, num2 + 1))"},{"question":"Create a function that returns the sum of the squares of all odd numbers in a given list. The function should be named \`sum_of_squares_odd\` and should take a list of integers as its argument.","solution":"def sum_of_squares_odd(numbers): Returns the sum of the squares of all odd numbers in the given list. Parameters: numbers (list): A list of integers. Returns: int: Sum of the squares of all odd numbers in the list. return sum(x * x for x in numbers if x % 2 != 0)"},{"question":"Create a function that counts the number of occurrences of a specific substring within a given string. For example, the function should return 2 for the string \\"Haystack needle haystack needle\\" and the substring \\"needle\\".","solution":"def count_substring_occurrences(text, substring): Returns the number of occurrences of 'substring' in 'text'. if not substring: return 0 return text.count(substring) # Example Usage: # text = \\"Haystack needle haystack needle\\" # substring = \\"needle\\" # count = count_substring_occurrences(text, substring) # print(count) # Output: 2"},{"question":"Create a function that takes an integer as a parameter and returns the sum of all the positive divisors of that integer except itself. For example, the sum of the positive divisors of 28 is 1 + 2 + 4 + 7 + 14 = 28, but we are interested in excluding the number itself, so the result for 28 should be 28 - 28 = 0. If the number has no positive divisors other than 1, the function should return 0. If the input number is negative, the function should return -1.","solution":"def sum_positive_divisors(n): Returns the sum of all positive divisors of n, excluding itself. If n is negative, returns -1. if n <= 0: return -1 divisor_sum = sum(i for i in range(1, n) if n % i == 0) return divisor_sum"},{"question":"Create a function that takes an array and returns the sum of the square of all odd numbers in the array.","solution":"def sum_of_squares_of_odds(arr): Returns the sum of the squares of all odd numbers in the array. Parameters: arr (list of int): The array of integers. Returns: int: Sum of squares of odd numbers. return sum(x**2 for x in arr if x % 2 != 0)"},{"question":"Create a function that calculates the sum of the squares of the first \`n\` natural numbers using a mathematical formula, ensuring it handles large values of \`n\` efficiently.","solution":"def sum_of_squares(n): Returns the sum of squares of the first n natural numbers. The formula to compute this is: n * (n + 1) * (2n + 1) // 6 return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Create a function that takes a string and an integer as input and returns a new string where the original string is repeated 'n' times, where 'n' is the integer input.","solution":"def repeat_string(s, n): Returns a new string where the original string 's' is repeated 'n' times. return s * n"},{"question":"Create a function that returns the string \\"hello world\\" without using the characters 'h', 'e', 'l', 'o', 'w', 'r', 'd'.","solution":"def hello_world(): Returns the string \\"hello world\\" without using the characters 'h', 'e', 'l', 'o', 'w', 'r', 'd'. return chr(104) + chr(101) + chr(108) + chr(108) + chr(111) + ' ' + chr(119) + chr(111) + chr(114) + chr(108) + chr(100)"},{"question":"Create a function that takes in a list of integers and returns the second smallest unique number in the list. If there is no such number, return -1.","solution":"def second_smallest_unique_number(numbers): Returns the second smallest unique number in the list. If there is no such number, returns -1. unique_numbers = list(set(numbers)) unique_numbers.sort() if len(unique_numbers) < 2: return -1 return unique_numbers[1]"},{"question":"Create a function that determines whether a number is a perfect square or not. If the number is not a perfect square, return the closest perfect square less than the number. If the number is a perfect square, return the next perfect square. For example, given the number 10, the function should return 9 because 10 is not a perfect square and 9 is the closest perfect square less than 10. Given the number 12, the function should return 16 because 12 is not a perfect square and 16 is the closest perfect square greater than 12.","solution":"import math def closest_perfect_square(n): Determines whether a number is a perfect square or not. If the number is not a perfect square, returns the closest perfect square less than the number. If the number is a perfect square, returns the next perfect square. Args: n (int): The input number. Returns: int: The closest perfect square. if n < 0: raise ValueError(\\"The input number should be non-negative.\\") sqrt_n = int(math.sqrt(n)) if sqrt_n * sqrt_n == n: return (sqrt_n + 1) * (sqrt_n + 1) else: return sqrt_n * sqrt_n"},{"question":"Create a function that takes two parameters: an array of integers \`arr\` and an integer \`n\`. The function should return a new array where each element is the product of the corresponding element in \`arr\` and \`n\`. If the array \`arr\` is empty, the function should return an empty array. The function should be written in Python.","solution":"def multiply_array(arr, n): Returns a new array where each element is the product of the corresponding element in \`arr\` and \`n\`. If \`arr\` is empty, returns an empty array. Parameters: arr (list of int): The array of integers to be multiplied. n (int): The integer to multiply each element of the array. Returns: list of int: The resulting array after multiplication. return [x * n for x in arr]"},{"question":"Create a function that determines if a given number is a prime number using dynamic programming. This function should check different prime numbers up to the given number. For each checked number, if it is a prime, store it in a list for future reference. This approach can be used to efficiently check if a larger number is also prime, once all smaller primes up to the square root of the larger number have been checked.","solution":"def is_prime(n): Determines if a given number n is a prime number using dynamic programming. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False prime_list = [2, 3] i = 5 while i * i <= n: is_prime = True for p in prime_list: if p * p > i: break if i % p == 0: is_prime = False break if is_prime: prime_list.append(i) i += 2 for p in prime_list: if n % p == 0: return False return True"},{"question":"Create a function that takes a list of positive integers. The function should return True if any number is a multiple of both 3 and 5, and return False otherwise.","solution":"def multiple_of_3_and_5(lst): Returns True if any number in the list is a multiple of both 3 and 5, False otherwise. for num in lst: if num % 3 == 0 and num % 5 == 0: return True return False"},{"question":"Create a function that calculates the sum of the squares of the digits of a given number. For example, if the number is 123, the function should return 1^2 + 2^2 + 3^2 = 14.","solution":"def sum_of_squares_of_digits(number): Returns the sum of the squares of the digits of a given number. return sum(int(digit)**2 for digit in str(abs(number)))"},{"question":"Create a function that takes a list of integers and return the first number that appears an even number of times. If no such number exists, return -1. The list will not be empty.","solution":"def first_even_occurrence(arr): Returns the first number that appears an even number of times in the list. If no such number exists, returns -1. count = {} # Count the occurrences of each number for num in arr: if num in count: count[num] += 1 else: count[num] = 1 # Find the first number with an even occurrence for num in arr: if count[num] % 2 == 0: return num return -1"},{"question":"Create a function that takes in a list of integers, removes duplicates while preserving the order, and returns the new list.","solution":"def remove_duplicates(nums): Removes duplicates from a list of integers while preserving the order. Parameters: nums (list): A list of integers. Returns: list: A list of integers with duplicates removed, order preserved. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that takes a list of integers and returns a new list where each element in the new list is twice the value of the corresponding element in the input list.","solution":"def double_values(input_list): Returns a new list where each element is twice the value of the corresponding element in the input list. Args: input_list (list): A list of integers. Returns: list: A new list with each element doubled. return [2 * x for x in input_list]"},{"question":"Create a function that takes a string as a parameter and outputs the character that appears most frequently in the string. If the string contains multiple characters that appear with the same highest frequency, return all of them in a sorted list.","solution":"def most_frequent_characters(s): Returns the character(s) that appear most frequently in the string. If multiple characters have the same maximum frequency, return them sorted in a list. from collections import Counter if not s: return [] # Count the frequency of each character in the string frequency = Counter(s) # Find the highest frequency max_freq = max(frequency.values()) # Find all characters that have the highest frequency most_freq_chars = [char for char, count in frequency.items() if count == max_freq] return sorted(most_freq_chars)"},{"question":"Create a function that takes an integer and a list of integers, and returns a list of integers that contains all numbers from the list that are divisible by the given integer.","solution":"def divisible_by(n, lst): Returns a list of numbers from lst that are divisible by n. Parameters: n (int): The integer to check divisibility by. lst (list): List of integers. Returns: list: List of integers divisible by n. return [x for x in lst if x % n == 0]"},{"question":"Create a function that generates all possible subsets of a given list of numbers using recursion. The function should take a list as input and return a list of lists, where each inner list is a possible subset of the input list.","solution":"def generate_subsets(nums): Generate all possible subsets of a given list of numbers using recursion. :param nums: List of numbers :return: List of lists, where each inner list is a possible subset of the input list result = [] def backtrack(start, path): # Add the current subset to the result result.append(path) # Try adding the next element to the current subset for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"Create a function that takes an integer as an input and returns the number represented as a string but with no leading or trailing zeros.","solution":"def remove_leading_trailing_zeros(n): Returns the input number as a string with no leading or trailing zeros. If the input is zero, it returns \\"0\\". # convert the integer to string n_str = str(n) # strip leading and trailing zeros stripped = n_str.strip('0') # if the string is empty after stripping, that means the input was 0 if stripped == \\"\\": return \\"0\\" return stripped"},{"question":"Create a function that takes an integer as input and returns the largest and smallest digits in the integer. The function should return a tuple containing the smallest and largest digits. If the input is not an integer or if the integer is negative, the function should return \`(None, None)\`.","solution":"def find_largest_and_smallest_digits(n): Returns a tuple containing the smallest and largest digits in an integer n. If the input is not an integer or if n is negative, returns (None, None). if not isinstance(n, int) or n < 0: return (None, None) digits = [int(d) for d in str(n)] return (min(digits), max(digits))"},{"question":"Create a function that takes a list of integers as input and returns the largest sum of a contiguous subarray. This function should have a time complexity of O(n) using Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the largest sum of a contiguous subarray using Kadane's Algorithm. if not nums: return 0 # Initialize current and global maximums max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a positive integer \`n\` as input and returns a list of all prime numbers less than \`n\`. Use the Sieve of Eratosthenes algorithm for finding prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that takes two numbers, \`base\` and \`height\`, and returns the area of a triangle. If the \`base\` or \`height\` is less than 0, the function should return -1 to signify an invalid input.","solution":"def triangle_area(base, height): Returns the area of a triangle given the base and height. If base or height is less than 0, returns -1 to signify invalid input. if base < 0 or height < 0: return -1 return 0.5 * base * height"},{"question":"Create a function that takes two strings, a and b, and returns the longest common subsequence (LCS) of a and b. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous, in both strings. Return the length of the LCS, not the subsequence itself.","solution":"def longest_common_subsequence(a, b): Returns the length of the longest common subsequence of strings a and b. n = len(a) m = len(b) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i-1] == b[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[n][m]"},{"question":"Create a function that identifies and prints all prime numbers below a given number n.","solution":"def print_primes_below(n): Identifies and prints all prime numbers below the given number n. if n <= 2: return [] primes = [] for i in range(2, n): is_prime = True for j in range(2, int(i ** 0.5) + 1): if i % j == 0: is_prime = False break if is_prime: primes.append(i) return primes"},{"question":"Create a function that , given a string, checks whether the string is a valid palindrome (i.e., it reads the same backward as forward). A palindrome is case sensitive. Examples of palindromes include \\"racecar\\" and \\"Madam\\" (though \\"Madam\\" is not considered a valid palindrome due to case sensitivity).","solution":"def is_palindrome(s): Check if the given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (case sensitive). :param s: String to be checked :return: True if s is a palindrome, False otherwise return s == s[::-1]"},{"question":"Create a function that takes a string as an input and returns the most common letter in the string. If there are multiple letters with the same highest frequency, return all of them in alphabetical order.","solution":"def most_common_letter(s): Returns the most common letter(s) in the string. If there are multiple letters with the same highest frequency, it returns them in alphabetical order. from collections import Counter import string # Filter out non-letter characters and convert to lower case letters = [char for char in s.lower() if char in string.ascii_lowercase] # Count frequency of each letter letter_counts = Counter(letters) if not letter_counts: return \\"\\" # Get the maximum frequency max_freq = max(letter_counts.values()) # Find all letters with the maximum frequency most_common = [letter for letter, count in letter_counts.items() if count == max_freq] # Sort the list in alphabetical order most_common.sort() return ''.join(most_common)"},{"question":"Create a function that receives a string, counts the number of vowels and consonants, and prints the counts. The function should ignore case sensitivity and spaces.","solution":"def count_vowels_and_consonants(s): Counts the number of vowels and consonants in the input string s. Ignores case sensitivity and spaces. Parameters: s (str): The input string to count vowels and consonants from. Returns: tuple: A tuple containing the number of vowels and consonants. vowels = set(\\"aeiou\\") s = s.lower().replace(\\" \\", \\"\\") vowels_count = sum(1 for char in s if char in vowels) consonants_count = len([char for char in s if char.isalpha() and char not in vowels]) return vowels_count, consonants_count"},{"question":"Create a function that takes in a list of integers, and returns a new list with each integer element increased by one.","solution":"def increment_list(numbers): Takes a list of integers and returns a new list with each integer increased by one. :param numbers: List[int] - list of integers :return: List[int] - new list with each integer increased by one return [number + 1 for number in numbers]"},{"question":"Create a function that takes two parameters: a string and an integer. The function should return the string repeated n times, with a space between each repetition. The function should handle the case where the integer is less than or equal to zero by returning an empty string. Can you implement this?","solution":"def repeat_string(s, n): Repeats the string \`s\` \`n\` times with a space between each repetition. If \`n\` is less than or equal to zero, returns an empty string. :param s: The string to be repeated. :param n: The number of times to repeat the string. :return: The repeated string with spaces, or an empty string if \`n\` <= 0. if n <= 0: return \\"\\" return (s + \\" \\") * (n - 1) + s"},{"question":"Create a function that takes two integers, \`base\` and \`exponent\`, and returns the result of raising the \`base\` to the given \`exponent\`. The function should handle large numbers efficiently and should be able to handle negative exponents as well.","solution":"def power(base, exponent): Returns the result of raising the base to the given exponent. Handles large numbers and negative exponents efficiently. return base ** exponent"},{"question":"Create a function that takes a list of integers and returns a new list with all the even numbers from the original list. If the original list contains no even numbers, return a list containing a single element: \`[-1]\`.","solution":"def filter_even_numbers(numbers): Returns a list of all even numbers from the input list. If no even numbers are found, returns [-1]. :param numbers: List of integers :returns: List of even integers or [-1] if none found even_numbers = [num for num in numbers if num % 2 == 0] return even_numbers if even_numbers else [-1]"},{"question":"Create a function that takes a string as an argument and returns the number of times the string \\"a\\" appears in the string. Assume the string is lowercase and does not contain any special characters.","solution":"def count_a(string): Returns the number of times the letter 'a' appears in the string. return string.count('a')"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string. Output should be in little-endian format.","solution":"def to_little_endian_binary(n): Returns the binary representation of an integer in little-endian format. # Get the binary representation without the '0b' prefix binary_representation = bin(n)[2:] # Reverse the binary string to get little-endian format little_endian_binary = binary_representation[::-1] return little_endian_binary"},{"question":"Create a function that takes an array of integers as input and returns the length of the longest palindromic subsequence in the array.","solution":"def longest_palindromic_subsequence(arr): Returns the length of the longest palindromic subsequence in the array. def lps(seq, i, j): # Base case: if there is only one character if i == j: return 1 # Base case: if there are only two characters and both are same if seq[i] == seq[j] and i + 1 == j: return 2 # If the first and last characters match if seq[i] == seq[j]: return lps(seq, i + 1, j - 1) + 2 # If the first and last characters do not match return max(lps(seq, i, j - 1), lps(seq, i + 1, j)) return lps(arr, 0, len(arr) - 1)"},{"question":"Create a function that takes two lists and returns a list containing the elements that are common to both lists, with no duplicates.","solution":"def common_elements(list1, list2): Returns a list containing the elements that are common to both lists, with no duplicates. # Convert lists to sets to remove duplicates set1 = set(list1) set2 = set(list2) # Find common elements using intersection common = set1.intersection(set2) # Convert the set back to a list return list(common)"},{"question":"Create a function that calculates the average of three numbers. Ensure that the function can handle any input type, but if any of the inputs is not a number, the function should return the string \\"Invalid Inputs\\".","solution":"def average_of_three(a, b, c): Returns the average of three numbers. If any input is not a number, returns \\"Invalid Inputs\\". try: return (a + b + c) / 3 except TypeError: return \\"Invalid Inputs\\""},{"question":"Create a function that checks whether a given number is a prime number. A prime number is one that has only two distinct divisors: 1 and itself. If the number is a prime, return \\"Prime\\", otherwise return \\"Not a prime\\".","solution":"def is_prime(n): Checks whether a given number is a prime number. Returns \\"Prime\\" if the number is a prime, otherwise returns \\"Not a prime\\". if n <= 1: return \\"Not a prime\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Not a prime\\" for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return \\"Not a prime\\" return \\"Prime\\""},{"question":"Create a function that receives an AList (a function-based linked list in Python that represents a list data structure), and returns a list of all the elements contained in the AList.","solution":"class AList: A simple class-based implementation of a linked list. def __init__(self): self.head = None class Node: def __init__(self, data): self.data = data self.next = None def append(self, data): Appends a new node with the given data to the end of the list. if not self.head: self.head = AList.Node(data) else: current = self.head while current.next: current = current.next current.next = AList.Node(data) def alist_to_list(alist): Converts an AList instance to a regular Python list. Parameters: alist (AList): The AList instance to convert. Returns: list: A list containing all the elements in the AList. result = [] current = alist.head while current: result.append(current.data) current = current.next return result"},{"question":"Create a function that determines the minimum value among three given integers.","solution":"def find_minimum(a, b, c): Returns the minimum value among three given integers a, b, and c. return min(a, b, c)"},{"question":"Create a function that replaces a given character in a string with a specified replacement string, similar to the \`str.replace\` method, but returns a new string with the replacements.","solution":"def replace_char(s, old, new): Replaces all occurrences of the character \`old\` in the string \`s\` with the string \`new\` and returns the resulting string. :param s: The original string :param old: The character to be replaced :param new: The replacement string :return: A new string with the replacements if not old: # If old is empty string, return the original string return s result = [] for char in s: if char == old: result.append(new) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a string \`s\` as an input and returns the number of vowels in it. Vowels are the letters 'a', 'e', 'i', 'o', and 'u', both uppercase and lowercase. Ignore any special characters or numbers in the string.","solution":"def count_vowels(s): Returns the number of vowels in the given string. Arguments: s -- input string Returns: count -- number of vowels vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Create a function that generates all possible paths from the root to all leaf nodes in a binary tree. The function should return a list of lists representing each path.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def binary_tree_paths(root): Returns all paths from the root to all leaf nodes in a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: List[List[int]]: A list of paths, where each path is a list of integers representing node values. def construct_paths(node, path): if node: path.append(node.val) if not node.left and not node.right: # if leaf node paths.append(list(path)) else: construct_paths(node.left, path) construct_paths(node.right, path) path.pop() paths = [] construct_paths(root, []) return paths"},{"question":"Create a function that takes a number as input and returns a string in binary format.","solution":"def to_binary(n): Converts an integer to its binary representation as a string. Parameters: n (int): The integer to convert to binary. Returns: str: The binary representation of the integer. if isinstance(n, int): return bin(n)[2:] if n >= 0 else '-' + bin(n)[3:] else: raise ValueError(\\"Input must be an integer.\\")"},{"question":"Create a function that takes two lists as input and returns a new list containing the common elements of both lists without duplicates.","solution":"def common_elements(list1, list2): Returns a list containing the common elements of list1 and list2 without duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that takes a string of lowercase letters separated by spaces and returns the count of each unique letter. The function should return the result as a string where the letters are sorted alphabetically and each letter is followed by its frequency in parentheses.","solution":"def count_unique_letters(s): Takes a string of lowercase letters separated by spaces and returns the count of each unique letter. The result is returned as a string where the letters are sorted alphabetically and each letter is followed by its frequency in parentheses. from collections import Counter # Removing spaces and counting the frequency of each letter s = s.replace(' ', '') letter_count = Counter(s) # Sorting alphabetically and formatting the output sorted_letters = sorted(letter_count.items()) result = ''.join(f\\"{letter}({count})\\" for letter, count in sorted_letters) return result"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of prime numbers less than \`n\`. The function should be efficient and optimal for large values of \`n\`.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers less than n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * n is_prime[0] = is_prime[1] = False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n, start): is_prime[multiple] = False return [num for num in range(n) if is_prime[num]]"},{"question":"Create a function that takes in a list of integers as a parameter and returns the sum of all the even numbers in the list, excluding any duplicate numbers.","solution":"def sum_unique_even_numbers(numbers): Returns the sum of all unique even numbers in the given list. unique_numbers = set(numbers) return sum(num for num in unique_numbers if num % 2 == 0)"},{"question":"Create a function that takes a string as input and outputs whether or not the string is a palindrome using a recursive approach in Python.","solution":"def is_palindrome_recursive(s): Returns True if the input string s is a palindrome, otherwise False. This function uses a recursive approach. # Clean the string by removing non-alphanumeric characters and converting to lowercase s = ''.join(c for c in s if c.isalnum()).lower() def helper(start, end): if start >= end: return True if s[start] != s[end]: return False return helper(start + 1, end - 1) return helper(0, len(s) - 1)"},{"question":"Create a function that converts a string to a base36 string. Base36 uses digits and lowercase letters a-z.","solution":"def to_base36(num): Converts an integer to a base36 string. Base36 uses digits 0-9 and lowercase letters a-z. if not isinstance(num, int): raise TypeError(\\"Input must be an integer.\\") if num < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if num == 0: return '0' base36 = [] while num: num, rem = divmod(num, 36) base36.append(\\"0123456789abcdefghijklmnopqrstuvwxyz\\"[rem]) return ''.join(reversed(base36))"},{"question":"Create a function that calculates the sum of the squares of the first n natural numbers using mathematical formula and check its correctness with the help of a few test cases.","solution":"def sum_of_squares(n): Calculates the sum of the squares of the first n natural numbers. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Create a function that converts a given string to Pig Latin. What is Pig Latin? How would you implement it in Python?","solution":"def pig_latin_converter(s): Converts a given string to Pig Latin. - For words that begin with a vowel, add \\"way\\" to the end. - For words that begin with a consonant, remove the first letter, place it at the end of the word, and then add \\"ay\\". vowels = \\"aeiou\\" words = s.split() pig_latin_words = [] for word in words: first_letter = word[0].lower() if first_letter in vowels: pig_latin_word = word + \\"way\\" else: pig_latin_word = word[1:] + word[0] + \\"ay\\" if word[0].isupper(): pig_latin_word = pig_latin_word.capitalize() pig_latin_words.append(pig_latin_word) return \\" \\".join(pig_latin_words)"},{"question":"Create a function that calculates the factorial of a given integer \`n\`. The function should handle cases where \`n\` is negative and return -1 for such cases, as factorial is not defined for negative numbers.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is negative, returns -1. if n < 0: return -1 elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a list of tuples, each containing two integers, and returns a new list of tuples where each tuple is the sum of the corresponding elements in the original tuples.","solution":"def sum_tuples(tuple_list): Returns a new list of tuples where each tuple is the sum of the corresponding elements in the original tuples. Parameters: tuple_list (list of tuples): A list containing tuples, each with two integers. Returns: list of tuples: A new list containing tuples with summed elements. return [(a + x, b + y) for (a, b), (x, y) in zip(tuple_list[::2], tuple_list[1::2])]"},{"question":"Create a function that takes an integer \`n\` and returns the sum of all prime numbers less than \`n\` using Python.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes_less_than(n): Returns the sum of all prime numbers less than n. sum_primes = 0 for num in range(2, n): if is_prime(num): sum_primes += num return sum_primes"},{"question":"Create a function that finds the minimum value in a nested list of integers. The nested list can contain other nested lists or integers, but will not contain any other data types. For example, it can be something like \`[[1, 2], [3, [4, 5]], [6]]\`.","solution":"def find_min_in_nested_list(nested_list): Finds the minimum value in a nested list of integers. The nested list can contain other nested lists or integers but will not contain any other data types. Args: - nested_list (list): A nested list of integers. Returns: - int: The minimum value found in the nested list. def recurse_min(lst): min_val = float('inf') # Initialize to infinity for ele in lst: if isinstance(ele, list): min_val = min(min_val, recurse_min(ele)) else: min_val = min(min_val, ele) return min_val return recurse_min(nested_list)"},{"question":"Create a function that can parse text and extract a list of dates from it. The dates should be in the format 'YYYY-MM-DD'. The function should be able to handle variations in date formatting, such as 'MM/DD/YYYY', 'DD-MM-YYYY', and 'YYYY/MM/DD'.","solution":"import re def extract_dates(text): Extracts dates from a given text and returns them in the format 'YYYY-MM-DD'. Supports date formats: 'MM/DD/YYYY', 'DD-MM-YYYY', and 'YYYY/MM/DD'. date_patterns = [ r'(?P<year>d{4})[-/](?P<month>d{2})[-/](?P<day>d{2})', # Matches YYYY/MM/DD or YYYY-MM-DD r'(?P<month>d{2})/(?P<day>d{2})/(?P<year>d{4})', # Matches MM/DD/YYYY r'(?P<day>d{2})-(?P<month>d{2})-(?P<year>d{4})' # Matches DD-MM-YYYY ] dates = [] for pattern in date_patterns: for match in re.finditer(pattern, text): year = match.group('year') month = match.group('month') day = match.group('day') dates.append(f\\"{year}-{month}-{day}\\") return dates"},{"question":"Create a function that accepts a date as a parameter in any date format (like '2022-01-01' or '2022/01/01' or 'April 14, 2020') and converts it into a standardized ISO 8601 format ('YYYY-MM-DD').","solution":"from dateutil import parser def convert_to_iso(date_str): Converts a date string in various formats to ISO 8601 format (YYYY-MM-DD). :param date_str: str, date in various formats :return: str, date in ISO 8601 format try: date_obj = parser.parse(date_str) return date_obj.strftime('%Y-%m-%d') except ValueError: return \\"Invalid date format\\""},{"question":"Create a function that generates an English sentence describing the number of people who died on September 11th, 2001, based on the given input. The function should take the number of people as an input and return a string stating \\"On September 11th, 2001, <number> people died.\\" If the number is 1, it should return \\"On September 11th, 2001, 1 person died.\\"","solution":"def describe_deaths(number): Generates a sentence describing the number of people who died on September 11th, 2001. Parameters: number (int): The number of people who died. Returns: str: A sentence describing the number of people who died. if number == 1: return \\"On September 11th, 2001, 1 person died.\\" else: return f\\"On September 11th, 2001, {number} people died.\\""},{"question":"Create a function that takes two lists as input and returns the common elements present in both lists. If one or both lists are empty, the function should return an empty list.","solution":"def common_elements(list1, list2): Returns a list of common elements present in both input lists. If one or both lists are empty, returns an empty list. if not list1 or not list2: return [] # Convert both lists to sets to find the intersection set1 = set(list1) set2 = set(list2) # Find common elements common = list(set1.intersection(set2)) return common"},{"question":"Create a function that takes a string input and returns the number of vowels in the string. The vowels are \\"aeiou\\" and the function should be case-insensitive.","solution":"def count_vowels(s): Returns the number of vowels in the string s. The vowels are \\"aeiou\\" and the function is case-insensitive. vowels = \\"aeiou\\" return sum(1 for char in s.lower() if char in vowels)"},{"question":"Create a function that converts a given integer to its binary representation as a string. The function should handle both positive and negative integers, and include a sign bit for negative numbers. The solution should include a comprehensive docstring explaining the function, its parameters, and its return value.","solution":"def int_to_binary(n): Converts a given integer to its binary representation as a string. Includes a sign bit for negative numbers. Parameters: n (int): The integer to be converted to binary. Returns: str: The binary representation of the integer as a string. if n == 0: return \\"0\\" elif n > 0: return bin(n)[2:] else: return '-' + bin(-n)[2:]"},{"question":"Create a function that takes a string input and returns the longest substring that contains exactly \`k\` distinct characters. If no such substring exists, return an empty string.","solution":"def longest_substring_with_k_distinct(s, k): Returns the longest substring with exactly k distinct characters. If no such substring exists, returns an empty string. if k == 0 or not s: return \\"\\" start = 0 max_length = 0 max_substr = \\"\\" char_frequency = {} for end in range(len(s)): char = s[end] if char in char_frequency: char_frequency[char] += 1 else: char_frequency[char] = 1 while len(char_frequency) > k: start_char = s[start] char_frequency[start_char] -= 1 if char_frequency[start_char] == 0: del char_frequency[start_char] start += 1 if len(char_frequency) == k and end - start + 1 > max_length: max_length = end - start + 1 max_substr = s[start:end+1] return max_substr"},{"question":"Create a function that takes a sentence as an input and returns the number of words in the sentence. A word is defined as a sequence of characters separated by spaces. Assume that there can be leading, trailing, and multiple consecutive spaces between words.","solution":"def count_words(sentence): Returns the number of words in the given sentence. A word is defined as a sequence of characters separated by spaces. # Split the sentence by spaces and filter out empty strings words = [word for word in sentence.split(' ') if word] return len(words)"},{"question":"Create a function that takes an array of integers and returns the integer that appears most frequently in the array.","solution":"def most_frequent_integer(arr): Returns the integer that appears most frequently in the array. If multiple integers have the same frequency, the smallest one is returned. from collections import Counter if not arr: raise ValueError(\\"The array should not be empty\\") # Count the frequency of each number in the array counter = Counter(arr) # Find the number with the highest frequency most_frequent = max(counter.items(), key=lambda x: (x[1], -x[0]))[0] return most_frequent"},{"question":"Create a function that returns the count of the number of positive integers in a given list.","solution":"def count_positive_integers(lst): Returns the count of positive integers in the given list. Parameters: lst (list): The list containing integers. Returns: int: The count of positive integers in the list. return sum(1 for x in lst if x > 0)"},{"question":"Create a function that returns the last element of an array if the array length is odd. If the array length is even, return the second last element. If the array is empty, return \\"Array is empty\\". If the array contains only one element, return that element.","solution":"def last_or_second_last(arr): Returns the last element of the array if the length is odd, the second last element if the length is even, \\"Array is empty\\" if the array is empty, or the only element if the array contains one element. if len(arr) == 0: return \\"Array is empty\\" elif len(arr) == 1: return arr[0] elif len(arr) % 2 == 0: return arr[-2] else: return arr[-1]"},{"question":"Create a function that calculates the factorial of a given number using recursion. Provide a detailed explanation of each step involved in the function.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. # Detailed explanation: # Step 1: Check the base case. # If n is 0 or 1, the factorial is 1 (by definition of factorial). if n == 0 or n == 1: return 1 # Step 2: Recursive case. # The factorial of n (n!) is n times the factorial of (n-1) (n! = n * (n-1)!). # This is where the recursive call happens. else: return n * factorial(n - 1)"},{"question":"Create a function that takes a string as an argument and returns the string in reverse order. Consider only alphabetic characters and ignore spaces and punctuation. For example, \\"Hello, World!\\" should return \\"dlroW olleH\\".","solution":"def reverse_only_alphabetic(s): Returns the string with only alphabetic characters in reverse order, ignoring spaces and punctuation. # Filter out non-alphabetic characters and reverse the resulting string filtered = ''.join([char for char in s if char.isalpha()]) return filtered[::-1]"},{"question":"Create a function that will print the reverse of a given integer without using any loops, recursion, or string conversion.","solution":"def reverse_integer(n): Returns the reverse of a given integer without using loops, recursion, or string conversion. The function works by using mathematical operations alone. # Using the mathematical approach to reverse the integer reversed_num = 0 sign = 1 if n > 0 else -1 # Capture the sign of the number n = abs(n) while n > 0: last_digit = n % 10 reversed_num = reversed_num * 10 + last_digit n = n // 10 return reversed_num * sign"},{"question":"Create a function that reads an input of type \`string\` and returns the count of words in the string. You should consider a word as any sequence of characters separated by spaces.","solution":"def count_words(input_string): Returns the count of words in the input string. A word is defined as any sequence of characters separated by spaces. if not input_string: return 0 words = input_string.split() return len(words)"},{"question":"Create a function that , given a number n, returns if n is a prime number or not.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes a string as input and returns a tuple containing the string in reverse order and a count of the number of vowels in the string. The function should consider both uppercase and lowercase vowels.","solution":"def reverse_and_count_vowels(input_string): Returns a tuple containing the string in reverse order and the count of vowels in the string. Parameters: - input_string (str): The string to be processed. Returns: - tuple: A tuple where the first element is the reversed string and the second element is the count of vowels. vowels = set(\\"aeiouAEIOU\\") reversed_string = input_string[::-1] vowel_count = sum(1 for char in input_string if char in vowels) return (reversed_string, vowel_count)"},{"question":"Create a function that takes a year as input and returns the century it belongs to. For example, if the year is 500 it should return 5, and if the year is 2004 it should return 21. If the year is 1996 it should return 20.","solution":"def year_to_century(year): Given a year, returns the century it belongs to. :param year: The year as an integer. :return: The century as an integer. return (year + 99) // 100"},{"question":"Create a function that takes an integer n and an integer d, and returns the result of n raised to the power of d.","solution":"def power(n, d): Returns n raised to the power of d. return n ** d"},{"question":"Create a function that takes a string of space-separated numbers and returns a list of those numbers as floats.","solution":"def string_to_float_list(s): Converts a space-separated string of numbers into a list of floats. Parameters: s (str): The input string of space-separated numbers. Returns: list: A list of floats. return [float(num) for num in s.split()]"},{"question":"Create a function that takes in two arrays of equal length and returns their element-wise sum.","solution":"def elementwise_sum(arr1, arr2): Returns the element-wise sum of two arrays. Parameters: arr1 (list of int/float): First array. arr2 (list of int/float): Second array. Returns: list of int/float: Element-wise sum of arr1 and arr2. Raises: ValueError: If the input arrays are not of the same length. if len(arr1) != len(arr2): raise ValueError(\\"Arrays must be of the same length.\\") return [a + b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that takes a single integer as an input and returns the sum of all positive integers less than that input. However, ensure the function does not directly use the arithmetic operation \`+\`.","solution":"def sum_positive_integers(n): This function takes a single integer \`n\` and returns the sum of all positive integers less than \`n\`. It does not use the direct \`+\` operator for summation. if n <= 1: return 0 total = 0 for i in range(1, n): total = total - (-i) # using subtraction to simulate addition return total"},{"question":"Create a function that takes a list of strings and returns a new list with the first letter of each string converted to uppercase and the rest of the letters converted to lowercase. This function should handle cases where the input list contains strings with mixed case letters.","solution":"def capitalize_strings(string_list): Given a list of strings, returns a list with each string having its first letter capitalized and the rest of the letters in lowercase. :param string_list: List of strings :return: List of capitalized strings return [s.capitalize() for s in string_list]"},{"question":"Create a function that takes an array of integers and returns a new array of the same size that contains the maximum value from the first i elements of the original array, for each i from 0 to n-1.","solution":"def max_prefix_array(arr): Returns a new array where each element at index i is the maximum value from the first i elements of the original array. Parameters: arr: list of integers Returns: list of integers if not arr: return [] result = [arr[0]] current_max = arr[0] for i in range(1, len(arr)): current_max = max(current_max, arr[i]) result.append(current_max) return result"},{"question":"Create a function that takes a list of dictionaries and returns the first dictionary that contains the specified key and value. If no such dictionary is found, return \`None\`.","solution":"def find_dict_with_key_value(lst, key, value): Returns the first dictionary in the list that contains the specified key and value. If no such dictionary is found, returns None. for dictionary in lst: if dictionary.get(key) == value: return dictionary return None"},{"question":"Create a function that returns the number of distinct elements in an array that are greater than a specified value.","solution":"def count_elements_greater_than(arr, value): Returns the number of distinct elements in an array that are greater than a specified value. :param arr: List of elements :param value: The threshold value :return: Number of distinct elements greater than the specified value return len(set(filter(lambda x: x > value, arr)))"},{"question":"Create a function that takes a string as input and returns a boolean indicating whether or not the string is a valid palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Here is an example of a palindrome: \\"racecar\\".","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, False otherwise. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. # Normalize the string: remove non-alphanumeric characters and lower the case s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() return s == s[::-1]"},{"question":"Create a function that takes a list of integers as an argument and returns a new list containing the square roots of each number. The function should handle negative numbers by returning \`None\` for those indices in the output list.","solution":"import math def square_roots(numbers): Takes a list of integers and returns a new list containing the square roots of each number. For negative numbers, it returns None. :param numbers: List of integers :return: List of square roots or None for negative numbers return [math.sqrt(num) if num >= 0 else None for num in numbers]"},{"question":"Create a function that takes a list of integers and returns a new list containing only the numbers that are greater than the average of the original list.","solution":"def numbers_greater_than_average(lst): Returns a list of numbers from the input list that are greater than the average of the list. Parameters: lst (list of int): The list of integers to process. Returns: list of int: A new list containing numbers greater than the average. if not lst: return [] average = sum(lst) / len(lst) return [num for num in lst if num > average]"},{"question":"Create a function that takes in a list of integers and returns a new list where all the integers are converted to their string representation. You should use list comprehension for this task.","solution":"def int_list_to_str_list(int_list): Converts a list of integers to a list of their string representations. Parameters: int_list (list): A list of integers. Returns: list: A list of strings representing the integers. return [str(num) for num in int_list]"},{"question":"Create a function that takes two arguments, a list and an integer n, and returns the sum of the first n elements in the list. If n is greater than the length of the list, return the sum of all elements in the list.","solution":"def sum_first_n_elements(lst, n): Returns the sum of the first n elements in the list. If n is greater than the length of the list, returns the sum of all elements in the list. return sum(lst[:n])"},{"question":"Create a function that generates a frequency distribution table in Python. The function should take a list of elements and return a dictionary where the keys are the elements and the values are the counts of each element in the list.","solution":"def frequency_distribution(elements): Returns a frequency distribution table (as a dictionary) of the elements in the list. Args: elements (list): A list of elements. Returns: dict: A dictionary where keys are elements and values are their counts in the list. distribution = {} for element in elements: if element in distribution: distribution[element] += 1 else: distribution[element] = 1 return distribution"},{"question":"Create a function that takes a list of integers and returns the sum of the first and last elements of the list. If the list is empty, the function should return None. If the list has only one element, return that element.","solution":"def sum_first_last(lst): Returns the sum of the first and last elements of the list. If the list is empty, return None. If the list has only one element, return that element. if not lst: return None if len(lst) == 1: return lst[0] return lst[0] + lst[-1]"},{"question":"Create a function that takes three lists as an input: the first list is a set ofDiscountRates, the second list is a set of productIDs, and the third list is a set of productPrices per productID. Create a dictionary with productIDs as keys and their discounted price as values, with the discount rate applied to the product price. Return the dictionary.","solution":"def calculate_discounted_prices(DiscountRates, productIDs, productPrices): Returns a dictionary with productIDs as keys and their discounted price as values. Parameters: DiscountRates (list of float): Discount rates to apply to each product in percentages (0-100). productIDs (list of str): List of product IDs. productPrices (list of float): List of product prices corresponding to the product IDs. Returns: dict: Dictionary with productIDs as keys and their discounted price as values. discounted_prices = {} for discount, productID, price in zip(DiscountRates, productIDs, productPrices): discounted_price = price * (1 - discount / 100) discounted_prices[productID] = round(discounted_price, 2) # Rounded to 2 decimal places return discounted_prices"},{"question":"Create a function that takes three parameters: an integer value, a string, and a list of integers. The function will compare the integer value with each integer in the list and return the string if all the integers in the list are greater than or equal to the integer value.","solution":"def compare_and_return(integer_value, string_value, integer_list): Compares the integer_value with each integer in the integer_list. Returns the string_value if all integers in the list are greater than or equal to the integer_value. for num in integer_list: if num < integer_value: return None return string_value"},{"question":"Create a function that takes two lists, \`lst1\` and \`lst2\`, and returns a new list that contains only the unique elements from both lists. The function should ensure that the order of elements in the returned list is the same as their order of first appearance in \`lst1\` followed by their first appearance in \`lst2\`.","solution":"def unique_elements_from_lists(lst1, lst2): Returns a new list containing only the unique elements from both lst1 and lst2, with the order of elements preserved as their first appearances in lst1 followed by lst2. seen = set() result = [] for lst in (lst1, lst2): for elem in lst: if elem not in seen: seen.add(elem) result.append(elem) return result"},{"question":"Create a function that takes an input list and returns whether the list is sorted in ascending order or not.","solution":"def is_sorted_ascending(input_list): Returns True if the input_list is sorted in ascending order, otherwise False. for i in range(len(input_list) - 1): if input_list[i] > input_list[i + 1]: return False return True"},{"question":"Create a function that calculates the sum of all numbers from 1 to n using recursion. Here, n is a positive integer. Return the result from the function.","solution":"def recursive_sum(n): Returns the sum of all numbers from 1 to n using recursion. if n == 1: return 1 else: return n + recursive_sum(n - 1)"},{"question":"Create a function that takes a string input and returns the length of the longest consecutive character sequence that appears more than once in the string. If there is no such sequence, return 0.","solution":"def longest_repeated_consecutive_sequence(s): Returns the length of the longest consecutive character sequence that appears more than once in the string. If there is no such sequence, return 0. n = len(s) if n == 0: return 0 longest_length = 0 for i in range(n): for j in range(i + 1, n): length = 1 while j + length <= n and s[i:i+length] == s[j:j+length]: longest_length = max(longest_length, length) length += 1 return longest_length"},{"question":"Create a function that takes an array of integers and returns an array of integers where each integer is the product of all the integers in the input array except for the integer at the same index. For example, if the input is [1, 2, 3, 4], the output should be [24, 12, 8, 6].","solution":"def product_array(arr): Given an array of integers, returns a new array where each element is the product of all the integers in the input array except the integer at the same index. :param arr: List of integers :return: List of integers if len(arr) == 0: return [] n = len(arr) result = [1] * n # Create an array to store the prefix products prefix_products = [1] * n prefix_products[0] = arr[0] for i in range(1, n): prefix_products[i] = prefix_products[i-1] * arr[i] # Create an array to store the suffix products suffix_products = [1] * n suffix_products[-1] = arr[-1] for i in range(n-2, -1, -1): suffix_products[i] = suffix_products[i+1] * arr[i] # Calculate the result array where result[i] = prefix_products[i-1] * suffix_products[i+1] for i in range(n): prefix = prefix_products[i-1] if i > 0 else 1 suffix = suffix_products[i+1] if i < n-1 else 1 result[i] = prefix * suffix return result"},{"question":"Create a function that returns \`None\` if the value is not an integer. If the value is an integer, return \`True\` if the integer is even, and \`False\` for odd numbers.","solution":"def check_even_or_none(value): Returns None if value is not an integer. Returns True if the integer is even. Returns False if the integer is odd. if not isinstance(value, int): return None return value % 2 == 0"},{"question":"Create a function that takes a string as input and returns the first non-repeating character in the string. If all characters in the string repeat, the function should return \`None\`. The function should be case-insensitive. For example, if the input is \\"aabbc\\", the function should return \\"c\\".","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string. The search is case-insensitive. If all characters repeat, the function returns None. s = s.lower() char_count = {} # Counting the frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Finding the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"Create a function that takes 3 arguments - data (a list of numbers), a lower bound (a number), and an upper bound. The function should return a list containing only numbers from the data list that fall within the given range (inclusive).","solution":"def filter_numbers_in_range(data, lower_bound, upper_bound): Filters the numbers in the data list to include only those within the range [lower_bound, upper_bound]. Args: data (list of numbers): The list of numbers to filter. lower_bound (number): The lower bound of the range. upper_bound (number): The upper bound of the range. Returns: list of numbers: A list containing only numbers within the specified range. return [num for num in data if lower_bound <= num <= upper_bound]"},{"question":"Create a function that reverses a string using recursion in Python. What is the time complexity of this function?","solution":"def reverse_string_recursive(s): Reverses a string using recursion. if len(s) == 0: # Base case: an empty string is already reversed return s else: return s[-1] + reverse_string_recursive(s[:-1]) # The time complexity of this function is O(n) where n is the length of the string."},{"question":"Create a function that accepts two parameters, an integer \`n\` and a list. The function should check if \`n\` is a multiple of any element in the list. If \`n\` is a multiple of any element, return \`True\`. If \`n\` is not a multiple of any element, return \`False\`.","solution":"def is_multiple(n, lst): Checks if n is a multiple of any element in the list lst. Parameters: n (int): The integer to check. lst (list): The list of integers to check against. Returns: bool: True if n is a multiple of any element in lst, False otherwise. for element in lst: if element != 0 and n % element == 0: return True return False"},{"question":"Create a function that takes a string as an argument and returns the string reversed. If the input string is empty, the function should return an empty string. Additionally, handle the scenario where the input string could contain special characters and numbers.","solution":"def reverse_string(s): Returns the reversed string of the input string s. If the input string is empty, return an empty string. :param s: Input string to be reversed :return: Reversed string return s[::-1]"},{"question":"Create a function that takes in a list of integers and returns the first pair of integers that sum up to a given target. If no such pair exists, return an empty array.","solution":"def find_pair_with_sum(nums, target): Returns the first pair of integers in the list that sum up to the given target. If no such pair exists, returns an empty list. Parameters: nums (list): The list of integers. target (int): The target sum. Returns: list: A list containing the first pair of integers that sum up to the target, or an empty list. seen = set() for num in nums: complement = target - num if complement in seen: return [complement, num] seen.add(num) return []"},{"question":"Create a function that takes an integer as its argument and returns the number of factors of the number. A factor is a number that evenly divides into another number without leaving a remainder.","solution":"def count_factors(n): Returns the number of factors of the integer n. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") count = 0 for i in range(1, n + 1): if n % i == 0: count += 1 return count"},{"question":"Create a function that takes a string and returns the string with all digits removed.","solution":"def remove_digits(input_string): Removes all digits from the input string. Parameters: input_string (str): The original string with potential digits. Returns: str: The string with all digits removed. return ''.join(char for char in input_string if not char.isdigit())"},{"question":"Create a function that takes two lists of integers representing two players' scores and returns the player with the highest total score. If both players have the same total score, return \\"Tie\\".","solution":"def calculate_winner(scores_player1, scores_player2): Takes two lists of integers representing two players' scores and returns the player with the highest total score. If both players have the same total score, return \\"Tie\\". Args: scores_player1 (list of int): Scores of player 1. scores_player2 (list of int): Scores of player 2. Returns: str: \\"Player 1\\" if player 1 has the highest score, \\"Player 2\\" if player 2 has the highest score, \\"Tie\\" if both players have the same score. total_score_player1 = sum(scores_player1) total_score_player2 = sum(scores_player2) if total_score_player1 > total_score_player2: return \\"Player 1\\" elif total_score_player1 < total_score_player2: return \\"Player 2\\" else: return \\"Tie\\""},{"question":"Create a function that generates a unique identifier for a given file path. The identifier should be composed of the file name and the last modification time of the file, and should be encoded in base64.","solution":"import os import base64 def generate_file_identifier(file_path): Generates a unique identifier for the given file path. The identifier is composed of the file name and the last modification time, and is encoded in base64. Parameters: file_path (str): The path to the file. Returns: str: The base64 encoded unique identifier. if not os.path.isfile(file_path): raise FileNotFoundError(f\\"No file found at the path: {file_path}\\") file_name = os.path.basename(file_path) last_mod_time = os.path.getmtime(file_path) identifier = f\\"{file_name}_{last_mod_time}\\" encoded_identifier = base64.b64encode(identifier.encode()).decode() return encoded_identifier"},{"question":"Create a function that can validate an email address using Python. The function should return True if the email is valid and False if the email is invalid.","solution":"import re def is_valid_email(email): Validates an email address. Returns True if the email is valid, otherwise False. pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return re.match(pattern, email) is not None"},{"question":"Create a function that takes two parameters: a positive integer \`N\` and an array of integers \`arr\` of length \`N\`. The function should return the maximum sum of any contiguous subarray of \`arr\` that has a length less than or equal to 3.","solution":"def max_sum_subarray_length_le3(N, arr): Returns the maximum sum of any contiguous subarray of \`arr\` that has a length less than or equal to 3. Parameters: N (int): Length of the array \`arr\` arr (list): List of integers Returns: int: Maximum sum of any contiguous subarray of length <= 3 if N == 0: return 0 max_sum = float('-inf') # Check subarrays of length 1, 2 and 3 for i in range(N): if i < N: max_sum = max(max_sum, arr[i]) if i + 1 < N: max_sum = max(max_sum, arr[i] + arr[i + 1]) if i + 2 < N: max_sum = max(max_sum, arr[i] + arr[i + 1] + arr[i + 2]) return max_sum"},{"question":"Create a function that takes an array of strings and returns the longest string in the array. If the array is empty, return \`None\`. If there are multiple strings of the same length, return the first one encountered.","solution":"def longest_string(strings): Returns the longest string in the given list of strings. If the array is empty, returns None. If there are multiple strings of the same length, returns the first one encountered. if not strings: return None longest = strings[0] for s in strings: if len(s) > len(longest): longest = s return longest"},{"question":"Create a function that takes two integers as input and returns the sum of their absolute differences. For example, if the input is \`10\` and \`5\`, the output should be \`5\`.","solution":"def abs_diff_sum(a, b): Returns the absolute difference between two integers. return abs(a - b)"},{"question":"Create a function that converts a given string into a list of words. In Python, use the built-in string method \`split()\`. The function should handle both empty strings and strings with multiple spaces between words.","solution":"def string_to_word_list(s): Converts a given string into a list of words. Parameters: s (str): The string to be converted. Returns: list: A list of words contained in the string. return s.split()"},{"question":"Create a function that takes a string and returns the longest increasing subsequence in the string. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The function should return the longest subsequence that is in increasing lexicographical order. If there are multiple subsequences with the same length, return the lexicographically smallest one.","solution":"def longest_increasing_subsequence(s): Returns the longest increasing subsequence in the string that is in increasing lexicographical order. If there are multiple subsequences with the same length, returns the lexicographically smallest one. Parameters: s (str): The input string Returns: str: The longest increasing subsequence from bisect import bisect_left n = len(s) if n == 0: return \\"\\" # Initialize lists to keep track of previous indices and ends of increasing subsequences prev_index = [-1] * n sub_end_indices = [] sub_end_values = [] # Build the longest increasing subsequence for i in range(n): pos = bisect_left(sub_end_values, s[i]) if pos < len(sub_end_values): sub_end_values[pos] = s[i] sub_end_indices[pos] = i else: sub_end_values.append(s[i]) sub_end_indices.append(i) # Link back to the previous element in the subsequence if pos > 0: prev_index[i] = sub_end_indices[pos - 1] # Reconstruct the longest increasing subsequence lis = [] k = sub_end_indices[-1] while k != -1: lis.append(s[k]) k = prev_index[k] return \\"\\".join(lis[::-1])"},{"question":"Create a function that checks if all the elements in an array are equal.","solution":"def all_elements_equal(arr): Returns True if all elements in the array are equal, otherwise False. if not arr: return True return all(x == arr[0] for x in arr)"},{"question":"Create a function that takes a list of integers and checks if all elements in the list are unique. Return \`True\` if all elements are unique, otherwise return \`False\`.","solution":"def are_all_elements_unique(lst): Returns True if all elements in the list are unique, otherwise returns False. return len(lst) == len(set(lst))"},{"question":"Create a function that takes a string as input and returns the reversed string. Python code examples demonstrating this functionality are preferred.","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Create a function that can reverse the order of words in a string, but keep the individual words intact. For example, given the input string \\"Hello World!\\", the function should return \\"World! Hello\\".","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence without changing the words themselves. :param sentence: A string that contains a sentence. :return: A string with the words in reverse order. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Create a function that reverses a given string and also reverse the case of each character.","solution":"def reverse_and_invert_case(s): Reverses the given string and inverts the case of each character. Args: s (str): The input string to be reversed and case inverted. Returns: str: The reversed string with inverted case characters. return s[::-1].swapcase()"},{"question":"Create a function that takes a string \`s\` as input and returns the string with characters in reverse order.","solution":"def reverse_string(s): Returns the input string 's' with characters in reverse order. return s[::-1]"},{"question":"Create a function that takes an integer as input and returns the binary representation of the integer as a string. The binary string should represent the integer in 8 bits, padded with leading zeros if necessary.","solution":"def int_to_8bit_binary(n): Converts an integer to its 8-bit binary representation. Parameters: n (int): the integer to convert. Returns: str: the 8-bit binary representation of the integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0 or n > 255: raise ValueError(\\"Input integer must be between 0 and 255.\\") binary_str = bin(n)[2:] # Remove the '0b' prefix return binary_str.zfill(8)"},{"question":"Create a function that takes a list of integers, filters out the odd numbers, and returns the even numbers in descending order.","solution":"def filter_and_sort_evens(numbers): Filters out odd numbers from the given list and returns the even numbers in descending order. Args: numbers (list): A list of integers. Returns: list: A list of even integers sorted in descending order. evens = [num for num in numbers if num % 2 == 0] return sorted(evens, reverse=True)"},{"question":"Create a function that takes in two arguments, an array and a target value. The function should return true if the array contains the target value, false otherwise.","solution":"def contains_target(array, target): Returns true if the array contains the target value, otherwise false. return target in array"},{"question":"Create a function that takes an integer array as input and returns a new array where each odd number in the original array has been multiplied by 3. If the original array contains any odd numbers that are also multiples of 5, you should subtract 10 from those specific numbers before multiplying by 3. If the original array does not contain any odd numbers, the function should return the original array unchanged. Additionally, if the input array is empty, the function should return an empty array.","solution":"def modify_odd_numbers(arr): Returns a new array where each odd number has been processed as follows: - If the number is a multiple of 5, subtract 10 before multiplying by 3. - Otherwise, simply multiply the odd number by 3. If there are no odd numbers or if the array is empty, returns the original array. if not arr: return arr modified_arr = [] for num in arr: if num % 2 != 0: # Check if the number is odd if num % 5 == 0: # Check if the number is a multiple of 5 num = (num - 10) * 3 else: num = num * 3 modified_arr.append(num) return modified_arr"},{"question":"Create a function that takes an array of integers and an index as parameters and returns the sum of elements to the left of the specified index in the array. If the index is 0 or out of bounds, return 0.","solution":"def sum_to_left(arr, index): Returns the sum of elements to the left of the specified index in the array. If the index is 0 or out of bounds, returns 0. Parameters: arr (list of int): The array of integers. index (int): The specified index. Returns: int: Sum of elements to the left of the specified index. if index <= 0 or index > len(arr): return 0 return sum(arr[:index])"},{"question":"Create a function that takes a list of positive integers and returns the sum of all even numbers in the list. The function should have a time complexity of O(n), where n is the number of elements in the list.","solution":"def sum_of_evens(numbers): Returns the sum of all even numbers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that takes in a string as input and returns a new string with all the characters in a reversed order. For example, if the input is \`\\"hello world\\"\`, the output should be \`\\"dlrow olleh\\"\`.","solution":"def reverse_string(input_string): Returns the input string in reversed order. return input_string[::-1]"},{"question":"Create a function that takes an array of numbers and returns the length of the longest increasing subsequence in that array. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], so the function should return 4.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the given array of numbers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that returns a string representation of the first n digits of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first 8 digits of the Fibonacci sequence are: \\"01123581\\".","solution":"def fibonacci_digits(n): Returns a string representation of the first n digits of the Fibonacci sequence. if n <= 0: return \\"\\" fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) # Convert Fibonacci list to a string of digits fib_string = ''.join(str(num) for num in fib_seq) return fib_string[:n]"},{"question":"Create a function that accepts an integer number and prints a message indicating whether it is positive, negative, or zero.","solution":"def number_sign_message(number): Prints a message indicating whether the number is positive, negative, or zero. if number > 0: return \\"The number is positive.\\" elif number < 0: return \\"The number is negative.\\" else: return \\"The number is zero.\\""},{"question":"Create a function that encrypts and decrypts a string in Python, using the Caesar cipher method. The function should have three parameters: the text to be encrypted or decrypted, the shift value, and a boolean indicating whether to encrypt or decrypt the text.","solution":"def caesar_cipher(text, shift, encrypt=True): Encrypts or decrypts a string using the Caesar cipher method. Parameters: text (str): The text to be encrypted or decrypted. shift (int): The shift value for the cipher. encrypt (bool): True for encryption, False for decryption. Returns: str: The encrypted or decrypted text. result = \\"\\" if not encrypt: shift = -shift for char in text: if char.isalpha(): shift_base = ord('a') if char.islower() else ord('A') shifted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) result += shifted_char else: result += char return result"},{"question":"Create a function that takes an integer as input and returns the sum of its digits in reverse order. Ensure that the function handles negative numbers as well.","solution":"def sum_of_digits_in_reverse(n): Takes an integer n as input and returns the sum of its digits in reverse order. Handles negative numbers as well. n_str = str(abs(n)) reversed_digits = n_str[::-1] return sum(int(digit) for digit in reversed_digits)"},{"question":"Create a function that converts an integer into a binary string. The function should also handle negative integers using two's complement representation.","solution":"def int_to_binary(n, bits=32): Convert an integer to a binary string using two's complement representation. Parameters: n (int): The integer to convert. bits (int): The number of bits for the two's complement representation. Default is 32. Returns: str: The binary string in two's complement representation. if n >= 0: return bin(n)[2:].zfill(bits) else: return bin((1 << bits) + n)[2:]"},{"question":"Create a function that takes an integer as input and returns the integer after reversing its digits. If reversing the digits of the number makes it negative, the function should return the original number.","solution":"def reverse_integer(n): Returns the integer after reversing its digits. If reversing the digits of the number makes it negative, the function returns the original number. original = n reversed_num = int(str(abs(n))[::-1]) if n < 0: reversed_num = -reversed_num return original if reversed_num < 0 else reversed_num"},{"question":"Create a function that calculates the sum of two input integers.","solution":"def sum_of_two_integers(a, b): Returns the sum of two input integers, a and b. return a + b"},{"question":"Create a function that takes a list of numbers as input and returns the sum of all the numbers in the list. If the list is empty, the function should return 0. Additionally, the function should also return the average of all the numbers. If there are no numbers in the list, the average should be considered as 0. Handle edge cases appropriately, such as when the list contains negative numbers.","solution":"def sum_and_average(numbers): Returns the sum and average of all the numbers in the list. If the list is empty, returns (0, 0). :param numbers: List of numbers :return: Tuple (sum, average) if not numbers: return 0, 0 total_sum = sum(numbers) average = total_sum / len(numbers) return total_sum, average"},{"question":"Create a function that extracts the email addresses from a string of text. The function should return a list of email addresses found in the string. Email addresses can start with either a letter or a digit and can contain special characters like dots, hyphens, and underscores.","solution":"import re def extract_emails(text): Extracts and returns a list of email addresses from the given text. Parameters: text (str): The input string containing email addresses. Returns: list: A list of email addresses found in the input string. email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.findall(email_pattern, text)"},{"question":"Create a function that takes in a string of numbers separated by commas and returns the product of all numbers in the string. The function should handle any number of numbers entered, and the string can contain both positive and negative integers. The function should return \\"Invalid input\\" if the string is empty or contains non-numeric characters.","solution":"def product_of_numbers(number_string): Takes a string of numbers separated by commas and returns the product of all numbers. Returns \\"Invalid input\\" if the string is empty or contains non-numeric characters. if not number_string: return \\"Invalid input\\" try: numbers = [int(num) for num in number_string.split(',')] except ValueError: return \\"Invalid input\\" product = 1 for num in numbers: product *= num return product"},{"question":"Create a function that takes a list of integers as an argument and returns the count of all the numbers in the list. The function should also accept an optional parameter where a dictionary holds the count of different numbers encountered. If provided, the function should update this dictionary with the counts of the numbers in the list. The function should also handle cases where at least one number in the list is negative.","solution":"def count_numbers(lst, count_dict=None): Counts the appearance of each number in the list \`lst\`. Optionally updates the provided dictionary \`count_dict\` with these counts. Parameters: - lst: List of integers. - count_dict: Optional dictionary to update with counts. Returns: - count_dict: A dictionary with numbers as keys and their counts as values. if count_dict is None: count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"Create a function that calculates the factorial of a given number using recursion. The function should handle large numbers by using Python's built-in \`int\` type to avoid overflow issues. However, to further robustify the function, handle cases when the input is not a non-negative integer and raise appropriate exceptions accordingly.","solution":"def factorial(n): Calculates the factorial of a given number using recursion. Raises ValueError if the input is not a non-negative integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of all the integers from 1 to \`n\` (inclusive) that are divisible by 3 or 5.","solution":"def divisible_by_3_or_5(n): Returns a list of all integers from 1 to n (inclusive) that are divisible by 3 or 5. return [i for i in range(1, n+1) if i % 3 == 0 or i % 5 == 0]"},{"question":"Create a function that takes a string of text and returns the number of times the character 'P' appears in the string. Create a main function that prints \\"The P character appears X time(s)\\".","solution":"def count_p_characters(text): Returns the number of times the character 'P' appears in the input text. return text.count('P') def main(text): count_p = count_p_characters(text) print(f\\"The P character appears {count_p} time(s).\\")"},{"question":"Create a function that takes in two arrays of integers and determines if one array is a subsequence of the other. A subsequence is a sequence of numbers that appear in the same order as they do in the original array, but not necessarily consecutively.","solution":"def is_subsequence(arr1, arr2): Determines if arr1 is a subsequence of arr2 or vice versa. def check_subsequence(small, large): iter_large = iter(large) return all(number in iter_large for number in small) return check_subsequence(arr1, arr2) or check_subsequence(arr2, arr1)"},{"question":"Create a function that implements a simple tokenization implementation of the classic Bag of Words (BoW) representation, which counts the number of times each word appears in a sentence.","solution":"from collections import Counter import re def bag_of_words(sentence): Given a sentence, return a dictionary where the keys are words and the values are the counts of each word in the sentence. # Use regex to find all words (sequences of word characters) words = re.findall(r'w+', sentence.lower()) return dict(Counter(words))"},{"question":"Create a function that takes in three tuples \`tuple1\`, \`tuple2\`, and \`tuple3\` as arguments. The function should return a new tuple where each element is the sum of the corresponding elements in the input tuples. For example, given the tuples (1, 2, 3), (4, 5, 6), and (7, 8, 9), the function should return (12, 15, 18).","solution":"def sum_tuples(tuple1, tuple2, tuple3): Sums corresponding elements in the given three tuples. Args: tuple1: First input tuple. tuple2: Second input tuple. tuple3: Third input tuple. Returns: A new tuple where each element is the sum of the corresponding elements in the inputs. return tuple(a + b + c for a, b, c in zip(tuple1, tuple2, tuple3))"},{"question":"Create a function that takes a list of integers and an integer n, and returns the n-th largest number in the list without sorting the list. Additionally, if n is greater than the length of the list, the function should return -1.","solution":"import heapq def nth_largest(nums, n): Returns the n-th largest number in the list nums. If n is greater than the length of the list, the function returns -1. if n > len(nums): return -1 # Use a min-heap to keep track of the largest n elements heap = [] for num in nums: if len(heap) < n: heapq.heappush(heap, num) else: heapq.heappushpop(heap, num) return heap[0]"},{"question":"Create a function that takes an array of integers as input and returns a new array that is the reverse of the input array. The function should be named \`reverseArray\` and should handle arrays of any length.","solution":"def reverseArray(arr): Returns a new array that is the reverse of the input array. return arr[::-1]"},{"question":"Create a function that takes in a array of integers, and return the maximum sum that can be obtained from summing any 3 integers in the array.","solution":"def max_sum_of_three(arr): Returns the maximum sum that can be obtained from summing any 3 integers in the array. if len(arr) < 3: raise ValueError(\\"Array must contain at least 3 elements\\") arr.sort(reverse=True) return arr[0] + arr[1] + arr[2]"},{"question":"Create a function that takes a string as input and returns the string with its characters in reverse order, but only if the string's length is greater than or equal to 4. If the length is less than 4, return the string as is.","solution":"def reverse_string_if_long_enough(s): Returns the string with its characters in reverse order if the string's length is greater than or equal to 4. If the length is less than 4, returns the string as is. if len(s) >= 4: return s[::-1] return s"},{"question":"Create a function that detects an anagram of a word from a list of words. An anagram of a word is another word that contains the same characters in a different order. For example, 'listen' and 'silent' are anagrams.","solution":"def find_anagrams(word, words_list): Detects anagrams of a given word from a list of words. Parameters: word (str): The word for which anagrams need to be found. words_list (list): A list of potential anagram words. Returns: list: A list containing the anagrams of the given word. word_sorted = sorted(word) anagrams = [w for w in words_list if sorted(w) == word_sorted] return anagrams"},{"question":"Create a function that takes a string and returns its reverse. If the string is already reversed, it should still return the reverse of that reversed string, making it the original string.","solution":"def reverse_string(s): Returns the reverse of the string s. return s[::-1]"},{"question":"Create a function that generates all possible subsets of a given set. The function should take a set as input and return a list of all possible subsets, where each subset is represented as a list.","solution":"def generate_subsets(s): Generates all possible subsets of a given set. Parameters: s (set): Input set Returns: list: List of all possible subsets (each subset is a list) subsets = [[]] for elem in s: subsets += [curr + [elem] for curr in subsets] return subsets"},{"question":"Create a function that takes an array of integers and returns the sum of the squares of all the integers in the array. For example, if the input array is [1, 2, 3], the function should return 14 (since 1^2 + 2^2 + 3^2 = 14).","solution":"def sum_of_squares(arr): Returns the sum of the squares of all the integers in the array. return sum(x**2 for x in arr)"},{"question":"Create a function that takes a list of integers and returns the sum of those integers. Additionally, the function should handle the potential ValueError that could occur if a non-integer value is passed in the list. To improve code readability and simplicity, use a helper function to verify that all elements in the list are integers before performing the calculation. If a non-integer value is found, the helper function should raise a ValueError.","solution":"def validate_integers(input_list): Helper function to verify that all elements in the list are integers. Raises a ValueError if a non-integer value is found. for item in input_list: if not isinstance(item, int): raise ValueError(f\\"Non-integer value found: {item}\\") def sum_of_integers(input_list): Returns the sum of integers in the list. Handles ValueError if non-integer value is passed in the list. validate_integers(input_list) return sum(input_list)"},{"question":"Create a function that takes an input string and prints whether it's a palindrome or not. A palindrome is a string that reads the same forwards and backwards. For example, \\"racecar\\" is a palindrome because it reads the same backward \\"racecar\\". However, \\"hello\\" is not a palindrome because it doesn't read the same backward \\"olleh\\".","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. A palindrome reads the same forwards and backwards. s = s.lower() # Converting the string to lowercase to ensure case insensitivity return s == s[::-1]"},{"question":"Create a function that takes a string and returns the longest substring that is a palindrome. A palindrome is a string that reads the same forward and backward, e.g., \\"racecar\\". For example, given the string \\"babad\\", the function should return \\"bab\\" (not \\"aba\\", because \\"bab\\" is longer).","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s or len(s) == 1: return s def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 start, end = 0, 0 for i in range(len(s)): l1, r1 = expand_from_center(i, i) l2, r2 = expand_from_center(i, i + 1) if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start: end + 1]"},{"question":"Create a function that converts a string to its SHA-256 hash equivalent. If the input string is empty, return \`None\`. Ensure the function is robust and handles potential errors gracefully.","solution":"import hashlib def string_to_sha256(input_string): Converts a given string to its SHA-256 hash equivalent. Returns None if the input string is empty. Parameters: input_string (str): The string to be converted. Returns: str: The SHA-256 hash equivalent of the string or None if the input is empty. if not input_string: return None try: hash_object = hashlib.sha256() hash_object.update(input_string.encode('utf-8')) return hash_object.hexdigest() except Exception as e: # Handling any unforeseen errors return None"},{"question":"Create a function that takes a list of integers as input and returns a new list with the integers sorted in ascending order using the quicksort algorithm.","solution":"def quicksort(arr): Sorts the input list of integers in ascending order using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Create a function that calculates the number of possible paths to reach the bottom-right corner of a grid from the top-left corner, given that the grid has obstacles. The function should consider moving only to the right and down. If an obstacle is encountered, paths through that cell are not possible. The position of the obstacles is given as a list of tuples, where each tuple represents the coordinates of an obstacle.","solution":"def count_paths_with_obstacles(grid_size, obstacles): Calculate the number of possible paths to reach the bottom-right corner of a grid from the top-left corner, given that the grid has obstacles. Parameters ---------- grid_size : tuple A tuple (m, n) representing the size of the grid (rows, columns). obstacles : list of tuples A list of tuples where each tuple represents the coordinates of an obstacle. Returns ------- int The number of possible paths from the top-left to the bottom-right corner. m, n = grid_size dp = [[0] * n for _ in range(m)] # Set up the obstacle positions in the DP table obstacle_set = set(obstacles) # Start position if (0, 0) in obstacle_set: return 0 dp[0][0] = 1 # Fill the values for the first column for i in range(1, m): if (i, 0) not in obstacle_set: dp[i][0] = dp[i - 1][0] # Fill the values for the first row for j in range(1, n): if (0, j) not in obstacle_set: dp[0][j] = dp[0][j - 1] # Fill the DP table for i in range(1, m): for j in range(1, n): if (i, j) not in obstacle_set: dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[-1][-1]"},{"question":"Create a function that takes a list of dictionaries as input. Each dictionary in the list represents a product with keys as 'ProductID' and 'ProductPrice'. Your function should sort the list of products based on their 'ProductPrice' and then return the list sorted from the lowest to the highest price.","solution":"def sort_products_by_price(products): Sort a list of dictionaries representing products by their ProductPrice. Args: products (list): List of dictionaries, each with 'ProductID' and 'ProductPrice' as keys. Returns: list: Sorted list of dictionaries by 'ProductPrice' in ascending order. return sorted(products, key=lambda x: x['ProductPrice'])"},{"question":"Create a function that takes a string input and returns the longest substring without repeating characters. For example, given the string \\"abcabcbb\\", the function should return \\"abc\\" as the longest substring without repeating characters.","solution":"def longest_substring_without_repeating_characters(s): Returns the longest substring without repeating characters in the given string. n = len(s) max_length = 0 start = 0 char_index_map = {} longest_substr = \\"\\" for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end if end - start + 1 > max_length: max_length = end - start + 1 longest_substr = s[start:end+1] return longest_substr"},{"question":"Create a function that checks whether a given number is a perfect square. A number is a perfect square if it can be expressed as the product of an integer with itself. For example, 16 is a perfect square because it is (4 times 4). However, 14 is not a perfect square. Additionally, ensure that the function handles edge cases, such as empty input or non-numeric input.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, else False. Args: n (int, float): The number to check. Returns: bool: True if n is a perfect square, False otherwise. Raises: ValueError: If n is not a valid number. if not isinstance(n, (int, float)): raise ValueError(\\"Input must be an integer or float.\\") # Handling edge cases like negative numbers if n < 0: return False sqrt_n = math.isqrt(int(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a function that takes a list of integers and returns a new list with each element being the sum of the current and next element in the original list. If the last element doesn't have a next element, add 0 to its sum.","solution":"def sum_with_next(lst): Returns a list where each element is the sum of the current and the next element in the original list. If the last element doesn't have a next element, add 0 to its sum. result = [] length = len(lst) for i in range(length): if i == length - 1: result.append(lst[i] + 0) else: result.append(lst[i] + lst[i + 1]) return result"},{"question":"Create a function that takes a list of strings and returns a list of integers representing the ASCII values of the characters at the same positions in all strings.","solution":"def ascii_values(strings): Takes a list of strings and returns a list of integers representing the ASCII values of the characters at the same positions in all strings. if not strings: return [] # Assert all strings are of the same length length = len(strings[0]) for string in strings: if len(string) != length: raise ValueError(\\"All strings must be of the same length\\") result = [] for i in range(length): result.append([ord(string[i]) for string in strings]) return result"},{"question":"Create a function that checks if a given list of integers contains a pair of numbers that are equal to each other.","solution":"def contains_duplicate(nums): Checks if the given list of integers contains any duplicates. :param nums: List of integers. :return: True if there are duplicates, False otherwise. seen = set() for num in nums: if num in seen: return True seen.add(num) return False"},{"question":"Create a function that will return an array of numbers from 1 up to and including n, where n is the parameter. The function should check if the current number is divisible by both 3 and 5. If it is, add 'FizzBuzz' to the array. If the number is only divisible by 3, add 'Fizz' to the array. If the number is only divisible by 5, add 'Buzz' to the array. If the number is not divisible by either 3 or 5, add the number itself to the array.","solution":"def fizzbuzz(n): Returns an array of numbers from 1 up to and including n where: - Numbers divisible by both 3 and 5 are replaced by 'FizzBuzz' - Numbers divisible by only 3 are replaced by 'Fizz' - Numbers divisible by only 5 are replaced by 'Buzz' - Other numbers remain unchanged result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append('FizzBuzz') elif i % 3 == 0: result.append('Fizz') elif i % 5 == 0: result.append('Buzz') else: result.append(i) return result"},{"question":"Create a function that takes an array of integers as input and returns a new array that contains the squares of all the odd numbers in the input array.","solution":"def square_odds(arr): Returns a new array that contains the squares of all the odd numbers in the input array. Parameters: arr (list): An array of integers Returns: list: A new array with the squares of all the odd numbers in the input array return [x ** 2 for x in arr if x % 2 != 0]"},{"question":"Create a function that takes a list of integers and returns the sum of all the even numbers in the list. Your function should also return the count of even numbers.","solution":"def sum_and_count_evens(numbers): Returns the sum and count of all even numbers in the given list of integers. Args: numbers (list of int): The list of integers to analyze. Returns: tuple: A tuple containing the sum of even numbers and the count of even numbers. even_sum = 0 even_count = 0 for num in numbers: if num % 2 == 0: even_sum += num even_count += 1 return even_sum, even_count"},{"question":"Create a function that calculates the area of a circle given its radius. Then, use a for loop to calculate the areas of circles with radii ranging from 1 to 10.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2) def areas_of_circles_from_1_to_10(): Calculates the areas of circles with radii ranging from 1 to 10. Returns a list of these areas. return [area_of_circle(radius) for radius in range(1, 11)]"},{"question":"Create a function that converts a given positive integer \`n\` to its equivalent representation in k-base. The k-base representation uses digits 0 through k-1 and the letter 'A'-'J' to represent values 10 through 15 for k>10.","solution":"def to_k_base(n, k): Convert a given positive integer n to its equivalent k-base representation. :param n: an integer, the number to be converted. :param k: an integer, the base to convert to. Must be in the range 2-20. :return: a string, the k-base representation of n. if not (2 <= k <= 20): raise ValueError(\\"Base k must be between 2 and 20.\\") if n == 0: return '0' digits = \\"0123456789ABCDEFGHIJ\\" result = [] while n > 0: result.append(digits[n % k]) n //= k result.reverse() return ''.join(result)"},{"question":"Create a function that takes a string of text as input and returns the length of the longest word in the string.","solution":"def longest_word_length(text): Returns the length of the longest word in the given text. Parameters: text (str): A string of text. Returns: int: The length of the longest word. words = text.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"Create a function that generates a Pascal's Triangle up to the given number of rows. The function should return the Pascal's Triangle as a list of lists, where each inner list represents a row in Pascal's Triangle.","solution":"def generate_pascals_triangle(num_rows): Generates Pascal's Triangle up to the given number of rows. Parameters: num_rows (int): Number of rows in Pascal's Triangle. Returns: list of lists: Pascal's Triangle. if num_rows <= 0: return [] triangle = [[1]] for i in range(1, num_rows): row = [1] for j in range(1, i): row.append(triangle[i - 1][j - 1] + triangle[i - 1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Create a function that takes a list of numbers and returns their cumulative sum. The cumulative sum is the sequence of sums of elements of input list till the current index.","solution":"def cumulative_sum(numbers): Returns the cumulative sum of the list of numbers. result = [] total = 0 for number in numbers: total += number result.append(total) return result"},{"question":"Create a function that takes in two numbers and returns the remainder when the larger number is divided by the smaller. If the numbers are equal, return \\"Equal numbers, no remainder\\". If a negative number is passed, return \\"Invalid input: Negative number\\". The function should handle both integer and floating-point numbers.","solution":"def remainder_large_by_small(n1, n2): Returns the remainder when the larger number is divided by the smaller. If the numbers are equal, return \\"Equal numbers, no remainder\\". If a negative number is passed, return \\"Invalid input: Negative number\\". Handles both integer and floating-point numbers. if n1 < 0 or n2 < 0: return \\"Invalid input: Negative number\\" if n1 == n2: return \\"Equal numbers, no remainder\\" larger = max(n1, n2) smaller = min(n1, n2) return larger % smaller"},{"question":"Create a function that takes the date of birth (dob) as an argument and returns the closest New Year's date. If the dob is before New Year's Day, the function should return the date of the next New Year's Day. If the dob is after New Year's Day, but before the user's birthday this year, it should return the current year's New Year's Day. If the dob is on or after the user's birthday this year, it should return the date of the next New Year's Day. Here's an implementation of this in Python. Can you suggest improvements to the code?","solution":"from datetime import datetime, timedelta def closest_new_year(dob): # Parse the date of birth dob = datetime.strptime(dob, \\"%Y-%m-%d\\") # Get the current datetime now = datetime.now() # Calculate New Year's Day for the current and next year new_year_this_year = datetime(year=now.year, month=1, day=1) new_year_next_year = datetime(year=now.year + 1, month=1, day=1) # Current year's birthday birthday_this_year = datetime(year=now.year, month=dob.month, day=dob.day) if now < birthday_this_year: # Before the user's birthday this year return new_year_this_year if now >= new_year_this_year else new_year_next_year else: # On or after the user's birthday this year return new_year_next_year"},{"question":"Create a function that calculates the sum of two numbers. The function should be able to handle both positive and negative integers.","solution":"def sum_two_numbers(a, b): Returns the sum of two numbers a and b. return a + b"},{"question":"Create a function that finds all the even numbers in a given list of integers and returns a new list containing only the even numbers.","solution":"def find_even_numbers(numbers): Returns a list of even numbers from the given list of integers. Parameters: numbers (list): A list of integers. Returns: list: A list containing only the even numbers from the input list. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that finds the minimum value in a given array of numbers. How would you write this function in Python?","solution":"def find_minimum(arr): Returns the minimum value in the given array of numbers. :param arr: List of numbers :return: The minimum number in arr if not arr: raise ValueError(\\"Array cannot be empty\\") min_value = arr[0] for num in arr[1:]: if num < min_value: min_value = num return min_value"},{"question":"Create a function that checks if a given string contains a balanced bracket structure. A string is considered to have a balanced bracket structure if every opening bracket \\"(\\" has a corresponding closing bracket \\")\\" and they are properly nested. The function should return True if the structure is balanced and False otherwise.","solution":"def is_balanced_brackets(s): Checks if the given string contains a balanced bracket structure. Args: s (str): Input string containing brackets. Returns: bool: True if brackets are balanced, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Create a function that takes an integer as input and returns the sum of all even numbers and the sum of all odd numbers in the string representation of that integer. Also, return these two sums as a tuple.","solution":"def sum_even_odd_digits(n): Takes an integer n and returns a tuple containing the sum of even digits and the sum of odd digits. :param n: Integer input. :return: Tuple (sum_of_even_digits, sum_of_odd_digits) sum_even = 0 sum_odd = 0 for digit in str(abs(n)): if int(digit) % 2 == 0: sum_even += int(digit) else: sum_odd += int(digit) return (sum_even, sum_odd)"},{"question":"Create a function that finds the unique elements in the elements of a list of lists. In other words, write a function that takes a list of lists as an input and returns a list containing only those elements that appear exactly once in the entire list of lists. Your solution should include an explanation of the logic behind the function and how it solves the problem.","solution":"def find_unique_elements(list_of_lists): Returns a list of elements that appear exactly once in the entire list of lists. :param list_of_lists: List of lists :return: List of unique elements # Create a dictionary to count the occurrence of each element element_count = {} for sublist in list_of_lists: for item in sublist: if item in element_count: element_count[item] += 1 else: element_count[item] = 1 # Extract elements that appear exactly once unique_elements = [item for item, count in element_count.items() if count == 1] return unique_elements"},{"question":"Create a function that takes a list of strings, checks for and removes duplicate elements, and returns the result as a new list. The function should also ensure that the order of elements in the output list is the same as their first occurrence in the input list.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list and returns a list containing only the first occurrence of each element in the order they appeared in the input list. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Create a function that takes two lists of integers as input and returns the longest common subsequence (LCS) of the two lists. The LCS is the longest sequence of elements that appear in the same order in both lists, but not necessarily consecutively.","solution":"def lcs(a, b): Returns the longest common subsequence of two lists of integers. m, n = len(a), len(b) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) lcs_length = dp[m][n] lcs_sequence = [] i, j = m, n while i > 0 and j > 0: if a[i - 1] == b[j - 1]: lcs_sequence.append(a[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 lcs_sequence.reverse() return lcs_sequence"},{"question":"Create a function that takes a list of integers and returns a new list with all even numbers removed. How can this be achieved in Python using list comprehension?","solution":"def remove_even_numbers(numbers): Returns a new list with all even numbers removed from the input list. return [num for num in numbers if num % 2 != 0]"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a string that reads the same forwards and backwards. The function should return True if the string is a palindrome and False otherwise. A simple palindrome check should be implemented manually without using any built-in functions that directly check for palindromes.","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. s = s.lower().replace(\\" \\", \\"\\") # Making the check case-insensitive and ignoring spaces left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Create a function that takes a list of lists (2D list) of integers and calculates the sum of all even numbers in the list.","solution":"def sum_of_evens(matrix): Returns the sum of all even numbers in the 2D list (matrix). total = 0 for row in matrix: for num in row: if num % 2 == 0: total += num return total"},{"question":"Create a function that takes a string as input and returns true if the string is a palindrome (reads the same forwards and backwards), and false otherwise. A palindrome is a word or phrase that reads the same backward as forward, disregarding spaces, punctuation, and case sensitivity. For example, \\"A man, a plan, a canal, Panama\\" should return true.","solution":"def is_palindrome(s: str) -> bool: Returns true if the string is a palindrome (ignores case, spaces, and punctuation), otherwise false. import re cleaned_string = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned_string == cleaned_string[::-1]"},{"question":"Create a function that takes a single integer as input, representing a number, and returns a binary representation of that number as a string. The function should be efficient and handle large numbers.","solution":"def int_to_binary(n): Converts an integer to a binary string representation. Parameters: n (int): The integer to convert. Returns: str: The binary string representation of the integer. if n == 0: return \\"0\\" elif n < 0: return \\"-\\" + bin(n)[3:] else: return bin(n)[2:]"},{"question":"Create a function that takes a list, tuple, or set as an argument and returns a new collection of the same type containing only the elements that are integers.","solution":"def filter_integers(collection): Takes a list, tuple, or set as input and returns a new collection of the same type containing only the elements that are integers. if isinstance(collection, list): return [x for x in collection if isinstance(x, int)] elif isinstance(collection, tuple): return tuple(x for x in collection if isinstance(x, int)) elif isinstance(collection, set): return {x for x in collection if isinstance(x, int)} else: raise TypeError(\\"Input must be a list, tuple, or set.\\")"},{"question":"Create a function that takes three parameters: \`originalArray\`, \`insertValue\`, and \`index\`. The function should insert \`insertValue\` into \`originalArray\` at the specified \`index\` and return the modified array.","solution":"def insert_value(originalArray, insertValue, index): Inserts insertValue into originalArray at the specified index and returns the modified array. if index < 0 or index > len(originalArray): raise IndexError(\\"Index out of bounds.\\") return originalArray[:index] + [insertValue] + originalArray[index:]"},{"question":"Create a function that checks if a number is a prime number. If the number is prime, return \`True\`; otherwise, return \`False\`.","solution":"def is_prime(n): Checks if a number n is a prime number. Args: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: # 0 and 1 are not prime numbers return False if n == 2: # 2 is the only even prime number return True if n % 2 == 0: # other even numbers are not prime return False for i in range(3, int(n**0.5) + 1, 2): # check for factors from 3 to sqrt(n) if n % i == 0: return False return True"},{"question":"Create a function that generates a unique identifier (ID) for a user. This ID should be a string of 12 characters, consisting of numbers and letters. It should be generated in a way that ensures the uniqueness of the ID generated within a small timeframe window of 24 hours.","solution":"import uuid def generate_unique_id(): Generates a 12-character unique identifier using UUID4 and returns it. unique_id = uuid.uuid4().hex[:12] return unique_id"},{"question":"Create a function that evaluates whether a number is within a range, considering specific conditions. The function should return \\"yes\\" if the number is within the range, and \\"no\\" if it is outside. The function should have three parameters: the number to check, the minimum value of the range (inclusive), and the maximum value of the range (inclusive).","solution":"def is_within_range(number, min_val, max_val): Returns 'yes' if the number is within the range [min_val, max_val], inclusive. Returns 'no' otherwise. if min_val <= number <= max_val: return \\"yes\\" else: return \\"no\\""},{"question":"Create a function that takes in a sentence and returns a string that contains only the unique words in that sentence, preserving the order in which they first appeared. If a word appears multiple times in the sentence, it should only appear once in the returned string.","solution":"def unique_words(sentence): Returns a string that contains only the unique words in the sentence, preserving the order in which they first appeared. words = sentence.split() seen = set() unique_sentence = [] for word in words: if word not in seen: seen.add(word) unique_sentence.append(word) return ' '.join(unique_sentence)"},{"question":"Create a function that takes a string as input and returns a new string with all the characters in reverse order. Additionally, the function should ignore any non-alphabetic characters and only reverse the alphabetic characters in the string.","solution":"def reverse_alpha_chars(s): Function to reverse only the alphabetic characters in a given string. Non-alphabetic characters maintain their positions. alphabetic_chars = [char for char in s if char.isalpha()] reversed_chars = reversed(alphabetic_chars) result = [] reversed_char_iterator = iter(reversed_chars) for char in s: if char.isalpha(): result.append(next(reversed_char_iterator)) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes an array of integers and returns the length of the longest consecutive sequence of increasing integers in the array.","solution":"def longest_consecutive_increasing_sequence(arr): Returns the length of the longest consecutive sequence of increasing integers in the array. if not arr: return 0 longest_sequence = 1 current_sequence = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_sequence += 1 longest_sequence = max(longest_sequence, current_sequence) else: current_sequence = 1 return longest_sequence"},{"question":"Create a function that takes a list of tuples, with each tuple consisting of two elements, a key and a value. The function should return a dictionary where the keys are the first elements of the tuples, and the values are lists containing all the corresponding values from the tuples.","solution":"def tuples_to_dict(tuples_list): Converts a list of tuples into a dictionary where the keys are the first elements of the tuples and the values are lists containing all the corresponding values from the tuples. Parameters: tuples_list (list of tuples): The input list of tuples. Returns: dict: A dictionary with unique keys and list of corresponding values. result = {} for key, value in tuples_list: if key in result: result[key].append(value) else: result[key] = [value] return result"},{"question":"Create a function that returns the longest odd number in a list of strings that represent integers. If there are no odd integers in the list, the function should return -1. The function should handle large numbers efficiently.","solution":"def longest_odd_number(numbers): Returns the longest odd number in a list of strings that represent integers. If there are no odd integers in the list, the function should return -1. longest_odd = -1 for num_str in numbers: if int(num_str) % 2 != 0: # Check if the number is odd # Update longest_odd if current num_str is longer if longest_odd == -1 or len(num_str) > len(str(longest_odd)): longest_odd = num_str return int(longest_odd) if longest_odd != -1 else -1"},{"question":"Create a function that converts a given string to its ASCII values and store them in a list. Then, calculate the sum of all ASCII values in the list.","solution":"def ascii_sum(s): Converts a given string to its ASCII values and store them in a list. Then, calculates the sum of all ASCII values in the list. :param s: Input string :return: Sum of ASCII values of characters in the string ascii_values = [ord(char) for char in s] return sum(ascii_values)"},{"question":"Create a function that returns the first number that is divisible by both 3 and 4.","solution":"def first_divisible_by_3_and_4(numbers): Returns the first number in the list that is divisible by both 3 and 4. If no such number exists, returns None. for num in numbers: if num % 3 == 0 and num % 4 == 0: return num return None"},{"question":"Create a function that takes a list of integers and returns the maximum sum of any non-empty subarray. This means the function should consider both negative and positive integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty subarray. :param nums: List of integers :return: Maximum sum of any subarray if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes two strings, and returns the string with the maximum repeated substring among the two strings. If there's a tie, return the one that appears first alphabetically. If neither string has a repeated substring, return an empty string.","solution":"def longest_repeated_substring(s): Helper function to find the longest repeated substring in a given string. n = len(s) for length in range(n, 0, -1): seen = set() for start in range(n - length + 1): substring = s[start:start + length] if substring in seen: return substring seen.add(substring) return \\"\\" def string_with_max_repeated_substring(s1, s2): Returns the string with maximum repeated substring among the two strings. If there's a tie or neither has a repeated substring, return the empty string. s1_repeated = longest_repeated_substring(s1) s2_repeated = longest_repeated_substring(s2) if not s1_repeated and not s2_repeated: return \\"\\" if len(s1_repeated) > len(s2_repeated): return s1 elif len(s2_repeated) > len(s1_repeated): return s2 else: return min(s1, s2)"},{"question":"Create a function that checks if two provided arrays match or not. If the arrays are identical in terms of their elements and the order in which they appear, the function returns true; otherwise, it returns false. How can you efficiently implement this function using a programming language of your choice?","solution":"def arrays_match(array1, array2): Returns True if both arrays have the same elements in the same order, otherwise False. return array1 == array2"},{"question":"Create a function that accepts an array of objects, where each object represents a book with properties \`title\`, \`author\`, and \`year\`. The function should return a new array containing the titles of the books that were written after the year 2000.","solution":"def get_books_written_after_2000(books): Given a list of books, return a list of titles of books written after the year 2000. Parameters: books (list): A list of dictionaries, where each dictionary represents a book with 'title', 'author', and 'year' keys. Returns: list: A list of titles of books written after the year 2000. return [book['title'] for book in books if book['year'] > 2000]"},{"question":"Create a function that reorders a given list of integers \`nums\` such that all negative numbers appear before positive numbers, maintaining their original order of appearance. How should the function handle any \`NaN\` (Not a Number) or non-integer values input in the list?","solution":"from math import isnan def reorder_nums(nums): Reorder a given list of integers \`nums\` such that all negative numbers appear before positive numbers, maintaining their original order of appearance. Non-integer and \`NaN\` values are ignored in the output. Args: nums: List of values to reorder. (can include integers, NaN, and other types) Returns: A list of integers with negative numbers first followed by positive numbers. def is_valid_int(n): return isinstance(n, int) and not isnan(n) negatives = [n for n in nums if is_valid_int(n) and n < 0] non_negatives = [n for n in nums if is_valid_int(n) and n >= 0] return negatives + non_negatives"},{"question":"Create a function that checks if a number is narcissistic or not. A narcissistic number is a number that is the sum of its own digits each raised to the power of the number of digits. For example, 153 is a narcissistic number because (1^3 + 5^3 + 3^3 = 153).","solution":"def is_narcissistic(number): Checks if a number is a narcissistic number. A narcissistic number is a number that is the sum of its own digits each raised to the power of the number of digits. Parameters: - number (int): The number to be checked. Returns: - bool: True if the number is a narcissistic number, False otherwise. digits = [int(digit) for digit in str(number)] num_of_digits = len(digits) sum_of_powers = sum(digit ** num_of_digits for digit in digits) return sum_of_powers == number"},{"question":"Create a function that accepts an integer x and a sorted array a that contains elements between 0 and 100, and returns an array of all the elements in a that are less than or equal to x. The function should also accept a boolean variable keep_duplicates as a parameter. If keep_duplicates is true, all occurrences of elements equal to x should be included in the returned array; otherwise, only the first occurrence of x should be included.","solution":"def filter_elements(x, a, keep_duplicates): Returns an array of all elements in a that are less than or equal to x. If keep_duplicates is true, all occurrences of elements equal to x should be included; otherwise, only the first occurrence of x should be included. :param x: int, value to compare the elements of the array with :param a: list of int, sorted array with elements between 0 and 100 :param keep_duplicates: bool, flag to determine if duplicates of x should be kept :return: list of int, filtered array with elements less than or equal to x result = [] for value in a: if value < x: result.append(value) elif value == x: result.append(value) if not keep_duplicates: break else: break return result"},{"question":"Create a function that takes an array of integers and returns the maximum and minimum values in that array. The function should have a time complexity of O(n) and should not use any built-in functions like \`max()\` and \`min()\`.","solution":"def find_max_min(arr): Returns the maximum and minimum values in an array. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing the maximum and minimum values. if not arr: return None, None max_val = arr[0] min_val = arr[0] for num in arr: if num > max_val: max_val = num if num < min_val: min_val = num return max_val, min_val"},{"question":"Create a function that takes three numbers as input and returns the maximum of those three numbers using conditional statements.","solution":"def max_of_three(a, b, c): Returns the maximum of three numbers a, b, and c. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Create a function that takes an input list of integers, each representing the height of a column in a histogram. The function should return the maximum area of a rectangle that can be formed within the histogram by selecting the heights of the bars and their width being the distance between the bars in the histogram. Your solution should efficiently calculate the largest rectangle area.","solution":"def largestRectangleArea(heights): Returns the maximum area of a rectangle that can be formed within the histogram by selecting the heights of the bars and their width being the distance between the bars in the histogram. :param heights: List[int] - a list of integers representing the heights of the histogram's columns. :return: int - the maximum area of a rectangle in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Create a function that takes two string parameters and returns the length of the longest common substring between the two strings. The longest common substring is the longest sequence of characters that are the same in both strings, in the same order, but not necessarily contiguous. For example, for the input strings \\"hello\\" and \\"oellh\\", the longest common substring is \\"ell\\" with a length of 3.","solution":"def longest_common_substring(s1, s2): Returns the length of the longest common substring between two strings s1 and s2. def lcs_matrix(s1, s2): m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] result = 0 for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 result = max(result, dp[i][j]) else: dp[i][j] = 0 return result return lcs_matrix(s1, s2)"},{"question":"Create a function that takes an integer as input and returns the sum of its factors. The function should return the result as an integer. If the input is not a valid integer, the function should raise a ValueError.","solution":"def sum_of_factors(n): Returns the sum of the factors of the input integer n. Raises ValueError if the input is not a valid integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") factors_sum = 0 for i in range(1, n + 1): if n % i == 0: factors_sum += i return factors_sum"},{"question":"Create a function that identifies the smallest number in a list that appears at least twice. If no such number exists, return -1.","solution":"def smallest_duplicate(nums): Identify the smallest number in a list that appears at least twice. If no such number exists, return -1. from collections import Counter # Generate a dictionary of counts counts = Counter(nums) # Filter out numbers that appear less than twice and sort the remaining ones duplicates = [num for num, count in counts.items() if count > 1] # Return the smallest number among the duplicates or -1 if no duplicates exist if duplicates: return min(duplicates) else: return -1"},{"question":"Create a function that calculates the sum of all even numbers between 1 and n (inclusive). The function should have the following signature: \`function sumEvenNumbers(n: number): number\`. The function should return the sum of all even numbers from 1 to n. If \`n\` is less than 2, the function should return 0.","solution":"def sumEvenNumbers(n): Returns the sum of all even numbers between 1 and n (inclusive). if n < 2: return 0 return sum(i for i in range(2, n + 1, 2))"},{"question":"Create a function that takes an integer as input and returns the maximum number of non-empty substrings that can be obtained from the input string by removing any number of characters. The condition is that each substring must consist of unique characters. For example, if the input is \\"abab\\", the function should return 3, because we can obtain the substrings \\"ab\\", \\"ab\\", and \\"ab\\", which are all unique.","solution":"def max_unique_substrings(s): This function returns the maximum number of non-empty substrings that can be obtained from the input string \`s\` by removing any number of characters such that each substring consists of unique characters. unique_chars = set(s) return len(unique_chars)"},{"question":"Create a function that calculates the sum of all numbers from 1 to n. This function should be able to handle large values of n efficiently.","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n. return n * (n + 1) // 2"},{"question":"Create a function that returns the length of the longest word in a given string. The function should handle punctuation and spaces correctly.","solution":"import string def longest_word_length(s): Returns the length of the longest word in the given string \`s\`. translator = str.maketrans('', '', string.punctuation) clean_s = s.translate(translator) words = clean_s.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"Create a function that converts an integer to its ASCII character.","solution":"def int_to_ascii(value): Converts the given integer to its corresponding ASCII character. :param value: Integer value :return: Corresponding ASCII character if not isinstance(value, int): raise ValueError(\\"Input must be an integer.\\") if value < 0 or value > 127: raise ValueError(\\"Input integer must be in the range 0-127 to be a valid ASCII value.\\") return chr(value)"},{"question":"Create a function that creates a list of all the unique words from a given sentence that are at least 5 characters long. The function should ignore punctuation and be case-insensitive.","solution":"import re def unique_long_words(sentence): Returns a list of unique words from the given sentence that are at least 5 characters long. The function ignores punctuation and treats words case insensitively. :param sentence: str, input sentence :return: list of unique words with at least 5 characters # Remove punctuation and normalize to lowercase cleaned_sentence = re.sub(r'[^ws]', '', sentence).lower() words = cleaned_sentence.split() # Filter out words that are less than 5 characters long long_words = [word for word in words if len(word) >= 5] # Return unique words return list(set(long_words))"},{"question":"Create a function that takes two arguments: a list of integers and a target integer. The function should return a list of indices where the integers in the list are equal to the target integer.","solution":"def find_indices(lst, target): Returns a list of indices where the integers in the list are equal to the target integer. Parameters: lst (list of int): A list of integers. target (int): The target integer to find in the list. Returns: list of int: A list of indices where the integers in the list are equal to the target integer. return [index for index, value in enumerate(lst) if value == target]"},{"question":"Create a function that takes an array of integers and returns a new array containing only the even numbers from the original array. Make sure the function is named \`filter_even_numbers\` and it clearly states what it does in its docstring.","solution":"def filter_even_numbers(arr): Returns a new array containing only the even numbers from the original array. Parameters: arr (list): A list of integers. Returns: list: A list of even integers. return [num for num in arr if num % 2 == 0]"},{"question":"Create a function that takes in two parameters: a list of integers and a target integer. The function should return the earliest occurrence of the target integer in the list, if it exists. If the target integer is not found, the function should return -1.","solution":"def find_first_occurrence(arr, target): Returns the earliest occurrence of the target integer in the list. If the target integer is not found, returns -1. try: return arr.index(target) except ValueError: return -1"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of all integers from 1 to \`n\` (inclusive) that are divisible by 3 but not by 5. For example, \`divisible_by_3_not_5(10)\` should return \`[3, 6, 9]\`.","solution":"def divisible_by_3_not_5(n): Returns a list of all integers from 1 to n (inclusive) that are divisible by 3 but not by 5. return [i for i in range(1, n + 1) if i % 3 == 0 and i % 5 != 0]"},{"question":"Create a function that takes in two parameters: a list of integers and a target integer. The function should return a tuple containing the count of occurrences of the target integer in the list and the indices of each occurrence in a separate list. If the target integer is not found, return \`(0, [])\`.","solution":"def find_target_occurrences(lst, target): Returns a tuple containing the count of occurrences of the target integer and a list of indices where each occurrence is found in the given list. Args: lst (list of int): List of integers in which to search. target (int): The target integer to find in the list. Returns: tuple: A tuple containing the count of occurrences of the target integer and the indices of each occurrence. indices = [i for i, x in enumerate(lst) if x == target] count = len(indices) return count, indices"},{"question":"Create a function that validates whether a given string 's' is a valid identifier in Python. A valid identifier in Python must start with a letter (either uppercase or lowercase) or an underscore, followed by any combination of letters, digits, or underscores.","solution":"import re def is_valid_identifier(s): Validates if the string 's' is a valid Python identifier. A valid identifier must start with a letter (A-Z, a-z) or underscore (_) and follow with any combination of letters, digits (0-9), or underscores. :param s: String to be checked :return: Boolean indicating whether the string is a valid identifier pattern = r'^[A-Za-z_]w*' return bool(re.match(pattern, s))"},{"question":"Create a function that takes an array of numbers and returns the sum of all the numbers in the array. However, if the array contains any non-numeric values, the function should return \`null\`. If the array is empty, the function should return \`0\`.","solution":"def sum_array(arr): Returns the sum of all numbers in the array. If the array contains any non-numeric values, returns None. If the array is empty, returns 0. if not arr: return 0 if any(not isinstance(i, (int, float)) for i in arr): return None return sum(arr)"},{"question":"Create a function that checks if a given sequence is a palindrome. A palindrome is a sequence that reads the same backward as forward. For example, the sequence \\"racecar\\" is a palindrome since reading it backward gives the same sequence.","solution":"def is_palindrome(sequence): Checks if the given sequence is a palindrome. Parameters: sequence (str): The sequence to check. Returns: bool: True if the sequence is a palindrome, False otherwise. return sequence == sequence[::-1]"},{"question":"Create a function that takes two integers as parameters \`num1\` and \`num2\`. The function should return the quotient and remainder of the division of \`num1\` by \`num2\`. The quotient and remainder should be integer values.","solution":"def divide_and_remainder(num1, num2): Returns the quotient and remainder of the division of num1 by num2. Parameters: num1 (int): The numerator. num2 (int): The denominator. Returns: tuple: A tuple containing the quotient and remainder. quotient = num1 // num2 remainder = num1 % num2 return quotient, remainder"},{"question":"Create a function that takes a string representing a hexadecimal number and converts it to its decimal equivalent. The function should validate if the input is a valid hexadecimal number before attempting the conversion.","solution":"def hex_to_decimal(hex_string): Converts a hexadecimal string to its decimal equivalent. Parameters: hex_string (str): A string representing the hexadecimal number Returns: int: Decimal equivalent of the hexadecimal number if valid, else raises ValueError if not isinstance(hex_string, str): raise ValueError(\\"Input must be a string\\") try: return int(hex_string, 16) except ValueError: raise ValueError(\\"Invalid hexadecimal number\\")"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a string that reads the same backward as forward. Your function should have the following signature: \`def is_palindrome(s: str) -> bool\`.","solution":"def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome. A palindrome is a string that reads the same backward as forward. :param s: input string :return: True if s is a palindrome, False otherwise return s == s[::-1]"},{"question":"Create a function that takes a dictionary as an input and returns a new dictionary that contains only the items where the key is an integer and the value is a string.","solution":"def filter_dict(input_dict): Filters the input dictionary to include only items where the key is an integer and the value is a string. Parameters: input_dict (dict): The input dictionary. Returns: dict: A new dictionary with filtered items. return {k: v for k, v in input_dict.items() if isinstance(k, int) and isinstance(v, str)}"},{"question":"Create a function that takes a string and an array of strings as input. The function should return a new array where each element is a string from the input array, but with the characters of each string reversed and only including characters that are present in the first string.","solution":"def filter_and_reverse(ref_str, str_array): This function takes a reference string and an array of strings as input. It returns a new array where each string is reversed and only contains characters present in the reference string. ref_set = set(ref_str) result = [] for s in str_array: filtered_reversed = ''.join([char for char in reversed(s) if char in ref_set]) result.append(filtered_reversed) return result"},{"question":"Create a function that takes a positive integer n and returns the sum of the squares of all positive integers less than n.","solution":"def sum_of_squares(n): Returns the sum of the squares of all positive integers less than n. Args: n (int): A positive integer Returns: int: Sum of squares of all positive integers less than n return sum(i * i for i in range(n))"},{"question":"Create a function that can generate a list of prime numbers within a given range. The function should take two arguments, the lower and upper bounds of the range, and return a list of all prime numbers within that range.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes(lower, upper): Generates a list of prime numbers within the given range [lower, upper]. primes = [] for num in range(lower, upper + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Create a function that takes a list of sentences and returns the one with the highest number of unique words. If there's a tie, return the sentence that comes first in lexicographical order.","solution":"def sentence_with_most_unique_words(sentences): Returns the sentence with the highest number of unique words. In case of a tie, returns the first sentence in lexicographical order. max_unique_words = 0 result_sentence = \\"\\" for sentence in sentences: unique_words_count = len(set(sentence.split())) if (unique_words_count > max_unique_words or (unique_words_count == max_unique_words and sentence < result_sentence)): max_unique_words = unique_words_count result_sentence = sentence return result_sentence"},{"question":"Create a function that takes in an array of numbers and returns the maximum number in the array using a stack.","solution":"def max_in_array_using_stack(array): Returns the maximum number in the array using a stack. if not array: # Check if the array is empty raise ValueError(\\"Array must not be empty\\") stack = [] for num in array: if not stack or num > stack[-1]: stack.append(num) return stack[-1]"},{"question":"Create a function that takes an input list and a target number as arguments. The function should return a tuple containing two integers: the first integer being the count of numbers in the list that are smaller than the target number, and the second integer being the count of numbers in the list that are greater than the target number.","solution":"def count_smaller_greater(numbers, target): Returns a tuple with the count of numbers smaller than the target and the count of numbers greater than the target. :param numbers: List of integers :param target: An integer target number :return: A tuple (count_smaller, count_greater) count_smaller = sum(1 for num in numbers if num < target) count_greater = sum(1 for num in numbers if num > target) return (count_smaller, count_greater)"},{"question":"Create a function that takes an array of integers and returns the count and appends a '*' at the end of each integer if it is divisible by 3.","solution":"def process_array(arr): Takes an array of integers and returns a list with elements appended by '*' if they are divisible by 3, along with a count of such elements. Parameters: arr (List[int]): List of integers Returns: Tuple[int, List[str]]: Count of numbers divisible by 3 and processed list in string format count = 0 result = [] for num in arr: if num % 3 == 0: result.append(f\\"{num}*\\") count += 1 else: result.append(str(num)) return count, result"},{"question":"Create a function that takes a list of positive integers and returns the one that appears most frequently. If there are multiple numbers with the same highest frequency, return the smallest of these numbers.","solution":"def most_frequent_element(lst): Returns the element which appears most frequently in the list. If multiple elements have the same highest frequency, return the smallest. if not lst: return None from collections import Counter count = Counter(lst) max_frequency = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_frequency] return min(most_frequent)"},{"question":"Create a function that takes any number of arguments and returns their sum, but only if the arguments are positive numbers. If any argument is negative or zero, the function should return a list of strings containing an error message for each invalid argument.","solution":"def positive_sum(*args): Returns the sum of positive arguments. If any argument is negative or zero, returns a list of error messages for each invalid argument. errors = [] total_sum = 0 for arg in args: if arg <= 0: errors.append(f\\"Invalid argument: {arg} is not a positive number.\\") else: total_sum += arg if errors: return errors return total_sum"},{"question":"Create a function that takes a string and returns a new string where all occurrences of a specified character are replaced with another specified character.","solution":"def replace_char(s, old_char, new_char): Returns a new string where all occurrences of old_char in the input string s are replaced with new_char. return s.replace(old_char, new_char)"},{"question":"Create a function that takes an integer \`N\` as a parameter and prints the first \`N\` Fibonacci numbers.","solution":"def fibonacci(N): Prints the first N Fibonacci numbers. if N < 1: return [] fib_sequence = [0] * N fib_sequence[0] = 0 if N > 1: fib_sequence[1] = 1 for i in range(2, N): fib_sequence[i] = fib_sequence[i - 1] + fib_sequence[i - 2] print(fib_sequence) return fib_sequence"},{"question":"Create a function that takes a list of integers and returns a new list with the elements sorted in a specific order. The order should be such that the first element is the largest number, the second is the smallest number, the third is the second largest, the fourth is the second smallest, and so on. Can you provide the python code for this?","solution":"def special_sort(lst): Takes a list of integers and returns a new list with the elements sorted in a specific order. The order should be such that the first element is the largest number, the second is the smallest number, the third is the second largest, the fourth is the second smallest, and so on. if not lst: return [] sorted_lst = sorted(lst) result = [] while sorted_lst: if sorted_lst: # Append the largest (last) element result.append(sorted_lst.pop(-1)) if sorted_lst: # Append the smallest (first) element result.append(sorted_lst.pop(0)) return result"},{"question":"Create a function that can convert degrees to radians in Python.","solution":"import math def degrees_to_radians(degrees): Converts degrees to radians. Args: degrees (float): Angle in degrees. Returns: float: Angle in radians. return degrees * (math.pi / 180)"},{"question":"Create a function that takes a string and returns whether or not it is a palindrome, considering only alphanumeric characters and ignoring cases. For example, the phrase \\"A man, a plan, a canal: Panama\\" is a palindrome, so the function should return true.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, considering only alphanumeric characters and ignoring case. Otherwise, returns False. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"Create a function that calculates the sum of all numbers from 1 up to and including the given number 'n' using recursion.","solution":"def sum_recursive(n): Returns the sum of all numbers from 1 to n using recursion. if n <= 1: return n else: return n + sum_recursive(n - 1)"},{"question":"Create a function that multiplies every element of an array by a given number.","solution":"def multiply_elements(array, multiplier): Multiply every element of the array by the given multiplier. return [x * multiplier for x in array]"},{"question":"Create a function that can take a standardized time format string (in the format of \\"24:00\\" or \\"23:59\\") and return the time in words for each hour and minute (e.g., \\"12:00\\" returns \\"twelve o'clock\\"). For hour, use words from 1-12, and minutes should be converted to words from 0-59. The function should handle the different cases of hours being in the morning, noon, afternoon, and evening. Additionally, manage the case where the minute is exactly 00, which should be formatted as \\"o'clock\\".","solution":"def time_to_words(time_str): Convert a time string in 'HH:MM' format to words. time_to_word = { \\"00\\": \\"twelve\\", \\"01\\": \\"one\\", \\"02\\": \\"two\\", \\"03\\": \\"three\\", \\"04\\": \\"four\\", \\"05\\": \\"five\\", \\"06\\": \\"six\\", \\"07\\": \\"seven\\", \\"08\\": \\"eight\\", \\"09\\": \\"nine\\", \\"10\\": \\"ten\\", \\"11\\": \\"eleven\\", \\"12\\": \\"twelve\\", \\"13\\": \\"one\\", \\"14\\": \\"two\\", \\"15\\": \\"three\\", \\"16\\": \\"four\\", \\"17\\": \\"five\\", \\"18\\": \\"six\\", \\"19\\": \\"seven\\", \\"20\\": \\"eight\\", \\"21\\": \\"nine\\", \\"22\\": \\"ten\\", \\"23\\": \\"eleven\\" } minute_to_word = { '01': 'one', '02': 'two', '03': 'three', '04': 'four', '05': 'five', '06': 'six', '07': 'seven', '08': 'eight', '09': 'nine', '10': 'ten', '11': 'eleven', '12': 'twelve', '13': 'thirteen', '14': 'fourteen', '15': 'fifteen', '16': 'sixteen', '17': 'seventeen', '18': 'eighteen', '19': 'nineteen', '20': 'twenty', '21': 'twenty-one', '22': 'twenty-two', '23': 'twenty-three', '24': 'twenty-four', '25': 'twenty-five', '26': 'twenty-six', '27': 'twenty-seven', '28': 'twenty-eight', '29': 'twenty-nine', '30': 'thirty', '31': 'thirty-one', '32': 'thirty-two', '33': 'thirty-three', '34': 'thirty-four', '35': 'thirty-five', '36': 'thirty-six', '37': 'thirty-seven', '38': 'thirty-eight', '39': 'thirty-nine', '40': 'forty', '41': 'forty-one', '42': 'forty-two', '43': 'forty-three', '44': 'forty-four', '45': 'forty-five', '46': 'forty-six', '47': 'forty-seven', '48': 'forty-eight', '49': 'forty-nine', '50': 'fifty', '51': 'fifty-one', '52': 'fifty-two', '53': 'fifty-three', '54': 'fifty-four', '55': 'fifty-five', '56': 'fifty-six', '57': 'fifty-seven', '58': 'fifty-eight', '59': 'fifty-nine', '00': \\"o'clock\\" } hours, minutes = time_str.split(':') hour_word = time_to_word[hours] if minutes == \\"00\\": return f\\"{hour_word} o'clock\\" else: minute_word = minute_to_word[minutes] return f\\"{hour_word} {minute_word}\\""},{"question":"Create a function that takes in an array of integers and returns the sum of the squares of its elements. The function should have a time complexity of O(n).","solution":"def sum_of_squares(arr): Returns the sum of the squares of the elements in the array. :param arr: List of integers. :return: Integer, sum of squares of the elements. return sum(x ** 2 for x in arr)"},{"question":"Create a function that takes a list of integers alist and a number x. The function should return the sum of all elements in the list that are the result of raising 2 to the power of x for each element in the list.","solution":"def sum_powers_of_two(alist, x): Returns the sum of all elements in the list that are the result of raising 2 to the power of x for each element in the list. Parameters: alist (list): A list of integers. x (int): The exponent to raise 2 to for each element in alist. Returns: int: The sum of all elements after raising 2 to the power of x. return sum(2 ** (item * x) for item in alist)"},{"question":"Create a function that converts a decimal number to a binary number using recursion. The function should take a non-negative integer as input and return the binary equivalent as a string.","solution":"def decimal_to_binary(n): Convert a non-negative integer to its binary equivalent as a string using recursion. if n == 0: return \\"0\\" elif n == 1: return \\"1\\" else: return decimal_to_binary(n // 2) + str(n % 2)"},{"question":"Create a function that takes a string as an argument and returns a dictionary with each character as a key and its frequency as the value. For example, given the string \\"hello\\", it should return {'h': 1, 'e': 1, 'l': 2, 'o': 1}.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the string s. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Create a function that generates all possible full-length binary trees with n nodes. Your function signature should be \`def generate_full_binary_trees(n):\`. For this problem, assume each node has unique values from 1 to n. A full binary tree is defined as a binary tree where every node has either two child nodes or no child nodes. The function should return a list of these trees, where each tree is represented as a list of lists, where the inner lists represent the nodes at each depth of the tree. For example, a full binary tree with 3 nodes ([1], [2, 3]) would be represented as \`[[[1], [2], [3]]]\`.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def generate_full_binary_trees(n): def all_possible_fbt(n): if n == 1: return [TreeNode(0)] if n % 2 == 0: return [] result = [] for left_num_nodes in range(1, n, 2): right_num_nodes = n - 1 - left_num_nodes left_subtrees = all_possible_fbt(left_num_nodes) right_subtrees = all_possible_fbt(right_num_nodes) for left in left_subtrees: for right in right_subtrees: root = TreeNode(0) root.left = left root.right = right result.append(root) return result def tree_to_values(root): if not root: return [] queue = [root] result = [] while queue: level_length = len(queue) current_level = [] for _ in range(level_length): node = queue.pop(0) current_level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result if n % 2 == 0 or n < 1: return [] # No full binary trees possible if n is not odd or less than 1 trees = all_possible_fbt(n) return [tree_to_values(root) for root in trees]"},{"question":"Create a function that will enable you to retrieve the value associated with a specified key in a dictionary. The function should take two arguments: \`dictionary\` (the dictionary from which the value is to be retrieved) and \`key\` (the key for which the value is required).","solution":"def get_value(dictionary, key): Returns the value associated with the specified key in the dictionary. If the key is not present, it returns None. Parameters: dictionary (dict): The dictionary from which to retrieve the value. key : The key whose value to retrieve. Returns: The value associated with the key or None if the key is not found. return dictionary.get(key)"},{"question":"Create a function that takes a string as input and returns the string with all the vowels reversed. For example, if the input is \\"hello world\\", the output should be \\"hollo werld\\". Vowels are the characters 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase). Assume input contains only letters and spaces. Your function should be case-insensitive to identify vowels.","solution":"def reverse_vowels(s): Given a string s, return the string with all the vowels reversed. Vowels are 'a', 'e', 'i', 'o', 'u' (both lowercase and uppercase). The function is case-insensitive but maintains the original case. vowels = set('aeiouAEIOU') s_list = list(s) i, j = 0, len(s) - 1 while i < j: if s_list[i] not in vowels: i += 1 elif s_list[j] not in vowels: j -= 1 else: s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 return ''.join(s_list)"},{"question":"Create a function that takes an integer as an argument and returns a string that represents the binary representation of the given integer. The binary string should not have any leading zeros unless the entire string is '0'.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. The returned string does not have leading zeros except for the '0' itself. if n == 0: return '0' return bin(n).replace('0b', '')"},{"question":"Create a function that will output the second-largest number in a list. If the list is empty or all elements are equal, the function should return \`None\`.","solution":"def second_largest_number(lst): Returns the second-largest number in a list. If the list is empty or all elements are equal, returns None. if len(lst) < 2: return None first = second = float('-inf') for num in lst: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that calculates the factorial of a given number using recursion. What is the factorial of a number and how does recursion work in this context?","solution":"def factorial(n): Calculates the factorial of a given number using recursion. :param n: The number to calculate the factorial for :return: The factorial of the number if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that converts a list of integers into a single string. Each integer should be separated by a comma and a space. For example, the list \`[1, 2, 3]\` should be converted to the string \`'1, 2, 3'\`.","solution":"def list_to_string(int_list): Converts a list of integers into a single string. Each integer is separated by a comma and a space. Parameters: int_list (list): A list of integers Returns: str: A string with all integers separated by a comma and a space return ', '.join(map(str, int_list))"},{"question":"Create a function that takes a string args as a parameter and returns a new string which removes any duplicate characters in the input string without altering the original order of characters. If no characters are removed, the function should return the original string.","solution":"def remove_duplicate_characters(s: str) -> str: Removes duplicate characters from the input string without altering the original order of characters. Returns the new string with duplicates removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that receives a string input representing a phone number and returns it in international format (123-456-7890).","solution":"def format_phone_number(phone_number): Returns the phone number in international format (123-456-7890). Args: phone_number (str): The phone number input as a string. Returns: str: The phone number formatted in international format. digits_only = ''.join(filter(str.isdigit, phone_number)) if len(digits_only) != 10: raise ValueError(\\"Phone number must contain exactly 10 digits.\\") formatted_number = f\\"{digits_only[:3]}-{digits_only[3:6]}-{digits_only[6:]}\\" return formatted_number"},{"question":"Create a function that takes a list of strings and returns a new list containing the strings with the case swapped.","solution":"def swap_case_in_list(strings): Return a list of strings with the case of each character swapped. Parameters: strings (list of str): The list of strings to swap case. Returns: list of str: The new list of strings with case swapped. return [s.swapcase() for s in strings]"},{"question":"Create a function that can take in two strings, an original string and a replacement string. The function should return a new string where all occurrences of the original string are replaced with the replacement string.","solution":"def replace_string(original_str, target, replacement): Replaces all occurrences of the target string in original_str with the replacement string. Parameters: original_str (str): The string where replacements will be made. target (str): The string to be replaced. replacement (str): The string to replace with. Returns: str: The resulting string after replacements. return original_str.replace(target, replacement)"},{"question":"Create a function that takes a string as input and returns the last word of the string. If the string is empty or does not contain any words, return an empty string. Assume words are separated by spaces.","solution":"def last_word(s): Returns the last word in the given string 's'. If the string is empty or does not contain any words, returns an empty string. words = s.strip().split() return words[-1] if words else ''"},{"question":"Create a function that takes an integer as input and prints the multiplication table from 1 to 10.","solution":"def print_multiplication_table(n): Prints the multiplication table of n from 1 to 10. for i in range(1, 10 + 1): print(f\\"{n} x {i} = {n * i}\\")"},{"question":"Create a function that checks whether a given string represents a valid date in the format \\"YYYY-MM-DD\\". The function should return true if the date is valid, and false otherwise.","solution":"from datetime import datetime def is_valid_date(date_str): Returns True if date_str is a valid date in the format \\"YYYY-MM-DD\\", else returns False. try: datetime.strptime(date_str, '%Y-%m-%d') return True except ValueError: return False"},{"question":"Create a function that finds duplicates in a list of integers. The function should return the duplicates in a list.","solution":"def find_duplicates(nums): Returns a list of duplicate numbers in the provided list of integers. seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Create a function that takes a 2D numpy array and returns the sum of all elements in the array that are greater than 10.","solution":"import numpy as np def sum_elements_greater_than_10(arr): Returns the sum of all elements in the 2D numpy array that are greater than 10. Parameters: arr (numpy.ndarray): 2D numpy array Returns: int/float: Sum of all elements greater than 10 return arr[arr > 10].sum()"},{"question":"Create a function that will accept a string consisting of words separated by spaces. The function should return a new string where each word is reversed and the order of the words is preserved. For example, if the input string is \\"hello world\\", the function should return \\"olleh dlrow\\".","solution":"def reverse_words(input_str): Reverses each word in the input string while preserving the order of the words. Parameters: input_str (str): The input string consisting of words separated by spaces. Returns: str: A new string where each word is reversed, but the order of words is preserved. return ' '.join(word[::-1] for word in input_str.split())"},{"question":"Create a function that accepts a list of integers and returns the largest sum of any two elements in the list.","solution":"def largest_sum_of_two_elements(lst): Returns the largest sum of any two elements in the list. If the list has fewer than two elements, returns None. if len(lst) < 2: return None # Sort the list to get the largest two elements lst = sorted(lst) # The largest sum of two elements will be from the last and second last elements return lst[-1] + lst[-2]"},{"question":"Create a function that converts an integer into its binary representation as a string, but with a twist. The function should also handle negative integers and format them as two's complement binary strings. Two's complement binary is used in computing to represent negative integers, where the most significant bit represents the sign.","solution":"def int_to_twos_complement_bin(n, bits=8): Converts an integer to a two's complement binary string. Args: - n (int): The integer to be converted. - bits (int): The number of bits for the two's complement representation. Returns: - str: Two's complement binary string representation of the integer. if n < 0: n = (1 << bits) + n binary_string = f\\"{n:0{bits}b}\\" return binary_string"},{"question":"Create a function that converts a decimal number to its hexadecimal representation using only bitwise operations and no built-in conversion functions. You should not use any functions from C's standard library for string operations either. Provide a step-by-step explanation.","solution":"def decimal_to_hexadecimal(n): Converts a decimal number to its hexadecimal representation using bitwise operations. if n == 0: return \\"0\\" hex_chars = \\"0123456789ABCDEF\\" result = [] while n > 0: remainder = n & 0xF # Get the last 4 bits result.append(hex_chars[remainder]) n = n >> 4 # Shift right by 4 bits to process the next digit return ''.join(result[::-1])"},{"question":"Create a function that calculates the number of elements in a given list that are greater than a specified threshold.","solution":"def count_greater_than_threshold(input_list, threshold): Returns the number of elements in \`input_list\` that are greater than \`threshold\`. :param list input_list: List of numerical elements. :param float threshold: The threshold value. :return: Number of elements greater than the threshold. :rtype: int return sum(1 for elem in input_list if elem > threshold)"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the even numbers from the original list. How can you efficiently handle large lists with this function?","solution":"def filter_even_numbers(numbers): Takes a list of integers and returns a new list containing only the even numbers. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that will determine if a number in an array is even or odd, and return the number along with its classification (even or odd). The function should be named \`classifyEvenOdd\` and accept an array of integers as an argument. For each number in the array, the function should check if it is even or odd and return a string in the format \\"number: classification\\". For example, the function call \`classifyEvenOdd([1, 2, 3, 4, 5, 6])\` should return \`\\"1: odd, 2: even, 3: odd, 4: even, 5: odd, 6: even\\"\`. If the array is empty, the function should return an empty string.","solution":"def classifyEvenOdd(arr): This function classifies each number in the array as \\"even\\" or \\"odd\\" and returns a string in the format \\"number: classification\\". Parameters: arr (list): List of integers Returns: str: A comma-separated string with number and its classification if not arr: return \\"\\" result = [] for num in arr: classification = \\"even\\" if num % 2 == 0 else \\"odd\\" result.append(f\\"{num}: {classification}\\") return \\", \\".join(result)"},{"question":"Create a function that takes an integer \`n\` as input and prints a right-aligned pyramid of asterisks of height \`n\`.","solution":"def print_pyramid(n): Prints a right-aligned pyramid of asterisks with the given height n. for i in range(1, n + 1): print(' ' * (n - i) + '*' * (2 * i - 1))"},{"question":"Create a function that takes a string as input and returns a list of words. If the string contains no words, the function should return an empty list. The input string may contain multiple words separated by spaces, including multiple spaces between words. The function should ignore leading and trailing spaces, and consecutive spaces between words should be treated as a single space.","solution":"def words_from_string(s): Returns a list of words from the input string. Consecutive spaces, leading and trailing spaces are ignored. return s.strip().split()"},{"question":"Create a function that takes two arguments: a list of integers and a target integer. The function should return the indices of the two numbers such that they add up to the target. If no solution exists, return an empty list. Additionally, ensure that the same element cannot be used more than once.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list nums that add up to target. Parameters: nums (list): A list of integers target (int): The target sum Returns: list: A list containing the indices of the two numbers of the input list that add up to the target. Returns an empty list if no such pair exists. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"Create a function that takes two arrays, arr1 and arr2, both with unique elements. The function should return all possible combinations of elements from both arrays without repetition.","solution":"from itertools import product def all_combinations(arr1, arr2): Returns all possible combinations of elements from arr1 and arr2 without repetition. if not arr1 or not arr2: return [] return list(product(arr1, arr2))"},{"question":"Create a function that accepts two parameters, \`a\` and \`b\`, and returns a string containing the product of \`a\` and \`b\` as a string.","solution":"def multiply_to_string(a, b): Returns the product of a and b as a string. return str(a * b)"},{"question":"Create a function that accepts two numbers, a and b, and returns the lower of the two.","solution":"def find_lower(a, b): Returns the lower of the two numbers a and b. return min(a, b)"},{"question":"Create a function that takes three parameters, all of which are numbers, and calculates the greatest common divisor (GCD) of these numbers. Implement this using the Euclidean algorithm.","solution":"import math def gcd_three_numbers(a, b, c): Returns the greatest common divisor (GCD) of three numbers a, b, and c. gcd_ab = math.gcd(a, b) return math.gcd(gcd_ab, c)"},{"question":"Create a function that sorts a list using the Bubble Sort algorithm. Provide an example of how to call this function with a list of integers.","solution":"def bubble_sort(arr): Sorts a list of integers using the Bubble Sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. n = len(arr) for i in range(n): # Track if swap was made swapped = False # Traverse the array from 0 to n-i-1 for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no two elements were swapped, break if not swapped: break return arr # Example of how to call this function example_list = [64, 34, 25, 12, 22, 11, 90] sorted_list = bubble_sort(example_list) print(sorted_list) # Output: [11, 12, 22, 25, 34, 64, 90]"},{"question":"Create a function that takes a list of integers and returns the maximum sum of any contiguous subarray. The function should have a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray. Parameters: nums (list): List of integers Returns: int: Maximum sum of any contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a string and returns the string reversed. However, if the string length is less than 5 characters, return the string unchanged. Also, the function should handle both alphabetic and numeric characters.","solution":"def reverse_string_if_long(input_string): Returns the reversed input_string if its length is 5 or more characters, otherwise returns the original string. if len(input_string) < 5: return input_string else: return input_string[::-1]"},{"question":"Create a function that takes a list of integers and returns the length of the list.","solution":"def list_length(lst): Returns the length of the input list. Parameters: lst (list): A list of integers. Returns: int: The length of the list. return len(lst)"},{"question":"Create a function that sorts an array using the quicksort algorithm. WAP in Python to implement Quicksort and test it with an example array.","solution":"def quicksort(arr): Sorts the given list using the Quicksort algorithm and returns the sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Create a function that takes a natural number \`n\` as input and returns the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should use recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes an integer n as an argument and returns the factorial of the number using recursion.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes an array of integers as input and returns the maximum product of any sub-array. The sub-array must contain at least one number and does not necessarily include all the numbers in the array.","solution":"def max_subarray_product(nums): Returns the maximum product of any sub-array. if not nums: return 0 n = len(nums) max_product = nums[0] min_product = nums[0] global_max = nums[0] for i in range(1, n): temp_max = max_product max_product = max(nums[i], max_product * nums[i], min_product * nums[i]) min_product = min(nums[i], temp_max * nums[i], min_product * nums[i]) global_max = max(global_max, max_product) return global_max"},{"question":"Create a function that takes a string as an argument and returns the number of occurrences of each character in the string. The function should work for any string of English letters and digits.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the input string s. :param s: Input string :type s: str :return: Dictionary with character counts :rtype: dict char_count = {} for char in s: if char.isalnum(): # Ensure only alphanumeric characters are counted if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that takes in a list of integers, \`num_list\`, and an integer \`n\`, and returns a new list containing the nth element of each sublist in \`num_list\`.","solution":"def extract_nth_elements(num_list, n): Given a list of lists of integers \`num_list\` and an integer \`n\`, return a list containing the nth element of each sublist. :param num_list: List[List[int]] :param n: int :return: List[int] return [sublist[n] for sublist in num_list if len(sublist) > n]"},{"question":"Create a function that takes a list of numbers, and returns the product of all the even numbers in the list. If there are no even numbers, the function should return -1.","solution":"def product_of_evens(lst): Returns the product of all even numbers in the list. If there are no even numbers, returns -1. product = 1 has_even = False for num in lst: if num % 2 == 0: product *= num has_even = True return product if has_even else -1"},{"question":"Create a function that takes in an array of integers and calculates the product of all the elements in the array. However, if the array contains a zero, the product should be reset to zero. If the array is empty, the product should also be zero. The function should return the final product.","solution":"def product_with_zero(arr): Returns the product of all elements in the array. If the array contains a zero, the product is set to zero. If the array is empty, the product is also zero. if not arr: return 0 product = 1 for num in arr: if num == 0: return 0 product *= num return product"},{"question":"Create a function that takes in the head of a singly linked list and returns the head of a new linked list that is the reverse of the input linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list and returns the head of the new reversed list. :param head: ListNode, head of the singly linked list :return: ListNode, head of the reversed singly linked list prev = None curr = head while curr is not None: next_temp = curr.next curr.next = prev prev = curr curr = next_temp return prev"},{"question":"Create a function that finds the maximum profit that can be earned by buying and selling a stock on two different days. The function should take a list of daily stock prices and return the maximum profit with a single buy and sell transaction.","solution":"def max_profit(prices): Finds the maximum profit that can be earned by buying and selling a stock on two different days. :param prices: List of daily stock prices :return: Maximum profit with a single buy and sell transaction if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Create a function that takes two lists as input parameters and returns their intersection. If there are no common elements, return an empty list. The function should also handle cases where the input lists contain duplicate elements. The time complexity of the solution should be less than O(n^2).","solution":"def list_intersection(list1, list2): Returns the intersection of two lists. Parameters: list1 (list): The first input list. list2 (list): The second input list. Returns: list: A list containing the intersection of the two input lists. # Convert lists to sets to remove duplicates and use set intersection set1 = set(list1) set2 = set(list2) # Return intersection as a list return list(set1 & set2)"},{"question":"Create a function that accepts two lists of integers and returns their product list. How can this be done?","solution":"def multiply_lists(list1, list2): Takes two lists of integers and returns a new list that contains the product of corresponding elements from the input lists. If the input lists are not of the same length, raises a ValueError. if len(list1) != len(list2): raise ValueError(\\"Both lists must be of the same length.\\") return [a * b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes in a list of strings and returns a list of integers where each integer represents the ASCII value of each character in the corresponding string from the input list. Convert each string in the list to a tuple of ASCII values before returning the list.","solution":"def strings_to_ascii_values(lst): Converts a list of strings into a list of tuples where each tuple contains the ASCII values of the characters in the corresponding string from the input list. :param lst: List of strings. :return: List of tuples of integers representing ASCII values of characters. return [tuple(ord(char) for char in string) for string in lst]"},{"question":"Create a function that finds the largest even number in a given list of integers. If no even number is found, the function should return None. The function should ignore negative numbers and only consider positive numbers.","solution":"def largest_even(numbers): Returns the largest even number in a list of positive integers. If no even number is found, returns None. Negative numbers are ignored. evens = [num for num in numbers if num > 0 and num % 2 == 0] return max(evens) if evens else None"},{"question":"Create a function that returns the number of days in a given month. The function should handle leap years for February.","solution":"def days_in_month(year, month): Returns the number of days in a given month and year. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") if month == 2: if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 # Leap year else: return 28 # Non-leap year elif month in [4, 6, 9, 11]: return 30 else: return 31"},{"question":"Create a function that identifies two numbers in a list that, when added together, equal a given target sum. Each number can only be used once.","solution":"def two_sum(nums, target): Identify two numbers in a list that add up to the target sum. Args: nums (list): List of numbers. target (int): Target sum. Returns: tuple: A tuple of two indices that add up to the target sum. num_dict = {} for index, num in enumerate(nums): complement = target - num if complement in num_dict: return (num_dict[complement], index) num_dict[num] = index return None"},{"question":"Create a function that converts a given string to its integer equivalent in a specified base. The function should take two parameters: the string and the base. The base can range from 2 to 16.","solution":"def convert_to_integer(s, base): Converts a given string \`s\` to its integer equivalent in the specified \`base\`. Parameters: s (str): The string representation of the number. base (int): The base of the number system (ranging from 2 to 16). Returns: int: The integer equivalent of the string \`s\` in the specified \`base\`. return int(s, base)"},{"question":"Create a function that takes a list of integers and returns True if there are any duplicate elements, and False otherwise. For example, if the input list is [1, 2, 3, 3, 4], the function should return True because '3' is repeated.","solution":"def has_duplicates(nums): Returns True if there are any duplicate elements in the list nums, False otherwise. return len(nums) != len(set(nums))"},{"question":"Create a function that takes as input a 2D list (matrix) and an integer n. Your function should return a new 2D list where each element in the original matrix multiplied by n.","solution":"def multiply_matrix(matrix, n): Multiplies each element in a 2D list (matrix) by an integer n. Args: matrix (list of list of int/float): The input 2D list (matrix). n (int): The multiplier. Returns: list of list of int/float: A new 2D list where each element is multiplied by n. return [[element * n for element in row] for row in matrix]"},{"question":"Create a function that generates a list of prime numbers between 1 and a given number 'n' using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers between 1 and n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n + 1, i): sieve[j] = False return [i for i in range(2, n + 1) if sieve[i]]"},{"question":"Create a function that takes two integer numbers as input and returns the highest common factor (HCF) of the two numbers using the Euclidean algorithm.","solution":"def hcf(a, b): Returns the highest common factor (HCF) of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string. The binary representation should be prefixed with \\"0b\\".","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string prefixed with '0b'. return bin(n)"},{"question":"Create a function that takes a string as input and returns the string in reverse order. Can you design a function that meets this requirement? If yes, how would you implement it?","solution":"def reverse_string(s): Returns the reverse of the input string. return s[::-1]"},{"question":"Create a function that takes an integer array and returns its maximum and minimum values. The function should return the maximum value as the first element of the tuple and the minimum value as the second element of the tuple.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum values of the array. if not arr: raise ValueError(\\"Array is empty\\") max_val = arr[0] min_val = arr[0] for num in arr: if num > max_val: max_val = num if num < min_val: min_val = num return (max_val, min_val)"},{"question":"Create a function that takes an array of integers as input and returns the sum of all numbers in the array using recursion.","solution":"def recursive_sum(arr): Returns the sum of all numbers in the array using recursion. if not arr: return 0 return arr[0] + recursive_sum(arr[1:])"},{"question":"Create a function that takes a string of parentheses as input and returns the maximum number of nested parentheses. For example, the string \\"(())()\\" should return 2 because there are two levels of nesting at the maximum.","solution":"def max_nested_parentheses(s): Returns the maximum number of nested parentheses in the input string s. max_depth = 0 current_depth = 0 for char in s: if char == '(': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == ')': current_depth -= 1 return max_depth"},{"question":"Create a function that takes three integers as input and returns the result of multiplying them together.","solution":"def multiply_three_numbers(a, b, c): Returns the product of three integers a, b, and c. return a * b * c"},{"question":"Create a function that checks if a given string contains only 'a's and 'b's. How should this function work?","solution":"def contains_only_as_and_bs(s): Checks if the given string contains only 'a's and 'b's. Args: s (str): The input string to check. Returns: bool: True if the string contains only 'a's and 'b's, False otherwise. return set(s).issubset({'a', 'b'})"},{"question":"Create a function that takes a list of integers and returns a list of lists, where each sublist contains elements from the input list which are at positions that are to the power of 2 (0-indexed).","solution":"def elements_at_power_of_2_indices(lst): Returns a list of lists, where each sublist contains elements from the input list which are at positions that are powers of 2 (0-indexed). :param lst: List of integers :return: List of lists with elements at indices that are powers of 2. result = [] i = 1 # Start with 2^0 = 1 as per 0-indexed while i - 1 < len(lst): result.append(lst[i - 1]) i <<= 1 # Multiply by 2 return result"},{"question":"Create a function that takes a name and returns a greeting. This function should be called with a name, and it should return a greeting message personalized with the given name.","solution":"def greet(name): Returns a greeting message personalized with the given name. return f\\"Hello, {name}!\\""},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward. The function should ignore spaces, punctuation, and case sensitivity. Here is a bad implementation of such a function in Python. Can you help me fix it?","solution":"import re def is_palindrome(s): Checks if the input string is a palindrome, ignoring spaces, punctuation, and case sensitivity. # Remove all non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that reverses a string passed as an argument and returns the reversed string. The function should handle both uppercase and lowercase letters, and ignore any non-alphabetic characters. For example, reversing the string \\"Hello, World!\\" should return \\"!dlroW ,olleH\\".","solution":"def reverse_string(s): Returns the reversed string of the input s. Ignores non-alphabetic characters. return s[::-1]"},{"question":"Create a function that takes a list of integers and returns a new list containing the sum of each pair of consecutive integers in the original list.","solution":"def sum_consecutive_pairs(int_list): Takes a list of integers and returns a new list containing the sum of each pair of consecutive integers. if not int_list or len(int_list) == 1: return [] return [int_list[i] + int_list[i + 1] for i in range(len(int_list) - 1)]"},{"question":"Create a function that determines the type of triangle based on the lengths of its three sides. The function should return one of three possible strings: \\"Equilateral\\" if all sides are equal, \\"Isosceles\\" if exactly two sides are equal, and \\"Scalene\\" if no sides are equal. Additionally, the function should check if the sides can form a valid triangle. A triangle is valid if the sum of the lengths of any two sides is greater than the length of the third side. If the sides do not form a valid triangle, return \\"Not a valid triangle\\".","solution":"def triangle_type(a, b, c): Determines the type of triangle based on the lengths of its sides. Parameters: a (int/float): Length of the first side. b (int/float): Length of the second side. c (int/float): Length of the third side. Returns: str: The type of triangle (\\"Equilateral\\", \\"Isosceles\\", \\"Scalene\\", or \\"Not a valid triangle\\"). # Check if the sides form a valid triangle if a + b <= c or a + c <= b or b + c <= a: return \\"Not a valid triangle\\" if a == b == c: return \\"Equilateral\\" elif a == b or b == c or a == c: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"Create a function that takes two arrays as input and produces another array containing their intersection, i.e., elements that are present in both arrays. Assume the input arrays contain no duplicates.","solution":"def array_intersection(arr1, arr2): Returns the intersection of two arrays. The intersection of two arrays is a list of elements that are present in both arrays. Arguments: arr1 -- first array arr2 -- second array Returns: list -- intersection of arr1 and arr2 return [element for element in arr1 if element in arr2]"},{"question":"Create a function that takes a string, finds the first repeated character and returns its position. If no character repeats, return -1.","solution":"def first_repeated_char_position(s): Finds the first repeated character in a string and returns its position. If no character repeats, returns -1. Parameters: s (str): The input string. Returns: int: The position of the first repeated character, or -1 if no repeat. seen = {} for i, char in enumerate(s): if char in seen: return seen[char] seen[char] = i return -1"},{"question":"Create a function that takes a list of words and returns a new list containing only the words that have an odd number of characters.","solution":"def words_with_odd_length(words): Returns a list of words that have an odd number of characters. Args: words (list): A list of words. Returns: list: A list containing only the words with an odd number of characters. return [word for word in words if len(word) % 2 != 0]"},{"question":"Create a function that takes two vectors as input and returns an integer representing the sum of the products of the corresponding components of the two vectors. This function should be implemented in Python.","solution":"def dot_product(vector1, vector2): Returns the dot product of two vectors. The dot product is calculated as the sum of the products of the corresponding components of the vectors. Arguments: vector1 -- A list of integers representing the first vector. vector2 -- A list of integers representing the second vector. Returns: An integer representing the dot product of the two vectors. if len(vector1) != len(vector2): raise ValueError(\\"Vectors must be of same length\\") return sum(x * y for x, y in zip(vector1, vector2))"},{"question":"Create a function that takes in a list of integers and returns a new list with the elements sorted in ascending order. However, the function should only sort the elements that are greater than 10. The elements that are not greater than 10 should remain in their original positions.","solution":"def sort_greater_than_ten(lst): Takes a list of integers and returns a new list with elements sorted in ascending order where only elements greater than 10 are sorted, but their relative positions to elements not greater than 10 are maintained. # Extract elements that are greater than 10 and sort them greater_than_ten = sorted([x for x in lst if x > 10]) # Use iterator to enable the placement of sorted elements in original structure sorted_iterator = iter(greater_than_ten) # Create the output list by placing sorted elements while keeping others in their place result = [next(sorted_iterator) if x > 10 else x for x in lst] return result"},{"question":"Create a function that takes an integer as input and returns a string containing the binary representation of the integer, with no spaces between the bits. For example, given the integer 10, the function should return the string \\"1010\\".","solution":"def integer_to_binary(n): Returns the binary representation of the given integer n as a string. return bin(n)[2:]"},{"question":"Create a function that takes a list of integers as input and returns a list containing only the positive integers.","solution":"def filter_positive_numbers(lst): Returns a list containing only the positive integers from lst. return [num for num in lst if num > 0]"},{"question":"Create a function that accepts a string of SQL queries and returns a list of the first word of each query, representing their keywords.","solution":"def get_sql_keywords(queries): Returns a list of the first word of each SQL query. :param queries: A string containing one or more SQL queries. :return: A list of strings, each being the first word of a SQL query. # Split the string into individual queries based on the semi-colon individual_queries = queries.split(';') # Get the first word of each query, stripping any leading/trailing white spaces keywords = [query.strip().split()[0] for query in individual_queries if query.strip()] return keywords"},{"question":"Create a function that assigns string values to an array, using for loop in Python to store values and then display the array.","solution":"def assign_strings_to_array(strings): Assigns string values to an array and returns the array. Params: - strings (list of str): List of strings to be assigned to the array. Returns: - list of str: List containing the strings. array = [] for string in strings: array.append(string) return array def display_array(array): Displays the array. Params: - array (list of str): List of strings to be displayed. for item in array: print(item)"},{"question":"Create a function that calculates the sum of all the multiples of 3 or 5 below a given number. For example, for the number 10, the function should return 23, because 3, 5, 6, and 9 are multiples of 3 or 5 below 10.","solution":"def sum_of_multiples(limit): Returns the sum of all the multiples of 3 or 5 below the given limit. return sum(x for x in range(limit) if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that converts a given string to an integer. By holding this function, I can pass a string, and get back the integer that the string would convert to if it were a number.","solution":"def string_to_int(s): Converts a given string to an integer. try: return int(s) except ValueError: raise ValueError(f\\"Cannot convert {s} to an integer\\")"},{"question":"Create a function that can identify the index of the first occurrence of a substring within a string. If the substring is not found, the function should return -1.","solution":"def find_substring(main_str, sub_str): Returns the index of the first occurrence of sub_str within main_str. If sub_str is not found, returns -1. return main_str.find(sub_str)"},{"question":"Create a function that finds the majority element in an array. The majority element is the element that appears more than half the time within the array. If no majority element exists, return -1. The function should be efficient and consider both time and space complexity.","solution":"def find_majority_element(arr): Finds the majority element in an array. The majority element is the element that appears more than half the time within the array. If no majority element exists, return -1. n = len(arr) candidate = None count = 0 # Boyer-Moore Voting Algorithm for num in arr: if count == 0: candidate = num if num == candidate: count += 1 else: count -= 1 # Verify the candidate if arr.count(candidate) > n // 2: return candidate else: return -1"},{"question":"Create a function that accepts three string arguments - \`player1\`, \`player2\`, and \`board\`. The board is a \`4x5\` grid represented as a string of \`5\` strings each of length \`4\`. Your function should return \`True\` if the given \`player1\` or \`player2\` has filled a column or a row with \`4\` of their symbols ('1' for player1, '2' for player2), and \`False\` otherwise.","solution":"def check_winner(player1: str, player2: str, board: str) -> bool: Checks if player1 or player2 has filled a row or a column with 4 of their symbols on a 4x5 board. :param player1: Symbol for player1 :param player2: Symbol for player2 :param board: A string representing the 4x5 board :return: True if either player has filled a row or column, otherwise False # Create a 2D list representing the board grid = [list(row) for row in board.split()] # Check rows for a winner for row in grid: if row.count(player1) == 4 or row.count(player2) == 4: return True # Check columns for a winner for col in range(4): column = [grid[row][col] for row in range(5)] if column.count(player1) == 4 or column.count(player2) == 4: return True return False"},{"question":"Create a function that returns the number of unique characters in a string, ignoring case sensitivity.","solution":"def count_unique_characters(s): Returns the number of unique characters in a string, ignoring case sensitivity. Parameters: s (str): The input string. Returns: int: Number of unique characters in the string. unique_chars = set(s.lower()) return len(unique_chars)"},{"question":"Create a function that checks if a given list of unique integers contains a triplet such that the sum of the triplet equals to a target value. The function should return true if such a triplet exists, and false otherwise. The function should be designed to handle cases where the input list can be quite large.","solution":"def find_triplet_with_sum(nums, target): Returns true if there exists a triplet in the list such that their sum equals to the target value. nums.sort() n = len(nums) for i in range(n-2): left, right = i+1, n-1 while (left < right): current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Create a function that takes a list of numbers and a target sum, and returns the indices of the two numbers such that they add up to the target sum using a Python script.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target sum. Args: nums: List of integers. target: Target sum. Returns: A tuple (i, j), where i and j are the indices of the two numbers. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement], i) num_map[num] = i return None # If there is no solution"},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified limit. The function should accept two parameters: the first is the maximum number of Fibonacci numbers to generate, and the second is the upper limit for the values of the Fibonacci numbers. The generated list should contain only Fibonacci numbers that are less than or equal to the given limit and within the specified count.","solution":"def generate_fibonacci(count, limit): Generates a list of Fibonacci numbers up to a specified limit, with a maximum of 'count' numbers in the list. Parameters: - count (int): The maximum number of Fibonacci numbers to generate. - limit (int): The upper limit for the values of the Fibonacci numbers. Returns: - list: A list of Fibonacci numbers. fibonacci_numbers = [] a, b = 0, 1 while len(fibonacci_numbers) < count and a <= limit: fibonacci_numbers.append(a) a, b = b, a + b return fibonacci_numbers"},{"question":"Create a function that takes in a list of integers and returns the sum of all the prime numbers in the list. Return -1 if the list does not contain any prime numbers.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(lst): Returns the sum of all prime numbers in the list. Returns -1 if there are no prime numbers in the list. prime_sum = sum(x for x in lst if is_prime(x)) return prime_sum if prime_sum > 0 else -1"},{"question":"Create a function that takes an integer as an argument and returns a string representation of the integer in a padded binary format. The padding should ensure that the binary string has at least 8 bits. For example, the integer 5 should be represented as \\"00000101\\".","solution":"def int_to_padded_binary(n): Returns the binary representation of the integer n, padded to at least 8 bits. return format(n, '08b')"},{"question":"Create a function that takes a list of integers and a target integer as arguments and returns the number of occurrences of the target integer in the list.","solution":"def count_occurrences(lst, target): Returns the number of occurrences of the target integer in the list. Parameters: lst (list of int): The list of integers. target (int): The target integer to count in the list. Returns: int: The number of occurrences of the target integer in the list. return lst.count(target)"},{"question":"Create a function that takes in two binary strings, \`a\` and \`b\`, and returns the bit-wise XOR of the two. The result should be a binary string, prefixed with \\"0b\\".","solution":"def xor_binary_strings(a, b): Returns the bit-wise XOR of two binary strings as a binary string prefixed with '0b'. # Convert binary strings to integers int_a = int(a, 2) int_b = int(b, 2) # Compute XOR xor_result = int_a ^ int_b # Convert result back to binary string return bin(xor_result)"},{"question":"Create a function that reverses the order of elements in an array and returns the reversed array.","solution":"def reverse_array(arr): Reverses the order of elements in an array. return arr[::-1]"},{"question":"Create a function that takes a list of integers and returns the sum of all the even numbers in the list. If there are no even numbers, return the minimum integer in the list.","solution":"def sum_even_or_min(nums): Returns the sum of all even numbers in the list. If there are no even numbers, returns the minimum integer in the list. even_nums = [num for num in nums if num % 2 == 0] if even_nums: return sum(even_nums) else: return min(nums)"},{"question":"Create a function that checks whether a string contains only alphanumeric characters. Write a function in Python that takes a single string as an argument and returns \`True\` if the string contains only alphanumeric characters (letters, digits, and underscores) and \`False\` otherwise.","solution":"def is_alphanumeric(s): Returns True if the string contains only alphanumeric characters (letters, digits), False otherwise. return s.isalnum()"},{"question":"Create a function that takes two strings as input and returns a new sorted list of characters, which contains all unique characters from both strings.","solution":"def unique_sorted_characters(str1, str2): Returns a new sorted list of unique characters from both input strings. # Concatenate both strings and convert them into a set to remove duplicates unique_chars = set(str1 + str2) # Convert the set back to a list and sort it sorted_unique_chars = sorted(unique_chars) return sorted_unique_chars"},{"question":"Create a function that generates a sequence of numbers from 1 to n based on an interval (common difference d). The function should also take a boolean value that decides whether the sequence should be in reverse order or not.","solution":"def generate_sequence(n, d, reverse=False): Generates a sequence of numbers from 1 to n with common difference d. If reverse is True, the sequence is returned in reverse order. :param n: The endpoint of the sequence. :param d: Common difference between the elements. :param reverse: Whether to reverse the sequence or not. :return: A list of numbers. sequence = list(range(1, n + 1, d)) if reverse: sequence.reverse() return sequence"},{"question":"Create a function that calculates the factorial of a number using both iterative and recursive approaches. Then, compare and discuss the efficiency of both methods in terms of time complexity and space complexity.","solution":"def factorial_iterative(n): Calculates the factorial of a number using an iterative approach. :param n: The number to calculate the factorial of. :return: The factorial of the number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Calculates the factorial of a number using a recursive approach. :param n: The number to calculate the factorial of. :return: The factorial of the number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1) # Efficiency discussion: # Iterative Approach: # Time Complexity: O(n) - because it involves a single loop that runs n-1 times. # Space Complexity: O(1) - uses a constant amount of extra space. # Recursive Approach: # Time Complexity: O(n) - for n recursive calls. # Space Complexity: O(n) - because of the space required to maintain the call stack for n recursive calls."},{"question":"Create a function that takes a list of strings and returns a new list with all the strings that start with the letter 'a'.","solution":"def filter_strings_starting_with_a(strings): Returns a new list containing all strings from the input list that start with the letter 'a'. Parameters: strings (list of str): List of strings to be filtered. Returns: list of str: New list with strings starting with 'a'. return [string for string in strings if string.startswith('a')]"},{"question":"Create a function that , given a string of lowercase letters as input, returns a string that is the reverse of the in-place reversal of the string. In other words, the function should first reverse the string in-place and then reverse it again to return to its original order. The function should always return the string in its original order.","solution":"def reverse_inplace_and_revert(s): This function takes a string, reverses it in-place, and then reverses it again to return to its original order. # Reverse the string. reversed_s = s[::-1] # Reverse it again to get the original string. original_s = reversed_s[::-1] return original_s"},{"question":"Create a function that takes as input a list of integers and returns a list of strings representing the binary equivalent of each integer in the original list. Each binary string should be zero-padded to 8 bits.","solution":"def int_to_binary_string_list(int_list): Converts a list of integers to a list of their binary string equivalents, zero-padded to 8 bits. Parameters: int_list (list): List of integers. Returns: list: List of binary strings zero-padded to 8 bits. return [format(x, '08b') for x in int_list]"},{"question":"Create a function that generates a custom SBI ATM PIN. The SBI ATM PINs follow specific rules: they must be exactly four digits long, and the first digit must be greater than or equal to 5. The second digit must be even, and the third and fourth digits must be odd. The function should return a list of all possible SBI ATM PINs that adhere to these rules.","solution":"def generate_sbi_atm_pins(): Generates all possible SBI ATM PINs based on the rules: - The PIN must be exactly four digits long. - The first digit must be greater than or equal to 5. - The second digit must be even. - The third and fourth digits must be odd. Returns: list: A list of all possible SBI ATM PINs as strings. pins = [] for first_digit in range(5, 10): for second_digit in range(0, 10, 2): for third_digit in range(1, 10, 2): for fourth_digit in range(1, 10, 2): pin = f\\"{first_digit}{second_digit}{third_digit}{fourth_digit}\\" pins.append(pin) return pins"},{"question":"Create a function that takes a list of integers and returns a list of tuples, where each tuple contains a pair of consecutive numbers from the input list.","solution":"def pair_consecutive_numbers(nums): Returns a list of tuples, where each tuple contains a pair of consecutive numbers from the input list. Parameters: nums (list): A list of integers. Returns: list: A list of tuples containing pairs of consecutive numbers. return [(nums[i], nums[i + 1]) for i in range(len(nums) - 1)]"},{"question":"Create a function that accepts a name and an age, then prints \\"Hello, my name is [name] and I am [age] years old.\\"","solution":"def introduce(name, age): Returns an introduction statement with the provided name and age. return f\\"Hello, my name is {name} and I am {age} years old.\\""},{"question":"Create a function that processes an input string and returns a \`Dictionary<string, int>\` where the key is a character from the string and the value is the number of times that character appears in the string.","solution":"def character_count(input_string): Returns a dictionary with characters as keys and their respective counts as values. char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that takes a string and returns a new string with each character's case inverted. For instance, \\"Python\\" should become \\"pYTHON\\".","solution":"def invert_case(s): Returns a new string with each character's case inverted. return ''.join(char.upper() if char.islower() else char.lower() for char in s)"},{"question":"Create a function that takes two integers \`n\` and \`m\`, and returns the sum of the first \`n\` multiples of \`m\`.","solution":"def sum_of_multiples(n, m): Returns the sum of the first n multiples of m. Parameters: n (int): The number of multiples. m (int): The integer whose multiples we are summing. Returns: int: The sum of the first n multiples of m. return sum(m * i for i in range(1, n + 1))"},{"question":"Create a function that takes two parameters. The first is the name of a city and the second is a list of cities. The function should return the position of the given city in the list if it exists, and -1 if it doesn't.","solution":"def find_city_position(city, city_list): Returns the position of the given city in the list of cities if it exists, otherwise -1. try: return city_list.index(city) except ValueError: return -1"},{"question":"Create a function that takes in a list of words and returns the one that appears the most frequently. In Python, you can use the collections module which provides a Counter class that can be used for efficient counting. However, you need to showcase the implementation of this without using the Counter class.","solution":"def most_frequent_word(words): Returns the word that appears the most frequently in the given list of words. In case of a tie, returns the first word with the highest frequency. word_count = {} # Count the frequency of each word in the list for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Find the word with the highest frequency max_count = -1 most_frequent = None for word, count in word_count.items(): if count > max_count: max_count = count most_frequent = word return most_frequent"},{"question":"Create a function that takes a list of numbers as an argument. The function should return the sum of all the odd numbers in the list.","solution":"def sum_of_odd_numbers(numbers): Returns the sum of all odd numbers in the given list. :param numbers: List of integers :return: Sum of all odd integers in the list return sum(number for number in numbers if number % 2 != 0)"},{"question":"Create a function that takes a list of integers and prints the integers in the list.","solution":"def print_integers(lst): Prints the integers in the given list. for number in lst: print(number)"},{"question":"Create a function that accepts a list of integers and returns the longest consecutive sequence of numbers in the list. For example, if the input list is [100, 4, 200, 1, 3, 2], the function should return [1, 2, 3, 4] as it is the longest sequence of consecutive integers.","solution":"def longest_consecutive_sequence(nums): if not nums: return [] num_set = set(nums) longest_sequence = [] for num in nums: if num - 1 not in num_set: current_num = num current_sequence = [] while current_num in num_set: current_sequence.append(current_num) current_num += 1 if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence return longest_sequence"},{"question":"Create a function that takes an input of a list of numbers. Subtract the second, fourth, sixth, etc., numbers from the first, third, fifth, etc., numbers respectively. For example, if the input list is [5, 2, 8, 4, 9, 1], the function should return [5-20, 8-4, 9-1] which simplifies to [-15, 4, 8].","solution":"def subtract_alternating(lst): Takes a list of numbers and subtracts the second, fourth, sixth, etc., numbers from the first, third, fifth, etc., numbers respectively. Parameters: lst (list of int): A list of integers. Returns: list of int: A list of results after the described operation. result = [] for i in range(0, len(lst), 2): if i+1 < len(lst): result.append(lst[i] - lst[i+1]) else: result.append(lst[i]) return result"},{"question":"Create a function that can transform a number into an array of its digits. The function should handle both positive and negative numbers, converting them into a list where each digit is an element. For example, for the number -123, the function should return [-1, 2, 3]. If the input is 0, it should return [0].","solution":"def number_to_digits(n): Transforms a number into an array of its digits. Parameters: n (int): The number to be transformed. Returns: List[int]: A list of digits of the number. # Handle the number 0 explicitly if n == 0: return [0] is_negative = n < 0 n = abs(n) digits = list(map(int, str(n))) if is_negative: digits[0] = -digits[0] return digits"},{"question":"Create a function that takes in two arguments, an array of strings and a word, and returns an array containing all the words from the input array that contain the specified word as a substring.","solution":"def find_words_with_substring(words, substring): Given an array of strings and a substring, return an array of strings from the input array that contain the substring. :param words: List of strings to search within. :param substring: The substring to look for. :return: List of strings that contain the substring. return [word for word in words if substring in word]"},{"question":"Create a function that takes an integer as input and multiplies it by 2. If the result of this multiplication is greater than 100, return the result minus 50. If the result is less than or equal to 100, return the result plus 25.","solution":"def multiply_and_adjust(n): Multiplies the input integer by 2, then adjusts the result: - If the result is greater than 100, return the result minus 50 - If the result is less than or equal to 100, return the result plus 25 result = n * 2 if result > 100: return result - 50 else: return result + 25"},{"question":"Create a function that accepts a list of numbers and returns the sum of those numbers. You should implement this function using recursion.","solution":"def recursive_sum(numbers): Returns the sum of a list of numbers using recursion. if not numbers: return 0 return numbers[0] + recursive_sum(numbers[1:])"},{"question":"Create a function that takes in two integer arrays of the same length and returns an array that contains the element-wise minimums of the input arrays. For example, if the input arrays are \`[3, 5, 7]\` and \`[2, 4, 6]\`, the output should be \`[2, 4, 6]\`.","solution":"def elementwise_min(arr1, arr2): Takes in two integer arrays of the same length and returns an array that contains the element-wise minimums of the input arrays. Parameters: arr1 (list of int): The first input array. arr2 (list of int): The second input array. Returns: list of int: An array containing the element-wise minimums of arr1 and arr2. return [min(a, b) for a, b in zip(arr1, arr2)]"},{"question":"Create a function that identifies the first occurrence of a specific number in a list and returns its index. If the number is not found, the function should return -1. Use this function to find the index of the number 42 in the list [1, 2, 3, 42, 5, 6, 42, 7].","solution":"def find_first_occurrence(lst, target): Returns the index of the first occurrence of target in lst. If target is not found, returns -1. try: return lst.index(target) except ValueError: return -1 # Example usage to find the index of 42 in the given list index_of_42 = find_first_occurrence([1, 2, 3, 42, 5, 6, 42, 7], 42)"},{"question":"Create a function that takes two strings as input and returns the total number of unique vowels found in both strings. Consider both upper and lowercase vowels as distinct.","solution":"def count_unique_vowels(str1, str2): Returns the total number of unique vowels found in both strings. Considers both upper and lowercase vowels as distinct. vowels = set(\\"aeiouAEIOU\\") unique_vowels = set() for char in str1 + str2: if char in vowels: unique_vowels.add(char) return len(unique_vowels)"},{"question":"Create a function that calculates the mean of a given list of numbers. The function should take a list of numbers as input and return the mean as a float. If the list is empty, the function should return \`None\`.","solution":"def calculate_mean(numbers): Calculates the mean of a given list of numbers. Args: numbers (list): A list of numbers. Returns: float: The mean of the numbers in the list, or None if the list is empty. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Create a function that takes a list of numbers and returns a new list containing only the even numbers from the original list, plus an additional \`0\` at the end of the list. If the input list has no even numbers, return a list with just a \`0\`.","solution":"def filter_even_and_add_zero(lst): Takes a list of numbers and returns a new list containing only the even numbers from the original list, plus an additional \`0\` at the end of the list. If the input list has no even numbers, return a list with just a \`0\`. even_numbers = [num for num in lst if num % 2 == 0] even_numbers.append(0) return even_numbers"},{"question":"Create a function that calculates the factorial of a given non-negative integer using both iterative and recursive methods. Provide an explanation of both methods.","solution":"def factorial_iterative(n): Calculates factorial of a given non-negative integer n using an iterative method. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Calculates factorial of a given non-negative integer n using a recursive method. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1)"},{"question":"Create a function that computes the cumulative sum of a list of integers. The function should return the cumulative sum as a new list. For example, given the input list \`[1, 2, 3, 4, 5]\`, the output should be \`[1, 3, 6, 10, 15]\`.","solution":"def cumulative_sum(nums): Returns the cumulative sum of a list of integers. Args: nums (list of int): A list of integers. Returns: list of int: A list where the i-th element is the sum of the first i+1 elements from the input list. cumsum_list = [] total = 0 for num in nums: total += num cumsum_list.append(total) return cumsum_list"},{"question":"Create a function that returns the median value of an array of numbers. The array can contain both odd and even numbers of elements. If the array is empty, the function should return None.","solution":"def median(arr): Returns the median value of an array of numbers. If the array is empty, returns None. if not arr: return None arr_sorted = sorted(arr) n = len(arr_sorted) mid = n // 2 if n % 2 == 0: return (arr_sorted[mid - 1] + arr_sorted[mid]) / 2 else: return arr_sorted[mid]"},{"question":"Create a function that takes an array of numbers and returns an array with each number multiplied by 2.","solution":"def multiply_by_two(arr): Takes an array of numbers and returns an array with each number multiplied by 2. return [x * 2 for x in arr]"},{"question":"Create a function that can take a string, reverse its order, and return it.","solution":"def reverse_string(s): Returns the given string in reverse order. return s[::-1]"},{"question":"Create a function that returns the number of days in a given month. The function should take into account whether the year is a leap year or not. Note that February should return 29 days in a leap year and 28 days otherwise.","solution":"def days_in_month(year, month): Returns the number of days in a given month of a given year. Args: year (int): The year e.g., 2021 month (int): The month e.g., 2 for February Returns: int: Number of days in the given month # Months with fixed days month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if month == 2: # Checking for leap year if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 else: return month_days[month - 1]"},{"question":"Create a function that calculates the sum of all numbers in a list. The function should handle the case where the list is empty.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in a list. If the list is empty, returns 0. return sum(numbers)"},{"question":"Create a function that converts a string to an array of words, where each word is separated by a space character.","solution":"def string_to_array(s): Converts a string to an array of words, where each word is separated by a space character. Parameters: s (str): The input string to be converted. Returns: list: A list of words in the input string. return s.split()"},{"question":"Create a function that takes an input of a list and removes all duplicate elements from it. Return the list with only unique elements.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list and returns a list with unique elements. return list(set(input_list))"},{"question":"Create a function that takes two parameters, a start value and an end value, and returns an array that contains all the numbers in that range, inclusive of the start and end values.","solution":"def range_inclusive(start, end): Returns a list of numbers in the range from start to end, inclusive of both. return list(range(start, end + 1))"},{"question":"Create a function that takes two integers as input and returns their sum. If the sum is even, return the sum plus an additional 10% of the sum. If the sum is odd, return the sum plus an additional 5% of the sum.","solution":"def custom_add(a, b): Returns the sum of a and b with a conditional additional percentage. If the sum is even, add 10% of the sum to the result. If the sum is odd, add 5% of the sum to the result. total = a + b if total % 2 == 0: return total + (total * 0.10) else: return total + (total * 0.05)"},{"question":"Create a function that takes a list of integer pairs and returns the maximum product of any pair in the list.","solution":"def max_product_pairs(pairs): This function takes a list of integer pairs and returns the maximum product of any pair. :param pairs: List[Tuple[int, int]] - A list of integer pairs :return: int - The maximum product of any pair in the list max_product = float('-inf') for x, y in pairs: prod = x * y if prod > max_product: max_product = prod return max_product"},{"question":"Create a function that accepts an optional parameter.","solution":"def greet(name=\\"World\\"): Returns a greeting message. If no name is provided, it defaults to 'World'. Parameters: name (str): Optional. The name to greet. Default is 'World'. Returns: str: A greeting message. return f\\"Hello, {name}!\\""},{"question":"Create a function that takes a linked list and returns a boolean value indicating whether the linked list has a cycle or not. A cycle occurs when a node points to another node that has already been visited.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head): Detects whether the linked list contains a cycle. Returns True if a cycle is present, otherwise False. if not head or not head.next: return False slow = head fast = head.next while fast and fast.next: if slow == fast: return True slow = slow.next fast = fast.next.next return False"},{"question":"Create a function that calculates the sum of all even numbers up to a given number \`n\`. If the given number \`n\` is less than 2, return null else, calculate the sum.","solution":"def sum_even_numbers_up_to(n): Returns the sum of all even numbers up to a given number n. If n is less than 2, returns None. if n < 2: return None return sum(x for x in range(2, n + 1, 2))"},{"question":"Create a function that takes a list of numbers as an argument and returns the sum of the first half of the list, excluding any numbers that are less than 0. If the list has an odd number of elements, the function should ignore the middle element.","solution":"def sum_first_half_excluding_negatives(nums): Returns the sum of the first half of the list excluding any numbers that are less than 0. If the list has an odd number of elements, the middle element is ignored. # Calculate the midpoint (ignoring the middle element if the list length is odd) midpoint = len(nums) // 2 # Slice the list to get the first half first_half = nums[:midpoint] # Sum the positive numbers only return sum(num for num in first_half if num >= 0)"},{"question":"Create a function that takes a list of lists (2D array) as an input and returns a new list containing the transpose of the input 2D array. The transpose of a 2D array is obtained by swapping rows with columns. Assume that all inner lists will have the same length.","solution":"def transpose(matrix): Returns the transpose of a given 2D list (matrix). Args: matrix (list of list of any type): The input 2D list to be transposed. Returns: list of list of any type: The transposed 2D list. if not matrix: return [] return [[matrix[row][col] for row in range(len(matrix))] for col in range(len(matrix[0]))]"},{"question":"Create a function that takes an integer as input and returns the maximum number of bits required to represent that integer in binary. In other words, if the input is 10, the function should return 4 because 10 in binary is 1010, which requires 4 bits.","solution":"def max_bits_required(n): Returns the maximum number of bits required to represent the integer \`n\` in binary. if n == 0: return 1 return len(bin(n)) - 2 # Subtract 2 to account for the '0b' prefix."},{"question":"Create a function that checks which of the given numbers are divisible by 3 and removes them from the original list. Repeat this process until no more numbers can be removed. Return the final list.","solution":"def remove_divisible_by_3(numbers): Removes numbers divisible by 3 from the list until no more such numbers can be removed. Returns the final list. while any(n % 3 == 0 for n in numbers): numbers = [n for n in numbers if n % 3 != 0] return numbers"},{"question":"Create a function that accepts a list of integers and returns the maximum value. However, the function should handle the case where the list might be empty. If the list is empty, the function should raise a custom error called \`EmptyListError\`.","solution":"class EmptyListError(Exception): Custom exception to be raised when the provided list is empty. pass def find_max_value(lst): Returns the maximum value in the list. Raises EmptyListError if the list is empty. Args: lst (list): A list of integers. Returns: int: The maximum value in the list. Raises: EmptyListError: If the provided list is empty. if not lst: raise EmptyListError(\\"The list is empty.\\") return max(lst)"},{"question":"Create a function that takes a string as input and returns a list of dictionaries where each dictionary represents a chunk of the string, possibly separated by whitespace. If the string contains a '#', split it immediately and ignore subsequent characters on the same line. For example, the string \\"a b #c d\\" should result in \`[{'chunk1': 'a', 'chunk2': 'b'}, {'chunk1': 'c'}]\`.","solution":"def parse_string(input_str): Parse the input string into chunks and ignore comments after '#'. result = [] lines = input_str.split(\\"n\\") for line in lines: if '#' in line: line = line.split('#')[0] chunks = line.split() if chunks: chunk_dict = {f\\"chunk{i+1}\\": chunk for i, chunk in enumerate(chunks)} result.append(chunk_dict) return result"},{"question":"Create a function that arranges the numbers in a list in a zigzag pattern.","solution":"def zigzag(arr): Arrange the elements of the array in zigzag order. A zigzag order means that for every element arr[i]: - if i is even, arr[i] <= arr[i+1] - if i is odd, arr[i] >= arr[i+1] Parameters: arr (list): A list of integers. Returns: list: A list arranged in zigzag pattern. # Traverse all elements in the array for i in range(len(arr) - 1): if i % 2 == 0: if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] else: if arr[i] < arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr"},{"question":"Create a function that takes in two arguments, a list of integers and a target integer. The function should return the indices of the two numbers such that they add up to the target. If no such numbers exist, return an empty list. Assume that each input will have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. If no such numbers exist, returns an empty list. :param nums: List of integers :param target: Target integer :return: List of two indices num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Create a function that converts a given number to its binary representation and appends a '1' at the end.","solution":"def to_binary_with_one(n): Converts the given number to its binary representation and appends a '1' at the end. Parameters: n (int): The number to convert. Returns: str: The binary representation with an appended '1'. binary_representation = bin(n)[2:] return binary_representation + '1'"},{"question":"Create a function that returns the length of the longest subsequence in a given list such that the subsequence is strictly increasing. You need to solve this problem using dynamic programming. Here is the list: list1 = [10, 22, 9, 33, 21, 50, 41, 60].","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in the list nums. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) list1 = [10, 22, 9, 33, 21, 50, 41, 60] result = length_of_LIS(list1) result"},{"question":"Create a function that takes an integer array as an input and returns the maximum absolute difference between any two elements in the array. The function should be optimized for performance.","solution":"def max_absolute_difference(arr): Returns the maximum absolute difference between any two elements in the array. Args: arr (List[int]): List of integers Returns: int: Maximum absolute difference between any two elements. if not arr: return 0 min_elem = min(arr) max_elem = max(arr) return abs(max_elem - min_elem)"},{"question":"Create a function that takes a string and returns the string with all spaces replaced by underscores.","solution":"def replace_spaces_with_underscores(s): Replaces all spaces in the string s with underscores. return s.replace(' ', '_')"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, as arguments and returns the sum of all the integers between \`a\` and \`b\` (inclusive). If \`b\` is less than \`a\`, the function should return the sum from \`b\` to \`a\` (inclusive).","solution":"def sum_between(a, b): Returns the sum of all integers between a and b (inclusive). If b is less than a, the function sums from b to a (inclusive). start, end = min(a, b), max(a, b) return sum(range(start, end + 1))"},{"question":"Create a function that can handle different data types but always returns the sum of two numbers. If the inputs are not numbers, it should raise a \`TypeError\`. How can I create this function in Python?","solution":"def add_numbers(a, b): Returns the sum of a and b if both are numbers. Raises a TypeError if either a or b is not a number. if not (isinstance(a, (int, float)) and isinstance(b, (int, float))): raise TypeError(\\"Both inputs must be numbers!\\") return a + b"},{"question":"Create a function that generates a Fibonacci sequence up to the nth term. In Python, how would you implement this?","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to the nth term. Parameters: n (int): The number of terms in the Fibonacci sequence to generate Returns: list: A list containing the Fibonacci sequence up to the nth term if n <= 0: return [] sequence = [0, 1] for _ in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that takes four parameters: two coordinates (x1, y1) and (x2, y2) representing the endpoints of a line segment, and a positive integer n that represents the number of segments the line should be divided into. The function should return a list of tuples, each containing the coordinates of the points that divide the line segment into n equal parts.","solution":"def divide_line_segment(x1, y1, x2, y2, n): Divides the line segment defined by points (x1, y1) and (x2, y2) into \`n\` equal parts. Args: x1, y1: Coordinates of the first point. x2, y2: Coordinates of the second point. n: Positive integer representing the number of segments. Returns: List of tuples containing the coordinates of the points that divide the line segment into \`n\` equal parts. points = [] for i in range(n + 1): x = x1 + (x2 - x1) * (i / n) y = y1 + (y2 - y1) * (i / n) points.append((x, y)) return points"},{"question":"Create a function that takes in two strings, one being a生物学物种名称（例如 \\"Homo sapiens\\"）和另一个字符串是该物种的地理分布信息。请编写一个函数，该函数能够解析并提取地理分布信息中的经纬度坐标，并将其返回为一个字典。如果字符串中没有经纬度信息，则返回一个空字典。","solution":"import re def extract_coordinates(species_name, geo_distribution): Extracts latitude and longitude coordinates from the geo_distribution string. :param species_name: A string representing the scientific name of the species. :param geo_distribution: A string containing the geographic distribution info which may include the coordinates. :return: A dictionary with 'latitude' and 'longitude' if coordinates are found, otherwise an empty dictionary. pattern = r\\"([-+]?d{1,2}.d+),s?([-+]?d{1,3}.d+)\\" match = re.search(pattern, geo_distribution) if match: return { \\"latitude\\": float(match.group(1)), \\"longitude\\": float(match.group(2)) } return {}"},{"question":"Create a function that efficiently converts lowercase letters to uppercase using only bitwise operations without using any built-in functions or the ASCII table.","solution":"def to_uppercase(char): Converts a lowercase letter to its uppercase equivalent using bitwise operations. Assumes char is a single lowercase alphabetic character. # ASCII value for 'a' = 97 = 0110 0001 # ASCII value for 'A' = 65 = 0100 0001 # The difference in binary is 0010 0000, which is 32 in decimal. # To convert lowercase to uppercase we need to turn off the 6th bit. upper_char = chr(ord(char) & ~0b00100000) return upper_char"},{"question":"Create a function that takes in a string of text and returns the frequency of each word in the text, ignoring case and punctuation. You should also make sure to exclude any common English stop words such as \\"the\\", \\"and\\", \\"an\\", etc. from the count.","solution":"import re from collections import Counter def count_word_frequencies(text): Returns a dictionary with the frequency of each word in the text, ignoring case and punctuation, and excluding common English stop words. stop_words = {\\"the\\", \\"and\\", \\"a\\", \\"an\\", \\"in\\", \\"on\\", \\"at\\", \\"of\\", \\"for\\", \\"with\\", \\"to\\", \\"is\\", \\"are\\", \\"was\\", \\"were\\", \\"be\\", \\"been\\", \\"being\\", \\"am\\"} # Remove punctuation and convert text to lower case text = re.sub(r'[^ws]', '', text).lower() # Split the text into words words = text.split() # Filter out stop words filtered_words = [word for word in words if word not in stop_words] # Count the frequency of each word word_counts = Counter(filtered_words) return dict(word_counts)"},{"question":"Create a function that takes two strings as input and returns the number of occurrences of the first string in the second string.","solution":"def count_occurrences(substring, string): Returns the number of occurrences of substring in string. return string.count(substring)"},{"question":"Create a function that takes an integer as an argument and returns the number of 1s in the binary representation of the integer. For example, for the number 5, its binary representation is 101, so the function should return 2.","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of the integer n. return bin(n).count('1')"},{"question":"Create a function that converts a floating-point number into a fraction in its simplest form. The function should return a tuple where the first element is the numerator and the second element is the denominator. For instance, if the input is 0.25, the output should be (1, 4) as 0.25 is equivalent to 1/4.","solution":"from fractions import Fraction def float_to_fraction(number): Converts a floating-point number into a fraction in its simplest form. Returns a tuple (numerator, denominator). fraction = Fraction(number).limit_denominator() return (fraction.numerator, fraction.denominator)"},{"question":"Create a function that returns the nth Fibonacci number. The code should not just return the number but also print the number of function calls made to calculate the result. Use a top-down approach with memoization to solve the problem.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number and prints the number of function calls made. Uses a top-down approach with memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) fibonacci.counter += 1 return memo[n] # Counter to keep track of the number of calls fibonacci.counter = 0 def get_fibonacci(n): Wrapper function to get the nth Fibonacci number and print the number of function calls. fibonacci.counter = 0 # Reset counter result = fibonacci(n) print(f\\"Number of function calls: {fibonacci.counter}\\") return result"},{"question":"Create a function that takes a list of numbers and returns the product of the largest positive number and the smallest negative number in the list. If there are no positive or negative numbers in the list, the function should return 0.","solution":"def max_pos_min_neg_product(lst): Returns the product of the largest positive number and the smallest negative number in the list. If there are no positive or negative numbers, returns 0. max_pos = None min_neg = None for num in lst: if num > 0 and (max_pos is None or num > max_pos): max_pos = num elif num < 0 and (min_neg is None or num < min_neg): min_neg = num if max_pos is not None and min_neg is not None: return max_pos * min_neg else: return 0"},{"question":"Create a function that takes an integer, converts it to binary, and then finds the maximum run of consecutive 1s in the binary representation.","solution":"def max_consecutive_ones(n): Takes an integer n, converts it to binary, and finds the maximum run of consecutive 1s. Parameters: n (int): The input integer. Returns: int: The maximum run of consecutive 1s in the binary representation of n. binary_representation = bin(n)[2:] # Convert to binary and strip the '0b' prefix max_ones = max(len(run) for run in binary_representation.split('0')) return max_ones"},{"question":"Create a function that takes a list of integers and returns the maximum product of any two numbers in the list. For example, if the input list is [1, 2, 3, 4], the maximum product would be 4 (from 2 * 2 or 1 * 4). If the list contains only two numbers, return the product of those two numbers.","solution":"def max_product_of_two(lst): Returns the maximum product of any two numbers in the list. if len(lst) < 2: raise ValueError(\\"List must contain at least two elements\\") max1, max2 = float('-inf'), float('-inf') min1, min2 = float('inf'), float('inf') for num in lst: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Create a function that takes an array of integers as input and returns the second smallest element in the array. If the array has fewer than two unique elements, the function should return None.","solution":"def second_smallest(arr): Returns the second smallest element in the array. If the array has fewer than two unique elements, returns None. if len(arr) < 2: return None unique_elements = sorted(set(arr)) if len(unique_elements) < 2: return None return unique_elements[1]"},{"question":"Create a function that multiplies the values of an array by 2 and returns the converted array. Here's what the input and output should look like.","solution":"def double_values(arr): Returns a list with all the values in the input list 'arr' doubled. return [x * 2 for x in arr]"},{"question":"Create a function that takes an integer, x, and an integer list, mylist, of length len(mylist), and returns the array mylist after appending integer x to the end of this list.","solution":"def append_to_list(x, mylist): Appends the integer x to the end of the list mylist. Parameters: x (int): The integer to append. mylist (list of int): The list to which x will be appended. Returns: list: The list mylist with x appended. mylist.append(x) return mylist"},{"question":"Create a function that implements a stack using Python. The stack should support the following operations: push, pop, and is_empty. The \`push\` operation should add an element to the top of the stack, the \`pop\` operation should remove the top element from the stack and return it, and the \`is_empty\` operation should return \`True\` if the stack is empty and \`False\` otherwise.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): Adds an item to the top of the stack. self.items.append(item) def pop(self): Removes the top item from the stack and returns it. If the stack is empty, raises an IndexError. if self.is_empty(): raise IndexError(\\"pop from empty stack\\") return self.items.pop() def is_empty(self): Returns True if the stack is empty, False otherwise. return len(self.items) == 0"},{"question":"Create a function that takes two numbers as input and returns their floor division result. If the divisor is zero, it should return \\"Error: Division by zero\\".","solution":"def floor_division(a, b): Returns the floor division result of a and b. If b is zero, returns \\"Error: Division by zero\\". if b == 0: return \\"Error: Division by zero\\" return a // b"},{"question":"Create a function that identifies the nth Fibonacci number using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes four parameters: x, y, z, a. These parameters are basically the positions of four points in a 3D coordinate system. The function should calculate whether these points are coplanar or not. Two points are coplanar if they lie in the same plane. In this case, we check all four points. If all four points are in the same plane, return the string \\"coplanar\\"; otherwise, return the string \\"not coplanar\\".","solution":"import numpy as np def are_coplanar(x, y, z, a): Determines if the four given 3D points are coplanar. Parameters: x (tuple): coordinates of the first point (x1, y1, z1) y (tuple): coordinates of the second point (x2, y2, z2) z (tuple): coordinates of the third point (x3, y3, z3) a (tuple): coordinates of the fourth point (x4, y4, z4) Returns: str: 'coplanar' if the points are coplanar, 'not coplanar' otherwise matrix = np.array([ [x[0], x[1], x[2], 1], [y[0], y[1], y[2], 1], [z[0], z[1], z[2], 1], [a[0], a[1], a[2], 1] ]) # Calculate the determinant of the matrix. det = np.linalg.det(matrix) if abs(det) < 1e-10: # considering numerical precision return \\"coplanar\\" else: return \\"not coplanar\\""},{"question":"Create a function that checks each number in a given list to see if it is a prime number. If it is a prime number, add it to a new list. Return that list at the end.","solution":"def is_prime(n): Returns whether the given number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(numbers): Returns a list of prime numbers from the given list of numbers. primes = [] for number in numbers: if is_prime(number): primes.append(number) return primes"},{"question":"Create a function that reads a list of names and returns the shortest name in the list. If the list is empty, return an appropriate message.","solution":"def shortest_name(names): Returns the shortest name from a list of names. If the list is empty, returns an appropriate message. :param names: List of names (strings) :return: The shortest name (string) or a message (string) if not names: return \\"The list is empty.\\" return min(names, key=len)"},{"question":"Create a function that takes a positive integer as an argument, and returns the sum of all the odd numbers between 1 and n (inclusive), but only if the number is greater than 10. If the input number is not greater than 10, return a message \\"Number is too small\\".","solution":"def sum_of_odd_numbers(n): Returns the sum of all odd numbers between 1 and n (inclusive) if n is greater than 10. Otherwise, returns a message indicating the number is too small. if n <= 10: return \\"Number is too small\\" return sum(i for i in range(1, n+1) if i % 2 != 0)"},{"question":"Create a function that takes a string as input and returns a new string where each vowel in the input string is replaced with the next vowel in the sequence (a -> e, e -> i, i -> o, o -> u, u -> a).","solution":"def replace_vowels(input_str): Replaces each vowel in the input string with the next vowel in the sequence. Vowel sequence: a -> e, e -> i, i -> o, o -> u, u -> a. vowel_map = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'} result_str = [] for char in input_str: if char in vowel_map: result_str.append(vowel_map[char]) else: result_str.append(char) return ''.join(result_str)"},{"question":"Create a function that takes two lists as input and returns a new list containing the common elements between the two lists. If the lists are empty, the function should return an empty list. The function should also handle cases where the lists have different lengths or contain different types of elements.","solution":"def common_elements(list1, list2): Returns a list containing the common elements between list1 and list2. If the lists are empty, returns an empty list. Handles lists of different lengths and different types of elements. return list(set(list1) & set(list2))"},{"question":"Create a function that generates a list of even numbers from 1 to n.","solution":"def generate_even_numbers(n): Generates a list of even numbers from 1 to n (inclusive). Parameters: n (int): The upper limit of the range to generate even numbers. Returns: list: A list containing all even numbers from 1 to n. return [i for i in range(1, n+1) if i % 2 == 0]"},{"question":"Create a function that takes three integers as input and returns true if any two of the integers are the same. Otherwise, return false. How would you implement this function in Python?","solution":"def any_two_same(a, b, c): Returns True if any two of the integers are the same, False otherwise. return a == b or b == c or a == c"},{"question":"Create a function that takes a string as an input and outputs the most frequently occurring character and its count. If there are multiple characters with the same highest frequency, return any one of them. In case of an empty string, return an empty dictionary.","solution":"def most_frequent_char(s): Returns the most frequently occurring character and its count in a string. If the string is empty, returns an empty dictionary. if not s: return {} from collections import Counter count = Counter(s) most_common_char, most_common_count = count.most_common(1)[0] return {most_common_char: most_common_count}"},{"question":"Create a function that takes a string as input and returns a counter of all the letters in the text that repeat, the count is case-insensitive.","solution":"from collections import Counter def count_repeated_letters(input_str): Returns a counter of all the letters in the text that repeat. The count is case-insensitive. :param input_str: The input string :return: A Counter object with letters and their respective counts input_str = input_str.lower() letter_counts = Counter(input_str) return Counter({letter: count for letter, count in letter_counts.items() if count > 1 and letter.isalpha()})"},{"question":"Create a function that takes a string as input, and returns a dictionary where the keys are the characters in the string and the values are their corresponding ASCII values. For example, if the input is \\"hello\\", the output should be {'h': 104, 'e': 101, 'l': 108, 'o': 111}.","solution":"def string_to_ascii_dict(input_string): Takes a string as input and returns a dictionary where the keys are the characters in the string and the values are their corresponding ASCII values. :param input_string: str :return: dict return {char: ord(char) for char in input_string}"},{"question":"Create a function that takes a string as input and returns the number of unique characters in the string. For example, if the input is \\"hello world\\", the function should return 8 because the unique characters are h, e, l, o, w, r, d.","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s. unique_characters = set(s) return len(unique_characters)"},{"question":"Create a function that takes a list of integers 'nums' and an integer 'k', and returns the sum of all integers in 'nums' that are greater than 'k'.","solution":"def sum_greater_than_k(nums, k): Returns the sum of all integers in 'nums' that are greater than 'k'. Parameters: nums (list of int): The list of integers. k (int): The threshold value. Returns: int: The sum of all integers in 'nums' that are greater than 'k'. return sum(num for num in nums if num > k)"},{"question":"Create a function that returns the largest and smallest number in a list using Python. The function should take two parameters: \`numbers\`, which is a list of integers, and \`index\`, which is the current index in the list that is being processed. The function should recursively call itself until it has processed all numbers in the list.","solution":"def find_extremes(numbers, index=0, min_val=None, max_val=None): Recursively finds the smallest and largest number in the list. Args: - numbers: List of integers. - index: Current index being processed. - min_val: Current minimum value found. - max_val: Current maximum value found. Returns: Tuple of (smallest number, largest number) # Base case: If index reaches the end of the list, return min_val and max_val if index == len(numbers): return min_val, max_val # Initialize min_val and max_val on the first call if min_val is None or max_val is None: min_val = max_val = numbers[0] # Update min_val and max_val if numbers[index] < min_val: min_val = numbers[index] if numbers[index] > max_val: max_val = numbers[index] # Recursive call to process the next element return find_extremes(numbers, index + 1, min_val, max_val)"},{"question":"Create a function that generates a list of prime factors for a given number. For example, the prime factors of 12 are [2, 2, 3]. Write a Python function \`prime_factors(n: int) -> List[int]\`.","solution":"from typing import List def prime_factors(n: int) -> List[int]: Returns a list of prime factors for the given number n. factors = [] divisor = 2 while n >= 2: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a function that takes in a string, and returns the string de-leetized. De-leetized means that each leet alphabet (i.e. 1 for I, 0 for O, 3 for E, etc.) is replaced with it's standard English alphabet.","solution":"def de_leetize(s): Replaces leet speak characters in the input string with their corresponding English alphabets. leet_dict = { '1': 'I', '0': 'O', '3': 'E', '4': 'A', '5': 'S', '6': 'G', '7': 'T', '8': 'B', '9': 'P', '@': 'A' } return ''.join(leet_dict.get(char, char) for char in s)"},{"question":"Create a function that prints the numbers from 1 to 100. If a number is divisible by 3, print \\"Fizz\\" instead of the number. If a number is divisible by 5, print \\"Buzz\\". If a number is divisible by both 3 and 5, print \\"FizzBuzz\\".","solution":"def fizz_buzz(): Prints numbers from 1 to 100 with the following modifications: - For numbers divisible by 3, prints \\"Fizz\\". - For numbers divisible by 5, prints \\"Buzz\\". - For numbers divisible by both 3 and 5, prints \\"FizzBuzz\\". result = [] for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Create a function that takes a single string argument and returns the number of characters in the string.","solution":"def count_characters(s): Returns the number of characters in the string s. return len(s)"},{"question":"Create a function that takes two lists, a and b, and returns a dictionary where the keys are elements of list a and the values are elements of list b at the same indices.","solution":"def list_to_dict(a, b): Create a dictionary where keys are elements from list \`a\` and values are elements from list \`b\` at the same indices. :param a: List of keys :param b: List of values :return: Dictionary mapping elements of \`a\` to elements of \`b\` if len(a) != len(b): raise ValueError(\\"Both lists must have the same length\\") return dict(zip(a, b))"},{"question":"Create a function that converts a list of integers to a single string, where each integer is separated by a comma and space (\\", \\"). The function should be named \`list_to_string\` and should take a single parameter \`numbers\` which is a list of integers. The function should return a string.","solution":"def list_to_string(numbers): Converts a list of integers to a single string, with each integer separated by a comma and space (\\", \\"). Args: numbers (list): A list of integers. Returns: str: A string with all the integers from the list, separated by a comma and space. return ', '.join(map(str, numbers))"},{"question":"Create a function that generates a random string of a specified length. The function should take an integer as an input and return a string of that length that consists of random lowercase ASCII characters.","solution":"import random import string def generate_random_string(length): Generates a random string of the specified length consisting of random lowercase ASCII characters. :param length: Length of the string to be generated. :type length: int :return: Random string of given length. :rtype: str if length < 0: raise ValueError(\\"Length cannot be negative\\") return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))"},{"question":"Create a function that takes two numbers and returns the quotient and the remainder.","solution":"def divide_and_remainder(a, b): Returns the quotient and the remainder of dividing a by b. quotient = a // b remainder = a % b return quotient, remainder"},{"question":"Create a function that takes in a single parameter, a list of integers, and returns the second smallest unique integer in the list. If the list does not have a second smallest unique integer, the function should return \`None\`.","solution":"def second_smallest_unique(nums): Returns the second smallest unique integer from the list nums. If there is no second smallest unique integer, returns None. if len(nums) < 2: return None unique_nums = sorted(set(nums)) if len(unique_nums) < 2: return None return unique_nums[1]"},{"question":"Create a function that checks if the parentheses in a given string are balanced. The function should return \`True\` if the string is balanced, and \`False\` otherwise. A string with balanced parentheses means that every opening parenthesis '(' has a corresponding closing parenthesis ')', and they are in the correct order.","solution":"def are_parentheses_balanced(s): Checks if the parentheses in the given string are balanced. Args: s (str): The string to check. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that generates a random list of 1000 elements, each element being a dictionary with the keys 'name' and 'age'. The 'name' key should have a value that is a random string of 5 uppercase letters, and the 'age' key should have a value that is a random integer between 18 and 65.","solution":"import random import string def generate_random_list(): Generate a list of 1000 dictionaries. Each dictionary contains: - 'name': a random string of 5 uppercase letters. - 'age': a random integer between 18 and 65. random_list = [] for _ in range(1000): name = ''.join(random.choices(string.ascii_uppercase, k=5)) age = random.randint(18, 65) random_list.append({'name': name, 'age': age}) return random_list"},{"question":"Create a function that generates a random 6-digit number.","solution":"import random def generate_random_6_digit_number(): Generates a random 6-digit number. return random.randint(100000, 999999)"},{"question":"Create a function that takes two arguments. The first is a list of numbers, and the second is an integer n. The function should return a list containing only those numbers from the input list that are less than n.","solution":"def filter_numbers_less_than(lst, n): Returns a list of numbers from lst that are less than n. :param lst: List of numbers. :param n: An integer threshold. :return: A list of numbers less than n. return [num for num in lst if num < n]"},{"question":"Create a function that takes an array and a target index as input, and returns the element at that target index if it exists; otherwise, return a default value of -1.","solution":"def get_element_at_index(array, index, default_value=-1): Returns the element at the specified index in the array if it exists, otherwise returns the default value. :param array: A list of elements. :param index: The target index. :param default_value: The value to return if the index does not exist (default is -1). :return: The element at the target index or the default value. if 0 <= index < len(array): return array[index] else: return default_value"},{"question":"Create a function that calculates the sum of numbers in a given list, but only includes numbers that are divisible by 3 or 5.","solution":"def sum_divisible_by_3_or_5(numbers): Returns the sum of numbers in the list that are divisible by 3 or 5. :param numbers: List of integers :return: Integer sum of numbers divisible by 3 or 5 return sum(x for x in numbers if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that reads a string (name), checks if the name contains only alphabetic characters (either uppercase or lowercase), and returns the first uppercase and lowercase letters if found. If no uppercase or lowercase letters are found, return a null string.","solution":"def extract_letters(name): Extracts the first uppercase and lowercase letters from the given name string. Parameters: name (str): The input string which represents a name. Returns: tuple: A tuple containing the first uppercase and first lowercase letter. If no such letters are found returns ('', ''). uppercase_letter = '' lowercase_letter = '' for char in name: if char.isupper() and not uppercase_letter: uppercase_letter = char elif char.islower() and not lowercase_letter: lowercase_letter = char if uppercase_letter and lowercase_letter: break return (uppercase_letter, lowercase_letter)"},{"question":"Create a function that takes in the year and returns whether it is a leap year or not.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, otherwise False. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"Create a function that takes as an argument an integer and returns a tuple of even and odd numbers as list of list in list. The sample input and output would be: function(3) outputs [[1, 3], [2]].","solution":"def classify_numbers(n): Takes an integer 'n' and returns a tuple with two lists: - the first list containing odd numbers from 1 to n (inclusive), - the second list containing even numbers from 1 to n (inclusive). odd_numbers = [i for i in range(1, n + 1) if i % 2 != 0] even_numbers = [i for i in range(1, n + 1) if i % 2 == 0] return [odd_numbers, even_numbers]"},{"question":"Create a function that prints every number from 1 to a specified end number. Then, call this function with an argument of 10.","solution":"def print_numbers(end): Prints every number from 1 to the specified end number. for number in range(1, end + 1): print(number) # Calling the function with an argument of 10 print_numbers(10)"},{"question":"Create a function that returns the longest repeatable character substring in a given string. If there are multiple substrings of the same maximum length, return the first one you encounter.","solution":"def longest_repeatable_substring(s): Returns the longest repeatable character substring in a given string. If there are multiple substrings of the same maximum length, returns the first one encountered. max_len = 0 max_substring = \\"\\" current_len = 0 previous_char = \\"\\" for char in s: if char == previous_char: current_len += 1 else: if current_len > max_len: max_len = current_len max_substring = previous_char * current_len current_len = 1 previous_char = char # Final check in case the longest substring is at the end of the string if current_len > max_len: max_len = current_len max_substring = previous_char * current_len return max_substring"},{"question":"Create a function that uffles a list by randomizing the order.","solution":"import random def shuffle_list(input_list): Randomizes the order of elements in the input_list. Parameters: input_list (list): The list to be shuffled. Returns: list: The shuffled list. random.shuffle(input_list) return input_list"},{"question":"Create a function that checks if a given string is a palindrome and returns the reversed string if it's not. If the string is indeed a palindrome, the function should simply return the original string. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome(s): Checks if a given string is a palindrome. Returns the reversed string if it's not; otherwise, returns the original string. # Normalize the string by removing non-alphanumeric characters and converting to lowercase normalized_str = ''.join(char.lower() for char in s if char.isalnum()) if normalized_str == normalized_str[::-1]: return s else: return s[::-1]"},{"question":"Create a function that takes in a filename and checks if the file exists in the current directory. If it does, the function should read the file and return its contents. If the file does not exist, the function should return \\"File not found\\". Use the \`os.path.exists\` method from the \`os\` module.","solution":"import os def check_file_exists(filename): Check if the file exists in the current directory. If it does, return its contents. If the file does not exist, return \\"File not found\\". if os.path.exists(filename): with open(filename, 'r') as file: contents = file.read() return contents else: return \\"File not found\\""},{"question":"Create a function that reads a string of digits and returns the sum of all the digits. For example, the string \\"1234\\" should return 10 because 1 + 2 + 3 + 4 = 10.","solution":"def sum_of_digits(digit_string): Returns the sum of all the digits in the provided string. Args: digit_string (str): A string containing digits. Returns: int: The sum of all digits in the string. return sum(int(digit) for digit in digit_string)"},{"question":"Create a function that takes two arguments - \`n\` (the number of times to run the verification process) and \`difficulty\` (the number of unique numbers to generate). The function should generate \`n\` random numbers, each of which must be different, and the range of these numbers should be from 1 to \`difficulty\`. If there are enough unique numbers available for the given \`difficulty\`, the function should return \`True\`; otherwise, it should return \`False\`.","solution":"import random def verify_numbers(n, difficulty): Generates n unique random numbers within the range of 1 to difficulty. Returns True if n unique numbers can be generated, otherwise False. Parameters: n (int): The number of unique numbers to generate. difficulty (int): The upper limit for the range of numbers (inclusive). Returns: bool: True if n unique numbers can be generated, False otherwise. if n > difficulty: return False unique_numbers = set() while len(unique_numbers) < n: unique_numbers.add(random.randint(1, difficulty)) return len(unique_numbers) == n"},{"question":"Create a function that takes a string \`s\` and returns the longest palindrome that can be made by rearranging the characters in \`s\`.","solution":"from collections import Counter def longest_palindrome(s): Returns the longest palindrome that can be made by rearranging the characters in string \`s\`. count = Counter(s) length = 0 odd_found = False for char, freq in count.items(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True return length + (1 if odd_found else 0)"},{"question":"Create a function that takes an array of integers and returns the maximum sum of non-adjacent elements. For example, if the array is \`[2, 1, 4, 9]\`, the maximum sum of non-adjacent elements is \`10\` (which are \`2\` and \`9\`).","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements in the array nums. if not nums: return 0 n = len(nums) if n == 1: return nums[0] # Initialize two variables to track the maximum sum including current element and excluding current element include = nums[0] exclude = 0 for i in range(1, n): # Current max excluding i new_exclude = max(include, exclude) # Current max including i include = exclude + nums[i] exclude = new_exclude return max(include, exclude)"},{"question":"Create a function that takes a string as input and returns the count of each character in the string, excluding spaces. The function should also handle lowercase and uppercase letters as distinct characters.","solution":"def character_count(s): Returns a dictionary with counts of each character in the input string, excluding spaces. count_dict = {} for char in s: if char != ' ': if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Create a function that takes in a positive integer and returns the sum of all of its odd digits. If the number is even, return -1.","solution":"def sum_odd_digits(num): Returns the sum of all odd digits of a positive integer. If the number is even, returns -1. if num % 2 == 0: return -1 sum_of_odds = 0 while num > 0: digit = num % 10 if digit % 2 == 1: sum_of_odds += digit num //= 10 return sum_of_odds"},{"question":"Create a function that converts a binary number to its decimal equivalent in Python. Here is the binary number: \`1101\`.","solution":"def binary_to_decimal(binary_str): Converts a binary number (given as a string) to its decimal equivalent. Parameters: binary_str (str): A string representation of a binary number. Returns: int: The decimal equivalent of the binary number. return int(binary_str, 2)"},{"question":"Create a function that takes an array of prime numbers and returns the sum of all prime numbers that are less than or equal to a given threshold.","solution":"def sum_primes_below_threshold(primes, threshold): Returns the sum of all prime numbers in the list \`primes\` that are less than or equal to \`threshold\`. Parameters: primes (list): A list of prime numbers. threshold (int): The threshold value. Returns: int: The sum of all prime numbers in \`primes\` less than or equal to \`threshold\`. return sum(p for p in primes if p <= threshold)"},{"question":"Create a function that takes an array of integers and returns a new array where the elements are sorted in ascending order. You should use Python programming language for this task.","solution":"def sort_array(arr): Returns a new array where the elements are sorted in ascending order. return sorted(arr)"},{"question":"Create a function that takes a whole number (integer) as input and returns the binary representation of that number as a string. The function should also handle negative numbers and return the appropriate binary representation. If the input is not a number, your function should return the string \\"Invalid input\\".","solution":"def int_to_binary(n): Convert an integer to its binary representation as a string. Handle both positive and negative numbers. Return \\"Invalid input\\" if the input is not an integer. if not isinstance(n, int): return \\"Invalid input\\" if n >= 0: return bin(n)[2:] else: return '-' + bin(n)[3:]"},{"question":"Create a function that accepts two parameters \`x\` and \`y\` and returns the sum of these parameters. Write the function in Python.","solution":"def add(x, y): Returns the sum of x and y. return x + y"},{"question":"Create a function that generates a random string of a given length containing only uppercase alphabetic characters. The function should handle edge cases such as non-integer inputs and negative lengths. Your solution should strictly adhere to coding best practices, including clear variable naming and commenting where necessary.","solution":"import random import string def generate_random_string(length): Generates a random string of uppercase alphabetic characters of given length. Parameters: length (int): The length of the string to be generated. Returns: str: A string of uppercas alphabetic characters or an error message if input is invalid. # Check if length is a positive integer if not isinstance(length, int) or length < 0: return \\"Invalid input. Length must be a non-negative integer.\\" # Generate the random string random_string = ''.join(random.choice(string.ascii_uppercase) for _ in range(length)) return random_string"},{"question":"Create a function that takes one integer as input and returns the sum of all numbers from 1 to that integer using Python.","solution":"def sum_to(n): Returns the sum of all numbers from 1 to n. Parameters: n (int): The integer up to which the sum should be calculated. Returns: int: The sum of all numbers from 1 to n. return sum(range(1, n+1))"},{"question":"Create a function that takes a list and an integer n, and returns a new list with the first n elements removed.","solution":"def remove_first_n_elements(lst, n): Returns a new list with the first n elements removed. Parameters: lst (list): The original list. n (int): The number of elements to remove from the beginning. Returns: list: A new list with the first n elements removed. if n < 0: raise ValueError(\\"n should be a non-negative integer\\") return lst[n:]"},{"question":"Create a function that checks if a given number is a perfect square. In Python, this function should return True if the number is a perfect square and False otherwise. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.","solution":"def is_perfect_square(n): Checks if the given number n is a perfect square. Args: n: int - the number to be checked Returns: bool - True if n is a perfect square, False otherwise if n < 0: return False root = int(n**0.5) return root * root == n"},{"question":"Create a function that calculates the product of all numbers in a given list that are greater than a specified threshold value. The function should take in a list of numbers and a threshold value as arguments and return the product of all numbers greater than the threshold.","solution":"def product_above_threshold(numbers, threshold): Returns the product of all numbers in the list that are greater than the specified threshold. :param numbers: List of numbers. :param threshold: A threshold value. :return: The product of all numbers greater than the threshold, or 1 if no such numbers exist. product = 1 has_greater = False for number in numbers: if number > threshold: product *= number has_greater = True return product if has_greater else 1"},{"question":"Create a function that takes two strings as input and returns a tuple containing the result of the AND operation applied to each pair of corresponding bits in the binary representation of the two input strings. The function should ignore any non-binary characters in the strings.","solution":"def bitwise_and(str1, str2): Returns a tuple containing the result of the AND operation applied to each pair of corresponding bits in the binary representation of the two input strings. The function ignores any non-binary characters in the strings. # Extract only binary characters (0 and 1) from each string bin_str1 = ''.join(filter(lambda x: x in '01', str1)) bin_str2 = ''.join(filter(lambda x: x in '01', str2)) # Determine the length of the shorter string min_length = min(len(bin_str1), len(bin_str2)) # Perform the AND operation bit by bit result = tuple(int(bin_str1[i]) & int(bin_str2[i]) for i in range(min_length)) return result"},{"question":"Create a function that takes in a string and returns a boolean indicating whether the string contains a balanced set of brackets. A balanced set of brackets means that each opening bracket '(' has a corresponding closing bracket ')' and they are properly nested.","solution":"def is_balanced_brackets(s): Returns True if the string contains a balanced set of brackets, otherwise returns False. stack = [] for char in s: if char == '(': stack.append('(') elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Create a function that takes a dictionary and a key as arguments. The function should return the value associated with the key if the key exists in the dictionary, otherwise return \\"Key not found\\".","solution":"def get_value_from_dict(d, key): Returns the value associated with the key if the key exists in the dictionary, otherwise returns \\"Key not found\\". Parameters: d (dict): The dictionary to search. key: The key to find in the dictionary. Returns: The value associated with the key or \\"Key not found\\" if the key does not exist. return d.get(key, \\"Key not found\\")"},{"question":"Create a function that takes an ordered list of integers between 0 and 9 (inclusive), and return the maximum number of consecutive numbers the list contains. For example, if the input is \`[10, 11, 12, 13, 14, 16, 17, 18, 19]\`, the function should return \`5\`, because the maximum number of consecutive numbers in the list is \`5\`.","solution":"def max_consecutive_numbers(nums): Returns the maximum number of consecutive numbers in the given list. if not nums: return 0 max_count = 1 current_count = 1 for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: current_count += 1 else: if current_count > max_count: max_count = current_count current_count = 1 return max(max_count, current_count)"},{"question":"Create a function that takes a string and returns the string with all consonants removed, leaving only the vowels. Write a Python function to accomplish this.","solution":"def remove_consonants(s): Returns the string with all consonants removed, leaving only the vowels. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char in vowels])"},{"question":"Create a function that takes an array of integers and returns true if any two consecutive elements in the array sum to zero.","solution":"def has_consecutive_sum_to_zero(arr): Returns True if any two consecutive elements in the array sum to zero. for i in range(len(arr) - 1): if arr[i] + arr[i + 1] == 0: return True return False"},{"question":"Create a function that accepts two integers, \`x\` and \`y\`, and returns a tuple of their sum and difference. If the sum of \`x\` and \`y\` is greater than 10, multiply the difference by 2 before returning it in the tuple.","solution":"def sum_and_difference(x, y): Returns a tuple of the sum and difference of x and y. If the sum of x and y is greater than 10, multiply the difference by 2. total = x + y difference = x - y if total > 10: difference *= 2 return (total, difference)"},{"question":"Create a function that takes a list of integers as a parameter and returns the count of numbers that are both even and greater than 10. How can I write this in Python?","solution":"def count_even_and_greater_than_ten(numbers): Returns the count of numbers that are both even and greater than 10. :param numbers: List of integers :return: Count of integers that are even and greater than 10 return len([num for num in numbers if num % 2 == 0 and num > 10])"},{"question":"Create a function that calculates the mean of a given list of numbers. If the list is empty, the function should return \`None\`. Otherwise, it should return the mean of the numbers in the list.","solution":"def calculate_mean(numbers): Calculates the mean of a given list of numbers. If the list is empty, returns None. :param numbers: List of numbers :return: Mean of the numbers or None if the list is empty if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Create a function that takes an integer as input and returns the largest digit in that number. For example, given the number 234, the function should return 4.","solution":"def largest_digit(n): Returns the largest digit in the integer n. return max(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that takes a string, \`str\`, as an argument and returns the \`nth\` to \`mth\` character of the given string, where \`mth\` is the optional argument and defaults to the length of the string. If \`mth\` is less than \`n\`, the function should return an empty string.","solution":"def substring(s, n, m=None): Returns the nth to mth character of the given string. If m is not provided, it defaults to the length of the string. If m < n, returns an empty string. :param s: The input string. :param n: The start index (inclusive). :param m: The end index (exclusive), defaults to the length of the string. :return: The substring from n to m. if m is None: m = len(s) if m < n: return \\"\\" return s[n:m]"},{"question":"Create a function that takes a string and an alphabet dictionary as input and returns whether the given string is a valid palindrome, considering only alphabets and ignoring case sensitivity. For example, if the string is \\"A man, a plan, a canal, Panama\\" and the alphabet dictionary is the English alphabet, the function should return True. However, if the string is \\"Hello World\\" and the alphabet dictionary is \\"abcdefghijklmnopqrstuvwxyz\\", it should return False.","solution":"def is_valid_palindrome(s, alphabet_dict): Returns whether the given string is a valid palindrome, considering only alphabets from the provided alphabet dictionary and ignoring case sensitivity. :param s: The input string to check. :param alphabet_dict: A dictionary representing valid alphabet characters. :returns: True if the string is a valid palindrome, False otherwise. # Normalize the string by converting to lower case and filtering only alphabet characters normalized_str = ''.join([char.lower() for char in s if char.lower() in alphabet_dict]) # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Create a function that converts a decimal number into Roman numerals.","solution":"def int_to_roman(num): Converts a given integer to its Roman numeral representation. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Create a function that checks if a given string is a valid palindrome. A valid palindrome is a string that reads the same backward as forward, e.g., 'madam'.","solution":"def is_palindrome(s): Checks if the given string is a valid palindrome. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Normalize the string by removing non-alphanumeric characters and converting to lowercase s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is equal to its reverse return s == s[::-1]"},{"question":"Create a function that generates an array of n random numbers between 0 and 100 (inclusive).","solution":"import random def generate_random_numbers(n): Returns an array of n random numbers between 0 and 100 (inclusive). return [random.randint(0, 100) for _ in range(n)]"},{"question":"Create a function that accepts an integer and returns the number with the digits reversed in order.","solution":"def reverse_digits(n): This function takes an integer n and returns the number with its digits reversed. # Convert integer to string and check if it's negative str_n = str(n) if str_n[0] == '-': reversed_str = '-' + str_n[:0:-1] else: reversed_str = str_n[::-1] # Convert back to integer and return return int(reversed_str)"},{"question":"Create a function that takes a string as input and outputs a dictionary where the keys are unique characters in the string and the values are the number of times each character appears in the string. The function must handle both uppercase and lowercase letters as different characters.","solution":"def char_count(s): Returns a dictionary with unique characters as keys and their counts as values. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Create a function that returns the sum of a list of numbers, but only if all numbers in the list are integers. If any number in the list is not an integer, the function should raise a ValueError.","solution":"def sum_of_integers(numbers): Returns the sum of a list of numbers if all numbers are integers. Raises a ValueError if any number in the list is not an integer. if not all(isinstance(x, int) for x in numbers): raise ValueError(\\"All elements must be integers\\") return sum(numbers)"},{"question":"Create a function that reverses a string in Python. What steps would you follow?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that takes an array and returns a new array containing only the unique elements of the original array.","solution":"def unique_elements(arr): Returns a new array containing only the unique elements of the original array. return list(set(arr))"},{"question":"Create a function that takes an array of numbers as a parameter. The function should return the sum of all the numbers in the array. If the array is empty, the function should return 0. Additionally, implement error handling to check if the input is an array and if all elements in the array are numbers.","solution":"def sum_array(numbers): Returns the sum of all numbers in the array. If the array is empty, returns 0. Raises TypeError if input is not an array or if elements are not all numbers. if not isinstance(numbers, list): raise TypeError(\\"Input should be a list.\\") for number in numbers: if not isinstance(number, (int, float)): raise TypeError(\\"All elements in the array should be numbers.\\") return sum(numbers)"},{"question":"Create a function that takes a string as input and returns a list of all unique substrings, ignoring case and spaces. For example, calling the function with \\"Hello World\\" should return a list containing \\"Hello\\", \\"World\\", \\"helloworld\\", etc.","solution":"def unique_substrings(s: str): Returns a list of all unique substrings from the given string, ignoring case and spaces. s = ''.join(s.split()).lower() substrings = set() for start in range(len(s)): for end in range(start + 1, len(s) + 1): substrings.add(s[start:end]) return list(substrings)"},{"question":"Create a function that takes in a list of integers and returns true if there are any duplicate numbers in the list, otherwise return false.","solution":"def contains_duplicates(nums): Check if there are any duplicate numbers in the list. Args: nums (list): The list of integers. Returns: bool: True if duplicates are present, False otherwise. return len(set(nums)) != len(nums)"},{"question":"Create a function that takes two arguments: the first is a list of integers, and the second is an integer target. The function should return the smallest index at which the target integer can be inserted into the list without disrupting the list's sorted order. The function should use binary search to achieve this. If the target is already present in the list, return the index of its leftmost occurrence.","solution":"from bisect import bisect_left def find_insert_position(nums, target): Returns the smallest index at which the target integer can be inserted into the nums list without disrupting the sorted order. If the target is already present in the list, returns the index of its leftmost occurrence. return bisect_left(nums, target)"},{"question":"Create a function that takes a list of integers and returns a list of strings representing binary representations of the integers. Each integer in the input list should be converted to its binary representation, and the result should be stored in a new list.","solution":"def int_to_binary_list(int_list): Converts a list of integers to a list of their binary string representations. :param int_list: List of integers :return: List of binary string representations return [format(num, 'b') for num in int_list]"},{"question":"Create a function that receives as parameters a string and a number, and returns a new string that is the result of appending the string provided as a parameter \`n\` times to the original string. If \`n\` is less than or equal to 0, the function should return an empty string. If the number is a floating-point number, the function should round it down to the nearest integer. For example, the function should return an empty string if \`n\` is -1.2.","solution":"import math def repeat_string(s, n): Returns a new string that is the result of appending the string \`s\` provided as a parameter \`n\` times to the original string. If \`n\` is less than or equal to 0, returns an empty string. If \`n\` is a floating-point number, rounds it down to the nearest integer. if n <= 0: return \\"\\" return s * math.floor(n)"},{"question":"Create a function that takes in two arrays, \`a\` and \`b\`, and returns the length of their intersection. If there is no intersection, return 0.","solution":"def intersection_length(a, b): Returns the length of the intersection of arrays a and b. set_a = set(a) set_b = set(b) intersection = set_a & set_b return len(intersection)"},{"question":"Create a function that takes a list of strings and return a new list with all duplicates removed.","solution":"def remove_duplicates(strings): Takes a list of strings and returns a new list with all duplicates removed. Parameters: strings (list of str): The list of strings from which duplicates will be removed. Returns: list of str: A new list with duplicates removed. return list(dict.fromkeys(strings))"},{"question":"Create a function that accepts two arguments, an integer 'n' representing the number of sides for a regular polygon, and a floating point number 'R' representing the radius of the circumcircle of the polygon. The function should calculate and return the area of the regular polygon. The area should be rounded to two decimal places.","solution":"import math def polygon_area(n, R): Calculates and returns the area of a regular polygon with n sides and radius R. The area is rounded to two decimal places. if n < 3: raise ValueError(\\"Polygon must have at least 3 sides.\\") # Angle in radians for the polygon central segment angle = (2 * math.pi) / n # Area calculation using the formula for the area of a regular polygon area = (n * R**2 * math.sin(angle)) / 2 # Rounding to two decimal places return round(area, 2)"},{"question":"Create a function that calculates the factorial of a given number in Python, but make sure that it also handles exceptions for invalid inputs such as negative numbers and non-integer values.","solution":"def factorial(n): Returns the factorial of a given number n. Raises ValueError for invalid inputs such as negative numbers and non-integer values. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Create a function that generates a Fibonacci sequence using recursion. The sequence should have 'n' elements, where 'n' is a user-defined parameter. Also, include handling for invalid inputs in the function.","solution":"def fibonacci(n): Generates a Fibonacci sequence with n elements. Parameters: n (int): Number of elements in the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence with n elements. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Parameter 'n' must be a positive integer.\\") def fib_helper(m): if m == 1: return [0] elif m == 2: return [0, 1] else: seq = fib_helper(m - 1) return seq + [seq[-1] + seq[-2]] return fib_helper(n)"},{"question":"Create a function that takes an integer as a parameter and returns the sum of its digits. Do not use any built-in functions to convert an integer to a string. You should also ensure that your function handles both positive and negative integers.","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. Handles both positive and negative integers. n = abs(n) total_sum = 0 while n > 0: total_sum += n % 10 n = n // 10 return total_sum"},{"question":"Create a function that takes an integer as an input and return a string indicating if the number is even or odd. If the input is not a number, return 'Input is not a number'. Assume the input will be an integer or a string that can be converted to an integer.","solution":"def even_or_odd(number): Returns 'Even' if the number is even, 'Odd' if the number is odd, or 'Input is not a number' if the input cannot be converted to an integer. try: num = int(number) return 'Even' if num % 2 == 0 else 'Odd' except ValueError: return 'Input is not a number'"},{"question":"Create a function that takes two lists of numbers as input and returns the sum of all numbers in both lists, excluding any duplicates. For example, if the input is nums1 = [1, 2, 3] and nums2 = [2, 3, 4], the function should return 10 because 1 + 2 + 3 + 4 = 10, excluding the duplicates 2 and 3.","solution":"def sum_unique_numbers(nums1, nums2): Returns the sum of all unique numbers in both lists nums1 and nums2. Duplicates are counted only once in the sum. unique_numbers = set(nums1).union(set(nums2)) return sum(unique_numbers)"},{"question":"Create a function that takes two integers, \`n\` and \`m\`, and checks if all integers from 1 to \`m\` are present in the first \`n\` elements of a given array \`arr\`.","solution":"def check_presence(arr, n, m): Check if all integers from 1 to m are present in the first n elements of array arr. :param arr: List of integers :param n: Integer representing the first n elements of arr to be considered :param m: Integer representing the range 1 to m :return: Boolean value indicating presence of all integers from 1 to m in the first n elements of arr required_set = set(range(1, m+1)) sample_set = set(arr[:n]) return required_set.issubset(sample_set)"},{"question":"Create a function that takes a non-empty linked list as input and reverses the order of the list. You should not use any additional data structures like arrays or stacks, and the function should perform the reversal in-place.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list in place. :param head: ListNode, the head of the linked list. :return: ListNode, the new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next # store next node current.next = prev # reverse the link prev = current # move prev to current node current = next_node # move to next node return prev"},{"question":"Create a function that simulates the behavior of the Unix \`cat\` command in Python. The function should take one or more file names as arguments and print the contents of each file to the standard output. If no arguments are provided, the function should print \\"No files provided\\".","solution":"def cat(*filenames): This function simulates the Unix \`cat\` command by printing the contents of the provided files. If no filenames are provided, it prints \\"No files provided\\". if not filenames: print(\\"No files provided\\") return for filename in filenames: try: with open(filename, 'r') as file: print(file.read(), end='') # Print file contents except FileNotFoundError: print(f\\"Error: {filename} not found.\\")"},{"question":"Create a function that will find the maximum number in a list. The list may contain both positive and negative numbers.","solution":"def find_max(numbers): Returns the maximum number in a list of numbers. Assumes that the list has at least one element. if not numbers: raise ValueError(\\"The list cannot be empty\\") max_num = numbers[0] for num in numbers: if num > max_num: max_num = num return max_num"},{"question":"Create a function that identifies the common elements between three input lists.","solution":"def common_elements(list1, list2, list3): Returns a list of common elements present in all three input lists. # Convert lists to sets for efficient intersection operation set1 = set(list1) set2 = set(list2) set3 = set(list3) # Find intersection of these sets common_set = set1.intersection(set2).intersection(set3) # Convert set back to list return list(common_set)"},{"question":"Create a function that takes a string as input and returns the reverse of that string using a stack data structure in Python. The function should also ensure that only alphabetic characters are considered in the reversal, ignoring any special characters, digits, or whitespace.","solution":"def reverse_string(input_string): Returns the reverse of the input string considering only alphabetic characters. All non-alphabetic characters are ignored in the reversal. stack = [] result = [] # Only push alphabetic characters onto the stack for char in input_string: if char.isalpha(): stack.append(char) # Pop characters from the stack to form the reversed string for char in input_string: if char.isalpha(): result.append(stack.pop()) else: result.append(char) return ''.join(result)"},{"question":"Create a function that finds the differences between two sets of points in a 2D space. The function should take as input two lists of tuples, each representing a set of 2D points. The function should return a list of tuples, each representing the differences between corresponding points in the input lists.","solution":"def find_differences(points1, points2): Returns a list of tuples representing the differences between corresponding points in two input lists of 2D points. :param points1: List of tuples representing the first set of 2D points. :param points2: List of tuples representing the second set of 2D points. :return: List of tuples representing the differences between corresponding points. if len(points1) != len(points2): raise ValueError(\\"Both lists must have the same number of points.\\") differences = [] for (x1, y1), (x2, y2) in zip(points1, points2): differences.append((x1 - x2, y1 - y2)) return differences"},{"question":"Create a function that accepts an array of integers and returns the maximum product of a sub-array. The sub-array must contain at least one element. If the input array contains only one element, return that element. If the input array is empty, return 0.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray in nums. :param nums: List[int] - an array of integers :return: int - the maximum product of a subarray if not nums: return 0 max_product = min_product = result = nums[0] for i in range(1, len(nums)): if nums[i] < 0: max_product, min_product = min_product, max_product max_product = max(nums[i], max_product * nums[i]) min_product = min(nums[i], min_product * nums[i]) result = max(result, max_product) return result"},{"question":"Create a function that generates a string containing the first 'n' Fibonacci numbers separated by commas. For example, if the function receives an input of 5, it should return \\"0,1,1,2,3\\". If the input is 3, it should return \\"0,1,1\\". Make this function in Python and ensure it handles handles edge cases like negative inputs.","solution":"def generate_fibonacci_string(n): Returns a string containing the first 'n' Fibonacci numbers separated by commas. Parameters: n (int): The number of Fibonacci numbers to generate in the string. Returns: str: A string of the first 'n' Fibonacci numbers separated by commas. if n <= 0: return \\"\\" if n == 1: return \\"0\\" fibonacci_sequence = [0, 1] for i in range(2, n): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return \\",\\".join(map(str, fibonacci_sequence))"},{"question":"Create a function that takes a matrix (2Dlist) as input, and returns true if all the elements in each row and each column are non-negative, and false otherwise.","solution":"def is_non_negative_matrix(matrix): Returns True if all elements in each row and each column of the matrix are non-negative, otherwise False. for row in matrix: for element in row: if element < 0: return False return True"},{"question":"Create a function that calculates the sum of the first \`n\` natural numbers using recursion. The function should have a base case that terminates the recursion when \`n\` is equal to 1. For additional practice, include a recursive function to calculate the factorial of a number.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers using recursion. if n == 1: return 1 else: return n + sum_of_natural_numbers(n - 1) def factorial(n): Returns the factorial of a number using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes a string and returns the most common character.","solution":"from collections import Counter def most_common_character(s): Returns the most common character in the string s. If there are multiple characters with the same highest frequency, return any one of them. if not s: return None count = Counter(s) most_common_char, _ = count.most_common(1)[0] return most_common_char"},{"question":"Create a function that takes a string and returns a new string with all the uppercase letters converted to lowercase. Answer the question in the indications below.","solution":"def to_lowercase(s): Returns a new string with all uppercase letters converted to lowercase. return s.lower()"},{"question":"Create a function that sorts a list of lists, where each inner list represents a row in a 2D matrix and the outer list represents the matrix itself. The sorting should be based on the sum of the elements in each row. The function should return the sorted matrix.","solution":"def sort_matrix_by_row_sum(matrix): Sorts a matrix (list of lists) based on the sum of each row's elements. Args: matrix: List of lists, where each inner list represents a row in the matrix. Returns: List of lists representing the sorted matrix. return sorted(matrix, key=lambda row: sum(row))"},{"question":"Create a function that takes a list of integers and returns a new list which is the result of appending the input list to itself. For example, if the input list is [1, 2, 3], the output should be [1, 2, 3, 1, 2, 3].","solution":"def duplicate_list(input_list): This function takes a list of integers and returns a new list which is the result of appending the input list to itself. Parameters: input_list (list of int): The list of integers to duplicate. Returns: list of int: The resultant list after appending the input list to itself. return input_list + input_list"},{"question":"Create a function that returns the first non-repeated character in a string.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string s. If no non-repeated character is found, returns None. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeated character for char in s: if char_count[char] == 1: return char return None"},{"question":"Create a function that takes in a string of lowercase English letters and returns the longest substring with at most k distinct characters.","solution":"def longest_substring_with_k_distinct(s, k): Returns the longest substring length with at most k distinct characters. if k == 0 or not s: return 0 start = 0 max_length = 0 char_frequency = {} for end in range(len(s)): right_char = s[end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a function that parses a JSON string and returns a dictionary. If the JSON string is invalid or cannot be parsed, the function should raise a ValueError with an appropriate error message. The function should be able to handle JSON strings containing various data types, including integers, strings, lists, and nested dictionaries.","solution":"import json def parse_json(json_string): Parses a JSON string and returns a dictionary. If the JSON string is invalid or cannot be parsed, raises a ValueError with an appropriate error message. Parameters: json_string (str): The JSON string to parse. Returns: dict: The parsed dictionary from the JSON string. Raises: ValueError: If the JSON string cannot be parsed. try: result = json.loads(json_string) if isinstance(result, dict): return result else: raise ValueError(\\"Parsed JSON is not a dictionary\\") except (TypeError, json.JSONDecodeError) as e: raise ValueError(f\\"Invalid JSON string: {str(e)}\\")"},{"question":"Create a function that takes a positive integer as input and returns its factorial (the product of all positive integers up to that number). The function should be efficient and handle large input values within the limits of what can be stored in an integer.","solution":"def factorial(n): Returns the factorial of a given positive integer n. The factorial is the product of all positive integers up to n. :param n: A positive integer :return: The factorial of n if n < 0: raise ValueError(\\"Input must be a positive integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Create a function that takes an array of integers, and returns a new array where each element is the product of the original element and 2.","solution":"def double_elements(arr): Given an array of integers, return a new array where each element is the product of the original element and 2. :param arr: List[int] - Array of integers :return: List[int] - New array with elements doubled return [x * 2 for x in arr]"},{"question":"Create a function that takes in a list of strings and returns a tuple containing the shortest and longest strings in the list. If the list is empty, the function should return \`(None, None)\`. If there are multiple shortest or longest strings, return the first one encountered.","solution":"def find_shortest_and_longest_strings(strings): Returns a tuple containing the shortest and longest strings in the list. If the list is empty, returns (None, None). If there are multiple shortest or longest strings, returns the first one encountered. if not strings: return (None, None) shortest = longest = strings[0] for string in strings[1:]: if len(string) < len(shortest): shortest = string if len(string) > len(longest): longest = string return (shortest, longest)"},{"question":"Create a function that takes a list of integers, and returns the list sorted in descending order. The list should not include any duplicate values, even if they appear in the original list. Also, the function should handle any potential errors that may occur, such as non-integer values or empty lists.","solution":"def sort_unique_descending(arr): Takes a list of integers and returns the list sorted in descending order without any duplicate values. if not isinstance(arr, list): raise TypeError(\\"The input should be a list.\\") if not all(isinstance(x, int) for x in arr): raise ValueError(\\"All elements in the list should be integers.\\") # Remove duplicates by converting the list to a set unique_elements = set(arr) # Convert the set back to a list and sort it in descending order sorted_list = sorted(unique_elements, reverse=True) return sorted_list"},{"question":"Create a function that takes in two parameters: \`num1\` and \`numbers\`. \`num1\` is an integer, and \`numbers\` is a list of integers. The function should return the smallest integer in \`numbers\` that is greater than or equal to \`num1\`.","solution":"def smallest_greater_equal(num1, numbers): Returns the smallest integer in \`numbers\` that is greater than or equal to \`num1\`. # Filter numbers that are greater than or equal to num1 filtered_numbers = [num for num in numbers if num >= num1] # If no such number exists, return None if not filtered_numbers: return None # Find and return the smallest number in the filtered list return min(filtered_numbers)"},{"question":"Create a function that takes a list of strings and returns the list sorted by the frequency of characters in each string. If the frequency is the same, arrange them alphabetically.","solution":"from collections import Counter def sort_by_char_frequency(strings): Sorts a list of strings by the frequency of characters in each string. If the frequency is the same, sorts them alphabetically. def char_frequency_key(s): frequency = sum(Counter(s).values()) return (frequency, s) return sorted(strings, key=char_frequency_key)"},{"question":"Create a function that receives a string as an argument and prints all the characters in the string in reverse order without using any slicing or additional data structures. Moreover, implement this function using recursion.","solution":"def print_reverse(s): Prints the characters of the string s in reverse order using recursion. if len(s) == 0: return print_reverse(s[1:]) print(s[0], end='')"},{"question":"Create a function that takes in a string as input and returns the longest substring with all unique characters. For example, given the string \\"abcabcbb\\", the function should return \\"abc\\", as it is the longest substring with unique characters.","solution":"def longest_unique_substring(s): Returns the longest substring with all unique characters. :param s: Input string :return: Longest substring with unique characters if not s: return \\"\\" start = 0 max_len = 0 max_substr = \\"\\" char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substr = s[start:end + 1] return max_substr"},{"question":"Create a function that prints all the prime numbers within an interval.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def print_primes_in_interval(start, end): Prints all prime numbers in the interval [start, end]. primes = [n for n in range(start, end + 1) if is_prime(n)] for prime in primes: print(prime) return primes"},{"question":"Create a function that takes a number as an input and returns the sum of all the divisors of the given number excluding the number itself. For example, for the number 10, the divisors are 1, 2, and 5, and the sum would be 8.","solution":"def sum_of_divisors(n): Returns the sum of all the divisors of the given number excluding the number itself. if n < 1: return 0 divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that takes a string and replaces all the vowels (a, e, i, o, u) with the vowel from the end of the string. For example, given the string \\"hello\\", the output should be \\"holle\\". If the string has no vowels, the function should return the original string unchanged.","solution":"def replace_vowels(s): Replaces all the vowels (a, e, i, o, u) in the string with the vowel from the end of the string. If the string has no vowels, returns the original string unchanged. vowels = 'aeiouAEIOU' vowel_list = [char for char in s if char in vowels] if not vowel_list: return s vowel_list_reversed = vowel_list[::-1] result = [] vowel_index = 0 for char in s: if char in vowels: result.append(vowel_list_reversed[vowel_index]) vowel_index += 1 else: result.append(char) return ''.join(result)"},{"question":"Create a function that checks if a given number is a palindrome. A palindrome is a number that reads the same backward as forward. For example, 121 is a palindrome. Write a function \`is_palindrome(num)\` that takes an integer \`num\` as input and returns \`True\` if the number is a palindrome, and \`False\` otherwise. Handle edge cases such as negative numbers.","solution":"def is_palindrome(num): Checks if a given number is a palindrome. Args: num (int): The number to check. Returns: bool: True if the number is a palindrome, False otherwise. num_str = str(num) return num_str == num_str[::-1]"},{"question":"Create a function that takes an array of integers and returns an array with two elements: the first being the count of even numbers and the second being the count of odd numbers in the input array.","solution":"def count_even_odd(numbers): Returns a list where the first element is the count of even numbers and the second element is the count of odd numbers in the input list of numbers. :param numbers: List of integers :return: List with two elements: [count_of_even_numbers, count_of_odd_numbers] even_count = sum(1 for num in numbers if num % 2 == 0) odd_count = len(numbers) - even_count return [even_count, odd_count]"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the sum of every twosecutive numbers in the input list. Also, demonstrate the usage of the function with a simple example.","solution":"def sum_consecutive_pairs(nums): Returns a new list containing the sum of every two consecutive numbers in the input list. if not nums or len(nums) < 2: return [] return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)] # Example usage: example_list = [1, 2, 3, 4, 5] print(sum_consecutive_pairs(example_list)) # Output should be [3, 5, 7, 9]"},{"question":"Create a function that lists the number of ways n gentlemen and n ladies can sit in a circular arrangement such that men and ladies are seated alternately. In a circular arrangement, rotations of the same placement are considered identical.","solution":"import math def circular_arrangement_count(n): Returns the number of ways n gentlemen and n ladies can sit in a circular arrangement such that men and ladies are seated alternately. if n == 1: return 1 # Only one way to arrange 1 gentleman and 1 lady alternately return math.factorial(n - 1) * math.factorial(n)"},{"question":"Create a function that takes two lists of numbers and returns a new list containing the elementwise sum of both lists. If the lists are of unequal lengths, the function should raise a ValueError with the message \\"Lists must be of the same length\\".","solution":"def elementwise_sum(list1, list2): Returns a new list containing the elementwise sum of both lists, raises ValueError if lists are of unequal lengths. Parameters: list1 (list of int or float): The first list of numbers. list2 (list of int or float): The second list of numbers. Returns: list of int or float: A list containing the elementwise sum of the input lists. Raises: ValueError: If the input lists are of unequal lengths. if len(list1) != len(list2): raise ValueError(\\"Lists must be of the same length\\") return [a + b for a, b in zip(list1, list2)]"},{"question":"Create a function that checks if a given number is a perfect square. A perfect square is an integer that is the square of an integer. Given a positive integer \`n\`, your function should return \`True\` if \`n\` is a perfect square, and \`False\` otherwise.","solution":"import math def is_perfect_square(n): Checks if the given number n is a perfect square. if n < 0: return False root = math.isqrt(n) return root * root == n"},{"question":"Create a function that removes duplicate characters from a string and returns the modified string.","solution":"def remove_duplicates(s): Removes duplicate characters from the string s and returns the modified string. Preserves the order of the first occurrence of each character. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that efficiently finds the second largest number in a given list of integers. The function should be designed to handle large lists and should not sort the list if possible.","solution":"def find_second_largest(lst): Finds the second largest number in a given list of integers. Args: lst (list): A list of integers. Returns: int: The second largest number in the list. Raises: ValueError: If the list contains fewer than 2 unique numbers. if len(lst) < 2: raise ValueError(\\"The list must contain at least two unique numbers.\\") first_largest = second_largest = float('-inf') for num in lst: if num > first_largest: second_largest = first_largest first_largest = num elif num > second_largest and num != first_largest: second_largest = num if second_largest == float('-inf'): raise ValueError(\\"The list must contain at least two unique numbers.\\") return second_largest"},{"question":"Create a function that checks if a given string is a valid UUID format. A UUID is a 36-character string in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx. Here, x can be any hexadecimal digit (0-9, a-f, or A-F).","solution":"import re def is_valid_uuid(uuid_string): Checks if a given string is a valid UUID format. A UUID is a 36-character string in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx. uuid_regex = re.compile(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}') return bool(uuid_regex.match(uuid_string))"},{"question":"Create a function that takes in a string s and an integer m, and returns an array of integers with the count of repeating elements in the array 's', but considering only elements that are less than or equal to m.","solution":"def count_repeating_elements(s, m): Returns an array of integers with the count of repeating elements in the array 's', but considering only elements that are less than or equal to m. :param s: List of integers. :param m: Integer threshold. :return: List of integers with the counts of repeating elements. from collections import Counter filtered_elements = [x for x in s if x <= m] element_counts = Counter(filtered_elements) return [count for element, count in element_counts.items() if count > 1]"},{"question":"Create a function that takes an integer input and returns a list of its factors. A factor is defined as a number that divides the given integer exactly without leaving a remainder. The function should work for any positive integer.","solution":"def factors(n): Returns a list of factors of the given integer n. Parameters: n (int): The integer to find the factors of. Returns: list: A list of integers which are factors of n. if n < 1: raise ValueError(\\"Input must be a positive integer.\\") return [i for i in range(1, n + 1) if n % i == 0]"},{"question":"Create a function that takes a list of integers and returns a new list with the sum of every two consecutive elements. For example, if the input list is [1, 2, 3, 4], the output should be [3, 5, 7].","solution":"def sum_consecutive_pairs(lst): Returns a new list with the sum of every two consecutive elements. if not lst or len(lst) < 2: return [] return [lst[i] + lst[i+1] for i in range(len(lst) - 1)]"},{"question":"Create a function that takes an array of integers as input and returns the product of the smallest and largest numbers in the array.","solution":"def product_of_min_max(arr): Returns the product of the smallest and largest numbers in the array. :param arr: List of integers :return: Product of min and max value in the array if not arr: raise ValueError(\\"Array should not be empty\\") min_val = min(arr) max_val = max(arr) return min_val * max_val"},{"question":"Create a function that will make an array of unique values from the array which includes duplicates.","solution":"def unique_values(arr): Returns a list of unique values from the given array, which includes duplicates. return list(set(arr))"},{"question":"Create a function that counts how many times a specific digit appears in a given number. The function should take two parameters: the number (as an integer or string) and the digit to be counted (also as an integer or character). It should return the count of how many times the specified digit appears in the number.","solution":"def count_digit_occurrences(number, digit): Counts how many times a specific digit appears in a given number. Parameters: number (int or str): The number in which to count the occurrences of the digit. digit (int or str): The digit to be counted. Returns: int: The count of how many times the digit appears in the number. number_str = str(number) digit_str = str(digit) return number_str.count(digit_str)"},{"question":"Create a function that checks and returns \`true\` if the given string starts with \\"Hello\\", ignoring the case of the first letter.","solution":"def starts_with_hello(s): Returns True if the given string starts with 'Hello', ignoring the case of the first letter. return s.lower().startswith(\\"hello\\")"},{"question":"Create a function that takes a list of numbers as input and returns the sum of the list elements. The function should be able to be called multiple times with different lists of numbers.","solution":"def sum_of_list(numbers): Returns the sum of the elements in the input list of numbers. Parameters: numbers (list): A list of numeric values. Returns: int/float: The sum of the elements in the list. return sum(numbers)"},{"question":"Create a function that calculates the sum of all numbers in a given list. If the sum is greater than 100, return the sum, otherwise return the sum plus 10. How should I approach this problem in Python?","solution":"def sum_with_bonus(numbers): Returns the sum of all numbers in the given list. If the sum is greater than 100, the sum is returned as is. Otherwise, the sum plus 10 is returned. total_sum = sum(numbers) return total_sum if total_sum > 100 else total_sum + 10"},{"question":"Create a function that takes a string as input and returns a new string with each character's case reversed. For example, if the input string is \\"Python\\", the output should be \\"pYTHON\\". Make sure your function handles strings with mixed case, spaces, and punctuation correctly.","solution":"def reverse_case(s): Returns a new string with each character's case reversed. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the sum of all elements in the original list except for the element at the current index. In other words, implement a solution to the problem of finding the product of an array except self, but without using division and with O(n) time complexity and O(1) additional space complexity.","solution":"def sum_except_self(nums): Returns a new list where each element is the sum of all elements in the original list except for the element at the current index. :param nums: List of integers. :return: List of integers. n = len(nums) if n == 0: return [] # Output array to store the sums output = [0] * n # temp to store sum of elements to the left of the current element left_sum = 0 for i in range(n): output[i] = left_sum left_sum += nums[i] # temp to store sum of elements to the right of the current element right_sum = 0 for i in range(n-1, -1, -1): output[i] += right_sum right_sum += nums[i] return output"},{"question":"Create a function that generates a Fibonacci sequence up to a given number of terms. The function should also allow you to specify whether the sequence should be returned as a list of integers or a tuple of integers.","solution":"def fibonacci_sequence(num_terms, as_tuple=False): Generates a Fibonacci sequence up to a given number of terms. Parameters: num_terms (int): Number of terms in the Fibonacci sequence to generate. as_tuple (bool): Return the sequence as a tuple if True, otherwise return as a list. Returns: list or tuple: The Fibonacci sequence up to the specified number of terms. if num_terms <= 0: return [] if not as_tuple else () sequence = [0, 1] if num_terms > 1 else [0] for _ in range(2, num_terms): sequence.append(sequence[-1] + sequence[-2]) return tuple(sequence) if as_tuple else sequence"},{"question":"Create a function that takes a list of strings, where each string represents a line of a poem, and returns a single string that is the concatenation of all the lines, separated by a newline character ('n').","solution":"def concatenate_poem_lines(lines): Concatenates a list of strings (poem lines) into a single string with each line separated by a newline character. Parameters: - lines (list of str): A list of strings, where each string is a line of a poem. Returns: - str: A single string with all lines concatenated and separated by a newline character. return 'n'.join(lines)"},{"question":"Create a function that takes a number \`n\` as a parameter and returns another function that will increment by 1, \`x\` number of times. The inner function should be able to track the number of times it has been called.","solution":"def incrementor(n): Returns a function that increments by 1, n number of times. def inner_increment(): nonlocal n if n > 0: n -= 1 return n else: return \\"Completed\\" return inner_increment"},{"question":"Create a function that takes in two integers as input and returns the sum of the two numbers. Additionally, this function should handle potential errors gracefully, ensuring that the inputs are indeed integers.","solution":"def add_integers(a, b): Returns the sum of a and b if both are integers. Raises ValueError if either of the inputs is not an integer. if not isinstance(a, int) or not isinstance(b, int): raise ValueError(\\"Both inputs must be integers.\\") return a + b"},{"question":"Create a function that returns the nth element of a Fibonacci sequence where n is the input argument. The function should be efficient and handle large values of n.","solution":"def fibonacci(n): Returns the nth element of the Fibonacci sequence. Uses an iterative approach to handle large values efficiently. if n <= 0: raise ValueError(\\"n must be a positive integer\\") a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return a"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the first \`n\` natural numbers. Additionally, implement error handling to check if the input is a positive integer.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. Raises ValueError if n is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") return n * (n + 1) // 2"},{"question":"Create a function that takes three integers as arguments and returns the maximum of the three. Use Python.","solution":"def max_of_three(a, b, c): Returns the maximum of the three integers a, b, and c. return max(a, b, c)"},{"question":"Create a function that takes a string parameter \`str\` and returns the reversed string.","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Create a function that generates Fibonacci numbers. The function should take an integer \`n\` as input and return a list of the first \`n\` Fibonacci numbers. The Fibonacci sequence is defined by the recurrence relation: F(n) = F(n-1) + F(n-2), with the initial values F(0) = 0 and F(1) = 1.","solution":"def generate_fibonacci(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Create a function that takes a string as a parameter and prints each character of the string in uppercase using ASCII values directly without calling any string methods. Here's the tricky part - do not use any built-in string or array methods. Implement it in Python.","solution":"def print_uppercase_characters(s): Takes a string s and prints each character in uppercase using ASCII values. for char in s: ascii_value = ord(char) if 97 <= ascii_value <= 122: # If the character is lowercase ascii_value = ascii_value - 32 print(chr(ascii_value), end=\\"\\")"},{"question":"Create a function that takes a list of numbers and returns the sum of all unique numbers in the list. A unique number is defined as a number that appears only once in the list.","solution":"def sum_of_unique(numbers): Returns the sum of all unique numbers in the list. A unique number is defined as a number that appears only once in the list. from collections import Counter number_counts = Counter(numbers) unique_sum = sum(number for number, count in number_counts.items() if count == 1) return unique_sum"},{"question":"Create a function that determines if a given integer is a power of five (i.e., 5^n) for some integer n. If the integer is a power of five, return 5^n, otherwise return -1.","solution":"def is_power_of_five(n): Determines if a given integer is a power of five. Returns the power if true, otherwise returns -1. if n <= 0: return -1 power = 0 current_value = 1 while current_value < n: current_value *= 5 power += 1 if current_value == n: return f\\"5^{power}\\" else: return -1"},{"question":"Create a function that takes two integers as input and returns the maximum of the two using Python.","solution":"def maximum(a, b): Returns the maximum of two integers a and b. return a if a > b else b"},{"question":"Create a function that takes a string as input and returns the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, the function should return all of them in a list. If the string is empty, the function should return an empty list.","solution":"def most_frequent_char(s): Returns the most frequently occurring character(s) in the input string. If there are multiple characters with the same highest frequency, the function returns all of them in a list. If the string is empty, the function returns an empty list. if not s: return [] from collections import Counter counter = Counter(s) max_frequency = max(counter.values()) most_frequent = [char for char, freq in counter.items() if freq == max_frequency] return most_frequent"},{"question":"Create a function that will accept an array of integers as input and return the difference between the maximum and minimum value in the array.","solution":"def max_min_difference(arr): Returns the difference between the maximum and minimum value in the array. :param arr: List of integers :return: Integer representing the difference between max and min values if not arr: raise ValueError(\\"Array must not be empty\\") max_val = max(arr) min_val = min(arr) return max_val - min_val"},{"question":"Create a function that takes a string as an input and returns \\"True\\" if the string contains the phrase \\"hello\\" anywhere in it, and \\"False\\" otherwise.","solution":"def contains_hello(s): Checks if the given string contains the phrase \\"hello\\" anywhere in it. Parameters: s (str): The string to be checked. Returns: bool: True if the string contains \\"hello\\", False otherwise. return \\"hello\\" in s"},{"question":"Create a function that takes a string parameter that is a binary string and converts it to a decimal number. The binary string will only consist of digits 0 and 1.","solution":"def binary_to_decimal(binary_string): Converts a binary string to a decimal number. Parameters: binary_string (str): A string representation of a binary number. Returns: int: The decimal representation of the binary string. return int(binary_string, 2)"},{"question":"Create a function that takes in a list of integers, and returns a list of integers where each element is the sum of all elements to the left or right of the corresponding element in the input list. If the element is at the beginning or end of the list, the sum should be calculated with only one side considered.","solution":"def sums_of_sides(lst): Takes a list of integers and returns a new list where each element is the sum of all elements to the left or right of the corresponding element in the input list. n = len(lst) if n == 0: return [] if n == 1: return [0] result = [] for i in range(n): if i == 0: result.append(sum(lst[1:])) elif i == n - 1: result.append(sum(lst[:-1])) else: result.append(sum(lst[:i]) + sum(lst[i+1:])) return result"},{"question":"Create a function that generates a Fibonacci sequence up to the nth number. The sequence should start with 0 and 1, and each subsequent number should be the sum of the two preceding ones. For example, if n is 6, the sequence should be [0, 1, 1, 2, 3, 5].","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence up to the nth number. Args: n (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth number. if n <= 0: return [] fibonacci_sequence = [0] if n == 1: return fibonacci_sequence fibonacci_sequence.append(1) for i in range(2, n): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"Create a function that takes two lists of integers as input and returns a new list which is the intersection of these two lists. The output list should contain only the unique elements present in both lists, sorted in ascending order.","solution":"def intersect_lists(list1, list2): Returns a sorted list of unique integers that are present in both list1 and list2. # Find the intersection of the two lists intersection = set(list1) & set(list2) # Convert to a sorted list return sorted(list(intersection))"},{"question":"Create a function that accepts an array of integers and returns the count of unique elements in the array.","solution":"def count_unique_elements(arr): Returns the count of unique elements in the array. return len(set(arr))"},{"question":"Create a function that takes an integer n, and returns an array of n elements, each initialized to 0. If n is less than 0, return an empty array.","solution":"def create_array(n): Returns an array of n elements, each initialized to 0. If n is less than 0, returns an empty array. if n < 0: return [] return [0] * n"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the elements that are greater than the previous element. For example, given the input list \`[1, 3, 2, 4, 3, 5]\`, the function should return \`[3, 4, 5]\`.","solution":"def filter_greater_than_previous(nums): Returns a list containing only the elements that are greater than the previous element. Args: nums (list): A list of integers. Returns: list: A new list containing integers greater than the previous element. if not nums: return [] result = [nums[0]] # Include the first element by default for i in range(1, len(nums)): if nums[i] > nums[i - 1]: result.append(nums[i]) # Remove the first element if it does not have any element before it to compare return result[1:] if len(result) > 1 else []"},{"question":"Create a function that takes a list \`numbers\` and an integer \`n\`. It should return a list containing only the elements in \`numbers\` that are multiples of \`n\`.","solution":"def find_multiples(numbers, n): Given a list of numbers and an integer n, return a list containing only the elements in 'numbers' that are multiples of 'n'. return [x for x in numbers if x % n == 0]"},{"question":"Create a function that takes a list of strings as an input and returns a list of strings where the strings with odd lengths are kept and the strings with even lengths are removed.","solution":"def filter_odd_length_strings(strings): Returns a list of strings where the strings with odd lengths are kept and the strings with even lengths are removed. :param strings: List of strings :return: List of strings with odd lengths return [string for string in strings if len(string) % 2 == 1]"},{"question":"Create a function that converts a given temperature in Fahrenheit to Celsius using the formula \`C = (F - 32) * 5/9\`.","solution":"def fahrenheit_to_celsius(f): Converts Fahrenheit to Celsius. Args: f (float): Temperature in Fahrenheit. Returns: float: Temperature in Celsius. return (f - 32) * 5/9"},{"question":"Create a function that takes a list of integers as input and returns the maximum sum of consecutive elements in the list. If the list is empty, the function should return 0. If the list contains only one element, the function should return that element. If the list contains multiple elements, the function should calculate the maximum sum of any consecutive subarray within the list.","solution":"def max_sum_consecutive_elements(arr): Returns the maximum sum of consecutive elements in the list. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of consecutive elements. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes an integer, represent the hours of the day, and then outputs the corresponding string of the day of the week based off a 24-hour clock. For example, if the input is 0, the function should return 'Sunday', and if the input is 23, the function should return 'Saturday'.","solution":"def get_day_of_week(hour): Given an integer representing an hour of the day (0-23), return the corresponding day of the week. 0-23 represent the hours of a 24-hour clock where 0 is Sunday, 23 is Saturday. Args: hour (int): An integer between 0 and 23 inclusive. Returns: str: The corresponding day of the week. days_of_week = [ 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Sunday', 'Saturday', 'Saturday', 'Saturday', 'Saturday' ] if 0 <= hour <= 23: return days_of_week[hour] else: return 'Invalid hour'"},{"question":"Create a function that takes an array of words and returns the word with the most occurrences. If there are multiple words with the same highest number of occurrences, return the one that comes first alphabetically. If the array is empty or NULL, return NULL.","solution":"def most_frequent_word(words): Returns the most frequent word in the list. If there are multiple words with the same highest number of occurrences, returns the one that comes first alphabetically. If the array is empty or None, returns None. if not words: return None word_count = {} for word in words: word_count[word] = word_count.get(word, 0) + 1 # Find the word with the highest count. In case of a tie, the min function returns the word first alphabetically most_frequent = max(word_count.items(), key=lambda item: (item[1], -ord(item[0][0]))) return most_frequent[0]"},{"question":"Create a function that takes a string of lowercase letters and returns \`true\` if the string is a palindrome, otherwise \`false\`. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome(s: str) -> bool: Returns True if the given string is a palindrome, otherwise False. # Remove non-alphanumeric characters and convert to lowercase cleaned = ''.join(char for char in s if char.isalnum()).lower() # Check if cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Create a function that will return a boolean indicating whether a provided integer is a perfect square. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False root = math.isqrt(n) return root * root == n"},{"question":"Create a function that generates a random integer between two specified numbers. How would you implement this in Python?","solution":"import random def generate_random_integer(start, end): Generates a random integer between the start and end (inclusive). if start > end: raise ValueError(\\"Start number must be less than or equal to end number.\\") return random.randint(start, end)"},{"question":"Create a function that converts a string to a JSON object and parses it.","solution":"import json def string_to_json(string): Converts a string to a JSON object. Args: string (str): The string to be converted. Returns: dict: The parsed JSON object. Raises: json.JSONDecodeError: If the string is not a valid JSON. return json.loads(string)"},{"question":"Create a function that takes a number as an input and returns \`True\` if the number is a perfect square and \`False\` otherwise.","solution":"import math def is_perfect_square(num): Returns True if num is a perfect square, else False. if num < 0: return False sqrt_num = math.isqrt(num) return sqrt_num * sqrt_num == num"},{"question":"Create a function that finds the first occurrence of two given characters in a string, and returns the distance between them. If the characters are not found or they are at the same position (distance is 0), return -1.","solution":"def find_distance(s, char1, char2): Finds the distance between the first occurrence of two given characters in a string. index1 = s.find(char1) index2 = s.find(char2) if index1 == -1 or index2 == -1 or index1 == index2: return -1 return abs(index2 - index1)"},{"question":"Create a function that checks if a given integer is a power of two using bitwise operations. The function should return \`True\` if the number is a power of two and \`False\` otherwise.","solution":"def is_power_of_two(n): Check if a given integer is a power of two using bitwise operations. :param n: Integer to check :return: True if n is a power of two, False otherwise if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that returns the length of the longest string in a list if the list is not empty. If the list is empty, return -1. Iterate through each string in the list and calculate its length. Keep track of the longest length encountered during the iteration and return it. Provide an example of a function using Python.","solution":"def longest_string_length(strings): Returns the length of the longest string in a list. If the list is empty, returns -1. Parameters: strings (list of str): A list of strings. Returns: int: The length of the longest string or -1 if the list is empty. if not strings: return -1 max_length = 0 for s in strings: if len(s) > max_length: max_length = len(s) return max_length"},{"question":"Create a function that converts a binary number to a decimal number. The function should take a binary number as a string input and return a decimal number as an integer. You should handle edge cases such as an empty string or a string that does not contain a binary number, returning None in these cases.","solution":"def binary_to_decimal(binary): Converts a binary number (given as a string) to a decimal number. Returns None if the input is not a valid binary number. if not binary or any(char not in '01' for char in binary): return None decimal = 0 for i, digit in enumerate(binary[::-1]): decimal += int(digit) * (2 ** i) return decimal"},{"question":"Create a function that takes an integer as input and returns a list of all its factors (including 1 and itself).","solution":"def factors(n): Returns a list of all factors of n (including 1 and itself). if n <= 0: raise ValueError(\\"Input must be a positive integer\\") factor_list = [] for i in range(1, n + 1): if n % i == 0: factor_list.append(i) return factor_list"},{"question":"Create a function that accepts a string as an argument and returns a count of all occurrences of the letters 'a', 'e', 'i', 'o', and 'u' in the string. Additionally, create another function that takes the output from the first function and counts how many times each vowel appears.","solution":"def count_vowels(s): Returns the total count of vowels 'a', 'e', 'i', 'o', 'u' in the string s. vowels = \\"aeiou\\" return sum(1 for char in s if char.lower() in vowels) def count_each_vowel(s): Returns a dictionary with the count of each vowel 'a', 'e', 'i', 'o', 'u' in the string s. vowels = \\"aeiou\\" count_dict = {vowel: 0 for vowel in vowels} for char in s: if char.lower() in vowels: count_dict[char.lower()] += 1 return count_dict"},{"question":"Create a function that takes a string as input and returns the count of unique characters in it. For example, for the string \\"programming\\", the function should return 8 because there are 8 unique characters ('p', 'r', 'o', 'g', 'a', 'm', 'i', 'n').","solution":"def count_unique_characters(s): Returns the count of unique characters in the given string s. return len(set(s))"},{"question":"Create a function that takes a list of numbers as an argument and returns the second largest number in the list. For example, if the input list is [3, 1, 4, 1, 5, 9], the function should return 5.","solution":"def second_largest(numbers): Returns the second largest number in the list. :param numbers: List of numbers :return: The second largest number in the list if len(numbers) < 2: raise ValueError(\\"List must contain at least two distinct numbers.\\") # Convert list to a set to remove duplicates and then back to a sorted list unique_numbers = sorted(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two distinct numbers.\\") return unique_numbers[-2]"},{"question":"Create a function that takes a string as input, checks if it is a palindrome, and if so, returns the palindrome with its characters in reverse order. If the string is not a palindrome, return the original string.","solution":"def reverse_if_palindrome(s): Checks if the input string s is a palindrome. If it is, returns the reverse of the palindrome. Otherwise, returns the original string. Parameters: s (str): The input string to check Returns: str: The reversed palindrome if s is a palindrome, else the original string if s == s[::-1]: return s[::-1] else: return s"},{"question":"Create a function that calculates the average of two numbers.","solution":"def average(a, b): Returns the average of two numbers a and b. return (a + b) / 2"},{"question":"Create a function that takes a string and returns a new string with all whitespace removed.","solution":"def remove_whitespace(s): Returns a new string with all whitespace removed from the input string s. return ''.join(s.split())"},{"question":"Create a function that takes a string and counts the occurrences of each character in the string. Use Python as the programming language.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that takes two integers as input and returns their multiplication result.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that outputs a string that says \\"Hello, World!\\" in Python.","solution":"def hello_world(): Returns the string 'Hello, World!'. return \\"Hello, World!\\""},{"question":"Create a function that returns the sum of the two largest numbers in a given array of integers.","solution":"def sum_of_two_largest_numbers(nums): Returns the sum of the two largest numbers in the given array of integers. if len(nums) < 2: raise ValueError(\\"The input array must contain at least two elements.\\") first = second = float('-inf') for num in nums: if num > first: second = first first = num elif num > second: second = num return first + second"},{"question":"Create a function that takes a 2D array of integers and returns the maximum sum of a subarray within the 2D array. The subarray can consist of elements from any contiguous rows and columns.","solution":"def maximum_sum_subarray_2d(matrix): Finds the maximum sum of a subarray within the given 2D array. Args: matrix (list of list of int): 2D array to find the subarray with the maximum sum. Returns: int: The maximum sum of a subarray. if not matrix: return 0 max_sum = float('-inf') rows = len(matrix) cols = len(matrix[0]) # Temporary array to store the sum for subarrays temp = [0] * rows for left in range(cols): # Reset the temporary array temp = [0] * rows for right in range(left, cols): # Sum between left and right columns for each row for i in range(rows): temp[i] += matrix[i][right] # Find the maximum sum subarray in this temporary array current_max = kadane_algorithm(temp) # Update the global maximum sum max_sum = max(max_sum, current_max) return max_sum def kadane_algorithm(arr): Helper function to find the maximum sum subarray in a 1D array using Kadane's algorithm. Args: arr (list of int): 1D array to find the subarray with the maximum sum. Returns: int: The maximum sum of a subarray. current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that calculates the area of a triangle given its base and height. What would be the Python code for a function that does this?","solution":"def triangle_area(base, height): Returns the area of a triangle given its base and height. if base < 0 or height < 0: raise ValueError(\\"Base and height must be non-negative.\\") return 0.5 * base * height"},{"question":"Create a function that takes an array of integers as input and returns the maximum sum of any contiguous subarray within the array. The subarray must contain at least one integer.","solution":"def max_subarray(nums): Returns the maximum sum of any contiguous subarray within the array. The subarray must contain at least one integer. :param nums: List of integers. :return: Integer representing the maximum sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that can convert a list of strings into a dictionary where each element in the list is a key, and its corresponding value is its index in the list.","solution":"def list_to_dict(lst): Converts a list of strings into a dictionary where each element in the list is a key and its corresponding value is its index in the list. return {item: index for index, item in enumerate(lst)}"},{"question":"Create a function that receives a string and returns that string with all consonants removed.","solution":"def remove_consonants(s): Returns the provided string with all consonants removed. vowels = 'aeiouAEIOU' return ''.join(char for char in s if char in vowels or not char.isalpha())"},{"question":"Create a function that takes two lists of integers (a and b) as input and returns a new list that contains the integer values from both lists sorted in ascending order.","solution":"def merge_and_sort_lists(a, b): Returns a new list containing the integer values from both input lists sorted in ascending order. return sorted(a + b)"},{"question":"Create a function that takes an array of integers and returns a new array with each individual element's bits reversed.","solution":"def reverse_bits_array(arr): Takes an array of integers and returns a new array with each individual element's bits reversed. Parameters: arr (list of int): List of integers Returns: list of int: List of integers with each element's bits reversed def reverse_bits(x): # find out the number of bits needed for the representation num_bits = x.bit_length() reversed_bits = 0 for i in range(num_bits): reversed_bits |= ((x >> i) & 1) << (num_bits - 1 - i) return reversed_bits return [reverse_bits(x) for x in arr]"},{"question":"Create a function that takes in an array of integers, and returns the array sorted in ascending order using the selection sort algorithm. The function should have a time complexity of O(n^2) and should not use any additional space other than a few variables for swapping and keeping track of the minimum value's index.","solution":"def selection_sort(arr): Sorts an array of integers in ascending order using the selection sort algorithm. n = len(arr) for i in range(n): # Assume the minimum is the first element min_index = i # Determine the minimum element in the remaining unsorted array for j in range(i + 1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element of the unsorted part arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Create a function that takes two arguments, an integer \`n\` and a string \`s\`. The function should return the first \`n\` identical characters in \`s\`. If there are not enough identical characters, it should return a null value. For example, if \`s\` is \\"aaabbbccddd\\" and \`n\` is 2, the function should return \\"aa\\", as these are the first two identical characters in the string.","solution":"def first_n_identical_chars(n, s): Returns the first n identical characters in a string s. If there are not enough identical characters, returns None. if n < 1 or not s: return None first_char = s[0] count = 0 for char in s: if char == first_char: count += 1 if count == n: return first_char * n else: break return None"},{"question":"Create a function that takes a list of integers and returns a new list with each integer greater than 5 doubled.","solution":"def double_greater_than_five(numbers): Returns a new list with each integer greater than 5 doubled. :param numbers: List of integers :return: New list with integers greater than 5 doubled return [x * 2 if x > 5 else x for x in numbers]"},{"question":"Create a function that will validate an email address with a regular expression in Python. The function should return \`True\` if the email address is valid and \`False\` otherwise.","solution":"import re def validate_email(email): Validates an email address using a regular expression. Parameters: email (str): The email address to validate. Returns: bool: True if the email is valid, False otherwise. pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return bool(re.match(pattern, email))"},{"question":"Create a function that takes a list of integers as input and returns a new list of integers where each element is multiplied by 2 and then incremented by 1.","solution":"def transform_list(input_list): Takes a list of integers and returns a new list where each element is multiplied by 2 and then incremented by 1. return [(x * 2) + 1 for x in input_list]"},{"question":"Create a function that checks if a number is negative.","solution":"def is_negative(number): Returns True if the given number is negative, otherwise False. return number < 0"},{"question":"Create a function that takes two strings as input: a main string and a pattern. The function should replace all occurrences of the pattern in the main string with the pattern itself, but surrounded by asterisks. For example, if the main string is \\"hello world\\" and the pattern is \\"o\\", the output should be \\"hell* w*rld\\".","solution":"def emphasize_pattern(main_string, pattern): Replaces all occurrences of the pattern in main_string with the pattern surrounded by asterisks. Args: main_string (str): The main string where the pattern replacement should take place. pattern (str): The pattern to be surrounded by asterisks. Returns: str: The modified string with the pattern surrounded by asterisks. return main_string.replace(pattern, f\\"*{pattern}*\\")"},{"question":"Create a function that takes a list of integers as input and returns a list of unique integers, preserving the order of their first occurrence. For example, given the input list [4, 5, 2, 3, 3, 4, 5, 2, 1], the function should return [4, 5, 2, 3, 1].","solution":"def unique_integers(lst): Returns a list of unique integers, preserving the order of their first occurrence. seen = set() unique_lst = [] for num in lst: if num not in seen: unique_lst.append(num) seen.add(num) return unique_lst"},{"question":"Create a function that format string that accepts a string and converts all characters to uppercase.","solution":"def to_uppercase(s): Converts all characters in the string to uppercase. Parameters: s (str): The input string. Returns: str: The input string with all characters converted to uppercase. return s.upper()"},{"question":"Create a function that takes two arrays as input and returns the sum of the products of their corresponding elements. If the arrays are of different lengths, the function should handle this gracefully by only considering the common elements.","solution":"def sum_of_products(arr1, arr2): Returns the sum of the products of the corresponding elements of two arrays. If the arrays are of different lengths, it considers only the common elements. return sum(x * y for x, y in zip(arr1, arr2))"},{"question":"Create a function that takes in two strings, a and b, and returns the longest common subsequence (LCS) of a and b.","solution":"def longest_common_subsequence(a, b): Returns the longest common subsequence of strings a and b. n, m = len(a), len(b) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstructing the LCS from the DP table lcs = [] x, y = n, m while x > 0 and y > 0: if a[x - 1] == b[y - 1]: lcs.append(a[x - 1]) x -= 1 y -= 1 elif dp[x - 1][y] > dp[x][y - 1]: x -= 1 else: y -= 1 return ''.join(reversed(lcs))"},{"question":"Create a function that converts a list of strings into a single string, with each string separated by a hyphen. If the list is empty or not provided, the function should return an empty string.","solution":"def convert_list_to_string(lst=None): Converts a list of strings into a single string separated by hyphens. If the list is empty or not provided, returns an empty string. Args: lst (list, optional): List of strings to be converted. Returns: str: A single string with each element of the list separated by hyphens or an empty string. if lst is None or not lst: return '' return '-'.join(lst)"},{"question":"Create a function that accepts a single argument, a number (integer or float), and returns the number of times the digit 3 appears in the number. If the number appears as a part of a larger number or as a decimal point, it should be counted. For example, 30, 3.14, or -3 should all return 1 as the digit 3 appears only once.","solution":"def count_digit_three(number): Returns the number of times the digit 3 appears in the number. Parameters: number (int or float): The input number. Returns: int: The count of digit 3 in the number. # Convert the number to a string to iterate through each character num_str = str(number) # Use a generator expression to count occurrences of '3' return sum(1 for digit in num_str if digit == '3')"},{"question":"Create a function that takes a string \`input\` and a character \`c\` as arguments and returns the number of occurrences of the character \`c\` in the string \`input\`. The function should ignore case sensitivity (i.e., it should count both 'A' and 'a' as instances of the same character).","solution":"def count_occurrences(input_string, c): Returns the number of occurrences of character c in the string input_string, ignoring case. input_string = input_string.lower() c = c.lower() return input_string.count(c)"},{"question":"Create a function that takes in an array of integers and returns an array where each element is the sum of all the elements in the input array except the one at the current index.","solution":"def array_excluding_sum(nums): Returns a new list where each element is the sum of all the elements in the input list except the one at the current index. :param nums: List of integers :return: List of integers total_sum = sum(nums) # Calculate the sum of all elements in the list return [total_sum - num for num in nums] # Subtract each element from the total sum"},{"question":"Create a function that takes a string as input and returns a string where each character is repeated three times. For example, if the input is \\"hello\\", the output should be \\"hhheelllloo\\".","solution":"def repeat_characters(input_str): Returns a new string where each character of the input string is repeated three times. :param input_str: String to be processed. :return: New string with each character repeated three times. return ''.join([char * 3 for char in input_str])"},{"question":"Create a function that can list all the prime numbers up to a given number n in Python.","solution":"def list_primes(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that encrypts a string using a Caesar cipher. The function should take two parameters: the string to be encrypted and the shift value. The function should return the encrypted string. For example, if the input string is \\"hello\\" and the shift value is 2, the function should return \\"jgnnq\\".","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the input text using the Caesar cipher with the supplied shift value. Args: text (str): The string to be encrypted. shift (int): The number of positions to shift each character in the text. Returns: str: The encrypted string. encrypted_text = [] for char in text: if char.isalpha(): # Determine the ASCII offset for case (lowercase or uppercase) ascii_offset = ord('a') if char.islower() else ord('A') # Encrypt the character and wrap around using modulo operation encrypted_char = chr(((ord(char) - ascii_offset + shift) % 26) + ascii_offset) encrypted_text.append(encrypted_char) else: # If character is not alphabetic, keep it unchanged encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Create a function that checks if a binary search tree is balanced. The function should take a binary search tree as input and return True if the tree is balanced, False otherwise. A binary search tree is considered balanced if the height difference between its left and right subtrees is no more than 1 for all nodes.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Checks if a binary search tree is balanced. A binary search tree is considered balanced if the height difference between its left and right subtrees is no more than 1 for all nodes. :param root: TreeNode, the root of the binary search tree :return: bool, True if the binary search tree is balanced, False otherwise def check_height(node): if not node: return 0 left_height = check_height(node.left) right_height = check_height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1"},{"question":"Create a function that takes a vector of integers and returns a new vector where each element is squared.","solution":"def square_vector(vector): Returns a new vector where each element is squared. :param vector: List[int] - A list of integers. :return: List[int] - A new list with each element squared. return [x ** 2 for x in vector]"},{"question":"Create a function that takes a positive integer as input and returns a list of all factors of that number.","solution":"def factors(n): Returns a list of all factors of n. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") result = [] for i in range(1, n+1): if n % i == 0: result.append(i) return result"},{"question":"Create a function that takes in a string and returns the number of uppercase letters and the number of lowercase letters in the string.","solution":"def count_letter_cases(s): Returns the number of uppercase and lowercase letters in the string s. Parameters: s (str): The input string Returns: tuple: A tuple containing the count of uppercase letters and lowercase letters uppercase_count = 0 lowercase_count = 0 for char in s: if char.isupper(): uppercase_count += 1 elif char.islower(): lowercase_count += 1 return uppercase_count, lowercase_count"},{"question":"Create a function that takes a string and a list of patterns to find and replace with new strings within the original string. The function should return the modified string.","solution":"import re def find_and_replace(text, patterns): Find and replace substrings within a given text based on provided patterns. Args: text (str): Original string where replacements need to be made. patterns (list of tuples): Each tuple contains two elements, the first is the substring to find, the second is the substring to replace it with. Returns: str: Modified string with all replacements done. for old, new in patterns: text = re.sub(re.escape(old), new, text) return text"},{"question":"Create a function that converts a given string to itsronym using the NATO phonetic alphabet.","solution":"def to_nato_phonetic(string): Converts a given string to its acronym using the NATO phonetic alphabet. Parameters: - string: str, the input string to convert to NATO phonetic alphabet. Returns: - str: a string representing the input string's letters in NATO phonetic alphabet. nato_alphabet = { 'A': 'Alpha', 'B': 'Bravo', 'C': 'Charlie', 'D': 'Delta', 'E': 'Echo', 'F': 'Foxtrot', 'G': 'Golf', 'H': 'Hotel', 'I': 'India', 'J': 'Juliett', 'K': 'Kilo', 'L': 'Lima', 'M': 'Mike', 'N': 'November', 'O': 'Oscar', 'P': 'Papa', 'Q': 'Quebec', 'R': 'Romeo', 'S': 'Sierra', 'T': 'Tango', 'U': 'Uniform', 'V': 'Victor', 'W': 'Whiskey', 'X': 'X-ray', 'Y': 'Yankee', 'Z': 'Zulu' } result = [] for char in string.lower(): if char.isalpha(): result.append(nato_alphabet[char.upper()]) return ' '.join(result)"},{"question":"Create a function that takes an integer as an input and returns the sum of all the odd digits in that integer. If there are no odd digits, the function should return 0. For example, if the input is 2024, the function should return 0 because there are no odd digits, whereas if the input is 12345, the function should return 9 because 1 + 3 + 5 = 9.","solution":"def sum_of_odd_digits(n): Returns the sum of all the odd digits in the integer n. If there are no odd digits, returns 0. sum_odd = 0 for digit in str(abs(n)): if int(digit) % 2 != 0: sum_odd += int(digit) return sum_odd"},{"question":"Create a function that takes a list of integers as input and returns the maximum element in the list without using the built-in max() function. Additionally, the function should handle cases where the list is empty or contains non-integer values but should not raise any exceptions or errors in such cases. Instead, it should return a default value of None in these scenarios.","solution":"def find_max_element(numbers): Returns the maximum element in the list of integers without using the built-in max() function. If the list is empty or contains non-integer values, returns None. if not numbers or not all(isinstance(n, int) for n in numbers): return None max_element = numbers[0] for num in numbers[1:]: if num > max_element: max_element = num return max_element"},{"question":"Create a function that takes an integer and returns its binary representation as an array of integers.","solution":"def int_to_binary_array(n): Converts an integer to its binary representation as an array of integers. Parameters: n (int): The integer to convert to binary. Returns: list: A list of integers representing the binary form of the input integer. if n == 0: return [0] binary_representation = [] while n > 0: binary_representation.append(n % 2) n = n // 2 return binary_representation[::-1]"},{"question":"Create a function that takes an integer as input and returns a list of all the prime factors of the input number. The prime factors should be returned in ascending order and should not have any duplicates. For example, the prime factors of 20 are 2, 2, 5, but since duplicates should be removed, the result should be [2, 5].","solution":"def prime_factors(n): Returns a list of all prime factors of the input number n in ascending order and without duplicates. if n <= 1: return [] factors = set() divisor = 2 while n > 1: while n % divisor == 0: factors.add(divisor) n //= divisor divisor += 1 return sorted(factors)"},{"question":"Create a function that identifies whether a given string has been encoded in Base64 format.","solution":"import re import base64 def is_base64_encoded(data): Identifies whether a given string has been encoded in Base64 format. Args: data (str): The string to check. Returns: bool: True if the string is Base64 encoded, False otherwise. if isinstance(data, str): pattern = '^[A-Za-z0-9+/]+={0,2}' if not re.match(pattern, data): return False try: base64.b64decode(data, validate=True) return True except Exception: return False return False"},{"question":"Create a function that returns the square root of a given number using the Babylonian method (also known as Heron's method). The Babylonian method is an iterative algorithm for finding the square root of a number. It involves making a guess for the square root and then refining that guess by taking the average of the guess and the given number divided by the guess. This process is repeated until the guess is close enough to the actual square root.","solution":"def babylonian_sqrt(x, tolerance=1e-10): Returns the square root of a given number x using the Babylonian method. The computation will stop when the difference between successive guesses is less than the specified tolerance. Parameters: x (float): The number to find the square root of. tolerance (float): The acceptable difference between successive guesses. Returns: float: The square root of x. if x < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") if x == 0: return 0.0 guess = x / 2.0 while True: next_guess = (guess + x / guess) / 2.0 if abs(guess - next_guess) < tolerance: return next_guess guess = next_guess"},{"question":"Create a function that checks if a given number can be expressed as the sum of two squares. A number is considered to be the sum of two squares if there exist integers i and j such that i^2 + j^2 = number.","solution":"import math def sum_of_two_squares(n): Determines if a number can be expressed as the sum of two squares. :param n: Input number to check :return: True if it can be expressed as the sum of two squares, else False if n < 0: return False for i in range(int(math.isqrt(n)) + 1): j = n - i*i if math.isqrt(j)**2 == j: return True return False"},{"question":"Create a function that generates and prints out the Fibonacci sequence up to a given number n. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. The function should take one argument: n, which represents the maximum value of the sequence to generate.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to a given number n. Args: n (int): The maximum value up to which the Fibonacci sequence is generated. Returns: list: A list containing the Fibonacci sequence up to n. if n < 0: raise ValueError(\\"n must be a non-negative integer.\\") sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that will generate a Fibonacci sequence to the nth number. For example, the Fibonacci sequence up to the 6th number would be: 0, 1, 1, 2, 3, 5. Could you write a Python function to achieve this?","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to the nth number. Parameters: n (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Create a function that finds the maximum profit from a single buy and sell transaction. The function should take a list of integers representing daily stock prices and return the maximum profit that can be achieved by buying and then selling on different days. If no profit can be made, return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell transaction. If no profit can be made, returns 0. :param prices: List of integers representing daily stock prices :return: Integer representing the maximum profit if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Create a function that takes an integer as input and returns the number of binary digits (bits) in its binary representation, excluding any leading zeros. For instance, for the number 5, the binary representation is '101', which should return 3. Similarly, for the number 10, the binary representation is '1010', which should return 4.","solution":"def count_binary_digits(n): Returns the number of binary digits (bits) in the binary representation of the integer n, excluding leading zeros. if n == 0: return 1 return len(bin(n)) - 2"},{"question":"Create a function that takes two matrices as input and returns their product. The matrices are represented as 2D lists in Python. The function should be efficient and handle matrices of any size.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Parameters: A (list of list of int): First matrix with dimensions m x n B (list of list of int): Second matrix with dimensions n x p Returns: list of list of int: Result of matrix multiplication with dimensions m x p # Check if multiplication is possible if len(A[0]) != len(B): raise ValueError(\\"Number of columns in A must be equal to number of rows in B\\") # Initialize result matrix with zeros result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] # Perform matrix multiplication for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Create a function that checks if a given string begins with a specific word and ends with another specific word.","solution":"def check_string(s, start_word, end_word): Returns True if string s starts with start_word and ends with end_word, otherwise returns False. return s.startswith(start_word) and s.endswith(end_word)"},{"question":"Create a function that converts an uppercase string to lowercase.","solution":"def to_lowercase(text): Converts an uppercase string to lowercase. return text.lower()"},{"question":"Create a function that takes two parameters, an array and a target number, and performs a linear search to find the target number in the array. If the target number is found, return its index. If the target number is not found, return -1.","solution":"def linear_search(arr, target): Performs a linear search to find the target in the array. Parameters: arr (list): The list to search within. target: The value to search for. Returns: int: The index of the target if found, else -1. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Create a function that takes an array of strings and an integer \`k\`. The function should reverse the order of the elements in the array that are at indices divisible by \`k\`. How should the function handle cases where \`k\` is zero or negative?","solution":"def reverse_at_k_indices(arr, k): Reverses the order of the elements in the array that are at indices divisible by k. If k is zero or negative, the function returns the original array. :param arr: List of strings :param k: Integer divisor :return: Modified list with elements reversed at indices divisible by k if k <= 0: return arr # Find indices that are divisible by k divisible_indices = [i for i in range(len(arr)) if i % k == 0] # Reverse the elements at those indices for i in range(len(divisible_indices) // 2): left = divisible_indices[i] right = divisible_indices[-(i + 1)] arr[left], arr[right] = arr[right], arr[left] return arr"},{"question":"Create a function that takes a list of integers and generates a new list where each element is the square root of the original element. If the original element is negative, its square root should be computed in the complex number system. The new list should also be sorted in ascending order. If the list contains non-integer values, the function should raise a ValueError.","solution":"import math import cmath def square_root_sort(lst): Takes a list of integers and generates a new list where each element is the square root of the original element. If the original element is negative, its square root should be computed in the complex number system. The new list should also be sorted in ascending order. If the list contains non-integer values, the function raises ValueError. if not all(isinstance(x, int) for x in lst): raise ValueError(\\"List must contain only integers\\") sqrt_list = [] for x in lst: if x >= 0: sqrt_list.append(math.sqrt(x)) else: sqrt_list.append(cmath.sqrt(x)) # Convert complex numbers to a sorted order which will first list real numbers followed by complex numbers sorted_list = sorted(sqrt_list, key=lambda x: (x.real, x.imag)) return sorted_list"},{"question":"Create a function that takes a list of unique integers and returns the integer that appears an odd number of times in the list. If there is no such integer, the function should return -1. For example, given the list \`[1, 2, 3, 2, 3, 1, 3]\`, the function should return \`3\` since \`3\` appears three times, which is an odd number.","solution":"def find_odd_occurrence(nums): Returns the integer that appears an odd number of times in the provided list of unique integers. If no such integer exists, the function returns -1. # Dictionary to count occurrences of each number count_dict = {} for num in nums: count_dict[num] = count_dict.get(num, 0) + 1 # Find the number with an odd count for key, value in count_dict.items(): if value % 2 != 0: return key return -1"},{"question":"Create a function that represents the identity function, which takes a single argument and returns that argument unchanged. For instance, the identity function of 5 should return 5.","solution":"def identity(x): Returns the argument x unchanged. return x"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the product of the corresponding elements in the input list and the next element. If there is no next element (i.e., the current element is the last one in the list), the function should return 0 for that position. For example, if the input list is [1, 2, 3, 4], the output should be [2, 6, 12, 0].","solution":"def product_with_next(lst): Returns a new list where each element is the product of the corresponding elements in the input list and the next element. If there is no next element, the function returns 0 for that position. if not lst: return [] result = [lst[i] * lst[i + 1] for i in range(len(lst) - 1)] result.append(0) return result"},{"question":"Create a function that converts a sentence to a list of words. The function should handle punctuation and ensure that the list does not contain any empty strings.","solution":"import re def sentence_to_words(sentence): Converts a sentence to a list of words, removing punctuation and ensuring no empty strings. # Use regular expression to replace any non-word character (excluding apostrophes) with a space cleaned_sentence = re.sub(r\\"[^w']+\\", \\" \\", sentence) # Split the cleaned sentence by spaces and strip each word to avoid any accidental leading/trailing spaces words = [word.strip() for word in cleaned_sentence.split()] # Filter out any empty strings if present words = [word for word in words if word] return words"},{"question":"Create a function that expects a list of numbers and returns the sum of all the numbers. Make sure you also include error handling for cases where the list contains non-numeric values.","solution":"def sum_of_numbers(numbers): Returns the sum of all the numbers in the input list. Raises a ValueError if the list contains non-numeric values. total = 0 for num in numbers: if not isinstance(num, (int, float)): raise ValueError(f\\"Non-numeric value {num} found in list\\") total += num return total"},{"question":"Create a function that takes a string and prints all possible combinations of the characters within the string in ascending order of their length.","solution":"from itertools import combinations def print_combinations(s): Prints all possible combinations of the characters within the string in ascending order of their length. sorted_s = ''.join(sorted(s)) result = [] for r in range(1, len(sorted_s) + 1): for combo in combinations(sorted_s, r): result.append(''.join(combo)) return result"},{"question":"Create a function that writes a given string to a file.","solution":"def write_string_to_file(file_path, string_content): Writes the given string to a file specified by file_path. Args: file_path (str): The path to the file where the string should be written. string_content (str): The string content to write to the file. with open(file_path, 'w') as file: file.write(string_content)"},{"question":"Create a function that returns the sum of the first n natural numbers in Python. The function should take one integer n as input and return the sum of the first n natural numbers.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number of terms to sum. Returns: int: The sum of the first n natural numbers. return n * (n + 1) // 2"},{"question":"Create a function that takes three arguments, \`a\`, \`b\`, and \`c\`. The function should return the sum of \`a\` and the square of \`b\`, if \`a\` is less than \`c\`. Otherwise, it should return the square of \`a\` plus \`b\`.","solution":"def custom_calculation(a, b, c): Returns the sum of 'a' and the square of 'b' if 'a' is less than 'c'. Otherwise, returns the square of 'a' plus 'b'. if a < c: return a + (b * b) else: return (a * a) + b"},{"question":"Create a function that takes in three parameters: \`name\` (a string), \`age\` (an integer), and \`returnType\` (a string). The function should return a string based on the \`returnType\` parameter. If \`returnType\` is \`\\"fullInfo\\"\`, the function should return a string in the following format: \`\\"{name} is {age} years old.\\" If \`returnType\` is \`\\"shortInfo\\"\`, the function should return a string in the following format: \`\\"{name} is {age}y.\\"\` If \`returnType\` is neither \`\\"fullInfo\\"\` nor \`\\"shortInfo\\"\`, the function should return \`\\"Invalid input\\"\`.","solution":"def get_info(name, age, returnType): Returns information about a person based on the returnType parameter. :param name: The name of the person. :param age: The age of the person. :param returnType: The type of information to return (\\"fullInfo\\" or \\"shortInfo\\"). :return: A string with the requested information or \\"Invalid input\\" if returnType is invalid. if returnType == \\"fullInfo\\": return f\\"{name} is {age} years old.\\" elif returnType == \\"shortInfo\\": return f\\"{name} is {age}y.\\" else: return \\"Invalid input\\""},{"question":"Create a function that , given an array of queries, returns the result of performing these queries on an initially empty array. Each query is a tuple (type, index, value). The type can be \\"insert\\" or \\"delete\\". If the type is \\"insert\\", the function should insert the value at the given index. If the type is \\"delete\\", the function should remove the value at the given index if it exists.","solution":"def perform_queries(queries): Perform a series of insert and delete operations on an initially empty list. :param queries: List of tuples where each tuple contains: - type (str): Either \\"insert\\" or \\"delete\\" - index (int): Position for the operation - value (int): Value to be inserted (only if type is \\"insert\\") :return: The final list after performing all the queries result = [] for query in queries: query_type, index, value = query if query_type == \\"insert\\": result.insert(index, value) elif query_type == \\"delete\\": # Only attempt to delete if the index is within the current list bounds if 0 <= index < len(result): result.pop(index) return result"},{"question":"Create a function that takes a numeric value and returns the sum of all positive divisors of that number. A divisor of a number is defined as a number that divides it evenly (without leaving a remainder). For example, for the number 28, the positive divisors are 1, 2, 4, 7, 14, and 28, so the function should return 56.","solution":"def sum_of_divisors(n): Returns the sum of all positive divisors of the number n. if n <= 0: return 0 divisors_sum = 0 for i in range(1, n + 1): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that takes an array of integers (\`nums\`) and an integer \`target\`. The function should return an array of indices of all elements in \`nums\` that add up to \`target\`. If no such pair exists, return an empty array.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to target. Parameters: nums (list): List of integers. target (int): Target sum. Returns: list: List of indices of the elements which add up to the target. indices = [] num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: indices.extend([num_to_index[complement], i]) num_to_index[num] = i return indices"},{"question":"Create a function that takes a string \`s\` as input and returns the longest palindromic substring within \`s\`. A palindromic substring reads the same backward as forward. If there are multiple longest palindromic substrings, return the one that appears first.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. :param s: Input string :type s: str :return: The longest palindromic substring :rtype: str if not s: return \\"\\" n = len(s) start, max_length = 0, 1 def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): left1, right1 = expand_around_center(i, i) left2, right2 = expand_around_center(i, i + 1) if right1 - left1 + 1 > max_length: start, max_length = left1, right1 - left1 + 1 if right2 - left2 + 1 > max_length: start, max_length = left2, right2 - left2 + 1 return s[start:start + max_length]"},{"question":"Create a function that takes an array of integers as input and returns the array with the integers sorted in ascending order using the quicksort algorithm. The function should include an additional functionality to count the number of comparisons made during the sorting process. The quicksort function should also handle duplicates.","solution":"def quicksort(arr): Quicksort algorithm that sorts an array in ascending order and counts the number of comparisons made. Returns the sorted array and the comparison count. comparison_count = 0 def _quicksort(items): nonlocal comparison_count if len(items) <= 1: return items pivot = items[len(items) // 2] left = [] middle = [] right = [] for x in items: comparison_count += 1 if x < pivot: left.append(x) elif x == pivot: middle.append(x) else: right.append(x) return _quicksort(left) + middle + _quicksort(right) sorted_array = _quicksort(arr) return sorted_array, comparison_count"},{"question":"Create a function that takes a string and prints the reversed string. How would you approach this in Python?","solution":"def reverse_string(input_string): Returns the reversed string of input_string. return input_string[::-1]"},{"question":"Create a function that calculates the factorial of a given number using recursion in Python. The function should be named differently from the provided code snippet and should be designed to handle numbers from 0 to 20. Additionally, ensure the function has proper error handling for invalid inputs, such as negative numbers or non-integer values.","solution":"def recursive_factorial(n): Returns the factorial of a given number using recursion. Validates that the number is a non-negative integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * recursive_factorial(n - 1)"},{"question":"Create a function that takes a list of numbers and returns the sum of the squares of the smallest and largest numbers in the list.","solution":"def sum_of_squares_of_extremes(numbers): Returns the sum of the squares of the smallest and largest numbers in the list. :param numbers: List of integers :return: Sum of the squares of the smallest and largest numbers if not numbers: raise ValueError(\\"The list should not be empty\\") smallest = min(numbers) largest = max(numbers) return smallest**2 + largest**2"},{"question":"Create a function that takes the number of days and returns the number of days after a certain day of the year (month and day).","solution":"from datetime import datetime, timedelta def add_days(month, day, num_days): Returns the new month and day after adding the given number of days to the specified month and day. Parameters: month (int): The month (1-12). day (int): The day (1-31). num_days (int): The number of days to add. Returns: tuple: A tuple containing the new month and day as integers. initial_date = datetime(year=2023, month=month, day=day) new_date = initial_date + timedelta(days=num_days) return new_date.month, new_date.day"},{"question":"Create a function that takes in a list and returns a new list with all the elements sorted in ascending order.","solution":"def sort_list(lst): Takes a list and returns a new list with all the elements sorted in ascending order. Args: lst (list): The list to be sorted. Returns: list: A new list with elements sorted in ascending order. return sorted(lst)"},{"question":"Create a function that returns the sum of all the positive integers in the given list. The function should handle nested lists and ignore non-integer elements.","solution":"def sum_positive_integers(lst): Returns the sum of all the positive integers in the given list. The function will handle nested lists and ignore non-integer elements. def recurse_sum(nums): total = 0 for item in nums: if isinstance(item, int) and item > 0: total += item elif isinstance(item, list): total += recurse_sum(item) return total return recurse_sum(lst)"},{"question":"Create a function that takes two integers as arguments and returns the sum of them. If the sum is even, return the sum plus 10, and if the sum is odd, return the sum plus 5.","solution":"def custom_add(a, b): Returns the sum of a and b. If the sum is even, return the sum plus 10. If the sum is odd, return the sum plus 5. total_sum = a + b if total_sum % 2 == 0: return total_sum + 10 else: return total_sum + 5"},{"question":"Create a function that takes an incoming request object that is part of a web application, extracts the content type from it, and returns it.","solution":"def get_content_type(request): Extracts and returns the content type from the request object. Parameters: request (object): The incoming request object which should have a 'headers' attribute with 'Content-Type'. Returns: str: The content type of the request. return request.headers.get('Content-Type')"},{"question":"Create a function that returns the sum of the values of the keys in a dictionary. If the dictionary is empty, the function should return 0.","solution":"def sum_dict_values(d): Returns the sum of the values of the keys in a dictionary. If the dictionary is empty, returns 0. if not d: return 0 return sum(d.values())"},{"question":"Create a function that takes in the dimensions of a matrix and returns a new matrix with each element multiplied by the cell index using a NumPy-based solution.","solution":"import numpy as np def create_index_multiplied_matrix(rows, cols): Create a matrix of given dimensions (rows x cols) where each element is multiplied by its row and column indices. The element at position (i, j) should be i * j. Parameters: rows (int): The number of rows in the matrix. cols (int): The number of columns in the matrix. Returns: np.array: The matrix where each element is multiplied by its indices. matrix = np.fromfunction(lambda i, j: i * j, (rows, cols), dtype=int) return matrix"},{"question":"Create a function that takes a list of integers as an input and returns the maximum element in the list. If the list is empty, return \`None\`. Use Python for the solution.","solution":"def find_maximum(numbers): Returns the maximum element in the list of integers. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Create a function that converts a given string to a URL-encoded format using Python. URL encoding is a process of replacing special characters in a string with escape sequences so that the string can be safely transmitted over the internet.","solution":"import urllib.parse def url_encode(input_string): Converts a given string to a URL-encoded format. Parameters: input_string (str): The string to be URL-encoded. Returns: str: The URL-encoded string. return urllib.parse.quote(input_string)"},{"question":"Create a function that will take an array of numbers, and for each number, it will return the sum of the numbers to its left and the numbers to its right. Note that the sum for the first and last elements should include only one side (left and right respectively). If the array is empty, return an empty array.","solution":"def sum_neighbors(arr): Returns a list where each element is the sum of its neighbors in the input list. For the first and last elements, it returns only the sum of one neighboring element. if not arr: return [] if len(arr) == 1: return [0] result = [] for i in range(len(arr)): if i == 0: result.append(arr[i+1]) elif i == len(arr) - 1: result.append(arr[i-1]) else: result.append(arr[i-1] + arr[i+1]) return result"},{"question":"Create a function that finds the odd index elements in a list and calculates the sum of these elements.","solution":"def sum_odd_index_elements(lst): Returns the sum of elements at odd indices in the given list. return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)"},{"question":"Create a function that takes two strings as input and returns their concatenation. If either of the strings is empty or null, the function should return an empty string instead of throwing an exception.","solution":"def concatenate_strings(str1, str2): Takes two strings and returns their concatenation. If either string is empty or null, returns an empty string. if not str1 or not str2: return \\"\\" return str1 + str2"},{"question":"Create a function that takes a string of text and returns a new string with the characters at even indices removed.","solution":"def remove_even_indices(text): Returns a new string with characters at even indices removed. return ''.join([char for i, char in enumerate(text) if i % 2 != 0])"},{"question":"Create a function that calculates the area of a circle given the radius. The function should also handle cases where the radius is not a valid number and raise a ValueError with an appropriate message. If the radius is less than or equal to zero, raise a ValueError. Use Python.","solution":"import math def area_of_circle(radius): Calculates the area of a circle given its radius. If the radius is not a valid number or less than or equal to zero, raises a ValueError. if not isinstance(radius, (int, float)): raise ValueError(\\"The radius must be a number.\\") if radius <= 0: raise ValueError(\\"The radius must be greater than zero.\\") return math.pi * radius ** 2"},{"question":"Create a function that takes an array of integers as input and returns the length of the longest continuous subarray that contains only odd numbers.","solution":"def longest_odd_subarray(arr): Returns the length of the longest continuous subarray that contains only odd numbers. max_len = 0 current_len = 0 for num in arr: if num % 2 != 0: # if the number is odd current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"Create a function that returns the sum of all numbers from 1 to n, but only includes numbers that are divisible by either 3 or 5. For example, for n=10 the function should return 33 (which is the sum of 3, 5, 6, and 9).","solution":"def sum_divisible_by_3_or_5(n): Returns the sum of all numbers from 1 to n that are divisible by either 3 or 5. return sum(x for x in range(1, n+1) if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that takes two strings, finds their longest common substring, and returns the length of the common substring.","solution":"def longest_common_substring_length(s1, s2): Returns the length of the longest common substring between s1 and s2. len_s1 = len(s1) len_s2 = len(s2) # Initialize a 2D array to store lengths of longest common suffixes. dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] longest_length = 0 for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 longest_length = max(longest_length, dp[i][j]) else: dp[i][j] = 0 return longest_length"},{"question":"Create a function that checks the size of the largest binary gap in a non-negative integer. The binary gap is the longest sequence of consecutive zeros that is surrounded by ones at both ends.","solution":"def largest_binary_gap(n): Returns the size of the largest binary gap in a non-negative integer. Parameters: n (int): non-negative integer input Returns: int: size of the largest binary gap # Convert the integer to its binary representation (excluding the '0b' prefix) binary_representation = bin(n)[2:] # Split the binary representation by '1' to find sequences of zeros surrounded by ones gaps = binary_representation.strip('0').split('1') # The size of the largest binary gap max_gap = 0 for gap in gaps: # The length of each zero sequence is a candidate for the largest gap max_gap = max(max_gap, len(gap)) return max_gap"},{"question":"Create a function that generates all possible subsets of a given set. The subsets should cover all possible combinations of elements from the set, including the empty set and the set itself.","solution":"from typing import List def subsets(s: List[int]) -> List[List[int]]: Returns all possible subsets of the given set s. result = [] def backtrack(start, path): result.append(path) for i in range(start, len(s)): backtrack(i + 1, path + [s[i]]) backtrack(0, []) return result"},{"question":"Create a function that takes an integer array \`nums\` of length \`n\` and returns an array \`output\` of length \`n\` where \`output[i]\` is the product of all elements in \`nums\` except \`nums[i]\` itself without using division.","solution":"def product_except_self(nums): Returns an array output where output[i] is the product of all the elements of nums except nums[i]. n = len(nums) output = [1] * n left = 1 for i in range(n): output[i] = left left *= nums[i] right = 1 for i in range(n-1, -1, -1): output[i] *= right right *= nums[i] return output"},{"question":"Create a function that checks if a string contains only numeric characters.","solution":"def is_numeric(s): Checks if the string s contains only numeric characters. :param s: string to check :return: True if the string contains only numeric characters, False otherwise return s.isdigit()"},{"question":"Create a function that takes two lists of numbers as input, \`list1\` and \`list2\`, and returns a list with elements that are common to both \`list1\` and \`list2\`. However, the resulting list should not contain any duplicate elements. Additionally, sort the final list in descending order.","solution":"def find_common_elements(list1, list2): Returns a list of unique elements that are common to both list1 and list2, sorted in descending order. # Convert lists to sets to find common elements common_elements = set(list1).intersection(set(list2)) # Convert the set back to list and sort in descending order result = sorted(list(common_elements), reverse=True) return result"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should take an integer as an input and return the factorial of that integer. Make sure to handle the base case and ensure that the function works correctly for all non-negative integers. Also, provide examples on how to call the function and interpret the results.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1) # Examples of how to call the function and interpret the results: # factorial(5) should return 120 because 5! = 5 * 4 * 3 * 2 * 1 = 120 # factorial(0) should return 1 because 0! = 1 by definition # factorial(3) should return 6 because 3! = 3 * 2 * 1 = 6"},{"question":"Create a function that generates a pyramid of numbers.","solution":"def generate_pyramid(n): Generates a pyramid of numbers with n levels. Each level i (1-based) contains numbers from 1 to i. Parameters: n (int): number of levels in the pyramid. Returns: List[str]: A list of strings, each string representing a level of the pyramid. pyramid = [] for i in range(1, n + 1): level = ' '.join(str(x) for x in range(1, i + 1)) pyramid.append(level) return pyramid"},{"question":"Create a function that takes in an integer as an argument and returns a string that reads the number forward and backward.","solution":"def read_number_forward_backward(n): Returns a string that reads the number forward and backward. str_num = str(n) return str_num + str_num[::-1]"},{"question":"Create a function that , when given an array of integers, returns the sum of all odd numbers in the array that are located at even indices.","solution":"def sum_odd_numbers_at_even_indices(arr): Returns the sum of all odd numbers in the array that are located at even indices. Parameters: arr (list of int): List of integers Returns: int: Sum of odd numbers at even indices return sum(num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 != 0)"},{"question":"Create a function that removes all occurrences of a specified character from a string.","solution":"def remove_char(s, char_to_remove): Removes all occurrences of char_to_remove from the string s. Parameters: s (str): The input string. char_to_remove (str): The character to remove from the string. Returns: str: The string with all occurrences of char_to_remove removed. return s.replace(char_to_remove, '')"},{"question":"Create a function that takes two lists as input and returns a new list that contains the common elements between the two lists. There should be no duplicates in the result.","solution":"def common_elements(list1, list2): Returns a list of unique common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that calculates the sum of all numbers in a given list that are greater than a specified threshold. The function should take two parameters: a list of integers and a threshold integer. The function should return the sum of all numbers in the list that are greater than the threshold.","solution":"def sum_above_threshold(numbers, threshold): Returns the sum of all numbers in the list that are greater than the given threshold. Parameters: numbers (list of int): List of integers to check. threshold (int): The threshold value. Returns: int: Sum of all numbers greater than the threshold. return sum(number for number in numbers if number > threshold)"},{"question":"Create a function that accepts two parameters: a list of names and a number. The function should return a list of lists, where each sublist contains all the names with more than that specified number of characters.","solution":"def filter_names_by_length(names, length): Returns a sublist of names where each name has more than the specified number of characters. Parameters: names (list): List of names. length (int): Number of characters to filter names by. Returns: list: List of names longer than the specified length. return [name for name in names if len(name) > length]"},{"question":"Create a function that takes an array of integers and checks if any two numbers in the array add up to a target number. Return \\"yes\\" if such a pair exists and \\"no\\" if it doesn't.","solution":"def check_pair_sum(arr, target): Returns \\"yes\\" if there are any two numbers in the array that add up to the target. Otherwise, returns \\"no\\". seen = set() for num in arr: if target - num in seen: return \\"yes\\" seen.add(num) return \\"no\\""},{"question":"Create a function that takes in an integer array \`arr\` and an integer \`k\`. The function should calculate and return the sum of all numbers in the array that are strictly greater than the \`k\`-th largest element in the array.","solution":"def sum_of_elements_greater_than_k(arr, k): Returns the sum of all elements in the array that are strictly greater than the k-th largest element. if k < 1 or k > len(arr): raise ValueError(\\"k must be between 1 and the length of the array\\") sorted_arr = sorted(arr, reverse=True) kth_largest = sorted_arr[k-1] return sum(x for x in arr if x > kth_largest)"},{"question":"Create a function that takes an integer n as input and returns a list of length n, where each element is the square of the index (0-based).","solution":"def list_of_squares(n): Returns a list of length n, where each element is the square of the index. return [i ** 2 for i in range(n)]"},{"question":"Create a function that reverses the words in a given string. The input string can contain one or more words, separated by spaces. Each word can then be up to 100 characters in length. The function should return a new string with the words reversed in their original order, but each word itself reversed.","solution":"def reverse_words_in_string(s): Reverses the words in the given string. Each word is reversed but the order of words remains the same. :param s: A string containing one or more words separated by spaces. :return: A new string with words in their original order but each word reversed. words = s.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that will take two integers, a and b, and return True if a is greater than b, and False otherwise. If either a or b is not an integer, the function should return None.","solution":"def compare_integers(a, b): Returns True if a is greater than b, False if a is less than or equal to b, and None if either a or b is not an integer. if not isinstance(a, int) or not isinstance(b, int): return None return a > b"},{"question":"Create a function that checks if a string contains any special characters. The function should take a single string parameter and return \`true\` if it contains a special character, and \`false\` otherwise. A special character is defined as any character that is not a letter (either uppercase or lowercase) or a digit.","solution":"import re def contains_special_characters(s): Checks if the given string contains any special characters. A special character is any character that is not a letter or a digit. Parameters: s (str): The input string. Returns: bool: True if the string contains any special characters, False otherwise. # pattern that matches any character that is not a letter or digit pattern = re.compile(r'[^a-zA-Z0-9]') return bool(pattern.search(s))"},{"question":"Create a function that takes an array of numbers and an integer k. The function should calculate the sum of all numbers in the array that are greater than k but less than 10*k.","solution":"def sum_in_range(arr, k): Returns the sum of all numbers in the array that are greater than k but less than 10*k. return sum(x for x in arr if k < x < 10 * k)"},{"question":"Create a function that takes two parameters, a string and an integer, and returns the string repeated 'n' times. For example, if the string is \\"hello\\" and the integer is 3, the function should return \\"hellohellohello\\".","solution":"def repeat_string(s, n): Returns the string 's' repeated 'n' times. return s * n"},{"question":"Create a function that accepts a string as an argument and returns the string with all consonants removed. The function should handle both uppercase and lowercase letters.","solution":"def remove_consonants(s): Returns the string \`s\` with all consonants removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char in vowels or not char.isalpha()])"},{"question":"Create a function that takes an array of integers and returns an array where each element is the maximum value found so far in the input array. For example, if the input array is [3, 1, 4, 1, 5, 9], the output should be [3, 3, 4, 4, 5, 9] because 3 is the first max, then as 4 comes it replaces 3 to become new max, so the next max is 4 and so on.","solution":"def running_max(arr): Returns an array where each element is the maximum value found so far in the input array. if not arr: return [] max_so_far = arr[0] result = [max_so_far] for num in arr[1:]: if num > max_so_far: max_so_far = num result.append(max_so_far) return result"},{"question":"Create a function that takes two parameters, \`a\` and \`b\`, and returns their product.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that takes three integer inputs: x, y, and z. The function should return the value of x raised to the power of y, modulo z.","solution":"def power_mod(x, y, z): Returns the value of x raised to the power of y, modulo z. return pow(x, y, z)"},{"question":"Create a function that takes a string and returns the first word in the string that starts with either 'a' or 'A'. If no such word is found, the function should return an empty string.","solution":"def find_first_word_starting_with_a_or_A(s): Returns the first word in the string that starts with either 'a' or 'A'. If no such word is found, returns an empty string. words = s.split() for word in words: if word.lower().startswith('a'): return word return \\"\\""},{"question":"Create a function that will check for palindromic phrases, ignoring punctuation, spaces, and capitalization. Write a Python function to do the same. A palindrome is a phrase that reads the same backward as forward.","solution":"def is_palindrome(phrase): Returns True if the given phrase is a palindrome, ignoring punctuation, spaces, and capitalization. Otherwise, returns False. import re # Remove non-alphanumeric characters and convert to lowercase cleaned_phrase = re.sub(r'[^a-zA-Z0-9]', '', phrase).lower() # Check if the cleaned phrase is equal to its reverse return cleaned_phrase == cleaned_phrase[::-1]"},{"question":"Create a function that takes an array of integers, then returns an array of the same length where the elements are replaced by their corresponding indices in the original array. For example, if the input array is \`[3, 1, 4, 1, 5]\`, the output should be \`[2, 1, 3, 1, 4]\` because 3 is at index 2, 1 is at index 1, 4 is at index 3, and so on.","solution":"def replace_with_indices(arr): Takes an array of integers and returns an array of the same length where the elements are replaced by their corresponding indices in the original array. if not arr: return [] result = [] for num in arr: result.append(arr.index(num)) return result"},{"question":"Create a function that takes three integers as input and returns the largest odd number out of the three. If there is no odd number, it should return None.","solution":"def largest_odd(a, b, c): Returns the largest odd number among the three integers a, b, and c. If there is no odd number, returns None. odd_numbers = [x for x in [a, b, c] if x % 2 != 0] return max(odd_numbers, default=None)"},{"question":"Create a function that takes two strings as input and returns the longest common subsequence (LCS) between them. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. The function should handle both cases where the strings are case-sensitive and case-insensitive.","solution":"def longest_common_subsequence(str1, str2, case_sensitive=True): if not case_sensitive: str1 = str1.lower() str2 = str2.lower() m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): if str1[i] == str2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) lcs = [] x, y = m, n while x > 0 and y > 0: if dp[x][y] == dp[x - 1][y]: x -= 1 elif dp[x][y] == dp[x][y - 1]: y -= 1 else: lcs.append(str1[x - 1]) x -= 1 y -= 1 return ''.join(reversed(lcs))"},{"question":"Create a function that takes a string as input and returns the string in reverse order, but only if the string is a palindrome. If the string is not a palindrome, return the string as is.","solution":"def reverse_if_palindrome(s): Returns the string s reversed if s is a palindrome. Otherwise, returns the string s as is. if s == s[::-1]: return s[::-1] return s"},{"question":"Create a function that takes an array of integers, and returns the most frequently occurring number. If there is a tie, return the smallest number among the tied numbers.","solution":"from collections import Counter def most_frequent(numbers): Returns the most frequently occurring number in the list of integers. If there is a tie, returns the smallest number among the tied numbers. if not numbers: return None count = Counter(numbers) max_occurrence = max(count.values()) most_frequent_numbers = [num for num, freq in count.items() if freq == max_occurrence] return min(most_frequent_numbers)"},{"question":"Create a function that takes a list of numbers as an argument and returns the sum of all positive numbers in that list. The function should handle a list with a large number of elements efficiently.","solution":"def sum_positive_numbers(numbers): Returns the sum of all positive numbers in the given list. Args: numbers (list): A list of numbers Returns: int: The sum of all positive numbers return sum(num for num in numbers if num > 0)"},{"question":"Create a function that takes a parameter \`n\` and returns \`n!\` (the factorial of \`n\`) using a loop. The function should handle cases where \`n\` is less than 0, returning an appropriate error message, and where \`n\` is 0 or 1, returning 1. Also, the function should ensure the result is returned as an integer.","solution":"def factorial(n): Returns the factorial of n using a loop. Parameters: n (int): The number to find the factorial of. Must be a non-negative integer. Returns: int: The factorial of n, or a string with an error message if n is negative. if n < 0: return \\"Error: n must be a non-negative integer.\\" elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a vector of strings and returns a new vector with the strings in reverse order.","solution":"def reverse_strings(strings): Returns a new list with the strings in reverse order. :param strings: List[str] - a list of strings :return: List[str] - a list of strings in reverse order return strings[::-1]"},{"question":"Create a function that takes a list of integers and returns the list sorted in descending order. The function should be called \`desc_sort\`.","solution":"def desc_sort(lst): Returns the list of integers sorted in descending order. :param lst: List of integers to be sorted :return: List of integers sorted in descending order return sorted(lst, reverse=True)"},{"question":"Create a function that accepts two arrays of numbers as inputs and returns an array containing the common elements found in both arrays.","solution":"def common_elements(arr1, arr2): Returns a list containing the common elements found in both arrays. return list(set(arr1) & set(arr2))"},{"question":"Create a function that takes in a list of words and returns a sorted list based on their length in ascending order.","solution":"def sort_words_by_length(words): Returns a list of words sorted based on their length in ascending order. Parameters: words (list): List of words to be sorted. Returns: list: List of words sorted by length. return sorted(words, key=len)"},{"question":"Create a function that accepts two integers, a and b, and returns the sum of the squares of each of the two numbers.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. return a**2 + b**2"},{"question":"Create a function that finds the nth Fibonacci number in Python. The function should take an integer n as input and return the nth Fibonacci number. The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0 and 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Create a function that takes a string of numbers separated by commas, converts them into integers, and returns a list of these integers. For instance, if the input is \\"1,2,3,4,5,6\\", the output should be [1, 2, 3, 4, 5, 6].","solution":"def string_to_int_list(s): Converts a string of numbers separated by commas into a list of integers. Parameters: - s: A string of numbers separated by commas (e.g., \\"1,2,3,4,5\\") Returns: - A list of integers (e.g., [1, 2, 3, 4, 5]) return [int(num) for num in s.split(',')]"},{"question":"Create a function that periodically checks the weather at a given location using an API and updates the UI accordingly. The user should be able to specify the location (city, country) and the frequency of updates. For simplicity, let's just print out the weather information to the console.","solution":"import requests import time def get_weather(api_key, city, country): url = f'http://api.openweathermap.org/data/2.5/weather?q={city},{country}&appid={api_key}' response = requests.get(url) data = response.json() if response.status_code == 200: weather = data['weather'][0]['description'] temp = data['main']['temp'] - 273.15 # Convert Kelvin to Celsius print(f\\"Weather in {city}, {country}: {weather}, Temperature: {temp:.2f}°C\\") else: print(f\\"Error fetching weather data: {data['message']}\\") def start_weather_updates(api_key, city, country, frequency): while True: get_weather(api_key, city, country) time.sleep(frequency)"},{"question":"Create a function that takes a list of integers and returns the maximum product of two elements after adding 1 to each element in the list. The function should be efficient and handle large lists of integers.","solution":"def max_product_after_increment(nums): Returns the maximum product of two elements in the list after adding 1 to each element. if len(nums) < 2: raise ValueError(\\"List must contain at least two elements\\") # After adding 1 to each element, find the two largest elements nums = sorted(nums, reverse=True) largest = nums[0] second_largest = nums[1] # Calculate the maximum product of (largest + 1) and (second_largest + 1) max_product = (largest + 1) * (second_largest + 1) return max_product"},{"question":"Create a function that will encode a string using a Caesar cipher with a shift of 3. In a Caesar cipher, each letter in the plaintext is shifted a certain number of places down or up the alphabet. In this case, shift all letters 3 places down. If a letter is shifted past 'z', wrap around to the beginning of the alphabet, so 'x', 'y', and 'z' become 'a', 'b', and 'c' respectively. Additionally, try to make it case-sensitive, so 'A' should become 'D' and 'Z' should become 'C'.","solution":"def caesar_cipher_encode(text, shift=3): Encodes the given text using a Caesar cipher with a shift of 3. Args: text (str): The text to be encoded. shift (int): The number of positions to shift each letter (default is 3). Returns: str: The encoded text. encoded_text = [] for char in text: if char.isalpha(): start = ord('A') if char.isupper() else ord('a') new_char = chr(start + (ord(char) - start + shift) % 26) encoded_text.append(new_char) else: encoded_text.append(char) return ''.join(encoded_text)"},{"question":"Create a function that takes an array of numbers and sums them up.","solution":"def sum_array(numbers): Returns the sum of an array of numbers. Parameters: numbers (list): A list of numbers. Returns: int/float: The sum of the numbers in the array. return sum(numbers)"},{"question":"Create a function that calculates the sum of two numbers, but instead of returning the result directly, it should return the result in a string format. Additionally, ensure that the function can handle negative numbers and floating-point numbers.","solution":"def sum_to_string(a, b): Returns the sum of a and b as a string. return str(a + b)"},{"question":"Create a function that takes multiple lists as input and returns the length of the longest common sublist between them.","solution":"def longest_common_sublist(*lists): Returns the length of the longest common sublist between the given lists. if not lists: return 0 # Function to find common sublist between two lists def common_sublists(l1, l2): max_len = 0 dp = [[0] * (len(l2) + 1) for _ in range(len(l1) + 1)] for i in range(1, len(l1) + 1): for j in range(1, len(l2) + 1): if l1[i-1] == l2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 max_len = max(max_len, dp[i][j]) return max_len longest_len = float('inf') for i in range(len(lists)): for j in range(i+1, len(lists)): longest_len = min(longest_len, common_sublists(lists[i], lists[j])) return longest_len if longest_len != float('inf') else 0"},{"question":"Create a function that takes a list of numbers as input and returns the sum of all the numbers in the list. Additionally, the function should handle cases where the list might be empty or contain non-numeric elements gracefully.","solution":"def sum_of_numbers(numbers): Returns the sum of all numeric elements in the list. Non-numeric elements are ignored. Parameters: - numbers: List of elements to sum up Returns: - Sum of all numeric elements in the list if not numbers: return 0 total = 0 for num in numbers: if isinstance(num, (int, float)): total += num return total"},{"question":"Create a function that takes a single parameter, which is a nested list of integers, and returns a flattened list of integers. The function should handle lists nested at various depths.","solution":"def flatten(nested_list): Flattens a nested list of integers into a single list of integers. Args: nested_list (list): A nested list of integers. Returns: list: A flattened list of integers. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"Create a function that takes in two integer arrays and returns their product. The product here refers to the dot product of the two arrays.","solution":"def dot_product(arr1, arr2): Returns the dot product of two integer arrays. Args: arr1 (list): First integer array. arr2 (list): Second integer array. Returns: int: The dot product of arr1 and arr2. Raises: ValueError: If the input arrays are of different lengths. if len(arr1) != len(arr2): raise ValueError(\\"Arrays must be of the same length\\") return sum(a * b for a, b in zip(arr1, arr2))"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the sum of each pair of adjacent integers from the original list. For example, if the input list is \`[1, 2, 3, 4]\`, the function should return \`[3, 5, 7]\` because \`1+2=3\`, \`2+3=5\`, and \`3+4=7\`.","solution":"def sum_adjacent_pairs(lst): Returns a new list containing the sum of each pair of adjacent integers from the original list. Parameters: lst (list): A list of integers. Returns: list: A list containing the sum of each pair of adjacent integers. return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]"},{"question":"Create a function that takes in two lists of numbers and returns the union of these lists. The union of two sets is the set of elements that are in either of the sets.","solution":"def union_lists(list1, list2): Returns the union of two lists. The union of two lists is the set of elements that are in either of the lists. return list(set(list1) | set(list2))"},{"question":"Create a function that encrypts and decrypts a given string based on a provided key. The encryption method should be a simple Caesar cipher with wrap-around, and the decryption method should reverse this process. The key specifies the number of positions each character in the string is shifted during encryption, and the same key is used for decryption to return the original string.","solution":"def caesar_cipher_encrypt(text, key): Encrypts the given text using a Caesar cipher with the provided key. Parameters: text (str): The string to be encrypted. key (int): The number of positions to shift each character. Returns: str: The encrypted string. encrypted_text = \\"\\" for char in text: if char.isalpha(): shift_base = ord('a') if char.islower() else ord('A') encrypted_text += chr((ord(char) - shift_base + key) % 26 + shift_base) else: encrypted_text += char return encrypted_text def caesar_cipher_decrypt(text, key): Decrypts the given text using a Caesar cipher with the provided key. Parameters: text (str): The string to be decrypted. key (int): The number of positions the characters were shifted during encryption. Returns: str: The decrypted string. decrypted_text = \\"\\" for char in text: if char.isalpha(): shift_base = ord('a') if char.islower() else ord('A') decrypted_text += chr((ord(char) - shift_base - key) % 26 + shift_base) else: decrypted_text += char return decrypted_text"},{"question":"Create a function that processes a string \`s\` and an integer \`n\`. The function should return a list of strings where each string is a substring of \`s\` divided into segments of length \`n\`. If the last segment has less than \`n\` characters, it should be truncated, and the remaining parts of the string should be skipped.","solution":"def segment_string(s, n): Divides the string \`s\` into segments of length \`n\`. If the last segment has less than \`n\` characters, it is not included. segments = [] for i in range(0, len(s), n): if len(s[i:i+n]) == n: segments.append(s[i:i+n]) return segments"},{"question":"Create a function that deletes all trailing spaces from a string in Python. Write a function named \`strip_trailing_spaces\` that takes a string as input and returns a new string with all trailing spaces removed.","solution":"def strip_trailing_spaces(s): Removes all trailing spaces from the given string. Parameters: s (str): The input string. Returns: str: The input string with trailing spaces removed. return s.rstrip()"},{"question":"Create a function that takes two strings and returns the number of occurrences of the second string within the first string, ignoring case.","solution":"def count_occurrences(str1, str2): Returns the number of occurrences of str2 within str1, ignoring case. return str1.lower().count(str2.lower())"},{"question":"Create a function that returns the nth number in a Fibonacci sequence. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), with initial conditions F(0) = 0 and F(1) = 1.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), with initial conditions F(0) = 0 and F(1) = 1. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes two parameters: one is a list of integers and the other is an integer \`k\`. The function should return a new list containing the \`k\` largest numbers from the input list, sorted in descending order.","solution":"def k_largest_numbers(numbers, k): Returns a list containing the k largest numbers from the input list, sorted in descending order. :param numbers: List of integers :param k: Integer representing the number of largest elements to return :return: List of k largest integers in descending order if not numbers or k <= 0: return [] # Sort the numbers in descending order numbers_sorted_desc = sorted(numbers, reverse=True) # Return the first k elements return numbers_sorted_desc[:k]"},{"question":"Create a function that generates a sequence based on a given length and a rule. The rule is that each number in the sequence is the sum of the two preceding ones, starting from 1 and 1. The function should return a list containing the sequence.","solution":"def fibonacci_sequence(length): Generates a Fibonacci sequence of the given length. Parameters: length (int): The length of the sequence to generate. Returns: list: A list containing the Fibonacci sequence of the given length. if length <= 0: return [] elif length == 1: return [1] elif length == 2: return [1, 1] sequence = [1, 1] for _ in range(2, length): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that takes in two arrays and returns the common elements between them.","solution":"def common_elements(arr1, arr2): Returns a list of the common elements between two input arrays. return list(set(arr1) & set(arr2))"},{"question":"Create a function that takes in a list of integers and returns True if the list contains an even number of even numbers, otherwise False.","solution":"def even_count_even_numbers(lst): Returns True if the list contains an even number of even numbers, otherwise False. evens = [num for num in lst if num % 2 == 0] return len(evens) % 2 == 0"},{"question":"Create a function that takes a string and converts it to kebab-case using Python. Kebab-case is a style of writing hyphenated strings, where each word is separated by a hyphen. For example, converting the string \\"This Is a Test String\\" to kebab-case should result in \\"this-is-a-test-string\\".","solution":"def to_kebab_case(s): Converts a given string to kebab-case. Parameters: s (str): The string to be converted. Returns: str: The kebab-case version of the input string. # Convert the string to lowercase and split by spaces words = s.lower().split() # Join the words using a hyphen return '-'.join(words)"},{"question":"Create a function that returns the length of the longest substring without repeating characters in the string \`s\`. If the string \`s\` is empty, the function should return 0.","solution":"def longest_substring_without_repeating(s): Returns the length of the longest substring without repeating characters in the string \`s\`. char_index_map = {} start_idx = 0 max_length = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_idx: start_idx = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start_idx + 1) return max_length"},{"question":"Create a function that takes an array of integers as an argument. This function should return an array of the cubes of the original integers in ascending order.","solution":"def cube_and_sort(arr): Takes an array of integers and returns an array of the cubes of the original integers in ascending order. Parameters: arr (list of int): The list of integers to process. Returns: list of int: The cubes of the original integers in ascending order. cubed = [x**3 for x in arr] cubed.sort() return cubed"},{"question":"Create a function that takes in a list and returns a new list containing the sum of all the elements in the original list.","solution":"def sum_all_elements(lst): Returns a new list containing the sum of all the elements in the input list. total_sum = sum(lst) return [total_sum]"},{"question":"Create a function that takes two arguments, an integer, and a list. Append the integer to the list and return the updated list.","solution":"def append_to_list(value, lst): Appends the integer value to the list lst and returns the updated list. lst.append(value) return lst"},{"question":"Create a function that takes 3 inputs, a list, and an integer. Check if the integer exists in the list. If it does, return its index. If it doesn't, return -1.","solution":"def find_index(lst, num): Check if the integer num exists in the list lst. If it does, return its index. If it doesn't, return -1. try: return lst.index(num) except ValueError: return -1"},{"question":"Create a function that determines the maximum sum of a contiguous subarray in a one-dimensional array of integers. For example, given the array \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the maximum sum of a contiguous subarray is \`6\` (the subarray \`[4, -1, 2, 1]\`). This problem is commonly known as Kadane's Algorithm.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray. Uses Kadane's Algorithm. :param arr: List[int] - The input list of integers. :return: int - The maximum sum of a contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that can handle multi-dimensional arrays in Python. The function should flatten the given multi-dimensional array and return a one-dimensional array.","solution":"def flatten_array(multi_array): Flattens a multi-dimensional array and returns a one-dimensional array. :param multi_array: list, A multi-dimensional array. :return: list, A one-dimensional array. flat_array = [] def flatten(inner_array): for item in inner_array: if isinstance(item, list): flatten(item) else: flat_array.append(item) flatten(multi_array) return flat_array"},{"question":"Create a function that generates the Fibonacci sequence up to a given number of terms \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the preceding two numbers. Return the sequence as a list.","solution":"def fibonacci(n): Generates the Fibonacci sequence up to n terms. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: The Fibonacci sequence as a list of integers. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that will reverse a string using the stack data structure in Python. Here's the stack I provided: myStack = ['a', 'b', 'c', 'd', 'e']","solution":"def reverse_string_with_stack(s): Reverses a string using the stack data structure. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. # Initialize a stack stack = list(s) # Initialize an empty string for the result reversed_string = \\"\\" # Pop all elements from the stack and add to the result string while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Create a function that takes in two arguments: a string and a range [start, end]. Your function should return a new string that includes only the characters in the input string that fall within the inclusive range [start, end].","solution":"def substring_within_range(s, start, end): Returns a new string containing only the characters of 's' that fall within the inclusive range [start, end]. Parameters: s (str): The input string. start (int): The starting index of the range. end (int): The ending index of the range. Returns: str: The string that includes only characters in the input string within the specified range. if start < 0 or end >= len(s) or start > end: raise ValueError(\\"Invalid range specified\\") return s[start:end+1]"},{"question":"Create a function that implements the breadth-first search (BFS) algorithm on a graph. The function should take a graph represented as an adjacency list and a starting node as input, and return a list of nodes visited in the order they were visited.","solution":"from collections import deque def bfs(graph, start): Performs the Breadth-First Search (BFS) algorithm on a graph. :param graph: A dictionary representing the adjacency list of the graph. :param start: The starting node for the BFS. :return: A list of nodes in the order they were visited. visited = [] queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.append(node) queue.extend([neighbor for neighbor in graph[node] if neighbor not in visited]) return visited"},{"question":"Create a function that receives two integers \`n\` and \`k\`. The function should return the sum of the first \`k\` even numbers starting from \`n\`. If \`n\` is odd, the function should find the nearest even number greater than \`n\` and start from there. If \`k\` is negative, return -1 as an error code.","solution":"def sum_first_k_even_numbers(n, k): Returns the sum of the first k even numbers starting from n. If n is odd, it finds the nearest even number greater than n and starts from there. If k is negative, it returns -1 as an error code. :param n: The starting integer. :param k: The number of even numbers to sum. :return: The sum of the first k even numbers starting from n. if k < 0: return -1 # Find the starting even number if n % 2 != 0: n += 1 total_sum = 0 for i in range(k): total_sum += n + (i * 2) return total_sum"},{"question":"Create a function that will output the first n numbers of the Fibonacci sequence in Python. Also, add error handling for invalid inputs.","solution":"def fibonacci_sequence(n): Returns the first n numbers of the Fibonacci sequence. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that takes a list of integers as input and returns the echo algorithm result for the list. The echo algorithm is a simple rule-based system that processes a list by adding 1 to each element. If the element is even, it is multiplied by 2 after adding 1.","solution":"def echo_algorithm(numbers): Processes a list of integers according to the echo algorithm: - Adds 1 to each element. - If the element was initially even, it multiplies the result by 2. Args: numbers (list of int): The input list of integers. Returns: list of int: The processed list as per the echo algorithm. result = [] for num in numbers: new_num = num + 1 if num % 2 == 0: new_num *= 2 result.append(new_num) return result"},{"question":"Create a function that takes an integer as input and returns the sum of the squares of its digits. For example, the input 23 should return 13 (2 squared is 4, 3 squared is 9, and 4 + 9 = 13).","solution":"def sum_of_squares_of_digits(number): Returns the sum of the squares of the digits of the input number. # Convert number to string to iterate through each digit, then back to integer to perform arithmetic operations return sum(int(digit) ** 2 for digit in str(number))"},{"question":"Create a function that takes an integer as input and returns the \\"sum of all numbers below the input number where the input number is an even number.\\" If the input number is odd, return an error message \\"Invalid input! Please enter an even number.\\"","solution":"def sum_below_even_number(n): Returns the sum of all numbers below the input number \`n\` if \`n\` is an even number. If \`n\` is an odd number, returns an error message. Parameters: n (int): The input number Returns: int or str: The sum of all numbers below \`n\` if \`n\` is even, otherwise an error message if n % 2 != 0: return \\"Invalid input! Please enter an even number.\\" return sum(range(n))"},{"question":"Create a function that takes an array of integers and returns a new array of the same length where each element is the product of all the numbers in the original array except for the one at that index. The solution should not use division and the time complexity should be O(n).","solution":"def product_except_self(nums): Given an array of integers, returns an array where each element is the product of all the numbers in the original array except for the one at that index. length = len(nums) if length == 0: return [] # Initialize the result array result = [1] * length # Calculate left product for each element left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right product for each element and multiply with the result right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Create a function that takes an integer as input and returns its reverse. For example, taking \\"123\\" and returning \\"321\\". Remember to handle negative numbers and leading zeros.","solution":"def reverse_integer(n): Returns the reverse of an integer n, handling negative numbers and leading zeros. if n < 0: return -int(str(abs(n))[::-1]) else: return int(str(n)[::-1])"},{"question":"Create a function that takes in a list of numbers and returns the sum of all the unique elements in the list.","solution":"def sum_unique_elements(numbers): Returns the sum of all unique elements in the list. unique_elements = set(numbers) return sum(unique_elements)"},{"question":"Create a function that takes a temperature in Celsius and returns the temperature in Fahrenheit.","solution":"def celsius_to_fahrenheit(celsius): Converts temperature from Celsius to Fahrenheit. Formula: (Celsius * 9/5) + 32 return (celsius * 9/5) + 32"},{"question":"Create a function that generates a Fibonacci sequence to a specified number of terms using recursion in Python. The function should take two parameters: the first parameter is the number of terms in the Fibonacci sequence, and the second parameter is a list that will be used to store the generated sequence.","solution":"def generate_fibonacci(n, sequence=None): Generates a Fibonacci sequence up to n terms using recursion. Parameters: n (int): Number of terms in the Fibonacci sequence. sequence (list): List to store the generated sequence. Returns: list: The Fibonacci sequence up to n terms. if sequence is None: sequence = [] if len(sequence) == 0: sequence = [0, 1] if len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return generate_fibonacci(n, sequence) return sequence[:n]"},{"question":"Create a function that takes in the length of the sides of a triangle and returns its area. The function should handle a variety of triangles including scalene, isosceles, and equilateral triangles. The function should also handle special cases where the inputs do not form a valid triangle.","solution":"import math def triangle_area(a, b, c): Returns the area of a triangle with sides a, b, and c. If the sides do not form a valid triangle, returns None. # Check for triangle validity using the triangle inequality theorem if a <= 0 or b <= 0 or c <= 0 or (a+b <= c) or (a+c <= b) or (b+c <= a): return None # Use Heron's formula to calculate the area s = (a + b + c) / 2 area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Create a function that takes in a list of integers and returns true if there is a pair of numbers that sum to zero. For example, given the list [1, 3, 5, 0], the function should return true because the sum of 0 and 3 is 0. If there's no such pair, the function should return false. For instance, given the list [1, 3, -2, 1], the function should return false because there is no pair that sums to zero.","solution":"def has_pair_with_sum_zero(nums): Returns true if there is a pair of numbers in the list that sum to zero, otherwise returns false. num_set = set() for num in nums: if -num in num_set: return True num_set.add(num) return False"},{"question":"Create a function that formats a date string to include a prefix and a suffix. The function should take the date string, the prefix, and the suffix as parameters and return the formatted date string with prefix and suffix added to it.","solution":"def format_date_string(date_str, prefix, suffix): Formats a date string to include a prefix and a suffix. Parameters: date_str (str): The date string to be formatted. prefix (str): The prefix to be added to the date string. suffix (str): The suffix to be added to the date string. Returns: str: The formatted date string with prefix and suffix. return f\\"{prefix} {date_str} {suffix}\\""},{"question":"Create a function that takes an integer n as a parameter and prints each number from 0 to n-1, each on its own line. If n is less than 0, the function should return \\"Error: Invalid input\\".","solution":"def print_numbers(n): Prints each number from 0 to n-1, each on its own line. If n is less than 0, returns \\"Error: Invalid input\\". if n < 0: return \\"Error: Invalid input\\" for i in range(n): print(i)"},{"question":"Create a function that takes an array of words, and returns a new array containing the length of each word from the original array. Use Python as the programming language.","solution":"def word_lengths(words): Returns a new array containing the length of each word from the original array. :param words: List of words :type words: List[str] :return: List containing the length of each word :rtype: List[int] return [len(word) for word in words]"},{"question":"Create a function that takes an integer N and computes the factorial of that number using recursion. Then, create a function that checks if the computed factorial is a perfect number. A perfect number is a positive integer that is equal to the sum of its positive divisors excluding the number itself.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) def is_perfect_number(num): Checks if the provided number is a perfect number. if num <= 1: return False divisors_sum = sum([i for i in range(1, num) if num % i == 0]) return divisors_sum == num def factorial_is_perfect(n): Computes the factorial of n and checks if it is a perfect number. fact = factorial(n) return is_perfect_number(fact)"},{"question":"Create a function that takes in a list of tuples, where each tuple contains an integer and a string. The function should return the total number of characters in all the strings in the tuples. Write a Python function to achieve this.","solution":"def total_characters_in_tuples(tuples_list): Takes a list of tuples, where each tuple contains an integer and a string. Returns the total number of characters in all the strings in the tuples. :param tuples_list: list of tuples (int, str) :return: int total number of characters return sum(len(item[1]) for item in tuples_list)"},{"question":"Create a function that takes a string of code written in a custom programming language and returns the code with a specific modification based on the presence of a certain token.","solution":"def modify_code(code): This function takes a string of code and replaces all occurrences of the token 'REPLACE_ME' with 'REPLACED'. :param code: str, the input code string :return: str, the modified code string return code.replace('REPLACE_ME', 'REPLACED')"},{"question":"Create a function that takes in two parameters: a list of numbers and an integer. The function should return the highest multiple of that integer found in the list.","solution":"def highest_multiple(numbers, integer): Returns the highest multiple of \`integer\` found in the list \`numbers\`. If no multiples are found, returns None. if integer == 0: raise ValueError(\\"The integer value must not be zero.\\") multiples = [num for num in numbers if num % integer == 0] return max(multiples) if multiples else None"},{"question":"Create a function that takes in a string and an integer as input and returns the string after converting it to uppercase if the integer is even, and to lowercase if the integer is odd.","solution":"def modify_string(s, n): Returns the string after converting it to uppercase if the integer is even, and to lowercase if the integer is odd. Args: s (str): The input string. n (int): The input integer. Returns: str: The modified string. if n % 2 == 0: return s.upper() else: return s.lower()"},{"question":"Create a function that converts a string from snake_case to TitleCase. Snake case is a string format where words are separated by underscores, while Title case is where each word starts with an uppercase letter and the rest are lowercase.","solution":"def snake_to_title_case(snake_str): Converts a string from snake_case to TitleCase. Parameters: snake_str (str): A string in snake_case format. Returns: str: A string converted to TitleCase. return snake_str.replace('_', ' ').title().replace(' ', '')"},{"question":"Create a function that takes a string and returns the number of distinct characters in the string. For example, if the input string is \\"hello\\", the function should return 4 because there are 4 distinct characters ('h', 'e', 'l', 'o').","solution":"def count_distinct_characters(s): Returns the number of distinct characters in the string s. Args: s (str): The input string. Returns: int: The number of distinct characters in the string. return len(set(s))"},{"question":"Create a function that accepts a list of integers. The function should return a dictionary that includes the frequency of each element in the list. If the integer appears more than once, the dictionary should store how many times it appears. If it appears only once, the dictionary should store that it appears once. The function should work efficiently and handle any list of integers efficiently.","solution":"def frequency_count(lst): Returns a dictionary with the frequency count of each element in the list. freq_dict = {} for item in lst: if item in freq_dict: freq_dict[item] += 1 else: freq_dict[item] = 1 return freq_dict"},{"question":"Create a function that takes a string s as an argument. The function should return the length of the longest substring s without repeating characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 left = 0 for right, char in enumerate(s): if char in char_index_map and char_index_map[char] >= left: left = char_index_map[char] + 1 char_index_map[char] = right longest = max(longest, right - left + 1) return longest"},{"question":"Create a function that takes a list of integers, and returns the list with all numbers that have at least one even digit. Filter out all the numbers that have only odd digits.","solution":"def filter_numbers_with_even_digits(numbers): Returns a list of numbers that have at least one even digit. def has_even_digit(number): # Check each digit in the number to see if it's even for digit in str(number): if int(digit) % 2 == 0: return True return False return [number for number in numbers if has_even_digit(number)]"},{"question":"Create a function that accepts two arguments and checks if they are the same. If they are, return a message \\"They are the same\\", otherwise return a message \\"They are different\\". Also, write a simple test to ensure your function works correctly.","solution":"def check_similarity(arg1, arg2): Returns a message indicating whether the two arguments are the same or different. if arg1 == arg2: return \\"They are the same\\" else: return \\"They are different\\""},{"question":"Create a function that takes a string as an argument and returns the string with a guarantee of 50 characters width, padding with spaces on the left if necessary. However, if the string's length is already over 50, simply return the original string.","solution":"def pad_string(s): Returns the string \`s\` padded with spaces on the left to a total width of 50 characters. If the string's length is already 50 characters or more, it returns the original string. return s.rjust(50)"},{"question":"Create a function that takes in a list of numbers and returns the sum of all the numbers in the list. The function should also handle cases where the list is empty. If the list is empty, the function should return 0.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the list. If the list is empty, returns 0. return sum(numbers)"},{"question":"Create a function that takes three parameters and returns the largest number among them.","solution":"def find_largest(a, b, c): Returns the largest number among the three given numbers a, b, and c. return max(a, b, c)"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the sum of the current and the previous elements from the input list. The first element of the new list should be the same as the first element of the input list.","solution":"def sum_with_previous(nums): Returns a new list where each element is the sum of the current and the previous elements from the input list. The first element of the new list is the same as the first element of the input list. if not nums: return [] result = [nums[0]] for i in range(1, len(nums)): result.append(nums[i] + nums[i - 1]) return result"},{"question":"Create a function that sifts through a list of integers and returns the one that occurs most frequently. If there are multiple integers that have the same highest frequency, return the smallest one among them. If the list is empty, return an \`optional<int>\` that does not contain a value.","solution":"from typing import Optional, List def most_frequent(nums: List[int]) -> Optional[int]: Returns the integer that occurs most frequently in the list. If there is a tie, return the smallest integer among the most frequent. If the list is empty, return None. if not nums: return None frequency = {} for num in nums: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 most_freq = max(frequency.values()) candidates = [num for num, freq in frequency.items() if freq == most_freq] return min(candidates)"},{"question":"Create a function that calculates the sum of a series of numbers between two integers provided, inclusively. The function should also handle negative numbers. For example, if the function receives two numbers, -1 and 5, it should calculate the sum of all integers between -1 and 5, inclusive.","solution":"def sum_of_series(start, end): Returns the sum of a series of numbers between start and end, inclusively. if start > end: start, end = end, start return sum(range(start, end + 1))"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is replaced with its square.","solution":"def square_elements(input_list): Takes a list of integers as input and returns a new list where each element is replaced with its square. :param input_list: List of integers :return: List of squared integers return [x ** 2 for x in input_list]"},{"question":"Create a function that takes as input a list of words and returns a new list with the words sorted by their frequency of occurrence. If two words have the same frequency, they should be sorted alphabetically. For example, if the input list is [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"], the output should be [\\"apple\\", \\"apple\\", \\"apple\\", \\"banana\\", \\"banana\\", \\"orange\\"].","solution":"from collections import Counter def sort_words_by_frequency(words): Sorts words by their frequency of occurrence. If two words have the same frequency, they should be sorted alphabetically. Parameters: words (list of str): List of words. Returns: list of str: Words sorted by frequency and then alphabetically. count = Counter(words) sorted_words = sorted(words, key=lambda x: (-count[x], x)) return sorted_words"},{"question":"Create a function that takes an integer as input and returns its factorial. The function should strictly follow the principles of functional programming, meaning it cannot modify any external state or have any side effects. Moreover, you are required to utilize recursion as the method of solving the problem.","solution":"def factorial(n): Returns the factorial of the input integer n using recursion. Assumes n is a non-negative integer. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes an array as an argument and returns a new array with the same elements in reverse order without modifying the original array.","solution":"def reverse_array(arr): Returns a new array with elements in reverse order without modifying the original array. return arr[::-1]"},{"question":"Create a function that takes a string as input and returns the string reversed. If the input string is empty or consists of a single character, it should return the string unchanged. Additionally, the function should ignore spaces in the string.","solution":"def reverse_string(s): Returns the reversed string, ignoring spaces. If the string is empty or consists of a single character, it returns the string unchanged. s = s.replace(\\" \\", \\"\\") if len(s) <= 1: return s return s[::-1]"},{"question":"Create a function that takes a number and returns whether it's positive, negative, or zero.","solution":"def check_number(n): Checks if a number is positive, negative, or zero. Parameters: n (int or float): The number to be checked. Returns: str: \\"positive\\" if n > 0, \\"negative\\" if n < 0, \\"zero\\" if n == 0 if n > 0: return \\"positive\\" elif n < 0: return \\"negative\\" else: return \\"zero\\""},{"question":"Create a function that takes an integer \`n\` as input and returns the difference between the sum of even numbers and the sum of odd numbers in the range from 1 to \`n\`.","solution":"def difference_even_odd_sum(n): Returns the difference between the sum of even numbers and the sum of odd numbers in the range from 1 to \`n\`. Parameters: n (int): Upper limit of the range (inclusive). Returns: int: Difference between the sum of even numbers and the sum of odd numbers in the range. even_sum = sum(i for i in range(1, n + 1) if i % 2 == 0) odd_sum = sum(i for i in range(1, n + 1) if i % 2 != 0) return even_sum - odd_sum"},{"question":"Create a function that takes an integer as input and returns the factorial of that integer, but also handles the case where the input is not a non-negative integer. Your function should raise a ValueError if the input is negative or is not an integer at all.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises a ValueError if the input is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that checks if a given integer is a prime number or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. In this problem, you are required to implement this functionality without using any built-in library functions or modules for checking prime numbers.","solution":"def is_prime(n): Checks if a given integer n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes a list of integers and returns the number of unique elements in the list. For example, if the list is [1, 2, 2, 3, 3, 4, 4, 4, 5], the function should return 5, since there are 5 unique elements (1, 2, 3, 4, 5).","solution":"def count_unique_elements(lst): Returns the number of unique elements in the list. Parameters: lst (list): List of integers. Returns: int: Number of unique elements. return len(set(lst))"},{"question":"Create a function that takes two iterables and returns the sum of all the elements that appear in both iterables. If there are no common elements, the function should return 0.","solution":"def sum_common_elements(iter1, iter2): Returns the sum of all common elements in iter1 and iter2. If no common elements exist, return 0. common_elements = set(iter1) & set(iter2) return sum(common_elements) if common_elements else 0"},{"question":"Create a function that takes a list of lists as an input and returns the flattened list. I have no previous experience with Python and would appreciate a simple and easy-to-understand solution.","solution":"def flatten_list(nested_list): Flattens a list of lists into a single list. Parameters: nested_list (list of lists): The list of lists to be flattened. Returns: list: A flattened list containing all the elements from the nested lists. flat_list = [] for sublist in nested_list: for item in sublist: flat_list.append(item) return flat_list"},{"question":"Create a function that determines the most frequently occurring character in a given string. If there is more than one such character, the function should return a list of these characters sorted alphabetically.","solution":"def most_frequent_char(s): Determines the most frequently occurring character(s) in the given string. Args: s (str): The input string. Returns: list: A list of the most frequently occurring character(s), sorted alphabetically. from collections import Counter if not s: return [] # Count the frequency of each character in the string char_count = Counter(s) # Find the maximum frequency max_freq = max(char_count.values()) # Find all characters with this maximum frequency most_frequent_chars = [char for char, count in char_count.items() if count == max_freq] # Return the list of most frequent characters sorted alphabetically return sorted(most_frequent_chars)"},{"question":"Create a function that takes a list of numbers and returns a tuple with the sum, difference, product, and quotient of all the numbers in the list. The quotient should be the result of dividing the first number by the second number in the list, and so on. If the list is empty, the function should return (0, 0, 0, 0) as the default values for sum, difference, product, and quotient.","solution":"def calculate_operations(numbers): Returns a tuple with the sum, difference, product, and quotient of all the numbers in the list. If the list is empty, returns (0, 0, 0, 0). if not numbers: return (0, 0, 0, 0) total_sum = sum(numbers) total_diff = numbers[0] total_product = numbers[0] total_quotient = numbers[0] for num in numbers[1:]: total_diff -= num total_product *= num total_quotient /= num return (total_sum, total_diff, total_product, total_quotient)"},{"question":"Create a function that takes an integer N and returns the sum of the first N natural numbers. The function should handle both positive and negative inputs, but if the input is negative, the function should return an error message.","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers if N is positive. If N is negative, returns an error message. # Check if N is negative if N < 0: return \\"Error: input must be a non-negative integer.\\" # Calculate the sum using the formula for the sum of the first N natural numbers return N * (N + 1) // 2"}]`),P={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:F,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},N={class:"card-container"},z={key:0,class:"empty-state"},E=["disabled"],L={key:0},S={key:1};function V(s,e,u,d,i,a){const m=p("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>i.searchQuery=o),placeholder:"Search..."},null,512),[[_,i.searchQuery]]),i.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>i.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),r(v,null,y(a.displayedPoems,(o,g)=>(n(),w(m,{key:g,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",z,' No results found for "'+h(i.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:i.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[i.isLoading?(n(),r("span",S,"Loading...")):(n(),r("span",L,"See more"))],8,E)):l("",!0)])}const D=c(P,[["render",V],["__scopeId","data-v-039794b8"]]),O=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/47.md","filePath":"quotes/47.md"}'),H={name:"quotes/47.md"},B=Object.assign(H,{setup(s){return(e,u)=>(n(),r("div",null,[q(D)]))}});export{O as __pageData,B as default};
