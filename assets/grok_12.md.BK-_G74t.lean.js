import{_ as d,o as n,c as r,a as t,m as f,t as h,C as p,M as _,U as b,f as l,F as v,p as y,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},W={class:"review-title"},R={class:"review-content"};function N(i,e,u,c,s,a){return n(),r("div",k,[t("div",T,[t("div",W,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),f(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),f(h(u.poem.solution),1)])])])}const F=d(q,[["render",N],["__scopeId","data-v-f1742854"]]),I=JSON.parse(`[{"question":"Write a function to find the shortest path from the top-left corner to the bottom-right corner of an m x n grid. Each cell in the grid contains a non-negative integer. You can move either down or right at any point in time.","solution":"def shortest_path(grid): Returns the shortest path from the top-left corner to the bottom-right corner of a grid. Each cell contains a non-negative integer representing the cost to move through that cell. You can move either down or right at any point in time. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Write a function to output the first N numbers of the Fibonacci sequence. Could you provide a solution in Python?","solution":"def fibonacci(n): Returns the first n numbers of the Fibonacci sequence. Parameters: n (int): The number of elements in the Fibonacci sequence to return Returns: list: A list containing the first n numbers of the Fibonacci sequence if n <= 0: return [] elif n == 1: return [0] fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write a function to clean the input text from HTML tags. Use Python and provide a solution that correctly handles nested tags and multiple instances of the same tag within the input text.","solution":"from bs4 import BeautifulSoup def clean_html_tags(input_text): Cleans the input text from HTML tags. Parameters: input_text (str): The text with HTML tags. Returns: str: The cleaned text without HTML tags. soup = BeautifulSoup(input_text, \\"html.parser\\") clean_text = soup.get_text() return clean_text"},{"question":"Write a function to implement FizzBuzz, a classic problem in software engineering interviews. For numbers that are multiples of 3, output \\"Fizz\\" instead of the number. For numbers that are multiples of 5, output \\"Buzz\\". For numbers that are multiples of both 3 and 5, output \\"FizzBuzz\\". For all other numbers, output the number itself.","solution":"def fizz_buzz(n): Returns the FizzBuzz output for numbers from 1 to n. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to compute the sum of the largest number from each sublist in a list of lists.","solution":"def sum_of_largest_each_sublist(lists): Returns the sum of the largest number from each sublist in a list of lists. Parameters: lists (list of list of int): A list containing sublists of integers Returns: int: Sum of the largest numbers in each sublist return sum(max(sublist) for sublist in lists if sublist)"},{"question":"Write a function to split a string into a list of words, where a word is defined as a sequence of characters separated by any amount of whitespace. The function should remove any extra whitespace between words and handle multiple spaces between words.","solution":"def split_into_words(s): Splits a string \`s\` into a list of words. Words are defined as sequences of characters separated by whitespace. Extra whitespace is removed. :param s: Input string :return: List of words return s.split()"},{"question":"Write a function to find the kth largest element in an unsorted array. Your function should take a list of integers and an integer k as input, and return the kth largest element from the array. For example, if the input list is [3, 2, 1, 5, 6, 4] and k is 2, the function should return 5.","solution":"import heapq def find_kth_largest(nums, k): Returns the kth largest element in an unsorted array. return heapq.nlargest(k, nums)[-1]"},{"question":"Write a function to format a given string by replacing all occurrences of a specified character with another character. The function should take three parameters: the original string, the character to be replaced, and the new character. It should return the modified string.","solution":"def replace_character(original_string, char_to_replace, new_char): Replaces all occurrences of char_to_replace in original_string with new_char. Parameters: original_string (str): The string in which replacements will be made. char_to_replace (str): The character that needs to be replaced. new_char (str): The character that will replace char_to_replace. Returns: str: The modified string after replacements. return original_string.replace(char_to_replace, new_char)"},{"question":"Write a function to identify the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Implement this function using Kadane's algorithm, a dynamic programming approach.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within a one-dimensional array of numbers using Kadane's algorithm. :param nums: List of numbers :return: Maximum sum of contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to sort a stack of plates represented as a vector of vectors, where each vector represents a pile of plates. Each plate has a value, and the goal is to sort the plates in ascending order across all stacks.","solution":"def sort_stack_of_plates(stack_of_plates): Sorts a stack of plates represented as a list of lists, where each list represents a pile of plates. Each plate has a value, and the function sorts the plates in ascending order across all stacks. Parameters: stack_of_plates: List[List[int]]: The stack of plates Returns: List[List[int]]: The sorted stack of plates # Flatten the list of lists into a single list all_plates = [plate for pile in stack_of_plates for plate in pile] # Sort the single list sorted_plates = sorted(all_plates) # Determine the original structure pile_sizes = [len(pile) for pile in stack_of_plates] # Reconstruct the sorted stack of plates sorted_stack = [] idx = 0 for size in pile_sizes: sorted_stack.append(sorted_plates[idx:idx+size]) idx += size return sorted_stack"},{"question":"Write a function to traverse a binary tree using the depth-first search (DFS) algorithm. There are different DFS traversal methods, including Preorder, Inorder, and Postorder. Please provide an implementation for each.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def preorder_traversal(root): Performs preorder traversal of a binary tree (root, left, right). if root is None: return [] return [root.value] + preorder_traversal(root.left) + preorder_traversal(root.right) def inorder_traversal(root): Performs inorder traversal of a binary tree (left, root, right). if root is None: return [] return inorder_traversal(root.left) + [root.value] + inorder_traversal(root.right) def postorder_traversal(root): Performs postorder traversal of a binary tree (left, right, root). if root is None: return [] return postorder_traversal(root.left) + postorder_traversal(root.right) + [root.value]"},{"question":"Write a function to find the largest even number in an array. If the array does not contain any even numbers, the function should return -1.","solution":"def find_largest_even(arr): Returns the largest even number in the array. If there are no even numbers, returns -1. largest_even = -1 for num in arr: if num % 2 == 0 and (largest_even == -1 or num > largest_even): largest_even = num return largest_even"},{"question":"Write a function to solve the classical knapsack problem where you have to maximize the total value of items to fit into a bag of a given weight capacity. The items are given by a list of their weights and values, and each item can only be taken once.","solution":"def knapsack(weights, values, capacity): Solve the knapsack problem by using dynamic programming approach. Parameters: weights (list): List of weights of the items. values (list): List of values of the items. capacity (int): The maximum weight capacity of the knapsack. Returns: int: The maximum total value that can be accumulated in the knapsack. n = len(weights) dp = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] return dp[n][capacity]"},{"question":"Write a function to calculate the factorial of a given number using recursion in Python, and optimize it with memoization.","solution":"def factorial(n, memo = {}): Returns the factorial of n using recursion and memoization. if n in memo: return memo[n] if n == 0 or n == 1: return 1 memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Write a function to convert an integer to its binary representation and then reverse the bits of the binary string.","solution":"def reverse_binary(n): Converts an integer to its binary representation, reverses the bits, and returns the integer value of the reversed binary string. # Convert the integer to binary (remove the '0b' prefix) binary_str = bin(n)[2:] # Reverse the binary string reversed_binary_str = binary_str[::-1] # Convert the reversed binary string back to an integer reversed_integer = int(reversed_binary_str, 2) return reversed_integer"},{"question":"Write a function to encode and decode a message using the Caesar cipher.","solution":"def caesar_cipher_encode(message, shift): Encodes the message using the Caesar cipher with a given shift. encoded_message = \\"\\" for char in message: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encoded_message += chr((ord(char) - shift_base + shift) % 26 + shift_base) else: encoded_message += char return encoded_message def caesar_cipher_decode(encoded_message, shift): Decodes the message using the Caesar cipher with a given shift. return caesar_cipher_encode(encoded_message, -shift)"},{"question":"Write a function to generate all possible combinations of a given list of numbers. The function should be able to output the combinations of a specified length.","solution":"from itertools import combinations def generate_combinations(numbers, length): Generate all possible combinations of a specified length from a list of numbers. :param numbers: List of numbers to generate combinations from. :param length: Length of each combination. :return: List of tuples, each tuple is a combination of specified length. return list(combinations(numbers, length))"},{"question":"Write a function to calculate the Ackermann function in Python.","solution":"def ackermann(m, n): Computes the Ackermann function A(m, n). :param m: Non-negative integer. :param n: Non-negative integer. :return: Result of the Ackermann function for given m and n. if m == 0: return n + 1 elif m > 0 and n == 0: return ackermann(m - 1, 1) elif m > 0 and n > 0: return ackermann(m - 1, ackermann(m, n - 1)) # Example usage # result = ackermann(2, 3) # print(result) # Output should be 9"},{"question":"Write a function to calculate the sum of the squares of the first n natural numbers. The function signature should be \`int sum_of_squares(int n)\`. Additionally, write a check function \`void check_sum_of_squares()\` to verify the correctness of the generated function using provided data points.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. Parameters: n (int): The number up to which squares are to be summed. Returns: int: Sum of squares of first n natural numbers. return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Write a function to search for a given target value in a rotated sorted array. The array may contain duplicates. The function should return the index of the target value if found, otherwise return -1. The array is sorted in ascending order and then rotated. For example, the array [0,1,2,4,4,4,5,6,6,7] might become [4,5,6,6,7,0,1,2,4,4] after rotation.","solution":"def search_rotated_array(nums, target): Searches for the target value in the rotated sorted array nums. Returns the index of the target if found, otherwise returns -1. if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid # The following logic differentiates the conditions to manage the duplicates and rotated parts if nums[left] == nums[mid] and nums[mid] == nums[right]: left += 1 right -= 1 elif nums[left] <= nums[mid]: # left to mid is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # mid to right is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find the maximum number in a list that is not only greater than the second largest number but also greater than the second smallest number.","solution":"def find_special_max(numbers): Returns the maximum number in the list that is greater than both the second largest and second smallest numbers. if len(numbers) < 3: raise ValueError(\\"List must contain at least three elements.\\") sorted_numbers = sorted(numbers) max_num = max(numbers) second_largest = sorted_numbers[-2] second_smallest = sorted_numbers[1] if max_num > second_largest and max_num > second_smallest: return max_num return None"},{"question":"Write a function to detect a cycle in a linked list. If a cycle is detected, return the node where the cycle begins. If there is no cycle, return \`null\`. The solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detectCycle(head): Detects a cycle in a linked list and returns the node where the cycle begins. If there is no cycle, returns None. Time complexity: O(n) Space complexity: O(1) if not head or not head.next: return None slow, fast = head, head # Detect if there is a cycle using Floyd's Tortoise and Hare algorithm while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: return None # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to recursively check if a binary tree is balanced. A binary tree is considered balanced if the height difference between the left and right subtree of any node is not more than 1, and both left and right subtree are also balanced.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Check if a binary tree is balanced. :param root: TreeNode, the root of the binary tree. :return: bool, True if the tree is balanced, otherwise False. def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) current_height = max(left_height, right_height) + 1 if not (left_balanced and right_balanced): return current_height, False if abs(left_height - right_height) > 1: return current_height, False return current_height, True return check_balance(root)[1]"},{"question":"Write a function to calculate the volume of a cube given its side length. The function should be efficient and handle large inputs.","solution":"def cube_volume(side_length): Returns the volume of a cube with the given side length. return side_length ** 3"},{"question":"Write a function to convert a binary tree to a linked list. Each node in the linked list should be the value of that node in the tree. The linked list should represent the pre-order traversal of the binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left = left self.right = right = right class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def binary_tree_to_linked_list(root): Converts a binary tree to a linked list using pre-order traversal. if not root: return None # Helper function for pre-order traversal def pre_order(node): if not node: return [] # Pre-order traversal: Node -> Left -> Right return [node.value] + pre_order(node.left) + pre_order(node.right) values = pre_order(root) dummy_head = ListNode(0) current = dummy_head for value in values: current.next = ListNode(value) current = current.next return dummy_head.next"},{"question":"Write a function to return the length of the longest increasing subsequence in an array. An increasing subsequence is defined as a sequence of numbers where each subsequent number is greater than the one before it.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the array nums. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to sort an array of integers in ascending order using Bubble Sort and also pass a callback function to it.","solution":"def bubble_sort(arr, callback=None): Sorts an array of integers in ascending order using Bubble Sort. An optional callback function can be provided that will be called after each swap. :param arr: List of integers to sort :param callback: Optional function to call after each swap :return: Sorted list of integers in ascending order n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] if callback: callback(arr) return arr"},{"question":"Write a function to compute the Fibonacci sequence using recursion and memoization in Python. The function should take an integer \`n\` as input and return the \`n\`th Fibonacci number. Additionally, include error handling for non-integer and negative inputs.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion and memoization. Args: n (int): The position in the Fibonacci sequence. memo (dict): A dictionary to store previously computed Fibonacci numbers. Returns: int: The nth Fibonacci number. Raises: ValueError: If the input n is not an integer or if it is negative. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if memo is None: memo = {} if n in memo: return memo[n] if n in [0, 1]: memo[n] = n else: memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to calculate the Fibonacci sequence up to the nth number. What's the \`n\`th Fibonacci number you would calculate? Also, what programming language would you use to achieve this? My preferred language is Python.","solution":"def fibonacci(n): Calculate Fibonacci sequence up to the nth number and return the nth Fibonacci number. :param n: The position in the Fibonacci sequence to calculate. :return: The nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a function to find the maximum value in a binary tree. visitor 2023-07-22 14:00:49","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_maximum_value(root): Returns the maximum value in a binary tree. If the tree is empty, return None. if root is None: return None left_max = find_maximum_value(root.left) right_max = find_maximum_value(root.right) max_value = root.value if left_max is not None: max_value = max(max_value, left_max) if right_max is not None: max_value = max(max_value, right_max) return max_value"},{"question":"Write a function to find the first occurrence of an element in an array that is greater than a given number. If no such element exists, return -1.","solution":"def find_first_greater(arr, num): Returns the index of the first occurrence of an element in the array that is greater than the given number. If no such element exists, returns -1. for i, element in enumerate(arr): if element > num: return i return -1"},{"question":"Write a function to check if a given number is a palindrome in any base.","solution":"def is_palindrome_in_any_base(n): Check if a given number n is a palindrome in any base from 2 to n-1. def is_palindrome(s): return s == s[::-1] def to_base(n, base): if base == 10 or n == 0: return str(n) digits = [] while n: digits.append(int(n % base)) n //= base return ''.join(str(x) for x in digits[::-1]) for base in range(2, n): if is_palindrome(to_base(n, base)): return True return False"},{"question":"Write a function to perform basic operations on a stack.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): Pushes an item onto the stack. self.items.append(item) def pop(self): Removes and returns the top item from the stack. If the stack is empty, return None. if not self.is_empty(): return self.items.pop() return None def peek(self): Returns the top item from the stack without removing it. If the stack is empty, return None. if not self.is_empty(): return self.items[-1] return None def is_empty(self): Returns whether the stack is empty. return len(self.items) == 0"},{"question":"Write a function to modify a given text so that each word in the text is replaced with its reversed version, but the overall order of the words and spaces in the original text should be preserved. For example, if the input is \\"Hello world\\", the output should be \\"olleH dlrow\\".","solution":"def reverse_words(text): This function takes a text string as input and returns a string with each word reversed. The order of the words and spaces in the string is preserved. words = text.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to reverse each word in a given string and then reverse the order of the words in the string.","solution":"def reverse_words_and_order(sentence): Reverses each word in the given string and then reverses the order of the words. :param sentence: The input string. :return: The transformed string. words = sentence.split() reversed_words = [word[::-1] for word in words] reversed_order_sentence = ' '.join(reversed(reversed_words)) return reversed_order_sentence"},{"question":"Write a function to reverse an integer. If reversing the integer causes an overflow, return 0. For example, given the integer 123, the reversed integer would be 321.","solution":"def reverse_integer(x): Reverses the given integer x. If reversing the integer causes an overflow, returns 0. INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = -1 if x < 0 else 1 x *= sign reversed_x = 0 while x != 0: pop = x % 10 x //= 10 if reversed_x > (INT_MAX - pop) // 10: return 0 # Overflow reversed_x = reversed_x * 10 + pop return sign * reversed_x"},{"question":"Write a function to reverse a given string in Python. You should not use any slicing, reversing methods built into Python, or any other built-in functions that directly or indirectly perform string reversal. You should also implement this function to reverse only alphabetic characters and ignore all other characters, including numbers and punctuation. Preserve the position of non-alphabetic characters.","solution":"def reverse_alphabetic_only(s): Reverses only the alphabetic characters in the string s while preserving the position of non-alphabetic characters. # Extract the alphabetic characters from the original string alphabetic_chars = [char for char in s if char.isalpha()] # Initialize a list with the same number of elements as the original string result = list(s) # Pointer to the last element of the extracted alphabetic characters alpha_index = len(alphabetic_chars) - 1 # Replace alphabetic characters in the original string with the reversed ones for i in range(len(s)): if s[i].isalpha(): result[i] = alphabetic_chars[alpha_index] alpha_index -= 1 return ''.join(result)"},{"question":"Write a function to check if a given number \`n\` is a perfect square. A number \`n\` is a perfect square if \`n = x^2\` for some integer \`x\`.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Write a function to take a list of strings and return a new list containing only the strings that are longer than a given length.","solution":"def filter_long_strings(strings, length): Returns a list of strings that are longer than the specified length. Parameters: strings (list): A list of strings. length (int): The length to filter strings by. Returns: list: A list of strings longer than 'length'. return [string for string in strings if len(string) > length]"},{"question":"Write a function to extract all unique pairs of elements from a list where the element at the first position is less than the second position. The function should return a list of these pairs.","solution":"def unique_pairs(lst): Extracts all unique pairs of elements from a list where the first element of the pair is less than the second element. Parameters: lst (list): The input list of elements. Returns: list: A list of tuples, each containing a unique pair (a, b) where a < b. pairs = [] for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] < lst[j]: pairs.append((lst[i], lst[j])) return pairs"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. How can we handle potential errors such as negative inputs or non-integer inputs?","solution":"def factorial(n): Returns the factorial of the given number using recursion. Raises ValueError for negative or non-integer inputs. if not isinstance(n, int) or isinstance(n, bool): raise ValueError(\\"Input must be a non-negative integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to rotate a string by a given number of positions. If the rotation number is greater than the length of the string, return the string reversed.","solution":"def rotate_string(s, n): Rotates the given string s by n positions. If n is greater than the length of the string, returns the string reversed. Parameters: s (str): The original string to rotate. n (int): The number of positions to rotate the string. Returns: str: The rotated string or the reversed string if n is greater than the length of s. length = len(s) if n > length: return s[::-1] return s[n:] + s[:n]"},{"question":"Write a function to calculate the area of a triangle given the length of its three sides. The function should take three arguments, each representing the length of a side of the triangle, and return the area of the triangle. If the input side lengths do not form a valid triangle, the function should return -1.","solution":"def area_of_triangle(a, b, c): Returns the area of a triangle with side lengths a, b, and c. If the side lengths do not form a valid triangle, returns -1. # Check for valid triangle: a + b > c, a + c > b, b + c > a if not (a + b > c and a + c > b and b + c > a): return -1 # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron's formula area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 return area"},{"question":"Write a function to calculate the sum of all prime numbers below a given number n. Explain the logic and each part of the function.","solution":"def sum_of_primes_below(n): Calculate the sum of all prime numbers below the given number n. Args: - n (int): The upper limit (exclusive) to calculate the sum of prime numbers. Returns: - int: The sum of all prime numbers below n. if n < 2: return 0 # Setting up the sieve for the range of numbers sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False # Summing up the primes return sum(i for i, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a function to determine if a string has all unique characters. For example, the string 'aA' has two 'a's and is not unique.","solution":"def has_all_unique_characters(s): Returns True if the string s has all unique characters, otherwise False. seen = set() for char in s: if char in seen: return False seen.add(char) return True"},{"question":"Write a function to determine if a given array contains any duplicate elements. The function should return \`True\` if there are duplicates, and \`False\` otherwise.","solution":"def contains_duplicates(arr): Returns True if there are duplicate elements in the array, otherwise False. return len(arr) != len(set(arr))"},{"question":"Write a function to count the number of vowels in a given string. The function should return the count of vowels (a, e, i, o, u) in the string, ignoring case (i.e., treat 'A' as 'a', 'E' as 'e', etc.).","solution":"def count_vowels(s): Counts the number of vowels in the given string, ignoring case. Parameters: s (str): The input string. Returns: int: The number of vowels in the string. vowels = 'aeiou' return sum(1 for char in s.lower() if char in vowels)"},{"question":"Write a function to calculate the sum of all prime numbers less than a given number using the Sieve of Eratosthenes algorithm. In Python, how can I implement this? Here's a Python code snippet that attempted to implement this algorithm but is not working correctly. Please review and correct it.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return 0 # Initialize a list to track of prime status is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not primes p = 2 while p * p < n: if is_prime[p]: for i in range(p * p, n, p): is_prime[i] = False p += 1 # Sum all prime numbers return sum(i for i in range(n) if is_prime[i])"},{"question":"Write a function to reverse a linked list in Python. The function should take the head of the linked list as its parameter and return the new head of the reversed linked list. A linked list is represented as a series of nodes, where each node has a value and a pointer to the next node. If the input linked list is empty, the function should return \`None\`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a linked list. Parameters: head (ListNode): The head of the linked list. Returns: ListNode: The head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to print the numbers 1 to N in binary form in C#.","solution":"def print_numbers_in_binary(N): Prints numbers from 1 to N in binary form. binary_numbers = [] for num in range(1, N+1): binary_form = bin(num).replace(\\"0b\\", \\"\\") binary_numbers.append(binary_form) print(binary_form) # Printing the binary form return binary_numbers # To facilitate testing"},{"question":"Write a function to find the maximum difference between two elements in an array, where the smaller element appears before the larger element. For example, in the array [2, 3, 10, 6, 4, 8, 1], the maximum difference is 9 (10 - 1).","solution":"def max_difference(arr): Finds the maximum difference between two elements in the array where the smaller element appears before the larger element. :param arr: List of integers :return: Maximum difference if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Write a function to reverse the case of each character in a given string. That is, change all uppercase characters to lowercase and vice versa.","solution":"def reverse_case(s): Returns a new string with reversed case for each character in the input string s. return s.swapcase()"},{"question":"Write a function to reverse the characters of a string in place. The function should take a single string as input and modify the string to reverse its characters. The string should be reversed in place without using any extra space.","solution":"def reverse_string_in_place(s): Reverses the characters of a string in place. s = list(s) # Convert string to list to allow in-place modifications left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s)"},{"question":"Write a function to find the first unique character in a string. The function should return the index of the first unique character if it exists, otherwise, return -1. The function should have a time complexity of O(n).","solution":"def first_unique_character(s): Returns the index of the first unique character in the string s. If no unique character exists, returns -1. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the index of the first unique character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Write a function to calculate the sum of all numbers from 1 to n. n is a positive integer passed as input.","solution":"def sum_to_n(n): Calculates the sum of all numbers from 1 to n. return n * (n + 1) / 2"},{"question":"Write a function to find the nth element in a Fibonacci sequence using recursion.","solution":"def fibonacci(n): Returns the nth element in the Fibonacci sequence using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to join multiple strings in a list with a space as a delimiter. For example, joinStrings([\\"Hello\\", \\"world\\"]) should return \\"Hello world\\".","solution":"def join_strings(string_list): Joins multiple strings in a list with a space as a delimiter. Parameters: string_list (list): A list of strings to be joined. Returns: str: A single string with all elements joined by a space. return ' '.join(string_list)"},{"question":"Write a function to split a string into parts using a specified delimiter.","solution":"def split_string(input_string, delimiter): Splits the input_string into parts separated by the delimiter. Parameters: input_string (str): The string to be split. delimiter (str): The character used to split the string. Returns: list: A list of parts from the input_string split by the delimiter. return input_string.split(delimiter)"},{"question":"Write a function to determine if one string is a substring of another string.","solution":"def is_substring(sub, main): Returns True if sub is a substring of main, otherwise False. return sub in main"},{"question":"Write a function to check if a given number is a perfect square. If it is, the function returns the square root of the number; otherwise, it returns the square of the number.","solution":"import math def check_perfect_square(num): Returns the square root of the number if it is a perfect square. Otherwise, returns the square of the number. root = math.isqrt(num) if root * root == num: return root else: return num * num"},{"question":"Write a function to calculate the number of distinct permutations of a given string. The function should consider both upper and lower case letters as distinct characters. For example, for the input \\"abc\\", the output should be 6, as there are six permutations: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\".","solution":"from math import factorial from collections import Counter def distinct_permutations(s): Calculate the number of distinct permutations of the given string. Considers upper and lower case letters as distinct characters. letter_counts = Counter(s) perms = factorial(len(s)) for count in letter_counts.values(): perms //= factorial(count) return perms"},{"question":"Write a function to check if a given string contains a valid JSON object. The function should return True if the string is a valid JSON object and False otherwise. A valid JSON object is defined as a string representation of a JSON object (i.e., \`{}\` or \`{\\"key\\": \\"value\\"}\`).","solution":"import json def is_valid_json(json_string): Checks if the provided string is a valid JSON object. Args: json_string (str): The string to check for JSON validity. Returns: bool: True if the string is a valid JSON object, False otherwise. try: json_object = json.loads(json_string) return isinstance(json_object, dict) except ValueError: return False"},{"question":"Write a function to calculate the factorial of a given number using recursion in Python. Additionally, define a function to check if a number is a palindrome (reads the same backward as forward) using recursion.","solution":"def factorial(n): Returns the factorial of a given number using recursion. if n == 0 or n == 1: return 1 return n * factorial(n - 1) def is_palindrome(s): Returns True if the given string is a palindrome, otherwise False. Uses recursion. if len(s) <= 1: return True if s[0] != s[-1]: return False return is_palindrome(s[1:-1])"},{"question":"Write a function to calculate the sum of all digits in a given number. Implement it in Python.","solution":"def sum_of_digits(number): Returns the sum of all digits in the given number. return sum(int(digit) for digit in str(abs(number)))"},{"question":"Write a function to remove duplicates from an array and return the new array. The function should work efficiently and avoid using any built-in \`arr.unique()\` method.","solution":"def remove_duplicates(arr): Removes duplicates from the array and returns a new array. seen = set() new_arr = [] for item in arr: if item not in seen: seen.add(item) new_arr.append(item) return new_arr"},{"question":"Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum and return its sum. The function should implement Kadane's algorithm.","solution":"def max_subarray_sum(nums): Finds the contiguous subarray within an array which has the largest sum using Kadane's algorithm and returns the sum. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to check if a given number is a perfect square, without using any built-in math functions.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. Parameters: n (int): The number to be checked Returns: bool: True if n is a perfect square, False otherwise if n < 0: return False i = 0 while i * i <= n: if i * i == n: return True i += 1 return False"},{"question":"Write a function to find the lowest common ancestor in a Binary Search Tree (BST). The function should return the root of the lowest common ancestor of two given nodes if they exist, and return null if either of nodes does not exist in the BST. Assume that both input nodes are distinct.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def find_lowest_common_ancestor(root, p, q): Finds the lowest common ancestor in a Binary Search Tree (BST). Args: root (TreeNode): The root node of the BST. p (int): The value of the first node. q (int): The value of the second node. Returns: TreeNode: The root of the lowest common ancestor if both nodes exist, otherwise None. if not root: return None if root.val > p and root.val > q: return find_lowest_common_ancestor(root.left, p, q) if root.val < p and root.val < q: return find_lowest_common_ancestor(root.right, p, q) if find_node(root, p) and find_node(root, q): return root else: return None def find_node(root, val): Helper function to check if a node with value val exists in the tree. Args: root (TreeNode): The root node of the tree. val (int): The value to look for. Returns: bool: True if the node exists, False otherwise. if not root: return False if root.val == val: return True if val < root.val: return find_node(root.left, val) else: return find_node(root.right, val)"},{"question":"Write a function to implement insertion sort in Python. Insertion sort builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages such as simple implementation, efficient for small data sets, more efficient in practice than most other simple quadratic algorithms such as selection sort or bubble sort, adaptive, and stable.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. :param arr: List[int] - A list of integers to be sorted :return: List[int] - The sorted list of integers for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to check if a given array is sorted in increasing order.","solution":"def is_sorted(arr): Checks if the given array is sorted in increasing order. :param arr: List of numbers. :return: True if the array is sorted in increasing order, False otherwise. return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"},{"question":"Write a function to check if the input number is even.","solution":"def is_even(number): Returns True if the number is even, False otherwise. return number % 2 == 0"},{"question":"Write a function to implement a queue using two stacks. The queue should support enqueue and dequeue operations while ensuring that each operation has an average time complexity of O(1). How can one accomplish this using stacks?","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, item): self.stack1.append(item) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: raise IndexError(\\"dequeue from empty queue\\") return self.stack2.pop() def is_empty(self): return not self.stack1 and not self.stack2 def size(self): return len(self.stack1) + len(self.stack2)"},{"question":"Write a function to find the shortest path in a 2D grid from the top-left corner to the bottom-right corner using recursion and memoization.","solution":"def shortest_path(grid): Finds the shortest path in a 2D grid from the top-left corner to the bottom-right corner using recursion and memoization. :param grid: List of lists representing the grid :return: Length of the shortest path rows, cols = len(grid), len(grid[0]) memo = {} def dfs(r, c): if r >= rows or c >= cols or grid[r][c] == 1: return float('inf') if (r, c) == (rows-1, cols-1): return 1 if (r, c) in memo: return memo[(r, c)] right = dfs(r, c + 1) down = dfs(r + 1, c) memo[(r, c)] = 1 + min(right, down) return memo[(r, c)] result = dfs(0, 0) return result if result != float('inf') else -1"},{"question":"Write a function to simulate a Monopoly game. The function should take two parameters: an array of player names and the number of turns. The function should return the total number of turns taken for all players to land on the 'Community Chest' square.","solution":"import random def simulate_monopoly_game(player_names, number_of_turns): Simulates a Monopoly game and returns the total number of turns taken for all players to land on the 'Community Chest' square. Parameters: player_names (list): A list of player names. number_of_turns (int): The number of turns to simulate. Returns: int: The total number of turns taken for all players to land on the 'Community Chest' square. community_chest_positions = {2, 17, 33} total_players = len(player_names) positions = {player: 0 for player in player_names} total_turns = 0 players_have_landed = {player: False for player in player_names} for turn in range(number_of_turns): for player in player_names: dice_roll = random.randint(1, 6) + random.randint(1, 6) # Roll two dice positions[player] = (positions[player] + dice_roll) % 40 # Move player total_turns += 1 if positions[player] in community_chest_positions: players_have_landed[player] = True # Check if all players have landed on a Community Chest square if all(players_have_landed.values()): return total_turns return total_turns"},{"question":"Write a function to sort an array of strings in lexicographic (dictionary) order. The function should handle different cases (lowercase and uppercase) and return the sorted array.","solution":"def sort_strings(arr): Sorts an array of strings in lexicographic order, case-insensitive. Args: arr (list of str): The array of strings to be sorted. Returns: list of str: The sorted array of strings. return sorted(arr, key=str.lower)"},{"question":"Write a function to sort a list of integers using the quicksort algorithm.","solution":"def quicksort(arr): Sorts a list of integers using the quicksort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: A sorted list of integers. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) # Example usage: # sorted_list = quicksort([3, 6, 8, 10, 1, 2, 1])"},{"question":"Write a function to find the shortest path in a 2D grid using Breadth-First Search (BFS). The grid contains obstacles represented by \`1\`s and empty spaces represented by \`0\`s. The starting point is at the top-left corner (0, 0), and the goal is at the bottom-right corner (m-1, n-1). The function should return the shortest path length as an integer. If there is no path, it should return \`-1\`.","solution":"from collections import deque def shortest_path_bfs(grid): Finds the shortest path in a 2D grid using BFS. Parameters: - grid: List[List[int]]: 2D grid where 1 represents an obstacle and 0 represents an empty space. Returns: - int: The length of the shortest path from the top-left to the bottom-right corner of the grid. Returns -1 if there is no path. if not grid or not grid[0]: return -1 m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 # Directions for right, left, down, and up moves directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, path_length) visited = set() visited.add((0, 0)) while queue: x, y, length = queue.popleft() # If reached the bottom-right corner if x == m-1 and y == n-1: return length for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, length + 1)) return -1"},{"question":"Write a function to calculate the square root of a number using the Newton-Raphson method. The function should take a single argument, the number whose square root is to be calculated, and return the square root rounded to two decimal places.","solution":"def sqrt_newton_raphson(number): Calculate the square root of a number using the Newton-Raphson method. Rounds the result to two decimal places. :param number: Float or int, the number whose square root is to be calculated :return: Float, the square root rounded to two decimal places if number < 0: raise ValueError(\\"Cannot calculate square root of a negative number\\") if number == 0: return 0.0 tolerance = 1e-10 guess = number / 2.0 while True: next_guess = (guess + number / guess) / 2 if abs(guess - next_guess) < tolerance: return round(next_guess, 2) guess = next_guess"},{"question":"Write a function to reverse a string using the slice operator.","solution":"def reverse_string(s): Returns the reverse of the given string using the slice operator. return s[::-1]"},{"question":"Write a function to find all the prime factors of a given number. The function should return a list of prime factors, where each factor appears as many times as it divides the given number. The function should work for both positive and negative numbers, but the negative sign should not be considered a factor.","solution":"def prime_factors(n): Returns the prime factors of a given number \`n\`. If \`n\` is negative, the negative sign is ignored. if n == 0: return [] # Work with the absolute value of n n = abs(n) factors = [] # Handle the smallest prime factor 2 while n % 2 == 0: factors.append(2) n //= 2 # Try odd numbers from 3 upwards factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 # If n is still greater than 2, then it must be a prime number if n > 2: factors.append(n) return factors"},{"question":"Write a function to calculate the total number of paper bills in a given list. The list contains the denominations of paper bills.","solution":"def total_bills(bill_list): Returns the total number of paper bills in the given list. Args: bill_list (list): A list of integers where each integer represents the denomination of a paper bill. Returns: int: The total number of paper bills. return len(bill_list)"},{"question":"Write a function to sort an array of integers in ascending order using the Selection Sort algorithm. The function should take an array of integers as input and return the sorted array.","solution":"def selection_sort(arr): Sorts an array of integers in ascending order using the Selection Sort algorithm. Parameters: arr (list): The array of integers to be sorted. Returns: list: The sorted array in ascending order. n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a function to determine if a string contains a balanced set of parentheses. The function should return true if the parentheses are balanced and false otherwise. Additionally, ensure that the function correctly handles nested parentheses and returns false for strings that contain invalid characters.","solution":"def is_balanced_parentheses(s): Determine if a given string contains a balanced set of parentheses. Args: s (str): Input string to check. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] for char in s: if char not in \\"()\\": return False if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function to return the sum of the numbers in a given list, but only for the numbers that are multiples of 3 or multiples of 5.","solution":"def sum_multiples_of_3_or_5(numbers): Returns the sum of the numbers in the given list that are multiples of 3 or 5. :param numbers: List of integers :return: Integer sum of multiples of 3 or 5 return sum(x for x in numbers if x % 3 == 0 or x % 5 == 0)"},{"question":"Write a function to decode a base64 encoded string. The function should take a Base64 encoded string as input and return the decoded string. If the input string is not a valid Base64 string, the function should return an error message.","solution":"import base64 def decode_base64(encoded_str): Decodes a base64 encoded string. If the input string is not a valid Base64, return an error message. Parameters: encoded_str (str): Base64 encoded string. Returns: str: Decoded string or an error message if input is invalid. try: decoded_bytes = base64.b64decode(encoded_str, validate=True) return decoded_bytes.decode('utf-8') except (base64.binascii.Error, ValueError): return \\"Error: Invalid Base64 string\\""},{"question":"Write a function to compute the number of pairs of indices (i, j) such that i < j and nums[i] * nums[j] > k in a given array nums. The array consists of non-negative integers.","solution":"def count_pairs(nums, k): Returns the number of pairs (i, j) such that i < j and nums[i] * nums[j] > k. :param nums: List of non-negative integers :param k: Integer value for comparison :return: Integer count of pairs count = 0 n = len(nums) for i in range(n): for j in range(i+1, n): if nums[i] * nums[j] > k: count += 1 return count"},{"question":"Write a function to flatten a nested list of integers. A nested list can contain both integers and other nested lists at any depth. Your function should return the flattened list in the same order as the original nested list.","solution":"def flatten(nested_list): Flattens a nested list of integers. Args: nested_list (list): A list that can contain integers and other nested lists. Returns: list: A flattened list of integers. flattened = [] def _flatten(n_list): for element in n_list: if isinstance(element, list): _flatten(element) else: flattened.append(element) _flatten(nested_list) return flattened"},{"question":"Write a function to convert a string of Roman numerals to an integer. The function should support both uppercase and lowercase Roman numerals. Explore various solutions and discuss their efficiency.","solution":"def roman_to_integer(roman): Converts a string of Roman numerals to an integer. Supports both uppercase and lowercase Roman numerals. roman = roman.upper() # Convert to uppercase to handle lowercase input roman_values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Write a function to reverse a string without using recursion. I want a detailed explanation of the function and its approach.","solution":"def reverse_string(s): Returns the reverse of the given string s. This function uses slicing to reverse the string. Parameters: s (str): The string to reverse. Returns: str: The reversed string. # Using slicing to reverse the string return s[::-1]"},{"question":"Write a function to move all the 0s to the end of an array while maintaining the relative order of non-zero elements. How can this be achieved efficiently?","solution":"def move_zeros_to_end(arr): Moves all zeros to the end of the array while maintaining the relative order of non-zero elements. Parameters: arr (list): List of integers. Returns: list: Modified list with all zeros moved to the end. n = len(arr) non_zero_index = 0 for i in range(n): if arr[i] != 0: arr[non_zero_index] = arr[i] non_zero_index += 1 for i in range(non_zero_index, n): arr[i] = 0 return arr"},{"question":"Write a function to calculate the power of a given number ( x ) to an integer ( n ) without using the built-in power function. The function should handle both positive and negative exponents.","solution":"def power(x, n): Returns x raised to the power of n. if n == 0: return 1 elif n > 0: result = 1 for _ in range(n): result *= x return result else: # n < 0 result = 1 for _ in range(-n): result *= x return 1 / result"},{"question":"Write a function to add two numbers. The function should take two integers as input and return their sum. Additionally, the function should handle the case where the input numbers exceed the maximum limit for an integer (2^31 - 1) or fall below the minimum limit (-2^31). If the sum is out of bounds, the function should return a specific error message.","solution":"def add_with_bounds(a, b): Returns the sum of a and b, handling overflow and underflow errors. If the sum is out of 32-bit integer bounds, returns an error message. INT_MAX = 2**31 - 1 INT_MIN = -2**31 sum_res = a + b if sum_res > INT_MAX: return \\"Error: Integer overflow\\" elif sum_res < INT_MIN: return \\"Error: Integer underflow\\" else: return sum_res"},{"question":"Write a function to determine the smallest number of coins required to make up a given amount. The function should accept the amount and a list of coin denominations as input parameters and return the minimum number of coins needed. If it is not possible to make up the amount using the given denominations, the function should return -1.","solution":"def coin_change(amount, coins): Determines the smallest number of coins required to make up the given amount. Parameters: amount (int): The amount to make up. coins (list of int): The denominations of the coins. Returns: int: The minimum number of coins needed, or -1 if it is not possible to make up the amount. # Initialize dynamic programming table with infinite values for all amounts dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): if dp[x - coin] != float('inf'): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to solve the N Queen problem using backtracking. The N Queen problem is a classic problem in computer science and mathematics that involves placing N queens on an N×N chessboard so that no two queens threaten each other. A queen can be threatened by another queen if it is in the same row, column, or diagonal.","solution":"def solve_n_queens(n): def is_not_under_attack(row, col): for prev_row in range(row): if (cols[prev_row] == col or prev_row - cols[prev_row] == row - col or prev_row + cols[prev_row] == row + col): return False return True def place_queen(row=0): if row == n: solutions.append(cols[:]) return for col in range(n): if is_not_under_attack(row, col): cols[row] = col place_queen(row + 1) solutions = [] cols = [-1] * n place_queen() return solutions def print_solutions(n, solutions): board = [] for solution in solutions: new_board = [] for i in range(n): row = [\\".\\"] * n row[solution[i]] = \\"Q\\" new_board.append(\\"\\".join(row)) board.append(new_board) return board"},{"question":"Write a function to find the sum of all numbers in an array of integers, including handling negative numbers and zeros.","solution":"def sum_array(numbers): Returns the sum of all numbers in an array of integers. return sum(numbers)"},{"question":"Write a function to convert a given string to its corresponding ASCII value sum. The function should take a string as input and return the sum of the ASCII values of all characters in the string. If the string is empty, the function should return 0.","solution":"def ascii_value_sum(s): Returns the sum of ASCII values of all characters in the given string. :param s: Input string :return: Sum of ASCII values of characters return sum(ord(char) for char in s)"},{"question":"Write a function to determine the minimum number of toggles needed to make a binary string alternate. A toggle means changing a '0' to a '1' or vice versa. The function should take a single binary string as input and return an integer representing the minimum number of toggles required.","solution":"def min_toggles_to_alternate(s): Returns the minimum number of toggles needed to make a binary string alternate. toggles_01 = 0 toggles_10 = 0 for i, char in enumerate(s): expected_01 = '0' if i % 2 == 0 else '1' expected_10 = '1' if i % 2 == 0 else '0' if char != expected_01: toggles_01 += 1 if char != expected_10: toggles_10 += 1 return min(toggles_01, toggles_10)"},{"question":"Write a function to find the maximum sum of a contiguous subarray in a given one-dimensional array of integers. This is known as Kadane's Algorithm. You should implement this algorithm in a self-contained manner with clear comments.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray in a given array of integers using Kadane's Algorithm. Parameters: nums (List[int]): List of integers Returns: int: Maximum sum of a contiguous subarray if not nums: return 0 max_ending_here = max_so_far = nums[0] for x in nums[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to reverse a string in Python, but in a way that it only reverses the words in a sentence and leaves the punctuation intact at its position. For instance, \\"hello, world!\\" should become \\"world, hello!\\" and \\"Python, programming!\\" should become \\"programming, Python!\\".","solution":"import re def reverse_words_in_sentence(sentence): Reverses the words in a sentence while keeping the punctuation intact. words = re.findall(r'bw+b', sentence) non_word_parts = re.split(r'bw+b', sentence) reversed_words = words[::-1] reversed_sentence = ''.join( part + (reversed_words[i] if i < len(reversed_words) else '') for i, part in enumerate(non_word_parts) ) return reversed_sentence"},{"question":"Write a function to find the largest possible sum of a contiguous subarray within a given one-dimensional array of numbers. Also, identify the starting and ending index of this subarray.","solution":"def max_subarray_sum(arr): Finds the largest possible sum of a contiguous subarray within a given one-dimensional array of numbers, also returns the starting and ending indices of this subarray. Parameters: arr (list): Input list of numbers. Returns: tuple: A tuple containing a tuple of two integers (start index, end index), and the largest sum. if not arr: return (0, 0), 0 max_sum = cur_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if cur_sum < 0: cur_sum = arr[i] s = i else: cur_sum += arr[i] if cur_sum > max_sum: max_sum = cur_sum start = s end = i return (start, end), max_sum"},{"question":"Write a function to generate the nth Fibonacci number. However, you should avoid brute force methods that lead to high time complexity. Instead, you should implement a more efficient approach that utilizes memoization or dynamic programming. Your solution should be optimized to handle large values of n efficiently.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. Parameters: n (int): The position in the Fibonacci sequence (0-based) memo (dict): The dictionary to store previously calculated Fibonacci numbers Returns: int: The nth Fibonacci number if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a given 2D array (matrix). The function should return the maximum sum found. If the entire matrix is negative, return the largest negative number.","solution":"def max_sum_submatrix(matrix): Find the maximum sum of a contiguous subarray within a given 2D array (matrix). :param matrix: List[List[int]] -- 2D list of integers :return: int -- Maximum sum of contiguous subarray if not matrix or not matrix[0]: return 0 def max_subarray_sum(arr): Helper function to find the maximum sum of a contiguous subarray in a 1D array. max_so_far = arr[0] max_ending_here = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far rows, cols = len(matrix), len(matrix[0]) max_sum = float('-inf') # Use Kadane's Algorithm for 2D arrays for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_sum = max(max_sum, max_subarray_sum(temp)) return max_sum"},{"question":"Write a function to implement a Depth First Search (DFS) traversal of a graph using a stack. The function should support both iterative and recursive approaches.","solution":"def dfs_iterative(graph, start): Perform Depth First Search (DFS) iteratively using a stack. :param graph: dict, adjacency list representing the graph :param start: Starting node for the DFS traversal :return: list, nodes in the order they are visited visited = set() stack = [start] result = [] while stack: node = stack.pop() if node not in visited: visited.add(node) result.append(node) # add neighbors to the stack stack.extend(reversed(graph[node])) # reverse to maintain order as in stack return result def dfs_recursive(graph, start, visited=None, result=None): Perform Depth First Search (DFS) recursively. :param graph: dict, adjacency list representing the graph :param start: Starting node for the DFS traversal :param visited: set to keep track of visited nodes :param result: list to store the order of visiting nodes :return: list, nodes in the order they are visited if visited is None: visited = set() if result is None: result = [] visited.add(start) result.append(start) for neighbor in graph[start]: if neighbor not in visited: dfs_recursive(graph, neighbor, visited, result) return result"},{"question":"Write a function to interpret the value in a 2D array and return its corresponding color name based on the value.","solution":"def value_to_color(value): Maps a numeric value to its corresponding color name. color_map = { 0: 'Black', 1: 'White', 2: 'Red', 3: 'Green', 4: 'Blue', 5: 'Yellow' } return color_map.get(value, 'Unknown') def interpret_2D_array(array): Interprets a 2D array of numeric values, translating each value into its corresponding color name. return [[value_to_color(value) for value in row] for row in array]"},{"question":"Write a function to find the shortest path in a 2D grid using Breadth-First Search (BFS). The grid contains obstacles represented by '1' and empty spaces represented by '0'. You can only move up, down, left, or right.","solution":"from collections import deque def shortest_path_bfs(grid): Finds the shortest path in a 2D grid using Breadth-First Search (BFS). Parameters: grid (list of list of int): 2D grid where '0' represents an empty space and '1' represents an obstacle. Returns: int: Length of the shortest path from the top-left corner to the bottom-right corner. Returns -1 if no path is found. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: row, col, distance = queue.popleft() if row == rows - 1 and col == cols - 1: return distance for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: queue.append((new_row, new_col, distance + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Write a function to solve the following puzzle: Find the largest sum of a contiguous subarray within a one-dimensional array of numbers.","solution":"def max_subarray_sum(arr): Finds the largest sum of a contiguous subarray within a one-dimensional array of numbers. if not arr: return 0 max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to check if a given array can be partitioned into three parts with equal sum.","solution":"def can_partition_into_three_equal_sum(arr): Returns True if the array can be partitioned into three parts with equal sum, otherwise returns False. array_sum = sum(arr) # If the total sum is not divisible by 3, we cannot partition into 3 equal parts if array_sum % 3 != 0: return False target_sum = array_sum // 3 current_sum = 0 count = 0 for num in arr: current_sum += num if current_sum == target_sum: current_sum = 0 count += 1 if count == 3: return True return False"},{"question":"Write a function to construct a binary search tree (BST) from a sorted array. The function should take a sorted array as input and return the root of the BST. Additionally, the function should handle duplicates in the array by inserting them into the BST in such a way that all nodes with the same value are placed in the left subtree of the node with that value.","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def sorted_array_to_bst(array): Constructs a BST from a sorted array. Duplicates are inserted in the left subtree of the node with that value. :param array: List[int] - A sorted array :return: TreeNode - The root of the constructed BST def construct_bst(left, right): if left > right: return None mid = (left + right) // 2 node = TreeNode(array[mid]) # Constructing the left and right subtrees node.left = construct_bst(left, mid - 1) node.right = construct_bst(mid + 1, right) return node return construct_bst(0, len(array) - 1)"},{"question":"Write a function to check if two sentences are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your function should return \`True\` if the sentences are anagrams, and \`False\` otherwise.","solution":"def are_anagrams(sentence1, sentence2): Check if two sentences are anagrams. Args: sentence1 (str): The first sentence to check. sentence2 (str): The second sentence to check. Returns: bool: True if the sentences are anagrams, False otherwise. # Remove spaces and make lowercase for both sentences normalized_sentence1 = ''.join(sentence1.split()).lower() normalized_sentence2 = ''.join(sentence2.split()).lower() # If lengths are different, they cannot be anagrams if len(normalized_sentence1) != len(normalized_sentence2): return False # Sort the characters and compare return sorted(normalized_sentence1) == sorted(normalized_sentence2)"},{"question":"Write a function to calculate the sum of all unique divisors of a given number. For example, the number 10 has divisors 1, 2, 5, and 10, so the function would return 18.","solution":"def sum_of_unique_divisors(n): Returns the sum of all unique divisors of a given number n. divisors = {1, n} for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors.add(i) divisors.add(n // i) return sum(divisors)"},{"question":"Write a function to understand the following behavior: You have a list that always contains both positive and negative integers and can contain many zeros. We have a counter that starts at 0. For each positive integer, we increment the counter by 1, for each zero, we keep the same counter value, and for each negative integer, we decrement the counter by 1. Your function should simulate this and return the final counter value after processing the list.","solution":"def calculate_counter(lst): Simulates the counter behavior described: - Increment the counter by 1 for each positive integer - Keep the same counter value for each zero - Decrement the counter by 1 for each negative integer Args: lst: List of integers containing positive, negative integers and zeroes. Returns: The final value of the counter after processing the list. counter = 0 for num in lst: if num > 0: counter += 1 elif num < 0: counter -= 1 # For zero, no change is required return counter"},{"question":"Write a function to reversed a linked list recursively.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list_recursively(node): Reverse a linked list recursively. if node is None or node.next is None: return node rest = reverse_linked_list_recursively(node.next) node.next.next = node node.next = None return rest"},{"question":"Write a function to determine the number of unique characters in a given string. The function should reject strings containing more than 100 characters. If the string is valid, the function should return the count of unique characters in the string. If the string contains more than 100 characters, the function should return -1.","solution":"def count_unique_characters(s): Returns the number of unique characters in a given string. Returns -1 if the string contains more than 100 characters. if len(s) > 100: return -1 return len(set(s))"},{"question":"Write a function to find the number of distinct paths from the top-left corner to the bottom-right corner in a grid of size m x n, considering obstacles. The grid is represented by a 2D list where 0 represents an empty cell and 1 represents an obstacle.","solution":"def unique_paths_with_obstacles(obstacle_grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner in a grid with obstacles. :param obstacle_grid: List[List[int]] representing the grid with obstacles where 1 is an obstacle and 0 is free space m = len(obstacle_grid) n = len(obstacle_grid[0]) if obstacle_grid[0][0] == 1 or obstacle_grid[m-1][n-1] == 1: return 0 # Create a 2D dp array initially filled with 0 dp = [[0 for _ in range(n)] for _ in range(m)] # Initialize the starting point dp[0][0] = 1 # Fill the first row for j in range(1, n): if obstacle_grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the first column for i in range(1, m): if obstacle_grid[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): if obstacle_grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function to return the length of the longest substring without repeating characters in a string \`s\`.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the given string s. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function to calculate the shortest path in a weighted graph using Dijkstra's algorithm. The graph is represented as an adjacency list where the keys are node labels and the values are lists of tuples representing the neighbor nodes and the corresponding edge weights.","solution":"import heapq def dijkstra(graph, start): Calculates the shortest paths in a weighted graph using Dijkstra's algorithm. Args: graph (dict): Adjacency list representing the weighted graph. Key is the node, and value is a list of tuples (neighbor, weight). start (str): The starting node for the shortest path calculation. Returns: dict: Shortest path distances from start to all other nodes. # Priority queue to store (distance, node) pairs pq = [(0, start)] # Distances dictionary to store the shortest path distances distances = {start: 0} # Set of visited nodes visited = set() while pq: # Get the node with the smallest distance current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph.get(current_node, []): distance = current_distance + weight # If the calculated distance is less than the known distance, update and push to pq if distance < distances.get(neighbor, float('inf')): distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances"},{"question":"Write a function to flatten a binary tree passed in as the first argument. Your function should return the root of the flattened tree to keep it as a binary tree and not as a list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flattens a binary tree into a \\"linked list\\" in-place using the right pointers. def flatten_tree(node): if not node: return None if not node.left and not node.right: return node left_tail = flatten_tree(node.left) right_tail = flatten_tree(node.right) if left_tail: left_tail.left = None # Flatten the left tail left_tail.right = node.right node.right = node.left node.left = None return right_tail if right_tail else left_tail flatten_tree(root)"},{"question":"Write a function to check the strength of a password. The password is considered strong if it contains at least one uppercase letter, one lowercase letter, one digit, and one special character. The minimum length of the password is 8 characters.","solution":"import re def check_password_strength(password): Check if the password is strong. A strong password must: - Be at least 8 characters long - Contain at least one uppercase letter - Contain at least one lowercase letter - Contain at least one digit - Contain at least one special character if len(password) < 8: return False if not re.search(r\\"[A-Z]\\", password): return False if not re.search(r\\"[a-z]\\", password): return False if not re.search(r\\"d\\", password): return False if not re.search(r\\"[!@#%^&*(),.?\\":{}|<>]\\", password): return False return True"},{"question":"Write a function to find the mode of an array. The mode is the element that appears most frequently in the array. If the array has multiple modes, return all of them.","solution":"from collections import Counter def find_mode(arr): Returns the mode(s) of an array. If multiple elements share the highest frequency, all are returned. if not arr: return [] count = Counter(arr) max_freq = max(count.values()) modes = [k for k, v in count.items() if v == max_freq] return modes"},{"question":"Write a function to convert a binary tree to a doubly linked list. The function should return the head of the doubly linked list and the node right after the last node of the linked list. This means that the last node should have its next pointer set to None, but its prev pointer should point to the list head.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class DoublyLinkedListNode: def __init__(self, val=0, prev=None, next=None): self.val = val self.prev = prev self.next = next def binary_tree_to_doubly_linked_list(root): Converts a binary tree to a doubly linked list in-place. Returns the head of the doubly linked list and the node right after the last node. if not root: return None, None # Helper function to convert the tree to doubly linked list def convert(node): nonlocal head, prev_node if not node: return # Convert the left subtree convert(node.left) # Now convert the current node dll_node = DoublyLinkedListNode(node.val) if prev_node is None: head = dll_node else: dll_node.prev = prev_node prev_node.next = dll_node prev_node = dll_node # Convert the right subtree convert(node.right) head = None prev_node = None convert(root) if head and prev_node: head.prev = prev_node prev_node.next = head # disconnect the last node's next to maintain the integrity of the doubly linked list prev_node.next = None return head, prev_node"},{"question":"Write a function to find the \\"k\\" most frequent elements in a given array. For example, given the array [1, 1, 1, 2, 2, 3] and k = 2, the function should return [1, 2] as these are the two most frequent elements.","solution":"from collections import Counter import heapq def top_k_frequent_elements(arr, k): Finds the k most frequent elements in the given array. Parameters: arr (list): The input array. k (int): The number of most frequent elements to return. Returns: list: The list of k most frequent elements. if not arr or k <= 0: return [] count = Counter(arr) return heapq.nlargest(k, count.keys(), key=count.get)"},{"question":"Write a function to find the frequency of each character in a string and return the result as a dictionary. The function should drop all spaces and be case-insensitive. Here is a string \\"Hello World\\". The function should output \`{ 'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1 }\`.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the given string \`s\`. Spaces are dropped and the function is case-insensitive. frequency = {} for char in s: if char != ' ': char = char.lower() if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a function to reverse the order of elements in a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the order of elements in a linked list. Parameters: head (ListNode): The head node of the linked list to be reversed. Returns: ListNode: The head node of the reversed linked list. prev = None current = head while current: next_node = current.next # Store the next node current.next = prev # Reverse the link prev = current # Move prev to current node current = next_node # Move to the next node head = prev # Update the head to the new front return head"},{"question":"Write a function to generate all possible permutations of the characters in a given string. The function should be named \`generatePermutations\` and accept a single string parameter. It should return a list of all possible permutations of the characters in the form of a list of strings.","solution":"from itertools import permutations def generatePermutations(s): Generates all possible permutations of the characters in the given string. Args: s (str): The input string. Returns: list: A list of all possible permutations of the characters in the string. perm_tuples = permutations(s) perm_list = [''.join(p) for p in perm_tuples] return perm_list"},{"question":"Write a function to swap two numbers without using a third variable in Python.","solution":"def swap(a, b): Swaps two numbers without using a third variable and returns the swapped values. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a function to create a binary search tree from a list of keys. The function should return the root of the binary search tree.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None def insert(root, key): Inserts a key into the BST. if root is None: return TreeNode(key) if key < root.key: root.left = insert(root.left, key) else: root.right = insert(root.right, key) return root def create_bst_from_list(keys): Creates a BST from a list of keys and returns the root. root = None for key in keys: root = insert(root, key) return root"},{"question":"Write a function to find the sum of all odd numbers from 1 to n.","solution":"def sum_of_odds(n): Returns the sum of all odd numbers from 1 to n. return sum(i for i in range(1, n+1) if i % 2 != 0)"},{"question":"Write a function to generate a sequence of numbers starting from 1 and ending at n with a step of -2. Using list comprehension.","solution":"def generate_sequence(n): Generates a sequence of numbers starting from 1 and ending at n with a step of -2. return [i for i in range(n, 0, -2)]"},{"question":"Write a function to sort a linked list using the merge sort algorithm. Ensure that the function can handle the sorting of large, unsorted lists efficiently.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort(head): if not head or not head.next: return head # Split the linked list into halves def split_list(head): slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None return head, mid # Merge two sorted linked lists def merge(l1, l2): dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 or l2 return dummy.next l1, l2 = split_list(head) sorted_l1 = merge_sort(l1) sorted_l2 = merge_sort(l2) return merge(sorted_l1, sorted_l2)"},{"question":"Write a function to reverse the order of words in a given sentence while maintaining the original spaces. For example, \\"Hello world\\" -> \\"world Hello\\".","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence while maintaining the original spaces. :param sentence: str, The input sentence string. :return: str, The sentence with the order of words reversed. words = sentence.split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Write a function to check if a given number is a perfect cube. A number is a perfect cube if there exists an integer such that the integer raised to the power of three equals the number.","solution":"def is_perfect_cube(n): Returns True if n is a perfect cube, otherwise returns False. if n < 0: cube_root = round(abs(n) ** (1/3)) * -1 else: cube_root = round(n ** (1/3)) return cube_root ** 3 == n"},{"question":"Write a function to calculate the factorial of a given number. The function should handle both positive and negative numbers, and raise an appropriate exception if the input is not a number. The function should also handle large numbers efficiently using a loop to avoid memory issues.","solution":"def factorial(n): Calculate the factorial of a given number. Parameters: n (int): The number to calculate the factorial for. Must be an integer. Returns: int: The factorial of the number. Raises: ValueError: If n is a negative number. TypeError: If n is not an integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to find the minimum absolute difference between any two numbers in a given array of integers.","solution":"def minimum_abs_difference(arr): Returns the minimum absolute difference between any two numbers in a given array of integers. if len(arr) < 2: return 0 # If array has less than two elements, there's no pair to compare. # Sort the array arr.sort() # Initialize the minimum difference with a large number min_diff = float('inf') # Traverse the sorted array and update the minimum difference for i in range(len(arr) - 1): diff = abs(arr[i] - arr[i + 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Write a function to calculate the area of a rectangle given its width and height. The function should handle both integer and floating-point inputs and return the area as a floating-point number.","solution":"def rectangle_area(width, height): Calculate the area of a rectangle given its width and height. Parameters: width (float): The width of the rectangle. height (float): The height of the rectangle. Returns: float: The area of the rectangle. return float(width * height)"},{"question":"Write a function to return the index of the first occurrence of the target value in a linked list. If the target is not found, return -1.","solution":"class ListNode: Node class for a singly linked list. def __init__(self, value=0, next=None): self.value = value self.next = next def find_target_index(head, target): Returns the index of the first occurrence of the target value in the linked list. If the target is not found, returns -1. index = 0 current = head while current is not None: if current.value == target: return index current = current.next index += 1 return -1"},{"question":"Write a function to compute the average of a list of numbers in Python. The function should handle cases where the list may be empty, returning a zero in such cases. Ensure your code is clean, well-commented, and adheres to Pythonic principles.","solution":"def compute_average(numbers): Returns the average of a list of numbers. If the list is empty, returns 0. :param numbers: A list of numbers (integers or floats) :return: The average of the numbers or 0 if the list is empty if not numbers: return 0 total_sum = sum(numbers) count = len(numbers) return total_sum / count"},{"question":"Write a function to find and return the maximum number in a given list. If the list is empty, return \`None\`.","solution":"def find_max(numbers): Returns the maximum number in a given list. If the list is empty, return None. :param numbers: List of numbers :return: Maximum number or None if list is empty if not numbers: return None return max(numbers)"},{"question":"Write a function to implement Quick Sort algorithm that sorts an array in descending order.","solution":"def quick_sort_descending(arr): Implements Quick Sort algorithm to sort an array in descending order. if len(arr) <= 1: return arr else: pivot = arr[0] greater = [x for x in arr[1:] if x >= pivot] lesser = [x for x in arr[1:] if x < pivot] return quick_sort_descending(greater) + [pivot] + quick_sort_descending(lesser)"},{"question":"Write a function to compute the Fibonacci sequence up to a given number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. The function should return the sequence as a list.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to n numbers as a list. if n <= 0: return [] elif n == 1: return [0] seq = [0, 1] while len(seq) < n: seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Write a function to calculate the sum of the digits of a given non-negative integer. If the number contains any digit that is not a prime number (i.e., 4, 6, 8, 9), return \\"Invalid Input\\". Otherwise, return the sum of the prime digits (2, 3, 5, 7).","solution":"def sum_of_prime_digits(n): Calculates the sum of prime digits in the given non-negative integer. If the number contains any non-prime digit (4, 6, 8, 9), returns \\"Invalid Input\\". :param n: Non-negative integer :return: Sum of prime digits or \\"Invalid Input\\" string prime_digits = {2, 3, 5, 7} sum_primes = 0 for digit in str(n): digit = int(digit) if digit in prime_digits: sum_primes += digit else: return \\"Invalid Input\\" return sum_primes"},{"question":"Write a function to implement a Caesar cipher. The function should take a string and an integer representing the shift amount and return the encrypted string. The Caesar cipher shifts each letter in the string by the number of positions in the alphabet. If the shift goes past 'z', it wraps around to the beginning of the alphabet. For example, shifting 'z' by 1 results in 'a'. Make sure to handle both uppercase and lowercase letters.","solution":"def caesar_cipher(text, shift): Encrypts the given text using Caesar cipher with the provided shift. Parameters: text (str): The input text to be encrypted. shift (int): The number of positions each letter in the text is to be shifted. Returns: str: The encrypted text. result = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) result.append(encrypted_char) else: result.append(char) return ''.join(result)"},{"question":"Write a function to calculate the factorial of a number using iteration. The function should take an integer \`n\` as an argument and return the factorial of \`n\`.","solution":"def factorial(n): Returns the factorial of the given integer n using iteration. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to find the second largest number in a list. If the list has less than two unique numbers, the function should return None.","solution":"def second_largest(numbers): Returns the second largest unique number in the list. If the list has less than two unique numbers, return None. if len(set(numbers)) < 2: return None first, second = float('-inf'), float('-inf') for num in numbers: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a function to find the largest sum contiguous subarray using Kadane's algorithm and dynamic programming.","solution":"def max_subarray_sum(nums): Returns the largest sum of contiguous subarray using Kadane's algorithm. Parameters: nums (list): List of integers Returns: int: The maximum sum of the contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the binary representation of the sum of two integers. The function should take two integers as inputs and return their sum as a binary string. If the sums exceeds 2, the binary representation should start from the least significant bit (rightmost bit). If the sums exceeds 4, the binary representation should start from the second least significant bit, and so on. For example, if the sums is 5, it should return '1101'. If the sum is 10, it should return '1010'.","solution":"def sum_to_binary(a, b): Takes two integers, sums them, and returns the binary representation of the sum. total_sum = a + b if total_sum > 0: return bin(total_sum)[2:] else: return '0'"},{"question":"Write a function to determine the longest common prefix of two strings. If there is no common prefix, return an empty string \\"\\".","solution":"def longest_common_prefix(str1, str2): Determines the longest common prefix of two strings. If there is no common prefix, returns an empty string \\"\\". min_len = min(len(str1), len(str2)) common_prefix = [] for i in range(min_len): if str1[i] == str2[i]: common_prefix.append(str1[i]) else: break return ''.join(common_prefix)"},{"question":"Write a function to create a Fibonacci sequence up to a given number n. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should take an integer \`n\` as input and return a list containing the Fibonacci sequence up to \`n\` (inclusive).","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to a given number n (inclusive). if n < 0: return [] if n == 0: return [0] sequence = [0, 1] while sequence[-1] + sequence[-2] <= n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to output the numbers 1 through 100, but instead of using a loop, use recursion to achieve this. How would you implement this function in Python? Would it be possible without recursion? What challenges might you encounter with the recursive approach?","solution":"def print_numbers_recursive(n=1): Recursively prints numbers from 1 to 100. if n > 100: return print(n) print_numbers_recursive(n + 1)"},{"question":"Write a function to return a list containing the first n Fibonacci numbers.","solution":"def fibonacci(n): Returns a list containing the first n Fibonacci numbers. if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Write a function to find the union of two lists of integers. The union of two lists is a list containing all the unique elements that appear in either of the lists.","solution":"def union_lists(list1, list2): Returns the union of two lists, containing all unique elements. return list(set(list1) | set(list2))"},{"question":"Write a function to validate a given credit card number using the Luhn algorithm. The function should take a string of digits as input and return \`true\` if the number is valid according to the Luhn algorithm, and \`false\` otherwise.","solution":"def luhn_algorithm(card_number: str) -> bool: Validate a given credit card number using the Luhn algorithm. Parameters: card_number (str): A string containing the credit card number. Returns: bool: True if the card number is valid, False otherwise. card_number = card_number.replace(' ', '') # Remove any spaces from the input if not card_number.isdigit(): return False total = 0 num_digits = len(card_number) parity = num_digits % 2 for i in range(num_digits): digit = int(card_number[i]) if i % 2 == parity: digit = digit * 2 if digit > 9: digit = digit - 9 total += digit return total % 10 == 0"},{"question":"Write a function to perform a breadth-first search (BFS) on a 2D grid. The grid contains walls represented by '1' and open spaces represented by '0'. The function should return the minimum number of steps required to traverse all open spaces from the starting point. If it's not possible to traverse all open spaces, the function should return -1.","solution":"from collections import deque def bfs_min_steps(grid, start): Perform BFS on a 2D grid to find the minimum steps required to traverse all open spaces. :param grid: List[List[str]], 2D grid with '1' as walls and '0' as open spaces :param start: Tuple[int, int], starting point coordinates (x, y) :return: int, minimum steps to traverse all open spaces or -1 if not possible rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] queue = deque([(start[0], start[1], 0)]) # (x, y, steps) visited[start[0]][start[1]] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] open_spaces = sum(row.count('0') for row in grid) traversed_spaces = 0 while queue: x, y, steps = queue.popleft() traversed_spaces += 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] == '0': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return steps if traversed_spaces == open_spaces else -1"},{"question":"Write a function to calculate the sum of all elements in a given 2D array. The function should take a 2D array (list of lists in Python) as input and return the sum of all its elements.","solution":"def sum_2d_array(array_2d): Returns the sum of all elements in the given 2D array. total_sum = 0 for row in array_2d: total_sum += sum(row) return total_sum"},{"question":"Write a function to find the shortest path from a source node to a destination node in an unweighted graph represented as an adjacency list. The function should use the Breadth First Search (BFS) algorithm to accomplish this.","solution":"from collections import deque def bfs_shortest_path(graph, start, goal): Finds the shortest path in an unweighted graph from start node to goal node using BFS algorithm. :param graph: dict, adjacency list representing the graph :param start: any, starting node :param goal: any, goal node :return: list, shortest path from start to goal or an empty list if no path exists if start == goal: return [start] queue = deque([(start, [start])]) # queue storing tuples of (current_node, path_to_current_node) visited = set() while queue: current_node, path = queue.popleft() if current_node in visited: continue visited.add(current_node) for neighbor in graph.get(current_node, []): if neighbor == goal: return path + [neighbor] # Shortest path found queue.append((neighbor, path + [neighbor])) return [] # No path found"},{"question":"Write a function to find the combination of items that can be purchased for the minimum amount of money. If there are multiple combinations that can be purchased for the same minimum amount of money, your function should return any of them. Consider items to be in the form of \`[item_value, item_price]\` where \`item_value\` is the value of the item and \`item_price\` is the price of the item.","solution":"from itertools import combinations def minimum_purchase_combination(items): Finds the combination of items that can be purchased for the minimum amount of money. Parameters: items (list of [int, int]): A list of [item_value, item_price] pairs. Returns: list of [int, int]: A combination of items with the minimum total price. min_total_price = float('inf') best_combination = [] # Generate all possible combinations of items for r in range(1, len(items) + 1): for combo in combinations(items, r): total_price = sum(item[1] for item in combo) if total_price < min_total_price: min_total_price = total_price best_combination = combo return list(best_combination)"},{"question":"Write a function to reverse a doubly Linked List.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def reverse(self): current = self.head temp = None while current: temp = current.prev current.prev = current.next current.next = temp current = current.prev if temp: self.head = temp.prev def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Write a function to find a subarray with the largest sum from an array of integers. Explain your approach and provide a code snippet in Python.","solution":"def max_subarray_sum(arr): Finds the subarray with the largest sum in the given array. Parameters: arr (list of ints): The input array of integers. Returns: int: The sum of the subarray with the largest sum. if not arr: return 0 # If the array is empty, return 0. # Initialize with the first element current_max_sum = global_max_sum = arr[0] for num in arr[1:]: current_max_sum = max(num, current_max_sum + num) global_max_sum = max(global_max_sum, current_max_sum) return global_max_sum"},{"question":"Write a function to return the left most node in a binary tree","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_leftmost_node(root): Returns the value of the leftmost node in a binary tree. if not root: return None current = root while current.left: current = current.left return current.val"},{"question":"Write a function to calculate the sum of all even numbers in a given array. What is the best way to do it?","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in a given array. Parameters: arr (list of int): The input array containing integers. Returns: int: The sum of all even numbers in the array. return sum(x for x in arr if x % 2 == 0)"},{"question":"Write a function to convert a binary number to its decimal equivalent and vice versa. You should handle both integer inputs and binary inputs and return the equivalent in the other format.","solution":"def binary_to_decimal(binary): Converts a binary string to its decimal equivalent. return int(binary, 2) def decimal_to_binary(decimal): Converts a decimal number to its binary string equivalent. return bin(decimal)[2:]"},{"question":"Write a function to find the maximum product of two numbers in a given list of integers. The list can contain both positive and negative numbers, and may also include zeros. The function should return the maximum product that can be obtained by multiplying any two different numbers from the list. If the list contains fewer than two numbers, the function should return None.","solution":"def max_product(nums): Returns the maximum product of any two different numbers from the list. If the list contains fewer than two numbers, returns None. if len(nums) < 2: return None nums.sort() # The maximum product can be either from the two largest numbers # or from the two smallest (most negative) numbers. max_product_1 = nums[-1] * nums[-2] max_product_2 = nums[0] * nums[1] return max(max_product_1, max_product_2)"},{"question":"Write a function to find the next minimum element in an array after a given index. If the next minimum element is not found, return -1. The function should not reuse elements from the array.","solution":"def next_minimum(arr, index): Returns the next minimum element in the array after a given index. If the next minimum element is not found, return -1. The function should not reuse elements from the array. if index < 0 or index >= len(arr) - 1: return -1 current_min = float('inf') found = False for i in range(index + 1, len(arr)): if arr[i] < current_min: current_min = arr[i] found = True return current_min if found else -1"},{"question":"Write a function to find the second smallest number in an array. The array can contain negative numbers and duplicates.","solution":"def second_smallest(arr): Returns the second smallest number in the array. If the array has fewer than 2 unique elements, returns None. if not arr or len(arr) < 2: return None first = second = float('inf') for num in arr: if num < first: first, second = num, first elif first < num < second: second = num return second if second != float('inf') else None"},{"question":"Write a function to reverse a given string in Python. You should also handle cases where the string might contain whitespace, digits, and special characters. Your function should preserve the order of these characters as they appear in the original string.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to generate a list of prime numbers within a given range [start, end].","solution":"def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for current in range(3, int(n**0.5) + 1, 2): if n % current == 0: return False return True def generate_primes(start, end): Generate a list of prime numbers within the given range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a function to find the maximum XOR of any two numbers in a given array of non-negative integers.","solution":"def findMaximumXOR(nums): Function to find the maximum XOR of any two numbers in a given array of non-negative integers. :param nums: List[int] - List of non-negative integers :return: int - Maximum XOR value max_xor, mask = 0, 0 for i in range(31, -1, -1): mask |= (1 << i) found_prefixes = set([num & mask for num in nums]) tmp = max_xor | (1 << i) for prefix in found_prefixes: if tmp ^ prefix in found_prefixes: max_xor = tmp break return max_xor"},{"question":"Write a function to generate a list of prime factors of a given number.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Write a function to generate the Fibonacci sequence up to the n-th term. The function should be named \`generate_fibonacci\` and take an integer as its parameter. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def generate_fibonacci(n): Generates the Fibonacci sequence up to the n-th term. Parameters: n (int): The number of terms to generate in the Fibonacci sequence. Returns: List[int]: A list containing the Fibonacci sequence up to the n-th term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibonacci = [0, 1] for i in range(2, n): next_value = fibonacci[-1] + fibonacci[-2] fibonacci.append(next_value) return fibonacci"},{"question":"Write a function to sort a list of strings in lexicographical order.","solution":"def sort_strings_lexicographically(strings): Returns a list of strings sorted in lexicographical order. Parameters: strings (list): A list of strings to be sorted. Returns: list: A list of strings sorted in lexicographical order. return sorted(strings)"},{"question":"Write a function to model the thermometer on a wristwatch that converts the Celsius temperature to Fahrenheit. Given the Celsius temperature, the temperature in Fahrenheit can be calculated using the formula: F = C * 9/5 + 32. Implement the function using Python.","solution":"def celsius_to_fahrenheit(celsius): Converts a temperature from Celsius to Fahrenheit. :param celsius: Temperature in Celsius :type celsius: float :return: Temperature in Fahrenheit :rtype: float return celsius * 9 / 5 + 32"},{"question":"Write a function to calculate the number of permutations of a string without repeating characters.","solution":"from math import factorial def permutations_count(s): Returns the number of permutations of a string without repeating characters. :param s: a string :return: number of permutations (int) return factorial(len(s))"},{"question":"Write a function to find the maximum product of any contiguous subarray within a one-dimensional array of numbers, including negative numbers. The function should be implemented in Python.","solution":"def max_product_subarray(nums): Find the maximum product of any contiguous subarray. :param nums: List[int] - List of integers :return: int - Maximum product of a contiguous subarray if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function to calculate and return the tallest person's height in a given list of heights, using a stack-based approach. The heights are represented as integers, and the list may be empty or contain up to 10,000 heights.","solution":"def find_tallest_height(heights): Returns the tallest height from a list of heights using a stack-based approach. if not heights: return None stack = [] tallest = float('-inf') for height in heights: stack.append(height) while stack: current_height = stack.pop() if current_height > tallest: tallest = current_height return tallest"},{"question":"Write a function to calculate the sum of the squares of the first N natural numbers where N is a positive integer input by the user. The function should have a time complexity of O(1) and a space complexity of O(1).","solution":"def sum_of_squares(N): Returns the sum of the squares of the first N natural numbers. The formula for the sum of squares of the first N natural numbers is: sum = N * (N + 1) * (2N + 1) // 6 if N <= 0: raise ValueError(\\"N should be a positive integer.\\") return N * (N + 1) * (2 * N + 1) // 6"},{"question":"Write a function to calculate the length of the longest palindrome that can be built with the letters of the given string. The input is a string \`s\` consisting of lowercase English letters. The function should return an integer representing the length of the longest palindrome that can be built.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be built with the letters of the given string s. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True # If an odd count is found, one odd letter can be placed in the center. return length + 1 if odd_found else length"},{"question":"Write a function to calculate the sum of all numbers in a given list. If the list is empty, return 0. If the list contains any negative numbers, the function should only sum the non-negative numbers. If the list contains any non-integer values, the function should skip those and sum only the integers.","solution":"def sum_non_negative_integers(numbers): Returns the sum of all non-negative integer values in a list. If the list is empty, returns 0. Ignores negative or non-integer values. return sum(num for num in numbers if isinstance(num, int) and num >= 0)"},{"question":"Write a function to check if a number is a palindrome without converting it to a string. How would you approach this problem and solve it in Python?","solution":"def is_palindrome_number(x): Returns True if x is a palindrome number, otherwise False. A palindrome number reads the same backward as forward. if x < 0: return False original_x = x reversed_x = 0 while x > 0: last_digit = x % 10 reversed_x = reversed_x * 10 + last_digit x = x // 10 return original_x == reversed_x"},{"question":"Write a function to calculate the new volume of a rectangular prism after scaling its dimensions. Given the original dimensions of the rectangular prism (length, width, height), and the scaling factors for each dimension, write a function that returns the new volume of the prism.","solution":"def calculate_scaled_volume(length, width, height, scale_length, scale_width, scale_height): Returns the new volume of the rectangular prism after scaling its dimensions. Parameters: length (float): The original length of the rectangular prism. width (float): The original width of the rectangular prism. height (float): The original height of the rectangular prism. scale_length (float): The scaling factor for length. scale_width (float): The scaling factor for width. scale_height (float): The scaling factor for height. Returns: float: The new volume of the rectangular prism. new_length = length * scale_length new_width = width * scale_width new_height = height * scale_height new_volume = new_length * new_width * new_height return new_volume"},{"question":"Write a function to check if a list of numbers is sorted in ascending order. If there are any two successive numbers that are not in ascending order, the function should return the indices where the sorting stops. Otherwise, it should return -1 indicating the list is sorted.","solution":"def check_sorted(lst): Checks if a list of numbers is sorted in ascending order. Args: lst (list): The list to check. Returns: int or tuple: -1 if the list is sorted, otherwise a tuple (i, i+1) indicating the indices where the sorting stops. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return (i, i + 1) return -1"},{"question":"Write a function to convert a binary tree to a string serializing and deserializing a binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def serialize(root): Encodes a binary tree to a single string. if not root: return 'None' return f\\"{root.val},{serialize(root.left)},{serialize(root.right)}\\" def deserialize(data): Decodes your encoded data to tree. def helper(node_list): if node_list[0] == 'None': node_list.pop(0) return None root = TreeNode(int(node_list[0])) node_list.pop(0) root.left = helper(node_list) root.right = helper(node_list) return root node_list = data.split(',') return helper(node_list)"},{"question":"Write a function to find the shortest path between two nodes in a Directed Acyclic Graph (DAG). You should use Depth-First Search (DFS) to traverse the graph.","solution":"def find_shortest_path_dag(graph, start, end): Finds the shortest path between two nodes in a DAG using DFS. Parameters: - graph: Dictionary representation of a DAG where keys are node labels and values are lists of (neighbour, weight) tuples. - start: The starting node for the path. - end: The target node for the path. Returns: - shortest_path: List of nodes representing the shortest path from start to end. - shortest_distance: The total distance of the shortest path. def dfs(node, target, path, distance): nonlocal shortest_path, shortest_distance # If we reach the target node if node == target: if distance < shortest_distance: shortest_distance = distance shortest_path = path[:] return # Explore the neighbors of the current node for neighbor, weight in graph.get(node, []): if neighbor not in visited: visited.add(neighbor) dfs(neighbor, target, path + [neighbor], distance + weight) visited.remove(neighbor) shortest_path = [] shortest_distance = float('inf') visited = set() visited.add(start) dfs(start, end, [start], 0) return shortest_path, shortest_distance"},{"question":"Write a function to determine the number of elements in a list that are not multiples of 3. The function should also return the minimum value among those elements in the list.","solution":"def count_and_min_non_multiples_of_three(lst): This function returns the number of elements in the list that are not multiples of 3 and the minimum value among those non-multiples. Parameters: lst (list): A list of integers Returns: tuple: A tuple containing the count of non-multiples of 3 and the minimum value among those. If there are no non-multiples of 3, return (0, None). non_multiples = [x for x in lst if x % 3 != 0] if non_multiples: return (len(non_multiples), min(non_multiples)) else: return (0, None)"},{"question":"Write a function to remove duplicates from a list of integers in place, ensuring the order of elements is preserved. Use extra space from constant space, meaning you cannot use additional data structures like lists or sets with a size larger than the initial list.","solution":"def remove_duplicates(nums): Removes duplicates from a list of integers in place while preserving the order of elements. if not nums: return nums write_index = 1 # Start writing from the second position for i in range(1, len(nums)): # Only write to the write_index if it's different from the previous elements if nums[i] != nums[write_index - 1]: nums[write_index] = nums[i] write_index += 1 # Trimming the list to contain only the non-duplicate elements while len(nums) > write_index: nums.pop() return nums"},{"question":"Write a function to compute the sum of numbers within a list using Python. The function should handle lists with both positive and negative integers. Here is a sample list: \`[1, -2, 3, 4, -5]\`. The function should return the total sum of the numbers. If the list is empty, the function should return 0.","solution":"def sum_of_list(numbers): Returns the sum of numbers within a list. Parameters: numbers (list): A list of integers (both positive and negative) Returns: int: The sum of the integers in the list. If the list is empty, returns 0. return sum(numbers)"},{"question":"Write a function to sum the digits of a given non-negative integer. The function should return the sum as an integer. For example, if the input number is 123, the function should return 6.","solution":"def sum_of_digits(n): Returns the sum of the digits of a given non-negative integer n. return sum(int(digit) for digit in str(n))"},{"question":"Write a function to calculate the maximum value in a given list of integers. How can I do this using Python?","solution":"def max_value(lst): Returns the maximum value in a given list of integers. if not lst: # Check if the list is empty return None max_val = lst[0] for num in lst[1:]: if num > max_val: max_val = num return max_val"},{"question":"Write a function to calculate the determinant of a matrix. The function should handle any size square matrix and return the determinant as a float. For a 2x2 matrix, the determinant is calculated as \`ad - bc\`. For larger matrices, the determinant can be calculated using the Laplace expansion along the first row.","solution":"def determinant(matrix): Returns the determinant of a square matrix. n = len(matrix) # Base case for 2x2 matrix if n == 2: return matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0] # Recursive case for NxN matrix using Laplace expansion det = 0 for col in range(n): submatrix = [row[:col] + row[col+1:] for row in matrix[1:]] det += ((-1) ** col) * matrix[0][col] * determinant(submatrix) return det"},{"question":"Write a function to find the maximum element from the given array of integers. Also, handle the case if the array is empty.","solution":"def find_max_element(arr): Returns the maximum element from the given array of integers. If the array is empty, return None. :param arr: List of integers :return: Maximum integer or None if array is empty if not arr: # Check if the list is empty return None return max(arr)"},{"question":"Write a function to print the binary representation of a given number in Python.","solution":"def print_binary_representation(number): Returns the binary representation of a given integer number. if isinstance(number, int): return bin(number)[2:] if number >= 0 else '-' + bin(number)[3:] else: raise ValueError(\\"Input must be an integer\\")"},{"question":"Write a function to calculate the area of a regular polygon using the number of sides and the length of each side. The function should take two parameters: the number of sides (\`n_sides\`) and the length of each side (\`side_length\`). The area can be calculated using the formula: ( text{Area} = frac{n times side_length^2}{4 times tan(frac{pi}{n})} ).","solution":"import math def area_regular_polygon(n_sides, side_length): Calculate the area of a regular polygon. Parameters: n_sides (int): Number of sides of the polygon. side_length (float): Length of each side of the polygon. Returns: float: Area of the regular polygon. if n_sides < 3 or side_length <= 0: raise ValueError(\\"A polygon must have at least 3 sides and the side length must be positive.\\") area = (n_sides * side_length**2) / (4 * math.tan(math.pi / n_sides)) return area"},{"question":"Write a function to find the largest sum of a contiguous subarray within a one-dimensional array of integers. This function should mimic the behavior of Kadane's algorithm.","solution":"def max_subarray_sum(arr): Finds the largest sum of a contiguous subarray within a one-dimensional array of integers. This implements the Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to convert a Roman numeral to an integer. The function should handle the conversion of all possible Roman numeral combinations, including those that require subtraction (e.g., IV for 4, IX for 9).","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. roman_numerals = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_numerals[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Write a function to determine if a given list of integers contains a set of distinct elements that sum up to zero.","solution":"def has_distinct_elements_sum_zero(nums): Determines if there is a set of distinct elements in the list that sum up to zero. nums_set = set(nums) for num in nums: if -num in nums_set and -num != num: return True return False"},{"question":"Write a function to check if a given number is a prime number without using the modulo operator.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True # Check for factors of two and three if abs(n / 2 - round(n / 2)) <= 1e-10 or abs(n / 3 - round(n / 3)) <= 1e-10: return False i = 5 while i * i <= n: if abs(n / i - round(n / i)) <= 1e-10 or abs(n / (i + 2) - round(n / (i + 2))) <= 1e-10: return False i += 6 return True"},{"question":"Write a function to calculate the number of ways to arrange \`n\` distinct objects in a circle, given that the objects are labeled from \`1\` to \`n\`. The arrangement where the numbers are in the same order as they appear in the input is considered the same irrespective of rotations.","solution":"def circular_permutations(n): Calculate the number of distinct circular permutations of n labeled objects. :param n: The number of distinct objects :return: The number of distinct circular arrangements if n <= 0: return 0 # The number of ways to arrange n distinct objects in a circle is (n-1)! from math import factorial return factorial(n - 1)"},{"question":"Write a function to remove duplicates from an array while preserving the order of the elements. You are not allowed to use any additional storage.","solution":"def remove_duplicates(arr): Removes duplicates from the array while preserving the order of the elements. if not arr: return arr write_index = 1 for read_index in range(1, len(arr)): found_duplicate = False for check in range(0, write_index): if arr[read_index] == arr[check]: found_duplicate = True break if not found_duplicate: arr[write_index] = arr[read_index] write_index += 1 return arr[:write_index]"},{"question":"Write a function to generate all prime numbers up to a given number \`n\`. The function should return a list of these prime numbers.","solution":"def generate_primes(n): Generate a list of all prime numbers up to and including n. :param n: The upper limit (inclusive) for generating prime numbers. :return: A list of prime numbers up to and including n. if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]]"},{"question":"Write a function to determine if a given integer is a MEX (minimum excluded) number. A MEX number is an integer that appears in the input list at least once, but all integers less than it do not appear in the list.","solution":"def is_mex_number(nums, k): Check if 'k' is a MEX number (minimum excluded number) within the list 'nums'. Args: nums: List of integers. k: Integer to check. Returns: Boolean: True if 'k' is an MEX number, else False. if k not in nums: return False for i in range(k): if i not in nums: return False return True"},{"question":"Write a function to reverse the words of a string in Python. The function should remove any extra spaces between the words in the input string.","solution":"def reverse_words(s): Reverse the words of the input string and remove any extra spaces. Args: s (str): The input string. Returns: str: The string with words reversed and extra spaces removed. words = s.strip().split() reversed_words = reversed(words) return ' '.join(reversed_words)"},{"question":"Write a function to find the maximum and minimum element in an array using a single loop in Python. You should not use any built-in functions for finding the max and min. The function should take an array as input and return a tuple containing the maximum and minimum values found in the array.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum element in the array. if not arr: raise ValueError(\\"The array should not be empty\\") max_val = arr[0] min_val = arr[0] for num in arr: if num > max_val: max_val = num if num < min_val: min_val = num return (max_val, min_val)"},{"question":"Write a function to calculate the minimum number of coins required to make up the given amount using a given set of coin denominations.","solution":"def min_coins(coins, amount): Returns the minimum number of coins required to make the given amount using the provided coin denominations. # Initialize a list to store the minimum coins for each amount up to the given amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make the amount 0 # Iterate over each amount from 1 to the given amount for i in range(1, amount + 1): # Check each coin for coin in coins: if i - coin >= 0: # Update the dp list if a new minimum is found dp[i] = min(dp[i], dp[i - coin] + 1) # Return the result for the given amount, if it's still infinite, return -1 return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to compute the intersection of two sets.","solution":"def set_intersection(set1, set2): Returns the intersection of two sets set1 and set2. return set1.intersection(set2)"},{"question":"Write a function to calculate the sum of all even numbers between two given numbers, including the numbers if they are even. If the first number is greater than the second, the function should return an error message.","solution":"def sum_even_numbers(a, b): Returns the sum of all even numbers between a and b, inclusive. If a is greater than b, return an error message. if a > b: return \\"Error: The first number is greater than the second number.\\" start = a if a % 2 == 0 else a + 1 end = b if b % 2 == 0 else b - 1 if start > end: return 0 total_sum = sum(range(start, end + 1, 2)) return total_sum"},{"question":"Write a function to traverse a tree in depth-first search (DFS) order and collect the values of the nodes, storing them in a list. Your function should accept a tree node as its parameter and return the list of values in DFS order.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_traversal(root): Traverse the tree in depth-first search order and collect the values of the nodes. if root is None: return [] result = [] stack = [root] while stack: node = stack.pop() result.append(node.value) # Push right child first so that left is processed first if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"Write a function to find the maximum sum subarray of a given array of integers. The function should return the maximum sum and the start and end indices of the subarray.","solution":"def max_subarray(arr): Returns the maximum sum subarray and its starting and ending indices :param arr: List[int] : input array of integers :return: Tuple[int, int, int] : maximum sum, start index, end index if not arr: return 0, -1, -1 max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Write a function to sort a list of lists in Python. The function should take a list of lists as an argument and return a new list of lists sorted by the sum of elements in each sublist. However, any sublist that contains the number zero should be considered as having a sum of negative infinity, so it should appear at the beginning of the sorted list.","solution":"def sort_sublists(lst): Sort a list of lists by the sum of elements in each sublist. Sublists that contain the number zero are considered to have a sum of negative infinity. return sorted(lst, key=lambda sublist: float('-inf') if 0 in sublist else sum(sublist))"},{"question":"Write a function to find the shortest palindromic substring that can be formed by appending characters to the end of a given string. The function should return the shortest such substring.","solution":"def shortest_palindromic_substring(s): Finds the shortest palindromic substring that can be formed by appending characters to the end of the given string. Parameters: s (str): The input string. Returns: str: The shortest palindromic substring. def is_palindrome(s): return s == s[::-1] n = len(s) for i in range(n): if is_palindrome(s[i:]): return s + s[:i][::-1] return s"},{"question":"Write a function to sort a given array of integers using the Bubble Sort algorithm. Provide the function with comments explaining each step of the algorithm.","solution":"def bubble_sort(arr): Sorts an array of integers using the Bubble Sort algorithm. :param arr: List of integers to sort. :return: Sorted list of integers. n = len(arr) # Traverse through all elements in the array for i in range(n): # Set a flag to detect any swap swapped = False # Traverse the array from 0 to n-i-1 # Last i elements are already in place for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, then the array is already sorted if not swapped: break return arr"},{"question":"Write a function to determine if a particular form is valid or not. The form is defined using a string where each character represents a different field. The function should check if the form is valid, i.e., it should not have any repeating fields (characters).","solution":"def is_form_valid(form: str) -> bool: Determines if the form string has all unique characters, indicating a valid form. Args: form (str): A string representing the form where each character is a different field. Returns: bool: True if the form has all unique characters, False otherwise. return len(form) == len(set(form))"},{"question":"Write a function to reverse a string in Python, and also create a function to check if a given string is a palindrome. A string is considered a palindrome if it reads the same backward as forward.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. reversed_s = reverse_string(s) return s == reversed_s"},{"question":"Write a function to check if a given string is a valid Binary Search Tree (BST) sequence. A valid BST sequence is defined as a sequence of numbers that can be inserted into an initially empty Binary Search Tree in the order given to form a valid binary search tree. Each number in the sequence must be greater than all the numbers before it in the sequence (the left subtree) and less than all the numbers after it (the right subtree).","solution":"def is_valid_bst_sequence(sequence): Returns True if the given sequence can form a valid Binary Search Tree (BST), otherwise returns False. A valid BST sequence is defined as a sequence of numbers that can be inserted into an initially empty BST in the order given to form a valid binary search tree. if not sequence: return True def verify_sequence(start, end): if start >= end: return True root = sequence[start] divider = start + 1 # All elements in the left subtree must be smaller than the root. while divider < end and sequence[divider] < root: divider += 1 # All elements in the right subtree must be greater than the root. for i in range(divider, end): if sequence[i] < root: return False # Recursively check the left and right subtrees. return verify_sequence(start + 1, divider) and verify_sequence(divider, end) return verify_sequence(0, len(sequence))"},{"question":"Write a function to create anagram groups from a list of words. An anagram is a word formed by rearranging the letters of a different word, typically using all the original letters exactly once.","solution":"def group_anagrams(words): Groups anagram words from a given list of words. Args: words (list of str): A list of words. Returns: list of list of str: A list of lists where each sublist contains words that are anagrams of each other. from collections import defaultdict anagram_dict = defaultdict(list) for word in words: # Sort the word and use it as a key sorted_word = ''.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Write a function to multiply two complex numbers represented as tuples (real part, imaginary part). The function should return the result as a tuple representing the product of the two complex numbers.","solution":"def multiply_complex(c1, c2): Multiplies two complex numbers represented as tuples (real part, imaginary part). Args: c1 (tuple): The first complex number as a tuple (real part, imaginary part). c2 (tuple): The second complex number as a tuple (real part, imaginary part). Returns: tuple: The product of the two complex numbers as a tuple (real part, imaginary part). real1, imag1 = c1 real2, imag2 = c2 real_product = real1 * real2 - imag1 * imag2 imag_product = real1 * imag2 + imag1 * real2 return (real_product, imag_product)"},{"question":"Write a function to implement strcmp in Python.","solution":"def strcmp(s1, s2): Compares two strings s1 and s2. Returns: 0 if s1 == s2 -1 if s1 < s2 1 if s1 > s2 if s1 == s2: return 0 elif s1 < s2: return -1 else: return 1"},{"question":"Write a function to solve a moving average problem in Python.","solution":"from collections import deque def moving_average(data, window_size): Calculate the moving average of a list of numbers given a window size. Parameters: data (list): The input list of numerical data. window_size (int): The size of the moving window. Returns: list: A list of the moving averages. if window_size <= 0: raise ValueError(\\"Window size must be positive.\\") if len(data) < window_size: return [] averages = [] window = deque(maxlen=window_size) for i in range(len(data)): window.append(data[i]) if len(window) == window_size: averages.append(sum(window) / window_size) return averages"},{"question":"Write a function to detect and remove duplicate values from an array while maintaining the original order of elements in Python.","solution":"def remove_duplicates(arr): Returns a new list with duplicates removed, maintaining the original order. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to generate Fibonacci sequence up to n numbers. The function should return the sequence as a list.","solution":"def fibonacci(n): Generates Fibonacci sequence up to n numbers. Returns the sequence as a list. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to find the length of the longest subarray with no repeated elements.","solution":"def length_of_longest_subarray(arr): Returns the length of the longest subarray with no repeated elements. n = len(arr) if n == 0: return 0 max_len = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen and seen[arr[end]] >= start: start = seen[arr[end]] + 1 seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function to calculate the sum of two integers, \`a\` and \`b\`, without using the \`+\` operator. How would you implement this in a programming language of your choice? Let's use Python as an example.","solution":"def add_without_plus(a, b): Returns the sum of a and b without using the + operator. # Use of bit manipulation MAX = 0xFFFFFFFF MASK = 0x100000000 while b != 0: a, b = (a ^ b) & MAX, ((a & b) << 1) & MAX # To handle negative numbers return a if a <= 0x7FFFFFFF else ~(a ^ MAX)"},{"question":"Write a function to find the maximum possible value following the operations allowed.","solution":"def max_value(lst): Returns the maximum possible value from the list following the allowed operations. # This solution assumes that \\"allowed operations\\" means picking the maximum value from the list if not lst: raise ValueError(\\"The list is empty\\") return max(lst)"},{"question":"Write a function to determine if a point is within a circle of radius R centered at (x0, y0).","solution":"def is_point_within_circle(x, y, x0, y0, R): Determines if a point (x, y) is within a circle of radius R centered at (x0, y0). Parameters: x (float) : x-coordinate of the point y (float) : y-coordinate of the point x0 (float) : x-coordinate of the circle's center y0 (float) : y-coordinate of the circle's center R (float) : radius of the circle Returns: bool : True if the point is within the circle (including the boundary), False otherwise. # Calculate the distance between the point and the center of the circle distance = ((x - x0)**2 + (y - y0)**2)**0.5 # The point is within the circle if distance is less than or equal to the radius return distance <= R"},{"question":"Write a function to reverse the order of words in a given sentence. The function should return the reversed sentence as a string. For example, if the input sentence is \\"Hello World from Alibaba\\", the output should be \\"Alibaba from World Hello\\".","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The sentence to reverse. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to search for a target value in a rotated sorted array. If the target is found, return its index. Otherwise, return -1. For this problem, you should write a function in Python that takes an array and the target value as input and returns the index of the target in the array. If the target is not found, return -1. The array may contain duplicate elements, and the rotation could be at any position.","solution":"def search_rotated_sorted_array(nums, target): Searches for the target value in a rotated sorted array. Returns the index of the target if found, otherwise returns -1. :param nums: List[int] - A rotated sorted array :param target: int - The target value to search for :return: int - The index of the target if found, otherwise -1 if not nums: return -1 low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] == target: return mid # Check if the left half is sorted if nums[low] <= nums[mid]: if nums[low] <= target < nums[mid]: high = mid - 1 else: low = mid + 1 # Otherwise, the right half must be sorted else: if nums[mid] < target <= nums[high]: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Write a function to test if a list is sorted by comparing each element with the next one in the list, and if so, print out the sorted list.","solution":"def is_sorted(lst): Checks if a given list is sorted in ascending order and returns True if it is, otherwise returns False. Also prints the sorted list if it is sorted. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False print(\\"The list is sorted:\\", lst) return True"},{"question":"Write a function to return the sum of an array of numbers.","solution":"def sum_array(numbers): Returns the sum of an array of numbers. :param numbers: List of numbers to sum up :return: Sum of the numbers in the list return sum(numbers)"},{"question":"Write a function to detect arrays with duplicate elements.","solution":"def has_duplicates(arr): Checks if the array has duplicate elements. Args: arr (list): The input array. Returns: bool: True if array contains duplicates, False otherwise. return len(arr) != len(set(arr))"},{"question":"Write a function to reverse the characters of a given string without using any built-in string reversal functions.","solution":"def reverse_string(s): Reverses the characters of a given string without using any built-in string reversal functions. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to copy elements from one array to another.","solution":"def copy_array(source): Creates a copy of the provided array. Args: source (list): The array to be copied. Returns: list: A copy of the array. return source.copy()"},{"question":"Write a function to find the smallest number in a given list that is divisible by a specified divisor. If no such number exists, return -1.","solution":"def smallest_divisible(numbers, divisor): Finds the smallest number in the list that is divisible by the specified divisor. Parameters: numbers (list): A list of integers. divisor (int): The divisor to check divisibility. Returns: int: The smallest number divisible by the divisor, or -1 if no such number exists. smallest = -1 for num in numbers: if num % divisor == 0: if smallest == -1 or num < smallest: smallest = num return smallest"},{"question":"Write a function to transpose a given matrix. Transposing a matrix means swapping rows with columns. If the matrix is ( n times m ), the transposed matrix will be ( m times n ).","solution":"def transpose(matrix): Returns the transpose of the given matrix. Transposing a matrix means swapping rows with columns. :param matrix: List of lists where each inner list represents a row in the matrix :return: Transposed matrix return [list(row) for row in zip(*matrix)]"},{"question":"Write a function to find the factorial of a number in Python. factorial(n) where n is a non-negative integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate the intersection of two arrays. The function should not modify the original arrays and should return a new array containing all elements that are present in both arrays. If the arrays are empty, the function should return an empty array. Also, ensure that the returned array does not contain any duplicate elements.","solution":"def array_intersection(arr1, arr2): Returns a list of elements that are present in both arr1 and arr2, with no duplicates. intersection = list(set(arr1) & set(arr2)) return intersection"},{"question":"Write a function to find the Maximum Product in an array of integers.","solution":"def max_product(nums): Returns the maximum product of two integers in an array. if len(nums) < 2: raise ValueError(\\"Array must contain at least two elements\\") nums.sort() max_product_high = nums[-1] * nums[-2] max_product_low = nums[0] * nums[1] return max(max_product_high, max_product_low)"},{"question":"Write a function to merge two sorted arrays into a single sorted array. Do not use built-in functions for sorting or merging. Implement this using a merge function typically used in merge sort.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function to reverse a string in Python. There are multiple methods to do this. Here I want to see an example using a stack data structure.","solution":"def reverse_string_stack(s): Reverses a string using a stack data structure. :param s: input string :return: reversed string # Create an empty stack stack = [] # Push all characters of the string to the stack for char in s: stack.append(char) # Pop all characters from the stack and put them back to the resulting string reversed_string = '' while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Write a function to add two numbers represented by linked lists. The least significant digit is at the head of each list. You should return the sum as a linked list. Assume the linked lists contain non-negative integers, and the function should handle carry operations correctly.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Adds two numbers represented by linked lists where each node contains a single digit. The digits are stored in reverse order. :param l1: ListNode - The head node of the first linked list. :param l2: ListNode - The head node of the second linked list. :return: ListNode - The head node of the resulting linked list. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 carry, out_val = divmod(val1 + val2 + carry, 10) current.next = ListNode(out_val) current = current.next l1 = l1.next if l1 else None l2 = l2.next if l2 else None return dummy_head.next"},{"question":"Write a function to count the number of elements in a given array that are greater than a specified value.","solution":"def count_greater_than(arr, value): Counts the number of elements in the array that are greater than the specified value. Parameters: arr (list): The array of elements. value (int or float): The specified value to compare against. Returns: int: The count of elements greater than the specified value. count = 0 for element in arr: if element > value: count += 1 return count"},{"question":"Write a function to reverse the words in a given string, maintaining the order of the words but reversing each individual word's characters.","solution":"def reverse_words(sentence): Reverses each word in a given sentence while maintaining the order of the words. Parameters: sentence (str): A string with words to be reversed. Returns: str: A string with each word's characters reversed, maintaining word order. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a function to perform a binary search on a sorted array to find the first occurrence of a target value. If the target is not found, return -1. The array does not contain duplicate values.","solution":"def binary_search_first_occurrence(arr, target): Perform a binary search on a sorted array to find the first occurrence of a target value. If the target is not found, return -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: # Return the first occurrence of the target return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 # Target not found"},{"question":"Write a function to calculate the factorial of a number using recursion. In addition to calculating the factorial, also print the calculation steps.","solution":"def factorial(n): Returns the factorial of n using recursion and prints the calculation steps. if n == 0 or n == 1: print(f\\"factorial({n}) = 1\\") return 1 else: result = n * factorial(n - 1) print(f\\"factorial({n}) = {n} * factorial({n-1}) = {result}\\") return result"},{"question":"Write a function to solve the 0/1 Knapsack problem using dynamic programming. The function should take a list of weights, a list of values, and the maximum capacity of the knapsack as input and return the maximum value that can be put in a knapsack of capacity W.","solution":"def knapsack(weights, values, W): Solve the 0/1 Knapsack problem using dynamic programming. :param weights: List[int], list of weights of the items :param values: List[int], list of values of the items :param W: int, maximum capacity of the knapsack :return: int, maximum value that can be put in a knapsack of capacity W n = len(weights) # Creating a 2D DP array to store the maximum value for each capacity and item dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] # Building the DP array for i in range(1, n + 1): for w in range(W + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] return dp[n][W]"},{"question":"Write a function to generate a list of all possible permutations of a given string, considering that the string may contain duplicate characters. For example, given the string \\"abc\\", the function should return [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"].","solution":"from itertools import permutations def generate_permutations(s): Returns a list of all possible permutations of a given string, considering that the string may contain duplicate characters. perm_set = set(permutations(s)) perm_list = [''.join(p) for p in perm_set] return sorted(perm_list)"},{"question":"Write a function to find the minimum sum of a subarray of a given array. The function should take an array and its size as input and return the minimum sum of any subarray within the given array.","solution":"def min_subarray_sum(arr): Finds the minimum sum of a subarray in the given array. Parameters: arr (list of int): The input array Returns: int: The minimum sum of any subarray if not arr: # if the array is empty return 0 return 0 current_min_sum = arr[0] overall_min_sum = arr[0] for num in arr[1:]: current_min_sum = min(num, current_min_sum + num) overall_min_sum = min(overall_min_sum, current_min_sum) return overall_min_sum"},{"question":"Write a function to generate the first 'n' Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Generate the first 'n' Fibonacci numbers. :param n: The number of Fibonacci numbers to generate. :type n: int :return: A list containing the first 'n' Fibonacci numbers. :rtype: list of int if n <= 0: return [] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_value) return fibonacci_sequence[:n]"},{"question":"Write a function to evaluate whether two strings are anagrams of each other. Anagrams are word combinations that can be written as each other, for instance, \\"listen\\" and \\"silent\\". You can assume the input strings are lowercase and do not contain any whitespace.","solution":"def are_anagrams(string1, string2): Checks whether two strings are anagrams of each other. Args: string1 (str): The first input string. string2 (str): The second input string. Returns: bool: True if the strings are anagrams, False otherwise. # Anagrams must be of the same length if len(string1) != len(string2): return False # Sort both strings and compare if they are equal return sorted(string1) == sorted(string2)"},{"question":"Write a function to find the maximum profit from a given list of stock prices where you can only buy and sell a stock once. The function should return the maximum profit possible. If no profit can be made, the function should return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell transaction. If no profit can be made, returns 0. :param prices: List[int] :return: int if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Write a function to generate all permutations of a given string. The string may contain duplicate characters.","solution":"from itertools import permutations def generate_permutations(s): Returns all permutations of the given string, including duplicates. return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to calculate the sum of the two most significant digits of a given number, if the number is greater than 100. If the number is less than or equal to 100, return \\"Too small\\". For example, if the number is 1234, the function should return 1+2 = 3. If the number is 99, return \\"Too small\\".","solution":"def sum_of_two_most_significant_digits(n): Returns the sum of the two most significant digits of a given number if it is greater than 100. If the number is less than or equal to 100, returns \\"Too small\\". if n <= 100: return \\"Too small\\" # Convert the number to a string to extract digits n_str = str(n) # Get the most significant digits most_significant_digits = n_str[:2] # Calculate the sum of these digits sum_digits = int(most_significant_digits[0]) + int(most_significant_digits[1]) return sum_digits"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number n. The function should return the sequence as a list of integers.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to n-th term as a list of integers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] while len(sequence) < n: next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence"},{"question":"Write a function to find the maximum area of a rectangle in a given binary matrix. The matrix contains only 0s and 1s, and each cell represents a square that is either empty or filled with a bar.","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 dp = [[0]*len(matrix[0]) for _ in range(len(matrix))] for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == '1': dp[i][j] = dp[i][j-1] + 1 if j > 0 else 1 for j in range(len(matrix[0])): heights = [dp[i][j] for i in range(len(matrix))] max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # restore the heights array return max_area"},{"question":"Write a function to check if a given string \`str\` is a palindrome. A palindrome is a string that reads the same backward as forward.","solution":"def is_palindrome(s): Checks if the provided string is a palindrome. Args: s (str): Input string to check Returns: bool: True if the string is a palindrome, False otherwise # Remove white spaces and lower the case for uniformity s = s.replace(\\" \\", \\"\\").lower() return s == s[::-1]"},{"question":"Write a function to solve the Tower of Hanoi problem. The function should take three arguments: the number of disks, the source peg, the auxiliary peg, and the target peg. The function should print the steps required to solve the problem.","solution":"def tower_of_hanoi(n, source, auxiliary, target): Solves the Tower of Hanoi problem and prints the steps required. Parameters: n (int): Number of disks source (str): The source peg auxiliary (str): The auxiliary peg target (str): The target peg Returns: None if n == 1: print(f\\"Move disk 1 from {source} to {target}\\") return tower_of_hanoi(n - 1, source, target, auxiliary) print(f\\"Move disk {n} from {source} to {target}\\") tower_of_hanoi(n - 1, auxiliary, source, target)"},{"question":"Write a function to reverse a string without using any built-in string functions or methods for reversing. You must also reverse the string in place, meaning no additional data structures are allowed, and the function should return the reversed string.","solution":"def reverse_string(s): Reverse the input string in place and return the reversed string. Parameters: s (str): The input string to be reversed. Returns: str: The reversed string. # Convert the input string to a list since strings are immutable in Python str_list = list(s) # Initialize two pointers, one at the beginning and one at the end of the list start, end = 0, len(str_list) - 1 # Swap the characters while moving the two pointers towards the center while start < end: str_list[start], str_list[end] = str_list[end], str_list[start] start += 1 end -= 1 # Convert the list back to string and return return ''.join(str_list)"},{"question":"Write a function to find the maximum element in an array using Python iteration.","solution":"def find_max(arr): Returns the maximum element in an array using iteration. if not arr: raise ValueError(\\"Array is empty.\\") max_element = arr[0] for element in arr[1:]: if element > max_element: max_element = element return max_element"},{"question":"Write a function to compute the minimum number of coins required to make a given amount. The function should take two parameters: a list of coin denominations and the target amount. The function should return the minimum number of coins needed to make the target amount. If it's not possible to make the target amount with the given coin denominations, the function should return -1.","solution":"def min_coins(denominations, target): Returns the minimum number of coins needed to make the target amount. If it's not possible to make the target amount with the given denominations, return -1. # Create an array to store the minimum coins needed for each amount up to target dp = [float('inf')] * (target + 1) dp[0] = 0 # Initialize the base case for coin in denominations: for x in range(coin, target + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[target] if dp[target] != float('inf') else -1"},{"question":"Write a function to identify all elements in an array that appear only once in the array.","solution":"def unique_elements(arr): Returns a list of elements that appear only once in the array. from collections import Counter counter = Counter(arr) return [element for element, count in counter.items() if count == 1]"},{"question":"Write a function to determine if a given integer \`n\` is a power of 3. An integer \`n\` is a power of 3 if there exists an integer \`x\` such that \`n == 3**x\`.","solution":"def is_power_of_three(n): Determines if the given integer n is a power of 3. :param n: Integer to check. :return: True if n is a power of 3, False otherwise. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to format time in a 12-hour format (e.g., 3:00 PM, 10:45 AM). The function should take three integers as input: hours, minutes, and AM_PM (0 for AM, 1 for PM). It should return the formatted time string.","solution":"def format_time_12_hour(hours, minutes, AM_PM): Formats the given time in a 12-hour format. Args: hours (int): Hour part of the time in 12-hour format. minutes (int): Minutes part of the time. AM_PM (int): 0 if it's AM, 1 if it's PM. Returns: str: Formatted time string (e.g., '3:00 PM', '10:45 AM'). if hours < 1 or hours > 12 or minutes < 0 or minutes >= 60 or AM_PM not in [0, 1]: raise ValueError('Invalid input') period = 'AM' if AM_PM == 0 else 'PM' return f\\"{hours}:{minutes:02d} {period}\\""},{"question":"Write a function to reverse a stack without using any additional data structure except a single temporary variable.","solution":"def reverse_stack(stack): Reverses a stack without using any additional data structure except a single temporary variable. if len(stack) == 0: return [] def insert_at_bottom(stack, item): if not stack: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse(stack): if stack: temp = stack.pop() reverse(stack) insert_at_bottom(stack, temp) reverse(stack) return stack"},{"question":"Write a function to calculate the sum of the first n natural numbers. In Python, how would you implement this function?","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number of natural numbers to sum. Returns: int: The sum of the first n natural numbers. if n < 0: raise ValueError(\\"n should be a non-negative integer\\") return n * (n + 1) // 2"},{"question":"Write a function to calculate the sum of all elements in an array. The function should have a time complexity of O(N). How can we achieve this using a simple loop to iterate through the array and keep a running total of the sum of elements?","solution":"def sum_of_array(array): Returns the sum of all elements in the array. :param array: list of numbers :return: sum of elements in the array total = 0 for num in array: total += num return total"},{"question":"Write a function to check if a given string is a palindrome using a stack in Python. A palindrome is a string that reads the same backward as forward, ignoring cases, spaces, and punctuation. For example, \\"A man, a plan, a canal, Panama!\\" is a palindrome.","solution":"import string def is_palindrome(s): Check if the given string \`s\` is a palindrome, ignoring cases, spaces, and punctuation. # Normalize the string: remove non-alphanumeric characters and convert to lower case normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Use a stack to check palindrome stack = [] for char in normalized_str: stack.append(char) # Check if the normalized string is the same when reversed for char in normalized_str: if char != stack.pop(): return False return True"},{"question":"Write a function to find the second smallest number in an array of integers. If the array has less than 2 elements, return -1. If there are duplicates, consider them as one number.","solution":"def second_smallest(arr): if len(arr) < 2: return -1 unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to calculate the factorial of a given number \`n\`. The function should handle the special case when \`n\` is 0. If \`n\` is negative, it should return an appropriate error message.","solution":"def factorial(n): Returns the factorial of a given number n. If n is 0, returns 1 (0! = 1). If n is negative, returns an error message. if n < 0: return \\"Error: Factorial is not defined for negative numbers.\\" elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to calculate the sum of two integers without using the '+' operator. This function should handle negative numbers as well. How can you implement this?","solution":"def add_without_plus_operator(a, b): Returns the sum of a and b without using the '+' operator. Uses bitwise operations to achieve this. MAX = 0xFFFFFFFF mask = 0xFFFFFFFF while b != 0: # Calculate the carry carry = (a & b) & mask # Sum without carry a = (a ^ b) & mask # Carry shifted by one b = (carry << 1) & mask # If a is negative, convert it to a properly signed integer if a <= MAX // 2: return a else: return ~(a ^ mask)"},{"question":"Write a function to find the minimum sum of a contiguous subarray within a given array of integers. The array can contain both positive and negative numbers.","solution":"def min_subarray_sum(arr): Finds the minimum sum of a contiguous subarray within a given array of integers. :param arr: List of integers. :return: Minimum sum of a contiguous subarray. if not arr: return 0 current_min = arr[0] global_min = arr[0] for num in arr[1:]: current_min = min(num, current_min + num) global_min = min(global_min, current_min) return global_min"},{"question":"Write a function to remove all occurrences of a given element from an array. Your function should take a list \`arr\` and an integer \`elem\` as input and return the modified array with all occurrences of \`elem\` removed.","solution":"def remove_element(arr, elem): Removes all occurrences of elem from arr. :param arr: List of elements :param elem: Element to be removed :return: Modified list with all occurrences of elem removed return [x for x in arr if x != elem]"},{"question":"Write a function to calculate the total click-through rate (CTR) for a list of websites, where each website is represented by an object with properties \`name\`, \`clicks\`, and \`impressions\`. The CTR is calculated as the ratio of clicks to impressions, and the total CTR is the average CTR across all websites.","solution":"def calculate_total_ctr(websites): Calculates the total click-through rate (CTR) for a list of websites. The CTR is calculated as the ratio of clicks to impressions, and the total CTR is the average CTR across all websites. :param websites: List of dictionaries, each representing a website with 'name', 'clicks', and 'impressions'. :return: The total CTR as a float value. total_ctr = 0 if not websites: return total_ctr for website in websites: if website['impressions'] == 0: continue ctr = website['clicks'] / website['impressions'] total_ctr += ctr return total_ctr / len(websites)"},{"question":"Write a function to find all the elements in an array that appear more than once and return them in a list. If no element is repeated, return an empty list. The function should ignore duplicates in the returned list and should be case-sensitive.","solution":"def find_duplicates(arr): Returns a list of elements that appear more than once in the given array. The returned list should not have duplicate elements and should be case-sensitive. :param arr: List of elements :return: List of duplicated elements seen = set() duplicates = set() for item in arr: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a function to rotate a given 2D array (which represents an image) 90 degrees clockwise. The function should take the 2D array as an input and return the rotated array. Make sure to handle cases where the array is not square and where the rows and columns are of varying lengths.","solution":"def rotate_2d_array_90_degrees_clockwise(matrix): Rotate a given 2D array (representing an image) 90 degrees clockwise. Args: matrix (list of lists of int): 2D list to be rotated. Returns: list of lists of int: The rotated 2D list. if not matrix or not matrix[0]: return matrix # Get the dimensions of the matrix rows, cols = len(matrix), len(matrix[0]) # Create a new matrix for the result with switched dimensions rotated = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated[c][rows - 1 - r] = matrix[r][c] return rotated"},{"question":"Write a function to check if a string is a valid email address using Python. I am looking for a solution that also checks against a set of common TLDs (Top Level Domains).","solution":"import re # List of common TLDs common_tlds = set(['com', 'org', 'net', 'int', 'edu', 'gov', 'mil', 'co']) def is_valid_email(email): Checks if the given email address is valid. Args: email (str): The email address to validate. Returns: bool: True if the email is valid, False otherwise. # Basic regex pattern for email validation email_pattern = re.compile(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+') # Check if the email matches the regex pattern if not email_pattern.match(email): return False # Extract the TLD from the email tld = email.rsplit('.', 1)[-1].lower() # Check if the TLD is in the set of common TLDs if tld not in common_tlds: return False return True"},{"question":"Write a function to find the nth Fibonacci number using recursion. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to count the number of words in a given string that start with the letter 's'.","solution":"def count_words_starting_with_s(text): Returns the number of words in the given string that start with the letter 's'. Parameters: text (str): The input string. Returns: int: The number of words starting with 's'. words = text.split() count = sum(1 for word in words if word.lower().startswith('s')) return count"},{"question":"Write a function to convert a string to title case in Python. Title case means the first letter in each word is in uppercase, and the rest of the letters are in lowercase. Also, handle cases where the input string may contain multiple spaces between words.","solution":"def to_title_case(s): Converts a string to title case. # Split the string by spaces to handle multiple spaces words = s.split() # Capitalize each word and join them back with a single space title_cased = ' '.join(word.capitalize() for word in words) return title_cased"},{"question":"Write a function to remove all duplicates from an array, preserving the order of the first occurrence of each unique element. The function should return the length of the resulting array without duplicates.","solution":"def remove_duplicates(arr): Remove duplicates from the array while preserving the order of the first occurrence of each unique element. :param arr: List[int] :return: int (length of array without duplicates) seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) arr[:] = result return len(result)"},{"question":"Write a function to determine if a given sequence of numbers is a valid infix expression. An infix expression is a mathematical expression written in the usual format, where operators follow their operands. For example, \\"3 + 4\\" is an infix expression, but \\"3 4 +\\" is not. The function should also determine if the expression is balanced parentheses-wise. A balanced parentheses expression means every opening parenthesis has a corresponding closing parenthesis in the correct order.","solution":"def is_valid_infix_expression(expression): Determines if the given sequence of tokens is a valid infix expression with balanced parentheses. Parameters: expression (list): List of tokens representing an infix expression. Returns: bool: True if the expression is a valid infix expression, False otherwise. operators = {'+', '-', '*', '/'} stack = [] prev_token = None expect_operand = True for token in expression: if token in operators: if expect_operand or prev_token in operators: return False expect_operand = True elif token == '(': stack.append(token) expect_operand = True elif token == ')': if prev_token in operators or not stack or stack[-1] != '(': return False stack.pop() expect_operand = False else: if not expect_operand: return False expect_operand = False prev_token = token return not stack and not expect_operand"},{"question":"Write a function to write the Fibonacci sequence to a text file. The function should take the number of terms in the sequence as an argument. Each term in the sequence should be stored in a new line in the text file. The function should return the total number of terms written to the file.","solution":"def write_fibonacci_to_file(num_terms, filename='fibonacci.txt'): Writes the Fibonacci sequence to a text file. :param num_terms: The number of terms in the Fibonacci sequence to write. :param filename: The name of the file to write the sequence to. :return: The total number of terms written to the file. if num_terms <= 0: return 0 a, b = 0, 1 with open(filename, 'w') as f: for _ in range(num_terms): f.write(str(a) + 'n') a, b = b, a + b return num_terms"},{"question":"Write a function to detect any loop in a linked list and return the node where the loop starts. If there is no loop, return \`null\`. Use Floyd's Tortoise and Hare algorithm.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle(head): Detects if there is a cycle in the linked list and returns the node where the cycle starts. If there is no cycle, returns None. Uses Floyd's Tortoise and Hare algorithm. if not head or not head.next: return None slow = head fast = head # Move slow by 1 step and fast by 2 steps until they meet or fast reaches the end while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # If the loop was exited without finding a meeting point, then there is no cycle if not fast or not fast.next: return None # Move slow back to the head, keep fast at the meeting point slow = head # Move both pointers one step at a time and they will meet at the start of the cycle while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to calculate the number of pennies in a given amount of money. The function should handle both positive and negative amounts, and return the result as an integer. If the input is not a valid number, the function should return -1.","solution":"def calculate_pennies(amount): Calculates the number of pennies in a given amount of money. Parameters: amount (int, float): The amount of money. Returns: int: The number of pennies, or -1 if the input is not a valid number. try: pennies = int(amount * 100) return pennies except (ValueError, TypeError): return -1"},{"question":"Write a function to calculate the factorial of a number \`n\` using recursion. The function should be able to handle large numbers and should be efficient in terms of memory usage. Consider using memoization to optimize the recursive calls.","solution":"def factorial(n, memo=None): Returns the factorial of a given number n using recursion and memoization. if memo is None: memo = {} if n in memo: return memo[n] if n == 0 or n == 1: return 1 memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Write a function to check if two numbers are coprime or not. Two numbers are coprime if their greatest common divisor (GCD) is 1.","solution":"import math def are_coprime(a, b): Returns True if a and b are coprime, otherwise False. return math.gcd(a, b) == 1"},{"question":"Write a function to find the number of times a given value appears in a array and return the frequencies in an dictionary format with values as keys and their frequencies as values.","solution":"def count_frequencies(arr): Counts the number of times each value appears in the array. Parameters: arr (list): The input array. Returns: dict: A dictionary with keys as values from the array and values as their frequencies. frequency_dict = {} for value in arr: if value in frequency_dict: frequency_dict[value] += 1 else: frequency_dict[value] = 1 return frequency_dict"},{"question":"Write a function to reverse a string. The function should take a string as input and return the reversed string. Additionally, handle cases where the input string contains special characters or numbers. The correctness of the function should be verified using a test case.","solution":"def reverse_string(s): Reverses the input string s. Args: s (str): Input string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to find the maximum length of a substring with no repeating characters. For example, the string \\"abcabcbb\\" should return 3, as the substring \\"abc\\" is the longest substring without repeating characters.","solution":"def length_of_longest_substring(s): Finds the maximum length of a substring with no repeating characters. Parameters: s (str): Input string Returns: int: Length of the longest substring without repeating characters char_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function to reverse a stack of integers using recursion.","solution":"def insert_at_bottom(stack, item): Helper function to insert an item at the bottom of a given stack. if not stack: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse_stack(stack): Reverses a given stack using recursion. The original stack is modified. Parameters: stack (list): The stack to be reversed, represented as a list. Returns: stack (list): The same stack object but reversed. if stack: temp = stack.pop() reverse_stack(stack) insert_at_bottom(stack, temp) return stack"},{"question":"Write a function to find the minimum element in an array of integers. The function should return the minimum element if it exists, otherwise return \`None\`.","solution":"def find_minimum(arr): Returns the minimum element in an array of integers. If the array is empty, returns None. if not arr: return None min_element = arr[0] for num in arr[1:]: if num < min_element: min_element = num return min_element"},{"question":"Write a function to take an integer and return the number of trailing zeroes in the factorial of the number.","solution":"def count_trailing_zeroes_in_factorial(n): Returns the number of trailing zeroes in the factorial of the given number n. count = 0 while n >= 5: n //= 5 count += n return count"},{"question":"Write a function to generate all possible permutations of a given string. The function should return a list of all permutations without any duplicates.","solution":"from itertools import permutations def generate_permutations(s): Generates all unique permutations of a given string. Parameters: s (str): The input string. Returns: List[str]: A list of unique permutations of the input string. return sorted(set(''.join(p) for p in permutations(s)))"},{"question":"Write a function to implement the \\"FizzBuzz\\" program in Python.","solution":"def fizz_buzz(n): Returns a list of strings representing the FizzBuzz sequence up to n. For multiples of three, store \\"Fizz\\" instead of the number. For multiples of five, store \\"Buzz\\" instead of the number. For numbers which are multiples of both three and five, store \\"FizzBuzz\\" instead of the number. result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to perform a flood fill (also known as flood by hand) on a grid. This operation should fill an entire area with a given new color. The flood fill algorithm should start from a specified seed point (or cell) and change the color of that point and all connected cells (horizontally, vertically, and diagonally) that are the same color as the original cell.","solution":"def flood_fill(grid, x, y, new_color): Perform a flood fill on the given grid starting from the cell (x, y). :param grid: 2D list of integers representing the grid. :param x: Row index of the starting cell. :param y: Column index of the starting cell. :param new_color: New color to fill the area with. original_color = grid[x][y] if original_color == new_color: return def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]): return if grid[x][y] != original_color: return grid[x][y] = new_color # Recursively fill neighboring cells dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) dfs(x + 1, y + 1) dfs(x + 1, y - 1) dfs(x - 1, y + 1) dfs(x - 1, y - 1) dfs(x, y)"},{"question":"Write a function to find the median of two sorted arrays. These arrays could have different lengths.","solution":"def find_median_sorted_arrays(nums1, nums2): Returns the median of two sorted arrays. Assumes both arrays are sorted in non-decreasing order. merged = [] i = j = 0 n, m = len(nums1), len(nums2) # Merge the two arrays while i < n and j < m: if nums1[i] < nums2[j]: merged.append(nums1[i]) i += 1 else: merged.append(nums2[j]) j += 1 # If there are remaining elements in nums1 while i < n: merged.append(nums1[i]) i += 1 # If there are remaining elements in nums2 while j < m: merged.append(nums2[j]) j += 1 # Find the median total_length = len(merged) mid = total_length // 2 if total_length % 2 == 0: return (merged[mid - 1] + merged[mid]) / 2.0 else: return merged[mid]"},{"question":"Write a function to calculate the height of a binary tree using a bottom-up approach.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def height_of_binary_tree(root): Returns the height of a binary tree using a bottom-up approach. The height is defined as the number of edges along the longest path from the root node down to the farthest leaf node. if root is None: return -1 left_height = height_of_binary_tree(root.left) right_height = height_of_binary_tree(root.right) return max(left_height, right_height) + 1"},{"question":"Write a function to compute the intersection of two sets of points in a 2D space efficiently.","solution":"def intersection_of_points(set1, set2): Computes the intersection of two sets of points in a 2D space. Parameters: set1 (set of tuples): A set containing tuples representing points (x, y). set2 (set of tuples): A set containing tuples representing points (x, y). Returns: set of tuples: A set containing tuples representing the points that are in both set1 and set2. return set1.intersection(set2)"},{"question":"Write a function to merge two sorted arrays into one sorted array using the merge process of the merge sort algorithm.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged sorted array. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Add remaining elements while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Write a function to compute the sum of the digits of an integer. The function should return the sum as an integer. For example, given the integer 12345, the function should return 15 (i.e., 1+2+3+4+5).","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. n = abs(n) # Ensure the number is positive return sum(int(digit) for digit in str(n))"},{"question":"Write a function to find all permutations of a given list of elements. The function should return a list of all possible permutations, and each permutation should be represented as a list.","solution":"import itertools def find_permutations(elements): Returns a list of all permutations of the given list of elements. return list(itertools.permutations(elements))"},{"question":"Write a function to count the number of even numbers in a list using list comprehension in Python.","solution":"def count_even_numbers(lst): Returns the number of even numbers in the list. return sum(1 for x in lst if x % 2 == 0)"},{"question":"Write a function to check if a binary string has at least one pair of consecutive ones. Given a binary string \`s\`, return \`True\` if there is at least one occurrence of two consecutive '1's, otherwise return \`False\`.","solution":"def has_consecutive_ones(s): Checks if the binary string has at least one pair of consecutive ones. Parameters: s (str): A binary string. Returns: bool: True if there is at least one pair of consecutive '1's, otherwise False. return '11' in s"},{"question":"Write a function to find the index of the first occurrence of a target value in a sorted array. If the target value is not found, return -1. The function should handle arrays with duplicates and return the index of the leftmost occurrence. Use binary search algorithm.","solution":"def find_first_occurrence(arr, target): Finds the index of the first occurrence of the target value in a sorted array. If the target is not found, returns -1. Parameters: arr (list): A sorted list of integers. target (int): The target value to find in the list. Returns: int: The index of the first occurrence of the target in the list, or -1 if not found. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: result = mid right = mid - 1 elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Write a function to reverse the digits of an integer. If reversing the digits causes the number to go beyond the limits of a 32-bit signed integer, return 0. Assume the environment does not support 64-bit integers.","solution":"def reverse_integer(x): Reverses the digits of an integer x. If reversing the digits causes the integer to go beyond the limits of a 32-bit signed integer, return 0. INT_MAX = 2**31 - 1 INT_MIN = -2**31 negative = x < 0 if negative: x = -x reversed_num = 0 while x != 0: pop = x % 10 x //= 10 if reversed_num > (INT_MAX - pop) // 10: return 0 reversed_num = reversed_num * 10 + pop return -reversed_num if negative else reversed_num"},{"question":"Write a function to convert a given string \`s\` to all uppercase if the string contains at least half of its characters as uppercase letters. Otherwise, return the string in all lowercase. Implement the function \`convert_s\` in Python.","solution":"def convert_s(s): Converts the string \`s\` to all uppercase if at least half of its characters are uppercase, otherwise returns it in all lowercase. uppercase_count = sum(1 for char in s if char.isupper()) if uppercase_count >= len(s) / 2: return s.upper() else: return s.lower()"},{"question":"Write a function to check if a given list of two non-negative integers x and y satisfies the equation x = y + 3.","solution":"def check_equation(nums): Checks if the list of two non-negative integers satisfies the equation x = y + 3, where the first element is x and the second element is y. Args: nums (list): A list of two non-negative integers [x, y] Returns: bool: True if x = y + 3, otherwise False. if len(nums) != 2: raise ValueError(\\"Input list must contain exactly two elements.\\") x, y = nums return x == y + 3"},{"question":"Write a function to remove a string after a certain character in Python. For example, if the character is \\"a\\" and the string is \\"apple\\", it should return \\"ap\\". How can I achieve this using a Python function?","solution":"def remove_after_character(s, char): Removes the part of the string after the first occurrence of the specified character. :param s: A string from which to remove the part after the specified character. :param char: The character after which the subsequent string part will be removed. :return: A string with the part after the specified character removed. If the character is not found, returns the original string. index = s.find(char) if index != -1: return s[:index + 1] # includes the character itself return s"},{"question":"Write a function to check if a given string contains only numeric characters. For example, the string \\"12345\\" should return True, but \\"123a45\\" should return False.","solution":"def is_numeric(s): Returns True if the string contains only numeric characters, False otherwise. return s.isdigit()"},{"question":"Write a function to convert a string to an integer, considering the details and potential issues in this conversion.","solution":"def string_to_int(s): Converts a string to an integer. Handles leading/trailing whitespaces and optional plus/minus signs. Returns 0 if the string cannot be converted. s = s.strip() # Remove leading/trailing whitespaces if not s: return 0 is_negative = False start_index = 0 if s[0] == '-': is_negative = True start_index = 1 elif s[0] == '+': start_index = 1 num = 0 for i in range(start_index, len(s)): if not s[i].isdigit(): return 0 # Return 0 if there's a character that isn't a digit num = num * 10 + int(s[i]) if is_negative: num = -num return num"},{"question":"Write a function to calculate the factorial of a non-negative integer \`n\` using recursion. The function should return \`n! = n * (n-1) * (n-2) * ... * 1\`.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Parameters: n (int): A non-negative integer whose factorial is to be computed Returns: int: Factorial of the input integer n if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to compute the sum of elements in an array. The array may contain both integers and floating-point numbers. Return the sum as a floating-point number.","solution":"def sum_of_elements(arr): Returns the sum of elements in the array. The array may contain both integers and floating-point numbers. Parameters: arr (list): A list of numbers (integers or floats). Returns: float: The sum of the numbers in the array. return sum(arr)"},{"question":"Write a function to find all the duplicate elements in an array. The function should return a list of these duplicates, ensuring the order is the same as the first appearance of the duplicate. For example, given the array \`[4, 3, 2, 7, 8, 2, 3, 1]\`, the function should return \`[2, 3]\`.","solution":"def find_duplicates(arr): Returns a list of duplicates in the array with the order of their first appearance. :param arr: List of integers. :return: List of duplicate integers. seen = set() duplicates = [] for num in arr: if num in seen: if num not in duplicates: duplicates.append(num) else: seen.add(num) return duplicates"},{"question":"Write a function to extract all unique values from a given list of strings, considering case-insensitivity. For example, the list [\\"apple\\", \\"Banana\\", \\"APPLE\\", \\"banana\\"] should return [\\"apple\\", \\"banana\\"].","solution":"def extract_unique_values(lst): Extracts unique values from a given list of strings, considering case insensitivity. Parameters: lst (list of str): The list of strings to process. Returns: list of str: A list containing unique values in their original case based on case-insensitive comparison. seen = set() unique_values = [] for item in lst: lower_item = item.lower() if lower_item not in seen: seen.add(lower_item) unique_values.append(item) return unique_values"},{"question":"Write a function to find the minimum number of coins required to make a given amount using a given set of coin denominations.","solution":"def min_coins(coins, amount): Returns the minimum number of coins required to make the given amount using the given set of coin denominations. :param coins: List of coin denominations :param amount: Total amount to be made with the coins :return: Minimum number of coins required to make the amount # Initialize a list to store the minimum coins needed for each amount from 0 to amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make amount 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to calculate the volume of a solid of revolution around the x-axis using the disk method. The function should take a mathematical function f(x) and the limits of integration as input.","solution":"import scipy.integrate as integrate import numpy as np def disk_method_volume(f, a, b): Calculates the volume of a solid of revolution around the x-axis using the disk method. Parameters: f (function): The mathematical function to be rotated. a (float): The start limit of integration. b (float): The end limit of integration. Returns: float: The volume of the solid of revolution. volume, _ = integrate.quad(lambda x: np.pi * (f(x) ** 2), a, b) return volume"},{"question":"Write a function to calculate the maximum profit in a stock trading scenario where only one transaction is allowed. The function should take a list of daily stock prices and return the maximum profit.","solution":"def max_profit(prices): Calculate the maximum profit with one transaction. :param prices: List of daily stock prices. :return: Maximum profit with one transaction. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Write a function to calculate the maximum profit that can be achieved by buying and selling stocks. You are given an integer array prices where prices[i] is the price of a given stock on the ith day. You are allowed to complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). However, you cannot buy on the same day you sell and you must sell before you buy again.","solution":"def max_profit(prices): Calculates the maximum profit from buying and selling stocks. Parameters: prices (list of int): The price of the stock on each day. Returns: int: The maximum profit possible. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Write a function to calculate the factorial of a number using recursion. Here is what the function signature should look like: \`def factorial(n):\` How do I approach this problem?","solution":"def factorial(n): Calculate the factorial of a number n using recursion. Parameters: n (int): A non-negative integer whose factorial is to be calculated Returns: int: Factorial of the number n Raises: ValueError: If n is negative if n < 0: raise ValueError(\\"factorial() not defined for negative values\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to calculate the total cost of items in a shopping cart where each item has a price and a quantity. Each item is represented as a dictionary with 'price' and 'quantity' as keys. The function should return the total cost of all items in the cart. If the cart is empty, the function should return 0.","solution":"def calculate_total_cost(cart): Returns the total cost of items in the shopping cart. Parameters: cart (list of dict): A list of dictionaries, each containing 'price' and 'quantity' keys. Returns: float: Total cost of items in the cart. total_cost = 0 for item in cart: total_cost += item.get('price', 0) * item.get('quantity', 0) return total_cost"},{"question":"Write a function to search for a specific item in a list using a binary search algorithm. Assume the list is already sorted. Return the index of the item if found, otherwise return -1.","solution":"def binary_search(arr, item): Perform a binary search on a sorted list to find the index of the specified item. :param arr: List of sorted elements :param item: The item to search for :return: The index of the item if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == item: return mid elif arr[mid] < item: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to check if a given string is a valid IPv4 address. A valid IPv4 address consists of four integer numbers separated by dots. Each of these numbers must be between 0 and 255 to be valid. Additionally, there should not be any leading zeros in a number other than zero itself.","solution":"def is_valid_ipv4_address(ip): Checks if the given string is a valid IPv4 address. parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if not (0 <= int(part) <= 255): return False if part != '0' and part.startswith('0'): return False return True"},{"question":"Write a function to count the number of unique elements in an array of integers. Your function should be named \`count_unique_elements\` and should take a list of integers as input. It should return the number of unique elements in the list.","solution":"def count_unique_elements(arr): Returns the number of unique elements in the array. :param arr: List of integers :return: Integer count of unique elements return len(set(arr))"},{"question":"Write a function to rotate a given n x n matrix in place by 90 degrees clockwise. The function should handle any size of the matrix.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix in place by 90 degrees clockwise. Parameters: matrix (list of list of int): A 2D list representing the n x n matrix. Returns: None: The matrix is modified in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function to implement the Kadane's algorithm for finding the Maximum Subarray Sum in a given array. Kadane's algorithm is an efficient way to find the contiguous subarray with the largest sum.","solution":"def max_subarray_sum(arr): Implements Kadane's Algorithm to find the maximum subarray sum. Parameters: arr (list): List of integers. Returns: int: The maximum sum of the contiguous subarray. max_current = max_global = arr[0] for number in arr[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to return the sum of the two lowest positive integers in an array. For example, given an array [1, 2, 3, 4, 5], the function should return 3 because 1 + 2 = 3. The function should handle edge cases such as arrays with negative numbers or duplicate numbers, as well as arrays with only one positive number.","solution":"def sum_two_lowest_positive_integers(arr): Returns the sum of the two lowest positive integers in the given array. If there are less than two positive integers, returns None. positive_numbers = [num for num in arr if num > 0] if len(positive_numbers) < 2: return None positive_numbers.sort() return positive_numbers[0] + positive_numbers[1]"},{"question":"Write a function to find the second smallest element in an array of integers using Python. If the array contains less than two distinct elements, return None.","solution":"def second_smallest(arr): Finds the second smallest element in an array of integers. Returns None if there are fewer than two distinct elements. if len(arr) < 2: return None first = second = float('inf') for num in arr: if num < first: second = first first = num elif first < num < second: second = num return second if second != float('inf') else None"},{"question":"Write a function to check if a given linked list is a palindrome or not. A linked list is considered a palindrome if the sequence of elements read from left to right is the same as the sequence of elements read from right to left.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def is_palindrome(head): Checks if a linked list is a palindrome. Args: head (ListNode): The head of the linked list. Returns: bool: True if the linked list is a palindrome, False otherwise. # Collect values from the linked list values = [] current = head while current: values.append(current.value) current = current.next # Check if values list is a palindrome return values == values[::-1]"},{"question":"Write a function to find all the prime numbers within a given range using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to (and including) n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n+1) sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n+1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a function to find the smallest positive number in an array that is not present in the array.","solution":"def find_smallest_missing_positive(nums): Find the smallest positive number that is not present in the array \`nums\`. num_set = set(nums) smallest_positive = 1 while smallest_positive in num_set: smallest_positive += 1 return smallest_positive"},{"question":"Write a function to find the maximum depth of a binary tree. The binary tree is represented by a list of lists \`[ node_value, left_child_index, right_child_index ]\`, where the root node is at index 0. The function should return the depth of the tree as an integer.","solution":"def max_depth(tree): Returns the maximum depth of a binary tree. :param tree: List of lists representing the binary tree, where each list is in the format [node_value, left_child_index, right_child_index]. :return: Integer representing the maximum depth of the tree. if not tree: return 0 def depth(index): if index == -1: return 0 node = tree[index] left_depth = depth(node[1]) right_depth = depth(node[2]) return max(left_depth, right_depth) + 1 return depth(0)"},{"question":"Write a function to remove all consecutive duplicates from a string, but keep a single copy of any repeated characters.","solution":"def remove_consecutive_duplicates(s): Returns a string with all consecutive duplicates removed, but keeps a single copy of any repeated characters. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Write a function to compute the binary representation of a decimal number. The function should return an integer value representing the binary equivalent of the given decimal number.","solution":"def decimal_to_binary(n): Returns the binary representation of a decimal number. :param n: Decimal number (int) :return: Binary representation (int) if n == 0: return 0 binary_representation = '' while n > 0: binary_representation = str(n % 2) + binary_representation n = n // 2 return int(binary_representation)"},{"question":"Write a function to print numbers from 1 to N recursively.","solution":"def print_numbers(n, current=1): Prints numbers from 1 to N recursively. This version adapted for testing returns a list. if current > n: return [] else: return [current] + print_numbers(n, current + 1)"},{"question":"Write a function to sort elements in an array using the Bubble Sort algorithm. Please ensure you provide a detailed explanation and code for the function.","solution":"def bubble_sort(arr): Sorts an array using the Bubble Sort algorithm. Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): # Track whether any elements were swapped during this pass. swapped = False for j in range(0, n-i-1): # If the element found is greater than the next element, swap them if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the list is sorted if not swapped: break return arr"},{"question":"Write a function to calculate the number of occurrences of each character in a given string and print the result in the format \\"character: count\\".","solution":"def count_characters(s): Returns a dictionary with the counts of each character in the string s. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict def print_character_counts(s): Prints the counts of each character in the string s in the format \\"character: count\\". counts = count_characters(s) for char, count in counts.items(): print(f\\"{char}: {count}\\")"},{"question":"Write a function to solve a Sudoku puzzle using backtracking. The function should take a 2D list representing the Sudoku board and solve it in-place.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle using backtracking. Input: - board: 2D list representing the Sudoku board (9x9 grid) The empty cells are denoted by 0. This function modifies the board in-place. def is_valid(board, row, col, num): # Check if number is not in the current row for i in range(9): if board[row][i] == num: return False # Check if number is not in the current column for i in range(9): if board[i][col] == num: return False # Check if number is not in the current 3x3 sub-box start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False return True def solve(): Backtracking helper function to solve the Sudoku puzzle. for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 return False return True solve()"},{"question":"Write a function to convert Fahrenheit to Celsius. The formula to convert Fahrenheit to Celsius is \`(Fahrenheit - 32) * 5/9\`.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. Parameters: fahrenheit (float): Temperature in Fahrenheit. Returns: float: Temperature in Celsius. return (fahrenheit - 32) * 5 / 9"},{"question":"Write a function to find the longest公共子串 in two strings \`str1\` and \`str2\`.","solution":"def longest_common_substring(str1, str2): Returns the longest common substring between str1 and str2. m = len(str1) n = len(str2) if m == 0 or n == 0: return \\"\\" longest = 0 ending_index = m # Create a 2D table to store lengths of longest common suffixes of substrings. # dp[i][j] contains the length of longest common suffix of str1[0..i-1] and str2[0..j-1]. dp = [[0] * (n + 1) for i in range(m + 1)] # Build dp array from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest: longest = dp[i][j] ending_index = i else: dp[i][j] = 0 if longest == 0: return \\"\\" # The longest common substring is str1[ending_index - longest: ending_index] return str1[ending_index - longest: ending_index]"},{"question":"Write a function to provide an XML representation of a given JSON object.","solution":"import json from xml.etree.ElementTree import Element, tostring, ElementTree def json_to_xml(json_obj, line_padding=\\"\\"): Converts a JSON object to an XML string. def _to_xml(element, json_obj): if isinstance(json_obj, dict): for tag_name, sub_obj in json_obj.items(): sub_element = Element(tag_name) element.append(sub_element) _to_xml(sub_element, sub_obj) elif isinstance(json_obj, list): for sub_obj in json_obj: sub_element = Element('item') element.append(sub_element) _to_xml(sub_element, sub_obj) else: element.text = str(json_obj) root_element = Element('root') _to_xml(root_element, json_obj) return tostring(root_element, 'utf-8') def convert_json_to_xml_string(json_str): json_obj = json.loads(json_str) return json_to_xml(json_obj).decode()"},{"question":"Write a function to find the longest common prefix (LCP) of two strings. The function should return the longest common prefix found in the two input strings. If there is no common prefix, it should return an empty string.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix of two strings str1 and str2. min_length = min(len(str1), len(str2)) i = 0 while i < min_length and str1[i] == str2[i]: i += 1 return str1[:i]"},{"question":"Write a function to calculate the factorial of a number and then find the sum of the digits of the factorial result.","solution":"def factorial_digit_sum(n): Calculate the factorial of a number n and return the sum of the digits of the factorial result. def factorial(x): if x == 0 or x == 1: return 1 else: return x * factorial(x - 1) fact = factorial(n) return sum(int(digit) for digit in str(fact))"},{"question":"Write a function to find the total number of possible unique paths in a grid. Each cell in the grid can only move either down or right. The path can start from any cell in the first row or the first column and end at any cell in the last row or the last column. The grid is represented as a 2D list \`grid\` where \`grid[i][j] == 0\` represents an open cell and \`grid[i][j] == 1\` represents a blocked cell. The function should return the total number of unique paths from the start to the end considering the blocked cells.","solution":"def unique_paths_with_obstacles(grid): Calculate the number of unique paths in a grid considering blocked cells (represented by 1). Parameters: grid (list of list of int): The grid where 0 represents an open cell and 1 represents a blocked cell. Returns: int: The number of unique paths from any cell in the first row or column to any cell in the last row or column. if not grid or grid[0][0] == 1: return 0 rows, cols = len(grid), len(grid[0]) # Make the DP table dp = [[0] * cols for _ in range(rows)] dp[0][0] = 1 # Fill the first row options (only move right) for j in range(1, cols): if grid[0][j] == 0: dp[0][j] = dp[0][j - 1] # Fill the first column options (only move down) for i in range(1, rows): if grid[i][0] == 0: dp[i][0] = dp[i - 1][0] # Process the rest of the grid for i in range(1, rows): for j in range(1, cols): if grid[i][j] == 0: dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[rows - 1][cols - 1]"},{"question":"Write a function to calculate the power of a number using Python's built-in \`math\` library. How can I use the function to calculate 3 to the power of 4?","solution":"import math def power(base, exponent): Returns the result of raising base to the power of exponent. return math.pow(base, exponent) # Example usage: result = power(3, 4) print(result) # Expected output: 81.0"},{"question":"Write a function to convert a string to an integer without using any built-in conversion functions like \`stoi\`, \`atoi\`, etc. You need to also handle cases where the integer might be negative.","solution":"def string_to_integer(s): Converts a string to an integer without using built-in conversion functions. Raises a ValueError if the string is not a valid integer representation. if not s: raise ValueError(\\"Empty string\\") s = s.strip() if not s: raise ValueError(\\"String contains only whitespace\\") negative = False if s[0] == '-': negative = True s = s[1:] elif s[0] == '+': s = s[1:] if not s: raise ValueError(\\"String does not contain any digits after sign\\") result = 0 for char in s: if char < '0' or char > '9': raise ValueError(f\\"Invalid character '{char}' in input string\\") result = result * 10 + (ord(char) - ord('0')) return -result if negative else result"},{"question":"Write a function to perform a prefix sum array, also known as a cumulative sum array. A prefix sum array is an array where each element at index i represents the sum of all elements from the start of the array up to index i.","solution":"def prefix_sum_array(arr): Returns the prefix sum array of the given list. Parameters: arr (List[int]): A list of integers. Returns: List[int]: A list where each element at index i is the sum of elements from the start of the array to index i. if not arr: return [] prefix_sum = [arr[0]] for i in range(1, len(arr)): prefix_sum.append(prefix_sum[-1] + arr[i]) return prefix_sum"},{"question":"Write a function to generate a sequence of Fibonacci numbers up to the nth number. The function should be named \`generate_fibonacci\` and should take a single integer argument \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def generate_fibonacci(n): Returns a list containing the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to toggle the case of each character in a given string. That is, convert all lowercase characters to uppercase and vice versa.","solution":"def toggle_case(s): Toggle the case of each character in the given string s. return ''.join([char.upper() if char.islower() else char.lower() for char in s])"},{"question":"Write a function to print all possible permutations of a given string. The function should take a single string as input and return all permutations in a list.","solution":"import itertools def get_permutations(s): Returns all possible permutations of the given string. permutations = list(itertools.permutations(s)) return [''.join(p) for p in permutations]"},{"question":"Write a function to calculate the sum of all divisors of a given number. The function should also handle edge cases such as when the input is less than or equal to zero.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of a given number n. If n is less than or equal to zero, return 0. if n <= 0: return 0 total = 0 for i in range(1, n + 1): if n % i == 0: total += i return total"},{"question":"Write a function to determine if a given point is inside a circle.","solution":"import math def is_point_in_circle(x, y, circle_center_x, circle_center_y, radius): Determine if a given point (x, y) is inside a circle with given center (circle_center_x, circle_center_y) and radius. Parameters: - x, y: Coordinates of the point - circle_center_x, circle_center_y: Coordinates of the circle's center - radius: Radius of the circle Returns: - True if the point is inside or on the circle, False otherwise distance = math.sqrt((x - circle_center_x) ** 2 + (y - circle_center_y) ** 2) return distance <= radius"},{"question":"Write a function to reverse the order of elements in a given array. This function should also reverse the order of characters in each string element. For example, given the array \`[\\"abc\\", \\"def\\", \\"ghi\\"]\`, the function should return \`[\\"cba\\", \\"fed\\", \\"ihg\\"]\`.","solution":"def reverse_array_and_elements(arr): Reverses the order of elements in the array and the order of characters in each string element. Parameters: arr (list[str]): The original list of strings. Returns: list[str]: A list with the order of elements and their characters reversed. return [elem[::-1] for elem in arr[::-1]]"},{"question":"Write a function to find the maximum number of points that can be covered by a given number of segments on a number line.","solution":"def max_covered_points(segments): Finds the maximum number of points that can be covered by given segments. Parameters: segments (List[Tuple[int, int]]): A list of segments represented as tuples of (start, end). Returns: int: Maximum number of points covered by the segments. if not segments: return 0 points = [] for segment in segments: points.append((segment[0], 1)) # start of segment points.append((segment[1], -1)) # end of segment # sort by point; in case of tie, sort by end (-1) before start (1) points.sort(key=lambda x: (x[0], x[1])) max_points = 0 current_points = 0 for point in points: current_points += point[1] max_points = max(max_points, current_points) return max_points"},{"question":"Write a function to convert the binary representation of a decimal number to its hexadecimal representation.","solution":"def binary_to_hex(binary_str): Converts the binary representation of a decimal number to its hexadecimal representation. :param binary_str: A string representing the binary number. :return: A string representing the hexadecimal number. decimal_number = int(binary_str, 2) hex_number = hex(decimal_number)[2:].upper() return hex_number"},{"question":"Write a function to reverse the first half of a linked list. If the length of the linked list is odd, the middle element should remain at the same position.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def reverse_first_half(head): if not head or not head.next: return head # Find the length of the linked list length = 0 current = head while current: length += 1 current = current.next # Determine the midpoint mid = length // 2 # Reverse the first half of the list prev = None current = head for _ in range(mid): next_node = current.next current.next = prev prev = current current = next_node # Attach the reversed first half with the second half head.next = current head = prev return head"},{"question":"Write a function to reverse the characters in a given list of words.","solution":"def reverse_characters(words): Reverses the characters in each word in a given list of words. Parameters: words (list of str): A list of words to reverse the characters. Returns: list of str: A list of words with characters reversed. return [word[::-1] for word in words]"},{"question":"Write a function to find the middle number in a sorted array. If the array has an odd number of elements, return the middle element. If the array has an even number of elements, return the average of the two middle elements.","solution":"def find_middle_number(sorted_array): Returns the middle number of a sorted array. If the array has an odd number of elements, return the middle element. If the array has an even number of elements, return the average of the two middle elements. n = len(sorted_array) if n % 2 == 1: # Odd number of elements return sorted_array[n // 2] else: # Even number of elements middle1 = sorted_array[n // 2 - 1] middle2 = sorted_array[n // 2] return (middle1 + middle2) / 2"},{"question":"Write a function to print the first \`n\` numbers of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the first n numbers in the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write a function to calculate the total number of vowels in a given string using Python. How can the function handle both uppercase and lowercase vowels?","solution":"def count_vowels(s): Returns the total number of vowels in the given string. Handles both uppercase and lowercase vowels. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Write a function to return the number of distinct digits in a given number. E.g., for the number 112233, the function should return 3 since there are 3 distinct digits (1, 2, and 3).","solution":"def count_distinct_digits(number): Returns the number of distinct digits in a given number. Parameters: number (int): The number to be analyzed. Returns: int: The number of distinct digits. number_str = str(abs(number)) # Convert the number to a string to handle its digits. distinct_digits = set(number_str) # Use a set to identify distinct digits. return len(distinct_digits)"},{"question":"Write a function to convert a list of characters into a string.","solution":"def list_to_string(char_list): Converts a list of characters into a string. Parameters: char_list (list): A list containing characters. Returns: str: A string formed by concatenating the characters in the list. return ''.join(char_list)"},{"question":"Write a function to delete an element from a binary search tree (BST). The function should handle all possible cases including when the node to be deleted is a leaf, a node with one child, or a node with two children.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def delete_node(root, key): if not root: return root if key < root.key: root.left = delete_node(root.left, key) elif key > root.key: root.right = delete_node(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left temp = find_minimum_node(root.right) root.key = temp.key root.right = delete_node(root.right, temp.key) return root def find_minimum_node(node): current = node while current.left is not None: current = current.left return current # Helper function to insert a node in the BST, used to build test trees def insert_node(root, key): if not root: return TreeNode(key) if key < root.key: root.left = insert_node(root.left, key) else: root.right = insert_node(root.right, key) return root # Helper function to inorder traverse the BST, used to verify test outcomes def inorder_traversal(root, result=None): if result is None: result = [] if root: inorder_traversal(root.left, result) result.append(root.key) inorder_traversal(root.right, result) return result"},{"question":"Write a function to unzip a tuple of tuples. The function should take a tuple of tuples as an input and return a tuple of tuples, where the i-th tuple contains the i-th elements of each tuple in the input.","solution":"def unzip(tuples): Unzips a tuple of tuples. Parameters: tuples (tuple of tuples): The input tuple of tuples. Returns: tuple of tuples: The unzipped tuple of tuples. return tuple(zip(*tuples))"},{"question":"Write a function to check if two strings are permutations of each other.","solution":"def are_permutations(str1, str2): Check if two strings are permutations of each other. # If lengths of strings are not same, they cannot be permutations if len(str1) != len(str2): return False # Sort both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Write a function to remove all the numbers in a string containing 13 or more consecutive digits. How can I handle this?","solution":"import re def remove_long_numbers(s): Removes all substrings containing 13 or more consecutive digits from the input string. Parameters: s (str): The input string. Returns: str: The string with all such substrings removed. return re.sub(r'd{13,}', '', s)"},{"question":"Write a function to calculate the sum of all numbers from 1 to n, where n is a given positive integer. If n is less than or equal to 0, return an error message. If n is greater than 10000, return a warning message.","solution":"def sum_numbers(n): Returns the sum of all numbers from 1 to n. If n is less than or equal to 0, returns an error message. If n is greater than 10000, returns a warning message. if n <= 0: return \\"Error: n must be a positive integer\\" elif n > 10000: return \\"Warning: n is too large\\" else: return sum(range(1, n + 1))"},{"question":"Write a function to parse a JSON string and return a dictionary. However, the single quotes in the string should be replaced with double quotes before parsing.","solution":"import json def parse_json_string(json_string): Parses a JSON string and returns a dictionary. The single quotes in the string are replaced with double quotes before parsing. :param json_string: A string containing JSON data with potential single quotes. :return: A dictionary representation of the JSON data. # Replace single quotes with double quotes json_string = json_string.replace(\\"'\\", '\\"') # Parse the JSON string return json.loads(json_string)"},{"question":"Write a function to remove duplicates from an integer array and return an array of unique elements. The function should also sort the unique elements in ascending order before returning them.","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from an integer array and returns a sorted array of unique elements. :param arr: List of integers :return: List of unique integers sorted in ascending order return sorted(set(arr))"},{"question":"Write a function to return the Nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n >= 2. Implement this function using both recursive and iterative approaches.","solution":"# Recursive approach def fibonacci_recursive(n): Returns the nth Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) # Iterative approach def fibonacci_iterative(n): Returns the nth Fibonacci number using iteration. if n == 0: return 0 elif n == 1: return 1 prev_prev, prev, current = 0, 1, 0 for _ in range(2, n + 1): current = prev_prev + prev prev_prev = prev prev = current return current"},{"question":"Write a function to solve the following problem: Given a string s, find the length of the longest palindromic substring in s. A palindromic substring is a substring which reads the same backward as forward.","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring in s. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 if not s: return 0 max_len = 0 for i in range(len(s)): len1 = expand_around_center(i, i) len2 = expand_around_center(i, i + 1) max_len = max(max_len, len1, len2) return max_len"},{"question":"Write a function to extract all the text between HTML tags.","solution":"from html.parser import HTMLParser class MyHTMLParser(HTMLParser): def __init__(self): super().__init__() self.text_parts = [] def handle_data(self, data): self.text_parts.append(data) def get_data(self): return ''.join(self.text_parts) def extract_text_from_html(html): Extracts all text between HTML tags. :param html: A string representing the HTML content. :return: A string with all the text content between HTML tags. parser = MyHTMLParser() parser.feed(html) return parser.get_data()"},{"question":"Write a function to calculate the product of two numbers without using the multiplication operator. You should use recursion to achieve this.","solution":"def recursive_multiply(a, b): Returns the product of a and b using recursion without using the multiplication operator. if a == 0 or b == 0: return 0 if b < 0: return -recursive_multiply(a, -b) return a + recursive_multiply(a, b - 1)"},{"question":"Write a function to add two numbers represented by two non-empty linked lists. Each node contains a single digit. Add the two numbers and return it as a linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Add two numbers represented by linked lists l1 and l2, where each node contains a single digit. Return the sum as a linked list. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry, value = divmod(total, 10) current.next = ListNode(value) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Write a function to calculate the total price of items in a shopping cart.","solution":"def calculate_total_price(cart): Calculate the total price of items in the shopping cart. Each item in the cart is represented as a dictionary with keys 'name', 'quantity', 'price_per_unit'. cart: list of dictionaries returns: total price of the items in the cart total_price = 0 for item in cart: total_price += item.get('quantity', 0) * item.get('price_per_unit', 0) return total_price"},{"question":"Write a function to remove a specific value from an array and return the new array without that value.","solution":"def remove_value_from_array(arr, value): Removes all instances of \`value\` from the array \`arr\`. Parameters: arr (list): The list from which the value will be removed. value: The value to remove from the list. Returns: list: The new list with the value removed. return [item for item in arr if item != value]"},{"question":"Write a function to reverse the nodes of k group in a linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): # Helper function to reverse a part of the linked list def reverseLinkedList(head, k): new_head, ptr = None, head while k: next_node = ptr.next ptr.next = new_head new_head = ptr ptr = next_node k -= 1 return new_head # Count the number of nodes in the linked list count = 0 ptr = head while ptr: ptr = ptr.next count += 1 # Dummy node acts as the starting point dummy = ListNode(0) dummy.next = head prev = dummy # Traversing the list and reversing every k nodes while count >= k: tail = prev.next next_segment = tail for _ in range(k - 1): next_segment = next_segment.next next = next_segment.next next_segment.next = None reversed_head = reverseLinkedList(tail, k) prev.next = reversed_head tail.next = next prev = tail count -= k return dummy.next"},{"question":"Write a function to compute the sum of all elements in a nested list. For example, given the nested list \`nested_list = [[1, 2, [3, 4]], 5, [6], 7]\`, the function should return \`28\`.","solution":"def sum_nested_list(nested_list): Returns the sum of all elements in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a function to solve the \\"minimum path sum\\" problem in Python. Given a grid of non-negative integers, the function should find the path from the top-left corner to the bottom-right corner that minimizes the sum of the numbers along the path. You can only move either down or right at any point in time.","solution":"def min_path_sum(grid): Calculate the minimum path sum from top-left to bottom-right of the grid. Parameters: grid (List[List[int]]): 2D list of non-negative integers Returns: int: The minimum path sum if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Initialize the first cell with its own value dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] # Iterate through the grid updating the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[rows-1][cols-1]"},{"question":"Write a function to implement the classic game \\"Towers of Hanoi.\\" The function should take three arguments: the number of disks \`n\`, the starting rod \`start\`, the ending rod \`end\`, and an auxiliary rod \`aux\`. The function should return a list of tuples, each representing a move (from, to) in the order of moves.","solution":"def towers_of_hanoi(n, start, end, aux): Solves the Towers of Hanoi problem. Parameters: n (int): Number of disks. start (str): The starting rod. end (str): The ending rod. aux (str): The auxiliary rod. Returns: list of tuples: Each tuple is a move (from rod, to rod). moves = [] def solve(n, start, end, aux): # Base case: only one disk if n == 1: moves.append((start, end)) return # Move n-1 disks from start to aux solve(n-1, start, aux, end) # Move the nth disk from start to end moves.append((start, end)) # Move the n-1 disks from aux to end solve(n-1, aux, end, start) solve(n, start, end, aux) return moves"},{"question":"Write a function to find the largest palindrome made from the product of two n-digit numbers. Given integer n, return the largest palindrome of length 2 * n. The function should return -1 if there is no such palindrome. For example, for n=2, the largest palindrome made from the product of two two-digit numbers is 9009 (101 * 99).","solution":"def is_palindrome(num): Helper function to check if a number is a palindrome. return str(num) == str(num)[::-1] def largest_palindrome_product(n): Returns the largest palindrome made from the product of two n-digit numbers. if n < 1: return -1 max_num = 10**n - 1 min_num = 10**(n-1) largest_palindrome = -1 for i in range(max_num, min_num - 1, -1): for j in range(i, min_num - 1, -1): product = i * j if is_palindrome(product) and product > largest_palindrome: largest_palindrome = product return largest_palindrome"},{"question":"Write a function to find the length of the longest palindrome that can be built with the letters of a given string. You can assume the string consists only of lowercase English letters.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be built with the letters of the given string s. from collections import Counter letter_count = Counter(s) length = 0 odd_found = False for count in letter_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Write a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Here is the initial function but it has some issues.","solution":"def is_palindrome(s): Check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and lower the case cleaned = ''.join(char.lower() for char in s if char.isalnum()) return cleaned == cleaned[::-1]"},{"question":"Write a function to find a specific element in a given list.","solution":"def find_element(lst, target): Searches for the target element in the given list 'lst' and returns its index. If the element is not found, returns -1. Parameters: lst (list): The list to search in. target (any): The element to search for. Returns: int: The index of the target element if found, else -1. try: return lst.index(target) except ValueError: return -1"},{"question":"Write a function to remove all duplicate characters from a string, preserving the original order of characters. No additional data structures are allowed. The function should run in O(n) time complexity and use O(1) additional space, assuming the string is ASCII.","solution":"def remove_duplicates(s): Removes all duplicate characters from a string, preserving the original order of characters. Assumes the input string consists of ASCII characters. seen = [False] * 128 # There are 128 ASCII characters result = [] for char in s: if not seen[ord(char)]: result.append(char) seen[ord(char)] = True return ''.join(result)"},{"question":"Write a function to sort a linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def sort_linked_list(head): Sorts a linked list in ascending order and returns the head of the sorted list. :param head: ListNode, the head of the linked list :return: ListNode, the head of the sorted linked list if not head or not head.next: return head # Split the linked list into halves using the slow and fast pointers technique slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next # Split the linked list into two halves slow.next = None # Recursively split and sort left = sort_linked_list(head) right = sort_linked_list(mid) # Merge sorted halves return merge_sorted_lists(left, right) def merge_sorted_lists(l1, l2): Merges two sorted linked lists and returns the head of the merged sorted list. :param l1: ListNode, the head of the first sorted linked list :param l2: ListNode, the head of the second sorted linked list :return: ListNode, the head of the merged sorted linked list dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 or l2 return dummy.next"},{"question":"Write a function to find the maximum depth of a binary tree using the Depth-First Search (DFS) method in Python.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree. :param root: TreeNode, the root of the binary tree :return: int, maximum depth of the binary tree if not root: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to check whether a string contains a substring with at least one uppercase letter, one lowercase letter, one digit, and one special character.","solution":"import re def contains_required_substring(s): Checks if the input string contains a substring with at least one uppercase letter, one lowercase letter, one digit, and one special character. pattern = r'(?=.*[A-Z])(?=.*[a-z])(?=.*d)(?=.*W)' return bool(re.search(pattern, s))"},{"question":"Write a function to compute the sum of the digits of a number in Python. Ensure the function handles both positive and negative numbers.","solution":"def sum_of_digits(number): Returns the sum of the digits of a given number. Handles both positive and negative numbers. number_str = str(abs(number)) return sum(int(digit) for digit in number_str)"},{"question":"Write a function to add one to a number represented as an array of digits. The array represents the number in reverse order, and each element contains a single digit. The function should return the updated array. If overflow occurs during the operation, return the result as a new array.","solution":"def add_one_to_number(digits): Adds one to a number represented as an array of digits in reverse order. Parameters: digits (list of int): The number represented as an array of digits in reverse order. Returns: list of int: The updated number represented as an array of digits in reverse order. carry = 1 for i in range(len(digits)): new_digit = digits[i] + carry if new_digit < 10: digits[i] = new_digit carry = 0 break else: digits[i] = 0 carry = 1 if carry == 1: digits.append(1) return digits"},{"question":"Write a function to reverse the order of words in a given string. Each word is considered to be separated by a space.","solution":"def reverse_words(sentence): Reverse the order of words in a given string. Params: sentence (str): The string containing words separated by spaces. Returns: str: The string with the words in reversed order. words = sentence.split() return ' '.join(reversed(words))"},{"question":"Write a function to split a string into words, removing any special characters and converting the string to lowercase. The input string may contain multiple delimiters such as spaces, commas, and tabs. The output should be a list of words with no leading or trailing spaces.","solution":"import re def split_string_to_words(input_string): Splits the input string into words, removing special characters and converting to lowercase. Args: input_string (str): The input string which may contain multiple delimiters and special characters. Returns: list: A list of words in lowercase with no special characters. # Convert to lowercase input_string = input_string.lower() # Replace special characters with spaces and split the string by delimiters words = re.split(r'[^w]+', input_string) # Filter out any empty strings from the list return list(filter(None, words))"},{"question":"Write a function to merge two sorted arrays, \`nums1\` and \`nums2\`, into one sorted array, and store the result in \`nums1\`. Assume that \`nums1\` has enough space to store the result, with the additional space being enough to accommodate all elements from \`nums2\`.","solution":"def merge(nums1, m, nums2, n): Merges two sorted arrays nums1 and nums2 into one sorted array in place in nums1. Parameters: nums1 (List[int]): The first sorted array which has enough space to store the merged result. m (int): The number of elements initialized in nums1. nums2 (List[int]): The second sorted array. n (int): The number of elements initialized in nums2. # Start from the end of both arrays i, j, k = m - 1, n - 1, m + n - 1 while i >= 0 and j >= 0: if nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 # If there are remaining elements in nums2 while j >= 0: nums1[k] = nums2[j] k -= 1 j -= 1"},{"question":"Write a function to determine the number of vowels and consonants in a string.","solution":"def count_vowels_consonants(s): Returns the number of vowels and consonants in the given string s. vowels = 'aeiouAEIOU' s = s.replace(\\" \\", \\"\\") # remove spaces to not count them as consonants num_vowels = sum(char in vowels for char in s) num_consonants = sum(char.isalpha() and char not in vowels for char in s) return num_vowels, num_consonants"},{"question":"Write a function to flatten a list of lists into a single list containing all the elements. For example, given a list \`[[1, 2, 3], [4, 5], [6, 7, 8]]\`, the function should return \`[1, 2, 3, 4, 5, 6, 7, 8]\`.","solution":"def flatten_list(list_of_lists): Given a list of lists, return a single list containing all the elements. :param list_of_lists: List[List[any]] :return: List[any] flattened_list = [] for sublist in list_of_lists: for item in sublist: flattened_list.append(item) return flattened_list"},{"question":"Write a function to find the sum of all numbers in a list that are divisible by a given divisor. The function should ignore any negative numbers or non-integer values in the list.","solution":"def sum_divisible_by(numbers, divisor): Returns the sum of all numbers in the list that are divisible by the given divisor. The function ignores negative numbers and non-integer values. if not isinstance(divisor, int) or divisor == 0: raise ValueError(\\"Divisor must be a non-zero integer\\") total = 0 for num in numbers: if isinstance(num, int) and num >= 0 and num % divisor == 0: total += num return total"},{"question":"Write a function to check if a given number is a valid ISBN10 number.","solution":"def is_valid_isbn10(isbn): Returns True if the given ISBN-10 number is valid, False otherwise. An ISBN-10 number is valid if: 1. It contains exactly 10 characters. 2. It contains only digits 0-9 or 'X' (which represents the digit 10) as the last character. 3. The sum of the digits multiplied by their position modulo 11 is zero. if len(isbn) != 10: return False total = 0 for i in range(9): if not isbn[i].isdigit(): return False total += int(isbn[i]) * (i + 1) if isbn[9] == 'X': total += 10 * 10 elif isbn[9].isdigit(): total += int(isbn[9]) * 10 else: return False return total % 11 == 0"},{"question":"Write a function to reverse a single-linked list. The function should also handle cases where the list might be empty or have only one node. Additionally, ensure that the function should not create any new nodes, only reverse the existing ones.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses a single-linked list. Parameters: head (ListNode): The head of the linked list. Returns: ListNode: The new head of the reversed linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to find the kth smallest element in a sorted list of lists. Each sublist is sorted in non-decreasing order. For example, given the list of lists \`[[2, 6, 8], [3, 6, 7], [5, 8, 9]]\` and \`k = 5\`, the function should return \`6\`.","solution":"import heapq def kth_smallest_in_sorted_matrix(matrix, k): Find the kth smallest element in a sorted list of lists. :param matrix: List[List[int]], a list of sorted lists :param k: int, the rank of the smallest element to find :return: int, the kth smallest element min_heap = [] # Initialize the heap with the first element from each row for r in range(min(len(matrix), k)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) number, row, col = 0, 0, 0 # Extract the smallest element from the heap k times for _ in range(k): number, row, col = heapq.heappop(min_heap) if col + 1 < len(matrix[row]): heapq.heappush(min_heap, (matrix[row][col + 1], row, col + 1)) return number"},{"question":"Write a function to calculate Fibonacci numbers using a dynamic programming approach in Python.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. :param n: The position in the Fibonacci sequence. :return: The nth Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") if n == 1: return 0 if n == 2: return 1 fib = [0] * (n + 1) # Create a list to store Fibonacci numbers up to nth fib[1] = 0 fib[2] = 1 for i in range(3, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a function to reverse a linked list. You need to implement it recursively and handle edge cases such as an empty list or a list with only one node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list_recursive(head): Reverses a linked list recursively. Args: head (ListNode): The head of the linked list. Returns: ListNode: The new head of the reversed linked list. # Base case: if head is empty or only one node, return head if not head or not head.next: return head new_head = reverse_linked_list_recursive(head.next) head.next.next = head head.next = None return new_head"},{"question":"Write a function to calculate the sum of all numbers in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_bst(root): Returns the sum of all numbers in a binary search tree (BST). if root is None: return 0 return root.val + sum_bst(root.left) + sum_bst(root.right)"},{"question":"Write a function to return the smallest value in a list of integers.","solution":"def find_minimum(lst): Returns the smallest value in a list of integers. if not lst: raise ValueError(\\"List must not be empty\\") return min(lst)"},{"question":"Write a function to generate the Fibonacci sequence up to the nth term. The sequence starts with 0 and 1, and each new number is the sum of the two preceding ones.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the nth term (inclusive). if n == 0: return [0] elif n == 1: return [0, 1] fib_sequence = [0, 1] while len(fib_sequence) <= n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to solve the \\"Container With Most Water\\" problem, which is a classic dynamic programming problem where you are given an array of non-negative integers representing the heights of walls at each index. The task is to find two walls such that the container formed between them holds the most water, given that the container's width is the distance between the walls and the height is the shorter of the two walls.","solution":"def max_area(height): Finds the maximum area of water a container can hold using the heights. :param height: List of non-negative integers representing the heights :return: The maximum area left, right = 0, len(height) - 1 max_area = 0 while left < right: # Calculate the current area width = right - left current_height = min(height[left], height[right]) current_area = width * current_height # Update max_area if current area is larger if current_area > max_area: max_area = current_area # Move the pointers if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"Write a function to sum all even numbers in a list. How would you implement this in Python?","solution":"def sum_even_numbers(lst): Returns the sum of all even numbers in the list. :param lst: List of integers :return: Sum of even integers in the list return sum(num for num in lst if num % 2 == 0)"},{"question":"Write a function to solve the Tower of Hanoi problem using recursion. The function should take three parameters representing the source, destination, and auxiliary rods.","solution":"def tower_of_hanoi(n, source, destination, auxiliary): Solves the Tower of Hanoi problem for n disks. Parameters: - n (int): Number of disks - source (str): The name of the source rod - destination (str): The name of the destination rod - auxiliary (str): The name of the auxiliary rod Returns: - moves (list of tuples): A list of moves where each move is represented as a tuple (from_rod, to_rod) if n <= 0: return [] moves = [] def solve(n, source, destination, auxiliary): if n == 1: moves.append((source, destination)) return solve(n - 1, source, auxiliary, destination) moves.append((source, destination)) solve(n - 1, auxiliary, destination, source) solve(n, source, destination, auxiliary) return moves"},{"question":"Write a function to return the number of even integers in a list that meet certain criteria.","solution":"def count_even_integers(lst, lower_limit, upper_limit): Counts the number of even integers in lst that are greater than lower_limit and less than upper_limit. Parameters: - lst: List of integers - lower_limit: Lower limit of the range - upper_limit: Upper limit of the range Returns: - count: The number of even integers in the specified range count = 0 for num in lst: if lower_limit < num < upper_limit and num % 2 == 0: count += 1 return count"},{"question":"Write a function to find the longest palindrome in a given string. If there are multiple palindromes of the same length, return the one that appears first. You should consider empty strings as valid palindromes.","solution":"def longest_palindrome(s): Returns the longest palindrome in the given string s. If there are multiple palindromes of the same length, returns the first one. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] if not s: return \\"\\" longest = \\"\\" for i in range(len(s)): # Check for odd-length palindromes palindrome1 = expand_around_center(i, i) if len(palindrome1) > len(longest): longest = palindrome1 # Check for even-length palindromes palindrome2 = expand_around_center(i, i+1) if len(palindrome2) > len(longest): longest = palindrome2 return longest"},{"question":"Write a function to solve the equation \`a*x + b = c*x + d\` for \`x\`, where \`a\`, \`b\`, \`c\`, and \`d\` are given constants. The function should return the value of \`x\`. If the equation has no solution or is an identity, return \`None\` or an appropriate message.","solution":"def solve_linear_equation(a, b, c, d): Solves the equation a*x + b = c*x + d for x. Returns the value of x if a solution exists, otherwise returns None if there is no unique solution. # If coefficients of x on both sides are the same if a == c: # If constants on both sides are also the same, it's an identity if b == d: return \\"Identity: x can be any value\\" else: return \\"No solution\\" # No solution if coefficients are the same but constants differ else: # Solve for x x = (d - b) / (a - c) return x"},{"question":"Write a function to determine if two binary strings, A and B, can be appended to form a palindrome. A palindrome is a string that reads the same backward as forward.","solution":"def can_form_palindrome(A, B): Determines if two binary strings, A and B, can be appended to form a palindrome. Args: A (str): The first binary string. B (str): The second binary string. Returns: bool: True if A appended with B or B appended with A forms a palindrome, False otherwise. combined_AB = A + B combined_BA = B + A return combined_AB == combined_AB[::-1] or combined_BA == combined_BA[::-1]"},{"question":"Write a function to find the maximum number in an array of integers. If the array is empty, return \`-1\`.","solution":"def find_maximum(arr): Returns the maximum number in an array of integers. If the array is empty, returns -1. if not arr: return -1 return max(arr)"},{"question":"Write a function to check if a given array contains any duplicate elements. If duplicates are found, return the duplicate elements as an array. If no duplicates are found, return an empty array.","solution":"def find_duplicates(arr): Returns a list of duplicate elements from the given array. If no duplicates are found, returns an empty list. seen = set() duplicates = set() for element in arr: if element in seen: duplicates.add(element) else: seen.add(element) return list(duplicates)"},{"question":"Write a function to find the maximum number in an array using recursion.","solution":"def find_max_recursive(arr): Find the maximum number in an array using recursion. Parameters: arr (list): The list of numbers to find the maximum from. Returns: int/float: The maximum number in the array. if len(arr) == 1: return arr[0] max_of_rest = find_max_recursive(arr[1:]) return max(arr[0], max_of_rest)"},{"question":"Write a function to generate all permutations of a given string in Python. For example, if the string is \\"abc\\", you should return [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"].","solution":"from itertools import permutations def generate_permutations(s): Returns all permutations of the given string. :param s: input string :return: a list of all permutations of the string perm_list = permutations(s) # Generate all permutations return [''.join(p) for p in perm_list]"},{"question":"Write a function to sort a list of dictionaries based on a specific key. The function should take three parameters: the list of dictionaries, the key to sort by, and the order of sorting (ascending or descending). The function should return a new sorted list of dictionaries.","solution":"def sort_dicts(dicts, sort_key, ascending=True): Returns a new list of dictionaries sorted based on the specified key. :param dicts: List of dictionaries to sort :param sort_key: Key to sort the dictionaries by :param ascending: Boolean indicating the order of sorting. True for ascending, False for descending :return: A new sorted list of dictionaries return sorted(dicts, key=lambda x: x[sort_key], reverse=not ascending)"},{"question":"Write a function to compute the sum of the squares of the first n natural numbers. The function should be named \`sum_of_squares\` and take one parameter \`n\`. The solution should be optimized for performance.","solution":"def sum_of_squares(n): Computes the sum of the squares of the first n natural numbers. Parameters: - n: The number of terms to compute the sum of squares for. Returns: The sum of the squares of the first n natural numbers. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Write a function to calculate the reverse of a given number.","solution":"def reverse_number(n): Returns the reverse of the given number n. reversed_num = int(str(abs(n))[::-1]) return reversed_num if n >= 0 else -reversed_num"},{"question":"Write a function to find all the subsets of a given set of (distinct) integers.","solution":"from typing import List def find_subsets(nums: List[int]) -> List[List[int]]: Finds all subsets of a given set of (distinct) integers. :param nums: List of distinct integers. :return: List of all subsets. def backtrack(start, path): # Add the current subset subsets.append(path[:]) for i in range(start, len(nums)): # Include nums[i] in the current subset path.append(nums[i]) # Move on to the next element backtrack(i + 1, path) # Backtrack, remove nums[i] from the current subset path.pop() subsets = [] backtrack(0, []) return subsets"},{"question":"Write a function to check if a given number \`n\` is a perfect square. The function should return \`True\` if \`n\` is a perfect square, and \`False\` otherwise. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. if n < 0: return False sqrt_n = int(n**0.5) return sqrt_n * sqrt_n == n"},{"question":"Write a function to calculate the square root of a number using the Newton-Raphson method. The function should take a single floating-point number as input and return the square root of that number. The function should be named \`newton_raphson_sqrt\`.","solution":"def newton_raphson_sqrt(x, tolerance=1e-10): Calculate the square root of a number using the Newton-Raphson method. Parameters: x (float): The number to find the square root of. tolerance (float): The tolerance level for the precision of the result. Returns: float: The square root of the number. if x < 0: raise ValueError(\\"Cannot calculate the square root of a negative number\\") guess = x / 2.0 while abs(guess * guess - x) > tolerance: guess = (guess + x / guess) / 2.0 return guess"},{"question":"Write a function to reverse a given string in Python. Given the string \\"Hello world!\\", it should return \\"!dlrow olleH\\".","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a function to reverse the order of elements in a list and then apply a transformation function to each element. You cannot use slicing magic.","solution":"def reverse_and_transform(lst, transform_func): Reverses the order of elements in a list and applies a transformation function to each element. Parameters: lst (list): The list of elements to reverse and transform. transform_func (function): The function to apply to each element of the reversed list. Returns: list: A new list with the elements reversed and transformed. result = [] for i in range(len(lst) - 1, -1, -1): result.append(transform_func(lst[i])) return result"},{"question":"Write a function to remove all occurrences of a given substring from a string and return the modified string. If the substring is not found, the original string should be returned unchanged. Additionally, the function should count and return the number of removals made.","solution":"def remove_substring(original_str, sub_str): Removes all occurrences of 'sub_str' in 'original_str' and returns the modified string along with the number of removals made. Parameters: original_str (str): The original string. sub_str (str): The substring to be removed. Returns: tuple: A tuple containing the modified string and the count of removals. count = original_str.count(sub_str) modified_str = original_str.replace(sub_str, '') return modified_str, count"},{"question":"Write a function to find the maximum and minimum values in an array of numbers. The function should return both the maximum and minimum values in the array. If the array is empty, the function should return null for both maximum and minimum values.","solution":"def find_max_min(arr): Returns a tuple with the maximum and minimum values in the array. If the array is empty, returns (None, None). if not arr: return (None, None) max_val = max(arr) min_val = min(arr) return (max_val, min_val)"},{"question":"Write a function to determine if a given string can be constructed by repeating a substring repeatedly. For example, \\"abab\\" can be constructed by repeating the substring \\"ab\\" twice.","solution":"def can_construct_from_repeating_substring(s): Determine if a given string can be constructed by repeating a substring. :param s: The input string :return: True if the string can be constructed by repeating a substring, otherwise False # Concatenate the string with itself and remove the first and last characters combined = (s + s)[1:-1] # Return True if the original string is now a substring of the combined string return s in combined"},{"question":"Write a function to convert a string to a list in Python. Each element of the list should be a character from the string. Practicing with such exercises helps in enhancing list manipulation skills in Python.","solution":"def string_to_list(s): Converts a string to a list where each element is a character from the string. return list(s)"},{"question":"Write a function to find the shortest path in a weighted graph. You can use either Dijkstra's algorithm or A* algorithm.","solution":"import heapq def dijkstra(graph, start, end): Returns the shortest path and its distance in a weighted graph using Dijkstra's algorithm. :param graph: A dictionary where keys are node identifiers and values are lists of tuples (neighbor, weight). :param start: The starting node identifier. :param end: The ending node identifier. :return: A tuple containing the total distance and the path as a list of nodes. queue = [(0, start, [])] seen = set() min_distances = {start: 0} while queue: (cost, node, path) = heapq.heappop(queue) if node in seen: continue path = path + [node] seen.add(node) if node == end: return (cost, path) for neighbor, weight in graph.get(node, []): if neighbor in seen: continue prev = min_distances.get(neighbor, None) next_cost = cost + weight if prev is None or next_cost < prev: min_distances[neighbor] = next_cost heapq.heappush(queue, (next_cost, neighbor, path)) return (float('inf'), []) # Sample graph for reference # graph = { # 'A': [('B', 1), ('C', 4)], # 'B': [('A', 1), ('C', 2), ('D', 5)], # 'C': [('A', 4), ('B', 2), ('D', 1)], # 'D': [('B', 5), ('C', 1)] # }"},{"question":"Write a function to calculate the least common multiple (LCM) of two numbers. The function should take two integers as input and return their LCM. For example, the LCM of 4 and 6 is 12. If either of the numbers is 0, the function should return 0.","solution":"import math def lcm(a, b): Returns the least common multiple of a and b. If either a or b is zero, returns 0. if a == 0 or b == 0: return 0 return abs(a * b) // math.gcd(a, b)"},{"question":"Write a function to count the number of times a specific word appears in a string, treating words as sequences of characters separated by one or more spaces. Your function should utilize regular expressions to identify words, ensuring that it correctly counts occurrences even when words are surrounded by punctuation or special characters.","solution":"import re def count_word_occurrences(text, word): Count the number of times a specific word appears in a string. :param text: The string to search within. :param word: The specific word to count. :return: The number of occurrences of the word. # Using re to identify words and ensure the exact word is counted pattern = r'b' + re.escape(word) + r'b' matches = re.findall(pattern, text, re.IGNORECASE) return len(matches)"},{"question":"Write a function to calculate the factorial of a number using a stack to simulate the call stack in recursion. The function should handle both positive and zero inputs.","solution":"def factorial(n): Returns the factorial of a number using an iterative approach with a stack to simulate the recursion call stack. if n < 0: raise ValueError(\\"Factorial does not exist for negative numbers.\\") stack = [] # Simulating the call stack stack.append(n) result = 1 while stack: current = stack.pop() if current > 1: result *= current stack.append(current - 1) return result"},{"question":"Write a function to reorder an array so that all the even numbers come before the odd numbers.","solution":"def reorder_even_before_odd(arr): Reorders the array so that all the even numbers come before the odd numbers. :param arr: List of integers. :return: List of integers with even numbers first followed by odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Write a function to find all prime numbers between 1 and a given number n.","solution":"def find_primes(n): Returns a list of all prime numbers between 1 and n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function to remove all instances of a character from a string, given the character to be removed. Here's the specific function signature \`def remove_character(s: str, ch: str) -> str:\`. You need to design a function to match the implementation.","solution":"def remove_character(s: str, ch: str) -> str: Removes all instances of character ch from the string s. Parameters: s (str): The original string. ch (str): The character to be removed from the string. Returns: str: A new string with all instances of ch removed. return s.replace(ch, '')"},{"question":"Write a function to find a specific value in a binary search tree (BST). How should the function handle cases where the value is not found?","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def search_bst(root, key): Searches for a given key in a binary search tree (BST). Args: root (TreeNode): The root of the BST key: The value to search for Returns: TreeNode: The node containing the key if found, None otherwise. # If root is None or key is present at root if root is None or root.val == key: return root # Key is greater than root's key if root.val < key: return search_bst(root.right, key) # Key is smaller than root's key return search_bst(root.left, key)"},{"question":"Write a function to check if a string is_palindrome or not. A string is said to be a palindrome if it reads the same backward as forward. An example of a palindrome is “racecar” and a non-palindrome is “hello”.","solution":"def is_palindrome(s): Returns True if the string \`s\` is a palindrome, otherwise False. A palindrome reads the same backward as forward. return s == s[::-1]"},{"question":"Write a function to find the length of the longest word in a string.","solution":"def longest_word_length(s): Returns the length of the longest word in the given string. Parameters: s (str): A string containing multiple words. Returns: int: The length of the longest word in the string. words = s.split() if not words: # If the string is empty return 0 return max(len(word) for word in words)"},{"question":"Write a function to capitalize the first letter of each word in a given sentence.","solution":"def capitalize_each_word(sentence): Capitalizes the first letter of each word in the given sentence. return ' '.join(word.capitalize() for word in sentence.split(' '))"},{"question":"Write a function to find the in-order successor of a node in a binary search tree (BST) where node values are unique. The in-order successor of a node is the node with the smallest value that is larger than the node's value. You may assume that each node in the tree has a link to its parent node in addition to its left and right children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None, parent=None): self.value = value self.left = left self.right = right self.parent = parent def min_value_node(node): current = node while current.left is not None: current = current.left return current def inorder_successor(root, node): # If node has a right child, the successor is the smallest value in the right subtree if node.right is not None: return min_value_node(node.right) # If there is no right subtree, travel up the tree until we find a node which is left child of its parent p = node.parent while p is not None and node == p.right: node = p p = p.parent return p"},{"question":"Write a function to implement the linear search algorithm in Python. Linear search is a simple search algorithm that checks each element in a list one by one until the desired element is found or the list is exhausted. It is not suitable for large lists, but it is efficient for small lists or lists that are not sorted.","solution":"def linear_search(arr, target): Perform a linear search for a target element in a list. :param arr: List of elements to search :param target: The element to search for :return: Index of target if found, else -1 for index, element in enumerate(arr): if element == target: return index return -1"},{"question":"Write a function to find the maximum area that can be enclosed by a line containing the origin and segments of two vertical lines in an array. The lines do not have to be parallel to the coordinate axes, but they must pass through the origin and two points on the array. The area is calculated as the product of the x-coordinate of the vertical lines and the y-coordinate of the point where the line through the origin intersects the array.","solution":"def max_area(arr): Given an array of vertical lines, find the maximum enclosed area that can be formed by a line passing through the origin and any two points on the array. :param arr: List[int] - list of integers representing the heights of vertical lines :return: int - the maximum area max_area = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): # The coordinates of the lines are (i, arr[i]) and (j, arr[j]) height = min(arr[i], arr[j]) # The height of the rectangle is the min of the heights of the two lines width = j - i # The width is the distance between the two lines area = height * width if area > max_area: max_area = area return max_area"},{"question":"Write a function to implement the classic game \\"Tic-Tac-Toe\\" on a 3x3 grid using a 2D array. Your function should handle player inputs, check for a win or a draw, and continue the game until it ends.","solution":"def check_win(board, player): Checks if the given player has won the game. # Check rows, columns, and diagonals win_conditions = [ [board[0][0], board[0][1], board[0][2]], [board[1][0], board[1][1], board[1][2]], [board[2][0], board[2][1], board[2][2]], [board[0][0], board[1][0], board[2][0]], [board[0][1], board[1][1], board[2][1]], [board[0][2], board[1][2], board[2][2]], [board[0][0], board[1][1], board[2][2]], [board[2][0], board[1][1], board[0][2]], ] return [player, player, player] in win_conditions def check_draw(board): Checks if the game board is a draw. for row in board: if \\" \\" in row: return False return True def play_tic_tac_toe(moves): Simulates a game of Tic-Tac-Toe given a list of moves. Moves should be provided as tuples of (player, row, col) where player is 'X' or 'O', and row and col are the 0-indexed positions on the board. Returns the result of the game: 'X', 'O', 'Draw', or 'Pending'. board = [[\\" \\" for _ in range(3)] for _ in range(3)] for i, move in enumerate(moves): player, row, col = move if board[row][col] != \\" \\": raise ValueError(\\"Invalid move: Position already taken.\\") board[row][col] = player if check_win(board, player): return player if i == len(moves) - 1 and check_draw(board): return \\"Draw\\" return \\"Pending\\""},{"question":"Write a function to find the maximum difference between two elements in an array such that the greater element appears after the smaller element. You can only perform a single pass through the array. The function should not use any extra space and should operate in O(n) time complexity.","solution":"def max_difference(arr): Returns the maximum difference between two elements in the array such that the larger element comes after the smaller element. :param arr: List[int] - The array in which to find the maximum difference :return: int - The maximum difference if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) else: min_element = arr[i] return max_diff"},{"question":"Write a function to search for a target value in a sorted 2D array, where each row and each column are sorted in ascending order. The function should return true if the target is found, and false otherwise.","solution":"def search_2d_matrix(matrix, target): Searches for the target value in a sorted 2D array where each row and each column are sorted in ascending order. Returns true if the target is found, and false otherwise. if not matrix or not matrix[0]: return False rows = len(matrix) cols = len(matrix[0]) # Start from the top-right corner row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 # Move left else: row += 1 # Move down return False"},{"question":"Write a function to sort an array of integers in ascending order. You can use any sorting algorithm you prefer. It should return the sorted array. For example, the function should take \`[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\` as input and return \`[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\`.","solution":"def sort_array(arr): Sorts an array of integers in ascending order using the built-in sorted() function. Parameters: arr (list): The list of integers to sort. Returns: list: The sorted list of integers. return sorted(arr)"},{"question":"Write a function to find a target integer \`x\` in a given 2D array \`matrix\`. The function should return \`true\` if the target is found, and \`false\` otherwise. The 2D array is sorted in a specific way: each row is sorted in ascending order, and each column is sorted in ascending order as well.","solution":"def search_sorted_matrix(matrix, target): Search target in a sorted 2D array. The 2D array is sorted in such a way that each row is sorted in ascending order and each column is sorted in ascending order. Parameters: matrix (list[list[int]]): The 2D array of integers. target (int): The integer to search for. Returns: bool: True if the target exists in the matrix, False otherwise. if not matrix or not matrix[0]: return False # Start from the top-right corner of the matrix row, col = 0, len(matrix[0]) - 1 while row < len(matrix) and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"Write a function to output \\"Hello, World!\\" and then swap the values of two integer variables.","solution":"def hello_world_and_swap(a, b): Outputs \\"Hello, World!\\" and swaps the values of a and b. Parameters: a (int): The first integer variable. b (int): The second integer variable. Returns: tuple: Swapped values of a and b (b, a) print(\\"Hello, World!\\") return b, a"},{"question":"Write a function to extract and return only the email addresses from a given list of strings.","solution":"import re def extract_emails(strings): Extract and return email addresses from a list of strings. :param strings: List of strings :return: List of email addresses email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' emails = [] for s in strings: emails.extend(re.findall(email_pattern, s)) return emails"},{"question":"Write a function to calculate the sum of all even numbers in the Fibonacci sequence up to a certain index \`n\`.","solution":"def sum_even_fibonacci(n): Returns the sum of all even numbers in the Fibonacci sequence up to a certain index n. :param n: index of the Fibonacci sequence up to which the sum is calculated. :return: sum of all even Fibonacci numbers up to the n-th index. if n <= 0: return 0 a, b = 0, 1 sum_even = 0 for i in range(n): if b % 2 == 0: sum_even += b a, b = b, a + b return sum_even"},{"question":"Write a function to calculate Fibonacci numbers recursively and then memoize the results to improve efficiency. Explain the steps involved in this process.","solution":"def fibonacci(n, memo=None): Returns the n-th Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to merge two sorted arrays into a single sorted array. The function should take two vectors as input and return a single vector containing all elements from both input vectors in sorted order.","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array. Parameters: array1 (list): First sorted array. array2 (list): Second sorted array. Returns: list: A single sorted array containing all elements from both input arrays. merged_array = [] i, j = 0, 0 # Traverse both arrays and insert smaller element from array1 or array2 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # Store remaining elements of array1 while i < len(array1): merged_array.append(array1[i]) i += 1 # Store remaining elements of array2 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"Write a function to determine the number of distinct binary numbers that can be formed using a subset of an array of integers.","solution":"def distinct_binary_numbers(arr): Returns the number of distinct binary numbers that can be formed using a subset of an array of integers. bin_set = set() # Create a set of all binary strings from the integers in the array for num in arr: bin_set.add(bin(num)[2:]) return len(bin_set)"},{"question":"Write a function to split a string into two parts and return them, with one part containing the first half of the string and the other part containing the second half. If the string length is odd, the extra character should be in the second part.","solution":"def split_string(s): Splits a string into two parts. The first part will contain the first half of the string, and the second part will contain the second half. If the string length is odd, the extra character will be included in the second part. Parameters: s (str): The string to be split. Returns: tuple: A tuple containing the two parts of the string. midpoint = len(s) // 2 if len(s) % 2 == 0: return s[:midpoint], s[midpoint:] else: return s[:midpoint], s[midpoint:]"},{"question":"Write a function to reverse a singly-linked list. The function should take a pointer to the head of the list as input and return a pointer to the new head of the reversed list. The linked list is defined as a series of nodes where each node contains an integer and a pointer to the next node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses a singly-linked list. :param head: ListNode, the head of the singly-linked list. :return: ListNode, the new head of the reversed singly-linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to find the shortest path in an undirected weighted graph using Dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start): Find the shortest path in an undirected weighted graph using Dijkstra's algorithm. :param graph: A dictionary where keys are node names and values are lists of tuples (neighbour, weight) representing the edges. :param start: The starting node for the path search. :return: A dictionary where keys are nodes and values are the shortest distance from the start node to that node. queue = [(0, start)] distances = {node: float('inf') for node in graph} distances[start] = 0 visited = set() while queue: current_distance, current_node = heapq.heappop(queue) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances"},{"question":"Write a function to create a min-heap from an array of integers. A min-heap is a binary tree where the parent node is less than or equal to its child nodes. How can we achieve this using the heapify function in Python?","solution":"import heapq def create_min_heap(arr): Converts an array of integers into a min-heap. heapq.heapify(arr) return arr"},{"question":"Write a function to find the intersection of two linked lists. The function should return the node where the two lists intersect. If the two linked lists have no intersection at all, return \`null\`.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def get_intersection_node(headA, headB): Gets the intersection node of two linked lists if they intersect. :param headA: ListNode - The head of the first linked list. :param headB: ListNode - The head of the second linked list. :return: ListNode - The intersection node or None. if not headA or not headB: return None ptr_a, ptr_b = headA, headB while ptr_a is not ptr_b: ptr_a = ptr_a.next if ptr_a else headB ptr_b = ptr_b.next if ptr_b else headA return ptr_a"},{"question":"Write a function to find the maximum profit that can be earned by selling and buying stocks on different days in an array representing stock prices on consecutive days. You can only perform one buy and one sell operation, and you must sell the stock before you buy it again. For example, given the array [7, 1, 5, 3, 6, 4], the maximum profit can be earned by buying on day 2 (price = 1) and selling on day 5 (price = 6), which results in a profit of 6 - 1 = 5.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell in the given list of stock prices. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Write a function to return the \`n\`th Tribonacci number. The Tribonacci sequence is a series of numbers where each number after the first three is the sum of the preceding three numbers. The sequence starts with \`Tribonacci(0) = 0\`, \`Tribonacci(1) = 1\`, and \`Tribonacci(2) = 1\`.","solution":"def tribonacci(n): Returns the nth Tribonacci number. if n == 0: return 0 elif n == 1 or n == 2: return 1 tribonacci_series = [0, 1, 1] for i in range(3, n + 1): next_value = tribonacci_series[-1] + tribonacci_series[-2] + tribonacci_series[-3] tribonacci_series.append(next_value) return tribonacci_series[n]"},{"question":"Write a function to find the shortest word in a given string. The function should ignore leading and trailing whitespaces, consider only alphabetic characters, and handle multiple spaces between words. The function should return the shortest word it finds after processing the input string.","solution":"def shortest_word(sentence): Returns the shortest word in the given sentence, ignoring leading and trailing whitespaces, and considering only alphabetic characters. Words are separated by spaces which can be multiple. # Strip leading and trailing whitespaces sentence = sentence.strip() # Split the sentence into words words = sentence.split() # Filter out non-alphabetic characters from words words = [word for word in words if word.isalpha()] # If there are no valid words, return an empty string if not words: return \\"\\" # Find the shortest word shortest = min(words, key=len) return shortest"},{"question":"Write a function to calculate the total cost of shipping for a list of packages, given their weights in kilograms and the shipping cost per kilogram. The function should return the total shipping cost for all packages combined. Each package's cost is calculated based on its weight and the rate provided. Additionally, each package is taxed at a fixed rate of 10%.","solution":"def total_shipping_cost(packages, cost_per_kg): Calculate the total shipping cost for a list of packages, considering a fixed tax rate of 10%. :param packages: List of weights of packages in kilograms. :param cost_per_kg: Shipping cost per kilogram. :return: Total shipping cost including tax. total_cost = 0 for weight in packages: cost_before_tax = weight * cost_per_kg tax = cost_before_tax * 0.10 total_cost += cost_before_tax + tax return total_cost"},{"question":"Write a function to calculate the contiguous subarray with the largest product. The function should return the maximum product found, not the subarray itself.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray from the input list nums. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Write a function to sort a list using the quicksort algorithm.","solution":"def quicksort(arr): Sorts a list using the quicksort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr else: pivot = arr[0] less = [x for x in arr[1:] if x <= pivot] greater = [x for x in arr[1:] if x > pivot] return quicksort(less) + [pivot] + quicksort(greater)"},{"question":"Write a function to find the union of two input arrays. The function should return an array containing all the unique elements from both arrays. The order of elements in the result should be the same as their first occurrence in the input arrays.","solution":"def union_arrays(arr1, arr2): Returns a list that represents the union of the input arrays arr1 and arr2. The result list contains all unique elements from arr1 and arr2, preserving their order of first occurrence. seen = set() result = [] for arr in [arr1, arr2]: for element in arr: if element not in seen: seen.add(element) result.append(element) return result"},{"question":"Write a function to calculate the product of all elements in a list. If the list is empty, the function should return 1, since the product of an empty set is conventionally considered to be 1.","solution":"def product_of_list(numbers): Returns the product of all elements in the list. If the list is empty, returns 1. if not numbers: return 1 product = 1 for number in numbers: product *= number return product"},{"question":"Write a function to print the numbers from 1 to n without using any loop structures (\`for\`, \`while\`, etc.).","solution":"def print_numbers(n, current=1): Recursively print numbers from 1 to n. if current > n: return print(current) print_numbers(n, current + 1)"},{"question":"Write a function to find the union of two sets. The function should return the union of the two sets as a list.","solution":"def union_of_sets(set1, set2): Takes two sets and returns their union as a list. union_set = set1 | set2 return list(union_set)"},{"question":"Write a function to calculate the area of a square given the length of its side.","solution":"def area_of_square(side_length): Returns the area of a square given the length of its side. :param side_length: Length of the side of the square. :type side_length: float :return: Area of the square. :rtype: float if side_length < 0: raise ValueError(\\"Side length cannot be negative\\") return side_length ** 2"},{"question":"Write a function to remove all the duplicate characters from a given string and return the result.","solution":"def remove_duplicates(s): Removes all duplicate characters from the given string s and returns the result. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to truncate a string after the specified number of days and append '...' at the end if the string is longer than the specified number of characters.","solution":"def truncate_string(s, num_chars): Truncate the string s after num_chars and append '...' if it is longer than num_chars characters. Parameters: s (str): The input string to be truncated. num_chars (int): The number of characters to keep before truncating. Returns: str: The truncated string with '...' appended if it was truncated. if len(s) > num_chars: return s[:num_chars] + '...' return s"},{"question":"Write a function to generate all unique permutations of a given string \`s\`.","solution":"from itertools import permutations def unique_permutations(s): Generate all unique permutations of the string \`s\`. :param s: The input string :return: A list of unique permutations return list(set(permutations(s, len(s))))"},{"question":"Write a function to calculate the cumulative sum of a geometric series given the first term, common ratio, and the number of terms. Write the function in Python.","solution":"def geometric_series_sum(a, r, n): Calculate the cumulative sum of a geometric series. :param a: The first term of the series. :param r: The common ratio of the series. :param n: The number of terms. :return: The sum of the first n terms of the geometric series. if r == 1: return a * n return a * (1 - r ** n) / (1 - r)"},{"question":"Write a function to solve the Tower of Hanoi problem using recursion. The function should take three parameters: the number of disks \`n\`, the source tower \`source\`, the auxiliary tower \`aux\`, and the destination tower \`dest\`. The function should print the steps required to solve the problem.","solution":"def tower_of_hanoi(n, source, aux, dest): Solves the Tower of Hanoi problem for n disks. Parameters: n (int): Number of disks source (str): The name of the source tower aux (str): The name of the auxiliary tower dest (str): The name of the destination tower Prints the steps required to solve the problem. if n == 1: print(f\\"Move disk 1 from {source} to {dest}\\") return tower_of_hanoi(n-1, source, dest, aux) print(f\\"Move disk {n} from {source} to {dest}\\") tower_of_hanoi(n-1, aux, source, dest)"},{"question":"Write a function to print the middle element(s) of a singly linked list. If the list has an even number of elements, print both the middle elements.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle_elements(head): Returns the middle element(s) of a singly linked list. If the list has an even number of elements, returns both the middle elements. if not head: return [] slow_ptr = head fast_ptr = head previous_slow_ptr = None while fast_ptr and fast_ptr.next: fast_ptr = fast_ptr.next.next previous_slow_ptr = slow_ptr slow_ptr = slow_ptr.next # If fast_ptr still exists, then the list has an odd number of elements if fast_ptr: return [slow_ptr.value] else: return [previous_slow_ptr.value, slow_ptr.value]"},{"question":"Write a function to parse a given URL and return the protocol, domain, and path components.","solution":"from urllib.parse import urlparse def parse_url(url): Parses a given URL and returns the protocol, domain, and path components. Args: url (str): The URL to parse. Returns: tuple: A tuple containing the protocol, domain, and path. parsed_url = urlparse(url) protocol = parsed_url.scheme domain = parsed_url.netloc path = parsed_url.path return protocol, domain, path"},{"question":"Write a function to compute the reverse of a linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, the head node of the linked list :return: ListNode, the new head node of the reversed linked list prev = None current = head while current: next_node = current.next # temporarily store the next node current.next = prev # reverse the current node's pointer prev = current # move prev up current = next_node # move to the next node return prev"},{"question":"Write a function to find the minimum element in a sorted and rotated array. Assume that the array does not contain any duplicates and is sorted in ascending order before rotation. Your function should return the minimum element in the array. For example, in the array \`[4, 5, 6, 7, 0, 1, 2]\`, the minimum element is \`0\`.","solution":"def find_min_in_rotated_sorted_array(nums): Finds the minimum element in a sorted and rotated array without duplicates. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Write a function to determine if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. A string is a palindrome when it reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example, \\"A man, a plan, a canal, Panama\\" is a palindrome.","solution":"def is_palindrome(s): Determines if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lowercase filtered_str = ''.join(char.lower() for char in s if char.isalnum()) # Compare the filtered string with its reverse return filtered_str == filtered_str[::-1]"},{"question":"Write a function to rotate an array to the right by k positions. The function should take an array and the number of positions to rotate as arguments and return the rotated array. Assume the array is non-empty and the number of positions to rotate is valid (i.e., between 0 and the length of the array).","solution":"def rotate_right(arr, k): Rotates the array to the right by k positions. Parameters: arr (list): The array to rotate. k (int): The number of positions to rotate the array. Returns: list: The rotated array. n = len(arr) k = k % n # Handle cases where k >= n return arr[-k:] + arr[:-k]"},{"question":"Write a function to find the maximum sum of a subarray of a given size \`k\` within a one-dimensional array of integers.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of a subarray of size k within the given one-dimensional array. Parameters: arr (list of int): The input array of integers. k (int): The size of the subarray. Returns: int: The maximum sum of a subarray of size k. if len(arr) < k or k <= 0: return 0 # Calculate the sum of the first 'k' elements max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array and update the sums for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find all the anagrams of a given string.","solution":"from itertools import permutations def find_anagrams(s): Returns a list of all anagrams of the given string. return [''.join(p) for p in set(permutations(s))]"},{"question":"Write a function to reverse a given string. In Python, you can use slicing to reverse a string easily. However, the challenge here is to reverse the string without using slicing. Your function should take a string as input and return the reversed string.","solution":"def reverse_string(s): Reverses the given string without using slicing. Args: s (str): input string to be reversed Returns: str: reversed string reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to generate the Fibonacci sequence up to a given number n, and return the sequence as a list containing both the numbers and their indices in the sequence. For example, if n = 10, the function should return [(0, 0), (1, 1), (1, 2), (2, 3), (3, 4), (5, 5), (8, 6)]. If n is 0, return an empty list.","solution":"def fibonacci_sequence_up_to(n): Returns the Fibonacci sequence up to n as a list of tuples where each tuple contains the index and the Fibonacci number. Parameters: n (int): The maximum value for the Fibonacci sequence. Returns: List[Tuple[int, int]]: A list of tuples with each tuple in the form (Fibonacci number, index). if n < 0: return [] sequence = [] a, b, idx = 0, 1, 0 while a <= n: sequence.append((a, idx)) a, b = b, a + b idx += 1 return sequence"},{"question":"Write a function to implement the stack data structure using a list in Python and provide a simple usage example.","solution":"class Stack: def __init__(self): Initialize an empty stack. self.items = [] def is_empty(self): Check if the stack is empty. Returns True if the stack is empty, False otherwise. return len(self.items) == 0 def push(self, item): Push an item onto the stack. self.items.append(item) def pop(self): Remove the top item from the stack and return it. If the stack is empty, raise an IndexError. if self.is_empty(): raise IndexError(\\"pop from empty stack\\") return self.items.pop() def peek(self): Return the top item from the stack without removing it. If the stack is empty, raise an IndexError. if self.is_empty(): raise IndexError(\\"peek from empty stack\\") return self.items[-1] def size(self): Return the number of items in the stack. return len(self.items) # Example usage: stack = Stack() stack.push(1) stack.push(2) stack.push(3) print(stack.pop()) # Output: 3 print(stack.peek()) # Output: 2 print(stack.size()) # Output: 2"},{"question":"Write a function to calculate the number of unique paths from the top-left corner to the bottom-right corner of a \`m x n\` grid, considering some cells are blocked. The robot can only move either down or right at any point in time.","solution":"def unique_paths_with_obstacles(obstacle_grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid with obstacles. The obstacle_grid is a list of lists containing 0 (no obstacle) and 1 (obstacle). if not obstacle_grid or obstacle_grid[0][0] == 1: return 0 m, n = len(obstacle_grid), len(obstacle_grid[0]) # Initialize the dp grid with 0s dp = [[0] * n for _ in range(m)] # Start point dp[0][0] = 1 for i in range(m): for j in range(n): if obstacle_grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function to find the prime factors of a number. For example, if the input is 36, the output should be \`[2, 2, 3, 3]\`.","solution":"def prime_factors(n): Returns the prime factors of the given number n as a list. factors = [] # Divide by 2 until n is odd while n % 2 == 0: factors.append(2) n = n // 2 # Check for odd factors from 3 to sqrt(n) i = 3 while i * i <= n: while n % i == 0: factors.append(i) n = n // i i += 2 # If n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a function to find the prefix of the shortest string in a given list of strings.","solution":"def shortest_string_prefix(strings): Returns the prefix of the shortest string in the given list of strings. Parameters: strings (list of str): A list of strings. Returns: str: The prefix of the shortest string. if not strings: # if the list is empty, return an empty string return \\"\\" # Find the shortest string in the list shortest_str = min(strings, key=len) # Example: [\\"cat\\",\\"caterpillar\\",\\"car\\"] # Shortest string is \\"cat\\", and its prefix is \\"cat\\" return shortest_str"},{"question":"Write a function to calculate the maximum profit that can be made by buying and selling a stock on any number of days. You can only hold at most one share at a time. The function should return the maximum profit.","solution":"def max_profit(prices): Calculate the maximum profit that can be made by buying and selling a stock on any number of days. You can only hold at most one share at a time. :param prices: List of prices where prices[i] is the price of a given stock on day i. :return: Maximum profit that can be achieved. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Write a function to calculate the Fibonacci sequence up to n terms. The function should return the sequence as a list. If n is 0, the function should return an empty list. If n is 1, the function should return the list containing only 0. If n is 2, the function should return the list containing 0 and 1.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to n terms as a list. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence"},{"question":"Write a function to count the number of valid parentheses strings of a given length and depth. A valid parentheses string is one where every \\"(\\" has a corresponding \\")\\" at the same depth level, and no parentheses are incorrectly ordered.","solution":"def count_valid_parentheses(n): Counts the number of valid parentheses strings of length \`n\`. A valid parentheses string is one where every \\"(\\" has a corresponding \\")\\" in proper order. Args: n (int): Length of the parentheses strings. Returns: int: The number of valid parentheses strings of length \`n\`. if n % 2 != 0: return 0 def catalan_number(n): if n == 0 or n == 1: return 1 cat = [0 for _ in range(n + 1)] cat[0], cat[1] = 1, 1 for i in range(2, n + 1): cat[i] = 0 for j in range(i): cat[i] += cat[j] * cat[i - j - 1] return cat[n] return catalan_number(n // 2)"},{"question":"Write a function to check if a number is even or odd. You should use Python as the programming language.","solution":"def is_even(number): Returns True if the number is even, False if it is odd. return number % 2 == 0"},{"question":"Write a function to find the maximum sum of a subarray in a one-dimensional array of numbers. The function should return the maximum sum along with the start and end indices of the subarray that contributes to this maximum sum. If there are multiple subarrays with the same maximum sum, return the one with the smallest start index.","solution":"def max_subarray_sum(nums): Finds the subarray with the maximum sum in a one-dimensional array of numbers. Returns: max_sum (int): the maximum sum of the subarray. start_index (int): the starting index of the subarray. end_index (int): the ending index of the subarray. max_sum = float('-inf') current_sum = 0 start = 0 start_index = 0 end_index = 0 for i in range(len(nums)): if current_sum <= 0: current_sum = nums[i] start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start_index = start end_index = i return max_sum, start_index, end_index"},{"question":"Write a function to remove the nth node from the end of a LinkedList in Python. For example, my linked list is 1->3->5 and n = 2, the linked list should be 1->3 after removing the 2nd node from the end.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeNthFromEnd(head, n): Removes the nth node from the end of the linked list. :param head: ListNode, the head of the linked list :param n: int, the position from the end of the node to remove :return: ListNode, the head of the modified linked list dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Move first pointer to n+1 positions ahead for _ in range(n + 1): first = first.next # Move both pointers until first pointer reaches the end while first is not None: first = first.next second = second.next # Remove the nth node from the end second.next = second.next.next return dummy.next def linked_list_to_list(head): Helper function to convert linked list to list for easy comparison :param head: ListNode, the head of the linked list :return: list, list representation of the linked list result = [] while head: result.append(head.val) head = head.next return result def list_to_linked_list(items): Helper function to convert list to linked list for easy testing :param items: list, list of values :return: ListNode, the head of the linked list dummy = ListNode(0) current = dummy for item in items: current.next = ListNode(item) current = current.next return dummy.next"},{"question":"Write a function to calculate the sum of all numeric characters in a given string.","solution":"def sum_of_numeric_characters(s): Returns the sum of all numeric characters in the given string. Parameters: s (str): The input string containing numeric and non-numeric characters. Returns: int: The sum of all numeric characters in the string. return sum(int(char) for char in s if char.isdigit())"},{"question":"Write a function to find the minimum number in an array of integers using recursion. To ensure your solution is as distinct as possible from the given code snippet, let's use recursion instead of using a built-in function or iterative method to find the minimum element. Your function should be completely self-contained and should not utilize any external libraries.","solution":"def find_min_recursive(arr): Find the minimum number in an array using recursion. if len(arr) == 1: return arr[0] sub_min = find_min_recursive(arr[1:]) return arr[0] if arr[0] < sub_min else sub_min"},{"question":"Write a function to determine the smallest integer in an array of integers. The function should be designed to handle integer overflow and underflow scenarios on both 32-bit and 64-bit systems.","solution":"def smallest_integer(arr): Returns the smallest integer in an array of integers. Handles empty arrays by returning None. if not arr: return None min_val = arr[0] for num in arr: if num < min_val: min_val = num return min_val"},{"question":"Write a function to find the length of the longest common subsequence (LCS) of three sequences seq1, seq2, and seq3. The sequences are given as strings. You should return the length of the longest subsequence that is present in all three strings.","solution":"def lcs_of_three(seq1, seq2, seq3): Returns the length of the longest common subsequence of three sequences. m, n, o = len(seq1), len(seq2), len(seq3) # Create a 3D DP array to store the results of subproblems dp = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): for k in range(1, o + 1): if seq1[i - 1] == seq2[j - 1] == seq3[k - 1]: dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1 else: dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) return dp[m][n][o]"},{"question":"Write a function to remove needless words from a given text. By \\"needless words,\\" we mean words that appear more than once in the text. The function should return the text with all unnecessary words removed, keeping only each word the first time it appears in the text. The order of the remaining words should be the same as in the original text.","solution":"def remove_needless_words(text): Removes needless words from the given text. Needless words are those that appear more than once. Keeps only the first occurrence of each word in the text while preserving the original order. :param text: str, the input text :return: str, the text with needless words removed words = text.split() seen = set() result = [] for word in words: if word not in seen: seen.add(word) result.append(word) return ' '.join(result)"},{"question":"Write a function to find all subsets of a given set of characters. For example, if the given set is {a, b, c}, the function should return {{}, {c}, {b}, {b, c}, {a}, {a, c}, {a, b}, {a, b, c}}.","solution":"def find_subsets(s): Returns all subsets of a given set of characters. subsets = [] def backtrack(start, path): subsets.append(set(path)) for i in range(start, len(s)): path.append(s[i]) backtrack(i + 1, path) path.pop() backtrack(0, []) return subsets"},{"question":"Write a function to check if a number is a palindrome. A_palindrome is a number that remains the same when its digits are reversed.","solution":"def is_palindrome(number): Returns True if the number is a palindrome, otherwise False. A palindrome is a number that remains the same when its digits are reversed. str_num = str(number) return str_num == str_num[::-1]"},{"question":"Write a function to find the maximum sum of a subarray with a given length \`k\`. The function should take a list of integers \`nums\` and an integer \`k\` as input and return the maximum sum of any subarray of length \`k\`.","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of any subarray of length k. Parameters: nums (list): List of integers. k (int): Length of the subarray. Returns: int: The maximum sum of any subarray of length k. # Edge cases if not nums or k <= 0 or k > len(nums): return 0 # Initial sum of the first 'k' elements max_sum = current_sum = sum(nums[:k]) # Sliding window for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to reverse a linked list. Implement the function in Python by reversing the linked list iteratively.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list iteratively. Args: head (ListNode): The head node of the linked list. Returns: ListNode: The new head of the reversed linked list. previous_node = None current_node = head while current_node is not None: next_node = current_node.next current_node.next = previous_node previous_node = current_node current_node = next_node return previous_node"},{"question":"Write a function to find the shortest distance to a given target value in an infinite list of integers. The integers can either be arranged in ascending or descending order. The list does not contain any duplicates. The function should handle these cases efficiently.","solution":"def find_shortest_distance(arr, target): Finds the shortest distance to a given target value in an infinite list of integers, where the integers can either be arranged in ascending or descending order, and the list does not contain any duplicates. Parameters: arr (callable): A function that returns the integer at a given index. target (int): The target value to find the distance to. Returns: int: The shortest distance to the target value. def is_ascending(): return arr(0) < arr(1) asc = is_ascending() left, right = 0, 1 while True: try: value = arr(right) if (asc and value >= target) or (not asc and value <= target): break left, right = right, right * 2 except (IndexError, ValueError): break while left <= right: mid = (left + right) // 2 try: value = arr(mid) except (IndexError, ValueError): value = float('inf') if asc else float('-inf') if value == target: return mid elif (asc and value < target) or (not asc and value > target): left = mid + 1 else: right = mid - 1 return min(abs(arr(left-1) - target), abs(arr(left) - target)) if left == right else -1"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This function should efficiently compute the sum without recalculating sums of smaller subarrays multiple times.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Uses Kadane's Algorithm to efficiently compute the maximum sum. :param nums: List of integers :return: Integer representing the maximum sum of a contiguous subarray if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to perform an in-order traversal of a binary tree and return the values in a list.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root): Performs in-order traversal of a binary tree and returns the values in a list. :param root: TreeNode, the root of the binary tree :return: List[int], list of values after in-order traversal result = [] def traverse(node): if node: traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Write a function to print \\"Hello, World!\\" and then call the function from your main program.","solution":"def print_hello_world(): Prints 'Hello, World!' to the console. print(\\"Hello, World!\\") if __name__ == \\"__main__\\": print_hello_world()"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. What are the edge cases for this function, and how can they be addressed?","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to reduce the length of a given string while retaining the original order of the characters. The desired output is a string of the same length where no two adjacent characters are the same. If changing the length of the string to meet this requirement is not possible, return an empty string.","solution":"def reduce_string(s): Reduces the length of a given string s while retaining the original order of the characters such that no two adjacent characters are the same. if not s: return \\"\\" result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \\"\\".join(result)"},{"question":"Write a function to reverse the elements of an array without using any extra space. You need to modify the array in place.","solution":"def reverse_array(arr): Reverses the elements of the array in place without using any extra space. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Write a function to reverse a string in Python. Provide a Python function that accomplishes this task. Additionally, include a piece of sample code that demonstrates how to use this function with different strings.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to check if a given string is a valid palindrome ignoring cases and spaces.","solution":"def is_valid_palindrome(s): Check if the given string is a valid palindrome ignoring cases and spaces. :param s: The string to check :return: True if the string is a palindrome, False otherwise cleaned_s = ''.join(c.lower() for c in s if c.isalnum()) return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function to calculate the factorial of a given non-negative integer. Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, the factorial of 5 (5!) is 5 * 4 * 3 * 2 * 1 = 120. Your function should handle edge cases such as 0! = 1 and negative inputs by returning an appropriate error message.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an error message. if n < 0: return \\"Error: factorial is not defined for negative numbers\\" elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to generate sets of valid brackets with n pairs of parentheses. Given n, return a list containing all the valid combinations of n pairs of parentheses.","solution":"def generate_parentheses(n): Generate all combinations of n pairs of valid parentheses. :param n: number of parentheses pairs :return: List containing all combinations of n pairs of parentheses def backtrack(path, open, close, max_pairs): if len(path) == max_pairs * 2: result.append(\\"\\".join(path)) return if open < max_pairs: path.append('(') backtrack(path, open + 1, close, max_pairs) path.pop() if close < open: path.append(')') backtrack(path, open, close + 1, max_pairs) path.pop() result = [] backtrack([], 0, 0, n) return result"},{"question":"Write a function to check if a given string is a valid IPv4 address. A valid IPv4 address is defined as a string in the form of \\"A.B.C.D\\", where A, B, C, and D are integers in the range of 0 to 255. Each of these integers can be represented (i.e., appear in decimal notation) as a sequence of digits, and no integer can contain leading zeros unless the integer itself is 0.","solution":"def is_valid_ipv4_address(address): Returns True if the given string is a valid IPv4 address, False otherwise. parts = address.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if not (0 <= num <= 255): return False if part != str(num): # This ensures there are no leading zeros return False return True"},{"question":"Write a function to check if a given string can be split into two parts where the first part is the reverse of the second part.","solution":"def can_split_into_reverse_parts(s): Checks if the given string can be split into two parts where the first part is the reverse of the second part. Parameters: s (str): The input string to check. Returns: bool: True if the string can be split into two parts where the first part is the reverse of the second part, False otherwise. n = len(s) if n % 2 != 0: return False mid = n // 2 first_half = s[:mid] second_half = s[mid:] return first_half == second_half[::-1]"},{"question":"Write a function to implement Dijkstra's Algorithm for finding the shortest path in a graph. The function should take as input the graph represented as an adjacency list and the starting vertex. It should return the shortest paths from the starting vertex to all other vertices. Assume the graph is represented as a dictionary where keys are vertices and values are lists of tuples representing the adjacent vertex and its cost. The graph may contain negative weights, but not negative cycles.","solution":"import heapq def dijkstra(graph, start_vertex): Implements Dijkstra's Algorithm to find the shortest paths from the start vertex to all other vertices. :param graph: Dictionary where keys are vertices and values are lists of tuples (adjacent_vertex, cost) :param start_vertex: The starting vertex for calculating shortest paths. :return: Dictionary of shortest paths costs from start_vertex to each vertex # Initialize distances with infinity and set the distance for the start vertex as 0 distances = {vertex: float('infinity') for vertex in graph} distances[start_vertex] = 0 # Use a priority queue to store vertices to explore priority_queue = [(0, start_vertex)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) # If the current distance is greater than the recorded distance, skip processing if current_distance > distances[current_vertex]: continue # Explore neighbors for neighbor, weight in graph[current_vertex]: distance = current_distance + weight # Update the distance if a shorter path is found if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a function to split a string based on whitespace and return the resulting list of substrings.","solution":"def split_string(s): Splits the input string based on whitespace and returns the list of substrings. Parameters: s (str): Input string to be split. Returns: list: List of substrings. return s.split()"},{"question":"Write a function to return \`n\` without using \`if\` or \`else\` statements. You can use any other conditionals, loops, etc.","solution":"def return_n(n): Returns the value of n. return {True: n}[True]"},{"question":"Write a function to sort an array using the selection sort algorithm.","solution":"def selection_sort(arr): Sorts an array using the selection sort algorithm. :param arr: List of elements to be sorted :return: Sorted list for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a function to implement a simple Caesar cipher encryption. The function should take a string and an integer representing the shift value and return the encrypted string.","solution":"def caesar_cipher(text, shift): Encrypts the given text using Caesar cipher with the given shift value. Parameters: text (str): The string to be encrypted. shift (int): The shift value for the cipher. Returns: str: The encrypted string. result = \\"\\" for char in text: if char.isalpha(): shift_base = 65 if char.isupper() else 97 result += chr((ord(char) - shift_base + shift) % 26 + shift_base) else: result += char return result"},{"question":"Write a function to serialize and deserialize a binary tree. The function needs to be able to handle a binary tree with an arbitrary number of nodes, including \`None\` nodes. The function should return the serialized string and be able to reconstruct the original binary tree from the string.","solution":"import json class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def serialize(root): Serializes a binary tree to a string. def helper(node): if not node: return None return [node.val, helper(node.left), helper(node.right)] return json.dumps(helper(root)) def deserialize(data): Deserializes a string to a binary tree. def helper(data_list): if data_list is None: return None node = TreeNode(data_list[0]) node.left = helper(data_list[1]) node.right = helper(data_list[2]) return node return helper(json.loads(data))"},{"question":"Write a function to calculate Fibonacci numbers using a recursive approach in Python.","solution":"def fibonacci(n): Returns the nth Fibonacci number using a recursive approach. :param n: non-negative integer index of the Fibonacci sequence :return: the nth Fibonacci number if n <= 0: raise ValueError(\\"Input must be a non-negative integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to calculate the total number of steps you need to take to reach a target number \`n\` from 0, by only taking steps of size \`k\`. Each step can be either positive or negative. You can increase your current position by \`k\` or decrease it by \`k\`. If it's impossible to reach \`n\`, the function should return \`-1\`.","solution":"def steps_to_reach_target(n, k): Calculate the total number of steps to reach the target number \`n\` from \`0\` using steps of size \`k\`. Each step can be either positive or negative. Parameters: n (int): The target number. k (int): The size of each step. Returns: int: The total number of steps required to reach \`n\`, or \`-1\` if unreachable. # If n is exactly divisible by k, it's possible to reach n if n % k == 0: return abs(n // k) else: return -1"},{"question":"Write a function to generate JSON for a sales report. The function should take in parameters such as product_id, quantity, price, and discount, and return the JSON string for the report. The report should include the total price after discount and the tax on the total price.","solution":"import json def generate_sales_report(product_id, quantity, price, discount, tax_rate=0.1): Generates a JSON sales report. Parameters: - product_id (str): The ID of the product - quantity (int): The quantity of the product sold - price (float): The price per unit of the product - discount (float): The discount on the product, as a percentage (0-100) - tax_rate (float): The tax rate to apply on the total price (default is 0.1 or 10%) Returns: - str: JSON string of the sales report # Calculate the total price before discount total_price_before_discount = quantity * price # Calculate the total discount amount total_discount = total_price_before_discount * (discount / 100) # Calculate the total price after discount total_price_after_discount = total_price_before_discount - total_discount # Calculate the tax on the total price after discount tax = total_price_after_discount * tax_rate # Create the sales report dictionary report = { \\"product_id\\": product_id, \\"quantity\\": quantity, \\"price\\": price, \\"discount\\": discount, \\"total_price_before_discount\\": total_price_before_discount, \\"total_discount\\": total_discount, \\"total_price_after_discount\\": total_price_after_discount, \\"tax\\": tax, } # Generate the JSON string of the report return json.dumps(report, indent=4)"},{"question":"Write a function to sort a given list of numbers in ascending order without using any built-in sorting functions. Implement the sorting algorithm using the Bubble Sort technique.","solution":"def bubble_sort(arr): Sorts the given list of numbers in ascending order using Bubble Sort. Args: arr (list of int/float): The list of numbers to sort. Returns: list of int/float: The sorted list of numbers. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a function to calculate the sum of all elements in an array, but only if those elements are positive.","solution":"def sum_of_positive_elements(arr): Returns the sum of all positive elements in the given array. return sum(x for x in arr if x > 0)"},{"question":"Write a function to check if an array contains any negative numbers. If a negative number is found, the function should return its position (index) in the array. If no negative numbers are found, the function should return -1.","solution":"def find_negative(arr): Returns the index of the first negative number in the array, or -1 if no negative number is found. for index, num in enumerate(arr): if num < 0: return index return -1"},{"question":"Write a function to find the majority element in an array. The majority element is the element that appears more than ⌊n / 2⌋ times where n is the size of the array.","solution":"def find_majority_element(nums): Returns the majority element in the list nums if it exists. The majority element is the element that appears more than ⌊n / 2⌋ times. Args: nums: List of integers. Returns: Integer representing the majority element or None if there is no majority element. count = {} majority_count = len(nums) // 2 for num in nums: count[num] = count.get(num, 0) + 1 if count[num] > majority_count: return num return None"},{"question":"Write a function to resolve a simple arithmetic expression, which contains integers, addition, subtraction, multiplication, and division, but does not contain parentheses. For example, given the expression \\"3+2*2\\", the function should return the result of the expression.","solution":"def resolve_expression(expression): Resolves a simple arithmetic expression containing integers, addition, subtraction, multiplication, and division. if not expression: return 0 operators = set('+-*/') stack = [] num = 0 sign = '+' for i, char in enumerate(expression): if char.isdigit(): num = num * 10 + int(char) if char in operators or i == len(expression) - 1: if sign == '+': stack.append(num) elif sign == '-': stack.append(-num) elif sign == '*': stack.append(stack.pop() * num) elif sign == '/': stack.append(int(stack.pop() / num)) sign = char num = 0 return sum(stack)"},{"question":"Write a function to remove duplicates from an array and return the new array that contains only unique elements.","solution":"def remove_duplicates(arr): Removes duplicates from the array and returns a new array with unique elements. return list(set(arr))"},{"question":"Write a function to determine the largest prime number less than or equal to a given number \`n\`.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def largest_prime(n): Returns the largest prime number less than or equal to n. If no prime number is found, returns None. for num in range(n, 1, -1): if is_prime(num): return num return None"},{"question":"Write a function to determine if a binary number is a palindrome. The function should work for both even and odd lengths of binary strings.","solution":"def is_binary_palindrome(binary_string): Determines if a binary string is a palindrome. return binary_string == binary_string[::-1]"},{"question":"Write a function to calculate the power of a number using the divide-and-conquer approach. This technique should recursively divide the problem into smaller subproblems, solve them, and then combine the results. For example, to calculate \`2^4\`, we would calculate \`2^2\` and then square the result. The function should be designed to reduce the number of multiplications required to calculate \`a^b\` as much as possible.","solution":"def power(a, b): Calculates a^b using the divide-and-conquer approach. if b == 0: return 1 if b < 0: return 1 / power(a, -b) half_power = power(a, b // 2) if b % 2 == 0: return half_power * half_power else: return half_power * half_power * a"},{"question":"Write a function to find the minimum number of operations to convert a given string into a palindrome. A single operation is defined as inserting a character at any position in the string.","solution":"def min_insertions_to_form_palindrome(s): Returns the minimum number of insertions required to convert the given string into a palindrome. # Reverse the string and store it in a new variable rev_s = s[::-1] # Get the length of the string n = len(s) # Create a 2D array to store the length of longest common subsequence # Initialize with zeros dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill the dp array to find the length of longest common subsequence for i in range(1, n + 1): for j in range(1, n + 1): if s[i - 1] == rev_s[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of longest palindromic subsequence lps_length = dp[n][n] # The minimum number of insertions needed is # the total_length - length of longest palindromic subsequence min_insertions = n - lps_length return min_insertions"},{"question":"Write a function to count the number of words in a string. Assume that words are separated by spaces.","solution":"def count_words(s): Returns the number of words in the string s. Words are separated by spaces. return len(s.split())"},{"question":"Write a function to reverse a string \`s\` and return the result. If \`s\` is \`None\` or an empty string, return an empty string. If \`s\` contains non-alphanumeric characters, ignore them when reversing the string. Only reverse the alphanumeric characters and maintain their original positions in the result.","solution":"def reverse_string(s): This function reverses the alphanumeric characters in the string \`s\` and returns the result. Non-alphanumeric characters are ignored and kept in their original positions. if s is None or s == \\"\\": return \\"\\" alphanumeric_chars = [char for char in s if char.isalnum()] reversed_chars = alphanumeric_chars[::-1] result = [] alnum_index = 0 for char in s: if char.isalnum(): result.append(reversed_chars[alnum_index]) alnum_index += 1 else: result.append(char) return ''.join(result)"},{"question":"Write a function to remove duplicates from an array using a single loop and without using any sort function or additional memory. If possible, optimize the function for space and time complexity.","solution":"def remove_duplicates(arr): Removes duplicates from an array using a single loop and without using additional memory. if not arr: return [] write_index = 1 # Start from the second element for read_index in range(1, len(arr)): unique = True for i in range(write_index): if arr[read_index] == arr[i]: unique = False break if unique: arr[write_index] = arr[read_index] write_index += 1 return arr[:write_index]"},{"question":"Write a function to find the longest common prefix among an array of strings. If there is no common prefix, return an empty string \\"\\"","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Start by assuming the whole first string is the common prefix prefix = strs[0] for s in strs[1:]: # Reduce the prefix until it matches the start of each string while s[:len(prefix)] != prefix and prefix: prefix = prefix[:len(prefix)-1] if not prefix: break return prefix"},{"question":"Write a function to validate a credit card number. The function should take a string representing the credit card number and return a boolean indicating whether the number is valid.","solution":"def validate_credit_card(number): Validate a credit card number using the Luhn algorithm. Parameters: number (str): The credit card number as a string Returns: bool: True if the number is valid, False otherwise def luhn_checksum(card_number): def digits_of(n): return [int(d) for d in str(n)] digits = digits_of(card_number) odd_digits = digits[-1::-2] even_digits = digits[-2::-2] checksum = sum(odd_digits) for d in even_digits: checksum += sum(digits_of(d * 2)) return checksum % 10 # Check if the input consists solely of digits and is non-empty if not number.isdigit() or len(number) == 0: return False return luhn_checksum(number) == 0"},{"question":"Write a function to sort an array of integers using the bubble sort algorithm. The array may contain both positive and negative integers. Your function should return the sorted array.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort algorithm. :param arr: list of integers :return: sorted list of integers n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a function to generate all permutations of a given string. In your solution, provide a strategy to generate permutations without using recursion. Instead, use stack-based iteration and backtracking.","solution":"def generate_permutations(s): Generates all permutations of a given string \`s\` using stack-based iteration and backtracking. if len(s) == 0: return [''] permutations = [] stack = [(s, '')] while stack: current_string, current_perm = stack.pop() if len(current_string) == 0: permutations.append(current_perm) else: for i in range(len(current_string)): new_string = current_string[:i] + current_string[i+1:] new_perm = current_perm + current_string[i] stack.append((new_string, new_perm)) return permutations"},{"question":"Write a function to find the two numbers in an array that add up to a specific target number. The function should return the indices of these two numbers in an array. If there are no two numbers that add up to the target, return an empty array. Assume that each input will have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in an array that add up to a specific target number. Parameters: nums (list): List of integers. target (int): Target sum. Returns: list: A list containing the indices of the two numbers that add up to the target, or an empty list if no such pair exists. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a function to print all the subsets of a set.","solution":"def get_subsets(input_set): Returns a list of all subsets of the input set. subsets = [] n = len(input_set) for i in range(1 << n): subset = [input_set[j] for j in range(n) if i & (1 << j)] subsets.append(subset) return subsets"},{"question":"Write a function to calculate the LCM of two numbers using Python.","solution":"import math def lcm(a, b): Returns the Least Common Multiple (LCM) of two numbers a and b. The LCM of a and b is calculated using the formula: abs(a*b) // gcd(a, b) return abs(a * b) // math.gcd(a, b)"},{"question":"Write a function to print the elements of an array in reverse order without creating a new array.","solution":"def print_reverse(arr): Prints the elements of the array in reverse order without creating a new array. for i in range(len(arr) - 1, -1, -1): print(arr[i])"},{"question":"Write a function to call another function in Python.","solution":"def caller(func, *args, **kwargs): Call the given function with the specified arguments and keyword arguments. Parameters: func (callable): The function to be called. *args: Variable length argument list. **kwargs: Arbitrary keyword arguments. Returns: result: The result of the function call. return func(*args, **kwargs)"},{"question":"Write a function to find the maximum number of consecutive metastatic cells in a given string, where a metastatic cell is represented by '1'.","solution":"def max_consecutive_metastatic_cells(cells: str) -> int: Returns the maximum number of consecutive metastatic ('1') cells in the given string. max_count = 0 current_count = 0 for cell in cells: if cell == '1': current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"Write a function to count the number of nodes in a given binary search tree (BST). If the BST is empty, return 0. The function should take the root of the BST as its parameter and return the total number of nodes in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_nodes(root): Counts the number of nodes in a binary search tree (BST). :param root: TreeNode, the root of the BST :return: int, the total number of nodes in the tree if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a function to find a sorted list of numbers that are common between two lists, ensuring each number appears only once, even if it's repeated multiple times in the input lists.","solution":"def find_common_elements_sorted(list1, list2): Returns a sorted list of unique common elements between two lists. # Convert lists to sets to find common elements set1 = set(list1) set2 = set(list2) # Find the common elements common_elements = set1.intersection(set2) # Convert the set to a sorted list sorted_common_elements = sorted(common_elements) return sorted_common_elements"},{"question":"Write a function to check if a given number is a valid phone number. A valid phone number should match the standard U.S. phone number format: (xxx) xxx-xxxx or xxx.xxx.xxxx or xxx-xxx-xxxx, where x represents a digit.","solution":"import re def is_valid_phone_number(phone_number): Check if the given phone number is valid as per the standard U.S. phone number formats: (xxx) xxx-xxxx, xxx.xxx.xxxx, or xxx-xxx-xxxx. patterns = [ r'^(d{3}) d{3}-d{4}', r'^d{3}.d{3}.d{4}', r'^d{3}-d{3}-d{4}', ] for pattern in patterns: if re.match(pattern, phone_number): return True return False"},{"question":"Write a function to search for a target value in a sorted array that has been rotated. The array may contain duplicates, and the function should return the index of the target if found, or -1 if it is not present in the array.","solution":"def search_rotated_sorted_array(nums, target): Searches for a target value in a rotated sorted array. Returns the index of the target if found, else returns -1. if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] == nums[mid] == nums[right]: left += 1 right -= 1 elif nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find the nth Fibonacci number in Python. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. Write a function \`fibonacci(n)\` that computes the nth Fibonacci number using recursion. Also, write a memoized version of the function to solve this problem more efficiently.","solution":"def fibonacci_recursive(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) def fibonacci_memoized(n, memo={}): Returns the nth Fibonacci number using memoization. if n <= 0: return 0 elif n == 1: return 1 if n in memo: return memo[n] memo[n] = fibonacci_memoized(n - 1, memo) + fibonacci_memoized(n - 2, memo) return memo[n]"},{"question":"Write a function to implement Depth-First Search (DFS) on a graph using a stack. Explain the steps and the code.","solution":"def dfs(graph, start): Performs depth-first search (DFS) on a graph using a stack. :param graph: Dictionary representing the adjacency list of the graph. :param start: Node to start the DFS traversal from. :return: List of nodes in the order they were visited. visited = set() # Set to keep track of visited nodes stack = [start] # Stack to help with DFS result = [] # List to store the order of visited nodes while stack: node = stack.pop() if node not in visited: visited.add(node) result.append(node) # Push all unvisited adjacent nodes to the stack for neighbor in graph[node]: if neighbor not in visited: stack.append(neighbor) return result"},{"question":"Write a function to reverse a string in Python, without using the slicing method. Please ensure the function is efficient in terms of time and space complexity.","solution":"def reverse_string(s): Returns the reverse of the given string s. result = [] for char in s: result.insert(0, char) return ''.join(result)"},{"question":"Write a function to calculate the area of a circle given its radius. The formula for calculating the area of a circle is A = π * r^2, where A is the area, π is a mathematical constant approximately equal to 3.14159, and r is the radius of the circle.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. The formula for calculating the area is A = π * r^2. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius ** 2"},{"question":"Write a function to return the number of distinct integers in an array.","solution":"def count_distinct_integers(arr): Returns the number of distinct integers in the array \`arr\`. return len(set(arr))"},{"question":"Write a function to find the maximum number of distinct characters in any substring of a given string.","solution":"def max_distinct_characters(s): Returns the maximum number of distinct characters in any substring of the given string s. n = len(s) max_distinct = 0 # For each possible start of the substring for start in range(n): seen = set() # For each possible end of the substring for end in range(start, n): seen.add(s[end]) max_distinct = max(max_distinct, len(seen)) return max_distinct"},{"question":"Write a function to return the last word of a string.","solution":"def last_word(s): Returns the last word of the string s. if not s.strip(): return \\"\\" words = s.split() return words[-1] if words else \\"\\""},{"question":"Write a function to find the binary representation of a given integer using only bitwise operations and without using any loops or conditional statements.","solution":"def int_to_binary(n, num_bits=32): Converts an integer to its binary representation using bitwise operations. The default bit length is set to 32 bits. :param n: The integer to convert. :param num_bits: The length of the binary representation. :return: The binary representation of the integer as a string. return ''.join(str((n >> bit) & 1) for bit in range(num_bits - 1, -1, -1))"},{"question":"Write a function to insert a node at a specific position in a singly linked list. The function should handle the case when the position is out of bounds by not inserting the node and returning a специфированное значение.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next class SinglyLinkedList: def __init__(self): self.head = None def insert_at_position(self, value, position): Insert a node with given value at specified position. Return -1 if position is out of bounds. Position is 0-based index. new_node = ListNode(value) if position == 0: new_node.next = self.head self.head = new_node return previous = None current = self.head current_position = 0 while current is not None and current_position < position: previous = current current = current.next current_position += 1 if current_position == position: previous.next = new_node new_node.next = current else: # Position is out of bounds return -1 def to_list(self): Helper function to convert linked list to a Python list for easy comparison in tests. result = [] current = self.head while current: result.append(current.value) current = current.next return result"},{"question":"Write a function to generate a Fibonacci sequence with a length of 10.","solution":"def generate_fibonacci(length=10): Generate a Fibonacci sequence of a specified length. Parameters: length (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence. if length <= 0: return [] elif length == 1: return [0] sequence = [0, 1] for _ in range(2, length): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to find all the anagrams of a given string from a dictionary of words. You can use Python's built-in string methods and features for this task. For instance, if the input string is \\"listen\\" and the dictionary is [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\"], the function should return [\\"enlist\\", \\"inlets\\"] since \\"listen\\" and \\"enlist\\" (and \\"inlets\\") are anagrams.","solution":"def find_anagrams(word, dictionary): Return a list of anagrams of the given word from the provided dictionary. Parameters: word (str): The input string for which we need to find anagrams. dictionary (list): The list of words to check for anagrams. Returns: list: A list of anagrams of the input word found in the dictionary. sorted_word = sorted(word) return [w for w in dictionary if sorted(w) == sorted_word]"},{"question":"Write a function to find the LCA (Lowest Common Ancestor) of an N-ary Tree.","solution":"class TreeNode: def __init__(self, val): self.val = val self.children = [] def find_path(root, path, k): if root is None: return False path.append(root.val) if root.val == k: return True for child in root.children: if find_path(child, path, k): return True path.pop() return False def lca(root, n1, n2): path1 = [] path2 = [] if not find_path(root, path1, n1) or not find_path(root, path2, n2): return -1 i = 0 while i < len(path1) and i < len(path2): if path1[i] != path2[i]: break i += 1 return path1[i - 1]"},{"question":"Write a function to find the maximum sum of elements in any contiguous subarray of length exactly k within a given list of integers. The function should take two parameters: a list of integers and the integer k, representing the length of the subarray.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of elements in any contiguous subarray of length exactly k. Parameters: arr (list of int): List of integers k (int): Length of the subarray Returns: int: Maximum sum of any contiguous subarray of length k if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to implement the Fisher-Yates shuffle algorithm for an array of integers. The algorithm should shuffle the elements in the array in-place to ensure that each permutation is equally likely.","solution":"import random def fisher_yates_shuffle(arr): Shuffles the elements in the array in-place using the Fisher-Yates shuffle algorithm. Parameters: arr (list): A list of integers to be shuffled. Returns: None: The function shuffles the list in-place. n = len(arr) for i in range(n-1, 0, -1): j = random.randint(0, i) arr[i], arr[j] = arr[j], arr[i]"},{"question":"Write a function to find the second minimum value in a list of integers. If the list has no second minimum value (either because it's empty or because all elements are the same), return \`None\`.","solution":"def second_minimum(nums): if len(nums) < 2: return None unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort() return unique_nums[1]"},{"question":"Write a function to detect and remove consecutive repeating characters in a string.","solution":"def remove_consecutive_repeating_chars(s): Detects and removes consecutive repeating characters from a string. if not s: return \\"\\" result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Write a function to find the minimum span of a subarray that sums to a given value \`k\`. The minimum span refers to the length of the subarray with the smallest number of elements that adds up to \`k\`. If no subarray sums to \`k\`, return 0.","solution":"def min_subarray_len(nums, k): Function to find the minimum span of a subarray that sums to a given value k. If no such subarray exists, return 0. n = len(nums) min_length = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return 0 if min_length == float('inf') else min_length"},{"question":"Write a function to compute the absolute difference between two integers.","solution":"def absolute_difference(a, b): Returns the absolute difference between a and b. return abs(a - b)"},{"question":"Write a function to find the maximum value in a list and return it. If the list is empty, the function should return \`None\`. How would you implement this in Python?","solution":"def find_maximum(numbers): Returns the maximum value in a list of numbers. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Write a function to check if a list of numbers is sorted in increasing order.","solution":"def is_sorted(lst): Checks if a list of numbers is sorted in increasing order. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Write a function to reverse the order of words in a given string \`s\`. A word is defined as a sequence of non-space characters. The reversed string should maintain the word order, but each word's characters should be reversed.","solution":"def reverse_words(s): Reverses the order of words in a given string 's'. Each word's characters are also reversed. Args: s (str): The input string. Returns: str: The string with reversed words and their characters. # Split the string into words words = s.split() # Reverse each word and join them with a space reversed_words = ' '.join(word[::-1] for word in words) return reversed_words"},{"question":"Write a function to return the least common multiple (LCM) of two numbers, a and b.你能帮我用Python编写一个求两个数a和b的最小公倍数的函数吗？","solution":"import math def lcm(a, b): Returns the least common multiple of a and b. if a == 0 or b == 0: return 0 return abs(a * b) // math.gcd(a, b)"},{"question":"Write a function to find the sum of all the unique values in a given list.","solution":"def sum_of_unique_values(lst): Returns the sum of all unique values in the input list. Unique values are those which appear exactly once in the list. from collections import Counter counter = Counter(lst) return sum(key for key, count in counter.items() if count == 1)"},{"question":"Write a function to find all the unique permutations of a given string that includes duplicate characters. For example, for the string \\"aab\\", there are three unique permutations: \\"aab\\", \\"aba\\", and \\"baa\\".","solution":"from itertools import permutations def unique_permutations(s): Returns all unique permutations of a given string that may include duplicate characters. # Generate all permutations using itertools.permutations all_perms = permutations(s) # Use a set to filter out duplicate permutations unique_perms = set([''.join(p) for p in all_perms]) return list(unique_perms)"},{"question":"Write a function to calculate the frequency of each element in a given array.","solution":"def calculate_frequency(arr): Returns a dictionary with the frequency of each element in the array. frequency_dict = {} for elem in arr: if elem in frequency_dict: frequency_dict[elem] += 1 else: frequency_dict[elem] = 1 return frequency_dict"},{"question":"Write a function to find the first and last occurrence of a target number in a sorted array. Your function should return the indices of the first and last occurrence of the target number in the array. If the target number is not found, return [-1, -1].","solution":"def find_first_and_last(arr, target): Returns the indices of the first and last occurrence of the target number in the sorted array. If the target number is not found, returns [-1, -1]. def binary_search_left(array, t): left, right = 0, len(array) - 1 while left < right: mid = (left + right) // 2 if array[mid] < t: left = mid + 1 else: right = mid return left if array and array[left] == t else -1 def binary_search_right(array, t): left, right = 0, len(array) - 1 while left < right: mid = (left + right + 1) // 2 if array[mid] > t: right = mid - 1 else: left = mid return right if array and array[right] == t else -1 first = binary_search_left(arr, target) if first == -1: return [-1, -1] last = binary_search_right(arr, target) return [first, last]"},{"question":"Write a function to detect a cycle in an undirected graph. The input to the function is a list of edges representing the graph. Each edge is a tuple representing a connection between two nodes. For example, \`edges = [(1, 2), (2, 3), (3, 1)]\` represents a graph with three nodes and an undirected cycle. The function should return \`True\` if a cycle is detected and \`False\` otherwise.","solution":"def has_cycle(edges): Detects a cycle in an undirected graph. Parameters: edges (list of tuple): List of edges representing the graph. Returns: bool: True if a cycle is detected, False otherwise. from collections import defaultdict def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, node): return True elif neighbor != parent: return True return False # Create adjacency list from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Set to keep track of visited nodes visited = set() # Check each component of the graph for node in graph: if node not in visited: if dfs(node, -1): return True return False"},{"question":"Write a function to compute the sum of the digits of a given integer \`n\`.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Write a function to create a 2D array filled with zeros. The function should take two parameters, \`rows\` and \`cols\`, which represent the number of rows and columns in the array, respectively. The function should return the 2D array filled with zeros.","solution":"def create_zeros_array(rows, cols): Creates a 2D array filled with zeros. Parameters: rows (int): Number of rows in the array. cols (int): Number of columns in the array. Returns: list: 2D array filled with zeros. return [[0 for _ in range(cols)] for _ in range(rows)]"},{"question":"Write a function to implement the QuickSort algorithm to sort an array.","solution":"def quicksort(arr): Sorts the array using the QuickSort algorithm and returns the sorted array. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to return all the prime numbers less than N.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for divider in range(2, int(num**0.5) + 1): if num % divider == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function to reverse a string in Python without using slicing. Use a stack data structure to achieve this.","solution":"def reverse_string(input_string): Reverses a string using a stack. stack = [] # Push all characters to stack for char in input_string: stack.append(char) reversed_string = '' # Pop all characters from stack and append to reversed_string while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Write a function to sum the numbers from 1 to \`n\` using a for loop in Python.","solution":"def sum_numbers(n): Returns the sum of numbers from 1 to n. Arguments: n -- the upper limit of numbers to sum Returns: The sum of numbers from 1 to n. total = 0 for i in range(1, n+1): total += i return total"},{"question":"Write a function to check if a number is a power of two.olk","solution":"def is_power_of_two(n): Returns True if n is a power of two, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to execute and log the performance of a given function in Python.","solution":"import time import logging # Configure logging logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s') def log_performance(func, *args, **kwargs): Executes the given function with provided arguments and logs its performance. Parameters: func (callable): The function to be executed. *args: Positional arguments for the function. **kwargs: Keyword arguments for the function. Returns: The result of the function execution. start_time = time.time() result = func(*args, **kwargs) end_time = time.time() execution_time = end_time - start_time logging.info(f\\"Executed '{func.__name__}' in {execution_time:.6f} seconds\\") return result"},{"question":"Write a function to convert a string to an integer, which handles both positive and negative numbers. The function should also handle white spaces and ignore them. However, if the string represents a number larger than the value that can be stored in an integer, the function should return \`int.MAX_VALUE\` for positive numbers and \`int.MIN_VALUE\` for negative numbers.","solution":"def string_to_integer(s): Converts a string to an integer, handles positive and negative numbers and ignores white spaces. If the number exceeds the integer range, returns INT_MAX or INT_MIN. s = s.strip() # Remove leading and trailing whitespaces if not s: return 0 # Empty string case INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = 1 index = 0 if s[0] == '-': sign = -1 index += 1 elif s[0] == '+': index += 1 total = 0 while index < len(s) and s[index].isdigit(): total = total * 10 + int(s[index]) if sign == 1 and total > INT_MAX: return INT_MAX elif sign == -1 and total > -INT_MIN: return INT_MIN index += 1 return sign * total"},{"question":"Write a function to implement the depth-first search (DFS) algorithm for a graph.","solution":"def depth_first_search(graph, start): Implements the depth-first search algorithm for a graph. Parameters: graph (dict): A dictionary representing the adjacency list of the graph. start: The starting node for the DFS traversal. Returns: list: A list of nodes in the order they were visited. visited = set() result = [] def dfs(node): if node not in visited: visited.add(node) result.append(node) for neighbor in graph.get(node, []): dfs(neighbor) dfs(start) return result"},{"question":"Write a function to count the number of distinct ways to climb a staircase. For example, if there are 3 steps, there are 3 ways to climb the stairs: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.","solution":"def count_ways(n): Returns the number of distinct ways to climb a staircase with n steps. You can either take 1 step or 2 steps at a time. if n <= 0: return 0 if n == 1: return 1 if n == 2: return 2 # Using dynamic programming to store the number of ways to climb to each step dp = [0] * (n + 1) dp[1] = 1 dp[2] = 2 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a function to calculate the area of a circle given its radius. The formula for the area of a circle is π r², where r is the radius. Use Python and ensure that the function is well-commented to explain the steps involved.","solution":"import math def area_of_circle(radius): Calculate the area of a circle given its radius. Parameters: radius (float): the radius of the circle Returns: float: the area of the circle # Calculate the area using the formula π * radius^2 area = math.pi * (radius ** 2) return area"},{"question":"Write a function to calculate the sum of all elements in a two-dimensional array using C语言.","solution":"def sum_2d_array(arr): Calculate the sum of all elements in a two-dimensional array. Parameters: arr (list of list of int): A two-dimensional array of integers Returns: int: The sum of all elements in the array total_sum = 0 for row in arr: for element in row: total_sum += element return total_sum"},{"question":"Write a function to detect duplicate files using a rolling hash. Rolling hash is a type of hash in which the hash value changes little with little change in the data. It's often used for detecting file duplicates because it can be computationally efficient. Can you provide a Python implementation for this?","solution":"import hashlib import os def compute_hash(file_path): Compute the SHA-1 hash of the given file. This function uses a rolling hash technique by reading the file in chunks. hasher = hashlib.sha1() with open(file_path, 'rb') as file: while chunk := file.read(8192): hasher.update(chunk) return hasher.hexdigest() def find_duplicate_files(directory): Detect duplicate files in the given directory using a rolling hash. :param directory: The directory to search for duplicate files. :return: A dict where the keys are the hash and the values are lists of file paths with that hash. files_seen = {} for root, _, files in os.walk(directory): for file_name in files: file_path = os.path.join(root, file_name) file_hash = compute_hash(file_path) if file_hash in files_seen: files_seen[file_hash].append(file_path) else: files_seen[file_hash] = [file_path] return {hash: paths for hash, paths in files_seen.items() if len(paths) > 1}"},{"question":"Write a function to check if the given N x N grid has a path from the top-left corner to the bottom-right corner. The path can only move either down or right at any point in time. You can also move diagonally down-right.","solution":"def is_path_exist(grid): Check if there is a path from the top-left to the bottom-right in a grid. You can move right, down, or diagonally down-right. :param grid: List[List[int]], a 2D list where 0 represents an open cell and 1 represents an obstacle. :return: bool, True if a path exists, False otherwise if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return False N = len(grid) from collections import deque # Directions: right, down, diagonal down-right directions = [(0, 1), (1, 0), (1, 1)] queue = deque([(0, 0)]) while queue: x, y = queue.popleft() # If we reached the bottom-right corner if x == N - 1 and y == N - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] == 0: grid[nx][ny] = 1 # mark as visited queue.append((nx, ny)) return False"},{"question":"Write a function to add two binary numbers represented as strings. For example, if the binary numbers are \\"101\\" and \\"110\\", the function should return \\"1011\\".","solution":"def add_binary(bin1, bin2): Returns the sum of two binary numbers represented as strings. sum_int = int(bin1, 2) + int(bin2, 2) return bin(sum_int)[2:]"},{"question":"Write a function to find the number of even digits in a given integer.","solution":"def count_even_digits(n): Returns the number of even digits in a given integer n. count = 0 for char in str(abs(n)): if char in '02468': count += 1 return count"},{"question":"Write a function to find the second largest number in a list of numbers. If there is no second largest number (because the list is too short or all elements are the same), return None.","solution":"def second_largest(numbers): Returns the second largest number in the list. If there is no second largest number, returns None. if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a function to implement a simple Caesar cipher. The function should take two inputs: the plaintext message and the shift amount. The function should then return the encrypted text. Note: Characters in the message should wrap around if they go past 'Z' or 'z'. For example, shifting 'Z' by 1 should result in 'A'.","solution":"def caesar_cipher(plaintext, shift): Encrypts the plaintext message using a Caesar cipher with the given shift amount. Parameters: - plaintext (str): The message to be encrypted. - shift (int): The shift amount for the cipher. Returns: - str: The encrypted message. encrypted_text = [] for char in plaintext: if char.isalpha(): ascii_offset = 65 if char.isupper() else 97 new_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset) encrypted_text.append(new_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Write a function to reverse the words in a given string using Python. For example, \\"hello world\\" should be reversed to \\"world hello\\". What will be the time complexity of this approach?","solution":"def reverse_words(sentence): Reverses the words in the given sentence. Args: sentence (str): The sentence whose words are to be reversed. Returns: str: The sentence with the words in reversed order. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence # The time complexity of this approach is O(n), where n is the number of characters in the sentence. # This is because both the split and join operations iterate over the sentence."},{"question":"Write a function to generate the first n numbers of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The first few numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci_sequence(n): Generates the first n numbers in the Fibonacci sequence. Parameters: n (int): The number of terms to generate in the Fibonacci sequence. Returns: list: A list of the first n numbers in the Fibonacci sequence. if n <= 0: return [] sequence = [0] if n > 1: sequence.append(1) for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to generate Fibonacci numbers up to a given number N. The function should return all Fibonacci numbers that are less than or equal to N. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, if N is 20, the function should return [0, 1, 1, 2, 3, 5, 8, 13, 21]. However, since 21 is greater than N, it should not be included in the output.","solution":"def generate_fibonacci_up_to_n(N): Generates all Fibonacci numbers that are less than or equal to N. if N < 0: return [] fibonacci_numbers = [] a, b = 0, 1 while a <= N: fibonacci_numbers.append(a) a, b = b, a + b return fibonacci_numbers"},{"question":"Write a function to sort an array of integers using the insertion sort algorithm. Please provide a detailed explanation of the algorithm and the code.","solution":"def insertion_sort(arr): Sorts an array of integers using the insertion sort algorithm. :param arr: List of integers to be sorted :return: List of sorted integers for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to calculate the nth Fibonacci number in Python. The function should be efficient and handle large values of n without causing a memory overflow.","solution":"def fibonacci(n): Returns the nth Fibonacci number efficiently. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to check if a given integer is a multiple of 3. If it is, return \\"Yes\\", otherwise return \\"No\\".","solution":"def is_multiple_of_3(n): Checks if given integer n is a multiple of 3. Returns \\"Yes\\" if it is, otherwise returns \\"No\\". if n % 3 == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"Write a function to implement a jump search algorithm in Python.","solution":"import math def jump_search(arr, target): Perform jump search on the sorted list 'arr' to find the index of 'target'. If 'target' is not found, return -1. length = len(arr) jump = int(math.sqrt(length)) left, right = 0, 0 while left < length and arr[left] <= target: right = min(length - 1, left + jump) if arr[left] <= target <= arr[right]: break left += jump if left >= length or arr[left] > target: return -1 for i in range(left, right+1): if arr[i] == target: return i return -1"},{"question":"Write a function to find the maximum product of any contiguous subarray within a given 1D array of integers. The function should return the maximum product found. If the array is empty, the function should return 0. Consider both positive and negative numbers.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray. if not nums: return 0 max_product = min_product = global_max = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) global_max = max(global_max, max_product) return global_max"},{"question":"Write a function to sum all positive integers up to and including giving a number.","solution":"def sum_positive_integers(n): Returns the sum of all positive integers up to and including n. If n is not a positive integer, returns 0. if n <= 0: return 0 return n * (n + 1) // 2"},{"question":"Write a function to find the second largest number in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_second_largest(root): Function to find the second largest number in a binary search tree (BST) :param root: TreeNode :return: int or None if not enough elements def find_largest(node): while node.right: node = node.right return node if root is None or (root.left is None and root.right is None): return None current = root while current: # Case: current is the largest and has a left subtree if current.left and not current.right: return find_largest(current.left).val # Case: current is parent of largest, and largest has no children if current.right and not current.right.left and not current.right.right: return current.val current = current.right"},{"question":"Write a function to compute the nth Fibonacci number iteratively without using any recursion or additional data structures.","solution":"def fibonacci(n): Returns the nth Fibonacci number iteratively. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to calculate the square root of a given number using the Babylonian method. The function should be called \`sqrt_babylonian\` and should take one parameter \`num\`. If \`num\` is negative, the function should return \`None\` as the square root of a negative number is not a real number. Use a basic Babylonian algorithm starting from an initial guess of half of the number. The algorithm should iterate until the change between the new guess and the old guess is less than 0.0001.","solution":"def sqrt_babylonian(num): Returns the square root of the given number using the Babylonian method. If the number is negative, returns None. if num < 0: return None if num == 0: return 0 guess = num / 2.0 while True: new_guess = (guess + num / guess) / 2.0 if abs(new_guess - guess) < 0.0001: return new_guess guess = new_guess"},{"question":"Write a function to filter a list of words based on whether they contain a specific substring. The function should return a new list containing only the words that include the substring.","solution":"def filter_words(words, substring): Filters a list of words based on whether they contain a specific substring. Parameters: words (list of str): The list of words to filter. substring (str): The substring to search for in each word. Returns: list of str: A list of words that contain the substring. return [word for word in words if substring in word]"},{"question":"Write a function to compute the n-th Fibonacci number. The function should have a time complexity of O(n) and use iterative approach to solve.","solution":"def fibonacci(n): Computes the n-th Fibonacci number using an iterative approach. Parameters: n (int): The position of the Fibonacci number to compute. Returns: int: The n-th Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the largest binary gap in a non-negative integer. The binary gap is the longest sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of the integer. If there are no such zeros, the function should return 0.","solution":"def largest_binary_gap(n): Returns the length of the largest binary gap in the binary representation of a non-negative integer n. binary_representation = bin(n)[2:] # Get binary representation of n excluding the '0b' prefix max_gap = 0 current_gap = 0 in_gap = False for digit in binary_representation: if digit == '1': if in_gap: max_gap = max(max_gap, current_gap) current_gap = 0 in_gap = True elif in_gap: current_gap += 1 return max_gap"},{"question":"Write a function to return the maximum value in a subarray of a given array that is divisible by 2. The function should also ensure that the subarray has a minimum length of 2. If no such subarray exists, return -1.","solution":"def max_value_in_even_subarray(arr): Returns the maximum value in a subarray of the given array that is divisible by 2 and has a minimum length of 2. If no such subarray exists, returns -1. if len(arr) < 2: return -1 max_val = -1 for i in range(len(arr) - 1): for j in range(i + 1, len(arr)): subarray = arr[i:j+1] if len(subarray) >= 2 and all(x % 2 == 0 for x in subarray): max_val = max(max_val, max(subarray)) return max_val"},{"question":"Write a function to find the longest sublist in a given list of lists. The function should return the sublist with the maximum length. If there are multiple sublists with the same maximum length, return the first one encountered.","solution":"def find_longest_sublist(list_of_lists): Returns the longest sublist in the given list of lists. If there are multiple sublists with the same maximum length, return the first one encountered. if not list_of_lists: return [] longest_sublist = list_of_lists[0] max_length = len(longest_sublist) for sublist in list_of_lists: if len(sublist) > max_length: longest_sublist = sublist max_length = len(sublist) return longest_sublist"},{"question":"Write a function to calculate the square of a number using recursion in Python. For example, the square of 5 should be 25.","solution":"def square_recursive(n, acc=0, counter=None): Calculates the square of n using recursion. :param n: The number to be squared :param acc: Accumulator for the result :param counter: Counter for the recursive steps :return: The square of n if counter is None: counter = abs(n) if counter == 0: return acc return square_recursive(n, acc + abs(n), counter - 1) # Note: This implementation uses absolute value to handle negative numbers correctly."},{"question":"Write a function to calculate the number of ways to express a given positive integer \`n\` as the sum of \`k\` positive integers, where the order of summation matters. For example, \`n = 4\` and \`k = 2\` has 3 ways: [1,3], [2,2], [3,1].","solution":"def number_of_ways(n, k): Calculate the number of ways to express a positive integer n as the sum of k positive integers. The order of summation matters. Args: n (int): The target sum. k (int): The number of positive integers. Returns: int: Number of ways to express n as the sum of k positive integers. if k > n or k < 0 or n < 0: return 0 dp = [[0] * (n + 1) for _ in range(k + 1)] # There's one way to sum up 0 with 0 numbers dp[0][0] = 1 for i in range(1, k + 1): for j in range(1, n + 1): dp[i][j] = sum(dp[i-1][j-x] for x in range(1, min(j, n) + 1)) return dp[k][n]"},{"question":"Write a function to find the minimum depth of a binary search tree (BST). The minimum depth is the shortest distance from the root node down to the nearest leaf node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def min_depth(root): Returns the minimum depth of a binary search tree. :param root: TreeNode, the root of the binary search tree :return: int, the minimum depth of the binary search tree if not root: return 0 if not root.left and not root.right: return 1 if not root.left: return min_depth(root.right) + 1 if not root.right: return min_depth(root.left) + 1 return min(min_depth(root.left), min_depth(root.right)) + 1"},{"question":"Write a function to find all uppercase characters in a string and return them.","solution":"def find_uppercase_characters(s): Returns a list of all uppercase characters in the input string s. return [char for char in s if char.isupper()]"},{"question":"Write a function to parse a CSV string and return a two-dimensional list. The CSV string can be of any size and does not necessarily have to be rectangular; some rows might have more columns that others.","solution":"def parse_csv(csv_string): Parses a CSV string and returns a two-dimensional list. :param csv_string: str, a string in CSV format :return: list of lists, where each inner list represents a row rows = csv_string.split('n') parsed_csv = [row.split(',') for row in rows if row] return parsed_csv"},{"question":"Write a function to extract all the prime factors of a given positive integer. A prime factor is a factor that is a prime number. The function should return a list of prime factors, even if the same factor appears multiple times in the factorization. The function should also handle cases where the input number is prime itself.","solution":"def prime_factors(n): Returns a list of prime factors of the given positive integer n. factors = [] divisor = 2 while n >= 2: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Write a function to calculate the total number of characters in a given string.","solution":"def count_characters(s): Returns the total number of characters in the given string s. return len(s)"},{"question":"Write a function to calculate the sum of the squares of each digit in a given number. For example, if the input is 123, the function should return 1^2 + 2^2 + 3^2 = 14.","solution":"def sum_of_squares_of_digits(number): Returns the sum of the squares of each digit in the given number. Parameters: number (int): The input number. Returns: int: The sum of the squares of each digit. return sum(int(digit) ** 2 for digit in str(abs(number)))"},{"question":"Write a function to check if two strings are rotations of each other. Two strings are rotations of each other if one string can be obtained by rotating the other string by some number of characters. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\".","solution":"def are_rotations(s1, s2): Returns True if s1 and s2 are rotations of each other, False otherwise. if len(s1) != len(s2): return False combined = s1 + s1 return s2 in combined"},{"question":"Write a function to determine the length of the longest charged subsequence of an array \`nums\` where the difference between the indices of any two consecutive elements is at most \`k\`. The \\"charged\\" condition implies that each element is greater than the previous one. The function should return the longest length of such a subsequence. If no such subsequence exists, return 0.","solution":"from collections import deque def longest_charged_subsequence(nums, k): if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] will store the length of the longest subsequence ending at i max_length = 1 for i in range(n): for j in range(max(0, i - k), i): if nums[j] < nums[i]: dp[i] = max(dp[i], dp[j] + 1) max_length = max(max_length, dp[i]) return max_length"},{"question":"Write a function to find the largest palindrome in a given string. A palindrome is a string that reads the same backward as forward, such as \\"radar\\" or \\"level\\".","solution":"def longest_palindrome(s): Returns the longest palindrome substring in a given string. if s == \\"\\": return \\"\\" start, max_length = 0, 1 for i in range(1, len(s)): low = i - 1 high = i while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Write a function to find the maximum sum of a contiguous subarray. I haven't learned dynamic programming yet, can you provide a solution without using it?","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray in the given array. if not arr: return 0 max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to sum up two integers which are inputs to the function.","solution":"def sum_integers(a, b): Returns the sum of two integers a and b. return a + b"},{"question":"Write a function to sort a list of integers array of length \`n\` where \`n\` is always a power of two and elements in the array are either 0, 1, or 2. The function should sort the array in ascending order and return it. The function should also consider the efficiency of the sorting algorithm.","solution":"def sort_special_array(arr): Sorts an array of integers which length is a power of two, and contains only 0, 1, and 2. count_0, count_1, count_2 = 0, 0, 0 for num in arr: if num == 0: count_0 += 1 elif num == 1: count_1 += 1 elif num == 2: count_2 += 1 sorted_arr = [0] * count_0 + [1] * count_1 + [2] * count_2 return sorted_arr"},{"question":"Write a function to search for a target value in a circularly sorted array. The array is sorted in ascending order, and then rotated. For example, the array might look like this: [4,5,6,7,0,1,2]. Given a target value, the function should return its index. If the target is not found, the function should return -1.","solution":"def search_in_circular_sorted_array(arr, target): Searches for a target value in a circularly sorted array. Returns the index of the target if found, otherwise returns -1. Args: arr (list of int): A circularly sorted list of integers. target (int): The target value to search for. Returns: int: The index of the target if found, otherwise -1. if not arr: return -1 start, end = 0, len(arr) - 1 while start <= end: mid = (start + end) // 2 if arr[mid] == target: return mid # Determine the sorted half of the array if arr[start] <= arr[mid]: # The left half is sorted if arr[start] <= target < arr[mid]: # Target is in the left half end = mid - 1 else: # Target is in the right half start = mid + 1 else: # The right half is sorted if arr[mid] < target <= arr[end]: # Target is in the right half start = mid + 1 else: # Target is in the left half end = mid - 1 return -1"},{"question":"Write a function to find the number of paths from the top-left corner to the bottom-right corner of a grid. You can only move either down or right at any point in time.","solution":"def number_of_paths(m, n): Find the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. You can only move either down or right at any point in time. if m <= 0 or n <= 0: return 0 # Initialize a 2D array to store the number of paths to each cell dp = [[0] * n for _ in range(m)] # There's only one way to get to any cell in the first row: moving right for i in range(n): dp[0][i] = 1 # There's only one way to get to any cell in the first column: moving down for i in range(m): dp[i][0] = 1 # For other cells, count paths from the left cell and the top cell for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function to illustrate the use of dynamic programming to solve the \\"Find the nth Fibonacci number\\" problem. Explain the concept of dynamic programming in solving this problem and demonstrate the function through a couple of examples.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. Dynamic programming is a method for solving problems by breaking them down into simpler subproblems and storing the results of these subproblems to avoid redundant computations. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, the sequence is defined by the recurrence relation: F(n) = F(n-1) + F(n-2) with base cases F(0) = 0, F(1) = 1. This function uses a bottom-up approach to build up the solution for the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0], fib[1] = 0, 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a function to compute and display the sum of the first N prime numbers. Here is a Python function to find the sum of the first N prime numbers.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_first_n_primes(N): Returns the sum of the first N prime numbers. prime_count = 0 candidate = 2 prime_sum = 0 while prime_count < N: if is_prime(candidate): prime_sum += candidate prime_count += 1 candidate += 1 return prime_sum"},{"question":"Write a function to add two binary numbers using recursion and without using any arithmetic operators.","solution":"def add_binary(a, b): Add two binary numbers using recursion and without using any arithmetic operators. Arguments: a -- first binary number represented as a string b -- second binary number represented as a string Returns: The sum of the two binary numbers as a string. # Base case: if one of the strings is empty, return the other if not a: return b if not b: return a # Recursive cases # If both the last bits are '0' if a[-1] == '0' and b[-1] == '0': return add_binary(a[:-1], b[:-1]) + '0' # If one of the last bits is '1' and the other is '0' if (a[-1] == '1' and b[-1] == '0') or (a[-1] == '0' and b[-1] == '1'): return add_binary(a[:-1], b[:-1]) + '1' # If both the last bits are '1' return add_binary(add_binary(a[:-1], b[:-1]), '1') + '0'"},{"question":"Write a function to return the total number of solutions to the N-Queens problem for a given number of squares N. The N-Queens problem is about placing N queens on an N×N chessboard such that no two queens threaten each other. A queen can attack another queen if they are in the same row, column, or diagonal.","solution":"def total_n_queens(n): def solve(queens, xy_dif, xy_sum): p = len(queens) if p == n: return 1 count = 0 for q in range(n): if q not in queens and p - q not in xy_dif and p + q not in xy_sum: count += solve(queens + [q], xy_dif + [p - q], xy_sum + [p + q]) return count return solve([], [], [])"},{"question":"Write a function to determine if a string contains a valid sequence of parentheses. The function should return \`True\` if the sequence is valid, and \`False\` otherwise. A valid sequence of parentheses must open every parenthesis and close it in the correct order. Additionally, the function should support nested parentheses.","solution":"def is_valid_parentheses_sequence(s): Determines if the given string \`s\` contains a valid sequence of parentheses. Args: s (str): The input string containing parentheses. Returns: bool: True if the sequence is valid, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Write a function to rotate an array to the left by one position. The function should take a list of integers as input and return the rotated list. If the list is empty, the function should return an empty list. The function should also handle cases where the list has only one element.","solution":"def rotate_left_by_one(arr): Rotates the elements of the array to the left by one position. If the array is empty, returns an empty list. If the array has only one element, returns the same array. :param arr: List of integers to rotate :return: Rotated list of integers if len(arr) <= 1: return arr return arr[1:] + arr[:1]"},{"question":"Write a function to find the contiguous subarray with the largest sum in a given one-dimensional array of numbers. This function is known as the Kadane's algorithm. It should return the maximum sum and the start and end indices of the subarray. If the array contains all non-positive numbers, the function should return the least negative number and its index. If the array is empty, the function should return None.","solution":"def kadane_algorithm(arr): if not arr: return None max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum + arr[i] > arr[i]: current_sum += arr[i] else: current_sum = arr[i] temp_start = i if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Write a function to find all root-to-leaf paths in a binary tree in reverse order without using any additional data structures or recursion other than the call stack. You need to traverse the binary tree without any additional data structures like arrays or stacks or queues, other than the call stack used for function calls. You also should not use recursion, meaning you can't use recursive function calls.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def reverse_paths(root): Returns a list of lists, where each list represents a path from root to leaf in reverse order. if not root: return [] result = [] current_path = [] prev = None while root or current_path: while root: current_path.append(root) root = root.left root = current_path[-1] if root.right and root.right != prev: root = root.right else: if not root.left and not root.right: result.append([node.val for node in reversed(current_path)]) prev = current_path.pop() root = None return result"},{"question":"Write a function to guess a number between 1 and 100 using binary search.","solution":"def guess_number_binary_search(target, low=1, high=100): Returns the guessed number between 1 and 100 using binary search. while low <= high: mid = (low + high) // 2 if mid < target: low = mid + 1 elif mid > target: high = mid - 1 else: return mid return None # In case the target is out of bounds"},{"question":"Write a function to find the first duplicate number in a list of integers. The function should return the first duplicate number it encounters. If no duplicates are found, return -1. The list will contain integers in the range [1, n], where n is the size of the list.","solution":"def first_duplicate(numbers): Find the first duplicate number in a list of integers. Returns the first duplicate number if found, otherwise returns -1. seen = set() for number in numbers: if number in seen: return number seen.add(number) return -1"},{"question":"Write a function to print the elements of a linked list in reverse order without modifying the linked list itself. You are allowed to use only recursion to solve this problem.","solution":"class ListNode: def __init__(self, value): self.value = value self.next = None def print_linked_list_in_reverse(node): Prints the elements of a linked list in reverse order using recursion. if node is None: return print_linked_list_in_reverse(node.next) print(node.value)"},{"question":"Write a function to identify and return the nth Fibonacci number. The function signature should be \`int fibonacci(int n)\`. The nth Fibonacci number is defined as the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a function to check if there are any repeating numbers in an array of integers.","solution":"def has_repeating_numbers(arr): Checks if there are any repeating numbers in the array. Parameters: arr (list): List of integers. Returns: bool: True if there are repeating numbers, False otherwise. seen = set() for num in arr: if num in seen: return True seen.add(num) return False"},{"question":"Write a function to print a binary tree in level order.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Returns the level order traversal of a binary tree as a list of lists. Each nested list represents the nodes at one level. if not root: return [] result = [] queue = deque([root]) while queue: level = [] level_length = len(queue) for i in range(level_length): node = queue.popleft() level.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"Write a function to find the number of divisors of a given number.","solution":"def count_divisors(n): Returns the number of divisors of the given number n. if n < 1: raise ValueError(\\"The input number must be a positive integer.\\") count = 0 for i in range(1, n + 1): if n % i == 0: count += 1 return count"},{"question":"Write a function to calculate the sum of all the elements in an array using a loop.","solution":"def sum_array(arr): Calculates the sum of all elements in an array using a loop. Args: arr (list): List of numbers. Returns: int/float: Sum of all elements in the array. total = 0 for num in arr: total += num return total"},{"question":"Write a function to check if a given string is a palindrome. Without using any built-in methods like is_palindrome(), reverse(), etc.","solution":"def is_palindrome(s): Checks if a given string s is a palindrome. A string is a palindrome if it reads the same backward as forward. Parameters: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. # Clean the string by removing non-alphanumeric characters and converting to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) left_index = 0 right_index = len(cleaned_s) - 1 while left_index < right_index: if cleaned_s[left_index] != cleaned_s[right_index]: return False left_index += 1 right_index -= 1 return True"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Python's recursion limit can be reached for large values of n, so ensure your solution handles potential recursion depth issues.","solution":"import sys # Increase the recursion limit to handle larger values of n sys.setrecursionlimit(10**4) def factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to interchange the values of two variables.","solution":"def interchange_values(a, b): Interchanges the values of a and b. return b, a"},{"question":"Write a function to reverse a string using a stack data structure in Python. Additionally, provide an explanation of how stacks can be used to solve this problem.","solution":"def reverse_string_using_stack(s): Reverses a given string using a stack data structure. Parameters: s (str): The string to be reversed Returns: str: The reversed string stack = [] # Push each character of the string onto the stack for char in s: stack.append(char) reversed_string = \\"\\" # Pop each character from the stack to form the reversed string while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Write a function to convert a given number to binary.","solution":"def to_binary(n): Converts the given integer n to its binary representation as a string. if n == 0: return \\"0\\" elif n < 0: raise ValueError(\\"The function to_binary only handles non-negative integers\\") binary_str = \\"\\" while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 return binary_str"},{"question":"Write a function to calculate the number of 1 bits in the binary representation of an integer. This is often referred to as the Hamming weight. For example, the Hamming weight of 11 (binary is 1011) is 3.","solution":"def hamming_weight(n): Returns the number of 1 bits in the binary representation of the integer n. return bin(n).count('1')"},{"question":"Write a function to find the second minimum unique number in a list of integers. If there is no such number, return -1.","solution":"def second_minimum_unique_number(nums): Returns the second minimum unique number in the list of integers. If there is no such number, returns -1. unique_nums = list(set(nums)) # Sort the unique numbers unique_nums.sort() if len(unique_nums) < 2: return -1 else: return unique_nums[1]"},{"question":"Write a function to check if a given integer n is a Fibonacci number. If it is, the function should return True; otherwise, it should return False. Furthermore, if n is a Fibonacci number, return the next Fibonacci number after n.","solution":"from math import isqrt def is_fibonacci(n): Check if the given integer n is a Fibonacci number. If it is, return (True, next_fib), where next_fib is the next Fibonacci number after n. If not, return False. def is_perfect_square(x): s = isqrt(x) return s * s == x def next_fibonacci(a, b): return a + b # A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square is_fib = is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4) if is_fib: if n == 0: return True, 1 # Finding the next Fibonacci number a, b = 0, 1 while b <= n: a, b = b, next_fibonacci(a, b) return True, b return False"},{"question":"Write a function to perform an in-order traversal of a binary tree and return the result as a list of integers. An in-order traversal visits nodes in the order: left subtree, root, right subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Perform an in-order traversal of a binary tree and return the result as a list of integers. result = [] def traverse(node): if node is not None: traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result"},{"question":"Write a function to find the first non-repeating character in a string. If all characters repeat, return \`-1\`.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat, returns -1. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return -1"},{"question":"Write a function to check if a given number is a valid ISBN-10 number. ISBN-10 numbers are 10-digit numbers where each digit (except the last one) is multiplied by its position (1 through 10), and the last digit is a check digit. The check digit can be a digit (0-9) or the letter 'X' (representing 10). The sum modulo 11 should be 0 for the number to be valid.","solution":"def is_valid_isbn_10(isbn): Check if the given number is a valid ISBN-10 number. if len(isbn) != 10: return False total = 0 for i in range(9): if not isbn[i].isdigit(): return False total += (i + 1) * int(isbn[i]) if isbn[9] == 'X': total += 10 * 10 elif isbn[9].isdigit(): total += 10 * int(isbn[9]) else: return False return total % 11 == 0"},{"question":"Write a function to check if an array of integers contains a contiguous subarray with a sum of a given value.","solution":"def has_contiguous_subarray_with_sum(arr, target_sum): Checks if a contiguous subarray with the given target sum exists in the array. :param arr: List of integers :param target_sum: Integer representing the target sum :return: Boolean indicating whether such a subarray exists current_sum = 0 sums = set() for num in arr: current_sum += num if current_sum == target_sum or (current_sum - target_sum) in sums: return True sums.add(current_sum) return False"},{"question":"Write a function to print the numbers from 1 to 100.","solution":"def print_numbers(): Prints the numbers from 1 to 100. for i in range(1, 101): print(i)"},{"question":"Write a function to get the values of a given key from a nested dictionary.","solution":"def get_values_of_key(nested_dict, key): Returns a list of values for the given key from a nested dictionary. results = [] def search_dict(d): if isinstance(d, dict): for k, v in d.items(): if k == key: results.append(v) if isinstance(v, dict): search_dict(v) elif isinstance(v, list): for item in v: search_dict(item) search_dict(nested_dict) return results"},{"question":"Write a function to print numbers from \`1\` to \`100\`. However, if the number is divisible by \`3\` print \`Fizz\` instead of the number, if the number is divisible by \`5\` print \`Buzz\` instead of the number, and if the number is divisible by both \`3\` and \`5\` print \`FizzBuzz\`.","solution":"def fizz_buzz(): Prints numbers from 1 to 100 with the following exceptions: - If a number is divisible by 3, print 'Fizz' instead. - If a number is divisible by 5, print 'Buzz' instead. - If a number is divisible by both 3 and 5, print 'FizzBuzz' instead. for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"question":"Write a function to solve a given Sudoku puzzle. You can assume that the given Sudoku puzzle will always have a unique solution. The Sudoku puzzle is represented as a 2D array of numbers from 1 to 9. A \\"0\\" represents an empty cell. The function should fill in the empty cells to solve the puzzle.","solution":"def solve_sudoku(board): Solves the given Sudoku puzzle by filling the empty cells. :param board: 2D list representing the Sudoku board (0 represents an empty cell) :return: True if the Sudoku is solved, False otherwise empty = find_empty(board) if not empty: return True # No more empty cells means the board is solved row, col = empty for num in range(1, 10): if is_valid(board, num, (row, col)): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 # Backtrack return False def find_empty(board): Finds an empty cell in the Sudoku board. :param board: 2D list representing the Sudoku board :return: tuple (row, col) of the empty cell or None if no empty cell is found for i in range(len(board)): for j in range(len(board[i])): if board[i][j] == 0: return (i, j) # Return the position of the empty cell return None def is_valid(board, num, pos): Checks if placing the number \`num\` in the position \`pos\` is valid. :param board: 2D list representing the Sudoku board :param num: the number to place :param pos: tuple (row, col) where we want to place the number :return: True if the placement is valid, False otherwise # Check row for i in range(len(board[0])): if board[pos[0]][i] == num and pos[1] != i: return False # Check column for i in range(len(board)): if board[i][pos[1]] == num and pos[0] != i: return False # Check box box_x = pos[1] // 3 box_y = pos[0] // 3 for i in range(box_y*3, box_y*3 + 3): for j in range(box_x*3, box_x*3 + 3): if board[i][j] == num and (i, j) != pos: return False return True"},{"question":"Write a function to generate n Fibonacci numbers. The function should take an integer n as input and return a list of the first n Fibonacci numbers. For example, for n=5, the result should be [0, 1, 1, 2, 3].","solution":"def fibonacci(n): Generates the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to solve the Tower of Hanoi problem.","solution":"def tower_of_hanoi(n, source, target, auxiliary): Solve the Tower of Hanoi problem. Parameters: n (int): Number of disks source (str): The name of the source rod target (str): The name of the target rod auxiliary (str): The name of the auxiliary rod Returns: list of tuples: Each tuple represents a move (disk number, from rod, to rod) if n == 0: return [] moves = [] # Recursive call to move n-1 disks from source to auxiliary, using target as intermediate moves += tower_of_hanoi(n - 1, source, auxiliary, target) # Move the nth disk from source to target moves.append((n, source, target)) # Recursive call to move n-1 disks from auxiliary to target, using source as intermediate moves += tower_of_hanoi(n - 1, auxiliary, target, source) return moves"},{"question":"Write a function to determine if a string contains all unique characters without using any additional data structures like sets or lists.","solution":"def all_unique_characters(s): Determine if a string contains all unique characters. :param s: input string :return: True if all characters are unique, False otherwise for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Write a function to sort an array of numbers using the merge sort algorithm. Merge sort is a divide-and-conquer algorithm that splits an array into halves, sorts them separately, and then merges them. The merging step is crucial as it combines the two halves while maintaining the order of elements. You can use recursion to split the array and then merge the sorted halves.","solution":"def merge_sort(arr): Sort an array of numbers using the merge sort algorithm. if len(arr) <= 1: return arr # Split the array into two halves middle = len(arr) // 2 left_half = arr[:middle] right_half = arr[middle:] # Recursively split and merge left_sorted = merge_sort(left_half) right_sorted = merge_sort(right_half) # Merge the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): Merge two sorted arrays into one sorted array. merged = [] left_index, right_index = 0, 0 # Traverse both arrays and insert smaller element from left or right while left_index < len(left) and right_index < len(right): if left[left_index] <= right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 # If there are remaining elements in left, add them while left_index < len(left): merged.append(left[left_index]) left_index += 1 # If there are remaining elements in right, add them while right_index < len(right): merged.append(right[right_index]) right_index += 1 return merged"},{"question":"Write a function to read a line from the standard input by the user and convert it to an integer. If the input cannot be converted to an integer, print an error message and ask the user to enter a valid integer.","solution":"def read_integer(): Reads a line from standard input and converts it to an integer. If the input is not a valid integer, it keeps asking until a valid integer is entered. while True: user_input = input(\\"Enter an integer: \\") try: return int(user_input) except ValueError: print(\\"Invalid input. Please enter a valid integer.\\")"},{"question":"Write a function to check if a given integer is a palindrome without converting it to a string. The function should take an integer as input and return a boolean indicating whether the integer is a palindrome.","solution":"def is_palindrome(num): Returns True if num is a palindrome, otherwise False. A palindrome number reads the same backward as forward. if num < 0: return False original_num = num reversed_num = 0 while num > 0: remainder = num % 10 reversed_num = reversed_num * 10 + remainder num = num // 10 return original_num == reversed_num"},{"question":"Write a function to convert a given array of integers to a binary string, separated by spaces. Each integer represents a binary number formed by concatenating the numbers 1 and 0. The function should return a string where each binary number is followed by a space. If the input array is empty, the function should return an empty string.","solution":"def int_array_to_binary_string(arr): Converts an array of integers to a binary string, separated by spaces. Each integer is converted by concatenating the number 1 and 0. :param arr: A list of integers :return: A binary string where each binary number is followed by a space if not arr: return \\"\\" binary_strings = [] for num in arr: if num == 1: binary_strings.append(\\"1\\") else: binary_strings.append(\\"10\\" * (num - 1) + \\"1\\") return ' '.join(binary_strings)"},{"question":"Write a function to display the information of an employee. An employee has attributes: ID, Name, and Age. The function should also show the name of the department the employee works in. However, the employee data is stored in an array where each element represents an employee. The array allows repeated IDs, but each ID, name, and age combination must be unique. A department name must be associated with a single ID, i.e., if an ID has already been assigned to a department, that department cannot be reassigned to a different ID.","solution":"class Employee: all_employees = [] def __init__(self, employee_id, name, age, department): self.employee_id = employee_id self.name = name self.age = age self.department = department @classmethod def add_employee(cls, employee_id, name, age, department): # Check if the department is already assigned to a different ID for emp in cls.all_employees: if emp.department == department and emp.employee_id != employee_id: raise ValueError(\\"Department already assigned to another employee ID.\\") new_employee = cls(employee_id, name, age, department) cls.all_employees.append(new_employee) @classmethod def get_employee_info(cls, employee_id): for employee in cls.all_employees: if employee.employee_id == employee_id: return {\\"ID\\": employee.employee_id, \\"Name\\": employee.name, \\"Age\\": employee.age, \\"Department\\": employee.department} return \\"Employee not found\\""},{"question":"Write a function to determine if a given list of numbers is sorted in non-decreasing order. If the list is sorted in non-decreasing order, the function should return True; otherwise, it should return False. Additionally, generate a list of 10 random numbers to test the function.","solution":"def is_sorted_non_decreasing(arr): Returns True if the list is sorted in non-decreasing order, otherwise returns False. for i in range(len(arr) - 1): if arr[i] > arr[i+1]: return False return True"},{"question":"Write a function to swap two numbers without using a temporary variable. How can we achieve this using bitwise XOR operations?","solution":"def swap_numbers(a, b): Swaps two numbers without using a temporary variable, using bitwise XOR operations. a = a ^ b b = a ^ b a = a ^ b return a, b"},{"question":"Write a function to find a given \`x\` in an array \`A\`. If \`x\` is in \`A\`, the function should return its index in the array. Otherwise, it should return -1. Assume that the array \`A\` is sorted in non-decreasing order.","solution":"def find_in_sorted_array(A, x): Returns the index of \`x\` in sorted array \`A\`, or -1 if \`x\` is not in \`A\`. :param A: List[int] - A sorted list of integers :param x: int - The number to find in the list :return: int - The index of \`x\` in the list, or -1 if \`x\` is not in the list left, right = 0, len(A) - 1 while left <= right: mid = (left + right) // 2 if A[mid] == x: return mid elif A[mid] < x: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find all occurrences of a given substring in a string. The function should take two string arguments: the first string is the main string, and the second string is the substring to search for. The function should return a list of all indices where the substring is found in the main string. If the substring is not found, the function should return an empty list.","solution":"def find_substring_occurrences(main_str, sub_str): Finds all occurrences of a substring in a main string and returns a list of start indices. :param main_str: The main string to search in. :param sub_str: The substring to search for. :return: A list of start indices where the substring occurs in the main string. if not sub_str or not main_str: return [] indices = [] index = main_str.find(sub_str) while index != -1: indices.append(index) index = main_str.find(sub_str, index + 1) return indices"},{"question":"Write a function to print all the even numbers from 1 to 100.","solution":"def print_even_numbers(): Prints all even numbers from 1 to 100 (inclusive). for number in range(1, 101): if number % 2 == 0: print(number)"},{"question":"Write a function to implement the Fibonacci sequence in Python. The function should be able to handle large numbers efficiently. Please include a brief explanation of your approach.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization to handle large numbers efficiently. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to find the number of distinct substrings in a given string. A substring is a contiguous sequence of characters from a string. For example, \\"abc\\" is a substring of \\"abcde\\".","solution":"def distinct_substrings(s): Returns the number of distinct substrings in the given string s. substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Write a function to convert a binary number to an octal number. How can I approach this problem?","solution":"def binary_to_octal(binary): Convert a binary number to an octal number. Parameters: binary (str): A string representing a binary number (e.g., \\"1101\\"). Returns: str: The octal representation of the binary number. # Convert binary to decimal decimal = int(binary, 2) # Convert decimal to octal octal = oct(decimal) # Return octal number without the '0o' prefix return octal[2:]"},{"question":"Write a function to find the maximum and minimum elements in an array of integers. How can I implement this using Python?","solution":"def find_max_min(arr): Returns a tuple of the maximum and minimum elements in an array of integers. if not arr: raise ValueError(\\"The array must not be empty.\\") max_elem = min_elem = arr[0] for num in arr[1:]: if num > max_elem: max_elem = num if num < min_elem: min_elem = num return max_elem, min_elem"},{"question":"Write a function to remove duplicates from an array of integers in Python. The function should return the new length of the array after removing duplicates and the modified array itself. You must solve this in-place without using any extra space.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted list of integers in-place and returns the new length of the list along with the modified list. :param nums: List of integers (sorted) :return: Tuple containing the new length of the list and the modified list. if not nums: return 0, [] # Pointer for the next write position write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: # Only write the value if it is different from the previous value nums[write_index] = nums[i] write_index += 1 return write_index, nums[:write_index]"},{"question":"Write a function to implement a sorting algorithm. You can choose any sorting algorithm you like, but I'd prefer an efficient one. How about quicksort? Can you explain the concept of quicksort and implement it in Python?","solution":"def quicksort(arr): Sort the array using the quicksort algorithm and return the sorted array. :param arr: List of elements to be sorted. :return: New list of elements sorted in ascending order. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to determine if a given integer is a \\"power of three\\". A number is considered to be a power of three if it can be expressed as 3 raised to some power. For example, 27 (3^3) and 1 (3^0) are powers of three, but 10 is not.","solution":"def is_power_of_three(n): Determines if a given integer is a power of three. :param n: An integer :return: True if n is a power of three, else False # Handle edge cases if n <= 0: return False # Divide n by 3 as long as it's divisible by 3 while n % 3 == 0: n //= 3 # If we end up with 1, it means n was a power of three return n == 1"},{"question":"Write a function to rotate a list of integers to the right by \`k\` positions. If \`k\` is greater than the length of the list, the rotation should continue seamlessly from the beginning of the list. For example, a right rotation of \`[1,2,3,4,5]\` by \`2\` positions should result in \`[4,5,1,2,3]\`. If \`k\` is a multiple of the list's length, the list should remain unchanged.","solution":"def rotate_right(lst, k): Rotates list to the right by k positions. If k is greater than the length of the list, it wraps around. If k is a multiple of the list's length, the list remains unchanged. Parameters: lst (list): A list of integers k (int): Number of positions to rotate Returns: list: The rotated list if not lst: return lst k = k % len(lst) # Handle cases where k is greater than list length return lst[-k:] + lst[:-k]"},{"question":"Write a function to calculate the number of permutations of a given string. A permutation is a rearrangement of the characters in a string. For example, permutations of \\"abc\\" include \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\".","solution":"import itertools def permutations_count(s): Returns the number of permutations of the string s. return len(set(itertools.permutations(s)))"},{"question":"Write a function to count the number of words in a string that are both uppercase and lowercase.","solution":"def count_mixed_case_words(s): Counts the number of words in the string that contain both uppercase and lowercase letters. Parameters: s (str): The input string. Returns: int: The count of words with both uppercase and lowercase letters. words = s.split() mixed_case_count = 0 for word in words: has_upper = any(char.isupper() for char in word) has_lower = any(char.islower() for char in word) if has_upper and has_lower: mixed_case_count += 1 return mixed_case_count"},{"question":"Write a function to solve the LeetCode problem titled \\"Longest Substring Without Repeating Characters\\". The task is to find the length of the longest substring without repeating characters in a given string \`s\`.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end longest = max(longest, end - start + 1) return longest"},{"question":"Write a function to calculate the sum of two numbers in any base between 2 and 10.","solution":"def base_addition(num1, num2, base): Returns the sum of num1 and num2 in the specified base (between 2 and 10). if not (2 <= base <= 10): raise ValueError(\\"Base must be between 2 and 10.\\") # Convert num1 and num2 from the given base to decimal dec_num1 = int(num1, base) dec_num2 = int(num2, base) # Sum the decimal numbers dec_sum = dec_num1 + dec_num2 # Convert the sum back to the given base and return as a string return to_base(dec_sum, base) def to_base(number, base): Converts a decimal number to the specified base and returns it as a string. if number == 0: return \\"0\\" digits = [] while number: digits.append(int(number % base)) number //= base digits.reverse() return ''.join(str(digit) for digit in digits)"},{"question":"Write a function to convert a list of tuples into a dictionary where the first element of each tuple becomes the key and the remaining elements become a list associated with that key.","solution":"def tuples_to_dict(tuples_list): Converts a list of tuples into a dictionary. The first element of each tuple becomes the key, and the remaining elements become a list associated with that key. :param tuples_list: List of tuples :return: Dictionary with keys from first elements of tuples and values as lists of remaining elements result_dict = {} for tuple_item in tuples_list: if len(tuple_item) > 1: key = tuple_item[0] value = list(tuple_item[1:]) result_dict[key] = value else: result_dict[tuple_item[0]] = [] return result_dict"},{"question":"Write a function to perform selection sort on an array. What is selection sort, and how does it work?","solution":"def selection_sort(arr): Sorts the array using selection sort algorithm. :param arr: List of elements to be sorted :return: The sorted list n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Write a function to find the minimum number in a binary search tree (BST). The function should return the minimum element. If the tree is empty, return None.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_minimum_in_bst(root): Returns the minimum number in a BST. If the tree is empty, returns None. if root is None: return None current = root while current.left is not None: current = current.left return current.val"},{"question":"Write a function to simulate the \\"rock, paper, scissors\\" game between two players. The function should return the result of the game as a string, indicating who won or if it was a tie.","solution":"def rock_paper_scissors(player1_choice, player2_choice): Simulate the 'rock, paper, scissors' game between two players and return the result. Args: player1_choice (str): The choice of player 1. It can be 'rock', 'paper', or 'scissors'. player2_choice (str): The choice of player 2. It can be 'rock', 'paper', or 'scissors'. Returns: str: Returns 'Player 1 wins!', 'Player 2 wins!', or 'It's a tie!' rules = { 'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock' } if player1_choice == player2_choice: return \\"It's a tie!\\" elif rules[player1_choice] == player2_choice: return \\"Player 1 wins!\\" else: return \\"Player 2 wins!\\""},{"question":"Write a function to convert a string to pig latin in Python. How does the conversion work?","solution":"def to_pig_latin(word): Converts a given word to Pig Latin. vowels = \\"aeiou\\" if word[0] in vowels: return word + \\"way\\" else: for i in range(len(word)): if word[i] in vowels: return word[i:] + word[:i] + \\"ay\\" return word + \\"ay\\" # In case of no vowels, like for \\"rhythm\\""},{"question":"Write a function to find the maximum value in a binary search tree (BST). In your solution, ensure that it achieves this in the most efficient way possible.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_max_in_bst(root): Finds the maximum value in a binary search tree. :param root: TreeNode, the root of the BST :return: int, maximum value in the BST if root is None: raise ValueError(\\"The tree is empty\\") current = root while current.right is not None: current = current.right return current.val"},{"question":"Write a function to convert an integer to its binary representation as a string. The function should handle both positive and negative integers.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. Arguments: n -- the integer to convert Returns: A string representing the binary form of the integer. if n == 0: return '0' elif n > 0: return bin(n)[2:] # remove the '0b' prefix else: # for negative numbers, use the two's complement representation return '-' + bin(n)[3:] # remove the '-0b' prefix and add '-'"},{"question":"Write a function to determine if a given singly linked list is a palindrome. A singly linked list is aPalindrome if it reads the same backward as forward. How can this be solved without using extra space?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Determines if a singly linked list is a palindrome. if head is None or head.next is None: return True # Find the middle of the linked list slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the list prev = None while slow: next_node = slow.next slow.next = prev prev = slow slow = next_node # Check if the first half and the reversed second half are the same left = head right = prev while right: # Only need to check the second half if left.val != right.val: return False left = left.next right = right.next return True"},{"question":"Write a function to find the majority element in an array of integers. The majority element is the element that appears more than ⌊ n / 2 ⌋ times where n is the size of the array. Your function should return the majority element, or -1 if there is no majority element.","solution":"def majority_element(nums): Returns the majority element in an array of integers or -1 if there is no majority element. The majority element is the element that appears more than ⌊ n / 2 ⌋ times. if not nums: return -1 count = {} majority_count = len(nums) // 2 for num in nums: count[num] = count.get(num, 0) + 1 if count[num] > majority_count: return num return -1"},{"question":"Write a function to add two numbers, \`a\` and \`b\`. If \`a\` is greater than or equal to \`b\`, add them; otherwise, return the absolute difference between them.","solution":"def add_or_diff(a, b): Adds a and b if a is greater than or equal to b. Otherwise, returns the absolute difference between them. if a >= b: return a + b else: return abs(a - b)"},{"question":"Write a function to filter and sort a list of strings based on specific conditions.","solution":"import re def filter_and_sort_strings(strings): Filters out strings that contain a number and sorts the remaining strings in alphabetical order (case insensitive). Parameters: strings (list): A list of strings. Returns: list: A filtered and sorted list of strings. filtered_strings = [s for s in strings if not re.search(r'd', s)] return sorted(filtered_strings, key=lambda x: x.lower())"},{"question":"Write a function to compute the sum of all integers from 1 to n (inclusive) using a loop in Python. Then, iterate through a list of 5 to 10 random integers and print the sum of those numbers.","solution":"def sum_of_integers(n): Returns the sum of all integers from 1 to n (inclusive). total = 0 for i in range(1, n + 1): total += i return total def iterate_and_print_sum(integers): Iterates through a list of random integers and returns the sum of those integers. total = 0 for number in integers: total += number return total"},{"question":"Write a function to find the maximum size of a subarray that sums to a given target value in an array. If no such subarray exists, return -1.","solution":"def max_subarray_sum_length(nums, target): Finds the maximum size of a subarray that sums to the given target value. Parameters: nums (list of int): List of integers. target (int): Target sum value. Returns: int: Maximum size of the subarray that sums to target, or -1 if no such subarray exists. max_length = -1 current_sum = 0 sum_indices = {0: -1} # To handle the case when the subarray starts from index 0 for i, num in enumerate(nums): current_sum += num if current_sum - target in sum_indices: max_length = max(max_length, i - sum_indices[current_sum - target]) if current_sum not in sum_indices: sum_indices[current_sum] = i return max_length"},{"question":"Write a function to detect if there are any duplicate numbers in an array.","solution":"def contains_duplicates(nums): Returns True if there are any duplicate numbers in the array, otherwise False. return len(nums) != len(set(nums))"},{"question":"Write a function to find all unique permutations of a given string.","solution":"from itertools import permutations def unique_permutations(s): Returns all unique permutations of a given string. perms = set(permutations(s)) return [''.join(p) for p in perms]"},{"question":"Write a function to serialize and deserialize a binary tree. Serialization is the process of converting a data structure into a string, and deserialization is the process of converting a string back into a data structure. The tree contains integer values.","solution":"import json class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def serialize(root): Serializes a binary tree to a string. :param root: TreeNode, the root of the binary tree :return: str, the serialized string representation of the binary tree def serialize_helper(node): if node is None: return None return [node.value, serialize_helper(node.left), serialize_helper(node.right)] return json.dumps(serialize_helper(root)) def deserialize(data): Deserializes a string to a binary tree. :param data: str, the string representation of the binary tree :return: TreeNode, the root of the binary tree def deserialize_helper(node_list): if node_list is None: return None node = TreeNode(node_list[0]) node.left = deserialize_helper(node_list[1]) node.right = deserialize_helper(node_list[2]) return node return deserialize_helper(json.loads(data))"},{"question":"Write a function to generate Fibonacci sequence up to a given number n. The Fibonacci sequence starts with 0 and 1, and each number that follows is the sum of the two preceding ones. For example, the sequence up to 10 is 0, 1, 1, 2, 3, 5, 8. You should implement the function in Python using recursion.","solution":"def fibonacci(n, a=0, b=1, sequence=None): Generates Fibonacci sequence up to a given number n using recursion. if sequence is None: sequence = [] if a > n: return sequence sequence.append(a) return fibonacci(n, b, a + b, sequence)"},{"question":"Write a function to remove all occurrences of a given value from an array of integers and return the new length of the array after the removal.","solution":"def remove_element(nums, val): Removes all occurrences of val from nums in place and returns the new length of nums. Args: nums: List of integers. val: Integer value to be removed from nums. Returns: Integer representing the new length of nums. k = 0 for i in range(len(nums)): if nums[i] != val: nums[k] = nums[i] k += 1 return k"},{"question":"Write a function to generate all permutations of a given string, considering duplicate characters.","solution":"from itertools import permutations def generate_permutations(s): Generate all unique permutations of a given string s. :param s: Input string :return: A list of unique permutations. return list(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a function to sort an array using the quicksort algorithm. QuickSort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting.","solution":"def quicksort(arr): Sorts an array using the quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to reverse a linked list in Python. How does it work and what is the time complexity of this function?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. :param head: ListNode The head of the linked list. :return: ListNode The new head of the reversed linked list. prev = None curr = head while curr is not None: next_node = curr.next # temporarily store the next node curr.next = prev # reverse the current node's pointer prev = curr # move the pointer forward in the list curr = next_node # move to the next node return prev # prev will be the new head of the reversed list"},{"question":"Write a function to search for the correct position of a target value in a sorted array, if the target is not found, return the index where it would be if it were inserted in order. The function should be efficient and handle various edge cases, such as an empty array or an array with a single element.","solution":"def search_insert_position(nums, target): Search for the correct position of a target value in a sorted array. If the target is not found, return the index where it would be if it were inserted in order. :param nums: List[int] - A sorted list of integers :param target: int - The target integer to search for :return: int - The index position of the target or the insertion position left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"Write a function to calculate the sum of all elements in a list of integers. Here's a Python function for calculating the sum of integers in a list. It seems to be missing a return statement for the calculated sum. You need to add it to ensure the function correctly returns the sum of all elements in the list. Additionally, make sure that the function handles negative integers and empty lists correctly.","solution":"def sum_of_elements(lst): Returns the sum of all elements in a list of integers. Handles negative integers and empty lists correctly. total = 0 for num in lst: total += num return total"},{"question":"Write a function to check if a given number is a valid ISBN-10 number. An ISBN-10 number consists of 10 digits and a checksum character. The checksum is calculated as follows: Multiply each digit by its position in the sequence, starting from 1. Sum all these products. The last digit is the checksum, calculated as 11 minus the modulo 11 of the sum. If the result is 10, the checksum is 'X'. If the result is 11, the checksum is '0'. Otherwise, it is the calculated result. Here is a sample isbn \\"0306406152\\". How can you validate this number using Python?","solution":"def is_valid_isbn10(isbn): Returns True if the given string is a valid ISBN-10 number, otherwise False. if len(isbn) != 10: return False sum = 0 for i in range(9): if not isbn[i].isdigit(): return False sum += int(isbn[i]) * (i + 1) checksum = sum % 11 if checksum == 10: checksum_char = 'X' else: checksum_char = str(checksum) return checksum_char == isbn[-1]"},{"question":"Write a function to find the element that appears most frequently in a given array. If there are multiple elements with the same maximum frequency, return the one that appears first in the array.","solution":"def most_frequent_element(arr): Returns the element that appears most frequently in the array. If there are multiple elements with the same maximum frequency, returns the one that appears first in the array. if not arr: return None from collections import Counter freq_counter = Counter(arr) max_freq = max(freq_counter.values()) for elem in arr: if freq_counter[elem] == max_freq: return elem"},{"question":"Write a function to check if a string is a palindrome (reads the same backward as forward). Provide a code snippet and explain the logic behind it.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, False otherwise. # Removing all non-alphanumeric characters and converting to lower case cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function to delete a node with a given value in a binary search tree (BST). The function should return the new root of the BST after the deletion. The BST can have integers, and the value to be deleted is provided as an argument to the function.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def delete_node(root, key): Delete a node with the given value in a BST and return the new root. if not root: return root if key < root.val: root.left = delete_node(root.left, key) elif key > root.val: root.right = delete_node(root.right, key) else: if not root.left: return root.right if not root.right: return root.left temp_val = find_min_value(root.right) root.val = temp_val root.right = delete_node(root.right, temp_val) return root def find_min_value(node): Find the minimum value in the BST. current = node while current.left is not None: current = current.left return current.val"},{"question":"Write a function to reverse a linked list in-place. Provide a detailed explanation of your solution.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the linked list in-place and returns the new head of the list. Args: head (ListNode): The head node of the linked list. Returns: ListNode: The new head node of the reversed linked list. prev = None current = head while current: next_node = current.next # Temporarily store the next current.next = prev # Reverse the current node's pointer prev = current # Move pointers one position ahead current = next_node return prev"},{"question":"Write a function to check whether a given number is a perfect cube and then use it to find all perfect cubes between 1 and 1000.","solution":"def is_perfect_cube(n): Checks if n is a perfect cube. if n < 0: return False cube_root = round(n ** (1/3)) return cube_root ** 3 == n def find_perfect_cubes_between_1_and_1000(): Finds all perfect cubes between 1 and 1000. return [x for x in range(1, 1001) if is_perfect_cube(x)]"},{"question":"Write a function to reverse a given string s, but with the condition that the reverse should be done only for the characters that are alphabets. You should keep the non-alphabetical characters in their original positions.","solution":"def reverse_only_alphabets(s): Reverses only the alphabetical characters in the provided string s. Non-alphabetical characters remain in their original positions. # Extract only alphabet characters and reverse them alphabets = [char for char in s if char.isalpha()] reversed_alphabets = alphabets[::-1] # Create a list from the original string to allow modifications result = list(s) # Replace alphabets in the original string with the reversed ones rev_index = 0 for i in range(len(result)): if result[i].isalpha(): result[i] = reversed_alphabets[rev_index] rev_index += 1 # Join the list to form the final string return ''.join(result)"},{"question":"Write a function to flatten a nested dictionary for a given list of keys in Python.","solution":"def flatten_dict(nested_dict, keys): Flattens a nested dictionary based on the provided list of keys. Parameters: nested_dict (dict): The dictionary to be flattened. keys (list): The list of keys to flatten in order. Returns: dict: A flattened dictionary containing only the specified keys. def get_nested_value(d, keys): for key in keys: d = d.get(key, {}) return d flattened_dict = {} for key_path in keys: keys_split = key_path.split(\\".\\") flattened_dict[key_path] = get_nested_value(nested_dict, keys_split) return flattened_dict"},{"question":"Write a function to find the kth smallest element in an unsorted array using a min-heap. How would you implement this in Python?","solution":"import heapq def kth_smallest_element(arr, k): Returns the kth smallest element in an unsorted array using a min-heap. Parameters: arr (list): The unsorted array. k (int): The \\"k\\" specifying the order of the smallest element. Returns: int: The kth smallest element in the array. if k > len(arr) or k < 1: raise ValueError(\\"k is out of range of the array length\\") # Use a min-heap to extract the k-th smallest element min_heap = [] for num in arr: heapq.heappush(min_heap, num) for _ in range(k - 1): heapq.heappop(min_heap) return heapq.heappop(min_heap)"},{"question":"Write a function to find the minimum number of cars required to transport \`n\` packed boxes across a checkpoint, given the time it takes to pack boxes \`PackTime\` and the time it takes to pass through each checkpoint during the inspection process \`InspectionTime\`. Each car can hold at most \`maxBoxes\` packed boxes, and each car must start and end its journey between \`startTime\` and \`endTime\`. Moreover, a car can only carry one set of boxes at a time.","solution":"def min_cars_required(n, PackTime, InspectionTime, maxBoxes, startTime, endTime): Returns the minimal number of cars required to transport \`n\` packed boxes. Parameters: n (int): The number of boxes. PackTime (int): The time it takes to pack each box. InspectionTime (int): The time it takes for each car to pass the inspection. maxBoxes (int): The maximum number of boxes a car can hold. startTime (int): The start time for the journey. endTime (int): The end time for the journey. Returns: int: The minimum number of cars required. # Calculate total available time for transportation totalTime = endTime - startTime # Calculate the total time per trip for a car which includes packing and inspection timePerTrip = maxBoxes * PackTime + InspectionTime # Calculate the number of trips needed to move all boxes totalTripsNeeded = (n + maxBoxes - 1) // maxBoxes # Check if it's possible to fit all trips within the available time if totalTripsNeeded * timePerTrip > totalTime: return -1 # or some indication that transport within given time is impossible return totalTripsNeeded"},{"question":"Write a function to create a Fibonacci sequence up to a given number \`n\`. The function should return the sequence as a list.","solution":"def fibonacci_sequence(n): Generates a Fibonacci sequence up to a given number n. :param n: upper limit of the Fibonacci sequence (inclusive) :return: a list of Fibonacci numbers up to n if n < 0: return [] sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to calculate the sum of numbers in a range, from a to b.","solution":"def sum_of_range(a, b): Returns the sum of numbers in the range from a to b inclusive. If a > b, it sums from b to a. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Write a function to calculate the factorial of a given number N using both recursive and iterative approaches. Also, handle the case when the input number is negative by returning an appropriate message.","solution":"def factorial_recursive(n): Returns the factorial of n using a recursive approach. if n < 0: return \\"Factorial is not defined for negative numbers.\\" elif n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1) def factorial_iterative(n): Returns the factorial of n using an iterative approach. if n < 0: return \\"Factorial is not defined for negative numbers.\\" result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to find the maximum number in a list of integers. You can use any programming language you're comfortable with. For example, given the list \`[1, 3, 5, 7, 9]\`, the function should return \`9\`.","solution":"def find_maximum(numbers): Returns the maximum number in a list of integers. if not numbers: return None max_num = numbers[0] for num in numbers: if num > max_num: max_num = num return max_num"},{"question":"Write a function to extract and return the first character of each word from a given string.","solution":"def extract_first_characters(text): Extract and return the first character of each word from the given string. Parameters: text (str): The input string. Returns: str: A string consisting of the first characters of each word. # Split the text into words words = text.split() # Extract the first character of each word first_characters = ''.join(word[0] for word in words) return first_characters"},{"question":"Write a function to calculate the sum of an array's elements from left to right.","solution":"def sum_array(arr): Returns the sum of the elements in the array. Parameters: arr (list): The list of numbers to be summed Returns: int/float: The sum of the numbers in the list return sum(arr)"},{"question":"Write a function to generate all the prime numbers up to a given number n using the Sieve of Eratosthenes.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n (inclusive) using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if is_prime[p]] return prime_numbers"},{"question":"Write a function to calculate the nth Fibonacci number. The function should be efficient and should not use recursion to ensure that it can handle large values of n without running into performance issues.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Uses an iterative approach to ensure efficiency for large values of n. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a function to return the kth permutation of the set {1, 2, 3, ..., n}. The return value should be as a string. Example: Given n = 3 and k = 2, function should return \\"213\\".","solution":"from math import factorial def get_permutation(n, k): Returns the kth permutation of the set {1, 2, 3, ..., n}. numbers = list(range(1, n + 1)) k -= 1 # convert k to zero-indexed permutation = [] while n > 0: n -= 1 idx, k = divmod(k, factorial(n)) permutation.append(numbers.pop(idx)) return ''.join(map(str, permutation))"},{"question":"Write a function to find the length of the longest common prefix string amongst an array of strings.","solution":"def longest_common_prefix(strs): Returns the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Sort the array strs.sort() # Compare the first and the last string character by character first, last = strs[0], strs[-1] i, min_length = 0, min(len(first), len(last)) while i < min_length and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Write a function to find the maximum value of the product of i and array[i] for any index i in an array of integers.","solution":"def max_i_multiplied_by_array_i(arr): Returns the maximum value of the product of i and arr[i] for any index i in an array. max_product = float('-inf') for i in range(len(arr)): product = i * arr[i] if product > max_product: max_product = product return max_product"},{"question":"Write a function to check if a given string can be segmented into words from a dictionary.","solution":"def can_segment_string(s, dictionary): Determine if the given string can be segmented into a space-separated sequence of one or more dictionary words. :param s: str, the input string :param dictionary: set, a set of words representing the dictionary :return: bool, True if the string can be segmented, otherwise False n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in dictionary: dp[i] = True break return dp[n]"},{"question":"Write a function to calculate the sum of two integers without using the '+' operator, and handle the overflow case using bitwise operations.","solution":"def add_without_plus(a, b): Returns the sum of a and b using bitwise operations. mask = 0xFFFFFFFF max_int = 0x7FFFFFFF while b != 0: # Calculate the carry carry = a & b # Sum without carry a = (a ^ b) & mask # Shift carry to left b = (carry << 1) & mask # Checking integer overflow if a > max_int: a = ~(a ^ mask) return a"},{"question":"Write a function to calculate the probability of rolling a specific sum from n dice, where each die has k faces. The function should take two parameters: n (the number of dice) and k (the number of faces on each die). The function should return the probability of obtaining exactly s sum.","solution":"import itertools def probability_of_sum(n, k, s): Calculate the probability of rolling a specific sum (s) with n dice, each with k faces. Parameters: n (int): Number of dice. k (int): Number of faces on each die. s (int): Target sum. Returns: float: Probability of achieving the sum s. outcomes = itertools.product(range(1, k + 1), repeat=n) total_count = 0 successful_count = 0 for outcome in outcomes: total_count += 1 if sum(outcome) == s: successful_count += 1 return successful_count / total_count if total_count > 0 else 0.0"},{"question":"Write a function to generate a list of all possible combinations of numbers from a given list that add up to a target number, allowing for repeated numbers. The function should handle cases where the target is greater than the sum of all numbers in the list and return an empty list in such scenarios.","solution":"def find_combinations(numbers, target): Returns a list of all possible combinations of numbers from the given list that add up to the target number, allowing for repeated numbers. :param numbers: List of integers to generate combinations from. :param target: The target sum that combinations should add up to. :return: A list of lists, where each list is a combination that adds up to the target. result = [] def backtrack(remaining, combo, start): if remaining == 0: result.append(list(combo)) return if remaining < 0: return for i in range(start, len(numbers)): combo.append(numbers[i]) backtrack(remaining - numbers[i], combo, i) combo.pop() backtrack(target, [], 0) return result"},{"question":"Write a function to check whether a given string is a palindrome. Provide an example of how to use the function.","solution":"def is_palindrome(s): Check if the given string s is a palindrome. A palindrome is a string that reads the same forward and backward. :param s: str - The string to check :return: bool - True if s is a palindrome, False otherwise # Remove non-alphanumeric characters and convert to lowercase cleaned_s = \\"\\".join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1] # Example of how to use the function example_string = \\"A man, a plan, a canal, Panama\\" result = is_palindrome(example_string) print(f\\"Is the string '{example_string}' a palindrome? {result}\\")"},{"question":"Write a function to calculate the sum of all even Fibonacci numbers up to a given limit.","solution":"def sum_even_fibonacci(limit): Returns the sum of all even Fibonacci numbers up to a given limit. a, b = 0, 1 even_sum = 0 while a <= limit: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum"},{"question":"Write a function to check if a given integer number is a palindrome (reads the same backward as forward). Implement this function in Python.","solution":"def is_palindrome(number): Check if the given integer number is a palindrome. Args: number (int): The integer to be checked. Returns: bool: True if the number is a palindrome, False otherwise. # Negative numbers are not palindrome if number < 0: return False # Convert the number to a string str_number = str(number) # Check if the string reads the same forward and backward return str_number == str_number[::-1]"},{"question":"Write a function to calculate all the maximum numbers in all subarrays of a given array.","solution":"from collections import deque def max_in_subarrays(arr, k): Calculate the maximum in each subarray of size k. Parameters: arr (list): The input array. k (int): The size of the subarray. Returns: list: A list containing the maximum of each subarray of size k. if not arr or k <= 0 or k > len(arr): return [] deque_index = deque() result = [] for i in range(len(arr)): # Remove elements outside of the current window while deque_index and deque_index[0] < i - k + 1: deque_index.popleft() # Remove elements from the back of deque that are less than # the current element because they are no longer useful while deque_index and arr[deque_index[-1]] < arr[i]: deque_index.pop() deque_index.append(i) # Start adding to results list once we have the first full window if i >= k - 1: result.append(arr[deque_index[0]]) return result"},{"question":"Write a function to detect if a string contains any repeating characters.","solution":"def has_repeating_chars(input_str): Returns True if the input string contains any repeating characters, else False. seen_chars = set() for char in input_str: if char in seen_chars: return True seen_chars.add(char) return False"},{"question":"Write a function to dynamically generate an HTML form based on a dictionary of input fields. The dictionary keys are the names of the input fields, and the values are the types of input fields they should be (\`'text'\`, \`'email'\`, \`'password'\`, etc.). The function should return the complete HTML string containing the form.","solution":"def generate_html_form(fields): Generates an HTML form based on the provided dictionary of input fields. Args: - fields (dict): A dictionary where the keys are field names and the values are their types (e.g., 'text', 'email', etc.). Returns: - str: The complete HTML string containing the form. form_html = '<form>n' for name, field_type in fields.items(): form_html += f' <label for=\\"{name}\\">{name.capitalize()}</label>n' form_html += f' <input type=\\"{field_type}\\" id=\\"{name}\\" name=\\"{name}\\">n' form_html += ' <input type=\\"submit\\" value=\\"Submit\\">n' form_html += '</form>' return form_html"},{"question":"Write a function to find all subsets of a given set of distinct integers, including the empty set and the set itself.","solution":"from typing import List def find_subsets(nums: List[int]) -> List[List[int]]: Returns all subsets of a given set of distinct integers. result = [] subset = [] def backtrack(start): # Add the current subset to the result result.append(subset[:]) # Try to include each number starting from 'start' to the current subset for i in range(start, len(nums)): # Include nums[i] subset.append(nums[i]) # Continue to add more elements starting from the next one backtrack(i + 1) # Exclude nums[i] (backtrack) subset.pop() backtrack(0) return result"},{"question":"Write a function to remove duplicates from a sorted array in-place and return the length of the array with unique elements.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place and returns the length of the array with unique elements. :param nums: List of sorted integers :return: Length of array with unique elements if not nums: return 0 write_index = 1 # Index to write the next unique element for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a function to find the largest number in a list using the lambda function.","solution":"def largest_number(numbers): Returns the largest number in the list numbers using lambda function. return max(numbers, key=lambda x: x)"},{"question":"Write a function to check if a given string \`s1\` is a rotation of another string \`s2\`. A string \`s1\` is considered a rotation of \`s2\` if there exists a way to split \`s2\` into two parts and append the second part to the first part to get \`s1\`. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\".","solution":"def is_rotation(s1, s2): Checks if the string s1 is a rotation of the string s2. Parameters: s1 (str): the string to check if it is a rotation. s2 (str): the base string to check against. Returns: bool: True if s1 is a rotation of s2, False otherwise. if len(s1) != len(s2): return False return s1 in (s2 + s2)"},{"question":"Write a function to find the middle element of a singly linked list in linear time complexity.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle(head): Finds and returns the middle node of a singly linked list. If the list is empty, returns None. if head is None: return None slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to find the first and last position of an element in a sorted array. If the element is not found, return [-1, -1].","solution":"def find_first_and_last_position(nums, target): Returns the first and last position of an element in a sorted array. If the element is not found, returns [-1, -1]. def find_first(nums, target): low, high = 0, len(nums) - 1 first_pos = -1 while low <= high: mid = (low + high) // 2 if nums[mid] < target: low = mid + 1 elif nums[mid] > target: high = mid - 1 else: first_pos = mid high = mid - 1 return first_pos def find_last(nums, target): low, high = 0, len(nums) - 1 last_pos = -1 while low <= high: mid = (low + high) // 2 if nums[mid] < target: low = mid + 1 elif nums[mid] > target: high = mid - 1 else: last_pos = mid low = mid + 1 return last_pos first = find_first(nums, target) if first == -1: return [-1, -1] last = find_last(nums, target) return [first, last]"},{"question":"Write a function to find the ceiling and floor values of a number in a sorted array. The ceiling value is the smallest number greater than or equal to the target, and the floor value is the largest number less than or equal to the target. If the target is present in the array, both the ceiling and floor values will be the target.","solution":"def find_ceiling_floor(arr, target): Finds the ceiling and floor values of a number in a sorted array. Parameters: arr (list): A list of sorted integers. target (int): The target integer to find the ceiling and floor for. Returns: tuple: A tuple containing the ceiling and floor values. if not arr: return (None, None) n = len(arr) ceiling = None floor = None for i in range(n): if arr[i] >= target: ceiling = arr[i] break for i in range(n-1, -1, -1): if arr[i] <= target: floor = arr[i] break return (ceiling, floor)"},{"question":"Write a function to find the unique elements in a list. The function should be able to handle a list of any data type, and return a new list containing only the elements that appear exactly once in the original list.","solution":"def find_unique_elements(lst): Returns a list of elements that appear exactly once in the input list. Parameters: lst (list): The input list which can contain elements of any data type. Returns: list: A list containing the unique elements from the input list. from collections import Counter element_counts = Counter(lst) unique_elements = [elem for elem, count in element_counts.items() if count == 1] return unique_elements"},{"question":"Write a function to perform matrix multiplication in Python. The function should take two 2D lists (matrices) as input and return the resulting matrix after multiplication. Assume both matrices are compatible for multiplication.","solution":"def matrix_multiply(matrix1, matrix2): Multiplies two matrices and returns the resulting matrix. Assumes the matrices are compatible for multiplication. # Get the number of rows and columns for each matrix rows_matrix1 = len(matrix1) cols_matrix1 = len(matrix1[0]) cols_matrix2 = len(matrix2[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(cols_matrix2)] for _ in range(rows_matrix1)] # Perform matrix multiplication for i in range(rows_matrix1): for j in range(cols_matrix2): for k in range(cols_matrix1): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Write a function to solve the 0-1 Knapsack problem using dynamic programming. The function should take three parameters: a list of item weights, a list of item values, and the maximum capacity of the knapsack. The function should return the maximum value that can be carried in the knapsack.","solution":"def knapsack(weights, values, capacity): Solves the 0-1 Knapsack problem using dynamic programming. Parameters: weights (list): List of item weights. values (list): List of item values. capacity (int): Maximum capacity of the knapsack. Returns: int: The maximum value that can be carried in the knapsack. n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a function to calculate the average of an array of numbers. If the array is empty, the function should return 0.","solution":"def calculate_average(numbers): Returns the average of a list of numbers. If the list is empty, returns 0. Parameters: numbers (list): List of numbers. Returns: float: The average of the numbers or 0 if the list is empty. if not numbers: return 0 total = sum(numbers) count = len(numbers) average = total / count return average"},{"question":"Write a function to find the median of a list of numbers. The function should handle both sorted and unsorted lists. The return type should be a float if the median is a decimal number, and an integer if it is a whole number. If the list has no values, the function should return null.","solution":"from typing import Union, List def find_median(nums: List[int]) -> Union[int, float, None]: Returns the median of the list of numbers. If the median is an integer, returns an int. If the median is a decimal number, returns a float. If the list is empty, returns None. :param nums: List of integers. :return: Median of the list (int, float or None). if not nums: return None nums.sort() n = len(nums) mid = n // 2 if n % 2 == 1: return nums[mid] else: median = (nums[mid - 1] + nums[mid]) / 2 return int(median) if median.is_integer() else median"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been circularly modified. A circularly modified array means that the array can be concatenated with itself, and we consider the maximum sum within this new larger array. For example, if the array is [1, -2, 3, -2], its circularly modified version can be seen as [1, -2, 3, -2, 1, -2, 3, -2].","solution":"def max_subarray_sum_circular(nums): Returns the maximum sum of a contiguous subarray within a circularly modified array. if not nums: return 0 # Standard Kadane's algorithm to find maximum subarray sum def kadane(arr): max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Case 1: Get the maximum sum using standard kadane's algorithm max_kadane = kadane(nums) # Case 2: Now find the maximum sum that includes corner elements max_wrap = sum(nums) for i in range(len(nums)): nums[i] = -nums[i] max_wrap = max_wrap + kadane(nums) # In case all numbers are negative, max_wrap would be 0 (after summation and extra kadane step) # so we return max_kadane instead of max_wrap unless max_wrap is non-zero if max_wrap == 0: return max_kadane else: return max(max_wrap, max_kadane)"},{"question":"Write a function to convert a string of hexadecimal characters into its binary representation in decimal format.","solution":"def hex_to_bin_decimal(hex_string): Converts a string of hexadecimal characters into its binary representation in decimal format. Args: hex_string (str): The hexadecimal string to convert. Returns: int: The decimal representation of the binary number. # Convert the hexadecimal string to a binary string binary_string = bin(int(hex_string, 16))[2:] # Convert the binary string to its decimal representation return int(binary_string, 2)"},{"question":"Write a function to reverse a singly linked list in Python. Also, provide a brief explanation for each step of the code.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, the head of the singly linked list :return: ListNode, the head of the reversed list prev = None current = head while current is not None: next_node = current.next # Store the next node current.next = prev # Reverse the link prev = current # Move 'prev' one step forward current = next_node # Move 'current' one step forward return prev # 'prev' will be the new head at the end of the loop"},{"question":"Write a function to implement a stack data structure in Python. The stack should support the following operations: \`push\`, \`pop\`, \`peek\`, and \`is_empty\`. Make sure to handle edge cases and provide a clear implementation.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if self.is_empty(): raise IndexError(\\"pop from empty stack\\") return self.items.pop() def peek(self): if self.is_empty(): raise IndexError(\\"peek from empty stack\\") return self.items[-1] def is_empty(self): return len(self.items) == 0"},{"question":"Write a function to check if a string contains only unique characters. You may not use any additional data structures such as sets, lists, or dictionaries. Your goal is to solve this problem without using any additional storage.","solution":"def has_unique_characters(s): Checks if the string s contains only unique characters. No additional data structures are used. n = len(s) for i in range(n): for j in range(i + 1, n): if s[i] == s[j]: return False return True"},{"question":"Write a function to check if two strings are anagrams, meaning they contain the same characters in any order. For example, \\"listen\\" and \\"silent\\" are anagrams.","solution":"def are_anagrams(str1, str2): Return True if str1 and str2 are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Write a function to find the smallest number greater than or equal to a given number n that can be divided evenly by a given divisor d.","solution":"def find_smallest_divisible(n, d): Finds the smallest number greater than or equal to n that can be divided evenly by d. Parameters: n (int): The number to start searching from. d (int): The divisor. Returns: int: The smallest number greater than or equal to n which is divisible by d. if n % d == 0: return n else: return n + (d - (n % d))"},{"question":"Write a function to divide two integers without using the \`*\`, \`/\`, \`mod\`, and \`%\` operators.","solution":"def divide(dividend, divisor): Function to divide two integers without using the *, /, mod, and % operators. if divisor == 0: raise ValueError(\\"Divisor cannot be zero\\") # Determine the sign of the quotient sign = -1 if ((dividend < 0) ^ (divisor < 0)) else 1 # Convert both numbers to positive dividend = abs(dividend) divisor = abs(divisor) quotient = 0 while dividend >= divisor: dividend -= divisor quotient += 1 return sign * quotient"},{"question":"Write a function to reverse a given list of integers in Python. The function should take a list of integers as input and return a new list with the integers in reverse order. For example, if the input list is \`[1, 2, 3, 4, 5]\`, the function should return \`[5, 4, 3, 2, 1]\`. Make sure to handle empty lists and lists with a single element.","solution":"def reverse_list(lst): Returns a new list with the elements of lst in reverse order. :param lst: List of integers to be reversed. :return: New list with the integers in reverse order. return lst[::-1]"},{"question":"Write a function to create a random maze, where the maze is represented as a 2D list and each cell is either a wall represented by '#' or an open path represented by ' ' (space). The function should take two parameters: the number of rows and the number of columns and return the maze as a 2D list.","solution":"import random def create_random_maze(rows, cols): Create a random maze with the given number of rows and columns. Each cell in the maze will be either a wall '#' or an open path ' ' (space). The maze will be represented as a 2D list. Parameters: rows (int): Number of rows in the maze. cols (int): Number of columns in the maze. Returns: list[list[str]]: 2D list representing the maze. maze = [] for r in range(rows): row = [] for c in range(cols): cell = '#' if random.random() < 0.3 else ' ' row.append(cell) maze.append(row) return maze"},{"question":"Write a function to return the maximum integer in a given list, without using specific built-in functions or methods like \`max()\`.","solution":"def find_max(lst): Returns the maximum integer in a given list. :param lst: List of integers :return: Maximum integer in the list if not lst: # Handle the empty list case return None max_value = lst[0] for num in lst[1:]: if num > max_value: max_value = num return max_value"},{"question":"Write a function to check if the parentheses in a string are correctly matched.","solution":"def is_valid_parentheses(s): Check if the parentheses in the string are correctly matched. Args: s: A string containing parentheses Returns: bool: True if the parentheses are correctly matched, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function to find the second largest and smallest element in an array. You have to find the numbers in a single pass only (constant space complexity).","solution":"def find_second_largest_and_smallest(arr): Returns a tuple with the second smallest and second largest elements in the array. if len(arr) < 2: return None, None first_min = second_min = float('inf') first_max = second_max = float('-inf') for number in arr: if number < first_min: second_min = first_min first_min = number elif first_min < number < second_min: second_min = number if number > first_max: second_max = first_max first_max = number elif first_max > number > second_max: second_max = number second_min = second_min if second_min != float('inf') else None second_max = second_max if second_max != float('-inf') else None return second_min, second_max"},{"question":"Write a function to calculate the number of days between two dates. The dates will be provided in the format \\"YYYY-MM-DD\\". The function should handle leap years correctly and return the absolute difference in days.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the absolute number of days between two dates. # Parsing the dates d1 = datetime.strptime(date1, \\"%Y-%m-%d\\") d2 = datetime.strptime(date2, \\"%Y-%m-%d\\") # Calculating difference in days and returning the absolute value difference = abs((d2 - d1).days) return difference"},{"question":"Write a function to reverse the order of words in a string. Words are defined as sequences of characters separated by whitespace. Your function should treat multiple spaces between words as a single space and remove leading and trailing spaces.","solution":"def reverse_words(s): Reverses the words in a given string s. Words are separated by whitespace. Multiple spaces between words are considered as a single space. Leading and trailing spaces are removed. Args: s (str): The input string. Returns: str: The string with words in reverse order. # Split the string into words, removing extra spaces words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join them back with a single space return ' '.join(reversed_words)"},{"question":"Write a function to detect whether the input string \`str\` is a palindrome. A string is a palindrome if it reads the same forward and backward, ignoring cases and non-alphanumeric characters.","solution":"def is_palindrome(s): Determines if the input string s is a palindrome. A string is a palindrome if it reads the same forward and backward, ignoring cases and non-alphanumeric characters. :param s: The input string to check :return: True if s is a palindrome, False otherwise # Remove all non-alphanumeric characters and convert to lowercase cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function to find the maximum sum subarray in a one-dimensional array of numbers. Begin with the basic approach, then enhance it with a more efficient solution.","solution":"def max_sum_subarray(nums): Returns the maximum sum of any contiguous subarray within the given array of numbers. This implementation uses Kadane's Algorithm to achieve O(n) complexity. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the missing number in an array that contains integers from 1 to n with no duplicates. The array is zero-indexed.","solution":"def find_missing_number(arr): This function finds the missing number in an array that contains integers from 1 to n with no duplicates. Parameters: arr (list): The list of integers Returns: int: The missing number n = len(arr) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a function to find the largest palindrome that is a product of two n-digit numbers.","solution":"def largest_palindrome_product(n): Returns the largest palindrome that is a product of two n-digit numbers. max_num = 10**n - 1 min_num = 10**(n - 1) largest_palindrome = 0 for i in range(max_num, min_num - 1, -1): for j in range(i, min_num - 1, -1): product = i * j if product <= largest_palindrome: break if str(product) == str(product)[::-1]: largest_palindrome = product return largest_palindrome"},{"question":"Write a function to find duplicates in an array. In the array nums, the integers are in the range 1 to n, where n means the length of the array. There are some duplicates in the array, but you're not guaranteed that each number is only duplicated once. However, you're guaranteed that there is at least one duplicate. Return the duplicate integer in the array.","solution":"def find_duplicates(nums): Find duplicates in an array where integers are in the range 1 to n. duplicates = [] seen = set() for num in nums: if num in seen: duplicates.append(num) else: seen.add(num) return duplicates"},{"question":"Write a function to calculate the average of a list of numbers in Python using recursion.","solution":"def average_recursive(numbers, n=None, total_sum=0): Returns the average of a list of numbers using recursion. Parameters: numbers (list): a list of numbers n (int): the current index being processed, to help with recursion total_sum (int): the sum of the numbers calculated so far Returns: float: the average of the list of numbers if n is None: n = len(numbers) if n == 0: return total_sum / len(numbers) if len(numbers) > 0 else 0 return average_recursive(numbers, n - 1, total_sum + numbers[n - 1])"},{"question":"Write a function to convert a given Octal number to its equivalent Binary number. You are not allowed to directly convert the number to decimal before converting it to binary.","solution":"def octal_to_binary(octal_str): Convert an octal number (given as a string) to its equivalent binary number (as a string). binary_str = '' octal_to_bin_map = { '0': '000', '1': '001', '2': '010', '3': '011', '4': '100', '5': '101', '6': '110', '7': '111' } for digit in octal_str: if digit in octal_to_bin_map: binary_str += octal_to_bin_map[digit] else: raise ValueError(f\\"Invalid octal digit: {digit}\\") # Remove leading zeros return binary_str.lstrip('0') or '0'"},{"question":"Write a function to count the number of Vowels and Consonants in a given string.","solution":"def count_vowels_and_consonants(s): Returns a tuple with the count of vowels and consonants in the input string s. vowels = \\"aeiouAEIOU\\" vowel_count = 0 consonant_count = 0 for char in s: if char.isalpha(): if char in vowels: vowel_count += 1 else: consonant_count += 1 return vowel_count, consonant_count"},{"question":"Write a function to return the postorder traversal of a binary tree as a list of integers. This function should take a binary tree node as input and recursively traverse the tree in postorder. The postorder traversal involves visiting the left subtree, then the right subtree, and finally the root node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def postorder_traversal(root): Returns the postorder traversal of a binary tree. Args: root (TreeNode): Root of the binary tree. Returns: List[int]: Postorder traversal of the binary tree. if root is None: return [] result = [] result.extend(postorder_traversal(root.left)) result.extend(postorder_traversal(root.right)) result.append(root.val) return result"},{"question":"Write a function to find the first missing positive integer in an array of integers. The array may contain duplicates and negative numbers, and zeros. The function should have a time complexity of O(n).","solution":"def first_missing_positive(nums): Finds the first missing positive integer in an array of integers. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function to calculate the prefix sum of an array using Python. The function should take an array \`A\` as input and return a new array where each element at index \`i\` is the sum of elements from the start of the array up to index \`i\`.","solution":"def prefix_sum(A): Returns the prefix sum array of A. Each element at index i in the returned array is the sum of elements from the start of A up to index i. if not A: return [] prefix_sums = [A[0]] for i in range(1, len(A)): prefix_sums.append(prefix_sums[i-1] + A[i]) return prefix_sums"},{"question":"Write a function to perform a deep copy of a graph represented by an adjacency list, where each node is an integer and each connection between nodes is represented as a tuple. The function should handle potentially cyclic graphs without getting stuck in an infinite loop.","solution":"from collections import deque def deep_copy_graph(adj_list): Perform a deep copy of a graph represented by an adjacency list. Args: adj_list (dict): A dictionary representing the graph where keys are node integers and values are lists of tuples representing edges. Returns: dict: A deep copy of the adjacency list. if not adj_list: return {} copied_graph = {} queue = deque(adj_list.keys()) visited = set() while queue: node = queue.popleft() if node not in visited: visited.add(node) copied_graph[node] = adj_list[node][:] for edge in adj_list[node]: if edge not in visited: queue.append(edge) return copied_graph"},{"question":"Write a function to print prime numbers up to a given limit.","solution":"def print_primes(limit): Returns a list of prime numbers up to a given limit. if limit < 2: return [] primes = [] for num in range(2, limit + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function to calculate the sum of the elements at index 2 in all 2D arrays within a list. If an array has less than 3 elements, ignore that array.","solution":"def sum_of_third_elements(arrays): Calculate the sum of the elements at index 2 in all 2D arrays within a list. If an array has less than 3 elements, ignore that array. :param arrays: List of 2D arrays :return: Sum of the elements at index 2 in all valid arrays total_sum = 0 for array in arrays: if len(array) > 2: total_sum += array[2] return total_sum"},{"question":"Write a function to check if a given integer is a palindrome without using any extra memory (i.e., in constant space). You should not modify the input integer.","solution":"def is_palindrome(n): Check if a given integer is a palindrome without using extra memory. Parameters: n (int): The integer to check. Returns: bool: True if n is a palindrome, False otherwise. if n < 0: return False original = n reversed_num = 0 while n > 0: reversed_num = reversed_num * 10 + n % 10 n //= 10 return original == reversed_num"},{"question":"Write a function to remove the nth node from the end of a singly linked list and return the head of the modified list. The given integer n will be non-negative.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_nth_from_end(head: ListNode, n: int) -> ListNode: # Create a dummy node which acts like a new head dummy = ListNode(0, head) first = dummy second = dummy # Move 'first' n+1 steps ahead for _ in range(n + 1): first = first.next # Move both 'first' and 'second' until 'first' reaches the end while first: first = first.next second = second.next # 'second.next' is the node to remove second.next = second.next.next # Return the head of the modified list return dummy.next"},{"question":"Write a function to reverse a string in Python, but also handle cases where the input is not a string.","solution":"def reverse_string(input): Reverses the given string. If input is not a string, return 'Invalid input'. :param input: The string to reverse :return: The reversed string or 'Invalid input' if input is not a string if not isinstance(input, str): return 'Invalid input' return input[::-1]"},{"question":"Write a function to sort the array given below using the Quick Sort algorithm.","solution":"def quick_sort(arr): Sorts an array using the Quick Sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: A new list that is sorted. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a function to swap the values of two integers in a purely functional way. In functional programming, you're supposed to avoid changing the state of your program. Thus, instead of simply swapping the values of the two integers, you would write a function that returns a new pair of integers with their values swapped, while leaving the original integers untouched.","solution":"def swap(a, b): Returns a tuple with the values of a and b swapped. return b, a"},{"question":"Write a function to perform an array rotation to the right by 'k' positions. Anyone who needs help can ask for it.","solution":"def rotate_array(arr, k): Rotates the array to the right by k positions. Parameters: arr (list): The list of elements to be rotated. k (int): The number of positions to rotate the array. Returns: list: The rotated array. if not arr: return [] n = len(arr) k = k % n # in case k is greater than array length return arr[-k:] + arr[:-k]"},{"question":"Write a function to generate a list of all possible subsets of a given set. The function should be able to handle an input set of any size. The order of the subsets in the output list is not important, but the elements within each subset must be in ascending order. The function should not contain any repeated subsets. For example, given the set {1,2,3}, the function should return the following subsets: [], [1], [1,2], [1,2,3], [1,3], [2], [2,3], [3].","solution":"from itertools import chain, combinations def all_subsets(input_set): Generates all possible subsets of a given set. Parameters: - input_set (set): A set of integers Returns: - list of lists: A list of subsets, with each subset sorted in ascending order. sorted_list = sorted(input_set) # Sort elements within subsets # chain.from_iterable() combines all subsets of different lengths # combinations(sorted_list, r) generates subsets of length r return [list(subset) for subset in chain.from_iterable(combinations(sorted_list, r) for r in range(len(sorted_list)+1))]"},{"question":"Write a function to check if a given object is a valid JSON object. You should also be able to handle deeply nested JSON objects.","solution":"import json def is_valid_json(data): Checks if the given data is a valid JSON object. Parameters: data (str): The data to check. Returns: bool: True if data is a valid JSON object, False otherwise. try: json.loads(data) return True except ValueError: return False"},{"question":"Write a function to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations dynamically.","solution":"def calculator(a, b, operation): Performs a calculation on two numbers based on the given operation. Parameters: a (float): The first number. b (float): The second number. operation (str): The operation to perform. Should be one of 'add', 'subtract', 'multiply', 'divide'. Returns: float: The result of the operation. Raises: ValueError: If an invalid operation is provided or division by zero is attempted. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b else: raise ValueError(\\"Invalid operation\\")"},{"question":"Write a function to calculate the factorial of a given number in Python. The function should be able to handle large numbers efficiently and should not exceed the recursion limit imposed by Python. Use Python's built-in features and exception handling to achieve this.","solution":"import math def factorial(n): Returns the factorial of the given number n. Uses Python's math.factorial for efficient computation. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") return math.factorial(n)"},{"question":"Write a function to reverse an array in-place with constant extra space and O(n) time complexity. The function should not return a reversed array but rather mutate the original array.","solution":"def reverse_array_in_place(arr): Reverses the input array in-place with constant extra space and O(n) time complexity. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Write a function to find the shortest subarray with a sum at least \`s\`. If no such subarray exists, return 0. For example, if \`s = 7\` and the array is \`[2, 3, 1, 2, 4, 3]\`, the function should return 2 because the shortest subarray that sums up to at least \`s\` is \`[2, 4]\`.","solution":"def shortest_subarray_with_sum_at_least_s(nums, s): Returns the length of the shortest subarray with a sum at least s. If no such subarray exists, return 0. n = len(nums) min_len = n + 1 # Initialize to a large number larger than any possible subarray length current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= s: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return min_len if min_len != n + 1 else 0"},{"question":"Write a function to check if a given 3x3 grid of numbers (ranging from 1 to 9) is a valid solution to the Sudoku puzzle. A valid solution requires each row, each column, and each of the nine 3x3 sub-grids (also known as blocks) to contain all the digits from 1 to 9 without repetition.","solution":"def is_valid_sudoku(grid): Checks if the provided 3x3 grid is a valid Sudoku solution. :param grid: 3x3 list of lists containing integers between 1 and 9 :return: True if the grid is a valid Sudoku solution, False otherwise # Check each row for row in grid: if len(set(row)) != 3 or any(x not in range(1, 10) for x in row): return False # Check each column for col in range(3): column = [grid[row][col] for row in range(3)] if len(set(column)) != 3 or any(x not in range(1, 10) for x in column): return False # Check 3x3 subgrid subgrid = [grid[row][col] for row in range(3) for col in range(3)] if len(set(subgrid)) != 9 or any(x not in range(1, 10) for x in subgrid): return False return True"},{"question":"Write a function to convert a decimal number to a binary number using a loop.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation using a loop. Parameters: n (int): Decimal number Returns: str: Binary representation of the decimal number if n == 0: return '0' binary = '' while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a function to extract all the URLs from a given HTML content. The function should return a list of URLs found in the HTML.","solution":"import re def extract_urls(html_content): Extracts all URLs from the given HTML content. Args: html_content (str): The HTML content from which URLs need to be extracted. Returns: list: A list of URLs found within the HTML content. url_pattern = re.compile(r'<as+(?:[^>]*?s+)?href=\\"([^\\"]*)\\"') urls = url_pattern.findall(html_content) return urls"},{"question":"Write a function to reverse a string in Python, and explain how it works. Also, provide a step-by-step explanation of the solution, including any techniques or methods used.","solution":"def reverse_string(s): Reverses the input string s. :param s: Input string to be reversed :return: Reversed string return s[::-1]"},{"question":"Write a function to implement the K-means clustering algorithm in Python. The function should take as input the number of clusters (k), the number of iterations (max_iter), and a dataset (data). The function should return the cluster labels for each data point and the centroids of the clusters.","solution":"import numpy as np def k_means(k, max_iter, data): Implements the K-means clustering algorithm. Parameters: k (int): Number of clusters. max_iter (int): Maximum number of iterations. data (numpy.ndarray): The dataset, should be a 2D array where each row is a data point. Returns: tuple: (cluster_labels, centroids) cluster_labels is a 1D array where the ith entry is the cluster label of the ith data point. centroids is a 2D array where each row is a centroid of a cluster. n_samples, n_features = data.shape centroids = data[np.random.choice(n_samples, k, replace=False)] cluster_labels = np.zeros(n_samples, dtype=int) for _ in range(max_iter): # Assign clusters for i in range(n_samples): distances = np.linalg.norm(data[i] - centroids, axis=1) cluster_labels[i] = np.argmin(distances) new_centroids = np.zeros((k, n_features)) for j in range(k): points_in_cluster = data[cluster_labels == j] if len(points_in_cluster) > 0: new_centroids[j] = points_in_cluster.mean(axis=0) if np.all(centroids == new_centroids): break centroids = new_centroids return cluster_labels, centroids"},{"question":"Write a function to calculate the number of unique combinations of \`k\` elements from a set of \`n\` elements, considering the order of selection matters.","solution":"def permutations(n, k): Calculate the number of permutations of k elements from n elements. Args: n (int): The total number of elements. k (int): The number of elements to select. Returns: int: The number of unique permutations. if k > n or n <= 0 or k < 0: return 0 from math import factorial return factorial(n) // factorial(n - k)"},{"question":"Write a function to implement the English language QWERTY keyboard layout on a 4x4 matrix, and generate a sequence of button presses to produce a string of characters.","solution":"def qwerty_4x4_sequence(s): Returns the sequence of button presses to produce a string of characters on a 4x4 QWERTY layout. The 4x4 QWERTY layout is represented as: Q W E R T Y U I O P A S D F G H Each key press is indicated by its 0-indexed position: (row, col). layout = [ ['Q', 'W', 'E', 'R'], ['T', 'Y', 'U', 'I'], ['O', 'P', 'A', 'S'], ['D', 'F', 'G', 'H'] ] # Create a dictionary for quick lookup of the positions key_to_pos = {layout[r][c]: (r, c) for r in range(4) for c in range(4)} sequence = [] for char in s.upper(): if char in key_to_pos: sequence.append(key_to_pos[char]) else: raise ValueError(f\\"Character '{char}' not found in QWERTY 4x4 layout.\\") return sequence"},{"question":"Write a function to count the number of digits in an integer number.","solution":"def count_digits(n): Returns the number of digits in an integer number n. # Handle negative numbers by converting to positive n = abs(n) # Special case for zero if n == 0: return 1 count = 0 while n > 0: count += 1 n = n // 10 return count"},{"question":"Write a function to remove duplicates from a sorted array in place and return the new length of the array after duplicates have been removed. Consider the array is sorted, which can be used to your advantage in solving the problem efficiently.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in place and returns the new length. :param nums: List[int] - a sorted array of integers :return: int - the new length of the array after removing duplicates if not nums: return 0 # Initialize the counter and the second pointer. new_length = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[new_length] = nums[i] new_length += 1 return new_length"},{"question":"Write a function to reverse the elements of a given 2D array. The function should take a 2D array as input and return the reversed 2D array.","solution":"def reverse_2d_array(arr): This function reverses the elements of a given 2D array. Parameters: arr (list of list of int): The 2D array to be reversed. Returns: list of list of int: The reversed 2D array. return [list(reversed(row)) for row in reversed(arr)]"},{"question":"Write a function to check if a given integer is a good number. A good number is defined as a number that is a prime and is also the result of adding 1 to a power of 2. In other words, it should satisfy the equation 2^k + 1 = n for some integer k.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_good_number(n): Returns True if the given integer is a good number. A good number is prime and in the form of 2^k + 1. if n <= 0: return False k = 0 while True: potential = 2 ** k + 1 if potential == n: return is_prime(n) elif potential > n: return False k += 1"},{"question":"Write a function to calculate the maximum profit you can make from a single buy and sell transaction on a given list of daily stock prices. The list is provided as an array \`[prices]\`.","solution":"def max_profit(prices): Calculate the maximum profit from a single buy and sell transaction on a given list of daily stock prices. :param prices: List of daily stock prices. :return: Maximum profit that can be obtained. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to find all occurrences of a given number in an array.","solution":"def find_occurrences(arr, target): Returns the indices of all occurrences of the target number in the array. Parameters: arr (list of int): The array to search within. target (int): The number to find in the array. Returns: list of int: A list of indices where the target number occurs in the array. return [index for index, value in enumerate(arr) if value == target]"},{"question":"Write a function to calculate the maximum sum of a subarray within a two-dimensional array. Each subarray must contain exactly one element from each row of the two-dimensional array.","solution":"def max_sum_subarray_2D(arr): Calculate the maximum sum of a subarray within a two-dimensional array, where each subarray contains exactly one element from each row. Parameters: arr (list of list of int): The input two-dimensional array. Returns: int: The maximum sum of a subarray. if not arr: return 0 # Initialize the sum with 0 max_sum = 0 # Iterate through each row for row in arr: if not row: continue # Select the maximum element from each row max_element_in_row = max(row) # Add the maximum element of the row to the max_sum max_sum += max_element_in_row return max_sum"},{"question":"Write a function to find the kth largest element in a list of numbers. The function should return the kth largest element after sorting the list in descending order. If the list is shorter than k elements, return \\"Invalid\\" as there are not enough elements in the list to find the kth largest.","solution":"def kth_largest_element(lst, k): Returns the kth largest element in the list of numbers. If the list has fewer than k elements, returns \\"Invalid\\". if len(lst) < k: return \\"Invalid\\" sorted_lst = sorted(lst, reverse=True) return sorted_lst[k-1]"},{"question":"Write a function to find the maximum number of unique elements in any contiguous subarray of length k.","solution":"def max_unique_elements(arr, k): Finds the maximum number of unique elements in any contiguous subarray of length k. Parameters: arr (list): The input array. k (int): The length of the subarray. Returns: int: The maximum number of unique elements in any contiguous subarray of length k. if not arr or k <= 0 or k > len(arr): return 0 from collections import defaultdict window_counts = defaultdict(int) max_unique = 0 # Initialize the first window for i in range(k): window_counts[arr[i]] += 1 max_unique = len(window_counts) # Slide the window for i in range(k, len(arr)): window_counts[arr[i]] += 1 window_counts[arr[i - k]] -= 1 if window_counts[arr[i - k]] == 0: del window_counts[arr[i - k]] max_unique = max(max_unique, len(window_counts)) return max_unique"},{"question":"Write a function to find the number of days in a month. You should handle both leap years and non-leap years properly.","solution":"def is_leap_year(year): Determines if a given year is a leap year. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False def days_in_month(year, month): Returns the number of days in a specified month of a specified year. Args: year (int): The year of the month. month (int): The month for which the number of days is to be calculated. Returns: int: The number of days in the given month. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") # Days in each month month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if month == 2 and is_leap_year(year): return 29 return month_days[month - 1]"},{"question":"Write a function to compute the area of a polygon given its vertices. The vertices are stored in a 2D array. The function should return the area using the Shoelace formula.","solution":"def polygon_area(vertices): Compute the area of a polygon given its vertices using the Shoelace formula. Parameters: vertices (list of lists of floats): A list of [x, y] points representing the vertices of the polygon Returns: float: The area of the polygon n = len(vertices) if n < 3: return 0 # A polygon must have at least 3 vertices area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - x2 * y1 return abs(area) / 2"},{"question":"Write a function to sort a list of strings using a custom sorting criterion. The criterion is to sort the strings based on their length. If two strings have the same length, sort them alphabetically.","solution":"def custom_sort(strings): Sorts a list of strings based on their length. If two strings have the same length, sorts them alphabetically. :param strings: List of strings to be sorted. :return: Sorted list of strings. return sorted(strings, key=lambda s: (len(s), s))"},{"question":"Write a function to print the Fibonacci sequence up to a specific number using recursion. The function should be able to handle large numbers without causing overflow issues.","solution":"def fibonacci_print_recursive(n, a=0, b=1): Prints the Fibonacci sequence up to the number n using recursion. Args: n (int): The maximum value in the Fibonacci sequence to print. a (int): The first number in the sequence. b (int): The second number in the sequence. if a > n: return else: print(a, end=' ') fibonacci_print_recursive(n, b, a + b)"},{"question":"Write a function to find the maximum sum of a subarray within a given array of integers. The array can contain both negative and positive numbers, and it is guaranteed that at least one number is present in the array. Your function should iterate through the array once, checking for the maximum subarray sum using Kadane's algorithm.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within the given array of integers using Kadane's algorithm. max_current = arr[0] max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to return the longest word in a string of words passed as a parameter. If there are multiple words of the same maximum length, return the first such word encountered. You may assume that the string will not be empty and will only contain words separated by spaces.","solution":"def longest_word(s): Returns the longest word in a string of words. If there are multiple words of the same maximum length, it returns the first such word encountered. :param s: String containing words separated by spaces :return: Longest word in the string words = s.split() longest = words[0] for word in words[1:]: if len(word) > len(longest): longest = word return longest"},{"question":"Write a function to perform depth-first search (DFS) on a graph represented as an adjacency list. Ensure your function can handle both directed and undirected graphs. Your function should return the path from the start node to the goal node, if it exists, and a boolean indicating whether a path was found. If no path exists, the path should be an empty list.","solution":"def dfs(graph, start, goal, path=None, visited=None): Perform a depth-first search (DFS) on a graph. Parameters: - graph: dict, the adjacency list of the graph - start: the starting node of the search - goal: the goal node of the search Returns: - list, path from start to goal if exists, otherwise an empty list - bool, True if a path was found, otherwise False if path is None: path = [] if visited is None: visited = set() visited.add(start) path.append(start) if start == goal: return path, True for neighbor in graph.get(start, []): if neighbor not in visited: result_path, found = dfs(graph, neighbor, goal, path.copy(), visited.copy()) if found: return result_path, True return [], False"},{"question":"Write a function to calculate the sum of all integers from 1 to 10 using a loop.","solution":"def sum_of_integers(): Calculates the sum of integers from 1 to 10. total = 0 for i in range(1, 11): total += i return total"},{"question":"Write a function to sort an array in ascending order using the quicksort algorithm. I am looking for a Python implementation.","solution":"def quicksort(array): Sorts an array in ascending order using the quicksort algorithm. if len(array) <= 1: return array pivot = array[len(array) // 2] left = [x for x in array if x < pivot] middle = [x for x in array if x == pivot] right = [x for x in array if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to search for a given key in a Binary Search Tree (BST). The function should return true if the key is found in the BST, and false otherwise.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None def search_bst(root, key): Searches for a given key in a Binary Search Tree (BST). Parameters: root (TreeNode): The root of the BST. key (int): The key to search for. Returns: bool: True if the key is found, False otherwise. current_node = root while current_node: if key == current_node.key: return True elif key < current_node.key: current_node = current_node.left else: current_node = current_node.right return False"},{"question":"Write a function to sort an array in ascending order using the quicksort algorithm. The function should take the array and its length as input, and sort the array in-place. Additionally, provide a way to test the function with different input arrays.","solution":"def quicksort(arr, low, high): Sorts the array in ascending order using the quicksort algorithm. Parameters: arr (list): The array to be sorted low (int): The starting index of the array/sub-array to be sorted high (int): The ending index of the array/sub-array to be sorted def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 if low < high: pi = partition(arr, low, high) quicksort(arr, low, pi - 1) quicksort(arr, pi + 1, high) def sort_array(arr): Wrapper function to sort an array using the quicksort algorithm. Parameters: arr (list): The array to be sorted Returns: list: The sorted array quicksort(arr, 0, len(arr) - 1) return arr"},{"question":"Write a function to find the sum of the second elements in each tuple from a list of tuples, assuming the list is non-empty and each tuple has at least two elements.","solution":"def sum_of_second_elements(tuples_list): Returns the sum of the second elements in each tuple from a list of tuples. Parameters: tuples_list (list): A list of tuples with at least two elements each. Returns: int/float: Sum of the second elements of each tuple. return sum(t[1] for t in tuples_list)"},{"question":"Write a function to print a triangle of a specified height using asterisks (*).","solution":"def print_triangle(height): Prints a triangle of a specified height using asterisks (*). Parameters: height (int): The height of the triangle. for i in range(1, height + 1): print(' ' * (height - i) + '*' * (2 * i - 1))"},{"question":"Write a function to count the number of words in a given string. A word is defined as a sequence of characters separated by whitespace characters. Assume that the string may contain leading, trailing, and multiple consecutive whitespace characters.","solution":"def count_words(s): Returns the number of words in a given string s. A word is a sequence of characters separated by whitespace characters. # Split the string by whitespace to get words and filter empty strings words = s.split() return len(words)"},{"question":"Write a function to sort a list of strings based on their length in descending order using Python. Additionally, the function should ignore case sensitivity and also ensure that all strings are stripped of leading and trailing whitespaces before sorting.","solution":"def sort_strings_by_length(strings): Sort a list of strings based on their length in descending order. Ignores case sensitivity and strips leading and trailing whitespaces before sorting. # Strip leading and trailing whitespaces and convert all strings to lowercase cleaned_strings = [s.strip().lower() for s in strings] # Sort based on length in descending order sorted_strings = sorted(cleaned_strings, key=len, reverse=True) return sorted_strings"},{"question":"Write a function to return the longest prefix of a given string that is also a palindrome. For example, the longest palindromic prefix of \\"babad\\" is \\"bab\\".","solution":"def longest_palindromic_prefix(s): Returns the longest prefix of the string \`s\` that is also a palindrome. def is_palindrome(sub): return sub == sub[::-1] for i in range(len(s), 0, -1): if is_palindrome(s[:i]): return s[:i] return \\"\\" # Example usage: # longest_palindromic_prefix(\\"babad\\") => \\"bab\\""},{"question":"Write a function to reverse a singly linked list without using recursive calls. You should aim for O(n) time complexity and O(1) space complexity.","solution":"class ListNode: def __init__(self, value=0, next=None): Initializes the ListNode. Args: value (int): The value of the node. next (ListNode, optional): The next node in the linked list. Defaults to None. self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. Args: head (ListNode): The head node of the linked list. Returns: ListNode: The new head node of the reversed linked list. prev = None current = head while current is not None: next_node = current.next # store next node current.next = prev # reverse the link prev = current # move prev to current node current = next_node # move to next node return prev # prev will be the new head of the reversed list"},{"question":"Write a function to calculate the number of ways to make change for a given amount using a given set of coin denominations. The function should use a bottom-up approach with dynamic programming and assume each coin denomination can be used any number of times.","solution":"def count_ways_to_make_change(amount, coins): Calculate the number of ways to make change for a given amount using the given set of coin denominations. Parameters: amount (int): The amount for which we want to make change. coins (List[int]): The list of coin denominations available. Returns: int: The number of ways to make change for the given amount using the given coins. dp = [0] * (amount + 1) dp[0] = 1 # There's one way to make 0 amount, using no coins. for coin in coins: for x in range(coin, amount + 1): dp[x] += dp[x - coin] return dp[amount]"},{"question":"Write a function to check if an integer is a palindrome without using string conversion. Here is the problem description: Given an integer, write a function to determine if it is a palindrome. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not. The function should return True if the integer is a palindrome and False otherwise. Note: Negative numbers should not be considered as palindromes.","solution":"def is_palindrome_number(x): Returns True if x is a palindrome number, otherwise False. A palindrome number reads the same backward as forward. Negative numbers are not considered palindromes. if x < 0: return False # reversed_number will be the reverse of the number original = x reversed_number = 0 while x != 0: last_digit = x % 10 reversed_number = reversed_number * 10 + last_digit x = x // 10 return original == reversed_number"},{"question":"Write a function to count the number of words in a given string. I need the function to return the total count of words.","solution":"def count_words(s): Returns the number of words in the given string. Parameters: s (str): the input string Returns: int: the number of words in the string # Split the string by whitespace and count the non-empty elements return len(s.split())"},{"question":"Write a function to compute the factorial of a number in Python. Can you explain how the function works and provide an example of how to call it?","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result # Example of how to call the function: # fact_5 = factorial(5) # print(fact_5) # Output: 120"},{"question":"Write a function to remove duplicates from a list of integers in Python without using any built-in functions.","solution":"def remove_duplicates(lst): Removes duplicates from a list of integers. Args: lst: A list of integers. Returns: A new list of integers with duplicates removed. unique_elements = [] seen_elements = {} for element in lst: if element not in seen_elements: seen_elements[element] = True unique_elements.append(element) return unique_elements"},{"question":"Write a function to take a number and return its reverse using recursion.","solution":"def reverse_number(n, reversed_n=0): Takes a number and returns its reverse using recursion. # Handling negative numbers by recursively calling the function with positive equivalent if n < 0: return -reverse_number(-n) if n == 0: return reversed_n else: reversed_n = reversed_n * 10 + n % 10 return reverse_number(n // 10, reversed_n)"},{"question":"Write a function to add two numbers without using arithmetic operators and without using bitwise operators.","solution":"def add_without_operators(a, b): Returns the sum of a and b without using arithmetic or bitwise operators. if a == -b: return 0 if a < 0: for _ in range(-a): b -= 1 return b for _ in range(a): b += 1 return b"},{"question":"Write a function to determine whether a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Also, implement a main function to test the prime number function.","solution":"def is_prime(number): Returns True if the given number is a prime number, else False. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a function to filter out numbers less than 0 and return a new list with the remaining numbers sorted in ascending order.","solution":"def filter_and_sort(numbers): Filters out numbers less than 0 and returns a new list with the remaining numbers sorted in ascending order. Parameters: numbers (list of int): List of integer numbers. Returns: list of int: Sorted list of non-negative numbers. # Filter out numbers less than 0 non_negative_numbers = [num for num in numbers if num >= 0] # Sort the remaining numbers in ascending order sorted_numbers = sorted(non_negative_numbers) return sorted_numbers"},{"question":"Write a function to perform a binary search on a sorted array. The function should return the index of the target element if it is found within the array. If the target is not found, the function should return -1. Additionally, the code should handle cases where the array elements are of different data types. For instance, the array might contain both integers and strings, assuming that the strings can be converted to integers if necessary.","solution":"def binary_search(arr, target): Perform a binary search on a sorted array and return the index of the target element. If the target element is not found, return -1. The array can contain both integers and strings which can be converted to integers. Parameters: arr (list): A sorted list containing integers and/or strings convertible to integers. target (int or str): The target value to search for. Returns: int: The index of the target element in the array, or -1 if the target is not found. # Convert all elements to integers arr = [int(x) for x in arr] target = int(target) left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to check if the number of closing parentheses \`)\` is greater than the number of opening parentheses \`(\` in a string. If so, return True; otherwise, return False.","solution":"def more_closing_parentheses(s): Returns True if the number of closing parentheses ')' is greater than the number of opening parentheses '(' in the string s, otherwise returns False. open_count = s.count('(') close_count = s.count(')') return close_count > open_count"},{"question":"Write a function to find all pairs in an array that have a sum equal to a given target. The function should take an array of integers, the size of the array, a target sum, and a vector to store the pairs. The function should return the number of pairs found.","solution":"def find_pairs_with_sum(arr, target): Find all pairs in an array that have a sum equal to a given target. Parameters: arr (list of int): The array of integers. target (int): The target sum. Returns: list of tuples: List of pairs that sum to the target. pairs = [] seen = set() for num in arr: complement = target - num if complement in seen: pairs.append((complement, num)) seen.add(num) return pairs"},{"question":"Write a function to generate all unique anagrams of a given string. For example, the string 'abc' should return ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'].","solution":"from itertools import permutations def generate_anagrams(s): Generates all unique anagrams of the given string. :param s: Input string :return: List of unique anagrams return sorted(set(''.join(p) for p in permutations(s)))"},{"question":"Write a function to calculate the n-th Fibonacci number in Python, considering that the Fibonacci sequence starts with F(0)=0 and F(1)=1. The function should be optimized for large n values without using excessive space or significant time.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. Uses an iterative approach to handle large values of n efficiently. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to create a graph from a list of directed edges and perform a topological sort on the graph. The function should be able to handle graphs with cycles and return an error message.","solution":"from collections import defaultdict, deque def create_graph(edges): Creates a graph from a list of directed edges. graph = defaultdict(list) for u, v in edges: graph[u].append(v) return graph def topological_sort(edges): Performs topological sort on the graph created from the list of edges. graph = create_graph(edges) in_degree = {node: 0 for node in graph} for u in graph: for v in graph[u]: in_degree[v] = in_degree.get(v, 0) + 1 queue = deque([node for node in graph if in_degree[node] == 0]) top_order = [] visited_count = 0 while queue: node = queue.popleft() top_order.append(node) visited_count += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if visited_count != len(graph): return \\"Error: Graph has a cycle\\" return top_order"},{"question":"Write a function to sort an array in a zigzag fashion. The zigzag sorting means the array should be sorted in a special way such that it goes from the smallest to the largest, then goes back to the second smallest, then to the second largest and so on.","solution":"def zigzag_sort(arr): Sorts the array in zigzag fashion. arr.sort() left = 0 right = len(arr) - 1 result = [] while left <= right: if left == right: result.append(arr[left]) else: result.append(arr[left]) result.append(arr[right]) left += 1 right -= 1 return result"},{"question":"Write a function to sort an array using the quicksort algorithm. The function should be able to handle arrays of integers, where the integers are unique. The function name should be \\"quicksort\\".","solution":"def quicksort(arr): Sorts an array of unique integers using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to calculate the sum of the digits of a number. For example, for \`12345\`, the function should return \`15\`.","solution":"def sum_of_digits(number): Returns the sum of the digits of the given number. return sum(int(digit) for digit in str(number))"},{"question":"Write a function to generate Pascal's Triangle up to a specified number of rows.","solution":"def generate_pascals_triangle(num_rows): Returns Pascal's Triangle up to the specified number of rows. if num_rows <= 0: return [] triangle = [[1]] for i in range(1, num_rows): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Write a function to calculate the sum of elements in a single-dimensional array in Python. Name the function as \`array_sum\` and it should take one parameter, which is the array. Your function should return the sum of all elements in the array.","solution":"def array_sum(arr): Returns the sum of all elements in the array. Parameters: arr (list of int/float): The array whose elements need to be summed up. Returns: int/float: The sum of all elements in the array. return sum(arr)"},{"question":"Write a function to implement the well-known Bubble Sort algorithm in Python. Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. Please provide the function definition for Bubble Sort and wrap it around in class named 'Sorter'.","solution":"class Sorter: @staticmethod def bubble_sort(arr): Sorts an array using the Bubble Sort algorithm. n = len(arr) for i in range(n): # Flag to detect any swap occurrence in inner loop swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: # Swap the elements arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no two elements were swapped, the list is sorted if not swapped: break return arr"},{"question":"Write a function to remove the duplicate characters in a string while preserving the order of characters, but only if the duplicate characters appear consecutively. For example, in the string \\"aabcccddddeee\\", the function should return \\"abce\\" because 'a' is repeated consecutively, 'b' is repeated consecutively, 'c' appears three times consecutively but we only remove the repeated ones and keep the first occurrence, 'd' appears four times consecutively but we remove the three extra 'd's and keep the initial 'd', and 'e' appears three times consecutively but we only remove the extra two 'e's and keep the initial 'e'.","solution":"def remove_consecutive_duplicates(s): This function takes a string and removes consecutive duplicate characters while preserving the order of characters. if not s: return \\"\\" result = [s[0]] # Initialize result list with the first character for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Write a function to calculate the factorial of a number. A factorial is the product of all positive integers less than or equal to a given number.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to find the length of the longest valid (well-formed) parentheses substring in a given string \`s\` containing just the characters \`(\` and \`)\`.","solution":"def longest_valid_parentheses(s): Returns the length of the longest valid (well-formed) parentheses substring. max_len = 0 stack = [-1] # Starting with -1 to allow for the first valid substring calculation for i, char in enumerate(s): if char == '(': stack.append(i) # Push the index onto the stack else: stack.pop() # Pop the topmost element from the stack if not stack: stack.append(i) # If stack is empty, push current index as a base for future calculations else: max_len = max(max_len, i - stack[-1]) # Calculate the length of the current valid substring return max_len"},{"question":"Write a function to calculate the result of raising a number to the power of 3. What are some common pitfalls to watch out for in implementing this function?","solution":"def cube(n): Returns the result of raising n to the power of 3. Parameters: n (int or float): The number to be raised to the power of 3. Returns: int or float: The result of n**3. if not isinstance(n, (int, float)): raise TypeError(\\"Input must be an integer or float\\") return n ** 3"},{"question":"Write a function to rotate an array to the right by k steps without using extra space.","solution":"def rotate_array(nums, k): Rotates an array to the right by k steps without using extra space. Args: nums: List[int] - The input array. k: int - Number of steps to rotate the array. Returns: None - The array is modified in place. n = len(nums) k = k % n # Normalize k to prevent over-rotating nums[:] = nums[-k:] + nums[:-k]"},{"question":"Write a function to calculate the sum of the first n natural numbers, where n is a positive integer. The function should be named \`sum_natural_numbers\` and should take one argument, \`n\`.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number of terms to sum. Must be a positive integer. Returns: int: The sum of the first n natural numbers. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") return n * (n + 1) // 2"},{"question":"Write a function to find the second minimum value in a given array of integers. If the array does not contain at least two distinct elements, return -1. The function should be able to handle arrays with negative numbers as well.","solution":"def second_minimum(arr): Returns the second minimum value in the array. If the array does not contain at least two distinct elements, return -1. if len(arr) < 2: return -1 first_min = float('inf') second_min = float('inf') for num in arr: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num return second_min if second_min < float('inf') else -1"},{"question":"Write a function to find the first m non-repeated characters in a given string. The function should return a string containing these characters in the order they appear in the original string. If there are fewer than m unique characters, return all unique characters in the order they appear.","solution":"def first_m_non_repeated_chars(s, m): Returns the first m non-repeated characters in the given string. If there are fewer than m unique characters, return all unique characters. from collections import Counter char_count = Counter(s) result = [char for char in s if char_count[char] == 1] return ''.join(result[:m])"},{"question":"Write a function to find the maximum product of two distinct numbers in a given array of integers. The function should take an array of integers as input and return the maximum product. If the array contains less than two integers, the function should return an appropriate error message.","solution":"def max_product_of_two(arr): Returns the maximum product of two distinct numbers in a given array of integers. If the array contains less than two integers, return an error message. if len(arr) < 2: return \\"Error: Array must contain at least two integers.\\" arr.sort() # Maximum of product of two largest or product of two smallest negative numbers return max(arr[0] * arr[1], arr[-1] * arr[-2])"},{"question":"Write a function to find all permutations of a given string, taking into account repeated characters, and return them as a list of strings.","solution":"from itertools import permutations def find_permutations(s): Returns all unique permutations of the input string s. # Generate all permutations using itertools.permutations perms = permutations(s) # Eliminate duplicates by using a set unique_perms = set(''.join(p) for p in perms) return list(unique_perms)"},{"question":"Write a function to check if a list of numbers contains any duplicates and return a list of the duplicates. If there are no duplicates, return an empty list. Assume that the input list contains only integers.","solution":"def find_duplicates(nums): Returns a list of duplicates in the input list. Parameters: nums (list): A list of integers. Returns: list: A list of integers that are duplicates in the input list. num_counts = {} duplicates = [] for num in nums: if num in num_counts: if num_counts[num] == 1: # Only add the number the first time it's seen as a duplicate duplicates.append(num) num_counts[num] += 1 else: num_counts[num] = 1 return duplicates"},{"question":"Write a function to check if all the numbers in a list are equal. For example, if the list contains [1, 1, 1, 1], the function should return True. If the list contains [1, 2, 1, 1], the function should return False.","solution":"def all_equal(lst): Checks if all elements in the list are equal. Parameters: lst (list): The list to check. Returns: bool: True if all elements are equal, False otherwise. if len(lst) == 0: return True return all(x == lst[0] for x in lst)"},{"question":"Write a function to compare two lists and return the common elements. If any list has less than 3 elements, return \\"Error: Lists should have at least 3 elements.\\" Otherwise, use list comprehension to find the common elements.","solution":"def find_common_elements(list1, list2): Returns the common elements between two lists if they both have at least 3 elements. Otherwise, returns an error message. if len(list1) < 3 or len(list2) < 3: return \\"Error: Lists should have at least 3 elements.\\" # Find common elements using list comprehension common_elements = [element for element in list1 if element in list2] return common_elements"},{"question":"Write a function to identify all the palindromes in an array using Python.","solution":"def is_palindrome(word): Checks if a word is a palindrome. return word == word[::-1] def find_palindromes(arr): Identifies all the palindromes in an array of strings. return [word for word in arr if is_palindrome(word)]"},{"question":"Write a function to find the minimum element in a rotated sorted array without duplicates.","solution":"def find_min_in_rotated_sorted_array(arr): This function takes a rotated sorted array without duplicates and returns the minimum element in it. if not arr: return None left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"Write a function to print the elements of a 2D array row by row.","solution":"def print_2d_array_row_by_row(arr): Prints the elements of a 2D array row by row. :param arr: list of lists, representing a 2D array for row in arr: print(\\" \\".join(map(str, row)))"},{"question":"Write a function to multiply two matrices. The function should take two lists of lists as input, where each inner list represents a row of the matrix. The function should return the product of the two matrices. If the matrices cannot be multiplied, return an appropriate error message.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B if they can be multiplied. Parameters: A (list of lists): The first matrix where each inner list is a row. B (list of lists): The second matrix where each inner list is a row. Returns: list of lists: The resulting matrix product if A and B can be multiplied. str: An error message if the matrices cannot be multiplied. # Number of columns in A must equal to number of rows in B if len(A[0]) != len(B): return \\"Matrix multiplication is not possible due to dimension mismatch.\\" result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a function to return the number of prime numbers that are strictly smaller than a given non-negative integer \`n\`.","solution":"def count_primes(n): Returns the number of prime numbers that are strictly smaller than n. :param n: Non-negative integer :return: Number of prime numbers strictly smaller than n if n <= 2: return 0 is_prime = [True] * n is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n, i): is_prime[j] = False return sum(is_prime)"},{"question":"Write a function to convert a number to a percentage string in Go. The function should take an integer or float as input and return a string representing the percentage. The percentage should be formatted with two decimal places and include a percentage sign at the end.","solution":"def number_to_percentage(number): Converts a number to a percentage string. Parameters: number (int or float): The input number to be converted to a percentage. Returns: str: The formatted percentage string with two decimal places and a percentage sign. return f\\"{number:.2f}%\\""},{"question":"Write a function to calculate the number of permutations of a given string that can be formed.","solution":"from math import factorial from collections import Counter def count_permutations(string): Calculate the number of unique permutations of the given string. n = len(string) freq = Counter(string) denominator = 1 for count in freq.values(): denominator *= factorial(count) return factorial(n) // denominator"},{"question":"Write a function to check if a given string contains only digits. This function should return True if all characters in the string are digits, and False otherwise.","solution":"def is_digit_string(s): Returns True if the string s contains only digits, and False otherwise. return s.isdigit()"},{"question":"Write a function to check if a given string \`s\` contains only digits.","solution":"def contains_only_digits(s): Checks if the given string s contains only digits. Parameters: s (str): The input string to check. Returns: bool: True if s contains only digits, False otherwise. return s.isdigit()"},{"question":"Write a function to rotate an array to the right by k steps. The rotation should be in-place, meaning no additional space should be used (except for temporary variables). The rotation should handle cases where k is greater than the length of the array, and also negative values for k.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps in-place. n = len(arr) if n == 0: return arr # Normalize k to ensure it is within the bounds of array length k = k % n # Reverse the entire array arr.reverse() # Reverse the first k elements arr[:k] = reversed(arr[:k]) # Reverse the remaining elements arr[k:] = reversed(arr[k:])"},{"question":"Write a function to take a string and return a new string with all the vowels removed.","solution":"def remove_vowels(s): Returns a new string with all the vowels removed from the input string s. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels])"},{"question":"Write a function to count the number of unique elements in a given list. The function should take in a list and return the count of distinct elements.","solution":"def count_unique_elements(lst): Returns the number of unique elements in the given list. return len(set(lst))"},{"question":"Write a function to find the sum of all elements in a nested dictionary. The function should work recursively through all levels of nesting.","solution":"def sum_nested_dict(d): Recursively sums all the numeric elements in a nested dictionary. Args: d (dict): A dictionary with nested dictionaries that contain numeric values Returns: int/float: The sum of all numeric values within the nested dictionary total_sum = 0 for value in d.values(): if isinstance(value, dict): total_sum += sum_nested_dict(value) elif isinstance(value, (int, float)): total_sum += value return total_sum"},{"question":"Write a function to generate a list of prime numbers up to a given number ( n ). The function should be efficient and handle large values of ( n ). Consider using the Sieve of Eratosthenes algorithm for better performance.","solution":"def sieve_of_eratosthenes(n): Generate a list of prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit to generate prime numbers (inclusive). Returns: list: A list of prime numbers up to n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(2, n + 1) if is_prime[i]]"},{"question":"Write a function to search an element in a sorted array without using built-in search functions.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target element. Parameters: arr (list): A list of sorted elements. target (int): The element to search for. Returns: int: The index of the target element if found, else -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to implement DFS for a binary tree. The function should take the root of the tree as a parameter and return a list of the nodes in the order they are visited during the depth-first search.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs(root): Performs a depth-first search (DFS) on a binary tree. Args: root: The root TreeNode of the binary tree. Returns: A list of node values in the order they are visited during the DFS. def dfs_helper(node, visited): if node is not None: visited.append(node.value) dfs_helper(node.left, visited) dfs_helper(node.right, visited) result = [] dfs_helper(root, result) return result"},{"question":"Write a function to multiply two complex numbers using Python. The function should take two complex numbers as input and return their product.","solution":"def multiply_complex(a, b): Multiplies two complex numbers a and b. Parameters: a (complex): The first complex number. b (complex): The second complex number. Returns: complex: The product of a and b. return a * b"},{"question":"Write a function to swap two numbers without using a temporary variable. How would you implement this in Python?","solution":"def swap(a, b): Swaps two numbers without using a temporary variable. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a function to reverse a binary string. The function should take one binary string as input and return the reversed binary string. For example, if the input is \\"10101\\", the function should return \\"10101\\".","solution":"def reverse_binary_string(binary_string): Returns the reversed binary string. return binary_string[::-1]"},{"question":"Write a function to find the union of two sets of integers.","solution":"def union_of_sets(set1, set2): Returns the union of two sets of integers. Parameters: - set1 (set): The first set of integers. - set2 (set): The second set of integers. Returns: - set: The union of set1 and set2. return set1.union(set2)"},{"question":"Write a function to compare two strings and return the differences between them.","solution":"def compare_strings(str1, str2): Compares two strings and returns a list of differences. Each difference is represented as a tuple with (position, str1_char, str2_char). differences = [] max_len = max(len(str1), len(str2)) for i in range(max_len): char1 = str1[i] if i < len(str1) else None char2 = str2[i] if i < len(str2) else None if char1 != char2: differences.append((i, char1, char2)) return differences"},{"question":"Write a function to return the JSON representation of a list of dictionaries in Python.","solution":"import json def list_of_dicts_to_json(lst): Converts a list of dictionaries to a JSON string. Args: lst (list): List of dictionaries to be converted to JSON string. Returns: str: JSON string representation of the list of dictionaries. return json.dumps(lst)"},{"question":"Write a function to print all the prime numbers less than or equal to a given number \`n\` using the Sieve of Eratosthenes algorithm. The function should print the prime numbers in ascending order. For example, if \`n\` is 10, the function should print 2, 3, 5, and 7.","solution":"def sieve_of_eratosthenes(n): Prints all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start * start, n + 1, start): sieve[multiple] = False primes = [num for num in range(2, n + 1) if sieve[num]] return primes"},{"question":"Write a function to calculate all the prime factors of a given number 'n' and return them in ascending order. The function should be named \`primeFactors\` and it should take a single integer parameter \`n\`. The prime factors should be returned as a list.","solution":"def primeFactors(n): Returns a list of all prime factors of the given number \`n\` in ascending order. factors = [] # Divide out the number of twos while n % 2 == 0: factors.append(2) n //= 2 # Try all odd factors from 3 up to the square root of n factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 # If n is still larger than 2, then n itself is a prime factor if n > 2: factors.append(n) return factors"},{"question":"Write a function to check if a given word is a palindrome. A palindrome is a word that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". The function should return \`true\` if the word is a palindrome, and \`false\` otherwise. The function should ignore spaces, punctuation, and case sensitivity.","solution":"import re def is_palindrome(word): Returns True if the given word is a palindrome, otherwise False. Ignores spaces, punctuation, and case sensitivity. cleaned_word = re.sub(r'[^A-Za-z0-9]', '', word).lower() return cleaned_word == cleaned_word[::-1]"},{"question":"Write a function to find the length of the longest consecutive elements sequence in an array of integers. The sequence does not need to be contiguous. For example, in the array \`[1,2,0,1]\`, the longest consecutive elements sequence is \`[0,1,2]\`, which has a length of \`3\`.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in an array. if not nums: return 0 nums_set = set(nums) longest_sequence = 0 for num in nums_set: # Check if num is the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_sequence = max(longest_sequence, current_streak) return longest_sequence"},{"question":"Write a function to sort a list of integers in ascending order using the quicksort algorithm. The function should take a list of integers as input and return the sorted list. Write the Python function to solve this problem.","solution":"def quicksort(arr): Sorts a list of integers in ascending order using the quicksort algorithm. Args: arr (list): A list of integers. Returns: list: A list of integers sorted in ascending order. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to reverse a string without using any library functions or slicing. You should also handle cases where the string might be empty.","solution":"def reverse_string(s): Returns the reversed version of the input string. # Create an empty string to store the reversed string reversed_s = \\"\\" # Iterate over the string from the last character to the first character for i in range(len(s)-1, -1, -1): reversed_s += s[i] return reversed_s"},{"question":"Write a function to find the product of elements in a list using recursion in Python.","solution":"def recursive_product(lst): Returns the product of elements in the list using recursion. Parameters: lst (list): The list of numbers. Returns: int/float: The product of the numbers in the list. if not lst: return 1 else: return lst[0] * recursive_product(lst[1:])"},{"question":"Write a function to find the sum of all unique numbers in a list. How can we handle duplicates and ensure each number is counted only once?","solution":"def sum_of_unique_numbers(numbers): Returns the sum of all unique numbers in the list. return sum(set(numbers))"},{"question":"Write a function to find the two missing numbers in an array of integers from 1 to n.","solution":"def find_missing_numbers(arr): Returns the two missing numbers in an array containing integers from 1 to n with two numbers missing. n = len(arr) + 2 full_sum = n * (n + 1) // 2 actual_sum = sum(arr) pivot = (full_sum - actual_sum) // 2 total_left_xor = total_right_xor = xor1 = xor2 = 0 for number in range(1, n + 1): if number <= pivot: total_left_xor ^= number else: total_right_xor ^= number for number in arr: if number <= pivot: xor1 ^= number else: xor2 ^= number missing1 = total_left_xor ^ xor1 missing2 = total_right_xor ^ xor2 return missing1, missing2"},{"question":"Write a function to find the second largest number in an integer array. If the array has less than two elements, return \`null\`. Also, handle cases where there are duplicate values in the array.","solution":"def second_largest(numbers): Returns the second largest number in the given list of numbers. If the list has less than two unique elements, returns None. if len(numbers) < 2: return None first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a function to add two numbers and return the result.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function to extract all prime numbers from an array and return them in a new array.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def extract_primes(arr): Extracts all prime numbers from the given array and returns them in a new array. return [num for num in arr if is_prime(num)]"},{"question":"Write a function to calculate the factorial of a given number. The function should be efficient and handle large numbers. Use Python's \`math\` library to achieve this.","solution":"import math def factorial(n): Returns the factorial of the given number n using Python's math library. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") return math.factorial(n)"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers. This is known as the Max Subarray Problem. The function should return the maximum sum.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the one-dimensional array of numbers. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the minimum number of coins needed to make up a given amount. You can use coins of denominations [1, 5, 10, 25].","solution":"def min_coins(amount): Returns the minimum number of coins needed to make up the given amount. Coins of denominations [1, 5, 10, 25] are used. denominations = [25, 10, 5, 1] num_coins = 0 for coin in denominations: num_coins += amount // coin amount = amount % coin return num_coins"},{"question":"Write a function to find all prime factors of a given number, including the duplicates.","solution":"def prime_factors(n): Returns a list of all prime factors of n, including duplicates. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Write a function to compute the Binomial coefficient C(n, k). The function should be efficient. Can you provide a Python implementation?","solution":"def binomial_coefficient(n, k): Computes the Binomial Coefficient C(n, k) if k > n: return 0 if k == 0 or k == n: return 1 k = min(k, n - k) # Take advantage of symmetry c = 1 for i in range(k): c = c * (n - i) // (i + 1) return c"},{"question":"Write a function to calculate the number of nodes on a singly linked list. The function should return the count of nodes in the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def count_nodes(head): Returns the number of nodes in a singly linked list. :param head: The head node of the singly linked list. :return: The count of nodes in the list. count = 0 current = head while current: count += 1 current = current.next return count"},{"question":"Write a function to return the sum of all odd and even numbers in a given list of integers. The function should return a dictionary with two keys: 'odd_sum' and 'even_sum', corresponding to the sum of odd and even numbers in the list, respectively.","solution":"def sum_odd_even(numbers): Returns the sum of odd and even numbers in a given list of integers. The result is a dictionary with 'odd_sum' and 'even_sum' as keys. Args: numbers (list): List of integers. Returns: dict: Dictionary with keys 'odd_sum' and 'even_sum'. result = {'odd_sum': 0, 'even_sum': 0} for num in numbers: if num % 2 == 0: result['even_sum'] += num else: result['odd_sum'] += num return result"},{"question":"Write a function to determine the number of days in a given month. The function should take three parameters: the month (1 for January, 2 for February, and so on, up to 12 for December), year, and whether the year is a leap year (true if it is a leap year, false otherwise).","solution":"def days_in_month(month, year, is_leap_year): Returns the number of days in a given month for a specified year. Args: month (int): Month in numeric form (1 = January, ..., 12 = December). year (int): Year (four-digit representation). is_leap_year (bool): Indicator if the year is a leap year. Returns: int: Number of days in the specified month. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") # Days in each month [ignored index 0 for simplicity] days_in_each_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if month == 2 and is_leap_year: return 29 return days_in_each_month[month]"},{"question":"Write a function to calculate the total amount of a bill after adding a sales tax to it. The sales tax rate is 7%.","solution":"def calculate_total_with_tax(bill_amount): Returns the total amount of the bill after adding a sales tax rate of 7%. Parameters: bill_amount (float): The original amount of the bill. Returns: float: The total amount of the bill after adding the sales tax. sales_tax_rate = 0.07 total_amount = bill_amount * (1 + sales_tax_rate) return round(total_amount, 2)"},{"question":"Write a function to check if all elements in a list are unique. If any element is repeated, return \\"Duplicate exists\\". If all elements are unique, return \\"Unique elements only\\".","solution":"def check_unique_elements(lst): Returns whether all elements in the list are unique or not. Args: lst (list): The list to check for uniqueness. Returns: str: \\"Duplicate exists\\" if any element is repeated, \\"Unique elements only\\" if all elements are unique. if len(lst) != len(set(lst)): return \\"Duplicate exists\\" else: return \\"Unique elements only\\""},{"question":"Write a function to find the minimum element in a binary search tree (BST). How would you approach this problem in Python?","solution":"class TreeNode: A tree node class for representing nodes in a binary search tree. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_minimum(root): Find the minimum element in a binary search tree (BST). Args: root (TreeNode): The root node of the BST. Returns: int or None: The value of the minimum element in the BST or None if the tree is empty. if root is None: return None current = root while current.left is not None: current = current.left return current.value"},{"question":"Write a function to find the maximum depth of a nested dictionary. The function should take a dictionary as input and return the maximum depth.","solution":"def max_depth(d): Recursively finds the maximum depth of a nested dictionary. Parameters: d (dict): The dictionary for which the maximum depth is being calculated. Returns: int: The maximum depth of the dictionary. if not isinstance(d, dict) or not d: return 0 return 1 + max(max_depth(value) for value in d.values())"},{"question":"Write a function to remove elements from an array based on their frequency. Specifically, write a function that takes an array \`arr[]\` of length \`N\` and an integer \`K\`, and remove the elements from the array whose frequency is larger than \`K\`. If more than one element has the same highest frequency greater than \`K\`, remove all such elements.","solution":"def remove_elements_by_frequency(arr, K): Removes elements from an array arr[] whose frequency is larger than K. from collections import Counter # Count the frequency of each element in arr freq_counter = Counter(arr) # Filter out the elements whose frequency is greater than K result = [x for x in arr if freq_counter[x] <= K] return result"},{"question":"Write a function to detect a cycle in a linked list. If a cycle is detected, return true; otherwise, return false. Use the two-pointer technique.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Detects if a linked list has a cycle using the two-pointer technique. :param head: ListNode - The head of the linked list. :return: bool - True if a cycle is detected, False otherwise. if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function to determine whether an integer is a palindrome. An integer is considered a palindrome when it reads the same backward as forward. The function should handle all edge cases, such as negative numbers, which are not considered palindromes.","solution":"def is_palindrome(number): Check if the given integer is a palindrome. :param number: Integer to check :return: True if the integer is a palindrome, otherwise False if number < 0: return False original = number reversed_number = 0 while number > 0: digit = number % 10 reversed_number = reversed_number * 10 + digit number = number // 10 return original == reversed_number"},{"question":"Write a function to reverse the words in a sentence. Each word is separated by a single space. The function should also trim leading and trailing spaces. Additionally, ensure that there is only one space between words in the reversed sentence.","solution":"def reverse_words(sentence): Reverses the words in a sentence. Each word is separated by a single space. Trims leading and trailing spaces and ensures only one space between words. Args: sentence (str): The sentence to reverse. Returns: str: The sentence with words reversed. # Trim leading and trailing spaces and split the sentence by spaces words = sentence.strip().split() # Reverse the list of words and join with a single space reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Write a function to find the missing number in an array of integers where the numbers range from 1 to n, where n is one less than the length of the array.","solution":"def find_missing_number(arr): Given an array of integers ranging from 1 to n (where n is one less than the length of the array), this function returns the missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a function to parse a given string and return a dictionary with the count of each vowel (a, e, i, o, u) and the count of consonants. The string may contain uppercase and lowercase letters, and spaces.","solution":"def count_vowels_and_consonants(s): Parses the given string and returns a dictionary with the count of each vowel (a, e, i, o, u) and the count of consonants. Parameters: s (str): The input string. Returns: dict: A dictionary with keys 'a', 'e', 'i', 'o', 'u', and 'consonants'. vowels = \\"aeiou\\" count = {v: 0 for v in vowels} count['consonants'] = 0 for char in s.lower(): if char in vowels: count[char] += 1 elif char.isalpha(): count['consonants'] += 1 return count"},{"question":"Write a function to implement the selection sort algorithm. Selection sort is a simple comparison-based algorithm. It works by repeatedly finding the minimum element from the unsorted part of the list and putting it at the beginning. The algorithm maintains two subarrays in a given array.","solution":"def selection_sort(arr): Implements the selection sort algorithm to sort a list of elements. n = len(arr) for i in range(n): # Assume the minimum element is the first element min_index = i # Iterate through the unsorted part of the array for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Write a function to find the maximum point in a list of numbers.","solution":"def find_max_point(numbers): Returns the maximum point in a list of numbers. :param numbers: List of numbers :return: The maximum number in the list if not numbers: return None return max(numbers)"},{"question":"Write a function to process an image and return the cell coordinates where there is text based on the YAML configuration. The function should ignore any comments in the YAML configuration and handle different image sizes.","solution":"import yaml def process_image(image, yaml_config_path): Processes an image and returns the cell coordinates where there is text based on the YAML configuration. Args: - image: The image to process (Assuming a 2D list of pixels values for simplicity in this example). - yaml_config_path: Path to the YAML configuration file. Returns: - List of tuples representing coordinates (row, col) where text is found. with open(yaml_config_path, 'r') as file: config = yaml.safe_load(file) text_coordinates = [] # Ignoring the comments and reading the actual configuration for cell, details in config['cells'].items(): if 'text' in details and details['text']: coordinates = tuple(map(int, cell.split(','))) text_coordinates.append(coordinates) return text_coordinates"},{"question":"Write a function to rotate an array by \`n\` positions to the right. The array should be rotated in-place, meaning the original array should be modified and no additional space should be used beyond what is needed for the interim calculations.","solution":"def rotate_array(arr, n): Rotates the array by 'n' positions to the right in-place. Parameters: arr (list): The list of elements to be rotated. n (int): Number of positions to rotate the array. if not arr or n <= 0: return length = len(arr) n = n % length # In case n is larger than the length of the array arr[:] = arr[-n:] + arr[:-n]"},{"question":"Write a function to find the maximum with given set of integers. Implement it in Python and take an integer list as input.","solution":"def find_max(numbers): Returns the maximum number in the given list of integers. If the list is empty, raises a ValueError. if not numbers: raise ValueError(\\"The list is empty\\") return max(numbers)"},{"question":"Write a function to generate all permutations of a given string using recursion.","solution":"def generate_permutations(s): Generate all permutations of a given string using recursion. Parameters: s (str): The string to generate permutations for. Returns: List[str]: A list of all permutations of the string. if len(s) == 1: return [s] # List to store all permutations permutations = [] # Iterate over the string, using each character as the starting character for i in range(len(s)): # Form a string by excluding the current character remaining = s[:i] + s[i+1:] # Generate all permutations of the remaining string for perm in generate_permutations(remaining): # Concatenate the current character with permutations of the remaining string permutations.append(s[i] + perm) return permutations"},{"question":"Write a function to calculate and return the median of three numbers. The function should take three integer parameters and return the middle value.","solution":"def median_of_three(a, b, c): Returns the median value of three integers a, b, and c. values = [a, b, c] values.sort() return values[1]"},{"question":"Write a function to add a new key-value pair to an existing dictionary in Python, where the key is the user's name and the value is the user's age. The function should take two arguments: the existing dictionary and a tuple containing the user's name and age.","solution":"def add_user_info(user_dict, user_info): Adds a new key-value pair to an existing dictionary. Parameters: user_dict (dict): The existing dictionary to which the new key-value pair will be added. user_info (tuple): A tuple containing the user's name (str) and age (int). Returns: dict: The updated dictionary with the new key-value pair. user_name, user_age = user_info user_dict[user_name] = user_age return user_dict"},{"question":"Write a function to generate a Fibonacci sequence with a given length \`n\`. The function should return a list containing the Fibonacci sequence up to \`n\` elements. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two numbers.","solution":"def generate_fibonacci_sequence(n): Generate a Fibonacci sequence of length n. Args: n (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to n elements. if n <= 0: return [] fib_sequence = [0] * n if n > 0: fib_sequence[0] = 0 if n > 1: fib_sequence[1] = 1 for i in range(2, n): fib_sequence[i] = fib_sequence[i - 1] + fib_sequence[i - 2] return fib_sequence"},{"question":"Write a function to generate the powers of two up to a given limit. The function should take an integer \`N\` as its parameter and return a list containing the powers of two from 2^0 up to 2^N-1.","solution":"def generate_powers_of_two(N): Generates the powers of two up to 2^(N-1). Parameters: N (int): The upper limit for the power index. Returns: List[int]: A list containing powers of two from 2^0 up to 2^(N-1). return [2**i for i in range(N)]"},{"question":"Write a function to convert a string representing a decimal number to its integer equivalent. You may not use any pre-existing function to perform this conversion. You should handle both positive and negative integers.","solution":"def string_to_integer(s): Convert a string representing a decimal number to its integer equivalent. Handles both positive and negative integers. Args: s (str): The string to be converted. Returns: int: The integer representation of the string. if len(s) == 0: raise ValueError(\\"Empty string cannot be converted to an integer\\") negative = False if s[0] == '-': negative = True s = s[1:] elif s[0] == '+': s = s[1:] result = 0 for char in s: if not char.isdigit(): raise ValueError(f\\"Invalid character '{char}' found in input string\\") result = result * 10 + (ord(char) - ord('0')) if negative: result = -result return result"},{"question":"Write a function to remove duplicates from an array of integers and return the length of the array after removing duplicates. The function should not use any built-in functions that directly remove duplicates, such as set().","solution":"def remove_duplicates(nums): Removes duplicates from an array of integers in place and returns the length of the array after removing duplicates. The function assumes that the input list is not sorted. if not nums: return 0 # Use a dictionary to keep track of seen numbers seen = {} index = 0 for num in nums: if num not in seen: seen[num] = True nums[index] = num index += 1 return index"},{"question":"Write a function to find the minimum length of a contiguous subarray with a sum at least equal to a target value \`s\`. If no such subarray exists, return 0.","solution":"def min_subarray_len(s, nums): Finds the minimum length of a contiguous subarray with a sum at least equal to s. If no such subarray exists, returns 0. n = len(nums) left = 0 current_sum = 0 min_length = float('inf') for right in range(n): current_sum += nums[right] while current_sum >= s: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return 0 if min_length == float('inf') else min_length"},{"question":"Write a function to rotate a 2D list (matrix) clockwise by 90 degrees.","solution":"def rotate_matrix(matrix): Rotates a 2D list (matrix) clockwise by 90 degrees. return [list(row) for row in zip(*matrix[::-1])]"},{"question":"Write a function to find the maximum sum of a subsequence in a string where no two characters are the same. The function should take a single string as an argument and return the maximum sum of such subsequences.","solution":"def max_sum_unique_subsequence(s): Returns the maximum sum of a subsequence in the string where no two characters are the same. Each character holds its ASCII value as weight. unique_chars = set(s) return sum(ord(char) for char in unique_chars)"},{"question":"Write a function to remove all special characters from a string, leaving only alphanumeric characters and spaces. You should not remove spaces but should preserve any existing spaces in the string.","solution":"import re def remove_special_characters(s): Removes all special characters from the input string, leaving only alphanumeric characters and spaces. Args: s (str): The input string. Returns: str: The cleaned string with only alphanumeric characters and spaces. return re.sub(r'[^a-zA-Z0-9 ]', '', s)"},{"question":"Write a function to find the second smallest number in an array of integers. The array will contain at least two different numbers. The function should return the second smallest number to the caller.","solution":"def second_smallest(nums): Returns the second smallest number in an array of integers. The array will contain at least two different numbers. if len(nums) < 2: raise ValueError(\\"Array must contain at least two different numbers\\") first, second = float('inf'), float('inf') for num in nums: if num < first: first, second = num, first elif first < num < second: second = num return second"},{"question":"Write a function to return the value of the nth node from the end of a singly linked list. The function should be called \`nthFromEnd\` and it should take two parameters: the head of the linked list and an integer \`n\`. The function should return the value of the nth node from the end of the list. If the list is too short, return -1.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def nthFromEnd(head, n): Returns the value of the nth node from the end of a singly linked list. If the list is too short, return -1. first = head second = head # advance first pointer by n steps for _ in range(n): if not first: return -1 first = first.next # move both pointers until first reaches the end while first: first = first.next second = second.next return second.val if second else -1"},{"question":"Write a function to convert a number to binary representation and return it as a string. If the number is 0, the function should return the string \\"0\\". If the number is negative, the function should return the string \\"-\\" followed by its binary representation for the positive counterpart of the number.","solution":"def to_binary(n): Converts a number to its binary representation as a string. If the number is 0, returns \\"0\\". If the number is negative, returns \\"-\\" followed by the binary representation of the positive counterpart. if n == 0: return \\"0\\" elif n < 0: return \\"-\\" + bin(-n)[2:] else: return bin(n)[2:]"},{"question":"Write a function to solve the following problem: Given an integer array \`arr\`, return the maximum product of three numbers from the array.","solution":"def maximum_product(arr): Returns the maximum product of three numbers from the array. if len(arr) < 3: raise ValueError(\\"Array must have at least three elements\\") arr.sort() # The maximum product can be the product of the three largest values, # or the product of the two smallest values and the largest value. max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"Write a function to find the smallest number greater than a given number in Python that has the same set of digits. If such a number does not exist, return the smallest number that can be formed from the digits.","solution":"def next_permutation(num): Finds the smallest number greater than a given number that has the same set of digits. If such a number does not exist, it returns the smallest number that can be formed from the digits. :param num: The original number :type num: int :return: The next permutation or the smallest number possible with the same digits :rtype: int digits = list(str(num)) n = len(digits) # Step 1: Find the largest index k such that digits[k] < digits[k + 1]. If no such index exists, the permutation is the last permutation. k = -1 for i in range(n - 1): if digits[i] < digits[i + 1]: k = i if k == -1: # This means the digits are in descending order # Return the smallest number possible with these digits digits.sort() return int(''.join(digits)) # Step 2: Find the largest index l greater than k such that digits[k] < digits[l]. l = -1 for i in range(k + 1, n): if digits[k] < digits[i]: l = i # Step 3: Swap the value of digits[k] with that of digits[l]. digits[k], digits[l] = digits[l], digits[k] # Step 4: Reverse the sequence from digits[k + 1] up to including the final element digits[n]. digits = digits[:k + 1] + digits[k + 1:][::-1] return int(''.join(digits))"},{"question":"Write a function to find the next lexicographical permutation of a provided set of numbers. If such a permutation does not exist, return the original set sorted in ascending order.","solution":"def next_permutation(nums): Modify the list of numbers to its next lexicographical permutation. If no such permutation exists, return the list sorted in ascending order. n = len(nums) if n <= 1: return nums # Step 1: Find the largest index k such that nums[k] < nums[k + 1]. If no such index exists, return sorted array. k = n - 2 while k >= 0 and nums[k] >= nums[k + 1]: k -= 1 if k == -1: nums.sort() return nums # Step 2: Find the largest index l greater than k such that nums[k] < nums[l]. l = n - 1 while l > k and nums[k] >= nums[l]: l -= 1 # Step 3: Swap the value of nums[k] with that of nums[l]. nums[k], nums[l] = nums[l], nums[k] # Step 4: Reverse the sequence from nums[k + 1] up to and including the final element nums[n - 1]. nums[k + 1:] = reversed(nums[k + 1:]) return nums"},{"question":"Write a function to add 1 to the last element of a list in Python. If the list is empty, the function should return an empty list.","solution":"def add_one_to_last_element(lst): Adds 1 to the last element of the list. If the list is empty, returns an empty list. if not lst: return [] lst[-1] += 1 return lst"},{"question":"Write a function to check if the parentheses in a given string are balanced. The string can contain parentheses '()', curly braces '{}', and square brackets '[]'.","solution":"def is_balanced(s): Returns True if the parentheses in the string are balanced, else False. :param str s: The input string containing parentheses, curly braces, and square brackets. :return: A boolean indicating if the input string is balanced. stack = [] matching_parentheses = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False return stack == []"},{"question":"Write a function to identify the first occurrence of a repeating character in a string. The function should return the first repeating character. If no repeating character is found, it should return an empty string.","solution":"def first_repeating_char(s): Returns the first repeating character in the string s. If no repeating character is found, it returns an empty string. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"\\""},{"question":"Write a function to print all the prime numbers between 1 to N. How would you approach this problem and write the code in Python?","solution":"def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_up_to_n(N): Returns a list of all prime numbers between 1 and N. return [num for num in range(2, N + 1) if is_prime(num)]"},{"question":"Write a function to find the minimum number of coins needed to make up a given amount of money using only coins of denominations 1, 3, and 5. The function should return the minimum number of coins required, and if it's not possible to make the amount using these coins, it should return -1.","solution":"def min_coins(amount): Returns the minimum number of coins needed to make up the given amount using coins of denominations 1, 3, and 5. :param amount: int, the amount of money :return: int, the minimum number of coins required to make the amount, or -1 if not possible # Create a list to store the minimum coins for all amounts from 0 to the given amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: no coins are needed to make amount 0 # List of available coin denominations coins = [1, 3, 5] # Fill the dp list for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still infinity, it means it's not possible to make the amount return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to implement a binary search. Binary search is an algorithm where we are searching for a specific element in a sorted list by repeatedly dividing the list in half. Here, you are provided an array sorted in increasing order and the target element. The function should return the index of the target if found, returning -1 if the target is not in the array.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target element. Returns the index of the target if found, else returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to check if a given integer n is a perfect square of m, where 0 <= m <= n. The function should return a boolean value. If n is a perfect square of m, return True; otherwise, return False.","solution":"import math def is_perfect_square(n): Check if the given integer n is a perfect square of some integer m (0 <= m <= n). if n < 0: return False m = math.isqrt(n) return m * m == n"},{"question":"Write a function to print all the prime factors of a given number. A prime factor is a factor that is a prime number. For example, the prime factors of 18 are 2 and 3.","solution":"def prime_factors(n): Prints all the prime factors of a given number n. factors = [] # Divide by 2 until it's not divisible while n % 2 == 0: factors.append(2) n //= 2 # Check for odd factors from 3 upwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i # If n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a function to calculate the scalar triple product (also known as the scalar product or volume of the parallelepiped) of three vectors A, B, and C in 3-dimensional space.","solution":"import numpy as np def scalar_triple_product(A, B, C): Calculate the scalar triple product of three vectors A, B, and C. Parameters: A (list or np.array): 3-dimensional vector B (list or np.array): 3-dimensional vector C (list or np.array): 3-dimensional vector Returns: float: Scalar triple product of A, B, and C A = np.array(A) B = np.array(B) C = np.array(C) return np.dot(A, np.cross(B, C))"},{"question":"Write a function to calculate the new price after applying a discount and adding shipping fees. Here's a general idea of the solution, but I need more specific steps to understand it better.","solution":"def calculate_final_price(original_price, discount_percentage, shipping_fee): Calculate the final price after applying a discount and adding shipping fees. :param original_price: The original price of the product. :param discount_percentage: The discount percentage to be applied (e.g., 20 for 20%). :param shipping_fee: The shipping fee to be added to the discounted price. :return: The final price. if original_price < 0 or discount_percentage < 0 or shipping_fee < 0: raise ValueError(\\"Prices and discount percentage must be non-negative\\") discount_amount = original_price * (discount_percentage / 100) discounted_price = original_price - discount_amount final_price = discounted_price + shipping_fee return final_price"},{"question":"Write a function to find the number of words in a string. A word is defined as a sequence of characters separated by space.","solution":"def count_words(s): Returns the number of words in the string s. A word is defined as a sequence of characters separated by spaces. return len(s.split())"},{"question":"Write a function to return the common elements in two lists.","solution":"def common_elements(list1, list2): Returns a list of common elements in both list1 and list2. return list(set(list1) & set(list2))"},{"question":"Write a function to remove all duplicates from a given string while preserving the order of characters.","solution":"def remove_duplicates(s): Remove all duplicates from a given string while preserving the order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to remove duplicates from a list \`[1, 2, 2, 3, 4, 5, 5]\` and return a new list without any duplicates.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list and returns a new list without any duplicates. return list(set(input_list))"},{"question":"Write a function to find all the prime factors of a given number. For example, if the input number is \`18\`, the function should return \`[2, 3, 3]\` because the prime factors of \`18\` are \`2\` and \`3\` (3 times).","solution":"def prime_factors(n): Returns all the prime factors of a given number \`n\` as a list. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n = n // divisor divisor += 1 return factors"},{"question":"Write a function to find the two numbers appearing only once in an array where all other elements appear exactly twice. Can you do this with linear time complexity and constant space complexity? If yes, how?","solution":"def single_number(nums): Returns the two numbers that appear only once in an array where all other elements appear exactly twice. # Step 1: XOR all the numbers to get the XOR of the two unique numbers xor_result = 0 for num in nums: xor_result ^= num # Step 2: Find a bit that is set in xor_result (dividing the numbers into two groups) diff_bit = xor_result & -xor_result # Step 3: XOR the numbers in each group to find the unique numbers num1, num2 = 0, 0 for num in nums: if num & diff_bit: num1 ^= num else: num2 ^= num return [num1, num2]"},{"question":"Write a function to swap the values of two integers without using a temporary variable. How can this be achieved in Python?","solution":"def swap_values(a, b): Swaps the values of a and b without using a temporary variable. a, b = b, a return a, b"},{"question":"Write a function to find the maximum element in a one-dimensional array.","solution":"def find_max(arr): Returns the maximum element in a one-dimensional array. Parameters: arr (list): A list of numbers Returns: int/float: The maximum number in the list if not arr: raise ValueError(\\"Array cannot be empty\\") max_element = arr[0] for num in arr: if num > max_element: max_element = num return max_element"},{"question":"Write a function to sort a list of integers. Please provide the function in Python.","solution":"def sort_integers(lst): Returns a sorted list of integers. Parameters: lst (list): List of integers to sort. Returns: list: Sorted list of integers. return sorted(lst)"},{"question":"Write a function to find the minimum number of coins needed to make up a given amount using a list of coin denominations.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make up the given amount. :param coins: List of coin denominations. :param amount: The total amount to form using the coins. :return: Minimum number of coins needed to form the given amount, or -1 if it is not possible. # Initialize a list to keep track of the minimum number of coins for each amount dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to convert a binary number (as a string) to its decimal equivalent. For example, the binary number \\"1011\\" should be converted to the decimal number 11.","solution":"def binary_to_decimal(binary_str): Converts a binary number (as a string) to its decimal equivalent. Parameters: binary_str (str): A string representing a binary number. Returns: int: The decimal equivalent of the binary number. return int(binary_str, 2)"},{"question":"Write a function to replace all occurrences of a character in a string with another character using recursion.","solution":"def replace_char_recursive(s, old_char, new_char): Replaces all occurrences of old_char in the string s with new_char using recursion. # If the string is empty, return empty string if s == \\"\\": return \\"\\" # Check if the first character is the one to be replaced first_char = new_char if s[0] == old_char else s[0] # Recursive call for the rest of the string return first_char + replace_char_recursive(s[1:], old_char, new_char)"},{"question":"Write a function to calculate the sum of all numbers up to a given number using recursion.","solution":"def sum_upto(n): Returns the sum of all numbers from 1 to n using recursion. if n <= 0: return 0 return n + sum_upto(n - 1)"},{"question":"Write a function to calculate the nth Fibonacci number using a recursive approach in Python. The function should handle large numbers efficiently by using memoization.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using a recursive approach with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to find the product of all numbers in a list using recursion.","solution":"def product_of_list(lst): Returns the product of all numbers in the list using recursion. # Base case: if the list is empty, return 1 (multiplicative identity) if not lst: return 1 # Recursive case: multiply the first element by the product of the rest of the list return lst[0] * product_of_list(lst[1:])"},{"question":"Write a function to convert a given string to a list of integers. Each integer in the list represents the ASCII value of the corresponding character in the string. If the string contains characters that are not valid ASCII characters, the function should ignore those characters and proceed with the rest of the string.","solution":"def string_to_ascii_list(s): Converts a given string to a list of ASCII values. Each integer in the list represents the ASCII value of the corresponding character in the string. Non-ASCII characters are ignored. return [ord(char) for char in s if ord(char) < 128]"},{"question":"Write a function to find the first unique character in a given string. If no such character exists, return -1. The function should be case-sensitive.","solution":"def first_unique_char(s): Returns the index of the first unique character in a string. If there is no unique character, returns -1. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for i, char in enumerate(s): if char_count[char] == 1: return i return -1"},{"question":"Write a function to traverse a binary tree in preorder and collect the values into an array. Preorder traversal visits the root node first, then the left subtree, and finally the right subtree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def preorder_traversal(root): Perform a preorder traversal of a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: List[int]: List of node values in preorder traversal order. result = [] def traverse(node): if node: result.append(node.value) traverse(node.left) traverse(node.right) traverse(root) return result"},{"question":"Write a function to calculate the sum of all elements in a circularly linked list. A circularly linked list is a linked list where the last node points to the first node, forming a loop. The list has a header node that does not store any data but points to the first data node.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None class CircularLinkedList: def __init__(self): self.header = Node() # Header node that does not store any data def append(self, data): new_node = Node(data) if not self.header.next: self.header.next = new_node new_node.next = new_node # Point to itself, single node circular else: temp = self.header.next while temp.next != self.header.next: temp = temp.next temp.next = new_node new_node.next = self.header.next def sum(self): if not self.header.next: return 0 total_sum = 0 current = self.header.next while True: total_sum += current.data current = current.next if current == self.header.next: break return total_sum"},{"question":"Write a function to calculate the longest common substring of two strings.","solution":"def longest_common_substring(str1, str2): Returns the longest common substring between two given strings. m = len(str1) n = len(str2) longest = 0 end_position_str1 = 0 # Create a 2D array to store lengths of longest common suffixes of substrings. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build dp table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest: longest = dp[i][j] end_position_str1 = i else: dp[i][j] = 0 # longest common substring is from end_position_str1 - longest to end_position_str1 in str1 longest_common_substr = str1[end_position_str1 - longest : end_position_str1] return longest_common_substr"},{"question":"Write a function to generate all subsets of a given set. How would you approach this problem?","solution":"def generate_subsets(s): Generates all subsets of a given set. :param s: A set of unique integers. :return: A list containing all the subsets of the set. if not s: return [set()] subsets = [] for elem in s: remaining_elements = s - {elem} for subset in generate_subsets(remaining_elements): subsets.append(subset) subsets.append(subset | {elem}) break # To prevent multiple iterations for each element return subsets"},{"question":"Write a function to decode a run-length encoded list. The encoded list is a list where elements appear consecutively. The function should take the encoded list as input and return the decoded list.","solution":"def decode_run_length(encoded_list): Decodes a run-length encoded list. Parameters: encoded_list (list): A run-length encoded list where elements appear consecutively. Returns: list: The decoded list. decoded_list = [] for count, value in encoded_list: decoded_list.extend([value] * count) return decoded_list"},{"question":"Write a function to check if a given number is an Armstrong number or not. An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.","solution":"def is_armstrong_number(n): Check if a number is an Armstrong number. An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. # Convert the number to string to easily iterate over digits digits = str(n) # Calculate the number of digits in the number num_digits = len(digits) # Compute the sum of each digit raised to the power of the number of digits total = sum(int(digit) ** num_digits for digit in digits) # Check if the computed sum is equal to the original number return total == n"},{"question":"Write a function to find the number and sum of all natural numbers within a given range. The function should take two positive integers \`start\` and \`end\` as parameters and return a tuple containing the count of numbers and their sum.","solution":"def count_and_sum_natural_numbers(start, end): Returns a tuple containing: - The count of natural numbers in the range [start, end] (inclusive) - The sum of these natural numbers. if start > end: return (0, 0) count = end - start + 1 sum_numbers = sum(range(start, end + 1)) return (count, sum_numbers)"},{"question":"Write a function to reverse the order of words in a given string \`s\`, such that the string returns with the first word as the last and the last word as the first. Do not use any built-in string reversal functions or methods in your solution.","solution":"def reverse_words(s): Reverses the order of words in a given string. Args: s (str): The input string to reverse. Returns: str: The string with the words in reversed order. words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to reverse a string in Python, ensuring to handle cases where the input is an integer or any other non-string datatype. Also, provide a function to verify the correctness of your solution with various test cases.","solution":"def reverse_string(s): If input is a string, returns the reversed string. If input is an integer or any other non-string datatype, it raises a ValueError. if isinstance(s, str): return s[::-1] else: raise ValueError(\\"Input must be a string\\")"},{"question":"Write a function to extract and print all the words from a string that start with a specific vowel ('a', 'e', 'i', 'o', 'u').","solution":"def extract_words_starting_with_vowel(text): Extracts and returns a list of words from the input string that start with a specific vowel ('a', 'e', 'i', 'o', 'u'). Parameters: text (str): The input string. Returns: list: A list of words starting with a vowel. vowels = {'a', 'e', 'i', 'o', 'u'} words = text.split() result = [word for word in words if word[0].lower() in vowels] return result"},{"question":"Write a function to find the sum of all the positive even numbers in a given list of integers.","solution":"def sum_positive_even(numbers): Returns the sum of all positive even numbers in the given list of integers. return sum(num for num in numbers if num > 0 and num % 2 == 0)"},{"question":"Write a function to compute the volume of a sphere given its radius. For simplicity, assume the formula to calculate the volume of a sphere is V = 4/3 * π * r^3.","solution":"import math def volume_of_sphere(radius): Returns the volume of a sphere given its radius. V = 4/3 * π * r^3 if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return (4/3) * math.pi * (radius ** 3)"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should also handle large numbers efficiently by using memoization to store previously calculated results.","solution":"def factorial(n, memo={}): Returns the factorial of a given number n using recursion and memoization. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 if n not in memo: memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Write a function to extract the largest number from a list of integers. If the list is empty, the function should return None. Additionally, write unit tests for this function using Python's unittest framework.","solution":"def largest_number(numbers): Returns the largest number from a list of integers. If the list is empty, returns None. :param numbers: List of integers :return: Largest integer or None if the list is empty if not numbers: return None return max(numbers)"},{"question":"Write a function to convert a binary string to an integer. The binary string will only contain '0' and '1'.","solution":"def binary_to_integer(binary_string): Convert a binary string to an integer. Args: binary_string (str): A string representing a binary number, containing only '0' and '1'. Returns: int: The integer representation of the binary string. return int(binary_string, 2)"},{"question":"Write a function to multiply two numbers without using the multiplication operator. You should only use bitwise operations and addition.","solution":"def bitwise_multiply(a, b): Multiplies two numbers using bitwise operations and addition. result = 0 negative = (a < 0) != (b < 0) a = abs(a) b = abs(b) while b > 0: if b & 1: # Check if the current bit is set in b result += a a <<= 1 # Left shift a to multiply by 2 b >>= 1 # Right shift b to divide by 2 if negative: result = -result return result"},{"question":"Write a function to calculate the sum of all numbers from 1 to n in Python. You should include error handling for cases where the input is not a positive integer.","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n. Raises ValueError if the input is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") return n * (n + 1) // 2"},{"question":"Write a function to simulate the flipping of a coin 1000 times and record the proportion of heads and tails. Additionally, calculate the average proportion of heads across these trials.","solution":"import random def flip_coin(trials=1000): Flips a coin \`trials\` times and records the proportion of heads and tails. Returns: - proportion_heads: float representing the proportion of heads - proportion_tails: float representing the proportion of tails - average_proportion_heads: float representing the average proportion of heads across trials heads_count = 0 for _ in range(trials): if random.choice(['heads', 'tails']) == 'heads': heads_count += 1 tails_count = trials - heads_count proportion_heads = heads_count / trials proportion_tails = tails_count / trials # Calculate the average proportion of heads across all trials average_proportion_heads = heads_count / trials return proportion_heads, proportion_tails, average_proportion_heads"},{"question":"Write a function to convert a given prefix expression into an infix expression. Prefix expressions are operators followed by their operands. For example, the prefix expression \\"+ * 3 4\\" represents the expression ( (3 * 4) + 5 ).","solution":"def prefix_to_infix(prefix_expr): Convert a given prefix expression into an infix expression. Arguments: prefix_expr: A string representing a prefix expression. Returns: A string representing the corresponding infix expression. tokens = prefix_expr.split() stack = [] # Process the prefix expression from right to left for token in reversed(tokens): if token in \\"+-*/\\": # Pop two operands from the stack operand1 = stack.pop() operand2 = stack.pop() # Form an infix expression infix = f\\"({operand1} {token} {operand2})\\" # Push the new infix expression back to the stack stack.append(infix) else: # It's an operand, push it to the stack stack.append(token) return stack[0] if stack else \\"\\""},{"question":"Write a function to find the binary representation of a given number in a string format.","solution":"def to_binary(n): Returns the binary representation of a given number n in string format. if n == 0: return \\"0\\" elif n < 0: raise ValueError(\\"Only non-negative integers are allowed.\\") else: return bin(n)[2:]"},{"question":"Write a function to print all the numbers from 0 to n-1, but replace multiples of 3 with the word \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with \\"FizzBuzz\\".","solution":"def fizz_buzz(n): Prints numbers from 0 to n-1 with the following replacements: - Replace multiples of 3 with \\"Fizz\\" - Replace multiples of 5 with \\"Buzz\\" - Replace multiples of both 3 and 5 with \\"FizzBuzz\\" result = [] for i in range(n): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to find the area of a triangle given three sides. If the sides do not form a valid triangle, the function should return -1. A valid triangle has the property that the sum of the lengths of any two sides must be greater than the length of the remaining side.","solution":"import math def area_of_triangle(a, b, c): Returns the area of a triangle given three sides a, b, and c. If the sides do not form a valid triangle, returns -1. # Check the triangle inequality theorem if a + b <= c or a + c <= b or b + c <= a: return -1 # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Write a function to calculate the maximum value of a knapsack with a maximum weight capacity, given a list of item weights and their corresponding values. The function should use dynamic programming to achieve this. The input includes the list of weights, the list of values, and the maximum capacity of the knapsack.","solution":"def knapsack(weights, values, capacity): Returns the maximum value that can be put in a knapsack of given capacity. weights: list of weights of items values: list of values of items capacity: maximum weight capacity of the knapsack n = len(weights) dp = [[0 for x in range(capacity + 1)] for x in range(n + 1)] for i in range(n + 1): for w in range(capacity + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][capacity]"},{"question":"Write a function to identify all connected components in an undirected graph. The graph is represented as an adjacency list.","solution":"def find_connected_components(graph): Identifies all connected components in an undirected graph. :param graph: A dictionary representing an adjacency list of the graph :return: A list of sets, each set contains the nodes in one of the connected components. def dfs(node, component): visited.add(node) component.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, component) visited = set() connected_components = [] for node in graph: if node not in visited: component = set() dfs(node, component) connected_components.append(component) return connected_components"},{"question":"Write a function to calculate the length of a given string in Python, without using the built-in len() function.","solution":"def string_length(s): Returns the length of the given string s without using the built-in len() function. count = 0 for _ in s: count += 1 return count"},{"question":"Write a function to resize a window to a given size in pixels. The function should take the window object and the new width and height as parameters. Ensure that the function adjusts the window size and handles any potential errors gracefully.","solution":"# This is a simulated window resizing function for illustrative purposes. def resize_window(window, new_width, new_height): Resizes the given window to the specified width and height. Parameters: window (object): The window object to be resized. new_width (int): The new width of the window in pixels. new_height (int): The new height of the window in pixels. Returns: bool: True if resizing was successful, False otherwise. try: if new_width < 0 or new_height < 0: raise ValueError(\\"Width and height must be non-negative\\") window.width = new_width window.height = new_height return True except Exception as e: print(f\\"An error occurred: {e}\\") return False"},{"question":"Write a function to implement a queue using a singly linked list in Python.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class Queue: def __init__(self): self.front = None self.rear = None self.size = 0 def enqueue(self, data): new_node = Node(data) if self.rear is None: self.front = self.rear = new_node else: self.rear.next = new_node self.rear = new_node self.size += 1 def dequeue(self): if self.front is None: return None temp = self.front self.front = self.front.next if self.front is None: self.rear = None self.size -= 1 return temp.data def peek(self): if self.front is not None: return self.front.data return None def is_empty(self): return self.size == 0 def get_size(self): return self.size"},{"question":"Write a function to find the minimum number of parentheses to remove so that the resulting string of parentheses is balanced.","solution":"def min_remove_to_make_valid(s): Returns the minimum number of parentheses to remove so that the resulting string is balanced. # Stack to keep track of validity stack = [] # Set to keep track of indexes to be removed indexes_to_remove = set() for i, char in enumerate(s): if char == '(': stack.append(i) elif char == ')': if stack: stack.pop() else: indexes_to_remove.add(i) # Append the remaining indexes in stack to indexes_to_remove while stack: indexes_to_remove.add(stack.pop()) return len(indexes_to_remove)"},{"question":"Write a function to find the reverse of a given integer in Python.","solution":"def reverse_integer(n): Returns the reverse of the given integer n. sign = -1 if n < 0 else 1 n *= sign reversed_n = int(str(n)[::-1]) return sign * reversed_n"},{"question":"Write a function to check if a given year is a leap year.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, False otherwise. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Write a function to find the second smallest number in a given list of integers. If the list does not have a second smallest number, return \`None\`.","solution":"def second_smallest(numbers): Returns the second smallest number in a list of integers. If the list does not have a second smallest number, return None. if len(numbers) < 2: return None first, second = float('inf'), float('inf') for number in numbers: if number < first: second = first first = number elif first < number < second: second = number return second if second != float('inf') else None"},{"question":"Write a function to find the length of the longest common prefix in an array of strings. The function should return the length of the prefix if it exists, otherwise, return 0. For example, given the array [\\"flower\\", \\"flow\\", \\"flight\\"], the longest common prefix is \\"fl\\", so the function should return 2.","solution":"def longest_common_prefix_length(strs): Finds the length of the longest common prefix in an array of strings. Args: strs (List[str]): List of strings. Returns: int: Length of the longest common prefix. 0 if no common prefix exists. if not strs: return 0 shortest = min(strs, key=len) for i in range(len(shortest)): for s in strs: if s[i] != shortest[i]: return i return len(shortest)"},{"question":"Write a function to reverse the order of elements in a list using recursion.","solution":"def reverse_list_recursively(lst): Reverses the order of elements in the list using recursion. Parameters: lst (list): The list to be reversed. Returns: list: The reversed list. if len(lst) == 0: return [] else: return [lst[-1]] + reverse_list_recursively(lst[:-1])"},{"question":"Write a function to find the largest number in an array using Python. The function should take an array of integers as input and return the largest integer in the array. If the array is empty, the function should return None. Use a simple loop to iterate through the array.","solution":"def find_largest_number(arr): Returns the largest number in an array. If the array is empty, returns None. if not arr: return None largest = arr[0] for num in arr: if num > largest: largest = num return largest"},{"question":"Write a function to find the maximum and minimum elements in an array of integers. The function should return a tuple containing the maximum and minimum values. The function should have a time complexity of O(n), where n is the length of the array.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum elements in an array of integers. Time complexity is O(n). if not arr: raise ValueError(\\"Array should not be empty\\") max_val = min_val = arr[0] for num in arr[1:]: if num > max_val: max_val = num elif num < min_val: min_val = num return (max_val, min_val)"},{"question":"Write a function to calculate the number of odd numbers within a given range [x, y].","solution":"def count_odds(x, y): Returns the count of odd numbers in the range [x, y]. count = 0 for num in range(x, y + 1): if num % 2 != 0: count += 1 return count"},{"question":"Write a function to find the next permutation of an array of integers. The next permutation is the array in its smallest lexicographical order following the given array. If such an array does not exist (the array is the largest permutation), return the smallest permutation (i.e., sorted in ascending order). The solution must be in-place, with a time complexity of O(n).","solution":"def next_permutation(nums): Transform list of integers into its next permutation in lexicographical order in-place. If such an arrangement is not possible, it rearranges it as the lowest possible order. :param nums: List[int] The list of integers to find the next permutation of. # Find the largest index k such that nums[k] < nums[k + 1] k = len(nums) - 2 while k >= 0 and nums[k] >= nums[k + 1]: k -= 1 if k == -1: nums.reverse() return # Find the largest index l greater than k such that nums[k] < nums[l] l = len(nums) - 1 while nums[k] >= nums[l]: l -= 1 # Swap the values of nums[k] and nums[l] nums[k], nums[l] = nums[l], nums[k] # Reverse the sequence from nums[k + 1] up to and including the final element nums[k + 1:] = reversed(nums[k + 1:])"},{"question":"Write a function to reverse a stack using a single additional stack. The function should take the original stack and return a new stack with the elements in reverse order.","solution":"def reverse_stack(original_stack): Reverses the given stack using a single additional stack. Parameters: original_stack (list): The original stack to be reversed. Returns: list: A new stack with the elements in reverse order. auxiliary_stack = [] while original_stack: auxiliary_stack.append(original_stack.pop()) return auxiliary_stack"},{"question":"Write a function to detect a cycle in a linked list. The linked list is represented as a list of integers where each integer represents a node's value in the list, and the list is circular if the last node points to another node in the list. The function should return \`True\` if a cycle is detected, otherwise \`False\`. If a cycle is detected, the function should also identify the starting node of the cycle. If a cycle is not detected, the function should return \`None\` for the starting node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detect_cycle(head): Detect a cycle in a linked list. If a cycle is detected, return True and the starting node of the cycle. If no cycle is detected, return False and None. slow, fast = head, head # Detect if the cycle exists using two pointers (Tortoise and Hare approach) while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected, now find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return True, slow return False, None"},{"question":"Write a function to sort an array of integers that only contains 0s, 1s, and 2s. The function should sort the array in a single pass using the counting sort algorithm. The array might contain any number of 0s, 1s, and 2s, and the function must handle all cases correctly.","solution":"def sort_012_array(arr): Sort an array of integers containing only 0s, 1s, and 2s using counting sort. count = [0] * 3 # Count occurrences of each number for num in arr: count[num] += 1 index = 0 for num in range(3): for _ in range(count[num]): arr[index] = num index += 1 return arr"},{"question":"Write a function to identify the most frequently occurring character in a given string. If there are multiple characters with the same highest frequency, return all of them in a list.","solution":"from collections import Counter def most_frequent_characters(s): Returns the list of the most frequently occurring characters in the given string. If multiple characters have the same highest frequency, all are returned in a list. if not s: return [] counter = Counter(s) max_freq = max(counter.values()) return [char for char, freq in counter.items() if freq == max_freq]"},{"question":"Write a function to calculate the sum of two integers in assembly language. The function should take two integer values as parameters and return the sum.","solution":"def sum_integers(a, b): Simulates the sum of two integers as if in an assembly language function. return a + b"},{"question":"Write a function to find the maximum sum of subtrees in a binary tree. The sum of a subtree consists of all nodes in that subtree, including the root node itself.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_max_subtree_sum(root): Finds the maximum sum of any subtree in a binary tree. :param root: TreeNode, the root of the binary tree. :return: int, the maximum sum of any subtree. def subtree_sum(node): if not node: return 0 left_sum = subtree_sum(node.left) right_sum = subtree_sum(node.right) total_sum = node.val + left_sum + right_sum nonlocal max_sum max_sum = max(max_sum, total_sum) return total_sum if not root: return 0 max_sum = float('-inf') subtree_sum(root) return max_sum"},{"question":"Write a function to find the maximum sum of any non-empty contiguous subarray within a given array of integers. How would you approach this problem, and what would be the function's signature?","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: Finds the maximum sum of any non-empty contiguous subarray. Args: arr (List[int]): A list of integers. Returns: int: The maximum sum of any non-empty contiguous subarray. if not arr: raise ValueError(\\"Array must not be empty\\") current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the longest palindromic substring within a given string, as per the LeetCode problem 5. Palindromic substrings include all characters in the substring, not just individual letters.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring within a given string s. n = len(s) if n <= 1: return s start, max_length = 0, 1 for i in range(1, n): even_palindrome = s[i - max_length: i + 1] odd_palindrome = s[i - max_length - 1: i + 1] if i - max_length - 1 >= 0 and odd_palindrome == odd_palindrome[::-1]: start = i - max_length - 1 max_length += 2 elif i - max_length >= 0 and even_palindrome == even_palindrome[::-1]: start = i - max_length max_length += 1 return s[start: start + max_length]"},{"question":"Write a function to remove all duplicates from an array of integers and return the new length. The order of the array elements can be changed, and it is not necessary to consider the elements beyond the new length. What algorithm approach should I take to solve this problem efficiently?","solution":"def remove_duplicates(arr): Removes all duplicates from an array of integers and returns the new length. The order of the elements can be changed, and it is not necessary to consider the elements beyond the new length. Params: - arr (list of int): The input array of integers. Returns: - int: The length of the array after duplicates have been removed. if not arr: return 0 unique_elements = set(arr) # Clear the original array and fill it with unique elements arr[:] = list(unique_elements) return len(arr)"},{"question":"Write a function to reverse the order of words in a given string. For example, if the input string is \\"hello world\\", the output should be \\"world hello\\". Additionally, ensure that the order of characters in each word remains unchanged. Note that leading, trailing, and extra spaces between words should be handled correctly.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The sentence to reverse the words of. Returns: str: A new sentence with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return \\" \\".join(reversed_words)"},{"question":"Write a function to calculate the total number of occurrences of words in a given list of strings. The function should return a dictionary where keys are the words and values are the counts of their occurrences.","solution":"def count_word_occurrences(strings): Given a list of strings, return a dictionary where the keys are words and the values are the counts of their occurrences. word_count = {} for string in strings: words = string.split() for word in words: word_count[word] = word_count.get(word, 0) + 1 return word_count"},{"question":"Write a function to calculate the sum of the digits of a given number. If the sum of the digits is greater than 9, the function should continue to sum the digits until a single digit is obtained. This process is known as finding the digital root of a number.","solution":"def digital_root(n): Calculate the digital root of a given number n. The digital root is the single digit obtained by repeatedly summing the digits of n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Write a function to return the index of the maximum value in a list. If there are multiple maximum values, return the index of the first occurrence.","solution":"def index_of_max_value(lst): Returns the index of the maximum value in the list. If there are multiple maximum values, returns the index of the first occurrence. if not lst: # Handle the case for an empty list return None max_value = max(lst) return lst.index(max_value)"},{"question":"Write a function to find the maximum product of two integers in an array. The array may contain both positive and negative numbers, and the integers could be the same or different. The solution should handle all possible edge cases, such as arrays with less than two elements or arrays with all negative numbers.","solution":"def max_product_of_two(nums): Returns the maximum product of two integers in the array nums. If the array has less than two elements, return None. if len(nums) < 2: return None # Initialize variables to store the two largest and two smallest numbers. max1 = max2 = float('-inf') min1 = min2 = float('inf') for num in nums: # Update the two largest numbers if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num # Update the two smallest numbers if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # The maximum product will either be the product of the two largest numbers # or the product of the two smallest numbers (since they can be negative) return max(max1 * max2, min1 * min2)"},{"question":"Write a function to find the largest element in an array using Python. The function should handle arrays of any size and return the largest element.","solution":"def find_largest_element(arr): Returns the largest element in the array. If the array is empty, returns None. if not arr: return None largest = arr[0] for element in arr: if element > largest: largest = element return largest"},{"question":"Write a function to find the minimum spanning tree (MST) of a weighted undirected graph using Kruskal's algorithm. The graph is represented as an adjacency matrix where the value at graph[i][j] is the weight of the edge between nodes i and j, zero if there is no edge.","solution":"class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal_mst(graph): n = len(graph) edges = [] for i in range(n): for j in range(i + 1, n): if graph[i][j] != 0: edges.append((graph[i][j], i, j)) edges.sort() mst_cost = 0 mst_edges = [] ds = DisjointSet(n) for weight, u, v in edges: if ds.find(u) != ds.find(v): ds.union(u, v) mst_cost += weight mst_edges.append((u, v, weight)) return mst_cost, mst_edges"},{"question":"Write a function to solve the classic \\"fizz buzz\\" problem. The function should print \\"fizz\\" for numbers divisible by 3, \\"buzz\\" for numbers divisible by 5, \\"fizzbuzz\\" for numbers divisible by both 3 and 5, and the number itself otherwise.","solution":"def fizz_buzz(n): Solves the fizz buzz problem for numbers from 1 to n. Prints \\"fizz\\" for numbers divisible by 3, \\"buzz\\" for numbers divisible by 5, \\"fizzbuzz\\" for numbers divisible by both 3 and 5, and the number itself otherwise. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"fizzbuzz\\") elif i % 3 == 0: result.append(\\"fizz\\") elif i % 5 == 0: result.append(\\"buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to recursively calculate the sum of all values in an entire tree. The tree will be represented as a nested JSON object, with each node containing a \\"value\\" key and a \\"children\\" key. Each \\"children\\" key will contain an array of child nodes, which can be empty or contain other nested nodes. The function should return the total sum of all \\"value\\" keys in the tree.","solution":"def sum_of_values(tree): Recursively calculates the sum of all values in a tree represented as a nested JSON object. Args: tree (dict): A dictionary representing the tree. Each node has a 'value' key and a 'children' key. Returns: int: The sum of all values in the tree. if not tree: return 0 total = tree.get('value', 0) for child in tree.get('children', []): total += sum_of_values(child) return total"},{"question":"Write a function to calculate the total number of vowels in a given string. The function should be case-insensitive.","solution":"def count_vowels(string): Returns the total number of vowels in the given string. The function is case-insensitive. vowels = \\"aeiou\\" string = string.lower() count = 0 for char in string: if char in vowels: count += 1 return count"},{"question":"Write a function to calculate the area of a rectangle given its width and height. The function should also handle the case where the width is larger than the height, using error handling to ensure the dimensions are valid. If either the width or height is negative, raise a ValueError. If either dimension is zero, raise a ValueError. If the width is larger than the height, raise a ValueError.","solution":"def calculate_rectangle_area(width, height): Calculates the area of a rectangle given its width and height. :param width: Width of the rectangle. :param height: Height of the rectangle. :return: Area of the rectangle. :raises ValueError: If width or height is less than or equal to zero, or if width is larger than height. if width <= 0 or height <= 0: raise ValueError(\\"Width and height must be positive numbers.\\") if width > height: raise ValueError(\\"Width cannot be larger than height.\\") return width * height"},{"question":"Write a function to decode a string that was encoded using the run-length encoding algorithm. The encoded string is represented as a string of digits and letters, where each digit represents the count of the preceding letter. For example, \\"3a2b\\" would be decoded as \\"aaabbb\\".","solution":"def decode_rle(encoded): Decodes a string that was encoded using the run-length encoding algorithm. Args: encoded (str): The encoded string, where each digit represents the count of the preceding letter. Returns: str: The decoded string. decoded = [] i = 0 while i < len(encoded): count = 0 while i < len(encoded) and encoded[i].isdigit(): count = count * 10 + int(encoded[i]) i += 1 if i < len(encoded): decoded.append(encoded[i] * count) i += 1 return ''.join(decoded)"},{"question":"Write a function to find the maximum product of a subarray within a given array. The function should return the maximum product that can be obtained from any subarray within the input array. The input array can contain both positive and negative numbers.","solution":"def max_product_subarray(nums): Returns the maximum product of any subarray within the given array. Parameters: nums (List[int]): List of integers representing the array. Returns: int: The maximum product of any subarray. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function to check if a given integer array contains any duplicate elements. The function should return \`true\` if any value appears at least twice in the array, and it should return \`false\` if every element is distinct.","solution":"def contains_duplicate(nums): Checks if there are any duplicate elements in the array. :param nums: List of integers. :return: True if there are duplicates, False otherwise. return len(nums) != len(set(nums))"},{"question":"Write a function to find the length of the longest increasing subsequence in a given array of integers. An increasing subsequence is a sequence of numbers where each subsequent number is greater than the previous one.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in a given array of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to perform binary search on a sorted array. What should the function handle when the array is empty or when the target is not found?","solution":"def binary_search(array, target): Performs binary search on a sorted array and returns the index of the target if found. Otherwise, returns -1. Parameters: array (list of int): A sorted list of integers. target (int): The target integer to search for. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(array) - 1 while left <= right: mid = (left + right) // 2 if array[mid] == target: return mid elif array[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find all words with exactly \`n\` characters in a given list of words and return them as a list.","solution":"def find_words_with_n_chars(words, n): Returns a list of words that have exactly n characters. Parameters: words (list): List of words to search through. n (int): Number of characters to match. Returns: list: List of words with exactly n characters. return [word for word in words if len(word) == n]"},{"question":"Write a function to find the maximum three-sum of a given array of integers.","solution":"def max_three_sum(arr): Returns the maximum sum of any three integers in the given array. If the array has fewer than 3 elements, returns None. if len(arr) < 3: return None arr.sort(reverse=True) return arr[0] + arr[1] + arr[2]"},{"question":"Write a function to generate a password of length \`L\` such that it includes at least one digit, one uppercase letter, one lowercase letter, and one special character. The function should not store the password anywhere and should prevent repeated characters.","solution":"import random import string def generate_password(L): Generates a password of length L that includes at least one digit, one uppercase letter, one lowercase letter, and one special character. Also, prevents repeated characters. if L < 4: raise ValueError(\\"Password length must be at least 4 to include all character types\\") digits = string.digits uppercase_letters = string.ascii_uppercase lowercase_letters = string.ascii_lowercase special_characters = string.punctuation # Ensure there is at least one character of each type password = [ random.choice(digits), random.choice(uppercase_letters), random.choice(lowercase_letters), random.choice(special_characters), ] # Fill the rest of the password length with random non-repeated characters all_characters = digits + uppercase_letters + lowercase_letters + special_characters while len(password) < L: char = random.choice(all_characters) if char not in password: password.append(char) random.shuffle(password) return ''.join(password)"},{"question":"Write a function to calculate the sum of elements in a list using the \`accumulate\` function from the standard library. The function should be named \`calculate_sum\` and take a list \`numbers\` as its parameter. The \`accumulate\` function from the \`itertools\` module can be used to achieve this.","solution":"from itertools import accumulate def calculate_sum(numbers): Calculate the sum of elements in a list using itertools.accumulate. Parameters: numbers (list): A list of numbers to sum Returns: int/float: The sum of the elements in the list accumulated = list(accumulate(numbers)) return accumulated[-1] if accumulated else 0"},{"question":"Write a function to find the maximum product of an array, considering both positive and negative numbers.","solution":"def max_product(nums): Returns the maximum product of a subarray within the given array. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Write a function to print Fibonacci sequence up to n terms.","solution":"def fibonacci_sequence(n): Print the Fibonacci sequence up to n terms. if n <= 0: return [] sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to check if an integer is a power of three. An integer is a power of three if there exists an integer n such that 3^n = x.","solution":"def is_power_of_three(n): Returns True if n is a power of three, otherwise False. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to find the longest increasing subsequence in an array of integers. The function should return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence of numbers where each number is greater than the previous number in the sequence.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the array of integers. if not nums: return 0 dp = [1] * len(nums) # dp[i] = length of the longest increasing subsequence ending in nums[i] for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to print the first n natural numbers, but only those divisible by 3 and 5 together.","solution":"def print_divisible_by_3_and_5(n): Returns a list of the first n natural numbers divisible by both 3 and 5. return [i for i in range(1, n+1) if i % 3 == 0 and i % 5 == 0]"},{"question":"Write a function to generate a random alphanumeric code of a given length. The code should consist of uppercase letters, lowercase letters, and digits. The function should be able to handle any non-negative integer input for the length of the code.","solution":"import random import string def generate_random_code(length): Generate a random alphanumeric code of the given length. The code consists of uppercase letters, lowercase letters, and digits. :param length: The length of the random code to generate :return: A random alphanumeric string of the specified length if length < 0: raise ValueError(\\"Length cannot be negative\\") characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Write a function to multiply two matrices in Python. Assuming the matrices are of the same dimensions, how would you do it?","solution":"def multiply_matrices(matrix1, matrix2): Multiplies two matrices of the same dimensions. rows = len(matrix1) cols = len(matrix1[0]) result = [[0 for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): result[i][j] = matrix1[i][j] * matrix2[i][j] return result"},{"question":"Write a function to reverse each word in a string without reversing the order of the words. For example, if the input is \\"Hello World\\", the output should be \\"olleH dlroW\\".","solution":"def reverse_each_word(s): Reverse each word in the string without reversing the order of the words. Args: s (str): Input string Returns: str: String with each word reversed return ' '.join(word[::-1] for word in s.split())"},{"question":"Write a function to get the minimum number in a sorted list of integers that has been rotated. The rotation is done in a way that the minimum element is not at the beginning of the list. For example, if the sorted list is [3, 4, 5, 1, 2], then the minimum number is 1.","solution":"def find_min_rotated_sorted_array(nums): This function returns the minimum number in a sorted list of integers that has been rotated. :param nums: List[int] - a sorted list that has been rotated :return: int - the minimum number in the list if not nums: return None left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 # If mid element is greater than the right element, min must be in the right part if nums[mid] > nums[right]: left = mid + 1 # Otherwise, the min is in the left part including mid else: right = mid return nums[left]"},{"question":"Write a function to compute a running average of a list of numbers without using division (\`/\` operator).","solution":"def running_average(numbers): Computes the running average of the given list of numbers without using division (/) operator. Returns a list of running averages. if not numbers: return [] running_sums = [] averages = [] total_sum = 0 for i, num in enumerate(numbers): total_sum += num running_sums.append(total_sum) averages.append(total_sum * (1 / (i + 1))) return averages"},{"question":"Write a function to find the sum of the digits of a given number 'n'. The function should return the sum of the digits. If 'n' is negative, the function should return -1. If 'n' is 0, the function should return 0.","solution":"def sum_of_digits(n): Returns the sum of the digits of a given number 'n'. If 'n' is negative, returns -1. If 'n' is 0, returns 0. if n < 0: return -1 return sum(int(digit) for digit in str(n))"},{"question":"Write a function to find the minimum number of coins required to make a given amount of money. You can use coins of denominations 1, 5, 10, and 25. The function should return -1 if it's not possible to make the given amount using the available coins.","solution":"def min_coins(amount): Returns the minimum number of coins required to make a given amount of money using coins of denominations 1, 5, 10, and 25. Returns -1 if it's not possible to make the given amount using the available coins. if amount < 0: return -1 coins = [25, 10, 5, 1] n = len(coins) dp = [float('inf')] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to find the median in a list of numbers. In case the length of the list is even, return the average of the two middle numbers.","solution":"def find_median(nums): Find the median in a list of numbers. If the length of the list is even, return the average of the two middle numbers. Args: nums (list): List of numbers. Returns: float: Median of the list of numbers. nums.sort() n = len(nums) mid = n // 2 if n % 2 == 0: return (nums[mid - 1] + nums[mid]) / 2 else: return float(nums[mid])"},{"question":"Write a function to calculate the area of a triangle given its three vertices. The vertices will be provided as tuples representing their coordinates in a 2D plane.","solution":"def area_of_triangle(vertex1, vertex2, vertex3): Returns the area of the triangle given its three vertices in 2D space. The vertices are provided as tuples representing their coordinates (x, y). Args: vertex1, vertex2, vertex3: tuples representing the (x, y) coordinates of the vertices Returns: float: the area of the triangle x1, y1 = vertex1 x2, y2 = vertex2 x3, y3 = vertex3 # Using the determinant formula area = abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2.0) return area"},{"question":"Write a function to generate all the prime numbers up to a given number n. How can we implement this in Python?","solution":"def sieve_of_eratosthenes(n): Generate all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit to generate prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [i for i in range(n + 1) if is_prime[i]]"},{"question":"Write a function to find the first repeated character in a string.","solution":"def first_repeated_char(s): Returns the first repeated character in the string s. If no character repeats, returns None. char_set = set() for char in s: if char in char_set: return char char_set.add(char) return None"},{"question":"Write a function to find the maximum sum of a subarray of a given array, where the subarray must contain at least one element. If the array contains only negative numbers, return the largest negative number.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray in the given array. The subarray must contain at least one element. :param arr: List[int] - The input array. :return: int - The maximum sum of a subarray. if not arr: return 0 max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to return the maximum number from a list of numbers","solution":"def find_maximum(numbers): Returns the maximum number from a list of numbers. :param numbers: List of numbers :return: Maximum number in the list if not numbers: raise ValueError(\\"The list is empty\\") return max(numbers)"},{"question":"Write a function to detect if there’s a cycle in a singly linked list. If you find a cycle, return the node where the cycle starts. If there's no cycle, return \`null\`.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle(head): Detect if there's a cycle in a singly linked list. If a cycle is found, return the node where the cycle starts. If there's no cycle, return None. :param head: ListNode :return: ListNode or None if not head or not head.next: return None slow = head fast = head # Detect if a cycle is present using the fast and slow pointers while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected break else: return None # No cycle # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to check if a given integer is a prime number. A prime number is an integer that is only divisible by 1 and itself.","solution":"def is_prime(n): Checks if a given integer is a prime number. Parameters: n (int): Integer to check for prime status. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to calculate the total value of an array of integers. Write the function in Python and ensure it handles an empty array gracefully.","solution":"def total_value(arr): Calculates the total value of an array of integers. Handles empty array gracefully. Parameters: arr (list of int): The array of integers to sum up. Returns: int: The total value of the array. return sum(arr)"},{"question":"Write a function to recursively list all files and directories in a given directory. The directory structure should be represented as a nested dictionary where each key is a directory or file name and its value is either another dictionary (representing a subdirectory) or a list of files (if it's a directory). If the directory is empty, an empty dictionary should be returned.","solution":"import os def list_files_and_directories(path): Recursively lists all files and directories in the given directory. The directory structure is represented as a nested dictionary where each key is a directory or file name and its value is either another dictionary (for subdirectories) or a list of files if it's a directory. result = {} if os.path.isdir(path): for entry in os.listdir(path): full_path = os.path.join(path, entry) if os.path.isdir(full_path): result[entry] = list_files_and_directories(full_path) else: if 'files' not in result: result['files'] = [] result['files'].append(entry) return result"},{"question":"Write a function to find the maximum sum of a subarray within a given array of integers. The function should be named \`maxSubarraySum\` and should take an array \`nums\` as input and return the maximum sum of any contiguous subarray within \`nums\`. For example, if the input array is \`[-2,1,-3,4,-1,2,1,-5,4]\`, the function should return \`6\` because the contiguous subarray \`[4,-1,2,1]\` has the largest sum.","solution":"def maxSubarraySum(nums): Returns the maximum sum of any contiguous subarray within the given array nums. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to convert a string to a number. Can you provide the code in Python?","solution":"def string_to_number(s): Converts a string to a number. If the string cannot be converted, returns None. try: return int(s) except ValueError: try: return float(s) except ValueError: return None"},{"question":"Write a function to find the missing number in an array containing distinct numbers from 0 to n. There is exactly one number missing from the array.","solution":"def find_missing_number(arr): Find the missing number in an array containing distinct numbers from 0 to n. Parameters: arr (list): List of n-1 numbers from the range 0 to n, one number is missing. Returns: int: The missing number. n = len(arr) total_sum = n * (n + 1) // 2 arr_sum = sum(arr) return total_sum - arr_sum"},{"question":"Write a function to implement an in-order traversal of a binary tree in Python. Define the function that takes the root of the tree as a parameter.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Perform an in-order traversal of a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: List[int]: The values of the nodes visited in in-order. result = [] def inorder(node): if node: inorder(node.left) result.append(node.val) inorder(node.right) inorder(root) return result"},{"question":"Write a function to calculate the factorial of a number. I want to understand the process step-by-step.","solution":"def factorial(n): Computes the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to return the maximum number of consecutive 1s in the binary representation of a given integer n.","solution":"def max_consecutive_ones(n): Returns the maximum number of consecutive 1s in the binary representation of a given integer n. return max(map(len, bin(n)[2:].split('0')))"},{"question":"Write a function to find the longest consecutive sequence in an unsorted array of integers. The function should return the length of this sequence, not the sequence itself. The array may contain duplicates, and each number should count only once towards the sequence length.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive sequence in an unsorted array. if not nums: return 0 num_set = set(nums) max_length = 0 for num in num_set: # Only start the count if the number is the start of the sequence if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a function to calculate the sum and average of the elements in a given list of numbers.","solution":"def sum_and_average(numbers): Returns the sum and average of the elements in a given list of numbers. Args: numbers (list of int/float): List of numbers to calculate sum and average. Returns: tuple: A tuple containing the sum and the average of the numbers in the list. if not numbers: return (0, 0) total_sum = sum(numbers) average = total_sum / len(numbers) return (total_sum, average)"},{"question":"Write a function to find the maximum profit in a stock market. The input is an array of integers where each integer represents the price of a stock on a different day. The function should return the total profit obtained by buying and selling the stock on the best days.","solution":"def max_profit(prices): This function calculates the maximum profit that can be achieved from an array of stock prices. Each element in the array represents the stock price on a different day. The function returns the maximum profit that can be obtained by buying and selling the stock on the best days. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Write a function to traverse a binary tree using depth-first search (DFS) in Python. The function should return a list of nodes visited in the order they are visited.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def dfs_traversal(root): Perform depth-first search traversal of a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: list: List of node values in the order they are visited. def dfs(node, result): if node is not None: result.append(node.val) dfs(node.left, result) dfs(node.right, result) result = [] dfs(root, result) return result"},{"question":"Write a function to solve the coin change problem. The function should return the minimum number of coins required to make up the amount. If that amount of money cannot be made up by any combination of the coins, the function should return \`-1\`. The function should use dynamic programming to optimize the solution.","solution":"def coin_change(coins, amount): Returns the minimum number of coins required to make up the amount. If that amount of money cannot be made up by any combination of the coins, returns -1. # Create a list to store the fewest number of coins needed for each amount up to 'amount' dp = [float('inf')] * (amount + 1) # Base case: no coins are needed to make an amount of 0 dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to remove duplicates from a given linked list. The function should return the head of the modified linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_duplicates(head): Removes duplicates from a sorted linked list and returns the head of the modified list. current = head while current: while current.next and current.value == current.next.value: current.next = current.next.next current = current.next return head # Helper function to create a linked list from a list of values def create_linked_list(values): if not values: return None head = ListNode(values[0]) current = head for value in values[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert a linked list to a list of values def linked_list_to_list(head): values = [] current = head while current: values.append(current.value) current = current.next return values"},{"question":"Write a function to implement part of the game of chess. Specifically, write a function that checks if a knight is attacking a specific position on the board. The knight can move in an L-shape: two squares in one direction and one square perpendicular to that direction.","solution":"def is_knight_attacking(knight_pos, target_pos): Determines if a knight on a chessboard is attacking a given position. :param knight_pos: A tuple (x, y) representing the knight's position on the board. :param target_pos: A tuple (x, y) representing the target position on the board. :return: True if the knight can attack the target position, False otherwise. # List of all possible moves for a knight knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] for move in knight_moves: new_position = (knight_pos[0] + move[0], knight_pos[1] + move[1]) if new_position == target_pos: return True return False"},{"question":"Write a function to remove duplicates from a list while preserving the order of elements. Consider the case where duplicates might appear multiple times consecutively. Also, ensure that your function should work with strings as well.","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the order of elements. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to determine the number of distinct prime factors of a given integer. A prime factor is a factor that is a prime number.","solution":"def count_distinct_prime_factors(n): Returns the number of distinct prime factors of a given integer n. if n <= 1: return 0 distinct_prime_factors = set() factor = 2 while n % factor == 0: distinct_prime_factors.add(factor) n //= factor factor = 3 while factor * factor <= n: while n % factor == 0: distinct_prime_factors.add(factor) n //= factor factor += 2 if n > 1: distinct_prime_factors.add(n) return len(distinct_prime_factors)"},{"question":"Write a function to find the element with the highest number of occurrences in a given array of integers. If there are multiple elements with the highest frequency, return the smallest one.","solution":"from collections import Counter def highest_frequency_element(arr): Find the element with the highest number of occurrences in a given array of integers. If there are multiple elements with the highest frequency, return the smallest one. Parameters: arr (list of int): The input array of integers. Returns: int: The element with the highest frequency (and smallest if ties). if not arr: return None frequency = Counter(arr) max_frequency = max(frequency.values()) highest_freq_elements = [key for key, value in frequency.items() if value == max_frequency] return min(highest_freq_elements)"},{"question":"Write a function to convert a string to an integer without using any built-in conversion functions. Ensure the function handles everything that Python's built-in int() function does, including sign handling, overflow, and invalid input.","solution":"def string_to_int(s: str) -> int: Converts a string to an integer without using built-in conversion functions. if s is None or len(s) == 0: raise ValueError(\\"Input string is empty\\") s = s.strip() # Remove leading/trailing whitespaces if len(s) == 0: raise ValueError(\\"String has only whitespace\\") is_negative = False start_index = 0 if s[0] == '-': is_negative = True start_index = 1 elif s[0] == '+': start_index = 1 if start_index == len(s): # only sign provided raise ValueError(\\"String does not contain digits\\") result = 0 for i in range(start_index, len(s)): if not s[i].isdigit(): raise ValueError(\\"Invalid character found in input string\\") result = result * 10 + (ord(s[i]) - ord('0')) if is_negative: result = -result return result"},{"question":"Write a function to find the maximum element in an integer array. What should the function signature be and what should it return?","solution":"def find_maximum(arr): Returns the maximum element in an integer array. :param arr: List[int] - The array of integers :return: int - The maximum element in the array if not arr: raise ValueError(\\"Array should not be empty\\") return max(arr)"},{"question":"Write a function to read a file and count the number of words in it.","solution":"def count_words_in_file(file_path): Reads a file and returns the count of words in it. Parameters: file_path (str): The path of the file. Returns: int: The number of words in the file. try: with open(file_path, 'r') as file: content = file.read() words = content.split() return len(words) except FileNotFoundError: print(f\\"The file {file_path} does not exist.\\") return 0"},{"question":"Write a function to compute the n-th Fibonacci number using dynamic programming.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 # Initialize base cases fib = [0, 1] # Compute the Fibonacci numbers up to n for i in range(2, n + 1): fib.append(fib[i-1] + fib[i-2]) return fib[n]"},{"question":"Write a function to find the maximum sum of a subarray in a 2D array in Python.","solution":"def max_sum_subarray_2d(arr): Finds the maximum sum of a subarray in a 2D array. if not arr or not arr[0]: return 0 max_sum = float('-inf') rows, cols = len(arr), len(arr[0]) # Temporary array to store sums temp = [0] * rows # Go through each column and apply Kadane's algorithm on each combination of rows for left in range(cols): # Initialize temp array temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += arr[i][right] # Apply Kadane's algorithm on temp array current_max = float('-inf') current_sum = 0 for val in temp: current_sum += val if current_sum > current_max: current_max = current_sum if current_sum < 0: current_sum = 0 # Update the global maximum sum if current_max > max_sum: max_sum = current_max return max_sum"},{"question":"Write a function to calculate the area of a circle given its radius. Ensure your code snippet includes importing necessary packages, a clear docstring, and a check function to validate the solution with provided data points.","solution":"import math def area_of_circle(radius): Calculates the area of a circle given its radius. :param radius: The radius of the circle :return: The area of the circle if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a function to convert a given decimal number to its hexadecimal representation.","solution":"def decimal_to_hexadecimal(decimal_number): Converts a given decimal number to its hexadecimal representation. :param decimal_number: int :return: str if decimal_number < 0: raise ValueError(\\"The function only accepts non-negative integers.\\") hex_chars = \\"0123456789ABCDEF\\" result = \\"\\" if decimal_number == 0: return \\"0\\" while decimal_number > 0: remainder = decimal_number % 16 result = hex_chars[remainder] + result decimal_number //= 16 return result"},{"question":"Write a function to calculate the sum of the first N natural numbers. The function should return the result as an integer. Additionally, find a closed-form solution to verify the correctness of your function and compare its efficiency.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first N natural numbers. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Write a function to reverse words in a string. For example, if the input string is \\"This is a test\\", the output should be \\"test a is This\\".","solution":"def reverse_words(s): Returns the string with the words reversed. return \\" \\".join(reversed(s.split()))"},{"question":"Write a function to remove duplicate characters from a string in Python. The function should maintain the original order of characters in the string. Numpy is not allowed.","solution":"def remove_duplicates(s): Returns a string with duplicate characters removed, maintaining the original order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to reverse the order of words in a sentence. For example, given the string \\"hello world\\", the function should return \\"world hello\\". Your function should handle multiple spaces and trim any leading or trailing white spaces. For instance, \\" hello world \\" should return \\"world hello\\".","solution":"def reverse_words(sentence): Reverse the order of words in a given sentence and handle multiple spaces, leading and trailing whitespaces. Parameters: sentence (str): The input sentence to reverse. Returns: str: The sentence with the words in reverse order. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Write a function to implement a custom inorder traversal for a binary tree without using recursion. Use a stack to simulate the recursive call stack.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Perform an inorder traversal on a binary tree without using recursion. Use a stack to simulate the recursive call stack. :param root: TreeNode, root of the binary tree :return: list, list of values in inorder stack = [] inorder = [] current = root while current is not None or stack: while current is not None: stack.append(current) current = current.left current = stack.pop() inorder.append(current.val) current = current.right return inorder"},{"question":"Write a function to generate the Fibonacci sequence up to n terms. The function should also ensure that the sequence does not contain any repeated numbers. Additionally, the sequence should be generated in a memory-efficient manner. Consider using the generator method in Python.","solution":"def fibonacci(n): Generate up to n terms of the Fibonacci sequence without repeated numbers in a memory-efficient manner using a generator. if n <= 0: return a, b = 0, 1 yield a if n > 1: yield b count = 2 while count < n: a, b = b, a + b yield b count += 1"},{"question":"Write a function to check the readability of a given string. The function should return \\"High\\", \\"Medium\\", or \\"Low\\" depending on the number of words in the string.","solution":"def check_readability(text): Returns the readability level ('High', 'Medium', 'Low') of the given string based on the number of words. High: 0-10 words Medium: 11-20 words Low: 21 or more words words = text.split() word_count = len(words) if word_count <= 10: return \\"High\\" elif word_count <= 20: return \\"Medium\\" else: return \\"Low\\""},{"question":"Write a function to find the median of a list of numbers. How would you approach this problem?","solution":"def find_median(numbers): Returns the median of a list of numbers. The list is not guaranteed to be sorted. numbers = sorted(numbers) n = len(numbers) if n % 2 == 1: return numbers[n // 2] else: return (numbers[n // 2 - 1] + numbers[n // 2]) / 2"},{"question":"Write a function to count and return the number of consonants in a given string. Consonants are defined as letters in the alphabet that are not vowels (a, e, i, o, u) in either uppercase or lowercase. Assume the input is a valid string containing only alphabetic characters.","solution":"def count_consonants(s): Returns the number of consonants in a given string. Consonants are all alphabetic characters that are not vowels (a, e, i, o, u). vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char.isalpha() and char not in vowels)"},{"question":"Write a function to separate the digits of a positive integer and return them as an array of integers. The function should handle any positive integer, including zero.","solution":"def separate_digits(n): Separates the digits of a positive integer and returns them as an array of integers. Parameters: n (int): The positive integer to be separated. Returns: list: List of integers representing the separated digits of n. return [int(digit) for digit in str(n)]"},{"question":"Write a function to find the amplitude of a sound wave given its time series data. The amplitude of a sound wave is defined as the maximum absolute value of the wave's signal.","solution":"def find_amplitude(wave): Returns the amplitude of a sound wave given its time series data. :param wave: List of integers or floats representing the time series data of the wave. :return: Float representing the amplitude of the sound wave. return max(abs(sample) for sample in wave)"},{"question":"Write a function to flatten a nested list. The function should take a list that may contains integers or other lists of integers (at any depth) and return a flat list containing all the integers in the nested list, in the order they appear.","solution":"def flatten(nested_list): flattens a nested list of integers. result = [] for element in nested_list: if isinstance(element, list): result.extend(flatten(element)) else: result.append(element) return result"},{"question":"Write a function to find the longest continuous increasing subsequence in an array of integers. The function should return the length of this subsequence.","solution":"def find_length_of_lcis(nums): Finds the length of the longest continuous increasing subsequence in an array of integers. :param nums: List[int] - a list of integers :return: int - the length of the longest continuous increasing subsequence if not nums: return 0 max_len = 1 current_len = 1 for i in range(1, len(nums)): if nums[i] > nums[i-1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 return max(max_len, current_len)"},{"question":"Write a function to find the LCA (Lowest Common Ancestor) of two nodes in a Binary Search Tree (BST) where each node contains a value, left child, and right child. The function should return the LCA node itself.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def find_LCA(root, node1, node2): Finds the Lowest Common Ancestor (LCA) of two nodes in a BST. Returns the tree node that is their LCA. while root: # If both n1 and n2 are smaller than root, then LCA lies in the left if root.value > node1.value and root.value > node2.value: root = root.left # If both n1 and n2 are greater than root, then LCA lies in the right elif root.value < node1.value and root.value < node2.value: root = root.right else: break return root"},{"question":"Write a function to get the absolute value of a number in Python.","solution":"def absolute_value(num): Returns the absolute value of a number. if num < 0: return -num return num"},{"question":"Write a function to check if a binary tree is a perfect binary tree. A perfect binary tree is one where all levels are fully filled except possibly for the last level, and all nodes are as far left as possible.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_perfect_binary_tree(root): Returns True if the tree with the given root is a perfect binary tree, otherwise False. def depth(node): d = 0 while node is not None: d += 1 node = node.left return d def is_perfect(node, d, level=0): if node is None: return True if node.left is None and node.right is None: return d == level + 1 if node.left is None or node.right is None: return False return is_perfect(node.left, d, level + 1) and is_perfect(node.right, d, level + 1) d = depth(root) return is_perfect(root, d)"},{"question":"Write a function to generate all unique permutations of a given list of numbers in Python. Ensure that no permutations are repeated.","solution":"import itertools def unique_permutations(nums): Returns all unique permutations of the input list of numbers. return list(set(itertools.permutations(nums)))"},{"question":"Write a function to convert JSON to CSV. The function should take JSON data as input and return a CSV string as output. The JSON data is expected to be a list of dictionaries, where each dictionary represents a row of data. The keys of the dictionary represent the column headers, and the values represent the data for each cell in the row.","solution":"import csv import io def json_to_csv(json_data): Converts a list of dictionaries (JSON data) to a CSV string. Args: json_data (list of dict): The JSON data to convert. Returns: str: The CSV string representation of the input JSON data. if not json_data: return \\"\\" # Create a string buffer to hold CSV data csv_buffer = io.StringIO() # Extract the field names (keys) from the first dictionary fieldnames = json_data[0].keys() # Create a CSV writer object writer = csv.DictWriter(csv_buffer, fieldnames=fieldnames) # Write the headers writer.writeheader() # Write the data rows writer.writerows(json_data) # Get the CSV string from the buffer csv_string = csv_buffer.getvalue() # Close the buffer csv_buffer.close() return csv_string"},{"question":"Write a function to remove duplicates from an array of integers. The function should be able to handle an array of any size. Provide a detailed explanation of how the function works and any optimizations you might consider.","solution":"def remove_duplicates(arr): Removes duplicates from an array of integers and returns the array with unique elements. The order of elements is preserved based on their first occurrence. Args: arr (list): The input array of integers. Returns: list: The array with duplicates removed. seen = set() unique_arr = [] for num in arr: if num not in seen: unique_arr.append(num) seen.add(num) return unique_arr"},{"question":"Write a function to take two arrays, and sum the corresponding elements. If the arrays are not of the same length, the function should handle it gracefully and either ignore extra elements or fill in missing elements with zero.","solution":"def sum_arrays(arr1, arr2): Returns the sum of two arrays by summing their corresponding elements. If the arrays are not the same length, it fills the shorter array with zeroes. max_length = max(len(arr1), len(arr2)) result = [] for i in range(max_length): element1 = arr1[i] if i < len(arr1) else 0 element2 = arr2[i] if i < len(arr2) else 0 result.append(element1 + element2) return result"},{"question":"Write a function to split a string into substrings of a given length in Python. For example, if I pass the string \\"HelloWorld\\" and the length 2, it should return [\\"He\\", \\"ll\\", \\"oW\\", \\"or\\", \\"ld\\"].","solution":"def split_string(s, length): Splits the string s into substrings of given length. Parameters: s (str): The string to be split. length (int): The length of each substring. Returns: list: A list of substrings. return [s[i:i+length] for i in range(0, len(s), length)]"},{"question":"Write a function to reverse the order of the words in a sentence without changing the order of the characters within each word. For example, \\"How are you?\\" should be transformed into \\"you are How?\\".","solution":"def reverse_words(sentence): Reverses the order of words in a sentence without changing the order of the characters within each word. Parameters: sentence (str): The input sentence to reverse the words. Returns: str: The sentence with the order of the words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to reverse a string provided by user.","solution":"def reverse_string(s): Reverses the input string s. Parameters: s (str): A string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to flatten a binary tree into a linked list using in-order traversal. The function should take the root of the binary tree as input and modify the tree in-place to form a linked list where each node's right child points to the next node in the in-order sequence, and the left child is always null.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten_in_order(root): Flatten the binary tree rooted at 'root' into a linked list in in-order. Modifies the tree in-place. def in_order_traversal(node): nonlocal last if not node: return in_order_traversal(node.left) node.left = None # Left child should always be null in the linked list last.right = node # Connect the last node to the current node last = node # Move last to the current node in_order_traversal(node.right) dummy = TreeNode(None) last = dummy in_order_traversal(root) return dummy.right # The first element of the flattened tree def tree_to_list(head): Helper function to convert the flattened binary tree / linked list back to a Python list for easy testing. result = [] while head: result.append(head.val) head = head.right return result"},{"question":"Write a function to check if a binary tree is a mirror of itself (i.e., a palindrome).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_mirror(left_subtree, right_subtree): if left_subtree is None and right_subtree is None: return True if left_subtree is None or right_subtree is None: return False return (left_subtree.val == right_subtree.val and is_mirror(left_subtree.left, right_subtree.right) and is_mirror(left_subtree.right, right_subtree.left)) def is_symmetric(root): if root is None: return True return is_mirror(root.left, root.right)"},{"question":"Write a function to reverse a string in Python. Explain your code step-by-step.","solution":"def reverse_string(s): Returns the reverse of the input string s. # Step-by-step explanation: # s[::-1] is a slice operation that means: # - start at the end of the string (-1) # - go down to the beginning of the string # - move with the step -1 (one step backward) return s[::-1]"},{"question":"Write a function to calculate the number of characters in a string, including spaces.","solution":"def count_characters(s): Returns the number of characters in the string s, including spaces. return len(s)"},{"question":"Write a function to calculate the total number of transactions made within a given time frame in a financial dataset.","solution":"from datetime import datetime def count_transactions(transactions, start_date, end_date): Returns the total number of transactions made within a given time frame. :param transactions: List of transaction records, each with a 'date' key in 'YYYY-MM-DD' format. :param start_date: Start date of the time frame in 'YYYY-MM-DD' format. :param end_date: End date of the time frame in 'YYYY-MM-DD' format. :return: Total number of transactions within the time frame. start_date = datetime.strptime(start_date, '%Y-%m-%d') end_date = datetime.strptime(end_date, '%Y-%m-%d') count = 0 for transaction in transactions: transaction_date = datetime.strptime(transaction['date'], '%Y-%m-%d') if start_date <= transaction_date <= end_date: count += 1 return count"},{"question":"Write a function to return the roots of an equation 2x^2 + 5x - 3 = 0. Implement a formula to find the roots and handle any possible exceptions for instance floating point errors.","solution":"import math def find_roots(a, b, c): Finds roots of a quadratic equation ax^2 + bx + c = 0. try: discriminant = b**2 - 4*a*c if discriminant < 0: return \\"No Real Roots\\" root1 = (-b + math.sqrt(discriminant)) / (2 * a) root2 = (-b - math.sqrt(discriminant)) / (2 * a) return (root1, root2) except Exception as e: return f\\"Error: {e}\\" # Find roots of the equation 2x^2 + 5x - 3 = 0 coefficients = (2, 5, -3) roots = find_roots(*coefficients) roots"},{"question":"Write a function to find the maximum sum of a contiguous subarray of length \`k\` in an array \`arr\` of integers.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a contiguous subarray of length k. Parameters: arr (list of int): The input array. k (int): The length of the subarray. Returns: int: The maximum sum of a contiguous subarray of length k. if len(arr) < k or k <= 0: raise ValueError(\\"The length of the array must be at least k and k must be a positive integer.\\") # Initial sum of the first 'k' elements max_sum = sum(arr[:k]) current_sum = max_sum # Sliding window to find maximum sum for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to calculate the sum of numbers from 1 to n using recursion. Here is a partial solution, but it's not complete. Can you help complete it?","solution":"def sum_recursive(n): Returns the sum of numbers from 1 to n using recursion. if n <= 1: return n else: return n + sum_recursive(n-1)"},{"question":"Write a function to find the maximum sum of a subarray within a given array of integers. You can assume that the subarray must contain at least one integer. If the array contains only negative numbers, return the maximum single number in the array. If the array is empty, throw an \`IllegalArgumentException\`.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray within a given array of integers. If the array only contains negative numbers, return the maximum single number in the array. If the array is empty, raise an \`IllegalArgumentException\`. if not nums: raise ValueError(\\"IllegalArgumentException: The input array is empty.\\") max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to sort an array of integers in ascending order using a specific algorithm.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. Parameters: arr (list): A list of integers to sort. Returns: list: The sorted list of integers in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to compute the Euclidean distance between two points in a 2D plane.","solution":"import math def euclidean_distance(point1, point2): Computes the Euclidean distance between two points in a 2D plane. Parameters: - point1: A tuple (x1, y1) representing the coordinates of the first point. - point2: A tuple (x2, y2) representing the coordinates of the second point. Returns: A float representing the Euclidean distance between the two points. return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)"},{"question":"Write a function to sort a linked list using the merge sort algorithm. The function should take the head of the linked list as input and return the sorted list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort(head): if not head or not head.next: return head def split(head): slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None return head, mid def merge(l1, l2): dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next, l1 = l1, l1.next else: tail.next, l2 = l2, l2.next tail = tail.next tail.next = l1 or l2 return dummy.next left, right = split(head) left = merge_sort(left) right = merge_sort(right) return merge(left, right)"},{"question":"Write a function to sort an array of non-negative integers using the bucket sort algorithm. The function should take an array of integers and return the sorted array.","solution":"def bucket_sort(arr): Perform bucket sort on the input array. if not arr: return [] # Find maximum value to figure out the range of the buckets max_value = max(arr) # Create a list of empty buckets bucket_count = len(arr) buckets = [[] for _ in range(bucket_count)] # Put array elements into different buckets for num in arr: index = num * bucket_count // (max_value + 1) buckets[index].append(num) # Sort individual buckets and concatenate them sorted_array = [] for bucket in buckets: sorted_array.extend(sorted(bucket)) return sorted_array"},{"question":"Write a function to find the nth prime number.","solution":"def nth_prime(n): Returns the nth prime number. if n < 1: raise ValueError(\\"n must be a positive integer\\") primes = [] num = 2 while len(primes) < n: for p in primes: if num % p == 0: break else: primes.append(num) num += 1 return primes[-1]"},{"question":"Write a function to calculate the factorial of any non-negative integer input using a recursive approach in Python. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It's denoted by n!.","solution":"def factorial(n): Calculate the factorial of a non-negative integer n using a recursive approach. Parameters: n (int): A non-negative integer whose factorial is to be calculated Returns: int: Factorial of the input integer n Example: factorial(5) --> 120 if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find all pairs of numbers in a given array that add up to a specific target value. The function should return all such pairs in a list of tuples.","solution":"def find_pairs_with_sum(arr, target): Returns all pairs of numbers in the array \`arr\` that add up to \`target\`. :param arr: List of integers :param target: Integer target sum :return: List of tuples where each tuple contains two integers that sum up to target seen = set() pairs = [] for num in arr: complement = target - num if complement in seen: pairs.append((complement, num)) seen.add(num) return pairs"},{"question":"Write a function to reverse a linked list in Python. The function should take the head of a linked list as an argument and return the head of the reversed linked list. The linked list is defined by a class \`ListNode\` with attributes \`data\` and \`next\`.","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next def reverse_linked_list(head): Reverses a linked list. :param head: ListNode, the head of the linked list :return: ListNode, the head of the reversed linked list prev = None current = head while current is not None: next_node = current.next # store the next node current.next = prev # reverse the link prev = current # move prev to this node current = next_node # move to next node return prev # new head of the reversed linked list"},{"question":"Write a function to find the number of unique words in a given sentence.","solution":"def count_unique_words(sentence): Returns the number of unique words in a given sentence. Args: sentence (str): The input sentence. Returns: int: The number of unique words. words = sentence.lower().split() unique_words = set(words) return len(unique_words)"},{"question":"Write a function to calculate the mean of a list of numbers. The function should handle both positive and negative numbers and should return the result as a float. If the input list is empty, the function should return \`None\`.","solution":"def calculate_mean(numbers): Returns the mean of a list of numbers. If the list is empty, returns None. if not numbers: # Checks if the list is empty return None return sum(numbers) / len(numbers)"},{"question":"Write a function to detect whether a given array contains a unique set of numbers. Write a code snippet in Python that accomplishes this task.","solution":"def has_unique_numbers(arr): Checks if the given array contains a unique set of numbers. Returns True if all numbers are unique, otherwise False. return len(arr) == len(set(arr))"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been circularly rotated.","solution":"def max_circular_subarray_sum(nums): Returns the maximum sum of a contiguous subarray in a circularly rotated list. def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far if not nums: return 0 max_kadane = kadane(nums) max_wrap = sum(nums) for i in range(len(nums)): nums[i] = -nums[i] max_wrap = max_wrap + kadane(nums) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a function to determine if a given string is a palindrome by comparing characters from both ends towards the center. Give an example implementation in Python.","solution":"def is_palindrome(s): Determine if the given string is a palindrome by comparing characters from both ends towards the center. Parameters: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. s = s.lower().replace(\\" \\", \\"\\") # Optional: handle case insensitivity and remove spaces left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a function to decode a given string.","solution":"def decode_string(s): Decodes the given string by reversing it. return s[::-1]"},{"question":"Write a function to generate all possible anagrams of a given string. Your function should take a string as input and return a list of all possible anagrams of the string. You can assume that the input string consists of distinct characters. Additionally, handle the case where the input is an empty string or a single character string.","solution":"from itertools import permutations def generate_anagrams(s): Returns all possible anagrams of the given string s. if len(s) <= 1: return [s] perms = permutations(s) anagrams = [''.join(p) for p in perms] return sorted(anagrams)"},{"question":"Write a function to return the first non-repeating character in a string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character from the string s. If all characters are repeating, returns an empty string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return ''"},{"question":"Write a function to calculate the sum of all numbers in a given list. In Python, write a function called \`sum_list\` that takes a list of numbers as an argument and returns the sum of all the numbers in the list.","solution":"def sum_list(numbers): Returns the sum of all numbers in the given list. :param numbers: list of numbers :return: sum of all numbers in the list return sum(numbers)"},{"question":"Write a function to calculate the sum of all elements in a given array using a for loop in Python.","solution":"def sum_of_elements(array): Returns the sum of all elements in the given array. total = 0 for element in array: total += element return total"},{"question":"Write a function to find the minimum element in an array using a stack. The function should return the minimum element of the array. If the array is empty, return -1.","solution":"def find_min_with_stack(arr): Returns the minimum element from the array using a stack. If the array is empty, returns -1. if not arr: return -1 stack = [] stack.append(arr[0]) for num in arr[1:]: if num < stack[-1]: stack.append(num) return stack[-1]"},{"question":"Write a function to find the second largest number in a list. If there is no distinct second largest number, return None. Ensure your function works for both positive and negative numbers.","solution":"def second_largest(numbers): Returns the second largest number in the list. If there is no distinct second largest number, returns None. if len(numbers) < 2: return None largest = second = float('-inf') for number in numbers: if number > largest: second = largest largest = number elif largest > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a function to reverse a singly linked list in Python. The linked list is defined as a class with a reference to the data and a reference to the next node.","solution":"class ListNode: def __init__(self, value=0, next_node=None): self.value = value self.next = next_node def reverse_linked_list(head): Reverses a singly linked list. :param head: The head node of the linked list :returns: The new head of the reversed linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to return the first element of a list that is greater than a specified value. If no such element is found, return -1. The function should be named find_first_greater\` and should be implemented in Python.","solution":"def find_first_greater(lst, val): Returns the first element of the list that is greater than the specified value. If no such element is found, returns -1. for element in lst: if element > val: return element return -1"},{"question":"Write a function to find the next perfect square greater than a given number \`n\`.","solution":"import math def next_perfect_square(n): Returns the next perfect square greater than the given number n. next_int = math.isqrt(n) + 1 return next_int * next_int"},{"question":"Write a function to calculate the length of the longest palindrome that can be formed by deleting some characters from the given string \`s\`.","solution":"def longest_palindrome_subseq(s): Returns the length of the longest palindromic subsequence that can be formed by deleting some characters from the given string s. n = len(s) # Create a table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # If there's only one character, the longest palindromic subsequence is 1 for i in range(n): dp[i][i] = 1 # Build the table. The outer loop represents the length of the substring for cl in range(2, n+1): for i in range(n-cl+1): j = i+cl-1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # dp[0][n-1] will hold the length of the longest palindromic subsequence return dp[0][n-1]"},{"question":"Write a function to find the maximum number in a list. If the list is empty, return None. Make sure to handle negative numbers as well.","solution":"def find_max(lst): Returns the maximum number in a list. If the list is empty, returns None. if not lst: return None max_number = lst[0] for num in lst: if num > max_number: max_number = num return max_number"},{"question":"Write a function to calculate the square root of a given number.","solution":"import math def calculate_square_root(x): Returns the square root of the given number x. Raises ValueError if x is negative. if x < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") return math.sqrt(x)"},{"question":"Write a function to implement the bubble sort algorithm. Print the sorted array resulting from the function for the given sample input.","solution":"def bubble_sort(arr): A function implementing the bubble sort algorithm. Args: arr (list): A list of numbers to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # Sample usage sample_input = [64, 34, 25, 12, 22, 11, 90] sorted_array = bubble_sort(sample_input) print(\\"Sorted array:\\", sorted_array)"},{"question":"Write a function to find the shortest subarray that needs to be sorted to make the whole array sorted.","solution":"def find_unsorted_subarray(nums): Returns the length of the shortest subarray that, if sorted, results in the whole array being sorted. If the array is already sorted, returns 0. n = len(nums) start, end = 0, -1 min_val, max_val = float('inf'), float('-inf') # Traverse from left to right to find the end of the needed subarray for i in range(n): if nums[i] < max_val: end = i else: max_val = nums[i] # Traverse from right to left to find the start of the needed subarray for i in range(n-1, -1, -1): if nums[i] > min_val: start = i else: min_val = nums[i] return end - start + 1"},{"question":"Write a function to calculate the number of factors of a given integer using a brute force method.","solution":"def count_factors(n): Returns the number of factors of the given integer n using a brute force method. if n <= 0: raise ValueError(\\"n must be a positive integer\\") factor_count = 0 for i in range(1, n + 1): if n % i == 0: factor_count += 1 return factor_count"},{"question":"Write a function to calculate the sum of all elements in a given list of integers without using any built-in functions like \`sum()\`. The function should also handle negative numbers and be efficient.","solution":"def sum_of_list(lst): Returns the sum of all elements in a list without using any built-in sum() function. total = 0 for num in lst: total += num return total"},{"question":"Write a function to print n levels of a Fibonacci series. The function accepts an integer \\"n\\" as the parameter. You can choose any programming language you are comfortable with. Note that you should try to write the code in a way that directly corresponds to language idioms and styles where possible.","solution":"def fibonacci_series(n): Returns the first n levels of the Fibonacci series. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_series = [0, 1] for i in range(2, n): next_fib = fib_series[-1] + fib_series[-2] fib_series.append(next_fib) return fib_series"},{"question":"Write a function to remove duplicates from an array of integers, maintain the original order of the elements as much as possible, and return the length of the new array.","solution":"def remove_duplicates(arr): Removes duplicates from the array and returns the length of the new array. The order of the elements is maintained. Parameters: arr (list of int): The input array of integers. Returns: int: The length of the array after removing duplicates. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return len(result)"},{"question":"Write a function to find the longest word in a given string of words.","solution":"def longest_word(sentence): Returns the longest word in the given sentence. In case of a tie, returns the first longest word. words = sentence.split() max_word = '' for word in words: if len(word) > len(max_word): max_word = word return max_word"},{"question":"Write a function to find the minimum number of operations required to convert a string containing non-negative integers separated by spaces into a string containing non-negative integers separated by commas. The operation is defined as replacing a space with a comma.","solution":"def min_operations_to_comma_separated(input_string): Returns the minimum number of operations required to convert a string containing non-negative integers separated by spaces into a string containing non-negative integers separated by commas. return input_string.count(' ')"},{"question":"Write a function to print all permutations of a given string.","solution":"def permute_string(s): Returns a list containing all permutations of the input string s. def permute_helper(s, chosen, results): if len(s) == 0: results.append(chosen) else: for i in range(len(s)): char = s[i] remaining = s[:i] + s[i+1:] permute_helper(remaining, chosen + char, results) results = [] permute_helper(s, '', results) return results"},{"question":"Write a function to convert a string to an integer without using any built-in conversion functions.","solution":"def string_to_integer(s): Converts a string to an integer without using any built-in conversion functions. Parameters: s (str): The string representation of the integer. Returns: int: The integer representation of the string. if not s: raise ValueError(\\"Empty string cannot be converted to an integer.\\") result = 0 is_negative = False start_index = 0 if s[0] == '-': is_negative = True start_index = 1 elif s[0] == '+': start_index = 1 for i in range(start_index, len(s)): if not '0' <= s[i] <= '9': raise ValueError(f\\"Invalid character '{s[i]}' in input string.\\") result = result * 10 + (ord(s[i]) - ord('0')) return -result if is_negative else result"},{"question":"Write a function to calculate the sum of the squares of all positive integers up to a given number. The function should take a single integer as input and return the sum. For example, the sum of squares for n=5 would be 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55.","solution":"def sum_of_squares(n): Returns the sum of the squares of all positive integers up to n. Parameters: n (int): The upper limit integer. Returns: int: The sum of the squares of all positive integers up to n. return sum(i * i for i in range(1, n + 1))"},{"question":"Write a function to perform quicksort on an array. QuickSort is a divide-and-conquer algorithm that works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted.","solution":"def quicksort(arr): Sorts the array using the QuickSort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to find the length of the last word in a string. The string may contain leading and trailing spaces, but each word is separated by a single space.","solution":"def length_of_last_word(s): Returns the length of the last word in the given string s. The string may contain leading and trailing spaces. # Strip any leading/trailing spaces and split the string by space words = s.strip().split(' ') # Return the length of the last word return len(words[-1])"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been wrapped around. The wrapping means the subarray can start from one end and wrap around to the other end of the array.","solution":"def max_circular_subarray_sum(arr): Finds the maximum sum of a contiguous subarray within a wrapped one-dimensional array. def kadane(arr): max_sum = cur_sum = arr[0] for num in arr[1:]: cur_sum = max(num, cur_sum + num) max_sum = max(max_sum, cur_sum) return max_sum # Step 1: Find the maximum subarray sum using regular Kadane's algorithm. max_kadane = kadane(arr) # Step 2: Find the maximum subarray sum that includes wrapping. total_sum = sum(arr) inverted_arr = [-x for x in arr] max_wrap = total_sum + kadane(inverted_arr) # max sum of non-contributing elements subtracted from total sum # Edge case: All negative numbers, max_wrap might be 0 if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a function to calculate the sum and product of all integers in a given list. The function should return the sum and product as a tuple. If the list is empty, the function should return 0 for the sum and 1 for the product.","solution":"def sum_and_product(lst): Calculate the sum and product of all integers in a given list. Return the sum and product as a tuple. If the list is empty, return 0 for the sum and 1 for the product. if not lst: return (0, 1) total_sum = sum(lst) total_product = 1 for num in lst: total_product *= num return (total_sum, total_product)"},{"question":"Write a function to calculate the number of unique words in a given string, considering \\"word\\" as any sequence of characters separated by spaces. The function should be case-insensitive.","solution":"def count_unique_words(input_string): Returns the number of unique words in the input string, case-insensitive. # Split string into words, converting to lower case for case-insensitivity words = input_string.lower().split() # Use a set to store unique words unique_words = set(words) return len(unique_words)"},{"question":"Write a function to reverse the characters in each word of a given string. The function should take a single parameter, a string, and return a new string where each word has its characters reversed, but the order of the words remains the same.","solution":"def reverse_words(input_string): Reverses the characters in each word of the given string while maintaining the order of the words. :param input_string: A string containing words separated by spaces. :return: A new string where each word has its characters reversed. words = input_string.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to find the intersection of two arrays, where the intersection means the elements that are present in both arrays.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays. return list(set(arr1) & set(arr2))"},{"question":"Write a function to count the number of palindromic substrings in a given string. A palindromic substring is a substring that reads the same backward as forward.","solution":"def count_palindromic_substrings(s): Counts the number of palindromic substrings in a given string s. :param s: input string :return: number of palindromic substrings n = len(s) count = 0 # Helper function to expand around center and count palindromes def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Count odd length palindromes (single character center) expand_around_center(i, i) # Count even length palindromes (consecutive characters center) expand_around_center(i, i + 1) return count"},{"question":"Write a function to check if a given string is a palindrome by checking the first character and the last character, and recursively checking the inner substring.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, else False. A string is a palindrome if it reads the same forward and backward. # Base cases: if the string is empty or has one character if len(s) <= 1: return True # Check first and last characters and recursively check the inner substring if s[0] == s[-1]: return is_palindrome(s[1:-1]) else: return False"},{"question":"Write a function to find the symmetric difference between two lists. symmetric_difference() #given two lists, return a list containing elements in either of the two lists but not in both","solution":"def symmetric_difference(list1, list2): Returns the symmetric difference between two lists. Elements are included only if they are present in either list1 or list2, but not both. set1 = set(list1) set2 = set(list2) sym_diff = set1.symmetric_difference(set2) return list(sym_diff)"},{"question":"Write a function to check if two strings are rotations of each other. For example, \\"pqrwparallel\\" is a rotation of \\"parallelpqrw\\". This property should hold true even if the strings contain duplicates.","solution":"def are_rotations(str1, str2): Checks if two strings are rotations of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str2 is a rotation of str1, False otherwise. if len(str1) != len(str2): return False return str2 in (str1 + str1)"},{"question":"Write a function to count the number of strings that contain multiple types of characters (both alphabetic and digit) from a list of strings. How would you test this function?","solution":"def count_strings_with_multiple_types(strings): Returns the number of strings in the input list that contain both alphabetic and digit characters. count = 0 for string in strings: has_alpha = any(c.isalpha() for c in string) has_digit = any(c.isdigit() for c in string) if has_alpha and has_digit: count += 1 return count"},{"question":"Write a function to find the nearest value to a given number in a sorted list. Assuming the list is sorted in non-decreasing order.","solution":"def find_nearest(sorted_list, target): Returns the value from the sorted list that is nearest to the given target. If two numbers are equally near to the target, return the smaller one. if not sorted_list: return None nearest_value = sorted_list[0] min_diff = abs(nearest_value - target) for number in sorted_list: diff = abs(number - target) if diff < min_diff or (diff == min_diff and number < nearest_value): nearest_value = number min_diff = diff return nearest_value"},{"question":"Write a function to count the number of distinct characters in a string.","solution":"def count_distinct_characters(s): Returns the number of distinct characters in the string s. return len(set(s))"},{"question":"Write a function to remove all occurrences of a specified value from an array.","solution":"def remove_value(array, value): Removes all occurrences of the specified value from the array. Parameters: array (list): The list from which to remove the value. value: The value to remove from the list. Returns: list: A new list with the specified value removed. return [item for item in array if item != value]"},{"question":"Write a function to calculate the sum of an array of integers. The function should take as input the array of integers and return the sum. If the array is empty, the function should return 0. Also, handle potential errors gracefully by returning an appropriate error message if the input is not valid.","solution":"def sum_array(arr): Returns the sum of an array of integers. If the array is empty, returns 0. If the input is not valid, returns an appropriate error message. if not isinstance(arr, list): return \\"Input must be an array\\" if not all(isinstance(x, int) for x in arr): return \\"All elements in the array must be integers\\" return sum(arr)"},{"question":"Write a function to find the number of islands in a boolean 2D matrix. An island is surrounded by water and is formed by connecting adjacent land cells (i.e., horizontally or vertically).","solution":"def count_islands(matrix): Returns the number of islands in a given 2D boolean matrix. if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) def dfs(matrix, x, y): if x < 0 or x >= rows or y < 0 or y >= cols or not matrix[x][y]: return matrix[x][y] = False # Mark the current cell as visited dfs(matrix, x + 1, y) dfs(matrix, x - 1, y) dfs(matrix, x, y + 1) dfs(matrix, x, y - 1) island_count = 0 for i in range(rows): for j in range(cols): if matrix[i][j]: island_count += 1 dfs(matrix, i, j) return island_count"},{"question":"Write a function to check if a given string is a permutation of a palindrome. A palindrome reads the same forwards and backwards. A permutation is a rearrangement of the characters. For example, \\"civic\\" and \\"ivicc\\" are permutations of each other and palindromes. However, \\"ivic\\" is a permutation of \\"ivicc\\" but not a palindrome itself.","solution":"def is_permutation_of_palindrome(s): Check if the given string is a permutation of a palindrome. Args: s (str): The input string. Returns: bool: True if the string is a permutation of a palindrome, False otherwise. # Remove spaces and convert to lowercase for uniformity s = s.replace(' ', '').lower() # Count the frequency of each character char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be permuted to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"Write a function to find all the numbers from 1 to n in a given string s, where the numbers are separated by commas.","solution":"def find_numbers_in_string(s, n): Finds all the numbers from 1 to n in a given string s where numbers are separated by commas. Returns a list of such numbers. numbers_found = [] numbers = s.split(',') for number in numbers: try: if 1 <= int(number) <= n: numbers_found.append(int(number)) except ValueError: continue return numbers_found"},{"question":"Write a function to remove all the even numbers from a list and return the new list.","solution":"def remove_even_numbers(lst): Removes all the even numbers from a list and returns the new list. Args: lst (list): A list of integers. Returns: list: A list with all even numbers removed. return [num for num in lst if num % 2 != 0]"},{"question":"Write a function to compute the moving average of a list of integers over a rolling window of a specified size. The function should return a list of moving averages for each window position.","solution":"def moving_average(arr, window_size): Computes the moving average of a list of integers over a rolling window of a specified size. Parameters: arr (list of int): List of integers. window_size (int): Size of the rolling window. Returns: list of float: List of moving averages. if window_size <= 0: raise ValueError(\\"Window size must be greater than 0\\") if len(arr) < window_size: return [] result = [] window_sum = 0 for i in range(len(arr)): window_sum += arr[i] if i >= window_size: window_sum -= arr[i - window_size] if i >= window_size - 1: result.append(window_sum / window_size) return result"},{"question":"Write a function to identify the longest unsorted contiguous subarray. The unsorted subarray should contain all the unique elements from the original array.","solution":"def longest_unsorted_contiguous_subarray(arr): Identifies the longest unsorted contiguous subarray that contains all the unique elements from the original array. if not arr: return [] n = len(arr) unique_elements = set(arr) total_unique_count = len(unique_elements) left = 0 longest_subarray = [] unique_count = {} for right in range(n): if arr[right] in unique_count: unique_count[arr[right]] += 1 else: unique_count[arr[right]] = 1 while len(unique_count) == total_unique_count: if not longest_subarray or right - left + 1 > len(longest_subarray): longest_subarray = arr[left:right+1] unique_count[arr[left]] -= 1 if unique_count[arr[left]] == 0: del unique_count[arr[left]] left += 1 return longest_subarray"},{"question":"Write a function to solve a binary search algorithm without recursion. Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one.","solution":"def binary_search(arr, target): Perform a binary search on a sorted array to find the index of the target element. Args: arr (list): A list of sorted elements target: The element to search for Returns: int: The index of the target element if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find the sum of all even numbers in a given array. The function should take an array of integers as input and return the sum of the even numbers in that array. For example, if the input is [1, 2, 3, 4, 5, 6], the function should return 12 because 2 + 4 + 6 = 12.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the given array. :param arr: List of integers :return: Sum of even integers in the array return sum(x for x in arr if x % 2 == 0)"},{"question":"Write a function to connect nodes at the same level in a binary tree. The function should take the root of the binary tree as input and connect the nodes of the same level using a special pointer called \`next\`. Each node's \`next\` pointer should point to the next node in the same level, or NULL if there is no next node.","solution":"class TreeLinkNode: def __init__(self, x): self.val = x self.left = None self.right = None self.next = None def connect(root): Connects nodes at the same level in a binary tree. Args: root (TreeLinkNode): The root node of the binary tree. if not root: return # Initialize pointers current = root # Current node of current level next_level_start = None # Starting node of next level prev = None # Previous node processed in the next level while current: while current: # Process the children of the current node if current.left: if prev: prev.next = current.left else: next_level_start = current.left prev = current.left if current.right: if prev: prev.next = current.right else: next_level_start = current.right prev = current.right # Move to the next node in the current level current = current.next # Move to the next level current = next_level_start next_level_start = None prev = None"},{"question":"Write a function to generate a list of numbers from 1 to N, where N is an odd integer. The function should also filter out the numbers that are multiples of 3 and replace those multiples with the string \\"Fizz\\". If N is an even number, the function should filter out the numbers that are multiples of 3 and replace those multiples with the string \\"Fizz\\", and also filter out the numbers that are multiples of 5 and replace those multiples with the string \\"Buzz\\". If N is a negative number, the function should return an empty list.","solution":"def generate_numbers(N): Generates a list of numbers from 1 to N with specific rules: - If N is an odd number: replace multiples of 3 with \\"Fizz\\" - If N is an even number: replace multiples of 3 with \\"Fizz\\" and multiples of 5 with \\"Buzz\\" - If N is negative: return an empty list if N < 0: return [] result = [] for i in range(1, N + 1): if N % 2 != 0: # N is odd if i % 3 == 0: result.append(\\"Fizz\\") else: result.append(i) else: # N is even if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") # Adding FizzBuzz for consistency in FizzBuzz's common rule elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(i) return result"},{"question":"Write a function to find the maximum number of occurrences of a substring in a string. The function should take two parameters: the main string and the substring to be counted.","solution":"def max_occurrences(main_string, substring): Returns the maximum number of occurrences of the substring in the main string. Args: main_string (str): The string in which to search. substring (str): The string to count occurrences of. Returns: int: The number of occurrences of the substring in the main string. if not substring: return 0 return main_string.count(substring)"},{"question":"Write a function to sort an array using the bubble sort algorithm in Python. Also include steps to test the function with various inputs.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort algorithm. n = len(arr) for i in range(n): # Track if any swaps happen; if none, the array is already sorted swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the elements are in the wrong order arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the array is sorted if not swapped: break return arr"},{"question":"Write a function to generate prime numbers below a given limit using the Sieve of Eratosthenes algorithm. The function should return a list of prime numbers up to and including the limit.","solution":"def sieve_of_eratosthenes(limit): Generates prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. :param limit: Integer, the upper limit to generate prime numbers :return: List of prime numbers up to and including the limit if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not primes for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a function to check if a string is a palindrome using a stack data structure in Go. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome(s): Check if the provided string is a palindrome using a stack data structure. Args: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. import re # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Using a list as a stack stack = [] # Push all characters of cleaned_string to stack for char in cleaned_string: stack.append(char) # Form the reverse of cleaned_string by popping from stack reversed_string = ''.join([stack.pop() for _ in range(len(stack))]) return cleaned_string == reversed_string"},{"question":"Write a function to find the nth Fibonacci number using recursion. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, and so on.","solution":"def fib(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2)"},{"question":"Write a function to merge two binary search trees (BSTs) into a single BST. The function should return the root of the new BST. The new BST should contain all the nodes from both input BSTs and maintain the BST property.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def bst_to_sorted_list(root): Converts a BST to a sorted list. if not root: return [] return bst_to_sorted_list(root.left) + [root.value] + bst_to_sorted_list(root.right) def sorted_list_to_bst(nums): Converts a sorted list to a balanced BST. if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_list_to_bst(nums[:mid]) root.right = sorted_list_to_bst(nums[mid+1:]) return root def merge_bsts(root1, root2): Merges two BSTs into one new BST. list1 = bst_to_sorted_list(root1) list2 = bst_to_sorted_list(root2) merged_list = sorted(list1 + list2) return sorted_list_to_bst(merged_list)"},{"question":"Write a function to calculate the sum of the first \`n\` terms of the Fibonacci sequence.","solution":"def fibonacci_sum(n): Returns the sum of the first n terms of the Fibonacci sequence. if n <= 0: return 0 fib = [0, 1] for i in range(2, n): fib.append(fib[i-1] + fib[i-2]) return sum(fib[:n])"},{"question":"Write a function to solve the problem \\"Valid Anagram\\" in Python. The problem statement is: Given two strings s and t, write a function to determine if the two strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the input strings \\"listen\\" and \\"silent\\" should return True because they are anagrams.","solution":"def is_anagram(s, t): Determine if the two strings s and t are anagrams. Args: s (str): First input string. t (str): Second input string. Returns: bool: True if s and t are anagrams, False otherwise. return sorted(s) == sorted(t)"},{"question":"Write a function to find the second smallest number in a list of integers. If the list has less than two unique elements, return -1. Ensure the function handles both positive and negative numbers.","solution":"def second_smallest(numbers): Returns the second smallest number in a list of integers. If the list has less than two unique elements, returns -1. if len(numbers) < 2: return -1 unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to calculate the Fibonacci sequence up to the nth number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first five numbers in the Fibonacci sequence are 0, 1, 1, 2, and 3. Please provide a function that takes an integer \`n\` and returns a list containing the Fibonacci sequence up to the nth number.","solution":"def fibonacci(n): Returns a list of the Fibonacci sequence up to the nth number. Parameters: n (int): The length of the Fibonacci sequence. Returns: list: The Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to print numbers from 1 to n, but with a twist. If the number is divisible by 3, print \\"Fizz\\" instead of the number; if the number is divisible by 5, print \\"Buzz\\" instead; if the number is divisible by both 3 and 5, print \\"FizzBuzz\\". If none of these conditions are met, simply print the number.","solution":"def fizzbuzz(n): Prints numbers from 1 to n with the following conditions: - If the number is divisible by 3, prints \\"Fizz\\" - If the number is divisible by 5, prints \\"Buzz\\" - If the number is divisible by both 3 and 5, prints \\"FizzBuzz\\" - Otherwise, prints the number result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to generate all subsets of a given set. For example, given the set \`{1, 2, 3}\`, the function should return \`{{}, {1}, {2}, {1, 2}, {3}, {1, 3}, {2, 3}, {1, 2, 3}}\`.","solution":"def generate_subsets(input_set): Returns all subsets of the input set. Args: input_set (set): A set of elements. Returns: List[set]: A list of all subsets of the input set. from itertools import chain, combinations s = list(input_set) return [set(combo) for combo in chain.from_iterable(combinations(s, r) for r in range(len(s)+1))]"},{"question":"Write a function to count the number of occurrences of a given element in a list (array) in Python.","solution":"def count_occurrences(lst, element): Returns the number of occurrences of a given element in a list. Parameters: lst (list): The list in which to count the occurrences of the element. element: The element to count the occurrences of. Returns: int: The number of occurrences of the element in the list. return lst.count(element)"},{"question":"Write a function to calculate the nth Fibonacci number using a recursive approach. The Fibonacci sequence starts with F(0) = 0 and F(1) = 1, and each subsequent number is the sum of the previous two (i.e., F(n) = F(n-1) + F(n-2)).","solution":"def fibonacci(n): Calculates the nth Fibonacci number using recursion. Parameters: n (int): The position in the Fibonacci sequence to calculate. Returns: int: The nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to calculate the factorial of a given number n using recursion in Python. You should handle the base case where n is 0 or 1, and the recursive case where n is greater than 1.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to reverse the order of characters in a string s, return the reversed string.","solution":"def reverse_string(s): Returns the reversed order of characters in the string s. return s[::-1]"},{"question":"Write a function to return the first position of the target number in a sorted array. If the target number is not found, return -1. The array may contain duplicate elements.","solution":"def find_first_position(arr, target): Returns the first position of the target number in a sorted array. If the target number is not found, returns -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: result = mid right = mid - 1 elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Write a function to reverse a stack using recursion without using an additional stack. Ensure that each function call does not store more than one item.","solution":"def insert_at_bottom(stack, item): if len(stack) == 0: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse_stack(stack): if len(stack) > 0: temp = stack.pop() reverse_stack(stack) insert_at_bottom(stack, temp)"},{"question":"Write a function to check if the given list has duplicates or not.","solution":"def has_duplicates(lst): Checks if the given list has any duplicates. Parameters: lst (list): The list to check for duplicates. Returns: bool: True if duplicates are found, False otherwise. return len(lst) != len(set(lst))"},{"question":"Write a function to check if all the elements of a given list are present in another list. You should return True if all elements are present, otherwise return False.","solution":"def all_elements_present(sub_list, main_list): Checks if all elements of sub_list are present in main_list. Parameters: sub_list (list): The list to check for elements. main_list (list): The list to check within. Returns: bool: True if all elements of sub_list are in main_list, False otherwise. return all(elem in main_list for elem in sub_list)"},{"question":"Write a function to multiply two numbers stored in two variables, \`num1\` and \`num2\`, and return their product.","solution":"def multiply(num1, num2): Returns the product of num1 and num2. return num1 * num2"},{"question":"Write a function to find the two smallest numbers in a list.","solution":"def find_two_smallest(numbers): Finds and returns the two smallest numbers in a list. Parameters: numbers (list): A list of numbers. Returns: tuple: A tuple containing the two smallest numbers. if len(numbers) < 2: raise ValueError(\\"List must contain at least two elements\\") sorted_numbers = sorted(numbers) return sorted_numbers[0], sorted_numbers[1]"},{"question":"Write a function to convert an integer to a hexadecimal string. How can I achieve this?","solution":"def int_to_hex(n): Converts an integer to a hexadecimal string. Parameters: n (int): The integer to convert. Returns: str: The hexadecimal string representation of the integer. if n < 0: raise ValueError(\\"Only non-negative integers are allowed\\") return hex(n)[2:] # hex() returns a string starting with '0x', so we strip the first 2 characters."},{"question":"Write a function to find the length of the longest common subsequence (LCS) between two strings using dynamic programming.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2 using dynamic programming. m = len(str1) b = len(str2) # Creating a 2D array to store the lengths of longest common subsequence. dp = [[0] * (b + 1) for _ in range(m + 1)] # Filling the dp array for i in range(1, m + 1): for j in range(1, b + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][b]"},{"question":"Write a function to replace all occurrences of a given word in a string with another word. The function should handle case sensitivity and also replace whole words only, not parts of words.","solution":"import re def replace_word(text, old_word, new_word): Replaces all occurrences of old_word in text with new_word. It handles case sensitivity and replaces whole words only. Args: text (str): The string in which the word replacement has to be done. old_word (str): The word that needs to be replaced. new_word (str): The word to replace the old_word with. Returns: str: The modified string with old_word replaced by new_word. pattern = r'b{}b'.format(re.escape(old_word)) replaced_text = re.sub(pattern, new_word, text) return replaced_text"},{"question":"Write a function to calculate the factorial of a given number using recursion. What are the potential issues and errors that might arise?","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the first occurrence of a number less than \`k\` in a list \`arr\`. If no such number exists, return -1.","solution":"def first_occurrence_less_than_k(arr, k): Returns the first occurrence of a number less than \`k\` in the list \`arr\`. If no such number exists, return -1. for num in arr: if num < k: return num return -1"},{"question":"Write a function to remove duplicates from a sorted list and return a new list with unique elements. The order of the elements should be maintained.","solution":"def remove_duplicates_from_sorted_list(sorted_list): Removes duplicates from a sorted list and returns a new list with unique elements. Parameters: sorted_list (list): A list of sorted elements. Returns: list: A new list with unique elements. if not sorted_list: return [] unique_list = [sorted_list[0]] for element in sorted_list[1:]: if element != unique_list[-1]: unique_list.append(element) return unique_list"},{"question":"Write a function to generate a random binary number of a specified length. The function should take a single parameter, \`length\`, which indicates the number of bits the binary number should have. The function should return a string representing the binary number.","solution":"import random def generate_random_binary(length): Generates a random binary number of specified length. Parameters: length (int): The number of bits in the binary number. Returns: str: A string representing the random binary number. return ''.join(random.choice('01') for _ in range(length))"},{"question":"Write a function to calculate the sum of a given array of integers, but only consider the integers that are greater than a specified threshold. The function should return the total sum of these integers.","solution":"def sum_above_threshold(arr, threshold): Returns the sum of elements in arr that are greater than the specified threshold. Parameters: arr (list of int): The list of integers. threshold (int): The threshold value. Returns: int: The sum of integers that are greater than the threshold. return sum(x for x in arr if x > threshold)"},{"question":"Write a function to calculate the number of tabs in a given string.","solution":"def count_tabs(input_string): Returns the number of tabs in the given string. return input_string.count('t')"},{"question":"Write a function to return the most frequent character in a string. If there are multiple characters with the same highest frequency, return all of them. The function should handle cases where the input string is empty.","solution":"def most_frequent_char(s): Returns the most frequent character(s) in a string. If there are multiple characters with the same highest frequency, returns all of them in a list. If the input string is empty, returns an empty list. if not s: return [] freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 max_freq = max(freq.values()) most_frequent = [char for char, count in freq.items() if count == max_freq] return most_frequent"},{"question":"Write a function to calculate the number of days between two dates in Python.","solution":"from datetime import datetime def days_between_dates(date1, date2): Calculate the number of days between two dates. Args: date1 (str): The first date in the format 'YYYY-MM-DD'. date2 (str): The second date in the format 'YYYY-MM-DD'. Returns: int: The number of days between the two dates. d1 = datetime.strptime(date1, '%Y-%m-%d') d2 = datetime.strptime(date2, '%Y-%m-%d') return abs((d2 - d1).days)"},{"question":"Write a function to count the number of elements in a binary tree that satisfy a given condition.","solution":"class TreeNode: A class to represent a node in a binary tree. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_elements(root, condition): Counts the number of elements in the binary tree that satisfy the given condition. Args: root (TreeNode): The root node of the binary tree. condition (function): A function that takes an integer value and returns True if the condition is satisfied, False otherwise. Returns: int: The count of elements satisfying the condition. if root is None: return 0 count = 0 if condition(root.value): count += 1 count += count_elements(root.left, condition) count += count_elements(root.right, condition) return count"},{"question":"Write a function to convert a number from binary to decimal in Python. You should handle both positive and negative binary numbers. How would you structure the function to manage both cases?","solution":"def binary_to_decimal(binary): Converts a binary number (as a string) to its decimal equivalent. Handles both positive and negative binary numbers. Args: binary (str): A string representing a binary number Returns: int: Decimal equivalent of the binary number if binary[0] == '-': # if the binary number is negative return -int(binary[1:], 2) else: # if the binary number is positive return int(binary, 2)"},{"question":"Write a function to calculate the factorial of a given number n, without using recursion.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Negative numbers do not have a factorial.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to generate the first \`n\` numbers in the Fibonacci sequence.","solution":"def fibonacci(n): Generate the first n numbers in the Fibonacci sequence. Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to solve a maze using recursion. The maze is represented as a 2D grid, where 0 represents a path and 1 represents a wall. The function should return True if a path exists from the top-left corner to the bottom-right corner, and False otherwise. The function should not modify the maze grid.","solution":"def solve_maze(maze): Solves the maze using recursion. Returns True if a path exists from the top-left corner to the bottom-right corner, False otherwise. maze: List of Lists representing the maze grid where 0 is path and 1 is wall. def is_valid_move(x, y): Checks if the move to the coordinates (x, y) is valid. if 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0: return True return False def solve(x, y, visited): Recursively explores the maze to find a path from (x, y) to the bottom-right corner. # If we reached the bottom-right corner, return True if (x, y) == (len(maze) - 1, len(maze[0]) - 1): return True # Mark the current position as visited visited.add((x, y)) # Explore the possible directions: right, down, left, up for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: new_x, new_y = x + dx, y + dy if is_valid_move(new_x, new_y) and (new_x, new_y) not in visited: if solve(new_x, new_y, visited): return True # If none of the moves worked, return False return False return solve(0, 0, set())"},{"question":"Write a function to remove the nth node from the end of a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_nth_from_end(head, n): Removes the nth node from the end of the linked list and returns the head of the modified list. :param head: ListNode - The head of the linked list. :param n: int - The position of the node from the end of the list to be removed. :return: ListNode - The head of the modified linked list. # Create a dummy node, which eases handling edge cases such as removing the head dummy = ListNode(0, head) # Initialize two pointers - both start at the dummy node first = dummy second = dummy # Move the first pointer so that it is n+1 steps ahead for _ in range(n + 1): first = first.next # Move both pointers until the first one hits the end while first: first = first.next second = second.next # Remove the nth node from the end second.next = second.next.next # Return the head of the modified list return dummy.next"},{"question":"Write a function to count the number of days in a given month and year. For example, the function should return 31 for January 2020, 29 for February 2020, etc.","solution":"import calendar def days_in_month(year, month): Returns the number of days in the specified month and year. Parameters: year (int): The year as a four-digit number. month (int): The month as a number between 1 and 12. Returns: int: Number of days in the month. return calendar.monthrange(year, month)[1]"},{"question":"Write a function to calculate the factorial of a given number using recursion in Python and verify the correctness of the code using unittest.","solution":"def factorial(n): Returns the factorial of the given number using recursion. if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the intersection of two integer arrays.","solution":"def intersection(arr1, arr2): Returns the intersection of two integer arrays. The intersection of two arrays is a list of elements that are present in both arrays. set1 = set(arr1) set2 = set(arr2) return list(set1 & set2)"},{"question":"Write a function to find the total files in a given directory.","solution":"import os def count_files_in_directory(directory): Returns the total number of files in the given directory. if not os.path.isdir(directory): raise ValueError(\\"The provided path is not a directory\\") file_count = 0 for root, dirs, files in os.walk(directory): file_count += len(files) return file_count"},{"question":"Write a function to calculate the mean, median, and mode of a given list of numbers. Provide a function that calculates these three statistics for an input list of numbers.","solution":"from collections import Counter from typing import List, Tuple def mean_median_mode(numbers: List[int]) -> Tuple[float, float, List[int]]: Calculate and return the mean, median, and mode of a list of numbers. :param numbers: List of integers. :return: A tuple containing mean, median, and mode of the input list. if not numbers: raise ValueError(\\"The input list is empty.\\") # Mean mean_val = sum(numbers) / len(numbers) # Median sorted_numbers = sorted(numbers) n = len(numbers) if n % 2 == 1: median_val = sorted_numbers[n // 2] else: median_val = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 # Mode frequency = Counter(numbers) max_count = max(frequency.values()) mode_val = [num for num, count in frequency.items() if count == max_count] return mean_val, median_val, mode_val"},{"question":"Write a function to check if a list of integers is monotonically increasing or decreasing. A list is considered monotonically increasing if for all i <= j, nums[i] <= nums[j], and monotonically decreasing if for all i <= j, nums[i] >= nums[j].","solution":"def is_monotonic(nums): Returns True if the list of integers is monotonically increasing or decreasing, otherwise returns False. if not nums: return True increasing = decreasing = True for i in range(1, len(nums)): if nums[i] > nums[i - 1]: decreasing = False if nums[i] < nums[i - 1]: increasing = False return increasing or decreasing"},{"question":"Write a function to find the merge point of two singly-linked lists. You are given two heads to the linked lists, head1 and head2. Return the node at which the two lists merge. If the two linked lists have no intersection at all, return null.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def get_intersection_node(head1, head2): Find the merge point of two singly-linked lists. if not head1 or not head2: return None # Get the lengths of both linked lists def get_length(head): length = 0 while head: length += 1 head = head.next return length len1 = get_length(head1) len2 = get_length(head2) # Align both pointers for the longer linked list if len1 > len2: for _ in range(len1 - len2): head1 = head1.next else: for _ in range(len2 - len1): head2 = head2.next # Move both pointers at the same pace until they meet or reach the end while head1 and head2: if head1 == head2: return head1 head1 = head1.next head2 = head2.next return None"},{"question":"Write a function to check if a given binary tree is a subtree of another binary tree. A subtree of a binary tree T is a tree consisting of a node in T and all of its descendants in T.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_subtree(s, t): Returns True if tree t is a subtree of s, otherwise returns False. if not t: return True if not s: return False if is_same_tree(s, t): return True return is_subtree(s.left, t) or is_subtree(s.right, t) def is_same_tree(s, t): Helper function to check if two trees are identical. if not s and not t: return True if s and t and s.val == t.val: return is_same_tree(s.left, t.left) and is_same_tree(s.right, t.right) return False"},{"question":"Write a function to perform a breadth-first search (BFS) starting from node 1 in a graph represented as an adjacency list. The graph may contain duplicate edges but should not contain self-loops. Each node has a unique identifier from 1 to N. The BFS should return the shortest path from node 1 to all other nodes, where distances are represented in steps. If there is no path from node 1 to a certain node, the distance should be represented by \`None\`.","solution":"from collections import deque, defaultdict def bfs_shortest_path(graph, start): Performs BFS on an adjacency list represented graph starting from node 1. Returns the shortest path (in steps) from node 1 to all other nodes. If a node is not reachable from node 1, its path distance is represented by None. distances = {node: None for node in graph} distances[start] = 0 queue = deque([start]) while queue: current = queue.popleft() current_distance = distances[current] for neighbor in graph[current]: if distances[neighbor] is None: distances[neighbor] = current_distance + 1 queue.append(neighbor) return distances"},{"question":"Write a function to calculate the area of a rectangle given its length and width. The result should be rounded to two decimal places. If the input values for length or width are not positive real numbers, the function should return \`-1\`.","solution":"def area_of_rectangle(length, width): Returns the area of a rectangle given its length and width, rounded to two decimal places. Returns -1 if either length or width are not positive real numbers. if not isinstance(length, (int, float)) or not isinstance(width, (int, float)): return -1 if length <= 0 or width <= 0: return -1 area = length * width return round(area, 2)"},{"question":"Write a function to find the maximum depth of a binary tree. The function should use breadth-first search (BFS) to traverse the tree level by level.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): if not root: return 0 queue = deque([root]) depth = 0 while queue: level_length = len(queue) depth += 1 for _ in range(level_length): node = queue.popleft() if node.left: queue.append(node.left) if node.right: queue.append(node.right) return depth"},{"question":"Write a function to print numbers from 1 to n in Python. Also, add exception handling to manage cases where n is not a positive integer.","solution":"def print_numbers_up_to(n): Prints numbers from 1 to n. Raises ValueError if n is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") result = [] for i in range(1, n + 1): result.append(i) return result"},{"question":"Write a function to find the maximum profit that can be made by buying and selling a single stock on the stock market. You can only buy and sell once, and you must buy before you sell. For example, the input [7,1,5,3,6,4] would return 5, since buying at a price of 1 and selling at a price of 6 gives a profit of 5. If no profit can be made, return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of stock prices. You can only buy and sell once, and you must buy before you sell. :param prices: List of prices where each element represents the price of a stock on a given day :type prices: List[int] :return: Maximum profit :rtype: int if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to convert a given array of integers into a string representation of a sorted list, where each integer is enclosed in square brackets. For example, the input array \`[1, 3, 2, 4]\` should be converted to the string \`[[1], [2], [3], [4]]\`. How would you implement this in Python? Can you provide sample code and explain the steps involved?","solution":"def array_to_sorted_string(arr): Converts a given array of integers into a string representation of a sorted list, where each integer is enclosed in square brackets. Args: - arr: List of integers Returns: - A string representing the sorted list with each integer in square brackets # Sort the input array sorted_arr = sorted(arr) # Convert each integer to its string representation enclosed in square brackets result = ', '.join(f'[{num}]' for num in sorted_arr) # Return the final string return f'[{result}]'"},{"question":"Write a function to convert a decimal number to its binary representation as a string. The function should handle both positive and negative integers. For negative integers, the function should represent them using two's complement binary.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. For negative integers, it uses two's complement binary. if n == 0: return '0' # Handle negative numbers for two's complement binary representation if n < 0: n = (1 << 32) + n binary_str = bin(n)[2:] # Remove the '0b' prefix return binary_str"},{"question":"Write a function to check if a given number is a palindrome or not. A number is considered a palindrome if it remains the same when its digits are reversed.","solution":"def is_palindrome(number): Returns True if the given number is a palindrome, False otherwise. str_number = str(number) return str_number == str_number[::-1]"},{"question":"Write a function to find the median of three numbers. The function should take three integer values as input and return the median of the three numbers.","solution":"def median_of_three(a, b, c): Returns the median of three numbers. numbers = [a, b, c] numbers.sort() return numbers[1]"},{"question":"Write a function to detect and kill a loop in a singly linked list. I want to avoid any extra space and use principles of Floyd's cycle detection.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_and_kill_loop(head): Detects and removes a loop in a singly linked list using Floyd's cycle-finding algorithm. Parameters: head (ListNode): The head of the singly linked list. # Step 1: Detect loop using Floyd's cycle detection algorithm slow = fast = head while slow and fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Loop detected break else: return # No loop found # Step 2: Find the start of the loop slow = head while slow != fast: slow = slow.next fast = fast.next # Step 3: Remove the loop by finding the previous node to slow/fast while fast.next != slow: fast = fast.next fast.next = None"},{"question":"Write a function to solve a puzzle that involves grouping letters into words that are 5 or more characters long. The puzzle is represented as a 2D array of characters. Each group of characters can flow horizontally, vertically, or diagonally. Words must not be broken. The function should return a list of valid words found in the puzzle.","solution":"def find_words(puzzle, min_length=5): Finds all words in the puzzle that are at least min_length characters long. Words can be formed horizontally, vertically, or diagonally. Parameters: puzzle (list of list of str): 2D array of characters representing the puzzle. min_length (int): Minimum length of words to be found. Returns: list of str: List of valid words found in the puzzle. if not puzzle or not puzzle[0]: return [] rows, cols = len(puzzle), len(puzzle[0]) valid_words = [] # Helper function to collect words in a particular direction def collect_words(start_r, start_c, delta_r, delta_c): word = \\"\\" r, c = start_r, start_c while 0 <= r < rows and 0 <= c < cols: word += puzzle[r][c] if len(word) >= min_length: valid_words.append(word) r += delta_r c += delta_c # Collect words horizontally and vertically for r in range(rows): for c in range(cols): collect_words(r, c, 0, 1) # Horizontal to the right collect_words(r, c, 1, 0) # Vertical downwards # Collect words diagonally for r in range(rows): for c in range(cols): collect_words(r, c, 1, 1) # Diagonal down-right collect_words(r, c, 1, -1) # Diagonal down-left return list(set(valid_words)) # Remove duplicates"},{"question":"Write a function to insert an element into a sorted list while maintaining the sort order.","solution":"def insert_into_sorted_list(sorted_list, element): Inserts an element into a sorted list while maintaining the sort order. :param sorted_list: List of sorted elements (ascending order) :param element: The element to be inserted :return: New list with the element inserted while maintaining sort order. # Find the correct position to insert the element index = 0 while index < len(sorted_list) and sorted_list[index] < element: index += 1 # Insert the element at the correct position return sorted_list[:index] + [element] + sorted_list[index:]"},{"question":"Write a function to find the minimum number in a rotated sorted array in constant logarithmic time. The array may contain duplicates. Explain the method used and how it handles duplicates.","solution":"def find_min_in_rotated_sorted_array(nums): This function returns the minimum number in a rotated sorted array, which may contain duplicates, in O(log n) time. The approach used is a variation of binary search: - Keep two pointers, left and right, initialized to 0 and len(nums) - 1. - While left is less than right: - Calculate the middle index. - Compare the middle element with the element at the right: - If the middle element is less than the element at the right, the minimum must be on the left side, including the middle, so we move right. - If the middle element is greater than the element at the right, the minimum is on the right side, so we move left. - If the middle element is equal to the element at the right, decrement right to skip the duplicate. - Finally, the left pointer will be at the minimum element. left, right = 0, len(nums) - 1 while left < right: mid = left + (right - left) // 2 if nums[mid] < nums[right]: right = mid elif nums[mid] > nums[right]: left = mid + 1 else: right -= 1 return nums[left]"},{"question":"Write a function to find the maximum profit from selling a stock on a single day. Unfortunately, you cannot sell a stock before you buy one. You are given an array of stock prices where prices[i] is the price of a given stock on day i. The function should return the maximum profit that can be made.","solution":"def max_profit(prices): Calculate the maximum profit from a list of stock prices. :param prices: List of stock prices. :return: Maximum profit possible. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to find the minimum or maximum element in a binary tree based on the given direction (min or max).","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def find_extreme_element(root, direction): Given a binary tree root and a direction ('min' or 'max'), find the minimum or maximum element in the binary tree respectively. if root is None: return None if direction == 'min': return find_min(root) elif direction == 'max': return find_max(root) else: raise ValueError(\\"Direction must be 'min' or 'max'.\\") def find_min(node): Recursively find the minimum value in the binary tree. if node.left is None: return node.val return find_min(node.left) def find_max(node): Recursively find the maximum value in the binary tree. if node.right is None: return node.val return find_max(node.right)"},{"question":"Write a function to convert a binary number to its hexadecimal representation.","solution":"def binary_to_hex(binary_str): Converts a binary number (in string format) to its hexadecimal representation. if not all(c in '01' for c in binary_str): raise ValueError(\\"Input should be a binary string\\") hexadecimal = hex(int(binary_str, 2))[2:] return hexadecimal.upper()"},{"question":"Write a function to compare if two lists contain the same elements, regardless of the order. Also, ensure that each element appears exactly twice in both lists.","solution":"def compare_lists(list1, list2): Compares if two lists contain the same elements, regardless of order, ensuring each element appears exactly twice in both lists. from collections import Counter return Counter(list1) == Counter(list2) and all(count == 2 for count in Counter(list1).values())"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers. The array can contain both positive and negative numbers. The function should return the maximum sum possible from any contiguous subarray of the given array.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray within a one-dimensional array of numbers. :param arr: List of integers :return: Maximum sum of any contiguous subarray if not arr: return 0 max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the first repeated character in a string. The function should return the first character that appears more than once, considering the case sensitivity. If no character is repeated, return an empty string.","solution":"def first_repeated_char(s): Finds the first repeated character in the string s. Returns the first character that appears more than once, considering the case sensitivity. If no character is repeated, returns an empty string. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"\\""},{"question":"Write a function to count the number of elements in an array that are greater than a given threshold. The array and threshold should be provided as parameters. Here, I want the function to work specifically with integer arrays.","solution":"def count_greater_than_threshold(arr, threshold): Returns the number of elements in an array that are greater than a given threshold. Parameters: arr (list of int): The array of integers to be evaluated threshold (int): The threshold value to compare against Returns: int: The number of elements in the array that are greater than the threshold return sum(1 for x in arr if x > threshold)"},{"question":"Write a function to sort an array of integers that are in the range [0, 9]. The integers in the array are not unique, and some may appear multiple times. The function should sort the array in-place, which means that it should use a constant amount of additional space. Which algorithm would you use to solve this problem?","solution":"def counting_sort(arr): Sorts an array of integers in the range [0, 9] in-place. # Step 1: Initialize count array count = [0] * 10 # Since the range is [0, 9] # Step 2: Count occurrences of each number for number in arr: count[number] += 1 # Step 3: Reconstruct the sorted array in-place index = 0 for number, frequency in enumerate(count): for _ in range(frequency): arr[index] = number index += 1 return arr # Returning arr to facilitate testing, even though it is sorted in-place"},{"question":"Write a function to find all the duplicate numbers in an array of integers. The function should return a list of all duplicate numbers found, ensuring no duplicates in the returned list, and order the duplicates in ascending order.","solution":"def find_duplicates(arr): Returns a sorted list of unique duplicates found in the input array. Parameters: arr (list): A list of integers. Returns: list: A sorted list of unique duplicate integers. from collections import Counter # Count the occurrences of each number in the array count = Counter(arr) # Extract numbers that have more than one occurrence duplicates = [num for num, freq in count.items() if freq > 1] # Sort the duplicates in ascending order before returning return sorted(duplicates)"},{"question":"Write a function to reverse a string using Python. You need to handle cases where the string might be empty or contain only whitespace.","solution":"def reverse_string(s): Returns the reversed string of s. Handles cases where the string might be empty or contain only whitespace. return s[::-1] if s else s"},{"question":"Write a function to find the largest product of any triplet in an array of integers. The function should return the maximum product.","solution":"def max_product_of_triplet(arr): Returns the maximum product of any triplet in the array. arr.sort() return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"Write a function to convert an integer to a hexadecimal in Python. Show an example where the function works.","solution":"def int_to_hex(n): Converts an integer to its hexadecimal representation. Parameters: n (int): The integer to be converted to hexadecimal. Returns: str: The hexadecimal representation of the integer. if n < 0: raise ValueError(\\"Value must be a non-negative integer\\") return hex(n)[2:].upper() # Example usage # print(int_to_hex(255)) # should print 'FF'"},{"question":"Write a function to determine the number of distinct prime factors of a given number. For example, the number 12 has three distinct prime factors: 2, 3, and 4.","solution":"def distinct_prime_factors(n): Returns the number of distinct prime factors of the given number n. if n <= 1: return 0 prime_factors = set() # Check for number 2 while n % 2 == 0: prime_factors.add(2) n //= 2 # Check for odd numbers from 3 onwards factor = 3 while factor * factor <= n: while n % factor == 0: prime_factors.add(factor) n //= factor factor += 2 # If n is still greater than 2, then it must be a prime number if n > 2: prime_factors.add(n) return len(prime_factors)"},{"question":"Write a function to find the index of a target value in a sorted list using binary search. If the target is not found, return -1.","solution":"def binary_search(arr, target): Perform binary search on a sorted list to find the index of the target value. Parameters: arr (list): The sorted list to search. target (int/float): The target value to find in the list. Returns: int: The index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to calculate the number of nodes in a binary tree. The binary tree may not be balanced.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_nodes(root): Count the number of nodes in a binary tree. :param root: TreeNode, root of the binary tree :return: int, number of nodes in the binary tree if not root: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a function to compare two strings lexicographically, taking into account both uppercase and lowercase letters. For example, compare \\"apple\\" with \\"ณา\\".","solution":"def compare_strings_lexicographically(str1, str2): Compares two strings lexicographically, taking into account both uppercase and lowercase letters. Returns: -1 if str1 < str2 0 if str1 == str2 1 if str1 > str2 if str1 < str2: return -1 elif str1 == str2: return 0 else: return 1"},{"question":"Write a function to remove duplicates from a sorted array and return the new length of the array. After removing duplicates, the function should not allocate extra space for another array; instead, it should modify the input array in-place and return the new length. The relative order of the elements should remain the same.","solution":"def remove_duplicates(nums): Remove duplicates from a sorted array in-place and return the new length. if not nums: return 0 # Initialize the index for the next unique element unique_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i-1]: nums[unique_index] = nums[i] unique_index += 1 return unique_index"},{"question":"Write a function to reverse a linked list without using any extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the given linked list without using any extra space. :param head: ListNode, the head of the linked list. :return: ListNode, the new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next # store next node current.next = prev # reverse the link prev = current # move prev and current one step forward current = next_node return prev"},{"question":"Write a function to find the intersection of two lists in Python. You can use any method to achieve this. However, the function should have a time complexity of O(n log n) or better. How would you do this?","solution":"def intersection(list1, list2): Returns the intersection of two lists. set1 = set(list1) set2 = set(list2) return list(set1.intersection(set2))"},{"question":"Write a function to compute the maximum subarray sum in a \\"circular\\" array. A circular array is one where the end of the array connects to the beginning to form a loop. For example, in a circular array [1, -2, 3, 10], the subarray [3, 10] forms a loop, which contributes to a higher sum than a subarray starting at the beginning. Given an array of numbers which may include both negative and positive integers, write a function that finds the maximum subarray sum considering both linear and circular possibilities.","solution":"def max_subarray_sum_circular(arr): Returns the maximum subarray sum in a circular array. def kadane(a): max_sum = current_sum = a[0] for num in a[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_kadane = kadane(arr) max_wrap = sum(arr) for i in range(len(arr)): arr[i] = -arr[i] max_reverse_kadane = kadane(arr) max_wrap += max_reverse_kadane if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a function to evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). The expression is given as a list of strings where each string is either an operator ('+', '-', '*', '/') or an integer. Valid operators are for addition (+), subtraction (-), multiplication (*), and division (/). The division between two integers should truncate towards zero. Also, the given RPN expression is always valid. An operand must appear before an operator. The stack should be used to keep track of the operands, and when an operator is encountered, the last two operands are popped from the stack, the operation is performed, and the result is pushed back onto the stack.","solution":"def eval_rpn(expression): Evaluates the value of an arithmetic expression in Reverse Polish Notation (RPN). The expression is given as a list of strings where each string is either an operator ('+', '-', '*', '/') or an integer. Valid operators are +, -, *, and /. Division between two integers should truncate towards zero. Args: expression (list of str): The RPN expression. Returns: int: The result of the RPN expression. stack = [] for token in expression: if token in ('+', '-', '*', '/'): right_operand = stack.pop() left_operand = stack.pop() if token == '+': stack.append(left_operand + right_operand) elif token == '-': stack.append(left_operand - right_operand) elif token == '*': stack.append(left_operand * right_operand) elif token == '/': # Perform integer division truncating towards zero stack.append(int(left_operand / right_operand)) else: stack.append(int(token)) return stack[0]"},{"question":"Write a function to calculate the sum of two integers. The function should return the result of the addition.","solution":"def sum_of_two_integers(a, b): Returns the sum of two integers a and b. return a + b"},{"question":"Write a function to find the longest word in a list of words.","solution":"def longest_word(words): Returns the longest word in the list of words. If there are multiple words with the same maximum length, return the first one. if not words: return \\"\\" longest = words[0] for word in words[1:]: if len(word) > len(longest): longest = word return longest"},{"question":"Write a function to calculate the number of elements in a list that are greater than a given threshold.","solution":"def count_elements_greater_than_threshold(lst, threshold): Returns the number of elements in lst that are greater than the given threshold. Parameters: - lst: List of elements (numbers). - threshold: A number representing the threshold. Returns: - count: Integer representing the count of elements greater than the threshold. count = 0 for element in lst: if element > threshold: count += 1 return count"},{"question":"Write a function to find which digits are not present in a given number.","solution":"def missing_digits(number): Returns a list of digits that are not present in the given number. Args: number (int): The number to check for missing digits. Returns: list: A list of missing digits. all_digits = set('0123456789') number_digits = set(str(number)) missing = all_digits - number_digits return sorted(list(missing))"},{"question":"Write a function to find the greatest common divisor (GCD) of two integers using the Euclidean algorithm. I want to understand both the algorithm and how to implement it in Python.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return a"},{"question":"Write a function to calculate the factorial of a number in Python and handle potential errors.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is a non-integer or negative, raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to find all the prime numbers less than a given number n. The function should return a list of these prime numbers.","solution":"def find_primes_less_than(n): Returns a list of prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function to check if a given list of integers is a palindrome. A palindrome list reads the same backward as forward. The function should return \`True\` if the list is a palindrome, and \`False\` otherwise. You can assume the list contains only integers.","solution":"def is_palindrome(lst): Returns True if the list 'lst' is a palindrome, otherwise False. return lst == lst[::-1]"},{"question":"Write a function to reverse the digits of a number in Python. The function should take an integer as input and return the integer with its digits in reverse order.","solution":"def reverse_digits(number): Returns the integer obtained by reversing the digits of the input integer. If the input is negative, the negative sign is retained at the front. is_negative = number < 0 number = abs(number) reversed_number = int(str(number)[::-1]) if is_negative: return -reversed_number else: return reversed_number"},{"question":"Write a function to find the sum of numbers in a list. For instance, the sum of numbers in the list [1, 2, 3] is 6. Implement this in Python.","solution":"def sum_of_list(numbers): Returns the sum of numbers in the list. return sum(numbers)"},{"question":"Write a function to output the string \\"Hello World!\\" using Python.","solution":"def hello_world(): Returns the string \\"Hello World!\\". return \\"Hello World!\\""},{"question":"Write a function to check if given two string arrays are equal. Only the given strings need to be checked and the case-insensitive. The length of the arrays are given and as long as characters present in both arrays are same and in the same frequency then consider them as equal.","solution":"def are_string_arrays_equal(arr1, arr2): Checks if two arrays of strings are equal when concatenated and considered case-insensitively. :param arr1: List of strings :param arr2: List of strings :return: Boolean indicating if the concatenated strings are equal case-insensitively combined_str1 = ''.join(arr1).lower() combined_str2 = ''.join(arr2).lower() return combined_str1 == combined_str2"},{"question":"Write a function to calculate the number of distinct nodes that can be reached by a knight in a chessboard. A knight can move in an 'L' shape, which means it can move two squares in one direction and then one square perpendicular to that direction, or one square in one direction and then two squares perpendicular to that direction. The chessboard is an 8x8 grid, and the knight starts at a given position.","solution":"def knight_moves(x, y): Returns the set of distinct positions that a knight can move to from the start position (x, y) on an 8x8 chessboard. moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] reachable_positions = set() for dx, dy in moves: new_x, new_y = x + dx, y + dy if 0 <= new_x < 8 and 0 <= new_y < 8: reachable_positions.add((new_x, new_y)) return reachable_positions def distinct_knight_reachable_nodes(start_x, start_y): Returns the number of distinct nodes that can be reached by a knight from the start position (start_x, start_y) on an 8x8 chessboard. reachable_positions = knight_moves(start_x, start_y) return len(reachable_positions)"},{"question":"Write a function to determine the \\"Winner of Rock-Paper-Scissors\\" game between two players. The function should take two parameters, each representing a player's choice ('R' for Rock, 'P' for Paper, and 'S' for Scissors). The function should return the result of the game as a string ('Player 1 wins', 'Player 2 wins', or 'Draw'). You should handle all possible combinations of choices and ensure that the function works correctly.","solution":"def rock_paper_scissors(player1, player2): Determines the winner of a Rock-Paper-Scissors game between two players. Parameters: player1 (str): The choice of player 1 ('R', 'P', 'S'). player2 (str): The choice of player 2 ('R', 'P', 'S'). Returns: str: The result of the game ('Player 1 wins', 'Player 2 wins', or 'Draw'). # Mapping game choices to whom they beat wins = { 'R': 'S', # Rock beats Scissors 'P': 'R', # Paper beats Rock 'S': 'P' # Scissors beats Paper } if player1 == player2: return 'Draw' elif wins[player1] == player2: return 'Player 1 wins' else: return 'Player 2 wins'"},{"question":"Write a function to find the intersection of two linked lists. The function should return the intersection node if the two lists intersect, and \`None\` if they do not intersect. You may not modify the lists. How would you approach this problem?","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def get_intersection_node(headA, headB): Returns the intersection node of two linked lists. If the lists do not intersect, returns None. nodes_in_A = set() while headA: nodes_in_A.add(headA) headA = headA.next while headB: if headB in nodes_in_A: return headB headB = headB.next return None"},{"question":"Write a function to make a string capitalized. In this function, you should remove any leading or trailing white spaces and return capitalized text. If the string is already capitalized or is empty, return it as is.","solution":"def capitalize_string(s): Returns the string s with leading and trailing white spaces removed, and the first character capitalized if it is not empty. trimmed_string = s.strip() if len(trimmed_string) == 0: return trimmed_string return trimmed_string[0].upper() + trimmed_string[1:]"},{"question":"Write a function to check if a given integer is a power of 2. If it is, return true; otherwise, return false.","solution":"def is_power_of_two(n): Returns True if n is a power of 2, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to find the second smallest number in a list of integers. If the list has fewer than two distinct numbers, return a special value like \`None\` or -1.","solution":"def second_smallest(numbers): Returns the second smallest number in a list of integers. If the list has fewer than two distinct numbers, returns None. if not numbers or len(numbers) < 2: return None first = second = float('inf') for number in numbers: if number < first: first, second = number, first elif first < number < second: second = number return second if second != float('inf') else None"},{"question":"Write a function to reverse a singly linked list. The function should handle cases where the linked list may or may not be empty and should return the new head of the reversed list. You need to write a recursive solution for this problem.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list recursively. :param head: ListNode, the head node of the linked list :return: ListNode, the new head of the reversed linked list if head is None or head.next is None: return head new_head = reverse_linked_list(head.next) head.next.next = head head.next = None return new_head"},{"question":"Write a function to find the longest palindrome subsequence in a given string. A palindrome subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, in the string \\"babad\\", the palindromic subsequences include \\"b\\", \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"aba\\", but the longest one is \\"aba\\".","solution":"def longest_palindrome_subseq(s): Function to find the longest palindromic subsequence in a given string. :param s: The input string :return: The length of the longest palindromic subsequence n = len(s) dp = [[0] * n for _ in range(n)] # Each character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the DP table for cl in range(2, n+1): for i in range(n-cl+1): j = i+cl-1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1]"},{"question":"Write a function to calculate variance in Python.","solution":"def calculate_variance(numbers): Calculates the variance of a list of numbers. Parameters: numbers (list of float): The list of numbers to calculate the variance for. Returns: float: The variance of the numbers. if not numbers: return 0 mean = sum(numbers) / len(numbers) variance = sum((x - mean) ** 2 for x in numbers) / len(numbers) return variance"},{"question":"Write a function to find the smallest prime number greater than or equal to a given number. Can you provide a code snippet in Python?","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def next_prime(n): Returns the smallest prime number greater than or equal to n. if n <= 1: return 2 prime = n while not is_prime(prime): prime += 1 return prime"},{"question":"Write a function to determine if an input string contains any of the following special characters: #, @, , %, *, ?, +, or {.","solution":"import re def contains_special_characters(input_str): Determines if the input string contains any of the following special characters: #, @, , %, *, ?, +, or {. special_characters = re.compile(r\\"[#@%*?+{]\\") return bool(special_characters.search(input_str))"},{"question":"Write a function to print all even numbers less than N.","solution":"def even_numbers_less_than(n): Returns a list of all even numbers less than n. return [i for i in range(n) if i % 2 == 0]"},{"question":"Write a function to find and print missing numbers from a sequence of integers in a given range.","solution":"def find_missing_numbers(arr, start, end): Returns a list of missing numbers from a sequence of integers in a given range [start, end]. Parameters: arr (list): List of integers which may have some missing numbers in the range [start, end]. start (int): Start of the range. end (int): End of the range. Returns: list: List of missing numbers within the range [start, end]. full_set = set(range(start, end + 1)) arr_set = set(arr) missing_numbers = list(full_set - arr_set) missing_numbers.sort() return missing_numbers"},{"question":"Write a function to find the second largest node in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def find_second_largest(root): Returns the second largest node in the given BST. :param root: The root of the binary search tree. :return: The key of the second largest node. if not root or (not root.left and not root.right): return None # There should be at least two nodes parent = None current = root # Find the largest node while current.right: parent = current current = current.right # If the largest node has a left subtree, the second largest is the rightmost node of that subtree if current.left: second_largest = current.left while second_largest.right: second_largest = second_largest.right return second_largest.key # Otherwise, the second largest is the parent of the largest node return parent.key if parent else None"},{"question":"Write a function to convert a given sentence to title case in Python. Title case is where the first character of each word is converted to uppercase and the remaining characters are in lowercase.","solution":"def to_title_case(sentence): Converts the given sentence to title case. Each word in the sentence will start with an uppercase character followed by lowercase characters. :param sentence: str, the sentence to convert :return: str, the sentence in title case return sentence.title()"},{"question":"Write a function to append a new item to a list in Python and then sort the list in ascending order. How can you achieve this in Python?","solution":"def append_and_sort(lst, item): Appends an item to the list and sorts the list in ascending order. Parameters: lst (list): The list to append and sort. item (any): The item to append to the list. Returns: list: The list with the new item appended and sorted. lst.append(item) lst.sort() return lst"},{"question":"Write a function to find a user by email using Python. Assume that the data is stored in a list of dictionaries, where each dictionary represents a user with keys \\"name\\" and \\"email\\".","solution":"def find_user_by_email(users, email): Finds and returns a user by email from a list of user dictionaries. Parameters: users (list of dict): List of dictionaries where each dictionary contains 'name' and 'email'. email (str): The email to search for. Returns: dict or None: The user dictionary if found, None otherwise. for user in users: if user['email'] == email: return user return None"},{"question":"Write a function to validate the syntax and check if the brackets in a string are balanced. The function should handle multiple types of brackets including (), [], and {}.","solution":"def is_balanced(s): Checks if the brackets in the string s are balanced. Supports (), [], and {}. stack = [] bracket_map = {')': '(', ']': '[', '}': '{'} open_brackets = set(bracket_map.values()) for char in s: if char in open_brackets: stack.append(char) elif char in bracket_map: if stack and stack[-1] == bracket_map[char]: stack.pop() else: return False return not stack"},{"question":"Write a function to calculate the product of all elements in a list, including handling edge cases. What are the common edge cases you need to consider?","solution":"def product_of_elements(lst): Returns the product of all elements in the list. If the list is empty, returns 1. if not lst: return 1 product = 1 for num in lst: product *= num return product"},{"question":"Write a function to calculate the number of permutations of the string \\"abcde\\". Please explain the logic behind the code you write.","solution":"import math def count_permutations(s): Returns the number of permutations of the string s. return math.factorial(len(s)) # Calculate the number of permutations for the string \\"abcde\\" num_permutations = count_permutations(\\"abcde\\") print(num_permutations)"},{"question":"Write a function to check if a number is divisible by all the numbers in a list.","solution":"def is_divisible_by_all(number, divisors): Returns True if the number is divisible by all elements in the list 'divisors', otherwise False. for divisor in divisors: if divisor == 0 or number % divisor != 0: return False return True"},{"question":"Write a function to convert an integer to its Roman numeral representation. The function should be limited to the range of 1 to 3999. I'm looking for a Python solution that's both efficient and easy to read.","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation. The input integer must be in the range from 1 to 3999. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' for i in range(len(val)): while num >= val[i]: roman_num += syb[i] num -= val[i] return roman_num"},{"question":"Write a function to check if a given number is divisible by 3 or 5.","solution":"def is_divisible_by_3_or_5(number): Checks if the given number is divisible by 3 or 5. return number % 3 == 0 or number % 5 == 0"},{"question":"Write a function to check if a given string has repeating characters or not. You should consider both ASCII characters and special characters.","solution":"def has_repeating_characters(s): Returns True if the given string has repeating characters, False otherwise. return len(s) != len(set(s))"},{"question":"Write a function to replace all ith elements with the value of the given index in the list.","solution":"def replace_index_element(lst, idx): Replaces all elements in the list with the value of the given index. Parameters: lst (list): The list of elements. idx (int): The index of the element whose value will replace all elements in the list. Returns: list: The modified list where all elements are replaced by the value at the given index. if not (0 <= idx < len(lst)): raise IndexError(\\"Index out of range\\") value = lst[idx] return [value] * len(lst)"},{"question":"Write a function to reverse the string \\"Hello World\\" in Python.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] # Example usage: # reversed_string = reverse_string(\\"Hello World\\") # print(reversed_string) # Output: \\"dlroW olleH\\""},{"question":"Write a function to remove duplicates from a given list while preserving the original order of elements. How would you implement this in Python and what would be the time complexity of your solution?","solution":"def remove_duplicates(lst): Removes duplicates from the given list while preserving the original order of elements. Parameters: lst (list): A list from which duplicates need to be removed. Returns: list: A list without duplicates, preserving the order of first occurrence. seen = set() result = [] for item in lst: if item not in seen: result.append(item) seen.add(item) return result # The time complexity of this solution is O(n), where n is the number of elements in the input list."},{"question":"Write a function to remove all occurrences of a specific letter from a string. For example, if the letter to be removed is 'a', the function should remove every instance of 'a' from the string \\"banana\\" and return \\"bnn\\".","solution":"def remove_letter(s, letter): Removes all occurrences of the specified letter from the string s. Parameters: s (str): The input string. letter (str): The letter to be removed. Returns: str: The string after removing the specified letter. return s.replace(letter, '')"},{"question":"Write a function to find the largest sum of a contiguous sub-array within a one-dimensional array of numbers which has both positive and negative numbers.","solution":"def max_subarray_sum(arr): Finds the largest sum of a contiguous sub-array within the given one-dimensional array. :param arr: List of integers which can be both positive and negative :return: The largest sum of a contiguous sub-array if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to print the height of a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def tree_height(root): Calculates the height of a binary tree. :param root: TreeNode, root of the binary tree :return: int, height of the binary tree if root is None: return 0 left_height = tree_height(root.left) right_height = tree_height(root.right) return max(left_height, right_height) + 1"},{"question":"Write a function to compute the Fibonacci sequence using an iterative approach. The function should take an integer \`n\` as input and return the nth Fibonacci number.","solution":"def fibonacci(n): Computes the nth Fibonacci number using an iterative approach. Parameters: n (int): The position in the Fibonacci sequence to compute. Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 prev, curr = 0, 1 for _ in range(2, n): prev, curr = curr, prev + curr return curr"},{"question":"Write a function to implement a ”stack “ data structure using two queues. You are allowed to use enqueue and dequeue operations of queues as the operations of stack. The least recently added element should be accessed first, not the most recently. Your basic idea should be to always push an element to end of a queue. Now, using enqueue operation to move older elements of a queue to back. Finally, use the front() operation of queue to access the top of stack.","solution":"from collections import deque class StackUsingQueues: def __init__(self): self.queue1 = deque() self.queue2 = deque() def push(self, x): self.queue2.append(x) while self.queue1: self.queue2.append(self.queue1.popleft()) self.queue1, self.queue2 = self.queue2, self.queue1 def pop(self): if not self.queue1: raise IndexError(\\"pop from an empty stack\\") return self.queue1.popleft() def top(self): if not self.queue1: raise IndexError(\\"top from an empty stack\\") return self.queue1[0] def empty(self): return not self.queue1"},{"question":"Write a function to compute the Greatest Common Divisor (GCD) of two numbers using the Extended Euclidean Algorithm. The function should return both the GCD and the integers x and y such that ax + by = gcd(a, b).","solution":"def extended_gcd(a, b): Returns the greatest common divisor of a and b, along with the coefficients x and y such that ax + by = gcd(a, b). if a == 0: return b, 0, 1 else: gcd, x1, y1 = extended_gcd(b % a, a) x = y1 - (b // a) * x1 y = x1 return gcd, x, y"},{"question":"Write a function to parse a string containing keys and their values and return the data as a dictionary.","solution":"def parse_key_value_string(s): Parses a string containing keys and their values and returns the data as a dictionary. The input string should be formatted with pairs separated by commas and keys and values separated by colons, such as: \\"key1:value1, key2:value2, key3:value3\\" Arguments: s -- input string Returns: A dictionary containing the parsed key-value pairs. result = {} pairs = [pair.strip() for pair in s.split(',')] for pair in pairs: if ':' in pair: key, value = [item.strip() for item in pair.split(':', 1)] result[key] = value return result"},{"question":"Write a function to find the second minimum unique number from an array of integers. If such a number does not exist, return -1.","solution":"def second_min_unique(arr): Returns the second minimum unique number in the array. If the second minimum unique number does not exist, returns -1. unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to solve the Josephus problem using dynamic programming in Python. The Josephus problem is a theoretical problem related to a certain elimination game. People are standing in a circle waiting to be executed. Starting from the first person, every k-th person is executed, and the process continues in a clockwise direction until no one is left.","solution":"def josephus(n, k): Solves the Josephus problem. n: int - the number of people standing in the circle k: int - every k-th person will be eliminated Returns the position (0-based) of the last remaining person. if n == 1: return 0 # The base case # Recursive case: \`josephus(n - 1, k)\` finds the solution for one person fewer return (josephus(n - 1, k) + k) % n"},{"question":"Write a function to determine whether a given list of numbers can be partitioned into two subsets such that the sum of numbers in both subsets is equal.","solution":"def can_partition(nums): Determines whether a given list of numbers can be partitioned into two subsets such that the sum of numbers in both subsets is equal. :param nums: List of integers :return: Boolean, True if the list can be partitioned into two subsets with equal sum, otherwise False total_sum = sum(nums) # If total sum is odd, it can't be partitioned into two equal subsets if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(nums) # Initialize a dp array dp = [False] * (target_sum + 1) dp[0] = True # Update the dp array for num in nums: for j in range(target_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target_sum]"},{"question":"Write a function to calculate the maximum profit that can be made from at most k transactions on a given list of stock prices. You can complete as many transactions as you like, but you must sell the stock before you buy again, and you cannot engage in multiple transactions simultaneously.","solution":"def max_profit_with_k_transactions(prices, k): if not prices or k == 0: return 0 n = len(prices) if k >= n // 2: # In this case, it's equivalent to unlimited transactions return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1)) dp = [[0] * n for _ in range(k + 1)] for t in range(1, k + 1): max_diff = -prices[0] for d in range(1, n): dp[t][d] = max(dp[t][d - 1], prices[d] + max_diff) max_diff = max(max_diff, dp[t - 1][d] - prices[d]) return dp[k][n - 1]"},{"question":"Write a function to segregate 0s and 1s in an array in a single traversal. The function should rearrange the array such that all 0s come before 1s and the order of 0s and 1s should be the same as in the original array as much as possible. The function should work correctly for any size of input array.","solution":"def segregate_zeros_and_ones(arr): Segregates 0s and 1s in the array such that all 0s come before 1s while maintaining stability. zero_count = 0 for i in range(len(arr)): if arr[i] == 0: zero_count += 1 for i in range(len(arr)): if i < zero_count: arr[i] = 0 else: arr[i] = 1 return arr"},{"question":"Write a function to implement a circular queue with the operations \`enqueue\`, \`dequeue\`, and \`size\`. The circular queue should be implemented using a linked list with a dummy node to avoid edge cases.","solution":"class Node: def __init__(self, value=None): self.value = value self.next = None class CircularQueue: def __init__(self): self.dummy = Node() self.dummy.next = self.dummy self.rear = self.dummy self.count = 0 def enqueue(self, value): new_node = Node(value) new_node.next = self.dummy.next self.rear.next = new_node self.rear = new_node self.count += 1 def dequeue(self): if self.count == 0: raise IndexError(\\"Dequeue from an empty queue\\") front_node = self.dummy.next self.dummy.next = front_node.next if self.rear == front_node: self.rear = self.dummy self.count -= 1 return front_node.value def size(self): return self.count"},{"question":"Write a function to find the minimum number of moves required to traverse from the top-left corner (0,0) to the bottom-right corner (m-1,n-1) of a grid. You can only move either down or right at any point in time. The grid is represented as a 2D array with obstacles where 0 represents an empty cell and 1 represents an obstacle. You can't move into cells that contain obstacles.","solution":"from collections import deque def min_moves_to_traverse(grid): Returns the minimum number of moves to traverse from the top-left corner (0,0) to the bottom-right corner (m-1, n-1) of the grid. You can only move either down or right at any point in time. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] queue = deque([(0, 0, 0)]) # (row, col, moves) directions = [(1, 0), (0, 1)] # down, right while queue: r, c, moves = queue.popleft() if r == rows - 1 and c == cols - 1: return moves for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and grid[nr][nc] == 0: visited[nr][nc] = True queue.append((nr, nc, moves + 1)) return -1"},{"question":"Write a function to check if a given natural number is perfect.","solution":"def is_perfect_number(n): Check if a given natural number is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. if n <= 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n"},{"question":"Write a function to find the best way to partition a given list of integers into two subsets such that the difference between their sums is minimized. This is often known as the partition problem or the 0/1 Knapsack problem in disguise. The function should take a list of integers as input and return the minimum difference between the sums of the two subsets. If the list is empty, the function should return 0.","solution":"def find_min_partition_difference(nums): Given a list of integers, partition it into two subsets such that the difference between their sums is minimized. Return the minimum difference. # Handle edge case if not nums: return 0 total_sum = sum(nums) n = len(nums) # DP array to store subproblem solutions dp = [[False] * (total_sum//2 + 1) for _ in range(n + 1)] # Initialize dp for i in range(n + 1): dp[i][0] = True # Build the dp array for i in range(1, n + 1): for j in range(1, total_sum//2 + 1): if nums[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]] else: dp[i][j] = dp[i-1][j] # Find the maximum value in the last row which is <= total_sum//2 for j in range(total_sum//2, -1, -1): if dp[n][j]: return total_sum - 2 * j"},{"question":"Write a function to implement a simple version of the classic game \\"Tic Tac Toe\\" using Python. The game should allow two human players to play against each other. The function should handle the game board, player turns, and check for win or draw conditions.","solution":"class TicTacToe: def __init__(self): self.board = [[' ' for _ in range(3)] for _ in range(3)] self.current_player = 'X' def print_board(self): for row in self.board: print('|'.join(row)) print('-' * 5) def make_move(self, row, col): if self.board[row][col] != ' ': return False self.board[row][col] = self.current_player if self.check_winner(row, col): print(f\\"Player {self.current_player} wins!\\") return True elif self.check_draw(): print(\\"The game is a draw!\\") return True self.current_player = 'O' if self.current_player == 'X' else 'X' return False def check_winner(self, row, col): # Check Row if all(self.board[row][i] == self.current_player for i in range(3)): return True # Check Column if all(self.board[i][col] == self.current_player for i in range(3)): return True # Check Diagonals if row == col and all(self.board[i][i] == self.current_player for i in range(3)): return True if row + col == 2 and all(self.board[i][2-i] == self.current_player for i in range(3)): return True return False def check_draw(self): return all(self.board[row][col] != ' ' for row in range(3) for col in range(3))"},{"question":"Write a function to insert a new value in a linked list at a specified position. If the position is within the bounds of the list, the function should insert the new value at that position and return the head of the modified list. If the position is out of bounds, the function should not modify the list and return the head as it is. The linked list should support inserting at the beginning, in the middle, and at the end of the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def insert_node(head, value, position): Inserts a new node with the given value at the specified position in the linked list. :param head: ListNode, the head of the linked list :param value: int, the value for the new node :param position: int, the position to insert the new node :return: ListNode, the head of the modified linked list new_node = ListNode(value) # If inserting at the beginning if position == 0: new_node.next = head return new_node current = head current_position = 0 # Traverse the list to find the position to insert while current is not None and current_position < position - 1: current = current.next current_position += 1 # If the position is out of bounds if current is None: return head # Insert the new node new_node.next = current.next current.next = new_node return head"},{"question":"Write a function to sort an array of integers in ascending order. The function should take an array of integers as input and return the sorted array. The sorting algorithm should be of O(N log N) complexity. Which algorithm can be used for this purpose, quicksort, mergesort, or heapsort? Explain the choice and provide the implementation in Python.","solution":"def merge_sort(arr): Sorts an array of integers in ascending order using the mergesort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted arrays into one sorted array. sorted_array = [] i = 0 j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: sorted_array.append(left[i]) i += 1 else: sorted_array.append(right[j]) j += 1 while i < len(left): sorted_array.append(left[i]) i += 1 while j < len(right): sorted_array.append(right[j]) j += 1 return sorted_array"},{"question":"Write a function to remove the duplicates from an array of integers and return the new array with the duplicates removed. The function should also return the length of the new array. The solution must be optimized for time complexity.","solution":"def remove_duplicates(arr): Removes duplicates from the array and returns the new array with duplicates removed and its length. unique_elements = list(set(arr)) return unique_elements, len(unique_elements)"},{"question":"Write a function to find the missing number in an array of integers that should contain numbers from 1 to N. The array may have only one missing number. For example, if the array is [1,2,4,5] and the length of the array is 5, the missing number is 3.","solution":"def find_missing_number(arr, n): Finds the missing number in an array of integers that should contain numbers from 1 to n. :param arr: List[int], the array containing numbers from 1 to n with one number missing. :param n: int, the value of n (maximum number that should be in the array). :return: int, the missing number. total = n * (n + 1) // 2 sum_arr = sum(arr) return total - sum_arr"},{"question":"Write a function to print the first n natural numbers where n is passed as an argument.","solution":"def print_natural_numbers(n): Returns a list of the first n natural numbers. return list(range(1, n + 1))"},{"question":"Write a function to create a binary tree with a given root value and return the root of the tree. The tree should be created level by level (i.e., first create the root, then the children of the root, then the children of the children, etc.).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def create_binary_tree(root_value): Create a binary tree with the given root value and return the root of the tree. Initially, the tree will only contain the root node. return TreeNode(root_value)"},{"question":"Write a function to reverse a linked list. Implement both iterative and recursive approaches. Provide a brief explanation of each method.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list_iterative(head): Iteratively reverses a linked list. previous = None current = head while current: next_node = current.next current.next = previous previous = current current = next_node return previous def reverse_linked_list_recursive(head): Recursively reverses a linked list. if not head or not head.next: return head reversed_list_head = reverse_linked_list_recursive(head.next) head.next.next = head head.next = None return reversed_list_head"},{"question":"Write a function to find the maximum subarray sum in the following array: [-2, 1, -3, 4, -1, 2, 1, -5, 4].","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum using Kadane's Algorithm. if not arr: return 0 # In case the input array is empty, the max sum is 0. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Using the given array [-2, 1, -3, 4, -1, 2, 1, -5, 4] result = max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) print(result) # Should print 6"},{"question":"Write a function to eliminate all occurrences of even numbers in a given list and return the modified list.","solution":"def remove_even_numbers(lst): Remove all occurrences of even numbers from the given list and return the modified list. :param lst: List of integers :return: List of integers with even numbers removed return [num for num in lst if num % 2 != 0]"},{"question":"Write a function to calculate the total length of all words in a list of strings.","solution":"def total_length(words): Returns the total length of all words in the list. :param words: list of strings :return: int, total length of all words return sum(len(word) for word in words)"},{"question":"Write a function to calculate the prefix sum (also known as cumulative sum) of a given list of integers. The prefix sum of a list up to a certain index is the sum of all elements from the start of the list up to that index.","solution":"def prefix_sum(arr): Given a list of integers, returns a list where the i-th element is the sum of the first i+1 elements from the original list. Args: arr: List[int] - A list of integers. Returns: List[int] - A list containing the prefix sums. result = [] current_sum = 0 for num in arr: current_sum += num result.append(current_sum) return result"},{"question":"Write a function to convert a Binary Tree to itsMirror Tree. Mirror Tree is a Tree which is a reflection of the original tree (i.e., the left and right children of all nodes are swapped).","solution":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def mirror_tree(node): Convert the given binary tree to its mirror. Parameters: node (Node): The root of the binary tree. Returns: Node: The root of the mirror binary tree. if node is None: return None # Recursively mirror the left and right subtrees left_mirror = mirror_tree(node.left) right_mirror = mirror_tree(node.right) # Swap the left and right pointers node.left = right_mirror node.right = left_mirror return node"},{"question":"Write a function to find the smallest element in the list that appears only once. The list can contain duplicate elements and integers.","solution":"def smallest_unique_element(lst): Returns the smallest element in the list that appears only once. If no such element exists, return None. from collections import Counter # Count the frequency of each element in the list element_count = Counter(lst) # Filter out elements that appear more than once unique_elements = [element for element, count in element_count.items() if count == 1] # Return the smallest unique element, or None if there are no unique elements return min(unique_elements) if unique_elements else None"},{"question":"Write a function to calculate the factorial of a number using memoization.","solution":"def factorial(n, memo = {}): Returns the factorial of a given number n using memoization. if n in memo: return memo[n] if n <= 1: memo[n] = 1 else: memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Write a function to detect a cycle in a linked list using Floyd’s Cycle-Finding Algorithm. Also, explain how it works.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function to calculate the maximum profit from at most two transactions given a list of daily stock prices. This function should return the maximum profit possible from those transactions.","solution":"def max_profit(prices): Calculate the maximum profit from at most two transactions. Args: prices (list): A list of daily stock prices. Returns: int: Maximum profit possible from at most two transactions. if not prices: return 0 n = len(prices) left_profits = [0] * n right_profits = [0] * n # First transaction (or only) - Calculate left max profit min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) left_profits[i] = max(left_profits[i - 1], prices[i] - min_price) # Second transaction - Calculate right max profit max_price = prices[-1] for i in range(n - 2, -1, -1): max_price = max(max_price, prices[i]) right_profits[i] = max(right_profits[i + 1], max_price - prices[i]) # Combine both maximums to find the overall maximum profit max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i]) return max_profit"},{"question":"Write a function to simulate a slot machine. A slot machine has 3 wheels, each with 5 symbols (A, B, C, D, E). The function should generate a random outcome for each wheel and return the result as a tuple.","solution":"import random def simulate_slot_machine(): Simulates a slot machine with 3 wheels, each with 5 symbols (A, B, C, D, E). Returns a tuple representing the outcome of each wheel. symbols = ['A', 'B', 'C', 'D', 'E'] outcome = ( random.choice(symbols), random.choice(symbols), random.choice(symbols) ) return outcome"},{"question":"Write a function to check if a number is a \\"happy number\\". A happy number is a number which eventually reaches 1 when replaced by the sum of the square of each digit. If a number is happy, you should return \`true\`; otherwise, return \`false\`.","solution":"def is_happy_number(num): Returns True if the number is a happy number, otherwise False. def sum_of_squares(n): return sum(int(char) ** 2 for char in str(n)) seen = set() while num != 1 and num not in seen: seen.add(num) num = sum_of_squares(num) return num == 1"},{"question":"Write a function to generate all possible combinations of a given string. The order in output is not important.","solution":"from itertools import combinations def generate_combinations(s): Generates all possible combinations of a given string. :param s: The input string :type s: str :return: A list of all possible combinations of the string :rtype: list result = [] for i in range(1, len(s) + 1): result.extend([''.join(comb) for comb in combinations(s, i)]) return result"},{"question":"Write a function to generate a random password of length n, containing a mix of uppercase, lowercase letters, and digits.","solution":"import random import string def generate_random_password(n): Generate a random password of length n, containing a mix of uppercase letters, lowercase letters, and digits. if n < 3: raise ValueError(\\"Password length should be at least 3 to include all character types.\\") all_characters = string.ascii_letters + string.digits password = [ random.choice(string.ascii_uppercase), # Ensure at least one uppercase letter random.choice(string.ascii_lowercase), # Ensure at least one lowercase letter random.choice(string.digits), # Ensure at least one digit ] password += random.choices(all_characters, k=n - 3) random.shuffle(password) return ''.join(password)"},{"question":"Write a function to generate the next palindrome by modifying one digit in the given number. The function should return the smallest palindrome greater than the given number.","solution":"def next_palindrome(num): Returns the next smallest palindrome greater than the given number. num_str = str(num) length = len(num_str) next_pal = None # Helper function to check if a number is a palindrome def is_palindrome(s): return s == s[::-1] if is_palindrome(num_str) and int(num_str) > num: return int(num_str) while True: num += 1 num_str = str(num) if is_palindrome(num_str): next_pal = num break return next_pal"},{"question":"Write a function to convert a binary tree to a tree where all root to leaf paths are palindromes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def make_palindrome_tree(root, val): Given a binary tree with \`root\` node, this function modifies it to ensure that all paths from root to leaf are palindromes by making all nodes have the same value \`val\`. if root is not None: root.val = val make_palindrome_tree(root.left, val) make_palindrome_tree(root.right, val) def is_palindrome_path(root): def dfs(node, path): if not node: return False path.append(node.val) if not node.left and not node.right: if path == path[::-1]: return True if (node.left and dfs(node.left, path)) or (node.right and dfs(node.right, path)): return True path.pop() return False return dfs(root, []) # Example usage root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) make_palindrome_tree(root, 1)"},{"question":"Write a function to find the truthy and falsy values in an array and return them categorized.","solution":"def categorize_truthy_falsy(arr): Categorizes elements in an array into truthy and falsy values. Parameters: arr (list): The list of elements to categorize. Returns: dict: A dictionary with two keys 'truthy' and 'falsy', where the values are lists of truthy and falsy elements. categorized = { 'truthy': [item for item in arr if item], 'falsy': [item for item in arr if not item] } return categorized"},{"question":"Write a function to reverse the characters in each word of a given string. The function should be case-sensitive and should preserve the original order of the words and spaces in the string.","solution":"def reverse_characters_in_words(s): Reverses the characters in each word of the given string. :param s: Original string :return: String with characters in each word reversed return ' '.join(word[::-1] for word in s.split(' '))"},{"question":"Write a function to determine if a list of numbers is sorted in non-decreasing order (i.e., each number is less than or equal to the next number). The function should return \`True\` if the list is sorted, otherwise return \`False\`. Additionally, the function should handle an empty list and a list with a single element as valid sorted lists.","solution":"def is_sorted(nums): Returns True if the list nums is sorted in non-decreasing order, else returns False. for i in range(len(nums) - 1): if nums[i] > nums[i + 1]: return False return True"},{"question":"Write a function to reverse each string in a list of strings without using the built-in reverse method or slicing.","solution":"def reverse_strings(strings): Reverses each string in a list of strings without using the built-in reverse method or slicing. def reverse_string(s): reversed_string = '' for char in s: reversed_string = char + reversed_string return reversed_string return [reverse_string(s) for s in strings]"},{"question":"Write a function to find the number of substrings in a given string that start and end with the same alphabet.","solution":"def count_substrings(s): Returns the number of substrings in the given string \`s\` that start and end with the same alphabet. count = 0 for i in range(len(s)): for j in range(i, len(s)): if s[i] == s[j]: count += 1 return count"},{"question":"Write a function to determine if a singly linked list has a cycle. If a cycle exists in the list, the function should return \`true\`. Otherwise, it should return \`false\`.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Determines if a singly linked list has a cycle. :param head: ListNode, the head of the singly linked list. :return: bool, True if there is a cycle, False otherwise. slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function to calculate the factorial of a number. What is a factorial and how can it be calculated using a recursive approach in Python?","solution":"def factorial(n): Returns the factorial of n using a recursive approach. Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. Args: n (int): A non-negative integer whose factorial is to be calculated. Returns: int: Factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to check if a number is prime. If it is, return True; otherwise, return False. Bonus: try to do it in linear time.","solution":"def is_prime(n): Check if a number is prime. Return True if it is, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a function to return the middle value(s) of a list in Python. If the list has an odd number of elements, the function should return the middle element. If the list has an even number of elements, the function should return the two middle elements as a tuple. If the list is empty, the function should return None.","solution":"def get_middle_value(lst): Returns the middle value(s) of a list. If the list has an odd number of elements, returns the middle element. If the list has an even number of elements, returns the two middle elements as a tuple. If the list is empty, returns None. if not lst: return None n = len(lst) mid = n // 2 if n % 2 == 1: return lst[mid] else: return (lst[mid - 1], lst[mid])"},{"question":"Write a function to calculate the average value of an array of integers, but exclude the highest and the lowest value from the average calculation. The function should handle edge cases such as when the array has fewer than three elements.","solution":"def average_excluding_extremes(arr): Returns the average of the array excluding the highest and lowest values. If the array has fewer than three elements, it returns None. if len(arr) < 3: return None max_val = max(arr) min_val = min(arr) sum_excluding_extremes = sum(arr) - max_val - min_val count_excluding_extremes = len(arr) - 2 return sum_excluding_extremes / count_excluding_extremes"},{"question":"Write a function to convert a given string to its hexadecimal representation. The function should take a string as input and return a string representing the hexadecimal values of the characters in the original string.","solution":"def string_to_hex(s): Converts a given string to its hexadecimal representation. Parameters: s (str): The input string to be converted. Returns: str: A string representing the hexadecimal values of the characters in the original string. return ''.join(format(ord(c), '02x') for c in s)"},{"question":"Write a function to create a basic web server that can handle HTTP GET and POST requests in Python.","solution":"from http.server import BaseHTTPRequestHandler, HTTPServer import urllib.parse as urlparse class SimpleHTTPRequestHandler(BaseHTTPRequestHandler): def do_GET(self): Handle GET request self.send_response(200) self.send_header(\\"Content-type\\", \\"text/html\\") self.end_headers() self.wfile.write(b\\"Hello, world! GET request received.\\") def do_POST(self): Handle POST request content_length = int(self.headers['Content-Length']) # Get the size of data post_data = self.rfile.read(content_length) # Get the data parsed_data = urlparse.parse_qs(post_data.decode('utf-8')) response = f\\"Hello, world! POST request received. Data: {parsed_data}\\" self.send_response(200) self.send_header(\\"Content-type\\", \\"text/html\\") self.end_headers() self.wfile.write(response.encode()) def run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler, port=8000): server_address = ('', port) httpd = server_class(server_address, handler_class) print(f'Starting server on port {port}...') httpd.serve_forever()"},{"question":"Write a function to calculate the factorial of a number in Python. The function should be able to handle large numbers and return the result accurately. You should also handle potential errors or exceptions.","solution":"def factorial(n): Calculate the factorial of a number n. Parameters: n (int): The number for which the factorial is to be computed Returns: int: The factorial of n Raises: ValueError: If n is a negative number TypeError: If n is not an integer if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate the sum of all the values in a dictionary where the keys are integers and the values are also integers. The function should return this sum.","solution":"def sum_dict_values(input_dict): Calculates the sum of all values in a dictionary where the keys and values are integers. Parameters: input_dict (dict): Dictionary with integer keys and values. Returns: int: The sum of all the values in the dictionary. return sum(input_dict.values())"},{"question":"Write a function to sum up all the numbers in a given list. How would you implement this in Python?","solution":"def sum_list(numbers): Returns the sum of all numbers in the given list. Parameters: numbers (list): A list of numbers Returns: int/float: The sum of all numbers in the list return sum(numbers)"},{"question":"Write a function to compute the sum of digits of a number in Python. The function should also validate that the input is a positive integer.","solution":"def sum_of_digits(number): Computes the sum of digits of a given positive integer. :param number: A positive integer :return: The sum of the digits of the number :raises ValueError: If the input is not a positive integer if not isinstance(number, int) or number <= 0: raise ValueError(\\"Input must be a positive integer.\\") total = 0 while number > 0: total += number % 10 number //= 10 return total"},{"question":"Write a function to find the index at which a target number should be inserted into a sorted array to maintain the sorted order. This function should return the index.","solution":"def find_insert_index(sorted_array, target): Returns the index at which the target number should be inserted into the sorted array to maintain the sorted order. left, right = 0, len(sorted_array) while left < right: mid = (left + right) // 2 if sorted_array[mid] < target: left = mid + 1 else: right = mid return left"},{"question":"Write a function to solve the following coding problem. The problem is a \\"Valid Anagram\\" problem. Here, you are given two strings \`s\` and \`t\`. Your function should return \`true\` if \`t\` is an anagram of \`s\`, and \`false\` otherwise. Assume \`s\` and \`t\` consist of only lowercase English letters.","solution":"def is_anagram(s, t): Returns true if t is an anagram of s, otherwise false. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase. return sorted(s) == sorted(t)"},{"question":"Write a function to sort an array of integers in ascending order. You need to use the bubble sort algorithm. Ensure the function works for arrays of any size, including empty arrays. Your function should return the sorted array.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. Parameters: arr (list): A list of integers. Returns: list: The sorted list in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional numeric array. This is known as Kadane's Algorithm. You are given an array of integers and your任务 is to find the maximum sum subarray from that array.","solution":"def max_subarray_sum(arr): Implements Kadane's Algorithm to find the maximum sum of a contiguous subarray. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to count the distinct unordered pairs of elements that can be formed from a list of integers.","solution":"def count_distinct_unordered_pairs(nums): Returns the count of distinct unordered pairs that can be formed from a list of integers. if len(nums) < 2: return 0 unique_nums = set(nums) # The number of ways to pick 2 items from n items is given by the combination formula nC2 = n*(n-1)/2 n = len(unique_nums) return n * (n - 1) // 2"},{"question":"Write a function to find the maximum value in a binary search tree (BST). In a BST, each node has keys smaller than or equal to the node's key on its left sub-tree, and keys greater than or equal to the node's key on its right sub-tree.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None def find_max_value(node): Finds the maximum value in a binary search tree. If the tree is empty, the function returns None. Parameters: node (TreeNode): The root node of the BST. Returns: int: The maximum value in the tree. current = node while current and current.right: current = current.right return current.key if current else None"},{"question":"Write a function to merge two sorted arrays into a single sorted array using the merge function of merge sort.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): A sorted list of integers. arr2 (list): Another sorted list of integers. Returns: list: A single sorted list containing all elements from arr1 and arr2. merged_array = [] i = 0 j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function to calculate the number of ways to split a given integer \`n\` into a sum of different positive integers. For example, if \`n\` is 4, the ways to split it into different positive integers are 4, 3+1, 2+2, 2+1+1, and 1+1+1+1, so the function should return 5. If \`n\` is 5, then the ways to split it are 5, 4+1, 3+2, 3+1+1, 2+2+1, and 2+1+1+1, so the function should return 6. Please write a function in Python that accomplishes this task.","solution":"def integer_partitions(n): This function calculates the number of ways to split a given integer n into a sum of different positive integers. def count_partitions(n, max_num): if n == 0: return 1 elif n < 0 or max_num == 0: return 0 else: return count_partitions(n-max_num, max_num) + count_partitions(n, max_num-1) return count_partitions(n, n)"},{"question":"Write a function to swap two numbers using bitwise XOR operation. How can I do this?","solution":"def swap_numbers(a, b): Swap two numbers using bitwise XOR operation. a = a ^ b b = a ^ b a = a ^ b return a, b"},{"question":"Write a function to find the height of a binary tree. The function should take the root of the binary tree as its input and return the height of the tree. Assume the binary tree is non-null and consists of nodes with integer values. Specification: 1 <= number of nodes <= 10^4. Each node has integer values ranging from -1000 to 1000.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def height_of_binary_tree(root): Returns the height of the binary tree rooted at \`root\`. The height of a binary tree is defined as the number of edges on the longest path from the root to a leaf node. if root is None: return 0 left_height = height_of_binary_tree(root.left) right_height = height_of_binary_tree(root.right) return max(left_height, right_height) + 1"},{"question":"Write a function to reverse a given string in Python. How can I do this using slicing, and what does each part of the slicing syntax do?","solution":"def reverse_string(s: str) -> str: Returns the reversed string of the input string s using slicing. return s[::-1]"},{"question":"Write a function to find the most frequent element in an array. If there are multiple elements with the same highest frequency, return all such elements in a list.","solution":"def most_frequent_elements(arr): Returns a list of the most frequent element(s) in the array. If there are multiple elements with the same highest frequency, return all such elements. from collections import Counter if not arr: # If the array is empty, return an empty list return [] count = Counter(arr) max_freq = max(count.values()) return [key for key, value in count.items() if value == max_freq]"},{"question":"Write a function to convert a given date string into a specific format.","solution":"from datetime import datetime def convert_date_format(date_str): Converts a date string from 'YYYY-MM-DD' format to 'Month DD, YYYY' format. Parameters: date_str (str): Date string in 'YYYY-MM-DD' format Returns: str: Date string in 'Month DD, YYYY' format date_obj = datetime.strptime(date_str, \\"%Y-%m-%d\\") return date_obj.strftime(\\"%B %d, %Y\\")"},{"question":"Write a function to find the longest increasing subsequence (LIS) in a list of integers. The function should return the length of the LIS and the actual indices of the LIS elements in the original list. For example, given the list \`[10, 9, 2, 5, 3, 7, 101, 18]\`, the function should return \`(4, [2, 3, 5, 7])\`, indicating that the LIS has a length of 4 and its indices are 2, 3, 5, and 7.","solution":"def longest_increasing_subsequence(nums): Finds the longest increasing subsequence (LIS) in a list of integers. Args: nums (list): A list of integers. Returns: tuple: A tuple of the length of the LIS and a list of the indices of the LIS elements. if not nums: return (0, []) n = len(nums) dp = [1] * n prev = [-1] * n # Compute the length of the LIS for i in range(1, n): for j in range(i): if nums[i] > nums[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j # Find the maximum value in dp and the corresponding index max_len = max(dp) max_index = dp.index(max_len) # Reconstruct the LIS by tracking indices backward lis_indices = [] current_index = max_index while current_index != -1: lis_indices.append(current_index) current_index = prev[current_index] # Reverse the LIS indices to be in the correct order lis_indices.reverse() return (max_len, lis_indices)"},{"question":"Write a function to remove all occurrences of a specific value from a given list and return the modified list.","solution":"def remove_occurrences(lst, value): Removes all occurrences of a specific value from the given list and returns the modified list. Parameters: lst (list): The list from which to remove the value. value: The value to remove from the list. Returns: list: The modified list with all occurrences of the value removed. return [item for item in lst if item != value]"},{"question":"Write a function to calculate the sum of all elements in an array that are greater than a given number x.","solution":"def sum_greater_than(array, x): Returns the sum of all elements in the array that are greater than x. Parameters: array (list of int/float): The list of numbers. x (int/float): The threshold number. Returns: int/float: The sum of numbers in the array greater than x. return sum(ele for ele in array if ele > x)"},{"question":"Write a function to find the第 k 位置元素 in a sorted array of integers. The array is sorted in ascending order, and there's no duplicate.","solution":"def find_kth_element(arr, k): Returns the k-th position element in a sorted array. The array is sorted in ascending order. :param arr: List[int] - A sorted list of integers (ascending order, no duplicates) :param k: int - The 0-based index position to find :return: int - The element at the k-th position in the sorted array if k < 0 or k >= len(arr): raise IndexError(\\"Index out of range\\") return arr[k]"},{"question":"Write a function to sort a list of tuples by the second item. The list is composed of tuples where each tuple contains an integer as the first item and a string as the second item. The function should rearrange the list in ascending order based on the string values. Here's the list: [(3, 'apple'), (1, 'banana'), (2, 'cherry'), (5, 'banana'), (4, 'apple')].","solution":"def sort_by_second_item(tuples_list): Sorts a list of tuples by the second item (string) in each tuple. Parameters: tuples_list (list of tuples): List of tuples where each tuple contains an integer and a string. Returns: list of tuples: Sorted list of tuples based on the second item. return sorted(tuples_list, key=lambda x: x[1]) # Example usage tuples_list = [(3, 'apple'), (1, 'banana'), (2, 'cherry'), (5, 'banana'), (4, 'apple')] sorted_list = sort_by_second_item(tuples_list) print(sorted_list) # [(3, 'apple'), (4, 'apple'), (1, 'banana'), (5, 'banana'), (2, 'cherry')]"},{"question":"Write a function to count the number of 1 bits in the binary representation of a number.","solution":"def count_one_bits(n): Returns the number of 1 bits in the binary representation of the given number. return bin(n).count('1')"},{"question":"Write a function to print a binary tree in a level-order traversal. How can we accomplish this?","solution":"import collections class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def level_order_traversal(root: TreeNode): if not root: return [] result = [] queue = collections.deque([root]) while queue: node = queue.popleft() result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Write a function to calculate the sum of the first 'n' natural numbers. The function should be written in Python.","solution":"def sum_natural_numbers(n): Returns the sum of the first 'n' natural numbers. if n < 1: return 0 return n * (n + 1) / 2"},{"question":"Write a function to compute the nth Fibonacci number in Python. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. In this problem, we will write a recursive function to compute the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, ... if n <= 0: raise ValueError(\\"n should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to generate all possible binary strings of length n. The function should return a list of all possible combinations.","solution":"def generate_binary_strings(n): Returns a list of all possible binary strings of length n. if n <= 0: return [] result = [] generate_strings_helper(n, \\"\\", result) return result def generate_strings_helper(n, prefix, result): if n == 0: result.append(prefix) return generate_strings_helper(n - 1, prefix + \\"0\\", result) generate_strings_helper(n - 1, prefix + \\"1\\", result)"},{"question":"Write a function to determine the frequency of each word in a given string. The function should return a dictionary where the keys are the words and the values are the frequencies of those words.","solution":"def word_frequency(s): Returns a dictionary with the frequency of each word in the given string. words = s.split() frequency = {} for word in words: word = word.lower() # Convert to lowercase to ensure case insensitivity if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a function to calculate the area of a circle given its radius. The area of a circle can be calculated using the formula: A = πr².","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given its radius. Args: radius (float): the radius of the circle. Returns: float: the area of the circle. if radius < 0: raise ValueError(\\"Radius cannot be negative.\\") return math.pi * (radius ** 2)"},{"question":"Write a function to find the longest palindromic substring in a given string. For example, for the input string \\"babad\\", the output should be \\"bab\\" or \\"aba\\". Since there is more than one possible substring, the function can return either.","solution":"def longest_palindrome(s): Returns the longest palindromic substring in a given string. if s == \\"\\" or len(s) == 1: return s start = 0 end = 0 def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(len(s)): # Odd length palindromes left1, right1 = expand_around_center(s, i, i) # Even length palindromes left2, right2 = expand_around_center(s, i, i + 1) if right1 - left1 > end - start: start, end = left1, right1 if right2 - left2 > end - start: start, end = left2, right2 return s[start:end + 1]"},{"question":"Write a function to compute the nth Fibonacci number using both iterative and recursive methods. Additionally, compare their performance for different values of n using time complexity.","solution":"import time def fibonacci_recursive(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") if n == 1: return 0 if n == 2: return 1 return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) def fibonacci_iterative(n): Returns the nth Fibonacci number using iteration. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") if n == 1: return 0 if n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b def compare_performance(n): Compares the performance of recursive and iterative methods of computing the nth Fibonacci number. start_time = time.time() fibonacci_recursive(n) recursive_time = time.time() - start_time start_time = time.time() fibonacci_iterative(n) iterative_time = time.time() - start_time return recursive_time, iterative_time"},{"question":"Write a function to find k closest points to the origin (0, 0) in a 2D plane. The function should take a list of points and an integer k as input and return a list of k points that are closest to the origin.","solution":"import heapq import math def k_closest_points(points, k): Returns the k closest points to the origin (0, 0) in a 2D plane. :param points: List of points in the form [(x1, y1), (x2, y2), ...] :param k: The number of closest points to return :return: List of k points closest to the origin # Calculate the distance of each point from the origin. distances = [(math.sqrt(x**2 + y**2), (x, y)) for x, y in points] # Use a heap to find k smallest distances. closest_points = heapq.nsmallest(k, distances) # Extract the points from the distances. return [point for _, point in closest_points]"},{"question":"Write a function to determine if a given string is a valid email address. A valid email address consists of a username followed by the '@' symbol, then the domain name. The username can contain letters, digits, underscores, and dots. The domain name can contain letters, digits, and hyphens, and must end with a dot followed by a domain extension of at least two letters.","solution":"import re def is_valid_email(email): Determines if a given string is a valid email address. email_pattern = r'^[a-zA-Z0-9._]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.match(email_pattern, email) is not None"},{"question":"Write a function to check if a tree is balanced. A tree is balanced if the height difference between any two subtrees of a node is not more than 1.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Returns True if the tree is balanced, otherwise False. def check_height(node): if not node: return 0 left_height = check_height(node.left) right_height = check_height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1"},{"question":"Write a function to count the number of distinct elements in a given list using Python.","solution":"def count_distinct_elements(lst): Returns the number of distinct elements in the list. return len(set(lst))"},{"question":"Write a function to parse an XML string and extract the information into a dictionary.","solution":"import xml.etree.ElementTree as ET def parse_xml_to_dict(xml_string): Parses an XML string and extracts the information into a dictionary. Args: xml_string (str): The XML data as a string. Returns: dict: The parsed XML data as a dictionary. def parse_element(element): parsed_data = {} # Process child elements recursively for child in element: child_data = parse_element(child) if child.tag in parsed_data: if not isinstance(parsed_data[child.tag], list): parsed_data[child.tag] = [parsed_data[child.tag]] parsed_data[child.tag].append(child_data) else: parsed_data[child.tag] = child_data # Add attributes if element.attrib: parsed_data.update(element.attrib) # Add text data if element.text and element.text.strip(): parsed_data['text'] = element.text.strip() return parsed_data root = ET.fromstring(xml_string) return {root.tag: parse_element(root)}"},{"question":"Write a function to find the sum of all the first digits of the integers in a given list. For example, if the list is [123, 456, 789], the sum of the first digits should be 1 + 4 + 7 = 12.","solution":"def sum_of_first_digits(numbers): Given a list of integers, returns the sum of the first digits of the integers. total = 0 for number in numbers: if isinstance(number, int) and number != 0: first_digit = int(str(abs(number))[0]) total += first_digit return total"},{"question":"Write a function to calculate the maximum sum of subarray within a given array. You should consider at least two different approaches to solve this problem.","solution":"def max_subarray_kadane(arr): Finds the maximum sum of a subarray using Kadane's Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def max_crossing_sum(arr, left, mid, right): Helper function to find the maximum sum of subarray crossing the midpoint. sum_left = float('-inf') sum_temp = 0 for i in range(mid, left-1, -1): sum_temp += arr[i] if sum_temp > sum_left: sum_left = sum_temp sum_right = float('-inf') sum_temp = 0 for i in range(mid + 1, right + 1): sum_temp += arr[i] if sum_temp > sum_right: sum_right = sum_temp return sum_left + sum_right def max_subarray_divide_and_conquer(arr, left, right): Finds the maximum sum of a subarray using the Divide and Conquer approach. if left == right: return arr[left] mid = left + (right - left) // 2 max_left_sum = max_subarray_divide_and_conquer(arr, left, mid) max_right_sum = max_subarray_divide_and_conquer(arr, mid+1, right) max_cross_sum = max_crossing_sum(arr, left, mid, right) return max(max_left_sum, max_right_sum, max_cross_sum) def max_subarray_dnc(arr): return max_subarray_divide_and_conquer(arr, 0, len(arr)-1)"},{"question":"Write a function to reverse the order of a string.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to validate if an email address is correct using regular expressions in Python. How can this function be optimized for performance?","solution":"import re def is_valid_email(email): Validates if an email address is correct using regular expressions. Args: email (str): The email address to validate. Returns: bool: True if the email address is valid, False otherwise. email_regex = re.compile( r\\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)\\" ) return re.match(email_regex, email) is not None # Optimizations: # 1. Precompile the regular expression for better performance EMAIL_REGEX = re.compile( r\\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)\\" ) def is_valid_email_optimized(email): Validates if an email address is correct using a precompiled regular expression. Args: email (str): The email address to validate. Returns: bool: True if the email address is valid, False otherwise. return EMAIL_REGEX.match(email) is not None"},{"question":"Write a function to update a given array by doubling its elements and then swapping every pair of elements.","solution":"def update_and_swap(array): Updates the given array by doubling its elements and then swapping every pair of elements. If the array has an odd number of elements, the last element remains in its place. Parameters: array (list of int): The list of integers to be updated. Returns: list of int: The updated list of integers. # Doubling each element doubled_array = [x * 2 for x in array] # Swapping every pair of elements for i in range(0, len(doubled_array) - 1, 2): doubled_array[i], doubled_array[i + 1] = doubled_array[i + 1], doubled_array[i] return doubled_array"},{"question":"Write a function to find all permutations of a given string. The function should return a list of all possible rearrangements of the characters in the string.","solution":"from itertools import permutations def find_permutations(s): Returns a list of all permutations of the input string s. return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to convert a given string to its equivalent integer.","solution":"def string_to_integer(s): Converts a given string to its equivalent integer. Parameters: s (str): The string to be converted. Returns: int: The integer value of the string. if not s: raise ValueError(\\"Input string is empty\\") # Remove leading/trailing spaces s = s.strip() if not s: raise ValueError(\\"Input string contains only whitespace\\") result = 0 sign = 1 start_index = 0 if s[0] == '-': sign = -1 start_index = 1 elif s[0] == '+': start_index = 1 for i in range(start_index, len(s)): if not s[i].isdigit(): raise ValueError(f\\"Input string contains non-digit characters: {s[i]}\\") result = result * 10 + (ord(s[i]) - ord('0')) return sign * result"},{"question":"Write a function to insert an element at a specific position in a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def insert_at_position(head, value, position): Inserts a value at a specific position in the linked list. :param head: ListNode, the head node of the linked list :param value: Value to be inserted :param position: 0-based position where the value should be inserted :return: ListNode, the head of the modified linked list new_node = ListNode(value) if position == 0: new_node.next = head return new_node current = head for _ in range(position - 1): if current: # Move to the node before the target position current = current.next else: raise IndexError(\\"Position is out of the list's bounds\\") new_node.next = current.next current.next = new_node return head"},{"question":"Write a function to find the first existing element in a nested dictionary using Python. This function should take two arguments - a nested dictionary \`nested_dict\` and a list \`keys\` representing the path of keys to the target element.","solution":"def find_first_existing_element(nested_dict, keys): Find the first existing element in a nested dictionary given a list of keys representing the path. :param nested_dict: Dictionary to search within :param keys: List of keys representing the path to the target element :return: The first existing element or None if the path doesn't exist current_level = nested_dict for key in keys: if isinstance(current_level, dict) and key in current_level: current_level = current_level[key] else: return None return current_level"},{"question":"Write a function to identify viruses in a given string. The function will return \`True\` if the string contains the virus, and \`False\` otherwise.","solution":"def identify_virus(sample): Identifies whether a given string contains the word 'virus'. Parameters: sample (str): The string in which to check for the presence of the word 'virus'. Returns: bool: True if 'virus' is found in the sample, else False. return 'virus' in sample.lower()"},{"question":"Write a function to calculate the minimum number of operations required to convert one string into another. The operations are insertions, deletions, and substitutions.","solution":"def min_operations(str1, str2): Returns the minimum number of operations required to convert str1 into str2. The operations are insertions, deletions, and substitutions. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Insert all characters from str2 elif j == 0: dp[i][j] = i # Delete all characters from str1 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Delete dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Write a function to sort an array of numbers in ascending order using the insertion sort algorithm. Provide the implementation in Python.","solution":"def insertion_sort(arr): Sorts an array of numbers in ascending order using the insertion sort algorithm. :param arr: List of numbers to be sorted. :return: List of numbers sorted in ascending order. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to find the maximum profit that can be made by buying and selling a stock within a period of N days, given the prices of the stock on each day. The stock must be bought before it is sold.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling a stock. :param prices: List of stock prices where prices[i] is the price of a given stock on day i. :type prices: list[int] :return: Maximum profit achievable. :rtype: int if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to insert a new node with a given value at a specific index in a singly linked list. The linked list might be empty. Make sure to handle the edge cases, such as inserting at the beginning, the end, or an invalid index.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insert_node_at_index(head, index, value): Inserts a new node with value \`value\` at the \`index\` position in the linked list. Returns the head of the modified linked list. if index < 0: raise IndexError(\\"Invalid index\\") new_node = ListNode(value) # Edge case: inserting at the beginning if index == 0: new_node.next = head return new_node current = head current_index = 0 # Traverse until the node just before the point of insertion while current is not None and current_index < index - 1: current = current.next current_index += 1 # If we reached the end of the list before reaching the desired index if current is None and current_index < index - 1: raise IndexError(\\"Index out of bounds\\") # Insert the new node new_node.next = current.next current.next = new_node return head"},{"question":"Write a function to find the two numbers that appear only once in an array where all other elements appear twice. You should write a function to help you achieve this. Can you provide a Python solution for this problem?","solution":"def find_single_numbers(nums): Finds the two numbers that appear only once in an array where all other elements appear twice. Args: nums: List[int] - The input list of integers Returns: List[int] - A list containing the two unique numbers # XOR all the elements to get xor of the two unique numbers xor_sum = 0 for num in nums: xor_sum ^= num # Find the rightmost set bit in xor_sum set_bit = xor_sum & -xor_sum # Divide all numbers in nums into two groups based on the set bit num1, num2 = 0, 0 for num in nums: if num & set_bit: num1 ^= num else: num2 ^= num return [num1, num2]"},{"question":"Write a function to find the number of trailing zeros in the binary representation of a given integer \`n\`.","solution":"def trailing_zeros_in_binary(n): Returns the number of trailing zeros in the binary representation of a given integer n. if n == 0: return 1 count = 0 while (n & 1) == 0: count += 1 n >>= 1 return count"},{"question":"Write a function to find the minimum element in a rotated sorted array using a binary search algorithm. The array may contain duplicates, and the solution should handle this case efficiently.","solution":"def find_min_in_rotated_sorted_array(nums): Finds the minimum element in a rotated sorted array that may contain duplicates. Uses a binary search algorithm to find the element efficiently. Parameters: nums (List[int]): The rotated sorted array. Returns: int: The minimum element in the array. if not nums: return None left, right = 0, len(nums) - 1 while left < right: mid = left + (right - left) // 2 if nums[mid] > nums[right]: left = mid + 1 elif nums[mid] < nums[right]: right = mid else: right -= 1 # when nums[mid] == nums[right], reduce the search size. return nums[left]"},{"question":"Write a function to demonstrate how to use the \`GetCredential2\` method of the \`aliyuncs.redis\` package, which retrieves the last modified time of the credentials for a Redis instance using Alibaba Cloud's SDK for Go. The function should handle potential exceptions or errors that may occur during the execution of the \`GetCredential2\` method.","solution":"import boto3 from botocore.exceptions import NoCredentialsError, PartialCredentialsError def get_redis_credentials_modified_time(redis_instance_id, access_key, secret_key, region): Retrieves the last modified time of the credentials for a Redis instance using Alibaba Cloud's SDK. Args: redis_instance_id (str): The ID of the Redis instance. access_key (str): The access key for Alibaba Cloud. secret_key (str): The secret key for Alibaba Cloud. region (str): The region of the Redis instance. Returns: str: The last modified time of the credentials in ISO 8601 format, if successful. None: If an error occurs during the execution of the \`GetCredential2\` method. try: # Initialize a session using boto3 session = boto3.Session( aws_access_key_id=access_key, aws_secret_access_key=secret_key, region_name=region ) # Initialize the Redis client redis_client = session.client('redis') # Call the GetCredential2 method response = redis_client.get_credential2(RedisInstanceId=redis_instance_id) # Retrieve the last modified time from the response last_modified_time = response['Credentials']['LastModifiedTime'] return last_modified_time except (NoCredentialsError, PartialCredentialsError) as e: print(\\"Error: No valid credentials provided:\\", str(e)) return None except Exception as e: print(\\"An unexpected error occurred:\\", str(e)) return None"},{"question":"Write a function to find the longest common prefix (LCP) in a given array of strings. If there is no common prefix, the function should return an empty string.","solution":"def longest_common_prefix(strs): Returns the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" prefix = strs[0] for s in strs[1:]: while not s.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Write a function to solve a quadratic equation. In this case, the quadratic equation is of the form ax^2 + bx + c = 0. The function should take three parameters, a, b, and c, and return the roots of the equation.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0 and returns its roots. Args: a (float): Coefficient of x^2. b (float): Coefficient of x. c (float): Constant term. Returns: tuple: A tuple containing the two roots of the quadratic equation. # Calculate the discriminant discriminant = b**2 - 4*a*c # Find two solutions root1 = (-b + cmath.sqrt(discriminant)) / (2 * a) root2 = (-b - cmath.sqrt(discriminant)) / (2 * a) return (root1, root2)"},{"question":"Write a function to find duplicates in a list and return a list of duplicates.","solution":"def find_duplicates(lst): Returns a list of duplicates in the input list lst. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a function to find the maximum value in a binary search tree (BST). In a BST, each node's left child is less than the node and each node's right child is greater than the node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_in_bst(root): This function returns the maximum value in a binary search tree. current = root # Keep going to the right as the right child is always greater in a BST while current.right is not None: current = current.right return current.value"},{"question":"Write a function to return the \`n\`th Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six Fibonacci numbers are 0, 1, 1, 2, 3, 5. Remember, the sequence starts from index 0.","solution":"def fibonacci(n): Returns the \`n\`th Fibonacci number. Args: n (int): index of the Fibonacci sequence to return Returns: int: \`n\`th Fibonacci number if n < 0: raise ValueError(\\"Index cannot be negative\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find an integer that appears exactly once in an array of integers, where every other integer appears exactly twice, using constant space complexity.","solution":"def find_unique(nums): Returns the integer that appears exactly once in an array of integers, where every other integer appears exactly twice. Parameters: nums (list): A list of integers. Returns: int: The integer that appears exactly once. unique = 0 for num in nums: unique ^= num return unique"},{"question":"Write a function to simulate the selection sort algorithm in Python.","solution":"def selection_sort(arr): Sorts an array using the selection sort algorithm. Parameters: arr (list): List of elements to be sorted. Returns: list: Sorted list. n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a function to convert a binary tree into its corresponding full binary tree by removing all nodes with only one child. A full binary tree is defined as a binary tree where every node has either zero or two children. If a node has only one child, the other child should be attached to its parent, and the node itself should be deleted. If a node has no children, it should remain unchanged.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def convert_to_full_binary_tree(root): Convert a binary tree into a full binary tree by removing nodes with only one child. def helper(node): if not node: return None node.left = helper(node.left) node.right = helper(node.right) # If the node has only one child, return that child if node.left is None and node.right is not None: return node.right if node.right is None and node.left is not None: return node.left # If the node has zero or two children, return it as it is return node return helper(root)"},{"question":"Write a function to generate a list of Fibonacci numbers up to a given number \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. The function should return a list of Fibonacci numbers that are less than or equal to \`n\`. For example, if \`n = 10\`, the function should return \`[0, 1, 1, 2, 3, 5, 8]\`. If \`n = 1\`, the function should return \`[0, 1, 1]\`. If \`n = 22\`, the function should return \`[0, 1, 1, 2, 3, 5, 8, 13, 21]\`. The function should handle large values of \`n\` efficiently.","solution":"def generate_fibonacci_upto_n(n): Generates a list of Fibonacci numbers up to a given number \`n\`. Args: n (int): The upper limit for the Fibonacci sequence. Returns: list: A list of Fibonacci numbers that are less than or equal to \`n\`. if n < 0: return [] fib_list = [0, 1] while True: next_fib = fib_list[-1] + fib_list[-2] if next_fib > n: break fib_list.append(next_fib) return fib_list"},{"question":"Write a function to find the maximum product subarray. The function should return the maximum product that can be obtained by multiplying the elements of any contiguous subarray within the input array.","solution":"def max_product_subarray(nums): Returns the maximum product that can be obtained by multiplying the elements of any contiguous subarray. :param nums: List[int] - list of integers :return: int - maximum product of any contiguous subarray if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Write a function to return the nth Fibonacci number using recursion. The nth Fibonacci number is defined as the sum of the two preceding ones, starting from 0 and 1. For example, the sequence goes 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to calculate the depth of a binary tree. What are depth and height?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def tree_depth(root): Calculates the depth of a binary tree. Depth is defined as the number of edges from the root node to the deepest leaf node. Args: root (TreeNode): the root of the binary tree Returns: int: the depth of the binary tree if not root: return 0 left_depth = tree_depth(root.left) right_depth = tree_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to find the nth to last element of a singly linked list. The function should take the head of the linked list and the nth value as arguments and return the value of the nth to last element.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def nth_to_last(head, n): Returns the nth to last element in the singly linked list. fast = slow = head # Move fast pointer n steps ahead for _ in range(n): if fast is None: return None fast = fast.next # Move both pointers until fast reaches the end while fast: fast = fast.next slow = slow.next return slow.value if slow else None"},{"question":"Write a function to find the maximum element in an array. The function should return the maximum element and its index in the array. If the array is empty, return a tuple containing None and None.","solution":"def find_max_element(arr): Returns the maximum element and its index in the array. If the array is empty, returns a tuple (None, None). if not arr: return (None, None) max_element = arr[0] max_index = 0 for index, element in enumerate(arr[1:], start=1): if element > max_element: max_element = element max_index = index return (max_element, max_index)"},{"question":"Write a function to determine the depth of the deepest level of an N-ary tree. An N-ary tree is a tree in which each node has zero or more children.","solution":"class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] def max_depth(root): Determine the depth of the deepest level of an N-ary tree. :param root: Root node of the N-ary tree :return: Depth of the deepest level of the N-ary tree if not root: return 0 if not root.children: return 1 max_child_depth = 0 for child in root.children: child_depth = max_depth(child) max_child_depth = max(max_child_depth, child_depth) return max_child_depth + 1"},{"question":"Write a function to find the first and last position of an element in a sorted array. If the target is not found in the array, return [-1, -1]. For example, given the array [5, 7, 7, 8, 8, 10] and target 8, the function should return [3, 4].","solution":"def search_range(nums, target): Find the first and last position of the target in the sorted array nums. If the target is not found, return [-1, -1]. def binary_search_left(nums, target): left, right = 0, len(nums) while left < right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: right = mid return left def binary_search_right(nums, target): left, right = 0, len(nums) while left < right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid return left left_idx = binary_search_left(nums, target) right_idx = binary_search_right(nums, target) - 1 if left_idx <= right_idx and left_idx < len(nums) and nums[left_idx] == target and nums[right_idx] == target: return [left_idx, right_idx] else: return [-1, -1]"},{"question":"Write a function to determine the minimum number of coins required to make up a given amount. You can use any number of each kind of coin.","solution":"def min_coins(coins, amount): Determines the minimum number of coins required to make up a given amount. :param coins: List of coin denominations (integers) :param amount: The amount for which we need the minimum number of coins (integer) :return: The minimum number of coins required to make up the amount, -1 if it is not possible. # Initialize the DP array with infinity values dp = [float('inf')] * (amount + 1) # Base case: 0 amount requires 0 coins dp[0] = 0 # Compute minimum coins for each amount from 1 to amount for a in range(1, amount + 1): for coin in coins: if a - coin >= 0: dp[a] = min(dp[a], dp[a - coin] + 1) # If dp[amount] is still infinity, it means it's not possible to form the amount return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to implement a wildcard pattern matching with support for '?' and '*' characters.","solution":"def isMatch(s, p): Returns True if the string s matches the pattern p which includes wildcard characters '?' and '*'. '?' matches any single character. '*' matches any sequence of characters (including the empty sequence). # Initialize pointers for string s and pattern p s_ptr, p_ptr = 0, 0 match, star_idx = 0, -1 while s_ptr < len(s): # Match with '?' if p_ptr < len(p) and (p[p_ptr] == '?' or p[p_ptr] == s[s_ptr]): s_ptr += 1 p_ptr += 1 # Match with '*' elif p_ptr < len(p) and p[p_ptr] == '*': star_idx = p_ptr match = s_ptr p_ptr += 1 # Handle the star case elif star_idx != -1: p_ptr = star_idx + 1 match += 1 s_ptr = match else: return False # Check for remaining stars in pattern p while p_ptr < len(p) and p[p_ptr] == '*': p_ptr += 1 return p_ptr == len(p)"},{"question":"Write a function to calculate the sum of the squares of all numbers from 1 to n, where n is a positive integer, and return the result as a list. Each element in the list should be the square of the respective number from 1 to n. The function should handle large numbers efficiently.","solution":"def sum_of_squares(n): Given a positive integer n, return a list containing the square of each number from 1 to n. Parameters: n (int): The upper limit of the range (inclusive). Returns: list of int: A list containing the square of each number from 1 to n. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") return [i**2 for i in range(1, n+1)]"},{"question":"Write a function to find the maximum profit that can be achieved from at most two transactions on a given list of daily stock prices.","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved from at most two transactions on a given list of daily stock prices. if not prices: return 0 first_buy, first_sell = float('inf'), 0 second_buy, second_sell = float('inf'), 0 for price in prices: first_buy = min(first_buy, price) first_sell = max(first_sell, price - first_buy) second_buy = min(second_buy, price - first_sell) second_sell = max(second_sell, price - second_buy) return second_sell"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should be designed to handle large numbers efficiently. How can we optimize the recursive calculation of factorial for better performance? One approach might involve memoization to store previously calculated results to avoid redundant computations. Let's implement this technique in our function.","solution":"def factorial(n, memo={}): Returns the factorial of n using recursion and memoization. if n in memo: return memo[n] if n <= 1: return 1 memo[n] = n * factorial(n-1, memo) return memo[n]"},{"question":"Write a function to calculate the sum of all numbers between 1 and n, where n is a positive integer. This function should be efficient and should not use any loops or recursion. You can use mathematical formulas to achieve this.","solution":"def sum_of_numbers(n): Returns the sum of all numbers between 1 and n. Parameters: n (int): A positive integer. Returns: int: The sum of all numbers between 1 and n. return n * (n + 1) / 2"},{"question":"Write a function to calculate the sum of all positive even numbers in a given list of integers, excluding negative numbers.","solution":"def sum_positive_even_numbers(nums): Returns the sum of all positive even numbers in the given list of integers. Args: nums (list of int): List of integers. Returns: int: Sum of all positive even numbers. return sum(num for num in nums if num > 0 and num % 2 == 0)"},{"question":"Write a function to find the minimum depth of a binary search tree (BST) using Python. The minimum depth is the shortest path from the root node to a leaf node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def min_depth(root): Return the minimum depth of the binary search tree. if root is None: return 0 # If left subtree is None, then recur for right subtree if root.left is None: return min_depth(root.right) + 1 # If right subtree is None, then recur for left subtree if root.right is None: return min_depth(root.left) + 1 # If both subtrees are not None, then recur for both subtrees return min(min_depth(root.left), min_depth(root.right)) + 1"},{"question":"Write a function to reverse a linked list iteratively. Can you do it without using any extra space?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverse a linked list iteratively without using extra space. :param head: ListNode :return: ListNode previous = None current = head while current: next_node = current.next current.next = previous previous = current current = next_node return previous"},{"question":"Write a function to reverse the sentence \\"Hello World\\".","solution":"def reverse_sentence(sentence): Returns the reversed form of the input sentence. return ' '.join(reversed(sentence.split()))"},{"question":"Write a function to calculate the sum of two integers. What is the time complexity and space complexity of this function?","solution":"def sum_two_integers(a, b): Returns the sum of two integers a and b. return a + b # Time Complexity: O(1) # Space Complexity: O(1)"},{"question":"Write a function to find the intersection of two lists and return the result as a sorted list. The function should handle duplicate elements correctly, ensuring that each element in the result appears only once. For example, if the input lists are [1, 2, 2, 3] and [2, 2, 4], the function should return [2].","solution":"def intersection_of_lists(list1, list2): Returns the sorted intersection of two lists with each element appearing only once. # Convert both lists to sets to remove duplicates and then find the intersection set1 = set(list1) set2 = set(list2) # Find the intersection intersection = set1.intersection(set2) # Convert the result to a sorted list and return return sorted(list(intersection))"},{"question":"Write a function to create a binary tree from a given list of nodes. Each node in the list is represented as a tuple \`(val, left_index, right_index)\`, where \`val\` is the node's value, and \`left_index\` and \`right_index\` are the indices of the left and right children in the list, respectively. If a node has no left or right child, its respective index should be \`-1\`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def create_binary_tree(nodes): if not nodes: return None node_list = [TreeNode(val) for val, _, _ in nodes] for idx, (val, left_idx, right_idx) in enumerate(nodes): if left_idx != -1: node_list[idx].left = node_list[left_idx] if right_idx != -1: node_list[idx].right = node_list[right_idx] return node_list[0]"},{"question":"Write a function to check if two binary strings are equal.","solution":"def are_binary_strings_equal(bin1, bin2): Returns True if bin1 and bin2 are equal binary strings, otherwise False. return bin1 == bin2"},{"question":"Write a function to reverse the order of words in a given string. The string may contain punctuation and multiple spaces between words, and the function should handle these cases properly while reversing the order of words.","solution":"def reverse_words(s): Reverses the order of words in a given string. A 'word' is defined as a sequence of non-space characters. # Split the string into words (splitting on spaces and ignoring extra spaces) words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a single string separated by a single space return ' '.join(reversed_words)"},{"question":"Write a function to find the intersection of two linked lists in Python, where each node has an integer value. The intersection is defined as the nodes that appear in both lists, and the result should contain only unique elements.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def get_intersection(head1, head2): Function to find the intersection of two linked lists. Both linked lists are made of nodes with integer values. The intersection should contain unique elements. set1 = set() set2 = set() current = head1 while current: set1.add(current.val) current = current.next current = head2 while current: set2.add(current.val) current = current.next intersection = set1.intersection(set2) return list(intersection)"},{"question":"Write a function to check if a given string contains only alphabetic characters.","solution":"def is_alpha(string): Returns True if the string contains only alphabetic characters, False otherwise. return string.isalpha()"},{"question":"Write a function to calculate the sum of squares of array elements.","solution":"def sum_of_squares(arr): Returns the sum of the squares of the array elements. return sum(x ** 2 for x in arr)"},{"question":"Write a function to find the maximum of two numbers using the conditional (ternary) operator in Python.","solution":"def maximum(a, b): Returns the maximum of two numbers using the conditional (ternary) operator. return a if a > b else b"},{"question":"Write a function to calculate the sum of Fibonacci numbers up to a given number \`n\`. The function should be efficient in terms of time complexity.","solution":"def sum_fibonacci_up_to_n(n): Returns the sum of Fibonacci numbers up to a given number \`n\`. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") fib1, fib2 = 0, 1 sum_fib = 0 while fib1 <= n: sum_fib += fib1 fib1, fib2 = fib2, fib1 + fib2 return sum_fib"},{"question":"Write a function to calculate the number of ways to distribute \`n\` distinct items into \`k\` distinct bins such that no bin is empty.","solution":"from math import factorial def stirling_second_kind(n, k): Returns the number of ways to distribute n distinct items into k distinct bins such that no bin is empty. if n == k: return 1 elif k == 0 or k > n: return 0 else: return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1) def distribute_items(n, k): Calculates the number of ways to distribute n distinct items into k distinct bins such that no bin is empty. if n < k: return 0 # Calculate Stirling number of the second kind stirling_number = stirling_second_kind(n, k) # Multiply by k! because we have to consider the permutations of the bins return stirling_number * factorial(k)"},{"question":"Write a function to calculate the sum of all even numbers between two integers \`start\` and \`end\` (inclusive). If \`start\` is greater than \`end\`, return -1. For example, \`calculateEvenSum(2, 10)\` should return 30, as the even numbers between 2 and 10 are 2, 4, 6, 8, 10, whose sum is 30. If \`start\` is 5 and \`end\` is 3, return -1.","solution":"def calculateEvenSum(start, end): Returns the sum of all even numbers between start and end (inclusive). If start is greater than end, return -1. if start > end: return -1 even_sum = 0 for num in range(start, end + 1): if num % 2 == 0: even_sum += num return even_sum"},{"question":"Write a function to demonstrate the use of a for loop and a print statement in Python. The function should print each element in a provided list of numbers.","solution":"def print_elements(elements): Prints each element in the provided list of elements. :param elements: list of elements to be printed for element in elements: print(element) # The function doesn't return any values, it simply prints elements."},{"question":"Write a function to generate all possible permutations of a list of numbers. The function should be named \`generate_permutations\` and take a single parameter: \`nums\`. The \`nums\` parameter is a list of integers. The function should return a list of all possible permutations of \`nums\`.","solution":"from itertools import permutations def generate_permutations(nums): Generates all possible permutations of a list of numbers. Returns a list of all possible permutations. return list(permutations(nums))"},{"question":"Write a function to check if a number is a strong number. In a strong number, the sum of the factorials of the individual digits equals the original number. For example, 145 is a strong number because 1! + 4! + 5! = 145.","solution":"import math def is_strong_number(num): Checks if a number is a strong number. A strong number is one where the sum of the factorial of its digits equals the number itself. Args: num (int): The number to check. Returns: bool: True if the number is strong, False otherwise. sum_of_factorials = sum(math.factorial(int(digit)) for digit in str(num)) return sum_of_factorials == num"},{"question":"Write a function to sort an array in ascending order using the Insertion Sort algorithm in Python. Insertion sort is a simple comparison-based algorithm that works by building the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, it has several advantages such as simple implementation, efficient for small data sets, more efficient in practice than most other simple quadratic algorithms such as selection sort or bubble sort, adaptive, and stable.","solution":"def insertion_sort(arr): Sorts an array in ascending order using Insertion Sort algorithm. Parameters: arr (list): List of elements to be sorted Returns: list: Sorted list in ascending order for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position. while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to calculate the nth Fibonacci number using a non-recursive approach in Python.","solution":"def fibonacci(n): Returns the nth Fibonacci number using a non-recursive approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to implement the Binary Gradient Descent algorithm for a simple linear regression problem. The function should take in the features (X) and labels (y), the initial parameters (theta), and the number of iterations (iterations) as input arguments, and return the optimized parameters (theta) and the computed losses over time.","solution":"import numpy as np def binary_gradient_descent(X, y, theta, iterations, alpha=0.01): Perform Binary Gradient Descent for a simple linear regression problem. Parameters: X (np.ndarray): Features, shape (m, n) y (np.ndarray): Labels, shape (m,) theta (np.ndarray): Initial parameters, shape (n,) iterations (int): Number of iterations alpha (float): Learning rate Returns: theta (np.ndarray): Optimized parameters, shape (n,) losses (list): Computed losses over time m = len(y) losses = [] for i in range(iterations): # Compute the prediction prediction = X.dot(theta) # Compute the error error = prediction - y # Compute the gradient gradient = (1/m) * X.T.dot(error) # Update the parameters theta theta -= alpha * gradient # Compute the loss (Mean Squared Error) loss = (1/(2*m)) * np.sum(error ** 2) losses.append(loss) return theta, losses"},{"question":"Write a function to sort an array of integers in ascending order using the insertion sort algorithm.","solution":"def insertion_sort(arr): Sorts an array of integers in ascending order using the insertion sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: The sorted list of integers. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to retrieve the shortest path in a weighted graph. You can use any algorithm that you prefer (Dijkstra's, Bellman-Ford, etc).","solution":"import heapq def dijkstra(graph, start, end): Returns the shortest path from start node to end node in a weighted graph. :param graph: Dict. Key is a node and value is a list of tuples (neighbor, weight) :param start: Node to start from :param end: Node to end at :return: Tuple of (shortest_distance, path as List of nodes) queue = [(0, start, [])] seen = set() mins = {start: 0} while queue: (cost, current_node, path) = heapq.heappop(queue) if current_node in seen: continue seen.add(current_node) path = path + [current_node] if current_node == end: return (cost, path) for next_node, weight in graph.get(current_node, []): if next_node in seen: continue prev = mins.get(next_node, None) next_cost = cost + weight if prev is None or next_cost < prev: mins[next_node] = next_cost heapq.heappush(queue, (next_cost, next_node, path)) return (float(\\"inf\\"), []) # Example usage: # graph = { # 'A': [('B', 1), ('C', 4)], # 'B': [('A', 1), ('C', 2), ('D', 5)], # 'C': [('A', 4), ('B', 2), ('D', 1)], # 'D': [('B', 5), ('C', 1)] # } # print(dijkstra(graph, 'A', 'D'))"},{"question":"Write a function to check if a number is perfect or not. A number is considered perfect if the sum of its proper divisors (excluding the number itself) equals the number. For example, 6 is a perfect number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6.","solution":"def is_perfect_number(n): Check if a number is perfect or not. A number is considered perfect if the sum of its proper divisors (excluding the number itself) equals the number. Args: n (int): The input number. Returns: bool: True if the number is perfect, False otherwise. if n <= 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n"},{"question":"Write a function to solve N-Queen problem.","solution":"def solve_n_queens(n): Solves the N-Queens problem and returns all possible solutions. :param n: Number of queens and size of the chessboard (n x n) :return: List of solutions, each solution is a list of strings representing the board def is_safe(row, col, solution): # Check if it's safe to place a queen at the given row and col for r in range(row): if solution[r] == col or solution[r] - r == col - row or solution[r] + r == col + row: return False return True def solve(row, solution, results): if row == n: # Convert the numerical solution to a board representation board = [] for i in range(n): line = \\".\\" * solution[i] + \\"Q\\" + \\".\\" * (n - solution[i] - 1) board.append(line) results.append(board) return for col in range(n): if is_safe(row, col, solution): solution[row] = col solve(row + 1, solution, results) results = [] solve(0, [-1] * n, results) return results"},{"question":"Write a function to find the second largest number in an array of integers. If the array has less than two elements, the function should return None.","solution":"def second_largest(numbers): Finds the second largest number in an array of integers. If the array has less than two elements, returns None. if len(numbers) < 2: return None first_largest = second_largest = float('-inf') for number in numbers: if number > first_largest: second_largest = first_largest first_largest = number elif number > second_largest and number != first_largest: second_largest = number return second_largest if second_largest != float('-inf') else None"},{"question":"Write a function to parse a string representing the coordinates of points within a given 2D plane. The coordinates are provided in a string format where each point is separated by a space and consists of x and y values separated by a comma. The function should return a list of tuples, where each tuple represents a point in the 2D plane.","solution":"def parse_coordinates(coordinate_string): Parses a string of coordinates and returns a list of tuples representing points in a 2D plane. Parameters: coordinate_string (str): A string where each point is separated by a space, and each point's x and y values are separated by a comma. Returns: list: A list of tuples, where each tuple represents a point (x, y). coordinates = coordinate_string.split() points = [(int(x), int(y)) for x, y in (point.split(',') for point in coordinates)] return points"},{"question":"Write a function to find the minimum element in a sorted array that has been circularly sorted and rotated (non-descending order, then circularly rotated). The array does not contain duplicate elements. For example, the array \`[4, 5, 6, 7, 0, 1, 2]\` is circularly sorted and rotated. The function should return the minimum element in the array. If the array is empty, return \`None\`.","solution":"def find_min_in_rotated_sorted_array(arr): Returns the minimum element in a circularly sorted and rotated array. If the array is empty, returns None. if not arr: return None left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left] # Test cases to verify the solution print(find_min_in_rotated_sorted_array([4, 5, 6, 7, 0, 1, 2])) # Output: 0 print(find_min_in_rotated_sorted_array([3, 4, 5, 1, 2])) # Output: 1 print(find_min_in_rotated_sorted_array([1])) # Output: 1 print(find_min_in_rotated_sorted_array([1, 2, 3, 4, 5])) # Output: 1 print(find_min_in_rotated_sorted_array([])) # Output: None"},{"question":"Write a function to find the maximum number in a 2D array. The 2D array can contain both positive and negative numbers, and it is not sorted. Your function should have a time complexity of O(m * n), where m is the number of rows and n is the number of columns.","solution":"def find_max_2d(arr): Returns the maximum number in a 2D array. :param arr: List of lists containing the 2D array :return: The maximum number found in the array if not arr or not arr[0]: return None # To handle empty array edge case max_num = arr[0][0] for row in arr: for num in row: if num > max_num: max_num = num return max_num"},{"question":"Write a function to convert a given string to its equivalent in Pig Latin. Pig Latin is a simple way of modifying English phrases and words. The rules are: 1. For words that start with a vowel, add \\"way\\" to the end. 2. For words that start with a consonant, move all consonants before the first vowel to the end, then add \\"ay\\". 3. Assume the input string contains only letters and spaces.","solution":"def pig_latin(text): Convert a given string to its Pig Latin equivalent. Parameters: text (str): Input string containing words. Returns: str: The Pig Latin equivalent of the input string. def convert_word(word): vowels = \\"aeiou\\" if word[0] in vowels: return word + \\"way\\" else: for i, char in enumerate(word): if char in vowels: return word[i:] + word[:i] + \\"ay\\" return word + \\"ay\\" # in case the word has no vowels (though this won't normally happen) words = text.split() pig_latin_words = [convert_word(word.lower()) for word in words] return ' '.join(pig_latin_words)"},{"question":"Write a function to calculate the factorial of a number recursively. How can we optimize this function using memoization?","solution":"def factorial(n, memo={}): Returns the factorial of n using recursion with memoization. if n in memo: # Check if result is already computed return memo[n] if n == 0: # Base case: factorial of 0 is 1 return 1 result = n * factorial(n - 1, memo) # Recursive case memo[n] = result # Store the result in memo dictionary return result"},{"question":"Write a function to determine the minimum difference between two elements in a list of integers.","solution":"def minimum_difference(nums): Returns the minimum difference between any two elements in a list of integers. if len(nums) < 2: return 0 # If less than 2 elements, difference is 0 nums.sort() # Sort the list to make finding the minimum difference easier min_diff = float('inf') # Initialize with a large number for i in range(1, len(nums)): min_diff = min(min_diff, nums[i] - nums[i - 1]) return min_diff"},{"question":"Write a function to calculate the Fibonacci sequence up to the nth term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few terms of the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth term. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence"},{"question":"Write a function to calculate the sum of the series 1 to n, where n is a positive integer, using recursion in Python.","solution":"def sum_series(n): Returns the sum of the series 1 to n using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 1 return n + sum_series(n - 1)"},{"question":"Write a function to reverse the digits of an integer. For example, if the input number is 123, the output should be 321. If the input number is -123, the output should be -321. However, if the reversed number overflows (beyond the 32-bit signed integer range [-2^31, 2^31 - 1]), then the function should return 0. How can I solve this in Python?","solution":"def reverse_integer(x): Reverses the digits of an integer. Returns zero if the reversed integer overflows the 32-bit signed integer range. sign_multiplier = -1 if x < 0 else 1 x = abs(x) reversed_x = 0 while x != 0: digit = x % 10 reversed_x = reversed_x * 10 + digit x //= 10 reversed_x *= sign_multiplier if reversed_x < -2**31 or reversed_x > 2**31 - 1: return 0 return reversed_x"},{"question":"Write a function to calculate and print the Fibonacci sequence up to a given number 'n'. The Fibonacci sequence should start with 0 and 1. Each subsequent number in the sequence is the sum of the two preceding ones. Your function should take an integer 'n' as input and return the sequence as a list. Additionally, implement a check function that takes 'n' and the expected sequence as inputs, and verifies if the generated sequence by your main function matches the expected one.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the given number 'n'. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] while len(sequence) < n: next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence def check_fibonacci(n, expected_sequence): Verifies if the generated Fibonacci sequence matches the expected sequence. return fibonacci(n) == expected_sequence"},{"question":"Write a function to calculate the number of distinct occurrences of a character in a string. The function should return the count of unique characters, regardless of their frequency in the string.","solution":"def count_unique_characters(s): Returns the number of distinct characters in the string. Parameters: s (str): The input string. Returns: int: The count of unique characters in the string. unique_chars = set(s) return len(unique_chars)"},{"question":"Write a function to determine if a list of strings contains any duplicates, and return True if duplicates are found, and False otherwise.","solution":"def contains_duplicates(strings): Returns True if there are duplicate strings in the list, otherwise False. return len(strings) != len(set(strings))"},{"question":"Write a function to check if a given string is a valid integer string. A valid integer string is defined as a string that can be converted to an integer without any leading or trailing non-digit characters. Additionally, the integer can optionally have a leading '+' or '-' sign.","solution":"def is_valid_integer(s): Checks if a given string is a valid integer string. A valid integer string is defined as a string that can be converted to an integer without any leading or trailing non-digit characters. The integer can optionally have a leading '+' or '-' sign. if not s: return False if s[0] in ['+', '-']: s = s[1:] return s.isdigit()"},{"question":"Write a function to reverse a string in Python. Implement the function called \`reverse_string\` that takes a single string as an argument and returns the reversed version of that string.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to calculate the sum of all positive numbers in a given list.","solution":"def sum_of_positive_numbers(numbers): Returns the sum of all positive numbers in the given list. return sum(n for n in numbers if n > 0)"},{"question":"Write a function to count the number of leaf nodes in a binary search tree (BST). A leaf node is one that has no children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_leaf_nodes(root): Count the number of leaf nodes in a binary search tree. :param root: Root node of the binary search tree :return: Number of leaf nodes if root is None: return 0 if root.left is None and root.right is None: return 1 return count_leaf_nodes(root.left) + count_leaf_nodes(root.right)"},{"question":"Write a function to calculate the nth row of Pascal's Triangle using an iterative approach. The nth row should be returned as a list of integers.","solution":"def pascal_triangle_row(n): Returns the nth row of Pascal's Triangle using an iterative approach. :param n: int - The row index of Pascal's Triangle to be returned. :return: list - The nth row of Pascal's Triangle. if n == 0: return [1] row = [1] for k in range(1, n + 1): row.append(row[k - 1] * (n - k + 1) // k) return row"},{"question":"Write a function to solve the Knapsack problem in Python. The function should be able to handle both 0/1 Knapsack (where you can take or not take each item exactly once) and fractional Knapsack (where you can take fractions of an item). Additionally, the function should be able to return the maximum value that can be achieved and the items taken for the 0/1 Knapsack problem.","solution":"def knapsack_01(capacity, weights, values): Solve the 0/1 Knapsack problem using Dynamic Programming. :param capacity: Maximum capacity of the knapsack :param weights: List of weights of the items :param values: List of values of the items :return: A tuple containing the maximum value that can be achieved and the list of items taken (as indices) n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] # Populate the dp table for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w - weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] # Find the items to take w = capacity items_taken = [] for i in range(n, 0, -1): if dp[i][w] != dp[i-1][w]: items_taken.append(i-1) w -= weights[i-1] return dp[n][capacity], items_taken def fractional_knapsack(capacity, weights, values): Solve the Fractional Knapsack problem using a Greedy approach. :param capacity: Maximum capacity of the knapsack :param weights: List of weights of the items :param values: List of values of the items :return: Maximum value that can be achieved index = list(range(len(values))) ratio = [v / w for v, w in zip(values, weights)] # Sort items by value to weight ratio in descending order index.sort(key=lambda i: ratio[i], reverse=True) max_value = 0 for i in index: if weights[i] <= capacity: max_value += values[i] capacity -= weights[i] else: max_value += values[i] * (capacity / weights[i]) break return max_value"},{"question":"Write a function to check if a string is a palindrome by removing some letters from it. For example, \\"aabccba\\" is a palindrome by removing \\"cc\\". The function should return \`True\` if it's possible to achieve a palindrome through deletions, \`False\` otherwise.","solution":"def can_form_palindrome(s): Checks if some letters can be removed from the string to form a palindrome. Args: s (str): Input string Returns: bool: True if it's possible to achieve a palindrome, False otherwise from collections import Counter # Count frequency of each character in the string char_count = Counter(s) # Count the number of characters with odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # Palindrome can be formed if at most one character has an odd frequency return odd_count <= 1"},{"question":"Write a function to compute the maximum sum of a contiguous subarray within a one-dimensional array of numbers. **Input:** An array of integers \`nums\` of length \`n\`. **Output:** The maximum sum of a contiguous subarray.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray in the given list of integers. :param nums: List[int] - a list of integers :return: int - the maximum sum of a contiguous subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to calculate the sum of all nodes in a binary tree. The function should return the sum as an integer.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left = left self.right = right = right def sum_of_nodes(root): Return the sum of all nodes in a binary tree. if root is None: return 0 return root.value + sum_of_nodes(root.left) + sum_of_nodes(root.right)"},{"question":"Write a function to implement binary search. Binary search is an algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one.","solution":"def binary_search(arr, target): Perform a binary search to find the target in the sorted list arr. Returns the index of the target if found, otherwise returns -1. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Write a function to calculate the modular inverse of a number under a given modulo. The modular inverse of an integer \`a\` under modulo \`m\` is an integer \`b\` such that \`(a * b) % m == 1\`. You need to implement a function that returns this modular inverse if it exists, or -1 if it does not exist. The function should handle both prime and non-prime modulo values.","solution":"def modular_inverse(a, m): Returns the modular inverse of a under modulo m if it exists, otherwise -1. def extended_gcd(a, b): if a == 0: return b, 0, 1 gcd, x1, y1 = extended_gcd(b % a, a) x = y1 - (b // a) * x1 y = x1 return gcd, x, y gcd, x, y = extended_gcd(a, m) if gcd != 1: return -1 else: return x % m"},{"question":"Write a function to validate anagrams. Anagrams are words or phrases that contain the same characters in a different order, forming a new word or phrase. Your function should take two strings as input and return true if they are anagrams, false otherwise.","solution":"def is_anagram(str1, str2): Check if two strings are anagrams of each other. Args: str1 (str): The first string to compare. str2 (str): The second string to compare. Returns: bool: True if the strings are anagrams, False otherwise. # Normalize the strings by removing spaces and converting to lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Compare the sorted characters of the strings return sorted(str1) == sorted(str2)"},{"question":"Write a function to reverse a linked list. The function should handle cases where the linked list is empty or contains only one element.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a linked list. :param head: ListNode :return: ListNode prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to determine the number of elements in a given list that are greater than a specified value.","solution":"def count_greater_than(lst, value): Returns the number of elements in the list that are greater than the specified value. Args: lst (list): The list of elements to be checked. value (int or float): The value to compare the elements to. Returns: int: The number of elements greater than the specified value. return sum(1 for x in lst if x > value)"},{"question":"Write a function to sort a list of integers in ascending order using the insertion sort algorithm. Insertion sort works by building a sorted array one item at a time. It takes each element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain. The function should return the sorted list.","solution":"def insertion_sort(arr): Sorts a list of integers in ascending order using the insertion sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to generate the Fibonacci sequence up to a given number \`n\`. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence should stop when the next number in the sequence would be greater than \`n\`. The function should return the sequence as a list.","solution":"def fibonacci_upto(n): Generate the Fibonacci sequence up to a given number n. Parameters: n (int): The upper limit for the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to n. if n < 0: return [] seq = [] a, b = 0, 1 while a <= n: seq.append(a) a, b = b, a + b return seq"},{"question":"Write a function to find the missing number in an array of integers from 1 to n. The array contains n-1 integers and is sorted.","solution":"def find_missing_number(arr): Finds the missing number in a sorted array of integers from 1 to n with one number missing. Args: arr (list): Sorted list of integers from 1 to n with one number missing. Returns: int: The missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a function to create a simple stack in Python. The stack should support operations like push, pop, and peek.","solution":"class SimpleStack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): if len(self.stack) == 0: raise IndexError(\\"pop from empty stack\\") return self.stack.pop() def peek(self): if len(self.stack) == 0: raise IndexError(\\"peek from empty stack\\") return self.stack[-1] def is_empty(self): return len(self.stack) == 0"},{"question":"Write a function to perform a depth-first search (DFS) on a binary tree and traverse all the nodes in the tree. The function should return the nodes in the order they are visited. You should also implement a method to convert the tree structure into an adjacency list representation to facilitate BFS traversal later (optional).","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def dfs(root): Perform Depth-First Search on a binary tree and return the nodes in the order they are visited. :param root: TreeNode, the root node of the binary tree :return: List of node values as they are visited visited = [] def dfs_helper(node): if node is not None: visited.append(node.val) dfs_helper(node.left) dfs_helper(node.right) dfs_helper(root) return visited"},{"question":"Write a function to find the maximum sum of a subarray of a given array, where the length of the subarray is equal to a given value k.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of a subarray of length k in the given array. Parameters: arr (list): The input array. k (int): The length of the subarray. Returns: int: The maximum sum of a subarray of length k. if not arr or k <= 0 or k > len(arr): return 0 # Initialize the sum of the first subarray of length k max_sum = current_sum = sum(arr[:k]) # Slide the window of length k across the array for i in range(k, len(arr)): current_sum = current_sum + arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to reverse a string without using any built-in string reversal functions or slicing techniques. How can you achieve this?","solution":"def reverse_string(s): Reverses the input string s without using built-in reversal functions or slicing. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to check if a given integer is a Fibonacci number. A Fibonacci number is an integer that appears in the Fibonacci sequence (0 indexing), where each number after the first two is the sum of the two preceding ones. The sequence starts with 0 and 1. Your function should return \`true\` if the number is part of the Fibonacci sequence, and \`false\` otherwise.","solution":"import math def is_fibonacci(n): Check if a given integer is a Fibonacci number. A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x if n < 0: return False return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)"},{"question":"Write a function to perform a simple binary search on a sorted array. Explain the logic behind each step of the implementation.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target value. Args: arr (list of int): Sorted list of integers. target (int): The integer value to search for. Returns: int: Index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 # Explanation: # 1. Initialize two pointers, left and right, to the start and end of the array, respectively. # 2. While the left pointer is less than or equal to the right pointer, do the following: # 3. Calculate the mid-point index of the current subarray. # 4. If the element at mid-point is equal to the target, return the mid-point index. # 5. If the element at mid-point is less than the target, move the left pointer to mid + 1. # 6. If the element at mid-point is greater than the target, move the right pointer to mid - 1. # 7. If the target is not found, return -1."},{"question":"Write a function to detect and return all palindromic substrings in a given string \`s\`. A palindromic substring is a substring that reads the same backward as forward. Your function should return a list of all such substrings, including single characters.","solution":"def palindromic_substrings(s): Returns a list of all palindromic substrings in the given string \`s\`. n = len(s) palindromes = [] def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: palindromes.append(s[left:right + 1]) left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return palindromes"},{"question":"Write a function to sort an array of integers in ascending order using the quicksort algorithm. The quicksort algorithm should be implemented using a divide-and-conquer approach.","solution":"def quicksort(arr): Sorts an array of integers in ascending order using the quicksort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: A new sorted list of integers in ascending order. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to calculate the number of 1 bits (set bits) in the binary representation of a given integer. This is also known as the Hamming Weight.","solution":"def hamming_weight(n): Calculates the number of 1 bits in the binary representation of an integer. Args: n (int): The integer to be evaluated. Returns: int: Number of 1 bits (set bits) in the binary representation of the given integer. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a function to find the maximum depth of a binary tree after performing a PostOrder traversal. Please provide the function in Python and include comments explaining each step.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth_postorder(root): Finds the maximum depth of a binary tree using post-order traversal. Args: root (TreeNode): Root node of the binary tree. Returns: int: Maximum depth of the binary tree. if root is None: return 0 # Recursively find the depth of the left and right subtrees left_depth = max_depth_postorder(root.left) right_depth = max_depth_postorder(root.right) # Compute the depth of the current node as max of left and right depth plus one (for the current level) return max(left_depth, right_depth) + 1"},{"question":"Write a function to merge two sorted arrays into a single sorted array without using any additional space. Here, the input arrays are large arrays and the space in the second array is limited to only store the final result (i.e., the merged sorted array).","solution":"def merge_arrays(arr1, arr2): Merges two sorted arrays into the second array without using any additional space. The second array must have enough space to hold the elements of both arrays. # Length of the arrays n1 = len(arr1) n2 = len(arr2) - len(arr1) # second array has extra spaces for arr1 elements # Indices of the last elements i = n1 - 1 j = n2 - 1 k = n1 + n2 - 1 # Merge the two arrays starting from the last element in each array while i >= 0 and j >= 0: if arr1[i] > arr2[j]: arr2[k] = arr1[i] i -= 1 else: arr2[k] = arr2[j] j -= 1 k -= 1 # If there are remaining elements in arr1, copy them while i >= 0: arr2[k] = arr1[i] i -= 1 k -= 1 # No need to copy the remaining elements from arr2 since they are already in place"},{"question":"Write a function to generate a list of all possible subsets of a set of numbers, including the empty set. For instance, if the input is [1,2,3], the function should return [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]].","solution":"from itertools import chain, combinations def generate_subsets(numbers): Generates all possible subsets of a set of numbers, including the empty set. :param numbers: List of numbers to generate subsets for. :return: List of all possible subsets. return list(chain.from_iterable(combinations(numbers, r) for r in range(len(numbers) + 1))) # Convert the tuples to lists for the desired output format def subsets_as_lists(numbers): return [list(subset) for subset in generate_subsets(numbers)]"},{"question":"Write a function to remove the nth element from the end of a singly linked list and return the head of the modified list. The function should handle edge cases properly, such as when n is 0 (removing the head) or when n is greater than the length of the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_nth_from_end(head, n): Removes the nth element from the end of a singly linked list and returns the head of the modified list. def get_length(node): length = 0 while node: length += 1 node = node.next return length dummy = ListNode(0) dummy.next = head length = get_length(head) # Edge case: if n is greater than the length of the list, return the original list if n > length: return head current = dummy for _ in range(length - n): current = current.next # Remove the nth node from the end current.next = current.next.next return dummy.next"},{"question":"Write a function to search for a target value in an array. If the target is found, return a slice of indices where the target appears in the array. If not, return an empty slice. The array may contain duplicates. For instance, \`nums = [2,4,5,2,4,6,0,2]\` and \`target = 2\` should return \`[0, 3, 6, 7]\`.","solution":"def search_target_indices(array, target): Returns a list of indices where the target value appears in the array. If target is not found, returns an empty list. result = [index for index, value in enumerate(array) if value == target] return result"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. The function should handle large numbers efficiently using the \`decimal\` module to avoid integer overflow. The function should take an integer as input and return the factorial as a \`Decimal\` object.","solution":"from decimal import Decimal, getcontext # Set the precision high enough getcontext().prec = 10000 def factorial(n): Recursively calculates the factorial of n using the Decimal class for high precision. Args: n (int): The integer for which to compute the factorial. Returns: Decimal: The factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return Decimal(1) else: return Decimal(n) * factorial(n - 1)"},{"question":"Write a function to perform an in-order traversal on a binary tree without using recursion. The function should print the values as they are visited.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def in_order_traversal(root): Perform an in-order traversal on a binary tree without using recursion. Prints the node values as they are visited. stack = [] current = root while current or stack: while current: stack.append(current) current = current.left current = stack.pop() print(current.val, end=' ') current = current.right"},{"question":"Write a function to create a new Python dictionary.","solution":"def create_dict(pairs): Creates a new dictionary from the given list of key-value tuples. :param pairs: List of tuples, where each tuple contains a key and a value :return: A dictionary composed of the key-value pairs return dict(pairs)"},{"question":"Write a function to determine the length of the longest substring containing at most \`k\` distinct characters. For instance, consider the string \\"eceba\\" and \`k = 2\`. The longest substring is \\"eceb\\" which contains at most 2 distinct characters.","solution":"def length_of_longest_substring_k_distinct(s, k): Finds the length of the longest substring containing at most k distinct characters. :param s: Input string. :param k: The maximum number of distinct characters. :return: Length of the longest substring containing at most k distinct characters. if k == 0 or not s: return 0 char_map = {} left = 0 max_len = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Write a function to convert a decimal number to a binary number. The function should handle large decimal numbers and return the binary representation as a string.","solution":"def decimal_to_binary(decimal_number): Converts a decimal number to its binary representation as a string. :param decimal_number: The decimal number to be converted. :return: The binary representation of the decimal number as a string. if decimal_number == 0: return \\"0\\" binary_number = \\"\\" while decimal_number > 0: remainder = decimal_number % 2 binary_number = str(remainder) + binary_number decimal_number //= 2 return binary_number"},{"question":"Write a function to find a pair of indices in an array such that the sum of the elements at those indices is zero. If such a pair exists, return the indices in a tuple \`(i, j)\`. If no such pair exists, return \`None\`.","solution":"def find_pair_with_zero_sum(arr): This function finds a pair of indices in an array such that the sum of the elements at those indices is zero. If such a pair exists, it returns the indices in a tuple (i, j). If no such pair exists, it returns None. index_map = {} for i, num in enumerate(arr): if -num in index_map: return (index_map[-num], i) index_map[num] = i return None"},{"question":"Write a function to compute the nth power of a number in Python. The function should take two parameters: the base number and the exponent, and return the result of raising the base to the power of the exponent.","solution":"def power(base, exponent): Returns the result of raising the base to the power of the exponent. return base ** exponent"},{"question":"Write a function to compute the number of combinations of choosing \`k\` items from a set of \`n\` items where order does not matter. This function should handle large numbers efficiently. To avoid integer overflow issues, the function should return the result as a floating-point number.","solution":"from math import comb def combinations(n, k): Returns the number of combinations of choosing k items from a set of n items where order does not matter. The result is returned as a floating-point number. return float(comb(n, k)) # For versions of Python prior to 3.8, use the following implementation: # from math import factorial # def combinations(n, k): # # Returns the number of combinations of choosing k items from a set of n items # where order does not matter. The result is returned as a floating-point number. # # if k > n: # return 0.0 # k = min(k, n - k) # c = 1 # for i in range(k): # c = c * (n - i) // (i + 1) # return float(c)"},{"question":"Write a function to calculate the minimum sum of the products of two arrays by sorting both arrays and then pairing the smallest elements of both arrays together, the second smallest with the second smallest, and so on. This is also known as the optimal assignment problem.","solution":"def min_sum_product(arr1, arr2): Returns the minimum sum of the products of two arrays by pairing elements optimally. arr1_sorted = sorted(arr1) arr2_sorted = sorted(arr2) return sum(a * b for a, b in zip(arr1_sorted, arr2_sorted))"},{"question":"Write a function to check if a list of integers contains a specific number.","solution":"def contains_number(lst, num): Checks if the list \`lst\` contains the number \`num\`. Args: lst (list of int): List of integers. num (int): The number to check for. Returns: bool: True if \`num\` is in \`lst\`, False otherwise. return num in lst"},{"question":"Write a function to convert the following array into a binary tree and return the root of the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def array_to_binary_tree(arr): if not arr: return None root = TreeNode(arr[0]) queue = [root] i = 1 while i < len(arr): current = queue.pop(0) if i < len(arr): current.left = TreeNode(arr[i]) queue.append(current.left) i += 1 if i < len(arr): current.right = TreeNode(arr[i]) queue.append(current.right) i += 1 return root"},{"question":"Write a function to calculate the sum of all numbers in a list that are greater than a given threshold value. The function should take two parameters: a list of numbers (list_of_nums) and a threshold value (threshold). The function should return the sum of all numbers greater than the threshold.","solution":"def sum_above_threshold(list_of_nums, threshold): Returns the sum of all numbers in the list that are greater than the threshold. return sum(num for num in list_of_nums if num > threshold)"},{"question":"Write a function to write an integer to binary file and then read it back.","solution":"def write_int_to_binary_file(filename, number): Write an integer to a binary file. :param filename: The name of the file to write to. :param number: The integer number to write. with open(filename, 'wb') as f: # Convert to 4 bytes using little-endian format f.write(number.to_bytes(4, byteorder='little', signed=True)) def read_int_from_binary_file(filename): Read an integer from a binary file. :param filename: The name of the file to read from. :return: The integer number read. with open(filename, 'rb') as f: # Read 4 bytes and convert back to integer number = int.from_bytes(f.read(4), byteorder='little', signed=True) return number"},{"question":"Write a function to convert all lowercase letters in a string to uppercase.","solution":"def convert_to_uppercase(s): Converts all lowercase letters in the string 's' to uppercase. return s.upper()"},{"question":"Write a function to calculate the sum of all the multiples of 3 or 5 below a given number but not including that number itself.","solution":"def sum_of_multiples(limit): Returns the sum of all multiples of 3 or 5 below the given limit. :param limit: Integer, the upper boundary (exclusive) :return: Integer, sum of all multiples of 3 or 5 below the limit return sum(x for x in range(1, limit) if x % 3 == 0 or x % 5 == 0)"},{"question":"Write a function to detect the presence of a cycle in a given linked list. If a cycle is detected, the function should return \`True\`; otherwise, it should return \`False\`.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Detects a cycle in a linked list. :param head: ListNode - The head of the linked list. :return: bool - True if a cycle is detected, False otherwise. if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function to rotate an array to the right by k steps, where k is non-negative. The function should modify the array in place without using extra space.","solution":"def rotate(nums, k): Rotates the array nums to the right by k steps in-place. n = len(nums) k = k % n def reverse(sub_nums, start, end): while start < end: sub_nums[start], sub_nums[end] = sub_nums[end], sub_nums[start] start += 1 end -= 1 # Reverse the whole array reverse(nums, 0, n-1) # Reverse the first k elements reverse(nums, 0, k-1) # Reverse the remaining elements reverse(nums, k, n-1)"},{"question":"Write a function to reverse an integer in Python. How can I handle cases where the reversed number exceeds the 32-bit signed integer range?","solution":"def reverse_integer(x): Reverses the digits of an integer. If the reversed integer overflows (i.e. exceeds 32-bit signed integer range), the function returns 0. INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if x < 0 else 1 x *= sign reversed_x = 0 while x: reversed_x = reversed_x * 10 + x % 10 x //= 10 reversed_x *= sign if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Write a function to find the most frequent element in a list using a specific approach that balances time and space efficiency. This approach should optimize both time and space complexity, ideally achieving a time complexity of O(n) and a space complexity of O(n).","solution":"def most_frequent_element(lst): Finds the most frequent element in the given list. :param lst: List of elements :return: The most frequent element in the list if not lst: return None frequency = {} max_count = 0 most_frequent = None for element in lst: frequency[element] = frequency.get(element, 0) + 1 if frequency[element] > max_count: max_count = frequency[element] most_frequent = element return most_frequent"},{"question":"Write a function to reverse a string using slicing.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to return the length of the longest increasing subsequence (LIS) in an array of integers. The LIS is defined as a subsequence where the elements are in strictly increasing order, and the subsequence can be obtained without reordering the original array's elements.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the array of integers. if not nums: return 0 n = len(nums) lis = [1] * n for i in range(1, n): for j in range(0, i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Write a function to count how many times each element appears in a list and return a dictionary with the element as the key and the count as the value. For example, given the list \`[1, 2, 2, 3, 3, 3]\`, the function should return \`{1: 1, 2: 2, 3: 3}\`.","solution":"def count_elements(lst): Returns a dictionary with the count of each element in the list. element_count = {} for element in lst: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 return element_count"},{"question":"Write a function to automate the building of a Linux-based virtual machine using AWS EC2. This function should take in parameters for the instance type, AMI ID, security group ID, and key pair name. The function should then create the VM and return the instance ID of the newly created VM.","solution":"import boto3 def create_ec2_instance(instance_type, ami_id, security_group_id, key_pair_name): Creates an EC2 instance and returns the instance ID. Parameters: - instance_type (str): The type of instance (e.g., 't2.micro') - ami_id (str): The ID of the Amazon Machine Image (AMI) to use - security_group_id (str): The ID of the security group to associate with the instance - key_pair_name (str): The name of the key pair to use for SSH access Returns: - str: The instance ID of the newly created instance ec2 = boto3.client('ec2') response = ec2.run_instances( InstanceType=instance_type, ImageId=ami_id, SecurityGroupIds=[security_group_id], KeyName=key_pair_name, MinCount=1, MaxCount=1 ) instance_id = response['Instances'][0]['InstanceId'] return instance_id"},{"question":"Write a function to reverse a linked list in place using recursion.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list in place using recursion. :param head: ListNode, head of the linked list to be reversed :return: ListNode, the new head of the reversed linked list if head is None or head.next is None: return head new_head = reverse_linked_list(head.next) head.next.next = head head.next = None return new_head # Helper function to create a linked list from a list (used for testing) def create_linked_list(elements): if not elements: return None head = ListNode(elements[0]) current = head for element in elements[1:]: current.next = ListNode(element) current = current.next return head # Helper function to convert a linked list to a list (used for testing) def linked_list_to_list(head): elements = [] current = head while current: elements.append(current.value) current = current.next return elements"},{"question":"Write a function to check if an array contains any subset with a sum equal to a target value. The function should return \`true\` if such a subset exists, and \`false\` otherwise.","solution":"def has_subset_sum(arr, target): Determines if there is a subset of \`arr\` that adds up to \`target\`. :param arr: List of integers, the input array :param target: Integer, the target sum to find in the array :return: Boolean, True if a subset with sum equal to target exists, False otherwise n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True # There's always a subset with sum 0, the empty set. for i in range(1, n + 1): for j in range(1, target + 1): if arr[i - 1] > j: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return dp[n][target]"},{"question":"Write a function to print all prime numbers up to a given number \`n\`","solution":"def get_primes_up_to(n): Returns a list of all prime numbers up to a given number n (inclusive). if n < 2: return [] primes = [] is_prime = [True] * (n + 1) for p in range(2, n + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return primes"},{"question":"Write a function to validate a phone number using regular expressions in Python. The function should return \`True\` if the phone number is valid, and \`False\` otherwise. The phone number should be in the format of (xxx) xxx-xxxx, where x is a digit.","solution":"import re def validate_phone_number(phone_number): Validates a phone number using regular expressions. The phone number should be in the format of (xxx) xxx-xxxx, where x is a digit. Returns True if the phone number is valid, False otherwise. pattern = re.compile(r'^(d{3}) d{3}-d{4}') return bool(pattern.match(phone_number))"},{"question":"Write a function to find the largest palindrome made from the product of two n-digit numbers. A palindrome is a number that reads the same backward as forward. For example, 121 is a palindrome, whereas 123 is not.","solution":"def is_palindrome(n): Checks if a number n is a palindrome. return str(n) == str(n)[::-1] def largest_palindrome_product(n): Returns the largest palindrome made from the product of two n-digit numbers. max_number = 10 ** n - 1 min_number = 10 ** (n - 1) max_palindrome = 0 for i in range(max_number, min_number - 1, -1): for j in range(i, min_number - 1, -1): product = i * j if product <= max_palindrome: break if is_palindrome(product): max_palindrome = product return max_palindrome"},{"question":"Write a function to determine if a given text is a palindrome, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(text): Determines if the given text is a palindrome, considering only alphanumeric characters and ignoring cases. Parameters: text (str): The text to check. Returns: bool: True if the text is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_text = ''.join(char.lower() for char in text if char.isalnum()) # Check if the cleaned text is equal to its reverse return cleaned_text == cleaned_text[::-1]"},{"question":"Write a function to reverse the characters of each word in a given sentence. The function should return the reversed sentence while maintaining the original order of words.","solution":"def reverse_words_in_sentence(sentence): Reverses the characters of each word in the given sentence while maintaining the original order of words. :param sentence: str - A sentence to reverse words in :return: str - A sentence with each word's characters reversed words = sentence.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to sort an array of integers. What are the steps to implement a quicksort algorithm?","solution":"def quicksort(arr): Sorts an array of integers using the quicksort algorithm. Parameters: arr (list): The list of integers to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to encode a string to Base64 in Python. You should not use any built-in library that directly converts to Base64. You need to implement your own encoding logic.","solution":"def to_base64(data): Encodes a given string to its Base64 representation. Parameters: data (str): The input string to be encoded. Returns: str: The encoded Base64 string. # Base64 characters base64_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' # Convert input data to binary representation binary_str = ''.join(format(ord(char), '08b') for char in data) # Pad with zeros to make the length of binary_str a multiple of 6 padding_length = (6 - len(binary_str) % 6) % 6 binary_str = binary_str + '0' * padding_length # Split binary string into chunks of 6 bits chunks = [binary_str[i:i+6] for i in range(0, len(binary_str), 6)] # Convert each chunk to its corresponding Base64 character base64_str = ''.join(base64_chars[int(chunk, 2)] for chunk in chunks) # Add padding with \\"=\\" to make the length of base64_str a multiple of 4 padding = '=' * ((4 - len(base64_str) % 4) % 4) base64_str += padding return base64_str"},{"question":"Write a function to find the largest number in an array that is less than a given value x. If no such number exists, return -1.","solution":"def largest_less_than(arr, x): Returns the largest number in the array that is less than x. If no such number exists, returns -1. Parameters: arr (list of int): A list of integers x (int): The threshold value Returns: int: The largest number less than x or -1 if no such number exists largest = -1 for num in arr: if num < x and num > largest: largest = num return largest"},{"question":"Write a function to return the smallest number from an integer array.","solution":"def find_smallest_number(arr): Returns the smallest number from an integer array. Parameters: arr (list of int): The array of integers from which to find the smallest number. Returns: int: The smallest number in the array. if not arr: raise ValueError(\\"Array is empty\\") return min(arr)"},{"question":"Write a function to merge two sorted lists into a single sorted list. The function should take two lists of integers as input and return a new list that is sorted.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function to calculate the nth Fibonacci number using recursion and memoization. Fibonacci numbers are defined by the sequence F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1. Memoization is a technique that saves the results of expensive function calls and returns the cached result when the same inputs occur again. This avoids the exponential time complexity of naive recursion.","solution":"def fibonacci(n, memo=None): if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to reverse a string. But this time, you need to do it using a stack data structure in Python.","solution":"def reverse_string_using_stack(s): Reverses a string using stack data structure. stack = [] # Push all characters of the string to stack for char in s: stack.append(char) reversed_string = '' # Pop all characters from the stack and append to the result while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Write a function to check if a given number is a prime number. A prime number is exactly divisible by 1 and itself, and not by any other number.","solution":"def is_prime(n): Check if a number is a prime number. A prime number is exactly divisible by 1 and itself, and not by any other number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to calculate the length of the longest palindromic substring within a given string. Additionally, return the longest palindromic substring.","solution":"def longest_palindromic_substring(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] if not s or len(s) == 0: return 0, \\"\\" longest = \\"\\" for i in range(len(s)): # Odd length palindrome temp = expand_around_center(i, i) if len(temp) > len(longest): longest = temp # Even length palindrome temp = expand_around_center(i, i + 1) if len(temp) > len(longest): longest = temp return len(longest), longest"},{"question":"Write a function to calculate the sum of all even numbers in an array. In your solution, consider edge cases where the array might be empty or contain no even numbers. Ensure your function has a clear docstring explaining its functionality.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the given array. Parameters: arr (list): A list of integers. Returns: int: Sum of all even numbers in the array. Returns 0 if there are no even numbers or if the array is empty. return sum(num for num in arr if num % 2 == 0)"},{"question":"Write a function to sort a given string in lexicographically increasing order.","solution":"def sort_string(s): Returns the characters of the string s sorted in lexicographically increasing order. return ''.join(sorted(s))"},{"question":"Write a function to solve the赎金信(ransom note) problem. The function should take two inputs: ransomNote and magazine, and it should return True if the ransomNote can be constructed from the letters in the magazine, otherwise return False.","solution":"from collections import Counter def can_construct(ransomNote, magazine): Returns True if the ransomNote can be constructed from the magazine, otherwise False. ransom_note_count = Counter(ransomNote) magazine_count = Counter(magazine) for char, count in ransom_note_count.items(): if magazine_count[char] < count: return False return True"},{"question":"Write a function to reverse the order of characters in each word within a sentence, while maintaining the original order and spacing of the words.","solution":"def reverse_characters_in_words(sentence): Reverses the order of characters in each word within a sentence, while maintaining the original order and spacing of the words. :param sentence: A string representing the input sentence. :return: A string with each word's characters reversed. words = sentence.split(' ') reversed_words = [''.join(reversed(word)) for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Also, demonstrate how to use this function to calculate the factorial of 5.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1) # Demonstrate the function to calculate the factorial of 5 factorial_of_5 = factorial(5)"},{"question":"Write a function to find a missing number in an array of integers. The missing number is within the range of 0 to n, where n is the length of the array. The array contains distinct numbers without duplicates.","solution":"def find_missing_number(arr): Finds the missing number in an array of integers from 0 to n. :param arr: List of integers :return: The missing integer n = len(arr) total_sum = n * (n + 1) / 2 actual_sum = sum(arr) return int(total_sum - actual_sum)"},{"question":"Write a function to calculate the sum of product of digits of all numbers between A and B (both inclusive). For example, if A = 12 and B = 15, then the function should return 1*2 + 1*5 + 2*3 (since 12 is 1*2, 13 is 1*3, 14 is 1*4, 15 is 1*5).","solution":"def sum_of_product_of_digits(A, B): Calculate the sum of product of digits of all numbers between A and B (both inclusive). Args: A : int : starting number B : int : ending number Returns: int : sum of product of digits def product_of_digits(num): product = 1 while num > 0: digit = num % 10 product *= digit num //= 10 return product total_sum = 0 for num in range(A, B + 1): total_sum += product_of_digits(num) return total_sum"},{"question":"Write a function to print out a input string backward.","solution":"def reverse_string(s): Returns the input string s reversed. return s[::-1]"},{"question":"Write a function to determine if a balanced binary tree exists in a given tree structure. A balanced binary tree is defined as a tree where for each node, the heights of its left and right subtree differ by no more than 1. Additionally, each subtree must also be balanced according to this definition.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Determine if the tree is balanced. A tree is balanced if the heights of the two subtrees of any node never differ by more than one. :param root: TreeNode :return: bool def check_balance_and_height(node): if not node: return (True, 0) left_balanced, left_height = check_balance_and_height(node.left) right_balanced, right_height = check_balance_and_height(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 height = max(left_height, right_height) + 1 return (balanced, height) return check_balance_and_height(root)[0]"},{"question":"Write a function to calculate the sum of all unique elements in a given list of integers. For example, the sum of unique elements in the list [1, 2, 2, 4, 5, 5] should be 4.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in a given list of integers. from collections import Counter count = Counter(lst) unique_sum = sum(elem for elem, freq in count.items() if freq == 1) return unique_sum"},{"question":"Write a function to check if a string contains only unique characters. How would you implement this function?","solution":"def has_unique_chars(s): Returns True if the string \`s\` contains only unique characters, otherwise returns False. return len(set(s)) == len(s)"},{"question":"Write a function to find the first occurrence of a target sequence of elements in a given list. The function should return the starting index of the target sequence if found, otherwise return -1.","solution":"def find_subsequence(lst, target): Returns the starting index of the first occurrence of the target sequence in the given list. If the target sequence is not found, returns -1. Parameters: lst (list): The list in which to search for the target sequence. target (list): The target sequence to find in the given list. Returns: int: The starting index of the first occurrence of the target sequence, or -1 if not found. target_len = len(target) lst_len = len(lst) # Early exit if target is larger than lst or either is empty if target_len == 0 or lst_len < target_len: return -1 # Check each subsequence in lst to see if it matches target for i in range(lst_len - target_len + 1): if lst[i:i+target_len] == target: return i return -1"},{"question":"Write a function to convert a set of strings to a single concatenated string.","solution":"def concatenate_strings(strings): Concatenates a set of strings into a single string. :param strings: Set of strings to be concatenated. :return: A single concatenated string. return ''.join(strings)"},{"question":"Write a function to find the product of two numbers in Python. The function should take two parameters and return their product.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Write a function to swap two numbers in-place without using a temporary variable. Provide a Python implementation.","solution":"def swap_in_place(a, b): Swaps two numbers in-place without using a temporary variable. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a function to print all paths that sum to a given value. In a binary tree, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_paths_with_sum(root, target_sum): def find_paths(node, current_sum, path): if not node: return current_sum += node.val path.append(node.val) if current_sum == target_sum: all_paths.append(path.copy()) find_paths(node.left, current_sum, path) find_paths(node.right, current_sum, path) path.pop() all_paths = [] find_paths(root, 0, []) return all_paths"},{"question":"Write a function to find all the numbers in a given list that are multiples of both 3 and 5.","solution":"def find_multiples_of_3_and_5(numbers): Returns a list of numbers that are multiples of both 3 and 5. :param numbers: list of integers :return: list of integers return [num for num in numbers if num % 3 == 0 and num % 5 == 0]"},{"question":"Write a function to iterate through a list and return the maximum value. If the list is empty, return None.","solution":"def find_max(lst): Returns the maximum value in the list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a function to find the minimum depth of a binary tree, which is the shortest distance from the root node to the nearest leaf node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def min_depth(root): Returns the minimum depth of a binary tree. :param root: TreeNode, the root of the binary tree. :return int: Minimum depth of the binary tree. if not root: return 0 if not root.left and not root.right: return 1 if not root.left: return min_depth(root.right) + 1 if not root.right: return min_depth(root.left) + 1 return min(min_depth(root.left), min_depth(root.right)) + 1"},{"question":"Write a function to generate the FizzBuzz sequence up to a given number \`n\`. The FizzBuzz sequence is a common programming challenge that prints the numbers from 1 to \`n\`. However, for multiples of 3, output \\"Fizz\\" instead of the number, for multiples of 5, output \\"Buzz\\", and for numbers which are multiples of both 3 and 5, output \\"FizzBuzz\\". If a number does not meet any of these conditions, it is simply output as the number itself.","solution":"def fizzbuzz(n): Generates the FizzBuzz sequence up to a given number \`n\`. Parameters: n (int): The upper limit of the sequence. Returns: list: A list representing the FizzBuzz sequence. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to search for a specific element in a sorted array and return its index. If the element is not present, return -1.","solution":"def binary_search(arr, target): Searches for a specific element in a sorted array and returns its index. If the element is not present, returns -1. Parameters: arr (list of int): the sorted array in which to search. target (int): the element to search for. Returns: int: the index of the target element or -1 if not found. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to solve the \\"Two Sum\\" problem. Given an array of integers, return indices of the two numbers such that they add up to a specific target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list nums that add up to the target. Args: nums (list): The list of integers. target (int): The target sum. Returns: list: A list containing the indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a function to reverse the order of words in a string. Each word is defined as a sequence of non-space characters and may contain special characters and numbers. Spaces in the string should be preserved. For example, if the input is \\"Hello, world! Programming is fun \\", the output should be \\"fun is Programming! world, Hello\\". Note that the order of the words themselves is reversed, but the structure within each word remains unchanged.","solution":"def reverse_words(input_string): Reverses the order of words in the input string. A word is defined as a sequence of non-space characters. words = input_string.strip().split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to remove duplicates from a sorted list of elements using Python. The function should return a new list with all duplicates removed while maintaining the original order of elements.","solution":"def remove_duplicates_from_sorted_list(sorted_list): Removes duplicates from a sorted list while maintaining the original order. Parameters: sorted_list (list): A list of sorted elements. Returns: list: A new list with duplicates removed. if not sorted_list: return [] dedup_list = [sorted_list[0]] for item in sorted_list[1:]: if item != dedup_list[-1]: dedup_list.append(item) return dedup_list"},{"question":"Write a function to determine if a given list of integers is a \\"mountain\\" array. A mountain array is one where the array first strictly increases to a peak, then strictly decreases. The peak element is not the first or last element of the array. Return \`true\` if the array is a mountain array, and \`false\` otherwise.","solution":"def is_mountain_array(arr): Checks if the given list of integers is a \\"mountain\\" array. A mountain array is defined as: - Len(arr) >= 3 - There exists some index i (0 < i < len(arr)-1) such that: - arr[0] < arr[1] < ... < arr[i] - arr[i] > arr[i+1] > ... > arr[len(arr)-1] :param arr: list of integers :return: True if the list is a mountain array, False otherwise n = len(arr) if n < 3: return False i = 1 # Walk up while i < n and arr[i] > arr[i-1]: i += 1 # Peak can't be first or last if i == 1 or i == n: return False # Walk down while i < n and arr[i] < arr[i-1]: i += 1 return i == n"},{"question":"Write a function to return the sum of all values in a 2D list (list of lists).","solution":"def sum_2d_list(lst): Returns the sum of all values in a 2D list. Parameters: lst (list of lists): A 2D list containing numerical values. Returns: int or float: The sum of all values in the 2D list. return sum(sum(inner_list) for inner_list in lst)"},{"question":"Write a function to remove duplicates from a given array nums in Python so that all elements appear only once. Your function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def remove_duplicates(nums): Removes duplicates from the list nums in place, ensuring all elements appear only once. if not nums: return nums nums.sort() # Sort the array first, which takes O(n log n) time write_index = 1 # Index to write the next unique element for i in range(1, len(nums)): if nums[i] != nums[write_index-1]: nums[write_index] = nums[i] write_index += 1 return nums[:write_index]"},{"question":"Write a function to determine the minimum number of swaps required to convert an array from a permutation of 1 to n into a permutation of 2 to n+1. The function should take a single list of integers as input and return an integer representing the minimum number of swaps needed.","solution":"def min_swaps_to_increment_permutation(arr): Determines the minimum number of swaps required to convert an array from a permutation of 1 to n into a permutation of 2 to n+1. Parameters: arr (list): List of integers as a permutation of 1 to n. Returns: int: Minimum number of swaps needed. n = len(arr) visited = [False] * (n + 1) swaps = 0 for i in range(n): if visited[arr[i] - 1] or arr[i] == i + 2: continue cycle_size = 0 x = arr[i] while not visited[x - 1]: visited[x - 1] = True x = arr[x - 1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers which has been circular in nature. The array size is fixed but the rotation of the array is not known. The subarray can start or end anywhere in the array, and it can wrap around the end of the array to the start.","solution":"def max_subarray_sum_in_circular_array(arr): Returns the maximum sum of a subarray in a circular array. def kadane(arr): max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_kadane = kadane(arr) # Calculate the total sum of the array total_sum = sum(arr) # Invert the array to use kadane for the minimum sum subarray inverted_array = [-num for num in arr] max_inverted_kadane = kadane(inverted_array) max_circular = total_sum + max_inverted_kadane if max_circular == 0: return max_kadane return max(max_kadane, max_circular)"},{"question":"Write a function to merge two sorted linked lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_lists(l1, l2): Merge two sorted linked lists and return it as a new sorted list. dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next # At least one of the lists is null at this point, so just append the non-null list. tail.next = l1 if l1 else l2 return dummy.next"},{"question":"Write a function to find all the prime factors of a given number n. The function should return a list of prime factors in ascending order.","solution":"def prime_factors(n): Returns a list of prime factors of a given number n in ascending order. factors = [] # Check for number of 2s in n while n % 2 == 0: factors.append(2) n = n // 2 # Check for odd factors from 3 to sqrt(n) for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # If n is still greater than 2, it must be prime if n > 2: factors.append(n) return factors"},{"question":"Write a function to exclude NaN (Not a Number) values from a given column in a pandas DataFrame. How can this be done using pandas for data manipulation in Python?","solution":"import pandas as pd def exclude_nan(df, column_name): Returns a DataFrame with rows where the specified column does not have NaN values. :param df: pandas DataFrame :param column_name: The column from which NaN values are to be excluded :return: DataFrame with NaN values excluded in the specified column return df[df[column_name].notna()]"},{"question":"Write a function to find the common subsequence between two strings.","solution":"def common_subsequence(str1, str2): Finds the common subsequence between two strings. Returns the common subsequence as a string. m, n = len(str1), len(str2) # Create a DP table to store lengths of longest common subsequence. dp = [[0 for _ in range(n+1)] for _ in range(m+1)] # Build the dp table from the bottom up. for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # Following the table build the common subsequence string. index = dp[m][n] common_seq = [\\"\\"] * (index + 1) common_seq[index] = \\"\\" # Start from the right-most-bottom-most corner and trace the path. i, j = m, n while i > 0 and j > 0: if str1[i-1] == str2[j-1]: common_seq[index-1] = str1[i-1] i -= 1 j -= 1 index -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 return \\"\\".join(common_seq)"},{"question":"Write a function to calculate the in-order successor of a given node in a binary search tree (BST). The in-order successor of a node in a BST is the next node in the in-order traversal. If the given node has no next successor, return \`None\`.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def find_min(node): Function to find the minimum value node in a BST. current = node while current.left is not None: current = current.left return current def inorder_successor(root, node): Finds the in-order successor of a given node in a BST. if node.right: return find_min(node.right) successor = None while root: if node.key < root.key: successor = root root = root.left elif node.key > root.key: root = root.right else: break return successor"},{"question":"Write a function to sort an array in descending order using bubble sort algorithm in Python.","solution":"def bubble_sort_descending(arr): Sorts an array in descending order using the bubble sort algorithm. :param arr: List of integers to be sorted. :return: The sorted list in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to count the number of unique integers in a given array. If the array is empty or does not contain any integers, the function should return 0.","solution":"def count_unique_integers(array): Returns the number of unique integers in the given array. if not array or not any(isinstance(i, int) for i in array): return 0 unique_integers = {i for i in array if isinstance(i, int)} return len(unique_integers)"},{"question":"Write a function to generate all unique permutations of a given string. The function should return a list of strings, where each string is a unique permutation of the input string. The order of permutations in the returned list does not matter.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the input string s. return list(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a function to reverse a string in Python without using any built-in functions or slicing. Swap the characters from the start and end of the string and move towards the center.","solution":"def reverse_string(s): Reverses the input string s without using built-in functions or slicing. s_list = list(s) start = 0 end = len(s_list) - 1 while start < end: # Swap characters at start and end s_list[start], s_list[end] = s_list[end], s_list[start] start += 1 end -= 1 return ''.join(s_list)"},{"question":"Write a function to convert an integer to a binary string with a specific format. The function should take an integer \`n\` as input and return a string representing the binary equivalent of \`n\`, with a prefix '0b' and a suffix '00'. For example, if \`n\` is 5, the function should return '0b10100'. If \`n\` is 10, it should return '0b10100'. However, if \`n\` is negative, the function should return 'Error'.","solution":"def int_to_binary_string(n): Converts an integer to a binary string with a specific format. The format is '0b' followed by the binary representation, and ends in '00'. Returns 'Error' if the input is negative. :param n: integer to convert :return: formatted binary string or 'Error' if n is negative if n < 0: return 'Error' binary_representation = bin(n)[2:] # strip the '0b' prefix from the built-in bin() function return f'0b{binary_representation}00'"},{"question":"Write a function to generate the first N binary numbers, starting with '1', and return them as a list. The function should handle both positive and negative values of N.","solution":"def generate_binary_numbers(N): Generate the first N binary numbers starting with '1'. For positive N, returns the first N binary numbers. For negative N, returns the first abs(N) binary numbers in reverse order. Parameters: N (int): The number of binary numbers to generate. If N is negative, return the numbers in reverse order. Returns: List[str]: A list of binary numbers as strings. if N == 0: return [] abs_N = abs(N) binary_numbers = [] for i in range(1, abs_N + 1): binary_numbers.append(bin(i)[2:]) if N < 0: binary_numbers.reverse() return binary_numbers"},{"question":"Write a function to find the middle node of a linked list. If there are two middle nodes, return the second middle node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_middle_node(head): Returns the middle node (or the second of the two middle nodes) of the linked list. slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to count the number of 1's in the binary representation of a given integer. The function should be able to handle any non-negative integer and should return the count of '1' bits in its binary form.","solution":"def count_ones_in_binary(n): Returns the count of '1's in the binary representation of the given non-negative integer n. return bin(n).count('1')"},{"question":"Write a function to find all the numbers in a list that are greater than 10 and less than 20. Then, square each of those numbers and return a list of the squared values.","solution":"def find_and_square(nums): Finds all numbers in the list that are greater than 10 and less than 20, and returns a list of their squared values. Parameters: nums (list of int): A list of integers. Returns: list of int: A list of squared values of numbers that are greater than 10 and less than 20. return [x**2 for x in nums if x > 10 and x < 20]"},{"question":"Write a function to determine if two binary trees are the same. Two trees are considered the same if they have the same structure and the nodes have the same value.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_same_tree(p, q): Determines if two binary trees are the same. Two trees are the same if they have the same structure and their nodes have the same value. :param p: TreeNode, root of the first tree :param q: TreeNode, root of the second tree :return: bool # Both trees are empty if not p and not q: return True # One tree is empty and the other is not if not p or not q: return False # The current nodes have different values if p.val != q.val: return False # Recursively check the left and right subtrees return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)"},{"question":"Write a function to implement the Fibonacci sequence in Python. The function should be able to return the n-th Fibonacci number.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence. Returns: int: The n-th Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to calculate the sum of the numbers in an array, but only if the number is even. If the number is odd, skip it and move to the next number.","solution":"def sum_of_even_numbers(numbers): Returns the sum of the even numbers in the given array. Parameters: numbers (list of int): The list of integers to sum up. Returns: int: The sum of the even numbers in the list. return sum(number for number in numbers if number % 2 == 0)"},{"question":"Write a function to reverse a string without using any additional memory. The string is immutable, so you need to convert it to a list to work on it, and then convert it back to a string at the end. You must reverse the string in-place, which means you cannot use extra space even for character swapping.","solution":"def reverse_string(s): Reverses a given string s in place, utilizing a list transformation for immutability. str_list = list(s) # Convert to a list to allow modification. left, right = 0, len(str_list) - 1 while left < right: # Swap characters str_list[left], str_list[right] = str_list[right], str_list[left] left += 1 right -= 1 # Convert list back to a string return ''.join(str_list)"},{"question":"Write a function to reverse the order of words in a given sentence without reversing the characters of each word.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence without reversing the characters of each word. Parameters: sentence (str): The sentence to reverse the words in. Returns: str: The sentence with words in reversed order. words = sentence.split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Write a function to solve the \\"Longest Substring Without Repeating Characters\\" problem in Python.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end longest = max(longest, end - start + 1) return longest"},{"question":"Write a function to detect if a cycle exists in an undirected graph. The graph is represented using an adjacency list.","solution":"def has_cycle(graph): Detects if a cycle exists in an undirected graph using Depth First Search (DFS). :param graph: A dictionary where keys are node labels and values are lists of adjacent nodes. :return: True if a cycle is detected, False otherwise. visited = set() def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, node): return True elif neighbor != parent: return True return False for node in graph: if node not in visited: if dfs(node, None): return True return False"},{"question":"Write a function to determine if a given number is a perfect square, cube, or neither in Python.","solution":"import math def number_type(n): Determine if the given number n is a perfect square, a perfect cube, or neither. Args: n (int): The number to check. Returns: str: 'perfect square' if n is a perfect square, 'perfect cube' if n is a perfect cube, 'both' if n is both a perfect square and a perfect cube, 'neither' if n is neither. if n < 0: return \\"neither\\" square_root = int(math.isqrt(n)) cube_root = round(n ** (1/3)) is_square = (square_root ** 2 == n) is_cube = (cube_root ** 3 == n) if is_square and is_cube: return \\"both\\" elif is_square: return \\"perfect square\\" elif is_cube: return \\"perfect cube\\" else: return \\"neither\\""},{"question":"Write a function to reverse a given integer. If the reversed integer overflows, return 0. Assume the input is a 32-bit signed integer, and the environment only supports basic arithmetic operations.","solution":"def reverse_integer(x): Reverses the digits of a 32-bit signed integer. If the reversed integer overflows, return 0. INT_MAX = 2**31 - 1 # Maximum 32-bit signed integer INT_MIN = -2**31 # Minimum 32-bit signed integer sign = -1 if x < 0 else 1 x = abs(x) reversed_int = 0 while x != 0: digit = x % 10 x = x // 10 # Check for overflow if we were to append another digit if (reversed_int > INT_MAX // 10) or (reversed_int == INT_MAX // 10 and digit > INT_MAX % 10): return 0 reversed_int = reversed_int * 10 + digit return sign * reversed_int"},{"question":"Write a function to find the nth prime number. The function should be named \`find_nth_prime\`, which takes an integer \`n\` as an argument. The function should return the nth prime number.","solution":"def find_nth_prime(n): Returns the nth prime number. if n < 1: raise ValueError(\\"n must be a positive integer\\") primes = [] num = 2 while len(primes) < n: is_prime = True for prime in primes: if num % prime == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes[-1]"},{"question":"Write a function to find the length of the longest substring without repeating characters in a given string. The function should be named \`longest_unique_substring_length\` and should take a single string parameter \`s\`. The function should return an integer representing the length of the longest substring without repeating characters.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function to calculate the factorial of a non-negative integer using recursion. The function should handle edge cases such as negative inputs gracefully.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. If n is negative, returns None. if n < 0: return None if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to calculate the median of a list of numbers. The function should handle both even and odd number of elements in the list, and return the median value.","solution":"def median(nums): Returns the median of a list of numbers. If the list length is odd, return the middle element. If the list length is even, return the average of the two middle elements. nums = sorted(nums) n = len(nums) if n == 0: raise ValueError(\\"The list is empty\\") if n % 2 == 1: return nums[n // 2] else: mid1, mid2 = nums[n // 2 - 1], nums[n // 2] return (mid1 + mid2) / 2"},{"question":"Write a function to find the smallest number in an array that is greater than 10. If no such number exists, return None.","solution":"def smallest_number_greater_than_ten(arr): Returns the smallest number in the array that is greater than 10. If no such number exists, returns None. filtered_numbers = [num for num in arr if num > 10] if not filtered_numbers: return None return min(filtered_numbers)"},{"question":"Write a function to convert a number to its string representation in a specific numeral system. The function should take the number and the target numeral system (from 2 to 36) as inputs and return the string representation of the number in the given numeral system.","solution":"def convert_to_base(n, base): Convert a given number \`n\` to its string representation in a specified base \`base\`. The base must be between 2 and 36. :param n: The number to convert. :param base: The numeral system base, which should be between 2 and 36. :return: String representation of \`n\` in the specified base. if not (2 <= base <= 36): raise ValueError(\\"base must be between 2 and 36\\") if n == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" is_negative = n < 0 n = abs(n) result = [] while n: result.append(digits[n % base]) n //= base if is_negative: result.append(\\"-\\") return \\"\\".join(reversed(result))"},{"question":"Write a function to extract the domain from an email address. The function should take one string argument, which is the email address, and should return the domain part. The domain part should be everything after the '@' symbol.","solution":"def extract_domain(email): Extracts and returns the domain from an email address. return email.split('@')[-1]"},{"question":"Write a function to find the minimum element in a circularly sorted array in linear time. A circularly sorted array is one where an array is sorted in ascending order and then rotated at some pivot, which means it may contain duplicates as well. For example, [4, 5, 6, 7, 0, 1, 2] might become [6, 7, 0, 1, 2, 4, 5].","solution":"def find_min_in_circular_sorted_array(nums): Finds the minimum element in a circularly sorted array. Args: nums (List[int]): The input circularly sorted array. Returns: int: The minimum element in the array. if not nums: return None min_elem = nums[0] for num in nums: if num < min_elem: min_elem = num return min_elem"},{"question":"Write a function to execute a series of bitwise operations on two integers. The operations include bitwise AND, OR, XOR, NOT, left shift, and right shift. The function should take two integers and a list of tuples, where each tuple represents the operation to be performed. The operations should be performed on the two integers in the order they appear in the list.","solution":"def bitwise_operations(a, b, operations): Executes a series of bitwise operations on two integers. Parameters: a (int): The first integer. b (int): The second integer. operations (list of tuples): A list of tuples where each tuple contains the operation as a string and, for shift operations, an integer. Returns: list of int: Results of the bitwise operations in the given order. results = [] for operation in operations: if operation[0] == 'AND': result = a & b elif operation[0] == 'OR': result = a | b elif operation[0] == 'XOR': result = a ^ b elif operation[0] == 'NOT': # Applying NOT on the first integer as typical usage result = ~a elif operation[0] == 'LSHIFT': # Left shift result = a << operation[1] elif operation[0] == 'RSHIFT': # Right shift result = a >> operation[1] results.append(result) return results"},{"question":"Write a function to scroll through an array from left to right, print each element, and if the element is 'x', stop scrolling (i.e., break the loop).","solution":"def scroll_and_print(array): Scrolls through the array from left to right, prints each element, and if the element is 'x', stops scrolling. for element in array: print(element) if element == 'x': break"},{"question":"Write a function to check if a string is a valid palindrome, ignoring spaces, punctuation, and case sensitivity.","solution":"import string def is_valid_palindrome(s): Returns True if the given string is a valid palindrome, ignoring spaces, punctuation, and case sensitivity. Otherwise, returns False. # Normalize string: remove spaces, punctuation and convert to lowercase normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is a palindrome return normalized_str == normalized_str[::-1]"},{"question":"Write a function to parse a string representing a floating-point number and return its corresponding float value. The input string may contain spaces, negative numbers, and leading zeros. For example, the string could be \\" -0.123 \\". How should the function handle these cases?","solution":"def parse_float(s): Parses a string representing a floating-point number and returns its corresponding float value. The input string may contain spaces, negative numbers, and leading zeros. Parameters: s (str): A string representing a floating-point number Returns: float: The floating-point value of the input string # Strip leading and trailing whitespaces and convert to float return float(s.strip())"},{"question":"Write a function to remove duplicates from an integer array and return the new length of the array. The function should have a time complexity of O(n) and should only use constant extra space.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted integer array in place and returns the new length of the array. Assumes the input array is sorted. if not nums: return 0 write_index = 1 # Initialize write_index to the second position for read_index in range(1, len(nums)): if nums[read_index] != nums[read_index - 1]: nums[write_index] = nums[read_index] write_index += 1 return write_index"},{"question":"Write a function to solve the N-Queens problem. The N-Queens puzzle is the problem of placing N queens on an N×N chessboard such that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The function should return all distinct solutions to the N-Queens puzzle.","solution":"def solveNQueens(n): def is_not_under_attack(row, col): return not (cols[col] or hills[row - col] or dales[row + col]) def place_queen(row, col): queens.add((row, col)) cols[col] = 1 hills[row - col] = 1 dales[row + col] = 1 def remove_queen(row, col): queens.remove((row, col)) cols[col] = 0 hills[row - col] = 0 dales[row + col] = 0 def add_solution(): solution = [] for _, col in sorted(queens): solution.append('.' * col + 'Q' + '.' * (n - col - 1)) solutions.append(solution) def backtrack(row = 0): for col in range(n): if is_not_under_attack(row, col): place_queen(row, col) if row + 1 == n: add_solution() else: backtrack(row + 1) remove_queen(row, col) solutions = [] queens = set() cols = [0] * n hills = [0] * (2 * n - 1) dales = [0] * (2 * n - 1) backtrack() return solutions"},{"question":"Write a function to shuffle a list of items randomly using Python's random module.","solution":"import random def shuffle_list(items): Shuffles a list of items randomly. Parameters: items (list): The list to be shuffled. Returns: list: The shuffled list. shuffled_items = items[:] random.shuffle(shuffled_items) return shuffled_items"},{"question":"Write a function to check if a string contains only numeric characters and return the count of numeric characters.","solution":"def count_numeric_characters(s): Checks if the string contains only numeric characters and returns the count of numeric characters. numeric_count = sum(c.isdigit() for c in s) return numeric_count if numeric_count == len(s) else 0"},{"question":"Write a function to check if a given string is a palindrome, a string that reads the same backward as forward.","solution":"def is_palindrome(s): Checks if the given string is a palindrome. A palindrome reads the same backward as forward. :param s: Input string :return: True if s is a palindrome, False otherwise # Remove non-alphanumeric characters and convert to lowercase sanitized = ''.join(char.lower() for char in s if char.isalnum()) # Check if the sanitized string is equal to its reverse return sanitized == sanitized[::-1]"},{"question":"Write a function to determine if a list of strings contains at least one string that includes a specific character.","solution":"def contains_char(strings, char): Returns True if any string in the list contains the specified character. :param strings: List of strings to check :param char: Character to look for in the strings :return: True if any string contains the character, False otherwise return any(char in s for s in strings)"},{"question":"Write a function to calculate the n-th Fibonacci number using recursion, memoization, or any other suitable method. The function should also handle large numbers efficiently.","solution":"def fibonacci(n, memo=None): Returns the n-th Fibonacci number using memoization to handle large numbers efficiently. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to check if an array contains a specific number or not?","solution":"def contains_number(arr, num): Checks if the given number is present in the array. :param arr: list of numbers :param num: the number to check for :return: True if num is in arr, False otherwise return num in arr"},{"question":"Write a function to find the maximum product of any contiguous subarray within the given array. The function should return the maximum product. If the array contains zeros, the function should handle them appropriately by skipping or resetting the product calculation as needed.","solution":"def max_product_subarray(nums): Returns the maximum product of any contiguous subarray within the given array. if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for num in nums[1:]: if num == 0: max_product = 1 min_product = 1 result = max(result, 0) continue temp_max = max(num, max_product * num, min_product * num) min_product = min(num, max_product * num, min_product * num) max_product = temp_max result = max(result, max_product) return result"},{"question":"Write a function to reverse a given string without using extra space. How can this be achieved in Python?","solution":"def reverse_string_inplace(s): Reverses a given string in place without using extra space. s_list = list(s) left, right = 0, len(s_list) - 1 while left < right: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return ''.join(s_list)"},{"question":"Write a function to decode a string in Python. The encoded string follows a specific pattern where each encoded character is followed by the number of times it should be repeated. For example, \\"a3b2c1\\" should decode to \\"aaabbc\\". Use recursion to solve this problem.","solution":"def decode_string(encoded): Decodes the given string following the pattern where each encoded character is followed by the number of times it should be repeated. Args: encoded (str): The encoded string. Returns: str: The decoded string. def recursive_decode(index): if index >= len(encoded): return \\"\\" char = encoded[index] num = \\"\\" i = index + 1 while i < len(encoded) and encoded[i].isdigit(): num += encoded[i] i += 1 return char * int(num) + recursive_decode(i) return recursive_decode(0)"},{"question":"Write a function to assess whether a list of integers contains a specific integer and count how many times it appears. How should the function be implemented in the given code snippet using Python?","solution":"def count_occurrences(lst, num): Returns a tuple where the first element indicates whether num is in the list and the second element is the count of num in the list. is_present = num in lst count = lst.count(num) return is_present, count"},{"question":"Write a function to find the maximum subarray sum in a one-dimensional array of integers, including a negative balanced integer array. This function should have a time complexity of O(n) and utilize Kadane's algorithm.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum in a one-dimensional array of integers using Kadane's algorithm. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of the contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to simulate rolling a six-sided dice multiple times and keeping track of the number of times each face of the dice appears.","solution":"import random from collections import defaultdict def roll_dice(num_rolls): Simulates rolling a six-sided dice num_rolls times. Args: num_rolls (int): The number of times to roll the dice. Returns: dict: A dictionary with the counts of each face (1-6). results = defaultdict(int) for _ in range(num_rolls): roll_result = random.randint(1, 6) results[roll_result] += 1 return dict(results)"},{"question":"Write a function to multiply two numbers and return the result.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Write a function to calculate the number of possible paths in a grid.","solution":"import math def number_of_paths(m, n): Returns the number of possible paths in an m x n grid. return math.comb(m + n - 2, m - 1)"},{"question":"Write a function to determine if a string is a \\"valid palindrome\\" by ignoring case and non-alphanumeric characters. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def is_valid_palindrome(s): Determines if a string is a valid palindrome, ignoring case and non-alphanumeric characters. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function to generate the prime factors of a given number in Python.","solution":"def prime_factors(n): Generates the prime factors of a given number n. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Write a function to filter a list of integers and return only the even numbers.","solution":"def filter_even_numbers(nums): Filters the even numbers from a list of integers. Parameters: nums (list of int): List of integers to filter. Returns: list of int: List containing only the even numbers from the original list. return [num for num in nums if num % 2 == 0]"},{"question":"Write a function to add an element to the front of a linked list. This function should take two inputs: the head of the linked list and the value of the element to add. The function should return the new head of the linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def add_to_front(head, value): Adds a new node with the given value to the front of the linked list. Args: head (ListNode): The head of the linked list. value (int): The value of the new node to be added. Returns: ListNode: The new head of the linked list. new_node = ListNode(value) new_node.next = head return new_node"},{"question":"Write a function to implement quicksort.","solution":"def quicksort(arr): Implements the quicksort algorithm to sort an array. Parameters: arr (list): List of elements to be sorted Returns: list: Sorted list if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to create and return an array in which the elements are the squares of the elements in a given array. For example, given the array [2, 3, 4], the function should return the array [4, 9, 16].","solution":"def squares_array(arr): Given an array of numbers, returns a new array where each element is the square of the corresponding element in the input array. :param arr: list of integers :return: list of integers return [x ** 2 for x in arr]"},{"question":"Write a function to create a new dictionary with a single key-value pair.","solution":"def create_single_entry_dict(key, value): Creates a new dictionary with a single key-value pair. :param key: The key for the dictionary entry. :param value: The value for the dictionary entry. :return: A dictionary with a single key-value pair. return {key: value}"},{"question":"Write a function to reverse the order of words in a sentence, but keep the words' internal order intact.","solution":"def reverse_words(sentence): Reverses the order of words in a sentence, keeping the words' internal order intact. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to shuffle a list of items randomly. The function should take a list as an argument and return a shuffled list of items.","solution":"import random def shuffle_list(items): Returns a shuffled version of the input list. Args: items (list): The list to be shuffled. Returns: list: A new list with the items shuffled. shuffled_items = items.copy() random.shuffle(shuffled_items) return shuffled_items"},{"question":"Write a function to determine if a string has all unique characters. You cannot use additional data structures like arrays, objects, or collections. How can we approach this problem without using extra space?","solution":"def has_unique_characters(s): Determines if a string has all unique characters without using additional data structures. Args: s (str): The string to check. Returns: bool: True if all characters in the string are unique, False otherwise. # Check each character and compare with others in the string for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Write a function to generate all subsets of a given set of distinct integers \`nums\`. The solution should use backtracking.","solution":"def generate_subsets(nums): Generates all subsets of a given set of distinct integers using backtracking. :param nums: List of distinct integers :return: List of subsets, where each subset is a list of integers def backtrack(start, path): subsets.append(list(path)) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() subsets = [] backtrack(0, []) return subsets"},{"question":"Write a function to find the two smallest numbers in an array. The function should return these two numbers as an array. For example, given the array [5, 3, 9, 1, 4, 6], the function should return [1, 3] as these are the two smallest numbers in the array.","solution":"def find_two_smallest_numbers(arr): Returns the two smallest numbers in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") sorted_arr = sorted(arr) return [sorted_arr[0], sorted_arr[1]]"},{"question":"Write a function to perform a prefix sum operation on a list of integers.","solution":"def prefix_sum(lst): Performs a prefix sum operation on a list of integers. Args: lst (list of int): A list of integers. Returns: list of int: A list where each element i is the sum of the first i+1 elements of the input list. if not lst: return [] prefix_sums = [lst[0]] for i in range(1, len(lst)): prefix_sums.append(prefix_sums[-1] + lst[i]) return prefix_sums"},{"question":"Write a function to find the shortest path from a given source node to a destination node in a weighted graph using Dijkstra's algorithm. The function should take in the graph's adjacency matrix and the source and destination node indices.","solution":"import heapq def dijkstra(graph, src, dest): Finds the shortest path from source node to destination node in a weighted graph using Dijkstra's algorithm. :param graph: 2D list where graph[i][j] holds the weight of edge from node i to node j, or 0/None if there is no edge. :param src: Index of the source node. :param dest: Index of the destination node. :return: The shortest path distance and path as a tuple (distance, path) n = len(graph) dist = [float('inf')] * n prev = [None] * n dist[src] = 0 pq = [(0, src)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in enumerate(graph[u]): if weight and current_dist + weight < dist[v]: dist[v] = current_dist + weight prev[v] = u heapq.heappush(pq, (dist[v], v)) # Reconstruct path path = [] u = dest if dist[dest] < float('inf'): while u is not None: path.insert(0, u) u = prev[u] return dist[dest], path"},{"question":"Write a function to solve the following problem: Determine if there are two elements in an array such that their sum equals to a specific target. You are allowed to use extra space and are asked to return the indices of the two numbers such that they add up to the target. If you have more than one solution, return the answer that has the smallest index sum. If not, just return any one of them.","solution":"def two_sum(nums, target): Determines if there are two elements in nums such that their sum equals to target. Args: nums: List of integers. target: Integer, the target sum. Returns: Tuple of two indices if such elements are found, else None. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return None"},{"question":"Write a function to reverse a linked list. The linked list is represented as a sequence of nodes, where each node contains a value and a pointer to the next node. The reverse function should not use additional data structures. It should only manipulate the pointers within the nodes of the list to reverse the list. The function should return the new head of the reversed list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. :param head: ListNode, the head node of the linked list to be reversed :return: ListNode, the head node of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to find all poker hands that can be formed with a given set of cards, where each card is represented as a string in the format 'RankSuit'. For example, '3H' represents a three of hearts, '8C' represents an eight of clubs, etc. The function should return a list of card groupings where each grouping represents a possible poker hand (e.g., three of a kind, straight, flush, etc.).","solution":"from itertools import combinations def find_poker_hands(cards): Returns all possible 5-card poker hands that can be made from the given set of cards. Each card is represented as a string in the format 'RankSuit' (e.g., '3H', '8C'). if len(cards) < 5: return [] all_hands = list(combinations(cards, 5)) possible_hands = [list(hand) for hand in all_hands] return possible_hands"},{"question":"Write a function to perform a binary search on a sorted list of integers. The function should return the index of the target number if it is found within the list, or -1 if the target is not present in the list.","solution":"def binary_search(nums, target): Perform a binary search on a sorted list of integers. Returns the index of the target number if it is found in the list, or -1 if it is not present. :param nums: List[int], the sorted list of integers to search in. :param target: int, the number to search for. :return: int, the index of the target number if found, otherwise -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to replace all characters in a given string with their ASCII code values.","solution":"def replace_with_ascii(string): Returns a string where each character is replaced by its ASCII code value. The ASCII codes are space-separated. :param string: The input string to transform. :return: A string of space-separated ASCII values. return ' '.join(str(ord(char)) for char in string)"},{"question":"Write a function to check if a given string s is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(s): Check if the given string s is a palindrome, considering only alphanumeric characters and ignoring cases. :param s: Input string to be checked :type s: str :return: True if s is a palindrome, False otherwise :rtype: bool # Remove non-alphanumeric characters and convert to lowercase filtered_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Write a function to calculate the total number of distinct paths from the top-left corner to the bottom-right corner of a grid, where movement is only allowed downward or to the right. In a grid of size m x n, the function should return the number of distinct paths.","solution":"def unique_paths(m, n): Calculate the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, moving only down or right. :param m: Number of rows :param n: Number of columns :return: Number of unique paths if m == 0 or n == 0: return 0 # create a 2-D list initialized with 1's for the first row and first column dp = [[1] * n for _ in range(m)] # iterate through the grid starting from (1,1) since (0,0) is the starting point for i in range(1, m): for j in range(1, n): # number of paths to (i, j) is sum of paths to (i-1, j) and (i, j-1) dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function to calculate the Fibonacci number at the nth position in the sequence.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, ... if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to convert a given string from base 10 to another base (between 2 and 36). For example, convert the decimal number 23 to base 5 and base 16.","solution":"def decimal_to_base(n, base): Converts a decimal (base 10) number \`n\` to the specified \`base\`. Base can be between 2 and 36. if not (2 <= base <= 36): raise ValueError(\\"Base must be between 2 and 36\\") if n == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = \\"\\" while n > 0: remainder = n % base result = digits[remainder] + result n = n // base return result"},{"question":"Write a function to return the number of values that are greater than their immediate predecessor. In the example given, I want to pass to this function using the list \`largeList\` as an input parameter and calculate the number of elements that are greater than the previous element in the list.","solution":"def count_greater_than_predecessor(largeList): Returns the count of elements that are greater than their immediate predecessor in the list. :param largeList: List of numbers to be analyzed. :return: Number of elements greater than their previous element. if not largeList or len(largeList) < 2: return 0 count = 0 for i in range(1, len(largeList)): if largeList[i] > largeList[i - 1]: count += 1 return count"},{"question":"Write a function to count the number of nodes in a binary search tree (BST) that are greater than a given value. The BST is not necessarily balanced. You can use any programming language you are comfortable with, but please provide the solution in Python.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_nodes_greater_than(root, x): Counts the number of nodes in a binary search tree (BST) that have values greater than x. :param root: Root node of the BST :param x: The value to compare the nodes against :return: The count of nodes with values greater than x if root is None: return 0 if root.value > x: return 1 + count_nodes_greater_than(root.left, x) + count_nodes_greater_than(root.right, x) else: return count_nodes_greater_than(root.right, x)"},{"question":"Write a function to merge two sorted arrays without using extra space in O(m + n) in-place.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array in-place. n = len(arr1) m = len(arr2) # Step 1: Compare elements from the back and place in the largest available end i = n - 1 j = m - 1 k = n + m - 1 # Last position in the merged array # Resize arr1 to accommodate both arrays arr1.extend([0] * m) while i >= 0 and j >= 0: if arr1[i] > arr2[j]: arr1[k] = arr1[i] i -= 1 else: arr1[k] = arr2[j] j -= 1 k -= 1 while j >= 0: arr1[k] = arr2[j] j -= 1 k -= 1 return arr1"},{"question":"Write a function to check if a given number is a perfect square. A perfect square is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4^2. How can I write a function that takes an integer and returns True if it is a perfect square, and False otherwise?","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Write a function to reverse a string in Python. The function should be written in a single line of code as a lambda function.","solution":"reverse_string = lambda s: s[::-1]"},{"question":"Write a function to return the first non-repeating character in a string. If there is no non-repeating character, return the first character.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string. If there is no non-repeating character, returns the first character. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return s[0] if s else ''"},{"question":"Write a function to find the largest number in a list using Python. The function should be named \`find_largest\` and it should take a list of numbers as an argument. It should return the largest number in the list.","solution":"def find_largest(numbers): Returns the largest number in the given list of numbers. :param numbers: List of numbers :return: The largest number in the list if not numbers: # Check if the list is empty return None largest = numbers[0] for number in numbers: if number > largest: largest = number return largest"},{"question":"Write a function to calculate the factorial of a given number. The factorial of a number is the product of all positive integers less than or equal to that number. For example, the factorial of 5 is 5*4*3*2*1=120. Remember to handle cases where the input is less than 0 or not an integer.","solution":"def factorial(n): Returns the factorial of a given number n. If n is negative or not an integer, raises a ValueError. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to analyze a given text string to identify whether it is a valid mathematical expression or not. The function should return \`True\` if the expression is valid, and \`False\` otherwise. The expression validity means that parentheses are balanced, and the expression contains only valid mathematical operators: \\"+\\", \\"-\\", \\"*\\", \\"/\\".","solution":"def is_valid_math_expression(expression): Returns True if the given expression is a valid mathematical expression, False otherwise. A valid mathematical expression has balanced parentheses and contains only valid operators: \\"+\\", \\"-\\", \\"*\\", \\"/\\". valid_operators = set(\\"+-*/\\") parentheses_stack = [] valid_characters = set(\\"0123456789\\") | valid_operators | {\\"(\\", \\")\\", \\" \\"} for char in expression: if char not in valid_characters: return False if char == '(': parentheses_stack.append(char) elif char == ')': if not parentheses_stack or parentheses_stack[-1] != '(': return False parentheses_stack.pop() return len(parentheses_stack) == 0"},{"question":"Write a function to compute the sum of squares of all numbers in a given list. Your function should be named \`sum_of_squares\` and should take a single parameter, \`numbers\`, which is a list of numbers. The function should return the sum of the squares of each number in the list. If the input list is empty, the function should return 0.","solution":"def sum_of_squares(numbers): Returns the sum of the squares of all numbers in the input list. If the input list is empty, returns 0. return sum(x**2 for x in numbers)"},{"question":"Write a function to calculate the sum of all numbers in an array using both iterative and recursive methods.","solution":"def iterative_sum(array): Returns the sum of all numbers in the array using an iterative method. total = 0 for num in array: total += num return total def recursive_sum(array): Returns the sum of all numbers in the array using a recursive method. if len(array) == 0: return 0 return array[0] + recursive_sum(array[1:])"},{"question":"Write a function to implement a FizzBuzz program using Python. The function should take a single integer n as an argument and print out the FizzBuzz sequence up to n inclusively. The function should print \\"Fizz\\" for numbers divisible by 3, \\"Buzz\\" for numbers divisible by 5, and \\"FizzBuzz\\" for numbers divisible by both 3 and 5. For other numbers, it should just print the number itself. The function should handle all integers from 1 to n. If n is less than 1, the function should not print anything.","solution":"def fizzbuzz(n): Prints the FizzBuzz sequence up to n inclusively. Prints \\"Fizz\\" for numbers divisible by 3, \\"Buzz\\" for numbers divisible by 5, \\"FizzBuzz\\" for numbers divisible by both, and the number itself for other numbers. Parameters: n (int): The upper limit of the FizzBuzz sequence. if n < 1: return for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"question":"Write a function to reverse a given string in Python. **I do not want to use any built-in Python functions or slicing to reverse a string.**","solution":"def reverse_string(input_string): Returns the reverse of the input_string without using built-in functions or slicing. reversed_string = \\"\\" for char in input_string: reversed_string = char + reversed_string return reversed_string"},{"question":"Write a function to find the sum of all the multiples of a given number up to a specified limit s, but only for multiples that fall within the range of s to 3s (inclusive). For example, if the given number is 7 and the limit is 20, the function should find the sum of all multiples of 7 between 7 and 21 that are less than or equal to 20.","solution":"def sum_of_multiples(number, limit): Returns the sum of all multiples of 'number' between 'number' and 3 * 'number' (inclusive) that are less than or equal to 'limit'. start = number end = 3 * number total_sum = 0 for multiple in range(start, end + 1, number): if multiple <= limit: total_sum += multiple return total_sum"},{"question":"Write a function to find the maximum subarray sum in a given array of integers. This function should utilize Kadane's Algorithm for efficient computation. The function should return the maximum sum, not the subarray itself.","solution":"def max_subarray_sum(nums): Function to find the maximum subarray sum using Kadane's Algorithm. Parameters: nums (list): A list of integers. Returns: int: The maximum subarray sum. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to determine the maximum number of points that can be formed by参加会议(point A, B, C, D, E), where each point is determined by the smallest angle formed by three points on the circumference of a circle. The function should use geometrical properties to efficiently calculate the maximum points possible.","solution":"from math import comb def max_points_on_circle_polygon(n): Returns the maximum number of points formed by intersections of diagonals of a convex polygon with n vertices on the circumference of a circle. if n < 4: return 0 # Less than 4 vertices, no intersection of diagonals return comb(n, 4) # Using combinatorial math to calculate intersections # For the given problem with 5 points def max_points_with_5_points(): return max_points_on_circle_polygon(5)"},{"question":"Write a function to generate a random prime number of a given bit size using the OpenSSL library. How would you implement it?","solution":"from subprocess import check_output def generate_random_prime(bits): Generates a random prime number of the given bit size using OpenSSL. :param bits: The bit size of the prime number to generate. :return: A random prime number of the given bit size. # OpenSSL command to generate a prime number of specified bit size cmd = ['openssl', 'prime', '-generate', '-bits', str(bits)] # Execute the command and get the output prime_number = check_output(cmd).decode().strip() # Return the prime number return int(prime_number)"},{"question":"Write a function to reverse a given string using basic string manipulation in Python.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a function to check if two strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. It should return \`true\` if the two strings are anagrams and \`false\` otherwise.","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams of each other. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Write a function to calculate the power of a given base and exponent, but without using the built-in pow() or ** operator. Use recursion to achieve this.","solution":"def power(base, exponent): Returns base raised to the power of exponent using recursion. if exponent == 0: return 1 elif exponent < 0: return 1 / power(base, -exponent) else: return base * power(base, exponent - 1)"},{"question":"Write a function to find the maximum rectangle area given a list of non-negative integers representing the heights of n walls.","solution":"def max_rectangle_area(heights): Returns the maximum rectangle area in a histogram represented by heights. :param heights: List[int], A list of non-negative integers representing the heights of n walls. :return: int, The maximum rectangle area. stack = [] max_area = 0 index = 0 while index < len(heights): # If the current height is greater than the height of the stack's top element # or the stack is empty, push the current index to the stack. if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top element (height of the rectangle) top_of_stack = stack.pop() # Calculate the area with the popped height as the shortest height area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area if needed max_area = max(max_area, area) # Remaining elements in stack while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function to check if the content of two lists are equal. Two lists are considered equal if they contain the same elements in the same order.","solution":"def are_lists_equal(list1, list2): Checks if two lists are equal, meaning they contain the same elements in the same order. Parameters: list1 (list): First list to compare. list2 (list): Second list to compare. Returns: bool: True if the lists are equal, False otherwise. return list1 == list2"},{"question":"Write a function to find the maximum value in a given list of numbers. If the input list is empty, the function should return \`None\`.","solution":"def find_maximum(numbers): Returns the maximum value in a given list of numbers. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Write a function to check if two strings are anagrams under given rules.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams under the given rules: - Case insensitive - Ignoring spaces # Normalize the strings by converting to lowercase and removing spaces normalized_str1 = ''.join(str1.lower().split()) normalized_str2 = ''.join(str2.lower().split()) # Use sorted to compare the two strings for anagram return sorted(normalized_str1) == sorted(normalized_str2)"},{"question":"Write a function to calculate the factorial of a given number \`n\`. The function should use recursion to solve the problem. The factorial of a number is the product of all positive integers less than or equal to that number.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to find the factorial of a given number using recursion. The function should be designed to avoid passing parameters by value to improve performance.","solution":"def factorial(n): Returns the factorial of a given number using recursion. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to identify the longest palindromic substring in a given string. If there are multiple substrings of the same maximum length, return the first one that appears (the one closest to the start of the string).","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in a given string s. If there are multiple substrings of the same maximum length, it returns the first one that appears. n = len(s) if n == 0: return \\"\\" longest = \\"\\" def expand_around_center(left, right): nonlocal longest while left >= 0 and right < n and s[left] == s[right]: current_palindrome = s[left:right+1] if len(current_palindrome) > len(longest): longest = current_palindrome left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return longest"},{"question":"Write a function to calculate the maximum depth of a binary tree in Python. What should be considered in the function definition and what steps should it follow to determine the depth?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree rooted at the given node. if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to print the numbers from 1 to n in Python.","solution":"def print_numbers(n): Returns a list of numbers from 1 to n. return list(range(1, n + 1))"},{"question":"Write a function to perform a left rotation on an array by a given number of positions. A left rotation operation moves each element to its left side and wraps around to the end of the array.","solution":"def left_rotate_array(arr, positions): Perform a left rotation on the array by the given number of positions. :param arr: List of elements to rotate. :param positions: Number of positions to rotate the array to the left. :return: The left rotated array. if not arr: return arr n = len(arr) positions = positions % n return arr[positions:] + arr[:positions]"},{"question":"Write a function to rotate elements of a one-dimensional array in-place to the right by a specified number of positions.","solution":"def rotate_array(arr, positions): Rotates elements of a one-dimensional array to the right by a specified number of positions in-place. Parameters: arr (list): The list to rotate. positions (int): The number of positions to rotate the list by. Returns: None: The function modifies the list in-place and returns None. length = len(arr) positions = positions % length # To handle positions greater than the length of the array arr[:] = arr[-positions:] + arr[:-positions]"},{"question":"Write a function to calculate the moving average of a given list of numbers. The moving average should be calculated over each window of \`n\` elements. If the window size \`n\` is greater than the length of the list, the function should return an error message. If the window size \`n\` is 0, it should also return an error message.","solution":"def moving_average(numbers, n): Calculates the moving average over each window of \`n\` elements in the list \`numbers\`. Args: numbers (list of float): A list of numbers. n (int): The size of the moving window. Returns: list of float: A list of moving averages. str: An error message if n is 0 or greater than the length of the list. if n <= 0: return \\"Error: Window size n must be greater than 0.\\" if n > len(numbers): return \\"Error: Window size n is greater than the length of the list.\\" return [sum(numbers[i:i+n]) / n for i in range(len(numbers) - n + 1)]"},{"question":"Write a function to find the maximum profit that can be made from at most one transaction from a given list of daily stock prices.","solution":"def max_profit(prices): Returns the maximum profit achievable from at most one transaction (buy one and sell one share). Args: prices (list of int): A list of daily stock prices. Returns: int: The maximum profit, or 0 if no profit can be made. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Write a function to rotate an array to the right by k positions using a single loop. The array should remain in-place, meaning you cannot declare a new array. Your function should take the array, its size, and the number of positions to rotate as arguments.","solution":"def rotate_right(arr, n, k): Rotates the array to the right by k positions using a single loop. The operation is done in-place. :param arr: List[int] - The array to rotate. :param n: int - The size of the array. :param k: int - The number of positions to rotate. k = k % n # Handle cases where k is greater than n arr[:] = arr[-k:] + arr[:-k]"},{"question":"Write a function to return the maximum product of two adjacent elements in an array of integers. For example, given the array [3, 6, -2, -5, 7, 3], the function should return 21, since the maximum product of two adjacent elements is 7 * 3 = 21.","solution":"def max_adjacent_product(arr): Returns the maximum product of two adjacent elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") max_product = arr[0] * arr[1] for i in range(1, len(arr) - 1): product = arr[i] * arr[i + 1] if product > max_product: max_product = product return max_product"},{"question":"Write a function to find the index of the item with the minimum value in a list. You can assume that the provided list contains only integer values and is not empty.","solution":"def index_of_min_value(lst): Returns the index of the item with the minimum value in the list. Assumes the list contains only integer values and is not empty. min_index = 0 for i in range(1, len(lst)): if lst[i] < lst[min_index]: min_index = i return min_index"},{"question":"Write a function to check if a list of numbers contains only even numbers. If it does, return \`True\`; otherwise, return \`False\`.","solution":"def all_even(numbers): Checks if all numbers in the list are even. Parameters: numbers (list): List of integers to check. Returns: bool: True if all numbers are even, False otherwise. return all(number % 2 == 0 for number in numbers)"},{"question":"Write a function to check the balanced gate. Given a string representation of an arithmetic expression containing only integers, '+', and '-', return 'YES' if the expression is balanced, and 'NO' if it is not. A string is considered balanced if it has an equal number of '1's and '2's.","solution":"def is_balanced_expression(expression): Returns 'YES' if the expression has an equal number of '1's and '2's, otherwise returns 'NO'. count_1 = expression.count('1') count_2 = expression.count('2') return 'YES' if count_1 == count_2 else 'NO'"},{"question":"Write a function to generate a random password in Python.","solution":"import string import random def generate_random_password(length=12): Generates a random password of specified length. Args: - length (int): The length of the password to generate. Default is 12. Returns: - str: A random password. if length < 4: # Ensure minimum length to include all character types raise ValueError(\\"Password length should be at least 4\\") # Character set: digits, lowercase, uppercase, punctuation all_chars = string.ascii_letters + string.digits + string.punctuation # Ensure the password contains at least one character from each set password = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(string.punctuation) ] # Fill the rest with random choices from all characters password.extend(random.choices(all_chars, k=length-4)) # Shuffle to prevent predictable positions random.shuffle(password) return ''.join(password)"},{"question":"Write a function to remove all instances of a specific value from a list in Python. The function should take a list and a value to be removed, and should return the modified list. Additionally, the function should not use Python's built-in list methods like \`remove()\` or \`pop()\` to delete the elements; instead, it should manually check each element and create a new list that excludes the elements to be removed.","solution":"def remove_elements(lst, value): Removes all instances of \`value\` from the list \`lst\`. Parameters: lst (list): The input list. value: The value to be removed from the list. Returns: list: A new list with the value removed. new_list = [] for element in lst: if element != value: new_list.append(element) return new_list"},{"question":"Write a function to find the LCM (Least Common Multiple) of two numbers in Python. Additionally, write a function to find the LCM of a list of numbers.","solution":"import math from functools import reduce def lcm(a, b): Returns the Least Common Multiple of two numbers a and b. return abs(a * b) // math.gcd(a, b) def lcm_of_list(numbers): Returns the Least Common Multiple of a list of numbers return reduce(lcm, numbers)"},{"question":"Write a function to remove all zero deeply nested within a list.","solution":"def remove_zeros(nested_list): Recursively removes all zeros from a deeply nested list. Parameters: nested_list: list A list which can contain other lists and integers. Returns: list: A new list with all zeros removed. if isinstance(nested_list, list): return [remove_zeros(item) for item in nested_list if item != 0 and remove_zeros(item) != []] return nested_list"},{"question":"Write a function to find the first and last occurrence of a target value in a sorted array.","solution":"def find_first_and_last(arr, target): Returns the first and last occurrence of target value in a sorted array. If the target is not found in the array, return [-1, -1]. :param arr: List[int], a sorted array of integers. :param target: int, the target value to find. :return: List[int], the first and last positions of the target in the array. def binary_search_left(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] < target: left = mid + 1 else: right = mid - 1 return left def binary_search_right(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] <= target: left = mid + 1 else: right = mid - 1 return right first = binary_search_left(arr, target) if first == len(arr) or arr[first] != target: return [-1, -1] last = binary_search_right(arr, target) return [first, last]"},{"question":"Write a function to print all prime numbers from 1 to n, where n is an integer input by the user.","solution":"def generate_primes(n): Returns a list of all prime numbers from 1 to n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function to reverse the words in a sentence in Python without reversing the individual letters of the words. For example, given the sentence \\"Hello World\\", the function should return \\"World Hello\\".","solution":"def reverse_words(sentence): Reverses the words in a sentence without reversing the individual letters of the words. Parameters: sentence (str): The sentence to reverse the words in. Returns: str: The sentence with the words reversed. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Write a function to insert a string into a list at a specific position. The function should take three parameters: a list, a position, and a string to insert. If the position is out of the range of the list, the function should print an error message and return -1. Otherwise, it should insert the string at the specified position and return the modified list.","solution":"def insert_string_at_position(lst, pos, string): Inserts a string into a list at a specific position. Parameters: lst (list): The list to insert the string into. pos (int): The position to insert the string at. string (str): The string to insert. Returns: list: The modified list if the position is valid. int: -1 if the position is out of range. if pos < 0 or pos > len(lst): print(\\"Error: Position out of range\\") return -1 else: lst.insert(pos, string) return lst"},{"question":"Write a function to print all prime numbers less than or equal to a given number N using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(N): Returns a list of all prime numbers less than or equal to N using the Sieve of Eratosthenes algorithm. if N < 2: return [] sieve = [True] * (N + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= N: if sieve[p]: for i in range(p * p, N + 1, p): sieve[i] = False p += 1 return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a function to decrypt a message encrypted using a Caesar cipher with a key provided by the user. The function should handle both uppercase and lowercase letters, and maintain all non-alphabetic characters as is.","solution":"def decrypt_caesar_cipher(encrypted_text, key): Decrypts a message encrypted using a Caesar cipher with the given key. :param encrypted_text: The encrypted message string. :param key: The key used for the Caesar cipher. :return: The decrypted message string. decrypted_text = [] for char in encrypted_text: if char.isalpha(): shift = 65 if char.isupper() else 97 decrypted_char = chr((ord(char) - shift - key) % 26 + shift) decrypted_text.append(decrypted_char) else: decrypted_text.append(char) return ''.join(decrypted_text)"},{"question":"Write a function to find the maximum sum of a sub array in a given 2D array. The sub array must have a size of at least one. The function should return the maximum sum possible.","solution":"def max_sum_subarray_2d(arr): Returns the maximum sum of a sub array in a given 2D array. The sub array must have a size of at least one. def kadane(arr): max_current = max_global = arr[0] for x in arr[1:]: max_current = max(x, max_current + x) if max_current > max_global: max_global = max_current return max_global if not arr or not arr[0]: return 0 num_rows = len(arr) num_cols = len(arr[0]) max_sum = float('-inf') for left in range(num_cols): temp = [0] * num_rows for right in range(left, num_cols): for row in range(num_rows): temp[row] += arr[row][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Write a function to find the nth Fibonacci number in Python. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. How can I implement this function?","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is a series where each number is the sum of the two preceding ones, starting from 0 and 1. Parameters: n (int): The index of the Fibonacci number to retrieve. Returns: int: The nth Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to calculate the sum of all elements in a 2D array (matrix) using Python.","solution":"def sum_2d_array(matrix): Returns the sum of all elements in a 2D array (matrix). Args: matrix (list of list of int/float): 2D array of numbers. Returns: int/float: Sum of all elements in the matrix. return sum(sum(row) for row in matrix)"},{"question":"Write a function to reverse a string in Python using recursion. Feedback on current code, please.","solution":"def reverse_string_recursively(s): Returns the reverse of the string s using recursion. if len(s) == 0: return s else: return s[-1] + reverse_string_recursively(s[:-1])"},{"question":"Write a function to sort an array by applying any sorting algorithm of your choice. Make sure to use best practices for code readability and maintainability.","solution":"def merge_sort(arr): Sorts an array in ascending order using merge sort algorithm. Parameters: arr (list): List of elements to be sorted. Returns: list: Sorted list. if len(arr) <= 1: return arr def merge(left, right): result = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 result.extend(left[left_index:]) result.extend(right[right_index:]) return result mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half)"},{"question":"Write a function to find the length of the longest consecutive elements sequence in an unsorted array of integers.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in an unsorted array of integers. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function to find the shortest path in a grid from the top-left corner to the bottom-right corner. Return the total distance traveled. The grid is represented as a 2D array where each cell contains the distance cost to move into that cell.","solution":"from heapq import heappush, heappop import sys def shortest_path(grid): Find the shortest path from the top-left corner to the bottom-right corner in a grid. Returns the total distance traveled. rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] pq = [(grid[0][0], 0, 0)] # Priority queue as (cost, row, col) distances = [[sys.maxsize] * cols for _ in range(rows)] distances[0][0] = grid[0][0] while pq: current_distance, r, c = heappop(pq) if r == rows - 1 and c == cols - 1: return current_distance for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols: distance = current_distance + grid[nr][nc] if distance < distances[nr][nc]: distances[nr][nc] = distance heappush(pq, (distance, nr, nc)) return -1 # In case there is no valid path, which should not happen in this problem setup"},{"question":"Write a function to insert an element into a stack.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): Push an item onto the stack. self.items.append(item) def pop(self): Pop an item from the stack. if not self.is_empty(): return self.items.pop() return None def is_empty(self): Check if the stack is empty. return len(self.items) == 0 def peek(self): Get the item at the top of the stack without removing it. if not self.is_empty(): return self.items[-1] return None"},{"question":"Write a function to get the binary representation of a given integer number.","solution":"def int_to_binary(n): Returns the binary representation of the integer n. If n is negative, return the binary representation with a minus sign. The bin function is used here for simplicity. return bin(n)[2:] if n >= 0 else '-' + bin(n)[3:]"},{"question":"Write a function to calculate the sum of all numbers from 1 to n using a recursive function. However, instead of using a simple sum, you need to use bitwise operations. How can we achieve this?","solution":"def recursive_bitwise_sum(n): Calculate the sum of all numbers from 1 to n using a recursive function with bitwise operations. def add_bitwise(a, b): while b != 0: carry = a & b a = a ^ b b = carry << 1 return a if n == 1: return 1 else: return add_bitwise(n, recursive_bitwise_sum(n - 1))"},{"question":"Write a function to reverse the order of words in a single space-delimited string and maintain the single space delimiter between the words.","solution":"def reverse_words(sentence): Reverses the order of words in a single space-delimited string. Maintains the single space delimiter between the words. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to determine the frequency of each word in a given text using Python. Your function should return a dictionary where the keys are the words and the values are the counts of how many times each word appears in the text.","solution":"def word_frequency(text): Determines the frequency of each word in a given text. Parameters: text (str): The input text. Returns: dict: A dictionary where keys are words and values are their counts. # Convert text to lower case and split by whitespace to get words words = text.lower().split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a function to implement the breadth-first search (BFS) algorithm in a graph. The function should take in the graph and a starting node, and return the shortest path from the starting node to all other nodes in the graph. You can assume that the graph is represented as an adjacency list using Python dictionaries, and that all keys are integers representing the nodes in the graph, and values are lists of integers representing the neighboring nodes.","solution":"from collections import deque def bfs(graph, start): Perform BFS on the graph and return the shortest path from the starting node to all other nodes. :param graph: Dictionary where keys are node integers and values are lists of integer neighbors. :param start: Integer representing the starting node. :return: Dictionary with keys as nodes and values as the shortest distance from the start node. # Initialize the distances dictionary with \\"infinity\\" values distances = {node: float('inf') for node in graph} # The distance to the start node is 0 distances[start] = 0 # Initialize the queue and enqueue the start node queue = deque([start]) # Perform BFS while queue: current_node = queue.popleft() # Check all the neighbors of the current node for neighbor in graph[current_node]: # If this neighbor has not been visited yet if distances[neighbor] == float('inf'): # Update the distance to this neighbor distances[neighbor] = distances[current_node] + 1 # Enqueue the neighbor queue.append(neighbor) return distances"},{"question":"Write a function to filter out and return only the long strings from a given list of strings. The length of a \\"long\\" string is defined here as being greater than 4.","solution":"def filter_long_strings(strings): Filters and returns the long strings from a given list of strings. A long string is defined as having a length greater than 4. return [s for s in strings if len(s) > 4]"},{"question":"Write a function to find the kth largest element in an array of integers. The function should handle edge cases such as empty arrays and arrays with fewer elements than k. If the array is empty or if k is greater than the number of elements in the array, the function should return -1 to indicate an invalid input. Otherwise, the function should return the kth largest element.","solution":"def find_kth_largest(nums, k): Returns the kth largest element in an array of integers. Parameters: nums (list): The list of integers. k (int): The position (1-based) of the largest element to find. Returns: int: The kth largest element, or -1 if the input is invalid. if not nums or k > len(nums): return -1 nums.sort(reverse=True) return nums[k-1]"},{"question":"Write a function to generate all prime numbers less than a given number \`n\`. The function should return a list of these prime numbers.","solution":"def generate_primes(n): Generates all prime numbers less than a given number n. Args: n: non-negative integer Returns: List of all prime numbers less than n. if n <= 2: return [] primes = [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, n): if sieve[start]: primes.append(start) for multiple in range(start*start, n, start): sieve[multiple] = False return primes"},{"question":"Write a function to return the nth element in a custom class structure.","solution":"class ListNode: Represents a node in a linked list. def __init__(self, value=0, next_node=None): self.value = value self.next_node = next_node class LinkedList: Represents a singly linked list. def __init__(self): self.head = None def append(self, value): Appends a new value to the end of the linked list. if not self.head: self.head = ListNode(value) else: current = self.head while current.next_node: current = current.next_node current.next_node = ListNode(value) def get_nth_element(self, n): Returns the value of the nth element (0-indexed) in the linked list. current = self.head count = 0 while current: if count == n: return current.value count += 1 current = current.next_node raise IndexError(\\"Index out of range\\")"},{"question":"Write a function to print the Fibonacci sequence up to a given number of terms. For example, if the input is 5, the output should be 0, 1, 1, 2, 3.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to n terms. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to calculate the sum of all numbers in a given list that are multiples of two.","solution":"def sum_of_multiples_of_two(nums): Returns the sum of all numbers in the given list that are multiples of two. Args: nums (list of int): List of integers to be checked. Returns: int: Sum of all numbers that are multiples of two. return sum(num for num in nums if num % 2 == 0)"},{"question":"Write a function to check if all elements in a list are unique. If they are not, return the first non-unique element. If all elements are unique, return -1.","solution":"def find_first_non_unique_element(lst): Checks if all elements in a list are unique. If not, returns the first non-unique element. If all elements are unique, returns -1. seen = set() for elem in lst: if elem in seen: return elem seen.add(elem) return -1"},{"question":"Write a function to split an input string into words using the provided prefix and suffix in Python. Additionally, the function should return words that match a given regex pattern. The function should handle edge cases where the input string is empty or the prefix and suffix are not unique in the string.","solution":"import re def extract_words(input_string, prefix, suffix, pattern): Extracts words from the input_string that are bounded by prefix and suffix, and match the given regex pattern. Parameters: - input_string (str): The string to process. - prefix (str): The prefix that bounds the words. - suffix (str): The suffix that bounds the words. - pattern (str): The regex pattern that extracted words must match. Returns: - list: A list of words that match the given pattern. if not input_string: return [] regex_pattern = re.escape(prefix) + r'(w+)' + re.escape(suffix) matches = re.findall(regex_pattern, input_string) return [match for match in matches if re.fullmatch(pattern, match)]"},{"question":"Write a function to calculate the number of days between two dates.","solution":"from datetime import datetime def days_between_dates(date1, date2): Calculate the number of days between two dates. Parameters: - date1: A string representing the first date in YYYY-MM-DD format. - date2: A string representing the second date in YYYY-MM-DD format. Returns: - An integer representing the number of days between the two dates. date_format = \\"%Y-%m-%d\\" d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) return abs((d2 - d1).days)"},{"question":"Write a function to find and return the largest integer in an array using Python.","solution":"def find_largest_integer(arr): Returns the largest integer in the array. if not arr: raise ValueError(\\"Array is empty\\") largest = arr[0] for num in arr[1:]: if num > largest: largest = num return largest"},{"question":"Write a function to determine if a point is inside a triangle given the coordinates of the three vertices and the point to check.","solution":"def is_point_in_triangle(x1, y1, x2, y2, x3, y3, px, py): Determines if a point (px, py) is inside the triangle formed by the vertices (x1, y1), (x2, y2), and (x3, y3). def sign(x1, y1, x2, y2, x3, y3): return (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3) d1 = sign(px, py, x1, y1, x2, y2) d2 = sign(px, py, x2, y2, x3, y3) d3 = sign(px, py, x3, y3, x1, y1) has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0) has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0) return not (has_neg and has_pos)"},{"question":"Write a function to compare two arrays of integers and return the array with the smallest total sum. If both arrays have the same sum, return an empty array.","solution":"def compare_arrays(arr1, arr2): Compare two arrays of integers and return the array with the smallest total sum. If both arrays have the same sum, return an empty array. sum1 = sum(arr1) sum2 = sum(arr2) if sum1 < sum2: return arr1 elif sum2 < sum1: return arr2 else: return []"},{"question":"Write a function to calculate the number of words in a given string.","solution":"def count_words(s): Returns the number of words in the given string. return len(s.split())"},{"question":"Write a function to calculate the minimum distance between two sets of points using Manhattan distance. The function should take two lists of points, where each point is represented as a tuple of two integers (x, y), and return an integer representing the smallest minimum distance between any two points from the two sets.","solution":"def manhattan_distance(point1, point2): Calculate the Manhattan distance between two points. return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1]) def min_distance_between_sets(set1, set2): Calculate the minimum Manhattan distance between two sets of points. min_distance = float('inf') for p1 in set1: for p2 in set2: distance = manhattan_distance(p1, p2) if distance < min_distance: min_distance = distance return min_distance"},{"question":"Write a function to determine the peak element in a 2D array (matrix) in linear time. A peak element is defined as an element which is strictly greater than its neighbors in all four directions. Note: Not every row or column needs to be sorted and just a single peak is required.","solution":"def find_peak_2d(matrix): from collections import deque def is_peak(i, j): if i > 0 and matrix[i][j] <= matrix[i-1][j]: return False if i < len(matrix) - 1 and matrix[i][j] <= matrix[i+1][j]: return False if j > 0 and matrix[i][j] <= matrix[i][j-1]: return False if j < len(matrix[0]) - 1 and matrix[i][j] <= matrix[i][j+1]: return False return True num_rows = len(matrix) num_cols = len(matrix[0]) for i in range(num_rows): for j in range(num_cols): if is_peak(i, j): return (i, j) return None # if no peak is found for some reason"},{"question":"Write a function to create an HTML document with a heading and a paragraph. The heading should be \\"Welcome to My Website\\" and the paragraph should include a button wrapped in a \`<div>\` tag. The button should read \\"Click Me\\". Additionally, the paragraph should have a class='intro' and the \`<div>\` wrapping the button should have a class='container'.","solution":"def create_html_document(): Creates an HTML document with a heading and a paragraph containing a button wrapped in a div tag. html_doc = <!DOCTYPE html> <html> <head> <title>My Website</title> </head> <body> <h1>Welcome to My Website</h1> <p class=\\"intro\\"> <div class=\\"container\\"> <button>Click Me</button> </div> </p> </body> </html> return html_doc"},{"question":"Write a function to find the first unique character in a given string. If all characters are repeating, return an underscore('_').","solution":"def first_unique_character(s): Finds the first unique character in the given string s. If all characters are repeating, return '_'. from collections import Counter # Count the frequency of each character char_count = Counter(s) # Find the first unique character for char in s: if char_count[char] == 1: return char # If no unique character found, return '_' return '_'"},{"question":"Write a function to loop through each item in an object and map it to a new object based on a mapping function. The mapping function takes an item and an index as input and returns a new item based on these inputs.","solution":"def map_items(obj, mapping_func): Loops through each item in an object and maps it to a new object based on a mapping function. The mapping function takes an item and an index as input and returns a new item based on these inputs. :param obj: List of items to be mapped :param mapping_func: Function that takes an item and an index, then returns a new item :return: New list with mapped items return [mapping_func(item, index) for index, item in enumerate(obj)]"},{"question":"Write a function to find the largest palindrome made from the product of two 3-digit numbers.","solution":"def find_largest_palindrome_product(): Finds the largest palindrome made from the product of two 3-digit numbers. max_palindrome = 0 for i in range(100, 1000): for j in range(i, 1000): # To avoid repeated calculations product = i * j if str(product) == str(product)[::-1]: # Check if product is a palindrome if product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"Write a function to calculate the frequency of each character in a given string and return a dictionary with characters as keys and their frequencies as values.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the input string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a function to implement 'strStr()'. This function should implement a haystk with needle. It should return the first index of needle in haystack, or -1 if needle is not part of haystack. If needle is an empty string, return 0.","solution":"def strStr(haystack, needle): Returns the first index of \`needle\` in \`haystack\`, or -1 if \`needle\` is not part of \`haystack\`. If \`needle\` is an empty string, return 0. if not needle: return 0 return haystack.find(needle)"},{"question":"Write a function to find the minimum number of platforms required for a given set of train arrivals and departures on a railway station. Each train's arrival and departure times are provided in arrays. The function should return the minimum number of platforms needed at any point in time among the trains.","solution":"def find_min_platforms(arrivals, departures): Returns the minimum number of platforms required for the given train schedules. Parameters: arrivals (list): List of train arrival times. departures (list): List of train departure times. Returns: int: Minimum number of platforms required. if not arrivals or not departures or len(arrivals) != len(departures): return 0 arrivals.sort() departures.sort() platform_needed = 1 # At least one platform needed for the first train max_platforms = 1 i = 1 j = 0 n = len(arrivals) while i < n and j < n: if arrivals[i] <= departures[j]: platform_needed += 1 i += 1 elif arrivals[i] > departures[j]: platform_needed -= 1 j += 1 if platform_needed > max_platforms: max_platforms = platform_needed return max_platforms"},{"question":"Write a function to solve a square or rectangle grid puzzle. The grid contains a series of cells, each labeled with a number from 1 to N, where N is the size of the grid. The goal is to arrange the numbers according to the puzzle's rules.","solution":"def solve_grid_puzzle(N): Solves the grid puzzle by arranging numbers from 1 to N in a way that each consecutive number is placed adjacent to the other either horizontally or vertically. :param N: Total number of elements in the grid :return: arranged list of lists representing the grid from math import isqrt import itertools if N == 1: return [[1]] # Determine the grid dimensions (try to make it as square as possible) rows = isqrt(N) cols = N // rows if rows * cols < N: cols += 1 # Initialize the grid grid = [[None for _ in range(cols)] for _ in range(rows)] # Flatten the grid and fill it with numbers from 1 to N num = 1 for i, j in itertools.product(range(rows), range(cols)): if num > N: break grid[i][j] = num num += 1 return grid"},{"question":"Write a function to solve the 8-Queens puzzle. The function should place 8 queens on an 8x8 chessboard such that no two queens threaten each other. In chess, a queen can move horizontally, vertically, or diagonally any number of squares.","solution":"def solve_n_queens(n=8): Solves the N-Queens puzzle and returns all the possible solutions. Each solution is represented as a list where the indices represent the rows, and the values at each index represent the column positions of the queens. def is_not_under_attack(row, col): for prev_row in range(row): previous_col = cols[prev_row] # Check if the same column or diagonal if previous_col == col or previous_col - prev_row == col - row or previous_col + prev_row == col + row: return False return True def place_queen(row): # If placed queens in all rows, add the solution if row == n: solutions.append(cols[:]) return for col in range(n): if is_not_under_attack(row, col): cols[row] = col place_queen(row + 1) # Backtrack: remove the queen from the last position cols[row] = None solutions = [] cols = [None] * n place_queen(0) return solutions"},{"question":"Write a function to reverse a given string in Python. If the input string is \`None\` or empty, return \`None\`.","solution":"def reverse_string(s): Returns the reverse of the input string s. If s is None or empty, return None. if s is None or s == \\"\\": return None return s[::-1]"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Write a function named \`factorial\` which takes an integer \`n\` as its parameter. If \`n\` is 0 or 1, return 1. Otherwise, return \`n\` multiplied by the factorial of \`n-1\`.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to calculate the factorial of a number using a for loop in Python. The function should take one integer input and return the factorial of that number. If the input is less than 0, the function should raise a ValueError.","solution":"def factorial(n): Returns the factorial of a given number n. If n is less than 0, raises a ValueError. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to find the closest prime number to a given integer \`n\`. If \`n\` is already a prime number, return \`n\`. If \`n\` is not a prime, return the closest prime number that is greater than \`n\`. If there is no such prime number (meaning all numbers greater than \`n\` are not prime), return \`None\`.","solution":"def is_prime(num): Helper function to determine if a number \`num\` is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def closest_prime(n): Returns the closest prime number greater than or equal to \`n\`. If \`n\` is already a prime number, return \`n\`. If there is no such prime, return None. while True: if is_prime(n): return n n += 1"},{"question":"Write a function to determine if a given integer \`num\` is a palindrome. A palindrome number is a number that remains the same when its digits are reversed. For example, 121 is a palindrome, but 123 is not. The function should return \`true\` if \`num\` is a palindrome, and \`false\` otherwise. Assume that the input number is not negative.","solution":"def is_palindrome(num): Determines if the given integer \`num\` is a palindrome. Args: num (int): The integer to check. Returns: bool: True if \`num\` is a palindrome, False otherwise. str_num = str(num) return str_num == str_num[::-1]"},{"question":"Write a function to find the kth largest element in an unsorted list. You may modify the input list to sort the elements, but you are not allowed to use any built-in sorting functions or libraries. Additionally, your function should be as efficient as possible, considering the constraints.","solution":"def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] >= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): if low <= high: pi = partition(arr, low, high) if pi == k: return arr[pi] elif pi < k: return quickselect(arr, pi + 1, high, k) else: return quickselect(arr, low, pi - 1, k) def find_kth_largest(nums, k): Returns the kth largest element in the list nums. return quickselect(nums, 0, len(nums) - 1, k - 1)"},{"question":"Write a function to take a positive integer greater than 1 and output that number broken down into an array of all its prime factors, sorted from least to greatest. Each prime factor should be listed the number of times it appears in the factorization.","solution":"def prime_factors(n): Returns an array of prime factors of the given number n, sorted from least to greatest. Each prime factor is listed the number of times it appears in the factorization. if n <= 1: raise ValueError(\\"Input must be a positive integer greater than 1\\") factors = [] divisor = 2 while n >= 2: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Write a function to remove all occurrences of the letter 'a' from a given string.","solution":"def remove_a(s): Removes all occurrences of the letter 'a' from the given string. Parameters: s (str): The input string. Returns: str: The string with all 'a' characters removed. return s.replace('a', '')"},{"question":"Write a function to find the maximum of two numbers using the ternary operator.","solution":"def max_of_two(a, b): Returns the maximum of two numbers a and b using the ternary operator. return a if a > b else b"},{"question":"Write a function to calculate the factorials of all numbers from 1 to n. The function should return a list where the i-th element is the factorial of the i-th number in the input list. For example, \`factorials_of_numbers([1, 2, 3])\` should return \`[1, 2, 6]\`.","solution":"def factorials_of_numbers(numbers): Calculate the factorials of all numbers in the input list. :param numbers: List of integers :return: List of factorials corresponding to the input list def factorial(num): if num == 0 or num == 1: return 1 return num * factorial(num - 1) return [factorial(num) for num in numbers]"},{"question":"Write a function to find the greatest common divisor (GCD) of two numbers using the Euclidean algorithm, and explain the algorithm step-by-step.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Write a function to reverse the order of the characters in a string and return the reversed string.","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Write a function to find the difference between the maximum and minimum numbers in a given list. If the list is empty, the function should return -1.","solution":"def max_min_difference(numbers): Returns the difference between the maximum and minimum numbers in a given list. If the list is empty, the function returns -1. if not numbers: return -1 max_num = max(numbers) min_num = min(numbers) return max_num - min_num"},{"question":"Write a function to convert a given disk size from bytes to the nearest larger power of 1024 based unit of measurement (KB, MB, GB, TB, etc.).","solution":"def convert_bytes(size_in_bytes): Convert a given disk size from bytes to the nearest larger power of 1024 based unit of measurement. Args: size_in_bytes (int): Disk size in bytes. Returns: str: Disk size in the nearest larger power of 1024 based unit of measurement. if size_in_bytes < 0: raise ValueError(\\"Size in bytes cannot be negative\\") units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] size = size_in_bytes unit_index = 0 while size >= 1024 and unit_index < len(units) - 1: size /= 1024 unit_index += 1 return f\\"{size:.2f} {units[unit_index]}\\""},{"question":"Write a function to determine if a given list is a palindrome. A palindrome is a sequence that reads the same backward as forward. For example, the list \`[1, 2, 3, 2, 1]\` is a palindrome.","solution":"def is_palindrome(lst): Determines if a given list is a palindrome. Parameters: lst (list): The list to check. Returns: bool: True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Write a function to convert a string to Pig Latin. Pig Latin is a popular made-up language game for children, where each word in the original language is supposed to be converted as follows: if the word starts with a consonant (not A, E, I, O, U), move all consonants before the first vowel to the end of the word and add 'ay'. If the word starts with a vowel, just add 'way' to the end. For example, the word \\"hello\\" becomes \\"ellohay\\" and the word \\"algorithm\\" becomes \\"algorithmway\\".","solution":"def to_pig_latin(word): Convert a word to Pig Latin. If the word starts with a consonant, move all consonants before the first vowel to the end of the word and add 'ay'. If the word starts with a vowel, just add 'way' to the end. vowels = \\"aeiouAEIOU\\" if word[0] in vowels: return word + \\"way\\" index = 0 # Find the index of the first vowel for i, char in enumerate(word): if char in vowels: index = i break return word[index:] + word[:index] + \\"ay\\""},{"question":"Write a function to find the intersection point of two lines given by the equations ax + by = c and dx + ey = f. The function should return the intersection point as a tuple (x, y). If the lines do not intersect, the function should return None.","solution":"def find_intersection(a, b, c, d, e, f): Returns the intersection point of two lines given by equations ax + by = c and dx + ey = f, or None if the lines do not intersect. # Calculate the determinant det = a * e - b * d if det == 0: return None # Lines are parallel or coincident # Using Cramer's rule to find the intersection point x = (c * e - b * f) / det y = (a * f - c * d) / det return (x, y)"},{"question":"Write a function to find the second smallest unique number in a list of integers. If there is no such number, return \`None\`.","solution":"def second_smallest_unique(nums): Returns the second smallest unique number in a list. If there is no such number, return None. unique_nums = list(set(nums)) # Get unique elements if len(unique_nums) < 2: return None unique_nums.sort() # Sort the unique elements return unique_nums[1]"},{"question":"Write a function to calculate the roots of a quadratic equation. The quadratic equation is in the form of ax^2 + bx + c = 0. If the equation has complex roots, return the roots as complex numbers.","solution":"import cmath def quadratic_roots(a, b, c): Returns the roots of the quadratic equation ax^2 + bx + c = 0. If the roots are complex, they will be returned as complex numbers. # Calculate the discriminant discriminant = b**2 - 4*a*c # Calculate the two roots using the quadratic formula root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) return root1, root2"},{"question":"Write a function to find the index of the first element from the end that is smaller than its previous element in a given array of integers. If such an element is found, return its index; otherwise, return -1.","solution":"def find_inversion_point(arr): Finds the index of the first element from the end that is smaller than its previous element. Args: arr (list): A list of integers. Returns: int: The index of the first element from the end that is smaller than its previous element, or -1 if no such element exists. n = len(arr) # Traverse the list from the second last to the first element for i in range(n-2, -1, -1): if arr[i] > arr[i+1]: return i+1 # If no such element is found, return -1 return -1"},{"question":"Write a function to validate if a given string is a valid date in the format \\"YYYY-MM-DD\\".","solution":"from datetime import datetime def is_valid_date(date_str): Validates if a given string is a valid date in the format \\"YYYY-MM-DD\\". Args: date_str (str): Date string to validate. Returns: bool: True if the date is valid, False otherwise. try: datetime.strptime(date_str, \\"%Y-%m-%d\\") return True except ValueError: return False"},{"question":"Write a function to check if two strings are anagrams of each other. Two words are considered anagrams if they contain the exact same characters in any order. For example, \\"listen\\" and \\"silent\\" are anagrams. The function should return \`True\` if the strings are anagrams and \`False\` otherwise. consider the case sensitivity and whitespace.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. Case sensitivity and whitespace are considered. # Replace spaces and convert both strings to lower case for a fair comparison s1_clean = ''.join(s1.split()).lower() s2_clean = ''.join(s2.split()).lower() return sorted(s1_clean) == sorted(s2_clean)"},{"question":"Write a function to calculate the sum of elements in a list, but only for those elements that are greater than a given threshold.","solution":"def sum_above_threshold(lst, threshold): Returns the sum of elements in \`lst\` that are greater than \`threshold\`. return sum(x for x in lst if x > threshold)"},{"question":"Write a function to calculate the factorial of a number in Python using recursion. The function should handle edge cases where the input is not a non-negative integer. If the input is not valid, the function should return an appropriate error message. How can I write this function to handle these conditions effectively?","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. If n is not a non-negative integer, returns an appropriate error message. if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n < 0: return \\"Error: Input must be a non-negative integer.\\" if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to generate the shortest possible palindrome by appending characters to the end of a given string. The function should not change the original string.","solution":"def shortest_palindrome(s): Generates the shortest possible palindrome by appending characters to the end of the string s. if s == s[::-1]: return s # if the string is already a palindrome for i in range(len(s)): if s[i:] == s[i:][::-1]: return s + s[:i][::-1] return s + s[:-1][::-1]"},{"question":"Write a function to generate the nth Fibonacci number in a given programming language (your choice). Then, provide the function with a test case to demonstrate its correctness.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to remove the nth character from a given string \`s\` where the first character is considered at position 1 (i.e., the first character, \`s[0]\`, caries the position 1). Your function should have the signature \`String removeNthChar(String s, int n)\`. In case, \`n < 1\` or \`n > s.length()\`, return the input string as it is. Also, handle the case where \`n = 1\` separately as the first character is to be removed. Note: Your function should avoid using any built-in string methods like \`substring\` or \`charAt\` directly.","solution":"def remove_nth_char(s, n): Removes the nth character from the given string s where n starts from 1 if n < 1 or n > len(s): return s # Create a new string with the nth character removed result = \\"\\" for i in range(len(s)): if i + 1 != n: # Since we want to remove the 1-based nth character result += s[i] return result"},{"question":"Write a function to determine the minimum number of unique integers in an array after removing all occurrences of a specific integer x and its pairs (2*x, 4*x, etc.) from the array.","solution":"def min_unique_integers_after_removal(arr, x): Returns the minimum number of unique integers in the array after removing all occurrences of x and its pairs (2*x, 4*x, etc.). # Create a set of elements to remove to_remove = set() multiple = x while multiple in arr: to_remove.add(multiple) multiple *= 2 # Remove the elements result_arr = [num for num in arr if num not in to_remove] # Get the unique elements unique_elements = set(result_arr) return len(unique_elements)"},{"question":"Write a function to find the longest word in a given list of words. If there are multiple words with the same maximum length, the function should return the first one found.","solution":"def find_longest_word(words): Returns the longest word from a given list of words. If multiple words have the same maximum length, the first one is returned. if not words: return \\"\\" longest_word = words[0] for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Write a function to generate a list of prime numbers up to a given number \`n\` using the Sieve of Eratosthenes algorithm. The function should take one parameter: \`n\`, which is the upper limit for finding prime numbers.","solution":"def sieve_of_eratosthenes(n): Generate a list of prime numbers up to a given number \`n\` using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit for finding prime numbers. Returns: list: A list of prime numbers up to \`n\`. if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes"},{"question":"Write a function to split a string into substrings of fixed length. For example, given the string \\"hello world\\" and a fixed length of 3, the function should return a list of substrings [\\"hel\\", \\"lo \\", \\"wor\\", \\"ld \\"].","solution":"def split_fixed_length(s, length): Splits the string \`s\` into substrings of fixed \`length\`. Parameters: s (str): The input string to be split. length (int): The fixed length of each substring. Returns: List[str]: A list of substrings of fixed length. if length <= 0: raise ValueError(\\"Length must be a positive integer\\") return [s[i:i+length].ljust(length) for i in range(0, len(s), length)]"},{"question":"Write a function to detect cycles in a directed graph. The graph can be represented using an adjacency list. A cycle is defined as a sequence of nodes, where we can return to the starting node by following the edges of the graph.","solution":"def detect_cycle_in_directed_graph(graph): Detects cycles in a directed graph. Parameters: graph (dict): A dictionary representing the adjacency list of the graph. Returns: bool: True if a cycle is detected, otherwise False. def visit(node): if node in temp_mark: return True if node in perm_mark: return False temp_mark.add(node) for neighbour in graph.get(node, []): if visit(neighbour): return True temp_mark.remove(node) perm_mark.add(node) return False temp_mark = set() perm_mark = set() for node in graph: if visit(node): return True return False"},{"question":"Write a function to check whether a given integer n is a perfect square or not in Python.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. if n < 0: return False root = int(n ** 0.5) return root * root == n"},{"question":"Write a function to convert a given hexadecimal number to its decimal equivalent. For example, if the input is 1A, the output should be 26.","solution":"def hex_to_decimal(hex_num): Converts a given hexadecimal number (as string) to its decimal equivalent. :param hex_num: Hexadecimal number as a string :return: Decimal equivalent as an integer return int(hex_num, 16)"},{"question":"Write a function to filter out all the words in a given string that contain a specific character. For example, if the character is 'a', then all words with 'a' in them should be removed. The function should return the resulting string.","solution":"def filter_words_containing_char(sentence, char): Filters out all words in the given sentence that contain the specified character. :param sentence: The sentence to filter. :param char: The character to filter words by. :return: The filtered sentence. words = sentence.split() filtered_words = [word for word in words if char not in word] return ' '.join(filtered_words)"},{"question":"Write a function to find the unique integers in a list of a million values. How would you approach this problem if it were up to you and why would you choose this approach?","solution":"def find_unique_integers(int_list): Returns the unique integers from a list of integers. Parameters: int_list (list): A list of integers. Returns: list: A list of unique integers. unique_integers = set(int_list) return list(unique_integers)"},{"question":"Write a function to remove all negative numbers from an array and return the new array without mutating the original array.","solution":"def remove_negatives(arr): Removes negative numbers from the array without mutating the original array. :param arr: List of integers. :return: New list with all non-negative integers. return [x for x in arr if x >= 0]"},{"question":"Write a function to return the list of integers that are less than 50.","solution":"def less_than_fifty(numbers): Returns a list of integers from the input list that are less than 50. Parameters: numbers (list): A list of integers. Returns: list: A list of integers that are less than 50. return [num for num in numbers if num < 50]"},{"question":"Write a function to determine if a string is a palindrome in a given programming language. Here's an example string: \\"racecar\\".","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, otherwise returns False. # Remove any non-alphanumeric characters and convert to lowercase cleaned_string = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function to return an array of two integers with the sum value becoming the input value and the average value equal to half of the input value.","solution":"def find_two_integers_with_sum_and_average(target_sum): Returns an array of two integers where the sum is equal to the input value and the average is equal to half of the input value. # If target_sum is odd, return two consecutive integers if target_sum % 2 != 0: return [(target_sum // 2), (target_sum // 2) + 1] # If target_sum is even, return two equal integers else: return [target_sum // 2, target_sum // 2]"},{"question":"Write a function to find all the prime factors of a given integer. If the integer is negative, treat it as its absolute value.","solution":"def prime_factors(n): Returns a list of prime factors of the absolute value of n. if n < 0: n = abs(n) factors = [] div = 2 while div * div <= n: while (n % div) == 0: factors.append(div) n //= div div += 1 if n > 1: factors.append(n) return factors"},{"question":"Write a function to calculate the sum of the squares of all numbers in a given list. The function should be implemented in Python.","solution":"def sum_of_squares(numbers): Returns the sum of the squares of all numbers in the input list. :param numbers: List of numbers :return: Sum of the squares of the numbers return sum(x ** 2 for x in numbers)"},{"question":"Write a function to compare two strings S1 and S2 and return the number of characters they have in common.","solution":"def common_char_count(s1, s2): Returns the number of characters that S1 and S2 have in common. Each character is counted the number of times it appears in both strings. from collections import Counter counter1 = Counter(s1) counter2 = Counter(s2) common_count = 0 for char in counter1: if char in counter2: common_count += min(counter1[char], counter2[char]) return common_count"},{"question":"Write a function to count the number of nodes in a given Binary Search Tree (BST).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_nodes(root): Returns the total number of nodes in the binary search tree. if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a function to randomly generate a number between 0 and 1 in Python.","solution":"import random def generate_random_number(): Returns a random number between 0 and 1. return random.random()"},{"question":"Write a function to calculate the number of ways to choose \`k\` items from \`n\` items without repetition and without order. This is known as the binomial coefficient, often denoted as ( C(n, k) ) or ( binom{n}{k} ).","solution":"import math def binomial_coefficient(n, k): Calculate the number of ways to choose k items from n items without repetition and order. Parameters: n (int): The total number of items. k (int): The number of items to choose. Returns: int: The number of ways to choose k items from n items. if k > n or n < 0 or k < 0: return 0 return math.comb(n, k)"},{"question":"Write a function to merge two sorted linked lists and return it as a new sorted linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merges two sorted linked lists and returns the head of the new sorted linked list. Parameters: - l1: ListNode, the head of the first sorted linked list. - l2: ListNode, the head of the second sorted linked list. Returns: - ListNode, the head of the merged sorted linked list. # Create a dummy node to serve as the start of the merged list. dummy = ListNode() current = dummy # Traverse both lists and merge them based on their values. while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If one of the lists is exhausted, append the other list. if l1: current.next = l1 elif l2: current.next = l2 # Return the next node of the dummy node, which is the head of the merged list. return dummy.next"},{"question":"Write a function to reverse a string without using the \`reverse()\` function or slicing. You should only use basic string operations and loops.","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to check if a given string contains only alphanumeric characters (letters and numbers). The function should return a boolean value indicating whether the string is alphanumeric or not.","solution":"def is_alphanumeric(s): Checks if the string contains only alphanumeric characters (letters and numbers). Args: s (str): The input string. Returns: bool: True if the string is alphanumeric, False otherwise. return s.isalnum()"},{"question":"Write a function to calculate the total number of ways to divide a set of \`n\` distinct items into \`k\` non-empty subsets.","solution":"def stirling_number_of_second_kind(n, k): if k == 0 and n == 0: return 1 elif k == 0 or n == 0: return 0 else: memo = [[0 for _ in range(k + 1)] for _ in range(n + 1)] memo[0][0] = 1 for i in range(1, n + 1): for j in range(1, k + 1): memo[i][j] = j * memo[i - 1][j] + memo[i - 1][j - 1] return memo[n][k]"},{"question":"Write a function to sort a list of integers using the quicksort algorithm in Python. The function should be able to handle a list of integers and return a sorted list.","solution":"def quicksort(arr): Sorts a list of integers using the quicksort algorithm. Parameters: arr (list): The list of integers to be sorted. Returns: list: The sorted list of integers. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to calculate the factorial of a given number \`n\`. The function should be named \`calculate_factorial\` and it should take a single integer argument \`n\`. The factorial of a number is the product of all positive integers less than or equal to \`n\`. For example, the factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. If \`n\` is 0, the factorial is defined as 1. Include a check function to verify the correctness of your solution with provided data points.","solution":"def calculate_factorial(n): Returns the factorial of the given number n. Factorial of n is the product of all positive integers less than or equal to n. Factorial of 0 is defined as 1. :param n: int, the number for which to compute the factorial :return: int, the factorial of the given number if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") factorial = 1 for i in range(1, n + 1): factorial *= i return factorial"},{"question":"Write a function to find the sum of all the unique elements in a given list of integers.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in the given list. from collections import Counter element_count = Counter(lst) unique_elements_sum = sum(el for el, count in element_count.items() if count == 1) return unique_elements_sum"},{"question":"Write a function to convert a binary string to its decimal equivalent. The function should take a single string argument \`binary_str\` which represents the binary number. The function should return the decimal equivalent as an integer.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. Parameters: binary_str (str): the binary string to be converted Returns: int: the decimal equivalent of the binary string return int(binary_str, 2)"},{"question":"Write a function to calculate the factorial of a given number. For example, the factorial of 5 (denoted as 5!) is 120, which is 5 * 4 * 3 * 2 * 1. The function should be named \`factorial\` and accept an integer as input.","solution":"def factorial(n): Returns the factorial of a given number n. :param n: Integer, the number for which to calculate the factorial. :return: Integer, the factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to find the maximum and minimum value in an array of numbers.","solution":"def find_max_and_min(arr): Returns the maximum and minimum value in an array of numbers. if not arr: return None, None max_val = arr[0] min_val = arr[0] for num in arr[1:]: if num > max_val: max_val = num if num < min_val: min_val = num return max_val, min_val"},{"question":"Write a function to implement preorder traversal of a Binary Search Tree (BST). The function should take the root of the BST as input and return a list of the values in preorder traversal order.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def preorder_traversal(root): Performs a preorder traversal of a binary search tree. Args: root (TreeNode): The root node of the binary search tree. Returns: List[int]: The list of values in preorder traversal order. result = [] def traverse(node): if node: result.append(node.val) # Visit the root traverse(node.left) # Traverse the left subtree traverse(node.right) # Traverse the right subtree traverse(root) return result"},{"question":"Write a function to remove duplicate numbers from a given array of integers. The solution should be designed to have a time complexity of O(n) and a space complexity of O(n), where n is the number of elements in the array.","solution":"def remove_duplicates(arr): Remove duplicate numbers from a given array of integers. Args: arr (list): List of integers. Returns: list: A list of integers with duplicates removed, maintaining the original order. seen = set() result = [] for number in arr: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"Write a function to sort an array of integers in ascending order using a custom sorting algorithm. The function should use the Bubble Sort algorithm. Bubble Sort is a simple comparison-based algorithm that repeatedly steps through the list, compares adjacent elements in pairs and swaps them if they are in the wrong order. This process is repeated until the list is sorted. The function should take an array of integers as input and return the sorted array.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble Sort algorithm. Args: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers in ascending order. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already sorted for j in range(0, n - i - 1): # Traverse the array from 0 to n - i - 1 # Swap if the element found is greater than the next element if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a function to calculate the sum of all elements in an array of integers. The function should take an array as an argument and return the sum of all its elements. If the array is empty, the function should return 0.","solution":"def sum_array(arr): Returns the sum of all elements in the array. If the array is empty, returns 0. return sum(arr)"},{"question":"Write a function to find the first even prime number in a list of integers. If there is no even prime, return -1. An even prime number is a prime number that is even.","solution":"def first_even_prime(lst): Returns the first even prime number in the list. If there is no even prime, return -1. for num in lst: if num == 2: # 2 is the only even prime number return 2 return -1"},{"question":"Write a function to find the maximum sum of a subarray within a given array. The function should return the maximum sum and the indices of the subarray that sums to this maximum value. If there are multiple subarrays with the same maximum sum, return the indices of the first such subarray.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray within a given array. Returns the maximum sum and the indices of the subarray that sums to this maximum value. if not nums: return 0, -1, -1 max_sum = current_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Write a function to find the index of a target value in a sorted array. If the target is not found, return the index where it would be if it were inserted in order. Use dynamic programming to solve this problem.","solution":"def search_insert(nums, target): Returns the index of the target in the sorted array nums. If the target is not present, returns the index where it should be inserted. low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] == target: return mid elif nums[mid] < target: low = mid + 1 else: high = mid - 1 return low"},{"question":"Write a function to calculate the Lowest Common Multiple (LCM) of two positive integers in Python. The function should handle cases where the input integers are less than or equal to 1000. Additionally, ensure that the function can process both prime and composite numbers.","solution":"def gcd(a, b): Calculate the Greatest Common Divisor (GCD) of two numbers using the Euclidean algorithm. while b: a, b = b, a % b return a def lcm(a, b): Calculate the Lowest Common Multiple (LCM) of two positive integers. return abs(a * b) // gcd(a, b)"},{"question":"Write a function to calculate the factorial of a given number n. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It is defined as n! = n * (n-1) * (n-2) * ... * 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120. The function should be implemented using recursion.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using recursion. if n < 0: raise ValueError(\\"n should be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to determine the number of unique characters in a given string \`s\`.","solution":"def unique_characters_count(s): Returns the number of unique characters in the string s. return len(set(s))"},{"question":"Write a function to reverse a given integer. If reversing the integer causes the value to go outside the 32-bit signed integer range [-2^31, 2^31-1], then return 0.","solution":"def reverse_integer(x): Reverses the given integer. If the reversed integer is outside the 32-bit signed integer range [-2^31, 2^31-1], returns 0. # Define 32-bit signed integer range INT_MAX = 2**31 - 1 INT_MIN = -2**31 # Handle negative numbers sign = -1 if x < 0 else 1 x *= sign # Reverse the integer reversed_x = 0 while x != 0: pop = x % 10 x //= 10 # Check for overflow/underflow conditions if (reversed_x > INT_MAX // 10) or (reversed_x == INT_MAX // 10 and pop > INT_MAX % 10): return 0 reversed_x = reversed_x * 10 + pop return sign * reversed_x"},{"question":"Write a function to return the maximum integer value in an array of integers. The function should handle edge cases, such as what happens if the array is empty?","solution":"def find_max_in_array(arr): Returns the maximum integer value in the array. If the array is empty, return None. Parameters: arr (list): A list of integers Returns: int or None: The maximum integer value in the list or None if the list is empty if not arr: return None return max(arr)"},{"question":"Write a function to find the nth Fibonacci number using recursion and dynamic programming.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion and memoization. :param n: The position of the Fibonacci number to be calculated. :param memo: A dictionary to store previously calculated Fibonacci numbers. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to find the shortest path in a binary matrix from the top-left corner to the bottom-right corner. The matrix contains 0s and 1s, where 0 represents a passable cell and 1 represents an obstacle. You can only move either right or down at any point in time.","solution":"from collections import deque def shortest_path_binary_matrix(matrix): Finds the shortest path in a binary matrix from the top-left corner to the bottom-right corner. You can move right or down. Parameters: matrix (List[List[int]]): 2D list representing the matrix where 0 is passable and 1 is an obstacle. Returns: int: The length of the shortest path, or -1 if no such path exists. if not matrix or matrix[0][0] == 1 or matrix[-1][-1] == 1: return -1 rows, cols = len(matrix), len(matrix[0]) queue = deque([(0, 0, 1)]) # (row, col, distance) directions = [(0, 1), (1, 0)] while queue: row, col, dist = queue.popleft() if row == rows - 1 and col == cols - 1: return dist for d_row, d_col in directions: next_row, next_col = row + d_row, col + d_col if 0 <= next_row < rows and 0 <= next_col < cols and matrix[next_row][next_col] == 0: matrix[next_row][next_col] = 1 # Mark as visited queue.append((next_row, next_col, dist + 1)) return -1"},{"question":"Write a function to count the number of even digits in a given number. If the number has no even digits, the function should return -1.","solution":"def count_even_digits(number): Returns the count of even digits in the given number. If the number has no even digits, returns -1. :param number: Int :return: Int # Convert the number to a string to iterate over each digit number_str = str(abs(number)) # use abs() to handle negative numbers # Initialize count for even digits even_count = 0 # List of even digits even_digits = {'0', '2', '4', '6', '8'} # Count even digits for digit in number_str: if digit in even_digits: even_count += 1 # Return -1 if no even digits were found if even_count == 0: return -1 return even_count"},{"question":"Write a function to find the longest word in a given sentence. If there are multiple words with the same maximum length, return the one that appears first in the sentence.","solution":"def longest_word(sentence): Returns the longest word from the given sentence. If there are multiple words with the same length, return the first one. words = sentence.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a function to calculate the number of ways you can make change for a given amount using a set of given coin denominations.","solution":"def count_change(coins, amount): Returns the number of ways to make change for the given amount using the given set of coin denominations. Parameters: coins (list of int): Available coin denominations amount (int): The amount to make change for Returns: int: Number of ways to make change dp = [0] * (amount + 1) dp[0] = 1 # There's one way to make 0 amount: use no coins. for coin in coins: for x in range(coin, amount + 1): dp[x] += dp[x - coin] return dp[amount]"},{"question":"Write a function to convert a number from Decimal to Binary format without using the built-in \`bin\` function. The function should take an integer as input and return a string representing the binary format of the input number.","solution":"def decimal_to_binary(n): Converts a decimal number n to binary format. Parameters: n (int): Decimal integer to be converted Returns: str: Binary representation of n if n == 0: return \\"0\\" binary = \\"\\" is_negative = n < 0 if is_negative: n = -n while n > 0: binary = str(n % 2) + binary n = n // 2 if is_negative: binary = '-' + binary return binary"},{"question":"Write a function to compute the sum of the first \`n\` Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Your function should use recursion to calculate the sum, rather than storing the entire sequence.","solution":"def sum_fibonacci(n): Returns the sum of the first n Fibonacci numbers using recursion. def fib(n, memo={}): if n in memo: return memo[n] if n == 0: return 0 if n == 1: return 1 memo[n] = fib(n-1, memo) + fib(n-2, memo) return memo[n] def sum_fib(n): if n == 0: return 0 return fib(n-1) + sum_fib(n-1) return sum_fib(n)"},{"question":"Write a function to count the number of prime numbers less than a given non-negative integer \`n\`. For example, if the input is \`n = 10\`, the output should be \`4\` because there are 4 prime numbers (2, 3, 5, 7) less than 10.","solution":"def count_primes(n): Returns the number of prime numbers less than a given non-negative integer n. if n <= 2: return 0 is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not primes p = 2 while p * p < n: if is_prime[p]: for i in range(p * p, n, p): is_prime[i] = False p += 1 return sum(is_prime)"},{"question":"Write a function to check if two strings are anagrams of each other. Anagrams are words or phrases that contain the same characters in a different order.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Write a function to find the union of two sorted arrays. The function should be able to handle different scenarios such as arrays with different sizes, repeated numbers, and arrays that are not sorted. If the arrays are not sorted, the function should convert them to sorted before finding the union. Additionally, the function should return the union in a sorted order without duplicates.","solution":"def union_sorted_arrays(arr1, arr2): Finds the union of two arrays, sorts them, and returns the union in a sorted order without duplicates. # Sort the arrays arr1 = sorted(arr1) arr2 = sorted(arr2) # Initialize the union array and pointers union_arr = [] i, j = 0, 0 # Traverse both arrays and add elements to the union array without duplicates while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: if not union_arr or union_arr[-1] != arr1[i]: # Check for duplicates union_arr.append(arr1[i]) i += 1 elif arr1[i] > arr2[j]: if not union_arr or union_arr[-1] != arr2[j]: union_arr.append(arr2[j]) j += 1 else: if not union_arr or union_arr[-1] != arr1[i]: union_arr.append(arr1[i]) i += 1 j += 1 # Add remaining elements while i < len(arr1): if not union_arr or union_arr[-1] != arr1[i]: union_arr.append(arr1[i]) i += 1 while j < len(arr2): if not union_arr or union_arr[-1] != arr2[j]: union_arr.append(arr2[j]) j += 1 return union_arr"},{"question":"Write a function to remove all consecutive duplicates from a given string. Example: \\"aabcccddd\\" should result in \\"abd\\".","solution":"def remove_consecutive_duplicates(s): Removes all consecutive duplicate characters from the given string. :param s: Input string :return: String with consecutive duplicates removed if not s: return s result = [s[0]] # Start with the first character # Loop through the string starting from the second character for char in s[1:]: if char != result[-1]: # Compare with the last character in the result result.append(char) return ''.join(result)"},{"question":"Write a function to solve the Sudoku puzzle. The function should take a 2D list representing the Sudoku puzzle and solve it in place.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle in place. :param board: List[List[int]] -- a 2D list representing the Sudoku board; empty cells are represented by 0 def is_valid(board, row, col, num): # Check if the number is not repeated in the current row/col/3x3 subgrid for i in range(9): if board[row][i] == num or board[i][col] == num: return False if board[row//3*3 + i//3][col//3*3 + i%3] == num: return False return True def solve(): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 return False return True solve()"},{"question":"Write a function to find the lowest common ancestor (LCA) of two nodes in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowestCommonAncestor(root, p, q): Returns the lowest common ancestor (LCA) of two nodes in a binary search tree. Args: root (TreeNode): The root of the binary search tree. p (TreeNode): The first node. q (TreeNode): The second node. Returns: TreeNode: The LCA of nodes p and q. current = root while current: if p.val < current.val and q.val < current.val: current = current.left elif p.val > current.val and q.val > current.val: current = current.right else: return current"},{"question":"Write a function to calculate the factorial of a given number n using recursion. The function should be designed to avoid stack overflow errors for large values of n by using a tail-recursive approach. Scalar data is being used for this function, and subclasses are not allowed.","solution":"def factorial_tail_recursive(n, accumulator=1): Tail-recursive approach to calculate factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return accumulator else: return factorial_tail_recursive(n-1, n*accumulator)"},{"question":"Write a function to get all the odd numbers from a given list and return them in a new list.","solution":"def get_odd_numbers(lst): Returns a list of odd numbers from the given list. Parameters: lst (list): The list from which to extract odd numbers. Returns: list: A list containing only the odd numbers from the given list. return [num for num in lst if num % 2 != 0]"},{"question":"Write a function to calculate the sum of all numbers in a 2D array.","solution":"def sum_2d_array(arr): Returns the sum of all numbers in a 2D array. :param arr: List of List of numbers :return: Sum of all numbers. total_sum = 0 for row in arr: total_sum += sum(row) return total_sum"},{"question":"Write a function to convert a string into an integer in Python. The function should handle both positive and negative numbers, as well as leading zeros.","solution":"def string_to_integer(s): Converts a string to an integer, handling both positive and negative numbers and leading zeros. try: return int(s) except ValueError: raise ValueError(\\"Invalid input: the string does not represent a valid integer\\")"},{"question":"Write a function to find all prime numbers in a given range using an efficient algorithm. What are some common algorithms for finding prime numbers?","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [True] * (n + 1) primes[0], primes[1] = False, False # 0 and 1 are not prime numbers p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 return [p for p in range(n + 1) if primes[p]]"},{"question":"Write a function to determine if a string has all unique characters. You may not use any additional data structures besides a boolean array.","solution":"def all_unique_characters(s: str) -> bool: Determines if a string has all unique characters. if len(s) > 128: # Assuming ASCII character set return False char_set = [False] * 128 # Boolean array to keep track of characters seen for char in s: ascii_val = ord(char) if char_set[ascii_val]: return False char_set[ascii_val] = True return True"},{"question":"Write a function to find the factorial of a number in Python. However, this function should handle very large numbers efficiently and should use Python's arbitrary precision integers.","solution":"def factorial(n): Returns the factorial of a given number n. Uses Python's built-in arbitrary precision integers. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n+1): result *= i return result"},{"question":"Write a function to generate the Fibonacci sequence up to a given number \`n\`, where \`n\` is the maximum value in the sequence. The function should return the Fibonacci sequence as a list of numbers.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to a given number \`n\`. Args: n (int): The maximum value in the sequence. Returns: list: A list containing the Fibonacci sequence up to \`n\`. if n < 0: return [] sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to return the length of the shortest path in a 2D grid where each cell can be either 0 or 1. 0 represents an empty space, and 1 represents a wall. The path can only move through empty spaces. You can start from any empty space and move in four directions: up, down, left, and right.","solution":"from collections import deque def shortest_path_in_grid(grid): Returns the length of the shortest path in a 2D grid from any empty space to any other empty space. 0 represents an empty space, and 1 represents a wall. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) # Helper function for BFS def bfs(start_row, start_col): visited = [[False] * cols for _ in range(rows)] queue = deque([(start_row, start_col, 0)]) # (row, col, distance) visited[start_row][start_col] = True possible_moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: row, col, dist = queue.popleft() # Check for adjacent cells for move in possible_moves: new_row, new_col = row + move[0], col + move[1] if 0 <= new_row < rows and 0 <= new_col < cols and not visited[new_row][new_col] and grid[new_row][new_col] == 0: return dist + 1 # Found the shortest path if 0 <= new_row < rows and 0 <= new_col < cols and not visited[new_row][new_col] and grid[new_row][new_col] == 0: queue.append((new_row, new_col, dist + 1)) visited[new_row][new_col] = True return -1 min_path_length = float('inf') # Start BFS from each empty cell for i in range(rows): for j in range(cols): if grid[i][j] == 0: path_length = bfs(i, j) if path_length != -1: min_path_length = min(min_path_length, path_length) return min_path_length if min_path_length != float('inf') else -1"},{"question":"Write a function to sort an array using the insertion sort algorithm.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. Params: arr (list): The list to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to take in two arrays of numbers and return a new array containing only the numbers that appear in both arrays.","solution":"def intersection(arr1, arr2): Returns a new array containing only the numbers that appear in both arrays. set1 = set(arr1) set2 = set(arr2) result = set1 & set2 return list(result)"},{"question":"Write a function to sum the digits of a given number. If the sum of the digits is a single digit, return the sum. If the sum is a multi-digit number, repeatedly add the digits until a single digit is obtained. This is known as the digital root of a number. For example, the digital root of 123 is 6 (1+2+3=6).","solution":"def digital_root(n): Calculate the digital root of a given number. Args: n (int): The number whose digital root is to be calculated. Returns: int: The digital root of the number. while n >= 10: n = sum(map(int, str(n))) return n"},{"question":"Write a function to find the intersection point of two singly linked lists. If the two linked lists have no intersection at all, return null.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def get_intersection_node(headA, headB): Returns the intersection node if two linked lists intersect, otherwise returns None. if not headA or not headB: return None pointer_a = headA pointer_b = headB while pointer_a is not pointer_b: pointer_a = pointer_a.next if pointer_a else headB pointer_b = pointer_b.next if pointer_b else headA return pointer_a"},{"question":"Write a function to generate all possible subsequences of a string using backtracking.","solution":"def generate_subsequences(s): Generates all possible subsequences of the string s using backtracking. def backtrack(start, path): subsequences.append(\\"\\".join(path)) for i in range(start, len(s)): path.append(s[i]) backtrack(i + 1, path) path.pop() subsequences = [] backtrack(0, []) return subsequences"},{"question":"Write a function to calculate the maximum profit that can be generated from a single buy and sell of a stock, given the stock prices on different days.","solution":"def max_profit(prices): Calculate the maximum profit that can be achieved from a single buy and sell operation. :param prices: List of integers representing stock prices on different days :return: Maximum profit that can be achieved if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) current_profit = price - min_price max_profit = max(max_profit, current_profit) return max_profit"},{"question":"Write a function to reverse a linked list in Python without using any extra space. The function should return the new head of the reversed linked list. If the linked list is empty or contains only one element, it should return the list as is.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the given linked list. Args: head (ListNode): The head node of the linked list. Returns: ListNode: New head node of the reversed linked list. prev = None current = head while current: next_node = current.next # Store the next node current.next = prev # Reverse the link prev = current # Move prev to current current = next_node # Move to the next node in the list return prev"},{"question":"Write a function to calculate the sum of the first N natural numbers where N is a user input. The function should take an integer N as input and return the sum. If N is less than or equal to zero, the function should return -1 to indicate an invalid input.","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers. If N is less than or equal to zero, returns -1 to indicate invalid input. if N <= 0: return -1 return N * (N + 1) // 2"},{"question":"Write a function to find the indices of two numbers in an array such that they add up to a specific target number.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. Parameters: nums (List[int]): List of integers target (int): Target sum Returns: List[int]: Indices of the two numbers num_to_index = {} for index, num in enumerate(nums): difference = target - num if difference in num_to_index: return [num_to_index[difference], index] num_to_index[num] = index return []"},{"question":"Write a function to generate n-ary Trees.","solution":"class NaryTreeNode: def __init__(self, value): self.value = value self.children = [] def add_child(self, child_node): self.children.append(child_node) def generate_nary_tree(root_value, children_tuples): Generates an n-ary tree from the root value and children tuples. :param root_value: The value of the root element. :param children_tuples: A tuple of tuples representing the children (Value, [Children]). Example: (1, [(2, []), (3, [(4, [])])]) :return: The root node of the n-ary tree root = NaryTreeNode(root_value) def _add_children(node, children_info): for child_value, grand_children in children_info: child_node = NaryTreeNode(child_value) node.add_child(child_node) _add_children(child_node, grand_children) _add_children(root, children_tuples) return root"},{"question":"Write a function to remove the nth node from the end of a linked list and return the head of the modified list. The function should be implemented in Python.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_nth_from_end(head, n): Removes the nth node from the end of the linked list and returns the head of the modified list. # Create a dummy node that points to the head dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Move the first pointer so it is n+1 nodes ahead of the second for _ in range(n + 1): first = first.next # Move both pointers until the first pointer reaches the end while first is not None: first = first.next second = second.next # Remove the nth node from the end second.next = second.next.next return dummy.next"},{"question":"Write a function to find the total area of a rectangle given its width and height.","solution":"def rectangle_area(width, height): Returns the area of a rectangle given its width and height. return width * height"},{"question":"Write a function to traverse a binary tree using depth-first search. Please define the function signature and provide a clear example implementation in Python.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def dfs_traversal(root): Traverse a binary tree using depth-first search (DFS). :param root: TreeNode, the root of the binary tree :return: list, the values of the nodes visited in DFS order result = [] def dfs(node): if node is None: return result.append(node.val) dfs(node.left) dfs(node.right) dfs(root) return result"},{"question":"Write a function to find the maximum number in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_in_bst(root): Finds the maximum number in a binary search tree. if not root: return None # If the tree is empty, return None # In a BST, the maximum value is found in the rightmost node. current = root while current.right: current = current.right return current.value"},{"question":"Write a function to calculate the sum of all the numbers in a given list. If the list is empty, return 0. Ensure the function is efficient and handles negative numbers as well.","solution":"def sum_of_list(numbers): Returns the sum of all the numbers in the given list. If the list is empty, returns 0. return sum(numbers) if numbers else 0"},{"question":"Write a function to find the next smallest palindrome of a given number. For example, the next smallest palindrome of 123 is 131 since 131 is a palindrome and smaller than 222 (the next number after 123).","solution":"def next_smallest_palindrome(num): Returns the next smallest palindrome greater than the given number. if num < 0: raise ValueError(\\"Number must be non-negative\\") def is_palindrome(n): return str(n) == str(n)[::-1] num += 1 while not is_palindrome(num): num += 1 return num"},{"question":"Write a function to sort a string based on the frequency of the characters in it. If multiple characters have the same frequency, sort them in lexicographical order.","solution":"from collections import Counter def sort_by_frequency(s): Sorts the string \`s\` based on the frequency of the characters in it. If multiple characters have the same frequency, sorts them in lexicographical order. # Count frequency of each character freq = Counter(s) # Sort based on frequency first (-freq[k] for descending), then lexicographical order (k for ascending) sorted_chars = sorted(freq.keys(), key=lambda k: (-freq[k], k)) # Construct the result string result = ''.join([char * freq[char] for char in sorted_chars]) return result"},{"question":"Write a function to implement a depth-first search (DFS) traversal on a binary tree. Consider the tree is represented using a class structure with each node having a value, a left child, and a right child. The output should be an array containing the values of nodes visited during the DFS traversal. The traversal should follow the order: root, left subtree, right subtree (pre-order traversal).","solution":"class TreeNode: Class representing a node in a binary tree. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_preorder(root): Performs a depth-first search (DFS) pre-order traversal on a binary tree. Parameters: root (TreeNode): the root node of the binary tree Returns: List[int]: a list of integers representing the node values in DFS pre-order traversal order if not root: return [] result = [] stack = [root] while stack: node = stack.pop() result.append(node.value) if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"Write a function to find the maximum of three numbers in Python. You need to do this without using the built-in max() function and pehaps utilizing other Python functions or methods.","solution":"def maximum_of_three(a, b, c): Returns the maximum of three numbers a, b, and c. # Initialize the maximum to the first number max_val = a # Compare max_val with the second number if b > max_val: max_val = b # Compare max_val with the third number if c > max_val: max_val = c return max_val"},{"question":"Write a function to check if a given number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. To simplify, consider only odd numbers for checking beyond 2, as even numbers greater than 2 are not prime.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to check if all the characters in a string are unique. You need to implement the solution in Python and use a dictionary to track the occurrence of each character.","solution":"def all_unique_characters(s): Returns True if all characters in the input string 's' are unique, False otherwise. char_dict = {} for char in s: if char in char_dict: return False char_dict[char] = True return True"},{"question":"Write a function to count the average of all prime numbers up to a given number. In Python.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def average_prime_numbers(n): Returns the average of all prime numbers up to a given number n. primes = [i for i in range(2, n + 1) if is_prime(i)] if not primes: return 0 return sum(primes) / len(primes)"},{"question":"Write a function to find the number of occurrences of a specific substring in a given string, considering both case-sensitive and case-insensitive searches. Provide a solution that efficiently handles large strings and multiple queries.","solution":"def count_substring_occurrences(s, substring, case_sensitive=True): Returns the number of occurrences of a substring within a string. Parameters: s (str): The string to search within. substring (str): The substring to search for. case_sensitive (bool): If True, performs a case-sensitive search. If False, performs a case-insensitive search. Default is True. Returns: int: The number of times the substring occurs in the string. if not case_sensitive: s = s.lower() substring = substring.lower() return s.count(substring)"},{"question":"Write a function to calculate the total number of unique characters in a string, ignoring case sensitivity and considering only alphabetic characters. For example, in the string \\"Hello, World!\\", the function should return 7.","solution":"def unique_characters_count(s): Returns the total number of unique alphabetic characters in the string, ignoring case sensitivity and considering only alphabetic characters. # Convert string to lower case and filter only alphabetic characters filtered_chars = filter(str.isalpha, s.lower()) # Use set to find unique characters unique_chars = set(filtered_chars) return len(unique_chars)"},{"question":"Write a function to convert an integer to a hexadecimal string in Python.","solution":"def int_to_hex(n): Convert an integer n to a hexadecimal string. Parameters: n (int): The integer to be converted. Returns: str: The hexadecimal string representation of the integer. if not isinstance(n, int): raise ValueError(\\"Input should be an integer\\") return hex(n)"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This is a classic problem known as Kadane's algorithm. Your function should be efficient and handle all possible edge cases.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Args: nums (list of int): The input one-dimensional array of numbers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to copy a string in C, not using the built-in \`strcpy()\`, \`strncpy()\`, or \`strncat()\` functions.","solution":"def string_copy(source): Copies a string from source to a new destination. Parameters: source (str): The source string to be copied. Returns: str: The copied string. destination = [''] * (len(source) + 1) # Create a list with the same length as the source +1 for null character i = 0 while i < len(source): destination[i] = source[i] i += 1 destination[i] = '0' # Add the null terminator at the end return ''.join(destination[:-1]) # Convert list to string excluding the final null terminator"},{"question":"Write a function to find the middle element of a linked list. The function should return the value of the middle element. If the linked list has an even number of elements, return the value of the second middle element.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle_element(head): Finds the middle element of a linked list or the second middle element if the list length is even. :param head: ListNode, the head node of the linked list :return: value of the middle element slow = head fast = head # Traverse the list with two pointers, fast and slow. # Fast pointer moves twice as fast as slow, so when fast reaches the end, # slow will be at the middle. while fast and fast.next: slow = slow.next fast = fast.next.next return slow.value if slow else None"},{"question":"Write a function to find the maximum value in an integer array. What should be the function's signature and how can we test it using a checkpoint function?","solution":"def find_max(arr): Returns the maximum value in an integer array. :param arr: List[int] - list of integers :return: int - the maximum value in the array if not arr: raise ValueError(\\"The array should not be empty\\") max_val = arr[0] for num in arr: if num > max_val: max_val = num return max_val"},{"question":"Write a function to find the maximum product of two integers in an array after subtracting one from each element. The array will contain positive integers and will have at least two elements.","solution":"def max_product_after_subtracting_one(arr): Find the maximum product of two integers in an array after subtracting one from each element. :param arr: List of positive integers, with at least two elements :return: Maximum product after subtracting one from each element # Sort the array in descending order arr.sort(reverse=True) # Since the array is sorted in descending order, the two largest numbers are at the front max1 = arr[0] - 1 max2 = arr[1] - 1 # Return the product of the two largest numbers after subtracting one from each return max1 * max2"},{"question":"Write a function to write an array of numbers to a text file in a specified directory, with an option to append to an existing file or overwrite it.","solution":"import os def write_array_to_file(array, directory, filename, mode='w'): Writes an array of numbers to a text file in a specified directory. Parameters: array (list): List of numbers to write to the file. directory (str): Directory where the file will be created. filename (str): Name of the file. mode (str): Mode in which file is opened. 'a' for append, 'w' for write/overwrite. Raises: ValueError: If mode is not 'a' or 'w'. if mode not in ['a', 'w']: raise ValueError(\\"Mode should be 'a' for append or 'w' for overwrite\\") if not os.path.exists(directory): os.makedirs(directory) file_path = os.path.join(directory, filename) with open(file_path, mode) as file: for number in array: file.write(f\\"{number}n\\")"},{"question":"Write a function to find the maximum difference between the price of a stock on two different dates if you buy on one date and sell on another. The function should take a list of integers representing daily stock prices and return the maximum profit that can be achieved from a single buy and sell action.","solution":"def max_profit(prices): Finds the maximum profit achievable from one buy and sell action. Parameters: prices (list): A list of integers representing daily stock prices. Returns: int: The maximum profit. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price max_profit = max(max_profit, profit) min_price = min(min_price, price) return max_profit"},{"question":"Write a function to sort a linked list in O(n log n) time complexity. You can use a divide and conquer approach. The function should take the head of a linked list as input and return the sorted head of the linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def sortList(head): # Base case: if the list is empty or has a single node, it's already sorted if not head or not head.next: return head # Split the list into two halves using the slow and fast pointer technique slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None # Recursively sort both halves left = sortList(head) right = sortList(mid) # Merge the sorted halves return merge(left, right) def merge(l1, l2): dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 or l2 return dummy.next"},{"question":"Write a function to find the average of all the integers in a given list of integers. If the list is empty, the function should return \`None\`.","solution":"def average_of_list(numbers): Returns the average of all the integers in the list. If the list is empty, returns None. :param numbers: List of integers :return: Float or None if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Write a function to find the length of the longest sequence of consecutive numbers in a given array. The array may contain duplicates and negative numbers. How would you approach this problem using Python?","solution":"def longest_consecutive_sequence(nums): Finds the length of the longest sequence of consecutive numbers in the given array. Parameters: nums (List[int]): The list of integers which may contain duplicates and negative numbers. Returns: int: The length of the longest consecutive sequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # Only start counting sequence if \`num\` is the start of the sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function to calculate the greatest common divisor (GCD) of two numbers. The function should take two integers as input and return the GCD of these numbers. Additionally, provide a brief explanation of the algorithm used in your solution.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm. The Euclidean algorithm is based on the principle that the GCD of two numbers also divides their difference. The algorithm works as follows: - If b is zero, then GCD(a, b) is a. - Otherwise, the GCD of a and b is the same as the GCD of b and a % b (remainder of a divided by b). Parameters: a (int): The first integer b (int): The second integer Returns: int: The greatest common divisor of a and b while b != 0: a, b = b, a % b return a"},{"question":"Write a function to test if a number is divisible by 5. If the number is divisible by 5, return \\"Divisible by 5\\". If not, return \\"Not divisible by 5\\".","solution":"def is_divisible_by_5(n): Checks if a given number n is divisible by 5. Args: n (int): The number to be checked. Returns: str: \\"Divisible by 5\\" if n is divisible by 5, otherwise \\"Not divisible by 5\\". if n % 5 == 0: return \\"Divisible by 5\\" else: return \\"Not divisible by 5\\""},{"question":"Write a function to stretch an image by a factor of 2 in both width and height. This means that each pixel in the original image should be repeated twice, both horizontally and vertically, in the new image.","solution":"def stretch_image(image): Stretches the image by a factor of 2 in both width and height. Args: - image (list of list of int): 2D list representing the image. Returns: - list of list of int: New 2D list representing the stretched image. height = len(image) width = len(image[0]) # Create new image with doubled dimensions new_image = [[0 for _ in range(width * 2)] for _ in range(height * 2)] for i in range(height): for j in range(width): # Repeat each pixel at the positions (2i, 2j), (2i, 2j+1), (2i+1, 2j), (2i+1, 2j+1) new_image[2 * i][2 * j] = image[i][j] new_image[2 * i][2 * j + 1] = image[i][j] new_image[2 * i + 1][2 * j] = image[i][j] new_image[2 * i + 1][2 * j + 1] = image[i][j] return new_image"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This is a classic problem known as the \\"Maximum Subarray Problem\\". You can solve this using Kadane's Algorithm which runs in O(N) time.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers using Kadane's Algorithm. Args: nums (List[int]): The input list of numbers. Returns: int: The maximum sum of the contiguous subarray. if not nums: return 0 max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to calculate the total cost of an order based on the number of items and the price per item, and ensure the function can handle cases where the input is not a number.","solution":"def calculate_total_cost(num_items, price_per_item): Calculate the total cost of an order based on the number of items and the price per item. Returns \\"Invalid input\\" if num_items or price_per_item is not a number. Args: num_items (int/float): The number of items in the order. price_per_item (int/float): The price per item. Returns: float/str: The total cost or \\"Invalid input\\" if input is invalid. try: total_cost = float(num_items) * float(price_per_item) return total_cost if total_cost >= 0 else \\"Invalid input\\" except (ValueError, TypeError): return \\"Invalid input\\""},{"question":"Write a function to count the number of distinct characters in a given string. The function should handle both lowercase and uppercase letters as distinct characters.","solution":"def count_distinct_characters(s): Returns the count of distinct characters in the given string \`s\`. The function treats lowercase and uppercase letters as distinct characters. return len(set(s))"},{"question":"Write a function to calculate the total salary for an employee after adding a bonus. The bonus is calculated as 10% of the base salary. However, if the employee has been with the company for over 5 years, an additional 5% bonus is added.","solution":"def calculate_total_salary(base_salary, years_with_company): Calculate the total salary for an employee after adding the bonus. :param base_salary: The base salary of the employee. :param years_with_company: The number of years the employee has been with the company. :return: The total salary after adding the appropriate bonus. bonus_percentage = 0.10 # 10% basic bonus if years_with_company > 5: bonus_percentage += 0.05 # Additional 5% if over 5 years with the company bonus = base_salary * bonus_percentage total_salary = base_salary + bonus return total_salary"},{"question":"Write a function to find the minimum element in a given list of integers. If the list is empty, the function should return None.","solution":"def find_minimum(lst): Returns the minimum element in a given list of integers. If the list is empty, returns None. if not lst: return None return min(lst)"},{"question":"Write a function to get the N-th Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes like this: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on.","solution":"def fibonacci(n): Returns the N-th Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to calculate the square root of a positive number using the Newton-Raphson method. If the input number is negative, the function should return an error message.","solution":"def sqrt_newton_raphson(number, tolerance=1e-10): Calculate the square root of a positive number using the Newton-Raphson method. If the input number is negative, the function returns an error message. :param number: The number to find the square root of. :param tolerance: The tolerance level for the approximation. :return: The square root of the number or an error message if the input is negative. if number < 0: return \\"Error: Input number must be non-negative\\" if number == 0: return 0 guess = number / 2.0 while abs(guess * guess - number) > tolerance: guess = (guess + number / guess) / 2.0 return guess"},{"question":"Write a function to reverse a string using Python. But this time, use recursion instead of a loop. How can you do it in Python?","solution":"def reverse_string_recursive(s): Reverses a string using recursion. if len(s) == 0: return s else: return reverse_string_recursive(s[1:]) + s[0]"},{"question":"Write a function to check if all characters in a string are unique. You should consider both lower and upper case letters as unique. For example, string 'abcABC' has all unique characters.","solution":"def all_unique_chars(s): Returns True if all characters in the string s are unique, otherwise returns False. return len(s) == len(set(s))"},{"question":"Write a function to return the n-th Fibonacci number recursively. What is the time complexity of this function?","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) # The time complexity of this recursive Fibonacci function is O(2^n) due to the repeated calculations."},{"question":"Write a function to reverse the order of elements in a linked list. Given a linked list of integers, reverse it and return the head of the reversed list.","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the order of elements in a linked list. :param head: Node, the head of the linked list to be reversed :return: Node, the head of the reversed linked list prev = None current = head while current: next_node = current.next # Store next node current.next = prev # Reverse current node's pointer prev = current # Move pointers one position ahead current = next_node return prev"},{"question":"Write a function to calculate the sum of all divisors of a given number. The function should be efficient and work well for large numbers.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of a given number n. if n < 1: return 0 total = 0 sqrt_n = int(n**0.5) for i in range(1, sqrt_n + 1): if n % i == 0: total += i if i != n // i: total += n // i return total"},{"question":"Write a function to check if a given string contains only numeric characters.","solution":"def is_numeric(s): Returns True if the string s contains only numeric characters, otherwise returns False. return s.isdigit()"},{"question":"Write a function to convert a given integer to a binary string with a fixed length of 8. If the binary string is shorter than 8 characters, prepend zeros to the left. If it is longer, truncate it to 8 characters.","solution":"def int_to_fixed_length_binary(number): Converts an integer to an 8-character fixed-length binary string. :param number: Integer to convert. :return: An 8-character string representing the binary form of the input number. return bin(number & 0xff)[2:].zfill(8)"},{"question":"Write a function to multiply two numbers.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Write a function to check if the brackets in a given string are correctly matched.","solution":"def are_brackets_matched(s): Checks if the brackets in the input string are correctly matched. Args: s (str): The input string containing brackets. Returns: bool: True if the brackets are correctly matched, False otherwise. stack = [] bracket_map = {')': '(', ']': '[', '}': '{'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False return stack == []"},{"question":"Write a function to reverse an array in place without using any extra space.","solution":"def reverse_array(arr): Reverses the given list in place without using any extra space. left = 0 right = len(arr) - 1 while left < right: # Swap elements at left and right indices arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a function to calculate the factorial of a given number n using a for loop.","solution":"def factorial(n): Returns the factorial of a given number n using a for loop. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to generate the first n Fibonacci numbers. What should the function signature look like?","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has the constraint of not including the element causing the maximum sum to include zero. If the array length is less than or equal to one, return the maximum element of the array or 0 if the entire array sums to zero.","solution":"def max_subarray_sum_no_zero(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has the constraint of not including the element causing the maximum sum to include zero. if not nums: return 0 max_sum = -float('inf') current_sum = 0 for num in nums: if num == 0: current_sum = 0 else: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max(max_sum, 0)"},{"question":"Write a function to calculate the number of 1s in the binary representation of an integer. The function should take an integer as input and return the count of 1s.","solution":"def count_ones_in_binary(n): Returns the count of 1s in the binary representation of the integer n. :param n: Integer input to find the binary 1s count. :return: Integer count of 1s. return bin(n).count('1')"},{"question":"Write a function to determine if a given 2D grid represents a valid path. The path can only move to neighboring cells (up, down, left, right) and cannot go out of bounds. The function should return \`True\` if a valid path exists from the top-left cell to the bottom-right cell, otherwise return \`False\`.","solution":"def is_valid_path(grid): Determines if there is a valid path from the top-left to the bottom-right of a 2D grid. Args: grid (list of list of int): The 2D grid (0 for an empty cell, 1 for an obstacle). Returns: bool: True if a valid path exists, False otherwise. if not grid or not grid[0]: return False rows, cols = len(grid), len(grid[0]) def dfs(x, y): if x < 0 or y < 0 or x >= rows or y >= cols or grid[x][y] == 1: return False if x == rows - 1 and y == cols - 1: return True grid[x][y] = 1 # mark as visited # Explore neighboring cells if (dfs(x+1, y) or dfs(x-1, y) or dfs(x, y+1) or dfs(x, y-1)): return True grid[x][y] = 0 # unmark as visited return False return dfs(0, 0)"},{"question":"Write a function to check if a given array can be partitioned into two subsets such that the sum of elements in both subsets is equal. For example, given the array \`arr = [1, 5, 11, 5]\`, the function should return \`true\` because the array can be partitioned into \`[1, 5, 5]\` and \`[11]\` with equal sums. If no such partition exists, the function should return \`false\`.","solution":"def can_partition(nums): Returns True if the array can be partitioned into two subsets with equal sum, otherwise False. total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False # We need to find a subset with sum equal to half of total_sum target = total_sum // 2 n = len(nums) # Create a boolean DP array dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Write a function to find a subarray with a given sum in an array of non-negative integers (indexes start from 0).","solution":"def subarray_sum(array, target_sum): Finds a subarray with a given sum in an array of non-negative integers. Parameters: array (list of int): The input array of non-negative integers. target_sum (int): The target sum to be found in the subarray. Returns: tuple: A tuple (start_index, end_index) representing the indexes of the subarray that sums up to the target_sum. If no such subarray is found, return None. current_sum = 0 start = 0 for end, value in enumerate(array): current_sum += value while current_sum > target_sum and start <= end: current_sum -= array[start] start += 1 if current_sum == target_sum: return (start, end) return None"},{"question":"Write a function to calculate the factorial of a number using recursion. For example, the factorial of 5 is calculated as 5 * 4 * 3 * 2 * 1 = 120. How can I implement this in Python?","solution":"def factorial(n): Returns the factorial of a number using recursion. Parameters: n (int): The number to calculate the factorial for. Must be a non-negative integer. Returns: int: The factorial of the given number. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the maximum subarray sum within an array of integers that represents daily temperature recordings. The function should return the maximum sum of these temperatures. If there are multiple subarrays with the same maximum sum, return the one with the largest length. If there are still multiple such subarrays, return the one that starts earliest in the array.","solution":"def max_subarray_sum(temperatures): Function to find the maximum subarray sum within an array of integers. Parameters: temperatures (List[int]): List of integer temperatures. Returns: Tuple[int, List[int]]: A tuple with the maximum sum and the subarray with that sum. max_sum = float('-inf') current_sum = 0 start = 0 end = 0 temp_start = 0 for i, temperature in enumerate(temperatures): if current_sum <= 0: temp_start = i current_sum = temperature else: current_sum += temperature if (current_sum > max_sum) or (current_sum == max_sum and (i - temp_start > end - start)): max_sum = current_sum start = temp_start end = i return max_sum, temperatures[start:end + 1]"},{"question":"Write a function to reverse a string in Python. However, the function should reverse the string while ignoring the case sensitivity. For example, given the string \\"Hello, World!\\", the function should return \\"dlroW ,olleH\\".","solution":"def reverse_string_ignore_case(s): Reverse the string while ignoring the case sensitivity. Args: s (str): The input string. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to convert a string to title case. In title case, the first character of each word is uppercase, and the rest of the characters are lowercase. If the string is empty or consists only of spaces, it should return an empty string. A word is defined as a sequence of characters separated by spaces.","solution":"def to_title_case(s): Converts a string to title case. Parameters: s (str): The string to be converted. Returns: str: The title-cased string, or an empty string if the input is empty or consists only of spaces. # Trim whitespace and check if the string is empty s = s.strip() if not s: return \\"\\" # Split the string into words, convert each word to title case, and join them back with spaces words = s.split() title_cased_words = [word.capitalize() for word in words] return ' '.join(title_cased_words)"},{"question":"Write a function to print all possible subsets of a given set of distinct integers.","solution":"def subsets(nums): Returns all possible subsets of a given set of distinct integers. :param nums: List[int] - a list of distinct integers :return: List[List[int]] - a list of all possible subsets result = [] def backtrack(start=0, current=[]): result.append(current[:]) for i in range(start, len(nums)): # Include nums[i] current.append(nums[i]) backtrack(i + 1, current) # Exclude nums[i] current.pop() backtrack() return result"},{"question":"Write a function to compute the total surface area of a rectangular prism given its length, width, and height.","solution":"def total_surface_area(length, width, height): Computes the total surface area of a rectangular prism given its length, width, and height. Parameters: length (float): The length of the rectangular prism. width (float): The width of the rectangular prism. height (float): The height of the rectangular prism. Returns: float: The total surface area of the rectangular prism. return 2 * (length * width + width * height + height * length)"},{"question":"Write a function to count the number of 1 bits in the binary representation of a given number. The function should be able to handle both positive and negative integers, as well as zero.","solution":"def count_one_bits(num): Returns the number of '1' bits in the binary representation of the given number. Handles both positive and negative integers. # Convert to binary and strip the '0b' or '-0b' binary_rep = bin(num).replace('-0b', '').replace('0b', '') # Count the number of 1s in the binary representation return binary_rep.count('1')"},{"question":"Write a function to count the number of nodes in a binary tree that have exactly two children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_full_nodes(root): Counts the number of nodes in the binary tree that have exactly two children. :param TreeNode root: The root of the binary tree. :return: Number of nodes with exactly two children. :rtype: int if root is None: return 0 if root.left is not None and root.right is not None: return 1 + count_full_nodes(root.left) + count_full_nodes(root.right) else: return count_full_nodes(root.left) + count_full_nodes(root.right)"},{"question":"Write a function to evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). The function should take a list of strings representing the RPN expression and return an integer representing the result. Reverse Polish Notation (RPN) is a notation where every operator follows all of its operands. For example, the postfix notation \\"2 3 +\\" is equivalent to the infix notation \\"(2 + 3)\\".","solution":"def eval_rpn(tokens): Evaluates the value of an arithmetic expression in Reverse Polish Notation (RPN). :param tokens: List of strings representing the RPN expression :return: Integer representing the result of the RPN expression stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"Write a function to implement binary search on a sorted array. Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one.","solution":"def binary_search(arr, target): Performs a binary search for target in a sorted list arr. Args: arr: List of sorted elements. target: The element to search for in the list. Returns: The index of target in arr if found. Otherwise, returns -1. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] < target: low = mid + 1 elif arr[mid] > target: high = mid - 1 else: return mid return -1"},{"question":"Write a function to find the maximum depth of a binary search tree (BST). The function should take a pointer to the root node of the BST as input and return the maximum depth.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary search tree. :param root: TreeNode, the root of the binary search tree :return: int, maximum depth of the tree if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to find the maximum number in a given list. the list could contain both integers and floats. The function should correctly identify the maximum value regardless of the data type and return it.","solution":"def find_max(numbers): Returns the maximum number from a given list of numbers (integers and/or floats). Parameters: numbers (list): A list of numbers, which can be integers and/or floats. Returns: The maximum number from the list. if not numbers: raise ValueError(\\"The list is empty.\\") return max(numbers)"},{"question":"Write a function to find the maximum sum of a subarray within a given 2D array. The function should take the 2D array as input and return the maximum sum.","solution":"def max_2d_subarray_sum(arr): Finds the maximum sum of a subarray within a given 2D array. Parameters: arr (list of list of int): The 2D array of integers. Returns: int: The maximum sum of a subarray. if not arr or not arr[0]: return 0 rows = len(arr) cols = len(arr[0]) max_sum = float('-inf') for left in range(cols): temp_row_sum = [0] * rows for right in range(left, cols): for i in range(rows): temp_row_sum[i] += arr[i][right] max_sum = max(max_sum, kadane(temp_row_sum)) return max_sum def kadane(arr): Helper function to find the maximum sum of a subarray within a 1D array. Parameters: arr (list of int): The 1D array of integers. Returns: int: The maximum sum of a subarray. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to find and return the length of the longest zip code in a given string. A zip code is defined as a sequence of exactly five digits.","solution":"import re def longest_zip_code_length(s): Returns the length of the longest zip code in a given string. A zip code is defined as a sequence of exactly five digits. zip_codes = re.findall(r'bd{5}b', s) if zip_codes: return max(len(zip_code) for zip_code in zip_codes) return 0"},{"question":"Write a function to find the maximum profit that can be achieved from an array of stock prices on different days. The function should take in a list of prices and return the maximum profit.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from an array of stock prices. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to calculate the total number of steps required to climb a staircase with a given number of steps, where you can either take 1 or 2 steps at a time. This problem can be solved using dynamic programming.","solution":"def climb_stairs(n): Returns the number of distinct ways to climb a staircase with n steps, where you can either take 1 or 2 steps at a time. if n == 1: return 1 elif n == 2: return 2 # Initialize the base cases one_step_before = 2 two_steps_before = 1 # Calculate the number of ways to reach each step from 3 to n for i in range(3, n+1): current = one_step_before + two_steps_before two_steps_before = one_step_before one_step_before = current return one_step_before"},{"question":"Write a function to generate all the combinations of a string where every character is used exactly once. For example, given the string \\"abc\\", the function should return [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"].","solution":"from itertools import permutations def generate_combinations(string): Returns all the combinations of the string where every character is used exactly once. return [''.join(p) for p in permutations(string)]"},{"question":"Write a function to calculate the total number of words in a given sentence.","solution":"def count_words(sentence): Returns the total number of words in a given sentence. Words are considered as substrings separated by spaces. if not isinstance(sentence, str): raise ValueError(\\"Input must be a string\\") return len(sentence.split())"},{"question":"Write a function to find the maximum depth of a binary tree. The binary tree is represented using a class where each node contains a value and pointers to its left and right children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree. :param root: TreeNode, the root of the binary tree :return: Integer, maximum depth of the tree if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to divide two integers without using the \`/\` operator. The function should handle all edge cases, including division by zero and when the result is negative. You may assume the divisor and dividend are both 32-bit signed integers.","solution":"def divide(dividend, divisor): Divides two integers without using the \`/\` operator. Handles edge cases such as division by zero and negative results. # Handle division by zero if divisor == 0: raise ZeroDivisionError(\\"Cannot divide by zero\\") # Handle overflow if dividend == -2**31 and divisor == -1: return 2**31 - 1 # Determine the sign of the result negative = (dividend < 0) != (divisor < 0) # Convert both numbers to positive dividend, divisor = abs(dividend), abs(divisor) # Initialize the quotient quotient = 0 # Subtract divisor from dividend until dividend is less than divisor while dividend >= divisor: temp, multiple = divisor, 1 while dividend >= (temp << 1): temp <<= 1 multiple <<= 1 dividend -= temp quotient += multiple if negative: quotient = -quotient # Clamp result to 32-bit signed integer range return max(-2**31, min(quotient, 2**31 - 1))"},{"question":"Write a function to check if a given integer array contains any duplicates. The function should return \`true\` if there are any duplicates, and \`false\` otherwise.","solution":"def contains_duplicates(arr): Returns True if the array \`arr\` contains any duplicates, False otherwise. seen = set() for num in arr: if num in seen: return True seen.add(num) return False"},{"question":"Write a function to check if a given string can be formed by rearranging the characters of another string. The function should handle cases where the strings may contain any characters and ensure that the function is case-insensitive.","solution":"def can_form_by_rearranging(str1, str2): Checks if str1 can be formed by rearranging the characters of str2. This check is case-insensitive. Parameters: str1 (string): the string to form str2 (string): the string to form from Returns: bool: True if str1 can be formed, False otherwise from collections import Counter # Convert both strings to lowercase to make the check case-insensitive str1 = str1.lower() str2 = str2.lower() # Use Counter to compare character counts in both strings return Counter(str1) == Counter(str2)"},{"question":"Write a function to find the majority element in an array, which is the element that appears more than half the time in the array.","solution":"def majority_element(nums): Returns the majority element in the array, which is the element that appears more than half the time. count = 0 candidate = None # Boyer-Moore Voting Algorithm for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Write a function to find the middle element of a linked list in a single pass. You should not worry about the even or odd case as you are expected to return the middle.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle(head): Returns the middle element of the linked list. slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to find the maximum sum of subarray in a given 2D array. The function should return the maximum sum and the starting and ending indices of the subarray.","solution":"def max_sum_subarray_2d(arr): Function to find the maximum sum of subarray in a given 2D array. Returns the maximum sum and the starting and ending indices of the subarray. arr: List[List[int]] - 2D array of integers return: Tuple[int, Tuple[int, int], Tuple[int, int]] - (max_sum, (start_i, start_j), (end_i, end_j)) def kadane(arr): max_sum = -float('inf') current_sum = 0 start = end = s = 0 for i, value in enumerate(arr): current_sum += value if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return max_sum, start, end rows = len(arr) if rows == 0: return 0, (0, 0), (0, 0) cols = len(arr[0]) max_sum = -float('inf') final_left = final_right = final_top = final_bottom = 0 for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += arr[i][right] current_sum, start, end = kadane(temp) if current_sum > max_sum: max_sum = current_sum final_left = left final_right = right final_top = start final_bottom = end return max_sum, (final_top, final_left), (final_bottom, final_right)"},{"question":"Write a function to calculate the total number of 1 bits in the binary representation of a given number. For example, the binary representation of 5 is \\"101\\", which has 2 1 bits. Therefore, the function should return 2.","solution":"def count_1_bits(n): Returns the total number of 1 bits in the binary representation of the given number. Args: n (int): The input number. Returns: int: The count of 1 bits in the binary representation of n. return bin(n).count('1')"},{"question":"Write a function to identify the longest common substring between two given strings. The function should return the length of the longest common substring.","solution":"def longest_common_substring(str1, str2): Returns the length of the longest common substring between two given strings. # Create a 2D list to store lengths of longest common suffixes of substrings m, n = len(str1), len(str2) # Initialize the table with zeros table = [[0] * (n + 1) for _ in range(m + 1)] # Length of the longest common substring length_of_lcs = 0 for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: table[i][j] = table[i - 1][j - 1] + 1 length_of_lcs = max(length_of_lcs, table[i][j]) return length_of_lcs"},{"question":"Write a function to compute the sum of the squares of the first n natural numbers. The function should be named \`calculateSumOfSquares\`. The function should take a single integer parameter \`n\` and return an integer representing the sum of the squares of the first n natural numbers.","solution":"def calculateSumOfSquares(n): Returns the sum of the squares of the first n natural numbers. Parameters: n (int): The number up to which the squares are to be summed. Returns: int: The sum of the squares of the first n natural numbers. return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Write a function to remove duplicates from a list in Python, but ensure that the order of elements is preserved. You should also handle cases where the input list is empty or contains only one element. How can this be efficiently implemented?","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of elements. :param lst: List of elements to remove duplicates from :return: List with duplicates removed, preserving the order seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to check if a number is divisible by 3 and 5. If it is, the function should return \\"FizzBuzz\\". If it's only divisible by 3, it should return \\"Fizz\\". If it's only divisible by 5, it should return \\"Buzz\\". If it's not divisible by either, it should return the number as a string.","solution":"def fizz_buzz(number): Checks a number for divisibility by 3 and 5, and returns a specific string based on the result. - \\"FizzBuzz\\" if divisible by both 3 and 5 - \\"Fizz\\" if divisible by 3 only - \\"Buzz\\" if divisible by 5 only - The number as a string otherwise if number % 3 == 0 and number % 5 == 0: return \\"FizzBuzz\\" elif number % 3 == 0: return \\"Fizz\\" elif number % 5 == 0: return \\"Buzz\\" else: return str(number)"},{"question":"Write a function to calculate the greatest common divisor (GCD) of two integers in Go. The function should be named \`GCD\` and take two parameters \`a\` and \`b\` of type \`int\`. The function should return an integer representing the GCD of \`a\` and \`b\`.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b. Implementation uses the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Write a function to find the maximum profit that can be generated from a single buy and sell operation on a given list of stock prices. The list will contain the daily prices of a stock, with each index representing the day. For example, if the list is [7, 1, 5, 3, 6, 4], the maximum profit that can be generated is 5, which would be by buying on day 1 (price=1) and selling on day 5 (price=6).","solution":"def max_profit(prices): Returns the maximum profit that can be made from a single buy and sell operation. :param prices: List of stock prices :return: Maximum profit if not prices or len(prices) < 2: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to reverse words in a string. The function should take a string \`s\` as input and return the reversed order of words in \`s\`, maintaining the order of characters within each word.","solution":"def reverse_words(s): Reverses the words in the given string \`s\`. Parameters: s (str): Input string containing words separated by spaces. Returns: str: A string with the words in reversed order. words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to return an integer value that is the sum of the input integers. The function can accept any number of integer arguments.","solution":"def sum_integers(*args): Returns the sum of the input integers. return sum(args)"},{"question":"Write a function to replace all spaces in a string with '%20'. The function should take a string and its length as input and return the new string with spaces replaced.","solution":"def replace_spaces(string, length): Replaces all spaces in a string with '%20'. :param string: The input string. :param length: The length of the string to be considered. :return: A new string with spaces replaced by '%20'. result = [] for i in range(length): if string[i] == ' ': result.append('%20') else: result.append(string[i]) return ''.join(result)"},{"question":"Write a function to determine if a given 32-bit signed integer is a palindrome number. A palindrome number reads the same backward as forward. For example, 121 is a palindrome, but 123 is not.","solution":"def is_palindrome_number(x): Determine if a given 32-bit signed integer is a palindrome number. if x < 0: return False original = str(x) reversed_str = original[::-1] return original == reversed_str"},{"question":"Write a function to convert a binary tree to a doubly linked list where each node in the linked list is the in-order successor of its corresponding node in the binary tree. The doubly linked list should maintain the in-order traversal of the binary tree. The function should return the head of the doubly linked list and the tail node of the list.","solution":"# Define the structure of the tree node class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Define the structure of the doubly linked list node class DoublyLinkedListNode: def __init__(self, val=0, prev=None, next=None): self.val = val self.prev = prev self.next = next def tree_to_doubly_linked_list(root): Convert a binary tree to a doubly linked list where each node is the in-order successor of its corresponding node in the binary tree. :param root: The root of the binary tree. :return: A tuple containing the head and tail of the doubly linked list. if not root: return (None, None) # Helper function to perform in-order traversal and link nodes def inorder(node): nonlocal head, tail if not node: return # Recur for the left subtree inorder(node.left) # Create a new DLL node new_node = DoublyLinkedListNode(node.val) if tail: # Link the current DLL node with the previous one tail.next = new_node new_node.prev = tail else: # This condition is true for the leftmost node head = new_node # Move the tail to the current node tail = new_node # Recur for the right subtree inorder(node.right) # Initialize head and tail pointers for the DLL head, tail = None, None inorder(root) return head, tail"},{"question":"Write a function to generate all possible permutations of an array of integers.","solution":"from itertools import permutations def generate_permutations(arr): Returns all possible permutations of an array of integers. return list(permutations(arr))"},{"question":"Write a function to find the middle element in a singly linked list. If the linked list is empty, return \`None\`. If the list has an odd number of elements, return the middle element. If the list has an even number of elements, return the second element in the middle.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle(head): Returns the middle element of a singly linked list. If the list is empty, returns None. If the list has an even number of elements, returns the second element in the middle. if head is None: return None slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow.value"},{"question":"Write a function to multiply two numbers without using the multiplication operator. You need to handle both positive and negative numbers.","solution":"def multiply(a, b): Multiplies two integers without using the multiplication operator. This function handles both positive and negative integers. def add(x, y): Helper function to perform addition. while y != 0: carry = x & y x = x ^ y y = carry << 1 return x # Determine the sign of the result negative_result = (a < 0) ^ (b < 0) # Work with positive values a, b = abs(a), abs(b) result = 0 while b > 0: if b & 1: result = add(result, a) a <<= 1 b >>= 1 if negative_result: result = -result return result"},{"question":"Write a function to find the length of the longest substring in a given string without repeating characters. What is the time complexity of such a function?","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. Time Complexity: O(n), where n is the length of the string. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Write a function to check if a given array is a palindrome.","solution":"def is_palindrome_array(arr): Checks if a given array is a palindrome. Parameters: arr (list): The array to check for palindrome. Returns: bool: True if the array is a palindrome, False otherwise. return arr == arr[::-1]"},{"question":"Write a function to shift an array to the left by k positions. Explain the logic behind it and how it works.","solution":"def shift_left(arr, k): Shifts the elements in the array 'arr' to the left by 'k' positions. If 'k' is greater than the length of the array, it will be reduced using modulo operation. Parameters: arr (list): The input list. k (int): The number of positions to shift to the left. Returns: list: The shifted list. if not arr or k <= 0: return arr n = len(arr) k = k % n # Reduce k if it's greater than the length of the array return arr[k:] + arr[:k]"},{"question":"Write a function to find the first occurrence of a character in a string that does not repeat in the string. If no such character exists, return an underscore ('_').","solution":"def first_non_repeating_character(s): Finds the first non-repeating character in a string. Parameters: s (str): The input string Returns: char (str): The first non-repeating character, or '_' if none exists char_count = {} # Count the occurrences of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Iterate through the string again to find the first non-repeating character for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Write a function to return the missing number from a given array of n distinct numbers taken from 0, 1, 2, ..., n.","solution":"def find_missing_number(arr): Returns the missing number from an array of n distinct numbers taken from 0, 1, 2, ..., n. n = len(arr) expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a function to find the nth maximum number in a list of integers without using any built-in functions like sort() or max() after finding the maximum.","solution":"def nth_max(numbers, n): Returns the nth maximum number in a list of integers. if n > len(numbers): return None max_nums = [] for _ in range(n): current_max = float('-inf') for num in numbers: if num not in max_nums and num > current_max: current_max = num max_nums.append(current_max) return max_nums[-1]"},{"question":"Write a function to find minimum element in a circularly sorted array. The array may contain duplicates.","solution":"def find_min_in_circular_sorted_array(arr): Finds the minimum element in a circularly sorted array. The array may contain duplicates. if not arr: return None left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 elif arr[mid] < arr[right]: right = mid else: right -= 1 return arr[left]"},{"question":"Write a function to print the Fibonacci sequence up to a given number n. The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, 13, and so on.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to a given number n. If n is less than 1, returns an empty list. if n < 1: return [] sequence = [0, 1] while sequence[-1] + sequence[-2] <= n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to sort a list of integers in ascending order using the Bubble Sort algorithm. Ensure your function handles an empty list and lists with one or more elements correctly.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the Bubble Sort algorithm. Handles empty lists and lists with one or more elements correctly. :param arr: List of integers to be sorted. :return: The sorted list of integers in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to find the maximum profit that can be made from at most two transactions on an array of stock prices, where a transaction consists of buying and then selling one share of the stock. You are not allowed to engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","solution":"def maxProfitWithTwoTransactions(prices): Returns the maximum profit that can be made with at most two transactions. if not prices: return 0 n = len(prices) # Dynamics arrays to store profit from transactions left_profits = [0] * n right_profits = [0] * n # First pass from left to right to calculate max profit until day i min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) left_profits[i] = max(left_profits[i-1], prices[i] - min_price) # Second pass from right to left to calculate max profit from day i to end max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) right_profits[i] = max(right_profits[i+1], max_price - prices[i]) # Combine the profits max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i]) return max_profit"},{"question":"Write a function to calculate the sum of all pairs of numbers in an array.","solution":"def sum_of_pairs(nums): Returns the sum of all unique pairs of numbers in the array nums. total_sum = 0 n = len(nums) for i in range(n): for j in range(i + 1, n): total_sum += nums[i] + nums[j] return total_sum"},{"question":"Write a function to calculate the sum of the first n natural numbers using a loop.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Write a function to find the largest number in an array using Python. The function should return None if the array is empty.","solution":"def find_largest_number(arr): Returns the largest number in an array. Returns None if the array is empty. if len(arr) == 0: return None largest = arr[0] for num in arr: if num > largest: largest = num return largest"},{"question":"Write a function to compute the factorial of a given number and verify its correctness using a set of test cases.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to check if a given word is an anagram of a palindrome. An anagram of a palindrome is a rearrangement of letters in a word that can form a palindrome. For example, \\"carrace\\" is an anagram of a palindrome \\"racecar\\".","solution":"from collections import Counter def is_anagram_of_palindrome(word): Checks if the given word is an anagram of a palindrome. Args: word (str): The input word to check. Returns: bool: True if the word is an anagram of a palindrome, False otherwise. char_counts = Counter(word) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # For a word to be an anagram of a palindrome, it can have at most one character with an odd count. return odd_count <= 1"},{"question":"Write a function to calculate the nth Fibonacci number efficiently, considering the constraints of large numbers. Use dynamic programming with memoization to store intermediate results and avoid redundant calculations.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using dynamic programming and memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to calculate the reverse of an integer without using any built-in functions or libraries that provide reverse operations. The function should handle both positive and negative integers, including handling when the reversed integer overflows or underflows (in which case, return 0).","solution":"def reverse_integer(x): Returns the reverse of an integer x. If the reversed integer overflows, return 0. Args: x (int): The integer to be reversed. Returns: int: The reversed integer or 0 if it overflows. INT_MAX, INT_MIN = 2**31 - 1, -2**31 rev = 0 is_negative = x < 0 x = abs(x) while x != 0: pop = x % 10 x //= 10 # Check for overflow if rev > (INT_MAX - pop) // 10: return 0 rev = rev * 10 + pop return -rev if is_negative else rev"},{"question":"Write a function to check if a string contains the substring \\"cat\\" or \\"dog\\". If it does, return the string. If not, return \\"Neither cat nor dog\\".","solution":"def check_cat_or_dog(s): Checks if the input string contains the substring \\"cat\\" or \\"dog\\". If it does, returns the input string. If not, returns \\"Neither cat nor dog\\". if \\"cat\\" in s or \\"dog\\" in s: return s else: return \\"Neither cat nor dog\\""},{"question":"Write a function to check if a given nested dictionary in Python contains a specific key. The function should be able to handle nested dictionaries and return \`True\` if the key exists at any level of nesting, otherwise return \`False\`.","solution":"def contains_key(d, key): Returns True if the given key exists in the nested dictionary d, otherwise returns False. :param d: A nested dictionary. :param key: The key to search for. :return: True if key is found, otherwise False. if key in d: return True for k, v in d.items(): if isinstance(v, dict): if contains_key(v, key): return True return False"},{"question":"Write a function to return the number of times a specific substring appears in a given string, considering overlapping occurrences as well.","solution":"def count_overlapping_substring_occurrences(s, sub): Counts the number of overlapping occurrences of a substring sub in the string s. Parameters: s (str): The string to search within. sub (str): The substring to search for. Returns: int: The number of overlapping occurrences of sub in s. count = start = 0 while True: start = s.find(sub, start) if start == -1: break count += 1 start += 1 # move start by one to allow overlapping return count"},{"question":"Write a function to check if a string contains all distinct characters without using any additional data structures. Your function should take a single string as input and return a boolean value indicating whether the string contains only unique characters or not.","solution":"def has_all_unique_characters(s): Check if a string contains all distinct characters without using any additional data structures. Parameters: s (str): Input string to check for unique characters. Returns: bool: True if all characters are unique, False otherwise. length = len(s) for i in range(length): for j in range(i + 1, length): if s[i] == s[j]: return False return True"},{"question":"Write a function to find all palindromic substrings of a given string. A palindromic substring is a substring which reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\".","solution":"def find_palindromic_substrings(s): Returns a set of all palindromic substrings of the given string s. palindromes = set() def is_palindrome(sub): return sub == sub[::-1] n = len(s) for i in range(n): for j in range(i + 1, n + 1): if is_palindrome(s[i:j]): palindromes.add(s[i:j]) return palindromes"},{"question":"Write a function to convert a 32-bit signed integer to its corresponding 32-bit binary representation as a string. If the integer is negative, the binary representation should be in two's complement form. Ensure that leading zeros are preserved in the output representation.","solution":"def int_to_32bit_binary(n): Converts a 32-bit signed integer to its corresponding 32-bit binary representation. If the integer is negative, the binary representation is in two's complement form. Leading zeros are preserved in the output. # Convert to 32-bit two's complement binary if n is negative if n < 0: n = (1 << 32) + n # Convert to binary and remove the '0b' prefix binary_representation = bin(n)[2:] # Ensure the binary representation is exactly 32 bits long return binary_representation.zfill(32)"},{"question":"Write a function to reverse a linked list in Python. The linked list should be defined using a class where each node contains a value and a pointer to the next node. You need to reverse the linked list in-place without using extra space.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list in-place. :param head: The head of the linked list. :return: The new head of the reversed linked list. prev = None curr = head while curr is not None: next_temp = curr.next # save next node curr.next = prev # reverse the link prev = curr # move prev and curr by one step curr = next_temp return prev"},{"question":"Write a function to find the first non-repeating character in a string using Python. This function should be optimized for performance.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat or the string is empty, returns None. from collections import Counter # Count the occurrences of each character count = Counter(s) # Iterate through the string and find the first character with a count of 1 for char in s: if count[char] == 1: return char return None"},{"question":"Write a function to print all the elements of a binary tree in level order (also known as breadth-first search). The function should take the root of the binary tree as its input.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): Print the elements of the binary tree in level order. if not root: return [] result = [] queue = deque([root]) while queue: current = queue.popleft() result.append(current.val) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result"},{"question":"Write a function to print a number in binary format.","solution":"def to_binary(n): Returns the binary representation of an integer. Parameters: n (int): The integer to be converted to binary. Returns: str: The binary representation of the integer as a string. if n == 0: return \\"0b0\\" else: return bin(n)"},{"question":"Write a function to multiply two integers without using the '*' operator.","solution":"def multiply(a, b): Multiply two integers without using the '*' operator. result = 0 negative_result = (a < 0) != (b < 0) a, b = abs(a), abs(b) for _ in range(b): result += a if negative_result: result = -result return result"},{"question":"Write a function to rotate an array to the right by a given number of steps. The function should take two parameters: a list \`arr\` and an integer \`steps\`. The function should return the rotated array.","solution":"def rotate_array(arr, steps): Rotates an array to the right by a given number of steps. Parameters: arr (list): The list of elements to rotate. steps (int): The number of steps to rotate the list to the right. Returns: list: The rotated list. if not arr: return [] steps = steps % len(arr) # Handle cases where steps is greater than array length return arr[-steps:] + arr[:-steps]"},{"question":"Write a function to sort an array in ascending order using a specific sorting algorithm. You will be given the array and the algorithm to use. Implement the algorithm in Python and write a main function to test your sort function with various sorting algorithms (Bubble Sort, Selection Sort, Insertion Sort, Merge Sort, Quick Sort).","solution":"def bubble_sort(arr): Sorts an array in ascending order using Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def selection_sort(arr): Sorts an array in ascending order using Selection Sort algorithm. n = len(arr) for i in range(n): min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr def insertion_sort(arr): Sorts an array in ascending order using Insertion Sort algorithm. for i in range(1, len(arr)): key = arr[i] j = i-1 while j >= 0 and key < arr[j]: arr[j+1] = arr[j] j -= 1 arr[j+1] = key return arr def merge_sort(arr): Sorts an array in ascending order using Merge Sort algorithm. if len(arr) > 1: mid = len(arr)//2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr def quick_sort(arr): Sorts an array in ascending order using Quick Sort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr)//2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a function to convert a binary string to a simple ASCII string. Here, each 8 bits represent a single ASCII character.","solution":"def binary_to_ascii(binary_string): Converts a binary string to a simple ASCII string. Each 8 bits represent a single ASCII character. # Ensure the binary string length is a multiple of 8 if len(binary_string) % 8 != 0: raise ValueError(\\"Binary string length must be a multiple of 8.\\") ascii_string = \\"\\" for i in range(0, len(binary_string), 8): byte = binary_string[i:i+8] ascii_character = chr(int(byte, 2)) ascii_string += ascii_character return ascii_string"},{"question":"Write a function to find the maximum number in an array of integers. The function should return the maximum number found. If the array is empty, the function should return \`None\`. Additionally, the function should handle any potential exceptions that may occur during the execution.","solution":"def find_max_number(numbers): This function returns the maximum number in an array of integers. If the array is empty, it returns None. if not numbers: return None try: return max(numbers) except (TypeError, ValueError) as e: print(f\\"An error occurred: {e}\\") return None"},{"question":"Write a function to convert a string to camel case.","solution":"def to_camel_case(s): Converts a given string s to camel case. Parameters: s (str): The string to be converted. Returns: str: The camel case version of the input string. if not s: return s s = s.replace('-', ' ').replace('_', ' ') words = s.split() return words[0] + ''.join(word.capitalize() for word in words[1:])"},{"question":"Write a function to implement a rudimentary sorting algorithm, such as bubble sort, quicksort, or mergesort. In this exercise, I would prefer a bubble sort implementation. Can you guide me through how to implement it in Python?","solution":"def bubble_sort(arr): Sorts an array of integers using bubble sort algorithm. Parameters: arr (list): The list of integers to be sorted. Returns: list: The sorted list of integers. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to calculate the factorial of a given number using recursion. What are some potential improvements to this function?","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1) # Potential improvements: # 1. Implement memoization to cache results of previously computed factorials. # 2. Convert the recursive approach to an iterative approach for better performance and to avoid maximum recursion limit issues for very large numbers."},{"question":"Write a function to check if a given number is a \\"fibonacci number\\". A Fibonacci number is part of a sequence where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"import math def is_fibonacci_number(n): Check if a given number n is a Fibonacci number. def is_perfect_square(x): s = int(math.isqrt(x)) return s*s == x # A number n is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square test1 = 5 * (n ** 2) + 4 test2 = 5 * (n ** 2) - 4 return is_perfect_square(test1) or is_perfect_square(test2)"},{"question":"Write a function to convert a hexadecimal color code to its RGB (Red, Green, Blue) equivalent. The function should take a string representing a hexadecimal color code (e.g., \\"#FFFFFF\\") as input and return a tuple of integers representing the RGB values.","solution":"def hex_to_rgb(hex_code): Converts a hexadecimal color code to its RGB equivalent. Args: hex_code (str): A string representing a hexadecimal color code (e.g., \\"#FFFFFF\\"). Returns: tuple: A tuple of three integers representing the RGB values. # Remove the hash (#) at the start if it's there hex_code = hex_code.lstrip('#') # Convert the string into RGB values r = int(hex_code[0:2], 16) g = int(hex_code[2:4], 16) b = int(hex_code[4:6], 16) return (r, g, b)"},{"question":"Write a function to find the maximum element in an array of integers. The function should return the maximum element and its index. If there are multiple occurrences of the maximum element, return the index of the first occurrence.","solution":"def find_max_element(arr): Returns the maximum element and the index of its first occurrence in an array. Parameters: arr (list): List of integers Returns: tuple: Maximum element and its index if not arr: return None, None # Empty array case max_element = arr[0] index = 0 for i in range(1, len(arr)): if arr[i] > max_element: max_element = arr[i] index = i return max_element, index"},{"question":"Write a function to compute the sum of the digits of a given number \`n\`. If \`n\` is negative, ignore the negative sign. For example, the function should return 15 for \`n = -1234\` and 20 for \`n = 1123\`.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given number n. If n is negative, the negative sign is ignored. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"Write a function to display all the prime numbers from 1 to N. How can I implement this in Python?","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def primes_up_to_n(N): Returns a list of prime numbers from 1 to N. return [x for x in range(2, N+1) if is_prime(x)]"},{"question":"Write a function to determine the maximum number of even number pairs that can be formed from an array of integers. You can only pair up adjacent elements in the array. Each pair is considered if both elements are even.","solution":"def max_even_pairs(arr): Returns the maximum number of even number pairs that can be formed from an array of integers. Only adjacent elements can be paired, and each pair is considered if both elements are even. if len(arr) < 2: return 0 even_pair_count = 0 for i in range(len(arr) - 1): if arr[i] % 2 == 0 and arr[i + 1] % 2 == 0: even_pair_count += 1 return even_pair_count"},{"question":"Write a function to calculate the square root of a given number using the bisection method in Python. The function should handle edge cases like negative numbers and zero properly.","solution":"def square_root_bisection(num, tolerance=1e-10): Returns the square root of a given number using the bisection method. :param num: The number to find the square root of. :param tolerance: The tolerance for the approximation error. :return: The square root of the given number. if num < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") if num == 0: return 0.0 low, high = 0, max(1, num) guess = (low + high) / 2 while abs(guess**2 - num) > tolerance: if guess**2 < num: low = guess else: high = guess guess = (low + high) / 2 return guess"},{"question":"Write a function to create a matrix from two input vectors, where the first vector contains row indices and the second vector contains the corresponding values to fill the matrix at those indices. The length of both vectors should be the same.","solution":"def create_matrix(row_indices, values): Creates a matrix from two input vectors: row_indices and corresponding values. Parameters: row_indices (list of tuples): Each tuple contains (row_index, col_index). values (list): List of values to place in the matrix at the corresponding indices. Returns: list of lists: A matrix with the given values at specified positions. if len(row_indices) != len(values): raise ValueError(\\"Both input vectors must have the same length.\\") # Find the max row and column indices to determine the size of the matrix max_row = max(r for r, c in row_indices) max_col = max(c for r, c in row_indices) # Initialize the matrix with zeros matrix = [[0 for _ in range(max_col + 1)] for _ in range(max_row + 1)] # Fill the matrix with the provided values for (r, c), val in zip(row_indices, values): matrix[r][c] = val return matrix"},{"question":"Write a function to find the maximum frequency character in a given string. If there are multiple characters with the same frequency, return the one that appears first in the string.","solution":"def max_frequency_char(s): Returns the character with the maximum frequency in the given string. If multiple characters have the same frequency, the first one encountered is returned. :param s: The input string :return: Character with the maximum frequency if not s: return None frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 max_freq = 0 max_char = '' for char in s: if frequency[char] > max_freq: max_freq = frequency[char] max_char = char return max_char"},{"question":"Write a function to find the largest common prefix of a list of strings.","solution":"def longest_common_prefix(strs): Returns the longest common prefix among a list of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # The longest common prefix can't be longer than the shortest string in the list shortest_str = min(strs, key=len) for i, char in enumerate(shortest_str): for other_str in strs: if other_str[i] != char: return shortest_str[:i] return shortest_str"},{"question":"Write a function to calculate the square root of a given number using Newton's method. I need the function in Python.","solution":"def sqrt_newton_method(x, tolerance=1e-10): Calculates the square root of a given number using Newton's method. Parameters: x (float): The number to find the square root of. Must be non-negative. tolerance (float): The tolerance for stopping the iteration. Default is 1e-10. Returns: float: The calculated square root of x. if x < 0: raise ValueError(\\"Cannot compute the square root of a negative number\\") if x == 0: return 0 guess = x while True: next_guess = (guess + x / guess) / 2 if abs(guess - next_guess) < tolerance: return next_guess guess = next_guess"},{"question":"Write a function to find the median from a list of numbers. The list may contain both positive and negative integers, as well as zeros.","solution":"def find_median(numbers): Returns the median of a list of numbers. if not numbers: return None numbers.sort() n = len(numbers) if n % 2 == 1: return numbers[n // 2] else: mid1 = n // 2 mid2 = mid1 - 1 return (numbers[mid1] + numbers[mid2]) / 2"},{"question":"Write a function to check if a given binary tree is a perfect binary tree or not. Answer in Python.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_perfect_binary_tree(root: TreeNode) -> bool: Given a root of a binary tree, check if it's a perfect binary tree. A binary tree is perfect if all internal nodes have two children and all leaf nodes are at the same level. :param root: Root node of the binary tree. :return: Boolean value indicating if the binary tree is perfect. if root is None: return True def check_depth_and_perfect(node, depth): # If a leaf node, return True and current depth if node.left is None and node.right is None: return True, depth # If an internal node and it does not have both children, return False if node.left is None or node.right is None: return False, depth # Check the left and right subtree left_perfect, left_depth = check_depth_and_perfect(node.left, depth + 1) right_perfect, right_depth = check_depth_and_perfect(node.right, depth + 1) # Ensure both subtrees are perfect and their depths are the same return left_perfect and right_perfect and left_depth == right_depth, left_depth is_perfect, _ = check_depth_and_perfect(root, 0) return is_perfect"},{"question":"Write a function to swap two numbers without using a third variable in Python. You are not allowed to use python arithmetic operators like +,-,*,/. You can use bitwise operators, comparison operators, and basic control structures (if, else, loops).","solution":"def swap_numbers(a, b): Swaps two numbers without using a third variable. if a != b: a = a ^ b b = a ^ b a = a ^ b return a, b"},{"question":"Write a function to count the number of semicolons in a given string. The function should be able to handle different programming languages and should be efficient.","solution":"def count_semicolons(s): Count the number of semicolons in the given string. Args: s (str): Input string to count semicolons in. Returns: int: The number of semicolons in the string. return s.count(';')"},{"question":"Write a function to find the minimum element in a rotationally sorted array without duplicates. A rotationally sorted array is an array that has been rotated at some pivot unknown to you beforehand.","solution":"def find_min_rotated(arr): Finds the minimum element in a rotationally sorted array without duplicates. if not arr: return None left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"Write a function to find the largest of two numbers using the \`max\` function.","solution":"def find_largest(a, b): Returns the largest of two numbers a and b using the max function. return max(a, b)"},{"question":"Write a function to determine the maximum possible value from a list of integers by concatenating the integers. For example, given a list [10, 2], the function should return 210 by concatenating 2 and 10. If the list is empty, return None. Ensure all integers in the list are non-negative.","solution":"from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def max_concatenated_value(nums): Returns the maximum possible value from a list of integers by concatenating the integers. if not nums: return None nums_as_str = list(map(str, nums)) nums_as_str.sort(key=cmp_to_key(compare)) return ''.join(nums_as_str)"},{"question":"Write a function to insert a list into an existing list at a specified index. If the index is out of the bounds of the list, append the new list to the end of the existing list. If the index is negative, consider it starting from the end of the list.","solution":"def insert_list_at_index(existing_list, new_list, index): Inserts new_list into existing_list at the specified index. If index is out of bounds, appends new_list to the end of existing_list. If index is negative, counts from the end of existing_list. Parameters: existing_list (list): The initial list where the new list will be inserted. new_list (list): The list to be inserted into the existing list. index (int): The position at which to insert the new list. Returns: list: The modified list after new_list has been inserted. if index < 0: index += len(existing_list) if index > len(existing_list): index = len(existing_list) if index < 0: index = 0 return existing_list[:index] + new_list + existing_list[index:]"},{"question":"Write a function to validate a given string as a valid IP address. The function should return \`true\` if the string is a valid IPv4 address, \`false\` otherwise. A valid IPv4 address consists of exactly four octets, with each octet being a decimal number ranging from 0 to 255, inclusive. The octets are separated by periods.","solution":"def is_valid_ipv4(ip): Validates if the given string is a valid IPv4 address. Args: - ip (str): The input string to validate. Returns: - bool: True if the input string is a valid IPv4 address, False otherwise. parts = ip.split('.') # IP must have exactly four octets if len(parts) != 4: return False for part in parts: # Each octet must be a digit and within the range 0 to 255 if not part.isdigit() or not 0 <= int(part) <= 255: return False # Octets should not have leading zeros except \\"0\\" if len(part) > 1 and part[0] == '0': return False return True"},{"question":"Write a function to find the maximum value between two numbers.","solution":"def max_value(a, b): Returns the maximum value between a and b. return a if a > b else b"},{"question":"Write a function to convert a string to a list of integers, where each integer is represented by its ASCII value. For example, given the string \\"hello\\", the function should return [104, 101, 108, 108, 111].","solution":"def string_to_ascii_list(s): Converts a string to a list of integers, where each integer is an ASCII value of a character in the string. Args: s (str): The input string. Returns: List[int]: A list of ASCII values. return [ord(char) for char in s]"},{"question":"Write a function to implement a stack in Python using a list to store elements. The function should include methods for pushing an element onto the stack, popping an element from the stack, and checking if the stack is empty.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, element): Pushes an element onto the stack. self.stack.append(element) def pop(self): Pops the top element from the stack and returns it. Returns None if the stack is empty. if not self.is_empty(): return self.stack.pop() return None def is_empty(self): Checks if the stack is empty. Returns True if empty, False otherwise. return len(self.stack) == 0"},{"question":"Write a function to print the first n Fibonacci numbers. The function should take an integer n as input and print the first n Fibonacci numbers.","solution":"def print_fibonacci(n): Prints the first n Fibonacci numbers. if n <= 0: print(\\"Invalid input, n must be greater than 0.\\") return fib_sequence = [] a, b = 0, 1 for _ in range(n): fib_sequence.append(a) a, b = b, a + b print(\\" \\".join(map(str, fib_sequence)))"},{"question":"Write a function to compute the sum of all numbers in a given list \`nums\`.","solution":"def sum_of_list(nums): Returns the sum of all numbers in the list \`nums\`. return sum(nums)"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This is known as the Kadane's algorithm. You should return the maximum sum possible.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Parameters: nums (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to reverse the order of characters in a string, but only reverse the words. A word is defined as a sequence of characters separated by spaces. The function should keep the spaces in their original positions.","solution":"def reverse_words_in_string(s): Reverses the order of characters in a string, but only reverses the words. Args: s (str): Input string. Returns: str: String with characters in each word reversed. words = s.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to calculate the nth Fibonacci number using dynamic programming. What are the initial two numbers of the Fibonacci sequence, and how does the function work?","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a function to detect and remove duplicates from a singly linked list in Python, while maintaining the original order of the elements. If the list is empty, return it as is.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates(head): Removes duplicates from an unsorted singly linked list while maintaining the original order of elements. This function modifies the linked list in place and returns the head of the modified list. If the list is empty, it returns None. if not head: return None current = head seen_values = set() # to keep track of seen values seen_values.add(current.val) while current.next: if current.next.val in seen_values: current.next = current.next.next # remove the duplicate else: seen_values.add(current.next.val) current = current.next return head"},{"question":"Write a function to check if a binary string has more 0s or 1s and return that string. If the number of 0s and 1s is equal, return an empty string.","solution":"def more_zeros_or_ones(binary_string): Checks if a binary string has more 0s or 1s and returns the respective string. If the number of 0s and 1s is equal, returns an empty string. Args: binary_string (str): A string consisting of '0's and '1's. Returns: str: '0' if there are more '0's, '1' if there are more '1's, otherwise an empty string. count_0 = binary_string.count('0') count_1 = binary_string.count('1') if count_0 > count_1: return '0' elif count_1 > count_0: return '1' else: return ''"},{"question":"Write a function to count the occurrences of a given element \`x\` in an array \`arr\`.","solution":"def count_occurrences(arr, x): Counts the occurrences of element x in the array arr. Parameters: arr (list): The list of elements. x (Any): The element whose occurrences need to be counted. Returns: int: The count of occurrences of x in arr. return arr.count(x)"},{"question":"Write a function to find the first missing positive integer in an unsorted array of integers. For example, given the array \`[3, 4, -1, 1]\`, the function should return \`2\` because \`2\` is the smallest positive integer missing from the array.","solution":"def first_missing_positive(nums): Returns the first missing positive integer from the array. n = len(nums) # Step 1: Mark numbers which are out of range and negatives with a specific number (n + 1) for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Use the index as a hash key and number sign as a presence detector for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Find the first cell which isn't negative (i.e., its index + 1 is missing in the array) for i in range(n): if nums[i] > 0: return i + 1 # If no cell is found, then the missing number is n + 1 return n + 1"},{"question":"Write a function to return the number of values that can form a triangle. Given an array of n integers, return the maximum number of valid (i, j, k) triples such that the sum of any two of them is greater than the third.","solution":"def count_valid_triangles(arr): Returns the number of valid (i, j, k) triples such that the sum of any two sides is greater than the third side. :param arr: List of integers :return: Number of valid triangle triples if not arr or len(arr) < 3: return 0 arr.sort() count = 0 n = len(arr) for i in range(n - 2): k = i + 2 for j in range(i + 1, n - 1): while k < n and arr[i] + arr[j] > arr[k]: k += 1 count += k - j - 1 return count"},{"question":"Write a function to generate prime numbers from 1 to n using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers from 1 to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize a boolean array to True is_prime = [True] * (n + 1) # 0 and 1 are not prime numbers is_prime[0] = is_prime[1] = False for p in range(2, int(n**0.5) + 1): if is_prime[p]: # Mark multiples of p as False for multiple in range(p * p, n + 1, p): is_prime[multiple] = False # Return all prime numbers return [num for num in range(n + 1) if is_prime[num]]"},{"question":"Write a function to look up a student's grade in a given class. The function should take three parameters: \`student_name\` (string), \`class_name\` (string), and \`grades\` (dictionary where keys are tuple pairs of (student_name, class_name) and values are the grades).","solution":"def get_student_grade(student_name, class_name, grades): Returns the grade of a student in a given class. :param student_name: string, name of the student :param class_name: string, name of the class :param grades: dictionary, where keys are tuple pairs of (student_name, class_name) and values are the grades :return: grade if found, else None return grades.get((student_name, class_name), None)"},{"question":"Write a function to find the second largest number in a given list of integers. If the list contains duplicates, the function should return the second distinct number. If there are not enough distinct numbers to find the second largest, the function should return \`None\`.","solution":"def second_largest(nums): Finds the second largest distinct number in a list of integers. Returns None if there are not enough distinct numbers. if len(nums) < 2: return None # Remove duplicates and sort the list in descending order. unique_nums = list(set(nums)) unique_nums.sort(reverse=True) # Check if there are at least two distinct numbers if len(unique_nums) < 2: return None return unique_nums[1]"},{"question":"Write a function to process a JSON object and return the keys that appear more than once. You should ensure that the function takes a JSON object as input and outputs a list of keys with duplicates.","solution":"import json from collections import Counter def find_duplicate_keys(json_obj): Returns a list of keys that appear more than once in the given JSON object. Parameters: json_obj (dict): A JSON object represented as a Python dictionary. Returns: list: A list of keys that have duplicates. all_keys = [] def extract_keys(obj): if isinstance(obj, dict): for key, value in obj.items(): all_keys.append(key) extract_keys(value) elif isinstance(obj, list): for item in obj: extract_keys(item) extract_keys(json_obj) counter = Counter(all_keys) return [key for key, count in counter.items() if count > 1]"},{"question":"Write a function to find the nth Fibonacci number using iterative approach. The Fibonacci sequence is defined as follows: F(n) = F(n-1) + F(n-2) with initial conditions F(0) = 0 and F(1) = 1. The function should be efficient and have a time complexity of O(n).","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the second largest number in a list of numbers. The function should take a list as input and return the second largest number. If the list has fewer than two elements, the function should return None.","solution":"def second_largest(numbers): Returns the second largest number in a list of numbers. If the list has fewer than two elements, return None. if len(numbers) < 2: return None first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a function to find the number of subsets with a given sum in an array.","solution":"def count_subsets_with_sum(arr, target_sum): Returns the number of subsets of the given array that add up to the target sum. :param arr: list of integers :param target_sum: integer, the target sum :return: integer, the number of subsets with the given sum n = len(arr) dp = [[0 for _ in range(target_sum + 1)] for _ in range(n + 1)] # If target_sum is 0, we have one subset, the empty subset for i in range(n + 1): dp[i][0] = 1 for i in range(1, n + 1): for j in range(target_sum + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target_sum]"},{"question":"Write a function to calculate the sum of two integers. The function should take two arguments and return their sum. If the sum is greater than 100, the function should return -1. If the sum is between 50 and 100 (inclusive), the function should return the sum times 2. If the sum is less than 50, the function should return the sum as is.","solution":"def custom_sum(a, b): Calculates the sum of two integers and applies specific rules based on the value of the sum. If the sum is greater than 100, returns -1. If the sum is between 50 and 100 (inclusive), returns the sum times 2. If the sum is less than 50, returns the sum. total = a + b if total > 100: return -1 elif 50 <= total <= 100: return total * 2 else: return total"},{"question":"Write a function to find the maximum depth of a tree. The tree is represented as a list of tuples, where each tuple represents a node and its children. For example, \`[(1, (2, 3)), (2, (4, 5)), (3, (6, 7)), (4, ()), (5, ()), (6, ()), (7, ())]\` represents a tree with root node 1. You can assume that the tree is well-formed, i.e., each node has only one parent (except the root), and there are no cycles.","solution":"def max_tree_depth(tree): Function to find the maximum depth of a tree represented as a list of tuples. Args: tree (list): A list of tuples where each tuple represents a node and its children. Returns: int: The maximum depth of the tree. tree_dict = {node[0]: node[1] for node in tree} def depth(node): if not tree_dict[node]: return 1 return 1 + max(depth(child) for child in tree_dict[node]) root = tree[0][0] return depth(root)"},{"question":"Write a function to insert an element at a specific index in a singly linked list. The function should handle edge cases like inserting at the beginning or the end of the list, as well as when the index is out of bounds.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def insert_at_index(head, index, value): Inserts a new node with the specified value at the specified index in the singly linked list. If the index is out of bounds, the new node is not inserted. Args: - head (ListNode): The head of the singly linked list. - index (int): The index where the new node should be inserted. - value (int): The value of the new node to insert. Returns: - ListNode: The head of the modified linked list. new_node = ListNode(value) if index == 0: new_node.next = head return new_node current = head current_index = 0 while current is not None and current_index < index - 1: current = current.next current_index += 1 if current is None: # Index out of bounds return head new_node.next = current.next current.next = new_node return head"},{"question":"Write a function to calculate the area of a rectangle given its width and height. The function should return the area as a floating-point number. Ensure that your function handles both integer and double inputs correctly.","solution":"def calculate_rectangle_area(width, height): Returns the area of a rectangle given its width and height. return float(width * height)"},{"question":"Write a function to find the sum of two integers without using the '+' or '-' operators.","solution":"def add_without_plus(a, b): Returns the sum of a and b without using the '+' or '-' operators. MAX = 0xFFFFFFFF MASK = 0x7FFFFFFF while b != 0: # Calculate carry carry = a & b # Calculate the sum a = (a ^ b) & MAX # Shift carry left by one b = (carry << 1) & MAX return a if a <= MASK else ~(a ^ MAX)"},{"question":"Write a function to solve word ladder problem using a dictionary of words of equal length. The word ladder problem is defined as finding the shortest transformation sequence from a start word to a target word, such that only one letter different in each transformation step.","solution":"from collections import deque def word_ladder(start, target, word_dict): Finds the shortest transformation sequence from start word to target word. Each transformation can change only one letter and must be a valid word in word_dict. :param start: The starting word. :param target: The target word. :param word_dict: A set of valid words of the same length. :return: The shortest transformation sequence as a list of words from start to target. Empty list if no sequence. if start == target: return [start] word_dict.add(target) queue = deque([(start, [start])]) while queue: current_word, path = queue.popleft() if current_word == target: return path for i in range(len(current_word)): for c in 'abcdefghijklmnopqrstuvwxyz': new_word = current_word[:i] + c + current_word[i+1:] if new_word in word_dict: word_dict.remove(new_word) queue.append((new_word, path + [new_word])) return []"},{"question":"Write a function to check if a given array of integers can be partitioned into two subsets such that the sum of elements in both subsets is equal.","solution":"def can_partition(nums): Determines if the given list of integers can be partitioned into two subsets with equal sum. :param nums: List[int] - List of integers :return: bool - True if partition is possible, False otherwise total_sum = sum(nums) # If the total sum is odd, we cannot partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a boolean DP array where dp[i] will be True if a subset with sum i is possible dp = [False] * (target + 1) dp[0] = True # Zero sum is always possible with an empty subset for num in nums: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True return dp[target]"},{"question":"Write a function to return the sum of a list of integers.","solution":"def sum_list(int_list): Returns the sum of the integers in the list. :param int_list: List of integers :return: Sum of the integers in the list return sum(int_list)"},{"question":"Write a function to check if a given month number is valid. A month number is considered valid if it falls between 1 and 12 (inclusive).","solution":"def is_valid_month(month): Checks if the given month number is valid. A month number is valid if it is between 1 and 12 (inclusive). Args: month (int): Month number to be checked. Returns: bool: True if month is valid, False otherwise. return 1 <= month <= 12"},{"question":"Write a function to return the first n elements of an array in reverse order. If n is larger than the total number of elements, return all elements in reverse order. If n is negative, return the last |n| elements in reverse order. If n is zero, return an empty array.","solution":"def reverse_n_elements(arr, n): Returns the first n elements of the array in reverse order. If n is larger than the total number of elements, returns all elements in reverse order. If n is negative, returns the last |n| elements in reverse order. If n is zero, returns an empty array. :param arr: list of elements :param n: integer, number of elements to reverse :return: list of elements in reverse order if n == 0: return [] elif n > 0: return arr[:n][::-1] else: return arr[n:][::-1]"},{"question":"Write a function to check if a given string \`s1\` is a substring of another string \`s2\`. If \`s1\` is a substring of \`s2\`, the function should return \`True\`; if not, it should return \`False\`.","solution":"def is_substring(s1, s2): Returns True if s1 is a substring of s2, otherwise False. return s1 in s2"},{"question":"Write a function to check if a given string \`s\` can be converted to a palindrome by removing some characters. For example, \\"radar\\" can be converted to a palindrome by removing the character \\"a\\". The function should return \`true\` if it's possible to convert the string to a palindrome by removing some characters, and \`false\` otherwise.","solution":"def can_form_palindrome(s: str) -> bool: Returns true if the string can be converted to a palindrome by removing some characters, otherwise false. def is_palindrome(phrase: str) -> bool: return phrase == phrase[::-1] n = len(s) left, right = 0, n - 1 while left < right: if s[left] != s[right]: option1 = s[left:right] option2 = s[left + 1:right + 1] return is_palindrome(option1) or is_palindrome(option2) left += 1 right -= 1 return True"},{"question":"Write a function to calculate the total number of substrings within a given string that start and end with the same character. The function should be named \`count_matching_substrings\` and take a string \`text\` as its parameter. The solution should use dynamic programming to efficiently compute the result.","solution":"def count_matching_substrings(text): This function calculates the total number of substrings within a given string that start and end with the same character using dynamic programming. :param text: A string text :return: Total number of substrings that start and end with the same character n = len(text) if n == 0: return 0 # Initialize a DP table dp = [[False] * n for _ in range(n)] count = 0 # Every single character is a matching substring for i in range(n): dp[i][i] = True count += 1 # Check substrings of length 2 for i in range(n - 1): if text[i] == text[i + 1]: dp[i][i + 1] = True count += 1 # Check substrings of length greater than 2 for length in range(3, n + 1): for start in range(n - length + 1): end = start + length - 1 if text[start] == text[end] and dp[start + 1][end - 1]: dp[start][end] = True count += 1 return count"},{"question":"Write a function to clone a graph in Python, where the graph is represented as an adjacency list. Each node in the graph has a label and a list of its neighboring nodes. The function should return the new graph with identical node labels and connections.","solution":"class UndirectedGraphNode: def __init__(self, label): self.label = label self.neighbors = [] def clone_graph(node): Clones an undirected graph. :param node: UndirectedGraphNode, start node of the undirected graph :return: UndirectedGraphNode, start node of the cloned undirected graph if not node: return None node_mapping = {} def clone_node(node): if node in node_mapping: return node_mapping[node] copied_node = UndirectedGraphNode(node.label) node_mapping[node] = copied_node for neighbor in node.neighbors: copied_node.neighbors.append(clone_node(neighbor)) return copied_node return clone_node(node)"},{"question":"Write a function to calculate the factorial of a number using tail recursion in Python.","solution":"def factorial_tail_recursion(n, accumulator=1): Calculate the factorial of a given number n using tail recursion. Parameters: n (int): The number to calculate the factorial for. accumulator (int): The accumulator to store intermediate results. Returns: int: The factorial of the number n. if n == 0 or n == 1: return accumulator else: return factorial_tail_recursion(n - 1, n * accumulator)"},{"question":"Write a function to calculate the nth Fibonacci number. The function should be efficient and use a loop to avoid recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to check if a number is prime. In your function, first check if the number is less than 2, in which case return False. Then, iterate from 2 to the square root of the number and check if the number is divisible by any of these numbers. If it is divisible, return False; otherwise, return True.","solution":"import math def is_prime(n): Returns True if n is a prime number, else False. if n < 2: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True"},{"question":"Write a function to find the Runner-Up (second highest) number in a list of integers. If there is no runner-up number, return \`None\`.","solution":"def find_runner_up(arr): Returns the runner-up number (second highest) in the list of integers. If there is no runner-up, return None. if len(arr) < 2: return None first = second = float('-inf') for num in arr: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a function to calculate the Levenshtein distance between two strings. The Levenshtein distance is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other.","solution":"def levenshtein_distance(s1, s2): Calculate the Levenshtein distance between two strings s1 and s2. if len(s1) == 0: return len(s2) if len(s2) == 0: return len(s1) matrix = [[0 for n in range(len(s2) + 1)] for m in range(len(s1) + 1)] for i in range(len(s1) + 1): matrix[i][0] = i for j in range(len(s2) + 1): matrix[0][j] = j for i in range(1, len(s1) + 1): for j in range(1, len(s2) + 1): if s1[i - 1] == s2[j - 1]: cost = 0 else: cost = 1 matrix[i][j] = min(matrix[i - 1][j] + 1, # deletion matrix[i][j - 1] + 1, # insertion matrix[i - 1][j - 1] + cost) # substitution return matrix[len(s1)][len(s2)]"},{"question":"Write a function to return the n-th element of the Fibonacci sequence.","solution":"def fibonacci(n): Returns the n-th element of the Fibonacci sequence. Parameters: n (int): The position in the Fibonacci sequence (0-indexed) Returns: int: The n-th element of the Fibonacci sequence if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") a, b = 0, 1 for _ in range(n): a, b = b, a + b return a"},{"question":"Write a function to find the missing number in a sequence from 1 to n.","solution":"def find_missing_number(sequence): Returns the missing number in a sequence from 1 to n. :param sequence: list of int :return: int n = len(sequence) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(sequence) return expected_sum - actual_sum"},{"question":"Write a function to calculate the sum of the first N natural numbers. Here, N is a positive integer provided as input. Please note that you should implement the function using a recursion approach.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers using recursion. if n <= 1: return n else: return n + sum_natural_numbers(n - 1)"},{"question":"Write a function to check whether a given graph has a proper vertex coloring where each color is used for a single vertex, and no two adjacent vertices share the same color. The function should return true if such a coloring can be achieved, and false otherwise.","solution":"def is_proper_vertex_coloring(graph, colors): Checks if the given colors represent a proper vertex coloring for the given graph. Parameters: graph (dict): A dictionary representing an undirected graph, where keys are vertices and values are lists of adjacent vertices. colors (dict): A dictionary representing the colors of the vertices, where keys are vertices and values are their colors. Returns: bool: True if the graph is properly colored, False otherwise. for vertex, neighbors in graph.items(): for neighbor in neighbors: if colors[vertex] == colors[neighbor]: return False return True"},{"question":"Write a function to solve the Tower of Hanoi problem in Python.","solution":"def tower_of_hanoi(n, source, target, auxiliary, moves=None): Solves the Tower of Hanoi problem. Params: - n (int): Number of disks - source (str): The rod from which to move the disks - target (str): The rod to which to move the disks - auxiliary (str): The rod to use as auxiliary storage - moves (list): List to record the moves made (optional) Returns: - list: a list of tuples, each of which represents a move if moves is None: moves = [] if n > 0: # Move n-1 disks from source to auxiliary, so they are out of the way tower_of_hanoi(n-1, source, auxiliary, target, moves) # Move the nth disk from source to target moves.append((source, target)) # Move the n-1 disks that we left on auxiliary to target tower_of_hanoi(n-1, auxiliary, target, source, moves) return moves"},{"question":"Write a function to find the largest number in an array. Implement the function in Python.","solution":"def find_largest_number(arr): Returns the largest number in an array. :param arr: List[int] - list of integers :return: int - the largest number in the array if not arr: return None largest = arr[0] for number in arr: if number > largest: largest = number return largest"},{"question":"Write a function to generate all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(limit): Generates all prime numbers up to the provided limit using the Sieve of Eratosthenes algorithm. Args: limit: An integer representing the upper bound (inclusive) for generating prime numbers. Returns: A list of prime numbers up to the limit. if limit < 2: return [] # Initialize a list to track prime numbers is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= limit: if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 return [p for p in range(limit + 1) if is_prime[p]]"},{"question":"Write a function to sort a list of strings using a custom sorting algorithm called \\"Bubble Sort\\". Bubble Sort is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def bubble_sort_strings(strings): Sorts a list of strings using the Bubble Sort algorithm. Parameters: strings (list): A list of strings to be sorted. Returns: list: The sorted list of strings. n = len(strings) for i in range(n): swapped = False for j in range(0, n - i - 1): if strings[j] > strings[j + 1]: strings[j], strings[j + 1] = strings[j + 1], strings[j] swapped = True if not swapped: break return strings"},{"question":"Write a function to return the reverse of a given string. The function should take a single string as an argument and return the string in reverse order. For example, if the input string is \\"hello\\", the function should return \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the given string. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to calculate the sum of even numbers in an array. Here's an example array: [2, 5, 8, 11, 13, 16].","solution":"def sum_of_even_numbers(array): Returns the sum of even numbers in the given array. return sum(number for number in array if number % 2 == 0)"},{"question":"Write a function to find the Nth Fibonacci number using a bottom-up iterative approach. The function should be optimized for space complexity.","solution":"def nth_fibonacci(n): Returns the Nth Fibonacci number using a bottom-up iterative approach. The space complexity of the solution is optimized to O(1). if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to find the maximum number of vowels that can be removed from a string to form a substring of length \`k\`.","solution":"def max_vowels_removed(s, k): Returns the maximum number of vowels that can be removed from a string to form a substring of length k. Parameters: s (str): The input string. k (int): The length of the desired substring. Returns: int: The maximum number of vowels that can be removed. vowels = set('aeiouAEIOU') max_vowels = 0 current_vowels = 0 # Count vowels in the first window for i in range(k): if s[i] in vowels: current_vowels += 1 max_vowels = current_vowels # Use sliding window to count vowels in subsequent substrings for i in range(k, len(s)): if s[i - k] in vowels: current_vowels -= 1 if s[i] in vowels: current_vowels += 1 max_vowels = max(max_vowels, current_vowels) return max_vowels"},{"question":"Write a function to return the longest increasing subsequence (LIS) in a given list of integers. The function should return the LIS with the largest sum. If there are multiple subsequences with the same length and largest sum, return any one of them.","solution":"def longest_increasing_subsequence(arr): This function returns the longest increasing subsequence (LIS) in a given list of integers. The LIS returned should have the largest sum. n = len(arr) if n == 0: return [] # dp will store the increasing subsequences ending at each index and sum for comparison dp = [[(arr[i], [arr[i]])] for i in range(n)] for i in range(1, n): for j in range(i): if arr[i] > arr[j]: for length, sequence in dp[j]: new_length = length + arr[i] dp[i].append((new_length, sequence + [arr[i]])) # Extracting the LIS with the largest sum max_sum, max_seq = max((max(dp[k], key=lambda x: (len(x[1]), x[0]))) for k in range(n)) return max_seq"},{"question":"Write a function to find the minimum element in a given array of integers. The function should return the minimum integer in the array.","solution":"def find_minimum(arr): Returns the minimum element in a given array of integers. If the array is empty, return None. if not arr: return None min_element = arr[0] for num in arr[1:]: if num < min_element: min_element = num return min_element"},{"question":"Write a function to find the smallest positive integer that is evenly divisible by all numbers from 1 to n.","solution":"from math import gcd def lcm(a, b): Returns the Least Common Multiple (LCM) of two integers a and b. return a * b // gcd(a, b) def smallest_multiple(n): Returns the smallest positive integer that is evenly divisible by all numbers from 1 to n. if n < 1: return None multiple = 1 for i in range(1, n + 1): multiple = lcm(multiple, i) return multiple"},{"question":"Write a function to calculate the number of occurrences of a specific character in a string. The function should take two parameters: the string and the character to search for. The function should return the total count of the character's occurrences. If the character is not found, the function should return 0.","solution":"def count_character_occurrences(s, c): Returns the number of occurrences of a specific character in a string. Parameters: s (str): The string to search within. c (str): The character to search for. Returns: int: The number of occurrences of the character in the string. return s.count(c)"},{"question":"Write a function to find the two numbers which sum to target number FindTwoNumbers which takes an integer array and a target number as input, and returns the indexes of two numbers such that they add up to a specific target. If no such two numbers exist, return null.","solution":"def find_two_numbers(nums, target): Finds two numbers in the list \`nums\` that sum up to \`target\` and returns their indices. If no such numbers exist, returns None. Parameters: nums (list): List of integers. target (int): Target sum. Returns: tuple: A tuple of two indices of the numbers that add up to \`target\`. Returns None if no such numbers exist. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"Write a function to find and return the first repeated element in an array of integers. The array can contain duplicates or single elements, and it may or may not be sorted. Make sure your function handles these cases effectively.","solution":"def first_repeated_element(arr): Returns the first repeated element in an array of integers. If no element is repeated, returns None. :param arr: List of integers :return: The first repeated integer or None seen = set() for num in arr: if num in seen: return num seen.add(num) return None"},{"question":"Write a function to insert an element into a sorted linked list while maintaining the sorted order. How can I ensure that the insertion maintains the order?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insert_sorted(head: ListNode, val: int) -> ListNode: Inserts a new node with the given value into the sorted linked list while maintaining the sorted order. new_node = ListNode(val) if not head or val < head.val: new_node.next = head return new_node current = head while current.next and current.next.val < val: current = current.next new_node.next = current.next current.next = new_node return head"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped around. The circularly wrapped array means that the start of the array is directly connected to the end of the array, forming a circular structure.","solution":"def max_subarray_sum_circular(arr): Returns the maximum sum of a subarray in a circularly wrapped array. # Step 1: Find the maximum subarray sum using Kadane's algorithm (non-circular case). def kadane(arr): max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(arr) # Step 2: Find the maximum sum that includes wrapping. max_wrap = 0 total_sum = 0 for i in range(len(arr)): total_sum += arr[i] arr[i] = -arr[i] # Invert the array for finding the min subarray sum. # Step 3: Find the max subarray sum of the inverted array. max_wrap = total_sum + kadane(arr) # Handle the case when all numbers are negative. if max_wrap == 0 and max_kadane < 0: return max_kadane # Return the maximum of the non-wrapped subarray sum and the wrapped subarray sum. return max(max_kadane, max_wrap)"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a given array of integers. This is known as Kadane's algorithm. Implement this in Python.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within the given array of integers. Parameters: nums (list of int): The list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 current_max = nums[0] global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a function to calculate the Fibonacci number at a given position in the sequence without using recursion. The solution should be efficient for large numbers.","solution":"def fibonacci(n): Returns the Fibonacci number at the given position n. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to calculate the factorial of a number using recursion. Make sure your function can handle large numbers without overflowing, which might require using a data type that can handle large integers.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. If n is 0 or 1, returns 1 as the factorial of these numbers is 1. Otherwise, returns n multiplied by the factorial of n-1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n-1)"},{"question":"Write a function to calculate the sum of digits from 1 to n. For example, if n is 5, the function should return 1+2+3+4+5=15.","solution":"def sum_of_digits(n): Returns the sum of all digits from 1 to n. return sum(range(1, n + 1))"},{"question":"Write a function to reverse a given string in Python. You should do it in such a way that the function does not return a new string (i.e., it should modify the original string in-place). Explain each step of your process.","solution":"def reverse_string_in_place(s): Reverses a given string by converting it to a list, reversing the list in-place, and then converting it back to a string. Params: s (str): Input string to be reversed Returns: str: The reversed string # Convert the string to a list mutable_list = list(s) # Get the length of the list n = len(mutable_list) # Use two pointers to reverse the list in-place left, right = 0, n - 1 while left < right: mutable_list[left], mutable_list[right] = mutable_list[right], mutable_list[left] left += 1 right -= 1 # Convert the list back to a string and return it return ''.join(mutable_list)"},{"question":"Write a function to find the length of the longest common subsequence (LCS) between two strings \`text1\` and \`text2\`. The LCS problem is a classic computer science problem dealing with finding the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block) in both input strings.","solution":"def longest_common_subsequence(text1, text2): Returns the length of the longest common subsequence between text1 and text2. m, n = len(text1), len(text2) # Initialize a (m+1) x (n+1) matrix with all zeros dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a function to check if a given list of tuples is a valid sequence of parentheses. The function should return True if every opening parenthesis '(' has a corresponding closing parenthesis ')' and they are correctly nested. For example, '(()())' is a valid sequence, but '())(' is not.","solution":"def is_valid_parentheses_sequence(sequence): Check if a given list of tuples is a valid sequence of parentheses. Args: sequence (list of tuples): Each tuple contains start (int) and end (int) indices of parentheses. Returns: bool: True if the sequence of tuples represents a valid sequence of parentheses, else False. stack = [] for char in sequence: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function to find the middle element of a singly linked list. If the list has an even number of elements, return the second middle element. The function should raise a ValueError if the input list is None.","solution":"class ListNode: def __init__(self, value=0, next_node=None): self.value = value self.next = next_node def find_middle_element(head): Finds the middle element of a singly linked list. If the list has an even number of elements, returns the second middle element. :param head: The head of the singly linked list :return: The value of the middle element :raises ValueError: If the input list is None if head is None: raise ValueError(\\"Input list is None\\") slow_ptr = head fast_ptr = head while fast_ptr is not None and fast_ptr.next is not None: slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next return slow_ptr.value"},{"question":"Write a function to find the most frequent character in a given string. If there are multiple characters with the maximum frequency, return the one that comes first in the string.","solution":"def most_frequent_character(s): Returns the most frequent character in the given string. If there are multiple characters with the same frequency, the one that appears first in the string is returned. if not s: return '' char_count = {} max_count = 0 most_frequent_char = None for char in s: char_count[char] = char_count.get(char, 0) + 1 if char_count[char] > max_count or (char_count[char] == max_count and most_frequent_char is None): max_count = char_count[char] most_frequent_char = char return most_frequent_char"},{"question":"Write a function to find the number of islands in a 2D grid where '1' represents land and '0' represents water. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.","solution":"def num_islands(grid): Returns the number of islands in the given 2D grid. if not grid: return 0 def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == '0': return grid[x][y] = '0' # Mark the land as visited by setting it to '0' dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) islands_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': islands_count += 1 dfs(i, j) return islands_count"},{"question":"Write a function to calculate the area of a circle given its radius. The function should take one parameter, the radius, and return the area of the circle. Use the formula A = πr^2, where A is the area and r is the radius. Use the math module for the value of π.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. A = πr^2 :param radius: The radius of the circle :return: Area of the circle if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius * radius"},{"question":"Write a function to reverse the order of words in a string without using any external libraries or built-in string manipulation functions.","solution":"def reverse_words(input_string): Reverses the order of words in the input string. words = [] word_start = None for i, char in enumerate(input_string): if char == \\" \\": if word_start is not None: words.append(input_string[word_start:i]) word_start = None else: if word_start is None: word_start = i if word_start is not None: words.append(input_string[word_start:]) reversed_words = [] for i in range(len(words) - 1, -1, -1): reversed_words.append(words[i]) return \\" \\".join(reversed_words)"},{"question":"Write a function to sort an array of integers in ascending order. Use the bubble sort algorithm, which repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the element found is greater than the next element arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. The Euclidean algorithm is an efficient method for computing the greatest common divisor (GCD) of two numbers, which is the largest positive integer that divides both of them without leaving a remainder. The algorithm is based on the principle that the GCD of two numbers does not change if the larger number is replaced by its difference with the smaller number.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Write a function to convert JSON data to a Python dictionary.","solution":"import json def json_to_dict(json_data): Converts JSON data to a Python dictionary. Args: json_data (str): A JSON string. Returns: dict: The corresponding Python dictionary. return json.loads(json_data)"},{"question":"Write a function to calculate the Fibonacci sequence recursively and provide a brief explanation of how it works.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is defined as: F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1 if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to calculate the factorial of a given non-negative integer.","solution":"def factorial(n): Returns the factorial of the non-negative integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to check if an integer is against a specific pattern. The pattern is that the integer must be composed entirely of even digits.","solution":"def is_even_digit_pattern(n): Checks if the given integer n is composed entirely of even digits. Args: n (int): The integer to check. Returns: bool: True if the integer is composed entirely of even digits, False otherwise. even_digits = {'0', '2', '4', '6', '8'} for digit in str(abs(n)): # Convert number to string and ignore negative sign if present if digit not in even_digits: return False return True"},{"question":"Write a function to program a robot to clean a grid-based floor using Breadth First Search (BFS) algorithm. The robot starts at a designated point and needs to visit all cells可达cells in the grid that are reachable from its starting point. The grid cells are represented by a 2D list where 0 indicates an empty cell and 1 indicates an obstacle. The robot can move up, down, left, and right.","solution":"from collections import deque def clean_floor(grid, start): Cleans a grid-based floor using Breadth First Search (BFS) algorithm. Args: grid (list of list of int): 2D list representing the grid (0 = empty, 1 = obstacle) start (tuple of int): Starting point (row, col) of the robot Returns: list of list of int: The grid with cleaned cells marked as 2 rows, cols = len(grid), len(grid[0]) queue = deque([start]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: row, col = queue.popleft() if grid[row][col] == 0: grid[row][col] = 2 # Mark as cleaned for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 0: queue.append((new_row, new_col)) return grid"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should take two parameters: the number to calculate the factorial for, and a accumulator that is used to keep track of the current result during the recursive calls. The function should return the factorial of the given number.","solution":"def factorial(n, acc=1): Returns the factorial of n using recursion. Parameters: n (int): The number to calculate the factorial for. acc (int): The accumulator used to keep track of the current result during the recursive calls. Returns: int: The factorial of the given number. if n <= 1: return acc else: return factorial(n - 1, n * acc)"},{"question":"Write a function to evaluate the performance of an existing ArgumentException class in .NET. The function should take as input the number of tests to run, the class name of the ArgumentException, and the number of scenarios where the argument might be valid or invalid. It will evaluate the performance under both scenarios and return the average execution times of valid and invalid test cases.","solution":"import time import random def evaluate_argument_exception_performance(num_tests, exception_class, num_scenarios): Evaluate the performance of the ArgumentException class in .NET. Parameters: num_tests (int): Number of tests to run exception_class (class): The ArgumentException class num_scenarios (int): Number of scenarios where the argument might be valid or invalid Returns: tuple: Average execution time of valid and invalid test cases valid_execution_times = [] invalid_execution_times = [] for _ in range(num_tests): # Randomly decide if the scenario is valid or invalid is_valid = random.choice([True, False]) start_time = time.time() try: if is_valid: # Simulate valid scenario pass # Replace with a valid operation else: # Simulate invalid scenario raise exception_class(\\"Invalid argument\\") except exception_class: pass end_time = time.time() - start_time if is_valid: valid_execution_times.append(end_time) else: invalid_execution_times.append(end_time) avg_valid_time = sum(valid_execution_times) / len(valid_execution_times) if valid_execution_times else 0 avg_invalid_time = sum(invalid_execution_times) / len(invalid_execution_times) if invalid_execution_times else 0 return avg_valid_time, avg_invalid_time"},{"question":"Write a function to reverse the order of words in a string, but keep the words themselves in their original order. For example, if the input is \\"The quick brown fox jumps over the lazy dog\\", the output should be \\"dog lazy the over jumps fox brown quick The\\". Here, the words are separated by spaces.","solution":"def reverse_words_order(s): Reverses the order of words in a string, but keeps the words themselves in their original order. Parameters: s (str): The input string with words separated by spaces. Returns: str: The string with the order of words reversed. words = s.split() # Split the string by spaces into words words.reverse() # Reverse the list of words reversed_s = ' '.join(words) # Join the reversed list of words with spaces return reversed_s"},{"question":"Write a function to check if a given string contains at least one vowel (a, e, i, o, u) or any other alphabetic character.","solution":"def contains_vowel_or_alphabetic(s): Checks if the given string contains at least one vowel (a, e, i, o, u) or any other alphabetic character. Parameters: s (str): The string to check. Returns: bool: True if the string contains at least one vowel or alphabetic character, False otherwise. vowels = set(\\"aeiouAEIOU\\") for char in s: if char.isalpha() and (char in vowels or char.isalpha()): return True return False"},{"question":"Write a function to implement the quicksort algorithm.","solution":"def quicksort(arr): Sorts the input list using the quicksort algorithm. Args: arr (list): The list to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to reverse a string in Python, in place. The function should take a single string argument and reverse the sequence of characters in the string without creating a new string.","solution":"def reverse_string_in_place(s): Reverses the given string in place. # Convert string to a list to allow in-place modifications char_list = list(s) # Two-pointer technique to reverse the characters in place left, right = 0, len(char_list) - 1 while left < right: # Swap the elements char_list[left], char_list[right] = char_list[right], char_list[left] left += 1 right -= 1 # Convert the list back to a string return ''.join(char_list)"},{"question":"Write a function to find the second smallest number in an array. The function should handle cases where the array has duplicate numbers. For example, given the array \`[5, 3, 9, 3, 12]\`, the function should return \`3\`. If the array has less than two unique elements, the function should return \`None\`.","solution":"def second_smallest(arr): Returns the second smallest unique number in the array. If there are fewer than two unique numbers, returns None. unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to find the maximum sum of a given list of integers, considering both positive and negative numbers. The function should handle edge cases, such as an empty list or a list with only one element. The solution should be optimized for large lists.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray in the given list of integers. Implements Kadane's Algorithm for an O(n) solution. Parameters: nums (list): A list of integers, which can be both positive and negative. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to determine the number of days in a given month and year considering leap years. You should account for the different lengths of each month, and the fact that leap years have February with 29 days instead of the usual 28.","solution":"def days_in_month(year, month): Returns the number of days in a given month and year considering leap years. Parameters: - year (int): The year to consider (e.g., 2023) - month (int): The month to consider (1 for January, 2 for February, etc.) Returns: - int: The number of days in the specified month of the specified year. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") # List of days in each month for a common year days_in_common_year = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Adjust February days in case it's a leap year if month == 2 and is_leap_year(year): return 29 return days_in_common_year[month - 1] def is_leap_year(year): Determines whether a given year is a leap year. Parameters: - year (int): The year to check (e.g., 2023) Returns: - bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"Write a function to find the minimum number of squares that sum up to a given number. For example, given the number 12, the minimum number of squares is 3 (4, 4, and 4), and for the number 13, the minimum number of squares is 2 (4, 9).","solution":"import math def min_squares(n): Return the minimum number of squares that sum up to a given number. Args: n (int): The given number. Returns: int: The minimum number of squares. if n <= 0: return 0 # Initialize dp array where dp[i] will store the minimum number of squares # required for number i. dp = [float('inf')] * (n+1) # Base case dp[0] = 0 # Iterate from 1 to n for i in range(1, n+1): # For each number, check all smaller perfect squares. j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]"},{"question":"Write a function to solve the 'Merge Sorted Array' problem. In this problem, you are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and nums1 has enough space at the end to hold the additional elements from nums2. Merge nums1 and nums2 into a single sorted array. The function should solve this by modifying nums1 in-place, without making a copy of nums1.","solution":"def merge(nums1, m, nums2, n): Merges two sorted arrays \`nums1\` and \`nums2\` into \`nums1\` in-place. Parameters: - nums1: List[int], a sorted array with m elements followed by n empty spaces. - m: int, number of elements in nums1, excluding the trailing empty spaces. - nums2: List[int], a sorted array with n elements. - n: int, number of elements in nums2. # Indexes for nums1, nums2, and the merged array i = m - 1 j = n - 1 k = m + n - 1 # Iterate while there are elements in nums2 while j >= 0: if i >= 0 and nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1"},{"question":"Write a function to calculate the factorial of a given number. The function should be able to handle numbers from 0 to 20. If the input number is negative, the function should return -1. If the input number is 0, the function should return 1. For other numbers, the function should return the factorial of the number.","solution":"def factorial(n): Returns the factorial of a given number n. If n is negative, returns -1. If n is 0, returns 1. For other numbers, returns the factorial of the number. if n < 0: return -1 elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to calculate the sum of elements in an array. The function should take an array as input and return the sum of its elements.","solution":"def sum_array(arr): Returns the sum of elements in the array. Args: arr: List of numbers. Returns: Sum of the elements in the list. return sum(arr)"},{"question":"Write a function to solve a given Sudoku puzzle, taking a 9x9 2D list as input and modifying it in-place to represent the solved puzzle.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle in-place. Parameters: board (list of lists): A 9x9 2D list representing the Sudoku board. Returns: bool: True if the Sudoku is solved successfully, False otherwise. def is_valid(board, row, col, num): # Check if the number is not repeated in the current row and column. for i in range(9): if board[row][i] == num or board[i][col] == num: return False # Check if the number is not repeated in the 3x3 sub-grid. start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: # 0 represents an empty cell for num in range(1, 10): # Try all numbers 1-9 if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True return solve(board)"},{"question":"Write a function to swap two even numbers \`a\` and \`b\`. The function should return the swapped values. If both \`a\` and \`b\` are odd, return \`a\` and \`b\` as they are.","solution":"def swap_even_numbers(a, b): Swaps the values of a and b if both are even. If both are odd, returns them unchanged. Args: a (int): The first number. b (int): The second number. Returns: (int, int): The swapped or unchanged values. if a % 2 == 0 and b % 2 == 0: return b, a return a, b"},{"question":"Write a function to count all distinct integers in an array.","solution":"def count_distinct_integers(arr): Returns the count of distinct integers in the array. Parameters: arr (list): A list of integers. Returns: int: Count of distinct integers. return len(set(arr))"},{"question":"Write a function to generate all combinations of a given length from a list. The function should allow duplicates to be included in the combinations. It should also be able to handle large lists efficiently and return the results in a specific format.","solution":"from typing import List, Any def combinations_with_replacement(lst: List[Any], length: int) -> List[List[Any]]: Generate all combinations of a given length from a list, allowing duplicates. :param lst: List of elements to generate combinations from. :param length: Length of each combination. :return: List of combinations with replacement. if length == 0: return [[]] if not lst: return [] result = [] def backtrack(start, comb): if len(comb) == length: result.append(comb[:]) return for i in range(start, len(lst)): comb.append(lst[i]) backtrack(i, comb) comb.pop() backtrack(0, []) return result"},{"question":"Write a function to find the character that appears the most frequently in a given string and return that character. If there are multiple characters with the same highest frequency, return any one of them.","solution":"def most_frequent_char(s): Returns the character that appears the most frequently in the given string. If there are multiple characters with the same highest frequency, returns any one of them. if not s: return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Get the character with the maximum frequency max_freq_char = max(char_count, key=char_count.get) return max_freq_char"},{"question":"Write a function to detect and return the starting index of a cycle in a singly linked list, if one exists. If no cycle exists, return -1.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle_start(head): Detects the starting index of a cycle in a singly linked list. Returns the starting ListNode of the cycle if a cycle exists, otherwise, returns None. slow = head fast = head # Detect if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: # No cycle found return None # Cycle detected, now find the start node slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to find the common elements in two sorted arrays.","solution":"def find_common_elements(arr1, arr2): Returns the common elements in two sorted arrays. i, j = 0, 0 common_elements = [] while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: common_elements.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return common_elements"},{"question":"Write a function to convert a given integer \`n\` to its binary representation as a string. However, the returned string should have a prefix '0b' indicating that it is a binary number.","solution":"def int_to_bin(n): Converts an integer to its binary representation with a prefix '0b'. Args: n (int): The integer to convert. Returns: str: The binary representation of the integer with prefix '0b'. return bin(n)"},{"question":"Write a function to calculate the total cost of a shopping cart. Each item in the cart is represented as a dictionary with keys 'name', 'quantity', and 'price_per_item'. The function should sum up the total cost of all items in the cart.","solution":"def calculate_total_cost(cart): Calculate the total cost of a shopping cart. Parameters: cart (list of dicts): Each dictionary represents an item with keys 'name', 'quantity', and 'price_per_item'. Returns: float: The total cost of all items in the cart. total_cost = 0.0 for item in cart: total_cost += item['quantity'] * item['price_per_item'] return total_cost"},{"question":"Write a function to evaluate a postfix expression without using the stack.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression without using an explicit stack. Args: expression (str): A string containing a space-separated postfix expression. Returns: int/float: The result of the postfix expression evaluation. def apply_operator(operand1, operand2, operator): if operator == '+': return operand1 + operand2 elif operator == '-': return operand1 - operand2 elif operator == '*': return operand1 * operand2 elif operator == '/': return operand1 / operand2 tokens = expression.split() values = [] for token in tokens: if token in \\"+-*/\\": b = values.pop() a = values.pop() result = apply_operator(a, b, token) values.append(result) else: values.append(float(token)) return values[0]"},{"question":"Write a function to calculate the sum of all elements in a matrix. The function should take a 2D list of integers as input and return the sum of all elements in the matrix.","solution":"def sum_matrix(matrix): Returns the sum of all elements in the given 2D list (matrix). :param matrix: 2D list of integers :return: Integer sum of all elements total = 0 for row in matrix: total += sum(row) return total"},{"question":"Write a function to calculate the Fibonacci sequence in Python. The function should be able to calculate the nth Fibonacci number both iteratively and recursively. Provide examples for both methods.","solution":"def fibonacci_iterative(n): Calculate the nth Fibonacci number iteratively. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def fibonacci_recursive(n): Calculate the nth Fibonacci number recursively. if n <= 0: return 0 elif n == 1: return 1 return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"Write a function to find the sum and product of all integers in a list using Python. The function should also handle negative numbers and zeros.","solution":"def sum_and_product(int_list): Returns a tuple with the sum and product of all integers in the list. Parameters: int_list (list): A list of integers Returns: tuple: A tuple containing the sum and product of the integers total_sum = sum(int_list) total_product = 1 for num in int_list: total_product *= num return (total_sum, total_product)"},{"question":"Write a function to find a duplicate number in an array of integers where each integer is in the range from 1 to n (n = size of the array). The function should return the duplicate number without using any extra space and with a time complexity of O(n).","solution":"def find_duplicate(nums): Finds a duplicate number in an array of integers where each integer is in the range from 1 to n. Function uses no extra space and has O(n) time complexity. Args: nums (list): A list of integers Returns: int: The duplicate number # Using Floyd's Tortoise and Hare (Cycle Detection) slow = fast = nums[0] # Phase 1: Finding intersection point while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Phase 2: Finding entrance to cycle fast = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Write a function to check if a given string \`s\` with two distinct characters can be made into a palindrome by removing exactly one character.","solution":"def can_form_palindrome_by_removing_one(s): def is_palindrome(s): return s == s[::-1] for i in range(len(s)): if is_palindrome(s[:i] + s[i+1:]): return True return False"},{"question":"Write a function to calculate the Hamming Distance between two strings.","solution":"def hamming_distance(str1, str2): Returns the Hamming Distance between two strings. The Hamming Distance is defined only for strings of equal length. This function assumes that both strings are of equal length. if len(str1) != len(str2): raise ValueError(\\"Strings must be of the same length\\") return sum(c1 != c2 for c1, c2 in zip(str1, str2))"},{"question":"Write a function to find the number that appears most frequently in an array. If there are multiple numbers with the same frequency, return the smallest one. How would you implement this in Python?","solution":"from collections import Counter def most_frequent_number(arr): Finds the number that appears most frequently in an array. If there are multiple numbers with the same frequency, returns the smallest one. :param arr: List of integers :return: Integer that appears most frequently if not arr: return None # Return None if input array is empty count = Counter(arr) max_frequency = max(count.values()) most_frequent_numbers = [num for num, freq in count.items() if freq == max_frequency] return min(most_frequent_numbers)"},{"question":"Write a function to calculate factorial of a number using recursion. The function should be iterative in terms of function calls, meaning that the recursion depth should not be too high for very large numbers. To achieve this, you might use an accumulator parameter to help manage the recursive process without increasing the call stack depth too much.","solution":"def factorial(n, accumulator=1): Returns the factorial of n using tail recursion with an accumulator. :param n: The number to calculate the factorial for. :param accumulator: The accumulated result of the factorial calculation. :return: The factorial of n. if n <= 1: return accumulator else: return factorial(n - 1, n * accumulator)"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number n. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. For example, the first six elements of the sequence are 0, 1, 1, 2, 3, 5. if n is less than 0, return an error message.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth number. If n is less than 0, returns an error message. if n < 0: return \\"Error: n must be a non-negative integer.\\" sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write a function to perform bubble sort on an array of integers. The function should take an integer array as input and return the sorted array. Bubble sort should be implemented using recursion.","solution":"def bubble_sort_recursive(arr, n=None): Perform bubble sort recursively on an array of integers. Args: - arr: list of integers to sort - n: int, length of the part of the array being sorted Returns: - list of sorted integers if n is None: n = len(arr) # Base case if n == 1: return arr # One pass of bubble sort. # After this pass, the largest element is moved to the end. for i in range(n - 1): if arr[i] > arr[i + 1]: # swap arr[i] and arr[i + 1] arr[i], arr[i + 1] = arr[i + 1], arr[i] # Recursively call bubble_sort_recursive for the rest of the elements return bubble_sort_recursive(arr, n - 1)"},{"question":"Write a function to count the number of '1' bits in the binary representation of an integer. This function should be efficient and work for both positive and negative integers. Additionally, provide a way to test your function with different inputs.","solution":"def count_1_bits(n): Returns the number of '1' bits in the binary representation of an integer n. Handles both positive and negative integers. # For negative numbers, convert \`n\` to its 2's complement binary representation if n < 0: n = n + (1 << 32) # Convert to binary, remove the '0b' prefix and count the '1's return bin(n).count('1')"},{"question":"Write a function to calculate the sum of prime numbers up to a given number, \`n\`. For example, if \`n\` is 10, the function should return the sum of 2, 3, 5, and 7, which is 17. If \`n\` is 5, the sum should be 2 + 3 + 5 = 10.","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_of_primes(n): Returns the sum of all prime numbers up to and including n. return sum(num for num in range(2, n + 1) if is_prime(num))"},{"question":"Write a function to reverse a string without using any built-in string reversal functions. Additionally, your function should preserve the case of each character (i.e., uppercase remains uppercase, lowercase remains lowercase).","solution":"def reverse_string(s): Reverses the input string without using any built-in string reversal functions. Preserves the case of each character. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to open a file, read its contents, and print them. If the file is not found, handle the exception gracefully by printing an error message.","solution":"def read_and_print_file(filename): Opens a file, reads its contents, and prints them. If the file is not found, prints an error message. Args: filename (str): The name of the file to read. try: with open(filename, 'r') as file: contents = file.read() print(contents) except FileNotFoundError: print(f\\"Error: {filename} not found.\\")"},{"question":"Write a function to calculate the sum of all elements in a nested list.","solution":"def sum_nested_list(nested_list): Calculate the sum of all elements in a nested list. Parameters: nested_list (list): A list which may contain more lists and numbers. Returns: int/float: Sum of all numbers in the nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a function to sort an array of numbers from smallest to largest using the Quick Sort algorithm.","solution":"def quick_sort(arr): Sorts an array of numbers from smallest to largest using the Quick Sort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a function to _flip_matrix(matrix) that receives a matrix as input and returns the flipped version of that matrix. The flipped version is defined as the matrix where each row is reversed and the order of the rows is also reversed.","solution":"def flip_matrix(matrix): Receives a matrix as input and returns the flipped version of that matrix. The flipping includes reversing each row and reversing the order of rows. return [row[::-1] for row in matrix[::-1]]"},{"question":"Write a function to scan a large list of integers and return the top N numbers in sorted order. You cannot use the \`sort\` or \`sorted\` function, and you should implement your own sorting algorithm. Please use Python to solve this problem.","solution":"def top_n_numbers(nums, n): Returns the top N numbers from the list in sorted order. Implements a custom sorting algorithm (selection sort) to achieve this. if n <= 0: return [] # Implementing selection sort def selection_sort(arr): for i in range(len(arr)): min_index = i for j in range(i + 1, len(arr)): if arr[j] < arr[min_index]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr # Initialize the top_n_list with the first n elements top_n_list = nums[:n] top_n_list = selection_sort(top_n_list) for num in nums[n:]: if num > top_n_list[0]: top_n_list[0] = num top_n_list = selection_sort(top_n_list) return top_n_list"},{"question":"Write a function to count the number of in-order predecessor and successor for each node in a binary tree. In-order predecessor is the largest node smaller than the current node, and in-order successor is the smallest node larger than the current node. The function should return a map where the keys are the node values and the values are tuples representing the in-order predecessor and successor values.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def find_inorder_predecessors_and_successors(root): Returns a map where the keys are the node values and the values are tuples representing the in-order predecessor and successor values. if not root: return {} inorder_list = [] def inorder_traversal(node): if node: inorder_traversal(node.left) inorder_list.append(node.value) inorder_traversal(node.right) inorder_traversal(root) result = {} for index, value in enumerate(inorder_list): predecessor = inorder_list[index - 1] if index > 0 else None successor = inorder_list[index + 1] if index < len(inorder_list) - 1 else None result[value] = (predecessor, successor) return result"},{"question":"Write a function to find the minimum element in an array. What should be the time complexity of this function if it's implemented correctly?","solution":"def find_minimum(arr): Returns the minimum element in an array. if not arr: raise ValueError(\\"Array is empty\\") min_element = arr[0] for element in arr[1:]: if element < min_element: min_element = element return min_element # Time complexity: O(n), where n is the length of the array"},{"question":"Write a function to implement a modified merge sort algorithm. The function should sort an array in ascending order, but with a slight modification: if two elements are the same, the one that appears first in the original array should appear first in the sorted array. This is known as a stable sort. Additionally, the function should not use any additional space beyond what is required to store the original array.","solution":"def modified_merge_sort(arr): Perform a stable merge sort on the input array. if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] # Sort the halves modified_merge_sort(left_half) modified_merge_sort(right_half) i, j, k = 0, 0, 0 # Merge the halves in a stable manner while i < len(left_half) and j < len(right_half): if left_half[i] <= right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 # If there's any left unmerged elements in left_half while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 # If there's any left unmerged elements in right_half while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 return arr"},{"question":"Write a function to reverse a linked list. The function should take the head of the linked list as its argument and return the new head of the reversed list. Assume the linked list is represented using a class with \`value\` and \`next\` attributes.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. Parameters: head (ListNode): Head node of the linked list Returns: ListNode: New head of the reversed linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to calculate the harmonic mean of \`n\` numbers in a list.","solution":"def harmonic_mean(numbers): Calculate the harmonic mean of a list of numbers. Harmonic mean is defined as: n / (sum(1/x for x in numbers)), where n is the number of elements in the numbers list. :param numbers: List of numbers. :return: Harmonic mean of the provided numbers. :raises ValueError: If numbers is empty or contains zero values. if not numbers: raise ValueError(\\"The list of numbers must not be empty.\\") if any(n == 0 for n in numbers): raise ValueError(\\"The list of numbers must not contain zero values.\\") n = len(numbers) return n / sum(1/x for x in numbers)"},{"question":"Write a function to rotate a 2D array (matrix) by 90 degrees clockwise. How would you go about this?","solution":"def rotate_matrix(matrix): Rotates a given NxN 2D matrix by 90 degrees clockwise. :param matrix: List[List[int]] - A 2D list (matrix) :return: List[List[int]] - The rotated 2D list (matrix) if not matrix or not matrix[0]: return [] n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a function to check if a given binary tree is a binary search tree (BST) or a binary search tree in a strict sense.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_bst(root, left=float('-inf'), right=float('inf')): Checks if the given binary tree is a binary search tree (BST). Parameters: - root: TreeNode, the root of the binary tree - left: Float, the lower bound for the current node's value - right: Float, the upper bound for the current node's value Returns: - bool, True if the binary tree is a BST, False otherwise if root is None: return True if not (left < root.val < right): return False return is_bst(root.left, left, root.val) and is_bst(root.right, root.val, right)"},{"question":"Write a function to check if a list of numbers is sorted in ascending order. Ensure that each element in the list is less than or equal to the next one. Assume that the list is non-empty.","solution":"def is_sorted(lst): Returns True if the list is sorted in ascending order, False otherwise. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True"},{"question":"Write a function to calculate the sum of an array of integers. You can use any programming language you prefer.","solution":"def sum_of_array(arr): Returns the sum of all integers in the array. return sum(arr)"},{"question":"Write a function to reverse a linked list using recursion. What are the steps involved in the process?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a linked list using recursion. Args: head (ListNode): The head of the linked list Returns: ListNode: The new head of the reversed linked list # Base case: if head is empty or only one node, return it if not head or not head.next: return head # Recursive case: reverse the rest of the list new_head = reverse_linked_list(head.next) # Make the next node point to the current head head.next.next = head head.next = None return new_head"},{"question":"Write a function to reverse the digits of an integer. The function should handle both positive and negative integers. If the reversed integer overflows, the function should return 0. The overflow range is from INT_MIN to INT_MAX, where INT_MIN = -2^31 and INT_MAX = 2^31 - 1.","solution":"def reverse_integer(x): Reverse the digits of an integer. If the reversed integer overflows, return 0. Handles both positive and negative integers. INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if x < 0 else 1 x *= sign reversed_x = 0 while x != 0: digit = x % 10 x //= 10 if reversed_x > (INT_MAX - digit) / 10: return 0 reversed_x = reversed_x * 10 + digit return sign * reversed_x"},{"question":"Write a function to write to a file and read its contents in Python.","solution":"def write_and_read_file(file_path, content): Writes the specified content to a file, then reads it and returns the content. :param file_path: The path of the file to write to and read from. :param content: The content to write to the file. :return: The content read from the file. # Write the content to the file with open(file_path, 'w') as file: file.write(content) # Read the content from the file with open(file_path, 'r') as file: read_content = file.read() return read_content"},{"question":"Write a function to reverse a string in-place using Python. In-place reversal means no additional memory should be used except for a variable needed to perform the reversal. You must modify the string without allocating extra space for another copy of the string.","solution":"def reverse_string(s: str) -> str: Reverses a string in-place. As strings in Python are immutable, we will use a list to simulate in-place reversal. Here, we return the reversed string. # Convert string to list because strings are immutable char_list = list(s) # Initialize pointers left, right = 0, len(char_list) - 1 # Swap characters until the pointers meet in the middle while left < right: # Swap characters char_list[left], char_list[right] = char_list[right], char_list[left] # Move the pointers towards the center left += 1 right -= 1 # Convert list back to string return ''.join(char_list)"},{"question":"Write a function to take a list of integers and return a new list with duplicates removed, maintaining the original order of the list.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed, maintaining the original order. Parameters: lst (list): A list of integers. Returns: list: A list with duplicates removed, maintaining the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to find the longest palindromic substring in a given string. If there are multiple最长 palindromic substrings, return any one.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string \`s\`. n = len(s) if n == 0: return \\"\\" # Table to store the palindrome status dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True # Check for a palindrome of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True start = i max_length = length return s[start: start + max_length]"},{"question":"Write a function to generate a list of Fibonacci numbers up to a given number n. The function should return a list where each element of the list is less than or equal to n. Fibonacci numbers start with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci_up_to_n(n): Generates a list of Fibonacci numbers up to a given number n. Parameters: n (int): The upper limit for the Fibonacci sequence (inclusive). Returns: list: A list of Fibonacci numbers less than or equal to n. if n < 0: return [] fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return fib_sequence # Example use: # print(fibonacci_up_to_n(10)) # Output: [0, 1, 1, 2, 3, 5, 8]"},{"question":"Write a function to implement an in-order traversal of a binary search tree (BST) in Python.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Returns the in-order traversal of a binary search tree. result = [] def inorder(node): if node: inorder(node.left) result.append(node.val) inorder(node.right) inorder(root) return result"},{"question":"Write a function to find the minimum cost to partition an array into subarrays such that the sum of elements in each subarray is a power of two. The cost is calculated as the length of the subarray. If there is no way to partition the array as described, return -1.","solution":"def is_power_of_two(x): return x != 0 and (x & (x - 1)) == 0 def min_partition_cost(arr): n = len(arr) dp = [float('inf')] * (n + 1) dp[0] = 0 for i in range(1, n+1): current_sum = 0 for j in range(i, 0, -1): current_sum += arr[j-1] if is_power_of_two(current_sum): dp[i] = min(dp[i], dp[j-1] + (i-j+1)) return dp[n] if dp[n] != float('inf') else -1"},{"question":"Write a function to list all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. The function should take an integer n as an input and return a list of all prime numbers less than or equal to n.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Write a function to compute the number of bits required to represent an integer in binary form, including the sign bit for negative numbers.","solution":"def bits_required(n): Returns the number of bits required to represent an integer in binary form, including the sign bit for negative numbers. if n == 0: return 1 # 0 is represented by a single bit '0' if n < 0: # Negative number: convert to positive and increment bit count by 1 for the sign bit n = abs(n) return n.bit_length() + 1 # Positive number: bit length directly gives the required number of bits return n.bit_length()"},{"question":"Write a function to read a file line by line and print each line.","solution":"def read_file_line_by_line(file_path): Reads a file line by line and prints each line. with open(file_path, 'r') as file: for line in file: print(line, end='')"},{"question":"Write a function to find the first non-repeated character in a string. If there are no non-repeated characters, return -1. The function should handle both uppercase and lowercase characters. Consider 'A' and 'a' as different characters.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string s. If no such character exists, returns -1. char_count = {} # Count each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with count 1 for char in s: if char_count[char] == 1: return char return -1"},{"question":"Write a function to calculate the maximum profit that can be made by completing at most two transactions on a given list of stock prices. Each transaction consists of buying and then selling one share of the stock. Note that you cannot sell a stock before you buy one.","solution":"def max_profit_with_two_transactions(prices): if not prices: return 0 # Initialize variables for the first transaction first_buy = float('-inf') first_sell = 0 # Initialize variables for the second transaction second_buy = float('-inf') second_sell = 0 for price in prices: # For the first transaction: max profit after buying the stock first_buy = max(first_buy, -price) # For the first transaction: max profit after selling the stock first_sell = max(first_sell, price + first_buy) # For the second transaction: max profit after buying the stock again second_buy = max(second_buy, first_sell - price) # For the second transaction: max profit after selling the stock again second_sell = max(second_sell, price + second_buy) return second_sell"},{"question":"Write a function to print all permutations of a string recursively.","solution":"def permute(s, step=0, results=None): Recursively generate and return all permutations of the given string. Args: s (str): The string to permute. step (int): The current step in the permutation generation. results (list): A list to store the generated permutations. Returns: list: A list containing all permutations of the string. if results is None: results = [] if step == len(s): results.append(''.join(s)) else: for i in range(step, len(s)): # Copy the current string s_copy = [c for c in s] # Swap the current index with the step s_copy[step], s_copy[i] = s_copy[i], s_copy[step] # Recurse on the portion of the string that has not been swapped yet permute(s_copy, step + 1, results) return results"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number of terms. The sequence should be returned as a list. Also, ensure that the function handles incorrect input gracefully.","solution":"def fibonacci_sequence(terms): Returns the Fibonacci sequence up to a given number of terms. If the input is invalid (non-integer or less than 1), returns an empty list. if not isinstance(terms, int) or terms < 1: return [] sequence = [0, 1] while len(sequence) < terms: sequence.append(sequence[-1] + sequence[-2]) return sequence[:terms]"},{"question":"Write a function to decode a variable-length string. The encoded string is the last part of a URL, for example, \\"path/42/12345\\", where \\"42\\" and \\"12345\\" are encoded values. Each encoded value can be of any length and can be made up of digits. The function should return the decoded values as a list.","solution":"def decode_url(encoded_url): Decodes a variable-length string from the last part of a URL and returns the values as a list. Parameters: encoded_url (str): The encoded URL string with values separated by slashes. Returns: list: A list of decoded values. parts = encoded_url.split('/') # The last part of the URL is expected to have the encoded values. # Removing empty parts in case URL ends with / encoded_values = [part for part in parts if part] return encoded_values"},{"question":"Write a function to find the Fibonacci series up to a given number n using recursion.","solution":"def fibonacci(n): Return the Fibonacci series up to number n using recursion. def fib_helper(a, b, n): if a > n: return [] else: return [a] + fib_helper(b, a+b, n) return fib_helper(0, 1, n)"},{"question":"Write a function to determine if a given linked list is a palindrome or not. How can we solve this problem using a stack?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Determines if the linked list is a palindrome. This implementation uses a stack to check for palindrome. stack = [] slow = head fast = head # Push all elements of the first half of the linked list onto the stack. while fast and fast.next: stack.append(slow.val) slow = slow.next fast = fast.next.next # If there are odd number of elements, skip the middle element. if fast: slow = slow.next # Compare the second half of the linked list with the stack. while slow: top = stack.pop() # If values are different, then it's not a palindrome. if slow.val != top: return False slow = slow.next return True"},{"question":"Write a function to generate all possible combinations of a given list of integers. How can you optimize this function?","solution":"from itertools import combinations def generate_combinations(nums): Generate all possible combinations of a given list of integers. Args: nums (list of int): The list of integers. Returns: list of list of int: A list containing all possible combinations of the input integers. result = [] for r in range(len(nums) + 1): result.extend(combinations(nums, r)) return [list(comb) for comb in result]"}]`),A={name:"App",components:{PoemCard:F},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},P={class:"card-container"},C={key:0,class:"empty-state"},z=["disabled"],S={key:0},L={key:1};function E(i,e,u,c,s,a){const m=p("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[b,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",P,[(n(!0),r(v,null,y(a.displayedPoems,(o,g)=>(n(),w(m,{key:g,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",C,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",L,"Loading...")):(n(),r("span",S,"See more"))],8,z)):l("",!0)])}const D=d(A,[["render",E],["__scopeId","data-v-cbac9964"]]),H=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"grok/12.md","filePath":"grok/12.md"}'),B={name:"grok/12.md"},Y=Object.assign(B,{setup(i){return(e,u)=>(n(),r("div",null,[x(D)]))}});export{H as __pageData,Y as default};
