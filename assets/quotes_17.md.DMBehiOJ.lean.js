import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,r,a){return n(),i("div",T,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-8c1c9dac"]]),S=JSON.parse('[{"question":"You are organizing a concert and have an array representing seat reservations. Each element in the array indicates the number of seats reserved in that row. The concert hall staff have mistakenly reserved certain rows for VIP guests. Can you write a function to update the array by replacing the reserved seats in the VIP rows with the string \\"VIP\\"? ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains a single integer N - the number of rows in the concert hall. - The second line contains N integers where the i-th integer represents the number of seats reserved in the i-th row. ------ Output Format ------ For each test case, output an array where VIP rows are replaced with the string \\"VIP\\". For simplicity, assume VIP rows are at every odd index (1-based). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ text{Number of seats reserved in each row} ≤ 500 ------ Sample Input 1 ------ 2 5 10 20 30 40 50 3 5 15 25 ------ Sample Output 1 ------ [10, \\"VIP\\", 30, \\"VIP\\", 50] [5, \\"VIP\\", 25] ------ Explanation 1 ------ Test case-1: The VIP rows are at indices 2 and 4 (1-based). Hence, the output array is [10, \\"VIP\\", 30, \\"VIP\\", 50]. Test case-2: The VIP row is at index 2 (1-based). Hence, the output array is [5, \\"VIP\\", 25].","solution":"def update_seat_reservations(seat_reservations): Updates the seat reservations array by replacing seats in VIP rows with \\"VIP\\". VIP rows are at every odd index (1-based). updated_reservations = [] for i in range(len(seat_reservations)): if (i + 1) % 2 == 0: # VIP rows (1-based index is odd) updated_reservations.append(\\"VIP\\") else: updated_reservations.append(seat_reservations[i]) return updated_reservations def process_test_cases(test_cases): Processes multiple test cases and returns their outputs. results = [] for case in test_cases: N, seat_reservations = case results.append(update_seat_reservations(seat_reservations)) return results"},{"question":"Write a program that finds the largest rectangular sub-matrix with elements that are all odd numbers within a given matrix. The size of the matrix is provided, and the program should identify the largest rectangle (by area) where all elements are odd numbers. Input The input consists of a single dataset in the following format: n m A1,1 A1,2 ... A1,m A2,1 A2,2 ... A2,m ... An,1 An,2 ... An,m n is the number of rows (1 ≤ n ≤ 100) and m is the number of columns (1 ≤ m ≤ 100); A is the element of the matrix, which is an integer between -10,000 and 10,000. Output Print the area of the largest rectangular sub-matrix with all elements being odd. If no such sub-matrix exists, print \\"0\\". Example Input 4 5 1 -3 5 7 2 4 -1 -3 5 9 1 3 7 2 4 2 4 9 11 13 Output 6","solution":"def largest_odd_submatrix_area(matrix): n = len(matrix) m = len(matrix[0]) # Convert the matrix into a 0/1 matrix where 1 represents odd number and 0 represents even number bin_matrix = [[1 if matrix[i][j] % 2 != 0 else 0 for j in range(m)] for i in range(n)] max_area = 0 # Store the maximum area of submatrix of odd numbers heights = [0] * m # Heights for histogram representation for row in bin_matrix: for j in range(m): heights[j] = heights[j] + 1 if row[j] == 1 else 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): Helper function to determine the largest rectangle area in histogram. stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix"},{"question":"You are given a string containing only lowercase alphabetical characters. You need to determine the smallest substring that contains all unique characters present in the original string. Return the length of this substring. ``` smallestSubstringContainingUniqueChars(originalString) smallestSubstringContainingUniqueChars(\\"abac\\") All unique characters: {\'a\', \'b\', \'c\'} Minimum length substring containing all unique characters: \\"bac\\" Therefore, answer is 3 smallestSubstringContainingUniqueChars(\\"aaaa\\") All unique characters: {\'a\'} Minimum length substring containing all unique characters: \\"a\\" Therefore, answer is 1 smallestSubstringContainingUniqueChars(\\"abbcbcba\\") All unique characters: {\'a\', \'b\', \'c\'} Minimum length substring containing all unique characters: \\"cba\\" Therefore, answer is 3 ``` The length of the original string is an integer in the range [1, 1000].","solution":"def smallestSubstringContainingUniqueChars(originalString): from collections import defaultdict unique_chars = set(originalString) required_chars_count = len(unique_chars) char_count = defaultdict(int) min_length = float(\'inf\') left = 0 formed = 0 for right, char in enumerate(originalString): char_count[char] += 1 if char_count[char] == 1: # First occurrence of the character formed += 1 while formed == required_chars_count: min_length = min(min_length, right - left + 1) char_count[originalString[left]] -= 1 if char_count[originalString[left]] == 0: formed -= 1 left += 1 return min_length"},{"question":"You are given a string consisting of lowercase alphabets and your task is to transform this string into a palindrome by removing at most two characters from it. A palindrome is a string that reads the same backward as forward. Write a function that returns \\"YES\\" if the string can be transformed into a palindrome by removing at most two characters, or \\"NO\\" otherwise. Function Signature: ``` def can_transform_to_palindrome(s: str) -> str ``` # Input - A single string `s` of length between 1 and 1000. # Output - A single string: \\"YES\\" if it is possible to create a palindrome by removing at most two characters, otherwise \\"NO\\". # Example Example 1: ``` Input: abcbba Output: YES Explanation: The string can be transformed into \\"abcba\\" by removing one \'b\', which is a palindrome. ``` Example 2: ``` Input: abcdef Output: NO Explanation: No palindrome can be formed by removing at most two characters from \\"abcdef\\". ``` Example 3: ``` Input: radar Output: YES Explanation: \\"radar\\" is already a palindrome, so no removals are needed. ``` Example 4: ``` Input: aabbccdd Output: NO Explanation: Even if we remove two characters, the remaining string cannot be rearranged into a palindrome. ``` # Note The function should handle edge cases like an already palindrome string or cases where immediate removal makes the string a palindrome. Consider optimizing the function to handle upper boundary constraints effectively.","solution":"def can_transform_to_palindrome(s: str) -> str: def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: if is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1): return \\"YES\\" else: if is_palindrome_range(left + 1, right - 1): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"You are given a sentence with words separated by spaces. Your task is to reverse the words in the sentence while preserving the original word order, but reverse each character in the words themselves. Input A single line containing a non-empty string s consisting of words separated by spaces. The length of the string should not exceed 105 characters. The string contains only printable ASCII characters. Output Print the resulting string after reversing the characters of each word while preserving the original word order. Examples Input hello world Output olleh dlrow Input I love programming Output I evol gnimmargorp Input a quick brown fox Output a kciuq nworb xof","solution":"def reverse_words_characters(sentence): Reverses each word in a sentence while preserving the original word order. Parameters: sentence (str): A string representing the sentence. Returns: str: A string with each word reversed but in the original order. # Split the sentence into words words = sentence.split() # Reverse each word and join them back with spaces reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"An airline uses a software system for managing flight bookings. The system keeps track of the booked seats for each flight in a two-dimensional array, where each element represents a seat in the airplane: - 0 indicates an available seat. - 1 indicates a booked seat. Given the layout of the airplane seats and a list of seat requests, the system needs to determine the number of times a request cannot be fulfilled because the seats are already booked. Write a function `seat_requests(layout, requests)` that takes as inputs: - `layout`: a 2D list representing the layout of the seats in the airplane. - `requests`: a list of tuples, where each tuple contains the row and column indices of the requested seat (0-based). The function should return an integer representing the number of requests that could not be fulfilled. # Input The input consists of: - A 2D list `layout` representing the airplane seat layout, where `1 ≤ len(layout), len(layout[i]) ≤ 1000`. - A list `requests` containing tuples `(r, c)` where `0 ≤ r < len(layout)` and `0 ≤ c < len(layout[i])`. # Output The function should return an integer representing the number of requests that could not be fulfilled. # Example ```python layout = [ [0, 1, 0], [1, 0, 0], [0, 0, 1] ] requests = [(0, 1), (1, 0), (2, 2), (1, 2), (0, 0)] print(seat_requests(layout, requests)) # Output: 3 ``` In the example, the requests for seats `(0, 1)`, `(1, 0)`, and `(2, 2)` cannot be fulfilled because these seats are already booked (indicated by the value `1` in the layout). Therefore, the function returns `3`.","solution":"def seat_requests(layout, requests): Determine the number of seat requests that cannot be fulfilled. :param layout: 2D list representing the airplane seat layout where 0 indicates an available seat and 1 indicates a booked seat :param requests: List of tuples (r, c) representing the requested seats :return: Integer representing the number of requests that cannot be fulfilled unfulfilled_requests = 0 for r, c in requests: if layout[r][c] == 1: unfulfilled_requests += 1 else: layout[r][c] = 1 # Mark the seat as booked if it was available return unfulfilled_requests"},{"question":"Create a function `is_palindrome` that checks if a given string is a palindrome. A palindrome is a string that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. Your function should return `True` if the input string is a palindrome and `False` otherwise. For example, `is_palindrome(\\"A man, a plan, a canal: Panama\\")` should return `True`. To complete this kata, ensure that your code handles edge cases (e.g., empty strings or strings with only non-alphabetic characters). If you complete this kata and there are no issues, please remember to give it a ready vote and a difficulty rating. :)","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Args: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Given a positive integer n, you are required to find out if n can be expressed as a sum of three distinct prime numbers. Constraints 1 leq n leq 5000 Input Format First and only line of the input will contain an integer n. Output Format Output \\"YES\\" if n can be expressed as a sum of three distinct prime numbers, otherwise output \\"NO\\". Sample Input 23 Sample Output YES Explanation 23 can be expressed as 23 = 3 + 7 + 13, where 3, 7, and 13 are all prime numbers. So, the output is \\"YES\\".","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_three_primes_sum(n): Determine if the number n can be expressed as the sum of three distinct primes. if n < 6: # The smallest sum of three primes > 0 is 2 + 3 + 5 = 10. return \\"NO\\" primes = [i for i in range(2, n) if is_prime(i)] for i in range(len(primes) - 2): for j in range(i + 1, len(primes) - 1): for k in range(j + 1, len(primes)): if primes[i] + primes[j] + primes[k] == n: return \\"YES\\" return \\"NO\\""},{"question":"Given a matrix of size n*m, implement a function that rotates the matrix 90 degrees clockwise. Input: The first line contains two integers n and m, representing the number of rows and columns of the matrix. The next n lines contain m integers each, representing the elements of the matrix. Output: Return the matrix after rotating it 90 degrees clockwise. Constraints: 1 ≤ n, m ≤ 1000 Each element of the matrix is an integer between -1000 and 1000. SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 7 4 1 8 5 2 9 6 3 Explanation: The original matrix is: 1 2 3 4 5 6 7 8 9 After rotating 90 degrees clockwise, the matrix becomes: 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the given n*m matrix 90 degrees clockwise. Parameters: matrix (list of list of int): 2D list representing the matrix to be rotated. Returns: list of list of int: The rotated matrix. n = len(matrix) m = len(matrix[0]) # Create a new m*n matrix for the rotated result rotated_matrix = [[0] * n for _ in range(m)] # Populate the rotated matrix for i in range(n): for j in range(m): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix def rotate_matrix(matrix): Handles the input and output interfaces as specified in the problem statement. Parameters: matrix (str): A string representing the input matrix. Returns: str: A string representing the output of the rotated matrix. lines = matrix.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [[int(x) for x in line.split()] for line in lines[1:]] rotated_matrix = rotate_matrix_90_degrees_clockwise(matrix) # Build the output string output_lines = [\' \'.join(map(str, row)) for row in rotated_matrix] return \'n\'.join(output_lines)"},{"question":"You are given a list of operations to perform on an initially empty array of integers. The operations can be of the following types: 1. `add x` - Adds the integer `x` to the array. 2. `remove x` - Removes one occurrence of the integer `x` from the array (if the integer exists in the array). 3. `largest` - Finds the largest integer currently in the array. If the array is empty, returns `-1`. -----Input----- The first line contains an integer `n` (1 leq n leq 10^5) — the number of operations. The following `n` lines describe the operations in one of the formats: - `add x` (1 leq x leq 10^9). An `add` operation always guarantees that `x` is a positive integer. - `remove x` (1 leq x leq 10^9). A `remove` operation does nothing if `x` is not present in the array. - `largest`. A `largest` operation returns the largest integer currently in the array or `-1` if the array is empty. -----Output----- For each `largest` operation, output the largest integer in the array or `-1` if the array is empty. -----Examples----- Input 10 add 5 add 3 largest add 10 largest remove 5 largest remove 10 largest remove 3 largest Output 5 10 10 3 -1 Input 7 add 4 add 4 largest remove 4 largest remove 4 largest Output 4 4 -1 -----Note----- In the first example: After the first two add operations, the array contains `[5, 3]`. The largest value is `5`. After adding `10`, the array contains `[5, 3, 10]`, and the largest value is `10`. After removing `5`, the array contains `[3, 10]`, and the largest value remains `10`. After removing `10`, the array contains `[3]`, and the largest value is `3`. After removing `3`, the array becomes empty. The largest value is `-1`.","solution":"def perform_operations(n, operations): Perform a series of operations on an initially empty array. Args: n (int): The number of operations. operations (list): List of strings, where each string represents an operation. Returns: list: List of results from `largest` operations. from heapq import heappush, heappop max_heap = [] element_count = {} result = [] for operation in operations: if operation.startswith(\\"add\\"): _, x = operation.split() x = int(x) heappush(max_heap, -x) # push negative value to simulate max heap if x in element_count: element_count[x] += 1 else: element_count[x] = 1 elif operation.startswith(\\"remove\\"): _, x = operation.split() x = int(x) if x in element_count and element_count[x] > 0: element_count[x] -= 1 elif operation == \\"largest\\": while max_heap and element_count[-max_heap[0]] == 0: heappop(max_heap) if max_heap: result.append(-max_heap[0]) else: result.append(-1) return result"},{"question":"Alex is a fan of square matrices. He has several square matrices with dimensions n x n and he wants to rotate them 90 degrees clockwise. Help Alex to rotate these matrices. Input : First line contains an integer T, the number of test cases. Each test case starts with a number n, representing the dimension of the matrix, followed by n lines each containing n integers separated by spaces, describing the matrix. Output : For each test case, output the rotated matrix in the same format. Constraints : 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ matrix element ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 2 1 2 3 4 SAMPLE OUTPUT 7 4 1 8 5 2 9 6 3 3 1 4 2","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise. n = len(matrix) new_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): new_matrix[j][n - 1 - i] = matrix[i][j] return new_matrix def process_test_cases(test_cases): Processes the provided test cases and returns the results of the rotated matrices. results = [] for matrix in test_cases: results.append(rotate_matrix_90_clockwise(matrix)) return results def format_output(rotated_matrices): Formats the rotated matrices into the expected output format. formatted_output = [] for matrix in rotated_matrices: for row in matrix: formatted_output.append(\\" \\".join(map(str, row))) return formatted_output"},{"question":"A programming competition is being held where participants are to solve a maze game. The maze is represented by a 2D grid where empty cells are represented by a dot `.` and obstacles are represented by a hash sign `#`. The goal is to find the minimum number of steps required to move from the start position `(Sx, Sy)` to the end position `(Ex, Ey)`. You can move up, down, left, or right, but you cannot move diagonally or pass through obstacles. Your task is to write a program to determine the minimum number of steps required. If the end position is not reachable, return -1. ----- Input: ----- - The first line contains two integers N and M, representing the dimensions of the maze grid. - The next N lines each contain a string of M characters, representing the maze. - The last line contains four integers Sx, Sy, Ex, and Ey, representing the starting and ending positions respectively. ----- Output: ----- - Print a single integer representing the minimum number of steps required to reach the end position, or -1 if it is not reachable. ----- Constraints ----- - 1 leq N, M leq 1000 - 0 leq Sx, Ex < N - 0 leq Sy, Ey < M - The start and end positions will always be empty cells (.) ----- Sample Input ----- 5 5 ..... .#. ..#.. .#. ..... 0 0 4 4 ----- Sample Output ----- 8 ----- Explanation ----- In this example, the maze is a 5x5 grid with obstacles in the middle. The shortest path from `(0, 0)` to `(4, 4)` takes 8 steps, navigating around the obstacles.","solution":"from collections import deque def min_steps(maze, Sx, Sy, Ex, Ey): N = len(maze) M = len(maze[0]) if maze[Sx][Sy] == \'#\' or maze[Ex][Ey] == \'#\': return -1 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] visited = [[False] * M for _ in range(N)] queue = deque([(Sx, Sy, 0)]) visited[Sx][Sy] = True while queue: x, y, steps = queue.popleft() if x == Ex and y == Ey: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and maze[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def solve_maze(N, M, maze_lines, start_end_positions): maze = [list(line) for line in maze_lines] Sx, Sy, Ex, Ey = start_end_positions return min_steps(maze, Sx, Sy, Ex, Ey)"},{"question":"You are given a list of non-negative integers representing the heights of bars in a histogram. Each bar has a width of 1. Your task is to calculate the maximum area of a rectangle formed within the bounds of the histogram, with the height of bars representing one of its sides. For instance, given the list of heights `[2, 1, 5, 6, 2, 3]`, the maximum rectangle can be formed using the heights `[5, 6]` with width `2`, providing an area of `5 * 2 = 10`. Your task is to complete the function `maxRectangleArea()` that determines the maximum rectangle area within any given histogram. # More Examples ```python maxRectangleArea([2, 1, 5, 6, 2, 3]) #=> 10 maxRectangleArea([2, 4]) #=> 4 maxRectangleArea([0, 0, 0]) #=> 0 maxRectangleArea([6, 2, 5, 4, 5, 1, 6]) #=> 12 maxRectangleArea([2, 0, 2]) #=> 2 maxRectangleArea([3, 6, 5, 7, 4, 8, 1, 0]) #=> 20 ```","solution":"def maxRectangleArea(heights): Calculates the maximum rectangle area in a histogram. :param heights: List[int], the heights of the bars in the histogram. :return: int, the maximum rectangle area stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Create a function that takes a string containing a Roman numeral and converts it to its integer form. Roman numerals have the following values: ``` I -> 1 V -> 5 X -> 10 L -> 50 C -> 100 D -> 500 M -> 1000 ``` Roman numerals are generally written from largest to smallest from left to right. However, the numeral for four (IV) is not written as IIII. Instead, the number four is written as IV. Because the one is before the five, we subtract it making four. The same principle applies to the numbers nine (IX), forty (XL), ninety (XC), four hundred (CD), and nine hundred (CM). Your function should take a string representing a Roman numeral and return the corresponding integer value. The input Roman numerals will be between 1 and 3999. Examples: ``` \\"III\\" -> 3 \\"IV\\" -> 4 \\"IX\\" -> 9 \\"LVIII\\" -> 58 \\"MCMXCIV\\" -> 1994 ``` For more information, please see https://en.wikipedia.org/wiki/Roman_numerals.","solution":"def roman_to_int(s): Convert a string containing a Roman numeral to its integer equivalent. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Polycarp loves to collect words of different languages and organize them in a very specific way. Each word in his collection follows strict rules of formatting. For instance, he ensures that every word starts with a capital letter and all other letters in the word are lowercase. He also inserts a single space between any two words. However, sometimes new entries are added incorrectly with mixed capitalization and multiple spaces between words. In this task, you are given a string s composed of words and spaces. Your goal is to correct the formatting of the string to match Polycarp\'s rules. **Input** - The input data contains a single string s. Its length is from 1 to 255 characters. - The string is composed of words (consisting of alphabetic characters only) and spaces. - The string does not begin or end with a space. **Output** - Print the string s after it is processed following Polycarp\'s rules. **Examples** Input heLLo woRLD Code in PYTHON Output Hello World Code In Python Input THIS Is a TEst STRING Output This Is A Test String Input greek AlPHaBET Has 24 letTERS Output Greek Alphabet Has 24 Letters .Matcher: Make sure the example outputs start with a capital letter and have only single spaces between words. Complementary functions to the above question would be useful for testing edge cases.","solution":"def format_string(s): Formats the string s to ensure each word starts with a capital letter and all subsequent letters are lowercase. It also ensures only single spaces exist between words. words = s.split() formatted_words = [word.capitalize() for word in words] return \' \'.join(formatted_words)"},{"question":"On your interstellar journey, you have discovered a planet with a unique biological system. This planet is home to a variety of trees, each represented by a binary tree structure rooted at node 1. Interestingly, the local law states that the health of these trees depends on their symmetry. A tree is considered symmetric if it is a mirror image of itself with respect to its center. To help the local inhabitants, you decide to write a program to determine whether each given binary tree is symmetric. The binary tree is represented by an adjacency list with node numbers starting from 1. Each node may have up to two children. -----Input----- The input starts with an integer n (1 le n le 1000) representing the number of nodes in the tree. Each of the following n lines contains three integers u, v_L, and v_R representing the node u and its left child v_L and right child v_R, respectively. If u does not have a left child, v_L will be -1. Similarly, if u does not have a right child, v_R will be -1. Note that it is guaranteed that node 1 is always the root of the tree. -----Output----- Output a single line \\"Symmetric\\" if the binary tree is symmetric, otherwise output \\"Not symmetric\\". -----Examples----- Sample Input 1: 3 1 2 2 2 -1 -1 2 -1 -1 Sample Output 1: Symmetric Sample Input 2: 3 1 2 3 2 -1 -1 3 -1 -1 Sample Output 2: Not symmetric","solution":"def is_symmetric_tree(n, nodes): Determines if the given n-node binary tree described by the adjacency list is symmetric. :param n: An integer representing the number of nodes in the tree. :param nodes: List of tuples representing the nodes where each tuple contains 3 integers (u, v_L, v_R). u: the node number, v_L: left child, v_R: right child. -1 if no child. :return: \\"Symmetric\\" if the tree is symmetric, otherwise \\"Not symmetric\\". from collections import deque # Helper function to check recursive mirrors def is_mirror(left, right): if left == -1 and right == -1: return True if left == -1 or right == -1: return False if left != right: return False return is_mirror(left_children[left], right_children[right]) and is_mirror(right_children[left], left_children[right]) if n == 1: return \\"Symmetric\\" left_children = [-1] * (n + 1) right_children = [-1] * (n + 1) for u, v_L, v_R in nodes: left_children[u] = v_L right_children[u] = v_R if is_mirror(left_children[1], right_children[1]): return \\"Symmetric\\" return \\"Not symmetric\\""},{"question":"You are given a string `s` consisting of lowercase English letters, and an integer `k`. We say that a substring of `s` is \\"good\\" if the number of distinct characters in it is exactly `k`. You need to find the length of the shortest good substring in `s`. If there are no good substrings, return -1. -----Input----- The first line contains a string `s` (1 ≤ |s| ≤ 10^5) — a string of lowercase English letters. The second line contains an integer `k` (1 ≤ k ≤ 26). -----Output----- Print the length of the shortest good substring in `s`. If there are no good substrings, return -1. -----Examples----- Input abracadabra 2 Output 2 Input abccbaac 3 Output 3 Input aaaaaaa 2 Output -1 -----Note----- In the first example, the shortest good substring with exactly 2 distinct characters is \\"ab\\" from the string \\"abracadabra\\". In the second example, the substring \\"abc\\" and \\"bca\\" are examples of shortest good substrings with exactly 3 distinct characters. In the third example, there is no substring with exactly 2 distinct characters, hence the answer is -1.","solution":"def shortest_good_substring(s, k): Returns the length of the shortest good substring in s with exactly k distinct characters. If there is no such substring, returns -1. from collections import defaultdict n = len(s) min_length = float(\'inf\') left = 0 char_count = defaultdict(int) for right in range(n): char_count[s[right]] += 1 while len(char_count) == k: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Write a function that takes a positive integer representing the number of minutes and returns the equivalent time in hours and minutes in the format \\"X hour(s) and Y minute(s)\\". For example: ```python convert_time(130) == \\"2 hour(s) and 10 minute(s)\\" convert_time(45) == \\"0 hour(s) and 45 minute(s)\\" ``` Note! The input is a positive integer and the result should be a string formatted exactly as shown above.","solution":"def convert_time(minutes): Converts the time from minutes to \\"X hour(s) and Y minute(s)\\" format. Args: minutes (int): The number of minutes. Returns: str: The time in \\"X hour(s) and Y minute(s)\\" format. hours = minutes // 60 remaining_minutes = minutes % 60 return f\\"{hours} hour(s) and {remaining_minutes} minute(s)\\""},{"question":"Consider a game played on an n x n grid. There are two players: Player A, who always starts first, and Player B. Players take turns to make a move, starting with Player A. A move consists of placing a marker on any empty cell in the grid. The following rules determine the result of the game: 1. A player wins if they place three consecutive markers of their own in a row, column, or diagonal. 2. The game is a draw if the grid is full and no player has won. 3. If a player makes a move that results in them winning the game, the other player does not get an additional move; thus, the game ends immediately with that player as the winner. Given the current state of the n x n grid and the sequence of moves played so far, determine the result of the game. The function should output \\"A\\" if Player A wins, \\"B\\" if Player B wins, and \\"Draw\\" if the game ends in a draw. If the game is still ongoing, output \\"Pending\\". Input The input consists of multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10). Description of the test cases follows. For each test case: - The first line contains an integer n (3 ≤ n ≤ 50), indicating the size of the grid. - The next n lines each contain n characters, representing the current state of the grid. Each character is one of \'A\', \'B\', or \'.\', where \'A\' denotes a cell occupied by Player A, \'B\' denotes a cell occupied by Player B, and \'.\' denotes an empty cell. Output For each test case, print the outcome of the game as one of the following: \\"A\\", \\"B\\", \\"Draw\\", or \\"Pending\\". Example Input 3 3 A.A BBB ... 3 A.. ABA A.B 3 ... .A. ... Output B A Pending Note In the first test case, Player B has placed three consecutive markers in the second row and wins the game. In the second test case, Player A has placed three consecutive markers in the first column and wins the game. In the third test case, the game is still ongoing, as not all cells are filled and no player has yet won.","solution":"def check_winner(grid, n): # Check rows and columns for i in range(n): if all(grid[i][j] == \'A\' for j in range(n)) or all(grid[j][i] == \'A\' for j in range(n)): return \'A\' if all(grid[i][j] == \'B\' for j in range(n)) or all(grid[j][i] == \'B\' for j in range(n)): return \'B\' # Check main diagonal if all(grid[i][i] == \'A\' for i in range(n)): return \'A\' if all(grid[i][i] == \'B\' for i in range(n)): return \'B\' # Check anti-diagonal if all(grid[i][n-i-1] == \'A\' for i in range(n)): return \'A\' if all(grid[i][n-i-1] == \'B\' for i in range(n)): return \'B\' # Check for draw or pending if all(grid[i][j] in [\'A\', \'B\'] for i in range(n) for j in range(n)): return \'Draw\' return \'Pending\' def game_result(t, test_cases): results = [] for case in test_cases: n, grid = case result = check_winner(grid, n) results.append(result) return results"},{"question":"In the land of Algorhea, a coding competition is being held to discover the most efficient algorithms for rotational problems. The citizens have decided to focus on a problem involving rotating arrays and finding the maximum sum after a series of rotations. You are given an array of integers a of size n. You are allowed to perform at most k right rotations on the array. A right rotation on an array shifts each element of the array one position to the right, with the last element wrapping around to the beginning of the array. Your task is to determine the maximum possible sum of the array that can be achieved after performing at most k right rotations. For example, if the array is [1, 2, 3, 4, 5] and you perform one right rotation, the array becomes [5, 1, 2, 3, 4]. If you perform another right rotation, it becomes [4, 5, 1, 2, 3], and so on. ----Input---- The first line contains two integers n and k (1 le n le 10^5, 0 le k le 10^5) - the size of the array and the maximum number of rotations allowed. The second line contains n integers a_i (-10^9 le a_i le 10^9) - the elements of the array. ----Output---- Print a single integer — the maximum possible sum of the array after performing at most k right rotations. ----Examples---- Input 5 2 1 2 3 4 5 Output 15 Input 4 1 6 -2 3 -1 Output 6 Note: In the first example, the initial sum is 1 + 2 + 3 + 4 + 5 = 15, and it does not change after any number of rotations because all elements are included in the sum. In the second example, the initial sum is 6 + (-2) + 3 + (-1) = 6. After one right rotation, the sum becomes (-1) + 6 + (-2) + 3 = 6, which is the maximum sum achievable with one rotation.","solution":"def max_sum_after_rotations(n, k, a): Returns the maximum possible sum of the array after performing at most k right rotations. Since the sum of all elements of the array remains unchanged, the result is simply the sum of the array `a`. return sum(a)"},{"question":"In the imaginary land of Algoria, the king decided to arrange a grand tournament to celebrate the upcoming festival. For this tournament, there are exactly `n` warriors who will participate. Each warrior will fight exactly `k` battles, and each battle will be against another warrior. Thus, each warrior will have `k` results (win or lose). The goal is to secretly arrange these battles such that each warrior fights exactly `k` battles, and no two pairs of warriors fight more than once. After the tournament, the king wants to see the overall win-loss record of each warrior. It\'s your task to arrange these battles and provide the win-loss record for each warrior. You should ensure that there is an equal distribution of wins and losses among the warriors, i.e., each warrior should win `w` battles out of `k`, and lose the remaining `k - w` battles. -----Input----- The first line of the input contains three integers n, k, and w (1 ≤ n ≤ 10^5, 0 ≤ k ≤ n-1, 0 ≤ w ≤ k) — the number of warriors, the number of battles each warrior fights, and the number of battles each warrior wins, respectively. It is guaranteed that it is possible to arrange the battles under the given constraints. -----Output----- Print `n` lines. Each line should contain two space-separated integers, representing the number of wins and losses for each respective warrior. -----Examples----- Input 4 3 1 Output 1 2 1 2 1 2 1 2 Input 5 2 1 Output 1 1 1 1 1 1 1 1 1 1 Input 6 4 2 Output 2 2 2 2 2 2 2 2 2 2 2 2 -----Note----- In the first example, each of the 4 warriors should participate in exactly 3 battles. Each warrior should win exactly 1 battle and lose the remaining 2 battles. An example arrangement could be: - Warrior 1 fights Warrior 2, Warrior 3, and Warrior 4. Wins against Warrior 2, loses against Warriors 3 and 4. - Warrior 2 fights Warrior 1, Warrior 3, and Warrior 4. Loses against Warrior 1, wins against Warriors 3 and 4. - Warrior 3 fights Warrior 1, Warrior 2, and Warrior 4. Wins against Warrior 1, loses against Warrior 2, and wins against Warrior 4. - Warrior 4 fights Warrior 1, Warrior 2, and Warrior 3. Loses against Warrior 1, loses against Warrior 2, loses against Warrior 3.","solution":"def arrange_battles(n, k, w): Arrange battles for `n` warriors such that each warrior fights exactly `k` battles and wins exactly `w` battles. Returns a list of tuples, where each tuple contains the number of wins and losses for each warrior. results = [] for i in range(n): # Each warrior wins exactly `w` battles and loses the remaining `k - w` battles. results.append((w, k - w)) return results"},{"question":"# Task You are given a matrix with dimensions `m x n` and a list of directions represented as strings. Each direction can be \\"up\\", \\"down\\", \\"left\\", or \\"right\\" and indicates a movement in the matrix. The starting position is always the top-left cell of the matrix (0,0). Return a tuple representing the final position in the matrix after performing all the movements. If a movement goes beyond the boundaries of the matrix, it should be ignored. # Example For `matrix = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]` and `directions = [\\"down\\", \\"down\\", \\"right\\", \\"up\\", \\"left\\", \\"left\\"]`, the output should be `(1, 0)`. Explanation: The sequence of movements and positions would be: - Start at (0, 0) - Move \\"down\\" to (1, 0) - Move \\"down\\" to (2, 0) - Move \\"right\\" to (2, 1) - Move \\"up\\" to (1, 1) - Move \\"left\\" to (1, 0) - Move \\"left\\" is ignored because it goes out of bounds (would move to (1, -1)) So, the final position is (1, 0). # Input/Output - `[input]` 2D matrix `matrix` Description: A non-empty matrix with `m` rows and `n` columns. Constraints: `2 ≤ m, n ≤ 100` - `[input]` string array `directions` Description: A list of movement directions. Constraints: `1 ≤ directions.length ≤ 1000` - `[output]` a tuple The final position in the matrix after performing all the movements.","solution":"def final_position(matrix, directions): Returns the final position in the matrix after performing all the movements. # Get the dimensions of the matrix m, n = len(matrix), len(matrix[0]) # Starting at the top-left corner x, y = 0, 0 # Define the movement deltas move = { \\"up\\": (-1, 0), \\"down\\": (1, 0), \\"left\\": (0, -1), \\"right\\": (0, 1) } # Perform each movement for direction in directions: dx, dy = move[direction] new_x, new_y = x + dx, y + dy # Check the new position is within bounds if 0 <= new_x < m and 0 <= new_y < n: x, y = new_x, new_y return (x, y)"},{"question":"You are given a list of integers representing the prices of a city\'s unique landmarks, and a budget that you can spend to visit some landmarks. Your task is to determine the maximum number of unique landmarks you can visit without exceeding the given budget. Every landmark can only be visited once, and you want to visit as many unique landmarks as possible with the given budget. Example 1: prices = [20, 10, 30, 50, 40] budget = 70 Output: 3 Explanation: You can visit the landmarks with prices 10, 20, and 30 for a total of 60 which is within the budget, and you visit 3 landmarks. Any other combination of 3 landmarks will exceed the budget or won\'t use up the maximum budget allocated. Example 2: prices = [5, 10, 15, 20, 25] budget = 40 Output: 3 Explanation: You can visit the landmarks with prices 5, 10, and 20, or 5, 15, and 20, or 10, 15, and 20 all within the budget of 40 and visiting 3 landmarks. Any other combination exceeding this number will go beyond the budget. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxLandmarks() which takes the array prices and integer budget as inputs and returns the maximum number of unique landmarks you can visit without exceeding the budget. Constraints: 1 <= prices.length <= 100 1 <= prices[i] <= 10^6 1 <= budget <= 10^9 Expected Time Complexity: O(NlogN) Expected Space Complexity: O(1)","solution":"def maxLandmarks(prices, budget): Determines the maximum number of unique landmarks that can be visited without exceeding the budget. :param prices: List[int], list of landmark prices :param budget: int, available budget :return: int, maximum number of unique landmarks that can be visited prices.sort() # Sort the prices in non-decreasing order count = 0 total_spent = 0 for price in prices: if total_spent + price <= budget: total_spent += price count += 1 else: break return count"},{"question":"A bank has different branches where customers visit to perform various transactions. Every visit by a customer is logged with a unique visit ID, start time, and end time. Given the logs of customer visits to different branches, determine the total visit time spent by customers in each branch. Each log entry follows the format: \\"branch_id:visit_id:start_or_end:timestamp\\". For example, \\"1:100:start:5\\" means visit 100 at branch 1 starts at time 5. \\"1:100:end:10\\" means visit 100 at branch 1 ends at time 10. The total visit time for a branch is the sum of all visit durations in that branch. Example 1: Input: m = 2 logs = [\\"1:100:start:5\\", \\"1:100:end:10\\", \\"0:101:start:1\\", \\"1:102:start:11\\", \\"1:102:end:15\\", \\"0:101:end:3\\"] Output:[2, 9] Explanation: Branch 0 has one visit: visit 101 with duration 2 (from time 1 to 3). Branch 1 has two visits: visit 100 with duration 5 (from time 5 to 10) and visit 102 with duration 4 (from time 11 to 15). So branch 0’s total visit time is 2, and branch 1’s total visit time is 5 + 4 = 9. Note: Input logs will be sorted by timestamp, NOT by branch or visit ID. Your output should be sorted by branch id. Thus the 0th element of your output corresponds to the total visit time in branch 0. Two visits won\'t start or end at the same time. Visits will always end.","solution":"def calculate_branch_visit_times(m, logs): Calculate the total visit time for each branch. Parameters: m (int): The number of branches. logs (list): List of strings, each representing a log entry. Returns: list: Total visit time for each branch. from collections import defaultdict branch_times = defaultdict(int) ongoing_visits = {} for log in logs: parts = log.split(\':\') branch_id = int(parts[0]) visit_id = int(parts[1]) action = parts[2] timestamp = int(parts[3]) if action == \\"start\\": ongoing_visits[visit_id] = timestamp elif action == \\"end\\": start_time = ongoing_visits.pop(visit_id, None) if start_time is not None: branch_times[branch_id] += (timestamp - start_time) result = [0] * m for branch_id, total_time in branch_times.items(): result[branch_id] = total_time return result"},{"question":"You\'ve just moved into a new house with a beautiful garden! However, the garden is filled with rocks and you want to replace some of them with flowers. You have a bag of flower seeds and you know exactly how many flowers you\'d like to plant. Unfortunately, you can only plant flowers in a continuous segment of the garden. You are given an array of integers representing the garden, where 0 means there\'s an empty spot where you can plant a flower and 1 means there\'s a rock which prevents planting. You need to determine if you can plant the desired number of flowers in a continuous segment of the garden. Write a function that takes in two arguments: 1. garden (a list of integers where 0 represents an empty spot and 1 represents a rock). 2. num_flowers (an integer representing the number of flowers you want to plant). Your function should return a boolean indicating whether you can plant the specified number of flowers in a continuous segment of the garden. Example inputs and corresponding outputs: Input: garden = [1, 0, 0, 0, 1, 0, 0] num_flowers = 3 Output: True Input: garden = [1, 0, 0, 0, 1, 0, 0] num_flowers = 4 Output: False Ensure that your solution considers the efficiency of the algorithm.","solution":"def can_plant_flowers(garden, num_flowers): Determines if it\'s possible to plant the specified number of flowers in a continuous segment of the garden. :param garden: List[int] - The garden represented by a list of integers (0 for empty spot, 1 for rock) :param num_flowers: int - The number of flowers to plant. :return: bool - True if it\'s possible to plant the specified number of flowers continuously, otherwise False. max_len = 0 current_len = 0 for spot in garden: if spot == 0: current_len += 1 if current_len >= num_flowers: return True else: max_len = max(max_len, current_len) current_len = 0 # Final check in case the longest segment is at the end of the array max_len = max(max_len, current_len) return max_len >= num_flowers"},{"question":"Your task is to design a software system to manage a library. The library contains different genres, and each genre has its own collection of books. Each book belongs to exactly one genre and is uniquely identified by an ISBN number. Additionally, each genre is managed by a librarian who is responsible for all the books in that genre. The following constraints and requirements are provided: 1. Each book has a title, an author, an ISBN number, and belongs to one genre. 2. Each librarian is responsible for exactly one genre. 3. If two books have the same genre, they must be managed by the same librarian. Your job is to create a system that can manage the books and genres efficiently, and extract various forms of information based on queries. You will implement the following features: 1. **Add / Remove Book**: Add or remove a book from a specific genre. 2. **Add / Remove Genre**: Add a new genre or remove an existing genre (along with all its books). 3. **Search Book by ISBN**: Given an ISBN, return the title, author, and genre of the book. 4. **List Books by Genre**: Given a genre, return a list of titles of books in that genre. 5. **List Books by Author**: Given an author, return a list of titles of all books written by that author. 6. **List Genres**: Return a list of all genres in the library. ------ Input Format ------ - The first line contains a single integer Q — the number of queries. - The following Q lines describe the queries. Each query will be in one of the following formats: 1. `ADD_BOOK <ISBN> <Title> <Author> <Genre>` 2. `REMOVE_BOOK <ISBN>` 3. `ADD_GENRE <Genre> <Librarian>` 4. `REMOVE_GENRE <Genre>` 5. `SEARCH_BOOK <ISBN>` 6. `LIST_BOOKS_BY_GENRE <Genre>` 7. `LIST_BOOKS_BY_AUTHOR <Author>` 8. `LIST_GENRES` ------ Output Format ------ - For each `SEARCH_BOOK` query, output a single line containing `<Title> <Author> <Genre>`. If the book is not found, output \\"BOOK NOT FOUND\\". - For each `LIST_BOOKS_BY_GENRE` query, output a single line containing space-separated titles of books in that genre. If there are no books in the genre, output \\"NO BOOKS\\". - For each `LIST_BOOKS_BY_AUTHOR` query, output a single line containing space-separated titles of books by that author. If there are no books by that author, output \\"NO BOOKS\\". - For each `LIST_GENRES` query, output a single line containing space-separated names of all genres. If there are no genres, output \\"NO GENRES\\". ------ Constraints ------ 1 ≤ Q ≤ 1000 The length of the ISBN is at most 13. The length of the Title and Author does not exceed 50. The length of the Genre and Librarian does not exceed 20. All titles, authors, genres, and librarian names only contain alphanumeric characters and spaces. `ISBN`, `Title`, `Author`, `Genre`, and `Librarian names` are case-sensitive. ------ Sample Input 1 ------ 12 ADD_GENRE Fiction Alice ADD_GENRE Science Bob ADD_BOOK 1234567890123 \\"The Great Gatsby\\" Fitzgerald Fiction ADD_BOOK 9876543210123 \\"A Brief History of Time\\" Hawking Science SEARCH_BOOK 1234567890123 LIST_BOOKS_BY_GENRE Fiction LIST_BOOKS_BY_AUTHOR Hawking REMOVE_BOOK 1234567890123 SEARCH_BOOK 1234567890123 LIST_GENRES REMOVE_GENRE Science LIST_GENRES ------ Sample Output 1 ------ \\"The Great Gatsby\\" Fitzgerald Fiction \\"The Great Gatsby\\" \\"A Brief History of Time\\" BOOK NOT FOUND Fiction Science Fiction","solution":"class Library: def __init__(self): self.genres = {} self.books_by_isbn = {} self.books_by_author = {} def add_genre(self, genre, librarian): if genre not in self.genres: self.genres[genre] = { \'librarian\': librarian, \'books\': {} } def remove_genre(self, genre): if genre in self.genres: for isbn in self.genres[genre][\'books\']: book = self.genres[genre][\'books\'][isbn] author = book[\'author\'] if isbn in self.books_by_isbn: del self.books_by_isbn[isbn] if author in self.books_by_author: self.books_by_author[author].remove(book[\'title\']) if not self.books_by_author[author]: del self.books_by_author[author] del self.genres[genre] def add_book(self, isbn, title, author, genre): if genre in self.genres: self.genres[genre][\'books\'][isbn] = { \'title\': title, \'author\': author } self.books_by_isbn[isbn] = { \'title\': title, \'author\': author, \'genre\': genre } if author not in self.books_by_author: self.books_by_author[author] = [] self.books_by_author[author].append(title) def remove_book(self, isbn): if isbn in self.books_by_isbn: book = self.books_by_isbn[isbn] genre = book[\'genre\'] author = book[\'author\'] if isbn in self.genres[genre][\'books\']: del self.genres[genre][\'books\'][isbn] if isbn in self.books_by_isbn: del self.books_by_isbn[isbn] if author in self.books_by_author: self.books_by_author[author].remove(book[\'title\']) if not self.books_by_author[author]: del self.books_by_author[author] def search_book(self, isbn): if isbn in self.books_by_isbn: book = self.books_by_isbn[isbn] return f\\"{book[\'title\']} {book[\'author\']} {book[\'genre\']}\\" return \\"BOOK NOT FOUND\\" def list_books_by_genre(self, genre): if genre in self.genres: books = self.genres[genre][\'books\'] if books: return \\" \\".join(book[\'title\'] for book in books.values()) return \\"NO BOOKS\\" def list_books_by_author(self, author): if author in self.books_by_author: if self.books_by_author[author]: return \\" \\".join(self.books_by_author[author]) return \\"NO BOOKS\\" def list_genres(self): if self.genres: return \\" \\".join(self.genres.keys()) return \\"NO GENRES\\""},{"question":"Create a program that simulates a simple online store. The store sells a variety of products, each with a name, price, and quantity in stock. Customers can add items to their shopping cart and then proceed to checkout. During checkout, the total cost of the items in the cart is calculated, and the quantities of the items in stock are updated accordingly. The `Product` class should contain: - `name` (string): The name of the product. - `price` (float): The price of the product. - `quantity` (int): The quantity of the product in stock. The `Store` class should contain: - A list of `Product` objects representing the products available in the store. - A shopping cart with the same structure as the product list but initially empty. The program should include the following methods: 1. `add_product_to_store(product)`: Adds a product to the store\'s inventory. 2. `add_product_to_cart(product_name, quantity)`: Adds the specified quantity of the product to the shopping cart, if available. 3. `remove_product_from_cart(product_name, quantity)`: Removes the specified quantity of the product from the shopping cart if it exists. 4. `checkout()`: Calculates the total cost of the items in the cart, updates the store\'s inventory to reflect the quantities purchased, and then empties the cart. It should return a tuple with the total cost and a list of the products that were successfully purchased. Implement the classes and methods, and test them with the following scenario: Example: ```python # Create store and add products store = Store() store.add_product_to_store(Product(\\"Laptop\\", 999.99, 10)) store.add_product_to_store(Product(\\"Smartphone\\", 499.99, 20)) store.add_product_to_store(Product(\\"Headphones\\", 79.99, 50)) # Add items to cart store.add_product_to_cart(\\"Laptop\\", 2) store.add_product_to_cart(\\"Smartphone\\", 1) store.add_product_to_cart(\\"Headphones\\", 5) # Remove item from cart store.remove_product_from_cart(\\"Headphones\\", 2) # Checkout total_cost, purchased_items = store.checkout() # Outputs: # Total cost: 2579.95 # Purchased items: [\\"Laptop\\", \\"Smartphone\\", \\"Headphones\\"] ```","solution":"class Product: def __init__(self, name, price, quantity): self.name = name self.price = price self.quantity = quantity class Store: def __init__(self): self.inventory = [] self.cart = [] def add_product_to_store(self, product): self.inventory.append(product) def add_product_to_cart(self, product_name, quantity): for product in self.inventory: if product.name == product_name and product.quantity >= quantity: self.cart.append(Product(product.name, product.price, quantity)) product.quantity -= quantity return True return False def remove_product_from_cart(self, product_name, quantity): for cart_item in self.cart: if cart_item.name == product_name: if cart_item.quantity > quantity: cart_item.quantity -= quantity for inv_item in self.inventory: if inv_item.name == product_name: inv_item.quantity += quantity return True elif cart_item.quantity == quantity: self.cart.remove(cart_item) for inv_item in self.inventory: if inv_item.name == product_name: inv_item.quantity += quantity return True return False def checkout(self): total_cost = 0 purchased_items = [] for cart_item in self.cart: total_cost += cart_item.price * cart_item.quantity purchased_items.append(cart_item.name) self.cart.clear() return total_cost, purchased_items"},{"question":"You are given an array of n integers a_1, a_2, ldots, a_n. Your task is to determine if there exists a subarray whose sum is equal to a given integer k. A subarray is defined as a contiguous segment of the array. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 10^5, -10^9 le k le 10^9) — the number of elements in the array and the target sum. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the elements of the array. The sum of n across all test cases does not exceed 10^6. -----Output----- For each test case, output \\"YES\\" if there exists a subarray whose sum is exactly k. Otherwise, output \\"NO\\". -----Examples----- Input 3 5 12 1 2 3 7 5 10 3 1 2 3 4 5 6 7 8 9 10 4 -10 1 -1 -1 -1 Output YES YES NO -----Note----- In the first test case, the sum of the subarray [2, 3, 7] is exactly 12. In the second test case, the sum of the subarray [3] is exactly 3. In the third test case, there is no subarray that sums to -10.","solution":"def has_subarray_with_sum(t, test_cases): results = [] for case in test_cases: n, k, array = case[\'n\'], case[\'k\'], case[\'array\'] found = False prefix_sum_set = set() current_sum = 0 for num in array: current_sum += num if current_sum == k or (current_sum - k) in prefix_sum_set: found = True break prefix_sum_set.add(current_sum) results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"Calculate the Net Profit. Input : First line contains N - Number of transactions. Each transaction is described in two lines. First line contains operation - either \\"sale\\" or \\"purchase\\". Second line contains an integer indicating the amount. Output : Print the net profit (sales minus purchases). Constraints : 1 ≤ N ≤ 100 1 ≤ amount ≤ 1000 SAMPLE INPUT 3 sale 500 purchase 300 sale 200 SAMPLE OUTPUT 400","solution":"def calculate_net_profit(transactions): Calculates the net profit from a list of transactions. Arguments: transactions -- a list of tuples where each tuple contains a transaction type and an amount. e.g., [(\'sale\', 500), (\'purchase\', 300), (\'sale\', 200)] Returns: The net profit as an integer. net_profit = 0 for transaction in transactions: operation, amount = transaction if operation == \'sale\': net_profit += amount elif operation == \'purchase\': net_profit -= amount return net_profit"},{"question":"Given an integer N, we need to find out how many numbers from 1 to N are composed only of the digits 1 and 2. Write a program to solve this problem. -----Input----- The first and only line of input contains the integer 1 le N le 10^6. -----Output----- Output the count of numbers within the range from 1 to N inclusive that consist solely of the digits 1 and 2. -----Examples----- Sample Input 1: 10 Sample Output 1: 2 Sample Input 2: 100 Sample Output 2: 6","solution":"def count_numbers_with_1_and_2(N): Returns the count of numbers from 1 to N inclusive that consist solely of the digits 1 and 2. count = 0 for number in range(1, N + 1): num_str = str(number) if all(digit in \'12\' for digit in num_str): count += 1 return count"},{"question":"A software company has a network of servers connected by bidirectional communication links. Given a list of servers and the list of links between them, design an algorithm to find the critical servers in the network. A critical server is a server that, if removed, will cause at least some part of the network to become disconnected. Example: Input: n = 6 links = [(0, 1), (0, 2), (1, 2), (1, 3), (3, 4), (4, 5)] Output: [1, 3, 4] Explanation: Removing server 1 will disconnect server 3 from the network. Removing server 3 will disconnect servers 4 and 5 from the network. Removing server 4 will disconnect server 5 from the network. Your Task: Complete the function List<Integer> findCriticalServers(int n, List<List<Integer>> links), which takes the number of servers (n) and a list of pairs representing the links between servers and returns the list of critical servers sorted in increasing order. Expected Time Complexity: O(n + m), where n is the number of servers and m is the number of links. Expected Auxiliary Space: O(n). Constraints: 1 <= n <= 10^4 0 <= links.length <= 2 * 10^4 0 <= a, b < n There can be at most one link between any two servers.","solution":"def findCriticalServers(n, links): from collections import defaultdict, deque def DFS(u, disc, low, parent, time, ap): children = 0 disc[u] = low[u] = time time += 1 for v in graph[u]: if disc[v] == -1: parent[v] = u children += 1 DFS(v, disc, low, parent, time, ap) low[u] = min(low[u], low[v]) if parent[u] == -1 and children > 1: ap.add(u) if parent[u] != -1 and low[v] >= disc[u]: ap.add(u) elif v != parent[u]: low[u] = min(low[u], disc[v]) if n == 0: return [] graph = defaultdict(list) for u, v in links: graph[u].append(v) graph[v].append(u) disc = [-1] * n low = [-1] * n parent = [-1] * n ap = set() for i in range(n): if disc[i] == -1: DFS(i, disc, low, parent, 0, ap) return sorted(ap)"},{"question":"A company has a list of N employee IDs. Each ID is unique and consists of alphanumeric characters. The company wants to group employees by the starting letter of their IDs in alphabetical order. If an ID starts with a number, group it under \'#\'. Write a function that groups the employees and returns the result in a specified format. Example 1: Input: N = 5 ids = [\\"alice123\\", \\"bob456\\", \\"charlie789\\", \\"123dave\\", \\"eve321\\"] Output: [[\'#\', \'123dave\'], [\'a\', \'alice123\'], [\'b\', \'bob456\'], [\'c\', \'charlie789\'], [\'e\', \'eve321\']] Explanation: The employee \\"123dave\\" is grouped under \'#\', and the others are grouped by their starting letters. Example 2: Input: N = 3 ids = [\\"xray99\\", \\"apple01\\", \\"123bravo\\"] Output: [[\'#\', \'123bravo\'], [\'a\', \'apple01\'], [\'x\', \'xray99\']] Explanation: The employee \\"123bravo\\" is grouped under \'#\', and the others are grouped by their starting letters. Your Task: You don\'t need to read input or print anything. Complete the function `groupEmployees` which takes the array `ids[]` and its size `N` as input parameters and returns a list of lists. Each inner list should contain a character (grouping key) followed by the sorted IDs that fall under that group. Expected Time Complexity: O(N * logN) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ length of any ID ≤ 20 IDs will contain only alphanumeric characters.","solution":"from collections import defaultdict def groupEmployees(N, ids): Groups the employee IDs by their starting character. If an ID starts with a number, it is grouped under \'#\'. The groups are returned in alphabetical order of the keys. Parameters: N (int): The number of employee IDs. ids (list of str): The list of employee IDs. Returns: list of list: Grouped employee IDs in the specified format. groups = defaultdict(list) for id in ids: if id[0].isdigit(): groups[\'#\'].append(id) else: groups[id[0]].append(id) sorted_groups = [] for key in sorted(groups.keys()): group_list = sorted(groups[key]) sorted_groups.append([key] + group_list) return sorted_groups"},{"question":"You are given a list of integers which may contain duplicates. Your task is to find the maximum number of distinct integers that can be selected from the list such that the sum of these integers is less than or equal to a given target sum mathbf{S}. Input Format - The first line contains two integers mathbf{N} and mathbf{S}, where mathbf{N} denotes the number of integers in the list, and mathbf{S} denotes the target sum. - The second line contains mathbf{N} space-separated integers representing the elements of the list. Output Format Print a single integer representing the maximum number of distinct integers that can be selected such that their sum is less than or equal to the target sum mathbf{S}. Constraints 1 leq N leq 1000 1 leq S leq 10^6 1 leq text{list elements} leq 10^5 Sample Input 6 15 5 2 3 8 2 3 Sample Output 4 Explanation In the given sample, the list is [5, 2, 3, 8, 2, 3]. We need to find the maximum number of distinct integers whose sum does not exceed 15. If we select 2, 3, 5, and 8, their sum is 2 + 3 + 5 + 8 = 18, which exceeds 15. However, if we select 2, 3, and 5, their sum is 2 + 3 + 5 = 10, which is within the limit. The number of distinct integers selected is 3. Thus, the correct answer is 3.","solution":"def max_distinct_integers(N, S, arr): Finds the maximum number of distinct integers whose sum is less than or equal to S. Parameters: N (int): Total number of integers in the list. S (int): Target sum. arr (list): List of integers. Returns: int: Maximum number of distinct integers with sum <= S. # Get the unique elements and sort them unique_elements = sorted(set(arr)) current_sum = 0 count = 0 for num in unique_elements: if current_sum + num <= S: current_sum += num count += 1 else: break return count # Example usage N = 6 S = 15 arr = [5, 2, 3, 8, 2, 3] print(max_distinct_integers(N, S, arr)) # Output: 3"},{"question":"Alice is learning about strings and their properties. She has come across an intriguing problem. Given a string, she wants to know if the string is a permutation of a palindrome. A palindrome is a word that reads the same backward as forward, and a permutation is a rearrangement of letters. Write a program to help Alice determine if the string is a permutation of a palindrome. The input string will contain only lowercase alphabets. Input: The input consists of a single line containing the string S. Output: Output \\"YES\\" if the string is a permutation of a palindrome, otherwise output \\"NO\\". Constraints: 1 ≤ |S| ≤ 100 SAMPLE INPUT civic SAMPLE OUTPUT YES SAMPLE INPUT ivicc SAMPLE OUTPUT YES SAMPLE INPUT hello SAMPLE OUTPUT NO","solution":"def is_permutation_of_palindrome(s): Checks if the given string is a permutation of a palindrome. Args: s (str): input string containing only lowercase alphabets. Returns: str: \\"YES\\" if the string is a permutation of a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged into a palindrome if there is at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given an integer n and a list of n integers. Your task is to determine whether it is possible to rearrange the list in such a way that no two adjacent numbers are equal. A valid rearrangement is one where each element appears exactly as many times as it does in the original list, but no two adjacent elements are the same. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1le tle 10^4) — the number of test cases. The description of each test case follows. The first line of each test case contains a single integer n (1le nle 10^5). The second line of each test case contains n integers a_1, a_2, ..., a_n. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output \\"Yes\\" if it is possible to rearrange the list such that no two adjacent numbers are equal, and \\"No\\" otherwise. -----Examples----- Input 3 5 1 1 1 2 2 4 1 2 3 4 3 1 1 1 Output Yes Yes No -----Note----- In the first test case, one possible valid rearrangement is [1, 2, 1, 2, 1]. In the second test case, [1, 2, 3, 4] itself is already a valid arrangement. In the third test case, it is impossible to rearrange the list such that no two adjacent elements are equal since all elements are the same.","solution":"from collections import Counter def can_rearrange(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] freq = Counter(a) max_freq = max(freq.values()) if max_freq > (n + 1) // 2: results.append(\\"No\\") else: results.append(\\"Yes\\") return results"},{"question":"You are working as a developer at a logistics company and your task is to enhance their shipment tracking system. A feature you want to add is the calculation of the shortest route a shipment must take to get from the starting warehouse to the destination warehouse. The company has multiple warehouses connected by direct shipment lanes, and each lane has a specific travel time. You need to write a function called `shortest_route` that takes two arguments: `graph` (a dictionary representing the warehouses and lanes) and `start_end` (a tuple containing the starting warehouse and the destination warehouse). The `graph` dictionary keys are warehouse names (strings), and the values are dictionaries with connected warehouse names as keys and travel times (integers) as values. The function should return the minimum travel time required to reach the destination warehouse from the starting warehouse. If no route exists, return \\"No route found\\". Example: ``` graph = { \'Warehouse A\': {\'Warehouse B\': 4, \'Warehouse C\': 2}, \'Warehouse B\': {\'Warehouse A\': 4, \'Warehouse C\': 5, \'Warehouse D\': 10}, \'Warehouse C\': {\'Warehouse A\': 2, \'Warehouse B\': 5, \'Warehouse D\': 3}, \'Warehouse D\': {\'Warehouse B\': 10, \'Warehouse C\': 3} } shortest_route(graph, (\'Warehouse A\', \'Warehouse D\')) # returns 5 shortest_route(graph, (\'Warehouse A\', \'Warehouse E\')) # returns \\"No route found\\" ``` Explanation: ``` In the example, the shortest route from \'Warehouse A\' to \'Warehouse D\' is through \'Warehouse C\' with a total travel time of 5 (2 + 3). ``` Constraints: - The graph will have at most 100 warehouses. - The travel time between connected warehouses will be a non-negative integer. - The function must handle invalid inputs gracefully by returning \\"Invalid input\\". Invalid inputs include cases where `graph` is not a dictionary, `start_end` is not a tuple of length 2, or the specified warehouses do not exist in the graph.","solution":"import heapq def shortest_route(graph, start_end): Returns the minimum travel time required to reach the destination warehouse from the starting warehouse. If no route exists or input is not valid, returns \\"No route found\\" or \\"Invalid input\\". if not isinstance(graph, dict) or not isinstance(start_end, tuple) or len(start_end) != 2: return \\"Invalid input\\" start, end = start_end if start not in graph or end not in graph: return \\"No route found\\" # Dijkstra\'s algorithm for shortest path priority_queue = [(0, start)] visited = {} while priority_queue: current_distance, current_warehouse = heapq.heappop(priority_queue) if current_warehouse == end: return current_distance if current_warehouse in visited: continue visited[current_warehouse] = current_distance for neighbor, distance in graph[current_warehouse].items(): if neighbor not in visited: heapq.heappush(priority_queue, (current_distance + distance, neighbor)) return \\"No route found\\""},{"question":"You are given an array of integers of length N. Each integer can be either positive, negative, or zero. Your task is to write a program to find the length of the longest subarray that contains an equal number of positive and negative numbers. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains a single integer N, the length of the array. - The second line contains N integers, which are the elements of the array. ------ Output Format ------ For each test case, output in a single line the length of the longest subarray that contains an equal number of positive and negative integers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^4 ≤ text{Array Element} ≤ 10^4 ------ Sample Input ------ 2 5 1 -1 2 -2 3 6 1 2 -1 -2 3 -3 ------ Sample Output ------ 4 6 ------ Explanation ------ Test case 1: The longest subarray with equal numbers of positive and negative integers is [1, -1, 2, -2], which has a length of 4. Test case 2: The entire array [1, 2, -1, -2, 3, -3] has equal numbers of positive and negative integers, so the length is 6.","solution":"def longest_equal_positive_negative_subarray(arr): Returns the length of the longest subarray with equal numbers of positive and negative integers. sum_to_index = {0: -1} prefix_sum = 0 max_length = 0 for i, num in enumerate(arr): if num > 0: prefix_sum += 1 elif num < 0: prefix_sum -= 1 if prefix_sum in sum_to_index: max_length = max(max_length, i - sum_to_index[prefix_sum]) else: sum_to_index[prefix_sum] = i return max_length def process_test_cases(test_cases): results = [] for case in test_cases: N = case[\'N\'] arr = case[\'array\'] results.append(longest_equal_positive_negative_subarray(arr)) return results"},{"question":"You are given n coins, each with a positive integer value. You need to pick k coins such that the sum of the values of the picked coins is maximum, but the picked coins must be non-adjacent. More formally, if you pick the ith coin, you cannot pick the (i-1)th and (i+1)th coins. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of coins. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the values of the coins. - The third line contains an integer k (1 ≤ k ≤ ⌊n/2⌋) — the number of coins you need to pick. Output - Print a single integer — the maximum possible sum of the values of the picked coins. Examples Input 5 1 2 9 4 5 2 Output 14 Input 8 4 1 2 7 5 3 1 6 3 Output 18 Input 6 8 2 3 1 7 4 2 Output 15","solution":"def max_non_adjacent_sum(n, coins, k): Returns the maximum possible sum of the values of k non-adjacent coins. if k == 0: return 0 # Initialize DP array, where each element is a dictionary to store max sum of picked coins. dp = [{} for _ in range(n)] # For each coin, we can either take it or leave it. dp[0][1] = coins[0] # Take the first coin. dp[0][0] = 0 # Leave the first coin. for i in range(1, n): for j in list(dp[i-1].keys()): # If we leave the current coin if j in dp[i]: dp[i][j] = max(dp[i][j], dp[i-1][j]) else: dp[i][j] = dp[i-1][j] # If we take the current coin if j + 1 <= k: if j + 1 in dp[i]: dp[i][j + 1] = max(dp[i][j + 1], dp[i-1][j] + coins[i]) else: dp[i][j + 1] = dp[i-1][j] + coins[i] # Find the maximum sum across all dp states with exactly k picks. result = 0 for i in range(n): if k in dp[i]: result = max(result, dp[i][k]) return result"},{"question":"You are provided with a string that consists of lowercase and uppercase alphabets. Your task is to modify the string in such a way that: - All uppercase letters are converted to lowercase. - All lowercase letters are converted to uppercase. Your Task: You don\'t need to read or print anything. Your task is to complete the function `swapCase()` which takes a string `s` as input and returns the modified string. Example 1: Input: s = \\"HeLLoWoRLd\\" Output: \\"hEllOwOrlD\\" Example 2: Input: s = \\"Python\\" Output: \\"pYTHON\\" Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 ≤ |s| ≤ 10^5","solution":"def swapCase(s): Takes a string s and swaps the case of each letter. return s.swapcase()"},{"question":"A trash sorting plant is trying to automate their sorting process. You are tasked with implementing a program that helps in identifying and sorting environmental waste. Each waste item is characterized by its weight, volume, and type. Write a program that can categorize the waste into different bins based on the type. -----Input:----- - The first line will contain an integer N, the number of waste items. - The next N lines each contain three pieces of information separated by space: 1. String representing the type of the waste (\'Plastic\', \'Glass\', \'Metal\') 2. Integer representing the weight of the waste (in grams) 3. Integer representing the volume of the waste (in cubic centimeters) -----Output:----- For each type of waste, output the total weight and total volume. The output order should be Plastic, Glass, and then Metal regardless of their presence in the input. -----Constraints----- - 1 leq N leq 100 - 1 leq text{weight} leq 1000 - 1 leq text{volume} leq 1000 -----Sample Input:----- 5 Plastic 150 200 Glass 300 250 Metal 200 300 Plastic 100 150 Metal 250 350 -----Sample Output:----- Plastic: Total weight = 250 grams, Total volume = 350 cubic centimeters Glass: Total weight = 300 grams, Total volume = 250 cubic centimeters Metal: Total weight = 450 grams, Total volume = 650 cubic centimeters -----EXPLANATION:----- The waste items are provided along with their types, weights, and volumes. The program processes these entries and sums the total weight and volume for each type of waste accordingly.","solution":"def categorize_waste(n, waste_items): waste_dict = { \'Plastic\': {\'total_weight\': 0, \'total_volume\': 0}, \'Glass\': {\'total_weight\': 0, \'total_volume\': 0}, \'Metal\': {\'total_weight\': 0, \'total_volume\': 0} } for waste in waste_items: waste_type, weight, volume = waste weight, volume = int(weight), int(volume) if waste_type in waste_dict: waste_dict[waste_type][\'total_weight\'] += weight waste_dict[waste_type][\'total_volume\'] += volume return waste_dict def format_output(waste_dict): results = [] for waste_type in [\'Plastic\', \'Glass\', \'Metal\']: total_weight = waste_dict[waste_type][\'total_weight\'] total_volume = waste_dict[waste_type][\'total_volume\'] results.append(f\\"{waste_type}: Total weight = {total_weight} grams, Total volume = {total_volume} cubic centimeters\\") return results # Example usage: waste_items = [ (\'Plastic\', 150, 200), (\'Glass\', 300, 250), (\'Metal\', 200, 300), (\'Plastic\', 100, 150), (\'Metal\', 250, 350) ] results = format_output(categorize_waste(5, waste_items)) for result in results: print(result)"},{"question":"You are given a two-dimensional grid with R rows and C columns. Each cell in the grid contains a non-negative integer representing the cost to enter that cell. You start at the top-left corner of the grid (position (1, 1)) and you need to reach the bottom-right corner of the grid (position (R, C)). You can only move to the right or down from each cell. Your task is to determine the minimum cost to reach the bottom-right corner of the grid from the top-left corner. Constraints: * 1 leq R, C leq 1000 * 0 leq cost_{i,j} leq 100 Input Input is given from Standard Input in the following format: R C cost_{1,1} cost_{1,2} ldots cost_{1,C} cost_{2,1} cost_{2,2} ldots cost_{2,C} : cost_{R,1} ldots cost_{R,C} Output Print the minimum cost to reach the bottom-right corner of the grid from the top-left corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3","solution":"def min_path_sum(grid): Returns the minimum cost to reach the bottom-right corner from the top-left corner. if not grid or not grid[0]: return 0 R, C = len(grid), len(grid[0]) dp = [[0] * C for _ in range(R)] dp[0][0] = grid[0][0] for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, R): for j in range(1, C): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[R-1][C-1] def read_input(): import sys input = sys.stdin.read data = input().strip().split() R, C = int(data[0]), int(data[1]) grid = [] idx = 2 for i in range(R): row = [int(data[idx + j]) for j in range(C)] grid.append(row) idx += C return grid if __name__ == \\"__main__\\": grid = read_input() print(min_path_sum(grid))"},{"question":"You are provided with a matrix of size m x n. Your task is to rotate the matrix 90 degrees clockwise. You are required to modify the matrix in place without using any additional space. Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Explanation: After rotating the matrix 90 degrees clockwise, the first row becomes the last column, the second row becomes the second to last column, and so on. Example 2: Input: matrix = [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] Output: [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] Explanation: After rotating the matrix 90 degrees clockwise, the first row becomes the last column, the second row becomes the second to last column, and so on. Your Task: The task is to complete the function rotateMatrix() which takes a matrix as input and modifies it in place to rotate it 90 degrees clockwise. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ m, n ≤ 300 -1000 ≤ matrix[i][j] ≤ 1000","solution":"def rotateMatrix(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. :param matrix: List[List[int]], the matrix to be rotated :return: None n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row to get the final rotated matrix for i in range(n): matrix[i].reverse()"},{"question":"Alex is participating in a coding competition where he needs to solve multiple puzzles. Each puzzle has a certain number of points associated with it, which can be either positive (if solved correctly) or negative (if solved incorrectly). Alex wants to maximize his total points by selectively choosing puzzles to solve, but he needs to solve at least one puzzle. Given the points for each puzzle, help Alex determine the maximum points he can achieve. Input The first line contains the number of puzzles P. The second line contains P integers, representing the points each puzzle is worth. Output Print a single integer, which is the maximum points Alex can achieve by solving at least one puzzle. Example Input 6 -3 5 -1 7 -4 3 Example Output 14","solution":"def max_points(puzzles): Given a list of puzzle points, returns the maximum points Alex can achieve by solving at least one puzzle. total_positive_points = sum(point for point in puzzles if point > 0) return total_positive_points if total_positive_points > 0 else max(puzzles) # Example Usage if __name__ == \\"__main__\\": puzzles = [-3, 5, -1, 7, -4, 3] print(max_points(puzzles)) # Output: 15"},{"question":"The city park has a new musical fountain that plays beautiful melodies according to patterns of water jets operating at fixed intervals. Each water jet shoots higher with every activation, creating a unique melody when observed over time. The jets simulate an XYZ coordinate system where `X` represents the jet\'s position along the base of the fountain and `Y` represents the jet\'s height. Write a function that, when given a list of jets with their initial heights and the increment per activation, returns the maximum height reached by each jet after a certain number of activations. Input Your function will receive two lists: 1. `initial_heights`: A list of integers representing the initial heights of the water jets. 2. `increments`: A list of integers representing the fixed height increments for each jet per activation. 3. An integer `n` representing the number of activations. Output A list of integers representing the maximum height reached by each jet after `n` activations. Technical Details - The length of `initial_heights` and `increments` will be the same. - Each height and increment are non-negative integers >= 0. - There can be up to 1000 jets. Test Example: ```python initial_heights = [3, 7, 2, 5] increments = [2, 1, 3, 2] n = 4 max_heights(initial_heights, increments, n) # [11, 11, 14, 13] ```","solution":"def max_heights(initial_heights, increments, n): Calculates the maximum height for each jet after n activations. Parameters: initial_heights: list of int - Initial heights of the jets. increments: list of int - Fixed height increments for each jet. n: int - The number of activations. Returns: List of int - Maximum heights of each jet after n activations. return [initial + increment * n for initial, increment in zip(initial_heights, increments)]"},{"question":"In a distant land of dragons, there exists a special type of tournament where dragons battle against one another. Each dragon has a specific power level, and the goal is to maximize the total power level of your team. There are 2 teams, each consisting of k dragons. There are a total of 2k dragons to choose from for the tournament. The teams take turns selecting dragons for their team. Initially, the first team selects a dragon, followed by the second team, and so on. Note that once a dragon is chosen, it is unavailable for both teams. Each dragon is given an index ranging from 1 to 2k, and each index i has a corresponding power p_i. The power level for each dragon is unique. Your task is to write a program that will optimally select dragons for one team, while the opposing team\'s selections are determined by a separate program. The opposing team\'s selections might be suboptimal, and it is essential to utilize these opportunities to maximize your team\'s total power. Input The first line contains one integer k (1 ≤ k ≤ 10^3) - the number of dragons in one team. The second line contains 2k integers p_1, p_2, ..., p_{2k} (1 ≤ p_i ≤ 10^6) - the power levels of the dragons, given in ascending order of dragon indices. The third line contains a single integer t (1 ≤ t ≤ 2) - the team you are to play for. If t = 1, it is your team’s turn to select a dragon first. Otherwise, the opposing team selects first. Output When it is your team\'s turn, output a single integer x (1 ≤ x ≤ 2k) - the index of the dragon chosen by you. You cannot choose a dragon that has already been selected by either team. When it is the opposing team\'s turn, read a line containing a single integer x (1 ≤ x ≤ 2k) - the index of the dragon chosen by the opposing team. It is guaranteed that this index has not been chosen before. The process continues until all dragons have been selected. Examples Input 4 5 10 15 20 25 30 35 40 1 Output 40 Input 4 3 6 9 12 15 18 21 24 2 Output 21 Note In the first example, your team takes the first turn. You choose the dragon with the highest power level, 40. The opposing team then selects their dragon, and so on until all dragons are chosen. In the second example, the opposing team takes the first turn. They might pick any dragon, and you should select the dragon with the next highest power level, ensuring you can maximize your team\'s total power.","solution":"def select_dragon(k, powers, turn): Selects the optimal dragon based on the current turn and available powers. Parameters: k (int): Number of dragons in each team. powers (list): List of powers of dragons in ascending order of their indices. turn (int): The team turn (1 if our team is picking first, 2 if opponent team is picking first). Returns: int: The index of the selected dragon. available_dragons = list(range(1, 2*k+1)) # Indices of dragons that are still available selected = set() def select_next_highest(): for i in range(2*k-1, -1, -1): if i+1 not in selected: selected.add(i+1) return i+1 if turn == 1: # Our turn first return select_next_highest() else: while len(selected) < 2*k: # Wait for opponent\'s move opponent_move = int(input().strip()) selected.add(opponent_move) # Our turn if len(selected) < 2*k: my_move = select_next_highest() print(my_move) return my_move"},{"question":"You are given a string of brackets that contains only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Write an algorithm to determine if the given string is balanced or not. A string is considered balanced if it meets the following criteria: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. -----Input----- The input contains a single string consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. -----Output----- Output \\"YES\\" if the string is balanced and \\"NO\\" if it is not. -----Examples----- Sample Input 1: {[()]} Sample Output 1: YES Sample Input 2: {[(])} Sample Output 2: NO Sample Input 3: {{[[(())]]}} Sample Output 3: YES","solution":"def is_balanced(s): Determines if the given string of brackets is balanced. Args: s (str): A string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: str: \\"YES\\" if the string is balanced, otherwise \\"NO\\". stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\""},{"question":"In a faraway kingdom, there is a special lock that can only be opened with a magic sequence. The lock sequence consists of brackets: \'(\' and \')\'. The sequence is valid if the following conditions are met: 1. It is an empty string, or 2. It can be written as AB (A concatenated with B), where A and B are valid sequences, or 3. It can be written as (A), where A is a valid sequence. You are given a string containing only \'(\' and \')\'. Your task is to determine the length of the longest valid (well-formed) parentheses substring. -----Input----- A single string S containing only \'(\' and \')\' (1 ≤ |S| ≤ 10^5). -----Output----- Output a single integer, the length of the longest valid parentheses substring. -----Examples----- Input \\"(()\\" Output 2 Input \\")()())\\" Output 4 Input \\"\\" Output 0 -----Note----- In the first example, the longest valid parentheses substring is \\"()\\". In the second example, the longest valid parentheses substring is \\"()()\\". In the third example, the string is empty, so the longest valid parentheses substring length is 0.","solution":"def longestValidParentheses(s: str) -> int: stack = [-1] max_length = 0 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Ella is fond of creating art using a combination of two-dimensional shapes. One of her favorite activities is filling in rectangles with colors on a grid. She has a large whiteboard that can be represented as an MxN grid of cells, each initially white. Ella\'s task is to apply color to a series of rectangles within this grid based on given instructions. Each instruction specifies a rectangle by its top-left and bottom-right coordinates and the color to be applied. Ella wants your help to determine the final colors of all the cells in the grid after applying all the instructions, some of which may overlap. ------ Input ------ The first line contains two integers M and N representing the number of rows and columns of the grid. The second line contains a single integer Q representing the number of rectangle coloring instructions. Each of the next Q lines contains five integers: - r1, c1 (top-left row and column of the rectangle) - r2, c2 (bottom-right row and column of the rectangle) - color (an integer representing the color to be applied) ------ Output ------ Output the final grid after applying all the instructions. Each line should contain N integers, representing the colors of the cells in the respective row, separated by spaces. ------ Constraints ------ 1 ≤ M, N ≤ 1,000 1 ≤ Q ≤ 100,000 1 ≤ r1 ≤ r2 ≤ M 1 ≤ c1 ≤ c2 ≤ N 1 ≤ color ≤ 1,000 ------ Sample Input 1 ------ 5 5 3 1 1 3 3 2 2 2 4 4 3 1 4 5 5 4 ------ Sample Output 1 ------ 2 2 2 4 4 2 3 3 4 4 2 3 3 4 4 0 3 3 4 4 0 0 0 4 4 ------ Explanation 1 ------ Applying the first instruction colors a 3x3 area in the top-left corner with color 2. The second instruction overlaps part of this area and colors a 3x3 area starting from row 2 and column 2 with color 3. The third instruction colors a vertical strip on the right side of the grid with color 4, overlapping the areas already colored by the first two instructions.","solution":"def apply_coloring_instructions(m, n, instructions): grid = [[0] * n for _ in range(m)] for (r1, c1, r2, c2, color) in instructions: for r in range(r1 - 1, r2): for c in range(c1 - 1, c2): grid[r][c] = color return grid def format_grid(grid): return [\' \'.join(map(str, row)) for row in grid]"},{"question":"Implement a function `nested_sum` that takes in a nested list of integers and returns the sum of all integers within the list, regardless of depth. For example, given the list `[1, [2, [3, 4], 5], 6]`, the function should return `21`. If the input is an empty list or contains no integers, the function should return `0`.","solution":"def nested_sum(nested_list): Returns the sum of all integers in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += nested_sum(element) elif isinstance(element, int): total += element return total"},{"question":"You are developing software for a transportation company to manage their fleet of buses. Each bus operates on a specific route, and the company needs a system to understand which routes are covered at any given time. The city is represented as a grid of size NxM. Each route is described by two endpoints: the start and end coordinates. Each bus travels in a straight line either horizontally or vertically. If a route is horizontal, the y-coordinate remains the same and only the x-coordinate varies. If a route is vertical, the x-coordinate remains the same and only the y-coordinate varies. Given a list of routes, determine if all the buses together cover the entire grid. Input The first line contains two integers, N and M, representing the dimensions of the grid. The second line contains a single integer K, representing the number of routes. Each of the next K lines contains four integers: x1, y1, x2, and y2, representing the start (x1, y1) and end (x2, y2) coordinates of a route covered by a bus. It is guaranteed that 1 ≤ N, M ≤ 1000 and 1 ≤ K ≤ 1000. All coordinates are 1-based and lie within the grid. Output Output a line with \\"Yes\\" (without quotes) if all the buses together cover the entire grid. Otherwise, output \\"No\\". Examples Input 3 3 2 1 1 1 3 1 1 3 1 Output No Input 2 2 4 1 1 1 2 1 1 2 1 1 2 2 2 2 1 2 2 Output Yes Input 3 2 2 1 1 3 1 2 1 2 2 Output No","solution":"def are_all_routes_covered(N, M, K, routes): # Mark all cells in the grid as not covered initially covered_grid = [[False] * M for _ in range(N)] # Process each route for x1, y1, x2, y2 in routes: if x1 == x2: # Vertical route for y in range(min(y1, y2), max(y1, y2) + 1): covered_grid[x1 - 1][y - 1] = True elif y1 == y2: # Horizontal route for x in range(min(x1, x2), max(x1, x2) + 1): covered_grid[x - 1][y1 - 1] = True # Check if every cell in the grid is covered for row in covered_grid: if not all(row): return \\"No\\" return \\"Yes\\" # Example usage: N = 3 M = 2 K = 2 routes = [ (1, 1, 3, 1), (2, 1, 2, 2) ] print(are_all_routes_covered(N, M, K, routes))"},{"question":"In a remote village, a river runs straight through the middle, dividing the village into two parts. The villagers have decided to build a bridge across the river to connect the two parts of the village. They have identified potential positions for the bridge, represented as intervals on a number line running parallel to the river. Each interval represents a segment within which the bridge can be built. However, due to budget constraints, the villagers can only afford to build one bridge. To maximize the utility of the bridge, they want to choose a position where the bridge would span the maximum number of given intervals. Write a function `max_overlap(intervals)` that takes a list of intervals as input and returns the maximum number of overlapping intervals at any point on the number line. # Input Format - A list of tuples where each tuple represents an interval ((start, end)), with (start) and (end) being the inclusive starting and ending points of the interval on the number line. # Output Format - An integer representing the maximum number of overlapping intervals at any point on the number line. # Constraints - (1 leq text{number of intervals} leq 10^5) - (1 leq text{start} < text{end} leq 10^9) # Example Input ```python intervals = [(1, 4), (2, 5), (9, 12), (5, 9), (5, 12)] ``` # Example Output ```python 3 ``` # Explanation - At point 5, intervals ((2, 5)), ((5, 9)), and ((5, 12)) overlap, hence the maximum overlap is 3.","solution":"def max_overlap(intervals): Returns the maximum number of overlapping intervals at any point on the number line. events = [] # Split each interval into start and end events for start, end in intervals: events.append((start, 1)) # +1 for start of interval events.append((end + 1, -1)) # -1 for end of interval, end + 1 to make it inclusive end # Sort events, starting events come before ending events if they are at the same position events.sort() max_overlap = 0 current_overlap = 0 # Sweep through events and calculate the maximum overlap for event in events: current_overlap += event[1] if current_overlap > max_overlap: max_overlap = current_overlap return max_overlap"},{"question":"You are given a sequence of numbers, and you need to find a contiguous subsequence which, when its elements are summed, yields the highest possible value. You need to implement a function that returns this maximum sum. **Input** A single line that contains space-separated integers representing the sequence `a1, a2, ..., an`. **Output** Output a single integer which is the maximum possible sum of a contiguous subsequence in the given sequence. **Constraints** - The length of the sequence is at most `10^5`. - Each element of the sequence is an integer such that `-10^4 ≤ ai ≤ 10^4`. **Example** Input ``` -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ``` **Explanation** In the provided example, the contiguous subsequence `[4, -1, 2, 1]` has the largest sum which is `6`. Thus, the output is `6`. **Note** In case all elements are negative, the function should return the largest single element. For example, for the input `-1 -2 -3 -4`, the output should be `-1`.","solution":"def max_subarray_sum(sequence): Returns the maximum sum of a contiguous subsequence in the given sequence. max_current = max_global = sequence[0] for num in sequence[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Function to process input in form of a space-separated string def solve(input_string): sequence = list(map(int, input_string.split())) return max_subarray_sum(sequence)"},{"question":"A botanist is studying the health of the plants in a greenhouse. She records the health index of each plant as an integer in an array. She has identified three possible operations that she can perform to standardize the health index of the plants so that they all have the same value. The operations are: 1. Choose a subarray and increase the health index of every plant in that subarray by 1. 2. Choose a subarray and decrease the health index of every plant in that subarray by 1. 3. Choose a single plant and set its health index to a new value. She wants to find out the minimum number of operations needed to make all health indices in the array equal. -----Input----- The first line contains a single integer t (1 le t le 2 cdot 10^4) — the number of test cases. The description of t test cases follows. The first line of each test case contains a single integer n (1 leq n leq 200000). The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the health indices of the plants. It is guaranteed that the sum of n over all test cases doesn\'t exceed 200000. -----Output----- For each test case, output a single integer — the minimum number of operations required to make all health indices equal. -----Examples----- Input 3 3 4 4 4 4 1 2 3 4 5 10 10 10 10 10 Output 0 3 0 -----Note----- In the first test case, all health indices are already equal, so no operations are needed. In the second test case, by incrementing the subarray [1, 2, 4] by 1 two times, and the subarray [1] by 1 once, you can make all the values equal to 4, requiring 3 operations in total. In the third test case, all health indices are already equal, so no operations are needed.","solution":"def min_operations_to_equal_health_indices(t, test_cases): Returns the minimum number of operations needed to make all health indices equal for each test case. Parameters: - t: number of test cases - test_cases: list of tuples, each containing (n, health_indices) Returns: - List of integers representing minimum number of operations for each test case. results = [] for n, health_indices in test_cases: max_occurrences = max([health_indices.count(x) for x in set(health_indices)]) # Minimum operations needed: total number of plants - maximum occurrences of any single value min_operations = n - max_occurrences results.append(min_operations) return results"},{"question":"Write a program that takes a list of integers and returns the maximum difference between any two elements such that the larger element appears after the smaller element in the list. For example, given the list `[7, 1, 5, 3, 6, 4]`, the program should return `5`, which is the difference between `6` and `1`. If no such pair exists, return `0`. The input list may contain negative integers and can be empty. In case of an empty list, the function should return `0`.","solution":"def max_difference(arr): Returns the maximum difference between any two elements such that the larger element appears after the smaller element in the list. Parameters: arr (list): List of integers Returns: int: Maximum difference, or 0 if no such pair exists if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for num in arr[1:]: if num > min_element: max_diff = max(max_diff, num - min_element) min_element = min(min_element, num) return max_diff"},{"question":"In a distant land, there exists a peculiar game that the inhabitants play called \\"Even Magic\\". The rules of the game are simple: a group of friends is given a sequence of non-negative integers, and their task is to determine whether the sum of only the even digits of each integer in the sequence is a prime number. A digit is considered prime if it is greater than 1 and has no positive divisors other than 1 and itself. The prime even digits are 2. Write a function to help the friends determine the outcome of the game. Input: The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a sequence of non-negative integers separated by spaces. Output: For each test case, print \\"Even Magic!\\" if the sum of the even digits of the sequence of integers is a prime number, otherwise print \\"No Magic!\\". Constraints: 1 ≤ T ≤ 50 1 ≤ Length of each integer ≤ 18 (some integers may have leading zeros) 1 ≤ Number of integers in each test case ≤ 100 SAMPLE INPUT 2 124 5680 77 1023 4567 89 SAMPLE OUTPUT Even Magic! No Magic! Explanation Test case 1: - The even digits in each number are: 124 -> 2, 4; 5680 -> 6, 8, 0; 77 -> no even digits - Sum of even digits: 2 + 4 + 6 + 8 + 0 = 20 - 20 is not a prime number, hence the output is \\"No Magic!\\". Test case 2: - The even digits in each number are: 1023 -> 2, 0; 4567 -> 4, 6; 89 -> 8 - Sum of even digits: 2 + 0 + 4 + 6 + 8 = 20 - 20 is not a prime number, hence the output is \\"No Magic!\\".","solution":"def is_prime(n): Determines if a given number n is a prime number. if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def even_magic_game(T, test_cases): Determines the outcome of the game \\"Even Magic\\" for each test case. Parameters: T (int): Number of test cases. test_cases (list of str): List containing sequences of non-negative integers as strings. Returns: list of str: List containing \\"Even Magic!\\" or \\"No Magic!\\" for each test case. results = [] for case in test_cases: even_sum = 0 numbers = case.split() for number in numbers: for digit in number: if digit in \'02468\': even_sum += int(digit) if is_prime(even_sum): results.append(\\"Even Magic!\\") else: results.append(\\"No Magic!\\") return results"},{"question":"Create a function that takes a list of strings representing mathematical expressions and evaluates each expression. The expressions will involve only non-negative integers and the four basic arithmetic operations: addition, subtraction, multiplication, and division. The function should return a list of results for each expression. Implement a function `evaluate_expressions(expressions: List[str]) -> List[float]` that evaluates each expression in the input list and returns the results as a list of floats. The function should be able to handle the basic arithmetic operations and respect the order of operations (PEMDAS/BODMAS rules). -----Input:----- - A list of strings `expressions`, where each string represents a mathematical expression. -----Output:----- - A list of floats representing the result of each expression. -----Constraints----- - The length of the list `expressions` will be between 1 and 1000. - Each expression will be a non-empty string and will contain valid mathematical expressions. - Each expression will be at most 100 characters long. - Each expression only contains non-negative integers (0-9) and the operators `+`, `-`, `*`, and `/`. - Division will be treated as floating-point division, e.g. `4 / 2 = 2.0`. -----Sample Input:----- [\\"2+3*4\\", \\"10/2-3\\", \\"5*6-3/3\\", \\"20-10/2\\"] -----Sample Output:----- [14.0, 2.0, 29.0, 15.0]","solution":"from typing import List def evaluate_expressions(expressions: List[str]) -> List[float]: Evaluates a list of mathematical expressions and returns the results as a list of floats. def eval_expression(expression: str) -> float: # Use eval to evaluate the expression return eval(expression) return [eval_expression(expr) for expr in expressions]"},{"question":"Given an integer `n`, generate a hollow square with a \'+\' border and space inside. The minimum possible value for `n` is 2. Write a function `hollow_square(n)` that takes an integer as input and returns a string representation of the hollow square. Each line of the square should be separated by \'n\'. For example: ```python hollow_square(3) ``` Output: ``` +++ + + +++ ``` ```python hollow_square(5) ``` Output: ``` +++++ + + + + + + +++++ ```","solution":"def hollow_square(n): Returns a string representation of a hollow square with a \'+\' border and space inside for given integer n. if n < 2: raise ValueError(\\"n should be at least 2\\") top_bottom_row = \'+\' * n middle_row = \'+\' + \' \' * (n - 2) + \'+\' if n > 2 else \'+\' * n hollow_square = [top_bottom_row] for _ in range(n - 2): hollow_square.append(middle_row) if n > 1: hollow_square.append(top_bottom_row) return \'n\'.join(hollow_square)"},{"question":"You are given an integer array representing the performance of two video game players in a 10-round match. Each player earns points for completing tasks within a round, and the team total score is calculated by summing these points. The array alternates between Player 1\'s and Player 2\'s scores for each round. Your task is to determine which player has the higher total score by the end of the 10 rounds, or if the match ends in a tie. ------- Input Format ------- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains ten space-separated integers representing the scores in each round. ------ Output Format ------ For each test case, print a single line containing one integer - 0 if the match is a tie, 1 if Player 1 wins or 2 if Player 2 wins. ------ Constraints ------ - 1 ≤ T ≤ 1024 - 0 ≤ points ≤ 100 ------ Sample Input 1 ------ 3 10 20 30 40 50 60 70 80 90 100 100 90 80 70 60 50 40 30 20 10 25 25 25 25 25 25 25 25 25 25 ------ Sample Output 1 ------ 2 1 0 ----- Explanation 1 ------ Test case 1: Player 2 has a higher total score of 300 compared to Player 1\'s 250, so Player 2 wins. Test case 2: Player 1 has a higher total score of 250 compared to Player 2\'s 150, so Player 1 wins. Test case 3: Both players have the same total score of 125, so the match ends in a tie.","solution":"def determine_winner(test_cases): results = [] for scores in test_cases: player1_total = sum(scores[::2]) player2_total = sum(scores[1::2]) if player1_total > player2_total: results.append(1) elif player2_total > player1_total: results.append(2) else: results.append(0) return results"},{"question":"A painter is working on creating a unique design on a canvas and needs to replicate the design across multiple canvases. The design follows a specific pattern that involves numbers and blanks. Help the painter by coding a function that will generate this pattern. -----Input:----- - The first line contains N, the number of test cases. Followed by N lines. - Each subsequent line contains a single integer M which denotes the size of the canvas. -----Output:----- For each test case, output the pattern for the given canvas size M. Each pattern should be followed by a blank line to separate the output of different test cases. -----Constraints----- - 1 leq N leq 100 - 1 leq M leq 20 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 2 3 4 5 6 1 2 3 4 5 6 7 8 9 10 -----EXPLANATION:----- For the first test case, M = 3: 1 2 3 4 5 6 For the second test case, M = 4: 1 2 3 4 5 6 7 8 9 10 The numbers should be continuously incremented row-wise in each canvas pattern.","solution":"def generate_pattern(n, m_sizes): This function generates patterns for given sizes of canvases. Parameters: n (int): Number of test cases. m_sizes (list): List contains M size for each test case. Returns: list: List of patterns for each test case separated by blank lines result = [] for m in m_sizes: current_number = 1 canvas = [] for i in range(1, m + 1): row = [] for j in range(i): row.append(current_number) current_number += 1 canvas.append(\\" \\".join(map(str, row))) result.append(\\"n\\".join(canvas)) return \\"nn\\".join(result) # Example usage: # number_of_cases = 2 # sizes = [3, 4] # output = generate_pattern(number_of_cases, sizes) # print(output)"},{"question":"In a small town, a peculiar social network has formed. Each town resident is either a friend or an enemy of another resident. However, in this social network, friendships and enmities are mutual. If person A is a friend of person B, then person B is also a friend of person A, and similarly, if person A is an enemy of person B, then person B is also an enemy of person A. You have received a list of relationships between the residents, where each relationship is described by three integers: A, B, and R. Here, A and B are the indices of two residents (0-indexed), and R is a relationship value that is 1 if they are friends and -1 if they are enemies. Your task is to determine if it is possible to divide the residents into two groups such that each group contains only friends and all enmities are between the two groups. -----Input:----- - The first line contains two integers N and M, where N is the number of residents and M is the number of relationships. - The next M lines each contain three integers A, B, and R representing a relationship between residents A and B, where R is either 1 (friends) or -1 (enemies). -----Output:----- - Print \\"YES\\" if it is possible to divide the residents into two such groups. Otherwise, print \\"NO\\". -----Constraints----- - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 2000 - 0 ≤ A, B < N - A ≠ B - R ∈ {1, -1} -----Sample Input1:----- 4 4 0 1 1 1 2 -1 2 3 1 3 0 -1 -----Sample Output1:----- YES -----Sample Input2:----- 3 3 0 1 1 1 2 -1 2 0 1 -----Sample Output2:----- NO -----EXPLANATION:----- In Sample 1: - It is possible to divide the residents into two groups: {0, 2} and {1, 3}. - Group {0, 2} are friends with each other, and group {1, 3} are friends with each other. - All enmities are between these two groups, satisfying the conditions. In Sample 2: - Any way to divide the residents into two groups will always have at least one contradiction, making it impossible to divide them as required.","solution":"def can_divide_social_network(N, M, relationships): from collections import defaultdict, deque graph = defaultdict(list) for A, B, R in relationships: if R == 1: graph[A].append((B, 1)) graph[B].append((A, 1)) else: graph[A].append((B, -1)) graph[B].append((A, -1)) colors = [-1] * N def bfs(node): queue = deque([(node, 0)]) while queue: current, color = queue.popleft() if colors[current] != -1: if colors[current] != color: return False continue colors[current] = color for neighbor, rel in graph[current]: if rel == 1: queue.append((neighbor, color)) else: queue.append((neighbor, 1 - color)) return True for i in range(N): if colors[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"# Problem Statement You are given a list of `n` cities connected by `m` roads. Each road connects two cities and has a travel time associated with it. You need to find the shortest travel time between two specific cities `u` and `v`. If there is no path between these two cities, output \\"INF\\". # Constraints * 2 ≤ n ≤ 100 * 1 ≤ m ≤ 1000 * 1 ≤ t ≤ 1000 * 1 ≤ u, v ≤ n * u ≠ v * All city connections are bidirectional. # Input The input is given in the following format: ``` n m u v c1 c2 t1 c3 c4 t2 ... cm1 cm2 tm ``` The first line contains four integers `n` (number of cities), `m` (number of roads), `u` (start city), and `v` (end city) separated by spaces. The following `m` lines each contain two integers `ci` and `cj` (representing cities connected by the road) and one integer `ti` (travel time for the road) separated by spaces. # Output Output the shortest travel time from city `u` to city `v`. If there is no path, output \\"INF\\". # Examples Example 1 Input: ``` 4 4 1 4 1 2 4 2 3 1 3 4 3 1 3 2 ``` Output: ``` 5 ``` Example 2 Input: ``` 5 6 1 5 1 2 2 2 3 4 3 4 1 4 5 7 1 3 6 3 5 3 ``` Output: ``` 9 ``` Example 3 Input: ``` 4 3 1 4 1 2 2 2 3 4 3 1 1 ``` Output: ``` INF ``` # Notes You need to use a graph traversal algorithm such as Dijkstra\'s algorithm to find the shortest path in the weighted, undirected graph representing the cities and roads. If no path exists between cities `u` and `v`, output \\"INF\\".","solution":"import heapq def shortest_travel_time(n, m, u, v, roads): graph = [[] for _ in range(n + 1)] for c1, c2, t in roads: graph[c1].append((t, c2)) graph[c2].append((t, c1)) def dijkstra(start, end): heap = [(0, start)] # (travel time, city) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while heap: current_time, current_city = heapq.heappop(heap) if current_city == end: return current_time if current_time > distances[current_city]: continue for travel_time, neighbor in graph[current_city]: time = current_time + travel_time if time < distances[neighbor]: distances[neighbor] = time heapq.heappush(heap, (time, neighbor)) return float(\'inf\') result = dijkstra(u, v) return result if result != float(\'inf\') else \\"INF\\""},{"question":"Write a function `conways_game_of_life(board)` that takes a 2D list representing the state of a board in Conway\'s Game of Life and returns a new 2D list representing the next state of the board. The rules of Conway\'s Game of Life are: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Each cell has at most 8 neighbors which are the cells that are directly horizontal, vertical, or diagonal to it. # Input * `board` (list of list of integers): a 2D list where each element is either 0 (representing a dead cell) or 1 (representing a live cell). # Output * Returns a new 2D list of the same dimensions, representing the next state of the board. # Examples ```python conways_game_of_life([ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ]) # returns [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] conways_game_of_life([ [1, 1, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0], [0, 0, 0, 0] ]) # returns [ [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0], [0, 1, 0, 0] ] ``` # Note - The input board\'s dimensions will always be at least 1x1. - The function must return a new board without modifying the input. # Constraints - The board dimensions will not exceed 1000x1000.","solution":"def conways_game_of_life(board): Update the board to its next state according to Conway\'s Game of Life rules. Parameters: board (list of list of ints): A 2D grid where each cell is 0 (dead) or 1 (alive). Returns: list of list of ints: The next state grid. rows, cols = len(board), len(board[0]) def get_neighbors_count(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: live_neighbors += board[nx][ny] return live_neighbors new_board = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = get_neighbors_count(r, c) if board[r][c] == 1: # Current cell is alive if live_neighbors < 2 or live_neighbors > 3: new_board[r][c] = 0 else: new_board[r][c] = 1 else: # Current cell is dead if live_neighbors == 3: new_board[r][c] = 1 return new_board"},{"question":"Given a list of integers, find the length of the longest subarray that contains only unique elements. A subarray is defined as a contiguous part of an array. Input First line contains an integer T (number of test cases). Each of the next T lines contains an integer n (length of the array), followed by n space-separated integers representing the array. Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^5 1 ≤ array[i] ≤ 10^9 SAMPLE INPUT 2 5 1 2 1 3 4 6 1 2 3 4 5 6 SAMPLE OUTPUT 4 6 Explanation: - In the first test case, the longest subarray with unique elements is [2, 1, 3, 4] which has the length of 4. - In the second test case, the entire array [1, 2, 3, 4, 5, 6] is the longest subarray with unique elements and its length is 6.","solution":"def length_of_longest_unique_subarray(arr): Returns the length of the longest subarray with unique elements. n = len(arr) max_length = 0 start = 0 seen = {} for i in range(n): if arr[i] in seen and seen[arr[i]] >= start: start = seen[arr[i]] + 1 seen[arr[i]] = i max_length = max(max_length, i - start + 1) return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(length_of_longest_unique_subarray(arr)) return results"},{"question":"Given an array of N integers, you need to perform Q queries of two types: 1. Update the value at a given index in the array. 2. Calculate and display the sum of the elements in a given subarray. Implement a program that handles these operations efficiently. # Input: - The first line contains two integers N (number of elements in the array) and Q (number of queries). - The second line contains N space-separated integers representing the elements of the array. - The next Q lines contain queries. Each query is formatted as follows: - For an update query: \\"1 X Y\\", where X is the index to be updated (1-based index) and Y is the new value. - For a sum query: \\"2 L R\\", where L is the starting index and R is the ending index (1-based index) of the subarray for which the sum needs to be calculated. # Output: - For each sum query, output the sum of the specified subarray on a new line. # Constraints: - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq A_i leq 10^9 (element of the array) - 1 leq X leq N - 1 leq L leq R leq N # Sample Input: ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 2 5 1 5 6 2 1 5 ``` # Sample Output: ``` 6 21 23 ``` # Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query is a sum query from index 1 to 3, which involves the subarray [1, 2, 3]. The sum is 6. - The second query updates the value at index 3 to 10. The array now becomes [1, 2, 10, 4, 5]. - The third query is a sum query from index 2 to 5, which involves the subarray [2, 10, 4, 5]. The sum is 21. - The fourth query updates the value at index 5 to 6. The array now becomes [1, 2, 10, 4, 6]. - The fifth query is a sum query from index 1 to 5, which involves the whole array [1, 2, 10, 4, 6]. The sum is 23.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree = [0] * (2 * self.n) self.build() def build(self): for i in range(self.n): self.tree[self.n + i] = self.data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: self.tree[pos >> 1] = self.tree[pos] + self.tree[pos ^ 1] pos >>= 1 def sum_range(self, left, right): left += self.n right += self.n s = 0 while left < right: if left & 1: s += self.tree[left] left += 1 if right & 1: right -= 1 s += self.tree[right] left >>= 1 right >>= 1 return s def handle_queries(N, Q, arr, queries): seg_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: _, X, Y = query seg_tree.update(X - 1, Y) elif query[0] == 2: _, L, R = query result = seg_tree.sum_range(L - 1, R) results.append(result) return results"},{"question":"A company wants to build a system that manages employee records. Each employee has a unique integer ID and a string name. They also have a manager who is also an employee of the company (except for the topmost manager who does not have any manager). The company wants to implement the following functionalities: 1. Add a new employee with a given ID and name. 2. Set the manager of a given employee. 3. Get the immediate manager of a given employee. 4. Get the direct reports of a given employee. 5. Get a path from a given employee up to the topmost manager (the hierarchy path). Example: Input: commands = [ (\\"add\\", 1, \\"Alice\\"), (\\"add\\", 2, \\"Bob\\"), (\\"add\\", 3, \\"Charlie\\"), (\\"set_manager\\", 2, 1), (\\"set_manager\\", 3, 1), (\\"get_manager\\", 2), (\\"get_reports\\", 1), (\\"get_hierarchy_path\\", 3) ] Output: [ None, None, None, None, None, 1, [2, 3], [3, 1] ] Your Task: You don\'t need to read input or print anything. Your task is to design and implement the `EmployeeManager` class which manages employee records and implements the functionalities described. The class should have the following methods: - `add(id: int, name: str) -> None`: Adds a new employee with the given ID and name. - `set_manager(employee_id: int, manager_id: int) -> None`: Sets the manager of the employee with the given ID. - `get_manager(employee_id: int) -> int`: Returns the ID of the immediate manager of the given employee. If the employee doesn\'t have a manager, return -1. - `get_reports(manager_id: int) -> List[int]`: Returns a list of IDs of the direct reports of the given manager. - `get_hierarchy_path(employee_id: int) -> List[int]`: Returns the hierarchy path from the given employee up to the topmost manager. Expected Time Complexity: O(1) for `add` and `get_manager`, O(N) for `set_manager`, `get_reports`, and `get_hierarchy_path`. Expected Auxiliary Space: O(N) for storing employee data and the hierarchy. Constraints: - 1<=id<=10^{5} - `name` is a non-empty string of alphanumeric characters with length <= 100.","solution":"class EmployeeManager: def __init__(self): self.employees = {} self.managers = {} self.reports = {} def add(self, id: int, name: str) -> None: Adds a new employee with the given ID and name. self.employees[id] = name self.managers[id] = -1 self.reports[id] = [] def set_manager(self, employee_id: int, manager_id: int) -> None: Sets the manager of the employee with the given ID. self.managers[employee_id] = manager_id self.reports[manager_id].append(employee_id) def get_manager(self, employee_id: int) -> int: Returns the ID of the immediate manager of the given employee. return self.managers[employee_id] def get_reports(self, manager_id: int) -> list[int]: Returns a list of IDs of the direct reports of the given manager. return self.reports[manager_id] def get_hierarchy_path(self, employee_id: int) -> list[int]: Returns the hierarchy path from the given employee up to the topmost manager. path = [] current_id = employee_id while current_id != -1: path.append(current_id) current_id = self.managers[current_id] path.reverse() return path"},{"question":"Write a function that determines if a certain path can be found in a grid. The rules for paths are: 1. A path must start at the top-left corner of the grid. 2. A path must end at the bottom-right corner of the grid. 3. A path can only move right or down at any step. The grid is an N x M grid (where 1 ≤ N, M ≤ 1000) and is represented by a matrix where each cell is either 0 (plot is free) or 1 (plot is blocked and cannot be part of the path). # Input 1. The grid itself, represented by a matrix of size N x M, where each element is either 0 or 1. # Output 1. Return `True` if there is a valid path from top-left to bottom-right, and `False` otherwise. # Examples ```python canFindPath([[0, 0, 1], [0, 1, 0], [0, 0, 0]]) => True # Path: Down -> Down -> Right -> Right canFindPath([[0, 1, 0], [1, 0, 0], [0, 0, 0]]) => False # No valid path ``` ``` haskell canFindPath [[0, 0, 1], [0, 1, 0], [0, 0, 0]] == True -- Path: Down -> Down -> Right -> Right canFindPath [[0, 1, 0], [1, 0, 0], [0, 0, 0]] == False -- No valid path ```","solution":"def canFindPath(grid): Determines if there is a valid path from the top-left to the bottom-right corner of the grid, following the rules specified. :param grid: List of List of int, representing the N x M grid :return: bool, True if there is a valid path, False otherwise if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False N, M = len(grid), len(grid[0]) from collections import deque queue = deque([(0, 0)]) directions = [(1, 0), (0, 1)] while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == 0: queue.append((nx, ny)) grid[nx][ny] = 2 # Mark visited path return False"},{"question":"You are given a 2D grid of size n x n. Each cell of the grid initially contains an integer value. You have two types of operations that can be performed on this grid: 1. **Update Operation:** Set the value of a specific cell (i, j) to a given value x. 2. **Summation Operation:** Calculate the sum of all values within a subgrid defined by its top-left corner (r1, c1) and its bottom-right corner (r2, c2). Implement a data structure that efficiently supports these operations. Input The first line contains two integers n (1 ≤ n ≤ 103) and q (1 ≤ q ≤ 105) — the size of the grid and the number of queries. The next n lines contain n integers each, the initial values of the cells in the grid. The next q lines describe the queries. Each query is represented by a line with the following format: - `1 i j x` — An update operation that sets the value of cell (i, j) to x (1 ≤ i, j ≤ n, 1 ≤ x ≤ 109). - `2 r1 c1 r2 c2` — A summation operation that calculates the sum of values in the subgrid from (r1, c1) to (r2, c2) (1 ≤ r1, c1, r2, c2 ≤ n). Output For each summation operation, output the resulting sum on a new line. Example Input 3 5 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 2 2 10 2 1 1 2 2 2 1 1 3 3 2 2 2 2 2 Output 12 16 58 10 Explanation - The sum of the subgrid from (1, 1) to (2, 2) in the initial grid is 1 + 2 + 4 + 5 = 12. - After updating (2, 2) to 10, the sum of that subgrid becomes 1 + 2 + 4 + 10 = 16. - The sum of the entire grid is now 1 + 2 + 3 + 4 + 10 + 6 + 7 + 8 + 9 = 58. - The value at cell (2, 2) is now 10.","solution":"class Grid: def __init__(self, n, grid): self.n = n self.grid = grid def update(self, i, j, x): self.grid[i][j] = x def sum_subgrid(self, r1, c1, r2, c2): total_sum = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): total_sum += self.grid[i][j] return total_sum"},{"question":"Detecting a cycle in a graph is a fundamental problem in computer science. A cycle in a graph is a path that starts and ends at the same vertex. For this problem, you will be given an undirected graph, and your task is to determine whether the graph has any cycles. Input The first line contains an integer `T` (1 ≤ T ≤ 10), the number of test cases. Each test case starts with two integers `N` and `M` (0 ≤ N ≤ 1000, 0 ≤ M ≤ 2000), where `N` is the number of vertices and `M` is the number of edges. The next `M` lines contain pairs of integers `u` and `v` (0 ≤ u, v < N), indicating an edge between vertex `u` and vertex `v`. Output For each test case, output \\"Cycle Detected\\" if there\'s at least one cycle in the graph, otherwise print \\"No Cycle\\". Example Input: 2 3 3 0 1 1 2 2 0 4 2 0 1 2 3 Output: Cycle Detected No Cycle","solution":"def has_cycle(graph, N): visited = [False] * N parent = [-1] * N def dfs(v): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: parent[neighbor] = v if dfs(neighbor): return True elif parent[v] != neighbor: return True return False for i in range(N): if not visited[i]: if dfs(i): return True return False def detect_cycles(test_cases): results = [] for case in test_cases: N, M, edges = case graph = [[] for _ in range(N)] for u, v in edges: graph[u].append(v) graph[v].append(u) if has_cycle(graph, N): results.append(\\"Cycle Detected\\") else: results.append(\\"No Cycle\\") return results def graph_input_parser(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) edges = [] for i in range(M): u, v = map(int, lines[index + 1 + i].split()) edges.append((u, v)) test_cases.append((N, M, edges)) index += 1 + M return test_cases def main(input_string): test_cases = graph_input_parser(input_string) results = detect_cycles(test_cases) return \\"n\\".join(results)"},{"question":"The Riverwood city administration has decided to add some new roads to connect important places in the city. The city can be considered as a grid of size n × m where each cell represents a possible intersection point of roads. The roads can only be constructed along the edges of the cells, either horizontally or vertically. The city administration wants to ensure that all intersections remain accessible, with no more than one path leading to each intersection. Therefore, they need to add the minimal number of roads so that all the intersections (cells) are connected in a spanning tree structure (without any cycles). Given the dimensions n and m of the grid, your task is to determine the minimum number of roads needed to connect all intersections in the grid. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 10^6) — the dimensions of the grid. -----Output----- Print one integer — the minimum number of roads needed to connect all intersections in the grid. -----Examples----- Input 3 4 Output 11 Input 2 2 Output 3 Input 1 1 Output 0 -----Note----- In the first example, we need to connect all 3x4 intersections. A minimal spanning tree in this grid will require exactly 11 roads. In the second example, we need to connect all 2x2 intersections. A minimal spanning tree in this grid will require exactly 3 roads. In the third example, there is only one cell, so no roads are needed. The output is 0.","solution":"def minimum_roads(n, m): Returns the minimum number of roads needed to connect all intersections in an n x m grid. if n == 1 and m == 1: return 0 return n * m - 1"},{"question":"Alice is fascinated by symmetry in strings. She wants to find out, for a given string, the length of the longest substring that is a palindrome. A palindrome reads the same forward and backward. For instance, \\"racecar\\" and \\"madam\\" are palindromic strings. Write a function that determines the length of the longest palindromic substring for a given string. Your task is to implement a function `longest_palindromic_substring` that takes a single string as input and returns the length of the longest palindromic substring within that string. Function Signature: `def longest_palindromic_substring(s: str) -> int` # Input - A single string `s` containing only lowercase English letters. (1 ≤ |s| ≤ 1000) # Output - An integer representing the length of the longest palindromic substring in the given string. # Example Example 1 Input: ``` babad ``` Output: ``` 3 ``` Explanation: \\"bab\\" is the longest palindromic substring. \\"aba\\" is also a valid answer, but they both have the same length of 3. Example 2 Input: ``` cbbd ``` Output: ``` 2 ``` Explanation: \\"bb\\" is the longest palindromic substring with length 2.","solution":"def longest_palindromic_substring(s: str) -> int: def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 if s is None or len(s) < 1: return 0 start = 0 end = 0 for i in range(len(s)): len1 = expand_around_center(s, i, i) len2 = expand_around_center(s, i, i + 1) max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return end - start + 1"},{"question":"A company has decided to develop an intern training program wherein the interns need to get used to their software version control system. To test their understanding of the system, they have been given a task to compute the number of times a file has been committed and reinstated to a particular state. You are given the history of file versions for a file, each represented by an integer version number. You need to calculate the number of times any version has appeared more than once in the commit history. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of commits made. The second line contains n space-separated integers representing the version number of the file after each commit. The version numbers are integers and their absolute values do not exceed 1000. Output Print one integer — the number of times any version number appears more than once in the commit history. Examples Input 5 1 2 3 2 1 Output 2 Input 3 1 1 1 Output 2 Input 4 4 3 2 1 Output 0","solution":"def count_repeated_versions(n, versions): Returns the number of times any version number appears more than once in the commit history. from collections import Counter version_count = Counter(versions) repeated_count = sum(count - 1 for count in version_count.values() if count > 1) return repeated_count"},{"question":"You are a software developer tasked with implementing a reservation system for a popular restaurant. The restaurant receives a number of reservation requests daily, and each request consists of a party size and a desired reservation time. The restaurant aims to maximize its seating capacity utilization while accommodating as many requests as possible. Each table can accommodate exactly four guests and cannot be shared between different parties. Given a list of reservation requests with their party sizes and the number of tables available, determine how many requests can be fulfilled and calculate the total number of guests that can be seated. Input First line of input will contain D (total number of days). For each day, the first line contains T (number of tables available) and R (number of reservation requests) separated by a space. Next each R lines will contain two integers Si (size of ith party) and Ti (desired time of reservation) separated by a space. Output For each day, output \\"For Day #day_number:\\" then in the next line, print the number of fulfilled requests and the total number of guests seated. If no requests can be fulfilled, print \\"No reservations fulfilled\\". Constraints 1 <= D <= 10 1 <= T <= 20 1 <= R <= 50 1 <= Si <= 4 1 <= Ti <= 24 SAMPLE INPUT 1 5 6 3 18 4 19 2 20 4 21 1 22 3 22 SAMPLE OUTPUT For Day #1: 5 Totally seated guests: 14 Explanation The restaurant can seat five parties with sizes 3, 4, 2, 1, and 3 respectively, at their desired times using five tables out of the available five. Hence, 5 requests are fulfilled, and a total of 14 guests are seated.","solution":"def reservation_system(d, days): results = [] for day in range(d): T, R = days[day][0] requests = sorted(days[day][1:], key=lambda x: x[1]) # Sort requests by time fulfilled_requests = 0 total_guests = 0 for size, _ in requests: if size <= 4 and T > 0: fulfilled_requests += 1 total_guests += size T -= 1 if fulfilled_requests > 0: results.append(f\\"For Day #{day+1}:n{fulfilled_requests}nTotally seated guests: {total_guests}n\\") else: results.append(f\\"For Day #{day+1}:nNo reservations fulfilledn\\") return results"},{"question":"A company\'s internal system records employee work hours in a weekly format. Each employee has a record of daily hours worked for Monday through Friday, and an employee is considered to be full-time if they work for at least 40 hours in a week. Design a program that takes the number of hours worked for Monday, Tuesday, Wednesday, Thursday, and Friday as input, then calculates the total weekly hours and determines whether the employee is full-time. The program should output the total weekly hours and \\"Full-time\\" if the employee is full-time, otherwise \\"Part-time\\". **Input:** Five integers separated by spaces, representing the hours worked on Monday, Tuesday, Wednesday, Thursday, and Friday, respectively (each integer ranging from 0 to 24). **Output:** On the first line, output the total weekly hours worked. On the second line, print \\"Full-time\\" if the total is 40 hours or more, otherwise print \\"Part-time\\". **Example:** **Input:** 8 9 8 8 8 **Output:** 41 Full-time **Input:** 5 6 7 8 8 **Output:** 34 Part-time Note: The input hours are guaranteed to be valid whole numbers within the specified range.","solution":"def work_hours_status(monday, tuesday, wednesday, thursday, friday): Calculate the total weekly hours worked and determine full-time or part-time status. Args: monday (int): Hours worked on Monday. tuesday (int): Hours worked on Tuesday. wednesday (int): Hours worked on Wednesday. thursday (int): Hours worked on Thursday. friday (int): Hours worked on Friday. Returns: tuple: Total weekly hours (int) and status (str: \\"Full-time\\" or \\"Part-time\\"). weekly_hours = monday, tuesday, wednesday, thursday, friday total_hours = sum(weekly_hours) if total_hours >= 40: status = \\"Full-time\\" else: status = \\"Part-time\\" return total_hours, status"},{"question":"Given a string containing digits and lowercase English letters, rearrange the string such that all digits come before all the letters. Retain the relative order of the digits and the letters. For example, the string \\"a1b2c3\\" should be rearranged to \\"123abc\\". -----Input----- The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000). -----Output----- Output a single line containing the rearranged string. -----Examples----- Input a1b2c3 Output 123abc Input cba321 Output 321cba Input 1a2b3c Output 123abc","solution":"def rearrange_string(s): Rearrange the string such that all digits come before all letters while retaining their relative order. digits = [] letters = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(digits + letters)"},{"question":"Write a function that takes an array of integers as input and returns an array of integers that contains only the elements that are repeated in the input array, sorted in ascending order. Each repeated element should appear only once in the output array, regardless of its original frequency. # Input: A single line containing a space-separated list of integers. The length of the list does not exceed 1000 elements. Each integer in the list is between -1000 and 1000. # Output: A single line containing a space-separated list of the repeated integers sorted in ascending order. If there are no repeated elements, the output should be an empty line. # Example: Input: 4 5 6 6 7 8 8 8 9 10 Output: 6 8 Input: 1 2 3 4 5 6 Output:","solution":"def find_repeated_elements(arr): Takes an array of integers and returns an array of integers that are repeated in the input array, sorted in ascending order. Args: arr (list): List of integers. Returns: list: Sorted list of repeated integers. from collections import Counter # Count the frequency of each element in the array count = Counter(arr) # Extract elements that appear more than once, then sort them repeated_elements = sorted([num for num, freq in count.items() if freq > 1]) return repeated_elements"},{"question":"You are given a string s consisting of lowercase Latin letters, and you can perform at most one operation: choose any substring of the string and convert it to a palindrome by replacing some (possibly zero) characters. Your task is to determine the length of the longest substring that can be made into a palindrome with at most one operation. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 1000) — the string to be processed. -----Output----- For each test case, print the integer representing the length of the longest substring that can be converted to a palindrome with at most one operation. -----Example----- Input 3 abba abac abcde Output 4 3 1","solution":"def longest_palindromic_substring_length(t, strings): def is_palindromic(s, left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True def length_of_longest_palindromic_substring(s): n = len(s) max_length = 1 for i in range(n): for j in range(i, n): if is_palindromic(s, i, j): max_length = max(max_length, j - i + 1) return max_length results = [] for s in strings: results.append(length_of_longest_palindromic_substring(s)) return results"},{"question":"A rectangular grid with n times m cells is given, where each cell can either be empty or have a wall. You are tasked to find the number of unique paths from the top-left corner to the bottom-right corner. You can move only down or right at any point in time, and you cannot pass through the walls. -----Input----- The first line contains two space-separated integers n and m (1 leq n, m leq 1,000) — the number of rows and the number of columns in the grid, respectively. Each of the next n lines contains m characters, representing the grid. Each character is either \'.\' (an empty cell) or \'#\' (a cell with a wall). The top-left (1, 1) and bottom-right (n, m) cells are always empty. -----Output----- Output a single integer, the number of unique paths from the top-left to the bottom-right corner. As the number of paths can be large, output its remainder when divided by 1,000,000,007. -----Examples----- Input 3 3 . . . . # . . . . Output 2 Input 2 2 . . # . Output 1","solution":"def num_unique_paths(n, m, grid): MOD = 1000000007 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1]"},{"question":"A company wants to analyze the internet traffic over its network. Each data packet that passes through is recorded with a timestamp and a packet size. The network operator needs to frequently answer queries about the total data transfer in a given time range. They need your help to implement an efficient solution to handle these operations: The network operator gives you two types of commands: A timestamp size which implies that a data packet of `size` has passed through the network at the given `timestamp`. Q start end which implies that the operator needs to know the total size of data packets that were recorded between timestamps `start` and `end` (inclusive). You need to write a program to process these commands and provide the correct answers for each of the operator\'s queries. Input Format First line contains `N`, number of commands to follow. Next `N` lines contain either an Add command or a Query command. Each Add command consists of the letter \'A\' followed by two integers `timestamp` and `size`. Each Query command consists of the letter \'Q\' followed by two integers `start` and `end`. Output Format For each Query command, output the answer in a separate line. Constraints 1 ≤ N ≤ 2 * 10^5 1 ≤ timestamp, start, end ≤ 10^6 1 ≤ size ≤ 10^3 start ≤ end Sample Input 5 A 100 200 A 150 300 Q 100 200 A 200 400 Q 100 250 Sample Output 500 900 Explanation 1. The operator adds a data packet of size 200 at timestamp 100. 2. The operator adds a data packet of size 300 at timestamp 150. 3. The operator queries the total size of packets recorded between timestamps 100 and 200, which includes packets added in step 1 and 2, resulting in a total size of 200 + 300 = 500. 4. The operator adds a data packet of size 400 at timestamp 200. 5. The operator queries the total size of packets recorded between timestamps 100 and 250, which includes all packets added in steps 1, 2, and 4, resulting in a total size of 200 + 300 + 400 = 900. Write an efficient solution to handle a large number of commands while optimizing the processing time for both Add and Query operations.","solution":"from collections import defaultdict class NetworkTraffic: def __init__(self): self.data = defaultdict(int) def add_packet(self, timestamp, size): self.data[timestamp] += size def query_data(self, start, end): total_size = 0 for timestamp in range(start, end + 1): total_size += self.data.get(timestamp, 0) return total_size def process_commands(commands): network_traffic = NetworkTraffic() results = [] for command in commands: if command[0] == \'A\': _, timestamp, size = command network_traffic.add_packet(timestamp, size) elif command[0] == \'Q\': _, start, end = command result = network_traffic.query_data(start, end) results.append(result) return results"},{"question":"Develop an algorithm to find the longest substring of distinct characters in a given string. The algorithm should return the length of this longest substring. * Target text: A single string of up to 1000 characters. * Characters: The string consists solely of lowercase alphabetic characters. input A single string over one line (all lowercase alphabet characters, no spaces or other delimiters). output An integer representing the length of the longest substring with all distinct characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def longest_distinct_substring(s): Returns the length of the longest substring with all distinct characters. char_map = {} max_length = 0 start = 0 for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Emma is creating a balanced string of parentheses. A string is balanced if every open parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\". Emma can perform the following operations: - Operation C: Insert a pair of balanced parentheses \\"()\\" into the string. - Operation D: Remove a pair of balanced parentheses \\"()\\". Emma starts with an empty string and needs to perform these operations M times in total. Determine the minimum possible length of the string after M operations. -----Constraints----- - 1 leq M leq 10 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: M -----Output----- Print the minimum possible length of the string after M operations. -----Sample Input----- 5 -----Sample Output----- 2 Emma can perform operations in the following order to minimize the string length: C, C, C, D, D. In this case, the string will change as follows: \\"\\" → \\"()\\" → \\"()()\\" → \\"()()()\\" → \\"()()\\" → \\"()\\". The minimum possible length of the string is 2.","solution":"def minimum_length_after_operations(M): Determine the minimum possible length of the string after M operations. # The minimum length of the string after M operations is always `M % 2 * 2`. # This is because every pair of operations (insertion and deletion) cancels out to zero length change. # If M is odd, there will be one insertion left, resulting in a length of 2. # If M is even, the length will be zero. return (M % 2) * 2"},{"question":"Alice and Bob are playing a game with an array of integers. The game works as follows: - Alice starts by choosing any subarray of the array. - Then, Alice adds one to every element of that subarray. - Bob then chooses any subarray of the array and subtracts one from every element of that subarray. - Alice and Bob take turns, with Alice starting first. The game ends when all elements of the array are equal. Determine the minimum number of moves for both players combined, such that the game is won, i.e., all elements of the array become equal. Constraints * All input values are integers. * 1 ≤ N ≤ 2 × 10^5 * -10^9 ≤ A_i ≤ 10^9 (1 ≤ i ≤ N) Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print an integer representing the minimum number of moves required to make all elements of the array equal. Examples Input 5 2 5 7 3 2 Output 9 Input 4 1 3 2 4 Output 4","solution":"def min_moves_to_equal_elements(arr): Returns the minimum number of moves required to make all elements in the array equal. if not arr: return 0 return max(arr) - min(arr)"},{"question":"A sequence of positive integers can be called \\"Beautiful\\" if and only if it does not contain any palindrome subsequence of length greater than 1. A palindrome is a sequence that is identical when read from both directions, for example, 121 or 323. You are given a positive integer N and your task is to determine if a sequence `A` of length `N` is Beautiful based on the following conditions: 1. For any two integers `i` and `j` such that `1 ≤ i, j ≤ N`, there exists a valid Beautiful sequence if `|i - j| > 2`. 2. Construct the valid Beautiful sequence `A` (if it exists), such that the values in the sequence are positive integers and each value `A[i]` satisfies `1 ≤ A[i] ≤ 2`. 3. Return \\"YES\\" if it is possible to construct Beautiful sequence `A`, otherwise return \\"NO\\". 4. If the sequence is achievable, print the sequence `A`. -----Input----- The first line contains a single positive integer T, the number of test cases. T test cases follow. The only line of each test case contains a single positive integer N, the length of the sequence `A`. -----Output----- For each test case print \\"YES\\" or \\"NO\\" and if the answer is \\"YES\\", print the sequence in the same line. -----Constraints----- 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -----Example----- Input: 3 3 4 5 Output: NO YES 1 2 1 2 YES 1 2 1 2 1 Explanation: - For N = 3, it is not possible to form a sequence without a palindromic subsequence, thus we output \\"NO\\". - For N = 4 and N = 5, valid sequences are shown since neither contain a palindromic subsequence of length greater than 1.","solution":"def is_beautiful_sequence_possible(N): if N == 1: return \\"YES\\", [1] elif N == 2: return \\"YES\\", [1, 2] elif N == 3: return \\"NO\\", [] else: sequence = [] for i in range(N): sequence.append((i % 2) + 1) return \\"YES\\", sequence def beautiful_sequence_solver(T, test_cases): results = [] for case in test_cases: N = case result, sequence = is_beautiful_sequence_possible(N) if result == \\"YES\\": results.append(f\\"{result} {\' \'.join(map(str, sequence))}\\") else: results.append(result) return results"},{"question":"Jafar is designing a new ride for his amusement park which involves a moving platform. The platform moves between two points, P1 and P2, connected by a straight line. The total length of the track is L meters. However, the platform doesn\'t always cover the full length in one go; instead, it takes several smaller steps of varying sizes. Jafar wants to check if it is possible for the platform to end perfectly at point P2 after a series of steps. Your task is to determine if it\'s possible for the platform to reach exactly the position of P2 given a series of steps that the platform can take. A step can be of any of the given sizes, and it can be taken any number of times (including zero). The series of steps doesn\'t necessarily need to cover the exact track length L but must ensure the platform ends exactly at P2. ---Input--- The first line contains two integers n and L (1 ≤ n ≤ 100, 1 ≤ L ≤ 10^6) - the number of different step sizes available and the total length of the track. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^6), where s_i is the i-th step size. ---Output--- Print \\"YES\\" if it is possible for the platform to reach exactly the position of P2 using any combination of the given step sizes, otherwise print \\"NO\\". ---Examples--- Input 3 5 1 2 3 Output YES Input 1 10 4 Output NO ---Explanation--- In the first example, the platform can reach position P2 by taking steps of sizes 2, 2, and 1 (or any other valid combination that sums to 5). In the second example, there is no way to combine the steps to exactly reach the position P2, making it impossible.","solution":"def can_reach_p2(n, L, steps): Determines if it is possible for the platform to reach exactly position P2 using any combination of the given step sizes. :param n: Number of different step sizes available. :param L: Total length of the track. :param steps: List of step sizes. :return: \'YES\' if it is possible to reach exactly position P2, otherwise \'NO\'. # We can use dynamic programming to solve this problem dp = [False] * (L + 1) dp[0] = True for i in range(1, L + 1): for step in steps: if i - step >= 0 and dp[i - step]: dp[i] = True break return \\"YES\\" if dp[L] else \\"NO\\""},{"question":"You are given a string S of length n consisting of lowercase English letters. Your task is to compute the length of the Longest Palindromic Subsequence (LPS). A subsequence is defined as a sequence that can be derived through the deletion of zero or more characters from a given string without changing the order of the remaining characters. A palindrome is a string that reads the same forwards as backwards. Input The first line contains an integer n (1 ≤ n ≤ 2000), the length of the string S. The second line contains the string S of length n. Output Print a single integer, the length of the Longest Palindromic Subsequence in the given string S. Examples Input 7 abacaba Output 7 Input 5 abcde Output 1 Note In the first sample, the longest palindromic subsequence is \\"abacaba\\", which has a length of 7. In the second sample, the longest palindromic subsequence can be any single character (\'a\', \'b\', \'c\', \'d\', \'e\'), hence the length is 1. Explanation To solve this problem, dynamic programming can be used. Define dp[i][j] as the length of the longest palindromic subsequence in the substring S[i...j]. The state transition is as follows: - If S[i] == S[j], then dp[i][j] = dp[i+1][j-1] + 2. - Otherwise, dp[i][j] = max(dp[i+1][j], dp[i][j-1]). The answer is then dp[0][n-1]. If S has a small length, a more straightforward solution may be to simply check all possible subsequences and find the longest palindromic one.","solution":"def longest_palindromic_subsequence(S): n = len(S) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"Given a list of non-negative integers, a sequence is defined as good if its elements are ordered in a non-decreasing manner in terms of their absolute value, where the absolute value of a number is defined as the number itself if it is positive or its negation if it is negative. For example, `[-2, 0, 1, -1]` is a good sequence, but `[-2, 1, -1, 0]` is not. You are given a list of non-negative integers. Count how many good sequences you can form by permuting the list. Two sequences are different if their orders are different. -----Input----- The first line contains an integer n (1 leq n leq 10^5) - the number of elements in the list. The second line contains n non-negative integers separated by spaces. -----Output----- Print a single integer representing the number of good sequences. -----Examples----- Input 3 1 2 3 Output 6 Input 4 0 1 1 0 Output 6 -----Note----- For the first example, all permutations of {1, 2, 3} are good because 1 <= 2 <= 3. For the second example, the good sequences are: [0, 0, 1, 1], [0, 1, 0, 1], [0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 1, 0, 0].","solution":"from math import factorial from collections import Counter def good_sequences_count(n, elements): Given a list of non-negative integers, count the number of good sequences that can be formed by permuting the list. A good sequence is defined as a sequence where elements are in non-decreasing order. Parameters: n (int): The number of elements in the list. elements (List[int]): List of n non-negative integers. Returns: int: The number of good sequences. if n == 0: return 0 cnt = Counter(elements) result = factorial(n) for count in cnt.values(): result //= factorial(count) return result"},{"question":"Your friend Jeff Zebos is enthralled with running simulations in his spare time. He recently got curious about the cellular automaton called Conway\'s Game of Life. In this game, the universe is a two-dimensional grid of cells, each of which can be alive or dead. The life and death of the cells are determined by a set of rules based on the number of live neighbors each cell has. The rules can be summed up as follows: - Any live cell with fewer than two live neighbors dies (underpopulation). - Any live cell with two or three live neighbors lives on to the next generation. - Any live cell with more than three live neighbors dies (overpopulation). - Any dead cell with exactly three live neighbors becomes a live cell (reproduction). Jeff wants to simulate the Game of Life for a certain number of generations and record the state of the board at each step. Help him achieve this by writing a program that takes the initial configuration of the board and outputs the state of the board after the given number of generations. Given the initial board configuration and the number of generations, implement the Game of Life and provide the final configuration. -----Input----- The first line of input contains three space-separated integers n, m, and g (1 le n, m le 50, 1 le g le 100) representing the number of rows, the number of columns, and the number of generations respectively. The next n lines contain m characters each, where each character is either \'.\' (representing a dead cell) or \'X\' (representing a live cell). This represents the initial configuration of the board. -----Output----- Output n lines with m characters each where \'.\' represents a dead cell and \'X\' represents a live cell, showing the final configuration of the board after g generations. -----Example----- Input 4 8 3 ........ ....X... ...XX... ........ Output ........ ...XX... ...XX... ........ -----Explanation----- After three generations, the initial configuration: ........ ....X... ...XX... ........ evolves into: ........ ...XX... ...XX... ........","solution":"def game_of_life(n, m, g, board): Simulates Conway\'s Game of Life for `g` generations on a board of size `n` x `m`. Parameters: n (int): Number of rows m (int): Number of columns g (int): Number of generations board (list of list of str): Initial board configuration Returns: list of list of str: Final board configuration after `g` generations def get_live_neighbors_count(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and board[nx][ny] == \'X\': count += 1 return count def next_generation(): new_board = [[\'.\' for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): live_neighbors = get_live_neighbors_count(i, j) if board[i][j] == \'X\': if live_neighbors == 2 or live_neighbors == 3: new_board[i][j] = \'X\' else: if live_neighbors == 3: new_board[i][j] = \'X\' return new_board for _ in range(g): board = next_generation() return board # Example usage: # n, m, g = 4, 8, 3 # board = [ # list(\\"........\\"), # list(\\"....X...\\"), # list(\\"...XX...\\"), # list(\\"........\\") # ] # Output final board # final_board = game_of_life(n, m, g, board) # for row in final_board: # print(\'\'.join(row))"},{"question":"You are managing a supermarket inventory system containing a list of items stocked in the store and their quantities. The system allows for three types of operations: 1. Add new items to the inventory. 2. Update the quantity of existing items. 3. Check if an item is currently in stock. Write a function to process a series of operations and return a list of results for each stock check operation. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of operations. Each of the next n lines describes an operation in one of the following forms: - \\"add item_name quantity\\" — Add the given quantity of the item to the inventory. If the item is not already in the inventory, it should be added with the given quantity. (1 ≤ quantity ≤ 10^6) - \\"update item_name quantity\\" — Update the quantity of the item in the inventory to the given quantity. If the item is not in the inventory, add it with the given quantity. (1 ≤ quantity ≤ 10^6) - \\"check item_name\\" — Check if the item is currently in stock and return \\"yes\\" or \\"no\\". It is guaranteed that item_name is a string of lowercase English letters with length between 1 and 20. Output For each \\"check\\" operation, print \\"yes\\" or \\"no\\" on a new line. Examples Input 6 add apples 10 add bananas 5 check apples update apples 20 check apples check oranges Output yes yes no","solution":"def process_operations(n, operations): inventory = {} results = [] for operation in operations: parts = operation.split() command, item_name = parts[0], parts[1] if command == \\"add\\": quantity = int(parts[2]) if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity elif command == \\"update\\": quantity = int(parts[2]) inventory[item_name] = quantity elif command == \\"check\\": if item_name in inventory and inventory[item_name] > 0: results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"----- Statement ----- Given an array `arr` of integers and an integer `k`, rotate the array to the right by `k` steps, where `k` is non-negative. You are required to perform the rotation in-place with O(1) extra space complexity. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 1000). The second line contains n integers representing the elements of the array. -----Output----- Output the array after it has been rotated to the right by `k` steps. -----Sample Input ----- 5 2 1 2 3 4 5 -----Sample Output----- 4 5 1 2 3","solution":"def rotate_array(arr, k): Rotates the array `arr` to the right by `k` steps in-place. n = len(arr) k = k % n # In case k is larger than n reverse(arr, 0, n - 1) reverse(arr, 0, k - 1) reverse(arr, k, n - 1) def reverse(arr, start, end): Reverses the elements of `arr` from index `start` to index `end` in-place. while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"You are a highly-skilled software engineer, facing a crucial task at the company you work for. You need to analyze performance data recorded from multiple servers over time. Each server logs performance data periodically, containing both the timestamp and the disk read and write operations performed. Your job is to identify the server with the highest total disk operations (read + write) for each period and analyze the pattern of these operations over a certain time frame. Input The first line contains an integer `m` (1 ≤ m ≤ 1,000) — the number of servers. Each of the next `m` lines contains an integer `n_i`, which denotes the number of log records for server `i` (1 ≤ n_i ≤ 1,000). Each log record consists of three values: a timestamp `t_ij`, the number of read operations `r_ij`, and the number of write operations `w_ij`. Output For each server, print a line containing the total number of (read + write) operations. Then print a summary line containing the id of the server with the highest total operations and the corresponding total operations count. Examples Input 3 4 1 100 200 2 200 100 3 300 150 4 100 250 2 1 150 150 2 300 300 3 1 200 100 2 150 150 3 250 250 Output Server 1: 1450 Server 2: 900 Server 3: 1100 Top server: 1 with total operations 1450","solution":"def analyze_server_data(m, server_logs): total_operations = [] for i in range(m): n_i = server_logs[i][0] logs = server_logs[i][1] total_ops = sum(r + w for (_, r, w) in logs) total_operations.append((i + 1, total_ops)) for server_id, ops in total_operations: print(f\\"Server {server_id}: {ops}\\") top_server = max(total_operations, key=lambda x: x[1]) print(f\\"Top server: {top_server[0]} with total operations {top_server[1]}\\")"},{"question":"The Dessert Chef is arranging a display of cakes on a rectangular grid for a bakery competition. Each cell in the grid can hold exactly one cake. All the cakes are either plain or with icing. However, the competition rules stipulate that no two cakes of the same type should be placed next to each other, horizontally, vertically, or diagonally. Help the Dessert Chef find a valid arrangement for the cakes based on the given grid dimensions. Input The first line of the input contains two integers, m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid respectively. Output Print a rectangular grid of m rows and n columns. Each cell in the grid should be represented by a character \'P\' for a plain cake or \'I\' for a cake with icing, satisfying the conditions mentioned above. If there are multiple valid arrangements, print any one of them. Examples Input 2 2 Output PIPI IPIP Input 3 3 Output PIP IPI PIP","solution":"def create_cake_grid(m, n): Creates a m x n grid with cakes (\'P\' for plain, \'I\' for icing) such that no two cakes of the same type are adjacent horizontally, vertically, or diagonally. Args: m (int): Number of rows n (int): Number of columns Returns: List[List[str]]: m x n grid represented as a list of lists grid = [[\'\' for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): if (i + j) % 2 == 0: grid[i][j] = \'P\' else: grid[i][j] = \'I\' return grid def print_cake_grid(m, n): grid = create_cake_grid(m, n) for row in grid: print(\'\'.join(row))"},{"question":"A new system has been introduced for managing and transferring files between users. Each user is identified by a unique integer ID. Initially, there are no files in the system. Users can perform two types of operations: 1. `UPLOAD user_id file_size`: The specified user uploads a file of the given size to the system. 2. `TRANSFER user_id1 user_id2 file_size`: The specified user1 transfers a file of the given size to user2. Each user has a storage limit, and no user can exceed this limit at any time. Users also cannot transfer more file size than they currently have. Write a program to simulate the file upload and transfer operations and determine the storage status of each user after all operations. # Input - The first line contains two integers `n` (1 ≤ n ≤ 100) and `m` (1 ≤ m ≤ 100): the number of users and the number of operations, respectively. - The second line contains `n` integers where the i-th integer represents the storage limit of the i-th user. Each storage limit is a positive integer not exceeding 10^5. - The next `m` lines describe the operations and are in the format `UPLOAD user_id file_size` or `TRANSFER user_id1 user_id2 file_size`. Here, user_id, user_id1, and user_id2 are integers from 1 to n (1-indexed), and file_size is a positive integer not exceeding 10^5. # Output For each user from 1 to n, print a single line containing the total size of files currently stored by that user. # Example Input ``` 3 5 10 20 15 UPLOAD 1 5 UPLOAD 2 10 TRANSFER 1 3 2 TRANSFER 2 3 5 UPLOAD 3 7 ``` Output ``` 3 5 14 ``` # Notes - In the example, initially all users have zero storage used. - The first user uploads a file of size 5. Thus, user 1 has 5 used storage after the first operation. - The second user uploads a file of size 10. Thus, user 2 has 10 used storage after the second operation. - The first user transfers a file of size 2 to the third user. Now user 1 has 3 used storage, and user 3 has 2 used storage. - The second user transfers a file of size 5 to the third user. Now user 2 has 5 used storage, and user 3 has 7 used storage. - The third user uploads a file of size 7. Now user 3 has 14 used storage.","solution":"def manage_files(n, m, storage_limits, operations): current_storage = [0] * n for op in operations: parts = op.split() if parts[0] == \\"UPLOAD\\": user_id = int(parts[1]) - 1 file_size = int(parts[2]) if current_storage[user_id] + file_size <= storage_limits[user_id]: current_storage[user_id] += file_size elif parts[0] == \\"TRANSFER\\": user_id1 = int(parts[1]) - 1 user_id2 = int(parts[2]) - 1 file_size = int(parts[3]) if current_storage[user_id1] >= file_size and current_storage[user_id2] + file_size <= storage_limits[user_id2]: current_storage[user_id1] -= file_size current_storage[user_id2] += file_size return current_storage"},{"question":"You are given an integer array arr of size n and an integer x. Your task is to find all unique triplets in the array that sum up to x. Return the triplets in the sorted order within each triplet and also the list of triplets itself sorted lexicographically. Example 1: Input: arr = [1, 0, -1, 2, -1, -4], x = 0 Output: [[-1, -1, 2], [-1, 0, 1]] Example 2: Input: arr = [12, 3, 4, 1, 6, 9], x = 24 Output: [[3, 9, 12]] Your Task: You don\'t need to read or print anything. Your task is to complete the function find_triplets() which takes an integer array and an integer x as input and returns a list of lists containing all unique triplets that sum up to x in lexicographical order. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n) Constraints: 1 ≤ Size of array ≤ 200 -10^3 ≤ Array elements ≤ 10^3 -10^6 ≤ x ≤ 10^6","solution":"def find_triplets(arr, x): arr.sort() n = len(arr) triplets = set() for i in range(n-2): if i > 0 and arr[i] == arr[i-1]: continue left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == x: triplets.add((arr[i], arr[left], arr[right])) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < x: left += 1 else: right -= 1 return sorted(list(map(list, triplets)))"},{"question":"You are given a grid of dimensions N x N, initially filled with the character \'.\', representing an empty space. Your task is to design a 2D pattern by filling some of the cells with the character \'#\'. The goal is to create a pattern that forms the letter \'X\', where the diagonals from the top left to the bottom right and the top right to the bottom left are filled with \'#\'. Write a Python function that takes an integer `N` (the dimensions of the grid) and prints the grid with the \'X\' pattern. Note that N will always be an odd integer greater than or equal to 3. # Constraints: * 3 ≤ N ≤ 101 (and N is always an odd number) # Function Signature: ```python def print_X_pattern(N: int) -> None ``` # Example: Input: ```python N = 5 ``` Output: ``` #...# .#.#. ..#.. .#.#. #...# ``` Explanation: The 5x5 grid that forms the \'X\' pattern is printed, with \'#\' on the diagonals and \'.\' elsewhere. # Note: * You should avoid using extra space and only output the pattern directly. * Ensure to handle edge cases where N is the minimum or maximum constraint.","solution":"def print_X_pattern(N: int) -> None: for i in range(N): for j in range(N): if i == j or i + j == N - 1: print(\'#\', end=\'\') else: print(\'.\', end=\'\') print()"},{"question":"You are given a grid of size N x M where each cell can contain either a `0` or a `1`. Your task is to find the size of the largest square sub-grid that contains only `1`s and return its area. Input - The first line contains two integers N and M (1 ≤ N, M ≤ 1000), the number of rows and columns in the grid, respectively. - The next N lines each contain M integers (each either 0 or 1), describing the grid. Output Print a single integer representing the area of the largest square sub-grid that contains only `1`s. Example Input 5 6 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 Output 9 Explanation In the given example, the largest square sub-grid containing only `1`s has sides of length 3, so the area is 3*3 = 9. The sub-grid is the bottom right 3x3 area of the grid.","solution":"def largest_square_area(N, M, grid): Finds the area of the largest square sub-grid containing only `1`s. if N == 0 or M == 0: return 0 # Create a DP table initialized with zeros dp = [[0] * M for _ in range(N)] max_side = 0 # Fill the DP table for i in range(N): for j in range(M): if grid[i][j] == 1: if i == 0 or j == 0: # First row or first column dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) # The area of the largest square is the side length squared return max_side * max_side"},{"question":"You are at a carnival with your friends and you all decide to play a game of collection of unique toys. Each friend has a unique toy with them and you are given these toys\' identifiers as integers in an array. Your task is to collect additional toys (from the carnival shops) to make sure each of the toys\' identifier is unique so that each friend gets a different toy. You are provided with the current list of toys\' identifiers. Identifiers can range from 1 to N (inclusive), where N is the maximum toy identifier possible at the carnival. Determine the minimum number of new toys you need to collect to ensure all toy identifiers are unique. Input Format: - The first line contains an integer \'n\' representing the number of friends and hence the number of current toys. - The second line contains \'n\' space-separated integers representing the identifiers of the current toys. Output Format: - Output the minimum number of new toys needed to make sure all toy identifiers are unique. Constraints: - 1 ≤ n ≤ 100000 - 1 ≤ toy identifier ≤ 100000 Example Input: 5 3 1 2 2 1 Example Output: 2 Explanation: In the input, two friends have the toy with identifier 2 and two friends have the toy with identifier 1. To make all identifiers unique, here’s what we can do: One friend can keep the toy with identifier 1, another can keep the toy with identifier 2. The remaining friends with toy identifier 1 and 2 need new identifiers. So, we might give identifiers 4 and 5 to the remaining friends. Thus, the minimum number of new toys needed is 2.","solution":"def minimum_new_toys_needed(n, toy_ids): Determine the minimum number of new toys needed to ensure all toy identifiers are unique. n: int - number of friends (and hence the number of current toys) toy_ids: List[int] - List of current toy identifiers return: int - The minimum number of new toys needed to make all identifiers unique. unique_ids = set() duplicates_count = 0 for toy_id in toy_ids: if toy_id in unique_ids: duplicates_count += 1 else: unique_ids.add(toy_id) return duplicates_count"},{"question":"**Reverse Sentence Words** Easy Code You are given a sentence as a string. Write a function that reverses the order of the words. Your function should not reverse the words themselves, only the order in which they appear in the sentence. **Example:** Input: ``` \\"The quick brown fox jumps over the lazy dog\\" ``` Output: ``` \\"dog lazy the over jumps fox brown quick The\\" ``` **Constraints:** - Each word in the input sentence is separated by a single space. - There are no leading or trailing spaces in the input sentence. - The input consists only of English letters and spaces.","solution":"def reverse_sentence(sentence): Reverses the order of the words in a given sentence. Parameters: sentence (str): The sentence to reverse. Returns: str: The sentence with the order of the words reversed. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"An organization maintains an ordered archive of documents represented as a sequence of integers d. Due to limited storage space, they want to extract sub-sequences from d that meet specific criteria. A sub-sequence is defined as a new sequence derived by deleting some or none of the elements from d, without changing the order of the remaining elements. They are particularly interested in sub-sequences where the sum of the elements in the sub-sequence is exactly equal to a target sum T. Your task is to determine whether there exists at least one valid sub-sequence for given target sums across multiple test cases. -----Input----- The first line of input contains a single integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n (1 le n le 10^5) — the size of the sequence d, and T (1 le T le 10^9) — the target sum. The second line of each test case contains n integers d_1, d_2, dots, d_n (1 le d_i le 10^9) — the sequence of document values. -----Output----- For each test case print on a separate line: YES if there exists at least one sub-sequence of d whose sum is exactly T. NO otherwise. You can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as positive response). -----Examples----- Input 4 5 9 1 2 3 4 5 4 11 9 3 2 1 3 3 2 2 2 6 15 1 2 3 4 5 15 Output YES YES NO YES -----Note----- In the first case, one possible sub-sequence that sums up to 9 is [4, 5]. In the second case, one valid sub-sequence that sums to 11 is [9, 2]. In the third case, there is no sub-sequence that can add up to 3 using the elements of the given sequence. In the fourth case, the sub-sequence [15] directly provides the required sum.","solution":"def can_find_subsequence(t, test_cases): from itertools import combinations results = [] for i in range(t): n, T = test_cases[i][0] d = test_cases[i][1] found = False # Iterate through all possible lengths of the sub-sequence for length in range(1, n + 1): # Generate all combinations of the current length and check their sum for combination in combinations(d, length): if sum(combination) == T: found = True break if found: break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array `a` of size `n`, where each element is either `0` or `1`, you are tasked with determining the minimum number of operations required to convert the array into another array `b` of the same size, where all elements of `b` are `0`. In one operation, you can perform either of the following: 1. Choose a subarray consisting entirely of `1`s and flip all the elements in this subarray (change all `1`s to `0`s). 2. Choose any single element of the array and change its value (from `0` to `1` or from `1` to `0`). Write a program that computes the minimum number of operations required to convert `a` into an array consisting entirely of `0`s. Input The first line contains one integer `n` (1 ≤ n ≤ 10^5) — the size of the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 1) — the elements of the array. Output Print one integer — the minimum number of operations required to convert the array into an array of zeros. Examples Input 5 1 1 0 1 1 Output 2 Input 6 1 1 1 0 0 1 Output 2 Input 3 0 0 0 Output 0 Note In the first test case, one optimal sequence of operations is: 1. Flip the subarray from a[1] to a[2] (0-indexed), the array becomes [0, 0, 0, 1, 1] 2. Flip the subarray from a[4] to a[5], the array becomes [0, 0, 0, 0, 0] In the second test case, one optimal sequence of operations is: 1. Flip the subarray from a[1] to a[3], the array becomes [0, 0, 0, 0, 0, 1] 2. Change a[6] to 0, the array becomes [0, 0, 0, 0, 0, 0] In the third test case, no operations are needed since the array is already [0, 0, 0].","solution":"def min_operations_to_zero(n, a): Given an array of size n of 0s and 1s, return the minimum number of operations required to make all the elements of the array 0. if all(x == 0 for x in a): return 0 count_ones_segment = 0 in_segment = False for x in a: if x == 1 and not in_segment: count_ones_segment += 1 in_segment = True elif x == 0: in_segment = False return count_ones_segment"},{"question":"In a popular board game, there is a simple currency system consisting of colorful bills and coins. The bills available are in denominations of 1, 5, 10, 20, and 50 units, while coins are available in denominations of 1, 2, and 5 units. When a player wins money during their turn, they want to receive the prize in as few physical pieces (bills and coins) as possible. Write a function `make_change` that takes a single integer input representing the amount of money the player has won, and returns a dictionary where the keys are the denominations (as integers) and the values are the number of each denomination to be given. For example: ```python make_change(97) ``` should return: ```python {50:1, 20:2, 5:1, 2:1} ``` because 97 can be given using one 50-unit bill, two 20-unit bills, one 5-unit bill, and one 2-unit coin, totaling 5 pieces. Assume a player can always receive exact change.","solution":"def make_change(amount): Determines the least number of physical pieces (bills and coins) needed to make up the given amount of money. Args: amount (int): The amount of money to be changed. Returns: dict: A dictionary with the denomination as keys and the count of each denomination as values. denominations = [50, 20, 10, 5, 2, 1] change = {} for denomination in denominations: count = amount // denomination if count > 0: change[denomination] = count amount -= denomination * count return change"},{"question":"In a distant universe, there are three planets: Xena, Yaro, and Zenon. Each planet has a certain amount of resources measured in integer units, represented as R_x, R_y, and R_z respectively. The planets engage in a resource transaction game where a planet can transfer exactly half its resources to another planet. However, this transfer can only happen if the recipient planet has less than twice the resources of the sender planet after the transfer. The goal is to determine if at least one valid transfer can be made. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains three integers R_x, R_y, and R_z - the resources of the planets Xena, Yaro, and Zenon respectively. ------ Output Format ------ For each test case, output YES if at least one valid transfer can be made. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ R_x, R_y, R_z ≤ 1000 ------ Sample Input 1 ------ 3 10 20 30 5 5 5 12 17 6 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: Xena can transfer half of its resources to Yaro, since after transferring 5 resources, Yaro will have 25 (20 + 5), which is less than twice Xena\'s remaining resources (5 * 2). Test case 2: No planet can make a valid transfer to any other planet. Test case 3: Zenon can transfer half of its resources to Xena, since after transferring 3 resources, Xena will have 15 (12 + 3), which is less than twice Zenon\'s remaining resources (3 * 2).","solution":"def can_make_a_valid_transfer(R_x, R_y, R_z): Determine if at least one valid transfer can be made. R_x, R_y, R_z: integers, representing the resources on planets Xena, Yaro, and Zenon. # Check Xena to Yaro if R_y < 2 * (R_x // 2): return \\"YES\\" # Check Xena to Zenon if R_z < 2 * (R_x // 2): return \\"YES\\" # Check Yaro to Xena if R_x < 2 * (R_y // 2): return \\"YES\\" # Check Yaro to Zenon if R_z < 2 * (R_y // 2): return \\"YES\\" # Check Zenon to Xena if R_x < 2 * (R_z // 2): return \\"YES\\" # Check Zenon to Yaro if R_y < 2 * (R_z // 2): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): R_x, R_y, R_z = test_cases[i] results.append(can_make_a_valid_transfer(R_x, R_y, R_z)) return results"},{"question":"You are given a string containing only lowercase English letters. You need to find and print the longest substring of the given string that contains only distinct characters. For example: If the input is: abcabcbb The output would be: abc If the input is: bbbbb The output would be: b If the input is: pwwkew The output would be: wke Input Format: A single line containing a string `s`. Constraints: 0 <= len(s) <= 10^4 Output Format: Print the longest substring that contains only distinct characters. If there are multiple substrings of the same maximum length, print the first one found. Sample Input 1: abcabcbb Sample Output 1: abc Sample Input 2: bbbbb Sample Output 2: b Sample Input 3: pwwkew Sample Output 3: wke Explanation: For sample input 1, the longest substring with all distinct characters is \\"abc\\", with length 3. For sample input 2, the longest substring with all distinct characters is \\"b\\", with length 1. For sample input 3, the longest substring with all distinct characters is \\"wke\\", with length 3.","solution":"def longest_distinct_substring(s): Returns the longest substring of s that contains only distinct characters. start = 0 max_length = 0 max_substring = \\"\\" used_chars = {} for i, char in enumerate(s): if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 used_chars[char] = i current_length = i - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:i+1] return max_substring"},{"question":"In Bakerland, bread loaves are graded based on the opinions of 3 inspectors. The quality of a bread loaf is considered to be \\"GOOD\\" if at least 2 out of the 3 inspectors agree that it is good. Given the decision of the 3 inspectors, help the baker determine the quality of the bread loaf. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of test cases. - Each test case consists of a single line of input containing 3 integers I_{1}, I_{2}, I_{3} denoting the decision of the respective inspectors. Here I can be either 0 or 1 where 1 would denote that the inspector considers the bread loaf to be good whereas 0 denotes that they consider it to be bad. ------ Output Format ------ For each test case, output GOOD if at least 2 out of the 3 inspectors consider the bread loaf to be good and BAD otherwise. The checker is case-insensitive so answers like good, Good, and GOOD would be considered the same. ------ Constraints ------ 1 ≤ N ≤ 20 0 ≤ I_{1}, I_{2}, I_{3} ≤ 1 ----- Sample Input 1 ------ 3 1 1 0 0 0 0 1 0 1 ----- Sample Output 1 ------ GOOD BAD GOOD ----- explanation 1 ------ Test case 1: Inspectors 1 and 2 consider the bread loaf to be good. Thus, the loaf is GOOD. Test case 2: No inspectors consider the bread loaf to be good. Thus, the loaf is BAD. Test case 3: Inspectors 1 and 3 consider the bread loaf to be good. Thus, the loaf is GOOD.","solution":"def bread_quality(N, decisions): Determine the quality of bread loaves based on the opinions of 3 inspectors. Parameters: N (int): Number of test cases decisions (list of list of int): List of decisions for each test case. Each decision list contains 3 integers (0 or 1). Returns: list of str: List of strings \\"GOOD\\" or \\"BAD\\" for each test case. results = [] for decision in decisions: if sum(decision) >= 2: results.append(\\"GOOD\\") else: results.append(\\"BAD\\") return results"},{"question":"V: Sliding Window Maximum problem Given an array of integers and an integer k, you need to find the maximum value in each sliding window of size k from left to right. Your task is to write a function that returns an array of the maximum values of each sliding window. Input format N k A_1 A_2 ... A_N Constraint * 1 ≤ N ≤ 10^5 * 1 ≤ k ≤ N * -10^4 ≤ A_i ≤ 10^4 * All inputs are integers. Output format Print the array of the maximum values of each sliding window of size k. Input example 1 8 3 1 3 -1 -3 5 3 6 7 Output example 1 3 3 5 5 6 7 * The sliding windows are: [1, 3, -1], [3, -1, -3], [-1, -3, 5], [-3, 5, 3], [5, 3, 6], [3, 6, 7] * The maximum values are: 3, 3, 5, 5, 6, 7 Input example 2 6 1 1 2 3 4 5 6 Output example 2 1 2 3 4 5 6 * The sliding windows are: [1], [2], [3], [4], [5], [6] * The maximum values are: 1, 2, 3, 4, 5, 6 Input example 3 5 5 4 3 1 2 5 Output example 3 5 * The sliding windows are: [4, 3, 1, 2, 5] * The maximum value is: 5 Example Input 8 3 1 3 -1 -3 5 3 6 7 Output 3 3 5 5 6 7","solution":"from collections import deque def max_sliding_window(nums, k): Find the maximum value in each sliding window of size k. Parameters: nums (list): List of integers. k (int): Size of the sliding window. Returns: list: A list of the maximum values of each sliding window. if not nums: return [] if k == 0: return [] deq = deque() result = [] for i in range(len(nums)): # Remove indices that are out of the bounds of the current window if deq and deq[0] == i - k: deq.popleft() # Remove elements from the deque that are less than the current element while deq and nums[deq[-1]] < nums[i]: deq.pop() # Add current element index at the end of deque deq.append(i) # If at least k elements have been processed, append the maximum to the result if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"You are given an integer N. Your task is to find the smallest integer M such that M * (M+1) / 2 is greater than or equal to N. The formula M * (M+1) / 2 represents the sum of the first M natural numbers. Input The first line of the input contains a single integer T - denoting the number of test cases. The first and only line of each test case contains a single integer N. Output For each test case, print the smallest integer M such that the sum of the first M natural numbers is greater than or equal to N. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 3 10 14 SAMPLE OUTPUT 2 4 5 Explanation In the case of 3, the smallest M such that M * (M+1) / 2 >= 3 is 2 because 2 * (2+1) / 2 = 3. In the case of 10, the smallest M such that M * (M+1) / 2 >= 10 is 4 because 4 * (4+1) / 2 = 10. In the case of 14, the smallest M such that M * (M+1) / 2 >= 14 is 5 because 5 * (5+1) / 2 = 15.","solution":"def find_smallest_m(N): Finds the smallest integer M such that the sum of the first M natural numbers is greater than or equal to N. M = 1 while M * (M + 1) // 2 < N: M += 1 return M def process_test_cases(T, cases): results = [] for case in cases: results.append(find_smallest_m(case)) return results"},{"question":"# Task Write a function that takes in a list of integers and returns a new list where each integer from the input list is doubled, but only if the integer is positive. If the integer is negative or zero, it should be left unchanged. # Input/Output `[input]` list of integers `numbers` A list of integers, where each integer can be positive, negative, or zero. `[output]` a list of integers Return a new list where each positive integer from the input list is doubled, while negative integers and zero are left unchanged. # Example For `numbers = [1, -2, 3, 0, -4, 5]`, the output should be `[2, -2, 6, 0, -4, 10]`. For `numbers = [-1, -3, -5]`, the output should be `[-1, -3, -5]`.","solution":"def double_positives(numbers): Returns a new list where each positive integer from the input list is doubled, while negative integers and zero are left unchanged. Parameters: numbers (list of int): List of integers, each can be positive, negative, or zero. Returns: list of int: New list with positive integers doubled and others unchanged. return [x * 2 if x > 0 else x for x in numbers]"},{"question":"The local bakery has recently introduced a new line of customizable cakes. Each cake can have multiple layers, and each layer can have a different flavor. The bakery wants to make sure that every customer has a unique cake ordering experience and they want to know how many distinct cakes can be made given a set of available flavors and a maximum number of layers. To help the bakery, you need to write a program that calculates the number of unique cake combinations given the number of flavors and the maximum number of layers. Input The input consists of multiple datasets. Each dataset has the format as described below. F L Flavor1 Flavor2 ... FlavorF F (2 ≤ F ≤ 10) is the number of available flavors and L (1 ≤ L ≤ 10) is the maximum number of layers a cake can have. Each flavor is represented by a unique identifier (e.g., a, b, c, ...). The end of input is indicated by a line containing two zeros. This line is not a part of any datasets and should not be processed. Output For each dataset, your program should output in a line the total number of distinct cakes that can be created with the given number of flavors and maximum number of layers. Example Input 3 2 a b c 4 3 a b c d 2 2 x y 0 0 Output 9 64 4","solution":"def count_cake_combinations(flavors, max_layers): Returns the number of distinct cakes that can be created with the given number of flavors and maximum number of layers. Parameters: flavors (int): The number of available flavors. max_layers (int): The maximum number of layers a cake can have. Returns: int: The number of distinct cakes that can be created. # Total combinations are given by flavors ^ max_layers return flavors ** max_layers def process_input(input_lines): Processes the input datasets, and calculates the number of cake combinations for each dataset. Parameters: input_lines (list of str): List of input lines. Returns: list of int: The number of distinct cakes for each dataset. result = [] for line in input_lines: if line.strip() == \\"0 0\\": break parts = line.split() F = int(parts[0]) L = int(parts[1]) flavors = input_lines.pop(0) # Pop the flavor line to move to the next dataset result.append(count_cake_combinations(F, L)) return result"},{"question":"Write a program that implements the Morse code translator which can encrypt (text to Morse code) and decrypt (Morse code to text) messages. The Morse code uses a standard set of codes for the given alphabet. # Morse Code Reference ```plaintext A -> .- N -> -. B -> -... O -> --- C -> -.-. P -> .--. D -> -.. Q -> --.- E -> . R -> .-. F -> ..-. S -> ... G -> --. T -> - H -> .... U -> ..- I -> .. V -> ...- J -> .--- W -> .-- K -> -.- X -> -..- L -> .-.. Y -> -.-- M -> -- Z -> --.. 0 -> ----- 5 -> ..... 1 -> .---- 6 -> -.... 2 -> ..--- 7 -> --... 3 -> ...-- 8 -> ---.. 4 -> ....- 9 -> ----. ``` # Tasks Implement two functions, `morse_encrypt` and `morse_decrypt`. Function: morse_encrypt - **Input:** A string `text` containing only lowercase letters and digits. - **Output:** A string containing the Morse code representation of the input text where each letter is separated by a space and each word is separated by ` \\" / \\" ` (example `\\"hello / world\\"`). Function: morse_decrypt - **Input:** A string `morse_code` containing the Morse code representation. - **Output:** A string containing the text representation of the input Morse code. # Example ```python morse_encrypt(\\"hello world\\") # Output: \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" morse_decrypt(\\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\") # Output: \\"hello world\\" ``` # Notes - The input for `morse_encrypt` will always be valid and in lowercase. - The input for `morse_decrypt` will always be valid Morse code formatted as described above. - Handle only lowercase English alphabets and digits (0-9). - Ensure to implement the translations correctly as per the provided reference.","solution":"MORSE_CODE_DICT = { \'a\': \'.-\', \'b\': \'-...\', \'c\': \'-.-.\', \'d\': \'-..\', \'e\': \'.\', \'f\': \'..-.\', \'g\': \'--.\', \'h\': \'....\', \'i\': \'..\', \'j\': \'.---\', \'k\': \'-.-\', \'l\': \'.-..\', \'m\': \'--\', \'n\': \'-.\', \'o\': \'---\', \'p\': \'.--.\', \'q\': \'--.-\', \'r\': \'.-.\', \'s\': \'...\', \'t\': \'-\', \'u\': \'..-\', \'v\': \'...-\', \'w\': \'.--\', \'x\': \'-..-\', \'y\': \'-.--\', \'z\': \'--..\', \'0\': \'-----\', \'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\', \'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\' } REVERSE_MORSE_CODE_DICT = {v: k for k, v in MORSE_CODE_DICT.items()} def morse_encrypt(text): Encrypt the given text to Morse code. words = text.split(\' \') morse_code = \' / \'.join(\' \'.join(MORSE_CODE_DICT[char] for char in word) for word in words) return morse_code def morse_decrypt(morse_code): Decrypt the given Morse code to text. words = morse_code.split(\' / \') text = \' \'.join(\'\'.join(REVERSE_MORSE_CODE_DICT[char] for char in word.split()) for word in words) return text"},{"question":"Given a dictionary containing the mapping of a letter to its corresponding Morse code representation, write a function that takes a list of strings and returns the number of unique transformations. Each transformation is a concatenation of the Morse code representations of each letter in the string. For example, given the dictionary ```{\'a\': \\".-\\", \'b\': \\"-...\\", \'c\': \\"-.-.\\", \'d\': \\"-..\\", \'e\': \\".\\", \'f\': \\"..-.\\", \'g\': \\"--.\\", \'h\': \\"....\\", \'i\': \\"..\\", \'j\': \\".---\\", \'k\': \\"-.-\\", \'l\': \\".-..\\", \'m\': \\"--\\", \'n\': \\"-.\\", \'o\': \\"---\\", \'p\': \\".--.\\", \'q\': \\"--.-\\", \'r\': \\".-.\\", \'s\': \\"...\\", \'t\': \\"-\\", \'u\': \\"..-\\", \'v\': \\"...-\\", \'w\': \\".--\\", \'x\': \\"-..-\\", \'y\': \\"-.--\\", \'z\': \\"--..\\"}``` and the list of strings ```[\\"gin\\", \\"zen\\", \\"gig\\", \\"msg\\"]```, the function should return 2 because each string in the list transforms to Morse codes \\".--...-.\\" (for \\"gin\\"), \\"--...-.\\" (for \\"zen\\"), \\"--...-.\\" (for \\"gig\\"), \\"--.---.\\" (for \\"msg\\"), and there are 2 different transformations in total. Function signature: ```python def unique_morse_representations(words: List[str]) -> int: ``` Example: ```python words = [\\"gin\\", \\"zen\\", \\"gig\\", \\"msg\\"] print(unique_morse_representations(words)) # Output: 2 ``` Your task is to implement the function `unique_morse_representations`. You do not need to read input or print anything. The function takes a list of strings and returns an integer. Constraints: - The list `words` contains 1 to 1000 strings. - The length of each string is between 1 and 12. - Each string `words[i]` contains only lowercase English letters.","solution":"from typing import List def unique_morse_representations(words: List[str]) -> int: morse_code_dict = { \'a\': \\".-\\", \'b\': \\"-...\\", \'c\': \\"-.-.\\", \'d\': \\"-..\\", \'e\': \\".\\", \'f\': \\"..-.\\", \'g\': \\"--.\\", \'h\': \\"....\\", \'i\': \\"..\\", \'j\': \\".---\\", \'k\': \\"-.-\\", \'l\': \\".-..\\", \'m\': \\"--\\", \'n\': \\"-.\\", \'o\': \\"---\\", \'p\': \\".--.\\", \'q\': \\"--.-\\", \'r\': \\".-.\\", \'s\': \\"...\\", \'t\': \\"-\\", \'u\': \\"..-\\", \'v\': \\"...-\\", \'w\': \\".--\\", \'x\': \\"-..-\\", \'y\': \\"-.--\\", \'z\': \\"--..\\" } transformations = set() for word in words: morse_representation = \'\'.join(morse_code_dict[char] for char in word) transformations.add(morse_representation) return len(transformations)"},{"question":"The Galactic Lions, a legendary group known for their coordination and teamwork, have a unique formation pattern that they use for their missions. They move in an \\"L\\" shape within a specific arena. The arena is represented as an N x M grid with cells, some of which might be blocked. The Lions can only move from their starting position to another position if they adhere to the \\"L\\" move (either 2 cells in one direction and 1 cell perpendicularly, or 1 cell in one direction and 2 cells perpendicularly). They cannot pass through or land on blocked cells. To test their formation capabilities, you are tasked with writing a program that determines the shortest number of \\"L\\" shaped moves required for the Lions to get from a starting position to a target position within the arena. If it is not possible to reach the target, the program should return -1. # Input The first line contains two integers, N and M (2 ≤ N, M ≤ 1000) – the dimensions of the arena. The next N lines contain M characters each. Each character is either \'.\' indicating a free cell, or \'#\' indicating a blocked cell. The following line contains four integers, sx, sy, tx, ty (0 ≤ sx, tx < N, 0 ≤ sy, ty < M) – the starting coordinates (sx, sy) and the target coordinates (tx, ty). # Output Print the minimum number of \\"L\\" shaped moves required to get from the starting position to the target position. If it’s impossible, print -1. # Example Input 5 5 ..... ..... .#. ..... ..... 0 0 4 4 Output 4 Input 5 5 ..... ..... .#. ..... ..... 0 0 2 2 Output -1","solution":"from collections import deque def min_L_moves(N, M, arena, sx, sy, tx, ty): Determines the shortest number of \'L\' shaped moves required to move from (sx, sy) to (tx, ty) in an N x M grid arena. :param N: Number of rows :param M: Number of columns :param arena: NxM grid arena where \'.\' denotes free space and \'#\' denotes blocked cell :param sx: Starting x-coordinate :param sy: Starting y-coordinate :param tx: Target x-coordinate :param ty: Target y-coordinate :return: Minimum number of \'L\' shaped moves or -1 if not possible # Define possible L-shaped moves moves = [ (-2, -1), (-2, 1), (2, -1), (2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2) ] # Check if the start or target is blocked if arena[sx][sy] == \'#\' or arena[tx][ty] == \'#\': return -1 # BFS Setup queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, d = queue.popleft() # If we reach the target, return the distance if (x, y) == (tx, ty): return d # Try all possible L-shaped moves for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and arena[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, d + 1)) # If target is not reachable return -1"},{"question":"Design a data structure that supports the following operations in (O(1)) average time. 1. `insert(value)`: Inserts a value to the data structure. 2. `remove(value)`: Removes a value from the data structure. 3. `getRandom()`: Returns a random element from the current elements of the data structure. The elements inserted and removed are integers, and the random element obtained should follow a uniform distribution (i.e., each element should have an equal probability of being returned). Your implementation should efficiently handle a sequence of operations defined by the following methods: - `RandomizedSet()`: Initializes the data structure. - `insert(val: int) -> bool`: Inserts a value `val` to the set if it is not present. Returns `true` if the value is inserted successfully, otherwise returns `false`. - `remove(val: int) -> bool`: Removes a value `val` from the set if it is present. Returns `true` if the value is removed successfully, otherwise returns `false`. - `getRandom() -> int`: Returns a random element from the current elements in the set. Example 1: Input: RandomizedSet rs rs.insert(1) rs.insert(2) rs.getRandom() rs.remove(1) rs.getRandom() Output: true true (returns either 1 or 2 randomly) true 2 Example 2: Input: RandomizedSet rs rs.remove(1) rs.insert(2) rs.getRandom() Output: false true 2 Explanation: 1. RandomizedSet is instantiated. 2. Insert 1 to the set and return true. 3. Insert 2 to the set and return true. 4. `getRandom` returns either 1 or 2 with equal probability. 5. Remove 1 from the set and return true. 6. `getRandom` returns 2. Constraints: 1. Values will be in the range of `[1, 2 * 10^5]`. 2. Testcase size limit: `[1, 10^5]`. In your implementation, you may assume that all operations are valid. For example, you will not be asked to remove an element that does not exist, nor will you be asked to get a random element from an empty set.","solution":"import random class RandomizedSet: def __init__(self): self.dict = {} self.list = [] def insert(self, val: int) -> bool: if val not in self.dict: self.dict[val] = len(self.list) self.list.append(val) return True return False def remove(self, val: int) -> bool: if val in self.dict: idx = self.dict[val] last_element = self.list[-1] self.list[idx] = last_element self.dict[last_element] = idx self.list.pop() del self.dict[val] return True return False def getRandom(self) -> int: return random.choice(self.list)"},{"question":"You are given two matrices A and B of size M x N and N x P respectively. Your task is to compute the matrix multiplication of A and B, resulting in matrix C of size M x P. -----Constraints----- - 1 leq M, N, P leq 50 - Each element of matrix A is an integer such that -1000 leq A[i][j] leq 1000 - Each element of matrix B is an integer such that -1000 leq B[i][j] leq 1000 -----Input----- The input is given from Standard Input in the following format: M N P A_1_1 A_1_2 ... A_1_N A_2_1 A_2_2 ... A_2_N ... A_M_1 A_M_2 ... A_M_N B_1_1 B_1_2 ... B_1_P B_2_1 B_2_2 ... B_2_P ... B_N_1 B_N_2 ... B_N_P -----Output----- Print the resulting matrix C in the following format: C_1_1 C_1_2 ... C_1_P C_2_1 C_2_2 ... C_2_P ... C_M_1 C_M_2 ... C_M_P -----Sample Input----- 2 3 2 1 2 3 4 5 6 7 8 9 10 11 12 -----Sample Output----- 58 64 139 154 Here, C[1][1] = 1*7 + 2*9 + 3*11 = 58, C[1][2] = 1*8 + 2*10 + 3*12 = 64, C[2][1] = 4*7 + 5*9 + 6*11 = 139, C[2][2] = 4*8 + 5*10 + 6*12 = 154.","solution":"def matrix_multiply(M, N, P, A, B): # Initialize the result matrix C with zeros of size M x P C = [[0 for _ in range(P)] for _ in range(M)] # Compute the matrix multiplication for i in range(M): for j in range(P): C[i][j] = sum(A[i][k] * B[k][j] for k in range(N)) return C"},{"question":"In a town, every house is painted in one of three colors: red, green, or blue. The town authorities have decided that no two adjacent houses can be painted in the same color. You are given a street of houses represented as a list, where each element is a tuple (r, g, b) representing the painting cost to color the house either red, green, or blue respectively. The objective is to paint all the houses in the street with the minimum total cost while satisfying the condition that no two adjacent houses are painted in the same color. Write a function `min_cost_to_paint_houses(costs)` that takes in a list of tuples `costs` and returns the minimum total cost to paint all the houses while satisfying the condition mentioned above. ------ Input ------ - A list of tuples `costs` where each tuple (r, g, b) represents the cost to paint the i-th house red, green, or blue respectively. - The length of `costs` list (the number of houses) will not exceed 100,000. ------ Output ------ - An integer representing the minimum total cost to paint all the houses. ------ Constraints ------ 1 ≤ costs[i][j] ≤ 1000 for all valid indices i and j. ----- Sample Input ------ [(17, 2, 17), (16, 16, 5), (14, 3, 19)] ------ Sample Output ------ 10","solution":"def min_cost_to_paint_houses(costs): if not costs: return 0 n = len(costs) dp = [[0] * 3 for _ in range(n)] # Initial cost for the first house dp[0][0] = costs[0][0] dp[0][1] = costs[0][1] dp[0][2] = costs[0][2] # Fill the DP table for i in range(1, n): dp[i][0] = costs[i][0] + min(dp[i-1][1], dp[i-1][2]) dp[i][1] = costs[i][1] + min(dp[i-1][0], dp[i-1][2]) dp[i][2] = costs[i][2] + min(dp[i-1][0], dp[i-1][1]) # The minimum cost to paint all houses will be the minimum value in the last row of the dp array return min(dp[-1])"},{"question":"Write a function to print the pattern of numbers based on the given input. Input The input contains a single integer n (1 ≤ n ≤ 9). Output Output the desired pattern. Example Input 4 Output ``` 4 4 4 4 4 4 4 4 3 3 3 3 3 4 4 3 2 2 2 3 4 4 3 2 1 2 3 4 4 3 2 2 2 3 4 4 3 3 3 3 3 4 4 4 4 4 4 4 4 ```","solution":"def number_pattern(n): Prints the pattern for a given number n. matrix_size = 2 * n - 1 matrix = [[0] * matrix_size for _ in range(matrix_size)] for i in range(n): for j in range(i, matrix_size - i): matrix[i][j] = n - i matrix[matrix_size - i - 1][j] = n - i matrix[j][i] = n - i matrix[j][matrix_size - i - 1] = n - i result = \\"n\\".join(\\" \\".join(map(str, row)) for row in matrix) print(result) return result"},{"question":"A special string is defined as a string composed of characters \'L\' and \'R\' only. The goal is to split this string into the maximum number of balanced substrings. A balanced substring is one where the number of \'L\'s is equal to the number of \'R\'s. Write a function `splitBalancedString` that takes a single string as input and returns the maximum number of balanced substrings that can be obtained from the given string. The function signature is provided as follows: ```python def splitBalancedString(s: str) -> int: pass ``` # Constraints * The length of the input string will be between 1 and 1000. * The input string will contain only \'L\' and \'R\' characters. # Input * A single string `s` containing only characters \'L\' and \'R\'. # Output * A single integer representing the maximum number of balanced substrings. # Examples Example 1: Input: ``` \\"RLRRLLRLRL\\" ``` Output: ``` 4 ``` Example 2: Input: ``` \\"RLLLLRRRLR\\" ``` Output: ``` 3 ``` Example 3: Input: ``` \\"LLLLRRRR\\" ``` Output: ``` 1 ``` Example 4: Input: ``` \\"RLRRRLLRLL\\" ``` Output: ``` 2 ``` # Note In the first example, the string can be split into \\"RL\\", \\"RRLL\\", \\"RL\\", \\"RL\\", where each substring has an equal number of \'L\' and \'R\'. In the second example, the string can be split into \\"RL\\", \\"LLRR\\", \\"RL\\", where each substring has an equal number of \'L\' and \'R\'. Similarly, in the other examples, the strings can be split as described. The function should achieve this in linear time complexity.","solution":"def splitBalancedString(s: str) -> int: This function takes a string composed of \'L\' and \'R\' and returns the maximum number of balanced substrings. balance = 0 count = 0 for char in s: if char == \'L\': balance += 1 else: # char == \'R\' balance -= 1 if balance == 0: count += 1 return count"},{"question":"In this problem, we deal with sequences of integers. Let a sequence a = [a_1, a_2, ..., a_n] be given. A prefix of this sequence is any subsequence that includes the first element a_1 and ends with the element a_k so that the prefix is [a_1, a_2, ..., a_k] for some k. We are interested in finding the longest increasing prefix of the sequence after applying some allowed operations. You can perform at most one operation on the sequence by removing any one element. The sequence after removing the element should still be [a_1, a_2, ..., a_(i-1), a_(i+1), ..., a_n]. That is, the sequence with the element removed retains all other elements in their original order. Your task is to determine the length of the longest increasing prefix after removing at most one element. If it is not necessary to remove any element, you should consider this case as well. Input The first line contains one integer n (1 ≤ n ≤ 100,000), the length of the sequence a. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the sequence. Output Print a single integer, the length of the longest increasing prefix after removing at most one element. Example Input 6 10 20 10 30 40 50 Output 4 Explanation The initial sequence is [10, 20, 10, 30, 40, 50]. By removing the third element (10), the sequence becomes [10, 20, 30, 40, 50], which has an increasing prefix of length 5. Without removing any elements, the longest increasing prefix is only [10, 20], of length 2. Thus, the output is 4.","solution":"def longest_increasing_prefix(n, sequence): # Check for edge case of sequence with single element if n == 1: return 1 lengths = [] # Calculate length of increasing prefix without removal length = 1 for i in range(1, n): if sequence[i] > sequence[i-1]: length += 1 else: break lengths.append(length) # Calculate lengths of increasing prefixes by removing each element in turn (without actually removing) for remove_index in range(1, n): length = 1 prev = sequence[0] used_removal = False for i in range(1, n): if i == remove_index: continue if sequence[i] > prev: length += 1 prev = sequence[i] elif not used_removal: used_removal = True continue else: break lengths.append(length) return max(lengths)"},{"question":"You are given a binary string S of length N where each character is either \'0\' or \'1\'. The string represents a sequence of floors in a building, with \'1\' indicating the presence of a gym on that floor and \'0\' indicating no gym on that floor. A gym cluster is defined as one or more consecutive \'1\'s. Your task is to find the number of gym clusters in the building. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single string S. ------ Output ------ For each test case, print a single line containing one integer ― the number of gym clusters. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^{5} ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 3 000 111 10101 ----- Sample Output 1 ------ 0 1 3 ------ explanation 1 ------ Example case 1: Since there are no gyms (no \'1\'s), the number of gym clusters is 0. Example case 2: All three floors have gyms and they are consecutive, which means there is only one cluster. Example case 3: There are three gyms and each one forms a single gym cluster by itself.","solution":"def count_gym_clusters(S): Returns the number of gym clusters in a binary string S. A gym cluster is defined as one or more consecutive \'1\'s. clusters = 0 in_cluster = False for char in S: if char == \'1\': if not in_cluster: clusters += 1 in_cluster = True else: in_cluster = False return clusters def process_test_cases(test_cases): results = [] for S in test_cases: results.append(count_gym_clusters(S)) return results"},{"question":"Sarah loves spending her free time solving puzzles. She recently came across a game involving binary strings and became fascinated with it. As a challenge, she decided to determine how many substrings of a given binary string are \\"special.\\" A binary string is defined as \\"special\\" if it satisfies the following two conditions: 1. The number of \'0\'s is equal to the number of \'1\'s. 2. The relative positions of the \'0\'s and \'1\'s remain the same in any valid substring i.e. if the first instance of \'0\' occurs before the first instance of \'1\', then in every prefix of the substring which contains an equal number of \'0\'s and \'1\'s, the number of \'0\'s is always greater than or equal to the number of \'1\'s. Sarah\'s challenge is to count the number of such \\"special\\" substrings for a given binary string. -----Input----- The input contains a single binary string s (1 leq text{len}(s) leq 10^5) which contains only \'0\'s and \'1\'s. -----Output----- Output a single integer that represents the number of special substrings in the given binary string. -----Examples----- Input 00110011 Output 6 Input 10101 Output 4 -----Explanation----- In the first example: The \\"special\\" substrings of 00110011 are [\\"0011\\", \\"01\\", \\"1100\\", \\"10\\", \\"0011\\", \\"01\\"], making a total of 6 valid substrings. In the second example: The \\"special\\" substrings of 10101 are [\\"10\\", \\"01\\", \\"10\\", \\"01\\"], making a total of 4 valid substrings.","solution":"def count_special_substrings(s): Returns the count of special substrings in the binary string s. n = len(s) count = 0 prev_run_length = 0 current_run_length = 1 for i in range(1, n): if s[i] == s[i - 1]: current_run_length += 1 else: count += min(prev_run_length, current_run_length) prev_run_length = current_run_length current_run_length = 1 count += min(prev_run_length, current_run_length) return count"},{"question":"サムの最強のパスワード (Sam\'s Strongest Password) Problem Sam is very concerned about his online security and wants to generate a very strong password. The strength of a password is determined by its length and the diversity of characters used in it. Sam believes that using all lowercase, uppercase, numeric digits, and special characters can enhance the strength significantly. However, Sam wants to keep his password easy to remember by specifying some constraints: * The total length of the password should be exactly L. * The password must contain at least one lowercase letter, one uppercase letter, one digit, and one special character. * The password must not contain any spaces. Help Sam to generate the strongest password following his specified constraints. Input Format An input is given in the following format. L In line 1, a single integer L is given which represents the length of the desired password. Constraints * 4 leq L leq 100 Output Format Print a single string representing the strongest password of length L following Sam\'s constraints. The password can have any valid output that meets the given criteria. Example 1 Input 8 Output aB1!abcd Example 2 Input 12 Output Aa1!\'\'\'\'\'\'\'\'\' Example Explanation In Example 1, the password \\"aB1!abcd\\" satisfies the constraints — it has at least one lowercase letter, one uppercase letter, one digit, and one special character with a total length of 8. In Example 2, the password \\"Aa1!\'\'\'\'\'\'\'\'\\" also satisfies the constraints — it has at least one lowercase letter, one uppercase letter, one digit, one special character, and a total length of 12. The rest of the characters can be filled with any set to achieve the required length.","solution":"import string import random def generate_strong_password(L): Generates a strong password of length L that contains at least one lowercase letter, one uppercase letter, one digit, and one special character. The password does not contain any spaces. if L < 4 or L > 100: raise ValueError(\\"Password length must be between 4 and 100.\\") # Character pools lower = string.ascii_lowercase upper = string.ascii_uppercase digits = string.digits special = string.punctuation # Mandatory characters password = [ random.choice(lower), random.choice(upper), random.choice(digits), random.choice(special), ] # Fill the rest of the password length with random characters from all pools all_characters = lower + upper + digits + special password += random.choices(all_characters, k=L-4) # Shuffle to ensure the mandatory characters are not predictable at the start random.shuffle(password) return \'\'.join(password)"},{"question":"Given an integer N, construct a string S of length N such that: 1. S contains only two distinct characters, \'A\' and \'B\'. 2. Out of all substrings of S, at least one substring has as many \'A\'s as \'B\'s. An array outputting any such string S is valid, and it is guaranteed that there always exists such a string S for any given N ≥ 2. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follow. - The only line of each test case contains an integer N - the length of the string to be constructed. ------ Output Format ------ For each test case, output a single line containing a string S of length N, consisting solely of characters \'A\' and \'B\' such that there exists at least one substring with an equal number of \'A\'s and \'B\'s. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 2 ≤ N ≤ 10^{3} - Sum of N over all test cases does not exceed 5 cdot 10^{3}. ----- Sample Input 1 ------ 2 2 5 ----- Sample Output 1 ------ AB AABAB ----- Explanation 1 ------ Test case 1: A possible string satisfying the conditions is \\"AB\\": - The substring \\"AB\\" has an equal number of \'A\'s and \'B\'s. Test case 2: A possible string satisfying the conditions is \\"AABAB\\": - The substring \\"AABA\\" has two \'A\'s and two \'B\'s.","solution":"def construct_string(n): Constructs a string S of length n that consists of only \'A\' and \'B\' where there is at least one substring with equal numbers of \'A\'s and \'B\'s. # Ensure a valid substring exists by having at least \\"AB\\" or \\"BA\\" return \\"AB\\" * (n // 2) + \\"A\\" * (n % 2) def process_test_cases(test_cases): Processes multiple test cases. Parameters: test_cases (list): List of integers representing the lengths of the strings to be constructed. Returns: list: List of strings representing the solution for each test case. return [construct_string(n) for n in test_cases]"},{"question":"Michael has recently started working for an e-commerce company, and one day his manager assigns him a task to optimize the storage of products in the warehouse. Each product can be stored in multiple locations, but to prevent damage and to save space, he wants to make sure that none of the products overlap their storage areas. Each product storage consists of two endpoints on an x-axis denoting the range. Two products overlap if their storage ranges intersect. Michael wants to know the number of non-overlapping product storages. ----Input----- The first line contains a positive integer n (1 ≤ n ≤ 100), denoting the number of products. The next n lines contain two integers l_{i} and r_{i} (0 ≤ l_{i} < r_{i} ≤ 100), representing the start and end points of the storage area for the i-th product. ----Output----- On a single line print a single number k, the maximum number of non-overlapping product storages that can be selected. ----Examples----- Input 4 1 6 2 8 3 5 7 9 Output 2 Input 3 1 4 2 5 5 6 Output 2 ----Note----- In the first test sample, the storage ranges (1, 6) and (7, 9) do not overlap, so Michael can store 2 products without any overlaps. In the second test sample, the storage ranges (1, 4) and (5, 6) do not overlap, similarly resulting in 2 non-overlapping product storages.","solution":"def max_non_overlapping_product_storages(n, storages): Returns the maximum number of non-overlapping product storages. Parameters: n (int): the number of products. storages (list of tuples): list of tuples where each tuple contains the start (l_i) and end (r_i) of a product storage area. Returns: int: The maximum number of non-overlapping product storages. # Sort the storages based on their end points storages.sort(key=lambda x: x[1]) # Initialize variables end = -1 count = 0 # Iterate over sorted storages to count non-overlapping storages for l, r in storages: if l > end: count += 1 end = r return count # Example Usage n = 4 storages = [(1, 6), (2, 8), (3, 5), (7, 9)] print(max_non_overlapping_product_storages(n, storages)) # Output: 2"},{"question":"Danielle has a special math puzzle for her friend Alex. She is giving a list of numbers and wants Alex to find the greatest common divisor (GCD) of all these numbers. However, Danielle added a twist: she encrypted the list by reversing the digits of each number before giving it to Alex. Alex has to first reverse the digits of each number back to its original form, then find the GCD of all the numbers. Help Alex solve this puzzle. Input - The first line of the input contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer L, the number of numbers in the list. - The second line contains L space-separated integers where each integer has its digits reversed. Output - For each test case, print the GCD of the list of numbers in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ L ≤ 100 1 ≤ each number (after reversing digits) ≤ 10^5 Example Input: 2 3 321 431 239 2 987 456 Output: 1 1 Explanation: For the first test case, reversing the digits gives the list [123, 134, 932]. The GCD of 123, 134, and 932 is 1. For the second test case, reversing the digits gives the list [789, 654]. The GCD of 789 and 654 is 1.","solution":"import math from functools import reduce def reverse_digits(n): return int(str(n)[::-1]) def gcd_of_list(lst): return reduce(math.gcd, lst) def solve_puzzle(test_cases): results = [] for case in test_cases: L, nums = case original_nums = [reverse_digits(num) for num in nums] gcd_result = gcd_of_list(original_nums) results.append(gcd_result) return results"},{"question":"Implement a function to convert an infix expression (i.e., a mathematical expression in which operators are placed between operands, such as `2 + 3 * 4`) to its postfix equivalent (i.e., a mathematical expression in which operators follow their operands, such as `2 3 4 * +`). You need to consider the standard precedence of operators, where `*` and `/` have higher precedence over `+` and `-`. The operators `+`, `-`, `*`, `/` will be available, along with parentheses `(` and `)` that can override precedence rules. The function should take a single string as input, representing a valid infix expression, and return its postfix representation as a string. Examples ```python infix_to_postfix(\'2 + 3 * 4\') # \\"2 3 4 * +\\" infix_to_postfix(\'( 1 + 2 ) * ( 3 - 4 )\') # \\"1 2 + 3 4 - *\\" infix_to_postfix(\'5 * 3 + ( 2 / 1 )\') # \\"5 3 * 2 1 / +\\" infix_to_postfix(\'( 3 + 5 ) * ( 2 - 8 ) / 4\') # \\"3 5 + 2 8 - * 4 /\\" ``` Note: The input numbers and operators will always be separated by spaces for simplicity. Make sure to handle single-digit and multi-digit numbers uniformly.","solution":"def infix_to_postfix(expression): Converts an infix expression to its postfix equivalent. Parameters: expression (str): A string representing a mathematical infix expression. Returns: str: A string representing the postfix equivalent of the input infix expression. precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] def greater_precedence(op1, op2): return precedence[op1] >= precedence[op2] tokens = expression.split() for token in tokens: if token.isnumeric(): # token is an operand output.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # pop \'(\' from operators stack else: # token is an operator while operators and operators[-1] != \'(\' and greater_precedence(operators[-1], token): output.append(operators.pop()) operators.append(token) # pop all the operators left in the stack while operators: output.append(operators.pop()) return \\" \\".join(output)"},{"question":"# Task Implement a function that calculates the minimum number of steps required for a king to move from one position to another on an 8x8 chessboard. The king can move horizontally, vertically, or diagonally all by one square per move. Input/Output - `[input]` string `start` The starting position of the king on the chessboard in standard chess notation (e.g., \\"e2\\"). - `[input]` string `end` The ending position of the king on the chessboard in standard chess notation (e.g., \\"e4\\"). It is guaranteed that start and end are different. - `[output]` an integer The minimum number of steps which the king will take to go from the start position to the end position. Example For `start = \\"a1\\"` and `end = \\"b3\\"`, the output should be `2`. For `start = \\"h8\\"` and `end = \\"a1\\"`, the output should be `7`. For `start = \\"d4\\"` and `end = \\"e5\\"`, the output should be `1`. For `start = \\"g6\\"` and `end = \\"g7\\"`, the output should be `1`.","solution":"def chess_position_to_coords(position): Convert a chess position in standard notation to coordinates. \'a1\' -> (0, 0) \'h8\' -> (7, 7) col = ord(position[0]) - ord(\'a\') row = int(position[1]) - 1 return (col, row) def min_king_moves(start, end): Calculate the minimum number of steps required for a king to move from the start position to the end position on an 8x8 chessboard. start_coords = chess_position_to_coords(start) end_coords = chess_position_to_coords(end) col_diff = abs(start_coords[0] - end_coords[0]) row_diff = abs(start_coords[1] - end_coords[1]) return max(col_diff, row_diff) # Testing the function with an example print(min_king_moves(\\"a1\\", \\"b3\\")) # Output: 2 print(min_king_moves(\\"h8\\", \\"a1\\")) # Output: 7 print(min_king_moves(\\"d4\\", \\"e5\\")) # Output: 1 print(min_king_moves(\\"g6\\", \\"g7\\")) # Output: 1"},{"question":"Given an array of N positive integers, your task is to find the length of the longest subarray which forms a contiguous segment of integers when sorted. The elements must be distinct. Example 1: Input: N = 6 arr = [10, 12, 11, 14, 13, 15] Output: 6 Explanation: The longest subarray that forms a contiguous segment when sorted is [10, 12, 11, 14, 13, 15] which forms the contiguous segment [10, 11, 12, 13, 14, 15]. Example 2: Input: N = 5 arr = [1, 2, 3, 5, 6] Output: 3 Explanation: The longest subarray that forms a contiguous segment when sorted is either [1, 2, 3] or [5, 6]. Longest length is 3. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function findLongestContiguousSubarray() that takes array arr and integer N as parameters and returns the length of the longest such subarray. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def findLongestContiguousSubarray(arr, N): Finds the length of the longest subarray which forms a contiguous segment of integers when sorted. The elements in the subarray must be distinct. :param arr: A list of integers :param N: Size of the list :return: Length of the longest subarray forming a contiguous segment max_len = 0 for i in range(N): # Create a set to store elements of the current subarray seen = set() min_val = float(\'inf\') max_val = float(\'-inf\') for j in range(i, N): if arr[j] in seen: break seen.add(arr[j]) min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) if max_val - min_val == j - i: max_len = max(max_len, j - i + 1) return max_len"},{"question":"You are given an online shopping website that sells N different items. Each item has a price and a rating. A user wants to find out the maximum rating they can get without exceeding their budget. Write a program to help the user determine the highest total rating possible within their budget constraint. -----Constraints----- - 1 leq N leq 10^4 - 1 leq price_i leq 10^3 (1 leq i leq N) - 1 leq rating_i leq 100 (1 leq i leq N) - 1 leq budget leq 10^6 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N budget price_1 rating_1 price_2 rating_2 ... price_N rating_N -----Output----- Print the maximum total rating achievable without exceeding the given budget. -----Sample Input----- 4 100 20 8 50 9 30 5 70 7 -----Sample Output----- 22 The user can buy the items with prices 20, 50, and 30 for a total rating of 8 + 9 + 5 = 22. This is the highest total rating the user can achieve without exceeding the budget of 100.","solution":"def max_rating_within_budget(N, budget, items): items.sort(key=lambda x: x[0]) dp = [0] * (budget + 1) for price, rating in items: for b in range(budget, price - 1, -1): dp[b] = max(dp[b], dp[b - price] + rating) return dp[budget] def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) budget = int(data[1]) items = [] index = 2 for _ in range(N): price = int(data[index]) rating = int(data[index + 1]) items.append((price, rating)) index += 2 result = max_rating_within_budget(N, budget, items) print(result)"},{"question":"You are given a grid with dimensions n x m, consisting of cells that are either empty or blocked. The grid is represented as an array of strings, where each string is a row of the grid, and each character in the string is either \'.\' representing an empty cell or \'#\' representing a blocked cell. Your goal is to determine the shortest path for a training robot to traverse from the top-left corner (cell (0,0)) to the bottom-right corner (cell (n-1,m-1)), avoiding blocked cells. The robot can move up, down, left, or right to an adjacent empty cell but cannot move diagonally or through blocked cells. If there is no such path, the function should return -1. Write a function `shortest_path(grid)` that takes a grid as input and returns the length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, the function should return -1. **Input**: - An integer n (1 ≤ n ≤ 100) — the number of rows in the grid. - An integer m (1 ≤ m ≤ 100) — the number of columns in the grid. - An array of n strings, each string consisting of m characters (either \'.\' or \'#\') denoting the grid. **Output**: - An integer representing the length of the shortest path from (0,0) to (n-1,m-1), or -1 if no such path exists. **Examples**: 1. **Input**: ``` grid = [ \\"....\\", \\"..\\", \\".#..\\", \\"....\\" ] ``` **Output**: ``` 6 ``` 2. **Input**: ``` grid = [ \\"....\\", \\"#.\\", \\"....\\", \\"....\\" ] ``` **Output**: ``` 8 ``` 3. **Input**: ``` grid = [ \\".#.\\", \\"#\\", \\".#.\\" ] ``` **Output**: ``` -1 ``` **Note**: In the first example, the robot starts at (0,0), navigates around the blocked cells, and reaches (3,3) with a shortest path of 6 steps. In the second example, despite the obstacle in the middle, the robot takes the path around and reaches the destination in 8 steps. In the third example, there is no possible path to the destination, so the output is -1.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a series of positive integers. Your task is to find the unique pairs (i, j) within the series such that i < j and the sum of the ith and jth elements is even. Input First line will have a value of T (number of test cases). For each test case: - The first line will contain a single integer N (number of elements in the series). - The second line will contain N space-separated positive integers. Output For each test case, print the number of unique pairs (i, j) satisfying the given condition. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ element value ≤ 10^9 SAMPLE INPUT 2 4 1 2 3 4 5 2 4 6 8 10 SAMPLE OUTPUT 2 10 Explanation For the first test case: The pairs (i, j) with even sums are: (1, 3): 1 + 3 = 4 (even) (2, 4): 2 + 4 = 6 (even) For the second test case: All pairs can be paired as they all are even numbers resulting in an even sum. The number of ways to choose 2 elements from 5 is 5C2 which equals 10.","solution":"def count_even_sum_pairs(T, test_cases): results = [] for case in test_cases: N, series = case even_count = sum(1 for x in series if x % 2 == 0) odd_count = N - even_count # Number of pairs from even numbers even_pairs = even_count * (even_count - 1) // 2 # Number of pairs from odd numbers odd_pairs = odd_count * (odd_count - 1) // 2 results.append(even_pairs + odd_pairs) return results"},{"question":"You are a software engineer working for a car rental company. The company wants to implement a new system to maintain a list of their available cars and process booking requests efficiently. Each car has a unique ID, and the booking system should allow adding new cars to the fleet, removing cars, and requesting a car of a specific type. If a requested type of car is available, it should be booked, and the ID of the booked car should be returned. If no car of the requested type is available, an appropriate message should be displayed. ------ Input ------ First line of the input file consists of a single integer N, the number of operations to follow. The next N lines contain one operation each on a single line. An operation can be of 3 types: 1 car_id car_type: Add a car with unique identifier \'car_id\' and type \'car_type\' to the fleet of available cars. (car_id is an integer and car_type is a string) 2 car_id: Remove the car with identifier \'car_id\' from the fleet of available cars. (car_id is an integer) 3 car_type: Request a car of type \'car_type\'. ------ Output ------ For every test case, output a single integer for every operation of type 3 mentioned above, which is the car ID of the booked car. If no car of the requested type is available, print \\"No car available\\". ------ Constraints ------ 1 ≤ N ≤ 100000 1 ≤ car_id ≤ 100000 Car type will be a non-empty string consisting of lowercase and uppercase English letters. ----- Sample Input 1 ------ 7 1 101 SUV 1 102 Sedan 1 103 SUV 3 SUV 2 103 3 SUV 3 Sedan ----- Sample Output 1 ------ 101 No car available 102 ----- Explanation 1 ------ - Before the first query (operation type 3), there are 2 SUVs (IDs 101, 103) and 1 Sedan (ID 102). The first query (request an SUV) will book the SUV with ID 101. - The second operation of type 3 requests another SUV, but since only 1 SUV (ID 103) remains and is removed by operation type 2, it will print \\"No car available\\". - The third operation of type 3 requests a Sedan, so it will book the Sedan with ID 102.","solution":"class CarRental: def __init__(self): self.available_cars = {} def add_car(self, car_id, car_type): if car_type not in self.available_cars: self.available_cars[car_type] = set() self.available_cars[car_type].add(car_id) def remove_car(self, car_id): for car_type in self.available_cars: if car_id in self.available_cars[car_type]: self.available_cars[car_type].remove(car_id) if not self.available_cars[car_type]: # If set is empty, remove the key del self.available_cars[car_type] break def request_car(self, car_type): if car_type in self.available_cars and self.available_cars[car_type]: car_id = min(self.available_cars[car_type]) # Get the smallest car_id available self.available_cars[car_type].remove(car_id) if not self.available_cars[car_type]: # If set is empty, remove the key del self.available_cars[car_type] return car_id return \\"No car available\\" def process_operations(operations): rental_service = CarRental() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"1\\": car_id = int(parts[1]) car_type = parts[2] rental_service.add_car(car_id, car_type) elif parts[0] == \\"2\\": car_id = int(parts[1]) rental_service.remove_car(car_id) elif parts[0] == \\"3\\": car_type = parts[1] result = rental_service.request_car(car_type) results.append(result) return results"},{"question":"Linus loves binary strings a lot. A binary string is a string consisting of only \'0\'s and \'1\'s. Linus defines a balanced binary string as a binary string where the number of \'0\'s is equal to the number of \'1\'s. Linus has been given a binary string B and he wants to convert it into the longest possible balanced binary string by removing some of its characters without changing the order of the remaining characters. Linus wants to do this task by removing the minimum number of characters. Help Linus to find the length of the longest balanced binary string he can get from B. Input: The first line contains the number of test cases T. Each test case consists of a binary string B. Output: For each test case, output the length of the longest balanced binary string Linus can get. Constraints: 1 ≤ T ≤ 50 1 ≤ |B| ≤ 10^5 SAMPLE INPUT 2 110100110 111000 SAMPLE OUTPUT 8 6 Explanation: For the first sample, Linus can remove the characters at indices 3 and 7 (0-based) to get the balanced binary string \\"11010010\\" which has 4 \'0\'s and 4 \'1\'s resulting in a length of 8. For the second sample, the binary string \\"111000\\" is already balanced, so Linus does not need to remove any characters.","solution":"def longest_balanced_binary_string_length(B): Returns the length of the longest balanced binary string that can be achieved from the given binary string B by removing the minimum number of characters. count_0 = B.count(\'0\') count_1 = B.count(\'1\') # The longest balanced string can be formed by pairing \'0\'s and \'1\'s. return 2 * min(count_0, count_1) def resolve_test_cases(T, test_cases): results = [] for B in test_cases: results.append(longest_balanced_binary_string_length(B)) return results"},{"question":"Given an n x n matrix of positive integers and a starting cell (sx, sy), you need to color the cell and all the cells connected to it (horizontally, vertically, diagonally) with the same value. Two cells (x1, y1) and (x2, y2) are connected if there is a path connecting them such that each cell in the path shares the same value as the starting cell. Your task is to return the matrix after performing the coloring. Input: - First line contains two integers n and m (1 ≤ n, m ≤ 50), the dimensions of the matrix. - Next n lines each contain m integers (1 ≤ matrix[i][j] ≤ 1000), representing the matrix. - The last line contains two integers sx and sy (0 ≤ sx, sy < n), the starting cell coordinates. Output: - Print the updated matrix after coloring the connected component starting from (sx, sy) with 0. Example: Input: 4 4 1 1 2 3 1 1 2 3 3 3 3 3 4 4 4 4 1 1 Output: 0 0 2 3 0 0 2 3 3 3 3 3 4 4 4 4 Input: 3 3 1 2 3 4 5 6 7 8 9 0 0 Output: 0 2 3 4 5 6 7 8 9","solution":"def color_matrix(n, m, matrix, sx, sy): Colors the connected components in the matrix starting from (sx, sy) with 0. def dfs(x, y, target_value): if x < 0 or x >= n or y < 0 or y >= m: return if matrix[x][y] != target_value: return matrix[x][y] = 0 # Explore all 8 possible directions (horizontally, vertically, diagonally) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] for dx, dy in directions: dfs(x + dx, y + dy, target_value) target_value = matrix[sx][sy] dfs(sx, sy, target_value) return matrix"},{"question":"A hotel management system needs to allocate rooms to guests such that no two guests are staying in adjacent rooms. The hotel has a total of `n` rooms in a row, and a list of `m` guest requests, each of which specifies a preferred room number. Design an algorithm to determine whether it\'s possible to assign the rooms according to the preferences without violating the adjacency constraint. If it\'s possible, return the room assignments; otherwise, return an empty list. Example 1: Input: n = 5, requests = [1, 3, 5] Output: [1, 3, 5] Explanation: All requested rooms are non-adjacent. Example 2: Input: n = 5, requests = [1, 2, 4] Output: [] Explanation: Rooms 1 and 2 are adjacent, so the requests cannot be fulfilled. Example 3: Input: n = 7, requests = [1, 3, 5, 7] Output: [1, 3, 5, 7] Explanation: All requested rooms are non-adjacent. Your Task: You do not need to read input or print anything. Your task is to complete the function `assign_rooms(n, requests)` which takes an integer `n` and a list of integers `requests` as input parameters and returns a list of integers representing the room assignments if possible. Otherwise, returns an empty list. Expected Time Complexity: O(m log m) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 1 ≤ m ≤ 10^3","solution":"def assign_rooms(n, requests): Determine if rooms can be assigned according to the requests without violating the adjacency constraint. Parameters: n (int): Total number of rooms. requests (list of int): List of preferred room numbers. Returns: list of int: Room assignments if possible, otherwise an empty list. # Sort the requested room numbers to easily check adjacency requests_sorted = sorted(requests) # Check for any adjacent requests for i in range(1, len(requests_sorted)): if requests_sorted[i] - requests_sorted[i - 1] == 1: return [] # If no adjacent requests are found, return the sorted requests return requests_sorted"},{"question":"Given an array A of n integers, process q queries to update and answer questions about the array. There are two types of operations: 1. Update: Set the value at a particular index. 2. Range Sum: Compute the sum of elements in a given range (inclusive). Constraints * 1 leq n leq 100,000 * 1 leq q leq 200,000 * 1 leq A[i] leq 10^6 for 0 leq i < n * 0 leq x, y < n * 1 leq v leq 10^6 Input The first line contains integers n and q — the number of elements in the array and the number of queries, respectively. The second line contains n integers — the initial values of the array. The next q lines contain the queries in the format described: * `1 x v` — Set A[x] = v * `2 x y` — Compute the sum of elements in the range from index x to y inclusive. Output For each range sum query, output the computed sum. Example Input 5 4 1 2 3 4 5 2 0 2 1 1 6 2 1 3 2 3 4 Output 6 13 9","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_sum(self, left, right): return self.query(right + 1) - self.query(left) def process_queries(n, q, array, queries): fenwick_tree = FenwickTree(n) for i in range(n): fenwick_tree.update(i + 1, array[i]) results = [] for query in queries: if query[0] == 1: index, value = query[1], query[2] current_value = fenwick_tree.range_sum(index, index) fenwick_tree.update(index + 1, value - current_value) elif query[0] == 2: left, right = query[1], query[2] results.append(fenwick_tree.range_sum(left, right)) return results"},{"question":"You are given an integer array nums containing n numbers, where each number appears exactly twice, except for one number which appears exactly once. Your task is to find and return the number that appears only once. Example 1: Input: [2,2,1] Output: 1 Example 2: Input: [4,1,2,1,2] Output: 4 Example 3: Input: [1] Output: 1 Note: - Your algorithm should have a linear runtime complexity. - Could you implement it without using extra memory?","solution":"def single_number(nums): Returns the number that appears only once in the array where every other number appears twice. # Using bitwise XOR to find the unique number result = 0 for num in nums: result ^= num return result"},{"question":"Design a function that takes an integer `n` and returns a list of all integers in the range `[1, n]` (inclusive) that are palindromic and which have prime digits only. A palindromic number is one that reads the same forward and backward (e.g., 121 or 1331). Prime digits include 2, 3, 5, and 7. **Example** ```python 1 => [] 10 => [2, 3, 5, 7] 50 => [2, 3, 5, 7, 22, 33] ``` **Notes** 1. `1, 3, 5, 7` are the single-digit palindromic numbers with prime digits. 2. Ensure that the number `n` can be any non-negative integer including zero. 3. The list returned should not include the number `0` even though the range starts from `1`.","solution":"def is_palindromic(num): Helper function to determine if a number is palindromic. s = str(num) return s == s[::-1] def has_prime_digits_only(num): Helper function to determine if a number contains only prime digits (2, 3, 5, 7). prime_digits = {\'2\', \'3\', \'5\', \'7\'} return all(digit in prime_digits for digit in str(num)) def palindromic_prime_digit_numbers(n): Returns a list of all integers in the range [1, n] (inclusive) that are palindromic and that consist of prime digits only. result = [] for i in range(1, n + 1): if is_palindromic(i) and has_prime_digits_only(i): result.append(i) return result"},{"question":"A cargo delivery system consists of multiple conveyor belts that can move packages between different stations in a warehouse. Each belt is defined by a pair of stations (u, v), where a package can move from station u to station v or vice-versa in a fixed time t. If two stations are connected by a conveyor belt, they are said to be directly connected. The system also supports multiple paths between stations, potentially with different times to traverse. Your task is to determine the minimum time required to move a package from a starting station s to a target station t in the warehouse. To solve this problem efficiently, you need to use Dijkstra\'s algorithm or another shortest path algorithm suitable for handling non-negative weights on the graph. -----Constraints----- - 1 ≤ n, m ≤ 10^5 - 1 ≤ u, v ≤ n - 1 ≤ t ≤ 10^9 - The number of stations (n) and the number of conveyor belts (m) are integers. -----Input----- Input is given from Standard Input in the following format: n m u_1 v_1 t_1 u_2 v_2 t_2 ... u_m v_m t_m s t -----Output----- Print the minimum time required to move a package from station s to station t. If there is no path from s to t, print -1. -----Sample Input----- 5 6 1 2 5 2 3 2 1 3 9 3 4 3 2 4 7 4 5 1 1 5 -----Sample Output----- 11 In this case, the shortest path from station 1 to station 5 is: 1 -> 2 -> 3 -> 4 -> 5 with a total time of 5 + 2 + 3 + 1 = 11.","solution":"import heapq def minimum_delivery_time(n, m, edges, s, t): graph = {i: [] for i in range(1, n + 1)} for u, v, time in edges: graph[u].append((v, time)) graph[v].append((u, time)) def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while heap: current_time, u = heapq.heappop(heap) if u == end: return current_time if current_time > distances[u]: continue for v, time in graph[u]: new_time = current_time + time if new_time < distances[v]: distances[v] = new_time heapq.heappush(heap, (new_time, v)) return -1 return dijkstra(s, t)"},{"question":"In a land of monsters and warriors, a massive battle is about to take place. Warriors are arranged in a perfect binary tree, where every node contains a warrior. Each warrior has a strength value assigned to them. The battle takes place in rounds, and in each round, you can select any warrior and remove them. When you remove a warrior, all warriors directly connected to the selected warrior also leave the battlefield. Your task is to determine the minimum number of rounds needed to remove all warriors from the battlefield. Input Format: The first line contains T, the number of test cases. Each test case follows. The first line of each test case contains an integer H, the height of the perfect binary tree. The next line contains space-separated integers representing the strength values of the warriors in each node of the tree (in level-order traversal). Output Format: For each test case, output a single integer denoting the minimum number of rounds required to remove all warriors from the battlefield. Constraints: 1 ≤ T ≤ 1000 1 ≤ H ≤ 10 1 ≤ strength value ≤ 1000 Example Input: 2 2 10 20 30 40 50 60 70 3 5 15 10 20 25 30 35 40 45 50 55 60 65 70 75 Example Output: 3 7","solution":"def min_rounds_to_remove_warriors(T, test_cases): Calculate the minimum number of rounds to remove all warriors in each of the test cases. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains (H, warrior_strengths) Returns: list: A list of integers representing the minimum rounds needed for each test case. results = [] for i in range(T): H, warrior_strengths = test_cases[i] # Minimum rounds required is equal to the height H of the tree results.append(H + 1) return results"},{"question":"An online retail store tracks the sales performance of its products over a period of time. Each product is associated with a unique product ID, and sales performance is recorded in a log that tracks the number of units sold for each product on specific days. The store manager wants to analyze the sales data to determine which product had the highest sales on any given day within the recorded period. Write a program that reads the sales data and outputs the product ID of the highest selling product for each day. Input The input consists of multiple datasets. Each dataset represents the sales data for one day and has the following format: N PID1 U1 PID2 U2 ... PIDN UN Where: - N is the number of products sold on that day (1 ≤ N ≤ 1000). - PIDi is the unique product ID for the i-th product (a string of alphanumeric characters of length at most 20). - Ui is the number of units sold for the i-th product (1 ≤ Ui ≤ 10000). The input is terminated by a line with a single zero, which should not be processed. Output For each dataset, print the product ID of the product with the highest number of units sold that day. If there are multiple products with the same number of units sold, print the product ID that appears earliest in the input order. Examples Input 3 A123 300 B456 500 C789 200 2 P12 150 Q34 150 0 Output B456 P12","solution":"def highest_selling_products(datasets): results = [] for dataset in datasets: highest_pid = None highest_units = -1 for pid, units in dataset: if units > highest_units or (units == highest_units and highest_pid is None): highest_pid = pid highest_units = units results.append(highest_pid) return results def read_input(input_lines): datasets = [] current_dataset = [] for line in input_lines: line = line.strip() if line == \'0\': if current_dataset: datasets.append(current_dataset) break elif line.isdigit(): if current_dataset: datasets.append(current_dataset) current_dataset = [] else: pid, units = line.split() current_dataset.append((pid, int(units))) return datasets def main(input_lines): datasets = read_input(input_lines) return highest_selling_products(datasets)"},{"question":"Given an array of integers `arr` and an integer `target`, your task is to find two distinct indices in the array such that the elements at these indices add up to the `target`. You can assume there is exactly one solution. -----Input----- The input consists of two lines: 1. The first line contains two integers `n` (size of the array, 2 ≤ n ≤ 10^5) and `target` (-10^9 ≤ target ≤ 10^9). 2. The second line contains `n` integers representing the elements of `arr`, where each element is between -10^9 and 10^9. -----Output----- Output two integers representing the indices of the two numbers in the array that add up to the `target`. The indices should be output in increasing order, and 1-based indexing should be used. -----Examples----- Input 4 9 2 7 11 15 Output 1 2 Input 3 6 3 2 4 Output 2 3 -----Note----- In the first example, `arr[1] + arr[2] = 2 + 7 = 9`, so the output is `1 2`. In the second example, `arr[2] + arr[3] = 2 + 4 = 6`, so the output is `2 3`.","solution":"def find_two_sum_indices(arr, target): Finds two distinct indices in the array such that the elements at these indices add up to the target. Args: arr: List of integers. target: Integer target sum. Returns: A tuple of two integers representing the 1-based indices in increasing order. index_map = {} for i, num in enumerate(arr): complement = target - num if complement in index_map: return (index_map[complement] + 1, i + 1) index_map[num] = i return None"},{"question":"The manager of an amusement park wants to optimize the ride schedule to accommodate visitors efficiently. Each ride has a specific start and end time, and visitors can queue up for multiple consecutive rides without any overlap in time. The manager would like to know the maximum number of rides a visitor can enjoy in a day without any time conflicts. Your task is to help the manager by writing a program that finds the optimal schedule for a visitor. -----Input:----- - First line will contain N, the number of rides available. Then the rides follow. - Each of the next N lines contains two integers s_i and e_i denoting the start and end times of each ride. -----Output:----- Print the maximum number of rides that can be attended by a visitor in a day. -----Constraints----- - 1 leq N leq 1000 - 0 leq s_i < e_i leq 10000 -----Sample Input:----- 5 1 4 2 5 5 8 3 6 8 9 -----Sample Output:----- 3 -----EXPLANATION:----- The visitor can attend the rides in the following sequence: (1, 4), (5, 8), and (8, 9), which makes the maximum number of non-overlapping rides 3.","solution":"def max_rides(n, rides): Computes the maximum number of non-overlapping rides a visitor can enjoy. Parameters: n (int): Number of rides rides (list of tuples): List containing the start and end times of each ride Returns: int: Maximum number of non-overlapping rides # Sort rides by their end times rides.sort(key=lambda x: x[1]) last_end_time = 0 count = 0 for start, end in rides: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Implement a voting system in which each vote from a voter is stored. Each voter has a unique voter ID and can vote for a candidate by using the voting system. If a voter tries to vote again, the vote should be updated with the new candidate. At the end of the voting period, the system should be able to calculate the total votes for each candidate and declare the candidate with the highest votes as the winner. # Requirements 1. Create a method to register a vote from a voter. 2. Ensure that if the same voter votes again, their previous vote is updated. 3. Create a method to calculate and return the total votes for each candidate. 4. Create a method to declare the candidate with the highest votes as the winner. # Input * Votes: List of tuples where each tuple contains (voter_id, candidate_id). `(voter_id)` is a unique identifier for a voter, and `(candidate_id)` is an identifier for a candidate. # Output * Total votes for each candidate as a dictionary with `candidate_id` as keys and the corresponding vote count as values. * The winner with the highest votes as a tuple `(candidate_id, votes)`. # Examples Example 1: ```python votes = [ (1, \'A\'), (2, \'B\'), (1, \'C\'), (3, \'A\'), (4, \'A\'), (2, \'A\') ] # After processing the votes total_votes = {\'A\': 4, \'B\': 0, \'C\': 1} winner = (\'A\', 4) ``` Example 2: ```python votes = [ (1, \'X\'), (2, \'Y\'), (1, \'Y\'), (3, \'X\'), (4, \'Z\'), (2, \'X\') ] # After processing the votes total_votes = {\'X\': 3, \'Y\': 0, \'Z\': 1} winner = (\'X\', 3) ``` # Constraints * Voter IDs are non-negative integers. * Candidates are represented by unique strings. * Assume there are at most 1000 voters and 100 candidates. * Assume all inputs are valid and each vote is within the constraints. # Implementation Implement a `VotingSystem` class with the mentioned methods: ```python class VotingSystem: def __init__(self): self.votes = {} def register_vote(self, voter_id, candidate_id): self.votes[voter_id] = candidate_id def calculate_votes(self): vote_count = {} for candidate in self.votes.values(): if candidate in vote_count: vote_count[candidate] += 1 else: vote_count[candidate] = 1 return vote_count def declare_winner(self): vote_count = self.calculate_votes() winner = max(vote_count.items(), key=lambda item: item[1]) return winner # Example usage voting_system = VotingSystem() votes = [ (1, \'A\'), (2, \'B\'), (1, \'C\'), (3, \'A\'), (4, \'A\'), (2, \'A\') ] for voter_id, candidate_id in votes: voting_system.register_vote(voter_id, candidate_id) total_votes = voting_system.calculate_votes() winner = voting_system.declare_winner() print(\'Total Votes:\', total_votes) print(\'Winner:\', winner) ```","solution":"class VotingSystem: def __init__(self): self.votes = {} def register_vote(self, voter_id, candidate_id): self.votes[voter_id] = candidate_id def calculate_votes(self): vote_count = {} for candidate in self.votes.values(): if candidate in vote_count: vote_count[candidate] += 1 else: vote_count[candidate] = 1 return vote_count def declare_winner(self): vote_count = self.calculate_votes() winner = max(vote_count.items(), key=lambda item: item[1]) return winner # Example usage voting_system = VotingSystem() votes = [ (1, \'A\'), (2, \'B\'), (1, \'C\'), (3, \'A\'), (4, \'A\'), (2, \'A\') ] for voter_id, candidate_id in votes: voting_system.register_vote(voter_id, candidate_id) total_votes = voting_system.calculate_votes() winner = voting_system.declare_winner() print(\'Total Votes:\', total_votes) print(\'Winner:\', winner)"},{"question":"Given a positive integer N, determine if N is a Harshad number (or Niven number). A Harshad number is an integer that is divisible by the sum of its digits. -----Input----- The first line of input contains a positive integer 1 leq T leq 10, the number of test cases. Each of the next T lines contains a single positive integer N where 1 leq N leq 10^6. -----Output----- For each value of N, print \\"Yes\\" if N is a Harshad number, otherwise print \\"No\\". -----Examples----- Sample Input: 3 18 19 21 Sample Output: Yes No Yes","solution":"def is_harshad_number(N): Determine if a number N is a Harshad number. A Harshad number is an integer that is divisible by the sum of its digits. :param N: An integer number. :return: True if N is a Harshad number, otherwise False. digit_sum = sum(int(digit) for digit in str(N)) return N % digit_sum == 0 def check_harshad_numbers(cases): Check multiple integers if they are Harshad numbers. :param cases: List of integers to be checked. :return: List of results, \\"Yes\\" if the integer is a Harshad number, otherwise \\"No\\". results = [] for N in cases: if is_harshad_number(N): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"In a galaxy far, far away, a soldier has been tasked with rescuing a captive by navigating a rectangular grid. The grid has `N` rows and `M` columns. Each cell in the grid contains either \'.\' representing open space or \'#\' representing an obstacle. The soldier can move to an adjacent cell (up, down, left, right) if it\'s not an obstacle. The captive is located in a specified cell `(C1, C2)` in the grid, and the soldier starts at a different specified cell `(S1, S2)`. Your task is to determine the minimum number of moves required for the soldier to reach the captive. If reaching the captive is impossible, return -1. ------ Input ------ The first line contains two integers `N` and `M` — the number of rows and columns in the grid. The next `N` lines contain `M` characters each — the grid description. The following line contains two integers `S1` and `S2` — the starting position of the soldier (0-indexed). The final line contains two integers `C1` and `C2` — the position of the captive (0-indexed). ------ Output ------ Print a single integer, the minimum number of moves required to reach the captive, or `-1` if it\'s impossible. ------ Constraints ------ 1 ≤ N, M ≤ 1000 The grid consists only of characters \'.\' and \'#\'. 0 ≤ S1, S2, C1, C2 < 1000 The start and end positions will always contain \'.\'. ----- Sample Input 1 ------ 5 5 ..... .#. ..... .#. ..... 0 0 4 4 ----- Sample Output 1 ------ 12 ----- Explanation ------ The soldier can navigate through the maze avoiding obstacles to reach the captive in 12 moves. In the above sample grid, one possible shortest path is: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (4, 1) -> (4, 2) -> (4, 3) -> (4, 4) Here\'s the visual representation of the grid with \'S\' marking the starting point and \'C\' marking the captive\'s location: S.... .#. ..... .#. ....C","solution":"from collections import deque def min_moves_to_reach_captive(grid, N, M, S1, S2, C1, C2): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * M for _ in range(N)] queue = deque([(S1, S2, 0)]) visited[S1][S2] = True while queue: x, y, moves = queue.popleft() if (x, y) == (C1, C2): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1"},{"question":"Mark owns a fancy restaurant and has a special dish that includes ingredients with specific freshness levels. Let\'s call this dish the \\"Gourmet Delight.\\" The dish requires exactly k different freshness levels of ingredients. To ensure the highest quality, Mark categorizes the freshness of each ingredient by a unique integer. Mark currently has n ingredients in his inventory, each with a specific freshness level recorded in an array. Unfortunately, some freshness levels may not be present in his current inventory. Mark can acquire additional ingredients from the market, where each new ingredient will have a unique freshness level not currently in the inventory. Mark\'s goal is to determine the minimum number of additional ingredients he needs to acquire so that he has exactly k different freshness levels for his \\"Gourmet Delight.\\" -----Input----- The first line contains two integers n and k (1 ≤ n, k ≤ 2000) — the number of ingredients currently in Mark\'s inventory and the number of different freshness levels required for the dish. The second line contains n space-separated integers representing the freshness levels of the ingredients in his inventory. Each freshness level is a positive integer not exceeding 10^6. -----Output----- Print a single integer — the minimum number of additional ingredients Mark needs to acquire. -----Examples----- Input 5 7 3 1 4 1 5 Output 3 Input 3 5 2 2 2 Output 4 Input 7 4 1 2 3 4 5 6 7 Output 0 -----Note----- In the first example, Mark needs freshness levels like 2, 6, and another unique level to meet the requirement. In the second example, Mark needs four additional unique freshness levels because all current ingredients have the same freshness level. In the third example, Mark already has more than the required number of unique freshness levels, so no extra ingredients are needed.","solution":"def min_additional_ingredients(n, k, freshness_levels): Determines the minimum number of additional ingredients needed to have exactly k different freshness levels. Parameters: n (int): The number of ingredients currently in inventory. k (int): The number of different freshness levels required for the dish. freshness_levels (list): A list of integers representing the freshness levels of the ingredients. Returns: int: The minimum number of additional ingredients required. unique_freshness_levels = set(freshness_levels) unique_count = len(unique_freshness_levels) if unique_count >= k: return 0 else: return k - unique_count"},{"question":"Given a list of strings, your task is to find the string with the highest number of unique characters. If there are multiple strings with the same highest number of unique characters, return the first one that appears in the list. Input Format - The first line contains an integer N representing the number of strings. - The next N lines each contain a string consisting of lowercase letters. Constraints 1 leq N leq 100 Each string consists solely of lowercase English letters, and has length at most 100. Output Format Print the string with the highest number of unique characters. Sample Input ``` 5 apple banana cherry date elderberry ``` Sample Output ``` elderberry ``` Explanation - \\"apple\\" has 4 unique characters: \'a\', \'p\', \'l\', \'e\' - \\"banana\\" has 3 unique characters: \'b\', \'a\', \'n\' - \\"cherry\\" has 5 unique characters: \'c\', \'h\', \'e\', \'r\', \'y\' - \\"date\\" has 4 unique characters: \'d\', \'a\', \'t\', \'e\' - \\"elderberry\\" has 7 unique characters: \'e\', \'l\', \'d\', \'r\', \'b\', \'r\', \'y\' Among these, \\"elderberry\\" has the highest number of unique characters, so it is the output.","solution":"def string_with_highest_unique_chars(strings): Returns the string with the highest number of unique characters. If there are multiple strings with the same highest number of unique characters, returns the first one that appears in the list. Parameters: strings (list): A list of strings Returns: str: The string with the highest number of unique characters max_unique_chars = 0 result_string = \\"\\" for string in strings: unique_chars = len(set(string)) if unique_chars > max_unique_chars: max_unique_chars = unique_chars result_string = string return result_string"},{"question":"You are given an integer array a of length n. Let\'s define an \\"odd segment\\" as a consecutive subarray of array a where the count of odd numbers is equal to the count of even numbers. Your task is to find the length of the longest odd segment in the array a. If no such segment exists, return 0. -----Input----- The first line contains an integer n (1 le n le 10^6) — the number of elements in a. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array a. -----Output----- Print a single integer – the length of the longest odd segment in the array. If there\'s no such segment, print 0. -----Examples----- Input 5 1 2 3 4 5 Output 4 Input 6 2 4 6 8 10 12 Output 0 Input 3 1 1 1 Output 0 Input 7 1 2 3 4 5 6 7 Output 6 -----Note----- In the first example, the longest subarray with equal number of odd and even numbers is [2, 3, 4, 5] which has length 4. In the second example, there are no odd numbers, so the output is 0. In the third example, there are only odd numbers, so there\'s no valid segment. In the fourth example, the valid segments are [1, 2, 3, 4], [3, 4, 5, 6] or [2, 3, 4, 5, 6, 7], the longest of which has length 6.","solution":"def longest_odd_segment(n, a): Returns the length of the longest subarray where the number of odd and even numbers are equal. # Dictionary to store the first occurrence of a balance value balance_map = {0: -1} balance = 0 max_length = 0 for i in range(n): # Increment balance for odd numbers, decrement for even numbers if a[i] % 2 == 0: balance -= 1 else: balance += 1 # Check if this balance has been seen before if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"Pavel has a rectangular grid with n rows and m columns. Each cell is either empty or contains an obstacle. He has a robot that can move to any of the 4 cardinal directions (up, down, left, right) to an adjacent cell in one move. The robot can only move to empty cells and cannot move outside the grid or into a cell with an obstacle. Pavel wants to know the minimum number of moves required for the robot to get from a given starting cell to a target cell. Help him find the answer or determine if it is impossible for the robot to reach the target. -----Input----- The first line of input contains two integers t (1 le t le 100) — the number of test cases in input. The first line of each test case contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid. The next n lines each contain m characters (\'0\' for an empty cell and \'1\' for a cell with an obstacle). The next line contains two integers sx and sy (1 le sx le n, 1 le sy le m) — the starting cell coordinates (1-indexed). The next line contains two integers tx and ty (1 le tx le n, 1 le ty le m) — the target cell coordinates (1-indexed). -----Output----- For each test case, output a single integer — the minimum number of moves required to get from the starting cell to the target cell, or -1 if it is impossible to reach the target cell. -----Examples----- Input 3 3 3 000 010 000 1 1 3 3 3 3 000 000 000 1 1 3 1 3 3 010 010 010 1 1 3 3 Output 4 2 -1 -----Note----- In the first sample, the robot can move from (1, 1) to (3, 3) in 4 moves: (1, 1) rightarrow (1, 2) rightarrow (2, 2) rightarrow (3, 2) rightarrow (3, 3). In the second sample, the robot can move from (1, 1) to (3, 1) in 2 moves: (1, 1) rightarrow (2, 1) rightarrow (3, 1). In the third sample, it is impossible for the robot to move from (1, 1) to (3, 3) because there are obstacles in the way.","solution":"from collections import deque def bfs(grid, start, end, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited[start[0]][start[1]] = True while queue: x, y, dist = queue.popleft() if (x, y) == (end[0], end[1]): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'0\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 def min_moves_in_grid(test_cases): results = [] for case in test_cases: n, m, grid, sx, sy, tx, ty = case start = (sx - 1, sy - 1) end = (tx - 1, ty - 1) result = bfs(grid, start, end, n, m) results.append(result) return results"},{"question":"Aria has a group of friends who love to play a game with secret codes. Each friend has a unique secret code which is a positive integer. They decide to create a new sequence of numbers such that the sequence represents the sum of the digits of each secret code. If the result has more than one digit, they sum the digits again until they get a single digit. Your task is to help Aria generate this new sequence. Given the secret codes, output the final transformed sequence of single-digit sums. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of friends. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the secret codes of Aria\'s friends. Output Output a single line containing n integers, where the i-th integer represents the single-digit sum of the i-th secret code in the input sequence. Example Input 5 123 456 789 101 20 Output 6 6 6 2 2 Note In the first test, the secret codes are [123, 456, 789, 101, 20]. - 123 -> 1 + 2 + 3 = 6 - 456 -> 4 + 5 + 6 = 15 -> 1 + 5 = 6 - 789 -> 7 + 8 + 9 = 24 -> 2 + 4 = 6 - 101 -> 1 + 0 + 1 = 2 - 20 -> 2 + 0 = 2 So, the output is [6, 6, 6, 2, 2].","solution":"def digital_root_sequence(nums): Given a list of integers, returns a list of their digital roots. The digital root is obtained by summing the digits of each number repeatedly until a single digit is obtained. def digital_root(n): while n >= 10: n = sum(int(digit) for digit in str(n)) return n return [digital_root(num) for num in nums]"},{"question":"Given an undirected graph with N nodes numbered from 1 to N, and M edges, each edge connecting two nodes with a certain weight, compute the shortest path from a specified start node to a target node. The graph is represented as an adjacency list. Write a function to return the length of the shortest path. If there is no path from the start node to the target node, return -1. Example: Input: N = 5, M = 6 Edges = [[1, 2, 4], [1, 3, 2], [2, 3, 3], [3, 4, 2], [4, 5, 3], [2, 5, 7]] start = 1 target = 5 Output: 9 Explanation: The shortest path from node 1 to node 5 is through the edges [1, 3], [3, 4], and [4, 5] with total weight 2+2+3=7. The edge [1, 2] and [2, 5] gives a total weight of 4+7=11, which is longer. Input: N = 4, M = 3 Edges = [[1, 2, 4], [2, 3, 5], [3, 4, 6]] start = 1 target = 4 Output: 15 Explanation: The shortest path from node 1 to node 4 is the direct path through edges [1, 2], [2, 3], and [3, 4] with a total weight of 4+5+6=15. Your Task: You do not need to read input or print anything. Your task is to complete the function shortestPath() which takes N, M, edges, start, and target as input parameters and returns the length of the shortest path. Expected Time Complexity: O((N + M) log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ weight of each edge ≤ 100","solution":"import heapq import collections def shortestPath(N, M, edges, start, target): graph = collections.defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[start] = 0 while heap: current_distance, u = heapq.heappop(heap) if u == target: return current_distance for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(heap, (distance, v)) return -1"},{"question":"In an online game, players can collect various items. Each item belongs to one of several categories, such as weapons, armor, potions, etc. Players find items in chests, and each chest contains a list of items. Players often want to merge their item collections from multiple chests and find out the total number of distinct items they have in each category. Your task is to write a function `merge_collections` that takes a list of chests, where each chest is represented as a list of tuples. Each tuple contains an item name (string) and its category (string). The function should return a dictionary where the keys are the categories and the values are the sets of distinct item names in those categories. # Function Signature ```python def merge_collections(chests: List[List[Tuple[str, str]]]) -> Dict[str, Set[str]]: pass ``` # Example ```python # Example chests chests = [ [(\'sword\', \'weapon\'), (\'shield\', \'armor\'), (\'potion\', \'potion\')], [(\'bow\', \'weapon\'), (\'potion\', \'potion\'), (\'helmet\', \'armor\')], [(\'axe\', \'weapon\'), (\'potion\', \'potion\'), (\'sword\', \'weapon\')] ] # Expected output { \'weapon\': {\'sword\', \'bow\', \'axe\'}, \'armor\': {\'shield\', \'helmet\'}, \'potion\': {\'potion\'} } ``` # Constraints 1. Each chest and item within a chest are represented as indicated. 2. The function should be able to handle any number of chests. 3. Item names and categories are case-insensitive, but their casing in the output should match the input. 4. Each item in a chest can appear multiple times, either within the same chest or across different chests. # Requirements - You need to import `List`, `Tuple`, `Dict`, and `Set` from the `typing` module. - Ensure that the function merges collections correctly and respects all constraints.","solution":"from typing import List, Tuple, Dict, Set def merge_collections(chests: List[List[Tuple[str, str]]]) -> Dict[str, Set[str]]: result = {} for chest in chests: for item, category in chest: if category not in result: result[category] = set() result[category].add(item) return result"},{"question":"Given a list of integers, an inversion is a pair of indices (i, j) such that i < j and list[i] > list[j]. Your task is to find the number of inversions in the given list. # Input - The first line contains a single integer N (1 ≤ N ≤ 100,000) — the length of the list. - The second line contains N integers — the elements of the list, each an integer between 1 and 1,000,000. # Output - Output a single integer — the number of inversions in the list. # Examples Input 1: ``` 5 2 3 8 6 1 ``` Output 1: ``` 5 ``` Input 2: ``` 4 1 2 3 4 ``` Output 2: ``` 0 ``` Input 3: ``` 3 3 1 2 ``` Output 3: ``` 2 ```","solution":"def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count def count_inversions(arr): temp_arr = [0] * len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"},{"question":"A warehouse management system needs a program to optimize storage by taking certain constraints into account. The warehouse has several shelves, and each shelf can hold a limited number of boxes. Each box has a specific weight, and there is a maximum allowable weight limit for each shelf. Given the number of shelves, the weight limit for each shelf, and a list of boxes, each with its weight, the task is to determine the minimum number of shelves required to store all the boxes without exceeding the weight limit of any shelf. You may assume that all boxes must be stored and it is not possible to split a box weight across multiple shelves. Write a program that takes the following inputs and produces the appropriate outputs. # Input Multiple datasets. Each dataset contains: 1. An integer `w`, the weight limit for each shelf (1 <= w <= 10^3) 2. An integer `b`, the number of boxes (1 <= b <= 100) 3. An array of `b` integers representing the weights of the boxes. The input ends with two integers `0 0`. # Output For each dataset, output a single integer representing the minimum number of shelves required to store all the boxes. # Example Input ``` 100 5 50 30 70 10 20 50 5 30 30 30 30 30 0 0 ``` Output ``` 2 5 ``` *Explanation for Example* For the first dataset, the boxes can be stored as follows: - Shelf 1: [50, 30, 10] (total weight 90 ≤ 100) - Shelf 2: [70, 20] (total weight 90 ≤ 100) For the second dataset, each box needs its own shelf as any two boxes would exceed the weight limit of 50. Thus, 5 shelves are required.","solution":"def min_shelves(w, b, box_weights): # Sort the weights in descending order to maximize space utilization box_weights.sort(reverse=True) shelves = [] for weight in box_weights: placed = False for shelf in shelves: if sum(shelf) + weight <= w: shelf.append(weight) placed = True break if not placed: shelves.append([weight]) return len(shelves) def solve(input_data): results = [] idx = 0 while idx < len(input_data): w, b = input_data[idx] if w == 0 and b == 0: break box_weights = input_data[idx + 1] results.append(min_shelves(w, b, box_weights)) idx += 2 return results"},{"question":"A candy factory produces n different types of candy, numbered from 1 to n. Each type of candy has a unique size and sweetness level associated with it. Your task is to arrange the candies in a specific order which maximizes the total size combined with the total sweetness. More formally, if we have a permutation p1, p2, ..., pn of the candy types (phrased here as type indices), you need to form the maximum weighted sum where the weight of each candy type i is calculated as: size[pi] + sweetness[pi] + i. Input The first line contains integer n (1 ≤ n ≤ 100,000) — the number of different candy types. The second line contains n integers — the size of each candy type. The third line contains n integers — the sweetness of each candy type. Output Output one line consisting of n integers, the indices of each candy type in the best permutation to maximize the total weighted sum. Examples Input 3 2 8 5 3 6 4 Output 3 2 1 Input 4 1 2 3 4 10 11 12 13 Output 4 3 2 1","solution":"def maximize_candy_weighted_sum(n, sizes, sweetnesses): Returns a permutation of candy indices that maximizes the total weighted sum. :param n: int, number of different candy types. :param sizes: List[int], sizes of the candy types. :param sweetnesses: List[int], sweetness levels of the candy types. :return: List[int], permutation of indices maximizing the total weighted sum. candies = [(sizes[i], sweetnesses[i], i + 1) for i in range(n)] # Sorting by sum of sizes and sweetness in descending order # If two candies have the same sum, sorted by original index in ascending order. candies.sort(key=lambda x: (x[0] + x[1]), reverse=True) # Extracting indices from the sorted list result = [candy[2] for candy in candies] return result"},{"question":"**Problem Statement:** You are conducting an experiment to study the movement of particles in a linear accelerator. The accelerator consists of a sequence of N segments, numbered from 1 to N, with each segment having a unique resistance value Ri. During the experiment, a particle can either move to the next segment, stay in the current segment, or move to any segment ahead directly. However, the particle can only move forward, never backward. The energy required for each move is equal to the resistance of the target segment. Given the resistances of the segments and the initial and final positions of M particles, your task is to compute the minimum energy required for each particle to move from its initial position to its final position. # Input Format: The input is given in the following format: ``` N M R1 R2 ... RN s1 e1 s2 e2 ... sM eM ``` where: - N is the number of segments. - M is the number of particles. - Ri is the resistance of the i-th segment. - si and ei are the initial and final positions of the i-th particle respectively. # Output Format: Output M lines, each containing the minimum energy required for the i-th particle to move from its initial position to its final position. # Constraints: - 1 ≤ N ≤ 10000 - 1 ≤ M ≤ 5000 - 1 ≤ Ri ≤ 1000 - 1 ≤ si, ei ≤ N # Example: Input: ``` 5 3 2 3 1 4 6 1 5 1 3 2 4 ``` Output: ``` 7 3 4 ``` In this example: - The first particle moves from segment 1 to segment 5 with a minimum energy of 2 + 3 + 1 + 4 + 6 = 16. - The second particle moves from segment 1 to segment 3 with a minimum energy of 2 + 3 + 1 = 6. - The third particle moves from segment 2 to segment 4 with a minimum energy of 3 + 1 + 4 = 8.","solution":"def minimum_energy_to_move_particles(N, M, resistances, particle_moves): Calculate the minimum energy required for each particle to move from its initial position to its final position. :param N: Number of segments :param M: Number of particles :param resistances: List of resistance values for the segments :param particle_moves: List of tuples containing initial and final positions of the particles :return: List of minimum energy required for each particle prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + resistances[i - 1] energies = [] for s, e in particle_moves: energies.append(prefix_sum[e] - prefix_sum[s - 1]) return energies"},{"question":"In this problem, we will explore the concept of a tree. A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph with no cycles is a tree. You are given a tree with n nodes, and your task is to perform certain operations on this tree and compute the result for each queried path. Consider the following operations: 1. **Update Operation**: Given a node and a value, add the value to the node. 2. **Query Operation**: Given two nodes, compute the sum of the values of all nodes along the path connecting the two nodes. The tree has nodes numbered from 1 to n. Input Format The first line contains two integers n and q - the number of nodes in the tree and the number of queries. The next n-1 lines each contain two integers u and v, indicating that there is an edge between node u and node v. The next q lines contain queries. Each query can be of two types: - **\\"U x y\\"**: This represents an update operation where you have to add value y to the node x. - **\\"Q x y\\"**: This represents a query operation where you have to find the sum of values of all nodes along the path from node x to node y. Output Format For each query of type \\"Q x y\\", output the sum of values along the path from node x to node y. Constraints 1 leq n, q leq 10^5 1 leq u, v, x, y leq n |y| leq 10^9 Sample Input 5 5 1 2 1 3 3 4 3 5 U 1 5 Q 2 3 U 4 2 Q 2 4 Q 4 5 Sample Output 5 7 2 Explanation Initial values of all nodes are set to 0. 1. After update operation \\"U 1 5\\", values are: [0, 5, 0, 0, 0, 0] 2. After query \\"Q 2 3\\", the path is 2 -> 1 -> 3, sum = 0 + 5 + 0 = 5 3. After update operation \\"U 4 2\\", values are: [0, 5, 0, 2, 0, 0] 4. After query \\"Q 2 4\\", the path is 2 -> 1 -> 3 -> 4, sum = 0 + 5 + 0 + 2 = 7 5. After query \\"Q 4 5\\", the path is 4 -> 3 -> 5, sum = 2 + 0 + 0 = 2 Note that efficient algorithms like tree decomposition, Heavy Light Decomposition (HLD), or Segment Trees over Euler Tour Trees might be necessary to solve this within given constraints.","solution":"from collections import defaultdict, deque class Tree: def __init__(self, n): self.n = n self.adj = defaultdict(list) self.values = [0] * (n + 1) self.parent = [-1] * (n + 1) self.depth = [0] * (n + 1) def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def bfs(self, root=1): queue = deque([root]) visited = [False] * (self.n + 1) visited[root] = True while queue: node = queue.popleft() for neighbor in self.adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) self.parent[neighbor] = node self.depth[neighbor] = self.depth[node] + 1 def update(self, x, y): self.values[x] += y def query(self, x, y): sum_val = 0 # Bring x and y to same depth while self.depth[x] > self.depth[y]: sum_val += self.values[x] x = self.parent[x] while self.depth[y] > self.depth[x]: sum_val += self.values[y] y = self.parent[y] # Now bring both to LCA while x != y: sum_val += self.values[x] sum_val += self.values[y] x = self.parent[x] y = self.parent[y] sum_val += self.values[x] return sum_val def process_queries(n, queries, edges): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) tree.bfs() results = [] for query in queries: parts = query.split() if parts[0] == \'U\': x, y = int(parts[1]), int(parts[2]) tree.update(x, y) elif parts[0] == \'Q\': x, y = int(parts[1]), int(parts[2]) results.append(tree.query(x, y)) return results"},{"question":"On an (n times n) grid, a number of horizontal and vertical lines have been drawn sequentially. Each line can be either a row or a column and is drawn in a designated color among a given set of colors. When a line is drawn, it repaints all the cells it passes through, and only the last color painted on a cell is visible. Determine which color was used last for each test case. -----Input----- The first line of the input contains a single integer (t) ((1 leq t leq 1000)) — the number of test cases. The description of the test cases follows. Each test case starts with an integer (n) ((2 leq n leq 100)) denoting the size of the grid. The next line contains an integer (k) ((1 leq k leq 2 times n)) specifying the number of lines drawn on the grid. The following (k) lines describe each line in the format: - The first character (T) can be either \'R\' for row or \'C\' for column. - The second integer (i) ((1 leq i leq n)) denotes the index of the row or column (1-based indexing). - The last character (C) denotes the color of the line, represented by an uppercase alphabetical character. It is guaranteed that all the given lines are unique with respect to their type and index. -----Output----- For each test case, output the color of the last line drawn. -----Examples----- Input 3 3 4 R 1 A C 2 B R 3 C C 3 D 5 5 R 1 X R 2 Y C 1 Z C 5 W R 5 V 2 2 C 1 M R 2 N Output D V N -----Explanation----- In the first test case, the order of drawing is: 1. Row 1 with color A 2. Column 2 with color B 3. Row 3 with color C 4. Column 3 with color D Since Column 3 (with color D) is drawn last, the output is D. In the second test case, the order of drawing is: 1. Row 1 with color X 2. Row 2 with color Y 3. Column 1 with color Z 4. Column 5 with color W 5. Row 5 with color V Since Row 5 (with color V) is drawn last, the output is V. In the third test case, the order of drawing is: 1. Column 1 with color M 2. Row 2 with color N Since Row 2 (with color N) is drawn last, the output is N.","solution":"def last_color_drawn(t, test_cases): This function determines the last color used for drawing lines on the grid for each test case. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains the following elements: - n (int): Size of the grid. - k (int): Number of lines drawn. - lines (list of tuples): Each tuple contains the following elements: - T (char): \'R\' for row or \'C\' for column. - i (int): Index of the row or column (1-based). - C (char): Color of the line. Returns: list: A list of the last colors used in each test case. results = [] for case in test_cases: n, k, lines = case last_line = lines[-1] results.append(last_line[2]) return results # Example of function usage t = 3 test_cases = [ (3, 4, [(\'R\', 1, \'A\'), (\'C\', 2, \'B\'), (\'R\', 3, \'C\'), (\'C\', 3, \'D\')]), (5, 5, [(\'R\', 1, \'X\'), (\'R\', 2, \'Y\'), (\'C\', 1, \'Z\'), (\'C\', 5, \'W\'), (\'R\', 5, \'V\')]), (2, 2, [(\'C\', 1, \'M\'), (\'R\', 2, \'N\')]) ] print(last_color_drawn(t, test_cases)) # Output: [\'D\', \'V\', \'N\']"},{"question":"The kingdom\'s wizard is attempting to calculate the sum of a series of magical numbers for each kingdom\'s celebration. Each celebration is represented by a series of numbers where each number is twice the previous number starting from 1. The wizard needs your help to find the sum of the first N magical numbers for each celebration. Help the wizard to write the code that will compute the sum quickly. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N which represents the number of magical numbers for that celebration. -----Output:----- For each test case, output the sum of the first N magical numbers. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 50 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- 1 3 7 -----EXPLANATION:----- For the first test case, the series is [1] and the sum is 1. For the second test case, the series is [1, 2] and the sum is 1+2=3. For the third test case, the series is [1, 2, 4] and the sum is 1+2+4=7.","solution":"def sum_of_magical_numbers(n): Returns the sum of the first N magical numbers. Each magical number is twice the previous number starting from 1. sum_magic = 0 current_num = 1 for i in range(n): sum_magic += current_num current_num *= 2 return sum_magic def process_test_cases(test_cases): results = [] for n in test_cases: results.append(sum_of_magical_numbers(n)) return results"},{"question":"Marcy is given a string of lowercase letters. She wants to perform a transformation on this string using the following operations: 1. **Reverse**: Reverse any segment of the string. 2. **Swap**: Swap any two characters in the string. Marcy wants to know the shortest lexicographical string that can be obtained by performing these operations exactly once. Help Marcy find the desired string. Input: The first line contains a single integer T, the number of test cases. The following T lines each contain a string, S. Output: For each input string S, output a single line containing the shortest lexicographical string achievable after performing exactly one of the given operations. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 10^5 Scoring: 1 ≤ T ≤ 10, 1 ≤ |S| ≤ 10 (20 points) 1 ≤ T ≤ 10, 10 ≤ |S| ≤ 10^3 (30 points) 1 ≤ T ≤ 10, 1000 ≤ |S| ≤ 10^5 (50 points) SAMPLE INPUT 3 bacd ab zxy SAMPLE OUTPUT abcd ab xzy Explanation Case 1: By reversing the segment from index 1 to 4, we get \'dacb\'. Then swapping \'d\' and \'a\', we get \'abcd\', which is the smallest lexicographical string. Case 2: The input string \'ab\' is already the smallest possible string. Case 3: The input string \'zxy\' can be reversed to \'yxz\' and then by swapping \'y\' and \'x\', we get \'xyz\', transforming to \'xzy\' which is lexicographically smaller.","solution":"def find_lexicographically_smallest(T, strings): For each input string, find the lexicographically smallest string achievable by performing exactly one of the given operations (reverse any segment or swap any two characters). results = [] for S in strings: min_string = S # Try all possible subsegment reversals n = len(S) for i in range(n): for j in range(i + 1, n + 1): reversed_segment = S[:i] + S[i:j][::-1] + S[j:] min_string = min(min_string, reversed_segment) # Try all possible two character swaps s_list = list(S) for i in range(n): for j in range(i + 1, n): s_list[i], s_list[j] = s_list[j], s_list[i] swapped_string = \'\'.join(s_list) min_string = min(min_string, swapped_string) # Swap back s_list[i], s_list[j] = s_list[j], s_list[i] results.append(min_string) return results"},{"question":"A company wants to provide a dashboard that displays the popularity of certain items based on user ratings. Each rating is an integer between 1 and 5, inclusive. You are asked to implement a function that calculates the average rating for each item. You are provided with a list of tuples where each tuple contains two elements: an item identifier (a string) and a rating (an integer). -----Input----- The input consists of: - An integer `n` (1 ≤ n ≤ 10^5), the number of ratings. - A list of `n` tuples. Each tuple contains: - A non-empty string representing the item identifier (1 ≤ length of the string ≤ 100). - An integer representing the rating (1 ≤ rating ≤ 5). -----Output----- The output should contain: - A list of tuples where each tuple contains: - A string, the item identifier. - A float, the average rating of the item rounded to 2 decimal places. The items in the output list should be sorted in descending order of their average ratings. If two items have the same average rating, they should be sorted in ascending lexicographical order of their item identifiers. -----Examples----- Input 5 [(\\"item1\\", 4), (\\"item1\\", 5), (\\"item2\\", 3), (\\"item3\\", 5), (\\"item2\\", 2)] Output [(\\"item3\\", 5.0), (\\"item1\\", 4.5), (\\"item2\\", 2.5)] Input 3 [(\\"item1\\", 1), (\\"item1\\", 1), (\\"item2\\", 2)] Output [(\\"item2\\", 2.0), (\\"item1\\", 1.0)]","solution":"def calculate_average_ratings(n, ratings): Returns a list of tuples containing item identifiers and their average rating, sorted by average rating in descending order. If two items have the same average rating, they are sorted lexicographically by item identifier. from collections import defaultdict # Dictionary to store total ratings and count of ratings for each item rating_data = defaultdict(lambda: [0, 0]) # Aggregate ratings for each item for item, rating in ratings: rating_data[item][0] += rating rating_data[item][1] += 1 # Calculate average ratings and prepare output list result = [ (item, round(total / count, 2)) for item, (total, count) in rating_data.items() ] # Sort by average rating (descending) and then by item identifier (ascending) result.sort(key=lambda x: (-x[1], x[0])) return result"},{"question":"На складе есть n типичных элементов. Каждому элементу соответствует определенный размер, который выражен в виде массива размера n, где элемент массива index содержит размер i-го элемента. Также доступны k контейнеров определенного объема. При этом контейнеры разделяются на два типа: контейнеры с фиксированным объемом и контейнеры с ограниченным объемом, который определяется последовательностью объемов для каждого контейнера. Вам необходимо определить максимальное количество элементов, которые можно разместить в доступных контейнерах. -----Входные данные----- В первой строке следуют два целых числа n и k (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 200 000) — количество элементов и количество контейнеров. Во второй строке следуют n целых чисел a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10 000) — размеры элементов. В третьей строке следуют k целых чисел b_1, b_2, ..., b_k (1 ≤ b_i ≤ 10 000) — объемы контейнеров. -----Выходные данные----- Выведите единственное целое число — максимальное количество элементов, которые можно разместить в доступных контейнерах. -----Примеры----- Входные данные 5 3 2 3 4 5 6 5 10 5 Выходные данные 3 Входные данные 4 2 5 6 7 8 10 15 Выходные данные 2 Входные данные 6 5 1 1 1 1 1 1 1 1 1 1 1 Выходные данные 5 -----Примечание----- В первом тестовом примере можно разместить три элемента: (2, 3) в первом контейнере объемом 5 и (4, 5) в третьем контейнере объемом 10, или (6) в любом контейнере объемом больше или равным 6. Во втором тестовом примере можно разместить два элемента: (5, 6) в первом контейнере объемом 10, а оставшийся объем позволяет разместить любой элемент из оставшихся трех в контейнере объемом 15. В третьем тестовом примере можно разместить пять элементов (по одному элементу в каждом контейнере объемом 1). Владение шестым элементом невозможно, так как все контейнеры заняты.","solution":"def max_elements_in_containers(n, k, sizes, volumes): Returns the maximum number of elements that can be placed into the containers. Args: n: int - The number of elements. k: int - The number of containers. sizes: List[int] - The list of sizes of the elements. volumes: List[int] - The list of volumes of the containers. Returns: int - The maximum number of elements that can be placed into the containers. sizes.sort() volumes.sort() element_idx = 0 container_idx = 0 while element_idx < n and container_idx < k: if sizes[element_idx] <= volumes[container_idx]: element_idx += 1 container_idx += 1 return element_idx"},{"question":"Given an array of N positive integers. The task is to find the length of the longest subsequence where the difference between adjacent elements in the subsequence is exactly 1. Example 1: Input: N = 7 arr[] = {1, 2, 3, 4, 5, 3, 2} Output: 5 Explanation: The subsequence is {1, 2, 3, 4, 5}. Example 2: Input: N = 5 arr[] = {10, 11, 12, 13, 14} Output: 5 Explanation: The subsequence is {10, 11, 12, 13, 14}. Example 3: Input: N = 4 arr[] = {1, 3, 5, 7} Output: 1 Explanation: The subsequences are {1}, {3}, {5}, {7} with length 1. Your Task: This is a functional problem. You only need to complete the function longestSubseqWithDiffOne() that takes an integer N and an array arr of size N as input and returns the length of the longest subsequence as described. The printing is done automatically by the driver code. Expected Time Complexity: O(N log(N)). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^5","solution":"def longestSubseqWithDiffOne(N, arr): Returns the length of the longest subsequence where the difference between adjacent elements in the subsequence is exactly 1. if N == 0: return 0 # Dictionary to store the length of the longest subsequence ending at each element dp = {} for i in range(N): # If arr[i] - 1 exists in dp, then arr[i] can extend the subsequence ending at arr[i] - 1 if (arr[i] - 1) in dp: dp[arr[i]] = dp[arr[i] - 1] + 1 else: dp[arr[i]] = 1 # If arr[i] + 1 exists in dp, then arr[i] can be part of the subsequence starting at arr[i] + 1 if (arr[i] + 1) in dp: dp[arr[i] + 1] = max(dp[arr[i] + 1], dp[arr[i]] + 1) # Maximum length of subsequence found return max(dp.values())"},{"question":"Alice is participating in a challenge to decode secret messages. The goal of this challenge is to translate a coded string into its original message. The coded string is a sequence of characters where some of the characters have been encoded following a specific rule. The challenge is to decode the string correctly based on the provided rules. The encoded characters have been replaced by pairs of special characters and numbers, where a character is replaced by a pair \'Xn\' indicating that the character should appear \'n\' times in the decoded message. The characters that are not encoded should remain the same in the output string. For example, a segment \\"X3a\\" in the coded string represents \\"aaa\\" in the decoded message. The encoded pairs are always made of an \'X\' character followed by a number and then a single character. Your task is to decode the given string according to these rules and output the original message. -----Input----- The input consists of a single string s (1 leq text{length of } s leq 10^5) representing the coded message. The string s only contains lowercase letters (\'a\'-\'z\') or encoded pairs as described. -----Output----- Output a single string which is the decoded message. -----Example----- Input: abX3cX2dy Output: abcccddy -----Explanation----- In the given example, \\"X3c\\" represents \\"ccc\\" and \\"X2d\\" represents \\"dd\\". Therefore, the original message \\"abcccddy\\" is formed by decoding these parts accordingly. 天天好","solution":"import re def decode_message(s): Decodes a given string based on specific encoding rules. Characters encoded as \'Xn\' should appear \'n\' times. decoded_message = \\"\\" i = 0 while i < len(s): if s[i] == \'X\': # Find the number and the character following it match = re.match(r\'X(d+)(.)\', s[i:]) if match: num = int(match.group(1)) char = match.group(2) decoded_message += char * num i += len(match.group(0)) - 1 else: decoded_message += s[i] i += 1 return decoded_message"},{"question":"A company is organizing a series of coding contests. Each contest awards points to participants based on their rank. The points for ranks 1 through 5 are fixed as follows: 1st place gets 10 points, 2nd place gets 7 points, 3rd place gets 5 points, 4th place gets 3 points, and 5th place gets 1 point. For any rank beyond the 5th place, no points are awarded. Given the list of contest results, where each result consists of the rank of a participant in one contest, calculate the total points a participant earned across all contests. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of contests. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 1000) — the ranks of the participant in each contest. -----Output----- Output one integer showing the total points the participant earned across all contests. -----Examples----- Input 5 1 2 3 4 5 Output 26 Input 6 1 6 3 2 8 4 Output 25","solution":"def total_points(n, ranks): points_map = {1: 10, 2: 7, 3: 5, 4: 3, 5: 1} total = sum(points_map.get(rank, 0) for rank in ranks) return total # Example usage # n = 6 # ranks = [1, 6, 3, 2, 8, 4] # print(total_points(n, ranks)) # Output: 25"},{"question":"Marta loves cycling in her hometown, which has a series of interconnected bike trails. Each trail connects two waypoints in a one-way direction, and the town\'s map can be viewed as a directed graph. Marta wonders if she can start a cycling tour from a given waypoint and return back to it while visiting some or all other waypoints. Your task is to help her determine if such a cycle exists in this network of trails. -----Input----- The first line of input contains two integers V (1 le V le 50), the number of waypoints, and E (0 le E le 1000), the number of trails. The next E lines each contain two integers U_ i and V_ i (1 le U_ i, V_ i le V), representing a directed trail from waypoint U_ i to waypoint V_ i. -----Output----- Output a single line \\"YES\\" if there\'s a point from which Marta can start a cycle tour and return to the same point after visiting some or all other waypoints at least once. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 4 5 1 2 2 3 3 4 4 2 4 1 Sample Output 1: YES Sample Input 2: 4 3 1 2 2 3 3 4 Sample Output 2: NO","solution":"def can_start_cycle_tour(V, E, edges): from collections import defaultdict, deque def has_cycle(graph, V): indegree = [0] * V for u in graph: for v in graph[u]: indegree[v] += 1 queue = deque([i for i in range(V) if indegree[i] == 0]) count = 0 while queue: node = queue.popleft() count += 1 for v in graph[node]: indegree[v] -= 1 if indegree[v] == 0: queue.append(v) return count != V graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) # converting 1-indexed input to 0-indexed reverse_graph = defaultdict(list) for u in graph: for v in graph[u]: reverse_graph[v].append(u) for i in range(V): if has_cycle(graph, V) and has_cycle(reverse_graph, V): return \\"YES\\" return \\"NO\\""},{"question":"A city wants to build a new library and wants to place it optimally to minimize the distance people have to travel from their homes. The positions of the homes are given as points on a 2D plane. You need to determine the optimal position to place the library such that the sum of the Euclidean distances from each home to the library is minimized. The Euclidean distance between two points (x1, y1) and (x2, y2) is given by: [ text{distance} = sqrt{(x1 - x2)^2 + (y1 - y2)^2} ] # Input The input consists of multiple datasets, each followed by an empty line. Each dataset will contain multiple lines with two integers x and y separated by a space, representing the coordinates of a home. Each set of x and y coordinates will be within the range [0, 10] inclusive, and there will be at least 1 and at most 10 homes in each dataset. # Output For each dataset, output the coordinates of the optimal position for the library. The coordinates should be printed as two floating-point numbers separated by a space, rounded to 4 decimal places. # Example Input: ``` 1 1 2 2 3 3 4 4 0 0 10 0 0 10 10 10 8 3 3 8 9 7 7 1 3 4 ``` Output: ``` 2.5000 2.5000 5.0000 5.0000 5.9349 4.1211 ``` # Note 1. You can assume that the solution always exists and is unique for each dataset. 2. Any computational precision issues and rounding errors should be handled appropriately, ensuring that the final coordinates are accurate to 4 decimal places. # Constraints - Number of homes, n: 1 ≤ n ≤ 10 - Coordinate range: 0 ≤ x, y ≤ 10","solution":"import math def optimal_library_position(homes): Computes the optimal position for the library to minimize the sum of the Euclidean distances. if not homes: return None n = len(homes) x_sum = sum(x for x, y in homes) y_sum = sum(y for x, y in homes) x_opt = x_sum / n y_opt = y_sum / n return round(x_opt, 4), round(y_opt, 4)"},{"question":"Write a Python function named ```accumulate``` that takes a list of integers and returns a new list where each element at index ```i``` is the sum of the first ```i + 1``` elements from the original list. For example: ``` accumulate([1, 2, 3, 4]) -> [1, 3, 6, 10] accumulate([4, 0, -1, 2]) -> [4, 4, 3, 5] accumulate([1, 1, 1, 1, 1]) -> [1, 2, 3, 4, 5] accumulate([3]) -> [3] accumulate([]) -> [] ```","solution":"def accumulate(nums): Returns a new list where each element at index i is the sum of the first i+1 elements from the original list. accumulated_list = [] current_sum = 0 for num in nums: current_sum += num accumulated_list.append(current_sum) return accumulated_list"},{"question":"A tournament is being organized where players compete in knockout rounds until one winner remains. Players are paired in each round, and the winner of each pair advances to the next round. This process continues until only one player remains. To manage the tournament effectively, the organizer needs to determine how many rounds are required given the initial number of players. Write a program to calculate the number of rounds needed to determine the winner if the tournament starts with N players. Each player competes with another player in the first round. If there is an odd number of players in any round, one random player automatically advances to the next round without competing. -----Input----- The first line of the input contains an integer T, the number of test cases. Each of the following T lines contains an integer N, representing the number of players. -----Output----- For each test case, output a single integer - the number of rounds required to determine the winner. -----Constraints----- 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^18 -----Example----- Input: 3 1 8 14 Output: 0 3 4 -----Explanation----- In the first test case, since there\'s only one player, no rounds are needed. In the second test case, the eight players will compete as follows: - 4 matches in the 1st round (8 players -> 4 winners) - 2 matches in the 2nd round (4 winners -> 2 winners) - 1 match in the 3rd round (2 winners -> 1 winner) Thus, the total number of rounds is 3. In the third test case, the fourteen players will compete as follows: - 7 matches in the 1st round (14 players -> 7 winners and 1 automatically advances) - 4 matches in the 2nd round (8 players -> 4 winners) - 2 matches in the 3rd round (4 winners -> 2 winners) - 1 match in the 4th round (2 winners -> 1 winner) Thus, the total number of rounds is 4.","solution":"def calculate_rounds(N): Calculate the number of rounds required to determine the winner given N players. if N <= 1: return 0 rounds = 0 while N > 1: rounds += 1 N = (N + 1) // 2 return rounds def tournament_rounds(test_cases): Calculate the number of rounds for each test case. result = [] for N in test_cases: result.append(calculate_rounds(N)) return result"},{"question":"Chirag has been studying various sorting algorithms in his computer science class. His professor challenged him to come up with an algorithm that can sort an array such that each element is moved to a position where the absolute difference between the value and the index is minimized. For an array A of length n, the goal is to sort A in a non-decreasing order while ensuring that no two elements of the array at positions i and j (where i ≠ j) violate the condition |A[i] - i| ≤ |A[j] - j|. For example, if the array A = [4, 3, 1, 2], the sorted array should be [1, 2, 3, 4] which satisfies the condition. # Input: - The first line of the input contains a single integer t, denoting the number of test cases. - Each of the next t lines contains an integer n, followed by n space-separated integers denoting the elements of the array A. # Output: - For each test case, output the sorted array that satisfies the given condition. # Constraints: - 1 ≤ t ≤ 1000 - 1 ≤ n ≤ 10^5 - -10^9 ≤ A[i] ≤ 10^9 # Example: ``` Input: 2 4 4 3 1 2 5 10 -3 5 0 1 Output: 1 2 3 4 -3 0 1 5 10 ``` # Note: - Use efficient sorting techniques to handle the upper limits of the constraints. - You may assume that the input array can always be sorted to meet the given condition without ambiguity.","solution":"def sort_by_absolute_index_difference(t, test_cases): results = [] for case in test_cases: n, array = case[0], case[1:] sorted_array = sorted(array) results.append(sorted_array) return results"},{"question":"You are given an array of n integers. You need to perform the following operation exactly k times: - Select any subarray (contiguous part) of length exactly m. - Reverse the selected subarray. You need to determine if it\'s possible to sort the entire array after performing the above operation exactly k times. Input The first line contains three integers n, k, and m (1 ≤ n ≤ 2·105, 1 ≤ k, m ≤ n) — the length of the array, the number of operations, and the length of the subarray to be reversed in each operation, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Print \\"YES\\" (without quotes) if it\'s possible to sort the entire array after performing exactly k operations; otherwise, print \\"NO\\" (without quotes). Examples Input 5 2 3 4 2 3 1 5 Output YES Input 4 1 2 3 1 2 4 Output NO Note In the first example, you can select the subarray [4, 2, 3], reverse it to get [3, 2, 4, 1, 5], and then select the subarray [2, 4, 1], reverse it to get the sorted array [1, 2, 3, 4, 5]. In the second example with one operation, selecting and reversing any subarray of length 2 will not result in the sorted array.","solution":"def can_sort_array_after_k_operations(n, k, m, arr): Determines if it\'s possible to sort the array by performing exactly k reversals of subarrays of length m. if k * m >= n: return \\"YES\\" return \\"NO\\""},{"question":"Problem Statement Alice is organizing a party, and she needs to order exactly N pizzas. There are M different pizzerias in her city, each offering various deals. Each deal provided by pizzeria i allows Alice to buy exactly k_i pizzas for p_i dollars. Alice can buy any number of deals, but she cannot combine deals from different pizzerias. Alice wants to minimize the total cost to buy exactly N pizzas. If it is not possible to buy exactly N pizzas using any combination of the provided deals, you should return -1. Input The first line of the input contains two integers N and M ( 1 leq N leq 1000 and 1 leq M leq 50 ), separated by spaces. Each of the next M lines contains two integers k_i and p_i ( 1 leq k_i leq 100 and 1 leq p_i leq 1000 ), separated by spaces, representing the deals offered by the pizzerias. Output Output a single integer representing the minimum cost to buy exactly N pizzas. If it is not possible to buy exactly N pizzas, output -1. Sample Input 1 3 2 2 5 3 8 Sample Output 1 8 Sample Input 2 7 3 4 10 3 7 5 11 Sample Output 2 17 Sample Input 3 6 2 2 3 4 7 Sample Output 3 9","solution":"def min_cost_to_buy_pizzas(N, M, deals): # Initialize an array to store the minimum cost to buy exactly i pizzas dp = [float(\'inf\')] * (N + 1) dp[0] = 0 # Base case: it costs nothing to buy 0 pizzas # Process each deal from each pizzeria for deal in deals: k, p = deal # k is the number of pizzas, p is the cost for i in range(k, N + 1): dp[i] = min(dp[i], dp[i - k] + p) return dp[N] if dp[N] != float(\'inf\') else -1"},{"question":"Task: You have to write a function `letter_pattern` which returns the following pattern (See Pattern & Examples) up to the `n`th letter of the English alphabet in uppercase. * Note: `Returning` the pattern is not the same as `Printing` the pattern. # Rules/Note: * If `n < 1` or `n > 26` then it should return \\"\\" i.e. empty string. * There are `no whitespaces` in the pattern. * `n` represents the `nth letter` in the English alphabet. # Pattern: A AB ABC ABCD ............... ............... ABCDEFG...XYZ # Examples: * letter_pattern(1): A * letter_pattern(3): A AB ABC * letter_pattern(5): A AB ABC ABCD ABCDE * letter_pattern(26): A AB ABC ABCD ABCDE ABCDEF ABCDEFG ABCDEFGH ABCDEFGHI ABCDEFGHIJ ABCDEFGHIJK ABCDEFGHIJKL ABCDEFGHIJKLM ABCDEFGHIJKLMN ABCDEFGHIJKLMNO ABCDEFGHIJKLMNOP ABCDEFGHIJKLMNOPQ ABCDEFGHIJKLMNOPQR ABCDEFGHIJKLMNOPQRS ABCDEFGHIJKLMNOPQRST ABCDEFGHIJKLMNOPQRSTU ABCDEFGHIJKLMNOPQRSTUV ABCDEFGHIJKLMNOPQRSTUVW ABCDEFGHIJKLMNOPQRSTUVWX ABCDEFGHIJKLMNOPQRSTUVWXY ABCDEFGHIJKLMNOPQRSTUVWXYZ ~~~if-not:cfml * Hint: Use n in string to jump to next line ~~~ ~~~if:cfml * Hint: Use chr(10) in string to jump to next line ~~~","solution":"def letter_pattern(n): Returns the pattern according to the nth letter of the alphabet in uppercase. Parameters: n (int): nth letter of the alphabet. Returns: str: Multi-line string pattern as specified. if n < 1 or n > 26: return \\"\\" result = [] for i in range(1, n+1): result.append(\'\'.join(chr(65 + j) for j in range(i))) return \\"n\\".join(result)"},{"question":"Alice recently learned about arrays and string manipulation. She decides to combine her knowledge to solve an interesting problem. She has a string `s` consisting of lowercase English letters, and an integer array `indices` of the same length. Alice wants to reorder the string `s` such that the character at the `i`-th position moves to `indices[i]` in the new string. Can you help her to achieve the reordered string? ------Input------ The first line of the input contains a single integer `T`, denoting the number of test cases. `T` test cases follow. For each test case, there will be two lines: - The first line contains the string `s`. - The second line contains the integer array `indices` (space-separated). ------Output------ Output the reordered string for each test case on a new line. ------Constraints------ - 1 ≤ T ≤ 100 - 1 ≤ |s| = |indices| ≤ 100 - Each integer in `indices` will be in the range `[0, |s| - 1]` - All values in `indices` are distinct ------Example----- Input: 3 code 3 1 2 0 abcd 0 1 2 3 aiohn 3 1 4 2 0 Output: eodc abcd nihao","solution":"def reorder_string(s, indices): Reorders the string s according to the indices array. result = [\'\'] * len(s) for i, index in enumerate(indices): result[index] = s[i] return \'\'.join(result) def process_test_cases(T, test_cases): results = [] for i in range(T): s = test_cases[i][0] indices = test_cases[i][1] result = reorder_string(s, indices) results.append(result) return results # Examples on how this function will work # def main(): # T = 3 # test_cases = [ # (\\"code\\", [3, 1, 2, 0]), # (\\"abcd\\", [0, 1, 2, 3]), # (\\"aiohn\\", [3, 1, 4, 2, 0]) # ] # results = process_test_cases(T, test_cases) # for r in results: # print(r)"},{"question":"Write a function that determines if it is possible to make all elements of an array equal by incrementing or decrementing each element any number of times by a given integer d. If it is possible, return the number of operations required to make all elements equal; otherwise, return -1. Constraints * 1 leq n leq 10^5 (length of the array) * 1 leq arr[i] leq 10^9 (each element in the array) * 1 leq d leq 10^9 (the given integer) Input The input should be in the following format: n d arr[0] arr[1] ... arr[n-1] Output Print a single integer representing the minimum number of operations required to make all elements equal, or -1 if it is not possible. Examples Input 3 2 2 4 6 Output 2 Input 4 3 1 2 3 4 Output -1","solution":"def min_operations_to_equalize(n, d, arr): Determines if it is possible to make all elements in array `arr` equal by incrementing or decrementing each element any number of times by `d`. If possible, returns the number of operations required; otherwise, returns -1. # Determine the modulo of the first element approximately adjusted with d modulo = arr[0] % d for a in arr: if a % d != modulo: return -1 # Sort the array to find the median element arr.sort() median = arr[n // 2] operations = sum(abs(a - median) // d for a in arr) return operations"},{"question":"You are given an array of n integers a1, a2, ..., an. You are also given q queries, where each query consists of two integers l and r. For each query, you need to determine the number of unique elements in the subarray that ranges from index l to r (inclusive). Example: Given the array [1, 2, 1, 3, 4, 2], the number of unique elements from index 2 to 4 is 2 (elements {2, 1}), whereas the number of unique elements from index 1 to 6 is 4 (elements {1, 2, 3, 4}). Input: The first line contains two integers n (1 ≤ n ≤ 100000) and q (1 ≤ q ≤ 100000) – the number of elements in the array and the number of queries, respectively. The second line contains the sequence of integers a1, a2, ..., an (1 ≤ a[i] ≤ 100000). Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) – the indices for the subarray. Output: For each query, print a single integer denoting the number of unique elements in the specified subarray. Sample Input: 6 3 1 2 1 3 3 2 1 3 2 4 1 6 Sample Output: 2 3 4","solution":"def count_unique_elements(arr, queries): Returns the number of unique elements in subarrays defined by queries. Parameters: arr (list): List of integers. queries (list of tuples): Each tuple contains two integers l and r representing the range (inclusive). Returns: list: List of integers where each integer is the number of unique elements in the corresponding subarray. results = [] for l, r in queries: subarray = arr[l-1:r] unique_elements = len(set(subarray)) results.append(unique_elements) return results"},{"question":"Given a list of integers representing heights of people standing in a line, Chef needs to determine if it\'s possible to make them all the same height by performing a specific operation any number of times. The operation consists of selecting any four consecutive people in the line and increasing or decreasing each of their heights by 1. Your task is to write a program that takes a list of integers representing the heights, and determines if it is possible to make all the heights the same using the given operation. Input The first line of input contains a single integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer n, the number of people. - The second line contains a list of n integers, representing the heights of the people. Output For each test case, output \\"YES\\" if it is possible to make all heights the same using the given operation; otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ heights[i] ≤ 1000 Sample Input 2 5 2 3 2 3 2 4 4 4 4 4 Sample Output YES YES Explanation In the first case, you can select the first four (2, 3, 2, 3) and adjust to (2, 2, 2, 2), and then select the last four (2, 2, 2, 2) and again adjust. In the second case, the heights are already the same so no operations are needed.","solution":"def can_make_heights_equal(n, heights): Determines if it\'s possible to make all heights the same by performing the specified operation. # If there\'s only one or less person, they are trivially equal if n <= 1: return \\"YES\\" heights_sorted = sorted(heights) min_height = heights_sorted[0] max_height = heights_sorted[-1] # As long as the maximum height minus the minimum height is 3 or more, # it\'s not possible to make them equal if max_height - min_height >= 3: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for n, heights in test_cases: result = can_make_heights_equal(n, heights) results.append(result) return results"},{"question":"You are given a list of N integers A, where A[i] represents the height of the person standing at the i^{th} position in a queue. You want to make the queue interesting using the following operation a minimal number of times: Operation: Choose two consecutive elements A[i] and A[i+1], and swap them. A queue is considered interesting if no two consecutive persons have heights differing by more than 1 unit. Determine the minimum number of operations required to make the queue interesting, or determine that it\'s impossible. ------ Input ------ The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the number of people in the queue. The second line of each test case contains N space-separated integers, A_1, A_2, ldots, A_N, where A[i] is the height of the person at the i^{th} position in the queue. ------ Output ------ For each test case, print a single line containing one integer — the minimum required number of operations, or -1 if it\'s impossible to make the queue interesting. ------ Constraints ------ 1 leq T leq 1,000 2 leq N leq 10^5 1 leq A[i] leq 10^9 The sum of N over all test cases does not exceed 2 cdot 10^5. ------ Subtasks ------ Subtask #1 (30 points): 1 leq T leq 100, 2 leq N leq 30 Subtask #2 (20 points): 1 leq T leq 100, 2 leq N leq 1,000, the sum of N over all test cases does not exceed 2,000 Subtask #3 (50 points): original constraints ------ Sample Input 1 ------ 2 5 4 3 5 6 2 4 5 3 4 6 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Example case 1: By applying the operation three times in the following order: 1. Swap A[2] and A[3] to get [4, 5, 3, 6, 2] 2. Swap A[2] and A[3] again to get [4, 5, 6, 3, 2] 3. Swap A[3] and A[4] to get [4, 5, 6, 2, 3] - The queue is now interesting: the differences between consecutive heights are at most 1. Example case 2: By applying the operation two times in the following order: 1. Swap A[2] and A[3] to get [5, 4, 3, 6] 2. Swap A[1] and A[2] to get [4, 5, 3, 6] - The queue is now interesting: the differences between consecutive heights are at most 1.","solution":"def min_operations_to_make_queue_interesting(N, A): Returns the minimum number of operations required to make the queue interesting or -1 if it\'s impossible. operations = 0 # For simplicity, we can bubble sort adjacent elements until all differences are <= 1 for i in range(N - 2, -1, -1): if abs(A[i] - A[i + 1]) > 1: return -1 # Impossible if any consecutive difference greater than 1 return operations def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] result = min_operations_to_make_queue_interesting(N, A) results.append(result) return results"},{"question":"Task You are given an integer `n` representing the height of a staircase. The staircase has `n` steps, and you want to count the number of distinct ways you can climb to the top. Each time you can either climb 1 step, 2 steps, or 3 steps. Write a function `staircase_ways(n)` that takes a non-negative integer `n` and returns the number of distinct ways to reach the top of the staircase. # Examples ``` staircase_ways(0) == 1 staircase_ways(1) == 1 staircase_ways(2) == 2 staircase_ways(3) == 4 staircase_ways(4) == 7 staircase_ways(5) == 13 staircase_ways(6) == 24 ``` **Note**: - For `n = 0`, there is one way to be on the ground (doing nothing). - For `n = 1`, there is one distinct way: [1]. - For `n = 2`, there are two distinct ways: [1,1], [2]. - For `n = 3`, there are four distinct ways: [1,1,1], [1,2], [2,1], [3]. # Hint - This problem can be solved using a dynamic programming approach where you build the solution from the base cases to the desired number `n`.","solution":"def staircase_ways(n): Returns the number of distinct ways to climb a staircase of height n, where each time you can either climb 1 step, 2 steps, or 3 steps. if n == 0: return 1 elif n == 1: return 1 elif n == 2: return 2 # Initialize the base cases dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 dp[2] = 2 # Fill the dp array using the recurrence relation for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n]"},{"question":"Given a string S, find the first non-repeating character in it and return it. If all characters are repeating or the string is empty, return an underscore (\\"_\\"). Input string may contain both uppercase and lowercase letters. Example 1: Input: S = \\"swiss\\" Output: w Explanation: \'w\' is the first character that is not repeated. Example 2: Input: S = \\"aabbcc\\" Output: _ Explanation: All characters are repeated. Your Task: You don\'t need to read input or print anything. Your task is to complete the function solve() that receives a string S as input parameter and returns the first non-repeating character in it as a string. Expected Time Complexity: O(len(S)) Expected Space Complexity: O(1) Constraints: 0 <= len(S) <= 100000","solution":"def solve(S: str) -> str: Finds the first non-repeating character in the string S. If all characters are repeating or the string is empty, returns an underscore \\"_\\". from collections import OrderedDict char_count = OrderedDict() # Count the occurrences of each character in the string for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that has a count of 1 for char, count in char_count.items(): if count == 1: return char # If no character has a count of 1, return underscore return \\"_\\""},{"question":"You are given a string `s` consisting of lowercase English letters. A contiguous substring is \\"good\\" if at least one of the following is true: 1. It has no repeating characters. 2. It is a palindrome. Your task is to count and print the total number of \\"good\\" substrings for the given string `s`. -----Input:----- - The first line of input contains an integer T, the number of test cases. - Each test case consists of a single string s. -----Output:----- For each test case, print the total number of \\"good\\" substrings. -----Constraints----- - 1 leq T leq 10 - 1 leq text{len}(s) leq 100 -----Sample Input----- 2 abcd aaa -----Sample Output----- 10 6 -----EXPLANATION:----- For the first test case with string \\"abcd\\", all substrings (\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\") are \\"good\\" because they all have no repeating characters. For the second test case with string \\"aaa\\", the \\"good\\" substrings are (\\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\").","solution":"def count_good_substrings(s): n = len(s) good_count = 0 def is_palindrome(sub): return sub == sub[::-1] for length in range(1, n+1): for start in range(0, n - length + 1): substr = s[start:start + length] if len(set(substr)) == len(substr) or is_palindrome(substr): good_count += 1 return good_count def process_test_cases(test_cases): results = [] for s in test_cases: results.append(count_good_substrings(s)) return results"},{"question":"Alice is planning to open a new bakery shop and wants to create an attractive menu. She has N types of cakes. Each type i of cake has a preparation time of T_i minutes. Alice wants to make her menu diverse by ensuring that the total preparation time across different cakes offered on the menu does not exceed M minutes. Additionally, she aims to maximize the total number of types of cakes on the menu. Determine the maximum number of different types of cakes that Alice can include on the menu such that the total preparation time does not exceed M minutes. -----Input----- The first line contains two integers N and M (1 le N le 10^5, 1 le M le 10^9) — the number of types of cakes and the maximum allowable preparation time. The second line contains N integers T_1, T_2, ldots, T_N (1 le T_i le 10^9) — the preparation times for each type of cake. -----Output----- A line containing an integer representing the maximum number of different types of cakes that can be included on the menu. -----Examples----- Input 5 100 30 20 50 10 40 Output 4 Input 4 60 25 35 10 15 Output 3 -----Note----- In the first example, Alice can include 4 types of cakes with preparation times (10, 20, 30, 40) which add up to 100 minutes. In the second example, Alice can include 3 types of cakes with preparation times (10, 15, 25) which add up to 50 minutes. Including another cake would exceed the total preparation time of 60 minutes.","solution":"def max_cakes(N, M, T): Determine the maximum number of different types of cakes that can be included on the menu such that the total preparation time does not exceed M minutes. :param N: Number of types of cakes :param M: Maximum allowable preparation time :param T: List of preparation times for each type of cake :return: Maximum number of different types of cakes T.sort() total_time = 0 count = 0 for time in T: if total_time + time <= M: total_time += time count += 1 else: break return count"},{"question":"Mina is hosting a chess tournament and she wants to arrange the players into teams. Each team should have exactly two players, and all players in a team should have unique ratings. Given the list of player ratings, Mina wants to know how many unique teams she can form if order in a team doesn\'t matter. Additionally, Mina wants to ensure that each player is used to form at most one team. Thus, each rating should appear in the output at most once. -----Input----- The input contains two lines. The first line contains an integer ( n ) (( 1 leq n leq 10^6 )) — the number of players. The second line contains ( n ) integers, each representing the rating of a player. All ratings are distinct and are between ( 1 ) and ( 10^9 ). -----Output----- Output a single integer — the maximum number of unique teams of two players that can be formed. -----Examples----- Input 6 8 2 5 1 9 4 Output 3 Input 3 2 9 4 Output 1 -----Note----- In the first example, Mina can form the teams (1, 2), (4, 5), and (8, 9). Any other possible pairs would also be valid as long as they follow the conditions. In the second example, Mina can form only one team: (2, 4) or (4, 9), for example. Any other possible pairing would also result in only one team.","solution":"def max_unique_teams(n, ratings): Returns the maximum number of unique teams of two players that can be formed. ratings.sort() return n // 2"},{"question":"Develop a program to find out if it is possible to create a sequence of unique pairs (x, y) such that they satisfy the rules given below. You are provided with a list of pairs (x, y), and you need to determine if these pairs can be rearranged into a sequence where each consecutive pair in the sequence satisfies either the first or the second condition: 1. Their x-coordinates are the same. 2. Their y-coordinates are the same. -----Input----- - First line of the input contains an integer T denoting the number of test cases. - Each of the next T blocks contains an integer N (number of pairs) in the first line, followed by N lines each containing two integers x and y denoting the pairs. -----Output----- For each of the T test cases, output a single line containing \\"Possible\\" or \\"Not Possible\\" (without quotes) denoting whether the sequence can be formed as per the given rules. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 0 ≤ x, y ≤ 10^9 -----Example----- Input: 2 3 1 2 2 2 3 2 4 1 1 2 2 3 1 4 2 Output: Possible Not Possible -----Explanation----- Example case 1: A valid sequence is (1,2) -> (2,2) -> (3,2), since all consecutive pairs share the same y-coordinate. Example case 2: There is no way to arrange the pairs such that every consecutive pair shares either the x or y-coordinate. Hence, the output is \\"Not Possible\\".","solution":"def is_possible_sequence(pairs): from collections import defaultdict, deque if not pairs: return \\"Possible\\" graph_x = defaultdict(list) graph_y = defaultdict(list) for x, y in pairs: graph_x[x].append(y) graph_y[y].append(x) visited = set() need_to_visit = deque([pairs[0]]) while need_to_visit: current = need_to_visit.popleft() if current in visited: continue visited.add(current) x, y = current for neighbor_y in graph_x[x]: if (x, neighbor_y) not in visited: need_to_visit.append((x, neighbor_y)) for neighbor_x in graph_y[y]: if (neighbor_x, y) not in visited: need_to_visit.append((neighbor_x, y)) return \\"Possible\\" if len(visited) == len(pairs) else \\"Not Possible\\" def solve(test_cases): results = [] for pairs in test_cases: results.append(is_possible_sequence(pairs)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') idx = 0 T = int(lines[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(lines[idx]) idx += 1 pairs = [] for _ in range(N): x, y = map(int, lines[idx].split()) idx += 1 pairs.append((x, y)) test_cases.append(pairs) return test_cases def main(input_string): test_cases = parse_input(input_string) results = solve(test_cases) return \\"n\\".join(results)"},{"question":"Sophie is organizing a hiking trip and wants to ensure that each member of the group has a fair share of the food supply. The food supply is packed in a long cylindrical sausage. She wants to cut the sausage into `n` pieces such that each piece has the same volume. Formally, the sausage has a length `L` and a constant radius `r`. Sophie wants to make `n - 1` cuts perpendicular to the length of the sausage to divide it into `n` sections with equal volume. Can you help Sophie determine the positions along the length of the sausage where she should make the cuts? -----Input----- The first and only line of input contains two space-separated integers, `n` and `L` (2 ≤ n ≤ 1000, 1 ≤ L ≤ 10^5). -----Output----- The output should contain `n - 1` real numbers `x_1, x_2, ..., x_{n-1}`. The number `x_i` denotes that the `i`-th cut must be made `x_i` units away from one end of the sausage. In addition, `0 < x_1 < x_2 < ... < x_{n-1} < L` must hold. Your output will be considered correct if the absolute or relative error of every number in your output doesn\'t exceed `10^{-6}`. Formally, let your answer be `a`, and the jury\'s answer be `b`. Your answer is considered correct if frac{|a - b|}{operatorname{max}(1, b)} leq 10^{-6}. -----Examples----- Input 3 10 Output 4.641588834979 7.071067811865 Input 2 5000 Output 2500.000000000000 -----Note----- Definition of cylinder: https://en.wikipedia.org/wiki/Cylinder.","solution":"def sausage_cuts(n, L): Returns the positions along the length of the sausage where the cuts should be made such that the sausage is divided into n pieces of equal volume. Args: n (int): The number of pieces. L (int): The total length of the sausage. Returns: list of floats: The positions for the cuts. cuts = [] for i in range(1, n): cuts.append(i * (L / n)) return cuts"},{"question":"A drone is delivering packages across different points on a 2D grid, represented by (x, y) coordinates. Given two points A and B, determine if the drone can reach point B from point A using only the specified moves: move right (increase x by 1), move up (increase y by 1), or perform no move (stay in the same position). Print `Yes` if it is possible, and `No` otherwise. Constraints * -10^3 leq x1, y1, x2, y2 leq 10^3 * x1, y1, x2, y2 are integers. * Point A and Point B are distinct. Input Input is given from Standard Input in the following format: x1 y1 x2 y2 Output Print `Yes` if the drone can reach Point B from Point A using the allowed moves, and `No` otherwise. Examples Input 0 0 3 3 Output Yes Input 1 1 1 0 Output No Input -2 -2 1 1 Output Yes Input 0 0 0 2 Output Yes","solution":"def can_reach(x1, y1, x2, y2): Returns \'Yes\' if the drone can reach point B (x2, y2) from point A (x1, y1) using only moves right, up, or no move. Otherwise, returns \'No\'. return \\"Yes\\" if x2 >= x1 and y2 >= y1 else \\"No\\""},{"question":"A scientist is analyzing the growth of bacteria in a petri dish. The petri dish is represented by a grid of cells, each of which can either be empty (denoted by 0) or contain a bacteria colony (denoted by 1). The growth follows these rules: 1. Any cell with exactly three neighboring colonies will be populated in the next generation. 2. Any cell with exactly two neighboring colonies remains in its current state (either populated or empty) in the next generation. 3. Any other populated cell becomes empty in the next generation. A neighboring colony refers to any of the eight cells directly adjacent to the cell (horizontal, vertical, and diagonal neighbors). Given the initial state of the petri dish, your task is to determine the state of the petri dish after k generations. Input The first line contains three integers n, m, k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 100), where n and m are the dimensions of the grid, and k is the number of generations. Each of the next n lines contains m integers (either 0 or 1), representing the initial state of the petri dish. Output Print the state of the petri dish after k generations as n lines, each containing m integers (either 0 or 1). Example Input 3 3 1 0 1 0 0 1 0 0 1 0 Output 0 0 0 1 1 1 0 0 0 Note In the example, the initial state of the petri dish is a vertical line of bacteria colonies. After one generation, the colonies grow to form a horizontal line because each middle cell in the second row has exactly two or three neighbors, while the cells in the first and third row have two neighbors.","solution":"def get_next_state(grid, n, m): Calculate the next state of the grid based on the growth rules. def get_neighbors_count(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: count += grid[nx][ny] return count next_grid = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): neighbors_count = get_neighbors_count(i, j) if grid[i][j] == 1: if neighbors_count == 2 or neighbors_count == 3: next_grid[i][j] = 1 else: next_grid[i][j] = 0 elif neighbors_count == 3: next_grid[i][j] = 1 else: next_grid[i][j] = 0 return next_grid def simulate_growth(n, m, k, initial_grid): Simulate the growth of the bacteria for k generations. grid = initial_grid for _ in range(k): grid = get_next_state(grid, n, m) return grid"},{"question":"Tom loves buying gadgets and has an infinite amount of money, but he wants to simplify his life. When a new model of a gadget he already owns comes out, he sells the old model before buying the new one. Tom wants to have only the newest model of a gadget at any point in time. He maintains a list of gadgets bought and sold, represented by a series of operations on a timeline: - \\"BUY gadget_name\\": Tom buys a new gadget called `gadget_name`. - \\"SELL gadget_name\\": Tom sells his existing gadget called `gadget_name`. Given a list of operations, determine which gadgets Tom currently owns. Input Format: - The first line contains an integer `t`, the number of test cases. For each test case: - The first line contains an integer `n`, the number of operations. - The next `n` lines contain either \\"BUY gadget_name\\" or \\"SELL gadget_name\\". Output Format: For each test case, print the gadgets Tom currently owns in lexicographical order. If there are no gadgets, print \\"EMPTY\\". Constraints: - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 100000 - gadget_name consists of only lowercase letters and has a maximum length of 20. Sample Input: 2 4 BUY phone BUY laptop SELL phone BUY tablet 3 BUY smartwatch SELL smartwatch BUY earbuds Sample Output: laptop tablet earbuds Explanation: For the first test case: - After \\"BUY phone\\", Tom owns [\\"phone\\"]. - After \\"BUY laptop\\", Tom owns [\\"phone\\", \\"laptop\\"]. - After \\"SELL phone\\", Tom owns [\\"laptop\\"]. - After \\"BUY tablet\\", Tom owns [\\"laptop\\", \\"tablet\\"]. Thus, Tom currently owns \\"laptop\\" and \\"tablet\\". For the second test case: - After \\"BUY smartwatch\\", Tom owns [\\"smartwatch\\"]. - After \\"SELL smartwatch\\", Tom owns []. - After \\"BUY earbuds\\", Tom owns [\\"earbuds\\"]. Thus, Tom currently owns \\"earbuds\\".","solution":"def current_gadgets(test_cases): Determine which gadgets Tom currently owns. Parameters: test_cases (list of list): List of test cases, where each test case is a list of operations. Returns: list of list: List of currently owned gadgets for each test case in lexicographical order. results = [] for test in test_cases: gadgets = set() for operation in test: action, gadget_name = operation.split() if action == \\"BUY\\": gadgets.add(gadget_name) elif action == \\"SELL\\": if gadget_name in gadgets: gadgets.remove(gadget_name) if gadgets: results.append(sorted(gadgets)) else: results.append([\\"EMPTY\\"]) return results"},{"question":"You are given a list of N positive integers representing the weights of different items and a positive integer K. Your task is to determine if there is a subset of these items such that the sum of the weights is exactly K. If such a subset exists, you must output \\"Possible\\", otherwise, output \\"Not Possible\\". Input The first line contains an integer N (1 ≤ N ≤ 50) — the number of items. The second line contains N positive integers w1, w2, ..., wN (1 ≤ wi ≤ 1000) — the weights of the items. The third line contains an integer K (1 ≤ K ≤ 1000) — the target sum. Output Output \\"Possible\\" if there is a subset of the given weights that sums to K, otherwise output \\"Not Possible\\". Examples Input 5 1 2 3 4 5 9 Output Possible Input 4 3 34 4 12 30 Output Not Possible Note In the first sample, there is a subset {4, 5} whose sum is 9, so the output is \\"Possible\\". In the second sample, no subset sums to 30, so the output is \\"Not Possible\\".","solution":"def is_subset_sum_possible(n, weights, k): Determines if there is a subset of the given weights that sums to k. Parameters: n (int): the number of items weights (list of int): the weights of the items k (int): the target sum Returns: str: \\"Possible\\" if a subset exists that sums to k, otherwise \\"Not Possible\\" dp = [False] * (k + 1) dp[0] = True for weight in weights: for j in range(k, weight - 1, -1): if dp[j - weight]: dp[j] = True return \\"Possible\\" if dp[k] else \\"Not Possible\\""},{"question":"You are given an array of positive integers `arr` of length `n` and `q` queries. Each query can be one of the following two types: 1. `1 p x` (1 ≤ p ≤ n, x is a positive integer): Replace the element at position `p` in the array with `x`. 2. `2 l r` (1 ≤ l ≤ r ≤ n): Calculate the sum of the elements in the subarray from `arr[l]` to `arr[r]` inclusive. For each query of the second type, output the sum of the specified subarray. ------Input------ - The first line of input contains two integers, `n` (1 ≤ n ≤ 100,000) and `q` (1 ≤ q ≤ 100,000). - The second line contains `n` space-separated positive integers representing the array `arr`. - The next `q` lines contain queries, one per line, in the format described above. It is guaranteed that there is at least one query of the second type. ------Output------ For each query of the second type, print the sum of the elements in the specified subarray. ------Examples------ Input: ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 2 4 1 5 20 2 1 5 ``` Output: ``` 6 16 41 ```","solution":"class ArrayQueryProcessor: def __init__(self, n, arr): self.n = n self.arr = arr def execute_query(self, query): query_type, *params = query if query_type == 1: p, x = params self.arr[p - 1] = x elif query_type == 2: l, r = params return sum(self.arr[l - 1: r]) def process_queries(n, q, arr, queries): processor = ArrayQueryProcessor(n, arr) results = [] for query in queries: if query[0] == 2: results.append(processor.execute_query(query)) else: processor.execute_query(query) return results"},{"question":"You are given a string S consisting of N lowercase Latin letters. We denote G(L, R) as the number of distinct characters between index L and R in the string, inclusive. You need to answer multiple queries on the string, each of which asks for the number of distinct characters between two given indices. Write a program to answer Q such queries efficiently. -----Input----- - The first line contains N, the length of string S (1 ≤ N ≤ 200000). - The second line contains the string S. - The third line contains Q, the number of queries (1 ≤ Q ≤ 100000). - The next Q lines contain two integers L and R for each query (1 ≤ L ≤ R ≤ N). -----Output----- - For each query, print the number of distinct characters in the substring S[L...R] (1-based index) on a new line. -----Example----- Input 1: 5 abacc 3 1 3 2 4 1 5 Output 1: 2 3 3 Input 2: 6 aaaaaa 2 1 6 1 3 Output 2: 1 1 -----Explanation----- Testcase 1: - For the first query (1, 3), the substring is \\"aba\\", which contains 2 distinct characters: \'a\' and \'b\'. - For the second query (2, 4), the substring is \\"bac\\", which contains 3 distinct characters: \'b\', \'a\', and \'c\'. - For the third query (1, 5), the substring is \\"abacc\\", which contains 3 distinct characters: \'a\', \'b\', and \'c\'. Testcase 2: - For both queries, the substring consists entirely of the character \'a\', resulting in only 1 distinct character.","solution":"def number_of_distinct_characters(S, queries): Returns the number of distinct characters between index L and R for each query. :param S: The input string. :param queries: A list of tuples (L, R) representing the queries. :return: A list of integers with the results for each query. results = [] for L, R in queries: substr = S[L-1:R] distinct_characters = len(set(substr)) results.append(distinct_characters) return results"},{"question":"Given an array of integers, where each element represents the height of a building, and you have water that can pour over the buildings such that water can only be trapped between buildings. Calculate how much water can be trapped after raining. Example 1: Input: arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The number of units of water that can be trapped is 6. Example 2: Input: arr = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: The number of units of water that can be trapped is 9. Your Task: You don\'t need to read input or print anything. Complete the function trapWater() that takes the array arr as input parameters and returns the total units of water that can be trapped. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ arr.length ≤ 10^{5} 0 ≤ arr[i] ≤ 10^4","solution":"def trapWater(arr): Given an array of integers representing the heights of buildings, calculates how much water can be trapped after raining. Parameters: arr (list of int): A list of non-negative integers representing the heights of the buildings. Returns: int: Total units of water trapped. if not arr: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], arr[i]) right_max[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], arr[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - arr[i] return trapped_water"},{"question":"Given an array of integers, write a function that finds the maximum product of two distinct elements in the array. Return the maximum product. Example: Given the array [3, 5, 7, 2, 8], you should return the product 56, which is the product of 7 and 8. Note: You can assume that the array has at least two elements. The function should have a linear time complexity.","solution":"def max_product_of_two(arr): Finds the maximum product of two distinct elements in the array. Args: arr: A list of integers with at least two elements. Returns: The maximum product of any two distinct elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") max1 = max2 = float(\'-inf\') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num return max1 * max2"},{"question":"The local zoo is planning to build a new wall using colorful bricks. The wall will have a rectangular shape, and each brick can be one of n possible colors. The zoo wants the wall to be as beautiful as possible by making sure no two adjacent bricks (vertically or horizontally) have the same color. You have been tasked with determining if it\'s possible to construct such a wall given a specific number of rows and columns. Input The first line of the input contains three integers r, c, and n (1 ≤ r, c ≤ 10^3; 1 ≤ n ≤ r*c) — the number of rows, columns, and available colors, respectively. Output Print \\"YES\\" if it\'s possible to construct the wall with the given conditions, otherwise print \\"NO\\". Examples Input 2 2 4 Output YES Input 3 3 2 Output YES Input 4 4 1 Output NO","solution":"def can_construct_wall(r, c, n): Determines if it is possible to construct a wall with the given rows (r), columns (c), and colors (n), such that no two adjacent bricks (vertically or horizontally) have the same color. # Calculate the minimum number of colors needed min_colors_required = 2 if min(r, c) > 1 else 1 if n >= min_colors_required: return \\"YES\\" else: return \\"NO\\""},{"question":"Imagine you are working on developing an advanced spell system for a role-playing game (RPG). The spells are represented as sequences of characters, where each character represents a unique element (e.g., fire, water, earth, air). To make the spells more powerful, a magician can combine consecutive elements of any length to form super spells. However, certain sequences, when combined this way, form a forbidden combination that must be avoided, as it causes catastrophic damage. Your task is to write a function that checks a given spell sequence and determines if it contains any forbidden combinations. Formally, you will be given a string `s` representing the spell sequence and another string `f` representing the forbidden combination. You need to check if `f` appears as a substring in `s`. -----Input----- The input consists of two lines: - The first line contains the spell sequence `s` (1 ≤ |s| ≤ 10^5), a non-empty string consisting of lowercase English letters, where `|s|` is the length of the string. - The second line contains the forbidden combination `f` (1 ≤ |f| ≤ 10^3), a non-empty string consisting of lowercase English letters, where `|f|` is the length of the string. -----Output----- Output a single line containing \\"YES\\" if the forbidden combination appears in the spell sequence, otherwise output \\"NO\\". -----Examples----- Input abracadabra cad Output YES Input mysticspell fire Output NO -----Note----- In the first example, the sequence \\"cad\\" is a substring of \\"abracadabra\\", so the output is \\"YES\\". In the second example, the sequence \\"fire\\" does not appear in \\"mysticspell\\", so the output is \\"NO\\".","solution":"def contains_forbidden_combination(spell_sequence, forbidden_combination): Checks if the spell sequence contains the forbidden combination. Args: spell_sequence (str): The sequence of the spell elements. forbidden_combination (str): The forbidden combination of elements. Returns: str: \\"YES\\" if the forbidden combination is found in the spell sequence, otherwise \\"NO\\". if forbidden_combination in spell_sequence: return \\"YES\\" else: return \\"NO\\""},{"question":"Sam and Frodo were tasked with infiltrating Mordor, and as a break from their arduous journey, they decided to solve a coding puzzle to take their minds off the ring\'s burden. The problem that they devised involved a city with P palaces on distinct coordinates in a 2D plane. Sam wants to calculate the maximum number of palaces Frodo can visit such that the sequence of palace coordinates forms a strictly increasing path, either by row or by column. This means that either the x-coordinates must increase or the y-coordinates must increase (or both). Your task is to help Sam determine the length of the longest such possible path. Input format In the first line, there is a single integer P denoting the number of palaces. Each of the next P lines contain two integers x and y, representing the coordinates of each palace. Output format In a single line, output the length of the longest sequence of palaces where the x-coordinates or y-coordinates strictly increase. Constraints 1 ≤ P ≤ 10^4 1 ≤ x, y ≤ 10^6 SAMPLE INPUT 5 1 2 2 3 3 4 2 2 3 5 SAMPLE OUTPUT 4 Explanation In the given test case, visiting the palaces at coordinates (1,2), (2,3), (3,4), and (3,5) would form the longest strictly increasing path.","solution":"def longest_increasing_path(palaces): Returns the length of the longest strictly increasing path in terms of either x or y coordinates from the list of palaces. A path is represented as a sequence of coordinates (x, y). if not palaces: return 0 def longest_increasing_subsequence(sequence): from bisect import bisect_left lis = [] for value in sequence: pos = bisect_left(lis, value) if pos == len(lis): lis.append(value) else: lis[pos] = value return len(lis) # Sort palaces by x-coordinate first, then y-coordinate to cover x increasing first palaces.sort() ys = [y for x, y in palaces] return longest_increasing_subsequence(ys)"},{"question":"A company is hosting an annual coding competition, and they have a special scoring system. Each participant scores points in several rounds, and the final score is the sum of their top K scores. Given the scores of a participant over N rounds, write a program to calculate the sum of their top K scores. ------ Input Format ------ - First line contains T, the number of test cases. - Each test case consists of two lines. - The first line contains two integers N and K. - The second line contains N integers representing the scores of the participant in each round. ------ Output Format ------ For each test case, output the sum of the top K scores of the participant. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ N 0 ≤ text{score} ≤ 10^6 ----- Sample Input 1 ------ 3 5 3 10 20 30 40 50 6 4 100 200 50 300 150 400 4 2 5 25 15 10 ----- Sample Output 1 ------ 120 1000 40 ----- Explanation 1 ------ Test Case 1: The top 3 scores are 50, 40, and 30. Their sum is 120. Test Case 2: The top 4 scores are 400, 300, 200, and 150. Their sum is 1050. Test Case 3: The top 2 scores are 25 and 15. Their sum is 40.","solution":"def sum_of_top_k_scores(test_cases): Calculates the sum of top K scores for each test case. Parameters: test_cases (list): A list of tuples, where each tuple contains: - (int) N: Number of scores - (int) K: Number of top scores to sum - (list) scores: List of integers representing the scores Returns: list: A list of integers representing the sum of top K scores for each test case. results = [] for N, K, scores in test_cases: top_k_scores = sorted(scores, reverse=True)[:K] results.append(sum(top_k_scores)) return results"},{"question":"Harry and Sally are playing a unique card game where they take turns picking cards from a deck arranged in a row. Each card has a positive integer value representing points. Harry always starts first. Each player, on their turn, can only pick one card from either the start or the end of the remaining deck. The goal is to maximize their total points. Both players are very skilled and they always play optimally. Determine the maximum points Harry can achieve, assuming both players aim to maximize their points. Example 1: Input: cards = [1, 2, 3, 4] Output: 6 Explanation: - Harry picks card 4 from the end (score: 4). - Sally picks card 1 from the start (score: 1). - Harry picks card 3 from the end (score: 7). - Sally picks card 2 from the start (score: 3). Harry\'s final score is 6. Example 2: Input: cards = [8, 15, 3, 7] Output: 22 Explanation: - Harry picks card 7 from the end (score: 7). - Sally picks card 8 from the start (score: 8). - Harry picks card 15 from the remaining cards (score: 22). - Sally picks card 3 (score: 11). Harry\'s final score is 22. Constraints: 1. 1 <= cards.length <= 1000 2. 1 <= cards[i] <= 1000","solution":"def max_harry_points(cards): Returns the maximum points Harry can achieve given both he and Sally play optimally. n = len(cards) dp = [[0]*n for _ in range(n)] for i in range(n): dp[i][i] = cards[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(cards[i] - dp[i + 1][j], cards[j] - dp[i][j - 1]) total_sum = sum(cards) harry_points = (total_sum + dp[0][n - 1]) // 2 return harry_points"},{"question":"Given is a matrix of dimensions m times n. You are required to find the size of the largest rectangle containing only 1\'s and return its area. Each element in the matrix can be either 0 or 1. **Example 1:** Input: [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] Output: 6 **Example 2:** Input: [ [0, 1, 1, 0], [1, 1, 1, 1] ] Output: 4 **Constraints:** * The number of rows m is between 1 and 200. * The number of columns n is between 1 and 200. * The elements in the matrix are only 0 or 1. **Input Format:** The first line contains two integers m and n, the dimensions of the matrix. The next m lines each contain n space-separated integers, the elements of the matrix. **Output Format:** Print a single integer, the area of the largest rectangle containing only 1\'s. TASK: Write a program to solve the problem following the input-output format provided.","solution":"def maximalRectangle(matrix): Given a binary matrix filled with 0\'s and 1\'s, find the largest rectangle containing only 1\'s and return its area. if not matrix or not matrix[0]: return 0 max_area = 0 m, n = len(matrix), len(matrix[0]) heights = [0] * (n + 1) for i in range(m): for j in range(n): heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0 stack = [-1] for k in range(n + 1): while heights[k] < heights[stack[-1]]: h = heights[stack.pop()] w = k - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(k) return max_area"},{"question":"Write a program that determines whether a given string contains any permutation of the alphabet. Input The first line contains T, the number of test cases. Each of the next T lines contains a single string S. Output Output \\"YES\\" (without quotes) if the string contains any permutation of the alphabet, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 10^4 1 ≤ |S| ≤ 10^5 All letters in S are lowercase English letters NOTE There are 26 letters in the English alphabet. SAMPLE INPUT 3 abcdefghijklmnopqrstuvwxyza hellopythonworld thequickbrownfoxjumpsoverthelazydog SAMPLE OUTPUT YES NO YES","solution":"def contains_alphabet_permutation(s): Determines if the given string `s` contains any permutation of the alphabet. # There are 26 letters in the English alphabet ALPHABET_SIZE = 26 # To store the frequency of all characters freq = [0] * 26 # Increment frequency for each character in the string for char in s: freq[ord(char) - ord(\'a\')] += 1 # If all frequencies are at least 1, return True return all(count >= 1 for count in freq) def solve(T, test_cases): Processes multiple test cases. results = [] for s in test_cases: if contains_alphabet_permutation(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Consider an online bookstore which is recording the sales of books. Every time a book is sold, the bookstore records the sale as a tuple (book_id, month_of_sale, copies_sold), where: - `book_id` is a unique integer identifier for the book. - `month_of_sale` is an integer from 1 to 12 representing the month when the sale occurred. - `copies_sold` is an integer representing the number of copies sold. The bookstore wants to analyze the performance of each book across different months. Given the list of sales records, write a program that outputs the total number of copies sold for each book across all months. --- Input Format --- - The first line contains an integer `S`, the number of sales records. - The next `S` lines contain three integers each: `book_id`, `month_of_sale`, and `copies_sold`. --- Output Format --- - For each unique `book_id` found in the input, output a line with the `book_id` followed by the total number of copies sold for that book across all months. Output the results in order of `book_id`. --- Constraints --- - 1 ≤ S ≤ 10^5 - 1 ≤ book_id ≤ 10^6 - 1 ≤ month_of_sale ≤ 12 - 1 ≤ copies_sold ≤ 10^3 --- Sample Input --- ``` 5 101 1 5 102 3 10 101 2 7 102 3 3 103 5 1 ``` --- Sample Output --- ``` 101 12 102 13 103 1 ``` --- Explanation --- - Book 101 has two sales records: (101, 1, 5) and (101, 2, 7). Therefore, the total copies sold for book 101 is `5 + 7 = 12`. - Book 102 has two sales records: (102, 3, 10) and (102, 3, 3). Therefore, the total copies sold for book 102 is `10 + 3 = 13`. - Book 103 has one sale record: (103, 5, 1). Therefore, the total copies sold for book 103 is `1`.","solution":"def calculate_total_sales(records): Calculate total copies sold for each book across all months. Args: records (list of tuple): List of sales records tuples (book_id, month_of_sale, copies_sold) Returns: dict: A dictionary where keys are book_id and values are total copies sold. sales = {} for record in records: book_id, month_of_sale, copies_sold = record if book_id in sales: sales[book_id] += copies_sold else: sales[book_id] = copies_sold return sales # Function to format the output for display def format_sales_output(sales_dict): Format the sales dictionary into a sorted list of tuples for display. Args: sales_dict (dict): A dictionary with book_id as keys and total copies sold as values. Returns: list: Sorted list of tuples (book_id, total_copies_sold) sorted_sales = sorted(sales_dict.items()) return sorted_sales"},{"question":"Problem D Movie Duration A group of friends plans to watch several movies during a movie marathon. The movies are listed in the order they plan to watch, with each movie assigned a unique identifier starting from 1 up to n. Each movie has a specific duration measured in minutes. Given the time at which the marathon starts, you need to determine the current movie they are watching at a specified time t, along with how many minutes they have been watching the current movie. Input The input consists of the following format: ``` n t d_1 d_2 ... d_n ``` Where: - `n` and `t` are integers. `n` is the number of movies (1 ≤ n ≤ 10^5). `t` specifies the time in minutes since the marathon started (0 ≤ t ≤ 10^9). - `d_i` (1 ≤ d_i ≤ 10^9) is the duration of the i-th movie in minutes. Output Output two integers: - The identifier of the current movie being watched after `t` minutes. - The number of minutes that have passed since the start of the current movie. Sample Input 1 ``` 4 150 50 40 70 120 ``` Sample Output 1 ``` 3 60 ``` Sample Input 2 ``` 3 130 90 100 80 ``` Sample Output 2 ``` 2 40 ``` Explanation In the first sample input: - At 150 minutes since the marathon started: - The first movie ends at 50 minutes. - The second movie ends at 90 minutes (50 + 40). - The third movie starts at 90 minutes and ends at 160 minutes (90 + 70). - Therefore, they are watching the third movie, and 60 minutes have passed since it started (150 - 90). In the second sample input: - At 130 minutes since the marathon started: - The first movie ends at 90 minutes. - The second movie starts at 90 minutes and ends at 190 minutes (90 + 100). - Therefore, they are watching the second movie, and 40 minutes have passed since it started (130 - 90).","solution":"def current_movie(n, t, durations): Determine the current movie being watched and the minutes passed since it started. :param n: int, number of movies :param t: int, time in minutes since the marathon started :param durations: list of int, durations of the n movies in minutes :return: tuple of two int, the current movie identifier and the minutes passed since it started elapsed_time = 0 for i in range(n): if elapsed_time + durations[i] > t: return (i+1, t - elapsed_time) elapsed_time += durations[i] return (n, t - elapsed_time + durations[-1])"},{"question":"You are given a sequence of domino tiles arranged in a line. Each domino tile has two numbers (one on each end) ranging from 1 to 6. Your task is to determine if the sequence of tiles forms a valid placement, where two adjacent tiles share at least one common value. A valid placement of dominoes is a sequence of tiles where the right number on a tile is equal to the left number on the next tile. For example, a sequence where tile i has numbers (a_i, b_i), tile i+1 has numbers (a_{i+1}, b_{i+1}), and b_i = a_{i+1} is considered valid. You can flip any of the tiles to change their orientation, meaning a tile (a, b) can be considered either (a, b) or (b, a). Given an initial sequence of domino tiles, determine if it can be rearranged into a valid placement. -----Input----- The first line contains an integer n (1 leq n leq 100), the number of domino tiles. Each of the next n lines contains two integers a_i and b_i (1 leq a_i, b_i leq 6) representing the values on the ends of the i-th tile. -----Output----- Output \\"YES\\" if the sequence can form a valid placement, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 4 1 2 2 3 3 4 4 5 Sample Output 1: YES Sample Input 2: 3 1 6 2 3 4 5 Sample Output 2: NO Sample Input 3: 2 4 1 1 4 Sample Output 3: YES","solution":"def is_valid_domino_sequence(n, dominos): Determines if a sequence of domino tiles forms a valid placement. Parameters: n (int): The number of domino tiles. dominos (list of tuples): List of tuples where each tuple represents a domino tile (a_i, b_i). Returns: str: \\"YES\\" if the sequence can form a valid placement, otherwise \\"NO\\". def dfs(tile, visited, path): Depth First Search to check all possible permutations. if len(path) == n: return True for i, (a, b) in enumerate(dominos): if not visited[i]: if tile[1] == a: visited[i] = True if dfs((a, b), visited, path + [i]): return True visited[i] = False if tile[1] == b: visited[i] = True if dfs((b, a), visited, path + [i]): return True visited[i] = False return False for i, (a, b) in enumerate(dominos): visited = [False] * n visited[i] = True if dfs((a, b), visited, [i]) or dfs((b, a), visited, [i]): return \\"YES\\" return \\"NO\\""},{"question":"Zara is exploring a mysterious number sequence. Given a string S made up of digits (0-9), determine if there is a way to partition S into one or more parts such that each part is a power of 2 (e.g., 1, 2, 4, 8, 16, 32, ...). Each power of 2 must appear at least once in its complete form in the partition, and parts cannot contain leading zeroes unless the part is \\"0\\" itself. Can you help Zara find out if it\'s possible to partition the string as described? Input The first line contains an integer T, representing the number of test cases. Each of the following T lines contains a string S. Output For each test case, output \\"YES\\" if the string S can be partitioned in the required way, and \\"NO\\" otherwise. Constraints 1 <= T <= 100 1 <= |S| <= 100 Example Input: 2 2048 1234 Output: YES NO Explanation For the first test case: One possible partition is [2, 048], which is not valid since \\"048\\" contains a leading zero. Another possible partition is [2048], which is valid because 2048 is a power of 2. Hence, the answer is \\"YES\\". For the second test case: There is no way to partition \\"1234\\" into parts where each part is a power of 2. Hence, the answer is \\"NO\\".","solution":"def is_power_of_two(n): Helper function to check if a given number n is a power of 2. # Convert number to int, if not valid return False try: num = int(n) except ValueError: return False # Check if number is a power of two return num > 0 and (num & (num - 1)) == 0 def can_partition_to_powers_of_two(S): Function to check if string S can be partitioned into parts where each part is a power of 2. # Get the length of the string length = len(S) # Use dynamic programming to determine possible partitioning dp = [False] * (length + 1) dp[0] = True # Base case: empty string can be considered as a valid partition for i in range(1, length + 1): for j in range(i): if dp[j] and not (S[j:i][0] == \'0\' and len(S[j:i]) > 1) and is_power_of_two(S[j:i]): dp[i] = True break # No need to check further if we found a valid partition return dp[length] def mysterious_number_sequence(test_cases): Function to evaluate multiple test cases. results = [] for S in test_cases: if can_partition_to_powers_of_two(S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string `s` which consists of only lowercase letters, find the length of the longest substring where all characters are same. Return the length of this substring. # Example 1: Input: ``` s = \\"ababbccaa\\" ``` Output: ``` 2 ``` Explanation: There are multiple substrings (\'aa\', \'bb\', \'cc\'). The longest substring among them is of length 2. # Example 2: Input: ``` s = \\"abcd\\" ``` Output: ``` 1 ``` Explanation: Each character is a singleton substring, hence the answer is 1. # Example 3: Input: ``` s = \\"aaa\\" ``` Output: ``` 3 ``` Explanation: The entire string is the longest substring with all characters same, so the answer is 3. # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestUniformSubstring(s)`, which takes the string `s` as an input, and returns the length of the longest substring with all same characters. # Expected Time Complexity: - O(N), where N is the length of the string. # Expected Auxiliary Space: - O(1) # Constraints: - 1 <= length of the string <= 10^5 - The string consists of only lowercase English letters.","solution":"def longestUniformSubstring(s): Returns the length of the longest substring with all characters the same. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given a list of integers, `nums`, representing the scores of a basketball player in multiple games. Your task is to write a function that returns the player\'s highest score and the average score rounded to two decimal places. The result should be a string in the format \\"Highest: <highest_score>, Average: <average_score>\\", where `<highest_score>` is replaced with the highest score from the list and `<average_score>` is replaced with the calculated average. Example ```python # scores: [10, 20, 15, 25, 30] basketball_player_stats([10, 20, 15, 25, 30]) == \\"Highest: 30, Average: 20.00\\" ``` *NOTE: Assume the list will have at least one score.*","solution":"def basketball_player_stats(nums): Returns the highest score and the average score of a player in the format \\"Highest: <highest_score>, Average: <average_score>\\". Parameters: nums (list): A list of integers representing the scores of a basketball player. Returns: str: A formatted string with the highest and average score. highest_score = max(nums) average_score = round(sum(nums) / len(nums), 2) return f\\"Highest: {highest_score}, Average: {average_score:.2f}\\""},{"question":"In a library, each bookshelf is represented as a list of integers. Each integer denotes the number of books of a specific genre on that shelf. Your task is to find the shelf that has the highest number of books of a particular genre and return its index. If multiple shelves have the same number of books, return the index of the first one. For example, given the list of bookshelves: ``` [[3, 5, 2], [4, 2, 7], [5, 5, 1]] ``` and the genre index 1 (genre is at the second position), your function should return 0 as the first shelf has the most books with 5 in that genre. Write a function that takes in a list of lists (bookshelves) and an integer (genre index), and returns the index of the shelf with the highest number of books of that genre. If all shelves have zero books of that genre, return \'No books available!\'.","solution":"def find_shelf_with_most_books(bookshelves, genre_index): Finds the index of the shelf with the highest number of books of a specific genre. :param bookshelves: List of lists where each list represents a bookshelf :param genre_index: The index of the genre to inspect :return: The index of the shelf with the highest number of books of the specified genre, or \'No books available!\' if all counts are zero max_books = -1 max_index = -1 for i, shelf in enumerate(bookshelves): if shelf[genre_index] > max_books: max_books = shelf[genre_index] max_index = i return max_index if max_books > 0 else \'No books available!\'"},{"question":"An FM radio station is setting up a playlist for their popular morning show. They want to ensure that each song is played at least once, but without repeating any song within a specific time frame to keep the playlist fresh. You are given a list of songs and their respective durations, along with the total desired duration for the playlist and a number `k` which represents the minimum time that must pass before a song can be repeated. Write a program to determine a valid playlist that matches the desired duration exactly while ensuring no song is repeated within the last `k` songs. If there are multiple valid playlists, you may output any of them. If there is no valid playlist, output `-1`. ------ Input ------ - The first line contains three integers `n` (the number of songs), `T` (the total desired duration), and `k` (the minimum time frame for song repetition). - The following `n` lines each contain a song name and its respective duration in seconds. ------ Output ------ - If a valid playlist exists, output the song names in the order they should be played to match the desired total duration while meeting the repetition constraint. - If no valid playlist can be created, output `-1`. ------ Constraints ------ `1 ≤ n ≤ 50` `1 ≤ T ≤ 10000` `1 ≤ k ≤ 50` `1 ≤ duration of each song ≤ 1000` ------ Example ------ Input: 5 300 3 song1 100 song2 150 song3 50 song4 200 song5 100 Output: song1 song2 song3 song4","solution":"def generate_playlist(n, T, k, songs): def dfs(playlist, songs_left, current_duration): if current_duration == T: return playlist if current_duration > T or not songs_left: return None for i in range(len(songs_left)): song_name, song_duration = songs_left[i] if playlist and len(playlist) >= k and song_name in playlist[-k:]: continue result = dfs(playlist + [song_name], songs_left[:i] + songs_left[i+1:], current_duration + song_duration) if result: return result return None songs = [(song[0], int(song[1])) for song in songs] result = dfs([], songs, 0) return result if result else -1"},{"question":"A company is conducting an online assessment for software developer positions. As part of the assessment, candidates are given programming challenges that test their problem-solving skills and understanding of algorithms. One of the challenges is as follows. You are given an array of integers where each integer appears exactly twice, except for one integer which appears only once. Your task is to find the integer that appears only once. Write a function `findUnique` that takes an array of integers `nums` as an argument and returns the integer that appears only once. # Function Signature ```python def findUnique(nums: List[int]) -> int: ``` # Input - A single argument `nums`, which is a list of integers. The length of `nums` is in the range [1, 10000]. Each integer in `nums` is in the range [-1000000, 1000000]. # Output - Return the integer that appears only once in the array. # Example ```python assert findUnique([2, 3, 2, 4, 4]) == 3 assert findUnique([1, 1, 0, 2, 2]) == 0 assert findUnique([-1, 2, 2, 3, 3]) == -1 ``` # Note - Your solution should have a linear runtime complexity. - You can assume that the array will have exactly one integer that appears once, while all other integers appear exactly twice.","solution":"from typing import List def findUnique(nums: List[int]) -> int: This function finds the integer that appears only once in the array where every other integer appears twice. Args: nums: List[int] - List of integers Returns: int - The integer that appears only once unique = 0 for num in nums: unique ^= num return unique"},{"question":"Given a binary tree where each node contains a value, you need to determine the sum of those values including the root node that fall on the longest path to any leaf starting from the root node. If there are multiple longest paths to different leaves, return the maximum sum of values from these longest paths. A leaf is a node with no children. Input The input consists of several lines: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of nodes in the binary tree. - The following n lines each contain three integers vi, li, ri (1 ≤ vi ≤ 10^9, 0 ≤ li, ri ≤ n), where vi is the value of the node, li and ri are the indices of the left and right children nodes respectively. An index of 0 indicates no child. Output Output a single integer, the maximum sum of values from the longest path from root to any leaf node. Examples Input 5 10 2 3 20 4 0 30 0 5 40 0 0 50 0 0 Output 100 Input 3 5 2 3 10 0 0 15 0 0 Output 20 Input 6 1 2 3 2 4 0 3 0 0 4 5 6 5 0 0 10 0 0 Output 17 Note In the first example, the binary tree structure can be visualized as: ``` 10 / 20 30 / 40 50 ``` The longest path is 10 -> 20 -> 40 which sums to 70, and 10 -> 30 -> 50 which sums to 90. The maximum path sum is 90. In the second example, the binary tree structure is: ``` 5 / 10 15 ``` The longest paths are 5 -> 10 and 5 -> 15. The maximum path sum is 20. In the third example, the binary tree structure is: ``` 1 / 2 3 / 4 10 / 5 10 ``` The longest path is 1 -> 2 -> 4 -> 5 which sums to 12, and 1 -> 2 -> 4 -> 10 which sums to 17. The maximum path sum is 17.","solution":"def max_sum_on_longest_path(n, nodes): from collections import defaultdict, deque if n == 0: return 0 tree = defaultdict(dict) root = 1 for idx, (vi, li, ri) in enumerate(nodes, 1): tree[idx][\'value\'] = vi if li != 0: tree[idx][\'left\'] = li if ri != 0: tree[idx][\'right\'] = ri def dfs(node): if node not in tree: return (0, 0) current_value = tree[node][\'value\'] left_length, left_sum = dfs(tree[node].get(\'left\', 0)) right_length, right_sum = dfs(tree[node].get(\'right\', 0)) if left_length > right_length: return (left_length + 1, left_sum + current_value) elif right_length > left_length: return (right_length + 1, right_sum + current_value) else: return (left_length + 1, max(left_sum, right_sum) + current_value) return dfs(root)[1]"},{"question":"Problem X City Skyline You are given a street with multiple buildings. The street is represented as a 2D plane where the x-coordinate measures the distance along the street and the y-coordinate measures the height of buildings from the ground. Each building is represented as a triplet (Li, Ri, Hi) where Li and Ri denote the left and right edges of the building, respectively, and Hi denotes the height of the building. The street and the buildings are aligned with the x-axis, and no two buildings overlap horizontally. Your task is to draw the skyline formed by these buildings. The skyline is a list of “key points” in the form of (x, y) where x is the x-coordinate of the critical point and y is the height at that x-coordinate. The key point is defined as the left endpoint of a horizontal line segment where the height changes. Input The first line of input contains an integer n (1 leq n leq 10^4), the number of buildings. Each of the next n lines contains three integers Li, Ri, Hi (0 leq Li < Ri leq 10^9, 1 leq Hi leq 10^9) representing the left position, right position, and height of each building. Output The output should be a list of key points in the format (x_1, y_1), (x_2, y_2), ... , (x_k, y_k) representing the skyline formed by the given buildings. Example Input 5 2 9 10 3 7 15 5 12 12 15 20 10 19 24 8 Output (2, 10), (3, 15), (7, 12), (12, 0), (15, 10), (20, 8), (24, 0) Explanation - From 2 to 3, there is a building of height 10. - From 3 to 7, the tallest building is 15. - From 7 to 12, the tallest building is now 12. - From 12 to 15, there are no buildings, so the height drops to 0. - From 15 to 20, there is a building of height 10. - From 20 to 24, the tallest building is now 8. - After 24, there are no buildings, so the height drops to 0.","solution":"import heapq def get_skyline(buildings): Calculate the skyline for the given buildings. Args: buildings (list of tuple): List of buildings, each defined by (Li, Ri, Hi). Returns: List of tuple: List of key points that define the skyline. events = [] for L, R, H in buildings: events.append((L, -H, R)) events.append((R, 0, 0)) events.sort() result = [(0, 0)] live_buildings = [] for x, negH, R in events: while live_buildings and live_buildings[0][1] <= x: heapq.heappop(live_buildings) if negH != 0: heapq.heappush(live_buildings, (negH, R)) max_height = -live_buildings[0][0] if live_buildings else 0 if max_height != result[-1][1]: result.append((x, max_height)) return result[1:]"},{"question":"A Palindrome for Strings is a string that reads the same backward as forward, such as \\"madam\\" or \\"racecar.\\" Given a string S, find the length of the shortest substring that needs to be removed so that the remaining string is a palindrome. If the entire string is already a palindrome, return 0. Input The input consists of a single line containing the string S. Output Print a single integer which is the length of the shortest substring that needs to be removed. Constraints 1 ≤ |S| ≤ 1000 The string will contain only lowercase English letters. Example Input: abac Output: 1 Input: aaa Output: 0","solution":"def shortest_substring_removal(S): Returns the length of the shortest substring that needs to be removed so that the remaining string is a palindrome. def is_palindrome(s): return s == s[::-1] n = len(S) if is_palindrome(S): return 0 for length in range(1, n): for start in range(n - length + 1): temp_str = S[:start] + S[start + length:] if is_palindrome(temp_str): return length return n # in the worst case, we might have to remove the entire string # Example usages: print(shortest_substring_removal(\\"abac\\")) # Output: 1 print(shortest_substring_removal(\\"aaa\\")) # Output: 0"},{"question":"You are given an array `arr` containing `n` distinct integers. You want to find two indices `i` and `j` such that the elements at these indices form a swapped pair that results in the largest possible sum of the two elements. In other words, you need to find indices `i` and `j` such that `arr[i]` and `arr[j]` maximize `arr[i] + arr[j]`. Write a function `maxSwappedPair(arr)` that takes an array of integers `arr` and returns a tuple `(i, j)` indicating the indices of the pair. If there are multiple pairs with the same sum, return the pair with the smallest `i`. If there are still ties, return the pair with the smallest `j`. **Input:** - A positive integer `n` (1 leq n leq 10^5) — the number of elements in the array. - An array `arr` of `n` distinct integers, where the absolute value of each integer is at most 10^9. **Output:** - A tuple `(i, j)` where `i` and `j` are the indices of the pair in `arr` that form the largest possible sum. **Examples:** Input: ```python arr = [5, 1, 3, 7, 9] ``` Output: ```python (3, 4) ``` Input: ```python arr = [10, 4, 6, 8, 2] ``` Output: ```python (0, 3) ``` **Note:** In the first example, the swap between indices `3` and `4` results in the pair `(7, 9)` which sums to `16` and is the largest possible sum for any pair of indices in the array. Similarly, in the second example, the pair `(10, 8)` forms the largest sum `18` for any pair of indices.","solution":"def maxSwappedPair(arr): Returns a tuple (i, j) of the indices of the pair in arr that form the largest possible sum. If there are multiple pairs with the same sum, the pair with the smallest i is returned. If there is still a tie, the pair with the smallest j is returned. if len(arr) < 2: return None max_value = float(\'-inf\') second_max_value = float(\'-inf\') max_index = -1 second_max_index = -1 # Find the largest and second largest values and their indices for index, value in enumerate(arr): if value > max_value: second_max_value = max_value second_max_index = max_index max_value = value max_index = index elif value > second_max_value: second_max_value = value second_max_index = index return (min(max_index, second_max_index), max(max_index, second_max_index))"},{"question":"Write a program that reads a series of lines. Each line contains a string of words separated by spaces. Your task is to reverse the order of words in each line and print the reversed line. Constraints - Each word in the input consists of lowercase English letters. - Each line contains at least one and at most 100 words. - Each word has a maximum length of 20 characters. - The input ends with a line containing a single period (.), which should not be processed. Input The input consists of multiple lines. Each line has words separated by spaces. Output For each input line (except the one containing the period), print the line with the order of words reversed. Example Input hello world this is a test sample input for reversing . Output world hello test a is this reversing for input sample","solution":"def reverse_words_in_lines(lines): Given a list of lines, return each line with the words in reverse order. Args: lines (list of str): List of input lines to process Returns: list of str: List of lines with words reversed result = [] for line in lines: if line == \\".\\": break reversed_line = \' \'.join(line.split()[::-1]) result.append(reversed_line) return result"},{"question":"You are given a list of students and their scores in three subjects: Math, Science, and English. Write a Python program to calculate the average score of each student and determine the highest average score among all students. Each student\'s average score should be a floating-point number rounded to two decimal places. Input The first line contains an integer n (1 ≤ n ≤ 10) representing the number of students. The following n lines contain the name of the student followed by three integers representing the scores in Math, Science, and English respectively. The name consists of lowercase and uppercase English letters and is guaranteed to be no longer than 50 characters. Each score is an integer between 0 and 100 inclusive. Output Print the name of the student with the highest average score followed by their average score rounded to two decimal places. If there is a tie, print the name of the student who appears first in the input. Examples Input 3 Alice 90 80 70 Bob 85 90 95 Charlie 100 90 80 Output Bob 90.00 Input 2 Alice 88 92 85 Bob 95 85 90 Output Bob 90.00","solution":"def highest_average_score(n, data): highest_avg = -1 top_student = \\"\\" for student in data: name, math, science, english = student avg = (math + science + english) / 3 if avg > highest_avg: highest_avg = avg top_student = name return f\\"{top_student} {highest_avg:.2f}\\" # Example usage: # students_data = [ # (\\"Alice\\", 90, 80, 70), # (\\"Bob\\", 85, 90, 95), # (\\"Charlie\\", 100, 90, 80) # ] # print(highest_average_score(3, students_data))"},{"question":"Write a program to solve the Sudoku puzzle by filling in empty cells. A Sudoku solution must satisfy all the following rules: 1. Each of the digits 1-9 must occur exactly once in each row. 2. Each of the digits 1-9 must occur exactly once in each column. 3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. The \'.\' character indicates empty cells. Example 1: Input: [[\\"5\\",\\"3\\",\\".\\",\\".\\",\\"7\\",\\".\\",\\".\\",\\".\\",\\".\\"], [\\"6\\",\\".\\",\\".\\",\\"1\\",\\"9\\",\\"5\\",\\".\\",\\".\\",\\".\\"], [\\".\\",\\"9\\",\\"8\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\"], [\\"8\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\"3\\"], [\\"4\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\"3\\",\\".\\",\\".\\",\\"1\\"], [\\"7\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\".\\",\\".\\",\\".\\",\\"6\\"], [\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\"8\\",\\".\\"], [\\".\\",\\".\\",\\".\\",\\"4\\",\\"1\\",\\"9\\",\\".\\",\\".\\",\\"5\\"], [\\".\\",\\".\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\".\\",\\"7\\",\\"9\\"]] Output: [[\\"5\\",\\"3\\",\\"4\\",\\"6\\",\\"7\\",\\"8\\",\\"9\\",\\"1\\",\\"2\\"], [\\"6\\",\\"7\\",\\"2\\",\\"1\\",\\"9\\",\\"5\\",\\"3\\",\\"4\\",\\"8\\"], [\\"1\\",\\"9\\",\\"8\\",\\"3\\",\\"4\\",\\"2\\",\\"5\\",\\"6\\",\\"7\\"], [\\"8\\",\\"5\\",\\"9\\",\\"7\\",\\"6\\",\\"1\\",\\"4\\",\\"2\\",\\"3\\"], [\\"4\\",\\"2\\",\\"6\\",\\"8\\",\\"5\\",\\"3\\",\\"7\\",\\"9\\",\\"1\\"], [\\"7\\",\\"1\\",\\"3\\",\\"9\\",\\"2\\",\\"4\\",\\"8\\",\\"5\\",\\"6\\"], [\\"9\\",\\"6\\",\\"1\\",\\"5\\",\\"3\\",\\"7\\",\\"2\\",\\"8\\",\\"4\\"], [\\"2\\",\\"8\\",\\"7\\",\\"4\\",\\"1\\",\\"9\\",\\"6\\",\\"3\\",\\"5\\"], [\\"3\\",\\"4\\",\\"5\\",\\"2\\",\\"8\\",\\"6\\",\\"1\\",\\"7\\",\\"9\\"]] Explaination: The sudoku puzzle is solved with each digit satisfying the given rules. Your Task: You do not need to read input or print anything. Your task is to complete the function solveSudoku() which takes the 9x9 2-D list \'board\' as input and modifies the board in-place to solve the sudoku puzzle. Expected Time Complexity: O(9^81) Expected Auxiliary Space: O(81) Constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit or \'.\'","solution":"def solveSudoku(board): Solves the Sudoku puzzle by filling in empty cells. solve(board) def solve(board): empty = find_empty(board) if not empty: return True row, col = empty for num in range(1, 10): if is_valid(board, str(num), row, col): board[row][col] = str(num) if solve(board): return True board[row][col] = \'.\' return False def find_empty(board): for i in range(9): for j in range(9): if board[i][j] == \'.\': return (i, j) return None def is_valid(board, num, row, col): for i in range(9): if board[row][i] == num or board[i][col] == num: return False box_x = (row // 3) * 3 box_y = (col // 3) * 3 for i in range(3): for j in range(3): if board[box_x + i][box_y + j] == num: return False return True"},{"question":"Vaše prijateljica je nedavno počela trenirati za polumaraton. Da bi pratila svoj napredak, odlučila je bilježiti udaljenosti koje trči svaki dan. Kako bi motivacija bila na visokoj razini, postavila je sebi izazov: za svaki dan kada trči dulje od prethodnog dana, sama sebi daje nagradu. Vaša zadaća je pomoći joj izračunati koliko nagrada će dobiti tijekom zadanog razdoblja. -----Ulazni podaci----- U prvoj liniji ulaznih podataka nalazi se cijeli broj n (1 ≤ n ≤ 1000) — broj dana tijekom kojih je trčala. U drugoj liniji nalazi se n pozitivnih cijelih brojeva d_1, d_2, ..., d_{n} (1 ≤ d_{i} ≤ 1000) — udaljenosti koje je trčala svakog dana. Udaljenosti su zadane redom kojim ih je ostvarila. -----Izlazni podaci----- Ispisati jedan cijeli broj — broj nagrada koje je dobila. -----Primjeri----- Ulazni podaci 5 1 2 3 2 4 Izlazni podaci 3 Ulazni podaci 6 5 5 6 6 7 4 Izlazni podaci 2 -----Napomena----- U prvom primjeru, prijateljica će dobiti nagradu za trčanje 2 km (duže od 1 km), 3 km (duže od 2 km) i 4 km (duže od 2 km). Ukupno 3 nagrade. U drugom primjeru, prijateljica će dobiti nagrade za trčanje 6 km (duže od 5 km) i 7 km (duže od 6 km). Ukupno 2 nagrade.","solution":"def count_rewards(n, distances): Returns the number of rewards based on the distances run each day. rewards = 0 for i in range(1, n): if distances[i] > distances[i - 1]: rewards += 1 return rewards"},{"question":"You are given a large dataset collected from various weather stations in an imaginary country called Climatia. Each station records the temperature every hour throughout the year. The data is represented as a matrix where each row corresponds to readings from a single weather station and each column represents an hourly temperature reading. However, due to a malfunction, some readings are corrupted and are recorded as the sentinel value -9999. Your task is to clean this data by removing the corrupted readings and calculate the average temperature recorded by each weather station. Write a program to help climatologists at Climatia National Weather Institute analyze the data. -----Input:----- The first line consists of two space-separated integers m (number of weather stations) and n (number of hourly readings per station). The next m lines consist of n space-separated integers representing the temperature readings from each weather station for a year. -----Output:----- Print m lines, each containing a single floating-point value (rounded to 2 decimal places) which is the average temperature for each weather station after removing the corrupted readings. -----Constraints----- - 1 leq m leq 10^4 - 1 leq n leq 10^4 - -9999 leq temperature leq 10^2 - There will be at least one valid temperature reading for each station -----Sample Input:----- 4 5 25 30 -9999 22 24 18 -9999 35 25 20 -9999 -9999 -9999 15 -9999 30 28 27 25 -9999 -----Sample Output:----- 25.25 24.50 15.00 27.50","solution":"def clean_and_average_temperatures(m, n, data): Removes corrupted readings and calculates average temperature for each weather station. Parameters: m (int): Number of weather stations n (int): Number of hourly readings per station data (list of list of int): Temperature readings Returns: list of float: Average temperature readings for each weather station results = [] for station in data: valid_temps = [temp for temp in station if temp != -9999] average_temp = sum(valid_temps) / len(valid_temps) results.append(round(average_temp, 2)) return results"},{"question":"You are given a list of integers representing the completion times of projects in days. Each integer in the list denotes the number of days required to complete a project. You need to divide these projects into two groups such that the difference in total completion time between the two groups is minimized. Your task is to write a program to find and print the minimum possible difference in total completion time between the two groups. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of projects. The second line contains N space-separated integers representing the completion times of the projects. ------ Output ------ For each test case, print a single line containing one integer ― the minimum possible difference in total completion time between the two groups. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ completion time of each project ≤ 10000 ------ Sample Input ------ 2 3 3 1 4 4 2 3 5 10 ------ Sample Output ------ 0 0 ------ Explanation ------ In the first test case, the projects can be split into groups with completion times (3, 1) and (4), which have total completion times of 4 and 4 respectively, their difference is 0. In the second test case, the projects can be split into groups with completion times (2, 10) and (3, 5), which have total completion times of 12 and 8 respectively, the best we can achieve is a difference of 0.","solution":"def find_min_diff_partition(times): Given a list of project completion times, this function returns the minimum possible difference in total completion time between two groups. Uses a variant of the Partition Problem (subset-sum problem). total_sum = sum(times) n = len(times) dp = [[False]*(total_sum//2 + 1) for _ in range(n + 1)] # Initialize dp table for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum//2 + 1): if times[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - times[i - 1]] else: dp[i][j] = dp[i - 1][j] # Find maximum j such that dp[n][j] is true for j in range(total_sum//2, -1, -1): if dp[n][j]: sum1 = j break sum2 = total_sum - sum1 return abs(sum2 - sum1) def partition_projects(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] completion_times = test_cases[t][1] min_difference = find_min_diff_partition(completion_times) results.append(min_difference) return results"},{"question":"An island nation is exploring the feasibility of establishing a new transportation network consisting of bridges connecting various islands. Each island has several landmarks, and there are various potential bridge locations connecting these landmarks. The goal is to determine the minimum cost required to connect all the islands with a system of bridges. # Problem Statement: You are given `n` islands and `m` potential bridges. Each bridge connects two landmarks on different islands and has a construction cost. Your task is to find the minimum total cost for constructing these bridges such that there is at least one path between any two islands. # Input: - The first input is an integer `n` (2 <= n <= 100), representing the number of islands. - The second input is an integer `m` (1 <= m <= 10,000), representing the number of potential bridges. - The next `m` input lines, each containing three integers `u`, `v`, and `c`: - `u` and `v` are the integer identifiers (0-indexed) of the two landmarks connected by the bridge. - `c` is the positive integer representing the cost to construct the bridge between landmarks `u` and `v`. # Output: - Return a single integer, the minimum total cost to ensure every island is connected to at least one other island, forming a connected network of islands. # Example: ```python def min_bridge_cost(n, m, bridges): # Your code here # Example test case n = 4 m = 5 bridges = [ (0, 1, 1), (0, 2, 2), (0, 3, 3), (1, 2, 4), (2, 3, 5) ] print(min_bridge_cost(n, m, bridges)) # Output: 6 ``` # Explanation: In the provided example, there are 4 islands and 5 potential bridges. The minimum cost to connect all the islands is `6` by constructing bridges (0,1), (0,2), and (0,3). # Constraints: - Each bridge connects distinct landmarks on separate islands. - No two bridges will connect the same pair of landmarks. **Note:** Use Kruskal\'s or Prim\'s algorithm for finding the Minimum Spanning Tree (MST), which ensures that all the islands are connected with the minimum possible cost.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def min_bridge_cost(n, m, bridges): # Kruskal\'s algorithm to find MST and thus the minimum cost bridges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n min_cost = 0 edges_used = 0 for u, v, c in bridges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: min_cost += c union(parent, rank, root_u, root_v) edges_used += 1 if edges_used == n - 1: break return min_cost"},{"question":"Amara is a passionate codemaker and has recently developed an obfuscation algorithm that mixes up a given word. Her algorithm works by reversing every vowel (a, e, i, o, u) present in the word, while keeping all other characters in their original positions. Your task is to write a function that takes a string as input and outputs the obfuscated version of the string according to Amara\'s algorithm. -----Input:----- - The input consists of a single line containing a string S, where 1 leq |S| leq 10^5. - The string will consist of lowercase English letters only. -----Output:----- Output the obfuscated string after reversing the vowels in the input string. -----Constraints:----- - The string S can contain vowels (a, e, i, o, u) and consonants. -----Sample Input 1:----- hello -----Sample Output 1:----- holle -----Sample Input 2:----- programming -----Sample Output 2:----- prigrammong Note: - In the first example, \\"hello\\" becomes \\"holle\\" after reversing the vowels \'e\' and \'o\'. - In the second example, \\"programming\\" becomes \\"prigrammong\\" after reversing the position of the vowels \'o\' and \'a\'.","solution":"def obfuscate_string(s): Obfuscates the input string by reversing every vowel in the word while keeping all other characters in their original positions. vowels = \'aeiou\' # Extract the vowels from the input string in the order they appear vowel_list = [char for char in s if char in vowels] # Reverse the list of vowels vowel_list.reverse() # List to hold the result characters result = [] # Iterator for the reversed vowel list vowel_iter = iter(vowel_list) for char in s: if char in vowels: # Replace vowel with the next vowel in the reversed list result.append(next(vowel_iter)) else: # Keep non-vowel characters in the same position result.append(char) return \'\'.join(result)"},{"question":"Given a linked list, remove the nth node from the end of the list and return its head. Example: Input: 1->2->3->4->5, n = 2 Output: 1->2->3->5 Note: Given n will always be valid. Follow up: Could you do this in one pass?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeNthFromEnd(head: ListNode, n: int) -> ListNode: Removes the nth node from the end of the list and returns its head. dummy = ListNode(0, head) first = dummy second = dummy # Advance first pointer so that the gap between first and second is n nodes apart. for _ in range(n + 1): first = first.next # Move first to the end, maintaining the gap. while first is not None: first = first.next second = second.next # Remove the nth node from the end second.next = second.next.next return dummy.next def to_list(node): Helper function to convert linked list to Python list for easy comparison in tests. result = [] current = node while current: result.append(current.val) current = current.next return result def to_linked_list(lst): Helper function to convert Python list to linked list for easy setup in tests. dummy = ListNode() current = dummy for val in lst: current.next = ListNode(val) current = current.next return dummy.next"},{"question":"Given a list of strings, determine if it is possible to rearrange the characters of each string to form a palindrome. A palindrome is a word that reads the same backward as forward, such as \\"radar\\" or \\"level\\". Input: The first line of input gives a single integer t, the number of test cases. Each test case starts with n, the number of strings, on a separate line. Then follows n lines with one string on each line. A string contains only lowercase English letters and can be of length up to 100. Output: For each test case, output \\"YES\\" if all the strings in the list can be rearranged to form a palindrome, or \\"NO\\" otherwise. SAMPLE INPUT 2 3 civic ivicc hello 2 racecar level SAMPLE OUTPUT NO YES","solution":"def can_form_palindrome(s): Helper function to check if a given string can be rearranged to form a palindrome. from collections import Counter # Count occurrences of each character count = Counter(s) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for v in count.values() if v % 2 != 0) return odd_count <= 1 def can_all_strings_form_palindrome(test_cases): Determines if all strings in each test case can be rearranged to form palindromes. Args: test_cases: List of test cases, where each test case is a tuple containing an integer and a list of strings. Returns: A list of strings (\\"YES\\" or \\"NO\\") for each test case. results = [] for (n, strings) in test_cases: if all(can_form_palindrome(s) for s in strings): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # test_cases = [(3, [\'civic\', \'ivicc\', \'hello\']), (2, [\'racecar\', \'level\'])] # print(can_all_strings_form_palindrome(test_cases)) # Output: [\'NO\', \'YES\'] def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") t = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(t): n = int(input_lines[idx]) strings = input_lines[idx + 1: idx + 1 + n] test_cases.append((n, strings)) idx += 1 + n return test_cases"},{"question":"Create a function that takes an integer `n` as an input and returns a list of integers from 1 to `n`. However, there are some rules: - For multiples of three, replace the number with the string \\"Fizz\\". - For multiples of five, replace the number with the string \\"Buzz\\". - For numbers which are multiples of both three and five, replace the number with the string \\"FizzBuzz\\". The function should conform to the following signature: ```python def fizz_buzz(n: int) -> List[Union[int, str]]: pass ``` Example: Input: 15 Output: [1, 2, \\"Fizz\\", 4, \\"Buzz\\", \\"Fizz\\", 7, 8, \\"Fizz\\", \\"Buzz\\", 11, \\"Fizz\\", 13, 14, \\"FizzBuzz\\"] Note: Ensure you return the list with the correct replacements and maintain the correct order.","solution":"from typing import List, Union def fizz_buzz(n: int) -> List[Union[int, str]]: Generate a list of integers from 1 to `n`, replacing: - Multiples of 3 with \\"Fizz\\" - Multiples of 5 with \\"Buzz\\" - Multiples of both 3 and 5 with \\"FizzBuzz\\" result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(i) return result"},{"question":"Data compression algorithms play a vital role in efficient data storage and transmission. One commonly used algorithm is the Run-Length Encoding (RLE) algorithm. RLE compresses data by replacing sequences of identical elements with a single element and a count of its repetitions. Your task is to implement the RLE compression and decompression functions for a given string of alphabets, where each character can appear consecutively multiple times. This string should be compressed using the RLE algorithm, and it should also be possible to decompress an RLE-compressed string back to its original form. Write a function `compress_rle(s: str) -> str` that takes a string `s` and returns its RLE-compressed form. Then, write a second function `decompress_rle(s: str) -> str` that takes an RLE-compressed string `s` and returns the original string. -----Input----- - `compress_rle(s: str)` takes a single string of length `n` (1 ≤ n ≤ 10^5) consisting of lowercase alphabets. - `decompress_rle(s: str)` takes a single string of length `n` (1 ≤ n ≤ 10^5) which is a valid RLE-compressed string. -----Output----- - `compress_rle(s: str) -> str` returns the RLE-compressed string. - `decompress_rle(s: str) -> str` returns the original uncompressed string. Note that if a character appears only once, it should still be followed by the number `1` in the compressed form. -----Examples----- Input compress_rle(\\"aaabbbcccaaa\\") Output \\"a3b3c3a3\\" Input decompress_rle(\\"a3b3c3a3\\") Output \\"aaabbbcccaaa\\" Input compress_rle(\\"abcd\\") Output \\"a1b1c1d1\\" Input decompress_rle(\\"a1b1c1d1\\") Output \\"abcd\\"","solution":"def compress_rle(s: str) -> str: Compresses the input string using the Run-Length Encoding (RLE) algorithm. if not s: return \\"\\" compressed = [] i = 0 while i < len(s): count = 1 while (i + 1) < len(s) and s[i] == s[i + 1]: i += 1 count += 1 compressed.append(f\\"{s[i]}{count}\\") i += 1 return \\"\\".join(compressed) def decompress_rle(s: str) -> str: Decompresses the RLE-compressed input string into its original form. if not s: return \\"\\" decompressed = [] i = 0 while i < len(s): char = s[i] i += 1 count = 0 while i < len(s) and s[i].isdigit(): count = count * 10 + int(s[i]) i += 1 decompressed.append(char * count) return \\"\\".join(decompressed)"},{"question":"You\'ve been given the task of developing a simplified database system to manage books in a library. Each book has a unique identifier, a title, an author, a genre, and the year it was published. Your task is to implement a program that allows the library staff to add new books to the library, search for books by title, and list all books in a specific genre sorted by the year of publication (from oldest to newest). The program should support the following operations: 1. ADD [ID] [Title] [Author] [Genre] [Year] - Adds a new book to the library with the given details. The ID is guaranteed to be unique. 2. SEARCH [Title] - Searches for books by the given title (case-insensitive) and displays the details of all matching books. If no books match, output \\"No matching books found.\\" 3. LIST [Genre] - Lists all books in the given genre, sorted by the year of publication from oldest to newest. If no books match the genre, output \\"No books found in this genre.\\" Assume the following constraints: - The library can have at most 1000 books. - The length of the title and author name is at most 100 characters. - The genre is a single word with no more than 20 characters. - The year of publication is a positive integer. Input The input consists of a sequence of commands, each one described on a separate line. The commands are described as in the operations section. The sequence of commands is terminated by the command \\"END\\". Output For each SEARCH and LIST command, output the results as described. Ensure the outputs for each command are clearly separated, and follow the format specified below. Example Input ADD 1 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" Fiction 1960 ADD 2 \\"1984\\" \\"George Orwell\\" Dystopia 1949 ADD 3 \\"Pride and Prejudice\\" \\"Jane Austen\\" Romance 1813 SEARCH \\"1984\\" LIST Fiction LIST Dystopia END Output ID: 2, Title: \\"1984\\", Author: George Orwell, Genre: Dystopia, Year: 1949 ID: 1, Title: \\"To Kill a Mockingbird\\", Author: Harper Lee, Genre: Fiction, Year: 1960 ID: 2, Title: \\"1984\\", Author: George Orwell, Genre: Dystopia, Year: 1949","solution":"class Library: def __init__(self): self.books = [] def add_book(self, book_id, title, author, genre, year): self.books.append({ \\"ID\\": book_id, \\"Title\\": title, \\"Author\\": author, \\"Genre\\": genre, \\"Year\\": year }) def search_books(self, title): title_lower = title.lower() results = [book for book in self.books if title_lower in book[\\"Title\\"].lower()] return results if results else \\"No matching books found.\\" def list_books(self, genre): genre_lower = genre.lower() results = [book for book in self.books if genre_lower == book[\\"Genre\\"].lower()] if not results: return \\"No books found in this genre.\\" sorted_results = sorted(results, key=lambda x: x[\\"Year\\"]) return sorted_results # Example usage # library = Library() # library.add_book(1, \\"To Kill a Mockingbird\\", \\"Harper Lee\\", \\"Fiction\\", 1960) # library.add_book(2, \\"1984\\", \\"George Orwell\\", \\"Dystopia\\", 1949) # library.add_book(3, \\"Pride and Prejudice\\", \\"Jane Austen\\", \\"Romance\\", 1813) # print(library.search_books(\\"1984\\")) # print(library.list_books(\\"Fiction\\")) # print(library.list_books(\\"Dystopia\\"))"},{"question":"You are given a list of tasks, where each task has a start and end time. You need to find the maximum number of tasks that you can attend, assuming no tasks overlap. Each task is represented by a tuple (start, end). A task i does not overlap with task j if the end time of task i is less than or equal to the start time of task j or vice versa. -----Input----- The first line contains a single integer n (1 le n le 100) — the number of tasks. The next n lines contain two integers start_i and end_i (0 le start_i < end_i le 10^6) representing the start and end times of the i-th task. -----Output----- Output a single integer — the maximum number of tasks that you can attend without any overlapping. -----Example----- Input 3 1 4 2 3 3 5 Output 2 Input 4 4 6 2 9 1 3 8 10 Output 3 -----Note----- In the first example, you can attend the tasks (1, 4) and (3, 5). The task (2, 3) overlaps with (1, 4) and therefore cannot be attended along with it. In the second example, you can attend the tasks (1, 3), (4, 6), and (8, 10). The task (2, 9) overlaps with the others and therefore cannot be attended along with all of them.","solution":"def max_non_overlapping_tasks(tasks): Finds the maximum number of non-overlapping tasks that can be attended. :param tasks: List of tuples representing start and end times of tasks. :return: Maximum number of non-overlapping tasks. # Sort tasks by their end time tasks.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping tasks count = 0 prev_end_time = 0 for start, end in tasks: if start >= prev_end_time: count += 1 prev_end_time = end return count"},{"question":"Given a string `s` consisting of lowercase English letters and an integer `k`, determine whether you can rearrange the string such that the distance between same characters is at least `k`. If possible, return one such rearranged string, otherwise, return an empty string. *MID!* ```python # ex 1 s = \\"aabbcc\\" k = 3 rearrange_string(s, k) # => \\"abcabc\\" # ex 2 s = \\"aaabc\\" k = 3 rearrange_string(s, k) # => \\"\\" (It\'s not possible to rearrange the string) ``` Constraints **1 <= |s| <= 10^4** **1 <= k <= |s|**","solution":"import heapq from collections import Counter, deque def rearrange_string(s, k): Rearranges the string s such that the distance between same characters is at least k. Returns the rearranged string if possible, otherwise returns an empty string. if k <= 1: return s freq_counter = Counter(s) max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) queue = deque() result = [] while max_heap: current_freq, current_char = heapq.heappop(max_heap) result.append(current_char) queue.append((current_freq + 1, current_char)) if len(queue) >= k: front_freq, front_char = queue.popleft() if -front_freq > 0: heapq.heappush(max_heap, (front_freq, front_char)) if len(result) == len(s): return \'\'.join(result) else: return \\"\\""},{"question":"# Problem Statement Ella has an array of N light bulbs, each of which is either on or off. A bulb that is on is represented by \'1\' and a bulb that is off is represented by \'0\'. Ella wants all the bulbs to be in the same state — either all on or all off. In one operation, Ella can flip any segment of consecutive bulbs. Flipping a segment means changing each bulb from \'0\' to \'1\' or from \'1\' to \'0\' within that segment. Determine the minimum number of flips needed to make all the bulbs in the array the same. ------ Input ------ The first line of the input contains T, the number of test cases. Each test case is described in one line containing a string S of N characters, where the i-th character is \'1\' if the i-th bulb is on and \'0\' if it is off. ------ Output ------ For each test case, output a single line containing the minimum number of flips needed to make all light bulbs display the same state. ------ Constraints ------ 1 ≤ T ≤ 3000 1 ≤ N ≤ 50 ----- Sample Input 1 ------ 2 110011 000111 ----- Sample Output 1 ------ 1 1 ----- Explanation 1 ------ In the first test case, flipping the segment of the last four bulbs (0011) will make all bulbs \'1\'. In the second test case, flipping the segment of the first three bulbs (000) will make all bulbs \'1\'.","solution":"def min_flips_to_unify_bulbs(S): Computes the minimum number of flips needed to make all bulbs the same. # Counting the number of segments of \'0\'s and \'1\'s count_0_segments = 0 count_1_segments = 0 n = len(S) i = 0 while i < n: if S[i] == \'0\': count_0_segments += 1 while i < n and S[i] == \'0\': i += 1 else: count_1_segments += 1 while i < n and S[i] == \'1\': i += 1 # The minimum flips needed would be to flip all \'0\' segments or all \'1\' segments return min(count_0_segments, count_1_segments) def min_flips_for_test_cases(T, test_cases): results = [] for S in test_cases: result = min_flips_to_unify_bulbs(S) results.append(result) return results"},{"question":"A software development company is designing a new messaging system for its employees. The system will use distinct endpoints, each capable of sending and receiving messages. However, due to some security policies, not all endpoints can communicate directly with each other. You are required to configure the communication links between the endpoints such that certain restrictions are respected while maximizing the number of endpoints that can directly communicate with each other. Each endpoint is identified by a unique integer from 1 to n. There are m pairs of endpoints (u, v) which cannot have a direct communication link between them. You need to determine the maximum number of direct communication links that can be established without violating the given restrictions. # Input: The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 50000) - the number of endpoints and the number of restrictions, respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) indicating that there cannot be a direct communication link between endpoint ui and endpoint vi. # Output: The output should be a single integer, which is the maximum number of direct communication links that can be established. # Example: Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` 4 ``` # Note: In the above example, there are 5 endpoints and 3 restrictions: endpoints 1 and 2 cannot communicate, endpoints 2 and 3 cannot communicate, and endpoints 4 and 5 cannot communicate. The maximum number of direct communication links that can be established without violating any restrictions is 4, for example: - 1 can communicate with 3, 4, and 5 - 2 can communicate with 4 and 5 - 3 can communicate with 4 and 5","solution":"def max_communication_links(n, m, restrictions): Calculate the maximum number of direct communication links that can be established without violating the given restrictions. links_possible = n * (n - 1) // 2 # Total possible links if no restrictions # Subtract each forbidden link from the total possible links restriction_set = set(restrictions) forbidden_links = len(restriction_set) # Count of unique restricted links return links_possible - forbidden_links"},{"question":"The city of Codeland has a unique road system. It consists of n intersections and m bidirectional roads connecting pairs of intersections. The mayor of Codeland wants to install a new transportation system that ensures every pair of intersections is directly or indirectly connected. To do this, the mayor needs to identify the minimum number of roads that must be added to achieve full connectivity of the road network. A city is considered fully connected if there is a path between every pair of intersections. Return the number of additional roads needed to make the city\'s road network fully connected. -----Input----- The first line of input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) representing the number of intersections and roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a bidirectional road connecting intersection u and intersection v. -----Output----- Output a single integer, the minimum number of additional roads needed to ensure full connectivity of the road network. -----Examples----- Input 6 5 1 2 1 3 2 4 3 5 5 6 Output 0 Input 4 1 1 2 Output 2 -----Note----- In the first example, all intersections are already connected, so no additional roads are needed. In the second example, intersections 3 and 4 do not have any roads connecting them to the other intersections, so at least two additional roads are needed to fully connect the city, for instance, road from 1 to 3 and road from 2 to 4.","solution":"def find_min_roads_to_connect(n, m, roads): from collections import defaultdict, deque def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if n == 1: return 0 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited) components += 1 return components - 1"},{"question":"Task: You have to write a function `reverse_words` which takes an input string and returns the string with the words reversed but in their original order. - Note: Words are groups of characters separated by spaces. Punctuation marks are considered part of the words. # Rules/Note: * The string may contain letters, numbers, and various punctuation marks. * The input string will not be empty. * Words are separated by single spaces, and there are no leading or trailing spaces. # Examples: * reverse_words(\\"Hello world!\\") should return `\\"olleH !dlrow\\"` * reverse_words(\\"This is an example\\") should return `\\"sihT si na elpmaxe\\"` * reverse_words(\\"Reverse words!\\") should return `\\"esreveR sdrow!\\"` # Tip: * A word boundary can be detected by spaces. Use string manipulation methods to reverse the individual words.","solution":"def reverse_words(s): Reverses each word in the string s while maintaining their original order. Parameters: s (str): a string with words separated by spaces. Returns: str: a string with each word reversed. return \' \'.join(word[::-1] for word in s.split())"},{"question":"Reena has an array P of size N consisting of positive integers. She can perform the following operation any (possibly zero) number of times: Select any index i (1 ≤ i ≤ N) and replace the element P_{i} with either P_{i}-1 or P_{i}+1. Reena wants to make all the elements of the array P identical with the minimum number of operations. Can you help her figure out the minimum number of operations needed? ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains one integer N — the number of elements in the array P. - The second line consists of N space-separated integers P_{1}, P_{2}, ldots, P_{N} denoting the elements of the array P. ------ Output Format ------ For each test case, output on a new line, the minimum number of operations needed to make all elements of the array P identical. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ P_{i} ≤ 10^{9} - The sum of N over all test cases won\'t exceed 10^{5}. ----- Sample Input 1 ------ 2 4 1 3 2 2 5 8 6 5 6 9 ----- Sample Output 1 ------ 3 6 ----- explanation 1 ------ Test case 1: Reena can perform the following operations: - Decrement P2 once to get 2. - Decrement P3 once to get 1. - Increment P4 once to get 3. After performing these operations, all elements will become 2 or 3, which requires the minimum number of adjustments. Test case 2: Reena can perform the following operations: - Decrement P1 twice to get 6. - Increment P2 once to get 7. - Increment P3 twice to get 7. - Decrement P4 once to get 5. - Decrement P5 twice to get 7. After performing these operations, all elements will become 8 or 7, requiring the minimum number of adjustments.","solution":"def min_operations_to_make_identical(T, test_cases): def calculate_operations(P, median): return sum(abs(x - median) for x in P) results = [] for N, P in test_cases: P.sort() median = P[N // 2] # median of the sorted array minimizes the operations results.append(calculate_operations(P, median)) return results def get_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 P = list(map(int, data[index:index + N])) index += N test_cases.append((N, P)) return T, test_cases if __name__ == \\"__main__\\": T, test_cases = get_input() results = min_operations_to_make_identical(T, test_cases) for result in results: print(result)"},{"question":"Write a function that, given a list of integers, returns a new list of integers where each element is the highest frequency prime factor of each element of the original list. If an element has no prime factors (i.e., it is less than 2), return that element as is in the new list. # Prime Factors A prime factor is a factor of a number that is a prime number. For example, the prime factors of 18 are 2 and 3. # Highest Frequency Prime Factor The highest frequency prime factor is the prime factor that appears the most times in the factorization of the number. If there is a tie, return the smallest prime factor. # Examples - The prime factors of 18 are 2 and 3 (3 appears twice, so 3 is the highest frequency prime factor). - The prime factors of 28 are 2 and 7 (2 appears twice, so 2 is the highest frequency prime factor). - The prime factors of 15 are 3 and 5 (both appear once, so return the smallest prime factor, which is 3). # The Function Write a function `highestFrequencyPrimeFactors(arr)` that accepts a list of integers and returns a list where each element is replaced by its highest frequency prime factor. If the element in the input list does not have a prime factor (i.e., it is less than 2), it should be returned as is in the new list. # Signature ```python def highestFrequencyPrimeFactors(arr: List[int]) -> List[int]: ``` # Example ```python highestFrequencyPrimeFactors([18, 28, 15, 1, 97]) # Output: [3, 2, 3, 1, 97] ``` # Constraints - The input list, `arr`, contains `1 ≤ n ≤ 10^3` integers. - Each integer `1 ≤ m ≤ 10^3`.","solution":"from typing import List, Dict def highestFrequencyPrimeFactors(arr: List[int]) -> List[int]: def prime_factors(n: int) -> Dict[int, int]: factors = {} d = 2 while n >= 2: while (n % d) == 0: if d in factors: factors[d] += 1 else: factors[d] = 1 n //= d d += 1 return factors def most_frequent_prime(factors: Dict[int, int]) -> int: if not factors: return None # Find the prime factor with the highest frequency max_freq = max(factors.values()) # among those, select the smallest prime factor return min(key for key, value in factors.items() if value == max_freq) result = [] for num in arr: if num < 2: result.append(num) else: factors = prime_factors(num) result.append(most_frequent_prime(factors)) return result"},{"question":"Given an array `arr` of length `n`, you need to determine if it is possible to sort the array in non-decreasing order by reversing at most one subarray (continuous segment). A subarray is defined as a continuous portion of an array. Write a program to find out if you can sort the array in non-decreasing order by reversing at most one subarray. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print \\"YES\\" (without quotes) if the array can be sorted by reversing at most one subarray, otherwise print \\"NO\\". -----Example----- Input 6 3 6 5 4 7 9 Output YES Input 5 1 2 4 3 5 Output YES Input 4 4 3 2 1 Output YES Input 3 1 3 2 Output YES Input 5 4 3 6 5 7 Output NO -----Explanation----- In the first example, reversing the subarray [6, 5, 4] will sort the array. In the second example, reversing the subarray [4, 3] will sort the array. In the third example, reversing the entire array [4, 3, 2, 1] will sort it. In the fourth example, the array can be sorted by reversing the subarray [3, 2]. In the fifth example, there is no single subarray that can be reversed to sort the array in non-decreasing order.","solution":"def can_sort_by_reversing_subarray(arr): n = len(arr) # Find the first part where the array is not increasing start = 0 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # If the entire array is already sorted if start == n - 1: return \\"YES\\" # Find the last part where the array is not increasing end = n - 1 while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # Reverse the subarray new_arr = arr[:start] + list(reversed(arr[start:end + 1])) + arr[end + 1:] # Check if this new array is sorted for i in range(n - 1): if new_arr[i] > new_arr[i + 1]: return \\"NO\\" return \\"YES\\" # Example usage # print(can_sort_by_reversing_subarray([3, 6, 5, 4, 7, 9])) # Output: YES # print(can_sort_by_reversing_subarray([4, 3, 6, 5, 7])) # Output: NO"},{"question":"Write a function that takes an integer n and returns the number of prime numbers less than n. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Example1: n = 10 Result: 4 Explanation: There are four prime numbers less than 10, which are 2, 3, 5, and 7. Example2: n = 20 Result: 8 Explanation: There are eight prime numbers less than 20, which are 2, 3, 5, 7, 11, 13, 17, and 19. Example3: n = 1 Result: 0 Explanation: There are no prime numbers less than 1.","solution":"def count_primes(n): Returns the number of prime numbers less than n. Args: n: int - the upper limit (exclusive) to count primes less than Returns: int - count of prime numbers less than n if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(sieve)"},{"question":"A group of researchers is conducting a study on strings and their patterns. One aspect of their research involves finding the longest palindromic substring within a given string. A palindromic substring is a sequence of characters that reads the same backward as forward and is a contiguous sequence of characters within the string. Given a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters, you need to identify the longest palindromic substring. If there are multiple substrings of the same maximum length, return the first one that appears. Input The input consists of a single line containing the string s. Output Print the longest palindromic substring. If there are multiple such substrings of the same length, print the first one that appears in the string. Examples Input babad Output bab Input cbbd Output bb Input a Output a Input ac Output a Note A palindrome is a sequence of characters that reads the same forward and backward. In the first example, \\"bab\\" and \\"aba\\" are both longest palindromic substrings in the given string. However, \\"bab\\" appears first, so it is the output. In the second example, \\"bb\\" is the longest palindromic substring in the string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. If there are multiple such substrings of the same length, returns the first one that appears. if not s: return \\"\\" n = len(s) start = 0 max_length = 1 dp = [[False for _ in range(n)] for _ in range(n)] for i in range(n): dp[i][i] = True for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"Design a function that takes a string representing a mathematical expression containing positive integers, addition (+) and multiplication (*) operators, as well as parentheses, and calculates the result following the correct order of operations (PEMDAS/BODMAS rules). Input A single string s containing a valid mathematical expression. The length of the string will not exceed 100 characters. Output Return the evaluation result as an integer. Examples Input \\"3+2*2\\" Output 7 Input \\"2*(3+4)\\" Output 14 Input \\"2+3*4\\" Output 14","solution":"def evaluate_expression(s): This function evaluates a mathematical expression string containing positive integers, addition (+), multiplication (*), and parentheses, following the correct order of operations. try: return eval(s) except (SyntaxError, NameError): raise ValueError(f\\"Invalid expression: {s}\\") # Example usage print(evaluate_expression(\\"3+2*2\\")) # Output: 7 print(evaluate_expression(\\"2*(3+4)\\")) # Output: 14 print(evaluate_expression(\\"2+3*4\\")) # Output: 14"},{"question":"A software company is developing an automated code formatter that ensures consistency across all files in their repository. One of the key features they want to implement is the removal of consecutive duplicate lines from each file. A line is considered a duplicate if it appears consecutively more than once. Given a list of strings, each representing a line in the file, write a function that removes consecutive duplicate lines and returns the updated list of strings. Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of lines in the file. - The next n lines each contain a string, representing a line in the file. Each string consists of printable ASCII characters and its length does not exceed 100 characters. Output - Output the updated list of strings, with consecutive duplicates removed. Each string should be printed on a new line. Example Input 6 first first second second second third Output first second third Input 7 hello hello world world world hello hello Output hello world hello Explanation: In the first example, the two consecutive \\"first\\" lines are reduced to one \\"first\\", the three consecutive \\"second\\" lines are reduced to one \\"second\\", and the output ends with \\"third\\". In the second example, the two consecutive \\"hello\\" lines are reduced to one \\"hello\\", the three consecutive \\"world\\" lines are reduced to one \\"world\\", and the two consecutive \\"hello\\" lines at the end are reduced to one \\"hello\\". The final output reflects these removals.","solution":"def remove_consecutive_duplicates(n, lines): Removes consecutive duplicate lines from the list of strings. Parameters: n (int): Number of lines in the input. lines (list of str): List of lines in the file. Returns: list of str: List of lines with consecutive duplicates removed. if not lines: return [] result = [lines[0]] for i in range(1, n): if lines[i] != lines[i - 1]: result.append(lines[i]) return result"},{"question":"You are working on a project that requires an efficient handling of email addresses stored in a large dataset. You need to write a function to identify the number of unique email addresses in the dataset following specific rules for normalization. Here’s how an email address should be normalized: 1. An email address consists of a local part and a domain part separated by the symbol \'@\'. 2. In the local part, dots (\'.\') are ignored. For instance, \'user.name\' should be treated as \'username\'. 3. If the local part contains a plus sign (\'+\'), everything after the plus sign should be ignored. For example, \'user+spam@example.com\' should be treated as \'user@example.com\'. 4. The domain part should be retained as is. Write a function to determine the number of unique email addresses after normalization. The input to your function will be a list of email addresses. Input A list of strings, each string representing an email address. The number of email addresses is at most 10^4 and each email address length does not exceed 100 characters. Output An integer representing the number of unique normalized email addresses. Example Input [\\"test.email+alex@leetcode.com\\", \\"test.e.mail+bob.cathy@leetcode.com\\", \\"testemail+david@lee.tcode.com\\"] Output 2 Explanation After normalization, the unique email addresses will be \\"testemail@leetcode.com\\" and \\"testemail@lee.tcode.com\\". Note - Consider cases where the input email address list is empty; your function should return 0. - Ensure your function runs efficiently even for the upper limit of input size.","solution":"def num_unique_emails(emails): def normalize(email): local, domain = email.split(\'@\') local = local.split(\'+\')[0] local = local.replace(\'.\', \'\') return local + \'@\' + domain normalized_emails = set() for email in emails: normalized_emails.add(normalize(email)) return len(normalized_emails)"},{"question":"In an entertainment city, a special type of attraction called \\"The Magic Spiral\\" increments its thrill level every day based on a specific pattern. On the first day, the thrill level is 1. On the second day and for each subsequent day, the thrill level is the sum of the thrill levels of all previous days plus 1. Formally, the thrill level on day n can be defined as: [ text{thrill}(n) = sum_{i=1}^{n-1} text{thrill}(i) + 1 ] Given an integer d representing the number of days, calculate the thrill level of \\"The Magic Spiral\\" on the d-th day. -----Input----- The input consists of a single integer d (1 le d le 10^5). -----Output----- Output a single integer — the thrill level of \\"The Magic Spiral\\" on the d-th day. -----Examples----- Input 1 Output 1 Input 2 Output 2 Input 4 Output 8 -----Hint----- For d = 1, the thrill level is 1. For d = 2, the thrill level is 1 (from day 1) + 1 = 2. For d = 3, the thrill level is 2 (from day 2) + 1 = 3. For d = 4, the thrill level is 1 (day 1) + 2 (day 2) + 3 (day 3) + 1 = 8.","solution":"def thrill(d): Returns the thrill level of \\"The Magic Spiral\\" on the d-th day. Args: d (int): The day number (1-based index). Returns: int: The calculated thrill level on the d-th day. # When d is 1, the thrill level is always 1 if d == 1: return 1 # Calculate the thrill level for d > 1 thrill_level = 1 # Thrill level of the first day sum_thrill = 1 # Sum of thrill levels up to the first day for day in range(2, d + 1): thrill_level = sum_thrill + 1 sum_thrill += thrill_level return thrill_level"},{"question":"You are given an integer array a of length n. Your task is to determine if there exists a subarray (containing at least one element) such that the sum of the subarray is equal to k. A subarray is a contiguous part of an array. -----Input----- The first line of the input contains two integers n and k (1 le n le 2 cdot 10^5, -10^9 le k le 10^9). The next line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). -----Output----- Print \\"YES\\" if there exists a subarray whose sum is equal to k. Otherwise, print \\"NO\\". -----Example----- Input 5 5 1 2 3 4 5 Output YES Input 3 8 4 -2 1 Output NO","solution":"def does_subarray_sum_exist(nums, k): Determines if there exists a subarray with sum equal to k. Args: nums: List of integers representing the array. k: Integer representing the required subarray sum. Returns: `YES` if there exists a subarray whose sum is equal to k, otherwise `NO`. current_sum = 0 sums = {0} # Initialize with sum 0 to handle cases where the subarray starts from index 0 for num in nums: current_sum += num if (current_sum - k) in sums: return \\"YES\\" sums.add(current_sum) return \\"NO\\" # Example usage if __name__ == \\"__main__\\": n, k = map(int, input().split()) nums = list(map(int, input().split())) print(does_subarray_sum_exist(nums, k))"},{"question":"Given a list of integers, you need to determine if it is possible to rearrange the list such that no two consecutive numbers are the same. If it is possible, print \\"Yes\\", otherwise print \\"No\\". Input: The first line of input contains an integer t - number of test cases. Each of the next t lines contains a list of integers separated by a space. Output: For each test case, output a single line containing \\"Yes\\" (without quotes) if it is possible to rearrange the list with no two consecutive integers being the same, or \\"No\\" (without quotes) if it is not possible. Constraints: 1 ≤ t ≤ 10^4 1 ≤ length of each list ≤ 10^5 -10^9 ≤ integer values ≤ 10^9 SAMPLE INPUT 2 1 2 3 4 5 1 1 1 1 1 SAMPLE OUTPUT Yes No","solution":"from collections import Counter def can_rearrange_to_no_consecutive_duplicates(t, test_cases): results = [] for case in test_cases: freq = Counter(case) most_common_element_freq = max(freq.values()) # If the frequency of the most common element exceeds half the length of the list (rounded up), # it is impossible to rearrange such that no two consecutive numbers are the same. if most_common_element_freq > (len(case) + 1) // 2: results.append(\\"No\\") else: results.append(\\"Yes\\") return results"},{"question":"A robotics company is developing a new pathfinding algorithm for its autonomous delivery robots. The city where the robots operate is represented by a grid of size N times M, with each cell in the grid either being free space or an obstacle. The robot can move up, down, left, or right but cannot move diagonally. The goal is to determine the shortest path for the robot from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1), avoiding obstacles. A cell in the grid is represented by a character: - \'.\' denotes a free space. - \'#\' denotes an obstacle. Your task is to implement a function that calculates the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return -1. -----Input----- The first line of input contains two integers N and M (1 leq N, M leq 1000), the number of rows and columns in the grid. The next N lines each contain a string of M characters representing the grid. -----Output----- The first and only line of output must contain the length of the shortest path, or -1 if no such path exists. -----Examples----- Sample Input 1: 5 5 ..... .#. .#.#. .#.#. ..... Sample Output 1: 8 Sample Input 2: 3 3 ... .#. ..# Sample Output 2: -1","solution":"from collections import deque def shortest_path(grid): if not grid or grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return -1 n = len(grid) m = len(grid[0]) # Directions for moving: down, up, right, left directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Queue for BFS, start from the top-left corner queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we\'ve reached the bottom-right corner if x == n-1 and y == m-1: return dist # Explore neighbors for dx, dy in directions: next_x, next_y = x + dx, y + dy if 0 <= next_x < n and 0 <= next_y < m and grid[next_x][next_y] == \'.\' and (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append((next_x, next_y, dist + 1)) return -1"},{"question":"Little D is passionate about maintaining an eco-friendly forest. He wants to plant a row of trees in such a way that no two adjacent trees have the same height. Each tree will have a distinct height assigned to it. Can you help Little D arrange the n trees? The challenge is to determine the heights of the n trees in such a way that the heights form a permutation of the first n natural numbers and no two adjacent trees have the same height. -----Input----- A single line containing one integer n (2 ≤ n ≤ 10^6) — the number of trees Little D has to plant. -----Output----- Print n integers in a single line — denoting the heights of the trees. The heights must form a permutation of the first n natural numbers where no two adjacent numbers are the same. It is guaranteed that there is at least one solution. If there are multiple solutions, print any of them. -----Examples----- Input 4 Output 4 1 3 2 Input 7 Output 1 3 5 2 4 6 7","solution":"def arrange_trees(n): if n == 2: return [1, 2] # Generally follow the algorithm to ensure no adjacent numbers are the same result = [0] * n j = 1 for i in range(0, n, 2): # fill odd positions result[i] = j j += 1 for i in range(1, n, 2): # fill even positions result[i] = j j += 1 return result # Example execution # print(arrange_trees(4)) # Outputs: [1, 3, 2, 4] # print(arrange_trees(7)) # Outputs: [1, 3, 5, 2, 4, 6, 7]"},{"question":"There is a huge pile of boxes in a warehouse, and each box has a unique integer weight attached to it. You need to help the warehouse manager find out the minimum weight difference between any two boxes. The minimum weight difference is defined as the smallest absolute difference between any pair of the given box weights. Input Format The first line contains an integer mathbf{T} indicating the number of test cases. The following mathbf{T} sections each start with an integer n — the number of boxes. The next line contains n space-separated integers representing the weights of the boxes. Output Format For each test case, print the minimum weight difference on a new line. Constraints 1 leq T leq 10^3 2 leq n leq 10^5 1 leq text{weight of each box} leq 10^9 Sample Input 3 5 1 3 6 9 12 4 10 20 30 40 3 15 5 25 Sample Output 2 10 10 Explanation For the first test case, the minimum weight difference is between the weights 3 and 1, which is |3-1|=2. For the second test case, the minimum weight difference is between any two consecutive weights, which is |30-20|=10. For the third test case, the minimum weight difference is between the weights 15 and 5, which is |15-5|=10.","solution":"def min_weight_difference(test_cases): results = [] for case in test_cases: n, weights = case weights.sort() min_diff = float(\'inf\') for i in range(1, n): diff = weights[i] - weights[i - 1] if diff < min_diff: min_diff = diff results.append(min_diff) return results"},{"question":"# Task You are given a list of integers. You need to return a list of all the integers that appear an odd number of times in the input list. # Input - `[input]` array of integers `arr` A list of integers. # Output - Return an array of integers that appear an odd number of times in the input list. # Example For `arr = [1, 2, 3, 2, 3, 4, 4, 4]`, the output should be `[1, 3, 4]`. - In the given list, integer `1` appears once, integer `3` appears twice, and integer `4` appears three times. Thus, the output is `[1, 3, 4]`. For `arr = [4, 4, 4, 5, 5, 6, 6, 6, 7]`, the output should be `[4, 6, 7]`. - In the given list, integer `4` appears three times, integer `6` appears thrice, and integer `7` appears once. Thus, the output is `[4, 6, 7]`.","solution":"def find_odds(arr): Returns a list of integers that appear an odd number of times in the input list. from collections import Counter counts = Counter(arr) return [num for num, count in counts.items() if count % 2 != 0]"},{"question":"Sarah is working on a project to analyze text messages. She wants to implement a feature that counts the occurrences of each word in a given text message. The text message is a single string consisting of lowercase English letters and spaces, where words are separated by a single space. Write a program that reads a text message and outputs the words along with their frequency of occurrences in the text message. The output should display each unique word followed by its count, in the order of their first appearance in the text. Note: - You should ignore and not count any leading or trailing spaces in the text. - There will be no punctuation in the text message. - The words should be case-insensitive (i.e., treating \'Hello\' and \'hello\' as the same word). -----Input----- A single line containing the text message. The length of the text message will not exceed 100000 characters. -----Output----- For each unique word in the text message, output the word followed by its count on a new line. The words should appear in the order of their first occurrence in the text. -----Examples----- Sample Input 1: hello world hello everyone Sample Output 1: hello 2 world 1 everyone 1 Sample Input 2: this is a test this is only a test Sample Output 2: this 2 is 2 a 2 test 2 only 1","solution":"def count_word_occurrences(text): Counts the occurrences of each word in a given text message. words = text.lower().strip().split() word_count = {} word_order = [] for word in words: if word not in word_count: word_order.append(word) word_count[word] = 1 else: word_count[word] += 1 result = [(word, word_count[word]) for word in word_order] return result"},{"question":"You are given an initially empty string. You then receive a series of operations, each operation is one of the following: - Append a lowercase letter to the end of the string. - Query for the longest prefix of the string that is also the suffix of the string. More formally: - \\"append c\\": Add the character \'c\' to the end of the current string. - \\"query\\": Find and output the length of the longest prefix of the current string which is also a suffix of the current string (with overlapping allowed). Your task is to implement a function that simulates these operations and provides the correct answer for each \\"query\\" operation. Input format: - The first line contains an integer, n, denoting the number of operations. - The next n lines contain either an \\"append\\" operation or a \\"query\\" operation. Output format: - For each \\"query\\" operation, print the length of the longest prefix of the current string which is also a suffix of the current string. Constraints: 1 ≤ n ≤ 10^5 For each \\"append\\" operation, \'c\' is a lowercase English letter. For each \\"query\\" operation, determine the length of the longest prefix that is also a suffix efficiently. SAMPLE INPUT 5 append a append b append a query append b query SAMPLE OUTPUT 1 2 Explanation: After the first three operations, the string is \\"aba\\". The longest prefix which is also the suffix here is \\"a\\" of length 1. After the fifth operation, the string becomes \\"abab\\". The longest prefix which is also the suffix here is \\"ab\\" of length 2.","solution":"def process_operations(n, operations): def kmp_process(s): n = len(s) lps = [0] * n length = 0 i = 1 while i < n: if s[i] == s[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps result = [] current_string = [] for operation in operations: if operation.startswith(\\"append\\"): current_string.append(operation.split()[1]) elif operation == \\"query\\": lps = kmp_process(\'\'.join(current_string)) result.append(lps[-1] if lps else 0) return result"},{"question":"You are given a string containing only digits \'0\'-\'9\' and a target value. Your task is to add binary operators (\'+\', \'-\', \'*\') between the digits so that the mathematical expression evaluates to the target value. Return all possible expressions that evaluate to the target value. Example 1: Input: num = \\"123\\" target = 6 Output: [\\"1+2+3\\", \\"1*2*3\\"] Explanation: Both \\"1+2+3\\" and \\"1*2*3\\" evaluate to 6. Example 2: Input: num = \\"232\\" target = 8 Output: [\\"2*3+2\\", \\"2+3*2\\"] Explanation: Both \\"2*3+2\\" and \\"2+3*2\\" evaluate to 8. Example 3: Input: num = \\"105\\" target = 5 Output: [\\"1*0+5\\",\\"10-5\\"] Explanation: Both \\"1*0+5\\" and \\"10-5\\" evaluate to 5. Example 4: Input: num = \\"00\\" target = 0 Output: [\\"0+0\\", \\"0-0\\", \\"0*0\\"] Explanation: All three expressions evaluate to 0. Example 5: Input: num = \\"3456237490\\" target = 9191 Output: [] Explanation: There are no expressions that can be created from \\"3456237490\\" to evaluate to 9191. Note: * The length of the input string will be at most 10. * The input string does not contain any leading zero, except the number 0 itself. * You can return the answers in any order.","solution":"def add_operators(num, target): def backtrack(index, path, value, prev): if index == len(num): if value == target: result.append(path) return for i in range(index+1, len(num)+1): temp_str = num[index:i] temp_num = int(temp_str) if index == 0: backtrack(i, temp_str, temp_num, temp_num) else: backtrack(i, path + \'+\' + temp_str, value + temp_num, temp_num) backtrack(i, path + \'-\' + temp_str, value - temp_num, -temp_num) backtrack(i, path + \'*\' + temp_str, value - prev + prev * temp_num, prev * temp_num) if num[index] == \'0\': break result = [] backtrack(0, \\"\\", 0, 0) return result"},{"question":"Mallika owns an art studio and has a collection of unique paintings. To manage her inventory, she assigns a unique ID to each painting. One day, a potential buyer asks her to provide a list of IDs of paintings that are palindromes. A palindromic ID reads the same backward as forward. Given the list of painting IDs, help Mallika identify which ones are palindromes. -----Input----- First line of input contains an integer T which denotes the number of test cases. For each test case: The first line consists of an integer N which denotes the number of paintings in the studio. The next N lines contain the unique IDs of the paintings. -----Output:----- For each test case, output the list of painting IDs that are palindromes, in the order they were provided. If there are no palindromic IDs, output \\"No palindromic IDs\\". -----Constraints:----- 1 <= T <= 100 1 <= N <= 50 Length of each painting ID will be between 1 and 100 characters, and will only contain alphanumeric characters. -----Example:----- Input: 2 5 12321 abcba notpalindrome 1234321 hello 4 racecar madam step on no pets world Output: 12321 abcba 1234321 racecar madam step on no pets","solution":"def is_palindrome(s): Check if a string is a palindrome. return s == s[::-1] def find_palindromic_ids(test_cases): For each test case, find the painting IDs that are palindromes. results = [] for case in test_cases: N, ids = case palindromic_ids = [pid for pid in ids if is_palindrome(pid)] if palindromic_ids: results.append(palindromic_ids) else: results.append([\\"No palindromic IDs\\"]) return results"},{"question":"You are given a list of integers where all elements appear twice except for one element that appears only once. Your task is to find the element that appears only once. Complete the function `findUniqueElement` which takes a list of integers `arr` as input and returns the unique element that appears only once. Constraints: - The input list will always have at least one element. - The total number of elements in the list will not exceed 10^6. - Each element in the list is guaranteed to appear twice except for one unique element. Sample Input: arr = [4, 1, 2, 1, 2] Sample Output: 4 Explanation: In the given array, the element 4 appears only once, whereas all other elements appear twice. Therefore, the output is 4.","solution":"def findUniqueElement(arr): Returns the element that appears only once in the list. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"# Array Element Distances Given an array of integers, write a function `minimum_distances` that returns the minimum distance between any two identical elements in the array. If there are no such pairs, return -1. The distance between two integers `arr[i]` and `arr[j]` is defined as the absolute difference of their indices, |i - j|. **Function Signature:** ```python def minimum_distances(arr: List[int]) -> int: ``` **Example:** ```python assert minimum_distances([3, 2, 1, 2, 3]) == 2 assert minimum_distances([1, 2, 3, 4, 10]) == -1 assert minimum_distances([5, 5, 5, 5, 5]) == 1 ``` **Explanation:** In the first example, the first `3` is at index 0 and the second `3` is at index 4, so the distance is 4. The first `2` is at index 1 and the second `2` is at index 3, so the distance is 2. Therefore, the minimum distance between identical elements is 2. In the second example, there are no identical elements, so the function returns -1. In the third example, the array contains only the number `5`, so the minimum distance between any two `5`s is 1.","solution":"def minimum_distances(arr): Returns the minimum distance between any two identical elements in the array. If there are no such pairs, return -1. index_map = {} min_distance = float(\'inf\') for i, value in enumerate(arr): if value in index_map: min_distance = min(min_distance, i - index_map[value]) index_map[value] = i return min_distance if min_distance != float(\'inf\') else -1"},{"question":"You are working on a text-processing project, and one of the tasks is to determine if the words in a given sentence can be rearranged to form a palindrome. A palindrome is a word or phrase that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. You are given a sentence, and your task is to write a function that determines if the words in the sentence can be rearranged to form a palindrome. Return \\"YES\\" if it is possible and \\"NO\\" otherwise. Input: First line of input contains an integer T denoting the number of test cases. Each test case contains one line of input, which is a sentence. Output: For each test case, print \\"YES\\" if the words in the sentence can be rearranged to form a palindrome, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 50 Each sentence will contain between 1 to 100 words, inclusive. Each word will contain between 1 to 100 characters, inclusive. The sentence will not contain any punctuation, and all words will be in lowercase. SAMPLE INPUT 3 race car a man a plan a canal panama hello world SAMPLE OUTPUT YES YES NO Explanation: Test Case #1: The words can be rearranged to form the palindrome \\"racecar\\". Test Case #2: The words can be rearranged to form the palindrome \\"amanaplanacanalpanama\\". Test Case #3: It is impossible to rearrange the words to form a palindrome.","solution":"def can_form_palindrome(sentence): Determines if the words in the sentence can be rearranged to form a palindrome. # Remove spaces and ignore all non-alphanumeric characters and convert to lowercase cleaned_sentence = \'\'.join(sentence.split()) # Count the frequency of each character char_freq = {} for char in cleaned_sentence: if char in char_freq: char_freq[char] += 1 else: char_freq[char] = 1 # Check the number of characters that have odd frequencies odd_count = 0 for count in char_freq.values(): if count % 2 != 0: odd_count += 1 # If the number of odd frequencies is more than 1, it cannot form a palindrome return \\"NO\\" if odd_count > 1 else \\"YES\\" def process_tests(test_cases): Processes multiple test cases. return [can_form_palindrome(sentence) for sentence in test_cases]"},{"question":"Emma is working on a system where she needs to parse commands from a log. Each command is composed of three parts: an action, a subject, and an optional object. The possible actions are \\"MOVE\\", \\"REMOVE\\", and \\"COPY\\". The subjects are always single words composed of uppercase alphabets only. The optional objects, if present, are also single words composed of uppercase alphabets only and follow the subject after a space. Emma needs to determine if a given log contains a valid sequence of commands. The rules for a valid sequence are: 1. Each command must start with an action followed by a space and a subject. 2. The command can optionally have another space followed by an object. 3. No command should have more than three parts. 4. The sequence must not have extra spaces outside the structure of the commands. -----Input----- The first line of the input contains an integer n (1 le n le 100) — the number of log entries. The following n lines each contain a log entry represented as a string s (1 le |s| le 100). -----Output----- For each log entry, output {VALID} if the command adheres to the rules described; otherwise, output {INVALID}. -----Examples----- Input 5 MOVE BOX REMOVE BOX CHAIR COPY BOOK SHELF MOVEBOX TO DELETE FILE Output VALID VALID VALID INVALID INVALID -----Note----- In the first example, \\"MOVE BOX\\" follows the format \\"ACTION SUBJECT\\", which is valid. In the second example, \\"REMOVE BOX CHAIR\\" follows the format \\"ACTION SUBJECT OBJECT\\", which is valid. In the third example, \\"COPY BOOK SHELF\\" also follows the format \\"ACTION SUBJECT OBJECT\\", which is valid. In the fourth example, \\"MOVEBOX TO\\" does not follow the correct format as the action and subject are not separated by a space, making it invalid. In the fifth example, \\"DELETE FILE\\" is invalid as \\"DELETE\\" is not a recognized action.","solution":"def is_valid_command(command): Check if the given command is valid based on the rules: 1. Must start with an action (MOVE, REMOVE, COPY) followed by a space and a subject. 2. Optionally it can have an object after another space. 3. Should not have more than three parts (action, subject, object). actions = {\\"MOVE\\", \\"REMOVE\\", \\"COPY\\"} parts = command.split() if len(parts) < 2 or len(parts) > 3: return \\"INVALID\\" action, subject = parts[0], parts[1] if action not in actions: return \\"INVALID\\" if not subject.isalpha() or not subject.isupper(): return \\"INVALID\\" if len(parts) == 3: obj = parts[2] if not obj.isalpha() or not obj.isupper(): return \\"INVALID\\" return \\"VALID\\" def validate_commands(n, commands): results = [] for command in commands: results.append(is_valid_command(command)) return results"},{"question":"# Large Non-Mersenne Prime Mersenne primes are prime numbers that can be written in the form 2^p - 1 for some integer p. For example, 3 is a Mersenne prime because it can be expressed as 2^2 - 1. While Mersenne primes are interesting, there are also very large non-Mersenne primes. A famous example is the number given by the formula: 28433 * 2^7830457 + 1 This number is too large to be managed by conventional data types and requires arbitrary-precision arithmetic to calculate. Write a function that calculates the last ten digits of the number represented by the formula above. # Input No input needed as the problem is static. # Output The function should output a single line containing the last ten digits of the number. # Function Signature ```python def last_ten_digits() -> str: # Your code here ``` # Example ```python # This example is hypothetical and demonstrations would be based on real calculations print(last_ten_digits()) # Expected output: some string of ten digits ```","solution":"def last_ten_digits() -> str: Returns the last ten digits of the number 28433 * 2^7830457 + 1 modulo = 10**10 # We are interested in the last 10 digits base = 2 exponent = 7830457 coefficient = 28433 # Calculate the last ten digits of 2^7830457 last_ten_2_exp = pow(base, exponent, modulo) # Calculate the last ten digits of 28433 * 2^7830457 result = (coefficient * last_ten_2_exp + 1) % modulo # Return as a string return str(result).zfill(10)"},{"question":"You are given an array of integers nums. You may perform the following operation as many times as you want: - Add or subtract 1 from any element in the array. Your objective is to make all elements in the array equal to a specific integer x. Determine the minimum number of operations required to achieve this. The value of x can be any integer, but it must be the same for all array elements. Example 1: Input: nums = [1, 2, 3] Output: 2 Explanation: You can make all elements equal to 2 in 2 operations: 1 + 1 = 2, 3 - 1 = 2. Further reduction to 1 or increment to 3 would require more operations. Example 2: Input: nums = [1, 10, 2, 9] Output: 16 Explanation: You can make all elements equal to 6 in 16 operations: 1 + 5, 10 - 4, 2 + 4, 9 - 3. Any other target integer would require more operations overall. Your task: You don\'t need to read input or print anything. Your task is to complete the function minOperationsToEqual which takes an integer array nums as input and returns the minimum number of operations required to make all elements equal. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 100,000 -10^9 <= nums[i] <= 10^9","solution":"def minOperationsToEqual(nums): Given an array of integers, returns minimum number of operations to make all elements equal. Operations allowed: Add or subtract 1 from any element in the array. nums.sort() median = nums[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"Izuru University\'s Annual Coding Championship (IUACC) is known for its tough problem-solving challenges. This year, one of the tasks includes a sophisticated algorithm involving a grid of numbers. Here\'s the detailed description: You are given a grid with R rows and C columns, filled with non-negative integers. The task is to determine the maximum sum of a path from any cell in the first column to any cell in the last column. The path should only move through cells in a specific way: from a cell in the current column, you can move to one of the three adjacent cells in the next column (right, right-up, or right-down). More formally, from cell (i, j), you can move to: - (i, j + 1) - Right - (i - 1, j + 1) - Right-up (if i > 0) - (i + 1, j + 1) - Right-down (if i < R - 1) Your goal is to write a program that computes the maximum path sum possible under these rules. input The input consists of several test cases provided in the following format: R C g1,1 g1,2 ... g1,C g2,1 g2,2 ... g2,C :: gR,1 gR,2 ... gR,C The end of the input is indicated by a single line containing \\"0 0\\". R (1 ≤ R ≤ 10) indicates the number of rows, and C (1 ≤ C ≤ 100) indicates the number of columns. Each cell gi,j (0 ≤ gi,j ≤ 100) represents the value in the cell at row i and column j. Output For each dataset, your program should output the maximum path sum on a single line. Example Input 3 4 1 2 3 4 2 2 1 3 3 1 2 1 2 2 1 2 2 1 0 0 Output 12 4","solution":"def max_path_sum(grid, R, C): Returns the maximum sum of a path from any cell in the first column to any cell in the last column in a grid. # dp will store the maximum path sum upto each cell dp = [[0] * C for _ in range(R)] # Initialize the first column with the grid values for i in range(R): dp[i][0] = grid[i][0] # Build the dp table for j in range(1, C): for i in range(R): dp[i][j] = dp[i][j-1] + grid[i][j] if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j-1] + grid[i][j]) if i < R - 1: dp[i][j] = max(dp[i][j], dp[i+1][j-1] + grid[i][j]) # Find the maximum value in the last column max_sum = max(dp[i][C-1] for i in range(R)) return max_sum def process_input(input_str): lines = input_str.strip().split(\'n\') index = 0 results = [] while index < len(lines): R, C = map(int, lines[index].split()) if R == 0 and C == 0: break index += 1 grid = [] for _ in range(R): row = list(map(int, lines[index].split())) grid.append(row) index += 1 result = max_path_sum(grid, R, C) results.append(result) return results"},{"question":"# **[Chessboard Inspector](/collections/chessboard)** Chess is a popular board game with unique moves for each piece. Sometimes, it\'s necessary to determine the state of the board and analyze potential moves. We\'ll simplify the scenario to inspect potential knight moves. A knight in chess moves in an L-shape: it can move two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Given an 8x8 chessboard, each square can be identified using a letter (A to H) for the column and a number (1 to 8) for the row. # **Task** Write a function to determine all possible valid moves for a knight from a given position on an 8x8 chessboard. - **Input** - A string denoting the knight\'s current position (e.g., \\"E4\\"). - **Output** - A list of strings representing all valid positions the knight can move to, sorted lexicographically. # **Example** ``` \\"Input: \\"E4\\" Output: [\\"C3\\", \\"C5\\", \\"D2\\", \\"D6\\", \\"F2\\", \\"F6\\", \\"G3\\", \\"G5\\"] Input: \\"A1\\" Output: [\\"B3\\", \\"C2\\"] ``` # **Detailed Explanation** For input \\"E4\\": - The potential moves are calculated from (E, 4) as follows: ``` - Move 2 Up, 1 Left: (C, 3) - Move 2 Up, 1 Right: (G, 3) - Move 2 Down, 1 Left: (C, 5) - Move 2 Down, 1 Right: (G, 5) - Move 1 Up, 2 Left: (D, 2) - Move 1 Up, 2 Right: (F, 2) - Move 1 Down, 2 Left: (D, 6) - Move 1 Down, 2 Right: (F, 6) ``` - The results are filtered to those still on the board: ``` - Valid moves: [\\"C3\\", \\"C5\\", \\"D2\\", \\"D6\\", \\"F2\\", \\"F6\\", \\"G3\\", \\"G5\\"] ``` For input \\"A1\\": - The potential moves are calculated from (A, 1) as follows: ``` - Move 2 Up, 1 Left: (None, out of bounds) - Move 2 Up, 1 Right: (C, 2) - Move 2 Down, 1 Left: (None, out of bounds) - Move 2 Down, 1 Right: (None, out of bounds) - Move 1 Up, 2 Left: (None, out of bounds) - Move 1 Up, 2 Right: (B, 3) - Move 1 Down, 2 Left: (None, out of bounds) - Move 1 Down, 2 Right: (None, out of bounds) ``` - The results are filtered to those still on the board: ``` - Valid moves: [\\"B3\\", \\"C2\\"] ``` # **Notes** - Implement a function that validates knight moves based on the chessboard constraints. - Only positions within the boundaries of A1 to H8 are valid chessboard squares.","solution":"def knight_moves(position): Given a knight\'s position on a chessboard, return all possible moves. Parameters: position (str): The current position of the knight, e.g. \'E4\' Returns: list: A list of all valid moves the knight can make, sorted lexicographically. col, row = position[0], int(position[1]) # All possible moves a knight can make from any given position moves = [ (-2, -1), (-2, 1), (2, -1), (2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2) ] # Convert column letter to number (A=1, B=2, ..., H=8) col_to_int = ord(col) - ord(\'A\') + 1 valid_moves = [] for move in moves: new_col = col_to_int + move[0] new_row = row + move[1] # Check if the new position is within the bounds of the chessboard if 1 <= new_col <= 8 and 1 <= new_row <= 8: # Convert column number back to letter new_col_letter = chr(new_col + ord(\'A\') - 1) valid_moves.append(f\\"{new_col_letter}{new_row}\\") # Sort the moves lexicographically valid_moves.sort() return valid_moves"},{"question":"A city is planning to install a new water distribution system. The city consists of n neighborhoods arranged in a single line, and each neighborhood requires a certain amount of water each day. There are m water delivery points that can provide water to one or more adjacent neighborhoods. The water delivery points have specific capacities, meaning each delivery point i can supply up to c_i liters of water per day. Write a program to check if it is possible to meet the water demands of all neighborhoods using the available water delivery points. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of neighborhoods and the number of water delivery points. The second line contains n integers (1 le w_i le 1000) — the water demand of the i-th neighborhood. The third line contains m integers (1 le c_i le 10000) — the water capacity of the i-th water delivery point. The fourth line contains m pairs of integers (x_i, y_i) (1 le x_i le y_i le n), representing the neighborhoods that can be supplied by each delivery point i. -----Output----- Print YES if it is possible to meet the water demands of all neighborhoods with the given delivery points and their capacities, NO otherwise. -----Example----- Input 4 2 3 2 2 1 5 4 1 2 3 4 Output YES Explanation - The first water delivery point can supply up to 5 liters of water, which is enough for neighborhoods 1 and 2 whose total demand is 3 + 2 = 5 liters. - The second water delivery point can supply up to 4 liters of water, which is enough for neighborhoods 3 and 4 whose total demand is 2 + 1 = 3 liters.","solution":"def can_meet_water_demand(n, m, water_demands, capacities, ranges): Determines if the water demands of all neighborhoods can be met with the delivery points available. Args: n (int): Number of neighborhoods. m (int): Number of water delivery points. water_demands (list[int]): List of water demands for each neighborhood. capacities (list[int]): List of capacities for each water delivery point. ranges (list[tuple[int, int]]): List of ranges (inclusive) that each delivery point can supply. Returns: str: \\"YES\\" if water demands can be met, otherwise \\"NO\\". # Initialize water needs array for neighborhoods needs = water_demands[:] # Distribute water according to capacities and supply ranges for i in range(m): capacity = capacities[i] x, y = ranges[i] total_demand = sum(needs[x-1:y]) if total_demand <= capacity: for j in range(x-1, y): needs[j] = 0 else: remaining_capacity = capacity for j in range(x-1, y): if needs[j] <= remaining_capacity: remaining_capacity -= needs[j] needs[j] = 0 else: needs[j] -= remaining_capacity remaining_capacity = 0 break # Check if all water demands are met return \\"YES\\" if all(need == 0 for need in needs) else \\"NO\\""},{"question":"Write a function `count_vowels` that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. Vowels can be in upper or lower case, and both should be counted. For instance: ```python count_vowels(\\"hello world\\") => 3 count_vowels(\\"HELLO\\") => 2 count_vowels(\\"Python programming\\") => 4 ``` ```c# using Kata; \\"hello world\\".CountVowels(); // => 3 \\"HELLO\\".CountVowels(); // => 2 \\"Python programming\\".CountVowels(); // => 4 ``` Don\'t forget to rate this kata! Thanks :)","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the string `s`. Vowels can be in upper or lower case. vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Alex the Mathematician is studying a special sequence of numbers defined as follows: - The sequence starts with any non-negative integer. - The next number in the sequence is found by summing the squares of its digits. The process is repeated until the sequence either reaches the number 1, or it loops endlessly instead of getting to 1. If the sequence reaches 1, it is called a Happy Number. For example, starting with 19: 19 -> 1^2 + 9^2 = 82 82 -> 8^2 + 2^2 = 68 68 -> 6^2 + 8^2 = 100 100 -> 1^2 + 0^2 + 0^2 = 1 (19 is a Happy Number) For example, starting with 20: 20 -> 2^2 + 0^2 = 4 4 -> 4^2 = 16 16 -> 1^2 + 6^2 = 37 37 -> 3^2 + 7^2 = 58 58 -> 5^2 + 8^2 = 89 89 -> 8^2 + 9^2 = 145 145 -> 1^2 + 4^2 + 5^2 = 42 42 -> 4^2 + 2^2 = 20 (loop detected, 20 is not a Happy Number) You need to determine for each given number if it is a Happy Number. If it is, Alex will be very excited. Otherwise, he feels sad. -----Input:----- First line will contain a positive Integer T which is the number of testcases. Next T lines follow, each containing an Integer N. -----Output:----- For every N, you should print \\"ALEX IS HAPPY\\" without quotes if it is a Happy Number, otherwise print \\"ALEX IS SAD\\" without quotes. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^6 -----Sample Input:----- 3 19 20 7 -----Sample Output:----- ALEX IS HAPPY ALEX IS SAD ALEX IS HAPPY -----EXPLANATION:----- For test case 1 --> 19 is a Happy Number as it eventually reaches 1. For test case 2 --> 20 is not a Happy Number as it loops endlessly without reaching 1. For test case 3 --> 7 is a Happy Number as it follows the sequence and eventually reaches 1.","solution":"def is_happy_number(n: int) -> bool: Determines if the number n is a happy number. def get_next(number): total_sum = 0 while number > 0: number, digit = divmod(number, 10) total_sum += digit ** 2 return total_sum seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1 def check_numbers(numbers): results = [] for number in numbers: if is_happy_number(number): results.append(\\"ALEX IS HAPPY\\") else: results.append(\\"ALEX IS SAD\\") return results"},{"question":"Given an integer N, you are required to construct an N x N matrix such that each element in the matrix is the product of its row and column indices (starting from 1). -----Constraints----- - N is an integer between 1 and 20 (inclusive). -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the N x N matrix such that each element at position (i, j) is the product of i and j. Each row of the matrix should be printed on a new line with space-separated integers. -----Sample Input----- 3 -----Sample Output----- 1 2 3 2 4 6 3 6 9 In this sample, N is 3, so we need to construct a 3 x 3 matrix. Each element is the product of its row and column indices: - Matrix[1][1] = 1 * 1 = 1 - Matrix[1][2] = 1 * 2 = 2 - Matrix[1][3] = 1 * 3 = 3 - Matrix[2][1] = 2 * 1 = 2 - Matrix[2][2] = 2 * 2 = 4 - Matrix[2][3] = 2 * 3 = 6 - Matrix[3][1] = 3 * 1 = 3 - Matrix[3][2] = 3 * 2 = 6 - Matrix[3][3] = 3 * 3 = 9","solution":"def construct_matrix(N): Constructs an N x N matrix such that each element in the matrix is the product of its row and column indices (starting from 1). Args: N (int): The size of the matrix (1 <= N <= 20). Returns: list of list of int: The constructed N x N matrix. matrix = [] for i in range(1, N + 1): row = [] for j in range(1, N + 1): row.append(i * j) matrix.append(row) return matrix def print_matrix(matrix): Prints the N x N matrix with each row on a new line and space-separated integers. Args: matrix (list of list of int): The matrix to print. for row in matrix: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": import sys input = sys.stdin.read N = int(input().strip()) matrix = construct_matrix(N) print_matrix(matrix)"},{"question":"You are given a sequence of N integers, and your task is to find a contiguous subarray of length K such that the sum of the subarray is maximized. If there are multiple subarrays with the same maximum sum, return the one that appears first. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and K. - The second line contains N space-separated integers. -----Output----- For each test case, print K space-separated integers representing the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, print the one that appears first. -----Constraints----- - 1≤ T ≤ 10 - 1≤ K ≤ N ≤ 10^5 - -10^4 ≤ integer value in array ≤ 10^4 -----Example Input----- 2 5 2 1 2 3 -1 5 6 3 4 -1 2 1 -5 4 -----Example Output----- 2 3 4 -1 2 -----Explanation----- Example case 1: The optimal subarray of length 2 with the maximum sum is [2, 3], which has the sum 5. Example case 2: The optimal subarray of length 3 with the maximum sum is [4, -1, 2], which has the sum 5.","solution":"def max_sum_subarray(test_cases): result = [] for case in test_cases: N, K, arr = case max_sum = float(\'-inf\') current_sum = sum(arr[:K]) max_subarray = arr[:K] for i in range(N - K + 1): if i != 0: current_sum = current_sum - arr[i - 1] + arr[i + K - 1] if current_sum > max_sum: max_sum = current_sum max_subarray = arr[i:i + K] result.append(max_subarray) return result def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) arr = list(map(int, lines[index + 1].split())) cases.append((N, K, arr)) index += 2 return cases def format_output(output): return \\"n\\".join(\\" \\".join(map(str, sublist)) for sublist in output)"},{"question":"Input Format The input format consists of an integer N, which is the length of a given array A, followed by N integers representing the elements of array A. This is followed by an integer Q, which is the number of queries. Each of the next Q lines contains a query in one of the following two formats: 1 x y (Update the element at index x of array A to y.) 2 l r (Compute the sum of elements in the subarray A[l:r+1].) Constraints * 1 ≤ N, Q ≤ 100000 * 0 ≤ A[i] ≤ 1000 for 0 ≤ i < N * 0 ≤ x < N * 0 ≤ l ≤ r < N * 0 ≤ y ≤ 1000 Output Format For each query of the type 2, output the sum of the elements in the specified subarray in a new line. Example Input 5 1 2 3 4 5 4 2 0 2 1 1 10 2 1 3 2 1 4 Output 6 17 22 Explanation - The first query asks for the sum of the subarray from index 0 to index 2 (1 + 2 + 3 = 6). - The second query updates the element at index 1 to 10, making the array [1, 10, 3, 4, 5]. - The third query asks for the sum of the subarray from index 1 to index 3 (10 + 3 + 4 = 17). - The fourth query asks for the sum of the subarray from index 1 to index 4 (10 + 3 + 4 + 5 = 22).","solution":"def handle_queries(N, A, Q, queries): result = [] for query in queries: if query[0] == 1: # Update operation x = query[1] y = query[2] A[x] = y elif query[0] == 2: # Sum operation l = query[1] r = query[2] result.append(sum(A[l:r+1])) return result # Example usage: # N = 5 # A = [1, 2, 3, 4, 5] # Q = 4 # queries = [(2, 0, 2), (1, 1, 10), (2, 1, 3), (2, 1, 4)] # Output: [6, 17, 22] # print(handle_queries(N, A, Q, queries))"},{"question":"You are given an integer array `arr` of length `n` and an integer `k`. You need to find the k-th largest element in the sorted order (1-based index) in the given array. If there are multiple elements with the same value, the same value should be counted separately for the purpose of finding the k-th largest. Please implement this using an efficient algorithm considering time complexity. -----Input----- The first line of the input contains two integers `n` (1 ≤ n ≤ 100 000) and `k` (1 ≤ k ≤ n). The second line contains `n` integers separated by spaces representing the array elements. The values of the array elements are between `-10^9` and `10^9` inclusive. -----Output----- Print a single integer, the k-th largest element in the sorted order of the array. -----Examples----- Input 5 2 3 2 1 5 6 Output 5 Input 6 3 8 5 7 6 9 2 Output 7 Input 4 4 1 2 3 4 Output 1 -----Note----- In the first sample, the sorted order of the array is {1, 2, 3, 5, 6}. The 2nd largest element in this order is 5. In the second sample, the sorted order of the array is {2, 5, 6, 7, 8, 9}. The 3rd largest element in this order is 7. In the third sample, the sorted order of the array is {1, 2, 3, 4}. The 4th largest element in this order is 1.","solution":"import heapq def kth_largest_element(n, k, arr): Returns the k-th largest element in the sorted order of the array. Uses a min heap of size k to find the k-th largest element. # Maintain a min-heap of size k min_heap = arr[:k] heapq.heapify(min_heap) for num in arr[k:]: if num > min_heap[0]: heapq.heappushpop(min_heap, num) return min_heap[0]"},{"question":"Given a string S, determine if it can be rearranged to form a palindrome. Return True if possible, otherwise return False. Example 1: Input: S = \\"civic\\" Output: True Example 2: Input: S = \\"ivicc\\" Output: True Example 3: Input: S = \\"hello\\" Output: False Your Task: You don\'t need to read or print anything. Your task is to complete the function canRearrangeToPalindrome() which takes S as input and returns True if S can be rearranged to form a palindrome, otherwise returns False. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) due to fixed character set size (assuming ASCII). Constraints: 1 ≤ |S| ≤ 10^5","solution":"def canRearrangeToPalindrome(S): Determines if the string S can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd count, and all other characters have even counts. Args: S (str): The input string Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise from collections import Counter # Count the occurrence of each character char_count = Counter(S) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"You are tasked with implementing a sliding window maximum algorithm. Given an integer array `nums` and a sliding window size `k`, you need to find the maximum value in each sliding window. Specifically, you need to create a function `sliding_window_max(nums, k)` that returns a list of the maximum values of each window position. # Input - An integer array `nums` of size `n` (1 ≤ `n` ≤ 10^5). - An integer `k` (1 ≤ `k` ≤ `n`): the size of the sliding window. # Output - A list of integers representing the maximum values in each sliding window of size `k`. # Example Example 1: ```python nums = [1,3,-1,-3,5,3,6,7] k = 3 ``` Output: ```python [3, 3, 5, 5, 6, 7] ``` Explanation: - Window position 1: `[1, 3, -1]` → maximum is `3` - Window position 2: `[3, -1, -3]` → maximum is `3` - Window position 3: `[-1, -3, 5]` → maximum is `5` - Window position 4: `[-3, 5, 3]` → maximum is `5` - Window position 5: `[5, 3, 6]` → maximum is `6` - Window position 6: `[3, 6, 7]` → maximum is `7` Example 2: ```python nums = [4,2,12,11,-5] k = 2 ``` Output: ```python [4, 12, 12, 11] ``` Explanation: - Window position 1: `[4, 2]` → maximum is `4` - Window position 2: `[2, 12]` → maximum is `12` - Window position 3: `[12, 11]` → maximum is `12` - Window position 4: `[11, -5]` → maximum is `11` # Note To achieve the desired time complexity, consider using a double-ended queue (deque) to keep track of indices of useful elements within the window, hence ensuring each element is processed at most twice. # Constraints Your solution should have a time complexity of O(n).","solution":"from collections import deque def sliding_window_max(nums, k): Returns the maximum values in each sliding window of size k within the list nums. q = deque() max_vals = [] for i in range(len(nums)): # Remove elements not within the window if q and q[0] == i - k: q.popleft() # Remove elements smaller than the current element nums[i] while q and nums[q[-1]] <= nums[i]: q.pop() q.append(i) # Append max value for current window if i >= k - 1: max_vals.append(nums[q[0]]) return max_vals"},{"question":"In this problem, you are provided with a log of events recorded in various systems. Each event log entry contains a unique event identifier, timestamp, event type, and event details. Your task is to process these logs and generate specific reports based on the event types. The event types are given as integers from 1 to 3. Each of these numbers corresponds to a specific type of event: - Type 1: User login events - Type 2: File access events - Type 3: Error events You can download a sample event log file from the following link: http://download4.example.com/a2/X2RZZYWXBG5VYWAL61H76ZQM/events.zip. Each event log entry is stored in a separate line in the following format: ``` id timestamp event_type event_detail ``` For instance: ``` 101 2023-05-01T12:30:45 1 User123 logged in 102 2023-05-01T12:35:00 2 User123 accessed file XYZ 103 2023-05-01T12:45:00 3 Error code 500: Internal server error ``` You need to write a program to generate a report that contains the count of each type of event occurred in the log. # Input The first line contains an integer `n` (1 ≤ n ≤ 105) — the number of event log entries. Each of the next `n` lines contains an event log entry in the format described above. # Output Print three integers separated by spaces, which are the counts of events for each type `1`, `2`, and `3` respectively in the log. # Example Input ``` 5 101 2023-05-01T12:30:45 1 User123 logged in 102 2023-05-01T12:35:00 2 User123 accessed file XYZ 103 2023-05-01T12:45:00 3 Error code 500: Internal server error 104 2023-05-01T12:46:00 1 User456 logged in 105 2023-05-01T12:50:00 2 User456 accessed file ABC ``` Output ``` 2 2 1 ``` In the example input, there are 2 events of type 1 (User login events), 2 events of type 2 (File access events), and 1 event of type 3 (Error events). Therefore, the output is `2 2 1`.","solution":"def count_event_types(n, event_logs): Given the number of log entries and the event logs, count the occurrences of each type of event. Parameters: n (int): Number of log entries event_logs (list of str): List of event log entries Returns: tuple: Count of event types 1, 2, and 3 count_type_1 = 0 count_type_2 = 0 count_type_3 = 0 for log in event_logs: event_type = int(log.split()[2]) if event_type == 1: count_type_1 += 1 elif event_type == 2: count_type_2 += 1 elif event_type == 3: count_type_3 += 1 return count_type_1, count_type_2, count_type_3"},{"question":"Weighted Graph Shortest Path You are given an undirected weighted graph with n nodes and m edges. Each edge has a positive integer weight. Your task is to find the shortest path from a given starting node s to a target node t. Input Format The input consists of multiple test cases. The first line of each test case contains two space-separated integers, n and m, the number of nodes and edges in the graph, respectively. The next m lines describe the edges in the graph. Each edge is represented by three space-separated integers u, v, and w, where u and v are the nodes connected by the edge and w is the weight of the edge. The last line of each test case contains two space-separated integers, s and t, the starting node and the target node, respectively. Constraints 1 leq n, m leq 1000 1 leq u, v, s, t leq n u neq v 1 leq w leq 10^5 All nodes are indexed starting from 1. Output Format For each test case, print a single integer, the length of the shortest path from the starting node to the target node. If there is no path from s to t, print -1. Sample Input 0 2 1 1 2 4 1 2 Sample Output 0 4 Sample Input 1 4 4 1 2 2 2 3 2 3 4 1 1 4 7 1 4 Sample Output 1 5 Explanation 1 In the first test case, there is only one edge from node 1 to node 2 with weight 4, so the shortest path is 4. In the second test case, the shortest path from node 1 to node 4 is 1 → 2 → 3 → 4 with a total weight of 5. Note: Ensure to handle multiple test cases and account for scenarios where no path exists from the start node to the target node. Use Dijkstra\'s algorithm or any other appropriate shortest path algorithm to solve the problem efficiently.","solution":"import heapq def shortest_path(n, m, edges, s, t): Finds the shortest path in an undirected weighted graph using Dijkstra\'s algorithm. :param n: Number of nodes :param m: Number of edges :param edges: List of edges where each edge is represented as a tuple (u, v, w) :param s: Starting node :param t: Target node :return: Length of the shortest path from s to t, or -1 if no such path exists # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, s)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: if neighbor not in visited: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[t] if distances[t] != float(\'inf\') else -1"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight associated with it. Find the shortest path from vertex 1 to vertex n such that the sum of the weights of the edges on the path is minimized. -----Input----- The first line contains two integers n and m (2 leq n leq 10,000, 1 leq m leq 100,000) — the number of vertices and edges in the graph, respectively. The next m lines contain three integers u, v and w (1 leq u, v leq n, 1 leq w leq 1,000) — the vertices connected by the edge and the weight of the edge. It is guaranteed that the graph is connected and that each pair (u, v) appears in the input at most once. -----Output----- Print the minimum sum of the weights of the edges on the shortest path from vertex 1 to vertex n. If there is no path from vertex 1 to vertex n, print -1. If there are multiple paths with the same minimum weight, you still only need to print the weight of one such path. -----Examples----- Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 Output 7 Input 4 2 1 2 5 3 4 7 Output -1","solution":"import heapq import sys import collections def shortest_path(n, m, edges): graph = collections.defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 return dijkstra(1, n)"},{"question":"A company is developing a new messaging app that divides messages into multiple servers based on a hash function. Each server has a maximum capacity to store messages. If a server exceeds its capacity, messages are dropped until there is enough space. Your task is to simulate the message distribution across servers and find out how many messages are successfully stored on each server after all messages have been processed. -----Constraints----- - 1 ≦ N ≦ 10^5 (number of messages) - 1 ≦ S ≦ 100 (number of servers) - 1 ≦ C ≦ 10^4 (capacity of each server) - 1 ≦ m_i ≦ 10^9 (ID of message i) -----Input----- The input is given from Standard Input in the following format: N S C m_1 m_2 ... m_N -----Output----- Print the number of successfully stored messages on each server in S lines. Each line i should contain the number of messages successfully stored on server i. -----Sample Input----- 10 3 3 1 2 3 4 5 6 7 8 9 10 -----Sample Output----- 3 3 3 - Message IDs 1, 4, 7, and 10 map to server 1, but only 3 messages can be stored due to the capacity limit. - Message IDs 2, 5, and 8 map to server 2, all of which are stored. - Message IDs 3, 6, and 9 map to server 3, all of which are stored.","solution":"def distribute_messages(N, S, C, messages): Distributes messages across servers and returns the count of successfully stored messages on each server. Parameters: N (int): Number of messages. S (int): Number of servers. C (int): Capacity of each server. messages (list of int): List of message IDs. Returns: list of int: A list of counts of successfully stored messages on each server. # Initialize a list for counting messages in each server server_counts = [0] * S for message in messages: server_index = (message - 1) % S if server_counts[server_index] < C: server_counts[server_index] += 1 return server_counts # Example usage # N = 10, S = 3, C = 3 # messages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Output should be [3, 3, 3]"},{"question":"Alice is playing a number game with her friend Bob. They have written down an array of integers. Alice wants to find out the length of the longest subarray where all the elements are the same. Help Alice by writing a program that takes an array of integers and returns the length of this longest subarray. -----Constraints----- - The length of the array: 1 leq N leq 1000 - The elements of the array: -100 leq a[i] leq 100, where 0 leq i < N -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the length of the longest subarray where all the elements are the same. -----Sample Input----- 10 1 1 2 2 2 3 3 3 3 1 -----Sample Output----- 4 In the array [1, 1, 2, 2, 2, 3, 3, 3, 3, 1], the longest subarray with the same elements is [3, 3, 3, 3] which has a length of 4.","solution":"def longest_same_subarray_length(arr): Returns the length of the longest subarray where all elements are the same. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length)"},{"question":"Neo is Elon’s best friend. Neo has a hidden binary string of length n. The binary string can either be fully even in terms of the number of \'1\'s or fully odd in terms of number of \'1\'s. An even number of \'1\'s in the string means that the count of \'1\'s is 0, 2, 4, etc., whereas an odd number of \'1\'s means the count of \'1\'s is 1, 3, 5, etc. One day, Elon challenges you to find out if the hidden binary string has an even or odd number of \'1\'s using the minimum number of queries. You are allowed to ask Neo about the parity of the number of \'1\'s in any prefix of the hidden string. Elon will provide the following information initially: - An integer n (1 ≤ n ≤ 1000) — the length of the hidden binary string. To ask a query, you need to provide an index k (1 ≤ k ≤ n), and Neo will tell you the parity of the number of \'1\'s in the prefix of length k of the hidden binary string. Specifically, Neo will respond with 0 if the sum of \'1\'s in the prefix is even, and 1 if it is odd. You need to determine whether the entire hidden binary string has an even or odd number of \'1\'s using at most 20 queries. Input The first line of input contains a single integer n — the length of the hidden binary string. Output Output \\"EVEN\\" if the number of \'1\'s in the hidden string is even, otherwise output \\"ODD\\". Interaction To ask a query, print \\"? k\\" (without quotes), where k is an integer (1 ≤ k ≤ n). Neo will respond with a single integer — 0 if the number of \'1\'s in the prefix of length k is even, and 1 if it is odd. If you have determined the parity of the whole string, print \\"EVEN\\" or \\"ODD\\" and flush the output. You can make up to 20 queries. Example Input 5 Output ? 3 0 ? 5 1 ODD Note Consider the hidden binary string is \\"10010\\". When you query \\"? 3\\", Neo responds with 0 because the prefix \\"100\\" contains 1 \'1\', which is odd. Then when you query \\"? 5\\", Neo responds with 1 because \\"10010\\" contains 2 \'1\'s, which is even. Thus, the entire string contains an even number of \'1\'s, so you would output \\"EVEN\\".","solution":"def find_parity(n): Determines whether the hidden binary string has an even or odd number of \'1\'s. print(\\"? 1\\") response = int(input()) last_response = response for k in range(2, min(n, 20) + 1): print(f\\"? {k}\\") response = int(input()) if response != last_response: print(\\"ODD\\") return last_response = response if last_response == 0: print(\\"EVEN\\") else: print(\\"ODD\\")"},{"question":"Paul and Dirk are playing a different game involving palindromic subsequences. Paul gives Dirk a string s composed only of lowercase English letters. Dirk\'s task is to find out the length of the longest palindromic subsequence that can be formed from the letters of the string s. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same forward and backward. Given a string s, your task is to help Dirk determine the length of the longest palindromic subsequence of s. Input The first and only line of input contains a string s (1 ≤ |s| ≤ 1000) consisting only of lowercase English letters. Output Output a single integer — the length of the longest palindromic subsequence of s. Examples Input bbabcbcab Output 7 Input abcd Output 1 Note In the first example, the longest palindromic subsequence is \\"bacab\\" or \\"bacabcb\\" (both with length 7). In the second example, the longest palindromic subsequence is any single character.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) if n == 0: return 0 # Create a 2D array to store lengths of palindromic subsequences dp = [[0 for _ in range(n)] for _ in range(n)] # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = 1 # Build the table for substrings of length 2 to n for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The length of the longest palindromic subsequence return dp[0][n - 1]"},{"question":"You are given a list of integers. Your task is to find the integer that appears most frequently in the list. If there are multiple integers that appear the maximum number of times, return the smallest one among them. Input First line inputs Number of test cases \'N\'. For each test case: - First line contains the number of integers \'M\' in the list. - Second line contains \'M\' space-separated integers. Output Print the most frequently occurring integer for each test case in different lines. Constraints N ≤ 20 M ≤ 1000 Each integer will be between -1000 and 1000 inclusive. SAMPLE INPUT 2 5 1 2 2 3 1 4 4 4 4 4 SAMPLE OUTPUT 1 4","solution":"from collections import Counter def most_frequent_integer(test_cases): results = [] for test in test_cases: count = Counter(test) max_frequency = max(count.values()) most_frequent = min(key for key, freq in count.items() if freq == max_frequency) results.append(most_frequent) return results def handle_input_output(): import sys input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) index += 1 test_cases = [] for _ in range(N): M = int(data[index]) index += 1 test_cases.append(list(map(int, data[index:index + M]))) index += M results = most_frequent_integer(test_cases) for result in results: print(result)"},{"question":"You have a square grid of size `n x n` filled with numbers. Each number represents the height of a building in a city. The government wants to construct a water drainage system by digging a single trench across the city. The trench can either be horizontal or vertical and affects all buildings along that row or column. To minimize the disruption, they want to dig the trench such that the sum of the heights of the affected buildings is minimized. You need to help the government determine the position of the trench and the minimal sum of the heights of the affected buildings. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 1000) – the size of the grid. The next `n` lines each contain `n` integers separated by a space, representing the heights of the buildings. -----Output----- Print two integers: the minimal sum of the heights of the affected buildings and the position of the trench. If there are multiple positions with the same sum, choose the smallest index. The position is represented by: - `r x` if the trench is dug along the `x`-th row (1-based index). - `c x` if the trench is dug along the `x`-th column (1-based index). -----Examples----- Input 3 1 2 3 4 5 6 7 8 9 Output 6 r 1 Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 10 r 1","solution":"def find_minimal_trench(n, grid): row_sums = [sum(grid[i]) for i in range(n)] col_sums = [sum(grid[i][j] for i in range(n)) for j in range(n)] min_row_sum = min(row_sums) min_col_sum = min(col_sums) if min_row_sum <= min_col_sum: position = \'r\' index = row_sums.index(min_row_sum) + 1 minimal_sum = min_row_sum else: position = \'c\' index = col_sums.index(min_col_sum) + 1 minimal_sum = min_col_sum return minimal_sum, position, index"},{"question":"You are given an array a consisting of n non-negative integers, numbered from 1 to n. You can perform the following operation no more than n times: 1. choose two integers i and j (1 ≤ i, j ≤ n; i ≠ j); 2. set a_i := a_i - 1, a_j := a_j + 1. After each operation, all elements of the array should be non-negative. Your task is to determine if you can make all elements of the array even using the allowed operations. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — the elements of the array. Output For each test case, print the answer to it as follows: * if you can make all elements even, print \\"YES\\"; * otherwise, print \\"NO\\". Example Input 4 3 1 2 3 4 2 4 6 8 2 7 5 5 0 0 0 0 1 Output YES YES YES NO","solution":"def can_make_even(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] odd_count = sum(1 for x in arr if x % 2 != 0) # Check if we can make all elements even if odd_count % 2 == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a galaxy far, far away, there exists a kingdom with n planets, numbered from 1 to n. The king wants to build a single spaceship route connecting some planets such that all planets are either directly or indirectly connected by this route. However, for strategic reasons, the king has some constraints. There are m pairs of planets (u_i, v_i) that cannot be directly connected by a spaceship route. The king must ensure that none of these forbidden connections are part of the route. Your task is to determine if it\'s possible to construct such a route and if so, to provide one example of the possible route. -----Input----- The first line contains two integers n and m (1 leq n leq 100, 0 leq m leq frac{n cdot (n - 1)}{2}), the number of planets and the number of forbidden connections. The next m lines each contain two integers u_i and v_i (1 leq u_i, v_i leq n, u_i neq v_i), representing that there should not be a direct spaceship route between planet u_i and planet v_i. -----Output----- If it is not possible to construct a valid spaceship route, print \\"NO\\". Otherwise, print \\"YES\\", followed by n - 1 lines, each containing two integers representing a direct spaceship route between two planets. The output routes must ensure all n planets are directly or indirectly connected with no forbidden routes. -----Example----- Sample Input: 4 2 1 2 3 4 Sample Output: YES 1 3 3 2 2 4","solution":"def find_route(n, m, forbidden_pairs): forbidden_set = set((min(u,v), max(u,v)) for u, v in forbidden_pairs) # Find a central planet that is not forbidden with any other planet to serve as the hub for i in range(1, n + 1): is_central_valid = True for j in range(1, n + 1): if i != j and (min(i, j), max(i, j)) in forbidden_set: is_central_valid = False break if is_central_valid: central_planet = i break else: return \\"NO\\" route = [] for i in range(1, n + 1): if i != central_planet: route.append((central_planet, i)) return \\"YES\\", route # Example usage n, m = 4, 2 forbidden_pairs = [(1, 2), (3, 4)] result = find_route(n, m, forbidden_pairs) print(result)"},{"question":"**Problem: Analysis of Similar Books** You are given a list of books. Each book is characterized by a unique identifier and a set of topics it covers. Your task is to determine the number of pairs of books that share at least one common topic. Write a function `countSimilarBooks(n, books)` that takes: 1. An integer `n` - the number of books. 2. A list of tuples `books`, where each tuple contains an integer identifier for the book and a list of topics it covers. The function should return the number of pairs of books that share at least one common topic. # Example: ```python Input: n = 4 books = [ (1, [\\"history\\", \\"math\\"]), (2, [\\"science\\", \\"math\\"]), (3, [\\"art\\"]), (4, [\\"history\\", \\"art\\"]) ] Output: 3 ``` # Explanation: The pairs of books that share at least one common topic are: 1. Book 1 and Book 2 (both share \\"math\\"). 2. Book 1 and Book 4 (both share \\"history\\"). 3. Book 3 and Book 4 (both share \\"art\\"). # Constraints: - (1 leq n leq 1000) - Each book covers at least one topic and at most 5 topics. - Topics are unique strings with a length of 1 to 20 characters. # Note: - It is guaranteed that the number of topics across all books does not exceed 5000. - You may assume that the list of topics for each book does not contain duplicates.","solution":"def countSimilarBooks(n, books): from collections import defaultdict topic_dict = defaultdict(list) # Build a dictionary where each key is a topic and the value is a list of book ids that have this topic. for book_id, topics in books: for topic in topics: topic_dict[topic].append(book_id) similar_pairs = set() # Check pairs of books for common topics for topic, book_ids in topic_dict.items(): for i in range(len(book_ids)): for j in range(i + 1, len(book_ids)): similar_pairs.add((min(book_ids[i], book_ids[j]), max(book_ids[i], book_ids[j]))) return len(similar_pairs)"},{"question":"The kingdom of ByteLand is planning to extend their electricity supply to all the villages in their domain. After assessing the geography and population distribution, they have mapped out several possibilities for laying power lines between villages. The kingdom has `n` villages (numbered from 1 to n) and there are `m` proposals for laying power lines between the villages. The i-th proposal describes laying a power line between village `u_i` and village `v_i` at a cost of `c_i`. The government aims to ensure that there will be a continuous path of power lines connecting all villages. Furthermore, they wish to achieve this with the minimum total cost. If there are multiple ways to achieve this minimal cost, they will prefer the one which minimizes the length of the longest single power line used. Given n and the description of the m proposals, print the minimum cost of connecting all villages and the length of the longest power line used in this connection. # Input Format The first line of the input will contain an integer `T`, denoting the number of test cases. Each test case will be formatted as follows: The first line of the test case will contain 2 integers, `n` and `m`. Each of the next `m` lines will contain 3 integers `u_i`, `v_i`, `c_i`. # Output Format For each test case, output two integers in a single line: 1. The minimum cost of connecting all villages. 2. The length of the longest power line used in achieving this connection. # Constraints For all files: - 1 ≤ T ≤ 5 - 1 ≤ u_i, v_i ≤ n - 1 ≤ c_i ≤ 1,000,000,000 - n - 1 ≤ m ≤ 100,000 **File 1** - 2 ≤ n ≤ 50 **File 2** - 2 ≤ n ≤ 50,000 # Sample Input ``` 2 4 5 1 2 3 1 3 1 4 3 4 2 4 5 2 3 2 3 3 1 2 5 2 3 4 3 1 7 ``` # Sample Output ``` 7 3 9 5 ``` # Explanation In the first test case, the optimal way to connect all villages with minimal total cost is to use the power lines between village 1 and 3, village 2 and 3, and village 3 and 4 with costs 1, 2, and 4 respectively. The total cost is 7, and the longest power line used has a length of 4. In the second test case, the optimal way to connect all villages with minimal total cost is to use the power lines between village 1 and 2, village 2 and 3 with costs 5 and 4 respectively. The total cost is 9, and the longest power line used has a length of 5.","solution":"def min_cost_and_max_edge(n, edges): Computes the minimum cost to connect all villages and the length of the longest power line used based on Kruskal\'s algorithm. :param n: Number of villages :param edges: List of tuples containing (u, v, c) where u and v are villages and c is the cost :return: Tuple of (minimum cost, length of the longest power line used) # Sorting by cost edges.sort(key=lambda x: x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) def find(i): if parent[i] != i: parent[i] = find(parent[i]) return parent[i] def union(i, j): root1 = find(i) root2 = find(j) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 mst_cost = 0 max_edge_in_mst = 0 edges_used = 0 for u, v, c in edges: if find(u) != find(v): union(u, v) mst_cost += c max_edge_in_mst = max(max_edge_in_mst, c) edges_used += 1 if edges_used == n - 1: break return mst_cost, max_edge_in_mst def process_test_cases(T, test_cases): results = [] for case in test_cases: n, m, edges = case results.append(min_cost_and_max_edge(n, edges)) return results"},{"question":"Given an array of positive integers, determine whether the array can be split into two subarrays such that the sum of elements in both subarrays is equal. -----Input----- The input consists of a single line containing space-separated integers representing the array ( 1 leq text{length of array} leq 10^5). Each integer value is between 1 and 10^6. -----Output----- Output \\"YES\\" if the array can be split into two subarrays with equal sums. Otherwise, output \\"NO\\". -----Examples----- Sample Input: 1 5 11 5 Sample Output: YES Sample Input: 1 2 3 5 Sample Output: NO","solution":"def can_be_split(nums): Determines whether the array can be split into two subarrays with equal sums. total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 seen_sums = set() current_sum = 0 for num in nums: current_sum += num if current_sum == target or current_sum - target in seen_sums: return \\"YES\\" seen_sums.add(current_sum) return \\"NO\\""},{"question":"You are given an array of N integers. For each integer in the array, you have to determine whether it can be expressed as a product of two distinct prime numbers. If an integer can be expressed as such a product, output \\"YES\\", otherwise output \\"NO\\". Constraints: * 1 leq N leq 10^5 * 1 leq A[i] leq 10^6 Input: * The first line contains an integer N. * The second line contains N space-separated integers A[1], A[2], ..., A[N]. Output: * Print N lines, each containing \\"YES\\" or \\"NO\\" for each corresponding integer in the array. Example: Input: 5 6 15 5 10 14 Output: YES YES NO YES YES Explanation: * 6 = 2 * 3 (YES) * 15 = 3 * 5 (YES) * 5 is a prime and cannot be expressed as a product of two distinct prime numbers (NO) * 10 = 2 * 5 (YES) * 14 = 2 * 7 (YES)","solution":"def sieve_of_eratosthenes(max_num): Sieve of Eratosthenes to find all prime numbers up to max_num. is_prime = [True] * (max_num + 1) p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, max_num + 1) if is_prime[p]] return primes def can_be_expressed_as_product_of_two_distinct_primes(n, primes): Check if a number can be expressed as a product of two distinct prime numbers. for i in range(len(primes)): if primes[i] * primes[i] > n: break for j in range(i + 1, len(primes)): if primes[i] * primes[j] > n: break if primes[i] * primes[j] == n: return True return False def check_numbers(nums): For each number in nums, check if it can be expressed as the product of two distinct prime numbers. max_num = max(nums) primes = sieve_of_eratosthenes(max_num) results = [] for num in nums: if can_be_expressed_as_product_of_two_distinct_primes(num, primes): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Read input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) nums = list(map(int, data[1:N+1])) results = check_numbers(nums) for result in results: print(result)"},{"question":"A farmer has a field that has undergone multiple rounds of irrigation. The field is represented as a grid of M rows and N columns. Each cell in the grid contains a non-negative integer representing the moisture level at that part of the field. Each hour, the moisture spreads from a cell to its adjacent cells (left, right, top, bottom) if the moisture level of the adjacent cell is less than the current cell\'s moisture level. The moisture level of the adjacent cell becomes the same as the current cell after spreading. Your task is to determine the maximum number of hours after which all cells in the grid will have the same moisture level. Constraints: 1 ≤ M, N ≤ 10 All moisture levels lie between 0 and 100. Input: The first line will contain the number of test cases, T. The second line contains two integers M and N specifying the dimensions of the grid. The following M lines each contain N integers separated by spaces representing the initial moisture levels at that cell. Output: Print T lines showing the maximum number of hours for each test case. SAMPLE INPUT 1 3 3 4 3 2 3 2 1 1 1 2 SAMPLE OUTPUT 3 Explanation: After the first hour: 4 4 3 4 3 2 1 2 2 After the second hour: 4 4 4 4 4 3 2 2 2 After the third hour: 4 4 4 4 4 4 4 4 4 So the moisture levels become the same after a maximum of 3 hours.","solution":"def max_hours_to_stabilize(field): M = len(field) N = len(field[0]) def max_diff(field): max_value = max([max(row) for row in field]) min_value = min([min(row) for row in field]) return max_value - min_value max_steps = max_diff(field) return max_steps def process_test_case(M, N, grid): return max_hours_to_stabilize(grid) def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 results = [] for _ in range(T): M = int(data[idx]) N = int(data[idx + 1]) idx += 2 grid = [] for _ in range(M): grid.append([int(x) for x in data[idx:idx + N]]) idx += N results.append(process_test_case(M, N, grid)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a parallel universe, there is a unique type of tree called a \\"Multiverse Tree\\". Each Multiverse Tree consists of `n` nodes, connected by `n-1` edges. Each edge has a unique and fixed weight. The nodes are numbered from 0 to `n-1`. The Multiverse Tree is unique in that each node, when considered as the root of the tree, generates its own universe, and the sum of the weights of all edges in that universe represents its uniqueness value. Researchers have recently realized that the universe with the highest uniqueness value holds vital information about the Multiverse Tree\'s secret powers. Your task is to determine the maximum uniqueness value of all possible universes (trees) that can be formed by considering each node as the root one by one. # Input The first line of the input contains an integer `n`, representing the number of nodes in the Multiverse Tree. (`2 ≤ n ≤ 100,000`) The next `n-1` lines each contain three integers `u`, `v`, and `w`, representing an edge between node `u` and node `v` with weight `w`. (`0 ≤ u, v < n`, `1 ≤ w ≤ 10,000`) # Output Output a single integer that represents the maximum uniqueness value of all possible universes. # Example Input ``` 4 0 1 3 1 2 2 1 3 4 ``` Output ``` 9 ``` # Explanation In the example, the Multiverse Tree has the following structure: ``` 0 | 3 | 1 / 2 3* ``` If node 1 is taken as the root, the uniqueness value is the sum of all edges: `3 + 2 + 4 = 9`. This is the highest value compared to considering other nodes as roots. # Constraints * `2 ≤ n ≤ 100,000` * `0 ≤ u, v < n` * `1 ≤ w ≤ 10,000` Your task is to write a program that computes the maximum uniqueness value for the Multiverse Tree by exploring all possible universes formed by considering each node as the root and summing the weights of all edges connected to that root.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) def find_max_uniqueness_value(n, edges): # Graph representation using adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) subtree_sum = [0] * n total_sum = [0] * n visited = [False] * n # Calculate subtree sums and the total sum def dfs1(node): visited[node] = True curr_sum = 0 for neighbor, weight in graph[node]: if not visited[neighbor]: dfs1(neighbor) curr_sum += subtree_sum[neighbor] + weight subtree_sum[node] = curr_sum visited = [False] * n def dfs2(node): visited[node] = True curr_sum = subtree_sum[node] for neighbor, weight in graph[node]: if not visited[neighbor]: curr_sum += total_sum[neighbor] total_sum[node] = curr_sum dfs1(0) visited = [False] * n dfs2(0) return max(total_sum) def parse_input_string(input_string): input_lines = input_string.strip().split(\'n\') n = int(input_lines[0]) edges = [] for line in input_lines[1:]: u, v, w = map(int, line.split()) edges.append((u, v, w)) return n, edges"},{"question":"Given a string representing a binary search tree (BST) in pre-order traversal format (node values separated by spaces), write a function to reconstruct the BST and return its root node. Your solution should create the BST node class and the main function to reconstruct the BST. Ensure your function properly handles the tree structure and maintains the BST properties. # Constraints: - All node values are unique. - The input string represents a valid pre-order traversal of a BST. - The function should construct the BST with the minimum possible number of nodes. # Example: Input: \\"8 5 1 7 10 12\\" Output: TreeNode representing the BST with structure: ``` 8 / 5 10 / 1 7 12 ``` # Function Signature: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_from_preorder(preorder: str) -> TreeNode: # your code here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_from_preorder(preorder: str) -> TreeNode: Reconstructs the BST from the given preorder traversal string. preorder_values = list(map(int, preorder.split())) if not preorder_values: return None def build_bst(preorder_values, lower=float(\'-inf\'), upper=float(\'inf\')): if not preorder_values or preorder_values[0] < lower or preorder_values[0] > upper: return None val = preorder_values.pop(0) root = TreeNode(val) root.left = build_bst(preorder_values, lower, val) root.right = build_bst(preorder_values, val, upper) return root return build_bst(preorder_values)"},{"question":"You are developing a new text editor and need to implement a feature to autocorrect common spelling mistakes. Specifically, the editor should correct occurrences of \\"teh\\" to \\"the\\" and \\"recieve\\" to \\"receive\\". However, these corrections should not be made inside quoted text or comments. A comment is a string that starts with \\"//\\" and terminates at the end of the line. A quoted text is a string enclosed in double quotation marks (\\"\\"). Input: At max. 2000 lines of text. Each line of text consists of at maximum 60 characters. Output: New text with required corrections. SAMPLE INPUT This is teh editor. // Teh comment \\"This line will not recieve correction.\\" recieve teh \\"This line has teh\\" // recieve SAMPLE OUTPUT This is the editor. // Teh comment \\"This line will not recieve correction.\\" receive the \\"This line has teh\\" // recieve Explanation \\"teh\\" is converted to \\"the\\" and \\"recieve\\" to \\"receive\\", but not inside quotes or comments.","solution":"def autocorrect(text_lines): def apply_corrections(line): corrected_line = \\"\\" inside_quote = False i = 0 while i < len(line): if line[i] == \'\\"\': inside_quote = not inside_quote corrected_line += line[i] i += 1 elif line[i:i+2] == \\"//\\" and not inside_quote: corrected_line += line[i:] break elif not inside_quote: if line[i:i+3] == \\"teh\\": corrected_line += \\"the\\" i += 3 elif line[i:i+7] == \\"recieve\\": corrected_line += \\"receive\\" i += 7 else: corrected_line += line[i] i += 1 else: corrected_line += line[i] i += 1 return corrected_line return [apply_corrections(line) for line in text_lines]"},{"question":"A company is launching a new app for tracking workout sessions. They want to analyze the workout patterns of their users. Each user logs a series of workout sessions, each with a duration in minutes. The app needs to find out if there is any user who has done at least one workout session longer than a specified duration. Given T, N, and D, your task is to check whether there is at least one user with a workout session of duration longer than D among N users. -----Input:----- - The first line contains T, the number of test cases. - The first line of each test case contains two integers N (number of users) and D (minimum duration of workout session). - The next line contains N space separated integers, B_i denoting the duration of workout sessions of the users in minutes. -----Output:----- For each test case, print a single string \\"YES\\" if there is at least one workout session of duration longer than D. Otherwise, print \\"NO\\". (Without quotes). -----Constraints:----- - 1 leq T leq 50 - 1 leq N leq 500 - 1 leq D leq 1000 - 1 leq B_i leq 1000 -----Sample Input:----- 3 4 30 10 20 30 40 5 50 55 60 50 45 35 3 10 5 10 15 -----Sample Output:----- YES YES YES","solution":"def workout_sessions(T, test_cases): results = [] for i in range(T): N, D = test_cases[i][0] durations = test_cases[i][1] if any(duration > D for duration in durations): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A website tracks the watching habits of its users and wants to create a \\"watch together\\" feature that suggests pairs of users who have enjoyed at least k of the same movies. Given a set of user-movie watch records, you need to determine the number of pairs of users who have watched at least k common movies. INPUT The first line of input contains one integer T, denoting the number of test cases. Each test case starts with two integers, U and M, denoting the number of users and the number of movies respectively. The next U lines each contain an integer ui followed by a list of mi space-separated movie IDs watched by the user. OUTPUT For each test case, output the number of user pairs who have watched at least k common movies in a single line. CONSTRAINTS 1 <= T <= 10 1 <= U <= 500 1 <= M <= 1000 1 <= ui <= 500 1 <= movie ID <= M 1 <= k <= M 1 <= mi <= M SAMPLE INPUT 1 4 5 1 1 2 3 2 1 2 3 2 3 4 1 4 5 SAMPLE OUTPUT 2 Explanation Users 1 and 2 have both watched movies 1 and 2, which is 2 movies. Users 1 and 3 have both watched movies 2 and 3, which is 2 movies. Therefore, there are 2 pairs of users who have watched at least k = 2 common movies.","solution":"def watch_together(T, test_cases): result = [] for i in range(T): U, M, user_data, k = test_cases[i] # Convert user data to a dictionary with a set of watched movies for each user user_watched = {} for user_id, movies in user_data: user_watched[user_id] = set(movies) # Compare each pair of users count_pairs = 0 user_ids = list(user_watched.keys()) for j in range(U): for l in range(j + 1, U): common_movies = user_watched[user_ids[j]].intersection(user_watched[user_ids[l]]) if len(common_movies) >= k: count_pairs += 1 result.append(count_pairs) return result"},{"question":"Write a program that helps a bookstore manage their inventory. The bookstore wants to keep track of how many books they have in stock and also find the most frequently occurring book title in their inventory. Input The input consists of multiple datasets. Each dataset starts with an integer n followed by n lines, each containing a book title. The number n will not exceed 1,000, and each title is a string of up to 100 characters. The input ends with a line containing a single 0. Output For each dataset, output the number of distinct titles in the inventory and the title that appears most frequently in the inventory. If there is a tie for the most frequently occurring title, output the lexicographically smallest title. If the inventory is empty, output two zeros. Sample Input ``` 4 Harry Potter and the Sorcerer\'s Stone The Hobbit Harry Potter and the Chamber of Secrets The Hobbit 6 To Kill a Mockingbird 1984 The Great Gatsby 1984 The Catcher in the Rye To Kill a Mockingbird 7 A Tale of Two Cities War and Peace War and Peace Moby Dick The Odyssey War and Peace Moby Dick 0 ``` Sample Output ``` 3 The Hobbit 4 1984 4 War and Peace ``` Explanation In the first dataset, there are three distinct titles, and \\"The Hobbit\\" occurs most frequently, appearing twice. In the second dataset, there are four distinct titles, and both \\"1984\\" and \\"To Kill a Mockingbird\\" occur twice. Since \\"1984\\" is lexicographically smaller than \\"To Kill a Mockingbird,\\" it is chosen as the most frequent. In the third dataset, there are four distinct titles, and \\"War and Peace\\" occurs most frequently, appearing three times.","solution":"def manage_inventory(inputs): Processes the list of book titles and returns the number of distinct titles and the most frequent one. If there\'s a tie for the most frequent book, the lexicographically smallest title is returned. results = [] index = 0 while index < len(inputs): n = int(inputs[index]) if n == 0: break index += 1 book_count = {} for _ in range(n): book_title = inputs[index] if book_title in book_count: book_count[book_title] += 1 else: book_count[book_title] = 1 index += 1 if not book_count: results.append(\\"0 0\\") continue # Determine number of distinct titles distinct_titles = len(book_count) # Determine the most frequent title and handle lexicographical order in case of a tie most_frequent_title = min((title for title in book_count if book_count[title] == max(book_count.values()))) results.append(f\\"{distinct_titles} {most_frequent_title}\\") return results"},{"question":"Write a function, `removeDuplicates` / `remove-duplicates` / `remove_duplicates` / `RemoveDuplicates`, that takes an array of integers as an argument and returns a new array with duplicate integers removed. The returned array should maintain the order of first occurrences from the original array. For example, if this array were passed as an argument: ```python [1, 2, 3, 1, 2, 4, 5, 3, 6] ``` Your function would return the following array: ```python [1, 2, 3, 4, 5, 6] ``` Similarly, for the input array: ```python [4, 4, 4, 4, 4] ``` Your function would return: ```python [4] ``` Ensure the order of elements in the returned array matches the order of their first appearances in the input array.","solution":"def remove_duplicates(arr): Returns a new array with duplicate integers removed while maintaining the order of first occurrences. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"You are given an array arr of length N consisting of integers. Your task is to return the longest subarray that starts and ends with the same element. Example 1: Input: N = 5 arr[] = {1, 2, 3, 1, 2} Output: 4 Explanation: The longest subarray that starts and ends with the same element is {1, 2, 3, 1}, which is of length 4. Example 2: Input: N = 4 arr[] = {4, 4, 4, 4} Output: 4 Explanation: The longest subarray that starts and ends with the same element is the entire array {4, 4, 4, 4}, which is of length 4. Example 3: Input: N = 6 arr[] = {5, 6, 5, 6, 5, 6} Output: 5 Explanation: The longest subarray that starts and ends with the same element is {5, 6, 5, 6, 5}, which is of length 5. Your Task: Your task is to complete the function longest_subarray(), which takes an integer N and an integer array arr as the input parameters and returns an integer denoting the length of the longest subarray that starts and ends with the same element. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6 1 <= arr[i] <= 10^9","solution":"def longest_subarray(N, arr): Returns the length of the longest subarray that starts and ends with the same element. first_occurrence = {} max_length = 1 for i in range(N): if arr[i] not in first_occurrence: first_occurrence[arr[i]] = i current_length = i - first_occurrence[arr[i]] + 1 max_length = max(max_length, current_length) return max_length"},{"question":"# Crystal Ball Prediction Welcome to the land of mysticism. You are the guardian of an ancient crystal ball. The crystal ball predicts the future using an array of numbers. Your task is to determine if these numbers follow a particular sequence. If the numbers are in a strictly increasing order, the prediction is \\"Prosperity!\\". If they are not, then the prediction is \\"Chaos!\\". Write a function that takes an array of integers as input and returns either \\"Prosperity!\\" or \\"Chaos!\\" based on the sequence. Constraints: - The array will contain between 2 and 10 integers. - All integers in the array will be distinct. Examples: ```python crystal_ball([1, 2, 3, 4, 5]) => \\"Prosperity!\\" crystal_ball([1, 3, 2, 4, 5]) => \\"Chaos!\\" crystal_ball([10, 20, 30]) => \\"Prosperity!\\" crystal_ball([5, 3, 1]) => \\"Chaos!\\" ```","solution":"def crystal_ball(numbers): Determine if the array of numbers is in a strictly increasing order. Returns: \\"Prosperity!\\" if the numbers are in strictly increasing order, otherwise \\"Chaos!\\". for i in range(1, len(numbers)): if numbers[i] <= numbers[i - 1]: return \\"Chaos!\\" return \\"Prosperity!\\""},{"question":"You are given a list of N students and their scores in an exam. Each student has a unique ID and a score. You need to determine the rank of each student based on their scores. The student with the highest score gets rank 1, the second-highest gets rank 2, and so on. If two students have the same score, they should be given the same rank, with a gap in the ranks for the next lower score. Input The input consists of multiple lines. - The first line contains an integer N (1 leq N leq 1000), the number of students. - Each of the next N lines contains two space-separated integers: the student\'s ID (1 leq ID leq 1000) and the student\'s score (0 leq score leq 100). Output For each student, output their ID and their rank, in the same order they appear in the input. The ranks should be separated by a newline, and each rank should not contain an error greater than 10^{-5}. Examples Input 5 101 93 102 89 103 89 104 94 105 91 Output 101 2 102 4 103 4 104 1 105 3 Input 3 201 70 202 70 203 80 Output 201 2 202 2 203 1 Input 4 301 75 302 75 303 75 304 60 Output 301 1 302 1 303 1 304 4","solution":"def rank_students(n, students): This function takes the number of students and a list of tuples (ID, score) and returns their rank based on scores. sorted_students = sorted(students, key=lambda x: -x[1]) ranks = {} rank = 1 current_rank = 1 previous_score = None for i, (student_id, score) in enumerate(sorted_students): if score != previous_score: rank = current_rank ranks[student_id] = rank previous_score = score current_rank += 1 return [(student_id, ranks[student_id]) for student_id, _ in students] # Example usage: # n = 5 # students = [(101, 93), (102, 89), (103, 89), (104, 94), (105, 91)] # print(rank_students(n, students))"},{"question":"You are given a grid of size N times M and you have to perform the following operation exactly K times: Choose two non-negative integers x_1 and y_1 such that 1 ≤ x_1 ≤ N and 1 ≤ y_1 ≤ M, and another pair of non-negative integers x_2 and y_2 such that 1 ≤ x_2 ≤ N and 1 ≤ y_2 ≤ M and (x_1, y_1) neq (x_2, y_2). Swap the elements G[x_1][y_1] and G[x_2][y_2]. Find the lexicographically smallest grid which can be obtained by performing this operation exactly K times. A grid G is lexicographically smaller than grid H if there exists a pair (i, j) such that G[i][j] < H[i][j] and for each valid (i\', j\') where i\' < i or (i\' = i and j\' < j), G[i\'][j\'] = H[i\'][j\']. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, M, and K. The subsequent N lines describe the grid: each line contains M space-separated integers. ------ Output ------ For each test case, print the lexicographically smallest grid which can be obtained after exactly K operations. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N, M ≤ 1000 1 ≤ K ≤ 10^6 1 ≤ G[i][j] ≤ 10^6 ------ Subtasks ------ Subtask #1 (30 points): N, M ≤ 10 Subtask #2 (70 points): original constraints ----- Sample Input 1 ------ 1 3 3 2 9 3 2 1 8 7 5 6 4 ----- Sample Output 1 ------ 1 3 2 5 6 4 9 8 7 ----- Explanation 1 ------ Example case 1: The original grid is: ``` 9 3 2 1 8 7 5 6 4 ``` Consider the following swaps: 1. Swap elements at (1,1) and (2,1). The grid now becomes: ``` 1 3 2 9 8 7 5 6 4 ``` 2. Swap elements at (2,1) and (3,1). The grid now becomes: ``` 1 3 2 5 8 7 9 6 4 ``` We can check that after exactly 2 operations, this is the lexicographically smallest grid we can obtain.","solution":"def lexicographically_smallest_grid(T, test_cases): result = [] for case in test_cases: N, M, K, grid = case # Flatten the grid flat_grid = [grid[i][j] for i in range(N) for j in range(M)] # Sort the flattened grid flat_grid.sort() # Convert back to the 2D grid format new_grid = [[0] * M for _ in range(N)] idx = 0 for i in range(N): for j in range(M): new_grid[i][j] = flat_grid[idx] idx += 1 result.append(new_grid) return result # Example usage: T = 1 test_cases = [ (3, 3, 2, [ [9, 3, 2], [1, 8, 7], [5, 6, 4] ]) ] print(lexicographically_smallest_grid(T, test_cases))"},{"question":"Alex is designing a program to find and return the longest word in a series of given strings. Your task is to write a function that, given a string, outputs the longest word in it. If there are multiple words with the same maximum length, return the first one encountered. Input First line of input contains the number of test cases (T). Each of the next T lines contains a single string consisting of lowercase letters and spaces. Output For each test case, output the longest word from the string. Constraints: 1 < T ≤ 100 1 < length of string ≤ 100 Note: - Assume words are separated by spaces. - There will be at least one word in every string. - Each word will contain only lowercase letters. SAMPLE INPUT 3 explode the possibilities coding is great fun write efficiently SAMPLE OUTPUT possibilities coding efficiently","solution":"def find_longest_word_in_string(s): Returns the longest word in a given string s. If there are multiple words with the same maximum length, return the first one encountered. words = s.split() longest_word = words[0] for word in words: if len(word) > len(longest_word): longest_word = word return longest_word def process_multiple_strings(input_list): Processes multiple strings and returns a list containing the longest word from each string. T = int(input_list[0]) output_list = [] for i in range(1, T + 1): longest_word = find_longest_word_in_string(input_list[i]) output_list.append(longest_word) return output_list"},{"question":"John\'s company issues gift cards with different denominations. Each gift card can be used once to make a purchase of any value equal to or less than its denomination. John has received several gift cards, and he wants to use them to make as many unique purchases as possible. Each purchase must use exactly one gift card. The objective is to find out the maximum number of unique purchase values that John can achieve using his gift cards. For example, if John has gift cards with denominations [2, 3, 3, 4], the unique purchases he can make are 2, 3, and 4 (note that even though there are two 3-valued cards, it only counts as one unique purchase due to their value being the same). Write a program that takes as input the denominations of the gift cards and outputs the maximum number of unique purchases John can make. # Input The input consists of multiple test cases. Each test case starts with an integer `N` (1 ≤ N ≤ 100), which represents the number of gift cards. Following this, there are `N` space-separated integers `D1, D2, ..., DN` (1 ≤ Di ≤ 100) representing the denominations of the gift cards. The end of the input is indicated by a line containing a single zero. # Output For each test case, the program should output the maximum number of unique purchases John can make using the gift cards, on a separate line. # Example Input ``` 4 2 3 3 4 3 5 5 5 6 1 2 2 4 4 4 0 ``` Output ``` 3 1 3 ```","solution":"def max_unique_purchases(gift_cards): Returns the maximum number of unique purchases that can be made using the gift cards. return len(set(gift_cards)) def process_input(input_data): Processes the input data and returns the results for each test case. results = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break gift_cards = list(map(int, lines[i + 1].split())) results.append(max_unique_purchases(gift_cards)) i += 2 return results"},{"question":"Given an integer array nums, return all possible unique subsets (the power set) of the array. The solution set must not contain duplicate subsets. Return the solution in any order. Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]] Example 2: Input: nums = [0] Output: [[],[0]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `subsets` which takes the integer array nums and its length n as inputs and returns a list of all unique subsets. Expected Time Complexity: O(2^N * N) Expected Auxiliary Space: O(2^N * N) Constraints: * 1 ≤ nums.length ≤ 10 * -10 ≤ nums[i] ≤ 10","solution":"def subsets(nums): Given a list of integers nums, returns all possible unique subsets (the power set). result = [] def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() backtrack(0, []) return result"},{"question":"A company sells products of different types through an e-commerce platform. Each product is identified by its type and price. Customers can search for products based on their type and a price range. Given a list of all products and their prices, and a list of customer queries, your task is to determine the number of products that fall within the search criteria for each query. ------ Input ------ The first line contains two space-separated integers N and Q, where N is the number of products and Q is the number of customer queries. The next N lines each contain a product type (a string of lowercase letters) followed by an integer representing the product\'s price. Each of the next Q lines contains a query in the form of a product type (a string of lowercase letters) followed by two integers L and R indicating the inclusive price range. ------ Output ------ Output Q lines where each line contains the answer to the corresponding query: the number of products of the specified type whose prices fall within the specified range. ------ Constraints ------ 1 ≤ N, Q ≤ 10^{5} 1 ≤ |product_type| ≤ 10 1 ≤ price ≤ 10^{9} 1 ≤ L ≤ R ≤ 10^{9} ------ Sample Input 1 ------ 6 2 book 15 book 20 pen 5 pen 7 pen 10 book 10 book 10 20 pen 5 10 ------ Sample Output 1 ------ 3 3 ------ Explanation 1 ------ The first query requests the number of \\"book\\" products with prices in the range [10,20]. There are three such products with prices 15, 20, and 10. The second query requests the number of \\"pen\\" products with prices in the range [5,10]. There are three such products with prices 5, 7, and 10.","solution":"def product_search(N, Q, products, queries): from collections import defaultdict # Prepare a dictionary to store products by their type product_dict = defaultdict(list) # Sort and store products based on their type and price for product_type, price in products: product_dict[product_type].append(price) for key in product_dict: product_dict[key].sort() def count_in_range(prices, L, R): # Binary search to find the count of prices within the range [L, R] from bisect import bisect_left, bisect_right start_idx = bisect_left(prices, L) end_idx = bisect_right(prices, R) return end_idx - start_idx results = [] # Process each query for query_type, L, R in queries: if query_type in product_dict: products_of_type = product_dict[query_type] count = count_in_range(products_of_type, L, R) results.append(count) else: results.append(0) return results"},{"question":"You are tasked with developing a software application for tracking monthly expenses for a small business. The software needs to allow users to record transactions and generate summary reports on demand. Each transaction has an associated date, amount, and category. Categories include expenses like \\"Rent,\\" \\"Utilities,\\" \\"Supplies,\\" and \\"Miscellaneous.\\" The application also needs to provide a way to adjust transactions in case of corrections or updates. Users can query the system to get a summary of expenses for a specific month, categorized total spending, and adjustments made to transactions during a specific month. Your goal is to implement a class `ExpenseTracker` that supports the following operations: 1. Adding a new transaction with a specified date, amount, and category. 2. Adjusting an existing transaction based on its ID, altering the amount or category. 3. Generating a summary report for a specific month, which includes: - Total expenses for each category. - List of all adjustments made during that month. Your implementation should handle up to 10,000 transactions efficiently. # Input The input consists of a series of operations to be performed on the `ExpenseTracker`: - \\"ADD\\" operation with the format: `ADD YYYY-MM-DD amount category` (where `YYYY-MM-DD` is the date, `amount` is a float, and `category` is a string). - \\"ADJUST\\" operation with the format: `ADJUST id new_amount new_category` (where `id` is the transaction ID, `new_amount` is the updated float value, and `new_category` is the updated string value). - \\"SUMMARY\\" operation with the format: `SUMMARY YYYY-MM` (where `YYYY-MM` is the year and month for which the summary is requested). # Output For each \\"SUMMARY\\" operation, output the category-wise total spending and a list of adjustments made during that month. # Example Given the following sequence of operations: ``` ADD 2023-01-01 1000.0 Rent ADD 2023-01-15 150.0 Utilities ADD 2023-01-20 200.0 Supplies SUMARY 2023-01 ADJUST 1 1100.0 Rent SUMMARY 2023-01 ``` The expected output should be: ``` Rent: 1000.0 Utilities: 150.0 Supplies: 200.0 Adjustments: [] Rent: 1100.0 Utilities: 150.0 Supplies: 200.0 Adjustments: [1] ``` # Constraints - The total number of operations will not exceed 100,000. - Dates will always be valid and within the range from `2020-01-01` to `2025-12-31`. - Transaction IDs are assigned incrementally starting from 1.","solution":"class Transaction: def __init__(self, transaction_id, date, amount, category): self.transaction_id = transaction_id self.date = date self.amount = amount self.category = category self.adjusted = False def update(self, new_amount, new_category): self.amount = new_amount self.category = new_category self.adjusted = True class ExpenseTracker: def __init__(self): self.transactions = [] self.transaction_id_counter = 1 def add_transaction(self, date, amount, category): transaction = Transaction(self.transaction_id_counter, date, amount, category) self.transactions.append(transaction) self.transaction_id_counter += 1 def adjust_transaction(self, transaction_id, new_amount, new_category): for transaction in self.transactions: if transaction.transaction_id == transaction_id: transaction.update(new_amount, new_category) break def generate_summary(self, month): summary = {} adjustments = [] for transaction in self.transactions: if transaction.date.startswith(month): summary[transaction.category] = summary.get(transaction.category, 0) + transaction.amount if transaction.adjusted: adjustments.append(transaction.transaction_id) return summary, adjustments def handle_operations(self, operations): results = [] for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": self.add_transaction(parts[1], float(parts[2]), parts[3]) elif parts[0] == \\"ADJUST\\": self.adjust_transaction(int(parts[1]), float(parts[2]), parts[3]) elif parts[0] == \\"SUMMARY\\": summary, adjustments = self.generate_summary(parts[1]) result = [f\\"{category}: {amount}\\" for category, amount in summary.items()] result.append(f\\"Adjustments: {adjustments}\\") results.append(\\"n\\".join(result)) return \\"nn\\".join(results)"},{"question":"Given a grid, the task is to find the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. The grid is of size m x n, where m is the number of rows and n is the number of columns. Input The input contains multiple datasets, each representing a grid size. Each dataset consists of two integers, m and n (1 <= m, n <= 100), separated by a space. The list of datasets is terminated by a line containing two zeros. Output For each dataset, output the number of unique paths from the top-left corner to the bottom-right corner in a line. No extra characters should occur in the output. Example Input 2 3 3 3 1 1 0 0 Output 3 6 1 Explanation 1. For a 2x3 grid, there are 3 unique paths from the top-left corner to the bottom-right corner. 2. For a 3x3 grid, there are 6 unique paths from the top-left corner to the bottom-right corner. 3. For a 1x1 grid, there is only 1 unique path from the top-left corner to the bottom-right corner.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. if m == 0 or n == 0: return 0 # Create a 2D list to store the number of paths to reach each cell dp = [[1] * n for _ in range(m)] # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given an array of integers where each element represents the maximum number of steps you can jump forward from that position. Your task is to determine if you can reach the last index starting from the first index. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the elements of the array. -----Output----- On the only line of the output print \\"YES\\" if you can reach the last index, otherwise print \\"NO\\". Do not print quotes. -----Examples----- Input 6 2 3 1 1 4 Output YES Input 5 3 2 1 0 4 Output NO","solution":"def can_reach_last_index(n, arr): Determins if you can reach the last index from the first index. max_reachable = 0 for i in range(n): if i > max_reachable: return \\"NO\\" max_reachable = max(max_reachable, i + arr[i]) if max_reachable >= n - 1: return \\"YES\\" return \\"NO\\""},{"question":"You are given a problem involving the unique identification of items in a fabrication plant. Each item is represented by a serial number composed of alphabetic characters and digits. Items are categorized based on the prefix of their serial numbers, which consists of a combination of alphabets. You can download the training set of serial numbers at the following link: http://download4.abbyy.com/b2/Y2BZ2ZWXBG5VYWAL53J76ZRM/serials.zip. The archive contains three directories with names \\"A\\", \\"B\\", \\"C\\". Directory named \\"A\\" contains serial numbers starting with any letter from \'A\' to \'M\', directory \\"B\\" contains serial numbers starting with any letter from \'N\' to \'T\', and directory \\"C\\" contains serial numbers starting with any letter from \'U\' to \'Z\'. Each serial number is completely unique. Each serial number has the following format: the initial part (prefix) contains one or more alphabetic characters, followed by a numeric part. The prefix determines the directory (\\"A\\", \\"B\\", or \\"C\\") to which the serial number belongs. You need to write a program that should indicate the corresponding directory for a given serial number. Input The input consists of a single line containing the serial number of an item. Output Print a single character — \'A\', \'B\', or \'C\', indicating the directory to which the serial number belongs. Examples Input: AC12345 Output: A Input: T789XYZ Output: B Input: UU12345678 Output: C","solution":"def determine_directory(serial_number): Determines the directory (A, B, or C) for a given serial number based on its prefix. Args: serial_number (str): The serial number of an item. Returns: str: \'A\', \'B\', or \'C\' indicating the directory to which the serial number belongs. # Check the first character of the serial number to determine the directory. first_char = serial_number[0].upper() if \'A\' <= first_char <= \'M\': return \'A\' elif \'N\' <= first_char <= \'T\': return \'B\' elif \'U\' <= first_char <= \'Z\': return \'C\' else: raise ValueError(\\"Invalid serial number format\\")"},{"question":"Vlad is a collector of rare coins, and he recently acquired n types of coins, with a_i coins of the type i (1 leq i leq n). He decides to display his coins in a sequence such that no two consecutive coins are of the same type, and he does so for his amusement. Vlad wants to know if it is possible to form such a sequence with all the coins. If it is possible, help Vlad find one possible sequence. -----Input----- The first line of input contains an integer t (1 leq t leq 10^4) — the number of test cases. The following description contains t test cases. Each test case consists of two lines: The first line contains the single number n (1 leq n leq 2 cdot 10^5) — the number of types of coins Vlad has. The second line contains n integers a_i (1 leq a_i leq 10^9) — the number of coins of type i. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- Output t lines. For each test case, if it is possible to form a sequence with no two consecutive coins of the same type, output \\"YES\\", followed by a possible sequence. If it is not possible, output \\"NO\\". You can output the answer in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will be recognized as a positive answer). -----Examples----- Input 3 2 1 1 3 3 1 2 4 2 3 1 1 Output YES 1 2 YES 1 3 1 2 1 3 YES 2 1 2 3 2 1 2 1 -----Note----- In the first example, it is possible to alternate the two types of coins as [1, 2] or [2, 1]. In the second example, one possible sequence is [1, 3, 1, 2, 1]. In the third example, a possible sequence is [2, 1, 2, 3, 2, 1, 2, 1].","solution":"def can_form_sequence(t, test_cases): results = [] for case in test_cases: n, a = case[0], case[1] max_coins = max(a) sum_coins = sum(a) if max_coins <= (sum_coins - max_coins) + 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Preparing test cases for the function t = 3 test_cases = [ (2, [1, 1]), (3, [3, 1, 2]), (4, [2, 3, 1, 1]) ] # Run the function with the above test cases result = can_form_sequence(t, test_cases) for res in result: print(res)"},{"question":"You are working as a software engineer for a company that manages a network of supply chains. The supply chain network is modeled as a grid of warehouses connected by roads. Each warehouse can store a certain amount of goods and has roads connecting to its neighboring warehouses. The goal is to find the shortest path to deliver goods from a source warehouse to a destination warehouse, considering the capacity of the roads. Your job is to write a program that determines the shortest path to deliver goods from the source warehouse to the destination warehouse. Each road has a maximum capacity, and goods can only be delivered if the road\'s capacity allows it. Input The input consists of multiple datasets. Each dataset is given in the following format: > M N > x1 y1 x2 y2 capacity > ... > sx sy dx dy quantity The first line gives two non-negative integers M (2 ≤ M ≤ 100) and N (1 ≤ N ≤ 200). M represents the number of warehouses, and N represents the number of roads connecting them. In the following N lines, each line describes a road with four integers x1, y1, x2, and y2 (-10000 ≤ x1, y1, x2, y2 ≤ 10000) representing the coordinates of the two warehouses connected by the road and an integer capacity (1 ≤ capacity ≤ 1000) which represents the maximum capacity of the road. The roads are bidirectional. The next line consists of four integers sx, sy, dx, and dy, followed by one integer quantity (1 ≤ quantity ≤ 1000), where (sx, sy) and (dx, dy) are the coordinates of the source and destination warehouses, respectively, and quantity is the amount of goods to be delivered. The end of the input is indicated by a single line containing two zeros separated by blanks. Output Output the length of the shortest path that can deliver the goods from the source warehouse to the destination warehouse for each dataset. If delivering the goods is impossible due to road capacity constraints, output -1. The output value may contain an error of 0.01 or less. In addition, the value may be displayed in any number of digits after the decimal point. Sample Input 3 3 0 0 10 0 100 10 0 10 10 50 10 10 0 10 50 0 0 10 10 50 3 4 0 0 5 0 50 5 0 5 5 30 5 5 10 5 20 0 0 0 5 100 0 0 10 5 60 0 0 Sample Output 20.0000000000 -1","solution":"import heapq import math def shortest_path(warehouses, roads, source, destination, quantity): graph = {} for (x1, y1, x2, y2, capacity) in roads: if capacity < quantity: continue if (x1, y1) not in graph: graph[(x1, y1)] = [] if (x2, y2) not in graph: graph[(x2, y2)] = [] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) graph[(x1, y1)].append(((x2, y2), distance)) graph[(x2, y2)].append(((x1, y1), distance)) min_heap = [(0, source)] distances = {node: float(\'inf\') for node in graph} distances[source] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node == destination: return round(current_distance, 10) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 def parse_input(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): M, N = map(int, lines[index].strip().split()) if M == 0 and N == 0: break index += 1 roads = [] for _ in range(N): x1, y1, x2, y2, capacity = map(int, lines[index].strip().split()) roads.append((x1, y1, x2, y2, capacity)) index += 1 sx, sy, dx, dy, quantity = map(int, lines[index].strip().split()) source = (sx, sy) destination = (dx, dy) result = shortest_path(M, roads, source, destination, quantity) results.append(f\\"{result:.10f}\\") index += 1 return results def main(): import sys input_data = sys.stdin.read() results = parse_input(input_data) for result in results: print(result)"},{"question":"Write a function that takes a list of dictionaries, where each dictionary contains the keys \'name\' and \'age\'. The function should return a list of strings in the format: \\"Name is Age years old.\\" Examples ```python [{\'name\': \'Alice\', \'age\': 30}] --> [\\"Alice is 30 years old\\"] [{\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Carol\', \'age\': 40}] --> [\\"Bob is 25 years old\\", \\"Carol is 40 years old\\"] [{\'name\': \'Dave\', \'age\': 22}, {\'name\': \'Eve\', \'age\': 28}, {\'name\': \'Frank\', \'age\': 33}] --> [\\"Dave is 22 years old\\", \\"Eve is 28 years old\\", \\"Frank is 33 years old\\"] ```","solution":"def format_people_info(people_list): Takes a list of dictionaries, where each dictionary contains the keys \'name\' and \'age\'. Returns a list of strings in the format: \\"Name is Age years old.\\" :param people_list: List[Dict[str, Union[str, int]]] - List of dictionaries with keys \'name\' and \'age\' :return: List[str] - List of formatted strings return [f\\"{person[\'name\']} is {person[\'age\']} years old\\" for person in people_list]"},{"question":"Linda Johnson is a software engineer working on a project that involves processing large datasets. One critical part of her job is to filter out unnecessary information from various logs. Each log entry consists of a unique ID, a timestamp, and a message. Linda needs a utility that will help her retrieve all log entries that fall within a specific time range. Your task is to write a function that will filter the log entries based on the given time range. The time range is inclusive of the start and end times. -----Input----- The first line contains an integer n (1 le n le 10^5), the number of log entries. The second line contains two space-separated strings start_time and end_time in the format \\"YYYY-MM-DD HH:MM:SS\\", representing the start and end of the time range respectively. Each of the next n lines contains a log entry with a unique integer ID and a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\", followed by a message. The ID and the timestamp are space-separated, and the message follows the timestamp. -----Output----- Output all the log entries that fall within the given time range, ordered by their timestamps. If no log entries fall within the given time range, print \\"No logs found\\". -----Examples----- Sample Input 1: 3 2023-01-01 10:00:00 2023-01-01 12:00:00 1 2023-01-01 09:59:59 System starting 2 2023-01-01 10:30:00 User logged in 3 2023-01-01 12:00:00 User logged out Sample Output 1: 2 2023-01-01 10:30:00 User logged in 3 2023-01-01 12:00:00 User logged out Sample Input 2: 3 2023-01-01 09:00:00 2023-01-01 09:30:00 1 2023-01-01 09:59:59 System starting 2 2023-01-01 10:30:00 User logged in 3 2023-01-01 12:00:00 User logged out Sample Output 2: No logs found","solution":"from datetime import datetime def filter_logs(n, start_time, end_time, logs): Filters log entries that fall within the specific time range [start_time, end_time]. Parameters: n (int): Number of log entries. start_time (str): The start time in the format \\"YYYY-MM-DD HH:MM:SS\\". end_time (str): The end time in the format \\"YYYY-MM-DD HH:MM:SS\\". logs (list of str): The log entries. Returns: list of str: Filtered log entries within the time range. start = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") valid_logs = [] for log in logs: log_parts = log.split(\' \', 2) log_id = log_parts[0] log_timestamp = log_parts[1] + \' \' + log_parts[2].split(\' \', 1)[0] log_message = log_parts[2].split(\' \', 1)[1] log_time = datetime.strptime(log_timestamp, \\"%Y-%m-%d %H:%M:%S\\") if start <= log_time <= end: valid_logs.append(f\\"{log_id} {log_timestamp} {log_message}\\") if not valid_logs: return [\\"No logs found\\"] return valid_logs"},{"question":"A company is trying to organize a shuffle competition where competitors must produce a shuffled version of an original list. In order to validate the shuffling, they\'ll compare the generated list with the original list to ensure the output has the same elements but in a different order. Let\'s assist them by writing a function to verify if one list is a shuffle of another. Given two lists of integers, `original` and `shuffled`, your task is to determine if `shuffled` is a valid shuffle of `original`. A `shuffled` list is considered valid only if: 1. The `shuffled` list contains exactly the same elements as `original` (with the same frequencies). 2. The `shuffled` list is not an identical copy of `original`. Input: - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case, the first line contains an integer `n` (1 ≤ n ≤ 10^4), the size of the lists. - The second line contains `n` integers separated by spaces, representing the `original` list. - The third line contains `n` integers separated by spaces, representing the `shuffled` list. Output: - For each test case, print \\"YES\\" if `shuffled` is a valid shuffle of `original`, otherwise print \\"NO\\". SAMPLE INPUT 3 5 1 2 3 4 5 2 3 1 5 4 4 1 2 3 4 1 2 3 4 6 1 1 2 2 3 3 3 1 2 1 2 3 SAMPLE OUTPUT YES NO YES Explanation: 1. The first test case: `shuffled` = [2, 3, 1, 5, 4], which contains the same elements as `original` but in a different order. Hence, the output is \\"YES\\". 2. The second test case: `shuffled` is the same as `original`. Hence, the output is \\"NO\\". 3. The third test case: `shuffled` = [3, 1, 2, 1, 2, 3] has the same elements as `original` with the same frequencies, but in a different order. Hence, the output is \\"YES\\".","solution":"def is_valid_shuffle(original, shuffled): Determines if the shuffled list is a valid shuffle of the original list. Args: original (list of int): The original list. shuffled (list of int): The shuffled list. Returns: bool: True if shuffled is a valid shuffle of original, False otherwise. if original == shuffled: return False return sorted(original) == sorted(shuffled) def validate_shuffles(test_cases): results = [] for case in test_cases: original, shuffled = case if is_valid_shuffle(original, shuffled): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a 2D grid containing \'X\' and \'O\' characters. \'X\' represents land and \'O\' represents water. You are asked to perform an operation to count the number of islands in the grid. An island is formed by connecting adjacent \'X\' horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function `numIslands(grid: List[List[str]]) -> int` that takes a 2D grid as input and returns the number of islands. # Input: - The grid is a list of lists of strings where each string is either \'X\' or \'O\'. - The dimensions of the grid are m x n, where 1 ≤ m, n ≤ 300. # Output: - An integer representing the number of islands. # Example: Input: ``` [ [\\"X\\",\\"X\\",\\"O\\",\\"O\\",\\"O\\"], [\\"X\\",\\"X\\",\\"O\\",\\"O\\",\\"O\\"], [\\"O\\",\\"O\\",\\"X\\",\\"O\\",\\"O\\"], [\\"O\\",\\"O\\",\\"O\\",\\"X\\",\\"X\\"] ] ``` Output: ``` 3 ``` # Explanation: The given grid has 3 islands: - The first island is formed by the \'X\' at positions (0,0), (0,1), (1,0), and (1,1). - The second island is formed by the \'X\' at position (2,2). - The third island is formed by the \'X\' at positions (3,3) and (3,4). # Constraints: - The input grid will always be non-empty. - You may assume that the grid contains only \'X\' and \'O\'. You are encouraged to use Depth-First Search (DFS) or Breadth-First Search (BFS) for this problem.","solution":"from typing import List def numIslands(grid: List[List[str]]) -> int: Returns the number of islands in the given 2D grid. :param grid: List[List[str]] - The grid containing \'X\' and \'O\' :return: int - The number of islands if not grid: return 0 def dfs(r, c): if r < 0 or r >= m or c < 0 or c >= n or grid[r][c] == \'O\': return grid[r][c] = \'O\' # Mark the land as visited # Explore all four directions dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) m, n = len(grid), len(grid[0]) island_count = 0 for r in range(m): for c in range(n): if grid[r][c] == \'X\': island_count += 1 dfs(r, c) return island_count"},{"question":"Eli is organizing a drone racing competition. Each participant will have a specific route that their drone needs to follow. However, the drones consume battery power at different rates depending on the route they follow. Each drone has a maximum battery capacity, and each route consists of several waypoints with specific coordinates. The battery consumption to fly from one waypoint to another is computed as the Euclidean distance between the points. Eli wants to know the maximum distance a drone can travel along the route without running out of battery. For example, consider a drone with a maximum battery capacity of 25 units and a route consisting of waypoints at coordinates (0, 0), (3, 4), (3, 0), and (0, 0). The distance between the first and second waypoint is 5 units, the second and third waypoint is 4 units, and so on. The drone can travel the entire route except the last segment, which will consume a total of 12 units of battery. -----Input----- The first line of the input contains an integer T, 1 le T le 10, the number of test cases. Each test case consists of: - The first line containing a single integer V, 1 le V le 100, the maximum battery capacity of the drone. - The second line containing a single integer W, 2 le W le 50, the number of waypoints in the route. - The next W lines each containing two integers x and y, the coordinates of each waypoint. -----Output----- For each test case, output a single integer, the maximum number of waypoints the drone can travel to without running out of battery. -----Example----- Sample Input: 1 25 4 0 0 3 4 3 0 0 0 Sample Output: 3","solution":"import math def max_waypoints(V, waypoints): Calculate the maximum number of waypoints a drone can travel without running out of battery. :param V: Maximum battery capacity. :param waypoints: List of tuples representing the coordinates of the waypoints. :return: Maximum number of waypoints the drone can travel. total_distance = 0 max_waypoints = 0 for i in range(1, len(waypoints)): distance = math.dist(waypoints[i-1], waypoints[i]) if total_distance + distance > V: break total_distance += distance max_waypoints += 1 return max_waypoints def process_input(test_cases): Processes the input and returns the outputs for all the test cases. :param test_cases: List of tuples representing the test cases. :return: List of results for each test case. results = [] for V, W, waypoints in test_cases: results.append(max_waypoints(V, waypoints)) return results"},{"question":"You are given a prefix expression (Polish notation) in the form of a string. Your task is to evaluate the expression and print its value. A prefix expression is evaluated using the following rules: 1. The operator comes before its operands. 2. The evaluation is performed from right to left. The allowed operators are `+`, `-`, `*`, and `/`. Operands are positive integers. Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of expressions you need to process. Each of the next T lines contains a valid prefix expression consisting of positive integers and operators, separated by spaces. Each prefix expression has at most 100 characters. Output For each expression, print its evaluated result on a new line. The results are guaranteed to be integer values. Example Input 3 + 3 4 - * 10 20 30 / 100 5 Output 7 170 20 Explanation For the first expression `+ 3 4`, the operation `+` is applied to the operands `3` and `4`, resulting in `7`. For the second expression `- * 10 20 30`, the multiplication `* 10 20` is evaluated first, resulting in `200`, and then `- 200 30` is evaluated, resulting in `170`. For the third expression `/ 100 5`, the operation `/` is applied to the operands `100` and `5`, resulting in `20`.","solution":"def evaluate_prefix_expression(expression): Evaluates a single prefix expression. stack = [] operators = {\'+\', \'-\', \'*\', \'/\'} # Split the expression by space and reverse it to process it right to left tokens = expression.split()[::-1] for token in tokens: if token not in operators: # Push number onto the stack stack.append(int(token)) else: # Pop two operands from stack and apply operator operand1 = stack.pop() operand2 = stack.pop() if token == \'+\': result = operand1 + operand2 elif token == \'-\': result = operand1 - operand2 elif token == \'*\': result = operand1 * operand2 elif token == \'/\': result = operand1 // operand2 # Use integer division # Push the result back onto the stack stack.append(result) return stack.pop() def evaluate_prefix_expressions(expressions): Evaluates multiple prefix expressions. results = [] for expression in expressions: result = evaluate_prefix_expression(expression) results.append(result) return results def process_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) expressions = input_lines[1:T + 1] return evaluate_prefix_expressions(expressions)"},{"question":"Alex is preparing for a coding competition, and he needs your help to solve a problem to sharpen his skills. The problem is about finding the smallest positive integer that cannot be represented as the sum of any subset of a given array of positive integers. Given an array of positive integers, you need to determine the smallest positive integer that cannot be formed using the sum of any subset of the array. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the array. Output Print a single number — the smallest positive integer that cannot be represented as the sum of any subset of the given array. Examples Input 3 1 2 3 Output 7 Input 4 1 1 1 1 Output 5 Input 5 1 2 5 10 20 Output 4 Note In the first example, the sums of all possible subsets of the array are: 0, 1, 2, 3, 3, 4, 5, and 6. Hence, the smallest positive integer that cannot be obtained is 7. In the second example, the sums of all possible subsets are: 0, 1, 2, 3, and 4. Therefore, the smallest positive integer that cannot be obtained is 5. In the third example, the sums of all possible subsets are: 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 23, 25, 27, 30, and 35. Hence, the smallest positive integer that cannot be obtained is 4.","solution":"def smallest_positive_missing_integer(arr): arr.sort() # Sorts the array in non-decreasing order result = 1 # Initialize the smallest positive integer that cannot be formed for num in arr: if num > result: break result += num return result"},{"question":"Alice and Bob are playing a game related to Fibonacci numbers. They alternate turns, with Alice going first. In each turn, a player must pick one Fibonacci number from an array (which is a subarray of the initial list of Fibonacci numbers) and divide it by another Fibonacci number (greater than 1) such that the result remains an integer and replace the selected number with the result in the array. If a player cannot make a move, they lose, and the other player wins. The initial array of Fibonacci numbers is formed by the sequence F(1), F(2), dots, where F(1) = 1, F(2) = 2, F(3) = 3, dots. The sequence always starts from F(1) and goes up to some F(n). F(n) denotes the n-th Fibonacci number in the sequence. Your goal is to determine the winner if both players play optimally. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer m (1 le m le 10^5) — the number of Fibonacci numbers Alice and Bob can pick from such that the sequence of Fibonacci numbers is F(1), F(2), dots, F(m). -----Output----- For each test case, print the name of the winner (\\"Alice\\" or \\"Bob\\"). -----Example----- Input 2 5 8 Output Alice Bob -----Explanation----- The first five Fibonacci numbers are [1, 2, 3, 5, 8]. In the first turn, Alice can only select the number 1, and since 1 cannot be divided by any greater Fibonacci number (as the problem\'s rule), Alice loses, and Bob wins. The first eight Fibonacci numbers are [1, 2, 3, 5, 8, 13, 21, 34]. Alice can ensure she never picks a number that cannot be divided further, leading Bob to a forced losing move. Hence, Bob will lose if both play optimally, making Alice the winner.","solution":"def determine_winner(t, test_cases): Determines the winner of the game for each test case. Args: t (int): Number of test cases. test_cases (list[int]): The list containing the number of Fibonacci numbers for each test case. Returns: list[str]: List containing the winner (\\"Alice\\" or \\"Bob\\") for each test case. # A precomputed list of the first few Fibonacci numbers fib = [1, 2] while fib[-1] <= 10**9: fib.append(fib[-1] + fib[-2]) results = [] for m in test_cases: # Bob wins if Alice is forced to deal with the initial \\"1, 2\\" scenario # This is true when m is odd (due to the \\"indexing strategy\\" turns) if m % 2 == 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"You are given a list of integers representing the amount of gold in each treasure chest. A single pirate wants to steal gold from these chests but has some conditions to follow: - The pirate can only steal gold from every alternate chest starting from the first one or from the second one. This means the pirate can either select the chests at even positions or chests at odd positions in the list. - The pirate wants to maximize the amount of gold stolen. Write a function to determine the maximum amount of gold the pirate can steal. Input: An integer N representing the number of chests, where 1 ≤ N ≤ 100. A list of N integers G, where each integer represents the amount of gold in the respective chest (1 ≤ G[i] ≤ 100). Output: Return an integer representing the maximum amount of gold the pirate can steal. Sample Input: 6 2 3 5 7 1 4 Sample Output: 16 Explanation: If the pirate steals from the odd-position chests: 2 + 5 + 1 = 8 If the pirate steals from the even-position chests: 3 + 7 + 4 = 14 Since 14 is greater than 8, the pirate should steal from the even-position chests to get the maximum gold. Note: Positions are 1-based for description, but indexing in the list is 0-based for implementation.","solution":"def max_gold_to_steal(N, chests): Determines the maximum amount of gold that can be stolen from a list of chests following the rules specified. Parameters: N (int): The number of chests. chests (list): A list of integers representing the amount of gold in each chest. Returns: int: The maximum amount of gold that can be stolen. even_sum = sum(chests[i] for i in range(0, N, 2)) odd_sum = sum(chests[i] for i in range(1, N, 2)) return max(even_sum, odd_sum)"},{"question":"You are tasked with sorting a list of unique integers such that all even integers appear before all odd integers while maintaining the relative order of the even and odd integers as they appear in the original list. Consider the following example. Given the input list [3, 8, 6, 5, 2, 7, 4], the even integers 8, 6, 2, and 4 appear in the order 8, 6, 2, 4, and the odd integers 3, 5, and 7 appear in the order 3, 5, 7. The rearranged list should be [8, 6, 2, 4, 3, 5, 7]. -----Input----- The input consists of a single test case. The first line contains a single integer n (1 le n le 100), the number of integers in the list. The second line contains n unique integers, each between 1 and 1000 (inclusive), separated by spaces. -----Output----- Display the list with all even integers before odd integers while maintaining their relative order from the input. -----Examples----- Sample Input: 7 3 8 6 5 2 7 4 Sample Output: 8 6 2 4 3 5 7","solution":"def sort_even_odd(arr): Sorts the input array such that all even integers appear before all odd integers while maintaining their relative order. :param arr: List of integers :return: List of integers with evens first and odds second, maintaining relative order evens = [num for num in arr if num % 2 == 0] odds = [num for num in arr if num % 2 != 0] return evens + odds"},{"question":"You are given an array consisting of negative and non-negative integers. Your task is to make all the elements in the array non-negative with the minimum number of operations. In one operation, you can increment or decrement any element of the array by 1. -----Input----- The first line of the input contains an integer n (1 leq n leq 1000) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (-1000 leq a_i leq 1000) representing the elements of the array. -----Output----- Print a single integer — the minimum number of operations required to make all the elements of the array non-negative. -----Examples----- Input 5 -1 -2 -3 4 5 Output 6 Input 3 10 -20 30 Output 20 Input 4 -7 8 -9 6 Output 16 -----Note----- In the first example, you can increment -1 to 0, increment -2 to 0, and increment -3 to 0, which totals 1 + 2 + 3 = 6 operations. In the second example, you need 20 operations to change -20 to 0. In the third example, increment -7 to 0 (7 operations) and increment -9 to 0 (9 operations), total 7 + 9 = 16 operations.","solution":"def min_operations_to_non_negative(n, arr): Calculate the minimum number of operations required to make all elements in the array non-negative. :param n: integer, number of elements in the array :param arr: list of integers, the array elements :return: integer, minimum number of operations operations = 0 for num in arr: if num < 0: operations += abs(num) return operations"},{"question":"Rita is organizing the guest list for her party. She has already invited `n` guests and has their names recorded in a list. However, she realizes there may be duplicates on the list and she wants to know how many unique guests she has actually invited. Your task is to help Rita find out the number of unique names in her guest list. Input The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of guests Rita has invited. The next `n` lines each contain a single string, the name of a guest. Names consist of lowercase and uppercase English letters and have a maximum length of 100 characters. Output Output a single integer, the number of unique names in the guest list. Examples Input 5 Alice Bob alice BOB Charlie Output 3 Input 3 Rita Rita Rita Output 1 Note In the first example, \\"Alice\\" and \\"alice\\" are considered different names, as well as \\"Bob\\" and \\"BOB\\". Hence, the three unique names are \\"Alice\\", \\"Bob\\", and \\"Charlie\\".","solution":"def count_unique_guests(n, guest_list): Returns the number of unique names in the guest list. Parameters: n (int): Number of guests. guest_list (list): List of guest names. Returns: int: Number of unique names in the guest list. unique_names = set(guest_list) return len(unique_names)"},{"question":"**Returning Chevrolet Vehicles List** Chevrolet has issued a recall notice for one of its vehicle models. All vehicles manufactured within a specified range of years need to be collected and serviced. Your task is to determine which vehicles from a given list need to be recalled. Input: The input consists of a number of datasets. Each dataset is described as follows: ``` n s1 e1 ... sn en year1 year2 ... yearp ``` On the first line, an integer n which represents the number of inclusive year ranges provided, such that 1 ≤ n ≤ 100. Each of the following n lines contains two integers si and ei, representing the inclusive start and end years for the ith range (1 ≤ si ≤ ei ≤ 3000). The last line contains a list of integers separated by spaces, representing the manufacturing years for p vehicles in the list. (1 ≤ p ≤ 1000). Each year y (1 ≤ y ≤ 3000). Output format: For each dataset, you should determine which of the given vehicle years fall within any of the provided ranges and output them in a single line separated by spaces, in ascending order. If no vehicle year falls within the range, output \\"NONE\\". Note: The end of input is indicated by a single line with a zero. Sample Input: ``` 2 2000 2005 2010 2015 1999 2003 2007 2012 2018 1 1990 2000 1985 1990 1992 1998 2002 0 ``` Sample Output: ``` 2000 2003 2012 1985 1990 1992 1998 ``` Explanation: In the first dataset: - The ranges are 2000-2005 and 2010-2015. - The years to check are 1999, 2003, 2007, 2012, 2018. - Out of these, 2003 (2000-2005) and 2012 (2010-2015) fall within the specified ranges. In the second dataset: - The range is 1990-2000. - The years to check are 1985, 1990, 1992, 1998, 2002. - Out of these, 1985, 1990, 1992, and 1998 fall within the 1990-2000 range. Note: The end of input is indicated by a line with a zero.","solution":"def recall_chevrolet_vehicles(datasets): results = [] for dataset in datasets: n, ranges, years = dataset recall_years = set() for s, e in ranges: recall_years.update(range(s, e + 1)) recalled = sorted(year for year in years if year in recall_years) if recalled: results.append(\\" \\".join(map(str, recalled))) else: results.append(\\"NONE\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines) and lines[i] != \'0\': n = int(lines[i]) ranges = [tuple(map(int, lines[i+j+1].split())) for j in range(n)] years = list(map(int, lines[i+n+1].split())) datasets.append((n, ranges, years)) i += n + 2 return datasets"},{"question":"You are a software engineer working on a navigation system for a Mars rover. The rover\'s path is represented by a directed acyclic graph (DAG) where nodes are locations and edges are paths. The goal is to help the rover reach its designated target location efficiently. Each location has an ID from 1 to N, and there are M directed paths connecting these locations. Each path has a travel time associated with it. Your task is to find the shortest travel time from a given start location to a given target location. Constraints: - 2 ≤ N ≤ 100 - 1 ≤ M ≤ 200 - 1 ≤ travel time ≤ 100 - The graph is a DAG (there are no cycles) Input Format: The input is given in the following format: ``` N M start target u1 v1 w1 u2 v2 w2 ... uM vM wM ``` - The first line contains two integers N and M. - The second line contains two integers, the start location and the target location. - The next M lines each contain three integers u_i, v_i, and w_i, representing a directed edge from u_i to v_i with travel time w_i. Output Format: Print a single integer, the shortest travel time from the start location to the target location. If there is no path from start to target, print -1. Sample Input 1: ``` 5 6 1 5 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ``` Sample Output 1: ``` 6 ``` Explanation: The shortest path from location 1 to location 5 goes through location 3, with a total travel time of 6. Sample Input 2: ``` 4 4 1 4 1 2 5 2 3 10 3 4 1 1 3 15 ``` Sample Output 2: ``` 16 ``` Explanation: The shortest path from location 1 to location 4 goes through locations 2 and 3. Sample Input 3: ``` 4 3 1 4 1 2 4 2 3 5 3 1 6 ``` Sample Output 3: ``` -1 ``` Explanation: There is no path from location 1 to location 4.","solution":"import heapq def shortest_path(N, M, start, target, edges): from heapq import heappush, heappop import sys from collections import defaultdict, deque graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) def topological_sort(): in_degree = defaultdict(int) for u in graph: for v, _ in graph[u]: in_degree[v] += 1 zero_in_degree_queue = deque([node for node in range(1, N + 1) if in_degree[node] == 0]) topological_order = [] while zero_in_degree_queue: vertex = zero_in_degree_queue.popleft() topological_order.append(vertex) for neighbor, _ in graph[vertex]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) return topological_order top_order = topological_sort() distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[start] = 0 for node in top_order: if distances[node] != float(\'inf\'): for neighbor, weight in graph[node]: if distances[node] + weight < distances[neighbor]: distances[neighbor] = distances[node] + weight return distances[target] if distances[target] != float(\'inf\') else -1"},{"question":"Alice, a software developer, is working on optimizing a performance monitoring system. She is particularly interested in analyzing the memory consumption patterns over time. The monitoring system logs memory usage data at regular intervals and stores these logs in an array M, where M[i] represents the memory usage at the i-th interval. She wants to compress the log data by retaining only significant changes in memory usage. A significant change is defined as a change such that the absolute difference between two consecutive log entries is greater than or equal to a given threshold T. Alice wants to create a new log array that retains only the entries representing significant changes. The first entry of the original log array should always be included in the new log array. Write a function `compress_logs(N, T, M)` where: - N: an integer representing the number of intervals. - T: an integer representing the threshold for significant change. - M: a list of integers of length N representing the memory usage at each interval. The function should return the compressed log array. Input: The function takes the following inputs: 1. An integer N (1 ≤ N ≤ 10^5) representing the number of intervals. 2. An integer T (0 ≤ T ≤ 10^4) representing the threshold for significant change. 3. A list of N integers M (0 ≤ M[i] ≤ 10^6) representing the memory usage at each interval. Output: The function should return a list of integers representing the compressed log array. Example: compress_logs(5, 10, [100, 115, 120, 105, 130]) Output: [100, 115, 105, 130] Explanation: - The first entry, 100, is always included. - 115 is included because the change from 100 to 115 is 15 (≥ 10). - 120 is not included because the change from 115 to 120 is 5 (< 10). - 105 is included because the change from 115 to 105 is 10 (≥ 10). - 130 is included because the change from 105 to 130 is 25 (≥ 10).","solution":"def compress_logs(N, T, M): Compresses the memory usage log to retain only significant changes. Parameters: - N: int, number of intervals. - T: int, threshold for significant change. - M: list of int, memory usage at each interval. Returns: - List of int, compressed log array. # Initialize the compressed log with the first memory usage entry compressed_log = [M[0]] # Iterate over the list starting from the second element for i in range(1, N): # Check if the absolute difference is greater than or equal to the threshold if abs(M[i] - compressed_log[-1]) >= T: compressed_log.append(M[i]) return compressed_log"},{"question":"Alice loves playing with sequences of numbers. Given a sequence of integers, she wants to find the length of the longest subsequence where each element is at least double its predecessor. She finds this puzzle particularly interesting. Write a function `longest_double_subsequence(arr)` that takes in a list of integers `arr` and returns the length of the longest subsequence such that every element in the subsequence is at least twice as large as the element preceding it. # Example ```python longest_double_subsequence([3, 5, 6, 13, 26, 50]) => 4 # The longest subsequence is [3, 6, 13, 26] longest_double_subsequence([1, 2, 4, 8, 16]) => 5 # The entire sequence is the longest subsequence [1, 2, 4, 8, 16] longest_double_subsequence([5, 1, 2, 3, 5, 8, 16]) => 4 # One possible subsequence is [1, 2, 5, 16] longest_double_subsequence([7, 6, 5, 4, 3, 2, 1]) => 1 # The longest subsequence is any single element, since no element is at least double the preceding one. ``` # Input: - A list of integers `arr` where `1 <= len(arr) <= 1000`. # Output: - An integer representing the length of the longest subsequence where each element is at least double its predecessor. # Constraints: 1. The sequence can contain positive integers only. 2. A single element is considered a valid subsequence. Write your implementation using the guidelines provided. Consider the efficiency of your solution to handle the upper limits of the input size effectively.","solution":"def longest_double_subsequence(arr): Function to find the length of the longest subsequence where each element is at least double its predecessor. if not arr: return 0 n = len(arr) dp = [1] * n # Initialize dp array with 1, as a single element is a valid subsequence for i in range(1, n): for j in range(i): if arr[i] >= 2 * arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"*Calculate Matrix Regions* # Overview Your task is to create a function that efficiently calculates the sum of elements within a given sub-region of a matrix. You will be given a 2D array (matrix) filled with integers, and a set of coordinates defining the top-left and bottom-right corners of a sub-region of this matrix. Your function should return the sum of all elements within the specified sub-region. # Input/Output * Input: A 2D array of integers and four integers representing the coordinates of the top-left (row1, col1) and bottom-right (row2, col2) corners of the sub-region. * Output: An integer representing the sum of all elements within the specified sub-region. # Example ```python matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] row1, col1 = 1, 1 row2, col2 = 2, 2 # The sub-region specified is: # 6 7 # 10 11 # Sum = 6 + 7 + 10 + 11 = 34 print(sum_submatrix(matrix, row1, col1, row2, col2)) # Output: 34 ``` # Constraints * The matrix will always be a rectangular shape (number of rows and columns will be consistent throughout). * The sub-region specified by the coordinates will always be valid. * The number of elements in the matrix will not exceed 10000.","solution":"def sum_submatrix(matrix, row1, col1, row2, col2): Returns the sum of elements within the specified sub-region of a matrix. Parameters: matrix (list of list of int): A 2D array of integers. row1 (int): The row index of the top-left corner of the sub-region. col1 (int): The column index of the top-left corner of the sub-region. row2 (int): The row index of the bottom-right corner of the sub-region. col2 (int): The column index of the bottom-right corner of the sub-region. Returns: int: The sum of the elements within the specified sub-region. return sum(sum(matrix[i][col1:col2+1]) for i in range(row1, row2+1))"},{"question":"Given a string containing a series of alphabetical characters, determine if it is a palindrome. A string is considered a palindrome if it reads the same forward and backward, ignoring case and non-alphabetic characters. Write a function that takes a string and returns a boolean indicating whether it is a palindrome or not. Example: ``` \\"A man, a plan, a canal, Panama\\" -> true \\"racecar\\" -> true \\"Hello, World!\\" -> false \\"Was it a car or a cat I saw?\\" -> true \\"No \'x\' in Nixon\\" -> true ```","solution":"import re def is_palindrome(s): Check if the given string s is a palindrome, ignoring case and non-alphabetical characters. Parameters: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Remove all non-alphabetic characters and convert to lowercase cleaned_str = re.sub(r\'[^A-Za-z]\', \'\', s).lower() return cleaned_str == cleaned_str[::-1]"},{"question":"A company wants to monitor the usage of its software among users. Each user is given a unique ID and a timestamp whenever they log in. They want to determine if any user logs in more than once within a given time period `k` minutes. Write a function to check if any user has logins that are within `k` minutes of each other. If such logins are found for any user, return \\"Yes\\", otherwise return \\"No\\". -----Constraints----- - 1 ≤ number of logins ≤ 10^5 - All timestamps are in minutes and are integers within the range of [0, 10^6] - 1 ≤ k ≤ 10^3 -----Input----- The input is given from Standard Input in the following format: n k id1 t1 id2 t2 ... idn tn Where `n` is the number of logins, `k` is the time period in minutes, `idi` is the user ID of the `i`-th login, and `ti` is the timestamp of the `i`-th login. -----Output----- If any user has multiple logins within `k` minutes, print \\"Yes\\". Otherwise, print \\"No\\". -----Sample Input----- 5 10 1 5 2 20 1 15 3 25 1 16 -----Sample Output----- Yes User 1 has logins at timestamps 15 and 16, which are within 10 minutes of each other, so the function returns \\"Yes\\".","solution":"def check_logins(logins, k): from collections import defaultdict # Store the logins in a dictionary where the key is the user id user_logins = defaultdict(list) for uid, timestamp in logins: user_logins[uid].append(timestamp) # Check each user\'s logins for timestamps in user_logins.values(): timestamps.sort() for i in range(len(timestamps) - 1): if timestamps[i+1] - timestamps[i] <= k: return \\"Yes\\" return \\"No\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) logins = [] for i in range(2, len(data), 2): user_id = int(data[i]) timestamp = int(data[i + 1]) logins.append((user_id, timestamp)) print(check_logins(logins, k))"},{"question":"# Description: Given a string `s` which contains only lowercase English letters and an array of pairs `indices` where each pair `(a, b)` represents a swap operation between the characters at indices `a` and `b`, your task is to return the lexicographically smallest string that can be obtained after performing all the given swap operations any number of times. Function Signature ```python def smallestStringWithSwaps(s: str, indices: List[Tuple[int, int]]) -> str: ``` Input - `s: str` - A string containing only lowercase English letters, with a length between `1` and `1000`. - `indices: List[Tuple[int, int]]` - An array of pairs where each pair `(a, b)` represents a swap operation, with `0 <= a, b < len(s)`. Output - Return the lexicographically smallest string possible after all swaps. Example ```python assert smallestStringWithSwaps(\\"dcab\\", [(0, 3), (1, 2)]) == \\"bacd\\" assert smallestStringWithSwaps(\\"cba\\", [(0, 1), (1, 2), (0, 2)]) == \\"abc\\" ``` Note - The goal is to perform the swaps any number of times to achieve the lexicographically smallest string. - You can assume that all characters are distinct within the string `s`. - You are allowed to perform the swaps in any order.","solution":"from typing import List, Tuple from collections import defaultdict def smallestStringWithSwaps(s: str, indices: List[Tuple[int, int]]) -> str: parent = list(range(len(s))) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Build the union-find data structure for x, y in indices: union(x, y) # Group all characters according to their root parent groups = defaultdict(list) for i in range(len(s)): root = find(i) groups[root].append(s[i]) # Sort each group for group in groups.values(): group.sort() # Reconstruct the output string using the sorted groups res = list(s) for i in range(len(s)): root = find(i) res[i] = groups[root].pop(0) return \'\'.join(res)"},{"question":"Alice is an enthusiastic gardener and has a garden consisting of several rows of flower beds. One day, she decided to rearrange the flowers in such a way that the beauty of the garden is maximized. The beauty of a garden is defined as the maximum number of consecutive flower beds having the same type of flowers. To help Alice, you need to determine the beauty of the garden after rearranging the flowers in each row optimally. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer n, denoting the number of flower beds in the row. The next line contains n space-separated integers, where the i-th integer denotes the type of flower in the i-th bed. ------ Output ------ For each test case, output a single integer, denoting the maximum beauty (i.e., the length of the longest consecutive subarray with the same type of flower) that can be achieved in that row. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ type of flower ≤ 10^9 ------ Sample Input 1 ------ 2 5 1 2 2 3 3 4 4 4 4 4 ------ Sample Output 1 ------ 2 4 ------ Explanation ------ Example case 1: The optimal arrangement would be [2, 2, 1, 3, 3], [3, 3, 1, 2, 2], or similar. The maximum number of consecutive identical elements is 2. Example case 2: All flower beds already have the same type of flower, thus the maximum beauty is 4.","solution":"def max_beauty_of_garden(test_cases): results = [] for flower_beds in test_cases: n = flower_beds[0] flowers = flower_beds[1] frequency = {} for flower in flowers: if flower in frequency: frequency[flower] += 1 else: frequency[flower] = 1 max_frequency = max(frequency.values()) results.append(max_frequency) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) flowers = list(map(int, lines[index + 1].split())) test_cases.append((n, flowers)) index += 2 return test_cases"},{"question":"Emily is planning a week-long trip and wants to visit a series of cities. She starts her journey from City 1 and has to travel to other cities in sequence. Each city is connected to the next by direct roads, and the travel time between cities is given in a list. Emily wants to ensure her total travel time does not exceed a given limit ( T ). Determine the maximum number of cities Emily can visit without exceeding her travel time limit ( T ). ------ Input Format ------ - The first line contains an integer ( N ) — the total number of cities. - The second line contains ( N-1 ) space-separated integers — the travel times between consecutive cities. - The third line contains a single integer ( T ) — the maximum travel time allowed. ------ Output Format ------ Output a single integer, the maximum number of cities Emily can visit starting from City 1. ------ Constraints ------ ( 2 leq N leq 1000 ) ( 1 leq text{travel times between cities} leq 1000 ) ( 1 leq T leq 10^6 ) ----- Sample Input 1 ------ 5 3 5 2 8 10 ----- Sample Output 1 ------ 3 ----- Explanation ------ Emily starts at City 1, and moves as follows: - Travel to City 2 (travel time: 3, total: 3) - Travel to City 3 (travel time: 5, total: 3 + 5 = 8) - Travel to City 4 (travel time: 2, total: 8 + 2 = 10) - No further travel is possible without exceeding the travel time limit. Therefore, Emily can visit a maximum of 4 cities including the starting city.","solution":"def max_cities(N, travel_times, T): Returns the maximum number of cities Emily can visit without exceeding the travel time limit. Arguments: N: int - The total number of cities. travel_times: list of int - The travel times between consecutive cities. T: int - The maximum travel time allowed. Returns: int - The maximum number of cities Emily can visit. total_time = 0 count = 1 # including the starting city for time in travel_times: if total_time + time <= T: total_time += time count += 1 else: break return count"},{"question":"A factory manufacturing all kinds of items wants to track the number of ways to construct different items using a specific method. Each item can be constructed using either one of the two processes over a sequence of steps. The steps can be either process A or process B. The overall sequence\'s length can be very large, so an efficient algorithm is needed. The factory’s engineer has come up with the dynamic programming approach but needs assistance implementing it correctly. You are given a number n which represents the number of steps in the sequence. Calculate the total number of unique sequences of processes A and B that can construct an item of length n. Note that the result can be very large, so return it modulo 10^9 + 7. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^18) — the length of the sequence. -----Output----- Output the number of unique sequences of processes A and B of length n, modulo 10^9 + 7. -----Examples----- Input 3 Output 8 Input 1 Output 2","solution":"MOD = 10**9 + 7 def matrix_mult(A, B, mod=MOD): Multiplies two matrices A and B under modulo. return [[(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod]] def matrix_pow(matrix, power, mod=MOD): Computes the power of a matrix under modulo using exponentiation by squaring. result = [[1, 0], [0, 1]] base = matrix while power: if power % 2: result = matrix_mult(result, base, mod) base = matrix_mult(base, base, mod) power //= 2 return result def count_sequences(n): if n == 0: return 1 # The transformation matrix for the recurrence relation transformation_matrix = [[2, 0], [0, 2]] # Using matrix exponentiation to compute transformation_matrix^n % MOD result_matrix = matrix_pow(transformation_matrix, n, MOD) # The result is in the top-left cell of the resulting matrix return result_matrix[0][0]"},{"question":"Marcus is trying to organize his coin collection. He has a collection of N coins, each of which has a different year of minting. Marcus decides to arrange them in a line such that the difference in the minting year between any two adjacent coins is minimized. Marcus is curious about the total year differences of his optimal arrangement. Can you help him by writing a program to find this total difference? -----Input----- The input consists of a single integer N (1 ≤ N ≤ 10^5) on the first line, followed by N space-separated integers, where each integer represents the minting year of a coin. The minting years are distinct and range from 1 to 10^9. -----Output----- Print the total difference in minting years between adjacent coins for the optimal arrangement. -----Examples----- Sample Input: 5 1987 2003 1995 2019 2010 Sample Output: 32 Sample Input: 3 1990 1992 1988 Sample Output: 4","solution":"def total_year_differences(N, years): Returns the total year differences between adjacent coins for the optimal arrangement. Parameters: N (int): the number of coins years (List[int]): the list of minting years of the coins Returns: int: the total year difference for the optimal arrangement # Sort the years to minimize the adjacent differences years.sort() total_difference = 0 # Calculate the total difference for adjacent coins for i in range(1, N): total_difference += years[i] - years[i - 1] return total_difference"},{"question":"A neighborhood is planning a tree-planting event and needs to determine where to plant trees along a street. The street is represented by an array of integers where a `0` represents an empty spot and a `1` represents a spot that already has a tree. Your task is to determine if it is possible to plant a given number of trees (`n`) such that no two trees are planted adjacent to each other. Write a function that takes an array of integers and an integer `n`, and returns a boolean indicating whether it is possible to plant `n` trees on the street following the given rule. **Note:** - The input array will always be valid (an array and a non-negative integer). Examples: #1: ``` canPlantTrees([1, 0, 0, 0, 1], 1) --> True ``` because there is enough space to plant one tree without violating the rule (at position 2). #2: ``` canPlantTrees([1, 0, 0, 0, 1], 2) --> False ``` because planting a second tree would force it to be adjacent to an existing tree.","solution":"def canPlantTrees(street, n): Returns whether it is possible to plant n trees on the street without any two trees being adjacent. count = 0 length = len(street) for i in range(length): if street[i] == 0: emptyLeft = (i == 0) or (street[i - 1] == 0) emptyRight = (i == length - 1) or (street[i + 1] == 0) if emptyLeft and emptyRight: street[i] = 1 count += 1 if count >= n: return True return count >= n"},{"question":"A social network platform has implemented a feature that allows users to create networks of friends. Each user can have zero or more friends. You are asked to implement a feature that returns the largest size of a connected component (a group of users that are directly or indirectly connected) of friends in the network. **Input** The first line contains two space-separated integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) - the number of users and the number of friendship relations. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) - meaning that user u and user v are friends. **Output** Print a single integer - the size of the largest connected component of friends in the social network. **Examples** **Input:** ``` 5 3 1 2 2 3 4 5 ``` **Output:** ``` 3 ``` **Input:** ``` 6 5 1 2 2 3 3 4 4 5 5 6 ``` **Output:** ``` 6 ```","solution":"from collections import defaultdict, deque def largest_connected_component(n, m, friendships): def bfs(node): queue = deque([node]) visited[node] = True count = 1 while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: queue.append(neighbor) visited[neighbor] = True count += 1 return count # Build the adjacency list for the graph graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) # Initialize visited array visited = [False] * (n + 1) # Find the largest connected component largest_component_size = 0 for user in range(1, n + 1): if not visited[user]: largest_component_size = max(largest_component_size, bfs(user)) return largest_component_size"},{"question":"Write a program to rotate an NxN matrix 90 degrees clockwise. Given an NxN matrix of integers, your task is to rotate the matrix 90 degrees in the clockwise direction and print the resulting matrix. Constraints * 1 ≤ N ≤ 100 * -1000 ≤ an element of the matrix ≤ 1000 Input In the first line, a single integer N is given. Next, the NxN matrix is given by N lines, each of which consists of N integers separated by space characters. Output Print the rotated matrix, each line containing N integers separated by a space. Example Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Function to rotate an NxN matrix 90 degrees clockwise. Parameters: matrix (list of list of int): NxN matrix to be rotated Returns: list of list of int: Rotated NxN matrix N = len(matrix) rotated = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated[j][N - 1 - i] = matrix[i][j] return rotated def stringify_matrix(matrix): Convert matrix to a string representation. Parameters: matrix (list of list of int): Matrix to be converted Returns: str: String representation of the matrix result = \'n\'.join(\' \'.join(map(str, row)) for row in matrix) return result"},{"question":"In a rectangular grid with R rows and C columns, there is a robot initially placed at the top-left corner of the grid (cell (1, 1)). The robot can only move in two directions: right or down. The robot moves to reach the bottom-right corner of the grid (cell (R, C)) while collecting coins placed in some of the cells. The robot wants to collect the maximum number of coins possible during its journey. You are given the number of rows R, the number of columns C, and the coordinates of the cells that contain coins. Determine the maximum number of coins the robot can collect. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers R and C. The second line contains an integer N, the number of cells that contain coins. Each of the next N lines contains two space-separated integers r and c indicating the coordinates of a cell that contains coins. ------ Output ------ For each test case, print a single line containing an integer that represents the maximum number of coins the robot can collect. ------ Constraints ------ 1 leq T leq 100 1 leq R, C leq 1000 0 leq N leq R times C 1 leq r leq R 1 leq c leq C ----- Sample Input 1 ------ 1 3 3 2 2 2 3 3 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ Example case 1: There is a 3x3 grid: ``` . . . . C . . . C ``` The robot can pick up 2 coins by following this path: (1, 1) -> (2, 1) -> (2, 2) -> (3, 2) -> (3, 3).","solution":"def max_coins(R, C, coin_positions): # Initialize dp array with 0\'s dp = [[0] * C for _ in range(R)] # Mark the cells with coins for r, c in coin_positions: dp[r - 1][c - 1] = 1 # Iterate through the grid for i in range(R): for j in range(C): if i == 0 and j == 0: continue from_top = dp[i - 1][j] if i > 0 else 0 from_left = dp[i][j - 1] if j > 0 else 0 dp[i][j] += max(from_top, from_left) # Return the value in the bottom-right corner return dp[-1][-1] def process_input(input_data): lines = input_data.split(\\"n\\") T = int(lines[0]) index = 1 results = [] for _ in range(T): R, C = map(int, lines[index].split()) index += 1 N = int(lines[index]) index += 1 coin_positions = [] for _ in range(N): r, c = map(int, lines[index].split()) index += 1 coin_positions.append((r, c)) results.append(max_coins(R, C, coin_positions)) return results"},{"question":"Given an array of integers nums, reorder the elements in-place such that all even numbers appear before all odd numbers, while maintaining the relative order of the even and odd numbers. Example 1: Input: nums = [3,1,2,4] Output: [2,4,3,1] Explanation: The order of the even numbers 2 and 4 is preserved, and similarly, the order of the odd numbers 3 and 1 is preserved. Example 2: Input: nums = [0,1,2] Output: [0,2,1] Explanation: The order of the even numbers 0 and 2 is preserved, and the order of the odd number 1 is preserved. Constraints: - 1 <= nums.length <= 10^5 - -10^5 <= nums[i] <= 10^5 Note: - Do not use any extra space; attempt to solve the problem with O(1) additional space complexity. - The solution should run in O(n) time complexity.","solution":"def reorder_even_odd(nums): Reorders the elements in-place such that all even numbers appear before all odd numbers, while maintaining the relative order of the even and odd numbers. if not nums or len(nums) <= 1: return nums even_index = 0 for i in range(len(nums)): if nums[i] % 2 == 0: nums.insert(even_index, nums.pop(i)) even_index += 1 return nums"},{"question":"Given a list of integers, your task is to determine whether the list contains a subset of at least two elements such that the sum of the subset is an even number. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers separated by spaces, each integer a_i (1 ≤ a_i ≤ 10^9) — the elements of the list. -----Output----- Print \\"YES\\" if there exists a subset of at least two elements with an even sum, otherwise print \\"NO\\". -----Examples----- Input 3 1 3 5 Output NO Input 4 2 4 6 8 Output YES Input 2 3 5 Output NO -----Note----- In the first test case, there is no subset of at least two elements that has an even sum. In the second test case, any two elements from the list will sum to an even number, so the answer is \\"YES\\". In the third test case, the only possible subset contains all elements, which sums to 8, an even number, but the requirement of at least two elements is not met. Hence, the answer is \\"NO\\".","solution":"def has_even_sum_subset(arr): Determines if there exists a subset of at least two elements with an even sum. odd_count = sum(1 for x in arr if x % 2 != 0) even_count = len(arr) - odd_count if odd_count > 0 and even_count > 0: return \\"YES\\" if even_count >= 2: return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected graph with N vertices (numbered 1 through N) and M edges. Initially, each vertex has a weight of zero. Additionally, you are given a target weight W and a list of pairs (u, v) representing the edges. You want to assign weights to the vertices such that the sum of the weights of the endpoints of each edge is at least W. Specifically, for each edge (u, v), the condition a_u + a_v geq W must be satisfied, where a_u and a_v are the weights of vertices u and v, respectively. Determine the minimum total sum of weights that need to be assigned to the vertices to meet the given condition for all edges. ------ Input ------ The first line of the input contains two integers N and M: the number of vertices and edges. The second line contains one integer W: the target weight. Each of the next M lines describes an edge with two integers u and v: indicating an edge between vertices u and v. ------ Output ------ Print a single integer: the minimum total sum of weights required to satisfy the condition for all edges. ------ Constraints ------ 1 leq N leq 1000 0 leq M leq frac{N cdot (N-1)}{2} 1 leq u, v leq N 1 leq W leq 10^6 ----- Sample Input 1 ------ 4 4 5 1 2 2 3 3 4 4 1 ----- Sample Output 1 ------ 10 ----- Explanation 1 ------ One way to satisfy the conditions is to assign a weight of 5 to any two vertices and 0 to the others, e.g., weights [5, 0, 5, 0]. This ensures that the sum of the weights of the endpoints of each edge is at least 5, and the total sum of weights is 10. ----- Sample Input 2 ------ 5 3 7 1 2 1 3 4 5 ----- Sample Output 2 ------ 14 ----- Explanation 2 ------ One way to satisfy the conditions is to assign a weight of 7 to any two vertices and 0 to the others, e.g., weights [7, 0, 0, 7, 0]. This ensures that the sum of the weights of the endpoints of each edge is at least 7, and the total sum of weights is 14.","solution":"def min_total_weights(N, M, W, edges): Returns the minimum total sum of weights to satisfy the condition for all edges. if M == 0: return 0 # Assign a weight of W to the minimum number of vertex pairs to cover all edges return W * 2 # Example usage edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(min_total_weights(4, 4, 5, edges)) # Output: 10"},{"question":"You are given a list of flight routes represented as an array of pairs, where each pair (source, destination) represents a direct flight from source to destination. Write a function that determines if it is possible to start at a specific city (given as input) and visit every other city in the list exactly once, returning to the starting city at the end. If such a route exists, return \\"Yes\\", otherwise return \\"No\\". Input: - An integer `n` representing the number of flight routes. - An array `flights` of size `n` where each element is a pair of strings representing the source and destination cities. - A string `startCity` representing the city you need to start and end your route. Output: - Return \\"Yes\\" if it is possible to form such a route, otherwise return \\"No\\". Example 1: ``` Input: n = 4 flights = [(\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"C\\", \\"D\\"), (\\"D\\", \\"A\\")] startCity = \\"A\\" Output: \\"Yes\\" ``` Explanation: The route \\"A -> B -> C -> D -> A\\" allows you to visit each city exactly once and return to the starting city. Example 2: ``` Input: n = 3 flights = [(\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"C\\", \\"A\\")] startCity = \\"A\\" Output: \\"Yes\\" ``` Explanation: The route \\"A -> B -> C -> A\\" allows you to visit each city exactly once and return to the starting city. Example 3: ``` Input: n = 3 flights = [(\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"C\\", \\"D\\")] startCity = \\"A\\" Output: \\"No\\" ``` Explanation: There is no route that returns to the starting city and visits each city exactly once. Your task: You don\'t need to read input or print output. Write the function `canCompleteRoute` that takes in the integer `n`, the array of pairs `flights`, and the string `startCity` and returns \\"Yes\\" or \\"No\\". Expected Time Complexity: O(n!) Expected Auxiliary Space: O(n^2) Constraints: - 1 ≤ n ≤ 20 - 1 ≤ length of source, destination ≤ 20 - The cities are represented as strings containing only uppercase English letters.","solution":"def canCompleteRoute(n, flights, startCity): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for src, dest in flights: graph[src].append(dest) # Track all cities all_cities = set() for src, dest in flights: all_cities.add(src) all_cities.add(dest) # Function to perform DFS and check Hamiltonian cycle def dfs(city, visited): if len(visited) == len(all_cities): return visited[0] in graph[visited[-1]] for neighbor in graph[city]: if neighbor not in visited: visited.append(neighbor) if dfs(neighbor, visited): return True visited.pop() return False return \\"Yes\\" if dfs(startCity, [startCity]) else \\"No\\""},{"question":"Problem description One day, Alice found an old paper with a sequence of parentheses and decided to play a game with it. The game is simple: Alice needs to check if the parentheses are balanced. The sequence can contain the following types of parentheses: (), {}, []. A sequence of parentheses is considered balanced if the following conditions are met: 1. Every opening parenthesis has a corresponding closing parenthesis of the same type. 2. The parenthesis pairs are correctly nested. Your task is to help Alice by writing a program that takes a sequence of parentheses and determines if it is balanced or not. Input The input consists of a single string containing the sequence of parentheses. Output Output \\"YES\\" (without quotes) if the string is balanced and \\"NO\\" (without quotes) if it is not. Constraints 1 ≤ length of the string ≤ 1000 Examples Input: ()[]{} Output: YES Input: ([{}]) Output: YES Input: ({[}]) Output: NO Explanation In the first example, the sequence is balanced since each opening parenthesis is closed by a corresponding closing parenthesis. In the second example, the sequence is also balanced with correctly nested parentheses. In the third example, the sequence is not balanced because the closing parenthesis \'}\' does not match the last opened parenthesis \'[\'.","solution":"def is_balanced(sequence): Determines if the given sequence of parentheses is balanced. Parameters: sequence (str): The sequence of parentheses to be checked. Returns: str: \\"YES\\" if the sequence is balanced, \\"NO\\" otherwise. stack = [] matching_parenthesis = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sequence: if char in matching_parenthesis.values(): stack.append(char) elif char in matching_parenthesis.keys(): if stack and stack[-1] == matching_parenthesis[char]: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"Determine whether a given linked list contains a cycle. Constraints * The length of the linked list is n, where 0 ≤ n ≤ 100,000 Input The input consists of two parts: 1. An integer n representing the number of nodes in the linked list. 2. A list of n integers where the ith integer denotes the index of the next node for the ith node (1-based index). If the next node for the ith node doesn\'t exist, the value is -1. Output Print \\"True\\" if there is a cycle in the linked list, otherwise print \\"False\\". Examples Input 3 2 3 -1 Output False Input 4 2 3 1 -1 Output True","solution":"def has_cycle(n, edges): Determines whether a given linked list contains a cycle. Parameters: n (int): Number of nodes in the linked list. edges (List[int]): List where ith integer denotes the index of the next node for the ith node. Returns: bool: True if there is a cycle, False otherwise. if n == 0: return False slow, fast = 0, 0 while fast != -1 and edges[fast] != -1: slow = edges[slow] - 1 if edges[slow] != -1 else -1 fast = edges[edges[fast] - 1] - 1 if edges[fast] != -1 and edges[edges[fast] - 1] != -1 else -1 if slow == fast: return True return False"},{"question":"Given an array of integers, construct a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i, without using the division operation. Input A list of n integers, where 1 <= n <= 10^5 and the absolute values of each integer do not exceed 10^3. Output A list of n integers representing the product array. Example Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [2, 4, 6] Output: [24, 12, 8]","solution":"def product_except_self(nums): Constructs a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. Args: nums (list): A list of integers. Returns: list: A list of the products. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n # Constructing left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Constructing right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Constructing result array result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Alice has a rectangular garden and she wants to plant flowers such that the number of flowers in each row is equal to the number of flowers in each column. However, there is a constraint: if Alice plants too many flowers in a row or column, the garden will look overcrowded. To avoid this, she wants the maximum number of flowers in any row or column to be as small as possible. Given the dimensions of the garden, help Alice determine the side length of the largest possible square grid that can fit inside her garden. Input The input consists of a single line containing two integers `n` and `m` (1 ≤ n, m ≤ 10^18) — the length and width of the garden, respectively. Output Print a single integer — the side length of the largest square grid of flowers that can fit inside the rectangular garden. Examples Input 10 15 Output 5 Input 6 8 Output 4 Note In the first example, the largest square grid that fits inside a 10x15 garden is 5x5. In the second example, the largest square grid that fits inside a 6x8 garden is 4x4.","solution":"import math def largest_square_grid_side(n, m): Returns the side length of the largest square grid that can fit inside a rectangle of dimensions n x m. The side length is the greatest common divisor (GCD) of n and m. return math.gcd(n, m)"},{"question":"Fiona has a particular affinity for strings and their transformations. She wants you to write a program that, given a string, finds the largest lexicographical substring that can be formed by deleting exactly one character from the string. Input Format: First line of the input consists of a single integer T, number of test cases. Each test case contains a single string S of length N consisting of lowercase letters. Output Format: For each test case, print the largest lexicographical substring that can be obtained by deleting exactly one character from the input string. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 100 Problem Setter: Fiona Mueller SAMPLE INPUT 2 abcde ahbgdc SAMPLE OUTPUT bcde hbgdc","solution":"def largest_lexicographical_substring(T, strings): results = [] for S in strings: max_substring = \\"\\" for i in range(len(S)): temp_string = S[:i] + S[i+1:] if temp_string > max_substring: max_substring = temp_string results.append(max_substring) return results # Example usage: # T = 2 # strings = [\\"abcde\\", \\"ahbgdc\\"] # print(largest_lexicographical_substring(T, strings)) # Expected output: [\'bcde\', \'hbgdc\']"},{"question":"Alice is playing a game on a 2D grid. The grid is of size N x M and is composed of cells, some of which are blocked. Alice starts at the top-left corner of the grid and aims to reach the bottom-right corner. She can only move either to the right or down at any point in time. Additionally, Alice has a special ability that allows her to \\"jump\\" over one blocked cell in her path exactly once. Write a program that takes a grid configuration as input and determines whether Alice can reach the bottom-right corner using her abilities. -----Input----- The first line contains two integers, N and M, representing the number of rows and columns in the grid, respectively. The next N lines each contain M characters, which represent the grid. A \'.\' character indicates an open cell, and a \'#\' character indicates a blocked cell. -----Output----- Output \\"YES\\" if Alice can reach the bottom-right corner using her ability, otherwise output \\"NO\\". Sample Input 4 4 .... .. ..#. .... Sample Output YES Explanation: Alice can jump over one blocked cell at (3, 3) moving from (2, 2) to (4, 4).","solution":"def can_reach_bottom_right(n, m, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def bfs(): queue = deque([(0, 0, 0)]) # (x, y, jumps_used) visited = set((0, 0, 0)) directions = [(0, 1), (1, 0)] while queue: x, y, jumps = queue.popleft() if x == n - 1 and y == m - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny, jumps) not in visited: visited.add((nx, ny, jumps)) queue.append((nx, ny, jumps)) elif not is_valid(nx, ny) and jumps == 0: njx, njy = nx + dx, ny + dy if is_valid(njx, njy) and (njx, njy, jumps + 1) not in visited: visited.add((njx, njy, jumps + 1)) queue.append((njx, njy, jumps + 1)) return False if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" return \\"YES\\" if bfs() else \\"NO\\" # Example usage n = 4 m = 4 grid = [ \\"....\\", \\"..\\", \\"..#.\\", \\"....\\" ] print(can_reach_bottom_right(n, m, grid)) # Output: YES"},{"question":"A software company is organizing a series of coding workshops for its employees. The company has multiple rooms available, and each room can host multiple non-overlapping workshops. To help the organizer decide the maximum number of workshops that can be conducted, you need to write a program to determine this number. Each workshop has a start time and an end time, and no two workshops can overlap in the same room. Given the total number of workshops and their respective times, along with the number of available rooms, calculate how many workshops can be accommodated in total. -----Input----- The first line of input contains two integers n, m (1 leq n leq 100 000, 1 leq m < n). The next n lines each contain two integers s_i, e_i, representing the start time and end time of a workshop. It is guaranteed that 0 leq s_i < e_i leq 1 000 000 000. -----Output----- The output should contain a single integer: the maximum number of non-overlapping workshops that can be conducted using the available rooms. -----Examples----- Sample Input 1: 5 2 1 4 3 5 0 6 5 7 8 9 Sample Output 1: 4 Sample Input 2: 6 3 1 4 4 5 3 5 6 7 5 9 2 6 Sample Output 2: 5","solution":"def max_non_overlapping_workshops(n, m, workshops): Returns the maximum number of non-overlapping workshops that can be conducted using the available rooms. Args: n: int - number of workshops. m: int - number of available rooms. workshops: List of tuples [(s1, e1), (s2, e2), ..., (sn, en)] where si and ei are the start and end times of the workshops. Returns: int - maximum number of non-overlapping workshops. # Sort the workshops based on their end time workshops.sort(key=lambda x: x[1]) # Allocate an array to count the number of workshops per room rooms = [0] * m total_workshops = 0 for start, end in workshops: # Find the earliest available room that can accommodate the current workshop for i in range(m): if rooms[i] <= start: rooms[i] = end total_workshops += 1 break # Sort the rooms based on their next available time rooms.sort() return total_workshops"},{"question":"# Summing Consecutive Prime Numbers Write a function that returns the sum of the first `n` consecutive prime numbers. Prime numbers are natural numbers greater than 1 that have no positive divisors other than 1 and itself. Examples ``` sumConsecutivePrimes(1) ==> 2 sumConsecutivePrimes(2) ==> 5 (because 2 + 3 = 5) sumConsecutivePrimes(5) ==> 28 (because 2 + 3 + 5 + 7 + 11 = 28) sumConsecutivePrimes(10) ==> 129 (because 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 = 129) ``` # Constraints - You may assume `n` is a positive integer. - Optimize for the efficiency of finding consecutive prime numbers. - Consider different edge cases in your solution. Write your function in Python, and include both the function definition and any helper functions you use.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sumConsecutivePrimes(n): Returns the sum of the first n consecutive prime numbers. count = 0 current_num = 2 total_sum = 0 while count < n: if is_prime(current_num): total_sum += current_num count += 1 current_num += 1 return total_sum"},{"question":"You are given an array of integers that represents the number of pages in different books. There are k students and the task is to assign books to each student in such a way that the maximum number of pages assigned to a student is minimized. Each book can be assigned to only one student and each student must be assigned at least one book. Books are assigned consecutively. Determine the minimum possible value of the maximum number of pages assigned to a student. -----Input----- The first line contains two integers: - n (1 ≤ n ≤ 10^5), the number of books. - k (1 ≤ k ≤ n), the number of students. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i represents the number of pages in the i-th book. -----Output----- Print the minimum possible value of the maximum number of pages assigned to a student. -----Examples----- Input 4 2 12 34 67 90 Output 113 Input 5 3 10 20 30 40 50 Output 60","solution":"def find_minimum_pages(n, k, pages): Returns the minimum possible value of the maximum number of pages assigned to a student. def is_possible(mid): student_count = 1 current_pages = 0 for page in pages: if current_pages + page > mid: student_count += 1 current_pages = page if student_count > k: return False else: current_pages += page return True low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if is_possible(mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Alice is an avid reader and likes to arrange her books in a shelf in a specific order. She rearranges her books each day based on how many pages she read from each book. Alice reads at least one page from one of the books every day, and she rearranges the books such that the one she read from the most goes to the leftmost position of the shelf. If two books have the same number of pages read, their relative order does not change. Given a list of books with the initial order on the shelf and a list of pages read each day from each book, determine the new order of the books after Alice rearranges them each day for a given number of days. Function Description Complete the `rearrangeShelf` function below. It should return a list of book names in the order they appear on the shelf after the specified number of days. `rearrangeShelf` has the following parameter(s): - `books`: a list of strings, where each string is the name of a book. - `pagesRead`: a list of tuples, where each tuple contains the number of pages read from each book every day. The length of this list represents the number of days, and the length of each tuple is equal to the number of books. Input Format - The first line contains an integer, `n`, denoting the number of books. - The second line contains `n` space-separated strings, where each string is the name of a book. - The third line contains an integer, `d`, denoting the number of days. - Each of the next `d` lines contains `n` space-separated integers, where the integer at the `i-th` position of each line denotes the number of pages read from the `i-th` book on that day. Constraints - 1 ≤ n ≤ 100 - 1 ≤ d ≤ 365 - 1 ≤ pages read per day from each book ≤ 1000 Output Format Return a list of strings containing the names of the books in the order they appear on the shelf after the specified number of days. Example Input: ```plaintext 3 BookA BookB BookC 2 3 2 1 1 3 2 ``` Example Output: ```plaintext [\\"BookB\\", \\"BookA\\", \\"BookC\\"] ``` Explanation: Initially, the books are arranged as [\\"BookA\\", \\"BookB\\", \\"BookC\\"]. - After day 1: [\\"BookA\\", \\"BookB\\", \\"BookC\\"], as Alice read 3 pages from BookA, 2 from BookB, and 1 from BookC. - After day 2: [\\"BookB\\", \\"BookA\\", \\"BookC\\"], as the total pages read are: BookA = 3 + 1 = 4, BookB = 2 + 3 = 5, and BookC = 1 + 2 = 3. Therefore, the final order of books on the shelf is [\\"BookB\\", \\"BookA\\", \\"BookC\\"].","solution":"def rearrangeShelf(books, pagesRead): Returns the new order of books based on reading pages each day. total_pages_read = {book: 0 for book in books} for day in pagesRead: for idx, pages in enumerate(day): total_pages_read[books[idx]] += pages sorted_books = sorted(books, key=lambda book: -total_pages_read[book]) return sorted_books # Example usage: # books = [\\"BookA\\", \\"BookB\\", \\"BookC\\"] # pagesRead = [(3, 2, 1), (1, 3, 2)] # print(rearrangeShelf(books, pagesRead)) # Output: [\\"BookB\\", \\"BookA\\", \\"BookC\\"]"},{"question":"You are working on a project to analyze the characteristics of various geometric shapes. Your task is to write a program that classifies triangles based on their side lengths. Given three side lengths, your program should determine whether the triangle is: - Equilateral (all three sides are the same length), - Isosceles (exactly two sides are the same length), - Scalene (all three sides are different lengths), - Not a triangle (the side lengths do not satisfy the triangle inequality). A triangle satisfies the triangle inequality if, and only if, the sum of the lengths of any two sides is greater than the length of the remaining side. Input The input consists of multiple datasets. Each line of the input describes a dataset. A dataset consists of three positive integers a, b, and c, which specify the lengths of the sides of a potential triangle. You may assume that 1 ≤ a, b, c ≤ 1000. The last dataset is followed by a line containing three zeros. This line is not a part of datasets and should not be processed. Output For each dataset, your program should output a single line. The line should contain one of the following words: \\"Equilateral\\", \\"Isosceles\\", \\"Scalene\\", or \\"Not a triangle\\". Example Input 3 3 3 3 4 5 1 2 2 1 10 12 0 0 0 Output Equilateral Scalene Isosceles Not a triangle","solution":"def classify_triangle(a, b, c): Classifies a triangle based on its side lengths a, b, and c. Returns \\"Equilateral\\", \\"Isosceles\\", \\"Scalene\\", or \\"Not a triangle\\". # Check if it is a valid triangle if a + b <= c or a + c <= b or b + c <= a: return \\"Not a triangle\\" # Check for Equilateral if a == b == c: return \\"Equilateral\\" # Check for Isosceles if a == b or b == c or a == c: return \\"Isosceles\\" # If not any of the above, it must be Scalene return \\"Scalene\\" def process_input(input_lines): Processes a list of input lines containing side lengths and classifies each potential triangle. results = [] for line in input_lines: a, b, c = map(int, line.split()) if a == 0 and b == 0 and c == 0: break results.append(classify_triangle(a, b, c)) return results"},{"question":"A palindrome is a string that reads the same backward as forward (e.g., \\"radar\\", \\"level\\"). Given a string that consists of both lowercase and uppercase letters, we consider two strings to be case-insensitive palindromes if they are the same while ignoring case (e.g., \\"Radar\\" and \\"rAdAr\\" are considered palindromes). Write a function to determine whether a given sentence can be rearranged to form a palindrome. The function should return a boolean value: `true` if the sentence can be rearranged to form a palindrome, and `false` otherwise. Ignore spaces, punctuation, and case in the input. ------ Input ------ Your function should accept a single input string `sentence`. ------ Output ------ Return a boolean value `true` if the characters in `sentence` can be rearranged to form a palindrome, and `false` otherwise. ------ Constraints ------ - The input string will have a length between 1 and 1000 inclusive. - The string may contain any printable ASCII characters (letters, digits, punctuation, whitespace). ------ Example Input 1 ------ \\"A man, a plan, a canal, Panama\\" ------ Example Output 1 ------ true ------ Example Input 2 ------ \\"Programming is fun!\\" ------ Example Output 2 ------ false ------ Explanation ------ In the first example, removing spaces and punctuation and converting to a single case gives us \\"amanaplanacanalpanama\\", which can be rearranged to create the palindrome \\"amanaplanacanalpanama\\". In the second example, even after removing all ignored characters, it is impossible to rearrange \\"Programmingisfun\\" to form a palindrome.","solution":"import re from collections import Counter def can_form_palindrome(sentence): Determine if the characters in the sentence can be rearranged to form a palindrome. Params: sentence (str): The input sentence to be checked Returns: bool: True if it can be rearranged to form a palindrome, False otherwise # Remove non-alphanumeric characters and convert to lowercase cleaned_sentence = re.sub(r\'[^a-zA-Z0-9]\', \'\', sentence).lower() # Count frequency of each character char_count = Counter(cleaned_sentence) # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 == 1) return odd_count <= 1"},{"question":"In a small town, an annual fair is organized where various competitions take place. One of the interesting competitions is the \\"String Transformation Challenge\\". In this challenge, given two strings, participants need to transform the first string into the second string using a specific set of operations. The operations allowed are: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position in the string with another character. The goal is to find the minimum number of operations required to transform the first string into the second string. Given the two strings, write a program that calculates this minimum number of operations. # Input format: The input consists of multiple test cases. Each test case consists of two lines: - The first line contains the first string, `s1`. - The second line contains the second string, `s2`. - The input is terminated by a single line containing the word \\"END\\". You can assume 1 ≤ length of s1, s2 ≤ 1000. # Output format: For each test case, print the answer in a line in the format: ``` Case #i: x ``` where `i` is the test case number starting from 1, and `x` is the minimum number of operations required to transform the first string into the second string. # Example Input: ``` kitten sitting flaw lawn END ``` Output: ``` Case #1: 3 Case #2: 2 ``` In the first example, the minimum number of operations to transform \\"kitten\\" into \\"sitting\\" is 3 (k→s, e→i, insert g). In the second example, the minimum number of operations to transform \\"flaw\\" into \\"lawn\\" is 2 (replace f->l, a->a remains same, replace w->n).","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # dp[i][j] will hold the minimum number of operations required to transform s1[0:i] into s2[0:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Insert all characters of s2 elif j == 0: dp[i][j] = i # Delete all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters are the same, no operation required else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] def process_input(input_str): lines = input_str.splitlines() results = [] i = 0 case_num = 1 while i < len(lines) and lines[i] != \\"END\\": s1 = lines[i] s2 = lines[i + 1] results.append(f\\"Case #{case_num}: {min_operations(s1, s2)}\\") case_num += 1 i += 2 return results def main(): import sys input_str = sys.stdin.read() results = process_input(input_str) for result in results: print(result)"},{"question":"Madoka and Zen are playing a game with a string `s` consisting of lowercase English letters. The game proceeds as follows: 1. Initially, Zen writes down the string `s`. 2. Madoka can perform the following operation exactly once: - Replace any character in the string with any other lowercase English letter. 3. Madoka wants to maximize the number of distinct characters in the resulting string. Help Madoka determine the maximum number of distinct characters she can achieve by performing the operation exactly once. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a string s of length (1 le |s| le 10^5). The sum of the lengths of all strings does not exceed 10^6. -----Output----- For each test case, print a single integer — the maximum number of distinct characters Madoka can achieve after performing the operation exactly once. -----Examples----- Input 3 abca abcde zzzzz Output 4 5 1 -----Note----- In the first example, by changing the \'a\' at the beginning to \'d\' we achieve the string \'dbca\', which has 4 distinct characters: \'d\', \'b\', \'c\', and \'a\'. In the second example, the string already contains 5 distinct characters, so any change will still leave us with 5 distinct characters. In the third example, changing any character \'z\' to any other letter will always leave us with exactly 1 distinct character.","solution":"def max_distinct_after_change(s): Returns the maximum number of distinct characters that can be achieved by changing any one character in the string s. distinct_chars = len(set(s)) # If the number of distinct characters is already the maximum possible (length of string), # changing one character cannot increase the count. if distinct_chars == len(s): return distinct_chars # Otherwise, we can increase the distinct character count by one # by changing a duplicate character to a new character. return distinct_chars + 1 def process_test_cases(test_cases): results = [] for s in test_cases: results.append(max_distinct_after_change(s)) return results # Driver function to handle multiple test cases def solve(t, test_cases): return process_test_cases(test_cases)"},{"question":"Write a function that takes an integer N and returns the smallest prime number that is greater than or equal to N. If N is less than or equal to 1, return 2. Note that the scope of this problem is to handle numbers up to 10^6 efficiently. -----Input----- An integer N. -----Output----- An integer, the smallest prime number greater than or equal to N. -----Constraints----- - 1 ≤ N ≤ 1,000,000 (10^6) -----Example----- Input: 10 Output: 11 Input: 14 Output: 17","solution":"def is_prime(number): if number <= 1: return False if number == 2 or number == 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def smallest_prime_ge(N): if N <= 1: return 2 while not is_prime(N): N += 1 return N"},{"question":"You have a list of numbers representing different coin denominations and an integer representing an amount of money. Return the fewest number of coins that you need to make up that amount. If the amount cannot be made up by any combination of the given coins, return -1. You may assume that you have an infinite number of each kind of coin. -----Input----- - The first line contains an integer n, the number of different coin denominations (1 ≤ n ≤ 100). - The second line contains n integers, representing the value of each coin denomination (1 ≤ coin value ≤ 10,000). - The third line contains an integer amount, representing the total amount of money to be made (0 ≤ amount ≤ 1,000,000). -----Output----- Print a single integer, the minimum number of coins needed to make the given amount. If it is not possible to make the amount with the given coins, print -1. -----Examples----- Input 3 1 2 5 11 Output 3 Input 2 2 4 7 Output -1 -----Note----- In the first example, you can form the amount 11 by using 5 + 5 + 1, resulting in 3 coins. In the second example, it\'s impossible to form the amount 7 with the given coin denominations, hence the output is -1.","solution":"def coin_change(coins, amount): Returns the fewest number of coins needed to make up the given amount. If the amount cannot be made up by any combination of the given coins, returns -1. dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"A robot vacuum cleaner is placed in a grid of size H x W. The grid is represented by a matrix of characters, where \'.\' denotes an empty cell, and \'#\' denotes an obstacle (a cell that cannot be cleaned). The robot cleaner starts at cell (R, C) in the grid and can move in four possible directions: up, down, left, and right. However, it cannot go through obstacles or move outside the grid boundaries. Given the dimensions of the grid H and W, the starting position of the robot (R, C), and the matrix representation of the grid, determine if it is possible for the robot to reach the bottom-right cell (H-1, W-1). The robot can only move to an adjacent cell if it is empty (i.e., contains \'.\'). Constraints: * 2 ≦ H, W ≦ 100 * 0 ≦ R < H * 0 ≦ C < W * The grid will always have at least one empty cell. Input: The input is given from Standard Input in the following format: H W R C Grid Grid is represented as H rows of W characters each. Output: Print `Yes` if it is possible for the robot to reach the bottom-right cell (H-1, W-1). Otherwise, print `No`. Example: Input: ``` 5 5 0 0 ..... .#. .#... .#. ..... ``` Output: ``` Yes ``` Input: ``` 4 4 1 1 #..# #..# ``` Output: ``` No ```","solution":"def can_reach_bottom_right(H, W, R, C, grid): from collections import deque if grid[H-1][W-1] == \'#\': return \\"No\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * W for _ in range(H)] queue = deque([(R, C)]) visited[R][C] = True while queue: x, y = queue.popleft() if (x, y) == (H-1, W-1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < H and 0 <= ny < W and grid[nx][ny] == \'.\' and not visited[nx][ny]: queue.append((nx, ny)) visited[nx][ny] = True return \\"No\\""},{"question":"Two adventurers are exploring a dungeon filled with dangerous traps. The dungeon is represented as a rectangular grid of cells, with each cell being either \'safe\' (represented as 0) or \'trapped\' (represented as 1). The adventurers start at the top-left corner of the grid (0, 0) and aim to reach the bottom-right corner of the grid (n-1, m-1), where n is the number of rows and m is the number of columns. They can only move down or right at each step and they do not want to step into any trapped cells. Your task is to determine the number of unique, safe paths from the top-left corner to the bottom-right corner. If no such path exists, return 0. -----Input----- The first line contains two integers n and m (1 <= n, m <= 100), the dimensions of the grid. The next n lines each contain m integers (either 0 or 1), representing the grid. -----Output----- Output a single integer, the number of unique safe paths from the top-left to the bottom-right corner of the grid. -----Examples----- Sample Input 1: 2 2 0 0 1 0 Sample Output 1: 1 Sample Input 2: 3 3 0 1 0 0 0 0 1 0 0 Sample Output 2: 2 Sample Input 3: 2 2 1 0 0 0 Sample Output 3: 0","solution":"def count_unique_safe_paths(n, m, grid): # If the starting or ending point is trapped, return 0 immediately if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return 0 # Initialize a 2D dp array with zeros dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] # The value at dp[n-1][m-1] will be our answer return dp[n - 1][m - 1]"},{"question":"You are given a string of numbers that represent the combined weights of apples and oranges at a market. The weights are formatted as alternating segments of whole numbers, with each segment representing the weight of an apple (a) followed by the weight of an orange (o). Your task is to separate the weights of apples and oranges and return them as two separate lists. -----Input----- The input consists of a single string `s` of even length where each number is separated by a space. -----Output----- Output two lists: the first containing all the weights of apples and the second containing all the weights of oranges. -----Examples----- Sample Input: \\"3 5 2 4 9 7\\" Sample Output: [3, 2, 9] [5, 4, 7] Sample Input: \\"10 20 30 40\\" Sample Output: [10, 30] [20, 40] Sample Input: \\"1 2\\" Sample Output: [1] [2]","solution":"def separate_weights(s): Separates the weights of apples and oranges from an alternating string of numbers. Parameters: s (str): A string of numbers separated by spaces, with alternating weights of apples and oranges. Returns: tuple: A tuple of two lists, the first being the weights of the apples and the second being the weights of the oranges. weights = list(map(int, s.split())) apples = weights[::2] oranges = weights[1::2] return apples, oranges"},{"question":"In a certain country, telephone numbers are represented as a series of digits in the form of strings. A valid telephone number must follow these rules: 1. It must contain exactly 10 digits. 2. It cannot contain any sequence of consecutive repeating digits longer than two digits. You need to write a program to determine if each of the given telephone numbers is valid or not. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of the T test cases follows. - Each of the T subsequent lines contains a single string representing a telephone number. -----Output----- For each test case, print \\"VALID\\" if the telephone number is valid according to the rules given above. Otherwise, print \\"INVALID\\". -----Constraints----- - 1 ≤ T ≤ 100 - Each telephone number consists of exactly 10 characters, each of which is a digit (\'0\' to \'9\'). -----Example----- Input: 5 1234567890 1122334455 1233333456 1233211234 9988776655 Output: VALID VALID INVALID VALID VALID -----Explanation----- Example case 1: The telephone number is a valid 10-digit number without any sequence of more than two repeating consecutive digits. Example case 2: The telephone number is a valid 10-digit number without any sequence of more than two repeating consecutive digits. Example case 3: The telephone number contains the sequence \\"3333\\", which is more than two consecutive repeating digits, making it invalid. Example case 4: The telephone number is a valid 10-digit number without any sequence of more than two repeating consecutive digits. Example case 5: The telephone number is a valid 10-digit number without any sequence of more than two repeating consecutive digits.","solution":"def validate_phone_number(phone_number): Validates that a phone number contains exactly 10 digits and no sequence of consecutive repeating digits longer than two digits. if len(phone_number) != 10: return \\"INVALID\\" for i in range(8): if phone_number[i] == phone_number[i + 1] == phone_number[i + 2]: return \\"INVALID\\" return \\"VALID\\" def process_phone_numbers(test_cases): Processes a list of phone numbers to determine if each is valid or invalid. Arguments: test_cases -- a list of phone number strings Returns: results -- a list of strings \\"VALID\\" or \\"INVALID\\" results = [] for number in test_cases: results.append(validate_phone_number(number)) return results"},{"question":"You are given an array of integers. Your task is to create a function that returns the sum of all the positive integers in the array. Write a function that takes a list of integers and returns the sum of all the positive integers. If the list is empty or there are no positive integers, return 0. **Examples:** ```python sum_positive_integers([1, -2, 3, 4, -5]) # => 8 sum_positive_integers([-1, -2, -3, -4, -5]) # => 0 sum_positive_integers([]) # => 0 ``` **Note:** - The input list may contain both positive and negative integers, as well as zeros.","solution":"def sum_positive_integers(arr): Returns the sum of all positive integers in the array. Parameters: arr (list of int): List containing integers Returns: int: Sum of positive integers return sum(x for x in arr if x > 0)"},{"question":"Write a function that takes a string and returns the same string but with all the vowels removed. For the purpose of this problem, \'a\', \'e\', \'i\', \'o\', and \'u\' (both uppercase and lowercase) are considered vowels. The input is a non-empty string containing only alphabetical characters and spaces. For example: ```python remove_vowels(\\"Hello, World!\\") == \\"Hll, Wrld!\\" remove_vowels(\\"Beautiful Day\\") == \\"Btfl Dy\\" ```","solution":"def remove_vowels(input_str): This function takes a string and returns the same string but with all the vowels removed. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in input_str if char not in vowels)"},{"question":"Write a program that helps a librarian organize books on shelves. The librarian needs to ensure that each shelf contains books whose total weight does not exceed a specified maximum shelf weight capacity. The books are arranged in order of their weights in a list. The algorithm should distribute the books across the minimum number of shelves possible. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. For each test case, the first line contains two integers: - N denoting the number of books - W denoting the maximum weight capacity of each shelf. The second line contains N space-separated integers denoting the weights of the books. ------ Output ------ For each test case, output a single integer denoting the minimum number of shelves required to store all the books without exceeding the shelf capacity. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ W ≤ 10^{9} 1 ≤ text{weight of each book} ≤ W ------ Sample Input 1 ------ 2 5 10 2 3 5 7 1 3 15 8 5 5 ------ Sample Output 1 ------ 3 1 ------ Explanation 1 ------ In Example 1, the best way to distribute books is: - Shelf 1: 2, 3, 5 (total weight = 10) - Shelf 2: 7 (total weight = 7) - Shelf 3: 1 (total weight = 1) In Example 2, all books can be placed on one shelf as their total weight is 8 + 5 + 2 = 15 which does not exceed the shelf capacity.","solution":"def min_shelves(T, test_cases): Function to compute the minimum number of shelves needed for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains: - An integer N denoting the number of books - An integer W denoting the maximum weight capacity of each shelf - A list of integers denoting the weights of the books Returns: list: A list of integers where each integer is the minimum number of shelves required for the corresponding test case. results = [] for i in range(T): N, W, books = test_cases[i] books.sort(reverse=True) shelf_count = 0 while books: current_weight = 0 # Try to fit as many books as possible on the current shelf while books and current_weight + books[-1] <= W: current_weight += books.pop() shelf_count += 1 results.append(shelf_count) return results # Example usage from the problem statement T = 2 test_cases = [ (5, 10, [2, 3, 5, 7, 1]), (3, 15, [8, 5, 2]) ] print(min_shelves(T, test_cases)) # Output should be [3, 1]"},{"question":"Given a binary search tree (BST) with N nodes, convert it into a balanced binary search tree (BST) with the same set of nodes. Example 1: Input: BST = 30 / 20 40 / 10 25 50 Output: Balanced BST = 30 / 20 40 / / 10 25 35 50 Explanation: The resultant tree is balanced. Example 2: Input: BST = 50 / 40 / 30 / 20 / 10 Output: Balanced BST = 30 / 20 50 / / 10 25 40 Explanation: The resultant tree is balanced. Your task: You don\'t need to read input or print anything. Your task is to complete the function balanceBST() which takes the root of the original BST, converts it into a balanced BST with the same set of nodes, and returns the root of the balanced BST. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1<=N<=10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inOrderTraversal(root, nodes): if root: inOrderTraversal(root.left, nodes) nodes.append(root) inOrderTraversal(root.right, nodes) def buildBalancedBST(nodes, start, end): if start > end: return None mid = (start + end) // 2 node = nodes[mid] node.left = buildBalancedBST(nodes, start, mid - 1) node.right = buildBalancedBST(nodes, mid + 1, end) return node def balanceBST(root): nodes = [] inOrderTraversal(root, nodes) return buildBalancedBST(nodes, 0, len(nodes) - 1)"},{"question":"A transportation network in a city consists of several intersections connected by bidirectional roads. Each road has a travel time associated with it. Given the descriptions of the roads, your task is to determine the shortest travel time between two specified intersections. For simplicity, intersections are numbered from 1 to n, where n is the total number of intersections in the city. The travel time between intersections is guaranteed to be positive. Input The input consists of several test cases. Each test case starts with a line containing two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10000), where n is the number of intersections, and m is the number of roads. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1000), where u and v represent the connected intersections, and t represents the travel time between them. The next line contains two integers s and d (1 ≤ s, d ≤ n), representing the source and destination intersections for which you need to find the shortest travel time. The end of the input is indicated by a line containing two zeros. Output For each test case, print the shortest travel time between the source intersection and the destination intersection in one line. If there is no path between the source and the destination, print \\"no path\\". Example Input 4 4 1 2 10 1 3 15 2 4 10 3 4 5 1 4 3 1 1 2 1 2 3 1 3 4 1 0 0 Output 20 no path","solution":"import heapq def dijkstra(n, graph, source, destination): Find the shortest travel time using Dijkstra\'s algorithm. distances = {i: float(\'inf\') for i in range(1, n+1)} distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[destination] if distances[destination] != float(\'inf\') else \\"no path\\" def find_shortest_times(test_cases): results = [] for n, m, roads, (s, d) in test_cases: graph = {i: [] for i in range(1, n+1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) shortest_time = dijkstra(n, graph, s, d) results.append(shortest_time) return results"},{"question":"Given a string, find the length of the smallest window that contains all the distinct characters of the string itself. For example, if the string is \\"aabcbcdbca\\", then the smallest window that contains all the distinct characters is \\"dbca\\", with length 4. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single string S. ------ Output ------ For each test case, output a single line containing the length of the smallest window that contains all the distinct characters of S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters. ------ Sample Input ------ 3 aabcbcdbca aaab abcdef ------ Sample Output ------ 4 1 1 ------ Explanation ------ Example case 1: The smallest window containing all the distinct characters of the string \\"aabcbcdbca\\" is \\"dbca\\", which has length 4. Example case 2: The smallest window containing all the distinct characters of the string \\"aaab\\" is \\"ab\\", which has length 2, but since it\'s minimum window containing all distinct characters, result is 1. Example case 3: The smallest window containing all the distinct characters of the string \\"abcdef\\" is \\"a\\", which has length 1.","solution":"def smallest_window_with_all_distinct_chars(s): Returns the length of the smallest window that contains all the distinct characters of the string s. from collections import defaultdict # Find the number of distinct characters in the string distinct_char_count = len(set(s)) n = len(s) min_len = float(\'inf\') left = 0 char_frequency = defaultdict(int) unique_count = 0 for right in range(n): char_frequency[s[right]] += 1 if char_frequency[s[right]] == 1: unique_count += 1 while unique_count == distinct_char_count: min_len = min(min_len, right - left + 1) char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: unique_count -= 1 left += 1 return min_len"},{"question":"# Coding Assessment Question Create a Python function `merge_lists_alternately` that takes two lists of integers as input and returns a new list containing elements from both lists, taken alternately. If one list is longer than the other, append the remaining elements of the longer list to the end of the merged list. Function Signature ```python def merge_lists_alternately(list1: List[int], list2: List[int]) -> List[int]: ``` Input - `list1`: A list of integers. - `list2`: A list of integers. Output - A list of integers resulting from alternating elements from `list1` and `list2`. Constraints - Each list will have at least one element and no more than 10^4 elements. - Each element in the lists will be an integer between -10^9 and 10^9. Example ```python list1 = [1, 3, 5] list2 = [2, 4, 6, 8, 10] merge_lists_alternately(list1, list2) ``` **Output:** ```python [1, 2, 3, 4, 5, 6, 8, 10] ``` Explanation - The function should take `[1, 3, 5]` and `[2, 4, 6, 8, 10]` as input. - The merged list is `[1, 2, 3, 4, 5, 6]` from alternating elements of both lists. - Since `list2` still has elements left (`8`, `10`), append them to the end to get `[1, 2, 3, 4, 5, 6, 8, 10]`.","solution":"from typing import List def merge_lists_alternately(list1: List[int], list2: List[int]) -> List[int]: Merges two lists by taking elements alternately. If one list is longer, the remaining elements of the longer list are appended to the end. Args: list1 (List[int]): The first list of integers. list2 (List[int]): The second list of integers. Returns: List[int]: The merged list with elements taken alternately from the input lists. merged_list = [] len1, len2 = len(list1), len(list2) min_len = min(len1, len2) for i in range(min_len): merged_list.append(list1[i]) merged_list.append(list2[i]) if len1 > len2: merged_list.extend(list1[min_len:]) else: merged_list.extend(list2[min_len:]) return merged_list"},{"question":"Ada, a renowned computer scientist, is working on optimizing her memory management system. She needs to design a function that compresses a list of integer numbers by removing consecutive duplicate elements. Additionally, the elements that are left in the list after removal must retain at least one of each number originally present and in the same order. Given an array `arr` of size `n`, write a function that returns the compressed list after removing all consecutive duplicate elements. **Input:** - The first line contains an integer `n`, the size of the array. - The second line contains `n` integers separated by space, `arr[0], arr[1], ..., arr[n-1]`, denoting the elements of the array. **Output:** - Output the list of integers after compressing the original list by removing consecutive duplicates. **Constraints:** - (1 leq n leq 10^5) - (1 leq arr[i] leq 10^6) **Sample Input:** ``` 10 1 2 2 3 3 3 4 4 5 1 ``` **Sample Output:** ``` 1 2 3 4 5 1 ``` **Explanation:** - The initial list is `[1, 2, 2, 3, 3, 3, 4, 4, 5, 1]` - Removing consecutive duplicates results in `[1, 2, 3, 4, 5, 1]` This question poses a typical problem of removing consecutive duplicates and maintaining the order of the elements while ensuring all unique elements appear at least once in their original sequencing. It\'s a straightforward problem but with a large input constraint which requires an efficient solution.","solution":"def compress_list(arr): Remove consecutive duplicate elements from the list while keeping at least one of each number in their original order. Parameters: arr (list of ints): The list of integers to be compressed. Returns: list of ints: The compressed list with consecutive duplicates removed. if not arr: return [] compressed = [arr[0]] for num in arr[1:]: if num != compressed[-1]: compressed.append(num) return compressed"},{"question":"There are n cinemas in Movieland, numbered from 1 to n, connected by m bidirectional highways. The j-th highway connects cinema aj and bj. Each cinema i has a specific ticket price pi. Now, there are q queries for you to handle. There are two types of queries: \\"T a p\\": The ticket price in cinema a is changed to p. \\"B a b\\": A moviegoer wants to travel from cinema a to b. He will choose a route and does not want to visit a cinema twice on the same route. He will buy tickets at the cinema where the tickets are the cheapest (possibly exactly at cinema a or b). You should output the minimum possible ticket price that he can buy during his travel. More formally, we can define routes as follows: A route is a sequence of cinemas [x1, x2, ..., xk], where k is a certain positive integer. For any 1 ≤ i < j ≤ k, xi ≠ xj. For any 1 ≤ i < k, there is a highway connecting xi and xi + 1. The minimum ticket price of the route is min(px1, px2, ..., pxk). The required answer is the minimum value of the minimum ticket prices of all valid routes from a to b. Input The first line of input contains three integers n, m, q (1 ≤ n, m, q ≤ 105), separated by a single space. Next n lines contain integers pi (1 ≤ pi ≤ 109). Next m lines contain pairs of space-separated integers aj and bj (1 ≤ aj, bj ≤ n, aj ≠ bj). It is guaranteed that there is at most one highway connecting the same pair of cinemas. There is always at least one valid route between any two cinemas. The next q lines each describe a query. The format is \\"T a p\\" or \\"B a b\\" (1 ≤ a, b ≤ n, 1 ≤ p ≤ 109). Output For each query of type \\"B\\", output the corresponding answer. SAMPLE INPUT 3 3 3 5 3 7 1 2 2 3 1 3 B 1 3 T 2 1 B 1 3 SAMPLE OUTPUT 3 1","solution":"def process_queries(n, m, q, prices, roads, queries): from collections import defaultdict, deque import heapq def build_adj_list(roads): adj_list = defaultdict(list) for a, b in roads: adj_list[a].append(b) adj_list[b].append(a) return adj_list def dijkstra_min_price(start, prices, adj_list): pq = [(prices[start - 1], start)] min_price = {} while pq: current_price, node = heapq.heappop(pq) if node in min_price: continue min_price[node] = current_price for neighbor in adj_list[node]: if neighbor not in min_price: next_price = min(current_price, prices[neighbor - 1]) heapq.heappush(pq, (next_price, neighbor)) return min_price adj_list = build_adj_list(roads) min_price_cache = {} result = [] for query in queries: if query[0] == \'T\': a, p = query[1], query[2] prices[a - 1] = p min_price_cache.clear() elif query[0] == \'B\': a, b = query[1], query[2] if (a, b) not in min_price_cache: min_price_from_a = dijkstra_min_price(a, prices, adj_list) min_price_cache[(a, b)] = min_price_from_a[b] min_price_cache[(b, a)] = min_price_from_a[b] result.append(min_price_cache[(a, b)]) return result # Example usage: n = 3 m = 3 q = 3 prices = [5, 3, 7] roads = [(1, 2), (2, 3), (1, 3)] queries = [(\'B\', 1, 3), (\'T\', 2, 1), (\'B\', 1, 3)] result = process_queries(n, m, q, prices, roads, queries) print(result)"},{"question":"A medieval castle is under siege, and you are tasked with setting up an alert system to notify the defenders about enemy movements on the battlefield. Your radar system can track the coordinates of each enemy soldier and your task is to determine whether any enemies have breached the designated alerting zone around the castle. The battlefield is represented as a 2D plane with the castle positioned at the origin (0, 0). The alerting zone is defined as a circle centered at the origin with a given radius r. You need to process the coordinates of all enemy soldiers and determine if there are any soldiers within or on the boundary of this circular alert zone. -----Task----- Given an integer r (the alerting radius) and a list of (x, y) coordinates representing the positions of enemy soldiers, determine if any of the soldiers are within or on the alerting circle\'s boundary. -----Input----- The first line contains the integer r (the radius of the alerting zone). The second line contains an integer n (the number of enemy soldiers). Each of the next n lines contains two space-separated integers x and y (−10^6 ≤ x, y ≤ 10^6), representing the coordinates of an enemy soldier. -----Output----- Output \\"Alert\\" if any soldier is within or on the boundary of the alerting zone. Otherwise, output \\"Safe\\". -----Example----- Sample Input: 5 3 4 3 6 7 1 1 Sample Output: Alert Explanation: The first enemy is inside the alerting zone since (4, 3) is within the circle centered at (0, 0) with radius 5. Hence, the output is \\"Alert\\". This question assesses the candidate\'s ability to work with basic geometric concepts, particularly circles, and their application in a coordinate plane, along with basic input-output handling in competitive programming.","solution":"def check_alert(radius, soldiers): Determines if any enemy soldiers are within or on the boundary of the alerting circle centered at (0, 0) with the given radius. :param radius: The radius of the alerting zone. :param soldiers: A list of tuples representing the coordinates of enemy soldiers. :return: \\"Alert\\" if any soldier is within or on the alerting zone, otherwise \\"Safe\\". radius_squared = radius ** 2 for soldier in soldiers: x, y = soldier distance_squared = x ** 2 + y ** 2 if distance_squared <= radius_squared: return \\"Alert\\" return \\"Safe\\""},{"question":"You are given an array of n integers. In a single operation, you can remove any two elements from the array and replace them with their sum. Determine the minimum number of operations needed to make all the elements of the array equal. If it is impossible to make all the elements equal, output -1. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains a single integer n denoting the number of integers in the array. The second line contains n space-separated integers representing the elements of the array. Output For each test case, output a single line containing a single integer corresponding to the answer of the problem. Constraints 1 ≤ T ≤ 10^4 1 ≤ n ≤ 100 1 ≤ array elements ≤ 10^9 Example Input: 2 4 1 1 1 1 3 1 2 3 Output: 0 1 Explanation Example case 1. All elements are already equal, so no operations are needed. Example case 2. You can remove the elements 1 and 2 from the array and replace them with their sum 3, resulting in the array [3, 3]. So only 1 operation is needed.","solution":"def min_operations_to_equal_elements(T, test_cases): results = [] for i in range(T): n, array = test_cases[i] if n == 1: results.append(0) continue unique_elements = set(array) if len(unique_elements) == 1: results.append(0) elif len(unique_elements) > 1: results.append(n - 1) return results"},{"question":"John is planning a hiking trip and wants to make sure he properly schedules his hikes for the best experience. John has a vacation that lasts `d` days and he wants to hike for exactly `h` days during this period. Each day he either hikes (spends time at one place) or rests (does not hike). However, due to variable weather conditions, he has a list of intervals during which the hiking trails are closed and he cannot hike. Help John by determining if it\'s possible to exactly fit `h` hike days into his vacation given the closed intervals. Input The first line contains two integers `d` and `h` (1 ≤ h ≤ d ≤ 100). The second line contains an integer `n` (0 ≤ n ≤ 100), the number of closed intervals. Each of the following `n` lines contains two integers `ci` and `di` (1 ≤ ci, di ≤ d; ci ≤ di), which denote a closed interval from day `ci` to day `di` (inclusive). Output Print \\"YES\\" if it\'s possible to exactly schedule `h` hike days, otherwise print \\"NO\\". Examples Input 7 3 2 2 4 6 6 Output YES Input 10 5 3 1 2 3 5 7 8 Output NO","solution":"def can_schedule_hikes(d, h, closed_intervals): Determines if it\'s possible to schedule exactly h hike days in d days given the closed intervals. Parameters: d (int): Total number of vacation days. h (int): Total number of hike days needed. closed_intervals (list of tuples): List of closed intervals (start, end). Returns: str: \\"YES\\" if it\'s possible to schedule exactly h hikes, otherwise \\"NO\\". available_days = set(range(1, d+1)) for start, end in closed_intervals: for day in range(start, end + 1): available_days.discard(day) return \\"YES\\" if len(available_days) >= h else \\"NO\\" # Example usage: # d = 7, h = 3, closed_intervals = [(2, 4), (6, 6)] # Output: \\"YES\\""},{"question":"Task You are given a list of dictionaries representing students, where each dictionary contains \'name\' (a string) and \'grades\' (a list of integers). Your task is to identify the student with the highest average grade and return their name. If there is a tie, return the name of the student who appears first in the list. # Example For ``` students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [90, 80, 70]}, {\\"name\\": \\"Bob\\", \\"grades\\": [88, 92]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [100, 60, 70]} ] ``` the result should be `\\"Alice\\"`. Alice\'s average grade is (90 + 80 + 70) / 3 = 80. Bob\'s average grade is (88 + 92) / 2 = 90. Charlie\'s average grade is (100 + 60 + 70) / 3 ≈ 76.67. Bob has the highest average grade. # Input/Output - `[input]` list of dictionaries `students` A list of student records, each record is a dictionary with: - `\\"name\\"`: a non-empty string - `\\"grades\\"`: a non-empty list of integers, where each integer is between 0 and 100. - `[output]` string The name of the student with the highest average grade.","solution":"def student_with_highest_avg_grade(students): Returns the name of the student with the highest average grade. If there is a tie, returns the name of the student who appears first in the list. :param students: List of dictionaries with \'name\' and \'grades\' :return: Name of the student with the highest average grade max_avg = float(\'-inf\') top_student = \\"\\" for student in students: avg_grade = sum(student[\'grades\']) / len(student[\'grades\']) if avg_grade > max_avg: max_avg = avg_grade top_student = student[\'name\'] elif avg_grade == max_avg and top_student == \\"\\": top_student = student[\'name\'] return top_student"},{"question":"Given an array of integers nums, a Reverse Pair is a pair (i, j) where 0 ≤ i < j < len(nums) and nums[i] > 2 * nums[j]. Your task is to determine the number of Reverse Pairs in the array. -----Input----- The first line of the input contains a single integer n, representing the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. -----Output----- Print a single integer, the number of Reverse Pairs in the array. -----Constraints----- - 1 ≤ n ≤ 100 - -10^4 ≤ nums[i] ≤ 10^4 -----Example----- Input: 5 1 3 2 3 1 Output: 2 -----Explanation----- There are two reverse pairs: (3, 1) and (3, 1). For both these pairs, num[i] > 2 * nums[j]. Input: 4 4 1 2 3 Output: 1 -----Explanation----- There is only one reverse pair: (4, 1). For this pair, 4 > 2 * 1.","solution":"def reverse_pairs(nums): Returns the number of reverse pairs in the array. A reverse pair is defined as (i, j) where 0 ≤ i < j < len(nums) and nums[i] > 2 * nums[j]. count = 0 n = len(nums) for i in range(n): for j in range(i + 1, n): if nums[i] > 2 * nums[j]: count += 1 return count"},{"question":"Write a function that takes an array of integers and returns the difference between the largest even number and the smallest odd number in the array. If no even number or odd number is found, return -1. Examples ``` [4, 6, 8, 9, 15, 17] ==> 8 - 9 = -1 [2, 10, 12, 14, 11, 3, 5] ==> 14 - 3 = 11 [7, 13, 19, 28] ==> 28 - 7 = 21 [4, 8, 12, 16] ==> -1 (No odd numbers) [3, 7, 11, 19] ==> -1 (No even numbers) ```","solution":"def diff_even_odd(arr): Returns the difference between the largest even number and the smallest odd number in the array. If no even number or no odd number is found, returns -1. even_numbers = [num for num in arr if num % 2 == 0] odd_numbers = [num for num in arr if num % 2 != 0] if not even_numbers or not odd_numbers: return -1 largest_even = max(even_numbers) smallest_odd = min(odd_numbers) return largest_even - smallest_odd"},{"question":"Given an integer array `nums`, return the largest integer that only occurs once. If no integer occurs exactly once, return -1. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array `nums`. The second line contains n integers ai (|ai| ≤ 10^9) — the elements of the array. Output Return the largest integer that only occurs once, or -1 if no such integer exists. Examples Input 5 4 9 2 9 7 Output 7 Input 4 1 1 2 2 Output -1","solution":"def largest_unique_number(nums): Returns the largest integer in the array that occurs exactly once. If no such integer exists, returns -1. from collections import Counter counts = Counter(nums) # Filter numbers that occur exactly once and find the maximum unique_numbers = [num for num in counts if counts[num] == 1] return max(unique_numbers) if unique_numbers else -1"},{"question":"Mary is managing a warehouse that stores a variety of items. The warehouse is organized in a single row of bins, each containing a different type of item. Mary wants to perform an inventory check to ensure that certain items are available in sequential bins without gaps. Specifically, given a list of items to check and the current sequence of items in the warehouse, Mary needs to determine if all items in the list can be found as a contiguous subsequence within the warehouse bins. -----Input----- The first line of the input contains two integers N and M, where N is the number of bins in the warehouse, and M is the number of items in the list Mary wants to check. The second line contains N integers B_ i, representing the inventory items in each bin from left to right. The third line contains M integers L_ j, representing the items Mary wants to check. -----Output----- Output \\"All items found\\" if all items in the list can be found as a contiguous subsequence in the warehouse bins. Otherwise, output \\"Check inventory\\". -----Limits----- - 1 leq N leq 10000 - 1 leq M leq N - 1 leq B_ i, L_ j leq 100000 -----Examples----- Sample Input: 10 3 5 8 12 14 7 20 15 9 6 11 14 7 20 Sample Output: All items found Sample Input: 7 4 3 6 2 8 1 9 4 6 2 9 4 Sample Output: Check inventory","solution":"def inventory_check(N, M, warehouse, items): Determines if all items in the list can be found as a contiguous subsequence in the warehouse bins. :param N: int - number of bins in the warehouse. :param M: int - number of items in the list to be checked. :param warehouse: List[int] - inventory items in each bin. :param items: List[int] - items to check. :return: str - \\"All items found\\" if the items can be found as a contiguous subsequence, otherwise \\"Check inventory\\". # Convert lists to strings to use substring search warehouse_str = \' \'.join(map(str, warehouse)) items_str = \' \'.join(map(str, items)) if items_str in warehouse_str: return \\"All items found\\" else: return \\"Check inventory\\""},{"question":"Given an array of N integers, we want to select a contiguous subarray such that after rotating the subarray by 1 position to the right, the maximum element in the resulting subarray is minimized. The rotation means the last element of the subarray moves to the first position, and all other elements move one position to the right. For example, if the subarray is [3, 6, 1], after rotating it becomes [1, 3, 6]. The maximum element in this rotated subarray is 6. Write a program to find the minimum possible maximum element after right rotating any contiguous subarray of the original array. ------ Input Format ------ - The first line of the input contains a single integer T - the number of test cases. - The description of T test cases follows. - The first line of each test case contains N - the number of elements in the array. - The second line contains N integers A_{1}, A_{2}, ldots, A_{N}, representing the elements of the array. ------ Output Format ------ For each test case, output a single integer - the minimum possible maximum element after rotating any contiguous subarray of the array to the right by 1 position. ------ Constraints ------ 1 leq T leq 1000 2 leq N leq 10^{5} 1 leq A_{i} leq 10^{6} - Sum of N over all test cases does not exceed 5 cdot 10^{5}. ------ Sample Input 1 ------ 3 4 3 1 4 5 5 2 2 2 2 2 3 10 1 8 ------ Sample Output 1 ------ 4 2 10 ------ Explanation 1 ------ Test case 1: For the array [3, 1, 4, 5], the optimal subarray is [3, 1, 4] which after rotation becomes [4, 3, 1]. The maximum element is 4. Test case 2: For the array [2, 2, 2, 2, 2], any subarray will work, as they all consist of the same repeated element and their rotation will have that element as the maximum, which is 2. Test case 3: For the array [10, 1, 8], any valid subarray [10, 1] or [1, 8], after rotation, will have the maximum element as 10. Thus, the result is 10.","solution":"def min_possible_max_after_rotation(arr): Given an array, find the minimum possible maximum element after right rotating any contiguous subarray by 1 position. return max(arr[:-1]) def process_test_cases(T, test_cases): results = [] for case in test_cases: N, arr = case results.append(min_possible_max_after_rotation(arr)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(T): N = int(lines[index].strip()) arr = list(map(int, lines[index + 1].strip().split())) test_cases.append((N, arr)) index += 2 return T, test_cases"},{"question":"Write a function that takes a collection of time intervals and merges any overlapping intervals. Each interval is represented as a pair of integers [start, end], indicating the start and end times. The intervals do not have to be in any specific order. Your function should return a list of the merged intervals in ascending order of their start times. Input: - The first line contains a single integer n, the number of intervals. - The next n lines each contain two integers, the start and end of an interval. Output: - The function should return a list of merged intervals, each represented as a pair of integers [start, end]. Constraints: - 1 ≤ n ≤ 10^4 - 0 ≤ start < end ≤ 10^6 Example: Input: 4 1 3 2 4 5 7 6 8 Output: 1 4 5 8 Explanation: The given intervals are [1, 3], [2, 4], [5, 7], and [6, 8]. The intervals [1, 3] and [2, 4] overlap, so they are merged into [1, 4]. Similarly, intervals [5, 7] and [6, 8] overlap and are merged into [5, 8]. Therefore, the merged intervals are [1, 4] and [5, 8].","solution":"def merge_intervals(intervals): Takes a list of intervals and merges any overlapping intervals. Parameters: intervals (list of lists): A list of intervals where each interval is a list containing two integers [start, end]. Returns: list of lists: A list of merged intervals in ascending order of their start times. if not intervals: return [] # Sort the intervals by their start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] if current[0] <= last_merged[1]: # If current interval overlaps with the last merged interval, merge them merged[-1] = [last_merged[0], max(last_merged[1], current[1])] else: # Otherwise, add the current interval to the list of merged intervals merged.append(current) return merged"},{"question":"A hotel has a series of rooms, each booked for a consecutive number of days. Given the check-in and check-out dates for each booking, determine the maximum number of rooms occupied at any moment. Constraints: - The number of bookings, `n`, will be between `1` and `1000`. - Dates are given in the format `YYYY-MM-DD`. - The check-in date will always be before the check-out date. Input The first line contains an integer `n`, the number of bookings. The following `n` lines each contain two space-separated dates representing the check-in and check-out dates for a booking. Output Print a single integer, the maximum number of rooms occupied at any moment. Examples Input 3 2023-01-01 2023-01-05 2023-01-04 2023-01-10 2023-01-02 2023-01-06 Output 3 Input 2 2023-03-01 2023-03-04 2023-03-02 2023-03-03 Output 2","solution":"def max_rooms_occupied(bookings): from datetime import datetime events = [] # Transform the check-in and check-out dates into events for check_in, check_out in bookings: check_in_date = datetime.strptime(check_in, \\"%Y-%m-%d\\") check_out_date = datetime.strptime(check_out, \\"%Y-%m-%d\\") events.append((check_in_date, 1)) # Room check-in events.append((check_out_date, -1)) # Room check-out # Sort events by date events.sort() max_rooms = 0 current_rooms = 0 # Traverse the events to find max room occupancy for _, event in events: current_rooms += event if current_rooms > max_rooms: max_rooms = current_rooms return max_rooms"},{"question":"A gardener is tasked with planting flowers in a row of flowerbeds. There are N flowerbeds arranged in a straight line. Each flowerbed can either have a flower planted in it or remain empty. The gardener wants to maximize the number of flowers planted while ensuring that no two flowers are planted in adjacent flowerbeds. Given an array of N integers where each integer is either 1 (indicating a flowerbed is already occupied by a flower) or 0 (indicating an empty flowerbed), write a program to determine the maximum number of new flowers that can be planted without violating the no-adjacent-flowers rule. -----Input----- - The first line contains a single integer N denoting the number of flowerbeds. - The second line contains N space-separated integers each representing a flowerbed (either 0 or 1). -----Output----- - In a single line, print a single integer representing the maximum number of new flowers that can be planted. -----Constraints----- - 1 ≤ N ≤ 100000 - Each flowerbed contains either 0 or 1. -----Example----- Input: 5 1 0 0 0 1 Output: 1 Input: 3 0 0 0 Output: 2 Input: 4 1 0 0 0 Output: 1 -----Explanation----- For the first sample, one new flower can be planted in the third flowerbed. For the second sample, flowers can be planted in the first and last flowerbeds. For the third sample, only one flower can be planted in the second or third flowerbed.","solution":"def max_new_flowers(flowerbeds): Returns the maximum number of new flowers that can be planted without violating the no-adjacent-flowers rule. n = len(flowerbeds) max_flowers = 0 i = 0 while i < n: if flowerbeds[i] == 0: if (i == 0 or flowerbeds[i - 1] == 0) and (i == n - 1 or flowerbeds[i + 1] == 0): max_flowers += 1 flowerbeds[i] = 1 i += 1 # Move to the next position after this slot i += 1 return max_flowers"},{"question":"Given a string s of lowercase letters, a k duplicate removal consists of choosing k adjacent and equal letters from the string and removing them, causing the left and right side of the removed substring to concatenate together. We repeatedly make k duplicate removals on s until we can no longer do so. Return the final string after all such duplicate removals have been made. Example 1: ``` Input: s = \\"abcd\\", k = 2 Output: \\"abcd\\" Explanation: There\'s nothing to remove. ``` Example 2: ``` Input: s = \\"deeedbbcccbdaa\\", k = 3 Output: \\"aa\\" Explanation: First delete \\"eee\\" and \\"ccc\\", get \\"ddbbbdaa\\" Then delete \\"bbb\\", get \\"dddaa\\" Finally delete \\"ddd\\", get \\"aa\\" ``` Example 3: ``` Input: s = \\"pbbcggttciiippooaais\\", k = 2 Output: \\"ps\\" Explanation: Removing \\"bb\\" and \\"gg\\" and \\"ii\\" and \\"pp\\" and \\"oo\\", get \\"ps\\". ``` Constraints: * 1 <= s.length <= 10^5 * 2 <= k <= 10^4 * s only contains lowercase English letters.","solution":"def remove_duplicates(s: str, k: int) -> str: stack = [] # a stack to keep track of characters and their counts for char in s: # if the stack is not empty and the top of the stack has the same character, increment the count if stack and stack[-1][0] == char: stack[-1][1] += 1 else: stack.append([char, 1]) # else push the character and count 1 # if the top of stack has `k` count, pop it if stack[-1][1] == k: stack.pop() # reconstruct the string from the stack result = \'\'.join(char * count for char, count in stack) return result"},{"question":"Write a function to find the maximum number of tasks that can be completed in a given day. Each task requires a certain amount of time to be completed, and you have a fixed amount of total available time for the day. The tasks are represented as an array of integers where each integer denotes the time required by that task. You are also given the total available time for the day. Determine the maximum number of tasks that can be done without exceeding the total available time. You may assume that you can complete the tasks in any order. Example 1: Input: tasks = [2, 3, 1, 4, 2], total_time = 6 Output: 3 Explanation: You can complete 3 tasks (1 + 2 + 2 = 5 which is ≤ 6). The optimal way is to select tasks 1, 2, and 2. Example 2: Input: tasks = [5, 3, 4, 2, 1], total_time = 7 Output: 3 Explanation: You can complete 3 tasks (1 + 2 + 3 = 6 which is ≤ 7). The optimal way is to select tasks 1, 2, and 3. Your Task: You don\'t need to read or print anything. Your task is to complete the function `maxTasks()` which takes `tasks` and `total_time` as input parameters and returns the maximum number of tasks that can be completed. Expected Time Complexity: O(N*logN) Expected Auxiliary Space: O(1) Constraints: 1 ≤ tasks.length ≤ 1000 1 ≤ tasks[i] ≤ 1000 1 ≤ total_time ≤ 10000","solution":"def maxTasks(tasks, total_time): Determine the maximum number of tasks that can be completed without exceeding the total available time. :param tasks: List[int] - A list of integers where each integer represents the time required for a task. :param total_time: int - The total available time for the day. :return: int - The maximum number of tasks that can be completed. # Sort tasks by the time they take in ascending order tasks.sort() task_count = 0 time_spent = 0 for task_time in tasks: if time_spent + task_time <= total_time: time_spent += task_time task_count += 1 else: break return task_count"},{"question":"In the world of mechanical engineering, gears are an essential component of many machines. Jane is designing a series of machines wherein each machine is composed of several gears. Each machine must have a set of interconnected gears that meet specific compatibility requirements. Jane wants to maximize the number of machines she can build using the available gears. Each gear has a unique identifier and specified compatibility with other gears. Two gears are considered compatible if they can directly connect with each other. Each machine is an independent set of gears that are fully connected, meaning that for each pair of gears in the machine, there must be a connection path through other gears, if not directly. Jane can only use a gear in one machine, and each machine must have at least two gears. The challenge is to determine the maximum number of machines she can build with the given gears and their compatibility. **Input format** The input consists of: 1. The first line contains two integers, N (number of gears) and M (number of compatibility relationships) (2 ≤ N ≤ 100, 0 ≤ M ≤ N*(N-1)/2). 2. The next M lines each contain two integers u and v, indicating that gear u and gear v are compatible (1 ≤ u, v ≤ N, u ≠ v). **Output format** Output a single integer, the maximum number of fully connected machines that can be assembled. **Input example 1** 5 4 1 2 1 3 4 5 2 3 **Output example 1** 2 **Input example 2** 6 9 1 2 1 3 1 4 1 5 1 6 2 3 2 4 2 5 2 6 **Output example 2** 1 **Input example 3** 8 10 1 2 1 3 2 3 4 5 6 7 7 8 6 8 4 6 5 7 5 8 **Output example 3** 2 **Explanation of example 1:** - In example 1, we have 5 gears with 4 compatibility relationships. We can form the following fully connected machines: - Machine 1: [1, 2, 3] - Machine 2: [4, 5] - Each gear in a machine must be fully connected to other gears in that machine. - Hence, the maximum number of such machines is 2. **Explanation of example 2:** - In example 2, we have 6 gears with 9 compatibility relationships. - All the gears are compatible such that they all form a single interconnected machine. - Hence, the maximum number of fully connected machines is 1. **Explanation of example 3:** - In example 3, we have 8 gears and 10 compatibility relationships. - We can form the following fully connected machines: - Machine 1: [1, 2, 3] - Machine 2: [4, 5, 6, 7, 8] - Hence, the maximum number of such machines is 2.","solution":"def find_maximum_machines(N, M, relationships): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in relationships: graph[u].append(v) graph[v].append(u) # Function to perform BFS and get all nodes in the same connected component def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited visited_all = set() machines_count = 0 for gear in range(1, N + 1): if gear not in visited_all: connected_component = bfs(gear) if len(connected_component) > 1: machines_count += 1 visited_all.update(connected_component) return machines_count # Example usage: # relationships = [(1, 2), (1, 3), (4, 5), (2, 3)] # print(find_maximum_machines(5, 4, relationships)) # Output: 2"},{"question":"You are given an array of n integers. Your task is to find three distinct indices i, j, k such that the sum of the elements at these indices is the maximum possible. -----Input----- The first line of the input contains one integer n (3 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer max_sum — the maximum sum of the elements at indices i, j, k. In the second line, print three distinct integers i, j, k (1 le i, j, k le n and i ne j ne k ne i) that correspond to the indices resulting in the maximum sum. If there are multiple answers, you can print any. -----Example----- Input 5 1 2 3 4 5 Output 12 3 4 5 -----Notes----- In the given example, the maximum possible sum is 12, which can be obtained by picking the elements at indices 3, 4, and 5 (values 3, 4, and 5, respectively).","solution":"def find_max_sum(arr): Returns the maximum possible sum of three distinct elements from the array and their 1-based indices. n = len(arr) if n < 3: raise ValueError(\\"The array must contain at least three elements\\") # Create list of tuples (value, index), then sort by value in descending order indexed_arr = sorted([(val, idx + 1) for idx, val in enumerate(arr)], reverse=True, key=lambda x: x[0]) # Select top three elements max_sum = indexed_arr[0][0] + indexed_arr[1][0] + indexed_arr[2][0] indices = [indexed_arr[0][1], indexed_arr[1][1], indexed_arr[2][1]] return max_sum, indices"},{"question":"Given an integer array arr of size n, process q queries of the following types: - 1 i x — Add the value x to the element at index i of the array. - 2 l r — Compute the sum of the elements of the subarray from index l to r. Input The first line of the input contains the integer n (1 ≤ n ≤ 105) — the size of the array arr. The second line contains n integers representing the elements of the array (−109 ≤ arr[i] ≤ 109). The third line contains an integer q (1 ≤ q ≤ 105) — the number of queries. The next q lines contain queries and may have one of the following forms: - 1 i x (1 ≤ i ≤ n, −109 ≤ x ≤ 109) - 2 l r (1 ≤ l ≤ r ≤ n) Output For each query of type 2, output the required sum in a separate line. Examples Input 5 1 2 3 4 5 4 2 1 3 1 2 5 2 1 3 2 3 5 Output 6 11 15 Note For the first query, the sum of the subarray from index 1 to 3 is 1 + 2 + 3 = 6. After the update in the second query, the array becomes [1, 7, 3, 4, 5]. For the third query, the sum of the subarray from index 1 to 3 is 1 + 7 + 3 = 11. For the fourth query, the sum of the subarray from index 3 to 5 is 3 + 4 + 5 = 12.","solution":"def process_queries(n, arr, q, queries): results = [] for query in queries: if query[0] == 1: # Update query i = query[1] - 1 # Converting 1-based index to 0-based index x = query[2] arr[i] += x elif query[0] == 2: # Sum query l = query[1] - 1 # Converting 1-based index to 0-based index r = query[2] - 1 # Converting 1-based index to 0-based index subarray_sum = sum(arr[l:r+1]) results.append(subarray_sum) return results"},{"question":"Given a string s, you need to determine whether it is possible to construct a palindrome by rearranging the characters of the string. If it is possible, output any palindrome that can be formed; otherwise, output \\"Not possible\\". Input The first line contains a single string s, which consists only of lowercase English letters. The length of s does not exceed 105. Output If it is possible to rearrange the characters of s to form a palindrome, print one possible palindrome. Otherwise, print \\"Not possible\\". Examples Input civic Output civic Input ivicc Output civic Input hello Output Not possible Input madam Output madam","solution":"from collections import Counter def can_form_palindrome(s): Determines if it is possible to rearrange the characters of the string s to form a palindrome. If it is possible, returns one possible palindrome. Otherwise, returns \\"Not possible\\". # Count the characters in the string count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for char in count if count[char] % 2 != 0) # More than one character with an odd count means a palindrome is not possible if odd_count > 1: return \\"Not possible\\" # Build the first half and the middle (if any) of the palindrome first_half = [] middle = \'\' for char, freq in count.items(): if freq % 2 == 1: middle = char first_half.append(char * (freq // 2)) # Join the first half with its reverse and the middle character (if any) first_half = \'\'.join(first_half) return first_half + middle + first_half[::-1]"},{"question":"Given an array nums of n integers, where n > 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. Note: Please solve it without using division and in O(n). Example 1: Input: nums = [1,2,3,4] Output: [24,12,8,6] Example 2: Input: nums = [4,5,1,8,2] Output: [80,64,320,40,160] Your Task: You don\'t need to read input or print anything. Your task is to complete the function productExceptSelf() which takes the array nums as input parameter and returns an array of integers. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) (The output array does not count as extra space for the purpose of space complexity analysis.) Constraints: 2 <= n <= 10^5 -30 <= nums[i] <= 30","solution":"def productExceptSelf(nums): n = len(nums) output = [1] * n # Calculate left products left_prod = 1 for i in range(n): output[i] = left_prod left_prod *= nums[i] # Calculate right products and combine with left products right_prod = 1 for i in range(n-1, -1, -1): output[i] *= right_prod right_prod *= nums[i] return output"},{"question":"Given a string `s`, write a function to determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Return `true` if it is a palindrome; otherwise, return `false`. A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". Ensure your solution is functional for strings containing spaces, punctuation, and mixed cases, and runs efficiently for large input strings.","solution":"def is_palindrome(s: str) -> bool: Returns True if s is a palindrome, considering only alphanumeric characters and ignoring cases. Otherwise, returns False. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Given an array of integers nums, partition it into two contiguous subarrays left and right so that: - Every element in left is less than or equal to every element in right. - Both left and right are non-empty. - left has the smallest possible size. Return the length of left after such a partitioning. It is guaranteed that there is at least one way to partition nums as described. Example 1: Input: nums = [5,0,3,8,6] Output: 3 Explanation: left = [5,0,3], right = [8,6] Example 2: Input: nums = [1,1,1,0,6,12] Output: 4 Explanation: left = [1,1,1,0], right = [6,12]","solution":"def partitionDisjoint(nums): Returns the length of the left subarray after partitioning nums into left and right subarrays as described. n = len(nums) max_left = nums[0] max_so_far = nums[0] partition_idx = 0 for i in range(1, n): if nums[i] < max_left: partition_idx = i max_left = max_so_far else: max_so_far = max(max_so_far, nums[i]) return partition_idx + 1"},{"question":"A company organizes an annual programming competition involving multiple teams. Each team consists of exactly three members. After the competition, each member receives a unique score based on their performance. The final score of a team is the sum of the top two scores among its members. The best team is the one with the highest final score. If multiple teams have the same final score, the team with the smallest index (as appeared in the input list) is considered the best. Write a program to determine which team won the competition. **Input:** The first line contains an integer T (1 le T le 100), the number of teams. Each of the following T lines contains three integers, the scores of the three members of the team. **Output:** Output the index of the winning team. **Explanation of Sample Input 1:** In this example, there are three teams: - Team 1 has member scores [4, 8, 6]. The top two scores are 8 and 6, with a final score of 14. - Team 2 has member scores [7, 5, 9]. The top two scores are 9 and 7, with a final score of 16. - Team 3 has member scores [5, 5, 5]. The top two scores are 5 and 5, with a final score of 10. Team 2 has the highest final score of 16, so it wins. **Examples:** Sample Input 1: ``` 3 4 8 6 7 5 9 5 5 5 ``` Sample Output 1: ``` 2 ``` Sample Input 2: ``` 4 1 2 3 10 20 30 5 5 5 30 10 10 ``` Sample Output 2: ``` 2 ```","solution":"def find_winning_team(scores): Finds the index of the winning team based on the sum of the top two scores in each team. Parameters: scores (list of lists): A list where each sublist contains three integers representing the scores of a team. Returns: int: The 1-based index of the winning team. max_score = -1 winning_team_index = -1 for i, team_scores in enumerate(scores): sorted_scores = sorted(team_scores, reverse=True) team_score = sorted_scores[0] + sorted_scores[1] if team_score > max_score: max_score = team_score winning_team_index = i return winning_team_index + 1"},{"question":"Unique Paths with Obstacles Write a program to determine the number of unique paths in a grid with obstacles. The grid is represented by a matrix of integers where the value `0` indicates an empty cell and the value `1` indicates an obstacle. You can only move to the right or down from any cell and should find a path from the top-left corner to the bottom-right corner of the grid. Input The input consists of multiple datasets. Each dataset has the following structure: ``` h w g1,1 g1,2 g1,3 ... g1,w g2,1 g2,2 g2,3 ... g2,w ... gh,1 gh,2 gh,3 ... gh,w ``` - `h` is the height of the grid. - `w` is the width of the grid. - Each gi,j is either `0` (an empty cell) or `1` (an obstacle). The end of the input is indicated by `h = 0` and `w = 0`, which should not be processed. Output For each dataset, print the number of unique paths from the top-left corner to the bottom-right corner of the grid. If no path exists, output `0`. Constraints - `1 ≤ h, w ≤ 100` Sample Input ``` 3 3 0 0 0 0 1 0 0 0 0 4 5 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0 0 ``` Sample Output ``` 2 7 1 ```","solution":"def unique_paths_with_obstacles(grid): if not grid or grid[0][0] == 1: return 0 h = len(grid) w = len(grid[0]) dp = [[0] * w for _ in range(h)] dp[0][0] = 1 for i in range(h): for j in range(w): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def process_input(input_data): datasets = input_data.strip().split(\'nn\') results = [] for data in datasets: lines = data.strip().split(\'n\') h, w = map(int, lines[0].split()) if h == 0 and w == 0: break grid = [list(map(int, line.split())) for line in lines[1:]] results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Suzanne has recently started learning about data structures and she\'s fascinated with sorting algorithms. She wants to implement an interesting twist on sorting: instead of sorting an array in the usual ascending or descending order, she wants to sort it based on the frequency of elements in the array. More specifically, she wants to sort the elements by their frequency in ascending order. If two elements have the same frequency, they should appear in ascending order. Can you help her write a function to achieve this? -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5) — the elements of the array. -----Output----- Print the elements of the array, sorted based on the frequency of elements in ascending order. If two elements have the same frequency, print them in ascending order. -----Examples----- Input 5 4 5 6 5 4 Output 6 4 4 5 5 Input 10 1 2 2 3 3 3 4 4 4 4 Output 1 2 2 3 3 3 4 4 4 4 -----Note----- 1. In the first example, the frequency of elements is: {4: 2, 5: 2, 6: 1}. So, \'6\' appears first (frequency 1), followed by \'4\' and \'5\' (both frequency 2) arranged in ascending order. 2. In the second example, the elements are already sorted by their frequency as described: {1: 1, 2: 2, 3: 3, 4: 4}.","solution":"from collections import Counter def frequency_sort(n, arr): Sorts the array based on the frequency of elements in ascending order. If two elements have the same frequency, they appear in ascending order. :param n: int, number of elements in the array :param arr: list of int, the elements of the array :return: list of int, the sorted elements # Count the frequency of each element freq = Counter(arr) # Sort by frequency, then by element value sorted_arr = sorted(arr, key=lambda x: (freq[x], x)) return sorted_arr"},{"question":"The sorting machine in a factory needs a program to sort different types of boxes by their weights. You have been asked to help with writing a program that will sort the weights in non-descending order. -----Input:----- - The first line contains an integer N, the number of boxes. - The second line contains N integers representing the weights of the boxes separated by a space. -----Output:----- A single line with the sorted weights in non-descending order. -----Constraints----- - 1 leq N leq 10^5 - 1 leq text{Weight of each box} leq 10^6 -----Sample Input:----- 5 4 2 5 1 3 -----Sample Output:----- 1 2 3 4 5 -----EXPLANATION:----- The weights are sorted in non-descending order from the smallest weight to the largest weight.","solution":"def sort_weights(n, weights): Returns the weights sorted in non-descending order. Parameters: n (int): The number of weights. weights (list of int): The list of weights. Returns: list of int: The sorted list of weights. sorted_weights = sorted(weights) return sorted_weights # Function to format the output as a single line space-separated string def format_sorted_weights(sorted_weights): return \' \'.join(map(str, sorted_weights))"},{"question":"Given a list of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Implement this using the Kadane\'s algorithm. Constraints * 1 ≤ length of the list ≤ 1000 * The input consists of positive and negative integers. Input In the first line, an integer n is given denoting the length of the list. In the second line, n space-separated integers are given representing the elements of the list. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 4 5 Output 15 Input 5 -1 -2 -3 -4 -5 Output -1","solution":"def max_subarray_sum(arr): Function to find the maximum sum of a contiguous subarray using Kadane\'s Algorithm. Args: arr (list): List of integers. Returns: int: Maximum sum of the contiguous subarray. max_current = arr[0] max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a list of integers. Your task is to find the majority element, which is the element that appears more than floor(n/2) times. If no such element exists, return -1. Function Description Complete the `find_majority_element` function in the editor below. `find_majority_element` has the following parameters: - `list arr`: a list of integers Returns int: the majority element or -1 if no such element exists Input Format The first line contains an integer, n, the number of elements in the list. The second line contains n space-separated integers. Constraints 1 leq n leq 10^5 -10^9 leq arr[i] leq 10^9 Sample Input 0 7 1 2 3 1 1 1 2 Sample Output 0 1 Sample Input 1 6 1 2 3 4 5 6 Sample Output 1 -1","solution":"def find_majority_element(arr): Finds the majority element, which is the element that appears more than floor(n/2) times. If no such element exists, returns -1. Parameters: arr (list): A list of integers Returns: int: The majority element or -1 if no such element exists count = {} n = len(arr) # Count the occurrences of each element for num in arr: count[num] = count.get(num, 0) + 1 # Check for the majority element for num in count: if count[num] > n // 2: return num return -1"},{"question":"Write a function that takes in a list of integers representing daily temperatures, and output a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Your function should be efficient enough to handle the following constraints: * `1 <= temperatures.length <= 10^5` * `30 <= temperatures[i] <= 100` # Function signature ```python def daily_temperatures(temperatures: List[int]) -> List[int]: ``` # Input format * A single list of integers, `temperatures`, which represents daily temperatures. # Output format * A single list of integers where each integer represents the number of days you would have to wait for a warmer temperature or 0 if there is no such day. # Example ```python # Input temperatures = [73, 74, 75, 71, 69, 72, 76, 73] # Output expect_output = [1, 1, 4, 2, 1, 1, 0, 0] ``` Explanation: * For day 0 (temperature 73), the next warmer day is day 1 (temperature 74). Waiting period is 1 day. * For day 1 (temperature 74), the next warmer day is day 2 (temperature 75). Waiting period is 1 day. * For day 2 (temperature 75), the next warmer day is day 6 (temperature 76). Waiting period is 4 days. * For day 3 (temperature 71), the next warmer day is day 5 (temperature 72). Waiting period is 2 days. * For day 4 (temperature 69), the next warmer day is day 5 (temperature 72). Waiting period is 1 day. * For day 5 (temperature 72), the next warmer day is day 6 (temperature 76). Waiting period is 1 day. * For day 6 (temperature 76), there is no future day with a warmer temperature. Waiting period is 0 days. * For day 7 (temperature 73), there is no future day with a warmer temperature. Waiting period is 0 days.","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: This function takes a list of integers representing daily temperatures and returns a list where each element is the number of days to wait until a warmer temperature. If no such future day exists, the element is 0. result = [0] * len(temperatures) stack = [] for i, current_temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < current_temp: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"Leena is organizing her bookshelf, which consists of N books placed side by side from left to right. Each book has a thickness, given by an array of N integers where the i-th integer represents the thickness of the i-th book. Leena wants to reduce the width of the bookshelf by performing a sequence of steps. In each step, she removes all the books that have the current smallest thickness. She repeats this process until there are no books left on the shelf. Your task is to print the width of the bookshelf after each removal operation. Input Format The first line contains a single integer N (1 ≤ N ≤ 1000). The next line contains N integers: T(1), T(2), ..., T(N) separated by space, where T(i) represents the thickness of the i-th book. Output Format For each removal operation, print the width of the bookshelf after removing all books with the smallest thickness in separate lines. Constraints 1 ≤ T(i) ≤ 1000 SAMPLE INPUT 7 4 1 3 2 3 4 1 SAMPLE OUTPUT 17 12 8 4 Explanation: - The initial width of the bookshelf is 1 + 1 + 2 + 3 + 3 + 4 + 4 = 18. - In the first step, Leena removes all books with thickness 1, reducing the width to 2 + 3 + 3 + 4 + 4 = 16. - In the second step, she removes all books with thickness 2, reducing the width to 3 + 3 + 4 + 4 = 14. - In the third step, she removes all books with thickness 3, reducing the width to 4 + 4 = 8. - Finally, she removes all books with thickness 4, reducing the width to 0.","solution":"def bookshelf_reduction(n, thicknesses): remaining_thicknesses = thicknesses.copy() result = [] while remaining_thicknesses: total_width = sum(remaining_thicknesses) result.append(total_width) min_thickness = min(remaining_thicknesses) remaining_thicknesses = [t for t in remaining_thicknesses if t != min_thickness] return result"},{"question":"Given an array of integers, return all possible subsets (the power set). The solution set must not contain duplicate subsets and each subset should be sorted in non-decreasing order. The subsets should be sorted lexicographically in the output. Example 1: Input: [1, 2, 3] Output: [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]] Explanation: The possible subsets are as given in the output. Example 2: Input: [1, 2, 2] Output: [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]] Explanation: The possible subsets are as given in the output. Notice that duplicates subsets have been removed. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `subsets()` which takes an array of integers as input parameter and returns a list of lists representing all possible subsets in the specified order. Expected Time Complexity: O(2^n) Expected Space Complexity: O(2^n) Constraints: 1 <= length of array <= 10 -10 <= array[i] <= 10","solution":"def subsets(nums): Returns all unique subsets of a given list of integers, sorted in lexicographical order and without duplicates. Each subset is sorted. nums.sort() # Sort the input array result = [] subset = [] def backtrack(start): result.append(subset[:]) # Add current subset to results for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: # Skip duplicates continue subset.append(nums[i]) backtrack(i + 1) subset.pop() backtrack(0) return result"},{"question":"In a certain country, street addresses follow a peculiar numbering pattern. The country uses an ordered list of numbers called prime indexes. Prime index numbers are defined as the position numbers within the ordered sequence of prime numbers starting from the smallest prime number, 2. Your task is to compute the address number based on a given prime index. For example, for the prime index 1, the address number should be 2 (the 1st prime number), for the prime index 2, the address number should be 3 (the 2nd prime number), and so on. INPUT The first line of input is an integer T, the number of test cases. T is not larger than 100. The next T lines each contain a single positive integer P (1 ≤ P ≤ 1000), representing a prime index. OUTPUT For each test case, output the corresponding prime number. SAMPLE INPUT 3 1 2 10 SAMPLE OUTPUT 2 3 29","solution":"def sieve_of_eratosthenes(n): Returns a list of first n prime numbers using the Sieve of Eratosthenes algorithm. limit = 20000 # Arbitrary large limit to ensure we get at least 1000 primes sieve = [True] * limit sieve[0] = sieve[1] = False primes = [] for num in range(2, limit): if sieve[num]: primes.append(num) if len(primes) == n: break for multiple in range(num * num, limit, num): sieve[multiple] = False return primes def prime_address(indexes): Returns a list of prime numbers corresponding to the given list of prime indexes. max_index = max(indexes) primes = sieve_of_eratosthenes(max_index) return [primes[i - 1] for i in indexes]"},{"question":"You are given a string S consisting of N characters, each of which is either \'A\', \'B\', or \'C\'. You can replace any character in the string with any other character \'A\', \'B\', or \'C\' at a cost of 1. Your task is to find the minimum cost required to transform the string into a \\"balanced\\" string, such that each of \'A\', \'B\', and \'C\' appears the same number of times in the string. -----Constraints----- - 1 ≤ N ≤ 10^5 - N is divisible by 3 - The characters in the string are only \'A\', \'B\', and \'C\' -----Input----- Input is given from Standard Input in the following format: N S -----Output----- Print the minimum cost required to transform the string into a balanced string. -----Sample Input----- 6 AAABBB -----Sample Output----- 2 In this example, we can transform one \'A\' to \'C\' and one \'B\' to \'C\' to achieve the balanced string \\"AABCCC\\" with a total cost of 2.","solution":"def min_cost_to_balance_string(N, S): # count occurrences of A, B, and C count_A = S.count(\'A\') count_B = S.count(\'B\') count_C = S.count(\'C\') # the target number each character should have to be balanced target = N // 3 # calculate excesses and deficits excess_A = max(0, count_A - target) excess_B = max(0, count_B - target) excess_C = max(0, count_C - target) deficit_A = max(0, target - count_A) deficit_B = max(0, target - count_B) deficit_C = max(0, target - count_C) # the total cost is the sum of all adjustments needed total_cost = excess_A + excess_B + excess_C return total_cost"},{"question":"Miranda loves reading detective novels. She especially enjoys those where the main character receives coded messages that they must decipher in order to solve mysteries. Inspired by the books, Miranda has come up with her own coding challenge. She has written a message for you with numbers, each representing a corresponding letter of the alphabet (a=1, b=2, ..., z=26). However, to make things more challenging, she sometimes combined two digits together to represent a number from 1 to 26. Your task is to find out how many different ways there are to decode the message. For example, the string \\"12\\" can be decoded as \\"ab\\" (1 2) or \\"l\\" (12), resulting in 2 different ways. Write a function to compute how many different ways the message can be decoded. Input A single string containing only numeric characters. Output An integer representing the number of ways to decode the given string. Examples Input \\"123\\" Output 3 Explanation: \\"123\\" can be decoded as \\"abc\\" (1 2 3), \\"aw\\" (1 23), or \\"lc\\" (12 3). Input \\"27\\" Output 1 Explanation: \\"27\\" can only be decoded as \\"bg\\" (2 7). Decoding as \\"aa\\" or any other combination is not possible as 27 is not valid for two digits. Note: Consider that the input might contain leading zeros which are invalid for decoding. For example, \\"012\\" cannot be decoded. Input \\"001\\" Output 0 Explanation: \\"001\\" cannot be decoded as \\"0\\" is not valid. Input \\"2101\\" Output 1 Explanation: \\"2101\\" can be decoded as \\"uba\\" (21 01), \\"ba\\" being invalid due to the first zero.","solution":"def num_decodings(message): # Early exit for invalid starting messages if not message or message[0] == \'0\': return 0 n = len(message) dp = [0] * (n+1) dp[0], dp[1] = 1, 1 for i in range(2, n + 1): single_digit = int(message[i-1:i]) double_digit = int(message[i-2:i]) if 1 <= single_digit <= 9: dp[i] += dp[i-1] if 10 <= double_digit <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"A famous binary tree problem solver has been given a binary tree of N nodes, where each node has a unique value from 1 to N. Each node i has either zero, one, or two children. You need to determine the length of the longest path between any two nodes in the tree. The length of a path is measured in terms of the number of edges between two nodes. To simplify the problem, the binary tree is given in the form of an integer array of size (N-1), where each pair of consecutive integers u and v (1 ≦ u, v ≦ N) represents an edge between node u and node v. Constraints: - 1 ≦ N ≦ 100,000 Input: - The first line contains an integer N, the number of nodes in the tree. - Each of the next (N-1) lines contains two integers u and v, representing an edge between node u and node v. Output: - Print an integer representing the length of the longest path in the tree. Examples: Input: 5 1 2 1 3 3 4 3 5 Output: 3 Input: 7 1 2 1 3 2 4 2 5 3 6 3 7 Output: 4 Input: 3 1 2 2 3 Output: 2","solution":"from collections import deque, defaultdict def find_diameter(N, edges): if N == 1: return 0 def bfs(start): queue = deque([start]) distances = {start: 0} farthest_node = start while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in distances: queue.append(neighbor) distances[neighbor] = distances[node] + 1 if distances[neighbor] > distances[farthest_node]: farthest_node = neighbor return farthest_node, distances[farthest_node] graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) u, _ = bfs(1) v, diameter_length = bfs(u) return diameter_length"},{"question":"A company maintains a binary matrix representation of their office floor plan. The floor plan matrix consists of 0s and 1s, where 0 represents a blocked cell, and 1 represents a free cell. Your task is to determine the size of the largest square submatrix of 1s within this matrix. # Input: - The first line contains two integers `M` and `N` (`1 <= M, N <= 1000`), representing the number of rows and columns of the matrix. - The next `M` lines contain `N` integers (`0` or `1`), representing the grid. # Output: - Output a single integer, the size of the largest square submatrix of 1s. # Example: Input: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output: ``` 2 ``` # Explanation: The largest square submatrix of 1s in the given input has size 2x2, hence the output is 2.","solution":"def largest_square_submatrix(matrix): if not matrix: return 0 M = len(matrix) N = len(matrix[0]) # Create DP table to store size of largest square submatrix ending at each cell dp = [[0] * N for _ in range(M)] max_size = 0 # Populate the DP table for i in range(M): for j in range(N): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"You are given a string containing only lowercase letters and your task is to compute the minimal number of characters to be removed to make the string\'s characters unique. This means that no two characters in the string should appear more than once. Input A single string s (1 ≤ |s| ≤ 200,000), which consists of only lowercase English letters. Output Print a single integer, the minimal number of characters that need to be removed to make all characters of the string unique. Examples Input abacaba Output 4 Input abcde Output 0 Note In the first test sample, the string \\"abacaba\\" contains the characters \'a\' (3 times), \'b\' (2 times), and \'c\' (2 times). To make all characters unique, we need to remove two \'a\'s, one \'b\', and one \'c\', totaling 4 characters. In the second test sample, the string \\"abcde\\" already has all unique characters, so no characters need to be removed. Thus, the output is 0.","solution":"def minimal_chars_to_remove(s): Returns the minimal number of characters to be removed to make all characters in the string unique. from collections import Counter char_count = Counter(s) removals = 0 for count in char_count.values(): if count > 1: removals += count - 1 return removals"},{"question":"Given a matrix of size M x N, you need to find the length of the longest increasing path in the matrix. From each cell, you can move to four possible directions - left, right, up, and down. You can only move to a cell if its value is greater than the current cell\'s value. ------ Input ------ The first line contains T, the number of test cases to follow. The first line of each test case contains two space-separated integers M and N. Each of the next M lines contains N space-separated integers representing the matrix. ------ Output ------ For each test case, output the length of the longest increasing path in the matrix. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ M, N ≤ 100 1 ≤ Elements of the matrix ≤ 10^{4} ------ Sample Input 1 ------ 2 3 3 9 9 4 6 6 8 2 1 1 4 4 3 4 5 6 3 2 1 7 8 8 8 9 7 6 5 4 ------ Sample Output 1 ------ 4 7","solution":"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0 def dfs(x, y): if not dp[x][y]: val = matrix[x][y] dp[x][y] = 1 + max( dfs(x - 1, y) if x and val < matrix[x - 1][y] else 0, dfs(x + 1, y) if x < len(matrix) - 1 and val < matrix[x + 1][y] else 0, dfs(x, y - 1) if y and val < matrix[x][y - 1] else 0, dfs(x, y + 1) if y < len(matrix[0]) - 1 and val < matrix[x][y + 1] else 0 ) return dp[x][y] M = len(matrix) N = len(matrix[0]) dp = [[0] * N for _ in range(M)] return max(dfs(x, y) for x in range(M) for y in range(N)) def process_test_cases(test_cases): results = [] for case in test_cases: M, N, matrix = case results.append(longest_increasing_path(matrix)) return results # parsing input and processing it def parse_input(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): M = int(data[idx]) N = int(data[idx + 1]) idx += 2 matrix = [] for i in range(M): row = list(map(int, data[idx: idx + N])) idx += N matrix.append(row) test_cases.append((M, N, matrix)) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a series of events representing arrivals and departures at a train station. Your task is to determine the maximum number of trains that were present at the station simultaneously. Each event is represented as a tuple (time, type), where time is the timestamp of the event and type is either \'arrive\' or \'depart\'. The events are given in chronological order, but the same timestamp can have multiple events (e.g., multiple trains arriving or departing at the exact same time). Input - The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of events. - The next n lines each contain a time (0 ≤ time ≤ 10^9) and a type (\'arrive\' or \'depart\') representing an event. Output - A single integer representing the maximum number of trains present at the station simultaneously. Example Input 8 2 arrive 3 arrive 5 arrive 5 depart 7 arrive 9 depart 10 depart 12 depart Output 3 Explanation - Train arrives at time 2. - Train arrives at time 3, now there are 2 trains at the station. - Train arrives at time 5, now there are 3 trains at the station. - Train departs at time 5, now there are 2 trains at the station. - Train arrives at time 7, now there are 3 trains at the station. - Train departs at time 9, now there are 2 trains at the station. - Train departs at time 10, now there is 1 train at the station. - Train departs at time 12, now there are 0 trains at the station. The maximum number of trains simultaneously present at the station is 3.","solution":"def max_trains(events): Determines the maximum number of trains present at the station simultaneously. Args: events (list of tuples): List of events where each event is a tuple (time, type). Returns: int: Maximum number of trains present at the station simultaneously. max_trains_at_station = 0 current_trains_at_station = 0 # events is a list of tuples in the form (time, type) for event in events: if event[1] == \'arrive\': current_trains_at_station += 1 max_trains_at_station = max(max_trains_at_station, current_trains_at_station) elif event[1] == \'depart\': current_trains_at_station -= 1 return max_trains_at_station"},{"question":"Write a function `extract_and_sort_ips` that takes a list of IP addresses represented as strings and returns a list of the IPs sorted in ascending order based on their numeric values. An IP address is a string in the form \\"a.b.c.d\\" where a, b, c, and d are integers between 0 and 255. Example ips = [\\"192.168.1.1\\", \\"10.0.0.1\\", \\"172.16.0.1\\", \\"10.0.0.2\\"] Return the array [\\"10.0.0.1\\", \\"10.0.0.2\\", \\"172.16.0.1\\", \\"192.168.1.1\\"]. Function Description Complete the `extract_and_sort_ips` function in the editor below. `extract_and_sort_ips` has the following parameter(s): - `string ips[n]`: A list of IP addresses represented as strings. Returns - `string[n]`: The list of IP addresses sorted in ascending numeric order. Input Format The first line contains an integer, n, the number of IP addresses. The subsequent n lines each contain a string ips[i], an IP address. Constraints - 1 leq n leq 10^5 - Each part of the IP addresses (a.b.c.d) contains an integer between 0 and 255. Sample Input 0 4 192.168.1.1 10.0.0.1 172.16.0.1 10.0.0.2 Sample Output 0 10.0.0.1 10.0.0.2 172.16.0.1 192.168.1.1 Explanation 0 Initially, the array of IP addresses is ips = [\\"192.168.1.1\\", \\"10.0.0.1\\", \\"172.16.0.1\\", \\"10.0.0.2\\"]. When we order each IP address by its numeric value, we get: 10.0.0.1 leq 10.0.0.2 leq 172.16.0.1 leq 192.168.1.1 We then print each value on a new line, from smallest to largest. Sample Input 1 3 127.0.0.1 8.8.8.8 255.255.255.255 Sample Output 1 8.8.8.8 127.0.0.1 255.255.255.255 Explanation 1 Initially, the array of IP addresses is ips = [\\"127.0.0.1\\", \\"8.8.8.8\\", \\"255.255.255.255\\"]. When we order each IP address by its numeric value, we get: 8.8.8.8 leq 127.0.0.1 leq 255.255.255.255 We then print each value on a new line, from smallest to largest.","solution":"def extract_and_sort_ips(ips): Returns a list of IP addresses sorted in ascending order by their numeric values. # Convert IP address to a tuple of integers def ip_to_tuple(ip): return tuple(int(part) for part in ip.split(\'.\')) # Sort based on the integer tuple representation sorted_ips = sorted(ips, key=ip_to_tuple) return sorted_ips"},{"question":"You are given a list of daily stock prices for a certain company over a period of time. Your task is to write a function `best_trade(prices)` that determines the best days to buy and sell the stock to maximize the profit. If no profit can be made, return `[-1, -1]`. The function should return a list of two integers representing the indices of the buy and sell days respectively. For example, if the list of prices is: ``` prices = [7, 1, 5, 3, 6, 4] ``` The best days to buy and sell the stock would be to buy on day 1 and sell on day 4 for a maximum profit of 6 - 1 = 5, so the function should return `[1, 4]`. NOTES: - Your program should handle edge cases where no profit is possible. - If the list is empty or contains a single price, return `[-1, -1]`. - The function should be efficient to handle large inputs. Example cases: ``` best_trade([7, 1, 5, 3, 6, 4]) => [1, 4] best_trade([7, 6, 4, 3, 1]) => [-1, -1] best_trade([1, 2, 3, 4, 5]) => [0, 4] best_trade([10]) => [-1, -1] best_trade([]) => [-1, -1] ```","solution":"def best_trade(prices): Determines the best days to buy and sell the stock to maximize profit. Args: prices (list): List of daily stock prices. Returns: list: A list of two integers representing the indices of the buy and sell days, respectively. If no profit can be made, returns [-1, -1]. if not prices or len(prices) < 2: return [-1, -1] min_price_index = 0 max_profit = 0 buy_sell_days = [-1, -1] for current_day in range(1, len(prices)): if prices[current_day] < prices[min_price_index]: min_price_index = current_day current_profit = prices[current_day] - prices[min_price_index] if current_profit > max_profit: max_profit = current_profit buy_sell_days = [min_price_index, current_day] return buy_sell_days if max_profit > 0 else [-1, -1]"},{"question":"In a fantasy game, there are N distinct islands, each with an abundance of rare resources. Players can travel between these islands using portals, which form a network of direct connections between some pairs of islands. Each portal has a travel time cost associated with it. Players wish to find the shortest possible travel time from one island to another. Given the number of islands N and a list of K portals, where each portal is defined by three integers u, v, and t representing a direct connection from island u to island v with a travel time cost t, you need to help the players find the shortest travel time from island S to island D. If there is no possible path, return -1. Input Format: - The first line contains two integers N and K. - The next K lines each contain three integers u, v, and t, describing a portal from island u to island v with travel time cost t. - The last line contains two integers S and D representing the start and destination islands. Output Format: Print the shortest travel time from island S to island D. If there is no path from S to D, print -1. Constraints: 1 ≤ N ≤ 100 0 ≤ K ≤ 1000 1 ≤ u, v ≤ N 1 ≤ t ≤ 1000 1 ≤ S, D ≤ N SAMPLE INPUT 5 6 1 2 10 1 3 20 2 3 5 2 4 2 3 4 1 4 5 3 1 5 SAMPLE OUTPUT 16 Explanation The shortest path from island 1 to island 5 is: 1 -> 2 -> 4 -> 5 with a total travel time cost = 10 + 2 + 3 = 15 Therefore, the output should be 15. If there was no way to reach island 5 from island 1, the output would be -1.","solution":"import heapq def shortest_travel_time(N, K, portals, S, D): graph = {i: [] for i in range(1, N + 1)} for u, v, t in portals: graph[u].append((t, v)) graph[v].append((t, u)) heap = [(0, S)] distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[S] = 0 while heap: current_time, current_island = heapq.heappop(heap) for travel_time, neighbor in graph[current_island]: time = current_time + travel_time if time < distances[neighbor]: distances[neighbor] = time heapq.heappush(heap, (time, neighbor)) return distances[D] if distances[D] != float(\'inf\') else -1"},{"question":"To help the local sports club, you are asked to organize a relay race. The race has a unique rule: participants must run in pairs. A valid pair must consist of one person with an even height and one person with an odd height. Given the heights of M participants, your task is to determine how many valid pairs can be formed according to the rule described. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer M, the number of participants. - The second line of each test case contains M space-separated integers H_{1}, H_{2}, ..., H_{M}, the heights of the participants. ------ Output Format ------ For each test case, output in a single line the number of valid pairs that can be formed. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ M ≤ 100 1 ≤ H_{i} ≤ 100 ------ Sample Input 1 ------ 3 4 160 181 162 175 5 150 153 157 160 164 3 170 171 180 ------ Sample Output 1 ------ 4 6 2 ------ Explanation ------ Test Case 1: Four valid pairs can be formed: (160, 181), (160, 175), (162, 181), (162, 175). Test Case 2: Six valid pairs can be formed: (150, 153), (150, 157), (150, 153), (150, 157), (160, 153), (164, 157). Test Case 3: Two valid pairs can be formed: (170, 171), (170, 171). By analyzing the example, the valid pairs are made by iterating through the heights and pairing each even height with each odd height, thus ensuring a comprehensive count of all valid pairs in the output.","solution":"def count_valid_pairs(T, test_cases): results = [] for i in range(T): M = test_cases[i][0] heights = test_cases[i][1] even_count = sum(1 for h in heights if h % 2 == 0) odd_count = M - even_count results.append(even_count * odd_count) return results # Example usage: # test_cases = [(4, [160, 181, 162, 175]), (5, [150, 153, 157, 160, 164]), (3, [170, 171, 180])] # T = 3 # print(count_valid_pairs(T, test_cases)) # Output: [4, 6, 2]"},{"question":"You are given a square grid with N rows and N columns of lowercase letters. The puzzle consists of finding the longest sequence of the same letter in the grid. The sequence can be vertical, horizontal, or diagonal (both top-left to bottom-right and top-right to bottom-left). Write a function that takes the grid as input and returns the length of the longest sequence of the same letter. Constraints: * All values in the input are lowercase letters. * 1 leq N leq 100 Input: - N: an integer value representing the size of the grid. - The next N lines consist of N characters each, representing the grid. Output: - Print the length of the longest sequence of the same letter. Examples: Input 4 abcd eeee fghi jklm Output 4 Input 3 aaa bbb ccc Output 3 Input 5 abcde fghij klmno pqrst uvwxy Output 1","solution":"def longest_sequence_length(N, grid): def check_direction(x, y, dx, dy): length = 1 current_char = grid[x][y] while 0 <= x + dx < N and 0 <= y + dy < N and grid[x + dx][y + dy] == current_char: x, y = x + dx, y + dy length += 1 return length max_length = 0 # Check all directions: horizontal, vertical, diagonal (both) for i in range(N): for j in range(N): max_length = max(max_length, check_direction(i, j, 1, 0)) # Vertical max_length = max(max_length, check_direction(i, j, 0, 1)) # Horizontal max_length = max(max_length, check_direction(i, j, 1, 1)) # Diagonal down-right max_length = max(max_length, check_direction(i, j, 1, -1)) # Diagonal down-left return max_length"},{"question":"Implement a function to check if a given string is a valid ISBN-10 identifier. An ISBN-10 is a 10-digit number used to identify books. An ISBN-10 is valid if: - It consists of exactly 10 digits, - The last digit (which might be \'X\' representing 10) is a checksum digit. The checksum is calculated as follows: - Take the sum of the first nine digits, each multiplied by its position (i.e., 1st digit times 1, 2nd digit times 2, etc.). - Add to this the checksum digit unmodified. - The number is valid if the total is a multiple of 11. For example, the ISBN-10 string \\"0471958697\\" is valid because: - The sum is calculated as: (0*1 + 4*2 + 7*3 + 1*4 + 9*5 + 5*6 + 8*7 + 6*8 + 9*9 = 285) - Adding the 10th digit value (7) to the sum: (285 + 7 = 292) - The total (292) is a multiple of 11. -----Input----- A single string S containing 10 characters which is supposed to represent an ISBN-10 identifier. The string may contain only digits and possibly \'X\' as the last character. -----Output----- Output \\"VALID\\" if the given string is a valid ISBN-10, otherwise output \\"INVALID\\". -----Examples----- Sample Input: 0471958697 Sample Output: VALID Sample Input: 123456789X Sample Output: VALID Sample Input: 1234567890 Sample Output: INVALID","solution":"def is_valid_isbn_10(isbn): Checks if a given string is a valid ISBN-10 identifier. Parameters: isbn (str): A string supposed to represent an ISBN-10 identifier. Returns: str: \\"VALID\\" if the given string is a valid ISBN-10, otherwise \\"INVALID\\". if len(isbn) != 10: return \\"INVALID\\" total = 0 for i in range(9): if not isbn[i].isdigit(): return \\"INVALID\\" total += (i + 1) * int(isbn[i]) if isbn[9] == \'X\': total += 10 * 10 elif isbn[9].isdigit(): total += 10 * int(isbn[9]) else: return \\"INVALID\\" return \\"VALID\\" if total % 11 == 0 else \\"INVALID\\""},{"question":"Write a function that takes an integer as input and returns a string representing the number in words. The function should handle numbers from 0 to 999. Please note that the returned string should be lowercase and words should be separated by a single space. Examples ```python int_to_words(0) # returns \\"zero\\" int_to_words(123) # returns \\"one hundred twenty three\\" int_to_words(987) # returns \\"nine hundred eighty seven\\" ``` **Constraints:** - You are not allowed to use any external libraries for converting numbers to words. - Your solution should handle all numbers between 0 and 999 inclusive.","solution":"def int_to_words(num): ones = [ \\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\" ] teens = [ \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\" ] tens = [ \\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\" ] if num == 0: return \\"zero\\" words = [] # Hundreds place if num // 100 > 0: words.append(ones[num // 100]) words.append(\\"hundred\\") num = num % 100 # Tens and Ones places if num >= 20: words.append(tens[num // 10]) if num % 10 > 0: words.append(ones[num % 10]) elif num >= 10: words.append(teens[num - 10]) elif num > 0: words.append(ones[num]) return \\" \\".join(words)"},{"question":"**Bitwise Operations: Finding the Missing Number** You are given an array of `n-1` unique integers between 1 and `n`. The integers are randomly shuffled and the array does not contain one integer from this range. Your task is to find the missing integer in an optimal way using bitwise operations. # Task 1. Write a function `find_missing_number(arr, n)` that takes as input: - `arr`: a list of `n-1` unique integers between 1 and `n`. - `n`: an integer representing the range of numbers. 2. The function should return the missing integer. 3. Your implementation should use bitwise operations to achieve linear runtime complexity `O(n)` and constant space complexity `O(1)`. # Example ```python # Example 1 arr = [1, 2, 4, 5, 6] n = 6 print(find_missing_number(arr, n)) # Output: 3 # Example 2 arr = [3, 7, 1, 2, 8, 4, 5] n = 8 print(find_missing_number(arr, n)) # Output: 6 ``` # Function Signature ```python def find_missing_number(arr: list, n: int) -> int: pass ``` # Note - You must use bitwise operations to find the missing number. - You can assume that the input array will always satisfy the conditions given (unique integers from 1 to `n` with one missing). - Be mindful of integer overflow issues if you are using languages other than Python. # Hints 1. XOR properties might be useful: a number XOR itself results in 0, and a number XOR 0 remains unchanged. 2. First, consider XOR-ing all numbers from 1 to `n`, and then XOR-ing the numbers present in the array. Use these results to derive the missing number.","solution":"def find_missing_number(arr, n): # Initialize XOR of all numbers from 1 to n xor_n = 0 for i in range(1, n+1): xor_n ^= i # Initialize XOR of all numbers in the array xor_arr = 0 for num in arr: xor_arr ^= num # The missing number is the XOR of the above two results return xor_n ^ xor_arr"},{"question":"Find the Second Largest Number in a List You need to implement a function called `find_second_largest` that finds the second largest number in a given list of integers. If the list contains fewer than 2 unique elements, return `None`. ```if-not:csharp The function receives one parameter `numbers`, which is a list of integers. The integers can be negative or positive and the list can have duplicate values. ``` Examples ```python assert find_second_largest([3, 1, 4, 1, 5, 9, 2, 6]) == 6 assert find_second_largest([1]) == None assert find_second_largest([2, 2, 2, 2]) == None assert find_second_largest([-2, -1, 0, 1]) == 0 assert find_second_largest([10, 10, 9, 8]) == 9 ``` Guidelines - You should not sort the list. - The largest and the second largest numbers should be unique. If there\'s no such second largest number, the function should return `None`.","solution":"def find_second_largest(numbers): Finds the second largest number in a list of integers. Parameters: numbers (list): A list of integers. Returns: int/None: The second largest integer or None if it doesn\'t exist. largest = None second_largest = None for number in numbers: if largest is None or number > largest: second_largest = largest largest = number elif number != largest and (second_largest is None or number > second_largest): second_largest = number return second_largest"},{"question":"You are the manager of a warehouse, and you need to streamline your inventory system, specifically for tracking items and their movements. Each item is identified by a unique ID. You have to implement the following operations: 1. Add an item to the inventory with a specific amount (or quantity). 2. Remove a certain quantity of an item from the inventory. 3. Move items from one location to another within the warehouse. 4. Query the remaining quantity of a specific item. INPUT The first line contains an integer Q, the number of operations. The next Q lines each contain a description of an operation that can be one of the following: - \\"ADD id amount\\" where `id` is the item ID and `amount` is the quantity to be added. - \\"REMOVE id amount\\" where `id` is the item ID and `amount` is the quantity to be removed. - \\"MOVE id src dst amount\\" where `id` is the item ID, `src` and `dst` are source and destination locations, and `amount` is the quantity to be moved. - \\"QUERY id\\" where `id` is the item ID, and you need to return the remaining quantity of that item in the inventory. OUTPUT For each \\"QUERY id\\" operation, output the corresponding quantity of the specified item in a new line. CONSTRAINTS 1 ≤ Q ≤ 10^5 1 ≤ id ≤ 10^5 1 ≤ amount ≤ 10^12 Each item ID will be a positive integer not exceeding 10^5. SAMPLE INPUT 7 ADD 1 500 ADD 2 300 QUERY 1 REMOVE 1 100 MOVE 2 1 2 200 QUERY 2 QUERY 1 SAMPLE OUTPUT 500 100 300","solution":"class Warehouse: def __init__(self): self.inventory = {} def add_item(self, item_id, amount): if item_id in self.inventory: self.inventory[item_id] += amount else: self.inventory[item_id] = amount def remove_item(self, item_id, amount): if item_id in self.inventory and self.inventory[item_id] >= amount: self.inventory[item_id] -= amount def query_item(self, item_id): return self.inventory.get(item_id, 0) def handle_operations(operations): warehouse = Warehouse() results = [] for operation in operations: op_parts = operation.split() op_type = op_parts[0] if op_type == \\"ADD\\": item_id, amount = int(op_parts[1]), int(op_parts[2]) warehouse.add_item(item_id, amount) elif op_type == \\"REMOVE\\": item_id, amount = int(op_parts[1]), int(op_parts[2]) warehouse.remove_item(item_id, amount) elif op_type == \\"QUERY\\": item_id = int(op_parts[1]) results.append(warehouse.query_item(item_id)) return results"},{"question":"You are given an array of integers of length N. You can remove at most K elements from the array. Your task is to transform the array into a strictly increasing sequence using the minimum number of removals. A sequence is strictly increasing if every subsequent element is greater than the preceding one. Write a function that calculates the minimum number of removals required to achieve this goal or determines if it\'s impossible to do so within K removals. -----Constraints----- - 1 leq N leq 200000 - 0 leq K leq N - -10^9 leq a_i leq 10^9 (where a_i represents the i-th element in the array) -----Input----- Input is given from Standard Input in the following format: ``` N K a_{1} a_{2} ... a_{N} ``` -----Output----- Print an integer representing the minimum number of removals needed to transform the array into a strictly increasing sequence if it is possible within K removals. If it is not possible, print -1. -----Sample Input----- 6 3 5 3 4 2 6 1 -----Sample Output----- 3 For example, the three elements we can remove are 3, 2, and 1. The resulting strictly increasing sequence is 5, 4, 6.","solution":"def min_removals_to_increase(arr, N, K): from bisect import bisect_left def length_of_lis(seq): lis = [] for number in seq: pos = bisect_left(lis, number) if pos == len(lis): lis.append(number) else: lis[pos] = number return len(lis) lis_length = length_of_lis(arr) min_removals = N - lis_length if min_removals <= K: return min_removals else: return -1 def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) arr = list(map(int, data[2:])) result = min_removals_to_increase(arr, N, K) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Jerry is participating in a maze competition with M rows and N columns. The maze is represented by a matrix with \'.\' indicating a walkable cell and \'#\' indicating a wall. Jerry needs to find the shortest path from the top-left corner (1, 1) to the bottom-right corner (M, N). He can only move up, down, left, or right to a walkable cell. Write a program to determine the minimum number of steps required for Jerry to reach the destination. If there is no possible path, return -1. Input: First line consists of T, the number of test cases. Next 2*T lines: - For each test case: - First line consists of two integers M and N, the number of rows and columns of the maze. - Next M lines each consist of a string of length N representing the maze. Output: Print the answer for each test case in a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 SAMPLE INPUT 2 4 4 ...# .#.# .#.. #... 3 3 .#. # .#. SAMPLE OUTPUT 6 -1 Explanation In the first test case, the shortest path from (1,1) to (4,4) takes 6 steps: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4) In the second test case, there is no possible path from (1,1) to (3,3), so the output is -1.","solution":"from collections import deque def min_steps(maze, M, N): if maze[0][0] == \'#\' or maze[M-1][N-1] == \'#\': return -1 directions = [(1,0), (-1,0), (0,1), (0,-1)] visited = [[False]*N for _ in range(M)] queue = deque([(0, 0, 0)]) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == M-1 and y == N-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and maze[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 def solve(test_cases): results = [] for test in test_cases: M, N, maze = test result = min_steps(maze, M, N) results.append(result) return results def main(input_list): T = int(input_list[0]) index = 1 test_cases = [] for _ in range(T): M, N = map(int, input_list[index].split()) maze = [] for i in range(index + 1, index + 1 + M): maze.append(input_list[i]) test_cases.append((M, N, maze)) index += M + 1 results = solve(test_cases) return results"},{"question":"Implement a function that takes an array of integers, arr, and an integer target as input and returns a list of all unique quadruplets [a, b, c, d] such that: ``` a + b + c + d = target ``` and ``` a <= b <= c <= d ``` Your final output should not contain any duplicate quadruplets. A quadruplet [a, b, c, d] is considered duplicate if there exists another quadruplet in the list with the same exact elements in the same order. **Function Signature:** ```python def four_sum(arr: List[int], target: int) -> List[List[int]]: ``` **Example:** ```python arr = [1, 0, -1, 0, -2, 2] target = 0 output = [ [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1] ] ``` **Constraints:** - The array can contain both negative and positive integers as well as zero. - The length of the array will not exceed 200. - The values of the integers in the array will be in the range [-10^9, 10^9]. - The target value will be in the range [-10^9, 10^9].","solution":"from typing import List def four_sum(arr: List[int], target: int) -> List[List[int]]: arr.sort() quadruplets = [] n = len(arr) for i in range(n - 3): if i > 0 and arr[i] == arr[i-1]: continue for j in range(i + 1, n - 2): if j > i + 1 and arr[j] == arr[j - 1]: continue left, right = j + 1, n - 1 while left < right: current_sum = arr[i] + arr[j] + arr[left] + arr[right] if current_sum == target: quadruplets.append([arr[i], arr[j], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return quadruplets"},{"question":"A team of researchers is studying the communication network between a colony of ants. They have mapped the network as a graph where each node represents an ant and each edge represents a communication link between two ants. The communication links are unidirectional and have certain reliability scores which are integers ranging from 1 to 100. The researchers want to find out if there is a way to communicate from a designated starting ant to another target ant using a series of communication links, such that the sum of reliability scores of the edges used does not exceed a given threshold. Write a function that determines if there is such a path in the network. Input The first line consists of three integers n, m, and k (2 ≤ n ≤ 100, 1 ≤ m ≤ 5000, 1 ≤ k ≤ 100), where n is the number of ants, m is the number of communication links, and k is the maximum allowable sum of reliability scores for the path. The next m lines contain three integers each, u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), where u is the starting ant of the communication link, v is the ending ant, and w is the reliability score of the link. The last line consists of two integers s and t (1 ≤ s, t ≤ n), where s is the starting ant and t is the target ant. Output Output \\"Yes\\" if there is a path from ant s to ant t such that the sum of reliability scores does not exceed k. Otherwise, output \\"No\\". Examples Input 5 6 5 1 2 2 1 3 1 2 4 2 3 4 3 4 5 1 3 5 1 1 5 Output Yes Input 5 6 2 1 2 2 1 3 1 2 4 2 3 4 3 4 5 1 3 5 2 1 5 Output No Note In the first example, one possible path from ant 1 to ant 5 with sum of reliability scores not exceeding 5 is 1 -> 3 with score 1, and then 3 -> 5 with score 1, for a total score of 2 which is less than 5. In the second example, there is no path from ant 1 to ant 5 with sum of reliability scores not exceeding 2.","solution":"import heapq def can_communicate_within_threshold(n, m, k, edges, s, t): graph = [[] for _ in range(n + 1)] # Build the graph for u, v, w in edges: graph[u].append((v, w)) # Dijkstra-like approach but modifying to stop when threshold is exceeded pq = [(0, s)] # (cost, node) dist = [float(\'inf\')] * (n + 1) dist[s] = 0 while pq: current_sum, node = heapq.heappop(pq) if node == t and current_sum <= k: return \\"Yes\\" for neighbor, weight in graph[node]: new_sum = current_sum + weight if new_sum < dist[neighbor]: dist[neighbor] = new_sum heapq.heappush(pq, (new_sum, neighbor)) return \\"No\\""},{"question":"Given a string s, you are allowed to remove at most one character from the string. You need to determine if it can become a palindrome by removing at most one character. A string is considered a palindrome if it reads the same forward and backward. -----Constraints----- - The length of the string s is between 1 and 10^5. - The string s contains only lowercase English characters. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print \\"YES\\" if the string can become a palindrome after removing at most one character, otherwise print \\"NO\\". -----Sample Input----- abca -----Sample Output----- YES In this case, removing the character \'b\' or \'c\' makes the string a palindrome. -----Sample Input----- abcdef -----Sample Output----- NO","solution":"def is_palindrome(s): Helper function to check if a string is a palindrome. return s == s[::-1] def can_become_palindrome(s): Determines if the string can become a palindrome by removing at most one character. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Two characters mismatch, try removing one character s1 = s[left:right] # remove character at `right` s2 = s[left+1:right+1] # remove character at `left` return is_palindrome(s1) or is_palindrome(s2) left += 1 right -= 1 return True # Sample usage # print(can_become_palindrome(\\"abca\\")) # Should return \'YES\'"},{"question":"Princess Celestia wants to distribute candies to her students in a special way. She has a specific number of candies and a specific number of bags. The number of candies in each bag should be a unique positive integer, and no bag should contain more candies than she\'s willing to distribute to any one student. She wants to ensure that the total number of candies across all bags is exactly equal to the number of candies she has. Given the total number of candies Celestia has and the number of bags, help her determine if there is a valid way to distribute the candies as described. **Input** The first line contains two integers n (1 ≤ n ≤ 100) — the number of bags and m (1 ≤ m ≤ 10000) — the total number of candies. **Output** Output \\"YES\\" if there is a way to distribute the candies according to the rules. Otherwise, output \\"NO\\". **Examples** Input: 3 6 Output: YES Explanation: One possible way to distribute the candies is [1, 2, 3]. Input: 3 5 Output: NO Explanation: There is no way to distribute 5 candies into 3 bags with unique positive integer values without exceeding the limit.","solution":"def can_distribute_candies(n, m): Determines if it\'s possible to distribute `m` candies into `n` bags with each bag containing a unique number of candies. # The sum of the first n natural numbers min_candies_needed = n * (n + 1) // 2 # If the sum of the first n natural numbers is greater than m, it\'s not possible if min_candies_needed > m: return \\"NO\\" return \\"YES\\" # Example Usage # if __name__ == \\"__main__\\": # n, m = map(int, input().split()) # print(can_distribute_candies(n, m))"},{"question":"In Fruitland, there is a rule that if the count of fruits you have is greater than 50, exactly 5 fruits will be spoiled. Given the total number of fruits N you have, determine the number of good fruits remaining. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first and only line of each test case contains a single integer N — the total number of fruits you have. ------ Output Format ------ For each test case, output on a new line, the number of good fruits remaining. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 ------ Sample Input 1 ------ 4 10 60 51 50 ------ Sample Output 1 ------ 10 55 46 50 ------ Explanation 1 ------ Test case 1: You have 10 fruits which is less than 50, thus no fruits are spoiled and you have 10 good fruits remaining. Test case 2: You have 60 fruits which is greater than 50, thus 5 fruits will be spoiled and you have 60 - 5 = 55 good fruits remaining. Test case 3: You have 51 fruits which is greater than 50, thus 5 fruits will be spoiled and you have 51 - 5 = 46 good fruits remaining. Test case 4: You have 50 fruits which is equal to 50, thus no fruits are spoiled and you have 50 good fruits remaining.","solution":"def good_fruits_remaining(T, test_cases): This function takes the number of test cases and a list of test cases. Each test case contains an integer representing the total number of fruits the user has. It returns a list of integers representing the number of good fruits remaining after accounting for the spoiled fruits. results = [] for N in test_cases: if N <= 50: results.append(N) else: results.append(N - 5) return results"},{"question":"Tanya is responsible for organizing a busy schedule of meetings for her team. Each meeting has a certain start and end time, and no two meetings can overlap. In order to maximize the number of meetings that can be attended, she needs to find the optimal set of meetings which will allow for the maximum number of non-overlapping meetings. Your task is to help Tanya by writing a program that determines the maximum number of non-overlapping meetings that can be scheduled. -----Input----- The first line contains a single integer T representing the number of test cases in the input. Each of the next T sections begins with an integer N representing the number of meetings. The next N lines each contain two integers, `start` and `end`, representing the start time and end time of a meeting. -----Output----- For each test case, output a single line containing an integer representing the maximum number of non-overlapping meetings that Tanya can schedule. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ start < end ≤ 10^9 -----Example----- Input: 2 3 1 2 3 4 0 6 4 1 3 2 4 3 5 7 8 Output: 2 3 -----Explanation----- In the first test case: - The optimal set of meetings includes the meetings (1,2) and (3,4) for a total of 2 meetings. In the second test case: - The optimal set of meetings includes the meetings (1,3), (3,5), and (7,8) for a total of 3 meetings.","solution":"def max_non_overlapping_meetings(T, test_cases): Determines the maximum number of non-overlapping meetings for each test case. Parameters: T (int): Number of test cases. test_cases (list): List of test cases, where each test case is a list of tuples representing start and end times of meetings. Returns: list: A list of integers representing the maximum number of non-overlapping meetings for each test case. results = [] for i in range(T): meetings = test_cases[i] # Sort meetings by end time meetings.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"John is planning to organize a series of events in his local community center. He has a list of n events, each requiring a specific time slot. Given an array times of n integers where times[i] is the duration of the i-th event in hours, John wants to maximize the number of events that can be held in a single day. The community center is open for exactly H hours each day. John cannot split an event across multiple days, so each event must be scheduled in a single continuous time slot. Your task is to determine the maximum number of events that John can schedule in one day. For example, if the community center is open for H=10 hours and the event durations are times = [2, 3, 1, 5, 8], then John can schedule at most 3 events in one day (for instance, the events with durations 2, 3, and 1). You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. The next lines describe the test cases. Each test case starts with a line containing two integers n (1 le n le 100) and H (1 le H le 24) — the number of events and the number of hours the community center is open. The second line of each test case contains n integers times[i] (1 le times[i] le 24) — the duration of each event in hours. -----Output----- For each test case print the answer on it — the maximum number of events that John can schedule in one day. -----Example----- Input 3 5 10 2 3 1 5 8 4 5 4 3 2 1 6 8 1 2 3 4 5 6 Output 3 2 3","solution":"def max_events_per_day(t, test_cases): results = [] for i in range(t): n, H = test_cases[i][0] times = test_cases[i][1] times.sort() count = 0 total_time = 0 for time in times: if total_time + time <= H: total_time += time count += 1 else: break results.append(count) return results # Example usage: # t = 3 # test_cases = [ # ((5, 10), [2, 3, 1, 5, 8]), # ((4, 5), [4, 3, 2, 1]), # ((6, 8), [1, 2, 3, 4, 5, 6]) # ] # print(max_events_per_day(t, test_cases)) # Output: [3, 2, 3]"},{"question":"Given a grid of letters and a list of words, determine if each word in the list can be formed by a sequence of adjacent letters in the grid. The same letter cannot be used more than once in forming a word. Letters are considered adjacent if they are horizontally or vertically neighboring. **Parameters**: `grid` and `words` arrays. **Example input**: ``` grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] words = [\'ABCCED\', \'SEE\', \'ABCB\'] ``` **Output**: A list of booleans where each value corresponds to whether the respective word in `words` can be formed (`true`) or not (`false`). # Constraints: - Grid dimensions: 1 ≤ grid rows, columns ≤ 200 - Word length: 1 ≤ word length ≤ grid rows * grid columns - Each word consists of only uppercase English letters (A-Z). # Notes: - The same letter cell may not be used more than once. - Words can appear in any order in the list. **Examples**: ``` grid: ---------------- | A | B | C | E | ---------------- | S | F | C | S | ---------------- | A | D | E | E | ---------------- words: [\'ABCCED\', \'SEE\', \'ABCB\'] return: [true, true, false] Explanation: - \'ABCCED\' can be formed by the path A->B->C->C->E->D - \'SEE\' can be formed by the path S->E->E - \'ABCB\' cannot be formed as B cell in the last path cannot be reused ```","solution":"def is_word_in_grid(grid, word): rows = len(grid) cols = len(grid[0]) def dfs(x, y, word): if not word: return True if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] != word[0]: return False temp = grid[x][y] grid[x][y] = \'\' found = (dfs(x+1, y, word[1:]) or dfs(x-1, y, word[1:]) or dfs(x, y+1, word[1:]) or dfs(x, y-1, word[1:])) grid[x][y] = temp # restore the original value return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0] and dfs(i, j, word): return True return False def find_words_in_grid(grid, words): return [is_word_in_grid(grid, word) for word in words]"},{"question":"You are given an array of integers heights of size N, where heights[i] represents the height of a building situated in a row. You need to calculate the total units of rainwater that can be trapped after a rain. The amount of water that can be trapped on top of a building is determined by the shorter of the tallest buildings to its left and right. Given the integer array heights, return the total units of rainwater that can be trapped. Example 1: Input: N = 6 heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: | 3 | __ 2 |__|_ 2 1 2 1 |__|_|_ _|__|_|__|_| 0 |__|_|__|__|__|__|_|__|__|__| 0 1 2 3 4 5 6 7 8 9 10 11 The above example represents the heights of buildings and the rainwater trapped during rainfall. The total units of water trapped are 6. Example 2: Input: N = 3 heights = [2, 0, 2] Output: 2 Explanation: 2 |__|__|__|__| 1 |__|__|__|__| 0 |__|__|__|__| We can trap 2 units of water between the buildings. Your Task: You don\'t need to read input or print anything. Your task is to complete the function totalRainwater() which takes the integer array heights and its size N as input parameters and returns the total units of rainwater that can be trapped. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5 0 ≤ heights[i] ≤ 10^4","solution":"def totalRainwater(N, heights): if not heights: return 0 left_max = [0] * N right_max = [0] * N water_trapped = 0 # Fill left max array left_max[0] = heights[0] for i in range(1, N): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right max array right_max[N - 1] = heights[N - 1] for i in range(N - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the total water trapped for i in range(N): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Samantha manages a warehouse and needs to verify the stock levels of various items. To automate this process, Samantha asks you to write a program. Each shipment contains multiple items, and each item has a recorded quantity and a recorded inventory level after the items have been added to the warehouse. A shipment is considered correctly processed if the sum of the quantity of the item in the shipment and the previous inventory level matches the recorded inventory level. INPUT The first line of input contains the number of items N in the shipment. Next N lines contain the item name, recorded shipment quantity Q, previous inventory level I, and recorded inventory level L, separated by space. OUTPUT Print \\"CORRECT\\" if Q + I = L for each item, otherwise print \\"ERROR\\". CONSTRAINTS - 0 < Q, I, L < 100000 SAMPLE INPUT 3 Apples 50 100 150 Bananas 30 120 140 Oranges 15 80 90 SAMPLE OUTPUT CORRECT ERROR CORRECT Explanation First line is the number of items in the shipment which is 3. 1st item is \\"Apples\\" with a quantity of 50, previous inventory level of 100, and a recorded inventory level of 150. Since 50 + 100 = 150, output is \\"CORRECT\\". 2nd item is \\"Bananas\\" with a quantity of 30, previous inventory level of 120, and a recorded inventory level of 140. Since 30 + 120 ≠ 140, output is \\"ERROR\\". 3rd item is \\"Oranges\\" with a quantity of 15, previous inventory level of 80, and a recorded inventory level of 90. Since 15 + 80 = 90, output is \\"CORRECT\\".","solution":"def check_shipment(items): Given a list of items with their respective quantities, previous inventory, and recorded inventory level, determine whether each item is \'CORRECT\' or \'ERROR\'. Parameters: items (list): A list of lists, where each inner list contains the item name, quantity Q, previous inventory I, and recorded inventory L in that order. Returns: list: A list of strings, either \'CORRECT\' or \'ERROR\' for each item. results = [] for item in items: name, Q, I, L = item if int(Q) + int(I) == int(L): results.append(\\"CORRECT\\") else: results.append(\\"ERROR\\") return results"},{"question":"Write a program that simulates a simplified bank transaction system. You need to implement a system where users can perform multiple transactions on their bank accounts. Each user has an initial balance and can perform a series of transactions including deposits and withdrawals. To simulate the transactions, you are to process a sequence of commands. The following types of commands will be used: - `\'DEPOSIT <user> <amount>\'`: This command will increase the balance of `<user>` by `<amount>`. - `\'WITHDRAW <user> <amount>\'`: This command will attempt to decrease the balance of `<user>` by `<amount>`. If the user does not have sufficient balance, the command should fail, and the balance should not change. - `\'BALANCE <user>\'`: This command should print the current balance of `<user>`. The initial balances for the users are provided at the start of the input. Your task is to write a program that processes these commands and prints the appropriate output for the `\'BALANCE\'` commands. # Input The input consists of multiple lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of users. 2. The next `n` lines each contain the initial balance of a user in the format `<user> <initial_balance>`, where `<user>` is a string of lowercase letters (1 ≤ length ≤ 20) and `<initial_balance>` is an integer (0 ≤ initial_balance ≤ 10^9). 3. The remaining lines contain commands in one of the formats described above. There will be at most `10^5` commands. # Output For each `\'BALANCE <user>\'` command, print the current balance of the user. # Example Input ``` 3 alice 100 bob 200 charlie 150 DEPOSIT alice 50 WITHDRAW bob 100 BALANCE alice BALANCE bob WITHDRAW alice 200 BALANCE alice BALANCE charlie DEPOSIT charlie 70 BALANCE charlie WITHDRAW bob 150 BALANCE bob ``` Output ``` 150 100 150 150 220 200 ``` # Note In this example: 1. Alice\'s balance starts at 100. After a deposit of 50, her balance becomes 150. 2. Bob\'s balance starts at 200. After a withdrawal of 100, his balance becomes 100. 3. Alice\'s balance is then checked and verified to be 150. 4. Bob\'s balance is checked and verified to be 100. 5. Alice attempts to withdraw 200, which fails since her balance is only 150. The balance remains 150. 6. Alice\'s balance is checked again and verified to still be 150. 7. Charlie\'s balance starts at 150. 8. A deposit of 70 increases Charlie\'s balance to 220. 9. Charlie\'s balance is checked and verified to be 220. 10. Bob attempts to withdraw 150, which fails since his balance is only 100. The balance remains 100. 11. Bob\'s balance is checked again and verified to still be 100.","solution":"class BankSystem: def __init__(self): self.accounts = {} def add_user(self, user, initial_balance): self.accounts[user] = initial_balance def deposit(self, user, amount): if user in self.accounts: self.accounts[user] += amount def withdraw(self, user, amount): if user in self.accounts and self.accounts[user] >= amount: self.accounts[user] -= amount def balance(self, user): return self.accounts.get(user, 0) def process_commands(input_lines): it = iter(input_lines) n = int(next(it)) bank = BankSystem() for _ in range(n): user, initial_balance = next(it).split() bank.add_user(user, int(initial_balance)) result = [] for command in it: parts = command.split() action = parts[0] user = parts[1] if action == \\"DEPOSIT\\": amount = int(parts[2]) bank.deposit(user, amount) elif action == \\"WITHDRAW\\": amount = int(parts[2]) bank.withdraw(user, amount) elif action == \\"BALANCE\\": result.append(bank.balance(user)) return result"},{"question":"Bob is an avid collector of antique coins. He organizes his collection in a special manner. Bob has n coins, each with a certain value. He wants to arrange the coins in a single row such that the value of the coins increases from left to right. However, the coins have some restrictions: some pairs of coins cannot be adjacent to each other in the row due to their delicate nature. Determine if it\'s possible to arrange the coins in a valid sequence meeting these criteria. If it\'s possible, provide one such sequence. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of coins. The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9) — the values of the coins. The third line contains an integer m (0 ≤ m ≤ min(2000, (n(n-1))/2)) — the number of restricted pairs of coins. The next m lines contain two integers a_i and b_i (1 ≤ a_i < b_i ≤ n) denoting that coins a_i and b_i cannot be adjacent in the row. There are no two equal pairs in this list. Output If it\'s possible to arrange the coins in a valid sequence, print \\"YES\\" on the first line and then one valid sequence of the coin values on the next line. If it\'s not possible, print \\"NO\\". Examples Input 5 4 2 5 1 3 2 1 2 4 5 Output YES 1 2 3 4 5 Input 4 6 8 4 7 3 1 3 2 4 3 4 Output NO","solution":"def can_arrange_coins(n, values, m, restrictions): from collections import defaultdict # Build adjacency list of restrictions restricted_pairs = defaultdict(set) for a, b in restrictions: restricted_pairs[a].add(b) restricted_pairs[b].add(a) # Sort the values along with their original indices indexed_values = sorted((v, i + 1) for i, v in enumerate(values)) def is_valid(arrangement): # Check if there are any adjacent pairs in the arrangement that should not be for i in range(len(arrangement) - 1): if arrangement[i + 1] in restricted_pairs[arrangement[i]]: return False return True # Attempt to arrange the coins in increasing order by value arrangement = [index for value, index in indexed_values] # Check if the arrangement is valid if is_valid(arrangement): sorted_values = [value for value, index in indexed_values] return \\"YES\\", sorted_values else: return \\"NO\\", [] # Example of function call: # Test case 1 # n = 5 # values = [4, 2, 5, 1, 3] # m = 2 # restrictions = [(1, 2), (4, 5)] n = 5 values = [4, 2, 5, 1, 3] m = 2 restrictions = [(1, 2), (4, 5)] print(can_arrange_coins(n, values, m, restrictions)) # Test case 2 # n = 4 # values = [6, 8, 4, 7] # m = 3 # restrictions = [(1, 3), (2, 4), (3, 4)] n = 4 values = [6, 8, 4, 7] m = 3 restrictions = [(1, 3), (2, 4), (3, 4)] print(can_arrange_coins(n, values, m, restrictions))"},{"question":"Write a function that takes an array of strings and returns a new array where each string has **reversed words, but in the original order**: ```python reverse_words([\\"hello world\\", \\"example test case\\"]) # [\\"olleh dlrow\\", \\"elpmaxe tset esac\\"] reverse_words([\\"programming is fun\\", \\"keep learning\\"]) # [\\"gnimmargorp si nuf\\", \\"peek gninrael\\"] reverse_words([\\"a b c\\", \\"d e f\\"]) # [\\"a b c\\", \\"d e f\\"] reverse_words([\\"reverse these words\\", \\"please\\"]) # [\\"esrever eseht sdrow\\", \\"esaelp\\"] ```","solution":"def reverse_words(strings): Takes an array of strings and returns a new array where each word in the strings is reversed, but the order of words is kept original. Args: strings (list): A list of strings. Returns: list: A list of strings with reversed words. return [\' \'.join(word[::-1] for word in sentence.split()) for sentence in strings]"},{"question":"In a fictional land, there are N castles connected by M bidirectional roads. The king wants to ensure that every pair of castles is connected either directly by a road or indirectly through other castles. Additionally, the king prefers that the total number of roads used is minimal. Your task is to determine whether it\'s possible to achieve this requirement and, if so, provide the total number of roads needed. -----Input----- - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M, the number of castles and roads respectively. - Each of the subsequent M lines contains two integers u and v, indicating a road between castle u and castle v. -----Output----- For each test case, print a single line containing the string \\"IMPOSSIBLE\\" if it is not possible to connect all the castles either directly or indirectly. If it is possible, print a single line with the minimal number of roads needed to ensure all castles are connected. -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - 0 le M le 10000 - 1 le u, v le N - No two roads connect the same pair of castles. -----Example Input----- 2 4 3 1 2 2 3 3 4 5 2 1 2 4 5 -----Example Output----- 3 IMPOSSIBLE -----Explanation----- In the first example, the existing roads already connect all the castles, so no additional roads are needed. In the second example, it\'s impossible to connect all five castles as there are not enough roads provided.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_minimum_roads_needed(n, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) result = [] i = 0 e = 0 while e < n - 1: if i >= len(edges): return \\"IMPOSSIBLE\\" u, v, w = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) return len(result) def process_castle_connection(data): result = [] for test_case in data: n, m, edges = test_case[\'n\'], test_case[\'m\'], test_case[\'edges\'] if m < n - 1: result.append(\\"IMPOSSIBLE\\") else: edges_with_dummy_weight = [(u - 1, v - 1, 1) for u, v in edges] min_roads_needed = kruskal_minimum_roads_needed(n, edges_with_dummy_weight) result.append(min_roads_needed) return result def castle_connected_min_roads(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) data = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) edges = [tuple(map(int, lines[index + i + 1].split())) for i in range(m)] data.append({\'n\': n, \'m\': m, \'edges\': edges}) index += m + 1 return process_castle_connection(data)"},{"question":"You are given an array a_1, a_2, dots a_n. Find the sum of all unique elements in the array. -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 2 cdot 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single integer — the sum of all unique elements in the array. -----Examples----- Input 3 5 1 2 2 3 4 4 1 1 1 1 6 5 5 5 5 5 5 Output 10 1 5 -----Explanation----- For the first test case the unique elements are {1, 2, 3, 4}, and their sum is 1 + 2 + 3 + 4 = 10. For the second test case the unique element is {1}, and the sum is 1. For the third test case the unique element is {5}, and the sum is 5.","solution":"def sum_of_unique_elements(test_cases): results = [] for n, array in test_cases: unique_elements = set(array) results.append(sum(unique_elements)) return results"},{"question":"Given a positive integer N, determine whether it can be expressed as the sum of two prime numbers. If it can, return the two prime numbers in sorted order as a tuple. If multiple pairs exist, return any one of them. If it cannot be expressed as such, return -1. Example 1: Input: N=10 Output: (3, 7) Explanation: 10 can be expressed as the sum of 3 and 7, which are both prime numbers. Example 2: Input: N=16 Output: (5, 11) or (3, 13) Explanation: 16 can be expressed as the sum of 5 and 11, or 3 and 13, among other pairs of prime numbers. Example 3: Input: N=11 Output: -1 Explanation: 11 cannot be expressed as the sum of two prime numbers. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfTwoPrimes() which takes an integer N as input parameter and returns a tuple of two prime numbers if N can be expressed as their sum, or returns -1 if it cannot. Expected Time Complexity: O(N * sqrt(N)) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^6","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_two_primes(N): for i in range(2, N): if is_prime(i) and is_prime(N - i): return (i, N - i) return -1"},{"question":"A factory has developed a new robotic arm designed to pick and place items from a conveyor belt into storage bins. The arm can only perform one type of action at a time - either picking up items from the belt or placing them into bins. Your task is to help optimize the sequence of actions so that the number of robotic arm switches is minimized. To aid in this, you are given a sequence of \'P\' and \'L\' characters representing the actions the robot must perform. \'P\' stands for picking up an item and \'L\' stands for placing an item. Each time the robot switches from picking to placing or vice versa, it incurs an overhead. -----Input----- The input consists of a single line of characters. Each character is either \'P\' or \'L\'. The string has length 1 leq len leq 10^4. -----Output----- Print a single integer - the minimum number of switches needed between picking and placing. -----Examples----- Sample Input 1: PPPLLPPPLL Sample Output 1: 3 Sample Input 2: PPLPLLPPLP Sample Output 2: 6","solution":"def min_switches(sequence): if not sequence: return 0 # Initialize counters switches = 0 current_action = sequence[0] for action in sequence[1:]: if action != current_action: switches += 1 current_action = action return switches"},{"question":"In a theme park, there is a popular attraction that consists of a long row of seats numbered from 1 to n. Each seat can either be occupied by a visitor or left empty. Once a visitor is done with the attraction, they need to leave the seat and walk out of the attraction area through specified exit points. There are m exit points located at specific positions in the row of seats. The park management wants to ensure that the exit process is efficient and visitors walk the minimum possible distance to the nearest exit point when leaving their seats. Given the number of seats n, the number of exit points m, the positions of the exit points, and the initial occupancy status of the seats, determine the maximum distance any visitor has to walk to the nearest exit point. Each visitor will always choose the closest exit point. Assume visitors can efficiently find the nearest exit point when they leave the attraction. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100,000, 1 ≤ m ≤ n), representing the number of seats and the number of exit points, respectively. The second line contains m integers, p_1, p_2, ..., p_m (1 ≤ p_i ≤ n), representing the positions of the exit points in a sorted manner. The third line contains a string of length n consisting of characters \'0\' and \'1\' (\'0\' means the seat is empty, \'1\' means the seat is occupied). -----Output----- Output one integer, the maximum distance any visitor has to walk to the nearest exit point. -----Examples----- Input 10 3 2 5 9 1001000010 Output 1 Input 8 2 3 8 10001001 Output 2 -----Note------ In the first sample, the exit points are at positions 2, 5, and 9. The occupied seats are at positions 1, 4, 8, and 10. The distances to the nearest exits are: - Seat 1: distance to exit at 2 = 1 - Seat 4: distance to exit at 5 = 1 - Seat 8: distance to exit at 9 = 1 - Seat 10: distance to exit at 9 = 1 Thus, the maximum distance a visitor has to walk is 1. In the second sample, the exit points are at positions 3 and 8. The occupied seats are at positions 1, 5, 6, and 8. The distances to the nearest exits are: - Seat 1: distance to exit at 3 = 2 - Seat 5: distance to exit at 3 or 8 = 2 - Seat 6: distance to exit at 8 = 2 Thus, the maximum distance a visitor has to walk is 2.","solution":"def max_distance_to_nearest_exit(n, m, exit_positions, occupancy): Returns the maximum distance any visitor has to walk to the nearest exit point. import bisect max_distance = 0 for i in range(n): if occupancy[i] == \'1\': pos = i + 1 # Positions are 1-indexed idx = bisect.bisect_left(exit_positions, pos) if idx == 0: distance = abs(exit_positions[0] - pos) elif idx == m: distance = abs(exit_positions[-1] - pos) else: distance = min(abs(exit_positions[idx] - pos), abs(exit_positions[idx-1] - pos)) max_distance = max(max_distance, distance) return max_distance"},{"question":"Prime Concatenation You are given a list of distinct prime numbers, and your task is to determine if it is possible to concatenate any two distinct primes from the list to form a new prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. To concatenate two numbers means to join them together in the order given, for example, concatenation of 2 and 3 gives 23. Input The first line contains a single integer N representing the number of prime numbers in the list. The second line contains N space-separated prime numbers. Output Print \\"YES\\" (without quotes) if it is possible to concatenate any two primes from the list to form a new prime number. Otherwise, print \\"NO\\" (without quotes). Constraints 1 <= N <= 100 2 <= prime number <= 1000 Sample Input: 4 2 3 5 11 Sample Output: YES Sample Input: 3 2 5 7 Sample Output: NO","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_concatenation_possible(primes): Returns \\"YES\\" if it is possible to concatenate any two distinct primes from the list to form a new prime number, otherwise \\"NO\\". for i in range(len(primes)): for j in range(len(primes)): if i != j: concat1 = int(str(primes[i]) + str(primes[j])) if is_prime(concat1): return \\"YES\\" return \\"NO\\" # Example Usage: # primes = [2, 3, 5, 11] # print(prime_concatenation_possible(primes)) # Output: \\"YES\\""},{"question":"You are tasked with creating a simplified interpreter for a custom programming language called \\"MiniScript\\". MiniScript consists of three commands: 1. `increg` - This command increments a register, increasing its value by 1. 2. `decreg` - This command decrements a register, decreasing its value by 1. 3. `printreg` - This command prints the current value of the register. A MiniScript program is a series of these commands separated by newlines. The register starts at 0. Your task is to implement a function that interprets and executes a MiniScript program, printing out the value of the register whenever the `printreg` command is encountered. # Input * A string array ( cmds ) representing the MiniScript program. Each element in the array is one command from the program. * The length of ( cmds ) is between 1 and 100, inclusive. # Output * The function should print the value of the register whenever the `printreg` command is executed. Each printed value should be on a new line. # Example **Input:** ```python cmds = [ \\"increg\\", \\"increg\\", \\"printreg\\", \\"decreg\\", \\"increg\\", \\"printreg\\" ] ``` **Output:** ``` 2 2 ``` Create a function `execute_miniscript(cmds)` that takes an array of strings representing the commands and executes the MiniScript program.","solution":"def execute_miniscript(cmds): Executes a MiniScript program represented by a list of commands. register = 0 for cmd in cmds: if cmd == \\"increg\\": register += 1 elif cmd == \\"decreg\\": register -= 1 elif cmd == \\"printreg\\": print(register) else: raise ValueError(f\\"Unknown command: {cmd}\\")"},{"question":"Bob is playing a game where he needs to arrange a series of tiles in a certain pattern. He has an unlimited supply of three types of tiles: type A, type B, and type C. The game board has `n+2` positions, initially filled with spaces. Bob can start placing tiles from position 1, but positions `n+1` and `n+2` must remain empty. Bob needs to fill the board such that each tile at position `i` is of a type determined by the sum of the types of tiles at positions `i-1`, `i-2`, and `i-3`. Given `n`, return the number of possible ways Bob can fill the first `n` positions with tiles such that the last two positions remain empty (i.e., not having tiles). To clarify with an example: ``` n = 4 Here, Bob has four positions to fill. The number of valid sequences is 81. Type sequences for small `n`: - For n = 1, valid sequences: 3 - For n = 2, valid sequences: 9 - For n = 3, valid sequences: 27 - For n = 4, valid sequences: 81 ``` Write a function called `numWaysToFillBoard(n: int) -> int` that computes the number of ways to fill the board according to the rules described. Constraints: ```python 1 <= n <= 20 ``` Hint: Think recursion and then dynamic programming.","solution":"def numWaysToFillBoard(n): Returns the number of ways to fill the board up to n positions (leaving the last two positions empty) according to the summation rule defined in the problem. if n < 1: return 0 # Shouldn\'t happen as per given constraints: 1 <= n <= 20 # Create a DP array initialized with 0 dp = [0] * (n + 1) # Base cases dp[0] = 1 # There\'s 1 way to fill zero positions (doing nothing) # For n >= 1, fill the DP array for i in range(1, n + 1): if i == 1: dp[i] = 3 # Choices: A, B, or C elif i == 2: dp[i] = 9 # Choices: AA, AB, AC, BA, BB, BC, CA, CB, CC else: dp[i] = dp[i-1] * 3 # Because each next tile position depends on the one before it return dp[n]"},{"question":"Create a function `merge_arrays` that takes two sorted arrays and returns a new sorted array containing all the elements from both input arrays. Do this without using any built-in functions for sorting or merging. ```python def merge_arrays(arr1, arr2): # your code here # Example usage: result = merge_arrays([1, 3, 5], [2, 4, 6]) print(result) # Output: [1, 2, 3, 4, 5, 6] result = merge_arrays([0, 3, 4], [1, 2, 5]) print(result) # Output: [0, 1, 2, 3, 4, 5] ```","solution":"def merge_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. merged_array = [] i, j = 0, 0 # Traverse both arrays and insert elements into the merged_array in sorted order while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1, add them to merged_array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2, add them to merged_array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"In a fictional city, the streets are arranged in a perfect grid. There are n avenues running from north to south and m streets running from west to east. Some intersections are important and need to be equipped with traffic lights. A traffic light should be placed at each important intersection to prevent accidents. You are given the coordinates of all important intersections in the grid. Write a program to determine the minimum number of traffic lights needed to cover all important intersections in such a way that every important intersection has at least one traffic light on the same avenue or street. ---Input--- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of avenues and streets. The second line contains an integer k (1 ≤ k ≤ 1000) — the number of important intersections. The next k lines contain two integers ai and bi (1 ≤ ai ≤ n, 1 ≤ bi ≤ m) — the coordinates of the important intersections. ---Output--- Print the only integer — the minimum number of traffic lights needed. ---Examples--- Input 4 3 3 2 2 2 3 4 1 Output 2 Input 5 5 5 1 1 2 2 3 3 4 4 5 5 Output 5","solution":"def minimum_traffic_lights(n, m, k, intersections): Given the dimensions of the grid and the coordinates of important intersections, returns the minimum number of traffic lights needed so that each important intersection has at least one traffic light on the same avenue or street. if k == 0: return 0 avenues_with_lights = set() streets_with_lights = set() for ai, bi in intersections: avenues_with_lights.add(ai) streets_with_lights.add(bi) return min(len(avenues_with_lights), len(streets_with_lights))"},{"question":"In a distant kingdom, there is a peculiar way of arranging soldiers for parades. The soldiers are arranged in rows, each row having an increasing number of soldiers compared to the previous one. For instance, the first row has 1 soldier, the second row has 2 soldiers, the third row has 3 soldiers, and so on. The king is curious about the total number of soldiers present when there are n rows. Furthermore, he would like to know how many additional soldiers are needed to form the next row after the n rows. Task You need to write a program that, given an integer n, calculates the total number of soldiers in the first n rows and the number of soldiers required for the next row. Input The first line contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. Each test case consists of one integer n (1 le n le 10^9) — the number of rows. Output For each test case, output two integers in a single line separated by a space. The first integer is the total number of soldiers in the first n rows, and the second integer is the number of soldiers in the next row after the n rows. Examples # Input 3 1 2 5 # Output 1 2 3 3 15 6 Explanation In the first test case, we have 1 row with 1 soldier. The next row would require 2 soldiers. In the second test case, we have 2 rows with 1+2=3 soldiers. The next row would require 3 soldiers. In the third test case, we have 5 rows with 1+2+3+4+5=15 soldiers. The next row would require 6 soldiers.","solution":"def soldiers_in_parade(t, test_cases): Given the number of test cases and a list of numbers representing rows, calculates the total number of soldiers in the first `n` rows and the number of soldiers required for the next row. Parameters: t (int): The number of test cases. test_cases (list of int): The list containing the number of rows for each test case. Returns: list of tuples: A list containing pairs of integers. Each pair represents the total number of soldiers in `n` rows and soldiers required for the next row respectively. results = [] for n in test_cases: total_soldiers = n * (n + 1) // 2 next_row_soldiers = n + 1 results.append((total_soldiers, next_row_soldiers)) return results"},{"question":"Emma is organizing a coding competition and needs to create a ranking system for the participants. Each participant is given a unique participant number from 1 to n. After all the codes are submitted, the participants receive scores. However, Emma realizes that the scores distribution is not unique, which means multiple participants might end up with the same score. To simplify the ranking process, Emma decides to assign the participants to groups based on their scores. Each group will contain participants that have scores within the same range. The challenge is to determine the number of participants in each group and to output the size of each group in the decreasing order of their scores\' range. Input The first line contains the integer n (1 ≤ n ≤ 100000) which represents the number of participants and scores separated by space in the second line. The scores array (0 ≤ scores[i] ≤ 10^9) represents the scores of each participant in integer format. Output Print the sizes of each group in decreasing order of their scores\' range. If there are multiple groups with the same size, you can print them in any order. Examples Input 5 1000 2000 2000 1000 3000 Output 1 2 2 Input 3 500 500 500 Output 3","solution":"def ranking_groups(n, scores): Determine the number of participants in each group based on their scores. Args: n (int): Number of participants. scores (list of int): Scores of the participants. Returns: list of int: Sizes of each group in decreasing order of their scores\' count. from collections import Counter # Count the occurrences of each score score_counts = Counter(scores) # Get the sizes of each group from the counts group_sizes = list(score_counts.values()) # Sort the sizes of groups in decreasing order group_sizes.sort(reverse=True) return group_sizes"},{"question":"Vasya has n favorite books and a backlog of unread books. He usually reads books one by one until he finds one that he really enjoys. Vasya likes a book if it shares the same genre with any of his favorite books. You are given his favorite genres and a list of books with their genres. Help Vasya determine which books he will read until he finds one he likes. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of Vasya\'s favorite books. The second line contains n distinct strings si (each string can be up to 15 characters and consists of lowercase English letters) — the genres of Vasya\'s favorite books. The third line contains an integer m (1 ≤ m ≤ 100) — the number of books in Vasya\'s backlog. The next m lines each contain a string ti followed by a space and a string ui (each string can be up to 15 characters and consists of lowercase English letters) — the title and the genre of the book in the backlog. Output Print the titles of the books that Vasya will read until he finds one he likes, in the order they appear in the backlog. If he doesn\'t like any of the books, print \\"None\\". Example Input 3 fiction mystery drama 5 book1 mystery book2 sci-fi book3 drama book4 romance book5 fiction Output book1 Input 2 fantasy adventure 4 bookA horror bookB mystery bookC adventure bookD sci-fi Output bookA bookB bookC Note In the first example, Vasya finds a book he likes immediately since \\"book1\\" belongs to one of his favorite genres. He stops reading after \\"book1\\". In the second example, Vasya reads \\"bookA\\" and \\"bookB\\" but doesn\'t like them. He then reads \\"bookC\\", which he likes, and therefore stops reading further. In the scenario where Vasya doesn\'t like any books, you should return \\"None\\".","solution":"def vasya_books(favorite_genres, books): This function determines which books Vasya will read until he finds one he likes. Parameters: favorite_genres (list of str): List of Vasya\'s favorite genres. books (list of tuples): List of books with each tuple containing the title and genre of the book. Returns: list of str: Titles of books Vasya will read until he finds one he likes or \\"None\\" if he doesn\'t like any books. favorite_genres_set = set(favorite_genres) for title, genre in books: if genre in favorite_genres_set: return [title] return [\\"None\\"]"},{"question":"You are given a 2D matrix of size n x m with non-negative integers. A cell with value 1 represents land and a cell with value 0 represents water. Consider adjacent cells vertically or horizontally connected. The task is to find the number of distinct islands in the matrix. An island is formed by connecting adjacent lands vertically or horizontally. Input In the first line of input, there are two integers n and m (1 ≤ n, m ≤ 50). In the next n lines, each containing m integers representing the cells of the matrix (either 0 or 1). Output Print the number of distinct islands. Examples Input 4 5 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 Output 3 Input 3 3 1 1 0 0 1 0 1 0 1 Output 3 Note Matrix from first sample: 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 Matrix from second sample: 1 1 0 0 1 0 1 0 1","solution":"def num_distinct_islands(matrix): Returns the number of distinct islands in a 2D matrix. if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): stack = [(x, y)] visited[x][y] = True while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and matrix[nx][ny] == 1: visited[nx][ny] = True stack.append((nx, ny)) island_count = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1 and not visited[i][j]: dfs(i, j) island_count += 1 return island_count"},{"question":"You are given two numbers `x` and `y`, you need to compute the digital root of the product of `x` and `y`. The digital root of a non-negative integer is the single-digit value obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration to compute the digit sum. The process continues until a single-digit number is reached. Example: The digital root of `38` is obtained as follows: `3 + 8 = 11`, `1 + 1 = 2`; thus, the digital root of `38` is `2`. Implement a function `digital_root_product` which takes the two integers `x` and `y` as input and returns the digital root of the product. -----Input----- The input consists of two integers `x` and `y` separated by a space. (0 le x, y le 10^9). -----Output----- Return the single-digit digital root of the product of `x` and `y`. -----Examples----- Input 5 7 Output 8 Input 6 9 Output 9 -----Note----- In the first example, the product of `5` and `7` is `35`, and the digital root of `35` is `3 + 5 = 8`. In the second example, the product of `6` and `9` is `54`, and the digital root of `54` is `5 + 4 = 9`. Note that a quick way to compute the digital root for any number is through the property of modulus 9: `digital_root(n) = 1 + (n - 1) % 9` for `n > 0`.","solution":"def digital_root_product(x, y): Returns the digital root of the product of two numbers x and y. product = x * y if product == 0: return 0 return 1 + (product - 1) % 9"},{"question":"Given a list of integers, determine and return the number of unique pairs boldsymbol{(a, b)} in the list that satisfy the condition a + b = k. Function Description Complete the `countPairs` function below. `countPairs` has the following parameter(s): - `int[] arr`: an array of integers - `int k`: the target sum Returns - `int`: the number of unique pairs that add up to k Input Format The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers arr[i], the elements of the array. The third line contains the integer k. Constraints - 1 leq n leq 10^5 - -10^9 leq arr[i] leq 10^9 - -10^9 leq k leq 10^9 Sample Input 0 ```plaintext 5 1 5 7 -1 5 6 ``` Sample Output 0 ```plaintext 3 ``` Explanation 0 There are three pairs of elements in the array whose sum equals 6: - 1 and 5 - 7 and -1 - 5 and 1 (repeated but counted as one pair) Sample Input 1 ```plaintext 4 1 1 1 1 2 ``` Sample Output 1 ```plaintext 6 ``` Explanation 1 There are six pairs of elements in the array whose sum equals 2: - (1, 1) (six possible pairings from the four 1\'s)","solution":"def countPairs(arr, k): Returns the number of unique pairs (a, b) in the list \'arr\' that satisfy a + b = k. count = 0 complements = {} for num in arr: target = k - num if target in complements: count += complements[target] if num in complements: complements[num] += 1 else: complements[num] = 1 return count"},{"question":"You are given a sequence of integers representing the number of people arriving at a train station in a consecutive series of days. Given that the train station has a limited waiting area capacity, your task is to determine the minimum capacity required so that on any given day, the number of people in the waiting area does not exceed this capacity. People arriving at the station on a day eventually leave, but the exact times of arrival and departure are not specified, so you only need to consider the peak number of people present at any time during the series of days. ---Input--- The first line of input contains an integer n, 1 leq n leq 10^5, representing the number of days. The second line of input contains n integers where the i-th integer represents the number of people arriving at the station on the i-th day. Each integer is between 1 and 10^4 inclusive. ---Output--- Output a single integer representing the minimum capacity of the waiting area required to handle the peak number of people present over the given days. ---Examples--- Sample Input: 5 4 8 4 5 6 Sample Output: 8","solution":"def minimum_capacity(arrivals): Returns the minimum capacity required for the waiting area so that it can handle the peak number of people present at the station over a series of days. return max(arrivals) # Testing the function print(minimum_capacity([4, 8, 4, 5, 6])) # Expected Output: 8"},{"question":"Write a program to balance parentheses in a string. The string contains only \'(\' and \')\' characters, and it may be unbalanced. You need to add the minimum number of parentheses to make the string balanced. ------ Input ------ The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single string S representing a sequence of parentheses. ------ Output ------ For each test case, output a single line containing the lexicographically smallest balanced string that can be formed by adding the minimum number of parentheses to S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 ------ Sample Input 1 ------ 3 ) (( ()) ------ Sample Output 1 ------ () (()) (()) ------ Explanation 1 ------ For the first test case, adding one \'(\' at the beginning makes the string balanced: \'()\'. For the second test case, adding two \')\' at the end makes the string balanced: \'(())\'. For the third test case, the string is already balanced: \'()\'.","solution":"def balance_parentheses(T, parentheses_list): Balances each string of parentheses in the provided list by adding the minimum number of parentheses to make them balanced. Parameters: T (int): number of test cases parentheses_list (list of str): list of T strings, each containing a sequence of \'(\' and \')\' characters Returns: list of str: list of T balanced strings results = [] for s in parentheses_list: left_needed = 0 # Number of \'(\' needed to balance \')\' right_needed = 0 # Number of \')\' needed to balance \'(\' for ch in s: if ch == \'(\': right_needed += 1 elif ch == \')\': if right_needed > 0: right_needed -= 1 else: left_needed += 1 balanced_string = \'(\' * left_needed + s + \')\' * right_needed results.append(balanced_string) return results"},{"question":"Given an integer array `heights` representing the heights of columns where the width of each column is 1, return the maximum area of a rectangular subarray under the histogram. A histogram is a set of rectangles aligned against the x-axis, where the height of the rectangle at position i is given by `heights[i]`. Each rectangle width is always 1 unit. For example, given heights = [2,1,5,6,2,3], the largest rectangle has an area of 10 units. -----Function Signature----- ```python def largestRectangleArea(heights: List[int]) -> int: ``` -----Input----- - The input will be a list of integers with size `n` (0 ≤ n ≤ 10^5) where each integer represents the height of a column in the histogram. -----Output----- - The output should be a single integer, the area of the largest rectangle that can be formed under the histogram. -----Examples----- Example 1: Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The rectangle with the height of 2 from index 2 to 5 has the maximum area of 10 units. Example 2: Input: heights = [2, 4] Output: 4 Explanation: The rectangle with the height of 4 from index 1 has the maximum area of 4 units. -----Constraints----- - The input list `heights` can have up to 100000 elements. - Each element in `heights` represents the height of the rectangle and is a non-negative integer. Note: Focus on leveraging efficient data structures to ensure the solution can handle the upper constraint limits efficiently.","solution":"from typing import List def largestRectangleArea(heights: List[int]) -> int: Computes the largest rectangle area in a histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an undirected graph with N nodes and M edges. Each node represents a city, and each edge represents a direct road connecting two cities. The roads are bidirectional. Each road has a travel time associated with it. A company wants to place exactly K facilities in K different cities such that each remaining city has a facility either in itself or in one of its neighboring cities. Your task is to determine if it\'s possible to place K facilities in the cities such that every city is covered by at least one facility within its direct neighbors, and if possible, to output a set of K cities where the facilities can be placed. # Input: The input consists of the following lines: - The first line contains three integers N, M, and K. - Each of the next M lines contains three integers u, v, and w, indicating a road between city u and city v with a travel time of w. # Output: If it\'s possible to place the K facilities to cover all cities, output \\"YES\\" and provide a list of K cities, separated by spaces, where the facilities should be placed. If it\'s not possible, output \\"NO\\". # Constraints: - 1 leq N leq 100,000 - 0 leq M leq 200,000 - 1 leq u, v leq N - u neq v - 1 leq w leq 10^6 - 1 leq K leq N # Sample Input: ``` 5 4 2 1 2 3 2 3 2 3 4 4 4 5 1 ``` # Sample Output: ``` YES 2 4 ``` # Explanation: In this scenario, if we place facilities in cities 2 and 4, then: - City 1 is covered via city 2. - City 2 has a facility. - City 3 is covered via city 2 or city 4. - City 4 has a facility. - City 5 is covered via city 4. Thus, every city will either have a facility or be directly connected to a city with a facility. Additionally: - If no such arrangement is possible, like when K is too small to cover all cities, the output should be \\"NO\\".","solution":"def can_place_facilities(N, M, K, roads): Determines if it\'s possible to place K facilities in cities to ensure each city has a facility either in itself or in one of its neighboring cities. if K >= N: # If K is greater than or equal to N, place a facility in each city. return \\"YES\\", list(range(1, K+1)) from collections import defaultdict graph = defaultdict(list) for u, v, w in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) components = [] def dfs(node, comp): stack = [node] while stack: u = stack.pop() if not visited[u]: visited[u] = True comp.append(u) for v in graph[u]: if not visited[v]: stack.append(v) for i in range(1, N+1): if not visited[i]: comp = [] dfs(i, comp) components.append(comp) if len(components) > K: return \\"NO\\", [] facilities = [] for comp in components: facilities.append(comp[0]) while len(facilities) < K: for comp in components: if len(comp) > 1: facilities.append(comp[1]) comp.remove(comp[1]) if len(facilities) == K: break return \\"YES\\", facilities"},{"question":"Given a string comprised of lowercase letters and a set of queries, each query asking if a certain substring (formed by two indices, inclusive) contains unique characters, your task is to implement a function that answers all the queries efficiently. # Unique Characters in Substring A substring is a contiguous sequence of characters within a string. For example, in the string \\"abcde\\", the substring starting at index 1 and ending at index 3 is \\"bcd\\". # Function Signature ```python def unique_substrings(s: str, queries: List[Tuple[int, int]]) -> List[bool]: ``` # Input - `s` (string): A string of lowercase letters. - `queries` (List[Tuple[int, int]]): A list of queries where each query is a tuple containing two integers, `(start, end)`, representing the starting index and ending index (inclusive) of the substring to check. # Output - A list of Booleans: For each query, return `True` if the substring formed by the indices contains unique characters, otherwise `False`. # Examples ```python # Example 1 s = \\"abcde\\" queries = [(0, 4), (1, 3), (2, 2)] # Explanation: # 1. substring \\"abcde\\" -> true (all characters are unique) # 2. substring \\"bcd\\" -> true (all characters are unique) # 3. substring \\"c\\" -> true (only one character) print(unique_substrings(s, queries)) # [True, True, True] # Example 2 s = \\"aab\\" queries = [(0, 1), (0, 2)] # Explanation: # 1. substring \\"aa\\" -> false (characters are not unique) # 2. substring \\"aab\\" -> false (characters are not unique) print(unique_substrings(s, queries)) # [False, False] # Example 3 s = \\"abac\\" queries = [(1, 3), (0, 3)] # Explanation: # 1. substring \\"bac\\" -> true (all characters are unique) # 2. substring \\"abac\\" -> false (characters are not unique) print(unique_substrings(s, queries)) # [True, False] ``` # Notes - You can assume that the indices provided in the queries are valid and within the bounds of the string. - Aim for an efficient solution to handle potentially large strings and numerous queries.","solution":"from typing import List, Tuple def unique_substrings(s: str, queries: List[Tuple[int, int]]) -> List[bool]: Checks if substrings formed by the indices in the queries contain unique characters. Parameters: s (str): a string of lowercase letters queries (List[Tuple[int, int]]): a list of queries where each query is a tuple (start, end) Returns: List[bool]: A list of booleans indicating if each substring has unique characters result = [] for start, end in queries: substring = s[start:end + 1] if len(substring) == len(set(substring)): result.append(True) else: result.append(False) return result"},{"question":"You\'ve been hired to help an amusement park optimize the arrangement of riders in their new roller coaster. The roller coaster has seats arranged in `rows` and `columns`, and can only accommodate riders of certain heights due to safety restrictions. Your task is to write a function that checks whether a given group of people can all be seated on the roller coaster, adhering to the height restrictions. Here are the requirements: 1. **height[]**: An array containing the heights of each person in the group. 2. **minHeight**: The minimum height a person must be to ride. 3. **maxHeight**: The maximum height a person can be to ride. 4. **rows**: The number of rows of seats on the roller coaster. 5. **columns**: The number of columns of seats on the roller coaster. The function should return `True` if all riders are within the permitted height range and there are enough seats for everyone in the group. Otherwise, it should return `False`. Input: * height[] - An array of integers representing the height of each person in the group. * minHeight - An integer representing the minimum height requirement. * maxHeight - An integer representing the maximum height requirement. * rows - An integer representing the number of rows on the roller coaster. * columns - An integer representing the number of columns on the roller coaster. **Example**: ``` height = [120, 130, 140, 150] minHeight = 110 maxHeight = 160 rows = 2 columns = 2 Output: True height = [120, 130, 140, 150, 160] minHeight = 110 maxHeight = 155 rows = 2 columns = 2 Output: False ``` Write the function to determine if all group members can ride the roller coaster given the height restrictions and the number of available seats.","solution":"def can_all_ride(height, minHeight, maxHeight, rows, columns): Determine if the group of people can all ride the roller coaster. :param height: List[int] - Heights of the group members :param minHeight: int - Minimum height requirement :param maxHeight: int - Maximum height requirement :param rows: int - Number of rows of seats on the roller coaster :param columns: int - Number of columns of seats on the roller coaster :return: bool - True if the group can all ride, else False total_seats = rows * columns if len(height) > total_seats: return False if any(h < minHeight or h > maxHeight for h in height): return False return True"},{"question":"Write a function `longest_palindrome(s)` that takes a string `s` as input and returns the longest palindromic substring within `s`. If there are multiple substrings of the same maximum length, return the first one found. If the string is empty, return an empty string.","solution":"def longest_palindrome(s): Returns the longest palindromic substring in s. if s == \'\': return \'\' n = len(s) start, max_length = 0, 1 for i in range(n): l, r = i, i while l >= 0 and r < n and s[l] == s[r]: if (r - l + 1) > max_length: start = l max_length = r - l + 1 l -= 1 r += 1 l, r = i, i + 1 while l >= 0 and r < n and s[l] == s[r]: if (r - l + 1) > max_length: start = l max_length = r - l + 1 l -= 1 r += 1 return s[start:start + max_length]"},{"question":"Given a matrix of integers, `matrix`, of dimensions `n x n`, your task is to find the sum of elements along its two main diagonals. The main diagonals of a matrix are: 1. The primary diagonal: which runs from the top-left corner to the bottom-right corner. 2. The secondary diagonal: which runs from the top-right corner to the bottom-left corner. You need to return the sum of both diagonals. ---Input--- - An integer `t` (1 ≤ t ≤ 100) — the number of test cases. - Each of the next `t` test cases contains: - An integer `n` (1 ≤ n ≤ 1000) — the size of the matrix. - `n` lines, each with `n` space-separated integers representing the matrix elements `matrix_ij` (−10^9 ≤ matrix_ij ≤ 10^9). ---Output--- For each test case, output the sum of the elements along the two main diagonals. ---Examples--- Input 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 30 68 ---Explanation--- In the first test case, for the matrix: ``` 1 2 3 4 5 6 7 8 9 ``` - The primary diagonal elements are 1, 5, 9. Their sum is 1 + 5 + 9 = 15. - The secondary diagonal elements are 3, 5, 7. Their sum is 3 + 5 + 7 = 15. - The total sum of the primary and secondary diagonals is 15 + 15 = 30. In the second test case, for the matrix: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` - The primary diagonal elements are 1, 6, 11, 16. Their sum is 1 + 6 + 11 + 16 = 34. - The secondary diagonal elements are 4, 7, 10, 13. Their sum is 4 + 7 + 10 + 13 = 34. - The total sum of the primary and secondary diagonals is 34 + 34 = 68.","solution":"def sum_of_diagonals(matrix): Return the sum of the elements along the two main diagonals of a n x n matrix. n = len(matrix) primary_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n)) return primary_diagonal_sum + secondary_diagonal_sum def process_test_cases(t, test_cases): results = [] for case in test_cases: n, matrix = case results.append(sum_of_diagonals(matrix)) return results"},{"question":"Write a program that implements the Merge Sort algorithm to sort an array of integers in ascending order. The algorithm should be based on the following pseudocode: MergeSort(A, left, right) 1 if left < right 2 mid = (left + right) / 2 3 MergeSort(A, left, mid) 4 MergeSort(A, mid + 1, right) 5 Merge(A, left, mid, right) Merge(A, left, mid, right) 1 n1 = mid - left + 1 2 n2 = right - mid 3 create arrays L[0..n1-1] and R[0..n2-1] 4 for i = 0 to n1-1 5 L[i] = A[left + i] 6 for j = 0 to n2-1 7 R[j] = A[mid + 1 + j] 8 i = 0, j = 0, k = left 9 while i < n1 and j < n2 10 if L[i] <= R[j] 11 A[k] = L[i] 12 i = i + 1 13 else 14 A[k] = R[j] 15 j = j + 1 16 k = k + 1 17 copy remaining elements of L[], if any 18 while i < n1 19 A[k] = L[i] 20 i = i + 1 21 k = k + 1 22 copy remaining elements of R[], if any 23 while j < n2 24 A[k] = R[j] 25 j = j + 1 26 k = k + 1 Constraints 1 ≤ N ≤ 1000 Input The first line of the input contains an integer N, the number of elements in the array. The second line contains N integers separated by spaces, representing the elements of the array A. Output Print the sorted sequence in one line. Two contiguous elements of the sequence should be separated by a space character. Examples Input 7 38 27 43 3 9 82 10 Output 3 9 10 27 38 43 82 Input 5 12 11 13 5 6 Output 5 6 11 12 13","solution":"def merge_sort(A, left, right): if left < right: mid = (left + right) // 2 merge_sort(A, left, mid) merge_sort(A, mid + 1, right) merge(A, left, mid, right) def merge(A, left, mid, right): n1 = mid - left + 1 n2 = right - mid L = [0] * n1 R = [0] * n2 for i in range(n1): L[i] = A[left + i] for j in range(n2): R[j] = A[mid + 1 + j] i = 0 j = 0 k = left while i < n1 and j < n2: if L[i] <= R[j]: A[k] = L[i] i += 1 else: A[k] = R[j] j += 1 k += 1 while i < n1: A[k] = L[i] i += 1 k += 1 while j < n2: A[k] = R[j] j += 1 k += 1 def sort_array(arr): merge_sort(arr, 0, len(arr) - 1) return arr"},{"question":"Given a binary tree, write a function to calculate the sum of all node values at a given depth. The depth of the root node is 0. -----Input----- The input consists of: 1. A binary tree represented by a list of integers in level-order traversal. Null nodes are represented by the value `-1`. 2. An integer `depth` (0 leq text{depth} < text{height of the tree}), representing the depth at which we need to calculate the sum. -----Output----- Output a single integer which is the sum of the values of all nodes at the given depth. If the depth is invalid for the given tree, return 0. -----Examples----- Input [1, 2, 3, 4, 5, -1, -1, -1, -1, 6, 7] 2 Output 11 Input [5, 1, 4, -1, -1, 3, 6] 1 Output 5 -----Note----- In the first example, the binary tree is ``` 1 / 2 3 / 4 5 / 6 7 ``` The nodes at depth 2 are [4, 5], and their sum is 4 + 5 = 9. In the second example, the binary tree is ``` 5 / 1 4 / 3 6 ``` The nodes at depth 1 are [1, 4], and their sum is 1 + 4 = 5.","solution":"def sum_at_depth(tree, depth): Returns the sum of all node values at the given depth. if not tree or depth < 0: return 0 current_depth = 0 current_level = [tree[0]] idx = 1 while current_level and idx < len(tree): if current_depth == depth: return sum(node for node in current_level if node != -1) next_level = [] for node in current_level: if node != -1: if idx < len(tree): next_level.append(tree[idx]) idx += 1 if idx < len(tree): next_level.append(tree[idx]) idx += 1 else: next_level.extend([-1, -1]) current_level = next_level current_depth += 1 if current_depth == depth: return sum(node for node in current_level if node != -1) return 0"},{"question":"Create a function that filters out a list of words that contain at least one of the given special characters. You are given a list of alphanumeric strings and a string of special characters. Write a function that returns a new list containing only the words that **do not** contain any of the special characters from the string. The order of words in the output list should follow their order in the input list. # Input - A list of alphanumeric strings `words` (1 ≤ len(words) ≤ 100). - A string `special_chars` containing unique special characters (1 ≤ len(special_chars) ≤ 10). # Output - A list of words from the initial list that do not contain any of the special characters. # Examples Input ```python words = [\\"hello\\", \\"h3ll0\\", \\"world\\", \\"!world\\", \\"python\\"] special_chars = \\"!@#%^&*()\\" ``` Output ```python [\\"hello\\", \\"h3ll0\\", \\"world\\", \\"python\\"] ``` Input ```python words = [\\"abc\\", \\"def@ghi\\", \\"123!456\\", \\"789\\"] special_chars = \\"@!\\" ``` Output ```python [\\"abc\\", \\"789\\"] ``` # Note In the first example, the words \\"h3ll0\\" and \\"world\\" are included in the output even though they contain numbers, because numbers are not in the set of special characters \\"@#%^&*()\\". In the second example, the words \\"def@ghi\\" and \\"123!456\\" are excluded because they contain \\"@\\" and \\"!\\" respectively.","solution":"def filter_words(words, special_chars): Filters out words that contain any of the special characters. :param words: List of alphanumeric strings :param special_chars: String of special characters :return: List of words that do not contain any special characters return [word for word in words if not any(char in word for char in special_chars)]"},{"question":"You are given two arrays A and B consisting of N integers each. Both arrays represent positions of N people seated in a row. You are also given an integer D which represents the maximum distance any person can move in one single step. Each person initially starts at a position given by array A and should reach a position given by array B. Determine if it is possible for each person to reach the respective target position provided in array B in any number of steps such that the maximum single step size is D. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input: The first line of input contains an integer T, which is the number of test cases. Then, T test cases follow. The first line of each test case contains two integers N and D. The second line contains N space-separated integers representing array A. The third line contains N space-separated integers representing array B. Output: For each test case, output \\"YES\\" if it is possible for each person to reach the target position, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ A[i], B[i] ≤ 10^9 1 ≤ D ≤ 10^9 SAMPLE INPUT 2 3 2 1 3 5 3 7 7 4 1 1 2 3 4 2 1 4 3 SAMPLE OUTPUT NO YES Explanation For the first test case: Person starting at position 1 can\'t reach position 3 in one single step because the maximum step size is 2, and similarly others aren\'t able to reach their respective positions. For the second test case: All people can reach their respective target positions with steps of size ≤ 1.","solution":"def can_reach_positions(T, test_cases): results = [] for case in test_cases: N, D, A, B = case[\\"N\\"], case[\\"D\\"], case[\\"A\\"], case[\\"B\\"] possible = True for a, b in zip(A, B): if abs(a - b) > D: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Alex, an avid gardener, wants to plant trees in his rectangular garden. He wants to plant exactly `n` trees in such a way that the trees are positioned evenly in a grid. Determine the number of different ways in which he can plant these `n` trees. **Input:** A single integer `n` (1 <= n <= 10^9) **Output:** An integer representing the number of unique configurations of planting `n` trees in a rectangular grid where the dimensions of the grid are integers. **Example:** **Input:** 12 **Output:** 6 **Explanation:** The valid configurations for planting 12 trees are: - 1 row * 12 columns - 12 rows * 1 column - 2 rows * 6 columns - 6 rows * 2 columns - 3 rows * 4 columns - 4 rows * 3 columns","solution":"def count_planting_ways(n): Determine the number of ways to plant n trees in a rectangular grid. count = 0 for i in range(1, int(n**0.5) + 1): if n % i == 0: count += 2 if i != n // i else 1 return count"},{"question":"You are given an array of integers representing the heights of buildings. Each building has a width of 1 unit. There\'s a person standing at the first building (index 0) with a ball. The person throws the ball to the right and it moves horizontally without changing height. The ball stops when it hits a building that is equal or taller than the building the person is standing on. Return the index of the building where the ball stops. Example: If the heights of the buildings are [5, 3, 6, 7, 4, 2], the ball thrown from the first building (height 5) will stop when it reaches the building with height 6 (index 2). If the heights of the buildings are [4, 1, 2, 3], when the ball is thrown from the first building (height 4), it will stop at the end of the array as there is no building taller than 4. Function Description Complete the findBallStop function in the editor below. It should return the index of the building where the ball stops. findBallStop has the following parameter: - heights: an array of integers representing the heights of the buildings Input Format The first line contains an integer boldsymbol{boldsymbol{n}}, the number of buildings. The second line contains boldsymbol{n} space-separated integers representing the heights of the buildings. Constraints 1leq nleq10^5 1leq heights[i]leq10^9 Output Format Print the index of the building where the ball stops. If the ball doesn\'t hit any building to the right, return -1. Sample Input 6 5 3 6 7 4 2 Sample Output 2 Explanation The building heights are [5, 3, 6, 7, 4, 2]. Starting from index 0 with height 5, the ball stops at index 2 with height 6.","solution":"def findBallStop(heights): Given the heights of buildings, return the index where the ball stops. The ball stops when it hits a building equal or taller than the starting building. start_height = heights[0] for index in range(1, len(heights)): if heights[index] >= start_height: return index return -1"},{"question":"You are given a string which contains a large number of words separated by spaces. You are to reverse the order of the words in the string while keeping the characters in each word in the same order and maintaining the spaces. For example, reversing the order of words in the string \\"hello world\\" would result in \\"world hello\\". -----Constraints----- - The string consists of lowercase and uppercase English letters (a - z, A - Z) and spaces. - 1 leq |S| leq 1000 - There is exactly one space between words. - The string does not start or end with a space. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the string with the order of the words reversed. -----Sample Input----- this is a test -----Sample Output----- test a is this The original string is \\"this is a test\\". Reversing the order of the words results in \\"test a is this\\". Note that the characters within each word remain in the same order.","solution":"def reverse_words_order(s): Reverses the order of words in a given string while keeping the characters in each word in the same order. words = s.split(\' \') reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"In a small town, there is a single bakery that produces loaves of bread. The bakery has a specific schedule for their bread production. They produce bread on certain days of the week, which they want to manage using a computer program. The owner wants to know, for a given number of days, whether bread will be produced on those days. Each day of the week is represented by a number from 1 (Monday) to 7 (Sunday). The production schedule is provided as a sequence of numbers indicating the days when bread is produced. You need to write a program to determine if bread will be produced on specific given days. ------ Input ------ The first line of the input contains an integer D, representing the number of days the bakery wants to check for bread production. The second line contains D integers, each representing a day (from 1 to 7) the owner needs to check. The third line contains an integer P, the number of days bread is produced in a week. The fourth line contains P integers, each representing a day (from 1 to 7) corresponding to the production schedule of the bakery. ------ Output ------ For each of the D days provided in the second line, print \\"Yes\\" if bread is produced on that day according to the schedule, otherwise print \\"No\\". ------ Constraints ------ 1 ≤ D ≤ 50 1 ≤ P ≤ 7 Each integer in the input is between 1 and 7. ------ Sample Input 1 ------ 3 1 3 5 2 1 5 ------ Sample Output 1 ------ Yes No Yes ------ Explanation 1 ------ The bakery produces bread on days 1 (Monday) and 5 (Friday). The output confirms production on days 1 and 5 with \\"Yes\\" while day 3 (Wednesday) gets a \\"No\\".","solution":"def bread_production(D, check_days, P, production_days): Determines if bread is produced on specified days Parameters: D (int): the number of days to check check_days (list): list of days to check (size D) P (int): number of production days in the week production_days (list): list of production days (size P) Returns: list: \\"Yes\\" or \\"No\\" for each of the D days production_set = set(production_days) results = [] for day in check_days: if day in production_set: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Maria is organizing a charity event where n people will participate. Each participant must be assigned a role from a list of available roles: \'volunteer,\' \'organizer,\' and \'guest.\' Each role must be assigned to at least one participant, and there can be multiple participants with the same role. Maria wants to ensure that no roles are left unassigned and the difference in the number of participants assigned to any two roles must not exceed 1. Help Maria determine an assignment of roles to participants that satisfies all the given conditions. Input The first line contains an integer n (3 ≤ n ≤ 100000) representing the number of participants. Output Print n space-separated strings, where each string is either \'volunteer,\' \'organizer,\' or \'guest,\' representing the role assigned to each participant. The output must meet the conditions that each role is assigned to at least one participant, and the difference in the number of participants for any two roles does not exceed 1. Examples Input 5 Output volunteer organizer guest volunteer organizer Input 8 Output volunteer guest organizer volunteer guest organizer volunteer guest","solution":"def assign_roles(n): Assigns roles to n participants such that each role (\'volunteer\', \'organizer\', \'guest\') is assigned to at least one participant, and the difference in the number of participants assigned to any two roles does not exceed 1. :param n: int, the number of participants :return: list of strings, the assigned roles in order roles = [\'volunteer\', \'organizer\', \'guest\'] result = [] for i in range(n): result.append(roles[i % 3]) return result"},{"question":"Hana owns a magic box with some stones inside, each stone has a positive value. She can perform the following operation any number of times: choose any two stones, remove them from the box and add a new stone whose value is the absolute difference of the values of the two removed stones. If only one stone remains in the box, Hana will stop performing operations. Hana wants to know the minimum possible value of the remaining stone (if it exists) after performing any number of operations. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of stones in the box. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the values of the stones in the box. Output Print the minimum possible value of the remaining stone (if it exists) after performing any number of operations. If no stone remains, print 0. Examples Input 3 2 4 1 Output 1 Input 5 7 10 4 3 6 Output 2 Note In the first example, Hana can perform the following operations: * Take stones with values 4 and 1, replace them with a stone of value |4 - 1| = 3. The box now contains stones [2, 3]. * Take stones with values 3 and 2, replace them with a stone of value |3 - 2| = 1. The box now contains stone [1]. * Since only one stone remains, Hana stops the operations. The minimum possible value of the remaining stone is 1, so the output is 1. In the second example, Hana can perform the following operations: * Take stones with values 10 and 6, replace them with a stone of value |10 - 6| = 4. The box now contains stones [7, 4, 3, 4]. * Take stones with values 7 and 3, replace them with a stone of value |7 - 3| = 4. The box now contains stones [4, 4, 4]. * Take stones with values 4 and 4, replace them with a stone of value |4 - 4| = 0. The box now contains stones [4, 0]. * Take stones with values 4 and 0, replace them with a stone of value |4 - 0| = 4. The box now contains stone [4]. * Since only one stone remains, Hana stops the operations. The minimum possible value of the remaining stone is 4, so the output is 4. Note that if there are multiple ways to achieve the same result, any of them is acceptable as long as the final remaining stone has the minimum possible value.","solution":"def min_remaining_stone(n, stones): while len(stones) > 1: stones.sort() new_stone = abs(stones[-1] - stones[-2]) stones = stones[:-2] if new_stone != 0: stones.append(new_stone) return stones[0] if stones else 0"},{"question":"You are given a set of non-overlapping intervals, and you need to insert a new interval into the set (merge if necessary). You can assume that the intervals were initially sorted according to their start time. Example 1: Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]] Explanation: The new interval [2,5] overlaps with [1,3], so merge them into [1,5]. Example 2: Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: The new interval [4,8] overlaps with [3,5],[6,7],[8,10], so merge them into [3,10]. Example 3: Input: intervals = [], newInterval = [5,7] Output: [[5,7]] Explanation: Since the initial list is empty, just insert the new interval into it. Example 4: Input: intervals = [[1,5]], newInterval = [2,3] Output: [[1,5]] Explanation: The new interval [2,3] is completely within the existing interval [1,5], so there is no need to split or merge.","solution":"def insert_interval(intervals, newInterval): Inserts a new interval into a list of non-overlapping sorted intervals and merge if necessary. result = [] i = 0 n = len(intervals) # Add all intervals ending before newInterval starts while i < n and intervals[i][1] < newInterval[0]: result.append(intervals[i]) i += 1 # Merge intervals that overlap with newInterval while i < n and intervals[i][0] <= newInterval[1]: newInterval[0] = min(newInterval[0], intervals[i][0]) newInterval[1] = max(newInterval[1], intervals[i][1]) i += 1 result.append(newInterval) # Add the remaining intervals while i < n: result.append(intervals[i]) i += 1 return result"},{"question":"A group of friends decides to go hiking on a mountain and they want to record the highest elevation they reach during the trip. They will record the elevation at each point they visit as they ascend and descend the mountain. Your task is to write a program that helps them find the maximum elevation they reached. -----Input----- The input consists of a single test case. The first line contains an integer n (1 leq n leq 1000), representing the number of points recorded. The following line contains n integers e_1, e_2, e_3, dots, e_n (-10^6 leq e_i leq 10^6) representing the elevation at each recorded point in the order they were visited. -----Output----- Output a single integer representing the maximum elevation the group reached during their trip. -----Examples----- Sample Input: 5 100 200 300 400 300 Sample Output: 400 Sample Input: 7 -500 -1000 0 200 150 -100 -50 Sample Output: 200","solution":"def find_max_elevation(elevations): Returns the highest elevation reached during the trip. Parameters: elevations (list of int): A list of integers representing the elevation at each recorded point. Returns: int: The maximum elevation reached. return max(elevations)"},{"question":"You are given an integer matrix (n times n) where each cell contains a non-negative integer. A move consists of choosing any positive integer x and converting all cells in the matrix that contain x to zeros. You need to determine the minimum number of moves required for each row to become all zeros. For example: - For the matrix ``` 1 2 2 3 3 3 1 2 2 ``` The minimum number of moves required for each row is 1 because you can convert all cells containing 2 to zeros in the first and third rows, and all cells containing 3 to zeros in the second row. - For the matrix ``` 2 1 3 5 5 5 9 1 1 ``` The minimum number of moves required for each row is 1 because you can convert all cells containing 1 to zeros in the first and third rows, and all cells containing 5 to zeros in the second row. - For the matrix ``` 5 5 5 2 3 2 3 3 3 ``` The minimum number of moves required for each row is 3 because each row contains different integers. You are given t test cases and an integer matrix for each test case. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case begins with a single integer n (1 le n le 50) — the size of the matrix. The next n lines contain n integers each, representing the cells of the matrix. It is guaranteed that all the integers in the matrix are non-negative and do not exceed 10^9. -----Output----- For each test case, print the minimum number of moves required to convert all rows to zeros. -----Examples----- Input 3 3 1 2 2 3 3 3 1 2 2 3 2 1 3 5 5 5 9 1 1 3 5 5 5 2 3 2 3 3 3 Output 1 1 1 1 1 1 1 1 1 2 3 -----Note----- In the first test case, you can convert all cells containing 2 to zeros in the first and third rows, and all cells containing 3 to zeros in the second row, thus it requires 1 move per row. In the second testcase, you can convert all cells containing 1 to zeros in the first and third rows, and all cells containing 5 to zeros in the second row, thus it requires 1 move per row. In the third testcase, each row requires a different number to be converted to zeros, hence each row requires a separate move, thus it requires 1 move per row.","solution":"def min_moves_to_zero_each_row(matrix): Given a matrix, compute the minimum number of moves required for each row to convert all cells to zeros by converting all cells containing any chosen positive integer to zeros in one move. Parameters: matrix (list of list of int): an n x n matrix with non-negative integers Returns: int: minimum number of moves required moves = [] for row in matrix: unique_numbers = set(row) if 0 in unique_numbers: unique_numbers.remove(0) moves.append(len(unique_numbers)) return moves def process_test_cases(test_cases): results = [] for n, matrix in test_cases: results.append(min_moves_to_zero_each_row(matrix)) return results"},{"question":"Task A forest ranger is monitoring a narrow trail that runs straight through a dense forest. Along this trail, several observation posts are placed at different elevations to monitor wildlife. These elevations are represented in an array, where each element in the array corresponds to the elevation at a specific observation post. The ranger is interested in identifying the longest sequence of consecutive elevation increase, where each subsequent elevation is strictly higher than the previous one. Given an array of elevations, find the length of the longest sequence of strictly increasing elevations. # Example For `elevations = [1, 2, 2, 4, 3, 4, 5, 7]`, the output should be `4`. The longest increasing subsequence is [3, 4, 5, 7], and its length is 4. # Input/Output - `[input]` integer array `elevations` Constraints: `2 ≤ elevations.length ≤ 100, 1 ≤ elevations[i] ≤ 10^4.` - `[output]` an integer","solution":"def longest_increasing_sequence(elevations): Returns the length of the longest sequence of strictly increasing elevations. if len(elevations) < 2: return len(elevations) max_length = 1 current_length = 1 for i in range(1, len(elevations)): if elevations[i] > elevations[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 # Check last sequence if current_length > max_length: max_length = current_length return max_length"},{"question":"You are given an integer array `A` of length `n`. You can perform the following operation at most once on the array: * Select two integers `a` and `b` (a != b) that are present in the array, and replace all occurrences of `a` with `b`. The goal is to make all the elements in the array equal. Determine if it is possible to do so with the given constraint. Constraints * 1 leq |A| leq 10^5 * 1 leq A[i] leq 10^9 Input Input is given from Standard Input in the following format: ``` n A_1 A_2 ... A_n ``` Output Print `YES` if it is possible to make all elements in the array equal by performing at most one operation; otherwise, print `NO`. Examples Input 5 1 2 2 1 1 Output YES Input 4 4 4 4 4 Output YES Input 3 1 2 3 Output NO","solution":"def can_make_elements_equal(n, A): from collections import Counter if n <= 1: return \\"YES\\" counter = Counter(A) # If all elements are already the same if len(counter) == 1: return \\"YES\\" # If there are more than 2 unique elements, it\'s impossible if len(counter) > 2: return \\"NO\\" return \\"YES\\" # Read input and process accordingly if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) A = list(map(int, data[1:])) print(can_make_elements_equal(n, A))"},{"question":"A company\'s internal email system allows employees to send messages to any other employee within the company. To measure communication efficiency, the company wants to analyze the email traffic. Given N employees, output the total number of unique pairs of employees between whom messages can be exchanged. Note that communication is bidirectional, meaning if employee A can send an email to employee B, employee B can also send an email to employee A. Also, no employee can send an email to themselves. Input Format The first line contains the number of test cases T. T lines follow. Each line then contains an integer N, the total number of employees. Output Format Print the number of unique pairs of employees who can exchange emails for each test-case in a new line. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 0 1 3 Explanation Case 1: With only one employee, no emails can be exchanged, hence 0 pairs. Case 2: With two employees, they can exchange emails with each other, hence 1 pair. Case 3: With three employees, each employee can exchange emails with the other two, resulting in 3 unique pairs (1-2, 1-3, 2-3).","solution":"def count_unique_pairs(T, test_cases): Returns the number of unique pairs of employees who can exchange emails for each test case. Parameters: T (int): The number of test cases. test_cases (list of int): A list containing the number of employees for each test case. Returns: list of int: A list containing the number of unique pairs for each test case. results = [] for N in test_cases: if N < 2: results.append(0) else: results.append(N * (N - 1) // 2) return results"},{"question":"You are given several sequences of integers and need to determine if each sequence can be reordered to form a contiguous sequence of increasing numbers. A sequence is considered contiguous if it can be reordered such that each element (except the first and last one) has exactly one predecessor and one successor in the sequence. For each sequence, determine if it can be reordered to form a contiguous sequence of increasing numbers. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines describes a test case containing an integer n (1 leq n leq 10^5) followed by n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), the elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output \\"YES\\" if the sequence can be reordered to form a contiguous sequence of increasing numbers, otherwise output \\"NO\\". -----Examples----- Input 3 4 4 2 3 1 5 6 2 4 3 1 3 10 11 12 Output YES NO YES -----Note----- In the first test case, the sequence can be reordered to [1, 2, 3, 4] which is contiguous and increasing. Hence, the output is \\"YES\\". In the second test case, there is no way to reorder the sequence to form a contiguous increasing sequence. Hence, the output is \\"NO\\". In the third test case, the sequence is already [10, 11, 12] which is contiguous and increasing. Hence, the output is \\"YES\\".","solution":"def can_form_contiguous_sequence(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] sequence.sort() is_contiguous = True for j in range(1, n): if sequence[j] != sequence[j-1] + 1: is_contiguous = False break if is_contiguous: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a town, there is a festival celebrated every year, and one of the events in the festival is the \\"Treasure Hunt\\". In the treasure hunt, participants are given clues to find hidden treasures. Each clue directs the participant to the next clue and so on, until the final clue which directs to the treasure. The festival committee has a list of all clues, where each clue is mapped to a next clue or the treasure. Participants need to pass through a series of clues to arrive at the final treasure. However, some clues can be circular and never lead to the treasure. Given a list of clue mappings, your task is to determine the minimum number of steps required to find the treasure starting from a given initial clue. If the treasure is not reachable, return -1. You will be given multiple datasets, each dataset representing a different treasure hunt scenario. Input The input contains multiple datasets. Each dataset starts with an integer `n` (1 ≤ n ≤ 10,000), the number of clues. Each of the next `n` lines contains two integers `a` and `b` (1 ≤ a, b ≤ 10,000), representing that clue `a` leads to clue `b`, or clue `a` directs to the treasure if `b` is 0. The next line contains the starting clue `s`. The input ends with a line containing one 0. Output For each dataset, output the minimum number of steps to reach the treasure starting from clue `s`. If the treasure is not reachable, output -1. Example Input 5 1 2 2 3 3 4 4 0 5 1 1 3 1 3 3 4 4 3 1 0 Output 4 -1","solution":"def treasure_hunt(clues, start): from collections import deque graph = {} for a, b in clues: if a not in graph: graph[a] = [] graph[a].append(b) visited = set() queue = deque([(start, 0)]) while queue: current, steps = queue.popleft() if current in visited: continue visited.add(current) for next_clue in graph.get(current, []): if next_clue == 0: return steps + 1 queue.append((next_clue, steps + 1)) return -1 def process_input(data): results = [] index = 0 while index < len(data): n = int(data[index]) if n == 0: break index += 1 clues = [] for _ in range(n): a, b = map(int, data[index].split()) clues.append((a, b)) index += 1 start = int(data[index]) index += 1 result = treasure_hunt(clues, start) results.append(result) return results"},{"question":"In an imaginary city, traffic lights at every intersection follow a strange pattern. They have their own cycle lengths and durations, which are not necessarily the same. You are tasked with finding out the minimum amount of time required for all the lights at a given set of intersections to be green simultaneously for the first time after time t=0. Each traffic light changes from red to green after its specific cycle length L_i. For example, a traffic light i with a cycle length of L_i=7 toggles between red and green every 7 seconds. Given the cycle lengths of the traffic lights at various intersections, write a program to determine the earliest time after t=0 when all the given traffic lights will be green simultaneously, considering each light starts at red at t=0. Input Format The first line contains an integer, mathbf{T}, denoting the number of test cases. Each of the 2T subsequent lines defines a test case. Each test case is described over the following two lines: An integer, n, denoting the number of traffic lights. n space-separated integers, L_1, L_2, ldots, L_n representing the cycle lengths of the traffic lights. Constraints 1 leq T leq 10^3 1 leq n leq 50 1 leq L_i leq 10^5 Output Format For each test case, print the minimum time ( t > 0 ) at which all the traffic lights are green simultaneously. Sample Input 2 3 3 4 5 2 6 8 Sample Output 60 24 Explanation Explanation for the 1st testcase: The traffic lights with cycle lengths of 3, 4, and 5 will all be green simultaneously for the first time at t=60 seconds, which is the least common multiple (LCM) of 3, 4, and 5. Explanation for the 2nd testcase: The traffic lights with cycle lengths of 6 and 8 will all be green simultaneously for the first time at t=24 seconds, which is the least common multiple (LCM) of 6 and 8.","solution":"import math def lcm(a, b): Returns the least common multiple of a and b. return abs(a * b) // math.gcd(a, b) def find_minimum_green_time(cycle_lengths): Given a list of cycle lengths, find the minimum time after t=0 when all traffic lights will be green simultaneously. current_lcm = cycle_lengths[0] for length in cycle_lengths[1:]: current_lcm = lcm(current_lcm, length) return current_lcm def process_traffic_lights(test_cases): results = [] for cycles in test_cases: results.append(find_minimum_green_time(cycles)) return results"},{"question":"In a beautiful garden, there are exactly `n` evenly spaced flower beds arranged in a circular formation. Each flower bed has the capacity to grow `m` different types of flowers. Initially, the garden has a unique type of flower planted in each flower bed. As a result of a magical spell cast during the spring festival, each flower arrangement can switch places with its neighboring flower bed either to its left or right. Your task is to determine the number of distinct garden configurations possible after all possible switches. Note that two configurations are considered the same if the sequence of flower beds can be rotated to match another sequence. Input The first line of the input contains an integer `t`, the number of test cases. Each of the next `t` lines contains an integer `n`, the number of flower beds in the circular garden. Output For each test case, print the number of distinct garden configurations possible. Examples Input 3 3 4 5 Output 1 2 6 Explanation: For `n = 3` (3 flower beds), there is only 1 distinct configuration as rotating any configuration results in the equivalent configuration. For `n = 4` (4 flower beds), there are 2 distinct configurations: each bed can swap flowers with its neighbors. For `n = 5` (5 flower beds), there are 6 distinct configurations as the flower beds can be swapped creating multiple unique configurations that are not checkable through rotations.","solution":"def count_distinct_configurations(n): Returns the number of distinct garden configurations possible for a circular garden with n flower beds. if n == 1: return 1 elif n == 2: return 1 elif n == 3: return 1 elif n % 2 == 0: return n // 2 else: return n def process_test_cases(test_cases): return [count_distinct_configurations(n) for n in test_cases] # Example usage: if __name__ == \\"__main__\\": t = int(input()) test_cases = [int(input()) for _ in range(t)] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a binary tree representing the structure of an organization\'s hierarchy. Each node in the tree contains an integer value representing an employee\'s performance score. Write a function to find the maximum performance score in each level of the tree and return these maximum scores as a list. The root of the binary tree represents the highest level (level 0), and the levels increase as one moves down the tree. Example 1: Input: ``` 1 / 3 2 / 5 3 9 ``` Output: [1, 3, 9] Explanation: - Level 0: The only score is 1. - Level 1: The scores are 3 and 2, the maximum score is 3. - Level 2: The scores are 5, 3, and 9, the maximum score is 9. Example 2: Input: ``` 4 / 5 6 / / 7 1 3 2 ``` Output: [4, 6, 7, 2] Explanation: - Level 0: The only score is 4. - Level 1: The scores are 5 and 6, the maximum score is 6. - Level 2: The scores are 7, 1, and 3, the maximum score is 7. - Level 3: The only score is 2. Your task: You do not need to read input or print anything. Complete the function `maxPerformancePerLevel(root)` that takes the root of the binary tree and returns a list containing the maximum performance scores of each level. Expected Time Complexity: O(N), where N is the number of nodes in the tree. Expected Space Complexity: O(D), where D is the maximum depth of the tree. Constraints: - The number of nodes in the tree is in the range [1, 10^5]. - The value of each node is in the range [1, 10^5].","solution":"from collections import deque # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPerformancePerLevel(root): if not root: return [] result = [] queue = deque([root]) while queue: level_length = len(queue) level_max = float(\'-inf\') for _ in range(level_length): node = queue.popleft() level_max = max(level_max, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_max) return result"},{"question":"A city skyline is represented by a set of n buildings, each described by three integers: left coordinate l, right coordinate r, and height h. All buildings\' bases are aligned along the X-axis, and they have exactly vertical and horizontal edges. You need to compute the skyline formed by these buildings. The skyline is the outer contour of these buildings as viewed from a distance. A skyline is represented as a list of \\"key points\\" in the format [x, y] such that there are no horizontal lines in the output, and each point denotes a position in the skyline where the height changes. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4) - the number of buildings. Each of the following n lines contains three integers l, r, and h (-10^4 ≤ l < r ≤ 10^4, 0 < h ≤ 10^4) representing the left and right coordinates and height of a building. -----Output----- Output a list of key points defining the skyline. Each key point is in the format [x, y]. The list should be in ascending order based on the x-coordinate. If two or more buildings meet at the same x-coordinate, consider the highest building. -----Examples----- Input 2 1 3 4 2 4 3 Output [1, 4], [3, 3], [4, 0] Input 3 0 2 3 2 5 3 6 8 2 Output [0, 3], [5, 0], [6, 2], [8, 0]","solution":"import heapq def get_skyline(buildings): Given a list of buildings, compute the skyline formed by these buildings. Each building is represented as a tuple (left, right, height). events = [] for l, r, h in buildings: events.append((l, -h, r)) events.append((r, 0, 0)) # Sort events by x coordinate events.sort() result = [] live_buildings = [(0, float(\\"inf\\"))] # Height, end point for x, neg_h, r in events: while live_buildings[0][1] <= x: heapq.heappop(live_buildings) if neg_h: heapq.heappush(live_buildings, (neg_h, r)) max_h = -live_buildings[0][0] if not result or result[-1][1] != max_h: result.append([x, max_h]) return result"},{"question":"A company follows a specific policy for paying overtime to its employees. If an employee works more than 8 hours a day, they are paid X dollars for each hour beyond 8 hours, up to a maximum of 12 hours (i.e., the maximum overtime pay is for 4 hours). After 12 hours, they are paid Y dollars for each additional hour. Given the number of hours worked by N employees in a day, calculate the total overtime pay for all employees. ----- Input Format ------ - The first line contains an integer N, denoting the number of employees. - The second line contains two space-separated integers X and Y, the rates of overtime pay. - The third line contains N space-separated integers, where each integer represents the number of hours worked by an employee. ----- Output Format ------ - Print a single integer denoting the total amount of overtime pay for all employees. ----- Constraints ------ 1 ≤ N ≤ 10^3 1 ≤ X, Y ≤ 10^3 1 ≤ hours worked by each employee ≤ 24 ----- Sample Input 1 ------ 5 10 15 9 8 10 13 12 ----- Sample Output 1 ------ 95 ----- Explanation 1 ------ Employee 1: Worked for 9 hours (1 hour of overtime) => 1 * 10 = 10 dollars Employee 2: Worked for 8 hours (0 hours of overtime) => 0 dollars Employee 3: Worked for 10 hours (2 hours of overtime) => 2 * 10 = 20 dollars Employee 4: Worked for 13 hours (4 hours of overtime at 10 dollars and 1 hour at 15 dollars) => 4 * 10 + 1 * 15 = 40 + 15 = 55 dollars Employee 5: Worked for 12 hours (4 hours of overtime at 10 dollars) => 4 * 10 = 40 dollars Total overtime pay = 10 + 0 + 20 + 55 + 40 = 125 dollars","solution":"def calculate_total_overtime_pay(N, X, Y, hours_worked): Calculates the total overtime pay for N employees given their hours worked and rates X and Y. total_overtime_pay = 0 for hours in hours_worked: if hours > 12: total_overtime_pay += 4 * X + (hours - 12) * Y elif hours > 8: total_overtime_pay += (hours - 8) * X return total_overtime_pay"},{"question":"Polycarp is practicing programming and wants to improve his problem-solving skills. He decided to solve a problem involving arrays and dynamic segments. Given an array of n integers and q queries, Polycarp wants to calculate the maximum sum of any subarray in the array after performing updates on it. For each query, Polycarp can do one of the following: 1. Update the value of an element in the array. 2. Find the maximum sum of any subarray in the current array. -----Input----- The first line contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries respectively. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the initial elements of the array. The next q lines contain a description of the queries: - If the query is of type 1, it will be in the format \\"1 p x\\" (1 le p le n, -10^9 le x le 10^9), which means to update the p-th element of the array to x. - If the query is of type 2, it will be in the format \\"2\\", which means to find the maximum sum of any subarray in the current array. -----Output----- For each query of type 2, print a single integer — the maximum sum of any subarray in the current array. -----Example----- Input 5 4 1 2 3 -2 5 2 1 2 -10 2 1 3 4 2 Output 9 0 9 -----Note----- Consider the provided example: 1. Initial array is [1, 2, 3, -2, 5]. The maximum sum of any subarray is 9 (subarray [1, 2, 3, -2, 5]). 2. Update the 2nd element to -10, array becomes [1, -10, 3, -2, 5]. The maximum sum of any subarray is now 6 (subarray [3, -2, 5]). 3. Update the 3rd element to 4, array becomes [1, -10, 4, -2, 5]. The maximum sum of any subarray is now 9 (subarray [4, -2, 5]).","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): index += self.n self.tree[index] = value while index > 1: index //= 2 self.tree[index] = max(self.tree[index * 2], self.tree[index * 2 + 1]) def query(self, left, right): result = float(\\"-inf\\") left += self.n right += self.n while left < right: if left % 2: result = max(result, self.tree[left]) left += 1 if right % 2: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_queries(n, q, arr, queries): results = [] for query in queries: type_query = query[0] if type_query == 1: p, x = query[1], query[2] arr[p - 1] = x elif type_query == 2: results.append(max_subarray_sum(arr)) return results"},{"question":"Write a function to merge two sorted linked lists into one sorted linked list. Input: - The first line contains an integer n1, the number of elements in the first linked list. - The second line contains n1 space-separated integers, the elements of the first linked list. - The third line contains an integer n2, the number of elements in the second linked list. - The fourth line contains n2 space-separated integers, the elements of the second linked list. Output: - Print the merged sorted linked list as a space-separated list of integers. Constraints: 1 <= n1, n2 <= 10^5 -10^9 <= element in linked list <= 10^9 Example Input: 5 1 3 5 7 9 4 2 4 6 8 Example Output: 1 2 3 4 5 6 7 8 9","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1: ListNode, l2: ListNode) -> ListNode: dummy = current = ListNode() while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next current.next = l1 or l2 return dummy.next def linked_list_from_list(lst): dummy = current = ListNode() for val in lst: current.next = ListNode(val) current = current.next return dummy.next def list_from_linked_list(node): lst = [] while node: lst.append(node.val) node = node.next return lst def merge_sorted_linked_lists(arr1, arr2): l1 = linked_list_from_list(arr1) l2 = linked_list_from_list(arr2) merged = merge_two_sorted_lists(l1, l2) return list_from_linked_list(merged)"},{"question":"In a coding competition, you are tasked with developing a program to manage and simulate a simple traffic system for a small city. The city map is represented as an N x N grid where each cell can either be a road or a building. The traffic rules are simple: cars can only move on road cells, and they can move in four possible directions - left, right, up, and down. However, if they reach the edge of the grid, they stop moving. Given the map of the city and the initial positions of several cars, determine the number of steps it would take for the first car to reach a specified destination, or return -1 if no car can reach the destination. Input The first line contains an integer T, the number of test cases. The first line of each test case contains an integer N, the size of the grid (1 ≤ N ≤ 1000). Each of the next N lines contains a string of length N representing a row of the grid. A road cell is represented by \'.\' and a building cell is represented by \'#\'. The next line contains two integers: the starting row and column of the car (0 ≤ row, column < N). The last line contains two integers: the destination row and column (0 ≤ row, column < N). Output For each test case, output the minimum number of steps required for any car to reach the destination, or -1 if it is not possible. Example Input: 2 4 .... .#.. ..#. .... 0 0 3 3 3 .#. .#. .#. 0 0 2 2 Output: 6 -1 Explanation: Case 1: The car can move from (0, 0) to (3, 3) in 6 steps. Case 2: The destination (2, 2) is enclosed by building cells and thus unreachable.","solution":"from collections import deque def min_steps_to_destination(grid, start, destination): n = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' visited = set() queue = deque([(start[0], start[1], 0)]) # (row, col, steps) while queue: x, y, steps = queue.popleft() if (x, y) == destination: return steps if (x, y) in visited: continue visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) return -1 def process_input(test_cases): results = [] for case in test_cases: n, grid, start, destination = case result = min_steps_to_destination(grid, start, destination) results.append(result) return results"},{"question":"You are given an integer array `nums` consisting of `n` integers. Your task is to find and return the maximum possible bitwise XOR of any two elements in the provided array. The bitwise XOR of two integers is the bitwise operation that performs the XOR operation on each corresponding pair of bits. The result is another integer. For example, if `nums` is {3, 10, 5, 25, 2, 8}, the maximum XOR pair is (5, 25), and their XOR is 28. Thus, the output should be 28. Input The first line contains an integer `n` (2 ≤ n ≤ 1000), representing the number of elements in the array `nums`. The second line contains `n` integers separated by spaces describing the array `nums` (-10^9 ≤ nums[i] ≤ 10^9). Output Print a single integer - the maximum possible bitwise XOR of any two elements in the array. Examples Input 6 3 10 5 25 2 8 Output 28 Input 5 0 1 2 3 4 Output 7","solution":"def findMaximumXOR(nums): Finds the maximum bitwise XOR of any two elements in the provided array. max_xor = 0 mask = 0 for i in range(31, -1, -1): mask |= (1 << i) found_prefixes = set() for num in nums: found_prefixes.add(num & mask) temp = max_xor | (1 << i) for prefix in found_prefixes: if temp ^ prefix in found_prefixes: max_xor = temp break return max_xor # Example usage: # nums = [3, 10, 5, 25, 2, 8] # result = findMaximumXOR(nums) # print(result) # Should output 28"},{"question":"You are given an array of integers and a set of queries. Each query is one of two types: 1) Add a value to every element in a subarray specified by a range of indices. This is represented by the command: 0 A B X Where \'A\' and \'B\' are the starting and ending indices of the subarray (inclusive), and \'X\' is the value to be added to each element in that subarray. 2) Compute the sum of a subarray specified by a range of indices. This is represented by the command: 1 A B Where \'A\' and \'B\' are the starting and ending indices of the subarray (inclusive). Input: The first line contains two integers, N and Q, where N is the number of elements in the array, and Q is the number of queries. The second line contains N integers, which are the initial values of the array. Each of the next Q lines describes a query of the form (0) or (1) as mentioned above. Output: For each query of the second type (1), output a single integer representing the sum of the elements in the specified subarray. Example Input: 5 3 1 2 3 4 5 0 1 3 2 1 0 4 1 1 2 Example Output: 18 9 Explanation: After the first query, the array becomes [1, 4, 5, 6, 5], as 2 has been added to each element from index 1 to 3. The first output is the sum of the array from index 0 to 4, which is 1 + 4 + 5 + 6 + 5 = 21. The second output is the sum of the array from index 1 to 2, which is 4 + 5 = 9.","solution":"def process_queries(n, arr, queries): Processes the given set of queries on the array. :param n: int - number of elements in the array :param arr: list - initial array values :param queries: list - list of queries to process :return: list - results of the sum queries results = [] for query in queries: if query[0] == 0: # Add operation _, a, b, x = query for i in range(a, b + 1): arr[i] += x elif query[0] == 1: # Sum operation _, a, b = query sum_subarray = sum(arr[a:b + 1]) results.append(sum_subarray) return results"},{"question":"A company has decided to award employees based on their performance for a given month evaluated in terms of points. To organize this, the company maintains a list of employee points and wants to determine the conditions under which an employee could be in the top K percent of all employees. Your task is to write a function that takes an array of integers representing the points of the employees, the number K, and calculates the minimum number of points an employee needs to have to be in the top K percent of the list. Input The first line of input contains two integers n and K (1 ≤ n ≤ 100000) and (1 ≤ K ≤ 100), where n is the number of employees and K is the percentage threshold. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10000000), representing the points of the employees. Output Output a single integer which is the minimum number of points required to be in the top K percent of all employees. SAMPLE INPUT 6 50 100 200 150 80 120 70 SAMPLE OUTPUT 120 Explanation With 6 employees and needing to be in the top 50%, top 50% of 6 is 3 employees. To be in the top 3 employees, the minimum number of points required is the third highest points which is 120. Note: In the case of ties at the threshold, include all such employees with those points in the top K percent and return the minimum points among these employees.","solution":"def min_points_for_top_k_percent(n, K, points): Returns the minimum number of points required to be in the top K percent of employees. # Determine the number of employees to be considered in the top K percent top_k_count = (n * K + 99) // 100 # Using CEIL method to determine number of top K employees # Sort the points in descending order sorted_points = sorted(points, reverse=True) # The minimum points required will be the points of the (top_k_count - 1)th employee in 0-indexed return sorted_points[top_k_count - 1]"},{"question":"Arkady has a garden containing n flowers. Each flower can be in one of m different colors. The garden looks beautiful when there are at least k consecutive flowers of the same color. However, due to harsh weather conditions, some flowers have lost their colors. You need to help Arkady determine if it\'s possible to repaint the faded flowers such that the garden becomes beautiful again. You are given a string of length n where each character represents the color of the corresponding flower. If a flower is faded, it is represented by a question mark `?`. You can replace each `?` with any of the m colors. Determine if it\'s possible to replace the question marks in such a way that the garden contains at least k consecutive flowers of the same color. -----Input----- The first line contains two integers n and m (1 le n le 10^5, 2 le m le 26) — the number of flowers and the number of different colors, respectively. The second line contains an integer k (2 le k le n) — the minimum number of consecutive flowers required to be of the same color for the garden to be considered beautiful. The third line contains a string of length n consisting of lowercase letters and question marks representing the colors of the flowers. -----Output----- Print `YES` if it\'s possible to repaint the faded flowers to make the garden beautiful, otherwise print `NO`. -----Examples----- Input 5 3 3 a?a?? Output YES Input 4 2 4 ab?? Output NO -----Note----- In the first example you can replace the question marks as follows: a -> a, a -> a, resulting in the string \\"aaaaa\\", which has a segment that is beautiful. In the second example, there is no way to make a segment of 4 consecutive flowers, all of the same color. \\"aaaa\\" cannot be formed since only 2 different colors are allowed. Hence the output is NO.","solution":"def can_make_garden_beautiful(n, m, k, flowers): Determines if it\'s possible to repaint the faded flowers such that the garden contains at least k consecutive flowers of the same color. Args: n (int): number of flowers. m (int): number of different colors. k (int): minimum number of consecutive flowers required to be of the same color. flowers (str): string representing the current state of the flowers. Returns: bool: True if it is possible, False otherwise. def check_color_streak(flowers, color, start, end, k): count = 0 max_streak = 0 for i in range(start, end): if flowers[i] == color or flowers[i] == \'?\': count += 1 if count >= k: return True else: count = 0 return False for color in range(m): # Convert the color to its corresponding character char_color = chr(ord(\'a\') + color) for start in range(n - k + 1): end = start + k if check_color_streak(flowers, char_color, start, end, k): return True return False # Helper function to return YES/NO def solve_garden_problem(n, m, k, flowers): return \\"YES\\" if can_make_garden_beautiful(n, m, k, flowers) else \\"NO\\""},{"question":"Bytedreams Robotics has been developing a new industrial robot that can navigate a matrix grid to perform tasks. The robot can move to any of its four adjacent cells (up, down, left, right) with some restrictions based on the cell values. The grid is represented as an `n x m` matrix, where each cell contains an integer value. The robot can move into a cell if and only if the value in the cell is greater than or equal to the value of its current cell. The goal is to determine if the robot can move from the top-left corner of the grid to the bottom-right corner, satisfying the above condition. If a path exists, output the minimum number of moves needed; otherwise, output -1. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of the following: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the dimensions of the matrix. - The next `n` lines each contain `m` integers, representing the grid values (0 ≤ grid[i][j] ≤ 10^6). Output For each test case, print the minimum number of moves needed to reach the bottom-right corner, or -1 if no such path exists. Example Input 3 3 3 1 2 3 4 5 6 7 8 9 3 3 9 8 7 6 5 4 3 2 1 2 2 2 3 4 5 Output 4 -1 2 Explanation In the first test case, the robot can move as follows: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), resulting in 4 moves. In the second test case, there is no valid path from the top-left to the bottom-right corner. In the third test case, the robot can move as follows: (1,1) -> (1,2) -> (2,2), resulting in 2 moves.","solution":"from collections import deque def min_moves_to_reach_end(grid): n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited[0][0] = True while queue: r, c, moves = queue.popleft() # If we reached the bottom-right corner if r == n-1 and c == m-1: return moves for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] >= grid[r][c]: visited[nr][nc] = True queue.append((nr, nc, moves + 1)) return -1 def solve(t, test_cases): results = [] for i in range(t): n, m, grid = test_cases[i] result = min_moves_to_reach_end(grid) results.append(result) return results"},{"question":"Given an `m x n` matrix of integers, write a function that returns the sum of all the elements in a sub-matrix specified by the top-left corner `(row1, col1)` and the bottom-right corner `(row2, col2)` (inclusive). # Input - An integer `m` indicating the number of rows in the matrix. - An integer `n` indicating the number of columns in the matrix. - A list of `m` lists, each containing `n` integers representing the matrix. - Four integers `row1`, `col1`, `row2`, `col2` specifying the corners of the sub-matrix. # Output - An integer representing the sum of all the elements in the specified sub-matrix. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 1 1 2 2 ``` Output ``` 28 ``` # Explanation In the example provided, the matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` The sub-matrix with the top-left corner `(1, 1)` and the bottom-right corner `(2, 2)` is: ``` 5 6 8 9 ``` The sum of the elements in this sub-matrix is `5 + 6 + 8 + 9 = 28`.","solution":"def submatrix_sum(matrix, row1, col1, row2, col2): Returns the sum of all the elements in the specified sub-matrix. total_sum = 0 for i in range(row1, row2 + 1): for j in range(col1, col2 + 1): total_sum += matrix[i][j] return total_sum"},{"question":"In a town called Gridville, there is a grid of size n x n where each cell either contains an obstacle or is empty. Gridville\'s mayor wants to connect the top-left corner of the grid to the bottom-right corner by constructing a clear path through non-obstacle cells only. A clear path is a path that moves horizontally or vertically from one empty cell to an adjacent empty cell. The grid is represented by an n x n matrix of integers, where a 0 represents an empty cell and a 1 represents an obstacle. Construct an algorithm to find the minimum number of moves required to connect the top-left corner to the bottom-right corner. If such a connection is not possible, return -1. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. The next n lines each contain n integers (0 or 1) — describing the grid. -----Output----- Print a single integer — the minimum number of moves required to connect the top-left corner to the bottom-right corner, or -1 if no such connection is possible. -----Examples----- Input 3 0 1 0 0 0 1 1 0 0 Output 4 Input 3 0 1 1 1 1 1 1 0 0 Output -1 -----Note----- In the first example, one of the possible paths is: Start at (0,0) Move to (1,0) Move to (1,1) Move to (2,1) Move to (2,2) Hence, the minimal number of moves required is 4. In the second example, it is impossible to connect the top-left corner to the bottom-right corner due to the continuous obstacle walls; thus, the output is -1.","solution":"from collections import deque def min_moves_to_connect(grid): Find the minimum number of moves required to connect the top-left corner to the bottom-right corner in an n x n grid, or return -1 if not possible. :param grid: List[List[int]], the n x n grid with 0s (empty) and 1s (obstacles) :return: int, the minimum number of moves or -1 if no valid path exists n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, moves = queue.popleft() if x == n - 1 and y == n - 1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, moves + 1)) visited.add((nx, ny)) return -1"},{"question":"Firefly Lightings Story In the enchanting forest of Lumina, fireflies light up the night sky with their synchronized flashes. The synchronization creates breathtaking patterns, observed and studied by scientists. One night, a curious observer noticed that some fireflies weren\'t following the same pattern as the others. The observer, a young researcher named Lexa, decided to investigate. Lexa recorded the timestamps of the fireflies\' flashes, trying to determine if a particular group of fireflies followed the same flashing sequence. Lexa needs to identify whether the sequence followed by these fireflies is part of an already known flashing pattern. Problem Given a known flashing pattern and a sequence of timestamps recorded by Lexa, determine if Lexa\'s sequence is a subsequence of the known pattern. In other words, check if Lexa\'s sequence can appear in the same order within the known pattern, without considering the gaps between the elements. Input Format The input is given in the following format: N p_1 p_2 ... p_N M s_1 s_2 ... s_M The first line contains the length N of the known flashing pattern. The second line contains N integers p_1, p_2, ..., p_N representing the known flashing pattern. The third line contains the length M of the recorded sequence by Lexa. The fourth line contains M integers s_1, s_2, ..., s_M representing the observed flashing sequence. The input satisfies the following constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 100 For i = 1, ..., N, p_i is an integer that satisfies 1 ≤ p_i ≤ 100. For i = 1, ..., M, s_i is an integer that satisfies 1 ≤ s_i ≤ 100. Output Format Output \\"Yes\\" if the recorded sequence is a subsequence of the known flashing pattern, and output \\"No\\" otherwise. Add a new line at the end of the output. Input Example 1 6 1 2 3 4 5 6 3 2 4 6 Output Example 1 Yes Input Example 2 5 10 20 30 40 50 4 10 30 60 40 Output Example 2 No Input Example 3 7 5 1 2 3 5 10 5 2 5 10 Output Example 3 Yes Explanation In the first example, sequence \\"2 4 6\\" is a subsequence of \\"1 2 3 4 5 6\\". In the second example, sequence \\"10 30 60 40\\" is not a subsequence of \\"10 20 30 40 50\\" since 60 is not in the known pattern. In the third example, sequence \\"5 10\\" is a subsequence of \\"5 1 2 3 5 10 5\\".","solution":"def is_subsequence(known_pattern, recorded_sequence): Determines if recorded_sequence is a subsequence of known_pattern. Parameters: known_pattern (list of int): The known flashing pattern. recorded_sequence (list of int): The recorded sequence by Lexa. Returns: str: \\"Yes\\" if recorded_sequence is a subsequence of known_pattern, \\"No\\" otherwise. iter_known_pattern = iter(known_pattern) return \\"Yes\\" if all(item in iter_known_pattern for item in recorded_sequence) else \\"No\\""},{"question":"Given a list of tasks, each with a specific start and end time, determine the minimum number of workers needed so that no two tasks overlap at any given time. Each worker can only handle one task at a time. You are given a list of tasks, where each task is represented by a pair of integers [start, end] indicating the start time and end time of the task. Your goal is to find the minimum number of workers required to complete all tasks without any time conflicts. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 100) representing the number of tasks, followed by n lines each containing two integers start and end (0 ≤ start < end ≤ 1000) representing the start and end times of each task. -----Output----- Print a single integer representing the minimum number of workers required. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 1 Input 5 1 4 3 5 0 6 5 7 8 9 Output 3","solution":"def min_workers(tasks): Determines the minimum number of workers needed so that no two tasks overlap at any given time Args: tasks (List[List[int]]): List of tasks, where each task is a list of two integers [start, end] Returns: int: Minimum number of workers required events = [] for start, end in tasks: events.append((start, \\"start\\")) events.append((end, \\"end\\")) events.sort() max_workers = 0 current_workers = 0 for time, event in events: if event == \\"start\\": current_workers += 1 max_workers = max(max_workers, current_workers) else: current_workers -= 1 return max_workers"},{"question":"Given an array of integers, we want to perform a series of operations to transform it. Each operation allows us to move the first element to the end of the array. Our goal is to make the array sorted in non-decreasing order using the minimum number of operations. Your task is to write a function that returns the minimum number of operations needed to achieve this or -1 if it\'s not possible. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Print the minimum number of operations needed to sort the array in non-decreasing order. If it\'s impossible, print -1. Examples Input 5 3 4 5 1 2 Output 3 Input 3 1 2 3 Output 0 Input 4 4 3 2 1 Output -1 Note In the first example, we can rotate the array three times: [3, 4, 5, 1, 2] -> [4, 5, 1, 2, 3] -> [5, 1, 2, 3, 4] -> [1, 2, 3, 4, 5]. In the second example, the array is already sorted, so no operations are needed. In the third example, we cannot sort the array in non-decreasing order using the operations allowed.","solution":"def min_operations_to_sort(n, arr): def is_sorted(arr): # Helper function to check if the array is sorted in non-decreasing order for i in range(1, len(arr)): if arr[i-1] > arr[i]: return False return True if is_sorted(arr): return 0 # Find the breakpoint where the sorted order is violated break_point = -1 for i in range(1, n): if arr[i-1] > arr[i]: break_point = i break if break_point == -1: return 0 # Check if rotating the array at the break_point can result in a sorted array rotated = arr[break_point:] + arr[:break_point] if is_sorted(rotated): return break_point else: return -1"},{"question":"Given a string S, you are required to find the length of the longest substring consisting of unique characters. Input The input consists of a single line containing the string S. Output Output a single integer representing the length of the longest substring with all unique characters. Constraints 1. 1 ≤ |S| ≤ 100 2. The string S consists only of printable ASCII characters. SAMPLE INPUT abcabcbb SAMPLE OUTPUT 3","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all unique characters. n = len(s) char_index_map = {} max_length = start = 0 for i in range(n): if s[i] in char_index_map and char_index_map[s[i]] >= start: start = char_index_map[s[i]] + 1 char_index_map[s[i]] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Alice loves strings and palindromes. She spends a lot of her free time studying properties of palindromes in strings. Her teacher has given her an interesting problem to solve. Given a string, Alice has to find the length of the longest palindromic substring. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a string s. Output Format Output the length of the longest palindromic substring for each test case on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ |s| ≤ 10^3 s consists of lowercase English letters only. Examples: Input 2 babad cbbd Output 3 2 In the first test case \\"bab\\" and \\"aba\\" are both longest palindromic substrings of length 3. In the second test case \\"bb\\" is the longest palindromic substring with length 2.","solution":"def longest_palindromic_substring_length(s): Function to find the length of the longest palindromic substring in the given string s n = len(s) if n == 0: return 0 dp = [[False] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length def find_longest_palindromic_substrings(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"Write a function `interleave_lists()` that interleaves elements from two lists and returns a new list with elements from both lists taken in alternation. If one list is longer than the other, append the remaining elements of the longer list at the end. Example: ```python interleave_lists([1, 2, 3], [\'a\', \'b\', \'c\']) == [1, \'a\', 2, \'b\', 3, \'c\'] interleave_lists([1, 2], [\'a\', \'b\', \'c\', \'d\']) == [1, \'a\', 2, \'b\', \'c\', \'d\'] interleave_lists([1, 2, 3, 4], [\'a\']) == [1, \'a\', 2, 3, 4] ``` Note: You can assume the inputs will always be two lists. The function should not modify the original lists.","solution":"def interleave_lists(list1, list2): Interleaves elements from two lists and returns a new list with elements from both lists taken in alternation. If one list is longer than the other, appends the remaining elements of the longer list at the end. result = [] len1, len2 = len(list1), len(list2) min_len = min(len1, len2) for i in range(min_len): result.append(list1[i]) result.append(list2[i]) if len1 > len2: result.extend(list1[min_len:]) else: result.extend(list2[min_len:]) return result"},{"question":"Delivery Robots in a Warehouse In a technologically advanced warehouse, there are N delivery robots. Each robot operates independently and may or may not successfully deliver the packages assigned to it due to unpredictable factors. To boost the success rate, some robots can assist other robots during delivery if they are idle. Each robot has a success probability of delivering its packages without any help. Additionally, a robot that finishes its job can help up to a certain number of other robots within its proximity, potentially improving their success rates. Your task is to evaluate the overall probability that all robots will deliver their packages successfully, considering the potential assistance they can offer to each other. Input The input consists of multiple datasets. Each dataset is represented in the following format: > N > p1 k1 a (1,1) ... a(1, k1) > ... > pN kN a (N, 1) ... a(N, kN) N is the number of delivery robots, a positive integer not exceeding 100. pi is the probability that the i-th robot will deliver its packages successfully, and is a real number between 0 and 1 within two decimal places. ki is the number of robots that the i-th robot can assist, an integer greater than or equal to 0 and less than or equal to N. a (i, j) indicates that the jth robot that the ith robot can assist belongs to the a (i, j)th robot. a (i, j) is a positive integer that does not exceed N. The end of the input is indicated by a single zero line. Output For each dataset, output the probability that all robots will deliver their packages successfully on one line. The output must not contain more than 0.00001 error. Sample Input 2 0.80 1 2 0.70 0 3 0.90 2 2 3 0.85 1 3 0.95 0 4 0.60 0 0.75 1 3 0.80 1 4 0.65 1 1 0 Sample Output 0.560000000 0.681875000 0.234000000 Explanation In the first dataset, there are two robots. The first robot has an 80% chance of successful delivery and can assist the second robot if needed. The second robot has a 70% success rate on its own. In the second dataset, three robots are provided. Here, configurations are slightly more complex, with the first robot being able to assist both the second and third robots. In the third dataset, four robots show us a more interconnected assistance system and the output shows the probability of all robots succeeding in their deliveries. Please implement the necessary calculations to determine the overall delivery success probability, taking into account both individual success rates and the potential boost provided by assisting robots.","solution":"def calculate_all_robots_success_probability(data): import numpy as np probabilities = [] i = 0 while i < len(data): N = int(data[i]) if N == 0: break i += 1 success_probs = [] assist_matrix = np.zeros((N, N)) for j in range(N): line = data[i].split() p = float(line[0]) k = int(line[1]) assistees = list(map(int, line[2:2 + k])) success_probs.append(p) for a in assistees: assist_matrix[j][a - 1] = 1 # use a-1 because input is 1-based index, transform to 0-based i += 1 all_success_prob = 1.0 for sp in success_probs: all_success_prob *= sp probabilities.append(all_success_prob) return probabilities data = [\\"2\\", \\"0.80 1 2\\", \\"0.70 0\\", \\"3\\", \\"0.90 2 2 3\\", \\"0.85 1 3\\", \\"0.95 0\\", \\"4\\", \\"0.60 0\\", \\"0.75 1 3\\", \\"0.80 1 4\\", \\"0.65 1 1\\", \\"0\\"] print(calculate_all_robots_success_probability(data))"},{"question":"In the fantasy world of Mixonia, there are various magical items, and each item belongs to a particular category. Each category can have multiple items, and each item has an associated power level. A wise mage would like to create a set of powerful items across different categories. However, there is a rule that the mage can only include one item from each category in the set. Given a list of items, where each item is represented by its category and power level, determine the maximum sum of power levels the mage can achieve by selecting exactly one item from each distinct category. -----Input----- The first line of input contains an integer n (1 leq n leq 2000), representing the number of items. Each of the following n lines describes an item with two parameters: a string c_i (1 ≤ |c_i| leq 20), the category of the item, and an integer p_i (1 leq p_i leq 10^9), the power level of the item. -----Output----- Output a single integer, the maximum sum of power levels that the mage can achieve by selecting exactly one item from each distinct category. -----Examples----- Sample Input: 5 weapon 50 armor 200 weapon 70 potion 30 potion 60 Sample Output: 330 Sample Input: 3 book 10 scroll 20 book 40 Sample Output: 60","solution":"def max_sum_power_levels(n, items): Returns the maximum sum of power levels by selecting one item from each category. from collections import defaultdict # Dictionary to store the highest power level for each category category_max_power = defaultdict(int) # Iterate through the given items for category, power_level in items: # Update the dictionary with the highest power level for each category category_max_power[category] = max(category_max_power[category], power_level) # Sum the highest power levels from each category max_sum = sum(category_max_power.values()) return max_sum"},{"question":"Given an array of integers and an integer k, your task is to determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] equals k. Return True if such indices exist, otherwise return False. Example 1: Input: nums = [1, 2, 3, 4] k = 5 Output: True Explanation: 1+4 or 2+3 = 5. Example 2: Input: nums = [1, 2, 3, 4] k = 8 Output: False Explanation: There are no two pairs that add up to 8. Constraints: 1 <= nums.length <= 10^5 -10^5 <= nums[i] <= 10^5 Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkSum() that takes nums and k as input parameters and returns a boolean indicating whether there are two distinct indices such that the numbers at those indices add up to k. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n)","solution":"def checkSum(nums, k): Check if there are two distinct indices i and j in the array such that nums[i] + nums[j] equals k. seen = set() for num in nums: complement = k - num if complement in seen: return True seen.add(num) return False"},{"question":"You are given a binary string s of length n. The binary string consists of \'0\'s and \'1\'s. You want to rearrange the characters of the string such that the resulting string minimizes the number of adjacent pairs of \'1\'s. Write a function which takes in the binary string s, reorders its characters, and returns the lexicographically smallest string among all possible valid arrangements that have the minimum number of adjacent pairs of \'1\'s. -----Input----- The only line of the input contains a binary string s (1 le n le 2 cdot 10^5). -----Output----- Print the lexicographically smallest binary string with the minimum number of adjacent pairs of \'1\'s. -----Examples----- Input 101110 Output 001111 Input 000 Output 000 Input 1110 Output 0111","solution":"def minimize_adjacent_ones(s): Function to rearrange the characters of the string such that the resulting string minimizes the number of adjacent pairs of \'1\'s and is the lexicographically smallest string among all valid arrangements. Parameters: s (str): input binary string Returns: str: lexicographically smallest binary string with minimum adjacent \'1\'s zeros = s.count(\'0\') ones = s.count(\'1\') return \'0\' * zeros + \'1\' * ones"},{"question":"Given two arrays of integers `nums1` and `nums2`, return a list of their intersection. Each element in the result must be unique and you may return the result in any order. Example 1: Input: nums1 = [4, 9, 5] nums2 = [9, 4, 9, 8, 4] Output: [9, 4] Example 2: Input: nums1 = [1, 2, 2, 1] nums2 = [2, 2] Output: [2] Your Task: Write a function `intersection` that takes two arrays nums1 and nums2 as input and returns their intersection as described above. Constraints: - 1 <= nums1.length, nums2.length <= 1000 - 0 <= nums1[i], nums2[i] <= 1000","solution":"def intersection(nums1, nums2): Returns the intersection of two lists as a list of unique elements. set1, set2 = set(nums1), set(nums2) return list(set1 & set2)"},{"question":"Write a function that takes a string of words and returns the length of the shortest word. Examples ```python find_shortest(\\"Simple example sentence\\") = 6 # The shortest word is \\"Simple\\" find_shortest(\\"An apple a day\\") = 1 # The shortest word is \\"a\\" ``` *Note: Assume the string is non-empty and contains only letters and spaces.*","solution":"def find_shortest(sentence): Returns the length of the shortest word in the sentence. words = sentence.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Develop a function that determines if it is possible to transform one string into another using a series of operations within a given number of steps. The operations allowed are insertion of a character, deletion of a character, and substitution of a character. Given two strings and a maximum number of operations allowed, write an efficient algorithm to decide if transformation is achievable within the specified steps. -----Input----- The first line of input contains an integer k (1 leq k leq 1000), the maximum number of operations allowed. The second line contains the string s (1 ≤ |s| ≤ 100), the initial string. The third line contains the string t (1 ≤ |t| ≤ 100), the target string. -----Output----- Output a single integer that is 1 if the transformation from s to t is possible within k operations, and 0 otherwise. -----Examples----- Sample Input 1: 3 abcdef azced Sample Output 1: 1 Sample Input 2: 2 hello world Sample Output 2: 0","solution":"def can_transform(s, t, k): def edit_distance(s, t): m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) return dp[m][n] return 1 if edit_distance(s, t) <= k else 0"},{"question":"You are given a list of n integers, each representing the height of a hill. Your task is to determine the maximum number of jumps you can make from one hill to another such that each subsequent hill is strictly taller than the previous one. A jump is defined as moving from hill i to hill j only if the height of hill j is greater than the height of hill i (i.e., height[j] > height[i]). Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of hills. The second line contains n integers h[1], h[2], ..., h[n] (1 ≤ h[i] ≤ 10^9) — the heights of the hills. Output Output a single integer — the maximum number of jumps you can make starting from any hill. Examples Input 6 1 3 2 5 4 6 Output 3 Input 5 4 3 2 1 5 Output 1 Note In the first example, one possible sequence of jumps is from hill with height 1 to hill with height 3, then to hill with height 5, and finally to hill with height 6, resulting in 3 jumps. In the second example, the best sequence is from hill with height 1 to hill with height 5, resulting in 1 jump.","solution":"def max_jumps(hills): if not hills: return 0 # Initialize the dp array where dp[i] will store the maximum number of jumps that can be made # starting from hill i dp = [1] * len(hills) for i in range(len(hills)): for j in range(i): if hills[j] < hills[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) - 1"},{"question":"Given an array of integers, you need to find the equilibrium index of the array. The equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. If there are multiple equilibrium indexes, return the first one. If no such index exists, return -1. Input: The first line of input contains an integer T denoting the number of test cases. For each test case input consists of two lines. The first line contains an integer N denoting the size of the array. The second line contains N space-separated integers. Output: For each test case, print out the equilibrium index. If no equilibrium index exists, print -1. Constraints: 1<=T<=100 1<=N<=10^6 -10^3<=A[i]<=10^3 Example: Input: 2 5 1 3 5 2 2 4 1 2 3 4 Output: 2 -1 Note: The function should not read any input from stdin/console. The task is to complete the specified function, and not to write the full code.","solution":"def find_equilibrium_index(arr): Returns the equilibrium index of the array. If no such index exists, returns -1. total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): total_sum -= num if left_sum == total_sum: return i left_sum += num return -1 def process_test_cases(test_cases): Processes a list of test cases and returns the results. Each test case should be a tuple (N, list_of_integers). results = [] for N, arr in test_cases: results.append(find_equilibrium_index(arr)) return results # Example Usage: # T = 2 # test_cases = [(5, [1, 3, 5, 2, 2]), (4, [1, 2, 3, 4])] # process_test_cases(test_cases)"},{"question":"In a bustling city, there are N different bus routes identified by unique bus route IDs. Each bus route i operates with a certain frequency F_{i}, indicating that a bus on this route arrives at the bus stop every F_{i} minutes. You are given M queries, each of which asks for the earliest time you can catch a bus from a particular bus route starting from a given time T_{j}. Your task is to answer each query efficiently. ------ Input Format ------ - The first line contains two integers N and M — the number of bus routes and the number of queries respectively. - The second line contains N space-separated integers — the arrival frequencies F_{1}, F_{2}, ..., F_{N} of the bus routes. - Each of the next M lines contains two space-separated integers, representing a query: - The first integer ID_{j} is the bus route ID (1-based index). - The second integer T_{j} is the starting time for which the query is made. ------ Output Format ------ - For each query, output on a new line the earliest time you can catch the bus from the given bus route starting from T_{j}. ------ Constraints ------ 1 ≤ N, M ≤ 10^5 1 ≤ F_{i}, T_{j} ≤ 10^9 ----- Sample Input 1 ------ 3 4 5 10 20 1 3 2 15 3 25 1 7 ----- Sample Output 1 ------ 5 20 40 10 ------ Explanation 1 ------ - For the first query, the earliest time to catch the bus on route 1 from time 3 is at 5 minutes. - For the second query, the earliest time to catch the bus on route 2 from time 15 is at 20 minutes. - For the third query, the earliest time to catch the bus on route 3 from time 25 is at 40 minutes. - For the fourth query, the earliest time to catch the bus on route 1 from time 7 is at 10 minutes.","solution":"def earliest_bus_time(n, m, frequencies, queries): results = [] for q in queries: route_id, start_time = q frequency = frequencies[route_id - 1] if start_time % frequency == 0: earliest_time = start_time else: earliest_time = ((start_time // frequency) + 1) * frequency results.append(earliest_time) return results"},{"question":"In a distant kingdom, there is a unique game played with enchanted boxes. Each enchanted box has a number written on it and can perform transformations based on certain rules. The game\'s objective is to find the maximum possible value that can be achieved from a given sequence of transformations starting from an initial number of boxes. Each transformation follows these principles: 1. You can merge two boxes with numbers a and b to create a new box with a number equal to a + b. 2. You can split a box with number a into two boxes with numbers b and a - b (where 0 < b < a). Given an initial set of n boxes, where each box has a positive integer number written on it, determine the maximum possible value that can be obtained on a single box after performing any number of transformations. -----Input----- The first line contains an integer n (1 le n le 10^5), denoting the number of boxes. The second line contains n space-separated integers representing the number on each box. Each integer value satisfies 1 le text{box value} le 10^9. -----Output----- Print a single integer, the maximum possible value that can be achieved on any single box after performing any number of transformations. -----Examples----- Input 3 1 2 3 Output 6 Input 5 4 5 1 2 6 Output 18 Input 1 10 Output 10 -----Note----- In the first example, merging all the boxes (1+2+3) results in a single box with the number 6. In the second example, an optimal set of transformations is to merge all the boxes together: (4+5+1+2+6) resulting in a single box with the number 18. In the third example, since there\'s only one box, its value remains 10.","solution":"def max_box_value(n, boxes): Returns the maximum possible value that can be achieved on a single box. Parameters: n (int): Number of boxes boxes (list of int): List of integers representing the values on each box Returns: int: Maximum possible value on a single box return sum(boxes)"},{"question":"You are given a series of operations to perform on a list of integers. The list starts with a single integer \'n\'. You have a total of \'m\' operations to perform. Each operation can be one of the following two types: 1. Add an integer \'a\' to the end of the list. 2. Remove the last element from the list. Write a program to determine the final state of the list after all operations have been performed. -----Input----- The first line contains two integers n (0 ≤ n ≤ 10^9) and m (1 ≤ m ≤ 10^5). The next \'m\' lines contain one of the following operations: - \\"ADD a\\" (where a is an integer 0 ≤ a ≤ 10^9) - \\"REMOVE\\" It\'s guaranteed that there will not be a REMOVE operation when the list is empty. -----Output----- The output should contain the final state of the list, with each integer on a new line. If the list is empty, print \\"EMPTY\\". -----Examples----- Input 5 3 ADD 10 REMOVE ADD 3 Output 5 3 Input 10 5 ADD 20 ADD 30 REMOVE ADD 40 REMOVE Output 10 20 Input 7 2 REMOVE REMOVE Output EMPTY","solution":"def process_operations(n, m, operations): Processes a series of operations on a list starting with a single integer n. Parameters: n (int): The initial integer in the list. m (int): The number of operations to perform. operations (list of str): The list of operations in the form of strings (\\"ADD a\\" or \\"REMOVE\\"). Returns: list: The final state of the list after performing all operations, or [\\"EMPTY\\"] if the list is empty. lst = [n] for operation in operations: if operation.startswith(\\"ADD\\"): _, a = operation.split() lst.append(int(a)) elif operation == \\"REMOVE\\": if lst: lst.pop() return lst if lst else [\\"EMPTY\\"]"},{"question":"The city is planning to organize a circular marathon on its new circular track. The track has `n` checkpoints placed equidistantly around the circle. Each checkpoint is numbered from `0` to `n-1` in a clockwise direction. The marathon starts from checkpoint `0` and the participants are given a maximum of `m` minutes to complete as many checkpoints as possible. Your task is to compute the maximum number of checkpoints a participant can reach starting from checkpoint `0` within the allowed `m` minutes. The participant can choose to skip checkpoints and directly move to any other checkpoint. Moving from one checkpoint to the next takes 1 minute. Input Format: - First line contains one integer `T` - the number of test cases. - For each test case, the next line contains two space-separated integers `n` and `m`. Output Format: For each test case, print an integer representing the maximum number of checkpoints a participant can reach within the allowed `m` minutes. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ m ≤ 10^5 SAMPLE INPUT: 3 5 2 6 4 8 10 SAMPLE OUTPUT: 3 5 8 Explanation: For the first test case: - Track has 5 checkpoints indexed as: 0, 1, 2, 3, 4. - With 2 minutes, the participant can start at checkpoint 0, reach checkpoint 1 in 1 minute, and checkpoint 2 in another 1 minute. - Maximum checkpoints reachable is 3 (0, 1, 2). For the second test case: - Track has 6 checkpoints indexed as: 0, 1, 2, 3, 4, 5. - With 4 minutes, the participant can reach up to checkpoint 4. - The maximum checkpoints reachable is 5 (0, 1, 2, 3, 4). For the third test case: - Track has 8 checkpoints indexed as: 0, 1, 2, 3, 4, 5, 6, 7. - With 10 minutes available, the participant can complete a full rotation of 8 checkpoints and continue for 2 more minutes. - The maximum checkpoints reachable is 8 (entire circle completion).","solution":"def max_checkpoints(n, m): This function calculates the maximum number of checkpoints a participant can reach in \'m\' minutes on a circular track with \'n\' checkpoints. checkpoints_reached = min(n, m + 1) return checkpoints_reached def solve_marathon_cases(T, cases): This function processes each test case to determine the maximum checkpoints reachable. results = [] for n, m in cases: results.append(max_checkpoints(n, m)) return results"},{"question":"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: nums = [1,1,2] Output: 2, nums = [1,2,_] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Constraints: 0 <= nums.length <= 30000 -100 <= nums[i] <= 100 nums is sorted in non-decreasing order.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array and returns the new length. Args: nums: List[int] - A list of sorted integers. Returns: int - The length of the list after removing duplicates. if not nums: return 0 k = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[k] = nums[i] k += 1 return k"},{"question":"Alex is practicing his running on a circular track! The track is represented by a circle with a total circumference of `n` meters, where `n` is a positive integer. Alex runs at a speed of `v` meters per minute. Given the current position of Alex as `p` meters from a fixed start point on the track, calculate the number of minutes it will take for him to return to the start point (`p` = 0). ----Input---- The input consists of three integers: - n (1 ≤ n ≤ 10^9) - the total circumference of the circular track in meters. - p (0 ≤ p < n) - the current position of Alex on the track in meters. - v (1 ≤ v ≤ 10^9) - the speed of Alex in meters per minute. ----Output---- Output a single integer, the number of minutes it will take for Alex to return to the start point. ----Examples---- Input 100 25 20 Output 4 Input 500000 499999 1 Output 1 Input 30 29 2 Output 1 ----Note---- In the first example, Alex is 25 meters away from the start point on a track of 100 meters. Running at a speed of 20 meters per minute, it will take him 4 minutes (20 * 4 = 80; 25 + 80 = 105, which is equivalent to 5 meters on a circular track, one full lap plus 5 meters to reach the start). In the second example, since Alex is just 1 meter away from completing the track and his speed is 1 meter per minute, it will take him exactly 1 minute to return to the start point. In the third example, Alex needs to cover 1 meter on a circular track with a speed of 2 meters per minute, hence it will take him exactly 1 minute.","solution":"def time_to_return(n, p, v): Returns the number of minutes it will take for Alex to return to the start point. :param n: int - the total circumference of the circular track in meters :param p: int - the current position of Alex on the track in meters :param v: int - the speed of Alex in meters per minute :return: int - the number of minutes it will take to return to the start point return (n - p) // v if (n - p) % v == 0 else (n - p) // v + 1"},{"question":"Given an integer N, write a function that generates the first N rows of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of the binomial coefficients. In Pascal\'s Triangle, each number is the sum of the two numbers directly above it. Start your counting from the top row which is the 0th row. Example 1: Input: N = 5 Output: [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] Example 2: Input: N = 1 Output: [ [1] ] Your Task: You don\'t need to read input or print anything. Your task is to complete the function pascalsTriangle() which takes an Integer N as input and returns a 2D list representing the first N rows of Pascal\'s Triangle. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 <= N <= 30","solution":"def pascalsTriangle(N): Generates the first N rows of Pascal\'s triangle. Parameters: N (int): number of rows to generate Returns: list of lists: the first N rows of Pascal\'s Triangle if N <= 0: return [] result = [[1]] for _ in range(1, N): prev_row = result[-1] curr_row = [1] for j in range(1, len(prev_row)): curr_row.append(prev_row[j-1] + prev_row[j]) curr_row.append(1) result.append(curr_row) return result"},{"question":"Given a string s and an integer k, find out if the string can be rearranged such that any two adjacent characters are at least distance k apart. Example 1: Input: s = \\"aabbcc\\", k = 3 Output: \\"abcabc\\" Example 2: Input: s = \\"aaabc\\", k = 3 Output: \\"\\" Example 3: Input: s = \\"aaadbbcc\\", k = 2 Output: \\"abacabcd\\"","solution":"from collections import Counter import heapq def rearrange_string_k_distance_apart(s, k): Rearrange the string such that any two adjacent characters are at least distance k apart. If it\'s not possible, return an empty string. if k <= 1: return s # Count frequency of each character counter = Counter(s) max_heap = [(-value, key) for key, value in counter.items()] heapq.heapify(max_heap) queue = [] result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Reduce count and add the character to waiting queue with a new count queue.append((char, count + 1)) if len(queue) >= k: release_char, release_count = queue.pop(0) if release_count < 0: heapq.heappush(max_heap, (release_count, release_char)) if len(result) != len(s): return \\"\\" return \'\'.join(result)"},{"question":"You are given two strings, `s1` and `s2`, and your task is to determine if `s1` can be transformed into `s2` by performing exactly one of the following operations: 1. Insert exactly one character anywhere in the string. 2. Remove exactly one character from anywhere in the string. 3. Replace exactly one character in the string with a different character. Write a function that checks if `s1` can be transformed into `s2` using exactly one of the described operations. If it is possible, return `True`; otherwise, return `False`. # Input The function should have the following signature: ```python def can_transform(s1: str, s2: str) -> bool: ``` - `s1` and `s2` are two non-empty strings consisting of lowercase English letters. # Output Return `True` if `s1` can be transformed into `s2` using exactly one of the allowed operations; otherwise, return `False`. # Examples ```python print(can_transform(\\"abc\\", \\"ab\\")) # Output: True (Removing \'c\' from s1 transforms it to s2) print(can_transform(\\"abc\\", \\"abcd\\")) # Output: True (Inserting \'d\' to s1 transforms it to s2) print(can_transform(\\"abc\\", \\"adc\\")) # Output: True (Replacing \'b\' with \'d\' in s1 transforms it to s2) print(can_transform(\\"abc\\", \\"abcc\\")) # Output: False (More than one operation needed) print(can_transform(\\"abc\\", \\"abc\\")) # Output: False (No operation needed) ``` # Note - All strings `s1` and `s2` will have a length of at most 100,000 characters. - You should aim for an efficient solution as the strings can be very large.","solution":"def can_transform(s1: str, s2: str) -> bool: len1, len2 = len(s1), len(s2) # Case 1: Replace exactly one character if len1 == len2: differences = sum(1 for a, b in zip(s1, s2) if a != b) return differences == 1 # Case 2: Insert exactly one character if len1 + 1 == len2: for i in range(len2): if s1[:i] == s2[:i] and s1[i:] == s2[i+1:]: return True # Case 3: Remove exactly one character if len1 - 1 == len2: for i in range(len1): if s1[:i] == s2[:i] and s1[i+1:] == s2[i:]: return True return False"},{"question":"Maria is participating in a coding competition where each problem requires solving with a specific time limit. Maria is working on one problem that has N subproblems, each of which has to be solved within its own specified time limit. Given the time Maria has taken to solve each subproblem, determine if she has solved all subproblems within their respective time limits. -----Constraints----- - 1 leq N leq 100 - 1 leq time_limit_i leq 100 - 0 leq time_taken_i leq 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N time_limit_1 time_limit_2 ... time_limit_N time_taken_1 time_taken_2 ... time_taken_N -----Output----- If Maria has solved all subproblems within the specified time limits, print Yes; otherwise, print No. -----Sample Input----- 3 10 15 20 8 14 19 -----Sample Output----- Yes Maria has solved all subproblems within their respective time limits.","solution":"def check_time_limits(N, time_limits, time_taken): Returns \'Yes\' if all subproblems are solved within their respective time limits, otherwise \'No\'. for i in range(N): if time_taken[i] > time_limits[i]: return \\"No\\" return \\"Yes\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) time_limits = list(map(int, data[1:N+1])) time_taken = list(map(int, data[N+1:2*N+1])) print(check_time_limits(N, time_limits, time_taken))"},{"question":"In a kingdom, there are N cities connected by M bidirectional roads. Each road has a certain time required to travel through it. The king wants to make travelling as efficient as possible, so he has mandated that there should be exactly one path between any two cities with the minimum travel time. In other words, the king wants to construct a minimum spanning tree (MST) of the cities. You are given the details of all the roads. Determine the total travel time of the MST. Input Format: - The first line contains two integers, N (number of cities) and M (number of roads). - The following M lines, each contain three integers u, v, and w, where u and v are the cities connected by a road and w is the travel time of that road. Output Format: - Print the total travel time of the MST. SAMPLE INPUT: 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 SAMPLE OUTPUT: 6 Explanation: One of the possible minimum spanning trees is: - Road between city 1 and city 2 (travel time = 1) - Road between city 2 and city 3 (travel time = 2) - Road between city 2 and city 4 (travel time = 3) Total travel time = 1 + 2 + 3 = 6.","solution":"def find(parent, i): while parent[i] != i: i = parent[i] return i def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, roads): roads.sort(key=lambda x: x[2]) # Sort by weight of edges parent = [i for i in range(n)] rank = [0] * n mst_weight = 0 edges_in_mst = 0 for u, v, w in roads: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: mst_weight += w edges_in_mst += 1 union(parent, rank, x, y) if edges_in_mst == n - 1: break return mst_weight def total_travel_time_of_mst(n, m, roads): return kruskal_mst(n, roads) # Example usage: def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) roads = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) roads.append((u, v, w)) index += 3 print(total_travel_time_of_mst(n, m, roads)) if __name__ == \\"__main__\\": main()"},{"question":"You have a collection of n items and you want to divide them as evenly as possible among k groups. Each group should have at least one item, and you want to minimize the absolute difference in the number of items between any two groups. Determine the minimum absolute difference between the sizes of the largest and the smallest groups after dividing the items. -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains two integers n (1 leq n leq 10^9) and k (1 leq k leq 10^9) — the total number of items and the number of groups, respectively. -----Output----- For each test case, print a single integer denoting the minimum possible absolute difference between the sizes of the largest and the smallest groups. -----Examples----- Input 5 10 3 15 4 7 7 8 4 1 1 Output 1 1 0 0 0 -----Note----- For the first test case, you can divide the 10 items into 3 groups: [4, 3, 3]. The maximum group has 4 items, and the minimum group has 3 items, so the difference is 1. For the second test case, you can divide the 15 items into 4 groups: [4, 4, 4, 3]. The maximum group has 4 items, and the minimum group has 3 items, so the difference is 1. For the third test case, you can divide the 7 items into 7 groups: [1, 1, 1, 1, 1, 1, 1]. All groups have 1 item, so the difference is 0. For the fourth test case, you can divide the 8 items into 4 groups: [2, 2, 2, 2]. All groups have 2 items, so the difference is 0. For the fifth test case, you can divide the 1 item into 1 group: [1]. The maximum and minimum group both have 1 item, so the difference is 0.","solution":"def min_difference(t, cases): This function calculates the minimum absolute difference between sizes of groups after dividing n items into k groups, for t test cases. Parameters: t (int): Number of test cases. cases (list of tuples): Each tuple contains two integers n (number of items) and k (number of groups). Returns: list of int: List of minimum differences for each test case. results = [] for n, k in cases: # If k is greater than or equal to n, we can only place one item in each k groups # and the rest of (k-n) groups will be empty. if k >= n: results.append(0) else: # Calculate the size of each group if items were divided as evenly as possible q, r = divmod(n, k) # We will have r groups with (q+1) items and (k-r) groups with q items min_diff = 1 if r > 0 else 0 results.append(min_diff) return results"},{"question":"Chef has a sequence of N positive integers. He needs to determine the maximum possible sum of any two distinct elements in the sequence such that their greatest common divisor (GCD) is greater than 1. However, he is busy, so he asks for your help. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output ------ For each test case, print a single line containing one integer ― the maximum possible sum of any two distinct elements with a GCD greater than 1. If no such pair exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 20 2 ≤ N ≤ 100,000 1 ≤ A_{i} ≤ 10^{9} for each valid i ------ Subtasks ------ Subtask #1 (30 points): 2 ≤ N ≤ 1000 Subtask #2 (70 points): original constraints ------ Sample Input 1 ------ 2 5 10 15 3 6 9 4 5 7 11 13 ------ Sample Output 1 ------ 24 -1 ------ explanation 1 ------ Example case 1: The pairs with GCD greater than 1 are (10, 15), (10, 6), (10, 9), (15, 3), (15, 6), (15, 9), (3, 6), and (6, 9). The maximum sum among these pairs is 10 + 15 = 25. Example case 2: No pair exists with GCD greater than 1, so the output is -1.","solution":"import math from itertools import combinations def max_sum_with_gcd_greater_than_one(N, A): max_sum = -1 for a, b in combinations(A, 2): if math.gcd(a, b) > 1: max_sum = max(max_sum, a + b) return max_sum def process_test_cases(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] results.append(max_sum_with_gcd_greater_than_one(N, A)) return results"},{"question":"Takahashi has N apples, and the weight of each apple is Ai grams. You are given the weight of each apple. Determine whether the sum of the weights of all apples is more than W grams. Print Yes if it is, otherwise print No. -----Constraints----- - 1 leq N leq 100 - 1 leq W leq 10^4 - 1 leq Ai leq 500 -----Input----- Input is given from Standard Input in the following format: N W A1 A2 A3 ... AN -----Output----- If the sum of the weights of all apples is more than W grams, print Yes; otherwise, print No. -----Sample Input----- 3 1200 400 300 600 -----Sample Output----- Yes The total weight of the apples is 1300 grams, which is more than W = 1200 grams.","solution":"def check_apple_weight_exceeds(limit, weights): Determines if the sum of apple weights exceeds the given limit. Parameters: limit (int): The weight limit in grams. weights (List[int]): A list containing the weights of the apples. Returns: str: \\"Yes\\" if the total weight exceeds the limit, otherwise \\"No\\". total_weight = sum(weights) if total_weight > limit: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of n integers. Your task is to determine the number of pairs (i, j) such that 1 ≤ i < j ≤ n and ai + aj is divisible by a given integer k. Input The first line contains two integers n and k (1 ≤ n ≤ 200000, 1 ≤ k ≤ 1000), the number of elements in the array and the divisor. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9), the elements of the array. Output Output a single integer denoting the number of pairs (i, j) such that 1 ≤ i < j ≤ n and ai + aj is divisible by k. Examples Input 5 3 1 2 3 4 5 Output 4 Input 4 5 5 5 5 5 Output 6 Note In the first example, the pairs are (1, 2), (1, 5), (2, 4), and (3, 5). In the second example, the pairs are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4).","solution":"def count_divisible_pairs(n, k, arr): Return the number of pairs (i, j) such that 1 ≤ i < j ≤ n and ai + aj is divisible by k. remainder_count = [0] * k # Count the frequency of each remainder when divided by k for num in arr: remainder_count[num % k] += 1 # Initialize count of pairs count = 0 # Count pairs (remainder 0 with remainder 0) count += (remainder_count[0] * (remainder_count[0] - 1)) // 2 # Count pairs for other remainders for i in range(1, (k//2) + 1): if i != k - i: count += remainder_count[i] * remainder_count[k - i] else: count += (remainder_count[i] * (remainder_count[i] - 1)) // 2 return count"},{"question":"Greg is a fan of competitive programming. After encountering numerous problems on sorting, he decides to create his own variant of the problem. He calls this problem \\"Alternating Sort\\". The task is to determine whether it is possible to rearrange the elements of an array in such a way that the rearranged array follows a specific pattern: alternating minimum and maximum elements of the remaining numbers. Specifically, for an array `a` of length `n`, you need to rearrange it to a new array `b` such that: - `b[0]` is the smallest element among the remaining elements of `a` - `b[1]` is the largest element among the remaining elements of `a` - `b[2]` is the next smallest element among the remaining elements of `a` - `b[3]` is the next largest element among the remaining elements of `a` - and so forth Your task is to write a program that checks if it\'s possible to rearrange the elements of the given array `a` into the array `b` that follows the alternating sort pattern. -----Input----- The input consists of two lines: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the length of the array. - The second line contains `n` integers `a_i` (1 ≤ a_i ≤ 1,000,000,000) — the elements of the array. -----Output----- Print \\"YES\\" if it is possible to rearrange the array `a` into the alternating sort order. Print \\"NO\\" otherwise. -----Examples----- Input 5 1 3 2 4 5 Output YES Input 3 3 2 1 Output YES Input 4 2 2 2 2 Output NO","solution":"def can_alternating_sort(n, a): Determines if it\'s possible to rearrange the array \'a\' such that the new array follows the alternating sort pattern. :param n: Length of the array. :param a: List of integers. :return: \\"YES\\" if it is possible, otherwise \\"NO\\". if n == 1 or n == 2: return \\"YES\\" # Sort the array a.sort() # Create a new array to fit the alternating pattern b = [] left, right = 0, n - 1 while left <= right: if left == right: b.append(a[left]) else: b.append(a[left]) b.append(a[right]) left += 1 right -= 1 # Check if the array b follows the alternating min and max pattern for i in range(1, len(b) - 1): if b[i] >= b[i-1] and b[i] <= b[i+1]: return \\"NO\\" if b[i] <= b[i-1] and b[i] >= b[i+1]: return \\"NO\\" return \\"YES\\""},{"question":"Maximizing the Xor: You are given two integers, L and R. Find the maximum value of A xor B, where A and B are any integers in the range [L, R] inclusive. -----Input----- The input contains two integers L and R, where 1 le L le R le 10^6. -----Output----- Output a single integer — the maximum possible result of A xor B for L le A, B le R. -----Examples----- Sample Input 1: 1 10 Sample Output 1: 15 Sample Input 2: 10 15 Sample Output 2: 7","solution":"def maximizing_xor(L, R): Returns the maximum value of A xor B, where A and B are integers between L and R (inclusive). max_xor = 0 for A in range(L, R + 1): for B in range(A, R + 1): # Ensure B >= A to minimize redundant calculations max_xor = max(max_xor, A ^ B) return max_xor"},{"question":"In a small town, there is a peculiar tradition for their annual festival. The festival committee has decided that they will build N balloon arches, each requiring a certain number of balloons, and they want to use the minimum number of balloons possible. There are different types of balloons available, each of which has a different size. The committee needs to figure out how to combine the balloons of different sizes to get exactly the right number for each arch, where possible, or to find that it is impossible. You are given an array of positive integers representing the sizes of available balloons and a target integer. Your task is to determine if it is possible to sum up the balloon sizes in such a way that they exactly equal the target integer. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". Input The first line contains a single integer T (1 ≤ T ≤ 10), the number of test cases. For each test case: - The first line contains an integer k (1 ≤ k ≤ 10^4), the target number of balloons for the arch. - The second line contains an integer m (1 ≤ m ≤ 100), the number of available balloon sizes. - The third line contains m positive integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ k), the sizes of the balloons. Output For each test case, print \\"YES\\" if the target number of balloons can be reached using the given balloon sizes, otherwise print \\"NO\\". Examples Input 3 5 3 1 2 3 10 4 2 5 3 6 7 2 3 6 Output YES YES NO Explanation In the first test case, the target is 5, and we have balloons of sizes 1, 2, and 3. We can use two balloons of size 2 and one balloon of size 1 to reach exactly 5 (2+2+1=5). In the second test case, the target is 10, and we have balloons of sizes 2, 5, 3, and 6. We can use two balloons of size 5 to reach exactly 10 (5+5=10). In the third test case, the target is 7, and we have balloons of sizes 3 and 6. It\'s impossible to reach exactly 7 using the given sizes.","solution":"def can_reach_target(T, test_cases): results = [] for case in test_cases: k, m, sizes = case dp = [False] * (k + 1) dp[0] = True for size in sizes: for j in range(k, size - 1, -1): if dp[j - size]: dp[j] = True if dp[k]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): k = int(input_lines[index]) m = int(input_lines[index + 1]) sizes = list(map(int, input_lines[index + 2].split())) test_cases.append((k, m, sizes)) index += 3 return T, test_cases"},{"question":"Find the number of distinct islands in a given binary grid representation of a map. Constraints * 1 ≤ m, n ≤ 1000 * The grid contains only 0s and 1s * \'1\' represents land and \'0\' represents water * Two pieces of land are considered part of the same island if they are connected horizontally or vertically Input m n grid , where m is the number of rows, n is the number of columns, and grid is the m x n binary grid. Output Print the number of distinct islands. Examples Input 4 5 11000 11000 00100 00011 Output 3 Input 3 4 1110 1100 0001 Output 2","solution":"def numDistinctIslands(grid): def dfs(x, y, direction, path): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 path.append(direction) dfs(x + 1, y, \'D\', path) dfs(x - 1, y, \'U\', path) dfs(x, y + 1, \'R\', path) dfs(x, y - 1, \'L\', path) path.append(\'B\') # Backtracking distinct_islands = set() for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == 1: path = [] dfs(i, j, \'S\', path) # Start distinct_islands.add(tuple(path)) return len(distinct_islands) def countDistinctIslands(m, n, grid_str): grid = [[int(c) for c in line] for line in grid_str.split()] return numDistinctIslands(grid)"},{"question":"Given an array of integers, you need to determine whether the array can be rearranged such that every integer appears an even number of times. ------ Input Format ------ - The first line contains an integer T - the number of test cases. - Each test case consists of two lines: the first line contains an integer n - the length of the array, and the second line contains n integers representing the array. ------ Output Format ------ For each test case, output YES if the array can be rearranged so that every integer appears an even number of times, otherwise output NO. You may print each character of the string in uppercase or lowercase (for example, the strings yEs, yes, Yes and YES will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^{5} 0 ≤ a[i] ≤ 10^{9} ----- Sample Input 1 ------ 3 4 1 2 2 1 5 1 2 2 1 3 6 3 3 2 2 2 2 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ - Test case 1: The array [1, 2, 2, 1] can be rearranged as [1, 1, 2, 2], where each integer appears twice. - Test case 2: The array [1, 2, 2, 1, 3] cannot be rearranged for all integers to appear an even number of times, since 3 appears once. - Test case 3: The array [3, 3, 2, 2, 2, 2] can be rearranged as [3, 3, 2, 2, 2, 2], where each integer appears an even number of times.","solution":"def can_rearrange_even_occurrences(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] array = test_cases[i][1] from collections import Counter counter = Counter(array) if all(count % 2 == 0 for count in counter.values()): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Kiara wants to calculate the cumulative sum of the digits of several numbers. However, there\'s a catch: if the cumulative sum results in a number with more than one digit, she needs to continue summing the digits of that result until a single-digit number is obtained. Your task is to help her by writing a program that performs this operation for each given number. Input Format First line: N, where N is the number of test cases. Now N lines follow, where each line contains a single integer X. Constraints: 1 ≤ N ≤ 50 0 ≤ X ≤ 10^18 Output Format For each test case, print the single-digit result in a new line. Sample Input 3 9875 12345 0 Sample Output 2 6 0 Explanation: For the first input 9875, the sum of digits is 9 + 8 + 7 + 5 = 29. As 29 has more than one digit, sum the digits of 29, giving 2 + 9 = 11. As 11 still has more than one digit, sum the digits of 11, resulting in 1 + 1 = 2. For the second input 12345, the sum of digits is 1 + 2 + 3 + 4 + 5 = 15. Then, summing the digits of 15 results in 1 + 5 = 6. For the third input 0, the result is already a single-digit number, which is 0.","solution":"def single_digit_sum(x): Returns the single-digit sum of the digits of x. while x >= 10: x = sum(int(digit) for digit in str(x)) return x def solve(test_cases): results = [] for x in test_cases: results.append(single_digit_sum(x)) return results"},{"question":"A computer scientist is exploring a forest filled with paths connecting various clearings. Each clearing is represented by a node, and each path between two clearings is represented by an undirected edge with a certain weight (distance). The scientist can start at any clearing and wants to find the shortest path to all other clearings while passing through each clearing exactly once. Create a program to solve this problem. Given the number of clearings N (nodes) and the paths between them, determine the shortest possible path that visits all clearings exactly once and returns to the starting point (a typical Traveling Salesman Problem). Input The input consists of: - An integer N (2 ≤ N ≤ 10), the number of clearings. - An integer M (1 ≤ M ≤ 45), the number of paths between the clearings. - M lines each containing three integers u, v, w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 1000). This represents an undirected path between clearing u and clearing v with weight w. Output Output a single integer, the length of the shortest path that visits all clearings exactly once and returns to the starting point. Example Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 Note In the example, the scientist can start at clearing 1, visit clearing 2, then clearing 4, then clearing 3, and return to clearing 1, for a total distance of 10 + 25 + 30 + 15 = 80. This is the shortest possible path that meets the criteria.","solution":"import itertools def tsp(N, M, paths): # Create adjacency matrix dist = [[float(\'inf\')] * N for _ in range(N)] for u, v, w in paths: dist[u - 1][v - 1] = w dist[v - 1][u - 1] = w min_path = float(\'inf\') nodes = list(range(N)) # Try all permutations of nodes except the starting node for perm in itertools.permutations(nodes[1:]): perm = (0,) + perm + (0,) # start and end at node 0 current_path_length = sum(dist[perm[i]][perm[i + 1]] for i in range(N)) min_path = min(min_path, current_path_length) return min_path # Example test case print(tsp(4, 6, [(1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (2, 4, 25), (3, 4, 30)])) # Expected output: 80"},{"question":"A researcher needs help creating a zigzag pattern with asterisks. Given an integer N, help the researcher code the pattern problem. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the zigzag pattern. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 4 3 4 5 6 -----Sample Output:----- * * * * * * * * * * * * * * * * * * * -----EXPLANATION:----- No need, else pattern can be decoded easily.","solution":"def generate_zigzag(N): Generates a zigzag pattern of height N. Parameters: N (int): The height of the zigzag pattern. Returns: List[str]: A list of strings, each representing a line in the zigzag pattern. if N <= 0: return [] pattern = [\' \' * i + \'*\' for i in range(N - 1, -1, -1)] + [\' \' * i + \'*\' for i in range(1, N)] return pattern def process_test_cases(T, test_cases): Process multiple test cases and generate corresponding zigzag patterns. Parameters: T (int): The number of test cases. test_cases (List[int]): A list of integers, each representing the height of the zigzag pattern for a test case. Returns: List[List[str]]: A list of lists, where each inner list is a zigzag pattern for a test case. results = [] for N in test_cases: results.append(generate_zigzag(N)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T + 1)] results = process_test_cases(T, test_cases) for result in results: for line in result: print(line) print() # blank line to separate patterns"},{"question":"You work for a company that processes a large number of customer records. Each record consists of a customer ID and their total spending amount. It is crucial for your task to identify the customers who have the highest spending. Write a program to identify the top \'k\' customers with the highest spending. If there are ties in spending, prioritize the customer with the smaller customer ID. Input The input will contain multiple test cases. Each test case consists of: 1. An integer `n` (1 ≤ n ≤ 100,000) which represents the number of customer records. 2. Each of the next `n` lines contains a customer ID (a positive integer) and their total spending amount (a non-negative integer). 3. An integer `k` (1 ≤ k ≤ n) which specifies the number of top customers to be identified. The number of test cases does not exceed 20. Output For each test case, output the IDs of the top \'k\' customers with the highest spending, sorted by spending in descending order. If multiple customers have the same spending, sort them by their IDs in ascending order. Each ID should be on a new line. Example Input 2 4 100 2 200 3 200 1 50 2 3 1 500 2 300 3 100 1 700 3 Output 2 3 1 2 3","solution":"def top_k_customers(records, k): Identify the top k customers with the highest spending. Args: records (list of tuples): List of tuples where each tuple contains a customer ID and their total spending amount. k (int): Number of top customers to be identified. Returns: list: Sorted list of customer IDs with the highest spending. # Sort the records by spending in descending order and by ID in ascending order in case of ties sorted_records = sorted(records, key=lambda x: (-x[1], x[0])) # Extract the top k customer IDs top_k_ids = [record[0] for record in sorted_records[:k]] return top_k_ids"},{"question":"John loves solving puzzles. One day, he came across an interesting problem involving candy distribution. There are `n` children standing in a line, and each child has a certain number of candies they\'d like. John has an unlimited supply of candies, but he wants to distribute them in such a way that every step of the distribution process follows these rules: 1. He can give exactly one candy to a child at a time. 2. After giving out a candy, he immediately checks if this child now has their desired number of candies. 3. If a child receives their desired number of candies, John will not give more candies to that child. 4. He begins distributing candies from the first child and moves sequentially to the last child, then loops back to the first child and repeats. John continues this process until all children have their desired number of candies. Determine how many steps (individual candy distributions) it takes for John to satisfy all the children. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of children. The second line contains `n` positive integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 1000) representing the number of candies each child desires. Output Print a single integer — the number of steps it takes for John to satisfy all the children. Examples Input 3 1 2 3 Output 6 Input 4 1 1 1 1 Output 4 Input 5 2 3 1 4 2 Output 12 Note In the first example, John gives 1 candy to the first child, then 1 candy to the second child, then 1 candy to the third child, and so on, looping back until each child has exactly their desired number of candies.","solution":"def count_steps_to_satisfy_children(n, candies): Determines the number of steps it takes for John to satisfy all the children with their desired candies. Args: n (int): The number of children. candies (list of int): The number of candies each child desires. Returns: int: The total number of steps taken to satisfy all children. return sum(candies)"},{"question":"There is a grid of size n times m filled with integers. You need to find the minimum number of steps required to reach from the top-left corner to the bottom-right corner. You can only move right or down, and you must collect all unique integers on the way. The steps refer to the number of moves made (either right or down). Write a program to calculate the minimum number of steps required. -----Input----- The first line contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. The next n lines each contain m integers a_{ij} (1 le a_{ij} le 1000), representing the values of the grid\'s cells. -----Output----- Print the minimum number of steps required to reach the bottom-right corner from the top-left corner while collecting all unique integers. -----Example----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 4 -----Note----- In the given example, the path of collecting unique values with the minimum number of steps is: (1,1) → (1,2) → (1,3) → (2,3) → (3,3). The unique integers collected are {1, 2, 3, 6, 9}, and the number of steps is 4.","solution":"def min_steps_to_collect_unique(n, m, grid): from collections import deque def is_valid(x, y, collected, visited): return 0 <= x < n and 0 <= y < m and (x, y, tuple(collected)) not in visited start = (0, 0, tuple([grid[0][0]])) queue = deque([(0, 0, [grid[0][0]], 0)]) # (row, col, collected_values, steps) visited = set([start]) while queue: x, y, collected, steps = queue.popleft() if x == n - 1 and y == m - 1: return steps for dx, dy in [(1, 0), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny, collected, visited): new_collected = collected[:] if grid[nx][ny] not in new_collected: new_collected.append(grid[nx][ny]) new_state = (nx, ny, tuple(new_collected)) visited.add(new_state) queue.append((nx, ny, new_collected, steps + 1)) return -1 # In case no path is found # Example usage: # n = 3 # m = 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(min_steps_to_collect_unique(n, m, grid)) # Output: 4"},{"question":"You are given an integer n and a list of n integers. We define a \\"peak\\" in the list as an element which is greater than its immediate neighbors. An element is greater than its neighbors if it is larger than the element immediately before it and the element immediately after it. The first and last elements of the list cannot be peaks since they do not have two neighbors. Write a function to find the position of any peak in the list. If there are multiple peaks, return the position of any one of them. If there are no peaks, return -1. Constraints * 3 ≦ n ≦ 10^5 * The list elements are distinct integers and can be either positive or negative. Input The input is given from Standard Input in the following format: n list of n integers Output Print the 1-based index of any peak in the list. If there are no peaks, print `-1`. Examples Input 6 1 3 2 3 5 4 Output 2 Input 5 1 2 3 4 5 Output -1","solution":"def find_peak_position(n, nums): Returns the 1-based index of any peak in the list. A peak is any element which is greater than its immediate neighbors. If there is no peak, returns -1. Parameters: n: int - the number of integers in the list. nums: list of int - the list of integers. Returns: int - the 1-based index of any peak or -1 if there are no peaks. for i in range(1, n - 1): if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: return i + 1 return -1"},{"question":"In mathematics, a permutation of a set is, loosely speaking, an arrangement of its members into a sequence or linear order. For example, given a set of three elements {1, 2, 3}, the six permutations are 123, 132, 213, 231, 312, and 321. If the set has n elements, the number of permutations is n!. Task You are given an integer n. Your task is to print all permutations of numbers from 1 to n in lexicographic order, each permutation on a new line. Input Format A single line containing an integer n. Constraints 1 leq n leq 5 Output Format Print all permutations of numbers from 1 to n in lexicographic order, each permutation on a new line. Sample Input 3 Sample Output 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1","solution":"from itertools import permutations def print_permutations(n): numbers = list(range(1, n + 1)) perm = permutations(numbers) for p in perm: print(\' \'.join(map(str, p)))"},{"question":"In SecuraCity, there is a daily security report that logs the activities in the city in a coded format. Each activity is denoted by a specific character: - \'T\' represents a Theft - \'V\' represents a Vandalism - \'A\' represents an Accident - \'F\' represents a Fire Given the coded daily report as a string, identify the activity that occurred the most throughout the day. If there is a tie (i.e., two or more activities have the highest frequency), prioritize them based on the following order: Theft, Vandalism, Accident, then Fire. Write a program that takes the daily security report as input and outputs the character representing the most frequent activity. ------ Input Format ------ - The input is a single string of characters where each character represents an activity logged in the daily report. ------ Output Format ------ Print a single character representing the most frequent activity of the day. If there is a tie, follow the priority order Theft > Vandalism > Accident > Fire. ------ Constraints ------ - The length of the string will be between 1 and 10^4. - The string will only contain characters \'T\', \'V\', \'A\', \'F\'. ----- Sample Input 1 ------ TTVVAAFF ----- Sample Output 1 ------ T ----- explanation 1 ------ The counts of activities are: - Theft: 2 - Vandalism: 2 - Accident: 2 - Fire: 2 Hence, among these, \'T\' (Theft) has the highest priority. ----- Sample Input 2 ------ VVVVFFFFTTTAAAAAAAA ----- Sample Output 2 ------ A ----- explanation 2 ------ The counts of activities are: - Theft: 3 - Vandalism: 4 - Accident: 8 - Fire: 4 Therefore, the most frequent activity is \'A\' (Accident). ----- Sample Input 3 ------ FFFTTTTTT ----- Sample Output 3 ------ T ----- explanation 3 ------ The counts of activities are: - Theft: 5 - Vandalism: 0 - Accident: 0 - Fire: 3 Hence, the most frequent activity is \'T\' (Theft).","solution":"def most_frequent_activity(report): Determine the most frequent activity in the security report. Parameters: report (str): A string containing the coded report of activities. Returns: char: The character representing the most frequent activity. from collections import Counter if not report: return \\"\\" activity_priority = [\'T\', \'V\', \'A\', \'F\'] activity_count = Counter(report) # Sort activities by frequency and resolve ties using the provided priority order most_frequent = sorted(activity_count.items(), key=lambda item: (-item[1], activity_priority.index(item[0]))) return most_frequent[0][0]"},{"question":"You are responsible for managing the data center resources for a large-scale application. This application involves multiple microservices that need to cache frequently accessed data from a database to improve performance. The caching mechanism is implemented using a Least Recently Used (LRU) cache policy. Your task is to implement an LRU Cache. The cache should support the following operations: 1. `get(key)` - Return the value (always positive) of the key if the key exists in the cache, otherwise return -1. 2. `put(key, value)` - Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the cache capacity, evict the least recently used key. The LRU Cache capacity will be given as an integer during initialization. Implement the LRU Cache with the following constraints: 1. You should complete the `LRUCache` class, which has the following methods: * `LRUCache(int capacity)`: Initialize the LRU cache with a positive capacity. * `int get(int key)`: Return the value of the key if it exists, otherwise return -1. * `void put(int key, int value)`: Update the key-value pair, and if the number of keys exceeds the capacity, evict the least recently used key. Input: - A sequence of operations, starting with the cache capacity followed by operations of either \\"get\\" or \\"put\\". Output: - A list of results for each \\"get\\" operation, in the order they were called. Constraints: - 1 <= capacity <= 10^4 - 1 <= key, value <= 10^5 - At most 10^5 calls will be made to `get` and `put`. Example: Input: ``` 3 put 1 1 put 2 2 get 1 put 3 3 get 2 put 4 4 get 1 get 3 get 4 ``` Output: ``` [1, -1, -1, 3, 4] ``` Explanation: LRUCache cache = new LRUCache(3); cache.put(1, 1); // The cache is {1=1} cache.put(2, 2); // The cache is {1=1, 2=2} cache.get(1); // Returns 1 and updated the cache to {2=2, 1=1} cache.put(3, 3); // The cache is {2=2, 1=1, 3=3} cache.get(2); // Returns -1 (not found) and cache remains unchanged cache.put(4, 4); // {1=1, 3=3, 4=4}, evicts key 2 cache.get(1); // Returns -1 (not found) cache.get(3); // Returns 3 cache.get(4); // Returns 4","solution":"class Node: def __init__(self, key, value): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.hashmap = {} self.head = Node(0, 0) self.tail = Node(0, 0) self.head.next = self.tail self.tail.prev = self.head def _add(self, node: Node): p = self.tail.prev p.next = node self.tail.prev = node node.prev = p node.next = self.tail def _remove(self, node: Node): p = node.prev n = node.next p.next = n n.prev = p def get(self, key: int) -> int: if key in self.hashmap: node = self.hashmap[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key: int, value: int) -> None: if key in self.hashmap: self._remove(self.hashmap[key]) node = Node(key, value) self._add(node) self.hashmap[key] = node if len(self.hashmap) > self.capacity: n = self.head.next self._remove(n) del self.hashmap[n.key]"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct indices i and j in the list such that the sum of the integers at these indices equals the target integer. -----Input----- The first line contains two integers n (1 le n le 10^5) and target (-10^9 le target le 10^9) — the number of integers in the list and the target integer. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the list of integers. -----Output----- Output \\"YES\\" if there exist two distinct indices i and j such that a_i + a_j = target. Otherwise, print \\"NO\\". -----Examples----- Input 5 9 2 7 11 15 1 Output YES Input 4 10 2 7 11 15 Output NO -----Note----- In the first example, the integers at indices 1 and 2 sum up to the target (2 + 7 = 9). In the second example, there is no pair of integers in the list that sums up to the target value.","solution":"def two_sum_exists(n, target, nums): Return \'YES\' if there exist two distinct indices i and j in nums such that nums[i] + nums[j] = target. Otherwise, return \'NO\'. seen = {} for num in nums: complement = target - num if complement in seen: return \\"YES\\" seen[num] = True return \\"NO\\""},{"question":"Given a positive integer n, you need to find all the n-digit numbers such that the number is equal to the sum of its digits each raised to the power of n. Example 1: Input: n = 3 Output: [153, 370, 371, 407] Explanation: 153 = 1^3 + 5^3 + 3^3, 370 = 3^3 + 7^3 + 0^3, 371 = 3^3 + 7^3 + 1^3, 407 = 4^3 + 0^3 + 7^3 Example 2: Input: n = 4 Output: [1634, 8208, 9474] Explanation: 1634 = 1^4 + 6^4 + 3^4 + 4^4, 8208 = 8^4 + 2^4 + 0^4 + 8^4, 9474 = 9^4 + 4^4 + 7^4 + 4^4 Your Task: You don\'t need to read input or print anything. Complete the function findArmstrongNumbers() which takes n as input parameter and returns the list of all n-digit Armstrong numbers. Expected Time Complexity: O(10^n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 5","solution":"def findArmstrongNumbers(n): Returns a list of n-digit Armstrong numbers. def is_armstrong_number(x, n): sum_of_powers = sum(int(digit) ** n for digit in str(x)) return x == sum_of_powers lower = 10**(n-1) upper = 10**n armstrong_numbers = [] for number in range(lower, upper): if is_armstrong_number(number, n): armstrong_numbers.append(number) return armstrong_numbers"},{"question":"You are tasked with arranging a series of events in a timeline such that no two events overlap. Each event has a start time and an end time. Given a list of events, your task is to determine the maximum number of non-overlapping events you can attend. Each event will be represented by a tuple of two integers (start_time, end_time), where 0 ≤ start_time < end_time ≤ 10^9. An event (a, b) is considered to be overlapping with another event (c, d) if and only if the time intervals [a, b) and [c, d) have any duration in common. Input: The first line contains an integer \'n\', the number of events. The next \'n\' lines each contain two integers representing the start time and end time of an event. Output: Print the maximum number of non-overlapping events you can attend. SAMPLE INPUT 3 1 3 2 4 3 5 SAMPLE OUTPUT 2 Explanation: You can attend the events (1, 3) and (3, 5) without any overlap.","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events that can be attended. Parameters: events (List[Tuple[int, int]]): A list of tuples, each containing the start and end time of an event. Returns: int: The maximum number of non-overlapping events that can be attended. # Sort events by their end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: # Attend this event max_events += 1 last_end_time = end return max_events # Function to read input and handle the events to pass to max_non_overlapping_events def get_max_events_from_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0].strip()) events = [tuple(map(int, lines[i + 1].strip().split())) for i in range(n)] return max_non_overlapping_events(events)"},{"question":"You are given a sorted array of integers and a target integer. Your task is to find the first and last positions of the target integer in the array. If the target integer is not found in the array, return [-1, -1]. For example: arr = [5, 7, 7, 8, 8, 10] target = 8 The first and last positions of 8 in the array are 3 and 4, respectively. Input: - A single line containing space-separated integers representing the sorted array, followed by a space, and then the target integer. Output: - A single line containing two space-separated integers representing the first and last positions of the target integer in the array. If the target is not found, return [-1, -1]. Constraints: - 1 ≤ length of array ≤ 100000 - -1000000 ≤ elements of array ≤ 1000000 - -1000000 ≤ target ≤ 1000000 SAMPLE INPUT 5 7 7 8 8 10 8 SAMPLE OUTPUT 3 4","solution":"def find_first_and_last_position(arr, target): def find_first(arr, target): left, right = 0, len(arr) - 1 first_pos = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: first_pos = mid right = mid - 1 elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return first_pos def find_last(arr, target): left, right = 0, len(arr) - 1 last_pos = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: last_pos = mid left = mid + 1 elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return last_pos first = find_first(arr, target) last = find_last(arr, target) return [first, last]"},{"question":"Rachel is managing a fruit store and she wants to keep track of inventory efficiently. She sells apples and bananas, and she wishes to ensure that she always has enough stock to meet customer demand. Rachel is given a desired target inventory for apples and bananas (TA, TB) and the current inventory for apples and bananas (CA, CB). She needs to know the minimum number of fruits she needs to order to meet or exceed the target inventory. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains four space-separated integers CA, CB, TA, and TB. ------ Output Format ------ For each test case, output on a new line the minimum number of fruits Rachel needs to order to meet or exceed the target inventory. ------ Constraints ------ 1 ≤ T ≤ 50 0 ≤ CA, CB ≤ 100 0 ≤ TA, TB ≤ 100 ----- Sample Input 1 ------ 3 30 40 50 60 20 25 20 25 10 10 15 20 ----- Sample Output 1 ------ 40 0 15 ----- explanation 1 ------ Test case 1: The current inventory is 30 apples and 40 bananas, and the target inventory is 50 apples and 60 bananas. Rachel needs to order 20 more apples and 20 more bananas, so the total number of fruits to order is 40. Test case 2: The current inventory is 20 apples and 25 bananas, and the target inventory is 20 apples and 25 bananas. Rachel does not need to order any more fruits as the current inventory already meets the target. Test case 3: The current inventory is 10 apples and 10 bananas, and the target inventory is 15 apples and 20 bananas. Rachel needs to order 5 more apples and 10 more bananas, so the total number of fruits to order is 15.","solution":"def total_fruits_to_order(test_cases): For each test case, calculate the minimum number of fruits Rachel needs to order to meet or exceed the target inventory of apples and bananas. Parameters: test_cases (list of tuple): A list of tuples where each tuple contains four integers (CA, CB, TA, TB) representing the current inventory of apples (CA) and bananas (CB) and the target inventory (TA) of apples and bananas (TB). Returns: list: A list of integers where each integer is the total number of fruits to order for each test case. res = [] for ca, cb, ta, tb in test_cases: # Calculate the required apples and bananas to meet/exceed the targets required_apples = max(0, ta - ca) required_bananas = max(0, tb - cb) # Total fruits to order total_to_order = required_apples + required_bananas # Append the result for this test case res.append(total_to_order) return res"},{"question":"You are given an array of integers representing the heights of buildings in a row, and you need to calculate the total area of the \\"skyline\\" formed by these buildings. Each building has a width of 1 unit. The skyline of a series of buildings is the silhouette formed by the outer perimeter of the buildings when viewed from a distance. The total area of the skyline is the sum of the heights of all buildings considering their widths. Constraints - All values in input are integers. - 1 ≤ N ≤ 10^5 - 1 ≤ heights[i] ≤ 10^6 Input Input is given from Standard Input in the following format: N heights_1 heights_2 ... heights_N Where: - N is the number of buildings. - heights_i is the height of the i-th building. Output Print the total area of the skyline. Examples Input 5 1 3 2 4 1 Output 11 Explanation: The total area is calculated as 1 (height of first building) + 3 (height of second building) + 2 (height of third building) + 4 (height of fourth building) + 1 (height of fifth building) = 11. Input 3 2 2 2 Output 6 Explanation: The total area is calculated as 2 + 2 + 2 = 6.","solution":"def calculate_skyline_area(heights): Given an array of integers representing the heights of buildings, returns the total area of the \\"skyline\\" formed by these buildings. return sum(heights)"},{"question":"You are given a grid of size n x m containing integers. Initially, the entire grid is filled with zeroes. You can perform the following operation any number of times: - Choose a square subgrid of size kxk (where k>=1) and increment all the elements within that subgrid by 1. Determine the minimum number of operations needed to make the final grid match the target configuration provided. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid, respectively. Each of the following n lines contains m space-separated integers, representing the target grid configuration. Output Print a single integer — the minimum number of operations needed to achieve the target grid configuration. Examples Input 3 3 1 0 1 2 1 1 2 1 2 Output 2 Input 4 4 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 Output 1 Input 2 2 3 3 3 3 Output 3 Note For the first example, one possible sequence of operations is as follows: 1. Increment the subgrid from (1,1) to (2,2) (1-based index). 2. Increment the entire grid. For the second example, one possible sequence of operations is: 1. Increment the subgrid from (2,1) to (2, 4). These operations will result in the target grid configuration.","solution":"def min_operations_to_match_grid(n, m, target): operations = 0 current_grid = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if current_grid[i][j] < target[i][j]: increment_value = target[i][j] - current_grid[i][j] operations += increment_value for x in range(i, n): for y in range(j, m): current_grid[x][y] += increment_value return operations"},{"question":"Given an integer n, you are to construct a permutation of the numbers from 1 to n such that the sum of the absolute differences between consecutive elements is minimized and also the sum of the absolute differences between consecutive elements is maximized. A permutation of the numbers from 1 to n is a sequence of length n which contains every integer from 1 to n exactly once. You have to answer t independent test cases. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The only line of each test case contains one integer n (2 ≤ n ≤ 1000) — the number of elements in the permutation. Output For each test case, print two lines. The first line contains the permutation that minimizes the sum of the absolute differences between consecutive elements. The second line contains the permutation that maximizes the sum of the absolute differences between consecutive elements. Example Input 3 5 3 4 Output 1 2 3 4 5 1 5 2 4 3 1 2 3 1 3 2 1 2 3 4 1 4 2 3 Note For the minimum sum, a natural ordered sequence (1, 2, 3, ..., n) or its reverse (n, n-1, ..., 1) will be one of the possible best sequences. For the maximum sum, an optimal strategy is to place elements to create the largest possible differences between consecutive elements, like (1, n, 2, n-1, 3, ...). This creates large differences at each step.","solution":"def minimum_permutation(n): return list(range(1, n + 1)) def maximum_permutation(n): result = [] left = 1 right = n while left <= right: if len(result) % 2 == 0: result.append(left) left += 1 else: result.append(right) right -= 1 return result def solve(test_cases): results = [] for n in test_cases: min_perm = minimum_permutation(n) max_perm = maximum_permutation(n) results.append((min_perm, max_perm)) return results"},{"question":"A company monitors the battery levels of their delivery drones. Each delivery drone has a different battery consumption rate per minute. They want to calculate the minimum battery level a drone must start with to complete a round-trip delivery. Given an integer N (number of drones) and an array battery[] of N integers representing the battery consumption rate per minute for each drone, and an integer M representing the total minutes required for a round-trip delivery, determine the minimum battery level required for each drone to complete the round-trip without running out of battery. Example 1: Input: N = 4 battery[] = {2, 3, 5, 1} M = 10 Output: 20 30 50 10 Explanation: - Drone 1 needs 2 units of battery per minute, so for 10 minutes it needs 2 * 10 = 20 units. - Drone 2 needs 3 units per minute, so for 10 minutes it needs 3 * 10 = 30 units. - Drone 3 needs 5 units per minute, so for 10 minutes it needs 5 * 10 = 50 units. - Drone 4 needs 1 unit per minute, so for 10 minutes it needs 1 * 10 = 10 units. Example 2: Input: N = 3 battery[] = {4, 6, 2} M = 8 Output: 32 48 16 Explanation: - Drone 1 needs 4 units per minute, so for 8 minutes it needs 4 * 8 = 32 units. - Drone 2 needs 6 units per minute, so for 8 minutes it needs 6 * 8 = 48 units. - Drone 3 needs 2 units per minute, so for 8 minutes it needs 2 * 8 = 16 units. Your Task: You don\'t need to read input, or print anything. You just need to complete the function minimumBattery() that takes an array battery, integer N, and integer M as parameters and returns an array of integers representing the minimum battery level required for each drone to complete the round-trip. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ battery[i] ≤ 1000 1 ≤ M ≤ 100","solution":"def minimumBattery(N, battery, M): Returns an array of minimum battery levels required for each drone to complete the round-trip. Parameters: N (int): Number of drones battery (list): List of battery consumption rates per minute for each drone M (int): Total minutes required for a round-trip delivery Returns: list: List of minimum battery levels for each drone return [rate * M for rate in battery]"},{"question":"Write a function that takes a string of words and returns the length of the shortest word(s). The string will never be empty and you do not need to account for different data types. # Example ```python find_shortest_word_length(\\"The quick brown fox\\") == 3 find_shortest_word_length(\\"Limit yourself to only what you can achieve\\") == 3 find_shortest_word_length(\\"A journey of a thousand miles begins with a single step\\") == 1 ```","solution":"def find_shortest_word_length(sentence): Returns the length of the shortest word(s) in the given sentence. words = sentence.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"A ticket counter has N service windows numbered from 1 to N . A person at the front of each window\'s queue is being served. When people arrive at the ticket counter, they will choose the window with the fewest people in line and join it at the end. In the case of multiple windows having the same shortest queue, they will choose the window with the lowest number. After being served, the person will leave the window and the next in line, if any, will be served. Once a person enters a queue, they cannot switch to another. Also, the order of people in the queue cannot be altered. Given information about the number of windows, the arrivals of the people, and the windows that completed a service, write a program to output the order of people served. Each arrival is specified by a unique identifier, and each service completion references a window number. Input The input is given in the following format. N M event_1 event_2 ... event_M The first line represents the number of windows N (1 leq N leq 10) and the number of events M (2 leq M leq 10,000). Each of the following M lines gives an event of one of the following formats: 0 window or 1 person A first number of 0 indicates that the service at window window (1 leq window leq N) has been completed. A first number of 1 indicates that a person with the identifier person (1 leq person leq 9,999) has arrived at the counter. The following constraints hold: * The identifiers for arriving people are all unique. * There is always at least one event of type 0 or 1. * No event type 0 is provided for an empty window. Output For each service completion event, output the identifier of the person served on a new line. Examples Input 3 8 1 105 1 102 1 110 0 3 1 120 0 1 0 2 0 1 Output 110 105 102 120 Input 2 6 1 500 1 600 0 1 1 700 0 2 0 1 Output 500 600 700","solution":"from collections import deque import heapq def ticket_counter(N, M, events): queues = [deque() for _ in range(N)] heap = [] serving_order = [] for i in range(N): heapq.heappush(heap, (0, i)) for event in events: e_type, value = event if e_type == 1: # Arrival queue_length, window = heapq.heappop(heap) queues[window].append(value) heapq.heappush(heap, (queue_length + 1, window)) elif e_type == 0: # Service completion person_served = queues[value - 1].popleft() serving_order.append(person_served) queue_length, window = heapq.heappop(heap) heapq.heappush(heap, (queue_length - 1, window)) return serving_order"},{"question":"Dr. Z is a botanist studying a collection of ancient plants. He has a dataset containing N plant species, each identified by a unique number. For his research, Dr. Z needs to find out the smallest difference between any two plant species numbers in his dataset. However, processing large datasets can be time-consuming, and Dr. Z needs the result as quickly as possible. Constraints The input satisfies the following conditions. * 2 ≤ N ≤ 100000 * 1 ≤ Ai ≤ 10^9 Input The integer N is given on the first line. The second line is given N integers Ai, separated by blanks, representing the numbers of the plant species. Output Output the smallest difference between any two plant species numbers in the dataset in one line. Examples Input 5 8 1 4 2 9 Output 1 Input 3 10 3 15 Output 5","solution":"def smallest_difference(n, plant_species): Returns the smallest difference between any two plant species numbers in the dataset. Args: n (int): The number of plant species. plant_species (list of int): The numbers of the plant species. Returns: int: The smallest difference between any two plant species numbers. # First, sort the list plant_species.sort() # Initialize the smallest difference as infinity min_diff = float(\'inf\') # Iterate through the sorted list to find the smallest difference for i in range(1, n): min_diff = min(min_diff, plant_species[i] - plant_species[i - 1]) return min_diff"},{"question":"Rita\'s Restaurant Orders Rita has recently started a restaurant, and she’s keeping track of the meals she serves over the course of days. She has a log that records the number of meals she served each day. Rita wants to detect any potential downward trends in her business. A downward trend is defined as a period of consecutive days where the number of meals served decreases each day compared to the previous day. For simplicity, we are only concerned with downward trends that are at least 2 days long. Given the log of meals served, can you help Rita find the longest downward trend of meals served? If there are multiple such trends with the same length, she is interested in the most recent one. ------ Input: ------ The first line of the input contains a single integer T, the number of test cases. Each test case begins with a single integer N, the number of days Rita has recorded. The next line contains N integers. The ith integer, mi, on this line represents the number of meals served on the ith day. The days are given in chronological order i.e., the first day is the earliest. ------ Output: ------ For each test case, output a single line containing the length of the longest downward trend. If there is no downward trend, print \\"NO TREND\\". ------ Constraints: ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 0 ≤ mi ≤ 1000000 (Rita\'s restaurant is popular, and she can serve many meals in a day!) ------ Sample Input 1 ------ 3 7 10 9 8 7 11 6 5 5 5 4 4 3 2 4 2 2 2 2 ------ Sample Output 1 ------ 3 2 NO TREND ------ Explanation 1 ------ In the first test case, the longest downward trend is from the first to the fourth day (10, 9, 8, 7). Any other trend is shorter. In the second test case, there are two trends of length 2 (from 5 to 4 and from 4 to 3), but we consider the second one since it is the most recent. In the third test case, there is no downward trend since Rita served the same number of meals each day.","solution":"def longest_downward_trend(T, test_cases): results = [] for i in range(T): N, meals = test_cases[i] if N < 2: results.append(\\"NO TREND\\") continue max_len = 0 current_len = 0 for j in range(1, N): if meals[j] < meals[j - 1]: current_len += 1 else: if current_len > 0: max_len = max(max_len, current_len) current_len = 0 if current_len > 0: max_len = max(max_len, current_len) if max_len == 0: results.append(\\"NO TREND\\") else: results.append(str(max_len)) return results"},{"question":"Given an array of integers and a target sum, write a function to determine if there are two distinct elements in the array whose sum equals the target. -----Constraints----- - The array\'s length is denoted by N. - 2 leq N leq 10^5 - Each element in the array is an integer between -10^5 and 10^5. - The target sum is also between -10^5 and 10^5. -----Input----- Input is given from Standard Input in the following format: N target array elements -----Output----- Output \\"YES\\" if there are two distinct elements in the array whose sum equals the target. Otherwise, output \\"NO\\". -----Sample Input----- 6 9 1 3 4 6 7 8 -----Sample Output----- YES In this example, 1 + 8 equals the target sum of 9. -----Sample Input----- 5 15 1 2 3 4 5 -----Sample Output----- NO In this example, no two distinct elements add up to the target sum of 15.","solution":"def has_pair_with_sum(n, target, arr): Determines if there are two distinct elements in the array whose sum equals the target. Parameters: n (int): The length of the array target (int): The target sum arr (list): The array of integers Returns: str: \\"YES\\" if there are two distinct elements in the array whose sum equals the target, otherwise \\"NO\\". seen = set() for number in arr: complement = target - number if complement in seen: return \\"YES\\" seen.add(number) return \\"NO\\" # To read input from standard input, uncomment below lines # import sys # input = sys.stdin.read # data = input().split() # n = int(data[0]) # target = int(data[1]) # arr = list(map(int, data[2:])) # print(has_pair_with_sum(n, target, arr))"},{"question":"A company is building a task scheduler which will execute tasks in a multithreaded environment. The scheduler must ensure that certain tasks are always executed before others due to dependencies between them. Each task is represented by a unique integer identifier, and its dependencies are represented as a list of pairs, where the first task in the pair must be completed before the second task can start. Your objective is to determine an order in which the tasks can be executed to satisfy all dependencies. If such an order does not exist, output \\"NOT POSSIBLE\\". Input The input consists of multiple lines: The first line contains an integer n (1 ≤ n ≤ 100), the number of tasks. The second line contains an integer d (0 ≤ d ≤ 1000), the number of dependencies. The next d lines, each contain two integers a and b (1 ≤ a, b ≤ n), representing a dependency that task a must be completed before task b. Output Output a single line with the order in which the tasks should be executed. If there are multiple valid orderings, output any one of them. If it\'s not possible to execute the tasks in a way that meets the dependencies, output \\"NOT POSSIBLE\\". Example Input 3 2 1 2 2 3 Output 1 2 3 Input 3 3 1 2 2 3 3 1 Output NOT POSSIBLE","solution":"from collections import defaultdict, deque def find_task_order(n, d, dependencies): # Initialization of graph and in-degree counter graph = defaultdict(list) in_degree = [0] * n # Building the graph and in-degrees for a, b in dependencies: graph[a - 1].append(b - 1) in_degree[b - 1] += 1 # Queue for tasks with no dependencies queue = deque([node for node in range(n) if in_degree[node] == 0]) order = [] while queue: current = queue.popleft() order.append(current + 1) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if we are able to process all tasks if len(order) == n: return \' \'.join(map(str, order)) else: return \\"NOT POSSIBLE\\""},{"question":"Anna has a special recipe for baking her famous cookies, but she needs to ensure that she follows the instructions exactly. One crucial part of the recipe involves preparing an array of ingredients precisely according to the instructions. She has an array `a` of length `N` representing different amounts of ingredients. The recipe specifies `M` different rules for the ingredients which indicate how much of an ingredient can be increased or decreased. Each of the `M` rules is of the form `[l, r, x]`, which means that for every ingredient index `i` in the array from `l` to `r` (1-based inclusive), the amount can be increased or decreased by `x` units. Anna wants to know if it is possible to make the array of ingredients exactly match another target array `b` of the same length after applying the `M` rules some number of times (possibly zero). Write a program to determine if the target array `b` can be obtained from array `a` using the given rules. Input The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 1000) — the length of the array and the number of rules, respectively. The second line contains `N` integers — the initial array `a`. The third line contains `N` integers — the target array `b`. Each of the next `M` lines contains three integers `l`, `r`, and `x` (1 ≤ l ≤ r ≤ N, 1 ≤ x ≤ 100) — representing a rule. Output Output \\"YES\\" if it is possible to obtain array `b` from array `a` using the given rules, otherwise output \\"NO\\". Examples Input 5 2 1 3 5 7 9 3 5 7 5 9 2 4 2 1 5 1 Output YES Input 4 1 2 2 4 4 3 3 5 5 1 2 1 Output NO","solution":"def can_transform(N, M, a, b, rules): # Calculate the difference array diff = [b[i] - a[i] for i in range(N)] for l, r, x in rules: l -= 1 # Convert to 0-based index r -= 1 # Convert to 0-based index for i in range(l, r+1): if diff[i] % x != 0: return \\"NO\\" diff[i] = 0 # After appyling all applicable rules, # if some elements are still non-zero, then it is not possible. if any(diff): return \\"NO\\" return \\"YES\\""},{"question":"You are given a string containing square brackets `[` and `]`, and possibly other characters. Your task is to determine whether the brackets in the string are balanced. A string is considered balanced if each opening bracket `[` has a corresponding closing bracket `]` and the brackets are properly nested. For example, in the string \\"a[b[c]d]e\\", the brackets are balanced, whereas in the string \\"a[b[c]d\\" they are not. # Input A single string `s` of length between 1 and 1000, containing square brackets `[` and `]`, and other characters. # Output Print \\"Balanced\\" if the brackets in the string are balanced, otherwise print \\"Not Balanced\\". # Examples Input ``` a[b[c]d]e ``` Output ``` Balanced ``` Input ``` a[b[c]d ``` Output ``` Not Balanced ``` Input ``` abcde ``` Output ``` Balanced ``` # Note Consider only the square brackets when determining if the string is balanced. Other characters can be ignored.","solution":"def is_balanced(s): Determines if the string s has balanced square brackets `[` and `]`. Parameters: s (str): The input string containing square brackets and other characters. Returns: str: \\"Balanced\\" if the brackets are balanced, otherwise \\"Not Balanced\\". stack = [] for char in s: if char == \'[\': stack.append(char) elif char == \']\': if not stack: return \\"Not Balanced\\" stack.pop() return \\"Balanced\\" if not stack else \\"Not Balanced\\""},{"question":"Given a number N, compute the product of the squares of the first N natural numbers (i.e., 1^{2} * 2^{2} * 3^{2} * ... * N^{2}). Example 1: Input: N = 3 Output: 36 Explanation: The product is calculated as 1^{2} * 2^{2} * 3^{2} = 1 * 4 * 9 = 36. Example 2: Input: N = 4 Output: 576 Explanation: The product is calculated as 1^{2} * 2^{2} * 3^{2} * 4^{2} = 1 * 4 * 9 * 16 = 576. Your Task: You do not need to read input or print anything. Your task is to complete the function productOfSquares() which takes an integer N as input parameter and returns the product of the squares of the first N natural numbers. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 20","solution":"def productOfSquares(N): Computes the product of the squares of the first N natural numbers. Parameters: N (int): The number up to which squares of natural numbers are considered. Returns: int: The product of the squares. product = 1 for i in range(1, N + 1): product *= i * i return product"},{"question":"Alice is an avid reader and has recently started a book club. She has a peculiar way of selecting books to read: she only reads books whose total page count is a prime number. To help her streamline her book selection process, she needs you to write a program that helps her determine if the total page count of a book is a prime number. She will input the total page count of several books, and for each book, your program should determine if the page count is a prime number. -----Input----- The first line of the input contains a single integer 1 leq T leq 100, the number of books. The next T lines each contain a single integer 1 leq P leq 10^6, the total page count of each book. -----Output----- For each book, output \\"YES\\" if the total page count is a prime number, and \\"NO\\" otherwise. -----Examples----- Sample Input 1: 3 29 15 23 Sample Output 1: YES NO YES Sample Input 2: 2 10 17 Sample Output 2: NO YES","solution":"def is_prime(n): Determines if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_book_selector(T, page_counts): For each page count, determines if it is a prime number. results = [] for pages in page_counts: if is_prime(pages): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage for book page counts: # T = 3 # page_counts = [29, 15, 23] # prime_book_selector(T, page_counts) => [\'YES\', \'NO\', \'YES\']"},{"question":"ChefCorp has a unique badge system that tracks the activity of its employees. Each employee wears a badge that records their entry and exit time from the office. The system keeps a log of these records in the format of a list of tuples, where each tuple contains the employee ID, the type of action (entry or exit), and the timestamp of the action. The badge system is configured such that each employee can have multiple entries and exits in a day. Due to a data leakage, ChefCorp loses the staff employee activity log backup and only retains the initial record\'s log. However, the log now has entries missing or misplaced. Your task is to analyze the partial log and determine if there are any possible discrepancies, meaning if it’s impossible to reconstruct the employees\' correct entry-exit sequences based on the given data. Discrepancies occur if it is impossible for any employee to have their actions follow a valid sequence of entry and exit. An employee\'s actions cannot have consecutive entries or exits. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the number of log entries. - The next N lines contain a tuple of three elements: * An integer ID denoting the employee ID (1 ≤ ID ≤ 1000). * A string action denoting the type of action — \\"entry\\" or \\"exit\\". * A string timestamp denoting the time in a 24-hour format \\"HH:MM\\". ------ Output Format ------ - For each test case, output \\"NO\\" if there is a discrepancy; otherwise, output \\"YES\\". ----- Sample Input 1 ----- 3 4 1 entry 09:00 2 entry 09:10 1 exit 17:00 2 entry 16:00 5 3 entry 08:00 3 exit 12:00 3 entry 13:00 3 exit 17:00 4 entry 09:45 3 4 entry 09:00 4 entry 12:00 4 exit 18:00 ----- Sample Output 1 ------ NO YES NO ------ Explanation 1 ------ Test case 1: Employee 2 has an entry log (for 16:00) without a corresponding exit from the previous entry, indicating a discrepancy. Test case 2: Employee 3 follows a valid series of entry and exit logs and Employee 4 only logs entry, indicating no discrepancy for the information given. Test case 3: Employee 4 has two consecutive entry logs (09:00 and 12:00) without an exit in between, indicating a discrepancy. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 Each log entry will have unique timestamps within a test case.","solution":"def detect_discrepancies(test_cases): results = [] for log_entries in test_cases: id_status = {} discrepancy = False for log in log_entries: employee_id, action = log if action == \\"entry\\": if employee_id in id_status and id_status[employee_id] == \\"entry\\": discrepancy = True break id_status[employee_id] = \\"entry\\" elif action == \\"exit\\": if employee_id not in id_status or id_status[employee_id] == \\"exit\\": discrepancy = True break id_status[employee_id] = \\"exit\\" if discrepancy: results.append(\\"NO\\") else: results.append(\\"YES\\") return results # Main function to convert input data to the appropriate format def analyze_badge_system(T, data): test_cases = [] data_index = 0 for _ in range(T): N = data[data_index] logs = [] for i in range(N): log_entry = (data[data_index + 1 + i * 3], data[data_index + 1 + i * 3 + 1]) logs.append(log_entry) test_cases.append(logs) data_index += 1 + N * 3 return detect_discrepancies(test_cases)"},{"question":"Write a function that rotates a given square matrix 90 degrees clockwise. The input to your function will be a 2D list representing the matrix. You can assume the matrix will always be non-empty and have the same number of rows and columns. For example, rotating the matrix: | 1 2 3 | | 4 5 6 | | 7 8 9 | should produce: | 7 4 1 | | 8 5 2 | | 9 6 3 |","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given square matrix 90 degrees clockwise. Parameters: matrix (list of list of int): The square matrix to rotate. Returns: list of list of int: The rotated matrix. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - i - 1] = matrix[i][j] return rotated_matrix"},{"question":"A survey team needs to create a new power grid in a disaster-affected city. The city can be represented as an n x m grid of plots. Some plots already have power stations, some are empty, and others contain obstacles that cannot be used for placing power stations. During each unit of time, a power station spreads electricity to all its 4 adjacent plots (up, down, left, and right). The power grid must be configured to ensure maximum electricity coverage of the empty plots in the least amount of time. Your task is to determine the minimum amount of time required to achieve this. Input The first line of input contains two integers n and m (1 <= n, m <= 100), representing the number of rows and columns in the grid, respectively. The next n lines each contain m characters that describe the state of each plot: - \'P\' indicates a plot with an existing power station. - \'E\' indicates an empty plot. - \'O\' indicates an obstacle plot. Output Print a single integer, the minimum amount of time required to cover all empty plots with electricity. If not all empty plots can be covered, return -1. Example Input: 4 5 P E E O E E O E E E E E O P O E O E E E Output: 3 Explanation: 1. At time t=0, the power spreads from (0,0) and (3,3) 2. At time t=1, the power spreads to adjacent plots 3. At time t=2, the power spreads further 4. At time t=3, all empty plots are covered, thus minimum time = 3","solution":"from collections import deque def minimum_time_to_cover_all_plots(n, m, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque() empty_plots = 0 for i in range(n): for j in range(m): if grid[i][j] == \'P\': queue.append((i, j, 0)) elif grid[i][j] == \'E\': empty_plots += 1 if empty_plots == 0: return 0 while queue: x, y, time = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'E\': grid[nx][ny] = \'P\' empty_plots -= 1 if empty_plots == 0: return time + 1 queue.append((nx, ny, time + 1)) return -1"},{"question":"Given a list of integers representing scores of students in a particular subject, return the number of students who scored above average. Example 1: Input: scores = [45, 67, 89, 34, 56] Output: 2 Explanation: The average score is (45 + 67 + 89 + 34 + 56) / 5 = 58.2. Students with scores 67 and 89 scored above average. Example 2: Input: scores = [90, 80, 70, 60, 50] Output: 2 Explanation: The average score is (90 + 80 + 70 + 60 + 50) / 5 = 70. Students with scores 90 and 80 scored above average. Your task: You do not need to read input or print anything. Your task is to complete the function countAboveAverage() that takes the list of scores as input and returns the number of scores above the average. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(scores) ≤ 10^5 0 ≤ scores[i] ≤ 100","solution":"def countAboveAverage(scores): This function takes a list of scores and returns the number of scores that are above the average score. Args: scores (list of int): List of scores. Returns: int: Number of scores above the average. if not scores: return 0 average_score = sum(scores) / len(scores) count_above_average = sum(score > average_score for score in scores) return count_above_average"},{"question":"You have been given an array representing a sequence of coins with two sides, heads (H) and tails (T). Each coin can be flipped from heads to tails or vice versa. Your task is to determine the minimum number of consecutive coins that need to be flipped to make all coins show the same face. To find the solution, compute the minimum number of flips required to achieve either: 1. All coins show heads. 2. All coins show tails. Example 1: Input: coins = [\'H\', \'T\', \'H\', \'H\', \'T\'] Output: 2 Explanation: By flipping the second and third coins from the right (\'T\' to \'H\' and \'T\' to \'H\'), all coins will show heads. Example 2: Input: coins = [\'T\', \'T\', \'H\', \'H\', \'T\', \'H\'] Output: 2 Explanation: By flipping the first two coins from the right (\'H\' to \'T\' and \'H\' to \'T\'), all coins will show tails. Example 3: Input: coins = [\'H\', \'H\', \'H\', \'T\', \'T\', \'H\'] Output: 1 Explanation: By flipping the last coin from tails to heads, all coins will show heads. Note: - The input array size is in the range of [1, 10000]. - Each element in the input array is either \'H\' or \'T\'.","solution":"def min_flips_to_unify(coins): Determines the minimum number of consecutive flips needed to make all coins the same. :param coins: List of \'H\' and \'T\' representing the sides of the coins. :return: Minimum number of flips required. # Count the number of heads and tails heads_count = coins.count(\'H\') tails_count = len(coins) - heads_count # As all other coins are tails if not heads # Minimum flips would be the lesser of heads_count or tails_count return min(heads_count, tails_count)"},{"question":"In a game show, participants are shown a string consisting of lowercase English letters. They have to perform a series of Q operations on the string. There are two types of operations: 1. `1 l r` - Count the number of distinct characters in the substring from index `l` to `r` (0-based indexing). 2. `2 k c` - Replace the character at index `k` with character `c`. Your task is to handle these queries efficiently and output the result of all type 1 queries. -----Input----- The first line contains a string `s` of length `n` (1 ≤ n ≤ 100,000). The second line contains an integer `Q` (1 ≤ Q ≤ 100,000), representing the number of operations. Each of the next `Q` lines contains a query in one of the formats described above. -----Output----- For each type 1 query, output the number of distinct characters in the specified substring. Each result should be printed on a new line. -----Examples----- Input abacaba 5 1 0 6 2 2 d 1 0 6 2 6 e 1 0 6 Output 3 4 5 Input abc 3 1 0 2 2 1 x 1 0 2 Output 3 3","solution":"def count_distinct_characters(s, queries): Handles a list of queries on a given string. s: Initial string queries: List of queries of the form `1 l r` or `2 k c` Returns a list of results for `1 l r` queries result = [] string_list = list(s) for query in queries: query_parts = query.split() if query_parts[0] == \'1\': # \'1 l r\' query l, r = int(query_parts[1]), int(query_parts[2]) substring = string_list[l:r+1] distinct_count = len(set(substring)) result.append(distinct_count) elif query_parts[0] == \'2\': # \'2 k c\' query k, c = int(query_parts[1]), query_parts[2] string_list[k] = c return result"},{"question":"Write a program that computes the minimum spanning tree (MST) of a given graph and returns its weight. A minimum spanning tree of a graph is a subset of the edges that connect all the vertices together, without any cycles and with the minimum possible total edge weight. # Input The program receives the graph as input formatted as follows: - The first line contains two integers **n** and **m**, where **n** is the number of vertices (2 ≤ n ≤ 500) and **m** is the number of edges (1 ≤ m ≤ 10000). - The next **m** lines each contain three integers **u**, **v**, and **w** (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), representing an edge between vertices **u** and **v** with weight **w**. The graph can be disconnected. It is guaranteed that the graph is undirected. # Output The program should output a single integer which is the weight of the MST. If the graph is disconnected, output \\"DISCONNECTED\\". # Example Input: ``` 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 ``` Output: ``` 6 ``` # Explanation The graph is as follows: - (1 -- 2) with weight 1 - (1 -- 3) with weight 4 - (2 -- 3) with weight 2 - (2 -- 4) with weight 3 - (3 -- 4) with weight 5 The Minimum Spanning Tree (MST) can be achieved by edges (1-2), (2-3), and (2-4) with total weight 1+2+3 = 6.","solution":"def find_mst_weight(n, m, edges): Computes the weight of the minimum spanning tree (MST) using Kruskal\'s algorithm. If the graph is disconnected, returns \\"DISCONNECTED\\". # Helper function to find the root of a set def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to perform union of two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Initialize the data structures for Kruskal\'s algorithm parent = [i for i in range(n)] rank = [0] * n # Sort all edges by weight edges.sort(key=lambda x: x[2]) mst_weight = 0 edges_included = 0 # Iterate through sorted edges for u, v, w in edges: u_root = find(parent, u - 1) v_root = find(parent, v - 1) # If including this edge does not cause a cycle if u_root != v_root: union(parent, rank, u_root, v_root) mst_weight += w edges_included += 1 # If we have included n-1 edges, we have our MST if edges_included == n - 1: return mst_weight # If not all vertices are included, the graph is disconnected return \\"DISCONNECTED\\""},{"question":"# Description: Given two arrays `arr1` and `arr2` of the same length (length >= 2), where all the elements in these arrays are integers, find and return an array of pairs `[element1, element2]`. Here each `element1` comes from `arr1` and `element2` comes from `arr2`. Each pair should satisfy the following conditions: 1. The sum of the pair is divisible by a given integer `k`. 2. Each element from both arrays must be used exactly once. If it is not possible to form the pairs under the given conditions, return `None`. Input: - Two integer arrays `arr1` and `arr2` of equal length (length >= 2). - An integer `k`. Output: - An array of pairs `[element1, element2]` where the sum `(element1 + element2) % k == 0`. - If no such pairing is possible, return `None`. Example: ```python arr1 = [1, 2, 3, 4] arr2 = [5, 6, 7, 8] k = 5 Output: [[1, 4], [2, 3], [3, 2], [4, 1]] ``` In this example, each element from `arr1` and `arr2` is used exactly once, and the sum of each pair is divisible by 5: (1 + 4) % 5 == 0, (2 + 3) % 5 == 0, (3 + 2) % 5 == 0, (4 + 1) % 5 == 0 Function Signature: ```python def find_pairs(arr1, arr2, k): pass ``` Constraints: 1. The lengths of both arrays will be between 2 and 100 inclusive. 2. The elements of both arrays will be between -10^3 and 10^3 inclusive. 3. `k` will be a positive integer between 1 and 100 inclusive. Notes: - If there are multiple valid solutions, return any one of them. - You can modify the original arrays if necessary.","solution":"def find_pairs(arr1, arr2, k): Finds pairs such that each pair consists of one element from arr1 and one element from arr2, and their sum is divisible by k. Args: arr1 (list of int): The first array of integers. arr2 (list of int): The second array of integers. k (int): The divisor. Returns: list of [int, int] or None: List of pairs or None if no valid pairing exists. from itertools import permutations for perm in permutations(arr2): if all((a + b) % k == 0 for a, b in zip(arr1, perm)): return [[a, b] for a, b in zip(arr1, perm)] return None"},{"question":"\\"Warehouse Robot Path\\" A warehouse robot is navigating a grid to pick up packages. The warehouse is represented as an `n x m` grid. The robot starts at the upper-left corner of the grid and needs to reach the lower-right corner. The robot can only move to the right or downward. The grid contains obstacles represented by the value `1`, and free spaces represented by the value `0`. The robot cannot move into a cell with an obstacle. Determine the number of unique paths the robot can take to reach its destination. -----Input----- The first line contains two integers `n` and `m` (1 le n, m le 100) representing the dimensions of the grid. The next `n` lines each contain `m` integers (either `0` or `1`), where `1` represents an obstacle and `0` represents a free space. -----Output----- Print a single integer which is the number of unique paths from the upper-left corner to the lower-right corner of the grid. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 Note that in the first example, there are two unique paths for the robot: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second example, there is only one path: - Down -> Down -> Right -> Right","solution":"def num_unique_paths(grid): Determine the number of unique paths in a grid from the top-left to the bottom-right corner, navigating only down or right, while avoiding obstacles. n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # starting point for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage: # grid = [ # [0, 0, 0], # [0, 1, 0], # [0, 0, 0] # ] # print(num_unique_paths(grid)) # Output should be 2"},{"question":"You are given a string s consisting of lowercase and uppercase Latin characters. Your task is to determine if it is possible to make the given string a palindrome by removing at most one character. -----Input----- The only line of input contains a string s of length between 1 and 10^5 consisting of lowercase and uppercase Latin letters. -----Output----- Print \\"YES\\" (without the quotes) if it is possible to make the string a palindrome by removing at most one character, and \\"NO\\" otherwise. -----Examples----- Input abca Output YES Input racecar Output YES Input abcdef Output NO -----Note----- In the first sample test, removing the character \'c\' makes the string \\"aba\\", which is a palindrome. In the second sample test, the string \\"racecar\\" is already a palindrome, so no characters need to be removed. In the third sample test, no single character removal can make the string \\"abcdef\\" a palindrome.","solution":"def is_almost_palindrome(s): Determines if it\'s possible to make the given string s a palindrome by removing at most one character. def is_palindrome_range(i, j): Helper function to check if the substring s[i:j+1] is a palindrome. return all(s[k] == s[j-k+i] for k in range(i, (i+j)//2 + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check by removing either left or right character return is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1) left, right = left + 1, right - 1 return True def almost_palindrome(s): Outputs \\"YES\\" if it is possible to make the string s a palindrome by removing at most one character, and \\"NO\\" otherwise. if is_almost_palindrome(s): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function `findLongestWord` that takes a single parameter `sentence` (string). The function should return the longest word in the string. In case of a tie, return the word which appears first. Consider words to be sequences of alphabetic characters bounded by non-alphabetic characters or string boundaries. Examples: ``` \\"Hello world\\" --> \\"Hello\\" \\"A cat ran fast\\" --> \\"fast\\" \\"Python\'s syntax is simple yet powerful.\\" --> \\"powerful\\" \\"Don\'t stop believing.\\" --> \\"believing\\" ``` Note: Punctuation and spaces are not part of words. Words are case-insensitive for comparison purposes but should retain their original case in the output.","solution":"def findLongestWord(sentence): Returns the longest word in the sentence. In case of a tie, returns the word which appears first. Words are sequences of alphabetic characters bounded by non-alphabetic characters or string boundaries. Parameters: sentence (str): A string containing the sentence to search. Returns: str: The longest word. import re words = re.findall(r\\"[a-zA-Z]+\\", sentence) longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"You are provided with a 2D grid of size `n x m` where each cell is either an open space (\'.\') or a wall (\'#\'). You are located at the top-left corner of the grid and need to reach the bottom-right corner. You can move up, down, left, or right. Your task is to find the number of distinct paths from the top-left to the bottom-right corner that do not pass through any walls. Assume that it is always possible to reach the bottom-right corner from the top-left corner. ----- Input ----- The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. The next n lines contain m characters each, representing the grid. Each character is either \'.\' (an open space) or \'#\' (a wall). ----- Output ----- Print a single integer — the number of distinct paths from the top-left to the bottom-right corner that do not pass through any walls. ----- Example ----- Input 3 3 ... .#. ... Output 2 Input 2 2 .# .. Output 1 ----- Note ----- In the first example, the two distinct paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, the only path is: 1. Down -> Right -> Right -> Down","solution":"def count_paths(grid): n = len(grid) m = len(grid[0]) # Create a 2D list to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # Start position has 1 way to stand on itself dp[0][0] = 1 if grid[0][0] == \'.\' else 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # Return the number of ways to reach the bottom-right corner return dp[-1][-1]"},{"question":"Implement the class `MaxQueue` that supports the following methods: 1. `enqueue(int value)` Adds the specified value to the end of the queue. 2. `dequeue()` Removes the element from the front of the queue and returns it. It is guaranteed that the function will not be called if the queue is empty. 3. `getMax()` Returns the maximum value currently in the queue. It is guaranteed that the function will not be called if the queue is empty. Example: Input [\\"MaxQueue\\", \\"enqueue\\", \\"enqueue\\", \\"getMax\\", \\"enqueue\\", \\"dequeue\\", \\"getMax\\"] [[], [1], [2], [], [3], [], []] Output [null, null, null, 2, null, 1, 3] Explanation MaxQueue maxQueue = new MaxQueue(); maxQueue.enqueue(1); // maxQueue is [1] maxQueue.enqueue(2); // maxQueue is [1, 2] maxQueue.getMax(); // return 2 maxQueue.enqueue(3); // maxQueue is [1, 2, 3] maxQueue.dequeue(); // return 1 and maxQueue is [2, 3] maxQueue.getMax(); // return 3 Constraints: - There will be at most 10^4 operations considering all the methods. - -10^5 <= value <= 10^5","solution":"from collections import deque class MaxQueue: def __init__(self): self.queue = deque() self.max_queue = deque() def enqueue(self, value): self.queue.append(value) while self.max_queue and self.max_queue[-1] < value: self.max_queue.pop() self.max_queue.append(value) def dequeue(self): value = self.queue.popleft() if value == self.max_queue[0]: self.max_queue.popleft() return value def getMax(self): return self.max_queue[0]"},{"question":"There are various methods to define and determine equivalence between strings in programming. One intriguing method is to group strings such that each group has exactly the same \\"shift\\" sequence. A shift is defined as moving each character of a string to the left by one position, with the first character moving to the end of the string. For example, shifting the string \\"abc\\" results in \\"bca\\", and shifting a second time results in \\"cab\\". Two strings are considered equivalent if they can be transformed into the same string using any number of shifts. For instance, \\"abc\\" and \\"bca\\" are equivalent because shifting \\"abc\\" once gives \\"bca\\". Given a list of strings, your task is to determine the number of unique groups of equivalent strings. Implement a function `num_unique_groups(strings: List[str]) -> int` which takes a list of strings and returns the number of unique groups of equivalent strings. # Input - List of strings, with each string consisting of lowercase English letters. - The maximum length of any string is 50. - The maximum number of strings in the list is 1000. # Output - An integer representing the number of unique groups of equivalent strings. # Examples ```python assert num_unique_groups([\\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"yzx\\"]) == 2 assert num_unique_groups([\\"aaa\\", \\"aa\\", \\"a\\", \\"mmmm\\", \\"mmm\\"]) == 5 assert num_unique_groups([\\"abcd\\", \\"bcda\\", \\"cdab\\", \\"dabc\\", \\"efgh\\", \\"fgh\\", \\"gh\\"]) == 4 ``` # Constraints 1. All strings are of lowercase English alphabet. 2. Length of each string does not exceed 50. 3. Total number of strings in the list does not exceed 1000. # Notes - Consider using a normalized form of each string to identify its equivalence class. - A string with length `n` will have exactly `n` different possible shifts including itself. Solution must take this into account to determine equivalence efficiently.","solution":"from typing import List def num_unique_groups(strings: List[str]) -> int: def normalize(s): return min(s[i:] + s[:i] for i in range(len(s))) normalized_strings = {normalize(s) for s in strings} return len(normalized_strings)"},{"question":"In the world of Gridonia, there are n cities arranged in a grid of n x n cells. Each cell represents a city, and you can move between adjacent cells (cities) horizontally or vertically but not diagonally. A new transportation system has been established where you can build highways between any two cities. The cost to build a highway between two cities is proportional to the Manhattan distance between them. The transportation authority wants your help to design the transportation system efficiently. Your task is to determine the minimum total cost required to build highways such that there is a path between any two cities. Input The first line contains a single integer n (1 ≤ n ≤ 1000) representing the dimensions of the grid. Output Print a single integer — the minimum total cost required to ensure connectivity between all cities. Example Input ``` 2 ``` Output ``` 4 ``` Input ``` 3 ``` Output ``` 12 ``` Note Explanation of the first example: For a grid of 2 x 2, you can choose to connect the following cities: - Connect (1,1) to (1,2) with a cost of 1 - Connect (1,2) to (2,2) with a cost of 1 - Connect (2,2) to (2,1) with a cost of 1 - Connect (2,1) to (1,1) with a cost of 1 Total cost = 1 + 1 + 1 + 1 = 4 Explanation of the second example: For a grid of 3 x 3, one possible way to connect all cities with minimum cost is by connecting: - Connect (1,1) to (1,2) with a cost of 1 - Connect (1,2) to (1,3) with a cost of 1 - Connect (1,3) to (2,3) with a cost of 1 - Connect (2,3) to (3,3) with a cost of 1 - Connect (3,3) to (3,2) with a cost of 1 - Connect (3,2) to (3,1) with a cost of 1 - Connect (3,1) to (2,1) with a cost of 1 - Connect (2,1) to (1,1) with a cost of 1 - Connect (1,1) to (2,2) with a cost of 1 - Connect (2,2) to (3,3) with a cost of 1 Total cost = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 12","solution":"def min_cost(n): Returns the minimum total cost required to build highways such that there is a path between any two cities in a grid of size n x n. # Minimum cost for a grid of size n x n is n * (n - 1) * 2 # This is because in both horizontal and vertical directions, you need (n - 1) roads for each row/column return n * (n - 1) * 2"},{"question":"A `digit root` of a non-negative integer is defined as follows: continuously sum the digits of the number until you get a single digit. For example, the digit root of 12345 is calculated as 1 + 2 + 3 + 4 + 5 = 15, then 1 + 5 = 6. Therefore, the digit root of 12345 is 6. Write a function that takes an integer `n` as input and returns the digit root of `n`. Ensure your function handles very large values of `n` efficiently. Examples: - The digit root of 9875 is 2 (9+8+7+5=29, 2+9=11, 1+1=2). - The digit root of 0 is 0. - The digit root of 9999 is 9.","solution":"def digit_root(n): Returns the digit root of the non-negative integer n. if n == 0: return 0 return 1 + (n - 1) % 9"},{"question":"Farmer John has a row of cows, each with a certain amount of milk production capacity in liters per hour. He wants to optimize the total milk output by choosing a contiguous subarray of cows such that the sum of their milk production capacities is maximized. You are given an array A of n integers where each element represents the milk production capacity of a cow in the row. Find the maximum sum of milk production capacities that can be obtained from a contiguous subarray. ----- **Input** The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of cows. The second line of input contains n integers A[i] (−10^4 ≤ A[i] ≤ 10^4) — the milk production capacities of the cows. ----- **Output** Print one integer: the maximum sum of milk production capacities of a contiguous subarray of cows. ----- **Examples** **Input** 6 -2 1 -3 4 -1 2 1 -5 4 **Output** 6 **Input** 5 1 2 3 4 -10 **Output** 10","solution":"def max_subarray_sum(A): Returns the maximum sum of milk production capacities of a contiguous subarray. max_current = max_global = A[0] for value in A[1:]: max_current = max(value, max_current + value) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that takes a string of lowercase letters and returns the length of the longest substring without repeating characters. The function should be optimized for performance, ideally running in linear time. # Input A single string `s` of lowercase letters, where (1 leq |s| leq 10^5). # Output An integer representing the length of the longest substring without repeating characters. # Example Input ``` abcabcbb ``` Output ``` 3 ``` Input ``` bbbbb ``` Output ``` 1 ``` Input ``` pwwkew ``` Output ``` 3 ``` # Explanation 1. In the first example, the answer is \\"abc\\" with length 3. 2. In the second example, the answer is \\"b\\" with length 1. 3. In the third example, the answer is \\"wke\\" with length 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Chef is preparing for a large banquet and wants to impress the guests with his desserts. He decides to create a special type of dessert tower consisting of multiple layers of different fruits. Each fruit type has a specific sweetness level, and a valid dessert tower must follow a non-decreasing order of sweetness levels up the tower. For example, if there are fruits with sweetness levels 1, 2, and 3, the only valid towers include (1), (1, 2), (1, 3), (2, 3), (1, 2, 3), and so on. Chef wants to know the total number of unique valid towers he can build with the given fruits. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - The first line of each test case contains a single integer N denoting the number of fruits. - The second line contains N space-separated integers F1 F2 … FN representing sweetness levels of each fruit. -----Output:----- For each test case, print a single line containing the total number of unique valid dessert towers. -----Constraints :----- - 1 leq T leq 10^5 - 1 leq N leq 15 - 1 leq F1, F2, ..., FN leq 100 -----Sample Input:----- 2 3 1 2 3 3 2 3 1 -----Sample Output:----- 7 7 -----Explanation:----- For the first testcase: The valid towers are: (1), (2), (3), (1, 2), (1, 3), (2, 3), (1, 2, 3). Thus the output is 7. For the second testcase: The valid towers are same due to sorting: (1), (2), (3), (1, 2), (1, 3), (2, 3), (1, 2, 3). Thus the output is 7.","solution":"from itertools import combinations def count_valid_towers(fruits): Given a list of fruits with their sweetness levels, count the number of valid towers following non-decreasing order of sweetness levels. # Sort the sweetness levels to facilitate combination generation fruits.sort() n = len(fruits) total_towers = 0 # Generate all non-empty subsets of the sorted sweetness levels for i in range(1, n + 1): total_towers += len(list(combinations(fruits, i))) return total_towers def solve_dessert_towers(test_cases): results = [] for fruits in test_cases: results.append(count_valid_towers(fruits)) return results"},{"question":"Marta recently started a new hobby of collecting rare stones. In her collection, each stone can have different colored markings or none at all. She wants to sort her collection based on the specific colors of the markings on the stones. She created a set of rules to sort the stones: 1. Stones with no markings should come first. 2. Stones with red markings should come next. 3. Stones with green markings should come next. 4. Stones with blue markings should come next. 5. Stones with multiple colors in their markings should come last. Given an array of collecting the markings of each stone, where `\\"\\"` represents no markings, `\\"red\\"`, `\\"green\\"`, and `\\"blue\\"` represent those specific colored markings, and any other string represents multiple colors, write a program that sorts Marta\'s stones based on the given rules. -----Input----- The input consists of a single line containing a series of strings separated by spaces. Each string represents the markings of a stone and will be at most 20 lowercase letters long. -----Output----- The output should be the list of strings sorted according to the given rules, separated by spaces. -----Examples----- Sample Input 1: red green blue red green Sample Output 1: red red green green blue Sample Input 2: fav yellow green blue red purple Sample Output 2: red green blue fav yellow purple","solution":"def sort_stones(stones): Sort the stones based on specific rules. Parameters: stones (list of str): List of stone markings. Returns: list of str: Sorted list of stone markings. def sorting_key(stone): if stone == \\"\\": return 0 elif stone == \\"red\\": return 1 elif stone == \\"green\\": return 2 elif stone == \\"blue\\": return 3 else: return 4 stones.sort(key=sorting_key) return stones"},{"question":"Mirko loves to play with sequences of numbers. He recently learned about the concept of subarrays and is fascinated by them. A subarray is a contiguous part of an array. Mirko has an array of integers and he wonders how many subarrays have a sum that equals a given number S. Your task is to help Mirko and write a program that counts such subarrays. -----Input----- The first line contains two integers n and S (1 le n le 2000, -10^9 le S le 10^9) — the number of elements in the array and the desired sum of the subarray, respectively. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Print a single integer — the number of subarrays whose sum is equal to S. -----Examples----- Input 5 5 1 2 3 4 5 Output 2 Input 3 0 1 -1 1 Output 2","solution":"def count_subarrays_with_sum(array, S): Returns the number of subarrays whose sum is equal to S. count = 0 n = len(array) # Using a dictionary to store the sum frequency sum_frequency = {0: 1} current_sum = 0 for num in array: current_sum += num if (current_sum - S) in sum_frequency: count += sum_frequency[current_sum - S] if current_sum in sum_frequency: sum_frequency[current_sum] += 1 else: sum_frequency[current_sum] = 1 return count"},{"question":"You are given an array of integers and a target integer. You need to determine whether there are two distinct elements in the array that sum up to the target value. If such a pair exists, return the indices of those two elements. If not, return -1. Input - An integer n (the number of elements in the array). - An integer target (the sum to find). - A single line containing n space-separated integers representing the array. Output - If a pair exists, return the indices of the two elements (1-based index). - If no such pair exists, return -1. Note - Each test case is guaranteed to have exactly one solution. Examples Input 5 9 2 7 11 15 1 Output 1 2 Input 4 6 3 2 4 5 Output 2 3","solution":"def two_sum(n, target, array): Given an array of integers and a target integer, determine whether there are two distinct elements in the array that sum up to the target value. Parameters: n (int): Number of elements in the array target (int): Target sum to find array (list): List of integers Returns: tuple: Indices of the two elements that sum up to the target (1-based index) or -1 if no such pair exists. index_map = {} for i in range(n): complement = target - array[i] if complement in index_map: return (index_map[complement] + 1, i + 1) index_map[array[i]] = i return -1"},{"question":"A palindrome is a sequence of characters that can be read the same way forward and backward. For example, \\"madam\\", \\"racecar\\", and \\"12321\\" are palindromes, whereas \\"hello\\" and \\"12345\\" are not. Your task is to check whether a given integer is a palindrome without converting it to a string. Write a function that takes an integer as input and returns \\"Yes\\" if the integer is a palindrome and \\"No\\" otherwise. Negative numbers should return \\"No\\" as they cannot be palindromes. Input: The input consists of a single integer N. Output: Output \\"Yes\\" if the integer N is a palindrome, otherwise output \\"No\\". Examples: Input: 121 Output: Yes Input: -121 Output: No Input: 123 Output: No","solution":"def is_palindrome(num): Check if an integer is a palindrome without converting it to a string. if num < 0: return \\"No\\" original_num = num reversed_num = 0 while num > 0: reversed_num = reversed_num * 10 + num % 10 num = num // 10 if original_num == reversed_num: return \\"Yes\\" else: return \\"No\\""},{"question":"A company is organizing a transport system for delivering packages using drones. There is a set of N routes, each connecting two checkpoints identified by integers. A route between checkpoint A and checkpoint B has an associated difficulty level D. The difficulty level determines the battery consumption of the drone when flying between the two checkpoints. Given that the drone starts from checkpoint 1, find the minimum total difficulty level required to visit all checkpoints exactly once and return to checkpoint 1. Note that some checkpoints may not be directly connected, and in such cases, it is not possible to visit all checkpoints. Constraints * 1 leq T leq 100 * 2 leq N leq 15 * 1 leq A, B leq N * A neq B * 1 leq D leq 10^6 Input Input is given from Standard Input in the following format: T Then, T test cases follow. Each test case is given in the following format: N M A_1 B_1 D_1 A_2 B_2 D_2 ... A_M B_M D_M Each test case consists of N (the number of checkpoints) and M (the number of routes). Following that, M lines describe the routes, each containing two checkpoints A and B, and their difficulty level D. Output For each test case, print a line containing the minimum total difficulty level required to visit all checkpoints exactly once and return to checkpoint 1, or -1 if it is impossible to visit all checkpoints. Example Input 2 4 5 1 2 10 2 3 10 3 4 10 4 1 10 1 3 15 3 3 1 2 7 2 3 8 1 3 12 Output 40 27","solution":"import sys from itertools import permutations def find_minimum_difficulty(N, routes): graph = [[sys.maxsize]*N for _ in range(N)] for a, b, d in routes: graph[a-1][b-1] = d graph[b-1][a-1] = d min_difficulty = sys.maxsize checkpoints = list(range(1, N)) # Try every permutation to find the minimum difficulty for perm in permutations(checkpoints): current_path_difficulty = graph[0][perm[0]] valid_path = current_path_difficulty != sys.maxsize for i in range(N-2): if valid_path: current_path_difficulty += graph[perm[i]][perm[i+1]] if graph[perm[i]][perm[i+1]] == sys.maxsize: valid_path = False break else: break if valid_path and graph[perm[-1]][0] != sys.maxsize: current_path_difficulty += graph[perm[-1]][0] min_difficulty = min(min_difficulty, current_path_difficulty) if min_difficulty == sys.maxsize: return -1 else: return min_difficulty def solve(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) index += 1 M = int(data[index]) index += 1 routes = [] for _ in range(M): A = int(data[index]) B = int(data[index+1]) D = int(data[index+2]) routes.append((A, B, D)) index += 3 result = find_minimum_difficulty(N, routes) results.append(result) for result in results: print(result)"},{"question":"You are given a list of N students, each with different skills ranked from 1 to N, where 1 is the highest rank and N is the lowest. There is also a list of M tutoring sessions, each session can efficiently tutor only students within a certain consecutive range of their ranks. Each session is represented by two integers A and B, denoting the inclusive range of student ranks that the session can tutor. Your task is to determine if it\'s possible for all students to be tutored by using any given number of sessions. You need to return `YES` if there exists a way to cover all students using the provided sessions, and `NO` otherwise. -----Input:----- - First line contains T, the number of test cases. - For each test case: - The first line contains two integers, N (number of students) and M (number of available sessions). - The next M lines each contain two integers A and B, denoting the inclusive range of ranks that a session can tutor. -----Output:----- - For each test case, print `YES` if it\'s possible to cover all students with the provided sessions, and `NO` otherwise. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq M leq 10^5 - 1 leq A leq B leq N -----Sample Input:----- 2 5 3 1 2 2 4 3 5 6 2 1 3 4 6 -----Sample Output:----- YES YES -----Explanation:----- Sample 1: We can cover all ranks 1 through 5 with three sessions: one covering ranks 1-2, one covering ranks 2-4, and one covering ranks 3-5. Thus, the answer is `YES`. Sample 2: We can cover all ranks 1 through 6 with two sessions: one covering ranks 1-3` and one covering ranks `4-6`. Thus, the answer is `YES`.","solution":"def can_tutor_all_students(T, test_cases): Determines whether it\'s possible to cover all students using provided sessions. Args: T: int - number of test cases. test_cases: list of tuples (N, M, sessions) - each test case containing: N: int - number of students M: int - number of sessions sessions: list of tuples (A, B) - each session covering range A to B. Returns: list of str: \\"YES\\" or \\"NO\\" for each test case. results = [] for i in range(T): N, M, sessions = test_cases[i] # sort sessions by starting point, then by ending point if start points are same sessions.sort() # Greedily check if we can cover the entire range from 1 to N current_end = -1 max_end_reachable = 0 j = 0 while j < M and max_end_reachable < N: if sessions[j][0] > max_end_reachable + 1: break while j < M and sessions[j][0] <= max_end_reachable + 1: current_end = max(current_end, sessions[j][1]) j += 1 max_end_reachable = current_end if max_end_reachable >= N: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a binary string S of length N, you need to determine if it is possible to make all characters in the string the same by performing at most one flip operation. A flip operation is defined as selecting a contiguous subarray of the string and flipping all bits (changing \'0\' to \'1\' and vice versa) within that subarray. Example 1: Input: S = \\"0110\\" Output: YES Explanation: We can flip the substring \\"11\\" to \\"00\\", giving us \\"0000\\". Example 2: Input: S = \\"0101\\" Output: NO Explanation: It\'s not possible to make all characters the same with just one flip. Example 3: Input: S = \\"1111\\" Output: YES Explanation: The string is already uniform. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isUniform() which takes a string S as a parameter and returns \\"YES\\" or \\"NO\\" depending on whether it is possible to make all characters in S the same with at most one flip operation. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 100","solution":"def isUniform(S): Determines if it is possible to make all characters in S the same by performing at most one flip operation. Parameters: S (str): A binary string. Returns: str: \\"YES\\" or \\"NO\\" # Initialize variables to keep track of runs of \'0\'s and \'1\'s count0 = 0 count1 = 0 # Iterate through the string to count the segments of \'0\'s and \'1\'s for i in range(1, len(S)): if S[i] != S[i - 1]: if S[i - 1] == \'0\': count0 += 1 else: count1 += 1 if S[-1] == \'0\': count0 += 1 else: count1 += 1 # If there\'s only one run of characters, we can return YES # because the string is already uniform. if count0 <= 1 or count1 <= 1: return \\"YES\\" return \\"NO\\""},{"question":"Write a program that reads two integers, n and m, and prints the least common multiple (LCM) of these two numbers. You can assume that 1 ≤ n, m ≤ 1000. Input Two integers n and m separated by a space in a line. Output Print the LCM of n and m in a line. Example Input 4 6 Output 12","solution":"def gcd(a, b): Calculate the greatest common divisor (GCD) of two numbers. while b: a, b = b, a % b return a def lcm(n, m): Calculate the least common multiple (LCM) of two numbers. return abs(n * m) // gcd(n, m)"},{"question":"You are given a sequence of n integers, a_0, a_1, ldots, a_{n-1}. Find and print any integer y such that y is repeated exactly twice in the sequence. Input Format The first line contains an integer, n, denoting the length of the sequence. The second line contains n positive space-separated integers describing a_0, a_1, ldots, a_{n-1}. Constraints 2 leq n leq 10^5 1 leq a_i leq 10^9 It is guaranteed that a solution exists. Output Format Print any integer y which is repeated exactly twice in the sequence. Sample Input 0 5 3 2 3 6 1 Sample Output 0 3 Explanation 0 We are given the array [3, 2, 3, 6, 1]. The number 3 is repeated exactly twice in the array. Thus, we output 3 as our answer.","solution":"def find_repeated_twice(n, arr): Given an array of n integers, find and return any integer which is repeated exactly twice in the array. :param n: An integer representing the length of the array :param arr: A list of n integers :return: An integer that is repeated exactly twice in the array from collections import Counter # Count the frequency of each number in the array frequency = Counter(arr) # Find and return the number that is repeated exactly twice for num, count in frequency.items(): if count == 2: return num"},{"question":"You\'re given an array A consisting of N integers, where A[i] represents the value at the ith index in the array. You need to check whether the array can be rearranged such that two consecutive elements of the resulting sequence differ by at most K. Return \\"YES\\" if it is possible to rearrange the array in this way, otherwise return \\"NO\\". Example 1: Input: N = 5, K = 2 A = {1, 3, 5, 8, 10} Output: NO Example 2: Input: N = 6, K = 3 A = {7, 4, 1, 3, 2, 5} Output: YES Your Task: You do not need to read input or print anything. Your task is to complete the function canRearrange() which takes N, K, and A as input parameters and returns \\"YES\\" if the array can be rearranged according to the conditions, otherwise returns \\"NO\\". Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^4 1 ≤ A[i] ≤ 10^9","solution":"def canRearrange(N, K, A): # First, sort the array A.sort() # Traverse the sorted array and check the difference between each consecutive elements for i in range(1, N): if A[i] - A[i - 1] > K: return \\"NO\\" # If no such pair is found, then return \\"YES\\" return \\"YES\\""},{"question":"A tree T is an undirected graph with N nodes and N-1 edges such that there is a unique path between any pair of nodes. You are given a tree T and Q queries. In each query, you are given two nodes u and v, and you need to calculate the number of nodes on the unique path between u and v (inclusive of u and v). # Input format: The first line contains an integer N, the number of nodes in the tree. The following N-1 lines contain two integers u and v each, indicating that there is an edge between nodes u and v. The next line contains an integer Q, the number of queries. The following Q lines contain two integers u and v each, representing the nodes for which you need to find the number of nodes on the path between u and v. # Output format: For each query, output the number of nodes on the path between u and v. # Constraints: - 1 ≤ N, Q ≤ 10^5 - 1 ≤ u, v ≤ N # SAMPLE INPUT 5 1 2 1 3 2 4 2 5 3 1 4 4 5 3 5 # SAMPLE OUTPUT 3 3 4 # Explanation For the first query, the path between nodes 1 and 4 is [1, 2, 4], which has 3 nodes. For the second query, the path between nodes 4 and 5 is [4, 2, 5], which also has 3 nodes. For the third query, the path between nodes 3 and 5 is [3, 1, 2, 5], which has 4 nodes.","solution":"from collections import deque def bfs(tree, start, n): Perform BFS to calculate depth and parent arrays. depth = [-1] * (n + 1) parent = [-1] * (n + 1) queue = deque([start]) depth[start] = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if depth[neighbor] == -1: queue.append(neighbor) depth[neighbor] = depth[node] + 1 parent[neighbor] = node return depth, parent def lca(u, v, depth, parent): Find the lowest common ancestor of u and v using depth and parent arrays. # Bring both u and v to the same depth while depth[u] > depth[v]: u = parent[u] while depth[v] > depth[u]: v = parent[v] # Move both u and v up simultaneously until they meet while u != v: u = parent[u] v = parent[v] return u def count_nodes_on_path(n, edges, queries): Returns the number of nodes on the path between u and v for each query. # Building the tree tree = [[] for _ in range(n + 1)] for u, v in edges: tree[u].append(v) tree[v].append(u) # Running BFS to calculate depth and parent arrays depth, parent = bfs(tree, 1, n) results = [] for u, v in queries: ancestor = lca(u, v, depth, parent) result = depth[u] + depth[v] - 2 * depth[ancestor] + 1 results.append(result) return results"},{"question":"Anna loves playing with matrices. She has a matrix `mat` containing `N` rows and `M` columns. She wants to process `Q` queries on it. In each query, she provides four integers `x1, y1, x2, y2` (1-based indexing). For these coordinates, she wants to find the sum of elements in the submatrix defined by the top-left corner `(x1, y1)` and the bottom-right corner `(x2, y2)`. She guarantees that the submatrix defined by the coordinates will always be valid and not empty. Example: Input: ``` N = 3, M = 3, Q = 2 mat = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries = [ [1, 1, 2, 2], [2, 2, 3, 3] ] ``` Output: ``` 12 28 ``` Explanation: For the first query: The submatrix is: ``` 1 2 4 5 ``` The sum is `1 + 2 + 4 + 5 = 12`. For the second query: The submatrix is: ``` 5 6 8 9 ``` The sum is `5 + 6 + 8 + 9 = 28`. Your Task: You do not need to read input or print anything. Your task is to complete the function `submatrixSum(N, M, mat, Q, queries)` which takes `N`, `M`, `mat`, `Q`, and `queries` as input parameters and returns a list containing the sum for each query. Expected Time Complexity: O(N * M + Q) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 10^5 1 ≤ mat[i][j] ≤ 1000 1 ≤ x1 ≤ x2 ≤ N 1 ≤ y1 ≤ y2 ≤ M","solution":"def submatrixSum(N, M, mat, Q, queries): # Precompute the prefix sums prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = mat[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] result = [] for query in queries: x1, y1, x2, y2 = query sub_sum = (prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1]) result.append(sub_sum) return result"},{"question":"You are given an n x n grid. Each cell in the grid either contains an empty space (\'.\') or a wall (\'#\'). A robot is placed in any empty cell and can move to any other empty cell (vertically or horizontally), but cannot pass through walls. Your task is to determine if there is a way to move the robot from the top-left corner of the grid (cell (0, 0)) to the bottom-right corner (cell (n-1, n-1)). -----Input----- The first line of the input contains one integer n (1 ≤ n ≤ 100) — the size of the grid. The next n lines contain n characters each (either \'.\' or \'#\') which describe the grid. -----Output----- Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". -----Examples----- Input 4 .... .. .#.. .... Output YES Input 3 .#. # ..# Output NO -----Note----- In the first test, there is a path that the robot can take to reach from the top-left to the bottom-right corner. In the second test, there is no possible way for the robot to reach the bottom-right corner due to the walls blocking the path.","solution":"def is_path_possible(n, grid): from collections import deque def bfs(start, end): queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return True # Explore the four possible directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False # Early return if start or end positions are blocked if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return \\"NO\\" if bfs((0, 0), (n-1, n-1)): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given two integer arrays, nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. Example 1: Input: m = 3, n = 3 nums1 = [1, 2, 3, 0, 0, 0] nums2 = [2, 5, 6] Output: [1, 2, 2, 3, 5, 6] Example 2: Input: m = 4, n = 4 nums1 = [1, 3, 5, 7, 0, 0, 0, 0] nums2 = [2, 4, 6, 8] Output: [1, 2, 3, 4, 5, 6, 7, 8] Your Task: Implement the function `merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None:` which takes the arrays nums1 and nums2 along with their lengths m and n, and modifies nums1 in-place to achieve the merged output. Expected Time Complexity: O(m + n) Expected Auxiliary Space: O(1) Constraints: - nums1.length == m + n - nums2.length == n - 0 <= m, n <= 200 - 1 <= nums1[i], nums2[i] <= 1000","solution":"def merge(nums1, m, nums2, n): Merges nums2 into nums1 into a single array sorted in non-decreasing order. Args: nums1 (List[int]): The first list with nums1 having a size of m + n. The first m elements are to be merged, and the last n elements are set to 0 and should be ignored. nums2 (List[int]): The second list with n elements to be merged with nums1. m (int): The number of elements initially in nums1. n (int): The number of elements in nums2. Modifies nums1 in-place. i = m - 1 # Pointer for nums1 j = n - 1 # Pointer for nums2 k = m + n - 1 # Pointer for the merged array in nums1 while i >= 0 and j >= 0: if nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 while j >= 0: nums1[k] = nums2[j] j -= 1 k -= 1"},{"question":"Given an array of integers and a target sum, determine if there are two unique elements in the array that add up to the target sum. Return the indices of these two numbers as a tuple. Indices in the output should be sorted in ascending order. If no such pair exists, return an empty list. -----Constraints----- - All values in input are integers. - 2 leq length of the array leq 10^5 - -10^9 leq array elements leq 10^9 - -10^9 leq target sum leq 10^9 -----Input----- Input is given from standard input in the following format: n arr_1 arr_2 ... arr_n target -----Output----- Print the indices of the two numbers that add up to the target sum. If no such pair exists, print an empty list. -----Sample Input----- 5 2 7 11 15 -2 9 -----Sample Output----- [0, 1] Explanation: Element at index 0 (2) and element at index 1 (7) add up to 9. So, the output is [0, 1].","solution":"def find_two_sum_indices(arr, target): Returns a tuple of indices of two unique elements in the array that add up to the target sum. Indices in the output are sorted in ascending order. Returns an empty list if no such pair exists. num_to_index = {} for i, num in enumerate(arr): diff = target - num if diff in num_to_index: return sorted([num_to_index[diff], i]) num_to_index[num] = i return [] # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) target = int(data[n+1]) print(find_two_sum_indices(arr, target))"},{"question":"Write a function to calculate the total number of hours worked given a list of time intervals. Each time interval will be an entry in a list containing two strings that represent the start and end times in the format \\"HH:MM\\". Assume all times are within a single day, and intervals are non-overlapping. # Examples ```python calculate_hours([(\\"08:00\\", \\"12:00\\"), (\\"13:00\\", \\"17:00\\")]) ==> 8 # 4 hours (08:00-12:00) + 4 hours (13:00-17:00) calculate_hours([(\\"09:00\\", \\"11:30\\"), (\\"14:00\\", \\"18:00\\")]) ==> 6.5 # 2.5 hours (09:00-11:30) + 4 hours (14:00-18:00) ```","solution":"from datetime import datetime def calculate_hours(intervals): Returns the total number of hours worked given a list of time intervals. Each interval is a tuple containing two strings representing the start and end times. total_hours = 0.0 for start, end in intervals: start_time = datetime.strptime(start, \\"%H:%M\\") end_time = datetime.strptime(end, \\"%H:%M\\") duration = (end_time - start_time).seconds / 3600 total_hours += duration return total_hours"},{"question":"# Task You are organizing a marathon event and need to ensure the fair distribution of age groups among the participants. You are provided with a list where each element represents the age of a participant. You need to determine whether the number of participants aged below 18 (children) is less than or equal to the number of participants aged 18 and above (adults). Return `true` if the number of children is less than or equal to the number of adults, otherwise return `false`. # Input/Output - `[input]` integer array `ages` An array representing the ages of participants. Each age is a non-negative integer. `2 <= ages.length <= 50` - `[output]` a boolean value `true` if the number of children is less than or equal to the number of adults, `false` otherwise.","solution":"def fair_age_distribution(ages): Determine if the number of participants aged below 18 (children) is less than or equal to the number of participants aged 18 and above (adults). Parameters: ages (list): A list of integers representing ages of participants. Returns: bool: True if children are less or equal in number to adults, False otherwise. children = sum(1 for age in ages if age < 18) adults = sum(1 for age in ages if age >= 18) return children <= adults"},{"question":"«PuzzleHub» is developing a new game where players have to select specific colored tiles from a row. Each tile is represented as a single letter where different letters correspond to different colors (\'R\' for red, \'G\' for green, \'B\' for blue, etc.). The game requires the feature to determine the longest subsequence of repeated, identical colored tiles in the row. Your task is to write a program that analyzes the row of tiles and outputs the longest subsequence of identical tiles. If there are multiple subsequences with the same maximum length, return the left-most one. For example, the tile sequence \\"RGBBGRRRRG\\" contains the subsequence \\"RRRR\\" as the longest, and in the sequence \\"RGBBG\\" subsequences \\"BB\\" and \\"G\\" are both of maximum length, but \\"BB\\" is the left-most. Input A single line contains the sequence of tiles represented by uppercase letters only (\'A\' to \'Z\'). The sequence contains at least one and at most 100 characters. Output Output the longest subsequence of identical tiles. Examples Input RGBBGRRRRG Output RRRR Input ABCCBAAC Output CC Input XYZXXYYYX Output YYY","solution":"def longest_identical_subsequence(tiles): Returns the longest subsequence of identical tiles in the given tile sequence. max_len = 0 current_len = 1 max_subsequence = tiles[0] current_char = tiles[0] for i in range(1, len(tiles)): if tiles[i] == current_char: current_len += 1 else: if current_len > max_len: max_len = current_len max_subsequence = current_char * current_len current_char = tiles[i] current_len = 1 if current_len > max_len: max_subsequence = current_char * current_len return max_subsequence"},{"question":"You are given an array of integers. Two elements in this array are considered *adjacent* if they are consecutive in the array. Two elements a_i and a_j (with i < j) are *swapable* if there exists a sequence of adjacent swaps that can move a_i to the position j and a_j to the position i. Your task is to determine the maximum possible value of the product of two swapable elements in the array. ------ Input ------ The first line of the input contains an integer T, the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of elements in the array. The second line of each test case contains N space-separated integers. ------ Output ------ For each test case, print a single line containing one integer ― the maximum possible product of two swapable elements in the array. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 1,000 1 ≤ a_i ≤ 10^9 ------ Sample Input 1 ------ 2 5 3 6 2 8 1 4 1 3 2 4 ------ Sample Output 1 ------ 48 12","solution":"def max_swappable_product(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] max1 = max(array) array.remove(max1) max2 = max(array) result = max1 * max2 results.append(result) return results # Parse input from the example format def parse_input(input_lines): T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) test_cases.append((N, array)) index += 2 return T, test_cases def process_input(input_text): input_lines = input_text.strip().split(\\"n\\") T, test_cases = parse_input(input_lines) return max_swappable_product(T, test_cases)"},{"question":"You are given an array of integers. Your task is to find the maximum sum of elements you can get such that no two elements picked are adjacent in the original array. Input - The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the elements of the array. Output - Output a single integer, the maximum sum of non-adjacent elements. Examples Input 4 3 2 7 10 Output 13 Input 5 3 2 5 10 7 Output 15 Input 3 3 2 1 Output 4","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements in the array. n = len(nums) if n == 0: return 0 elif n == 1: return nums[0] # Define dp array where dp[i] is the maximum sum we can obtain from the array up to index i dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1] # Example usage: # nums = [3, 2, 7, 10] # print(max_non_adjacent_sum(nums)) # Output: 13"},{"question":"Nina has recently been fascinated by arrays and their manipulations. She has an array `a` containing `N` positive integers. She likes to perform a certain operation on the array which involves two types of queries - update and range sum query. Each update query changes the value of an element in the array, and each range sum query calculates the sum of elements within a given subarray. Implement a system that can handle `Q` queries. There are two types of queries: 1. Update query: `1 i x` - Update the `i-th` element of the array to `x`. 2. Range sum query: `2 L R` - Compute the sum of elements from index `L` to `R` (1-based indexing). The queries are given in a 2D matrix where each entry consists of a query type and necessary parameters. Example: ``` Input: N = 5, Q = 4 a = {1, 2, 3, 4, 5} queries = {{2, 1, 3}, {1, 3, 10}, {2, 2, 5}, {2, 1, 5}} Output: 6 21 22 Explanation: 1. For the first query (2, 1, 3), the sum from index 1 to index 3 is 1+2+3 = 6. 2. For the second query (1, 3, 10), the array becomes {1, 2, 10, 4, 5}. 3. For the third query (2, 2, 5), the sum from index 2 to index 5 is 2+10+4+5 = 21. 4. For the fourth query (2, 1, 5), the sum from index 1 to index 5 is 1+2+10+4+5 = 22. ``` Your Task: You do not need to read input or print anything. Your task is to complete the function `arrayQueries()` which takes `N`, `Q`, `a[]`, and `queries` as input parameters and returns a list containing the answer for each range sum query. Expected Time Complexity: O(log N) per update and sum query (when using appropriate data structures like Segment Trees or Fenwick Trees). Expected Auxiliary Space: O(N + Q) Constraints: - 1 ≤ N, Q ≤ 10^5 - 1 ≤ a[i], x ≤ 10^9 - 1 ≤ i ≤ N - 1 ≤ L ≤ R ≤ N","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_query(self, left, right): return self.query(right) - self.query(left - 1) def arrayQueries(N, Q, a, queries): fenwick_tree = FenwickTree(N) outputs = [] # Build the initial Fenwick Tree for i in range(1, N + 1): fenwick_tree.update(i, a[i - 1]) # Process each query for query in queries: if query[0] == 1: # Update query i, x = query[1], query[2] current_value = fenwick_tree.range_query(i, i) delta = x - current_value fenwick_tree.update(i, delta) elif query[0] == 2: # Range sum query L, R = query[1], query[2] sum_range = fenwick_tree.range_query(L, R) outputs.append(sum_range) return outputs"},{"question":"Given a list of unique integers, return a list of all possible subsets (the power set). Each subset must be sorted in ascending order, and the solution set must not contain duplicate subsets. For example, if `nums = [1, 2, 3]`, a solution is: ``` [ [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3] ] ``` # Constraints: - The input list will always contain unique integers. - The input list will have at most 10 elements. - The input list will be in ascending order.","solution":"from itertools import combinations def subsets(nums): Returns a list of all possible subsets of the list of unique integers \'nums\'. Each subset is sorted in ascending order. result = [] for i in range(len(nums) + 1): for subset in combinations(nums, i): result.append(list(subset)) return result"},{"question":"You\'re given a rectangular grid of characters with R rows and C columns. Each cell in the grid contains a single lowercase English letter. A word is defined as a sequence of characters that can be formed starting from any cell, moving in any of the eight possible directions (horizontally, vertically, or diagonally), without revisiting the same cell. Given a list of words, determine which of them can be found in the grid following the aforementioned rules. # Input Format: - The first line contains two integers R and C, denoting the number of rows and columns of the grid, respectively. - The next R lines each contain a string of C characters, representing the grid. - The next line contains a single integer Q, the number of words to search for. - The next Q lines each contain a single word. # Output Format: For each word in the list, output \\"YES\\" if the word can be found in the grid, otherwise output \\"NO\\". # Constraints: - `1 ≤ R`, `C ≤ 100` - `1 ≤ Q ≤ 1000` - `1 ≤ length of each word ≤ 100` - All characters in the grid and words are lowercase English letters. # Sample Input: ``` 4 4 abcd efgh ijkl mnop 3 abcf ijkl mnop ``` # Sample Output: ``` YES YES YES ``` # Explanation: - `abcf` can be formed starting from the first row and moving right and down. - `ijkl` can be found in the grid directly in the third row. - `mnop` can be found in the grid directly in the fourth row.","solution":"def find_word_in_grid(R, C, grid, words): def is_valid(r, c): return 0 <= r < R and 0 <= c < C def search_from_cell(r, c, word, index, visited): if index == len(word): return True if not is_valid(r, c) or grid[r][c] != word[index] or (r, c) in visited: return False visited.add((r, c)) for dr, dc in directions: if search_from_cell(r + dr, c + dc, word, index + 1, visited): return True visited.remove((r, c)) return False def search_word(word): for r in range(R): for c in range(C): if search_from_cell(r, c, word, 0, set()): return \\"YES\\" return \\"NO\\" directions = [ (-1, 0), # up (1, 0), # down (0, -1), # left (0, 1), # right (-1, -1), # up-left (-1, 1), # up-right (1, -1), # down-left (1, 1) # down-right ] results = [] for word in words: results.append(search_word(word)) return results"},{"question":"Given a Binary Tree and an integer X, find the floor of X. Note: Floor(X) is a number that is either equal to X or is immediately smaller than X. Example 1: Input: 8 / 4 12 / 2 6 14 / 1 X = 5 Output: 4 Explanation: The largest number in the tree which is smaller than or equal to 5 is 4. Example 2: Input: 15 / 10 20 / / 8 12 16 25 X = 22 Output: 20 Explanation: The largest number in the tree which is smaller than or equal to 22 is 20. Your task: You are required to implement the function `findFloor()` which returns the floor of X in the given tree. Expected Time Complexity: O(Height of the Tree) Expected Auxiliary Space: O(Height of the Tree). Constraints: 1 <= Number of nodes <= 10^5 1 <= Value of nodes <= 10^5","solution":"class TreeNode: def __init__(self, key): self.data = key self.left = None self.right = None def findFloor(root, x): Find the floor of x in a binary search tree. floor = -1 while root: if root.data == x: return root.data elif root.data > x: root = root.left else: floor = root.data root = root.right return floor"},{"question":"**Problem:** Imagine you are trapped in a room with a digital lock that opens by entering the correct pattern. The lock accepts a pattern where each digit represents the number of times you need to press a corresponding button in sequence. The lock has 10 buttons, labeled from 0 to 9. You are given an initial pattern and a lock mechanism that modifies this pattern using a sequence of commands. Each command indicates a specific button and how many times you need to press it. Write a program that takes the initial pattern and a series of commands, then outputs the final pattern after all commands are applied. **Input:** - The first line contains ten integers, `a0`, `a1`, ..., `a9` (0 ≤ ai ≤ 100), representing the initial pattern where `ai` is the number of times button `i` needs to be pressed initially. - The second line contains an integer `n` (0 ≤ n ≤ 100), the number of commands. - The next `n` lines each contain two integers `bi` (0 ≤ bi ≤ 9) and `ci` (0 ≤ ci ≤ 100), indicating that button `bi` needs to be pressed `ci` times additionally. **Output:** - Output ten integers, the final pattern where the `i-th` integer represents the total number of times button `i` needs to be pressed after all commands are applied. **Examples:** **Input:** ``` 1 2 3 4 5 6 7 8 9 10 3 0 5 1 3 9 1 ``` **Output:** ``` 6 5 3 4 5 6 7 8 9 11 ``` **Input:** ``` 0 0 0 0 0 0 0 0 0 0 2 0 100 1 100 ``` **Output:** ``` 100 100 0 0 0 0 0 0 0 0 ``` **Note:** In the first example, initially, the pattern is `1 2 3 4 5 6 7 8 9 10`. After applying the commands, the pattern is modified as follows: - Adding 5 presses to button 0 makes it `6`. - Adding 3 presses to button 1 makes it `5`. - Adding 1 press to button 9 makes it `11`. The final pattern is `6 5 3 4 5 6 7 8 9 11`.","solution":"def modify_pattern(initial_pattern, commands): Modifies the initial pattern based on the given commands. :param initial_pattern: List of 10 integers representing the initial pattern. :param commands: List of tuples where each tuple consists of two integers (button, presses). :return: List of 10 integers representing the final pattern. for button, presses in commands: initial_pattern[button] += presses return initial_pattern"},{"question":"A robot is navigating a 2-dimensional grid. The robot can move in four possible directions: - \'U\' (up) - \'D\' (down) - \'L\' (left) - \'R\' (right) The robot starts at position (0, 0) on the grid. Your task is to determine if the robot returns to the origin (0, 0) after executing a sequence of moves. Write a function that checks if, after executing all the moves in the string, the robot is back at the starting position. Function Signature ```python def isRobotBackToOrigin(moves: str) -> bool: pass ``` **Input** - A string `moves` representing the sequence of moves. The string length will be between 1 and 10000. - The string will contain only characters from the set {\'U\', \'D\', \'L\', \'R\'}. **Output** - Return `True` if the robot returns to the origin after all moves, otherwise return `False`. **Example** ```python print(isRobotBackToOrigin(\\"UD\\")) # Expected output: True print(isRobotBackToOrigin(\\"LL\\")) # Expected output: False ``` **Explanation** In the first example, the robot moves up and then down, returning to the starting position. Hence, the output is `True`. In the second example, the robot moves left twice and does not return to the starting position. Hence, the output is `False`. Function Description Complete the `isRobotBackToOrigin` function below. **HINT**: As the robot can only move in four directions, you can use a counter for the horizontal movement and another for vertical movement. If both counters are zero at the end of the sequence, the robot is back at the origin.","solution":"def isRobotBackToOrigin(moves: str) -> bool: Checks if the robot returns to the origin after a sequence of moves. Parameters: moves (str): a string representing the sequence of moves Returns: bool: True if the robot returns to (0, 0), False otherwise x, y = 0, 0 # Starting position (0, 0) for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0 # Check if the robot is back to the origin"},{"question":"# Problem Statement: Minimum Edit Distance between Strings Given two strings, `start` and `goal`, your task is to determine the minimum number of operations required to transform `start` into `goal`. You are allowed to use the following operations: 1. Insert a character 2. Delete a character 3. Replace a character Each operation counts as 1 step. Calculate the minimum number of steps needed to transform `start` to `goal`. # Input - The first line contains an integer `T` denoting the number of test cases. - The description of `T` test cases follows. - For each test case: - The first line contains the string `start`. - The second line contains the string `goal`. # Output - For each test case, output a single line containing the minimum number of operations required to transform `start` to `goal`. # Constraints - (1 leq T leq 100) - (1 leq text{length of start}, text{length of goal} leq 1000) # Subtasks - Subtask 1: (20 points) - (1 leq text{length of start}, text{length of goal} leq 10) - Subtask 2: (80 points) - Original constraints # Example Input 2 kitten sitting abcd abef # Example Output 3 2 # Explanation In the first test case, \\"kitten\\" can be transformed into \\"sitting\\" in the following way: - Replace \'k\' with \'s\' (kitten -> sitten) - Replace \'e\' with \'i\' (sitten -> sittin) - Insert \'g\' at the end (sittin -> sitting) In the second test case, \\"abcd\\" can be transformed into \\"abef\\" in the following way: - Replace \'c\' with \'e\' (abcd -> abed) - Replace \'d\' with \'f\' (abed -> abef) Both transformations require 2 operations.","solution":"def min_edit_distance(start, goal): m, n = len(start), len(goal) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif start[i-1] == goal[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) return dp[m][n] def process_test_cases(T, test_cases): results = [] for start, goal in test_cases: results.append(min_edit_distance(start, goal)) return results"},{"question":"A popular video game requires players to solve puzzles to advance to the next level. One such puzzle involves navigating through a grid of rooms. Each room is marked with a number that indicates the cost of visiting that room. The player can move up, down, left, or right, but not diagonally. The goal is to find the path with the minimum cost from the top-left corner of the grid to the bottom-right corner. The player starts at the top-left corner (0, 0) and must reach the bottom-right corner (n-1, m-1), where \'n\' is the number of rows and \'m\' is the number of columns in the grid. Write a program to find the minimum cost path. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100). - Each of the next n lines contains m integers separated by spaces, representing the cost of visiting that room (each cost is between 0 and 100). Output: - Print a single integer, the minimum cost to reach the bottom-right corner of the grid. Constraints: 1 ≤ n, m ≤ 100 0 ≤ cost of each room ≤ 100 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 7 Explanation: The grid looks like this: ``` 1 3 1 1 5 1 4 2 1 ``` The minimum cost path is 1 → 1 → 1 → 1 → 1 → 2, with a total cost of 7.","solution":"import heapq def min_cost_path(grid): n = len(grid) m = len(grid[0]) # Priority queue to store (cost, (row, col)) pq = [(grid[0][0], (0, 0))] # Directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # 2D list to store the minimum cost to reach each cell cost = [[float(\'inf\')] * m for _ in range(n)] cost[0][0] = grid[0][0] while pq: current_cost, (i, j) = heapq.heappop(pq) if (i, j) == (n-1, m-1): return current_cost for direction in directions: new_i, new_j = i + direction[0], j + direction[1] if 0 <= new_i < n and 0 <= new_j < m: new_cost = current_cost + grid[new_i][new_j] if new_cost < cost[new_i][new_j]: cost[new_i][new_j] = new_cost heapq.heappush(pq, (new_cost, (new_i, new_j))) def solve_puzzle(n, m, grid): return min_cost_path(grid)"},{"question":"You are given an array `temperatures` representing the average daily temperatures for a given period. You need to implement a function that will, for each day, find how many days you would have to wait until a warmer temperature. If there is no future day that is warmer, return 0 for that day. **Example:** ``` Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: For the first day (73), the next warmer day is 74 which is 1 day away. For the second day (74), the next warmer day is 75 which is 1 day away. For the third day (75), the next warmer day is 76 which is 4 days away. And so on... ``` **Function Signature:** ```python def dailyTemperatures(temperatures: List[int]) -> List[int]: pass ``` **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `dailyTemperatures()` which takes a list of integers `temperatures` and returns a list of integers which represent how many days you would have to wait until a warmer temperature. **Expected Time Complexity:** O(N) **Expected Auxiliary Space:** O(N) **Constraints:** ``` 1 ≤ len(temperatures) ≤ 10^5 30 ≤ temperatures[i] ≤ 100 ```","solution":"from typing import List def dailyTemperatures(temperatures: List[int]) -> List[int]: n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() answer[prev_day] = i - prev_day stack.append(i) return answer"},{"question":"Given an array nums of integers, return the number of good pairs. A pair (i, j) is called good if nums[i] == nums[j] and i < j. Example 1: Input: nums = [1,2,3,1,1,3] Output: 4 Explanation: There are 4 good pairs: (0,3), (0,4), (3,4), (2,5). Example 2: Input: nums = [1,1,1,1] Output: 6 Explanation: Each pair of positions (i, j) is a good pair. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countGoodPairs() which takes an array of integers nums as input and returns the number of good pairs. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 100","solution":"def countGoodPairs(nums): Returns the number of good pairs in the array nums. A good pair (i, j) is where nums[i] == nums[j] and i < j. from collections import defaultdict num_counts = defaultdict(int) good_pairs = 0 for num in nums: good_pairs += num_counts[num] num_counts[num] += 1 return good_pairs"},{"question":"You are given an array of integers. In this challenge, your task is to implement the Merge Sort algorithm to sort the array in non-decreasing order. Merge Sort is a divide-and-conquer algorithm that works as follows: Step 1: Divide - Divide the unsorted array into two roughly equal smaller arrays. Step 2: Conquer - Recursively sort the two smaller arrays. Step 3: Combine - Merge the two sorted smaller arrays to produce the sorted array. Function Description Complete the `mergeSort` function in the editor below. `mergeSort` has the following parameter: - int arr[n]: the unsorted array of integers Returns: - int[n]: the array sorted in non-decreasing order Input Format The first line contains `n`, the size of `arr`. The second line contains `n` space-separated integers representing the elements of `arr`. Constraints 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9 Sample Input ``` 5 12 11 13 5 6 ``` Sample Output ``` 5 6 11 12 13 ``` Explanation Here is a step-by-step breakdown of how Merge Sort works on the sample input: 1. Divide the array into two smaller arrays: - left: [12, 11, 13] - right: [5, 6] 2. Sort the left and right arrays: - left: [11, 12, 13] - right: [5, 6] 3. Merge the sorted left and right arrays into the final sorted array: - [5, 6, 11, 12, 13] Implement the `mergeSort` function to perform the described operation and return the sorted array.","solution":"def mergeSort(arr): if len(arr) <= 1: return arr # Divide the array into two halves mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] # Recursively sort each half left_sorted = mergeSort(left_half) right_sorted = mergeSort(right_half) # Merge the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): sorted_array = [] i = j = 0 # Combine the two arrays while maintaining order while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_array.append(left[i]) i += 1 else: sorted_array.append(right[j]) j += 1 # Append the remaining elements sorted_array.extend(left[i:]) sorted_array.extend(right[j:]) return sorted_array"},{"question":"Write a function that takes an integer `n` as input and returns a list of prime numbers up to `n` (inclusive). The function should implement the Sieve of Eratosthenes algorithm for efficiency. Provide both the function definition and a brief explanation of the algorithm. Example Input 10 Output [2, 3, 5, 7] Explanation The Sieve of Eratosthenes algorithm works by iteratively marking the multiples of each prime number starting from 2. The numbers which remain unmarked till the end are the prime numbers. For instance, for n=10, the algorithm starts with marking multiples of 2 (4, 6, 8, 10), then multiples of 3 (6 and 9, but 6 is already marked), and continues similarly, yielding primes 2, 3, 5, and 7.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers up to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p]): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes"},{"question":"Alice is a computer science student who is passionate about algorithms. She is working on a challenge where she needs to find the maximum sum of elements in any contiguous subarray of a given array. The array consists of both positive and negative integers. Your task is to write a function that determines this maximum sum. ------ Input ------ The first line contains a single integer, T, the number of test cases. The following lines contain the test cases. For each test case: - The first line contains a single integer, n, the length of the array. - The second line contains n space-separated integers, representing the elements of the array. ------ Output ------ For each test case, print a single integer, the maximum sum of elements in any contiguous subarray of the array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 10^5 -10^4 ≤ K_i ≤ 10^4 for each element K_i in the array The sum of n over all test cases does not exceed 10^6 ------ Subtasks ------ Subtask #1 (50 points): 1 ≤ n ≤ 100 Subtask #2 (50 points): original constraints ------ Example Input ------ 2 5 1 -2 3 4 -5 6 -1 2 3 -2 5 -3 ------ Example Output ------ 7 8 ------ Explanation ------ In the first test case, the contiguous subarray with the maximum sum is [3, 4], which sums up to 7. In the second test case, the contiguous subarray with the maximum sum is [2, 3, -2, 5], which sums up to 8.","solution":"def max_subarray_sum(arr): Returns the maximum sum of elements in any contiguous subarray of the given array. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for case in test_cases: n = case[0] arr = case[1] results.append(max_subarray_sum(arr)) return results"},{"question":"Given a [directed acyclic graph (DAG)] with N nodes and M directed edges. Each node has a value associated with it and you are allowed to perform the following operation on any node exactly once: * Increase its value by 1. Determine the maximum sum of values of nodes in the DAG after performing the operation on at most one node. ------ Input Format ------ - The first line of the input will contain two integers N and M, the number of nodes and the number of directed edges in the graph respectively. - The second line will contain N integers representing the values of each node. - The next M lines will describe the edges in the DAG. Each line contains two integers U and V meaning that there is a directed edge from node U to node V. ------ Output Format ------ - Output the maximum sum of values of nodes in the graph after performing the operation. ------ Constraints ------ 1 ≤ N, M ≤ 10^{5} -10^{9} ≤ text{value of each node} ≤ 10^{9} 1 ≤ U, V ≤ N ----- Sample Input 1 ------ 4 4 3 2 5 1 1 2 2 3 3 4 1 3 ----- Sample Output 1 ------ 12 ----- explanation 1 ------ Initially, the sum of values is 3 + 2 + 5 + 1 = 11. By increasing the value of node 3 by 1, the sum becomes 3 + 2 + 6 + 1 = 12, which is the maximum possible sum after the operation.","solution":"def max_sum_after_one_increase(N, M, values, edges): Determine the maximum sum of values of nodes in the DAG after performing the operation on at most one node. :param N: Number of nodes :param M: Number of edges :param values: List of values for each node :param edges: List of tuples representing the edges in the DAG :return: Maximum sum of values after one increment operation # Calculate the initial sum of node values initial_sum = sum(values) # Find the node with the maximum value max_value_node = max(values) # The maximum sum after one increment operation max_sum = initial_sum + 1 return max_sum"},{"question":"During a recent city event, the mayor of Hackland was thrilled with a new transportation initiative: the Hackland Tram Network. The tram network consists of a number of stations connected by bidirectional tracks. Each track connects exactly two distinct stations and has a specific weight representing the travel time between the stations. The mayor wants to make sure that every station is connected either directly or indirectly with every other station in the network. To achieve this, they decided to create a special sub-network called the Minimal Connection Network. This sub-network should include all the stations but with the minimum total weight of the tracks connecting them. Your task is to help the mayor determine the minimum total weight required for this Minimal Connection Network. INPUT: The first line of the input contains an integer T = the number of test cases. Each test case starts with two integers N and M, where N is the number of stations, and M is the number of tracks. The next M lines contain three integers u, v, and w, indicating that there is a track between station u and station v with weight w. OUTPUT: For each test case, output a single integer: the minimum total weight required for the Minimal Connection Network. CONSTRAINTS: 0 < T ≤ 100 2 ≤ N ≤ 1000 1 ≤ M ≤ 10000 1 ≤ u, v ≤ N 1 ≤ w ≤ 1000 SAMPLE INPUT: 1 4 5 1 2 1 2 3 2 3 4 4 4 1 3 1 3 5 SAMPLE OUTPUT: 6 Explanation: For the provided test case, the stations and tracks can be visualized as: 1 --1-- 2 | / 3 2 4 | / | 4 --3-- 3 The minimum connection network can be formed with the tracks of weight 1 (between 1-2), weight 2 (between 2-3), and weight 3 (between 4-1), leading to a total weight of 6.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] i = 0 e = 0 while e < n - 1: if i >= len(edges): break u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append((u, v, w)) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimal_connection_network(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] edges = test_cases[t][1:] results.append(kruskal_mst(N, edges)) return results"},{"question":"In a city, there is exactly one path between any two neighborhoods, forming a tree structure. Each neighborhood is represented as a node, and the path between two nodes is represented as an edge. Given this information, you are to determine the maximum distance between any two nodes in the tree (also known as the tree\'s diameter). Input The input consists of multiple lines: 1. The first line contains a single integer, n (1 ≤ n ≤ 100,000), representing the number of nodes. 2. Each of the following n-1 lines contains two integers, u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Output Output a single integer: the diameter of the tree. Example Input: 5 1 2 1 3 3 4 3 5 Output: 3 Explanation: In this example, the maximum distance is between node 2 and node 4 or node 2 and node 5, which is 3 edges. Therefore, the diameter of the tree is 3.","solution":"from collections import deque def find_farthest_node(n, graph, start): # BFS to find the farthest node from the starting node \\"start\\" dist = [-1] * (n + 1) dist[start] = 0 queue = deque([start]) farthest_node = start while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append(neighbor) farthest_node = neighbor return farthest_node, dist def tree_diameter(n, edges): if n == 1: return 0 # Build the graph graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Find the farthest node from node 1 farthest_node, _ = find_farthest_node(n, graph, 1) # Find the farthest node from \\"farthest_node\\" found above opposite_node, dist = find_farthest_node(n, graph, farthest_node) # The distance to the farthest node found in the second BFS gives the tree diameter return dist[opposite_node]"},{"question":"The city of Algorithmia has a unique road system designed in the form of a tree with `n` nodes (cities). Each node is connected to exactly one or more nodes by bidirectional roads. The inhabitants are setting up a delivery service, and they need your help to ensure that they can deliver goods to the furthest city from a given starting point. You are given a list of roads specifying the connections between the cities. Your task is to determine the maximum distance from any given starting city to reach the furthest city in the tree. ----Input---- The first line contains an integer `n` (2 ≤ n ≤ 100000) — the number of cities. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), representing a road between cities `u` and `v`. ----Output---- In a single line, print the maximum possible distance (length of the path) from any given starting city to the furthest city in the tree. ----Examples---- Input 5 1 2 1 3 2 4 2 5 Output 3 Input 6 1 2 1 3 3 4 4 5 4 6 Output 4 Input 3 1 2 2 3 Output 2","solution":"def find_furthest_distance(n, roads): from collections import deque, defaultdict # Create adjacency list graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to perform BFS and return the furthest node and its distance def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True furthest_node = start max_distance = 0 while queue: current_node, current_distance = queue.popleft() if current_distance > max_distance: max_distance = current_distance furthest_node = current_node for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_distance + 1)) return furthest_node, max_distance # Start BFS from an arbitrary node (1) to find the furthest node from it furthest_node, _ = bfs(1) # Start BFS from the furthest node found to find the maximum distance _, max_distance = bfs(furthest_node) return max_distance"},{"question":"# Task Write a function `convert_to_camel_case` that converts a given sentence into CamelCase. CamelCase is a practice of writing compound words or phrases such that each word or abbreviation in the middle of the phrase begins with a capital letter, with no spaces, hyphens, or underscores. # Example For ``` sentence = \\"hello world from python\\" ``` the output should be `HelloWorldFromPython`. For ``` sentence = \\"convert THIS to CaMeL case\\" ``` the output should be `ConvertThisToCamelCase`. # Input/Output - `[input]` string `sentence` A string containing a sentence with words separated by spaces. The words can have mixed case letters. Constraints: `1 ≤ sentence.length ≤ 50`. - `[output]` a string The input sentence converted to CamelCase. The first letter of the resulting string should always be capitalized regardless of the original casing.","solution":"def convert_to_camel_case(sentence): Converts a given sentence into CamelCase. Parameters: sentence (str): The sentence to be converted. Returns: str: The converted CamelCase string. words = sentence.split() camel_case_sentence = \'\'.join(word.capitalize() for word in words) return camel_case_sentence"},{"question":"A coding competition is in progress, and one of the tasks involves determining the score of a string based on specific rules. The string consists of lowercase English letters. Each letter has a base score: \'a\' has a score of 1, \'b\' has a score of 2, ..., and \'z\' has a score of 26. Additionally, there is a bonus mechanism: - If two consecutive characters are the same, their combined score is doubled. - If three consecutive characters are the same, their combined score is tripled, and so on. Given a string, determine the total score following these rules. Constraints * 1 leq |s| leq 200,000 * s consists only of lowercase English letters. Input Input is given from Standard Input in the following format: s Output Print the total score of the string. Examples Input aabbbc Output 33 Input xyzxyzxyz Output 351","solution":"def calculate_score(s): Calculate the score of the string based on the described rules. :param s: Input string consisting of lowercase English letters. :return: Integer score of the string. if not s: return 0 total_score = 0 i = 0 while i < len(s): char = s[i] base_score = ord(char) - ord(\'a\') + 1 count = 1 # Count consecutive characters while i + 1 < len(s) and s[i + 1] == char: count += 1 i += 1 # Apply the bonus mechanism total_score += base_score * count * count i += 1 return total_score"},{"question":"A group of treasure hunters has discovered a grid of cells in an ancient temple. The grid consists of `n` rows and `m` columns. Each cell contains a certain number of gold coins. The cells are indexed from (1,1) to (n,m). The hunters start at the top-left corner (1,1) and want to collect as many gold coins as possible while reaching the bottom-right corner (n,m). They can only move to the right or down from their current position. You need to help the hunters by writing a program that determines the maximum number of gold coins that can be collected along the path from (1,1) to (n,m). Function Signature ```python def max_gold(n: int, m: int, grid: List[List[int]]) -> int: ``` # Input - `n` (1 ≤ n ≤ 200): the number of rows in the grid. - `m` (1 ≤ m ≤ 200): the number of columns in the grid. - `grid`: a list of lists of integers representing the grid, where `grid[i][j]` (0 ≤ grid[i][j] ≤ 1000) is the number of gold coins in the cell (i+1,j+1). # Output - Return the maximum number of gold coins that can be collected while moving from (1,1) to (n,m). # Example ```python assert max_gold(3, 3, [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ]) == 12 ``` Explanation: The maximum number of gold coins collected along the path (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) is 1 + 3 + 5 + 2 + 1 = 12.","solution":"from typing import List def max_gold(n: int, m: int, grid: List[List[int]]) -> int: # Create a DP table to store the maximum gold collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left cell with the amount of gold in that cell dp[0][0] = grid[0][0] # Fill the first row (we can only move right) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (we can only move down) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value at the bottom-right corner will be the answer return dp[n-1][m-1]"},{"question":"You are tasked to manage a network server monitoring system. Your system monitors several parameters, and one of the critical parameters is the average response time of the servers in your network. Based on the average response time, you need to identify which servers need maintenance. Each server has a unique identifier and a list of recorded response times. You need to determine whether a server is inefficient. A server is considered inefficient if its average response time exceeds a given threshold value. Write a program that reads the server logs and identifies the inefficient servers. -----Input----- The first line of input contains an integer n (1 leq n leq 1000), the number of servers. Each of the following n lines describes a server. Each line starts with the server\'s unique identifier (a string of up to 20 uppercase letters or digits), followed by a space-separated list of recorded response times (positive floating-point numbers). The input is terminated by a single line containing a positive floating-point number t (1 leq t leq 100) indicating the threshold average response time. -----Output----- Output the identifiers of the inefficient servers, one per line. The identifiers should be listed in the order they appear in the input. If no servers are inefficient, output \\"None\\". -----Examples----- Sample Input: 3 SERVER1 0.5 0.8 1.0 1.5 DB2 1.2 1.5 1.8 2.0 1.9 WEB01 0.3 0.6 0.4 0.7 0.5 1.6 Sample Output: DB2 Sample Input: 4 APP1 0.9 1.1 1.2 CACHE3 0.4 0.4 0.5 0.6 SERVERX 2.0 2.1 DATA2 1.6 1.5 1.8 Sample Output: None","solution":"def find_inefficient_servers(logs, threshold): Identifies servers with average response time exceeding the given threshold. Parameters: logs (list of str): List of server logs where each entry contains a server identifier followed by response times. threshold (float): The threshold average response time. Returns: list of str: List of identifiers of inefficient servers or [\\"None\\"] if none are inefficient. inefficient_servers = [] for log in logs: parts = log.split() identifier = parts[0] response_times = list(map(float, parts[1:])) average_response_time = sum(response_times) / len(response_times) if average_response_time > threshold: inefficient_servers.append(identifier) if not inefficient_servers: return [\\"None\\"] return inefficient_servers"},{"question":"You are given a string S and an integer N. Your task is to find the N-th most frequent character in the string. If two characters have the same frequency, the lexicographically smaller character is considered to be more frequent. -----Constraints----- - The length of the string S is at most 1000. - All characters in S are lowercase English letters. - There is always at least one character in the string S. - 1 leq N leq number of distinct characters in S. -----Input----- Input is given from Standard Input in the following format: S N -----Output----- Print the N-th most frequent character in the string. -----Sample Input----- aaabbc 2 -----Sample Output----- a The frequencies of characters in the string are: \'a\': 3, \'b\': 2, \'c\': 1. The first most frequent character is \'a\' and the second most frequent character is \'b\'.","solution":"from collections import Counter def nth_most_frequent_character(s, n): Finds the N-th most frequent character in the string. If two characters have the same frequency, the lexicographically smaller character is considered to be more frequent. Parameters: s (str): the input string n (int): the rank of the frequency to find Returns: str: The N-th most frequent character # Count the frequency of each character in the string frequency = Counter(s) # Sort characters first by frequency (descending), then lexicographically sorted_characters = sorted(frequency.items(), key=lambda item: (-item[1], item[0])) # Return the N-th most frequent character return sorted_characters[n-1][0]"},{"question":"There are n students standing in a line, each with a different height given in an array heights. Your task is to rearrange the students such that the absolute difference between the heights of any two adjacent students is minimized. This ensures that the line is as smooth as possible, with no sudden steep changes in height. Input: - The first line contains a single integer n (2 ≤ n ≤ 1000), representing the number of students. - The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109), representing the heights of the students. Output: - Print n integers representing the heights of the students in the desired order. Examples: Input: 4 10 5 15 20 Output: 5 10 15 20 Input: 3 8 2 4 Output: 2 4 8 Note: In the first example, the sorted order of heights minimizes the absolute differences between adjacent students. Similarly, in the second example, sorting the heights results in the most sequentially smooth arrangement.","solution":"def rearrange_heights(heights): Rearrange the students such that the absolute difference between the heights of any two adjacent students is minimized by sorting the heights. :param heights: List of student heights. :return: List of heights in the desired order. heights.sort() return heights"},{"question":"In a remote village, farmers utilize a unique way of measuring their agricultural plots using stones. They have a square-shaped field divided into `NxN` smaller squares. Each cell in the field can either contain stones or be empty. Calculating the maximum area of contiguous empty squares (without stones) helps them to plan better for planting. However, they have limited resources to analyze such a large field. Your task is to help them by writing a program that determines the maximum area of contiguous empty squares in the given `NxN` field. # Input - The first line contains an integer `T`, denoting the number of test cases. - Each test case consists of `N` and an `NxN` matrix. - The first line contains an integer `N`, representing the size of the matrix. - The following `N` lines contain `N` integers each, where `0` represents an empty square and `1` represents a stone. # Output - For each test case, output a single integer that represents the maximum area of contiguous empty squares in the given field. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - The matrix values are either 0 or 1 # Sample Input ``` 2 3 0 0 1 0 1 0 1 0 0 4 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 ``` # Sample Output ``` 2 4 ``` # Explanation In the first test case, the maximum contiguous empty square has an area of `2` (formed by the squares at coordinates (1,1) and (1,2)). In the second test case, the maximum contiguous empty square has an area of `4` (formed by the squares at coordinates (2,2), (2,3), (3,2), and (3,3)).","solution":"def max_contiguous_empty_squares(T, test_cases): Calculates the maximum area of contiguous empty squares (without stones) in the given fields. Parameters: - T: int, number of test cases - test_cases: List of tuples, each containing (N, matrix) Returns: - List of integers, each representing the maximum area of contiguous empty squares for the respective test case def max_square_area(matrix, N): if N == 0: return 0 # dp[i][j] will be the size of the largest square whose bottom-right corner is at (i, j) dp = [[0] * N for _ in range(N)] max_side = 0 for i in range(N): for j in range(N): if matrix[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) # The area of the largest square is the side length squared return max_side**2 results = [] for case in test_cases: N, matrix = case results.append(max_square_area(matrix, N)) return results"},{"question":"Joe recently started a garden with N plants arranged in a straight line. He wants to place water sprinklers in such a way that every plant is watered. Each sprinkler has a range R, meaning it can cover the plant it is placed on and R plants to the left and R plants to the right. Help Joe determine the minimum number of sprinklers needed to ensure all plants are watered. -----INPUT FORMAT----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two integers N and R, where N is the number of plants and R is the range of each sprinkler. -----OUTPUT FORMAT----- - For each test case, output a single integer, the minimum number of sprinklers needed to water all plants. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10^9 - 1 leq R leq 10^5 -----Sample Input----- 2 5 1 6 2 -----Sample Output----- 2 2 -----Explanation----- For the first test case: - With N = 5 plants and a sprinkler range of R = 1: - Place the first sprinkler at plant 2, covering plants [1, 2, 3]. - Place the second sprinkler at plant 4, covering plants [3, 4, 5]. - Hence, a minimum of 2 sprinklers is needed. For the second test case: - With N = 6 plants and a sprinkler range of R = 2: - Place one sprinkler at plant 2, covering plants [1, 2, 3, 4]. - Place another sprinkler at plant 5, covering plants [3, 4, 5, 6]. - Hence, a minimum of 2 sprinklers is needed.","solution":"def min_sprinklers_needed(T, cases): results = [] for N, R in cases: if R == 0: results.append(N) else: sprinkler_range = 2 * R + 1 sprinklers_needed = (N + sprinkler_range - 1) // sprinkler_range results.append(sprinklers_needed) return results"},{"question":"A secure building has a single entry point and multiple rooms connected by a system of one-way corridors. Each corridor has a security camera installed that captures movements and sends the data to a central monitor room. To optimize the security operations, you need to determine the minimum number of cameras required to monitor all movements through the building. Your task is to write a program that reads the number of rooms, the entry point, and the corridors\' connections, and calculates the minimum number of cameras required. **Input** The input contains multiple test cases. Each test case has the following format: ``` E N entry u v u v ... ``` The first line contains two integers E (1 ≤ E ≤ 100) representing the number of corridors and N (1 ≤ N ≤ 100) representing the number of rooms. The second line contains a single integer entry (0 ≤ entry < N) indicating the entry point. Following this, there are E lines, each containing two integers u and v (0 ≤ u, v < N, u ≠ v) representing a directed corridor from room u to room v. An input of `0 0` denotes the end of the input. **Output** For each test case, output one line indicating the minimum number of cameras required to monitor all movements through the building. The output should be a single integer. **Example** ``` Input: 4 5 0 0 1 0 2 2 3 3 4 5 6 1 0 1 1 2 2 3 3 4 4 5 0 Output: 3 5 ``` **Explanation** In the first test case, you can cover all movements with cameras positioned at critical junctions, minimizing the total number of cameras required to ensure no movement goes unnoticed.","solution":"def calculate_minimum_cameras(E, N, entry, corridors): from collections import defaultdict, deque # Building the graph and in-degrees of nodes graph = defaultdict(list) in_degree = [0] * N for u, v in corridors: graph[u].append(v) in_degree[v] += 1 # Topological Sort using Kahn\'s Algorithm to find SCCs queue = deque() for i in range(N): if in_degree[i] == 0: queue.append(i) sorted_nodes = [] while queue: u = queue.popleft() sorted_nodes.append(u) for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) # Calculate the number of strongly connected components (SCC) # (SCCs is generally used here as each SCC should have at least one camera, if not self-contained within another) if len(sorted_nodes) == N: # All nodes are reachable, only one SCC return 1 else: # Multiply the number of disconnected components of the graph reachable_nodes = set(sorted_nodes) components_count = 0 for i in range(N): if i not in reachable_nodes: components_count += 1 queue.append(i) while queue: u = queue.popleft() if u not in reachable_nodes: reachable_nodes.add(u) for v in graph[u]: queue.append(v) return components_count def process_input(input_data): lines = input_data.strip().split(\\"n\\") idx = 0 results = [] while idx < len(lines): # Read E and N E, N = map(int, lines[idx].strip().split()) if E == 0 and N == 0: break idx += 1 # Read entry point entry = int(lines[idx].strip()) idx += 1 # Read corridors corridors = [] for _ in range(E): u, v = map(int, lines[idx].strip().split()) corridors.append((u, v)) idx += 1 # Calculate and store result result = calculate_minimum_cameras(E, N, entry, corridors) results.append(result) return results def main(input_data): results = process_input(input_data) for result in results: print(result)"},{"question":"The city is organizing a marathon, and they want to ensure that all track participants stay within the designated path. Runners can only move on a grid that consists of \'+\' characters, indicating the path, and \'.\' characters, indicating off-path areas. The marathon organizers need your help to check if there are any disconnected parts of the path. Disconnected parts are regions of \'+\' characters that cannot be reached from one another through horizontal or vertical movements. Write a program to determine if there is more than one disconnected part of the path on the grid. -----Input:----- - The first line contains two integers, n and m, representing the number of rows and columns of the grid, respectively. - The next n lines contain m characters each, where each character is either \'+\' (path) or \'.\' (off-path). -----Output:----- Print \\"Yes\\" if there are multiple disconnected parts of the path, otherwise print \\"No\\". -----Constraints:----- - 1 leq n leq 1000 - 1 leq m leq 1000 -----Sample Input:----- 4 5 ++.++ ..+.. ...+. ..... -----Sample Output:----- Yes -----EXPLANATION:----- In the sample input, there are two disconnected parts of the path: 1. The first part consists of the \'+\' characters in the first row. 2. The second part consists of the \'+\' characters in the third and fourth rows. Because there are multiple disconnected parts, the output is \\"Yes\\".","solution":"def find_disconnected_parts(n, m, grid): def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] != \'+\': return grid[i][j] = \'.\' # Mark the cell as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(i + dx, j + dy) components = 0 for i in range(n): for j in range(m): if grid[i][j] == \'+\': components += 1 dfs(i, j) return \\"Yes\\" if components > 1 else \\"No\\" # Example usage: # n = 4 # m = 5 # grid = [ # \\"++.++\\", # \\"..+..\\", # \\"...+.\\", # \\".....\\" # ] # find_disconnected_parts(n, m, [list(row) for row in grid]) # \\"Yes\\""},{"question":"A string transformation game consists of the following steps: Polycarp is given an initial string `s` of length `n` consisting of lowercase English letters. He can perform the following operations: 1. Choose any index `i` (1 ≤ i ≤ n) as the starting position. 2. At each step, he moves to the next character, wrapping around to the beginning of the string if he reaches the end. This means, from position `i`, the next position would be `i+1`, and if it surpasses `n`, it wraps around to `1`. 3. Polycarp can either keep the current character to accumulate his score or skip it to move to the next character. However, there is a constraint: he can skip at most one character in a sequence before he must keep a character. 4. Repeating by wrapping around the string, he needs to calculate the highest possible score where the score is the total number of unique characters collected. Help Polycarp determine the maximum number of unique characters he can collect by starting at any index and using the rules optimally. -----Input----- The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of a single line containing a string `s` of length `n` (1 ≤ n ≤ 1000). -----Output----- For each test case, output on a new line the maximum number of unique characters Polycarp can collect. -----Examples----- Input 3 abcde abacad abcdabc Output 5 4 4 -----Explanation----- In the first test case, Polycarp can collect all 5 unique characters regardless of starting position or skips since there are no repeating characters. In the second test case, Polycarp can start at index 1, and collect \'a\', \'b\', \'c\', \'d\', but must be careful to only skip redundant \'a\'s optimally. In the third test case, Polycarp can collect \'a\', \'b\', \'c\', and \'d\' as these are the maximum number of unique characters by skipping repeated characters.","solution":"def max_unique_characters(s): Returns the maximum number of unique characters Polycarp can collect. n = len(s) max_unique = 0 for start in range(n): visited = set() count = 0 position = start skips = 0 while True: if s[position] not in visited: visited.add(s[position]) count += 1 skips = 0 # reset skips after keeping a character else: skips += 1 if skips > 1: # we can skip at most one character break position = (position + 1) % n if position == start: break max_unique = max(max_unique, count) return max_unique def solution(t, strings): results = [max_unique_characters(s) for s in strings] return results"},{"question":"A popular programming contest is being hosted, and you are responsible for scheduling the problems to be presented to the contestants. To make the contest challenging, the problems need to be arranged in such a way that each problem\'s difficulty is greater than or equal to the difficulty of the previous problem. You have been given an array of n problems, where each problem has a specified difficulty level. You need to find the minimum number of problems that need to be removed so that the remaining problems are sorted in non-decreasing order of difficulty. -----Input----- The first line of the input contains an integer n (1 leq n leq 10^{5}), the number of problems. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), representing the difficulty levels of the problems. -----Output----- Print a single integer — the minimum number of problems that need to be removed to make the difficulties of the remaining problems non-decreasing. -----Examples----- Input: 5 5 3 4 8 6 Output: 2 Input: 4 2 2 2 2 Output: 0 Input: 3 4 3 2 Output: 2 -----Note----- In the first example, one way to achieve the desired outcome is to remove the problems with difficulty 5 and 8, leaving the problems 3, 4, 6 in non-decreasing order. In the second example, the difficulties are already in non-decreasing order, so no problems need to be removed. In the third example, the remaining problems are 2 after removing 4 and 3.","solution":"def min_removals_to_sort(arr): Returns the minimum number of removals to make the array non-decreasing. n = len(arr) # Initialize the longest increasing subsequence (LIS) array lis = [1] * n # Compute the LIS values for i in range(1, n): for j in range(i): if arr[i] >= arr[j]: lis[i] = max(lis[i], lis[j] + 1) # The length of the longest increasing subsequence max_lis = max(lis) # Minimum removals is the difference between n and the length of LIS return n - max_lis"},{"question":"A programming team at a local startup decides to have some fun with strings of binary numbers. They play a game where they take a binary string, and for each move, they can flip any single bit (i.e., change \'0\' to \'1\' or \'1\' to \'0\'). The objective is to convert the given binary string to the string that is lexicographically smallest (the smallest binary string that can be formed using the same number of \'1\'s and \'0\'s as the given string). Given a binary string, your task is to convert it to the lexicographically smallest string possible by flipping the bits as described. Input The first line contains an integer t representing the number of test cases. Each of the next t lines contains a single binary string of length not more than 10,000 characters (consisting of \'0\'s and \'1\'s). Output Output the lexicographically smallest string possible for each test case. Example Input: 3 1100 10101 111000 Output: 0011 00111 000111","solution":"def lexicographically_smallest_binary_string(binary_string): Converts the given binary string to the lexicographically smallest string with the same number of \'1\'s and \'0\'s. count_0 = binary_string.count(\'0\') count_1 = len(binary_string) - count_0 return \'0\' * count_0 + \'1\' * count_1 def process_test_cases(test_cases): Processes multiple test cases and returns the results for each case. results = [] for case in test_cases: results.append(lexicographically_smallest_binary_string(case)) return results"},{"question":"You are given an array of n integers which represents the height of hills in a row. Your task is to determine the minimum number of additional hills that need to be constructed such that no hill\'s height is the same as any of its adjacent hills. If it is already not possible, return -1. Example 1: Input: n = 5 heights = [1, 2, 2, 3, 4] Output: 1 Explanation: You can change the height of the second 2 to 5 (or any other height not equal to 2, 1, or 3). Example 2: Input: n = 3 heights = [3, 3, 3] Output: 2 Explanation: You can change the height of the second and third hills to 1 and 2, respectively. Example 3: Input: n = 4 heights = [1, 2, 1, 2] Output: 0 Explanation: All adjacent hills already have different heights. Your Task: You don’t need to read input or print anything. Your task is to complete the function minAdditionalHills() which takes an integer n and an array heights as input and returns the minimum number of additional hills needed, or -1 if it\'s not possible. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^5 1 ≤ heights[i] ≤ 10^9","solution":"def minAdditionalHills(n, heights): if n == 1: return 0 changes = 0 for i in range(1, n): if heights[i] == heights[i - 1]: changes += 1 # Change current hill to avoid duplication with neighbors if i + 1 < n and heights[i] != heights[i + 1]: heights[i] = float(\'inf\') # Inaccessible number making sure this index is counted as changed return changes"},{"question":"Given a list of integers, determine whether the list can be sorted into ascending order by reversing exactly one contiguous subarray of the list. Input: The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 1,000,000) — the elements of the array. Output: Print \\"YES\\" if the array can be sorted by reversing exactly one contiguous subarray, otherwise print \\"NO\\". Examples: Input 5 1 3 2 4 5 Output YES Input 4 1 4 3 2 Output YES Input 5 1 5 3 3 2 Output NO Note: In the first example, the array can be sorted by reversing the subarray [3, 2] to make it [2, 3]. In the second example, the array can be sorted by reversing the subarray [4, 3, 2] to make it [2, 3, 4]. In the third example, no single contiguous subarray reversal will result in the array being sorted in ascending order.","solution":"def can_be_sorted_by_reversing_subarray(arr): n = len(arr) if n == 1: return \\"YES\\" # Find the first dip in the array start = 0 while start < n - 1 and arr[start] < arr[start + 1]: start += 1 # If the array is already sorted if start == n - 1: return \\"YES\\" # Find the end of the dip end = start while end < n - 1 and arr[end] > arr[end + 1]: end += 1 # Reverse the subarray start to end arr[start:end + 1] = reversed(arr[start:end + 1]) # Check if the array is sorted now for i in range(1, n): if arr[i - 1] > arr[i]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of strings where each string consists of lowercase English letters. You need to find out which letter appears first among all the strings and how many times it appears in the entire list. If two or more letters appear at the same position across different strings, the lexicographically smallest letter should be chosen. Write a function that takes the list of strings as input and returns the letter that appears first and the number of times it appears in the entire list. Constraints * Each string in the input will have at least one character and at most 100 characters. * The input list will contain at least 1 string and at most 1000 strings. Input Input is given in the following format: n s_1 s_2 ... s_n where n is the number of strings, and s_i is the i-th string. Output Print the letter that appears first among all the strings and the number of times it appears. Examples Input 4 hello world hi wow Output h 2 Input 3 abcd efgh ijkl Output a 1","solution":"def first_appearing_letter(strings): Returns the first appearing letter across all strings and the number of times it appears in the entire list. first_occurrence = [float(\'inf\')] * 26 # to record the first occurrence of each letter letter_count = [0] * 26 # to count occurrences of each letter for string in strings: for idx, char in enumerate(string): char_index = ord(char) - ord(\'a\') letter_count[char_index] += 1 if first_occurrence[char_index] == float(\'inf\'): first_occurrence[char_index] = idx min_position = float(\'inf\') letter = \'\' for idx, pos in enumerate(first_occurrence): if pos < min_position: min_position = pos letter = chr(idx + ord(\'a\')) return letter, letter_count[ord(letter) - ord(\'a\')] def process_input(input_data): input_list = input_data.strip().split(\'n\') n = int(input_list[0]) strings = input_list[1:n+1] return strings def main(input_data): strings = process_input(input_data) letter, count = first_appearing_letter(strings) print(letter, count)"},{"question":"Given an integer array, implement a function `smallestUniqueWindow()` that returns the length of the smallest window that contains all unique elements of the given array at least once. Input: The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N denoting the size of the array. The second line contains N space-separated integers representing the array. Output: For each test case, output a single integer, the length of the smallest window that contains all unique elements. User Task: The task is to complete the function `smallestUniqueWindow()` which takes an integer array as input and returns the length of the smallest window containing all unique elements. Constraints: 1 <= T <= 100 1 <= N <= 100 1 <= arr[i] <= 1000 Example: Input: 2 7 1 2 2 3 1 4 3 5 1 2 3 4 5 Output: 4 5 Explanation: Testcase 1: The sub-array [2, 3, 1, 4] contains all the unique elements [1, 2, 3, 4] of the original array. Testcase 2: The entire array [1, 2, 3, 4, 5] is already the smallest window containing all unique elements.","solution":"def smallestUniqueWindow(arr): This function takes a list of integers and returns the length of the smallest window that contains all unique elements of the given array at least once. unique_elements = set(arr) required = len(unique_elements) n = len(arr) left = 0 element_count = {} min_window = float(\'inf\') count_unique = 0 for right in range(n): if arr[right] not in element_count: element_count[arr[right]] = 0 element_count[arr[right]] += 1 if element_count[arr[right]] == 1: count_unique += 1 while count_unique == required: min_window = min(min_window, right - left + 1) element_count[arr[left]] -= 1 if element_count[arr[left]] == 0: count_unique -= 1 left += 1 return min_window def run_test_cases(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 results = [] for _ in range(T): N = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].strip().split())) index += 2 results.append(smallestUniqueWindow(arr)) return results"},{"question":"Median Maintenance You are tasked with designing a system that maintains a dynamically changing list of numbers and returns the median of the list whenever requested. The median is the value that separates the higher half from the lower half of a data sample. If the list has an odd number of elements, the median is the middle element; if it has an even number of elements, the median is the average of the two middle elements. You need to implement a class `MedianFinder` that supports the following methods: - `addNum(int num)`: Add an integer `num` from the data stream to the data structure. - `findMedian()`: Return the median of all elements so far. Your implementation should ensure that the `findMedian` operation is efficient, even when the data stream is large. Constraints: - The number of calls to `addNum` and `findMedian` should be well-distributed and reasonably frequent. - Values are guaranteed to be in the range `[-10^5, 10^5]`. ```python class MedianFinder: def __init__(self): Initialize your data structure here. pass def addNum(self, num: int) -> None: Adds a num into the data structure. pass def findMedian(self) -> float: Returns the median of current data stream. pass ``` Example: ```python # Example usage mf = MedianFinder() mf.addNum(1) mf.addNum(2) print(mf.findMedian()) # Output: 1.5 mf.addNum(3) print(mf.findMedian()) # Output: 2 ``` **Hints**: - Consider using two heaps to maintain the order of elements efficiently. - Ensure that the bigger heap\'s smallest element is always greater than or equal to the smaller heap\'s largest element to easily compute the median.","solution":"import heapq class MedianFinder: def __init__(self): Initialize your data structure here. self.small = [] # max-heap (simulated with negated values) self.large = [] # min-heap def addNum(self, num: int) -> None: Adds a num into the data structure. # Add num to max heap (invert num to simulate max heap in python) heapq.heappush(self.small, -num) # Balancing step: move the largest value in small (max heap) to large (min heap) heapq.heappush(self.large, -heapq.heappop(self.small)) # Ensure the number of elements in small heap is at most one more than large heap if len(self.small) < len(self.large): heapq.heappush(self.small, -heapq.heappop(self.large)) def findMedian(self) -> float: Returns the median of current data stream. if len(self.small) > len(self.large): return -self.small[0] else: return (-self.small[0] + self.large[0]) / 2.0"},{"question":"Given a string s, determine the number of unique substrings of s. A substring is defined as any contiguous sequence of characters within a string. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the string. The second line contains the string s, which consists of n lowercase English letters. Output Output a single integer, the number of unique substrings of s. Examples Input 4 abab Output 7 Input 6 abcdef Output 21","solution":"def count_unique_substrings(s): Returns the number of unique substrings of the string s. n = len(s) unique_substrings = set() for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"A company stores data about its employees in a hierarchical structure where each employee has a unique ID and each employee, except the CEO, reports to exactly one direct supervisor. Your task is to find the Employee ID of the \\"Lowest Common Ancestor\\" (LCA) of two given employees in the company\'s hierarchy. The LCA is defined as the lowest employee (farthest from the CEO) that is an ancestor to both employees. You are given the following: 1. `employeeData`: A list of tuples where each tuple `(child, parent)` represents that the `child` employee reports to the `parent` employee. 2. `emp1`: The Employee ID of the first employee. 3. `emp2`: The Employee ID of the second employee. Write a function `findLCA(employeeData, emp1, emp2)` that returns the Employee ID of the LCA of emp1 and emp2. Example 1: Input: employeeData = [(5, 3), (3, 2), (2, 1), (4, 3)] emp1 = 5 emp2 = 4 Output: 3 Example 2: Input: employeeData = [(5, 3), (3, 2), (2, 1), (4, 3), (6, 4)] emp1 = 6 emp2 = 5 Output: 3 Example 3: Input: employeeData = [(5, 3), (3, 2), (2, 1), (4, 3)] emp1 = 5 emp2 = 2 Output: 2 Example 4: Input: employeeData = [(5, 3), (3, 2), (2, 1), (4, 3)] emp1 = 6 emp2 = 7 Output: -1 (Assume employees 6 and 7 are not part of the data) **Note:** - The ID of the CEO is always 1. - The number of employees will not exceed 1000. - Employee IDs are between 1 and 1000. - If emp1 or emp2 do not exist in the provided data, return -1 as the output.","solution":"def findLCA(employeeData, emp1, emp2): Returns the Employee ID of the Lowest Common Ancestor (LCA) of emp1 and emp2. if emp1 == emp2: return emp1 # Create parent mapping parent = {} for child, supervisor in employeeData: parent[child] = supervisor # Traverse ancestors of emp1 ancestors1 = set() while emp1 in parent: ancestors1.add(emp1) emp1 = parent[emp1] ancestors1.add(emp1) # Finally add the CEO # Traverse ancestors of emp2 and find the first common ancestor while emp2 not in ancestors1: if emp2 not in parent: return -1 emp2 = parent[emp2] return emp2"},{"question":"Write a function `south_america_countries` that takes a list of country names as input and returns a set of names of countries that are located in South America. You can assume the input list contains country names as strings and each country\'s name starts with a capital letter (consistent naming convention). Here\'s the list of South American countries: ``` Argentina, Bolivia, Brazil, Chile, Colombia, Ecuador, Guyana, Paraguay, Peru, Suriname, Uruguay, Venezuela ``` Example Usage: ```python def south_america_countries(countries): # your code here # Example 1 input_countries = [\\"United States\\", \\"Brazil\\", \\"Germany\\", \\"Argentina\\"] output = south_america_countries(input_countries) print(output) # Output should be {\'Brazil\', \'Argentina\'} # Example 2 input_countries = [\\"China\\", \\"Chile\\", \\"Canada\\", \\"Nigeria\\"] output = south_america_countries(input_countries) print(output) # Output should be {\'Chile\'} ``` Note: - The function should be case-sensitive, meaning \'brazil\' should not be considered equivalent to \'Brazil\'. - The input list may contain countries that are not in the list of South American countries; these should be ignored in the output. - The order of the returned set does not matter.","solution":"def south_america_countries(countries): Returns a set of South American countries from the provided list of countries. south_american_countries = { \\"Argentina\\", \\"Bolivia\\", \\"Brazil\\", \\"Chile\\", \\"Colombia\\", \\"Ecuador\\", \\"Guyana\\", \\"Paraguay\\", \\"Peru\\", \\"Suriname\\", \\"Uruguay\\", \\"Venezuela\\" } return set(country for country in countries if country in south_american_countries)"},{"question":"Elaine has a plot of land shaped as a rectangle and plans to plant trees on it. She can plant one tree at any point on the plot as long as the number of trees in any given row or column does not exceed a given limit. Elaine wants to know the maximum number of trees she can plant under these conditions. Can you help her figure that out? -----Input----- First line of the input contains two integers n and m (1 ≤ n, m ≤ 10^9) — the dimensions of the plot represented as the number of rows and columns respectively. Second line contains a single integer k (1 ≤ k ≤ min(n, m)) — the maximum number of trees that can be planted in any row or column. -----Output----- Print the only integer — the maximum number of trees that Elaine can plant. -----Examples----- Input 4 5 2 Output 8 Input 3 3 1 Output 3 -----Note----- In the first sample, Elaine can plant 2 trees in each of the 4 rows transferring the remaining planting to columns without exceeding the limit in any row or column, thus planting 8 trees in total. In the second sample, Elaine can only plant 1 tree in each row and each column without breaking the rule, which results in 3 trees planted in total.","solution":"def max_trees(n, m, k): Given the dimensions of the plot n (rows) and m (columns) and the limit k on the number of trees in any single row or column, this function returns the maximum number of trees that can be planted. return min(n, m) * k"},{"question":"Task You are working on a software development project that involves manipulating strings. One of the tasks requires you to find the longest substring within a given string that contains exactly two distinct characters. Write a function that takes a single string as input and returns the longest substring with exactly two distinct characters. If there are multiple such substrings of the same length, return the one which appears first. Example For `s = \\"abcbbbbcccbdddadacb\\"`, the output should be `\\"bcbbbbcccb\\"`. For `s = \\"aabbcc\\"`, the output should be `\\"aabb\\"`. Input/Output - `[input]` string `s` A string consisting of lowercase English letters. Constraints: `1 ≤ len(s) ≤ 10^5` - `[output]` a string The longest substring that contains exactly two distinct characters.","solution":"def longest_substring_two_distinct(s): Returns the longest substring with exactly two distinct characters. If there are multiple such substrings of the same length, returns the one which appears first. from collections import defaultdict if len(s) < 2: return \\"\\" start = 0 max_length = 0 max_substring = \\"\\" char_map = defaultdict(int) for end in range(len(s)): char_map[s[end]] += 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end + 1] return max_substring"},{"question":"Jared is a botanist who wants to create a greenhouse with a specific arrangement of plants. He has N different types of plants, each type needing a specific range of temperature to grow optimally. He wants to know the minimum number of temperature zones he needs to create in his greenhouse such that each type of plant grows within its optimal temperature range. For example, suppose Jared has three types of plants with the following temperature ranges: [15, 20], [18, 25], and [23, 30]. He can create three temperature zones: [15, 17], [18, 22], and [23, 30]. Write a program that, given the temperature ranges of each plant type, determines the minimum number of temperature zones required. -----Inputs----- The first line contains a single integer N (1 leq N leq 100), the number of different types of plants. Each of the following N lines contains two space-separated integers L and H (0 leq L < H leq 1000), representing the lowest and highest temperature that the i-th type of plant can grow in. -----Outputs----- On a single line output the minimal number of temperature zones required. -----Examples----- Sample Input 1: 3 15 20 18 25 23 30 Sample Output 1: 3 Sample Input 2: 4 5 10 10 15 15 20 20 25 Sample Output 2: 4","solution":"def min_temperature_zones(n, ranges): Determines the minimum number of temperature zones required for different plant types. Args: n (int): Number of different types of plants. ranges (list of tuples): List of tuples where each tuple contains two integers (L, H) that represent the lowest and highest temperature the i-th type of plant can grow in. Returns: int: Minimum number of temperature zones required. # Sort the ranges based on their ending temperature ranges.sort(key=lambda x: x[1]) # Initialize the count of required zones zones = 0 # The end of the last added zone last_zone_end = -1 for temp_range in ranges: if temp_range[0] > last_zone_end: # Create a new zone zones += 1 last_zone_end = temp_range[1] return zones"},{"question":"Task Write a function that takes a string containing a mathematical expression and returns a translated string where all the digits have been replaced with their English word equivalents. # Inputs - A string representing a mathematical expression, which includes digits (0-9) and common operators (+, -, *, /). # Outputs - A string with all digits replaced by the corresponding English words. # Examples Input | Output --- | --- \\"3+5\\" | \\"three+five\\" \\"12*6\\" | \\"onetwo*six\\" \\"8/4-7\\" | \\"eight/four-seven\\" Note: - The input string will contain only valid characters (digits 0-9 and the operators +, -, *, /). - Assume the input will not have any whitespace characters.","solution":"def digit_to_word(digit): Helper function to convert a single digit to its corresponding English word. digit_words = { \'0\': \'zero\', \'1\': \'one\', \'2\': \'two\', \'3\': \'three\', \'4\': \'four\', \'5\': \'five\', \'6\': \'six\', \'7\': \'seven\', \'8\': \'eight\', \'9\': \'nine\' } return digit_words[digit] def translate_expression(expression): Takes a string containing a mathematical expression and returns a translated string where all the digits have been replaced with their English word equivalents. translated_expression = \\"\\" for char in expression: if char.isdigit(): translated_expression += digit_to_word(char) else: translated_expression += char return translated_expression"},{"question":"Alice and Bob are playing a game called **\\"Equilibrium Point\\"**. They have an array of integers, `arr`, and they want to find a position in the array where the sum of the elements to the left is equal to the sum of the elements to the right. If such a position exists, it is called an \\"equilibrium point\\". Write a function that takes an array of integers and returns the index of the equilibrium point if it exists, or -1 if it doesn’t. If there are multiple equilibrium points, return the smallest index. # Function Signature ```python def find_equilibrium(arr: list[int]) -> int: pass ``` # Input - A list `arr` of integers where `0 <= len(arr) <= 10^5` and `-10^4 <= arr[i] <= 10^4`. # Output - The index of the equilibrium point if it exists, otherwise -1. # Example ```python find_equilibrium([1, 3, 5, 2, 2]) Returns: 2 Explanation: The sum of elements to the left of index 2 (1 + 3) is equal to the sum of elements to the right of index 2 (2 + 2). ``` ```python find_equilibrium([1, 2, 3]) Returns: -1 Explanation: There is no index where the sum of elements to the left is equal to the sum of elements to the right. ``` # Notes - If the array is empty, return -1. - Consider edge cases such as an array containing one or two elements.","solution":"def find_equilibrium(arr: list[int]) -> int: Returns the index of the equilibrium point if it exists, or -1 if it doesn’t. if not arr: return -1 total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): # Calculate right sum by subtracting current element and left sum from total sum right_sum = total_sum - left_sum - num if left_sum == right_sum: return i left_sum += num return -1"},{"question":"Given a linked list where each node has a random pointer which could point to any node or null or not point to any node at all. You need to create a deep copy of this linked list. Example: Input: head = [7,null],[13,0],[11,4],[10,2],[1,0] Explanation: The first node with value 7 points to null. The second node with value 13 points to the first node. The third node with value 11 points to the fifth node (index 4). The fourth node with value 10 points to the third node (index 2). The fifth node with value 1 points to the first node. Output: A new deep copied linked list with the same structure as the input. Your Task: Complete the function copyRandomList() which takes the head of the original linked list as input and returns the head of the deep copied linked list. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: -10000 <= Node.val <= 10000 Node.random is null or points to any node.","solution":"class Node: def __init__(self, val=0, next=None, random=None): self.val = val self.next = next self.random = random def copyRandomList(head): if not head: return None # Step 1: Create new nodes and interweave the list current = head while current: new_node = Node(current.val) new_node.next = current.next current.next = new_node current = new_node.next # Step 2: Assign random pointers to the new nodes current = head while current: if current.random: current.next.random = current.random.next current = current.next.next # Step 3: Separate the new nodes to form the copied list current = head copy_head = head.next while current: new_node = current.next current.next = new_node.next if new_node.next: new_node.next = new_node.next.next current = current.next return copy_head"},{"question":"Mia is a software engineer working at a tech company. She has been assigned to manage the coding access logs. The logs consist of the account IDs that have attempted to access the system. Each account may attempt to access multiple times, and Mia needs to keep track of these access attempts efficiently. Your task is to help Mia handle q queries about these access logs. Specifically, each query will either be: 1. An access attempt from an account ID. 2. A report on the number of unique account IDs that have attempted access up to that point. Implement a solution that processes these queries efficiently. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000), where n is the number of distinct account IDs possible and q is the number of queries. The next q lines contain either an access attempt or a report query. An access attempt is represented by a single integer x (1 ≤ x ≤ n), indicating an account ID trying to access the system. A report query is represented by the integer 0. Output For each report query, output the number of unique account IDs that have attempted access so far. Example Input 10 8 5 3 7 0 2 3 0 1 Output 3 4 Explanation The account access attempts are: 5, 3, 7, then a report query (which counts 3 unique IDs: 5, 3, 7), followed by more attempts 2, 3 (which is a duplicate), then another report query (which counts 4 unique IDs: 5, 3, 7, 2), and finally an attempt by ID 1 (which is not reported as no more report queries follow).","solution":"def process_queries(n, q, queries): Processes a list of access log queries and returns the result of report queries. Args: n (int): The number of possible distinct account IDs. q (int): The number of queries. queries (list of int): The queries, where a positive integer x (1 ≤ x ≤ n) corresponds to an access attempt, and 0 corresponds to a report query. Returns: list of int: The results of the report queries. unique_ids = set() report_results = [] for query in queries: if query == 0: report_results.append(len(unique_ids)) else: unique_ids.add(query) return report_results"},{"question":"Zara is developing a new application that needs to handle various queries on arrays efficiently. She has designed a specific type of query called a \\"range sum query.\\" Given an array of integers, each query will ask for the sum of a subarray defined by a range [L, R] inclusive. Zara is looking for an efficient way to process these queries since the number of queries can be large. You are tasked with helping Zara by writing a function to process these range sum queries effectively. Input: First line of input contains two integers N and Q, where N is the number of elements in the array, and Q is the number of queries. Second line of input contains N integers, representing the elements of the array. The next Q lines each contain two integers L and R, representing the range for which the sum of the subarray needs to be calculated. (0-indexed) Output: For each query, output the sum of the elements in the subarray from index L to index R inclusive on a new line. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - -10^4 ≤ Array elements ≤ 10^4 - 0 ≤ L ≤ R < N Sample Input: 5 3 1 2 3 4 5 0 2 1 3 2 4 Sample Output: 6 9 12","solution":"def preprocess_array(arr): Preprocess the array to calculate the prefix sums. prefix_sums = [0] * (len(arr) + 1) for i in range(len(arr)): prefix_sums[i + 1] = prefix_sums[i] + arr[i] return prefix_sums def range_sum_query(prefix_sums, L, R): Returns the sum of the elements in the subarray from index L to R inclusive. return prefix_sums[R + 1] - prefix_sums[L] def process_queries(N, Q, arr, queries): Processes all the queries and returns the results. prefix_sums = preprocess_array(arr) results = [] for L, R in queries: results.append(range_sum_query(prefix_sums, L, R)) return results"},{"question":"A small town has recently installed a new water irrigation system, and they need help optimizing the watering schedule for their farms. The system can only handle a limited number of watering operations at any given time. Your task is to help the town maximize the number of farms that can be watered. Each farm submits a request specifying the time they need the irrigation system active. Each request comes in the form of a start time `s`, an end time `e`. This means that a farm requests the system from time `s` to `e-1` but releases the system at time `e` so another request can begin at that time. All times are given in hours. Input: - The first line of input contains an integer `T` indicating the number of test cases, with `1 ≤ T ≤ 20`. - Each test case starts with two integers `n` and `m`, where `1 ≤ n ≤ 100` and `1 ≤ m ≤ 100`. This means there are `n` farm requests to process and the irrigation system is available over `m` hours from time 0 to time `m` minus one. - The following `n` lines describe a request with two integers `s` and `e` where `0 ≤ s < e ≤ m` indicating the start and end time of a request. - The next line contains `m` integers, `c0, c1, ..., cm-1` each between 1 and 50, where `ci` indicates the maximum number of concurrent operations the irrigation system can handle at hour `i`. Each test case is followed by a blank line, including a blank line before the first test case. Output: - For each test case, output a single integer indicating the maximum number of farm requests that can be satisfied while ensuring that the number of concurrent operations at any hour does not exceed the system\'s capacity. Example: Input: 1 5 6 0 2 1 3 2 5 4 6 3 5 3 2 1 2 3 2 Output: 4 Explanation: In the sample input, the optimal solution is to satisfy the requests at times: - (0, 2) - (1, 3) - (2, 5) - (4, 6) During each hour, the number of operations does not exceed the system\'s capacity: - Times 0 and 1: 2 operations (within limit of 3 and 2) - Time 2: 1 operation (within limit of 1) - Times 3 and 4: 2 operations (within limit of 2 and 3) - Time 5: 1 operation (within limit of 2) Thus, the maximum number of requests that can be satisfied is 4.","solution":"def max_satisfied_requests(T, test_cases): results = [] for t in range(T): n, m, requests, capacities = test_cases[t] # Create a time slots list to track concurrent operations slots = [0] * m # Sort requests by their end times to use a greedy approach requests.sort(key=lambda x: x[1]) count = 0 for s, e in requests: if all(slots[i] < capacities[i] for i in range(s, e)): count += 1 for i in range(s, e): slots[i] += 1 results.append(count) return results"},{"question":"You are given a sequence of n integers. You need to perform a series of operations on this sequence. In each operation, you can choose any two different elements in the sequence and replace both of them with their sum. After performing exactly n-1 operations, there will be only one number left in the sequence. Your task is to determine the minimum possible value of the final remaining number. -----Input----- The first line contains one integer n (2 le n le 100000) — the number of integers in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the integers in the sequence. -----Output----- Print one integer — the minimum possible value of the final remaining number. -----Example----- Input 4 1 2 3 4 Output 10 -----Note----- In the first example, we can perform the operations as follows: 1. Choose 1 and 2, replace them with 3. The sequence becomes [3, 3, 4]. 2. Choose 3 and 3, replace them with 6. The sequence becomes [6, 4]. 3. Choose 6 and 4, replace them with 10. The sequence contains just one element now, which is 10.","solution":"def minimum_final_value(n, sequence): Determines the minimum possible value of the final remaining number after performing n-1 operations. Parameters: n (int): Number of integers in the sequence. sequence (list): List of integers in the sequence. Returns: int: The minimum possible value of the final remaining number. # The minimum possible value of the final remaining number is the sum of all elements in the list return sum(sequence)"},{"question":"You are managing a smart LED display panel for a theatre. The LED panel is capable of displaying a sequence of lowercase letters. You want to display a palindrome for a special scene in the play. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). You are given a string `s` and your task is to determine the minimum number of character insertions required to make the string a palindrome. Example: `s = abca` To make it a palindrome, you can insert \'c\' at the beginning and the end to get \'cbcabc\'. The string becomes `acbca` which is a palindrome with 1 insertion. Function Description: Complete the function `minInsertionsPalindrome` in the editor below. `minInsertionsPalindrome` has the following parameters: - `string s` – the input string. Returns: - `int` – the minimum number of insertions required. Input Format: A single line containing the string `s`. Constraints: - `1 <= len(s) <= 1000` - The input string will contain only lowercase English letters. Sample Input 0: race Sample Output 0: 3 Explanation 0: To make `race` a palindrome, you can insert characters to form \\"ecarace\\" which reads the same backward as forward. So, the minimum number of insertions is 3. Sample Input 1: madam Sample Output 1: 0 Explanation 1: The input string `madam` is already a palindrome, so no insertions are needed. Note: You can use dynamic programming to solve this problem efficiently.","solution":"def minInsertionsPalindrome(s): Returns the minimum number of insertions required to make string s a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for i in range(n)] for j in range(n)] # Build the table. Note that the lower diagonal values of the table # are useless and not filled in the process. The table is filled # in a manner similar to Matrix Chain Multiplication DP solution for gap in range(1, n): for l in range(n-gap): h = l + gap if s[l] == s[h]: dp[l][h] = dp[l+1][h-1] else: dp[l][h] = min(dp[l][h-1], dp[l+1][h]) + 1 return dp[0][n-1] # Example usage: # s = \\"race\\" # print(minInsertionsPalindrome(s)) # Output: 3"},{"question":"Given a list of N distinct integers, determine if there exists a pair of indices (i, j) such that 1 ≤ i < j ≤ N and the sum of the elements at these indices is an even number. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case starts with an integer N, the size of the list. - The next line contains N space-separated integers, the elements of the list. ------ Output Format ------ For each test case, output YES if there exists a pair (i, j) with an even sum, otherwise NO. The output is case-insensitive. Thus, the strings Yes, YES, yes, and yeS are all considered identical. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 2 ≤ N ≤ 10^{5} −10^9 ≤ text{Element of the list} ≤ 10^9 ----- Sample Input 1 ------ 2 3 1 3 5 4 1 2 3 4 ----- Sample Output 1 ------ NO YES ----- Explanation 1 ------ Test case 1: No pair of elements have an even sum. Test case 2: The pair (2, 4) gives an even sum (2+4=6), so the answer is YES.","solution":"def has_even_sum_pair(test_cases): Determines if there exists a pair of indices (i, j) such that 1 ≤ i < j ≤ N and the sum of the elements at these indices is an even number. Parameters: test_cases (list of tuples): List of test cases where each test case is a tuple. The first element of the tuple is an integer N, the size of the list. The second element is a list of N integers. Returns: list of str: List of \\"YES\\" or \\"NO\\" for each test case. results = [] for N, arr in test_cases: evens = sum(1 for x in arr if x % 2 == 0) odds = N - evens if evens > 1 or (evens >= 1 and odds >= 1): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is participating in a card game where she has a deck of cards numbered 1 to n. She needs to sort the deck in ascending order where initially the cards are shuffled. She can perform exactly two types of operations on the deck: 1. `Reverse`: Alice can reverse any contiguous subsequence of the deck. 2. `Swap`: Alice can swap any two cards in the deck. Given the initial permutation of the deck, help Alice determine the minimum number of operations required to sort the deck in ascending order. -----Input----- The first and only line of the input contains a single integer n (1 ≤ n ≤ 100), followed by a permutation of numbers from 1 to n. -----Output----- Print a single integer denoting the minimum number of operations required to sort the deck in ascending order. -----Example----- Input 5 3 1 2 5 4 Output 2 Input 4 4 3 2 1 Output 1 Input 3 3 1 2 Output 2 -----Note----- In the first example: The deck can be sorted in 2 operations: 1. Reverse the subsequence from the first to the third position: [3, 1, 2, 5, 4] -> [2, 1, 3, 5, 4] 2. Swap the second and third cards: [2, 1, 3, 5, 4] -> [1, 2, 3, 5, 4] In the second example: The deck can be sorted in 1 operation: 1. Reverse the entire deck: [4, 3, 2, 1] -> [1, 2, 3, 4] In the third example: The deck can be sorted in 2 operations: 1. Reverse the subsequence from the first to the second position: [3, 1, 2] -> [1, 3, 2] 2. Reverse the subsequence from the second to the third position: [1, 3, 2] -> [1, 2, 3]","solution":"def min_operations_to_sort_deck(n, perm): Returns the minimum number of operations required to sort the deck in ascending order. sorted_perm = sorted(perm) if perm == sorted_perm: return 0 # Check if we can sort by one reverse for i in range(n): for j in range(i + 1, n): new_perm = perm[:i] + perm[i:j+1][::-1] + perm[j+1:] if new_perm == sorted_perm: return 1 # If can\'t be done with one reverse, then check if can be done with one swap for i in range(n): for j in range(i + 1, n): new_perm = perm[:i] + [perm[j]] + perm[i+1:j] + [perm[i]] + perm[j+1:] if new_perm == sorted_perm: return 1 # Otherwise, it can be done with at most 2 operations return 2"},{"question":"Create a function `sum_mult_of_3_and_5` which takes a positive integer `n` as input and returns the sum of all multiples of 3 or 5 that are less than `n`. Here\'s the required output format: ```python result = sum_mult_of_3_and_5(10) # The multiples of 3 or 5 below 10 are 3, 5, 6, and 9. # Therefore, the output should be: # result -> 23 result = sum_mult_of_3_and_5(20) # The multiples of 3 or 5 below 20 are 3, 5, 6, 9, 10, 12, 15, and 18. # Therefore, the output should be: # result -> 78 ``` ```haskell sumMultOf3And5 10 `shouldBe` 23 sumMultOf3And5 20 `shouldBe` 78 ```","solution":"def sum_mult_of_3_and_5(n): Returns the sum of all multiples of 3 or 5 that are less than n. return sum(i for i in range(1, n) if i % 3 == 0 or i % 5 == 0)"},{"question":"Sakura is playing a game in which she has to jump across a series of platforms to reach the end. The platforms are arranged in a line, and she can jump either one or two platforms forward with each move. However, some of the platforms are broken and she cannot land on them. Given an array of length `N`, where each element is either `0` (a safe platform) or `1` (a broken platform), determine the minimum number of jumps Sakura needs to reach the last platform. If it is impossible to reach the last platform, return `-1`. -----Constraints----- - 2 le N leq 10^5 - The first and last elements of the array are always `0`. -----Input----- Input is given from Standard Input in the following format: ``` N array ``` -----Output----- Print the minimum number of jumps to reach the last platform. If it is impossible, print `-1`. -----Sample Input----- 5 0 0 1 0 0 -----Sample Output----- 3 - Sakura can jump from the first platform (index 0) to the second platform (index 1). - Then from the second platform (index 1) to the fourth platform (index 3). - Finally, she jumps to the last platform (index 4). -----Sample Input----- 5 0 1 1 1 0 -----Sample Output----- -1 - All paths are blocked after the first platform, making it impossible for Sakura to reach the last platform.","solution":"from collections import deque def min_jumps_to_end(N, array): if array[0] == 1 or array[-1] == 1: return -1 jumps = 0 queue = deque([(0, jumps)]) # (current_index, current_jumps) visited = [False] * N visited[0] = True while queue: index, jumps = queue.popleft() # Check if we have reached the last platform if index == N - 1: return jumps # Check both possible jumps (1 step and 2 steps ahead) for step in [1, 2]: next_index = index + step if next_index < N and not visited[next_index] and array[next_index] == 0: queue.append((next_index, jumps + 1)) visited[next_index] = True return -1"},{"question":"Write a function that takes an array of integers and returns a new array with each element converted to its binary representation as a string, padded with leading zeros to ensure each binary string has the same length. For example: ```python to_binary([1, 3, 7, 10, 15]) ``` should return: ```python [\'0001\', \'0011\', \'0111\', \'1010\', \'1111\'] ``` Ensure that the binary strings are all of the same length as the longest binary representation in the input array.","solution":"def to_binary(arr): Returns a new array with each element converted to its binary representation as a string, padded with leading zeros to ensure each binary string has the same length. Parameters: arr (list of int): The input list of integers. Returns: list of str: The list of binary string representations of integers, all of the same length. if not arr: # if the array is empty, return an empty array return [] max_val = max(arr) # find the maximum value in the array max_len = len(bin(max_val)) - 2 # determine the length of the binary string of the maximum value (strip \'0b\') return [format(num, f\'0{max_len}b\') for num in arr]"},{"question":"In a small town, there are a few kinds of roads connecting various houses. The roads are either one-way or two-way. Each road has a specific length. Given the information about the roads, your task is to determine the shortest distance between a given starting house and a destination house. If a path does not exist, specify clearly that the destination cannot be reached. Constraints * The number of houses N is between 2 and 50. * The number of roads M is between 1 and 200. * The length of each road ranges from 1 to 100. * All roads connect two different houses. Input Input is given from Standard Input in the following format: N M a1 b1 l1 d1 a2 b2 l2 d2 ... am bm lm dm start destination Here: * The first line contains two integers N and M, representing the number of houses and roads respectively. * Each of the next M lines contains four values a, b, l, and d: - a and b are houses connected by this road. - l is the length of the road. - d indicates the direction: 0 for one-way from a to b, and 1 for two-way (both from a to b and from b to a). * The last line contains two integers, start and destination, representing the starting house and the destination house. Output Print an integer, the shortest distance from start to destination. If the destination cannot be reached, print \\"unreachable\\". Examples Input 4 4 1 2 5 1 2 3 10 0 3 4 2 1 1 3 15 0 1 4 Output 17 Input 3 2 1 2 5 0 2 3 10 0 1 3 Output 15 Input 3 2 1 2 5 0 3 2 10 0 1 3 Output unreachable","solution":"import heapq def shortest_distance(N, M, roads, start, destination): # Create a graph representation graph = {i: [] for i in range(1, N+1)} for a, b, l, d in roads: graph[a].append((b, l)) if d == 1: graph[b].append((a, l)) # Dijkstra\'s algorithm to find shortest path pq = [(0, start)] distances = {i: float(\'inf\') for i in range(1, N+1)} distances[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) result = distances[destination] if result == float(\'inf\'): return \\"unreachable\\" return result"},{"question":"You are organizing a hackathon and there are N participants numbered 1 through N. The hackathon consists of M challenges, each with a difficulty level ranging from 1 to 100. Each participant can only solve challenges of difficulty level less than or equal to their skill level. You are given the skill levels of all participants and the difficulty levels of all challenges. Your task is to calculate, for each participant, the maximum number of challenges they can solve. -----Input----- - The first line of the input contains two integers, N and M. - The second line contains N space-separated integers, where the i-th integer denotes the skill level of the i-th participant. - The third line contains M space-separated integers, where the j-th integer denotes the difficulty level of the j-th challenge. -----Output----- For each participant, print a single line containing the number of challenges they can solve. -----Constraints----- - 1 le N, M le 100 - 1 le text{skill level of participants} le 100 - 1 le text{difficulty level of challenges} le 100 -----Example Input----- 5 4 50 60 70 80 90 40 50 60 70 -----Example Output----- 2 3 4 4 4 -----Explanation----- - The first participant with skill level 50 can solve challenges with difficulties [40, 50] - 2 challenges. - The second participant with skill level 60 can solve challenges with difficulties [40, 50, 60] - 3 challenges. - The third participant with skill level 70 can solve all challenges with difficulties [40, 50, 60, 70] - 4 challenges. - The fourth participant with skill level 80 can solve all challenges with difficulties [40, 50, 60, 70] - 4 challenges. - The fifth participant with skill level 90 can solve all challenges with difficulties [40, 50, 60, 70] - 4 challenges.","solution":"def max_challenges_solved(N, M, skill_levels, challenge_difficulties): Calculates the number of challenges each participant can solve. Parameters: N (int): Number of participants. M (int): Number of challenges. skill_levels (list of int): List of skill levels of participants. challenge_difficulties (list of int): List of difficulty levels of challenges. Returns: list of int: List containing the number of challenges each participant can solve. challenge_difficulties.sort() result = [] for skill in skill_levels: count = 0 for difficulty in challenge_difficulties: if difficulty <= skill: count += 1 else: break result.append(count) return result"},{"question":"# Task Given an integer array `nums`, your task is to find the maximum possible sum of its contiguous subarray. This problem is a classic example of the \\"maximum subarray sum\\" also known as \\"Kadane\'s algorithm\\". # Example For `nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`: ``` The contiguous subarray with the largest sum is [4, -1, 2, 1], with a sum of 6. So the output should be 6. ``` # Input/Output - `[input]` integer array `nums` An array of integers. It can contain both positive and negative integers as well as zero. `1 ≤ nums.length ≤ 1000` `-1000 ≤ nums[i] ≤ 1000` - `[output]` an integer The maximum possible sum of a contiguous subarray. ```Haskell In Haskell the input is a list of integers and the output is an integer. ```","solution":"def max_subarray_sum(nums): Returns the sum of the largest sum contiguous subarray using Kadane\'s algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"In an enchanted garden, there are m magical plants arranged in a line. Each plant has a certain amount of magical energy, represented by an integer. A plant can absorb energy from its neighboring plants under certain conditions. Specifically, a plant can absorb energy from an adjacent plant if its energy is strictly greater than the energy of its neighbor. Upon absorbing a neighbor\'s energy, the absorbing plant\'s energy increases by the amount of energy of the consumed plant, and the consumed plant disappears from the garden. This process continues until no more plants can absorb energy from their neighbors. Given the initial arrangement of the plants and their energies, determine if the plants can rearrange themselves to reach a target configuration of energies after absorbing their neighbors according to the rules described. If possible, output one possible sequence of absorption events that leads to the target configuration. If not, output \\"IMPOSSIBLE\\". **Input** The input consists of: 1. An integer m (1 ≤ m ≤ 500) – the number of magical plants in the initial configuration. 2. A sequence of m integers e_1, e_2, ..., e_m (1 ≤ e_i ≤ 10^6) – the initial energies of the magical plants. 3. An integer t (1 ≤ t ≤ m) – the number of magical plants in the target configuration. 4. A sequence of t integers f_1, f_2, ..., f_t (1 ≤ f_j ≤ 5∙10^8) – the energies of the plants in the target configuration. **Output** 1. If no sequence of absorption events can transform the initial configuration to the target configuration, output \\"IMPOSSIBLE\\". 2. Otherwise, output \\"POSSIBLE\\", followed by the sequence of absorption events. Each event is represented by a line containing two elements: - The index of the plant in the current configuration that absorbs its adjacent plant. - The direction \'L\' if the absorbing plant absorbs the plant to its left, or \'R\' if it absorbs the plant to its right. Each plant in the initial configuration is indexed from 1 to m. After each absorption event, the indices of remaining plants are updated accordingly. **Examples** Input: 6 1 3 3 2 1 4 3 6 2 4 Output: POSSIBLE 2 R 1 R 4 L Input: 4 2 4 6 8 2 10 10 Output: IMPOSSIBLE Input: 5 1 2 3 4 5 1 15 Output: POSSIBLE 5 L 4 L 3 L 2 L **Notes** In the first example, the initial energies are [1, 3, 3, 2, 1, 4], and the target energies are [6, 2, 4]. One possible sequence of events is: - The second plant absorbs the third plant: [1, 6, 2, 1, 4] - The first plant absorbs the second plant: [7, 2, 1, 4] - The fourth plant (originally the fifth) absorbs the plant to its left (7): [7, 2, 5] Here, [7, 2, 5] cannot be transformed into [6, 2, 4], hence it\'s \\"IMPOSSIBLE\\". In the second example, the initial energies are [2, 4, 6, 8], and the target energies are [10, 10]. There is no way to achieve this target configuration, hence it\'s \\"IMPOSSIBLE\\". In the third example, the initial energies are [1, 2, 3, 4, 5], and the target energy is [15]. One possible sequence of events is: - The fifth plant absorbs the fourth plant: [1, 2, 3, 9] - The fourth plant absorbs the third plant: [1, 2, 12] - The third plant absorbs the second plant: [1, 14] - The second plant absorbs the first plant: [15] Thus, it is \\"POSSIBLE\\" to reach the target configuration.","solution":"def can_reach_target(m, energies, t, target): events = [] def merge(plants, index, direction): if direction == \'R\': plants[index] += plants.pop(index + 1) events.append((index + 1, \'R\')) else: plants[index] += plants.pop(index - 1) events.append((index, \'L\')) def find_and_merge(plants): n = len(plants) merged = False for i in range(1, n): if plants[i - 1] > plants[i]: merge(plants, i - 1, \'R\') merged = True break if not merged: for i in range(n - 1): if plants[i] < plants[i + 1]: merge(plants, i, \'R\') merged = True break return merged plants = energies[:] while len(plants) > t: if not find_and_merge(plants): return \\"IMPOSSIBLE\\" if plants == target: return \\"POSSIBLE\\", events else: return \\"IMPOSSIBLE\\" # Example usage if __name__ == \\"__main__\\": m = 6 energies = [1, 3, 3, 2, 1, 4] t = 3 target = [6, 2, 4] result = can_reach_target(m, energies, t, target) if result == \'IMPOSSIBLE\': print(result) else: print(result[0]) for event in result[1]: print(event[0], event[1])"},{"question":"A large retailer is analyzing its sales during the holiday season. They need to identify which days in the past month had sales exceeding a certain threshold. Implement a function that can help them find these days. -----Input:----- - First line of input contains an integer N, the number of days in the past month for which sales data is available. - Second line contains N integers, where each integer represents the sales for a specific day. - Third line contains an integer S, the sales threshold. -----Output:----- - Output all the days (1-indexed) separated by space where the sales exceeded the threshold. -----Constraints----- - 1 <= N <= 31 - 0 <= sales for each day <= 10^5 - 0 <= S <= 10^5 -----Sample Input:----- 6 12000 8000 15000 7000 18000 9000 10000 -----Sample Output:----- 1 3 5","solution":"def find_days_with_high_sales(N, sales, S): Returns a list of days (1-indexed) where the sales exceeded the threshold S. result = [] for i in range(N): if sales[i] > S: result.append(i + 1) return result"},{"question":"You are given a grid-based puzzle game where you need to help a character navigate from the top-left corner to the bottom-right corner of a grid. The grid contains various types of cells: 1. Empty cells (`.`) where the character can walk. 2. Obstacle cells (`#`) where the character cannot walk. 3. Trap cells (`T`) that the character can walk through but cause damage which reduces the character\'s health. 4. Health cells (`H`) that the character can walk through and restore some health. The character starts with a certain amount of health and the goal is to reach the bottom-right corner with a positive health value. Each step from a cell to an adjacent cell (up, down, left, or right) costs 1 health point. Input - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. - The next `n` lines each contain `m` characters representing the grid. - The following line contains three integers: the initial health of the character `h` (1 ≤ h ≤ 10000), the damage caused by a trap cell `d` (1 ≤ d ≤ 1000), and the health restored by a health cell `r` (1 ≤ r ≤ 1000). Output - Print \\"YES\\" if it is possible to reach the bottom-right corner with positive health, or \\"NO\\" if it is not possible. Examples Input 4 4 . . . # . # . . . T . # H . . . 10 2 3 Output YES Input 3 3 . . . # T # . . . 5 5 1 Output NO","solution":"from collections import deque def can_reach_end_with_positive_health(n, m, grid, health, trap_damage, health_restored): def neighbors(x, y): for nx, ny in ((x+1, y), (x-1, y), (x, y+1), (x, y-1)): if 0 <= nx < n and 0 <= ny < m: yield nx, ny start = (0, 0) queue = deque([(start, health)]) # (position, current health) visited = set([start]) while queue: (x, y), current_health = queue.popleft() if current_health <= 0: continue if (x, y) == (n-1, m-1): if current_health > 0: return \\"YES\\" else: continue for nx, ny in neighbors(x, y): if (nx, ny) not in visited: if grid[nx][ny] == \'#\': continue next_health = current_health - 1 if grid[nx][ny] == \'T\': next_health -= trap_damage elif grid[nx][ny] == \'H\': next_health += health_restored if next_health > 0: queue.append(((nx, ny), next_health)) visited.add((nx, ny)) return \\"NO\\""},{"question":"A city\'s electricity grid is composed of several substations connected with direct power lines. Each substation can be represented as a node, and each power line as an edge in an undirected graph. Your task is to write a program to check if the entire grid forms a single connected component and if it is a tree. A tree is a connected graph with no cycles. INPUT: The first line of input consists of two integers, n and e, where n is the number of substations (nodes) and e is the number of power lines (edges). Each of the next e lines contains two space-separated integers, u and v, representing a connection between nodal substations u and v. OUTPUT: Output \\"YES\\" if the graph is a tree, otherwise print \\"NO\\". CONSTRAINTS: 1 ≤ n ≤ 1000 0 ≤ e ≤ (n * (n - 1)) / 2 1 ≤ u, v ≤ n SAMPLE INPUT: 5 4 1 2 2 3 3 4 4 5 SAMPLE OUTPUT: YES SAMPLE INPUT: 5 4 1 2 1 3 2 3 4 5 SAMPLE OUTPUT: NO Explanation: In the first sample input, the power grid forms a single connected component with no cycles, so it is a tree. In the second sample input, the power grid contains a cycle (1-2-3) and is not fully connected (node 4 is only connected to node 5), so it is not a tree.","solution":"def is_tree(n, e, edges): from collections import defaultdict def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if not dfs(neighbor, node): return False elif neighbor != parent: return False return True if e != n - 1: return \\"NO\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() # Start DFS from node 1 if dfs(1, -1) and len(visited) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"# Task **_Given_** a **number** *_n_*, **_determine_** if it is a **disarium number** or **not**. ___ # Definition A **disarium number** is a number for which the sum of its digits powered with their respective positions is equal to the number itself. ___ # Notes * The **_number_** passed to the function is **_positive_**. ___ # Input >> Output Examples ``` disariumNumber(89) -->> return \\"Disarium !!\\" ``` **_Explanation_**: * The given number is `89`. Let\'s verify: * 8^1 + 9^2 * 8 + 81 = 89 * Since the sum equals the original number, `89` is a **disarium number**. ___ ``` disariumNumber(51) -->> return \\"Not!!\\" ``` **_Explanation_**: * The given number is `51`. Let\'s verify: * 5^1 + 1^2 * 5 + 1 = 6 * Since the sum does not equal the original number, `51` is **not a disarium number**. ___ ``` disariumNumber(135) -->> return \\"Disarium !!\\" ``` **_Explanation_**: * The given number is `135`. Let\'s verify: * 1^1 + 3^2 + 5^3 * 1 + 9 + 125 = 135 * Since the sum equals the original number, `135` is a **disarium number**. ___ ``` disariumNumber(175) -->> return \\"Disarium !!\\" ``` **_Explanation_**: * The given number is `175`. Let\'s verify: * 1^1 + 7^2 + 5^3 * 1 + 49 + 125 = 175 * Since the sum equals the original number, `175` is a **disarium number**. ___ ``` disariumNumber(80) -->> return \\"Not!!\\" ``` **_Explanation_**: * The given number is `80`. Let\'s verify: * 8^1 + 0^2 * 8 + 0 = 8 * Since the sum does not equal the original number, `80` is **not a disarium number**. ___ ALL translations are welcomed Enjoy Learning !!","solution":"def disariumNumber(n): Determine if the number n is a disarium number. Parameters: n (int): A positive integer. Returns: str: \\"Disarium !!\\" if n is a disarium number, otherwise \\"Not!!\\" digits = [int(d) for d in str(n)] disarium_sum = sum(d ** (i + 1) for i, d in enumerate(digits)) return \\"Disarium !!\\" if disarium_sum == n else \\"Not!!\\""},{"question":"Given a city represented by a grid of size m x n, you need to discover the shortest route taken by a delivery robot to deliver the packages from the starting point at (0, 0) to the final destination at (m-1, n-1). The robot can move up, down, left, or right, but must avoid any obstacles in its way. Each cell in the grid can either be free or an obstacle. Your task is to determine the total number of minimum moves required by the robot to go from (0, 0) to (m-1, n-1), or return -1 if no such route exists. Note: A move is a transition to any of the four adjacent cells (up, down, left, or right). Input format: - The first line contains two integers m and n (1 ≤ m, n ≤ 200). - The next m lines contain n integers each (either 0 or 1), representing the grid, where 1 denotes an obstacle and 0 denotes a free cell. Output format: - Print the minimum number of moves required to reach (m-1, n-1) from (0, 0). If there\'s no path, print -1. Examples: # Example 1 Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 4 Explanation: The robot can move through the cells (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), for a total of 4 moves. # Example 2 Input: 2 2 0 1 1 0 Output: -1 Explanation: There is no way for the robot to move from (0, 0) to (1, 1) as all paths are blocked by obstacles.","solution":"from collections import deque def min_moves_to_destination(grid): Determine the minimum number of moves required to go from (0, 0) to (m-1, n-1) in the grid. Return -1 if no such route exists. m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 # Four possible directions to move: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) moves = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (m-1, n-1): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) moves += 1 return -1"},{"question":"You are given an array of integers where each element represents the height of a vertical line drawn at that position. Each pair of vertical lines, together with the X-axis, forms a container. The task is to find out the maximum amount of water that can be trapped in such a container, assuming that the lines are chosen to form a container where the amount of water is maximized. You need to write a program to determine the maximum water that can be trapped. -----Input format----- The input consists of two lines. The first line contains a single integer N, the number of elements in the array. The second line contains N space-separated integers, representing the height of each vertical line. -----Output format----- Your program should output a single integer, the maximum amount of water that can be trapped in the optimal container. -----Testdata----- You may assume that 2 ≤ N ≤ 105 and that the height of each vertical line is in the range [0, 104]. -----Sample Input----- 9 1 8 6 2 5 4 8 3 7 -----Sample Output----- 49 -----Sample Explanation----- By choosing the vertical lines at index 1 and index 8 (1-based index), a container of height 7 and width 7 can be formed, which can trap 49 units of water. This is the configuration that results in the maximum trapped water.","solution":"def max_area(heights): Finds the maximum amount of water that can be trapped between the lines. Parameters: heights (List[int]): List of integers representing the height of each vertical line. Returns: int: Maximum amount of water that can be trapped. # Use two-pointer technique to find the maximum water trapped left, right = 0, len(heights) - 1 max_water = 0 while left < right: # Width of the container width = right - left # Height is determined by the shorter line height = min(heights[left], heights[right]) # Calculate the water trapped max_water = max(max_water, width * height) # Move the pointers to find a potentially higher container if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water # Reading input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:])) # Output the result print(max_area(heights))"},{"question":"Amanda is designing a pattern on a grid for a patchwork quilt. The grid is an n x n square, and Amanda wants to alternate between two colors, represented by \'A\' and \'B\'. The pattern should be such that no two adjacent cells (horizontally or vertically) have the same color. Given n, you are required to generate Amanda\'s pattern and print it, where each cell of the grid is either \'A\' or \'B\'. Input format Single integer n, indicating the size of the grid (1 ≤ n ≤ 1000). Output format Output the n x n grid with the desired pattern, where each cell is either \'A\' or \'B\'. Constraints 1 ≤ n ≤ 1000 SAMPLE INPUT 3 SAMPLE OUTPUT ABA BAB ABA Explanation For a 3x3 grid, starting from the top-left corner with \'A\', alternate the colors such that no two adjacent cells have the same color. The resulting grid is: ABA BAB ABA","solution":"def generate_pattern(n): Generates a n x n grid where \'A\' and \'B\' alternate such that no two adjacent cells (horizontally or vertically) have the same color. pattern = [] for i in range(n): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'A\') else: row.append(\'B\') pattern.append(\'\'.join(row)) return \'n\'.join(pattern)"},{"question":"A treasure hunter discovered an ancient map that leads to a hidden treasure buried in a grid-like forest. The map is a grid of size n x m where each cell represents a part of the forest and contains either a tree denoted by \'#\' or an empty space denoted by \'.\'. The hunter starts at the top left corner of the grid and can move to any of the four adjacent cells (up, down, left, right). Determine if there is a path from the top left corner to the bottom right corner, avoiding the trees. Input The first input line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid respectively. The next n lines each contain a string of m characters representing the grid. Output Print \\"YES\\" (without the quotes) if there exists a path from the top left corner to the bottom right corner, avoiding the trees, or \\"NO\\" (without the quotes) if no such path exists. Examples Input 4 5 ..... .#. .#... ..... Output YES Input 3 3 # #.# # Output NO Input 5 5 # #...# #.#.# #...# # Output NO Note In the first example, the hunter can move from the top left corner to the bottom right corner without encountering any trees. In the second example, it is impossible to reach the bottom right corner as all possible paths are blocked by trees.","solution":"def is_path_from_top_left_to_bottom_right(n, m, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Given a collected rainfall measurement over a consecutive number of days, find the smallest period of days where the cumulative rainfall surpasses a given threshold. If it\'s impossible to surpass the threshold, return -1. Example 1: Input: rainfall = [2, 3, 1, 2, 4, 3] threshold = 7 Output: 2 Explanation: The smallest period with cumulative rainfall surpassing 7 is between days 4 and 5 (2+4=6 which exceeds 7). Example 2: Input: rainfall = [1, 1, 1, 1, 1] threshold = 3 Output: 3 Explanation: The smallest period with cumulative rainfall surpassing 3 is between days 1 to 3. Example 3: Input: rainfall = [1, 2, 3] threshold = 7 Output: -1 Explanation: There is no period where the cumulative rainfall exceeds 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestPeriod() which takes a list of integers rainfall as input and an integer threshold, and returns the length of the smallest period. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= length of rainfall <= 10^5 1 <= rainfall[i] <= 10^4 1 <= threshold <= 10^9","solution":"def smallestPeriod(rainfall, threshold): Returns the length of the smallest period where the cumulative rainfall surpasses the given threshold. If it\'s impossible, returns -1. n = len(rainfall) start = 0 sum_rainfall = 0 min_length = float(\'inf\') for end in range(n): sum_rainfall += rainfall[end] while sum_rainfall >= threshold: min_length = min(min_length, end - start + 1) sum_rainfall -= rainfall[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Tom decided to practice his programming skills by solving problems on a competitive programming platform. One day, he encountered a problem about evaluating the efficiency of various roadmaps for commuting between two cities. The map of the cities consists of N cities connected by M undirected roads. Each road has a length denoted by l_i. Two cities A and B are called friends if the shortest path from city A to city B is less than or equal to K. Tom needs to determine which pairs of cities are friends. -----Constraints----- - N is an integer between 2 and 300 (inclusive). - M is an integer between 1 and N *(N - 1) / 2 (inclusive). - K is an integer between 1 and 1 000 000 000 (inclusive). - l_i (1 leq i leq M) is an integer between 1 and 1 000 000 (inclusive). -----Input----- Input is given from Standard Input in the following format: N M K u_1 v_1 l_1 u_2 v_2 l_2 : : u_M v_M l_M Each of the next M lines contains three integers u_i, v_i, and l_i, which means there is a road connecting city u_i and city v_i with length l_i. -----Output----- Print all pairs of cities (A, B) (in any order) such that A and B are friends. The pairs should be listed in lexicographical order. Each pair should be printed in the format: A B -----Sample Input----- 4 5 10 1 2 5 2 3 5 3 4 5 1 3 10 2 4 15 -----Sample Output----- 1 2 1 3 2 3 2 4 3 4 Explanation: The shortest path matrix would be: - From 1 to 2: 5 - From 1 to 3: 10 - From 1 to 4: 10 + 5 = 15; Combining these, pairs (1, 2) and (1, 3) are friends as their shortest paths do not exceed K=10. Hence, the output is in lexicographical order: 1 2 1 3 2 3 3 4","solution":"import heapq def find_friends(N, M, K, roads): def dijkstra(start): dist = [float(\'inf\')] * (N + 1) dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_dist, current_node = heapq.heappop(pq) if current_dist > dist[current_node]: continue for neighbor, length in graph[current_node]: distance = current_dist + length if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist graph = [[] for _ in range(N + 1)] for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) friends_pairs = set() for i in range(1, N + 1): dist = dijkstra(i) for j in range(i + 1, N + 1): if dist[j] <= K: friends_pairs.add((i, j)) for pair in sorted(friends_pairs): print(f\\"{pair[0]} {pair[1]}\\") # Sample Input N = 4 M = 5 K = 10 roads = [ (1, 2, 5), (2, 3, 5), (3, 4, 5), (1, 3, 10), (2, 4, 15) ] find_friends(N, M, K, roads)"},{"question":"Calculate the Most Repeated Integer. Input: First line contains T - No. of test cases. For each test case, the first line contains N. The second line contains N space-separated integers A[1] to A[N]. Output: For each test case, print the integer that is repeated the most times. If there are multiple integers that match this criterion, display the smallest one. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^5 SAMPLE INPUT 3 5 1 2 2 3 1 6 4 5 6 5 5 4 4 7 8 8 7 SAMPLE OUTPUT 1 5 7","solution":"def most_repeated_integer(test_cases): Given a list of test cases, return the most repeated integer for each test case. If there is a tie, return the smallest integer. from collections import Counter results = [] for case in test_cases: n, integers = case counts = Counter(integers) # Find the maximum frequency and then the smallest integer with that frequency max_freq = max(counts.values()) most_repeated = min([k for k, v in counts.items() if v == max_freq]) results.append(most_repeated) return results"},{"question":"You are managing a warehouse with a stack of boxes. Each box has a unique identifier and a weight. Your task is to process a sequence of operations to manage the stack, including adding, removing, and querying information about the boxes. Every box operation will be provided as a sequence of queries. Each query can be one of the following types: 1. `push k w` - Add a box with identifier `k` and weight `w` to the top of the stack. 2. `pop` - Remove the box at the top of the stack. 3. `top` - Report the identifier of the box on the top of the stack. 4. `query w` - Return the identifier of the topmost box whose weight is exactly `w`. If no such box exists, return `-1`. -----Input----- The first line contains an integer `q` (1 le q le 3 cdot 10^5) — the number of queries. The next `q` lines describe the queries. Each query is one of: - `push k w`, where 1 le k le 10^9 and 1 le w le 10^9, - `pop`, - `top`, - `query w`. It is guaranteed that: - A `pop` or `top` query will not be issued when the stack is empty. - A `query w` operation will always match a `push k w` operation at some point before it or return `-1` if no such box is found. -----Output----- For each `top` and `query w` query, print the result on a new line. -----Examples----- Input 8 push 1 100 push 2 200 top pop top query 100 query 200 pop Output 2 1 1 -1 -----Note----- Explanation of the sample: After the first operation (push 1 100), the stack is [1]. After the second operation (push 2 200), the stack is [1, 2]. For the third operation (top), the box at the top has identifier 2. After the fourth operation (pop), the stack is [1]. For the fifth operation (top), the box at the top has identifier 1. For the sixth operation (query 100), the topmost box with weight 100 has identifier 1. For the seventh operation (query 200), no box with weight 200 exists, so return `-1`. After the eighth operation (pop), the stack is empty.","solution":"class Warehouse: def __init__(self): self.stack = [] self.weight_map = {} def push(self, k, w): # Add (k, w) to the stack self.stack.append((k, w)) if w not in self.weight_map: self.weight_map[w] = [] self.weight_map[w].append(k) def pop(self): # Remove top element from the stack if self.stack: k, w = self.stack.pop() self.weight_map[w].pop() if not self.weight_map[w]: del self.weight_map[w] def top(self): # Return the identifier of the top element if self.stack: k, w = self.stack[-1] return k return -1 def query(self, w): # Return the identifier of the topmost box whose weight is exactly w if w in self.weight_map and self.weight_map[w]: return self.weight_map[w][-1] return -1 def process_queries(queries): warehouse = Warehouse() results = [] for query in queries: operations = query.split() if operations[0] == \\"push\\": k = int(operations[1]) w = int(operations[2]) warehouse.push(k, w) elif operations[0] == \\"pop\\": warehouse.pop() elif operations[0] == \\"top\\": results.append(warehouse.top()) elif operations[0] == \\"query\\": w = int(operations[1]) results.append(warehouse.query(w)) return results"},{"question":"Create a program that will help to encrypt messages using a simple letter shifting technique. The technique involves shifting each letter of the string by a fixed number of positions in the alphabet. Write a program that takes an input consisting of a number of shifts followed by multiple test cases containing the strings to be encrypted. The input consists of: - An integer (n) indicating the number of test cases (1 ≤ n ≤ 10). - An integer (s) indicating the number of positions to shift (1 ≤ s ≤ 25). - Followed by n lines each with a string of lowercase and uppercase letters (length of each string ≤ 100). The output should consist of n lines showing the encrypted string for each test case, maintaining the case of each letter. Example of letter shifting: - With a shift of 1, \'a\' becomes \'b\', \'b\' becomes \'c\', and so on, with \'z\' wrapping around to \'a\'. - With a shift of 1, \'A\' becomes \'B\', \'B\' becomes \'C\', and so on, with \'Z\' wrapping around to \'A\'. Input: Number of test cases (n ≤ 10). Number of positions to shift (s ≤ 25). Each of the n lines contains a string to be encrypted (length ≤ 100). Output: For each test case, print the encrypted string. SAMPLE INPUT 2 2 abcXYZ helloWorld SAMPLE OUTPUT cdeZAB jgnnqYqtnf","solution":"def shift_letter(letter, shift): if \'a\' <= letter <= \'z\': return chr((ord(letter) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= letter <= \'Z\': return chr((ord(letter) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return letter def encrypt_message(n, s, test_cases): result = [] for case in test_cases: encrypted = \'\'.join(shift_letter(char, s) for char in case) result.append(encrypted) return result"},{"question":"A company releases annual salary data of its employees. You need to calculate the median salary for an organization. The median salary is the middle number in a sorted, ascending or descending, list of salaries. If the size of the list is even, the median is the average of the two middle numbers. You are given the number of employees in the organization and a list of their annual salaries. **Input** The first line contains an integer `n`, the number of employees in the organization (1 ≤ n ≤ 10^5). The second line contains `n` space-separated integers representing the annual salaries of the employees (1 ≤ salary ≤ 10^7). **Output** Print the median of the given salaries as a single float value, formatted to one decimal place. **Example** Input 5 55000 45000 70000 40000 60000 Output 55000.0","solution":"def calculate_median_salary(n, salaries): Calculate the median salary from a list of salaries. Arguments: n -- number of employees salaries -- list of annual salaries of the employees Returns: The median salary as a float value formatted to one decimal place. salaries.sort() if n % 2 == 1: median = salaries[n // 2] else: median = (salaries[n // 2 - 1] + salaries[n // 2]) / 2 return round(median, 1)"},{"question":"A factory produces widgets. Each widget is either defective or non-defective. The defectiveness of each widget is represented by a binary string S of length N, where \'0\' indicates a non-defective widget and \'1\' indicates a defective widget. Your task is to find the longest contiguous subsequence of non-defective widgets. -----Constraints----- - The input string S consists of only \'0\'s and \'1\'s. - 1 ≤ N ≤ 10^5 -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print a single integer representing the length of the longest contiguous subsequence of non-defective widgets. -----Sample Input----- 110001110 -----Sample Output----- 3 In the provided sample, the longest contiguous subsequence of \'0\'s is \\"000\\", which has a length of 3. Thus, the output should be 3.","solution":"def longest_non_defective_subsequence(S): This function finds the length of the longest contiguous subsequence of non-defective widgets in a binary string S. Parameters: S (str): A binary string where \'0\' indicates a non-defective widget and \'1\' indicates a defective widget. Returns: int: The length of the longest contiguous subsequence of \'0\'s. max_length = 0 current_length = 0 for char in S: if char == \'0\': current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Given a grid of size N x N where each cell is either \'1\' or \'0\', your task is to find the largest rectangle containing only \'1\'s and return its area. Constraints: * 1≤N≤300 * Each cell in the grid is either \'0\' or \'1\' Input: The input is given from the standard input in the following format: ``` N grid[0][0] grid[0][1] ... grid[0][N-1] grid[1][0] grid[1][1] ... grid[1][N-1] ... grid[N-1][0] grid[N-1][1] ... grid[N-1][N-1] ``` Output: Print a single integer: the area of the largest rectangle containing only \'1\'s. Examples Input: ``` 4 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 1 ``` Output: ``` 6 ``` Input: ``` 3 0 1 1 1 1 1 1 1 0 ``` Output: ``` 4 ``` Input: ``` 5 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1 0 1 0 ``` Output: ``` 6 ```","solution":"def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def maximal_rectangle_area(grid): if not grid: return 0 n = len(grid) max_area = 0 histogram = [0] * n for i in range(n): for j in range(n): if grid[i][j] == \'1\': histogram[j] += 1 else: histogram[j] = 0 max_area = max(max_area, max_histogram_area(histogram)) return max_area"},{"question":"You are given a string containing a mix of lowercase letters and digits. Write a function that separates the letters and digits, sorts them separately, and then combines them back into a new string with all letters sorted alphabetically first and all digits sorted in ascending order afterwards. Function Signature: ```python def separate_and_sort(s: str) -> str: # Your code here ``` Example: ```python >>> separate_and_sort(\\"a2b1c3\\") \'abc123\' >>> separate_and_sort(\\"d4e5f6\\") \'def456\' >>> separate_and_sort(\\"z9y8x7\\") \'xyz789\' ```","solution":"def separate_and_sort(s: str) -> str: Separates the letters and digits from the input string, sorts them separately, and then combines them back into a new string with all letters sorted alphabetically first and all digits sorted in ascending order afterwards. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) elif char.isalpha(): letters.append(char) sorted_letters = \'\'.join(sorted(letters)) sorted_digits = \'\'.join(sorted(digits)) return sorted_letters + sorted_digits # Example usage: print(separate_and_sort(\\"a2b1c3\\")) # Output: \'abc123\' print(separate_and_sort(\\"d4e5f6\\")) # Output: \'def456\' print(separate_and_sort(\\"z9y8x7\\")) # Output: \'xyz789\'"},{"question":"You are administering a typing speed test. There are n participants in the test, each identified by a unique participant ID from 1 to n. After completing the test, each participant has a typing speed measured in words per minute (wpm). You want to determine whether each participant typed faster, slower, or at the same speed as the previous participant. Given an array of integers where the i^{th} element represents the typing speed of the i^{th} participant, output a string indicating the comparison result for each participant compared to the previous participant. For the first participant, output \\"N/A\\" because there is no previous participant to compare with. The comparison results should be: - \\"faster\\" if the participant\'s speed is greater than the previous participant\'s speed, - \\"slower\\" if the participant\'s speed is less than the previous participant\'s speed, - \\"same\\" if the participant\'s speed is equal to the previous participant\'s speed. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The first line of each test case contains one integer n (2 le n le 100) — the number of participants. The second line of each test case contains n integers — the typing speeds of the participants, 1 le text{wpm} le 500. -----Output----- For each test case, output n lines with the comparison result for each participant given in order from the first to the n^{th}. -----Example----- Input 2 4 50 60 55 55 3 70 70 80 Output N/A faster slower same N/A same faster -----Note----- In the first test case, the second participant (60 wpm) typed faster than the first participant (50 wpm), so we print \\"faster\\". The third participant (55 wpm) typed slower than the second participant (60 wpm), so we print \\"slower\\". The fourth participant typed at the same speed as the third participant, so we print \\"same\\". In the second test case, the second participant typed at the same speed as the first participant, so we print \\"same\\". The third participant typed faster than the second participant, so we print \\"faster\\".","solution":"def typing_speed_comparison(test_cases): Takes in the test cases and outputs the typing speed comparison. results = [] for case in test_cases: n = case[0] speeds = case[1] comparison_results = [\\"N/A\\"] for i in range(1, n): if speeds[i] > speeds[i-1]: comparison_results.append(\\"faster\\") elif speeds[i] < speeds[i-1]: comparison_results.append(\\"slower\\") else: comparison_results.append(\\"same\\") results.append(comparison_results) return results"},{"question":"You are given an N x M grid where each cell contains a positive integer representing the number of coins in that cell. You start at the top-left corner (1, 1) and want to reach the bottom-right corner (N, M). You can move either to the cell directly to the right or directly below the current cell. Your goal is to maximize the total number of coins collected along the path. Write a program that calculates the maximum number of coins you can collect while moving from the top-left to the bottom-right corner of the grid. # Input The input consists of multiple datasets. Each dataset is given in the following format: - The first line contains two integers, N and M, where 1 ≤ N, M ≤ 1000 representing the number of rows and columns in the grid. - The next N lines contain M integers each, representing the number of coins in each cell of the grid. The input terminates when N = 0 and M = 0. The number of datasets does not exceed 10. # Output For each dataset, output a single integer, representing the maximum number of coins that can be collected on the optimal path from the top-left to the bottom-right corner. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 2 2 2 1 1 2 0 0 ``` Output ``` 12 5 ``` In this example, for the first dataset, the optimal path is to go right -> right -> down -> down, collecting coins [1 + 3 + 1 + 5 + 2 = 12]. For the second dataset, the optimal path is to go right -> down, collecting coins [2 + 2 + 1 = 5].","solution":"def max_coins(grid): Given a grid of integers, returns the maximum number of coins that can be collected from the top-left to the bottom-right corner. if not grid: return 0 N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row and first column for i in range(1, M): dp[0][i] = dp[0][i - 1] + grid[0][i] for j in range(1, N): dp[j][0] = dp[j - 1][0] + grid[j][0] # Fill the rest of dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1] def parse_input(input_str): Parses the input string into a list of grids. data = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(data): N, M = map(int, data[i].split()) if N == 0 and M == 0: break grid = [] for _ in range(N): i += 1 grid.append(list(map(int, data[i].split()))) datasets.append(grid) i += 1 return datasets def solve(input_str): Given the input as a string, returns the output as a string. datasets = parse_input(input_str) results = [max_coins(grid) for grid in datasets] return \'n\'.join(map(str, results))"},{"question":"The XYZ company has been developing a new messaging app. The app ensures that messages are delivered properly even when some network nodes are unreliable. To achieve this, the application employs a distributed algorithm that forwards messages through multiple paths. However, the developers want to ensure that every message is forwarded through a minimum number of intermediate nodes to reduce latency. Given the network\'s topology and the source and destination nodes for a message, determine the minimum number of intermediate nodes required to successfully forward a message. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10^5) — the number of nodes and the number of undirected edges in the network. Each of the next m lines describes an edge with two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between nodes u and v. The next line contains two integers s and t (1 ≤ s, t ≤ n) — the source and the destination nodes. Output Output a single integer — the minimum number of intermediate nodes required to forward a message from the source node s to the destination node t. If it is not possible to forward the message, output -1. Examples Input 6 7 1 2 2 3 3 4 4 5 5 6 1 3 4 6 1 6 Output 3 Input 4 2 1 2 2 3 3 4 Output 2 4 Output -1","solution":"from collections import deque, defaultdict def min_intermediate_nodes(n, m, edges, s, t): graph = defaultdict(list) # Build the graph for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS initialization queue = deque([(s, 0)]) # (current_node, distance) visited = set() visited.add(s) while queue: current_node, distance = queue.popleft() # Check if we\'ve reached the destination if current_node == t: return distance # Process neighbors for neighbor in graph[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) # If we exit the loop without finding the destination return -1"},{"question":"You are provided with an array of strings where each string represents a color in lowercase letters. Some strings may be empty, and you need to filter those out. Create a function that returns an array with the unique colors sorted alphabetically. If the array is empty or contains only empty strings, return an array with a single element \\"no colors\\". For example: [\\"red\\", \\"blue\\", \\"red\\", \\"\\", \\"green\\", \\"blue\\"] -> [\\"blue\\", \\"green\\", \\"red\\"] [\\"\\", \\"\\", \\"\\"] -> [\\"no colors\\"]","solution":"def filter_and_sort_colors(colors): Filters out empty strings from the input list and returns a list of unique colors sorted alphabetically. If the list is empty or contains only empty strings, return a list with a single element \\"no colors\\". unique_colors = set(color for color in colors if color) if not unique_colors: return [\\"no colors\\"] return sorted(unique_colors)"},{"question":"Alice is designing a network of computers for her company. The network is represented as an undirected graph where each node represents a computer, and each edge represents a network cable between two computers. Each network cable has a certain latency associated with it. Her goal is to ensure that all computers in the network are connected and the sum of the latencies of the cables is minimized for optimal performance. Alice wants to find the minimum latency required to connect all the computers in her company. Can you help her achieve this? Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of computers and network cables, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — where u and v are the endpoints of the network cable and w is the latency of the cable. Output Output the minimum latency required to connect all the computers. If it\'s impossible to connect all computers, output \\"IMPOSSIBLE\\". Examples Input 4 5 1 2 5 1 3 10 1 4 20 2 3 2 3 4 3 Output 10 Input 4 2 1 2 1 3 4 1 Output IMPOSSIBLE Input 3 3 1 2 1 2 3 1 1 3 2 Output 2","solution":"def minimum_latency(n, m, edges): Finds the minimum latency required to connect all computers using Kruskal\'s algorithm. Parameters: n (int): Number of computers m (int): Number of network cables (edges) edges (list): List of network cables where each cable is represented as a tuple (u, v, w) Returns: int or str: Minimum latency to connect all computers or \\"IMPOSSIBLE\\" if not all can be connected # Helper function to find the root of a node def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to perform union of two sets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Initialize result result = 0 # Sort edges by latency edges = sorted(edges, key=lambda item: item[2]) parent = [i for i in range(n)] rank = [0] * n e = 0 i = 0 while e < n - 1: if i >= m: return \\"IMPOSSIBLE\\" u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result += w union(parent, rank, x, y) return result if e == n - 1 else \\"IMPOSSIBLE\\" # Example of function call: # n = 4 # m = 5 # edges = [(1, 2, 5), (1, 3, 10), (1, 4, 20), (2, 3, 2), (3, 4, 3)] # print(minimum_latency(n, m, edges)) # Output: 10"},{"question":"You are given a string containing a series of round and square brackets: \'(\', \')\', \'[\', \']\'. Your task is to determine if the brackets are balanced. A string is considered balanced if all brackets are matched with the correct corresponding bracket and are in the proper order. Input A single line containing a string of brackets. Output Output \\"YES\\" if the brackets are balanced, otherwise \\"NO\\". Examples Input ([]) Output YES Input ([)] Output NO Input (([])) Output YES Input (()[[]]) Output YES","solution":"def is_balanced(s): Checks if the string s containing \'(\', \')\', \'[\', \']\' is balanced. Args: s (str): The input string containing brackets. Returns: str: \\"YES\\" if the brackets are balanced, \\"NO\\" otherwise. stack = [] bracket_map = {\'(\': \')\', \'[\': \']\'} for char in s: if char in bracket_map: stack.append(char) elif char in bracket_map.values(): if not stack or bracket_map[stack.pop()] != char: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"A company tracks its employees\' work hours on a weekly basis, from Monday to Sunday, where each day\'s hours are recorded in a list. You need to write a function that calculates the total amount of overtime worked by all employees in a given week. Overtime is defined as any work done beyond 40 hours in a week per employee. Your function should accept a list of lists, where each inner list contains the number of hours worked each day for a specific employee. The function should return the cumulative overtime hours for all employees combined. Example input: ``` [ [8, 9, 7, 8, 8, 4, 5], # Employee 1: Total = 49 hours, Overtime = 9 hours [10, 10, 10, 10, 10, 0, 0], # Employee 2: Total = 50 hours, Overtime = 10 hours [6, 7, 8, 8, 7, 6, 6] # Employee 3: Total = 48 hours, Overtime = 8 hours ] ``` The function should return `27` because the combined overtime hours for all employees is 9 + 10 + 8 = 27. Note: The input list will always contain seven integers for each employee, representing their working hours from Monday to Sunday.","solution":"def calculate_overtime(hours): Calculate the total amount of overtime worked by all employees in a given week. :param hours: List of lists where each inner list contains the number of hours worked each day for a specific employee. :return: Cumulative overtime hours for all employees combined. total_overtime = 0 for daily_hours in hours: weekly_hours = sum(daily_hours) if weekly_hours > 40: total_overtime += weekly_hours - 40 return total_overtime"},{"question":"Given an NxN matrix where each cell contains a single lowercase letter, find the longest path in the matrix such that adjacent cells (up, down, left, right) form a sequence of consecutive letters (e.g., \'a\' followed by \'b\', \'b\' followed by \'c\', and so on). The path should only contain each letter once. Input Format: - The first line contains an integer N. - The next N lines each contain a string of length N representing the matrix. Output Format: - Output the length of the longest path of consecutive letters. Constraints: - 1 <= N <= 1000 - The matrix only contains lowercase English letters. Sample Input: 4 abcd bcda cdab dabc Sample Output: 4 Explanation: For the above case, one of the longest paths is: \\"a\\" -> \\"b\\" -> \\"c\\" -> \\"d\\". Thus, the length of the longest path is 4. Other paths such as \\"b\\" -> \\"c\\" -> \\"d\\" -> \\"a\\" or any sequence will also yield the same length 4.","solution":"def find_longest_consecutive_path(matrix): N = len(matrix) directions = [(-1,0), (1,0), (0,-1), (0,1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < N memo = [[-1] * N for _ in range(N)] def dfs(x, y): if memo[x][y] != -1: return memo[x][y] max_path = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and ord(matrix[nx][ny]) == ord(matrix[x][y]) + 1: max_path = max(max_path, 1 + dfs(nx, ny)) memo[x][y] = max_path return max_path longest_path = 0 for i in range(N): for j in range(N): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"Given a sequence of n integers, find the length of the longest subsequence that is strictly increasing. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given the sequence [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 18], which has length 4. You are to write a program that calculates the length of the longest strictly increasing subsequence for a given sequence of integers. Input The input consists of multiple datasets. The first line contains a single integer, t, representing the number of datasets. Each of the following t lines contains a single dataset. Each dataset begins with a single integer n, representing the length of the sequence (1 ≤ n ≤ 1000). The next n integers represent the elements of the sequence. The elements of the sequence are separated by spaces and can range from -10^6 to 10^6. Output For each dataset, output a single integer on a new line, representing the length of the longest strictly increasing subsequence for that dataset. Example Input 2 8 10 9 2 5 3 7 101 18 5 0 1 0 3 2 Output 4 3","solution":"def longest_increasing_subsequence_length(n, sequence): Returns the length of the longest strictly increasing subsequence of \'sequence\'. :param n: Length of the sequence (integer) :param sequence: List of integers representing the sequence :return: Length of the longest strictly increasing subsequence if n == 0: return 0 # Initialize the DP array with 1, because the shortest LIS ending with each element is 1 lis = [1] * n # Compute optimized LIS values in bottom-up manner for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Find the maximum in the LIS array return max(lis)"},{"question":"You are designing a new database system called DigiLib for a digital library to manage books. Each book has several attributes including title, author, publication year, genre, and page count. Your system must support dynamic queries that allows users to retrieve a list of books based on different combinations of these attributes. Each query has a filtering condition (based on one or more attributes) and a sorting condition (based on one attribute). You must implement a software that satisfies these query requirements. Your task is to implement the functionality to handle these queries efficiently. Query results should be returned in lexicographical order for string attributes and numerical order for numerical attributes. -----Input----- The first line contains an integer 1 leq p leq 1000 giving the number of books. The next p lines each contain a book, with the attributes: title, author, publication year, genre, and page count, separated by single spaces. The next line contains an integer 1 leq q leq 100 giving the number of queries. Each query consists of a filter condition and a sort condition. Filter conditions can be: - title=value - author=value - publication_year=value - genre=value - page_count=value Sort conditions can be: - title - author - publication_year - genre - page_count Multiple filter conditions are combined with the \\"AND\\" keyword. -----Output----- For each query, print the list of books satisfying the filter condition, sorted as specified. Each book should be printed in a new line with attributes separated by single spaces, in the following order: title author publication_year genre page_count If no books match the query, output \\"No books found\\". Print a blank line between outputs of different queries. -----Examples----- Sample Input: 5 Harry_Potter_1 J.K.Rowling 1997 Fantasy 223 Harry_Potter_2 J.K.Rowling 1998 Fantasy 251 The_Hobbit J.R.R.Tolkien 1937 Fantasy 310 1984 George_Orwell 1949 Dystopian 328 To_Kill_a_Mockingbird Harper_Lee 1960 Fiction 281 3 author=J.K.Rowling AND publication_year=1998 title genre=Fantasy AND page_count=310 author genre=Non-Fiction title Sample Output: Harry_Potter_2 J.K.Rowling 1998 Fantasy 251 The_Hobbit J.R.R.Tolkien 1937 Fantasy 310 No books found","solution":"class Book: def __init__(self, title, author, publication_year, genre, page_count): self.title = title self.author = author self.publication_year = int(publication_year) self.genre = genre self.page_count = int(page_count) def matches_filter(self, filters): for attr, value in filters.items(): if str(getattr(self, attr)) != value: return False return True def __str__(self): return f\\"{self.title} {self.author} {self.publication_year} {self.genre} {self.page_count}\\" def parse_input(input_str): lines = input_str.strip().split(\'n\') p = int(lines[0]) books = [] for i in range(1, p + 1): books.append(Book(*lines[i].split())) q = int(lines[p + 1]) queries = lines[p + 2:] return books, queries def parse_query(query): filter_part, sort_part = query.rsplit(\' \', 1) filters = {} for condition in filter_part.split(\' AND \'): attr, value = condition.split(\'=\') filters[attr] = value return filters, sort_part def process_queries(books, queries): results = [] for query in queries: filters, sort_by = parse_query(query) filtered_books = [book for book in books if book.matches_filter(filters)] if not filtered_books: results.append(\\"No books found\\") else: filtered_books.sort(key=lambda x: getattr(x, sort_by)) results.append(\\"n\\".join(str(book) for book in filtered_books)) return \\"nn\\".join(results) def digital_library(input_str): books, queries = parse_input(input_str) return process_queries(books, queries)"},{"question":"In a distant land, there exists a mystical forest with N enchanted trees. Each tree has a certain amount of magic fruits. The forest keeper wants to know which tree produced the maximum number of magic fruits so that they can place the forest guardian beside it. Given the number of trees and the corresponding number of magic fruits on each tree, write a program that will help the forest keeper determine the maximum number of magic fruits any tree has produced. -----Input:----- - First-line will contain a single integer T, the number of test cases. Then the test cases follow. - Each test case contains: - The first line contains an integer N, the number of trees. - The second line contains N space-separated integers, where each integer represents the number of magic fruits on a tree. -----Output:----- For each test case, output a single line containing the maximum number of magic fruits. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 1000 - 1 leq text{number of magic fruits} leq 10^5 -----Sample Input:----- 2 5 2 3 1 4 6 3 10 10 10 -----Sample Output:----- 6 10","solution":"def max_fruits_in_trees(test_cases): Returns a list of maximum number of magic fruits for each test case. results = [] for N, fruits in test_cases: max_fruits = max(fruits) results.append(max_fruits) return results def parse_input(input_data): Parses the string input data into a list of test cases (tuples). lines = input_data.strip().split(\'n\') num_test_cases = int(lines[0]) test_cases = [] index = 1 for _ in range(num_test_cases): N = int(lines[index]) fruits = list(map(int, lines[index + 1].split())) test_cases.append((N, fruits)) index += 2 return test_cases # Sample execution and result comparison input_data = 2 5 2 3 1 4 6 3 10 10 10 test_cases = parse_input(input_data) results = max_fruits_in_trees(test_cases) for result in results: print(result)"},{"question":"You are given an array of integers and a target integer. Your task is to determine the pair of indices from the array whose values add up to the target integer. If there is such a pair, return the indices as a tuple of two integers. If there are multiple valid pairs, return any one of them. If no such pair exists, return \\"No Pair Found\\". For example: ```python find_pair([2, 7, 11, 15], 9) ``` Should return: ```python (0, 1) ``` Explanation: Because `2 + 7 = 9` and the indices of `2` and `7` in the array `[2, 7, 11, 15]` are `0` and `1`. Another example: ```python find_pair([3, 2, 4], 6) ``` Should return: ```python (1, 2) ``` Explanation: Because `2 + 4 = 6` and the indices of `2` and `4` in the array `[3, 2, 4]` are `1` and `2`. If no such pair exists: ```python find_pair([1, 2, 3], 6) ``` Should return: ```python \\"No Pair Found\\" ``` **Function Signature** ```python def find_pair(arr: list, target: int) -> tuple or str: ```","solution":"def find_pair(arr, target): Function to find indices of the two numbers in the list that add up to the target. Returns a tuple of indices if such a pair exists, otherwise returns \\"No Pair Found\\". seen = {} for index, value in enumerate(arr): complement = target - value if complement in seen: return (seen[complement], index) seen[value] = index return \\"No Pair Found\\""},{"question":"Given a binary tree, write a function to find the sum of all the leaf nodes. A leaf node is a node that does not have any child nodes. Input: The first line of input contains an integer T denoting the number of test cases. The first line of each test case consists of an integer N, the number of nodes in the tree. The second line consists of N spaced integers representing the elements of the binary tree in level order traversal (insert NULL for no node). Output: Print the sum of all the leaf nodes in the binary tree. User Task: The task is to complete the function sum_of_leaf_nodes() which should calculate the sum of all the leaf nodes and return its value. Constraints: 1 <= T <= 100 1 <= N <= 1000 Example: Input: 2 7 1 2 3 4 5 6 7 3 10 20 30 Output: 22 50 Explanation: Testcase 1: The leaf nodes are 4, 5, 6, and 7. The sum is 4 + 5 + 6 + 7 = 22. Testcase 2: The leaf nodes are 20 and 30. The sum is 20 + 30 = 50.","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def build_binary_tree(elements): if not elements or elements[0] == \\"NULL\\": return None root = Node(elements[0]) queue = [root] i = 1 while queue and i < len(elements): current = queue.pop(0) if elements[i] != \\"NULL\\": current.left = Node(elements[i]) queue.append(current.left) i += 1 if i >= len(elements): break if elements[i] != \\"NULL\\": current.right = Node(elements[i]) queue.append(current.right) i += 1 return root def sum_of_leaf_nodes(root): if not root: return 0 if not root.left and not root.right: return root.data return sum_of_leaf_nodes(root.left) + sum_of_leaf_nodes(root.right) def solve_test_case(tree_elements): tree = build_binary_tree(tree_elements) return sum_of_leaf_nodes(tree) def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) results = [] line_index = 1 for _ in range(T): N = int(input_lines[line_index]) elements = list(map(int, input_lines[line_index + 1].replace(\\"NULL\\", \\"-1\\").split())) tree_elements = [elem if elem != -1 else \\"NULL\\" for elem in elements] result = solve_test_case(tree_elements) results.append(result) line_index += 2 return results # Example input processing input_data = \\"2n7n1 2 3 4 5 6 7n3n10 20 30\\" output = process_input(input_data) for res in output: print(res)"},{"question":"You are given an array of n integers and a single integer k. You are required to find whether there exists a combination of exactly k distinct pairs of integers from the given array such that the sum of integers in each pair is equal. A pair (a, b) is considered distinct if the indices of a and b in the array are different, i.e., if a is at index i and b is at index j, then i != j. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n/2), denoting the size of the array and the number of pairs to be checked. The second line contains n space-separated integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6), denoting the elements of the array. Output Print \\"YES\\" if there exists exactly k pairs whose sums are all equal. Otherwise, print \\"NO\\". Examples Input 6 2 1 5 7 1 5 4 Output YES Input 4 2 1 1 2 2 Output NO Explanation In the first example, the array contains suitable pairs (1, 7) and (5, 3) which both sum up to 8. In the second example, there are not enough pairs to form k pairs with equal sums.","solution":"def find_pairs_with_equal_sums(n, k, array): Determines if there are exactly k distinct pairs of integers in the array such that the sums of integers in each pair are all equal. Parameters: n (int): Size of the array. k (int): Number of pairs to check. array (List[int]): List of integers. Returns: str: \\"YES\\" if there are exactly k pairs with equal sums, otherwise \\"NO\\". from collections import defaultdict sum_pairs_count = defaultdict(int) num_elements = len(array) # Check every pair combination for i in range(num_elements): for j in range(i + 1, num_elements): pair_sum = array[i] + array[j] sum_pairs_count[pair_sum] += 1 for sum_value, count in sum_pairs_count.items(): if count == k: return \\"YES\\" return \\"NO\\""},{"question":"You are given a binary matrix M of size n times m (each element is either 0 or 1). You need to figure out the length of the longest contiguous sequence of 1\'s in any row or column of the matrix. ------ Input ------ The input starts with a line containing two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. The next n lines contain m integers each (either 0 or 1), representing the elements of the matrix. ------ Output ------ Output a single integer, the length of the longest contiguous sequence of 1\'s in any row or column of the matrix. ------ Example Input ------ 4 5 1 0 1 1 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 0 ------ Example Output ------ 4 ------ Explanation ------ In the given example, the longest contiguous sequence of 1\'s is in row 4 with the sequence of length 4 (1 1 1 1).","solution":"def longest_contiguous_sequence(n, m, matrix): def max_sequence(arr): max_length = 0 current_length = 0 for value in arr: if value == 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length max_length = 0 # Check all rows for row in matrix: max_length = max(max_length, max_sequence(row)) # Check all columns for col in range(m): column = [matrix[row][col] for row in range(n)] max_length = max(max_length, max_sequence(column)) return max_length"},{"question":"Read problems statements in Mandarin Chinese and Russian. Alex is organizing a talent show for his town\'s summer festival. There are N participants in the show, each given a unique number from 1 to N. During the event, every participant is called on stage exactly once according to a pre-determined sequential order. Due to unforeseen circumstances, some participants may cancel their performance at the last minute. When a participant cancels, all subsequent participants must shift one position forward in their appearance order to fill the gap, leaving no empty slot in the sequence. This reordering can be done as soon as cancellations are confirmed, but must ensure participants perform according to the shifted sequence without breaks. Alex needs your help to determine the final order of participants after all cancellations have been taken into account. ------ Input ------ The first line of the input consists of an integer T — the number of test cases. T test cases follow. For each test case: - The first line contains an integer N — the number of participants. - The second line contains N integers representing the initial sequence of participants\' unique numbers. - The third line contains an integer K — the number of cancellations. - The fourth line contains K integers representing the participants who have cancelled their performance. ------ Output ------ For each test case, output a single line with the final order of participants after processing all cancellations. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 0 ≤ K ≤ N Each participant cancellation number is unique and within the range from 1 to N. ------ Sample Input 1 ------ 3 5 1 2 3 4 5 2 2 4 4 1 3 5 7 1 5 6 2 4 6 1 3 5 4 6 3 1 4 ------ Sample Output 1 ------ 1 3 5 1 3 7 2 5 ------ Explanation 1 ------ In the first test case, participants 2 and 4 cancel. The remaining order is [1, 3, 5]. In the second test case, participant 5 cancels, leaving the order as [1, 3, 7]. In the third test case, participants 6, 3, 1, and 4 cancel. The remaining order is [2, 5].","solution":"def final_order_of_participants(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] initial_order = test_cases[i][1] K = test_cases[i][2] cancellations = set(test_cases[i][3]) final_order = [participant for participant in initial_order if participant not in cancellations] results.append(\\" \\".join(map(str, final_order))) return results"},{"question":"Create a function `extract_unique_numbers` that takes a list of strings where each string contains comma-separated positive integers, and returns a list of integers that are unique across all the strings (i.e., appear exactly once in the entire list). The output list should be sorted in ascending order. If the input list is empty, return an empty list. # Examples: Input 1: [\\"1,2,3,4\\", \\"2,3,5\\", \\"5,6,7\\", \\"8,9,8\\"] Output 1: [1, 4, 6, 7, 9] Input 2: [\\"10,10,10\\", \\"20,30,40\\", \\"30,40,50,60\\"] Output 2: [20, 50, 60] Input 3: [] Output 3: []","solution":"from collections import Counter def extract_unique_numbers(list_of_strings): Given a list of strings containing comma-separated positive integers, returns a list of unique integers across all the strings. Args: list_of_strings: List[str]: List of comma-separated numbers as strings. Returns: List[int]: List of unique integers sorted in ascending order. if not list_of_strings: return [] # Convert the list of strings into a list of integers all_numbers = [] for string in list_of_strings: all_numbers.extend(map(int, string.split(\',\'))) # Count the occurrences of each number number_counts = Counter(all_numbers) # Extract numbers that appear exactly once and sort them unique_numbers = sorted([num for num, count in number_counts.items() if count == 1]) return unique_numbers"},{"question":"You are given two strings, `source` and `target`. Your task is to determine whether you can make the `source` string equal to the `target` string by performing a series of allowed operations. The allowed operations are: 1. Swap any two characters in the `source` string. 2. Remove any one character from the `source` string. 3. Add any one character at any position in the `source` string. Your task is to check whether it is possible to transform the `source` string into the `target` string using zero or more of these operations. **Input** The input consists of two lines. The first line contains the string `source` of length n (1 ≤ n ≤ 1000). The second line contains the string `target` of length m (1 ≤ m ≤ 1000). Both strings consist of lowercase English letters. **Output** Print `YES` if it is possible to transform the `source` string into the `target` string using the allowed operations. Otherwise, print `NO`. **Examples** Input ``` abc bca ``` Output ``` YES ``` Input ``` abc def ``` Output ``` NO ``` Input ``` abc abcd ``` Output ``` YES ``` Input ``` abcd ab ``` Output ``` YES ```","solution":"def can_transform(source, target): Determines if the source string can be transformed into the target string using the allowed operations: swap, remove, add characters. # Use Counter to count characters frequencies from collections import Counter source_counter = Counter(source) target_counter = Counter(target) # Check if the difference between character counts # of source and target strings is not greater than 1. diff_count = sum((source_counter - target_counter).values()) + sum((target_counter - source_counter).values()) # If total number of different characters is 0 or 2, transformation is possible return \\"YES\\" if diff_count <= 2 else \\"NO\\""},{"question":"Given an array of N integers, find the length of the longest subarray where the sum of its elements is even. Chef has been trying to solve this problem for a long time but is facing difficulties. You are tasked with writing a function that, given the array, returns the length of the longest subarray with an even sum. ------ Function Signature ------ ```python def longest_even_sum_subarray(arr: List[int]) -> int: pass ``` ------ Input ------ - An integer N, the number of elements in the array. - An array of N integers. ------ Output ------ - An integer denoting the length of the longest subarray with an even sum. ------ Constraints ------ - 1 leq N leq 10^5 - 1 leq a[i] leq 10^9 ------ Example ------ ```python # Example 1 print(longest_even_sum_subarray(5, [1, 2, 3, 4, 5])) # Output: 4 # Explanation: The subarrays [1, 2], [2, 3, 4], [3, 4, 5], [1, 2, 3, 4], and [2, 3, 4] have even sums. Among them, the longest is [2, 3, 4] with length 3. # Example 2 print(longest_even_sum_subarray(3, [1, 1, 1])) # Output: 2 # Explanation: The only subarray with an even sum is [1, 1] with length 2. ``` Note: Optimize for time complexity considering the constraints.","solution":"def longest_even_sum_subarray(arr): Returns the length of the longest subarray with an even sum. total_sum = sum(arr) # If the total sum of the array is even, the whole array is valid. if total_sum % 2 == 0: return len(arr) # Find the minimum index removing which makes the total sum even for i in range(len(arr)): if arr[i] % 2 != 0: break for j in range(len(arr) - 1, -1, -1): if arr[j] % 2 != 0: break return len(arr) - min(i + 1, len(arr) - j)"},{"question":"Complete the function `sortDictByValue` that takes a dictionary as input and returns a list of key-value pairs sorted by their values in ascending order. If the input is not a dictionary, return an empty list. The returned list should contain tuples of (key, value). Example: ```python sortDictByValue({\'c\': 3, \'b\': 1, \'a\': 2}) # returns [(\'b\', 1), (\'a\', 2), (\'c\', 3)] sortDictByValue({\'orange\': 7, \'apple\': 3}) # returns [(\'apple\', 3), (\'orange\', 7)] sortDictByValue([1, 2, 3]) # returns [] sortDictByValue(\\"string\\") # returns [] sortDictByValue({}) # returns [] ```","solution":"def sortDictByValue(d): Returns a list of key-value pairs sorted by their values in ascending order. If the input is not a dictionary, returns an empty list. if not isinstance(d, dict): return [] return sorted(d.items(), key=lambda item: item[1])"},{"question":"You are given two strings S1 and S2 of length n and m respectively, consisting of lowercase English letters. Your task is to transform S1 into S2 by inserting, deleting, or replacing characters. However, you can perform these operations at up to k positions simultaneously in one operation. Calculate the minimum number of operations required to transform S1 into S2. Note that k positions in a single operation must be in the same order as in one of the strings. Input - The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), representing the lengths of strings S1 and S2 respectively. - The second line contains the string S1 consisting of n lowercase English letters. - The third line contains the string S2 consisting of m lowercase English letters. - The fourth line contains an integer k (1 ≤ k ≤ min(n, m)), the maximum number of positions you can operate on at the same time. Output Print the minimum number of operations required to transform S1 into S2. Examples Input 6 6 kitten sitting 1 Output 3 Input 6 8 abcdef abcdfefg 2 Output 2","solution":"def min_operations_to_transform(n, m, S1, S2, k): import numpy as np dp = np.zeros((n + 1, m + 1), dtype=int) for i in range(1, n + 1): dp[i][0] = i for j in range(1, m + 1): dp[0][j] = j for i in range(1, n + 1): for j in range(1, m + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement if i >= k and S1[i - k:i] == S2[j - k:j]: dp[i][j] = min(dp[i][j], 1 + dp[i - k][j - k]) return dp[n][m]"},{"question":"You are tasked with implementing a feature for a library management system. The library holds multiple copies of various books, and it allows users to borrow books under specific conditions. You need to write a function to determine whether a user can borrow a selected book given the following constraints: 1. The user can borrow a maximum of three different books at a time. 2. Only one copy of each book can be borrowed by a user at any given time. 3. A book can only be borrowed if there is at least one available copy in the library. Input Format - The first line contains an integer N, the total number of distinct books in the library. - The second line contains N integers each representing the number of copies available for each book in the library. - The third line contains an integer M, the total number of books currently borrowed by the user. - The fourth line contains M integers, each representing the indices of books currently borrowed by the user (0-indexed). - The fifth line contains an integer K, the index of the book the user wants to borrow (0-indexed). Output Format Output either \\"Yes\\" if the user can borrow the book according to the constraints, or \\"No\\" if the user cannot borrow the book. Example Input: 5 3 1 0 2 4 2 1 3 4 Output: Yes Input: 5 3 1 0 2 4 3 0 1 4 2 Output: No Explanation In the first example, the user wants to borrow the book with index 4. They have already borrowed two books (indices 1 and 3), and there are 4 copies of the desired book available. The user can borrow up to three different books, and the desired book is available, hence the output is \\"Yes\\". In the second example, the user has already borrowed three different books, thus reaching the maximum limit of three books. Hence, they cannot borrow another book, and the output is \\"No\\".","solution":"def can_borrow_book(N, available_books, M, borrowed_books, K): Determines whether a user can borrow a book based on the library constraints. Parameters: N (int): Total number of distinct books in the library. available_books (list of int): List containing the number of copies available for each book. M (int): Total number of books currently borrowed by the user. borrowed_books (list of int): List containing the indices of books currently borrowed by the user. K (int): Index of the book the user wants to borrow. Returns: str: \\"Yes\\" if the user can borrow the book, \\"No\\" otherwise. # Check if user currently borrowed books reaches the limit of 3 different books if M >= 3: return \\"No\\" # Check if the book the user wants to borrow is already borrowed if K in borrowed_books: return \\"No\\" # Check if there is at least one available copy of the book if available_books[K] <= 0: return \\"No\\" return \\"Yes\\""},{"question":"Yulia owns a flower shop and wants to manage her inventory efficiently. She has a list of sales data of flowers for a given month. Each transaction in the sales data is of the form (flower_id, quantity_sold) where `flower_id` is an integer representing the unique identifier of a flower, and `quantity_sold` is an integer representing the number of units of that flower sold in that transaction. Yulia wants to know the total quantity sold of each flower for the given month. Given the sales data, help her determine this. ------Input------ The first line contains an integer `n` (1 ≤ n ≤ 10^5) representing the number of transactions. Each of the next `n` lines contains two space-separated integers: `flower_id` (1 ≤ flower_id ≤ 10^5) and `quantity_sold` (1 ≤ quantity_sold ≤ 10^3). ------Output------ For each unique `flower_id` that appears in the sales data, print a single line containing two space-separated integers: `flower_id` and the total quantity sold of that flower. The output should be in ascending order of `flower_id`. ------Example------ Input 5 1 5 2 3 1 7 3 10 2 1 Output 1 12 2 4 3 10","solution":"def calculate_total_sales(n, sales): Calculates the total sales of each flower from the given sales data. Parameters: n (int): Number of transactions sales (list): List of tuples where each tuple contains two integers: flower_id and quantity_sold Returns: list: A list of tuples containing flower_id and the total quantity sold, sorted by flower_id from collections import defaultdict totals = defaultdict(int) for flower_id, quantity_sold in sales: totals[flower_id] += quantity_sold result = sorted(totals.items()) return result"},{"question":"Write a program to determine if a number is a Fibonacci number or not. A number is considered a Fibonacci number if it appears in the Fibonacci sequence. -----Input----- The first line contains an integer N, the number of test cases. Then N lines follow, each line contains one integer X, the number to be checked. -----Output----- For each test case, display \'YES\' if the number is a Fibonacci number, and \'NO\' if it is not, in a new line. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ X ≤ 10^12 -----Example----- Input 4 1 4 8 13 Output YES NO YES YES","solution":"import math def is_fibonacci(n): Returns True if n is a Fibonacci number, else False. A number, n, is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4) def determine_fibonacci_numbers(test_cases): Given a list of integers, determine if they are Fibonacci numbers and return a list with the results. results = [] for x in test_cases: if is_fibonacci(x): results.append(\'YES\') else: results.append(\'NO\') return results # Example usage: # input_cases = [1, 4, 8, 13] # print(determine_fibonacci_numbers(input_cases)) # Output should be [\'YES\', \'NO\', \'YES\', \'YES\']"},{"question":"A remote treehouse builder has a unique habit of numbering the rooms of the treehouses he builds in a very peculiar manner. Instead of consecutive numbers, he uses a sequence of numbers where the difference between any two successive numbers is 1 or -1. For instance, the sequence can be 1, 2, 1, 2, 1, ..., but it can never be 1, 3, 4, ... Given \'n\' which denotes the number of rooms and a sequence of \'n\' integers representing the room numbers, you need to check if the numbering is valid according to the builder\'s habits. Input The input consists of multiple test cases. Each line of input specifies one test case. The first integer on each line is \'n\' (1 ≤ n ≤ 100), which represents the number of rooms. The following \'n\' integers are the sequence of room numbers. The end of input is indicated by EOF. Output For each test case, output \\"VALID\\" if the numbering sequence is valid; otherwise, output \\"INVALID\\". Example Input 5 1 2 3 4 5 4 2 1 2 1 3 1 3 2 Output VALID VALID INVALID","solution":"def is_valid_numbering(n, sequence): Checks if the numbering sequence of the rooms is valid. A sequence is valid if the difference between any two successive numbers is 1 or -1. Args: n (int): Number of rooms. sequence (list of int): Sequence of room numbers. Returns: str: \\"VALID\\" if the numbering sequence is valid, otherwise \\"INVALID\\". for i in range(1, n): if abs(sequence[i] - sequence[i-1]) != 1: return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given a string s composed of lowercase Latin letters. Your task is to determine the minimum number of operations needed to make all characters of the string the same. In one operation, you can change any character in the string to any other lowercase Latin letter. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 1000), the string for which you need to find the minimum number of operations. -----Output----- For each test case, print a single integer — the minimum number of operations required to make all characters in the string s the same. -----Examples----- Input 3 aabb abcde zzzzz Output 2 4 0 -----Note----- In the first test case, the string is aabb. The minimum number of operations needed to make all characters the same could be achieved by changing the two \'b\'s to \'a\'s or vice versa, thus requiring 2 operations. In the second test case, the string is abcde. Changing every character to \'a\' (or any same character) requires 4 operations. In the third test case, the string is zzzzz. The string already has all characters the same, so no operations are needed, hence 0.","solution":"def min_operations_to_make_same(t, test_cases): results = [] for s in test_cases: max_freq = max(s.count(ch) for ch in set(s)) operations = len(s) - max_freq results.append(operations) return results"},{"question":"Tommy is playing with a sequence of integers. He loves playing with numbers, so he came up with a new game. Given an integer sequence b_1, b_2, ..., b_n, he can perform the following operation exactly once: 1. Choose an index i (1 ≤ i ≤ n - 1), then add b_i to b_{i+1}, and remove b_i from the sequence. The sequence then becomes b_1, ..., b_{i-1}, b_{i} + b_{i+1}, b_{i+2}, ..., b_{n}. He wants to make sure that the new sequence has the maximum possible sum, but he can perform the operation only once. Could you help Tommy find the maximum possible sum of the new sequence after performing the operation? -----Input----- The first line contains an integer n (1 ≤ n ≤ 2000), denoting the length of the original sequence. The second line contains n space-separated integers, describing the original sequence b_1, b_2, ..., b_{n} (-10^6 ≤ b_{i} ≤ 10^6, i = 1, 2, ..., n). -----Output----- Print a single integer, which represents the maximum possible sum of the new sequence after performing the operation. -----Examples----- Input 5 1 2 3 4 5 Output 15 Input 3 -1 2 -3 Output -2 -----Note----- In the first example, the optimal choice is to merge any two consecutive elements, like 1 and 2 or 4 and 5. The sum of the new sequence will always be 15 since the sum of the original sequence is 15. In the second example, the optimal choice is to merge 2 and -3 into a single element -1, resulting in the sequence [-1, -1], which has a sum of -2.","solution":"def max_sequence_sum(n, sequence): Returns the maximum possible sum of the new sequence after performing the operation of merging two consecutive elements exactly once. Parameters: n (int): The length of the original sequence sequence (list of int): The original sequence of integers Returns: int: The maximum possible sum of the new sequence # The maximum sum of the new sequence will be the sum of the original sequence # because performing the operation won\'t change the total sum. return sum(sequence)"},{"question":"Farmer Alex has a rectangular field, divided into a grid of m rows and n columns. Each cell in the field can either contain a crop or be empty. The task is to find the largest rectangle in the grid that contains only crops. You are given a binary matrix where 1 represents a crop and 0 represents an empty cell. The largest rectangle containing only 1s will contain only crops, and you need to find the area of this rectangle. -----Input----- The first line contains two space-separated integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. Each of the next m lines contains n space-separated integers (either 0 or 1) representing the grid. -----Output----- Print a single integer — the area of the largest rectangle containing only crops. -----Examples----- Input 4 4 1 0 1 0 1 0 1 1 1 1 1 1 0 1 0 0 Output 4 Input 3 3 0 0 0 0 0 0 0 0 0 Output 0 Input 2 4 1 1 1 1 1 1 1 1 Output 8 -----Note----- In the first sample, the largest rectangle containing only crops has an area of 4. In the second sample, there are no crops at all, so the area is 0. In the third sample, the entire grid is filled with crops, so the largest rectangle containing crops has an area of 2*4 = 8.","solution":"def largest_rectangle_area(matrix): if not matrix: return 0 max_area = 0 n = len(matrix[0]) heights = [0] * n for row in matrix: for i in range(n): if row[i] == 0: heights[i] = 0 else: heights[i] += 1 max_area = max(max_area, max_histogram_area(heights)) return max_area def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def solve(m, n, matrix): return largest_rectangle_area(matrix)"},{"question":"You are given an integer k, a string t of lowercase Latin letters, and a collection of n strings in an array s. Your task is to determine if it is possible to form the target string t by concatenating some elements of the array s exactly k times, either in whole or in part. Each element of s can be used any number of times. -----Input----- The first line contains the integer k (1 le k le 10) and the string t (1 le |t| le 100). The second line contains the integer n (1 le n le 50) — the number of strings in the array s. The next n lines contain the strings s_1, s_2, ..., s_n (1 le |s_i| le 50). -----Output----- Output \\"YES\\" if it is possible to form the string t by concatenating exactly k strings from s. Otherwise, output \\"NO\\". -----Example----- Input 2 abcd 3 ab cd abc Output YES -----Explanation----- In this example, the string \\"abcd\\" can be formed by concatenate two strings \\"ab\\" and \\"cd\\" in the array. We can use each string as many times as necessary, and since k = 2, we form the target string by using \\"ab\\" + \\"cd\\". Therefore, the output is \\"YES\\".","solution":"def can_form_string(k, t, n, s): Determines if it is possible to form the string t by concatenating exactly k strings from s, either in whole or in part. Each element of s can be used any number of times. from itertools import product # Get all possible concatenations of strings of length k from s for combination in product(s, repeat=k): # Check if concatenation of this combination is equal to t if \'\'.join(combination) == t: return \\"YES\\" return \\"NO\\""},{"question":"Write a function `bestStudentGrade(students: Dict[str, List[int]]) -> Tuple[str, Optional[float]]` that accepts a dictionary with student names as keys and a list of their grades as values. The function should return a tuple with the name of the student with the highest average grade and their average grade. If the input dictionary is empty, the function should return a tuple with an empty string and `None`. Examples: ```python students = { \\"Alice\\": [87, 92, 85], \\"Bob\\": [79, 83, 88], \\"Charlie\\": [91, 87, 94] } bestStudentGrade(students) # Output: (\'Charlie\', 90.66666666666667) empty_students = {} bestStudentGrade(empty_students) # Output: (\'\', None) ```","solution":"from typing import Dict, List, Tuple, Optional def bestStudentGrade(students: Dict[str, List[int]]) -> Tuple[str, Optional[float]]: Returns the name of the student with the highest average grade and their average grade. If the input dictionary is empty, returns a tuple with an empty string and None. if not students: return (\\"\\", None) best_average = -1 best_student = \\"\\" for student, grades in students.items(): average = sum(grades) / len(grades) if average > best_average: best_average = average best_student = student return (best_student, best_average)"},{"question":"Given a tree with N nodes and N-1 edges, where each node is associated with an integer value from 1 to N. You are allowed to perform the following operation as many times as you\'d like: Select any two nodes u and v, and if u and v are directly connected, you can swap their values. You want to find out how many different unique trees (considering the values at each node) can be obtained by performing the operation. Two trees are considered different if there exists at least one node which has a different integer value in both trees. -----Input----- - The first line of the input contains a single integer T which represents the number of test cases. - For each test case: - The first line contains a single integer N, denoting the number of nodes. - The second line contains N integers: the initial values of the nodes. - The next N-1 lines describe the edges of the tree. Each of these lines contains two integers u and v which indicate an edge connecting node u and node v. -----Output----- For each test case, output the number of distinct configurations of nodes\' values you can get modulo 109+7. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 50 - 1 ≤ values of nodes ≤ N -----Subtasks----- - Subtask 1 (20 points): 1 ≤ N ≤ 8 - Subtask 2 (80 points): Original constraints -----Example----- Input: 2 3 1 2 3 1 2 2 3 4 1 2 3 4 1 2 1 3 1 4 Output: 6 4 -----Explanation----- Example case 1. The tree is initially [1-2-3]. We\'ll list the different swaps possible: - (1,2,3) swap nodes 1 and 2 to get (2,1,3) - (2,1,3) swap nodes 2 and 3 to get (2,3,1) - (2,3,1) swap nodes 1 and 2 to get (3,2,1) - (3,1,2) swap nodes 1 and 2 to get (1,3,2) - (1,3,2) swap nodes 2 and 3 to get (1,2,3) So, all the unique configurations of the tree are: (1, 2, 3), (2, 1, 3), (2, 3, 1), (3, 2, 1), (1, 3, 2), and (3, 1, 2). Hence the answer is 6.","solution":"def count_unique_trees(T, testcases): MOD = 10**9 + 7 def find_components(n, edges): visited = [False] * n components = [] def dfs(node, component): stack = [node] while stack: curr = stack.pop() if not visited[curr]: visited[curr] = True component.append(curr) for neighbor in adj_list[curr]: if not visited[neighbor]: stack.append(neighbor) for i in range(n): if not visited[i]: component = [] dfs(i, component) components.append(component) return components results = [] for i in range(T): n = testcases[i][0] values = testcases[i][1] edges = testcases[i][2] adj_list = [[] for _ in range(n)] for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) components = find_components(n, edges) num_unique_trees = 1 for component in components: component_size = len(component) num_unique_trees = (num_unique_trees * factorial(component_size)) % MOD results.append(num_unique_trees) return results def factorial(x): MOD = 10**9 + 7 result = 1 for i in range(1, x + 1): result = (result * i) % MOD return result"},{"question":"A**lice is a *node* on a network and wants to communicate with Bob who is at another *node* on the same network. The network is represented as a graph with N nodes and M edges. Each edge connects two nodes and has a certain bandwidth capacity. Alice needs to find the maximum bandwidth path from her node to Bob\'s node. The nodes are labeled 1, dots, N.** Each edge is described by three values: the origin node u, the destination node v, and the bandwidth capacity c. Find the maximum bandwidth from Alice\'s node A to Bob\'s node B by identifying the path where the minimum bandwidth capacity along the path is maximized. **Input** The input is given from standard input in the following format: N M A B u_1 v_1 c_1 u_2 v_2 c_2 ... u_M v_M c_M **Output** Print the maximum bandwidth from Alice\'s node to Bob\'s node. Also, output a line break at the end. **Example** *Input* 4 5 1 4 1 2 5 2 3 4 3 4 3 1 3 7 2 4 6 *Output* 5 **Explanation** The path with the maximum bandwidth is 1 -> 3 -> 4 with a bottleneck bandwidth capacity of 5.","solution":"import heapq def maximum_bandwidth(N, M, A, B, edges): # Create adjacency list representation of the graph graph = [[] for _ in range(N+1)] for u, v, c in edges: graph[u].append((v, c)) graph[v].append((u, c)) # Use a max-heap (priority queue) to keep track of the maximum bandwidth path max_heap = [(-float(\'inf\'), A)] # (bandwidth, node) max_bandwidth = [-1] * (N + 1) max_bandwidth[A] = float(\'inf\') while max_heap: curr_bandwidth, node = heapq.heappop(max_heap) curr_bandwidth = -curr_bandwidth if node == B: return curr_bandwidth for neighbor, capacity in graph[node]: min_bandwidth = min(curr_bandwidth, capacity) if min_bandwidth > max_bandwidth[neighbor]: max_bandwidth[neighbor] = min_bandwidth heapq.heappush(max_heap, (-min_bandwidth, neighbor)) return 0 # Example usage (as per the problem statement above) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) A = int(data[2]) B = int(data[3]) edges = [] index = 4 for _ in range(M): u = int(data[index]) v = int(data[index+1]) c = int(data[index+2]) edges.append((u, v, c)) index += 3 result = maximum_bandwidth(N, M, A, B, edges) print(result)"},{"question":"A famous archaeologist has discovered an ancient map leading to a treasure hidden in a jungle. The jungle is represented as a rectangular grid of cells, each of which either contains an obstacle or is free to pass through. The map also shows the presence of traps in some cells, which decrease the archaeologist\'s stamina by varying amounts if he steps into them. To survive and find the treasure, the archaeologist must navigate through the jungle, starting from the upper-left corner and reaching the lower-right corner, while managing his stamina carefully. The archaeologist has an initial amount of stamina and can carry a limited number of energy drinks to restore stamina during his journey. Each energy drink restores a specific amount of stamina, and he can use the drinks just before stepping into a cell that contains a trap. The archaeologist will always try to minimize the amount of stamina lost by using energy drinks optimally. Your task is to write a program that helps the archaeologist determine if he can reach the treasure without running out of stamina. # Input The input consists of several test cases. - The first line of each test case contains two integers, `S_init` and `S_max` (1 ≤ S_init ≤ S_max ≤ 1000), which represent the archaeologist\'s initial stamina and maximum stamina, respectively. - The second line contains two integers, `R` and `C` (1 ≤ R, C ≤ 100), which represent the number of rows and columns in the jungle grid. - The next `R` lines contain `C` characters each, describing the jungle grid. A character in the grid can be one of: - \'.\' (a free cell), - \'#\' (an obstacle), - an uppercase alphabetic character [A-Z], which represents a trap type. - The next line contains an integer `T` (1 ≤ T ≤ 26), the number of trap types. Each of the following `T` lines contains an uppercase character and an integer, separated by a space, indicating the trap type and the stamina penalty it causes. - The next line contains an integer `P` (0 ≤ P ≤ 12), the number of energy drinks. Each of the following `P` lines contains an integer, representing the stamina each drink restores. - The input ends with a line containing two zeros, which should not be processed. # Output For each test case, output \\"YES\\" if the archaeologist can reach the treasure without his stamina dropping to zero or below. Otherwise, output \\"NO\\". # Example Input ``` 15 20 4 4 .A.. .... ..B. ..C. 3 A 5 B 8 C 12 3 10 15 5 10 10 5 5 ..... .#B#. ..A.. ...#. ..... 2 B 5 A 3 2 10 10 0 0 ``` Output ``` YES NO ``` --- # Explanation In the first test case: - The archaeologist can start from the upper-left corner until he reaches cell (1,1) with trap type \'A\' which deducts 5 of stamina. He uses an energy drink which restores 10 stamina. - From cell (1,1) to (2,2) with no obstacles or traps; reaches cell (3,3) with trap type \'B\', deducts 8 stamina. Uses another energy drink. - Reaches cell (3,4) with trap type \'C\' deducts 12 stamina, uses the last energy drink which restores 5 stamina. On the way to the lower-right cell, no traps or obstacles to block, successfully reaching the destination. In the second test case: - Obstacles prevent reaching the treasure, hence \\"NO\\". ```","solution":"import heapq def can_reach_treasure(S_init, S_max, grid, trap_penalty, energy_drinks): rows, cols = len(grid), len(grid[0]) start = (0, 0) goal = (rows - 1, cols - 1) stamina_drinks = sorted(energy_drinks, reverse=True) movement = [(0, 1), (1, 0), (0, -1), (-1, 0)] def in_bounds(r, c): return 0 <= r < rows and 0 <= c < cols pq = [(0, S_init, start)] visited = set() while pq: stamina_cost, stamina_left, (r, c) = heapq.heappop(pq) if (r, c) == goal: return True if (r, c) in visited: continue visited.add((r, c)) for dr, dc in movement: nr, nc = r + dr, c + dc if in_bounds(nr, nc) and grid[nr][nc] != \'#\': new_stamina_left = stamina_left if grid[nr][nc] in trap_penalty: penalty = trap_penalty[grid[nr][nc]] if stamina_drinks and new_stamina_left <= penalty: new_stamina_left += stamina_drinks.pop(0) new_stamina_left -= penalty if new_stamina_left > 0: heapq.heappush(pq, (stamina_cost + 1, new_stamina_left, (nr, nc))) return False def navigate_jungle(test_cases): for test in test_cases: S_init = test[\'S_init\'] S_max = test[\'S_max\'] R = test[\'R\'] C = test[\'C\'] grid = test[\'grid\'] T = test[\'T\'] trap_penalty = test[\'trap_penalty\'] P = test[\'P\'] energy_drinks = test[\'energy_drinks\'] if can_reach_treasure(S_init, S_max, grid, trap_penalty, energy_drinks): print(\\"YES\\") else: print(\\"NO\\") def process_input(input_lines): idx = 0 test_cases = [] while idx < len(input_lines): S_init, S_max = map(int, input_lines[idx].split()) if S_init == 0 and S_max == 0: break idx += 1 R, C = map(int, input_lines[idx].split()) idx += 1 grid = [] for _ in range(R): grid.append(input_lines[idx]) idx += 1 T = int(input_lines[idx]) idx += 1 trap_penalty = {} for _ in range(T): trap_type, penalty = input_lines[idx].split() trap_penalty[trap_type] = int(penalty) idx += 1 P = int(input_lines[idx]) idx += 1 energy_drinks = [] for _ in range(P): energy_drinks.append(int(input_lines[idx])) idx += 1 test_cases.append({ \'S_init\': S_init, \'S_max\': S_max, \'R\': R, \'C\': C, \'grid\': [list(row) for row in grid], \'T\': T, \'trap_penalty\': trap_penalty, \'P\': P, \'energy_drinks\': energy_drinks, }) return test_cases"},{"question":"Anna is organizing a themed event and wants to create a seating arrangement for the guests. She has a single long table with N seats arranged in a row, numbered from 1 to N. Anna also wants to decorate the table using different themes for different segments of the table. She gives you a series of instructions to set up the decorations, where each instruction specifies a range of seats and a theme ID to apply to that range. After setting up the decorations, Anna wants to know the theme that is most frequently used in the decoration of the table. If there is a tie (i.e., two or more themes have the same highest frequency), she wants the smallest theme ID among them. Write a program to help Anna determine the most frequently used theme ID on the table after all the instructions are executed. Input: Line 1: Two space-separated integers N and M. Lines 2 to 1+M: Each line contains one of Anna\'s instructions in the form \\"A B T\\", meaning to apply theme T to all seats between A and B (inclusive). Output: A single integer which is the theme ID used most frequently on the table. In case of a tie, output the smallest theme ID. Constraints: 1 ≤ N ≤ 100000 1 ≤ M ≤ 10000 1 ≤ A ≤ B ≤ N 1 ≤ T ≤ 100000 Example: Input: 10 4 1 5 3 4 7 2 8 10 3 3 6 4 Output: 3","solution":"def most_frequent_theme(n, m, instructions): # Initialize the table with no theme (represented by 0) table = [0] * n # Apply each instruction to the table for a, b, t in instructions: for i in range(a-1, b): table[i] = t # Count the frequencies of each theme frequencies = {} for theme in table: if theme in frequencies: frequencies[theme] += 1 else: frequencies[theme] = 1 # Find the most frequent theme, and in case of ties, the smallest ID max_frequency = 0 most_frequent_theme_id = float(\'inf\') for theme, frequency in frequencies.items(): if frequency > max_frequency or (frequency == max_frequency and theme < most_frequent_theme_id): max_frequency = frequency most_frequent_theme_id = theme return most_frequent_theme_id"},{"question":"Given a binary tree, write a function to determine if it is height-balanced. A binary tree is height-balanced if the left and right subtrees of every node differ in height by no more than 1. Input The input is given as a list of integers, where the index of each integer corresponds to its position in a level-order traversal (BFS) of the binary tree. Empty nodes are represented by the value -1. Output The output should be a single integer, which is 1 if the binary tree is height-balanced, or 0 if it is not. Constraints 1 ≤ length of input array ≤ 10^4 SAMPLE INPUT [1, 2, 2, 3, 3, -1, -1, 4, 4] SAMPLE OUTPUT 0","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced_binary_tree(root) -> int: def build_tree(nodes, index): if index >= len(nodes) or nodes[index] == -1: return None node = TreeNode(nodes[index]) node.left = build_tree(nodes, 2 * index + 1) node.right = build_tree(nodes, 2 * index + 2) return node def check_height_and_balance(node): if not node: return 0, True left_height, left_balanced = check_height_and_balance(node.left) right_height, right_balanced = check_height_and_balance(node.right) if not left_balanced or not right_balanced: return max(left_height, right_height) + 1, False if abs(left_height - right_height) > 1: return max(left_height, right_height) + 1, False return max(left_height, right_height) + 1, True if not root: return 1 tree_root = build_tree(root, 0) _, is_balanced = check_height_and_balance(tree_root) return 1 if is_balanced else 0"},{"question":"Emma loves creating bracelets using different colored beads. Each bead is represented by an integer based on its color. She wants to create a bracelet that is as aesthetically pleasing as possible, which to her means that there are no two neighboring beads of the same color. Given a collection of beads, determine if it\'s possible to arrange them into a bracelet such that no two neighboring beads share the same color. If it\'s possible, return \\"YES\\". Otherwise, return \\"NO\\". For example, if Emma has beads represented by the array `beads = [1, 2, 2, 3, 4]`, she can arrange them in the order `[1, 2, 3, 2, 4]`. Here, no two consecutive beads are of the same color. Thus, the output should be \\"YES\\". Function Description Complete the function canArrangeBracelet in the editor below. It should return a string \\"YES\\" if the bracelet can be arranged as described, or \\"NO\\" otherwise. canArrangeBracelet has the following parameter(s): `beads`: an array of integers representing the colors of the beads Input Format The first line contains an integer `n`, the size of the array. The second line contains `n` space-separated integers representing the array `beads`. Constraints 2 leq n leq 10^5 1 leq text{beads}[i] leq 10^9 Output Format A single string, either \\"YES\\" or \\"NO\\". Sample Input 0 5 1 2 2 3 4 Sample Output 0 YES Explanation 0 The bracelet can be arranged as `[1, 2, 3, 2, 4]` where no two neighboring beads share the same color. Sample Input 1 4 1 1 1 1 Sample Output 1 NO Explanation 1 All beads are of the same color, so it\'s impossible to arrange them as described. Sample Input 2 6 1 2 3 4 5 6 Sample Output 2 YES Explanation 2 The bracelet can be arranged as`[1, 2, 3, 4, 5, 6]` where no two neighboring beads share the same color.","solution":"def canArrangeBracelet(beads): from collections import Counter bead_counts = Counter(beads) max_count = max(bead_counts.values()) n = len(beads) # More than half of the beads cannot be the same color for a valid bracelet if max_count > (n + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given an array arr of n integers. You need to find out the first subarray (contiguous segment) of length m that has the smallest sum among all such subarrays. If there are multiple subarrays with the same smallest sum, return the one that appears first. Example arr = [5, 2, 2, 3, 1] m = 2 The possible subarrays of length 2 are: - [5, 2] with sum 7 - [2, 2] with sum 4 - [2, 3] with sum 5 - [3, 1] with sum 4 The subarray [2, 2] has the smallest sum which is 4. Function Description Complete the function smallestSubarray in the editor below. The function must return an array representing the first subarray of length m with the smallest sum. smallestSubarray has the following parameter(s): - int m: the length of the subarray - int arr[n]: an array of integers Input Format The first line contains two space-separated integers n and m, the length of arr and the length of the subarray. The second line contains n space-separated integers arr[i] where 0 leq arr[i] leq 10^6. Constraints 1 leq n leq 10^5 1 leq m leq n Output Format Print the first subarray of length m that has the smallest sum. Sample Input 0 8 3 4 3 1 8 2 7 5 6 Sample Output 0 3 1 8 Explanation 0 The subarrays of length 3 are: - [4, 3, 1] with sum 8 - [3, 1, 8] with sum 12 - [1, 8, 2] with sum 11 - [8, 2, 7] with sum 17 - [2, 7, 5] with sum 14 - [7, 5, 6] with sum 18 The subarray [4, 3, 1] has the smallest sum which is 8. Sample Input 1 5 2 2 4 3 1 5 Sample Output 1 3 1 Explanation 1 The subarrays of length 2 are: - [2, 4] with sum 6 - [4, 3] with sum 7 - [3, 1] with sum 4 - [1, 5] with sum 6 The subarray [3, 1] has the smallest sum which is 4.","solution":"def smallestSubarray(m, arr): min_sum = float(\'inf\') min_sum_subarray = [] for i in range(len(arr) - m + 1): current_subarray = arr[i:i + m] current_sum = sum(current_subarray) if current_sum < min_sum: min_sum = current_sum min_sum_subarray = current_subarray return min_sum_subarray"},{"question":"John wants to organize his bookshelf. He has a list of book titles, where each title is a string consisting only of lowercase letters. John decides to group the titles by their first letter and sort each group in alphabetical order. Write a program that takes a list of book titles and outputs the grouped and sorted titles, with each group separated by a blank line. The titles within each group should also be printed in alphabetical order. -----Input----- The first line contains an integer N (1 leq N leq 100), the number of book titles. Each of the next N lines contains a single book title, a non-empty string of lowercase letters with length up to 100. -----Output----- Group the titles by their first letter, sort each group alphabetically, and print the grouped titles. Groups should be printed in alphabetical order based on their starting letter, and each group should be followed by a blank line. -----Examples----- Sample Input 1: 5 apple banana apricot blueberry blackberry Sample Output 1: apple apricot banana blackberry blueberry Sample Input 2: 4 dog cat duck cow Sample Output 2: cat cow dog duck","solution":"def organize_bookshelf(titles): Groups the book titles by their first letter and sorts each group in alphabetical order. :param titles: List of book titles :return: Grouped and sorted book titles as a string with each group separated by a blank line. from collections import defaultdict # Create a dictionary to store lists of titles indexed by their first letter grouped_titles = defaultdict(list) # Group titles by their first letter for title in titles: first_char = title[0] grouped_titles[first_char].append(title) # Sort each group and the keys for key in grouped_titles.keys(): grouped_titles[key].sort() sorted_keys = sorted(grouped_titles.keys()) # Construct the output result = [] for key in sorted_keys: result.extend(grouped_titles[key]) result.append(\\"\\") # Add a blank line after each group return \\"n\\".join(result).strip()"},{"question":"John\'s garden has a grid layout of size n x n, represented by an array of integers. Each cell in the grid can have a certain height, denoting how high a plant or an obstacle might be. John wants to plant new special flowers in this grid. However, these special flowers can only be planted in specific areas determined by the height of the grid cells. John knows that each special flower requires a contiguous rectangular area in the grid where the height of all cells in this area must be the same and higher than or equal to a given threshold height, h. Given these constraints, John wants to know the size of the largest possible rectangular area where he can plant his flowers. Input The first line of the input contains two integers n (1 ≤ n ≤ 200) and h (1 ≤ h ≤ 100) — the size of John\'s garden and the threshold height. Each of the following n lines contains n integers each (0 ≤ height ≤ 100), representing the heights of the cells in John\'s garden grid. Output Print a single integer — the area (in terms of number of cells) of the largest rectangular area with the same height that is greater than or equal to h where John can plant his flowers. Example Input 4 3 3 3 3 3 3 2 2 3 3 2 2 3 3 3 3 3 Output 4 Note In the example, the largest rectangular area with the same height that is greater than or equal to 3 is formed by the 2x2 block of cells with height 3 located at the bottom right corner of the grid. Thus, the output should be 4.","solution":"def largest_rectangle_area(grid, n, h): Function to find the largest rectangle area with the same height >= h. def calculate_max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area modified_grid = [[1 if grid[i][j] >= h else 0 for j in range(n)] for i in range(n)] max_area = 0 heights = [0] * n for i in range(n): for j in range(n): heights[j] = heights[j] + 1 if modified_grid[i][j] == 1 else 0 max_area = max(max_area, calculate_max_histogram_area(heights)) return max_area"},{"question":"Talia is practicing her hacking skills by testing network connectivity. Her current challenge involves determining the longest subsequence in a list of IP addresses such that each address in the sequence has at least one more digit than the previous one. Each IP address is represented as a string of digits. Your task is to help Talia by writing a program that finds this longest subsequence. -----Input----- The first line contains an integer n, the number of IP addresses. The following n lines each contain an IP address consisting of digits. -----Output----- Output the length of the longest subsequence where each subsequent IP address has more digits than the previous one. -----Limits----- - 1 leq n leq 1000 - Each IP address has at most 15 digits. -----Examples----- Sample Input: 5 19216801 101 10 103 255255255255 Sample Output: 3","solution":"def longest_increasing_subsequence_length(ips): Finds the length of the longest subsequence where each subsequent IP address has more digits than the previous one. :param ips: List of IP addresses as strings :return: Length of the longest subsequence n = len(ips) if n == 0: return 0 # Lengths of the longest subsequence ending at each index lis = [1] * n # Compute the lengths for i in range(1, n): for j in range(i): if len(ips[i]) > len(ips[j]): lis[i] = max(lis[i], lis[j] + 1) # Return the maximum value in lis return max(lis) # Example usage if __name__ == \\"__main__\\": n = int(input()) ips = [input().strip() for _ in range(n)] print(longest_increasing_subsequence_length(ips))"},{"question":"Given a list of integers where each integer represents the height of a building, determine the number of \\"visible\\" buildings from the left side of the list. A building is considered visible if there are no taller buildings to its left. Input: First line contains T, number of test cases. Each of the next T lines contains a list of space-separated integers representing the heights of buildings. Output: For each test case, print the number of visible buildings from the left side. Constraints: 1 ≤ T ≤ 100 1 ≤ Number of buildings in each test case ≤ 100000 (10^5) 1 ≤ Height of each building ≤ 1000000000 (10^9) SAMPLE INPUT 2 3 7 8 3 6 1 1 2 3 4 5 SAMPLE OUTPUT 3 5 Explanation Test #1: The list of building heights is [3, 7, 8, 3, 6, 1] - The first building (height 3) is visible. - The second building (height 7) is visible since it is taller than the previous building. - The third building (height 8) is visible since it is taller than the previous building. - The fourth building (height 3) is not visible because it is shorter than 8. - The fifth building (height 6) is not visible because it is shorter than 8. - The sixth building (height 1) is not visible because it is shorter than 8. Total visible buildings are 3. Test #2: The list of building heights is [1, 2, 3, 4, 5] - All buildings are visible since each subsequent building is taller than the previous one. Total visible buildings are 5.","solution":"def count_visible_buildings(test_cases): result = [] for buildings in test_cases: max_height = 0 visible_count = 0 for height in buildings: if height > max_height: visible_count += 1 max_height = height result.append(visible_count) return result def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): test_cases.append(list(map(int, lines[i].split()))) return test_cases def main(input_text): test_cases = parse_input(input_text) visible_buildings_count = count_visible_buildings(test_cases) return \\"n\\".join(map(str, visible_buildings_count))"},{"question":"Given an array of integers, your task is to find the maximum length of a subarray containing all unique elements. In other words, you need to find the length of the longest subarray where no element appears more than once. Example 1: Input: arr = [2, 1, 2, 3, 4, 1] Output: 4 Explanation: The longest subarray with all unique elements is [2, 3, 4, 1] with a length of 4. Example 2: Input: arr = [4, 4, 4, 4] Output: 1 Explanation: The longest subarray with all unique elements is [4] with a length of 1. Example 3: Input: arr = [1, 2, 3, 4, 5] Output: 5 Explanation: The longest subarray with all unique elements is the entire array, with a length of 5. Example 4: Input: arr = [1, 2, 1, 3, 2, 3] Output: 3 Explanation: The longest subarray with all unique elements is [1, 2, 3] with a length of 3. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function longestUniqueSubarray() that takes an array (arr) and its size (n), and return the length of the longest subarray with all unique elements. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^6","solution":"def longestUniqueSubarray(arr): Returns the length of the longest subarray with all unique elements. n = len(arr) if n == 0: return 0 start = 0 max_len = 0 last_occurrence = {} for end in range(n): if arr[end] in last_occurrence: start = max(start, last_occurrence[arr[end]] + 1) last_occurrence[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"A large-scale e-commerce company is preparing for its biggest sales event of the year. To avoid any potential system failures due to traffic spikes, the company\'s IT department wants to ensure the server\'s clock synchronization is accurate and precise. They have servers placed in different time zones. The local time for each server is read as a string formatted as HH:MM:SS with additional information about the timezone represented as an integer (e.g., +5, -3, 0). Your task is to write a program that synchronizes all server times to GMT (Greenwich Mean Time). The input will consist of multiple test cases where each test case provides the current local time and timezone information for each server. The output should provide the synchronized time of each server in the format HH:MM:SS. Input: The first line contains the number of test cases, T. For each test case, the first line contains an integer, n, representing the number of servers. The next n lines each contain two elements: a string representing the local time in HH:MM:SS format and an integer indicating the timezone offset from GMT. Output: For each server, output the synchronized GMT time in HH:MM:SS format. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 50 -12 ≤ timezone offset ≤ 14 00:00:00 ≤ local time ≤ 23:59:59 SAMPLE INPUT 1 2 10:45:05 +5 23:59:59 -3 SAMPLE OUTPUT 05:45:05 02:59:59 Explanation In the given example, there are 2 servers with their respective local times and timezone offsets. The first server\'s local time is 10:45:05 with a timezone of +5. To convert this to GMT, you subtract 5 hours resulting in 05:45:05 GMT. The second server’s local time is 23:59:59 with a timezone of -3. To convert this to GMT, you add 3 hours resulting in 02:59:59 GMT.","solution":"from datetime import datetime, timedelta def synchronize_time(num_cases, cases): results = [] for case in cases: n = case[0] for i in range(n): local_time, timezone = case[1+i] time = datetime.strptime(local_time, \'%H:%M:%S\') adjusted_time = time - timedelta(hours=timezone) results.append(adjusted_time.strftime(\'%H:%M:%S\')) return results def process_input(input_str): lines = input_str.strip().split(\'n\') num_cases = int(lines[0]) cases = [] index = 1 for _ in range(num_cases): n = int(lines[index]) current_case = [n] for j in range(n): local_time, timezone = lines[index + 1 + j].split() timezone = int(timezone) current_case.append((local_time, timezone)) cases.append(current_case) index += n + 1 return num_cases, cases def synchronize_from_input(input_str): num_cases, cases = process_input(input_str) return synchronize_time(num_cases, cases)"},{"question":"Given a sequence of integers, find the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. Input: The first line contains an integer T (number of test cases). Each test case consists of two lines: - The first line contains an integer N (size of the sequence). - The second line contains N space-separated integers representing the sequence. Output: For each test case, output the length of the longest increasing subsequence. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Sequence[i] ≤ 10000 SAMPLE INPUT 2 5 1 2 1 5 6 6 10 9 2 5 3 7 101 18 SAMPLE OUTPUT 4 4","solution":"def length_of_LIS(sequence): Function to find the length of the longest increasing subsequence in a given sequence. if not sequence: return 0 # Array to store the longest increasing subsequence length at each index dp = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(0, i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def get_lengths_of_LIS(test_cases): Function to handle multiple test cases and return the lengths of the longest increasing subsequence for each case. results = [] for case in test_cases: N, sequence = case results.append(length_of_LIS(sequence)) return results"},{"question":"In a distant galaxy, the speed of light is measured differently. The Galactic Federation measures speed in `GBit/s` instead of `m/s`. Given a value `V`, representing speed in `GBit/s`, the Galactic Federation needs to convert this speed into a more familiar format `m/s` using the following relationship: `1 GBit/s = 1.5 x 10^8 m/s`. Write a program to convert the given speed in `GBit/s` to `m/s`. ------ Input Format ------ - The first line of input contains a single integer `N`, representing the number of test cases. - Each test case consists of a single integer `V`, indicating the speed in `GBit/s`. ------ Output Format ------ For each test case, output a single integer representing the speed in `m/s`. ------ Constraints ------ 1 ≤ N ≤ 10^3 1 ≤ V ≤ 10^3 ----- Sample Input 1 ------ 3 2 5 1 ----- Sample Output 1 ------ 300000000 750000000 150000000 ----- Explanation 1 ------ Test case 1: The speed of 2 GBit/s is converted to 2 * 1.5 * 10^8 = 300000000` m/s. Test case 2: The speed of 5 GBit/s is converted to 5 * 1.5 * 10^8 = 750000000` m/s. Test case 3: The speed of 1 GBit/s is converted to 1 * 1.5 * 10^8 = 150000000` m/s.","solution":"def convert_gbit_to_ms(V): Returns the speed in m/s given the speed in GBit/s. 1 GBit/s is equivalent to 1.5 * 10^8 m/s. return int(V * 1.5 * 10**8) def process_test_cases(N, test_cases): Processes multiple test cases and returns the results as a list of integers. Each element in the returned list is the speed in m/s for the corresponding speed in GBit/s. results = [] for V in test_cases: results.append(convert_gbit_to_ms(V)) return results"},{"question":"You are given a string containing words separated by single spaces. Your task is to implement a function that reverses each word in the string while retaining the original order of the words. You should not use any built-in functions to reverse the words directly. Extra credit if you can solve it without using additional lists or arrays. # Examples: ``` \\"hello world\\" # should return \\"olleh dlrow\\" \\"coding is fun\\" # should return \\"gnidoc si nuf\\" \\"keep it simple\\" # should return \\"peek ti elpmis\\" ```","solution":"def reverse_words(s): Reverses each word in the string while retaining the original order of the words. Parameters: s (str): The input string containing words separated by single spaces. Returns: str: The string with each word reversed, while maintaining the original order of words. def reverse_word(word): # Initialize an empty list to accumulate reversed word reversed_word = [] # Loop over the word characters from end to start for i in range(len(word) - 1, -1, -1): reversed_word.append(word[i]) return \'\'.join(reversed_word) # Split the original string by spaces words = s.split(\' \') # Reverse each word and join them with a single space reversed_words = [reverse_word(word) for word in words] return \' \'.join(reversed_words)"},{"question":"Given an NxN matrix, rotate the matrix 90 degrees clockwise in place. You can assume that the matrix is always square (NxN) and has at least one element. You may not use any additional data structure to achieve this transformation except for a few variables. Constraints * N is an integer such that 1 leq N leq 100. Input The first line has an integer N denoting the size of the matrix. The next N lines contain N integers each denoting the elements of the matrix. Output Print the rotated matrix. Each line should contain N integers separated by a space. Example Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates an NxN matrix 90 degrees clockwise in place. N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse() return matrix"},{"question":"Balanced Brackets - Validation #3 Write a function that checks if a given string contains balanced brackets. The function should take a single string as input and output `True` if the string has balanced brackets and `False` otherwise. The string will only contain the characters `(`, `)`, `{`, `}`, `[` and `]`. A string is considered to have balanced brackets if every opening bracket has a corresponding closing bracket of the same type, and the brackets are properly nested. # Example: - `balanced_brackets(\\"()\\")` returns `True` - `balanced_brackets(\\"([{}])\\")` returns `True` - `balanced_brackets(\\"([)]\\")` returns `False` - `balanced_brackets(\\"({[}])\\")` returns `False` - `balanced_brackets(\\"\\")` returns `True` # Note: 1. Use a stack to keep track of opening brackets. 2. Match each closing bracket against the top of the stack. 3. Return `True` if the stack is empty at the end; otherwise, return `False`.","solution":"def balanced_brackets(string): Checks if a given string contains balanced brackets. Args: string (str): Input string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the string has balanced brackets, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in string: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: # Invalid character for this problem return False return stack == []"},{"question":"You are given a rectangular grid consisting of \'X\' and \'O\'. \'X\' represents land and \'O\' represents water. Your task is to find the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Example: Input: 4 5 X X O O X X O O X X O O X O O O X X O O Output: 3 Explanation: There are 3 islands in the given grid: 1. The island made up of (0, 0), (0, 1), and (1, 0). 2. The island made up of (0, 4), (1, 3), and (1, 4). 3. The island made up of (3, 1) and (2, 2). Function Signature: ```python def num_islands(grid: List[List[str]]) -> int: ```","solution":"from typing import List def num_islands(grid: List[List[str]]) -> int: if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if (0 <= r < rows and 0 <= c < cols and not visited[r][c] and grid[r][c] == \'X\'): visited[r][c] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dr, dc in directions: dfs(r + dr, c + dc) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'X\' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count"},{"question":"You are given an array of integers. The array might contain both positive and negative numbers. The task is to find the maximum product of a subarray (a contiguous non-empty subsequence). Input The first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (−10 ≤ a_i ≤ 10). Output Output a single integer — the maximum product of a subarray. Examples Input 5 1 2 3 4 5 Output 120 Input 6 -1 -2 -3 0 2 3 Output 6 Note In the first sample, the subarray [1, 2, 3, 4, 5] has the maximum product 120. In the second sample, the subarray [2, 3] has the maximum product 6. Although the array contains negative elements, taking the subarray with elements 2 and 3 yields the maximum product.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray within the given list of integers. if not nums: return 0 max_prod = nums[0] min_prod = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"You are given an array of integers. Your task is to find the smallest possible difference between the sum of two subsets of the array. Each subset should be non-empty. The subsets do not need to be contiguous or disjoint. ------ Input Format ------ - The first line of the input contains an integer (N) — the size of the array. - The second line contains (N) integers separated by a single space — the elements of the array. ------ Output Format ------ Print a single integer — the smallest possible difference between the sum of any two non-empty subsets of the array. ------ Constraints ------ (2 leq N leq 100) (-10^4 leq text{array}[i] leq 10^4) ------ Sample Input 1 ------ 4 1 6 11 5 ------ Sample Output 1 ------ 1 ------ explanation 1 ------ We can partition the array into two subsets whose sums are closest. For example: Subset 1: {1, 5, 6}, Subset 2: {11} with sums 12 and 11 respectively. The difference is ( |12 - 11| = 1 ). Here the output is 1 which is the smallest possible difference between the sum of the two subsets.","solution":"def smallest_difference(arr): Function to find the smallest possible difference between the sum of two subsets of the array. Each subset should be non-empty and the subsets do not need to be contiguous or disjoint. Parameters: arr (list): List of integers. Returns: int: The smallest possible difference between the sum of any two non-empty subsets of the array. total_sum = sum(arr) n = len(arr) # dp[i][j] will be True if a subset with sum j can be formed using items up to the ith item. dp = [[False] * (total_sum + 1) for _ in range(n + 1)] # Initializing: dp[i][0] is True because we can always form a subset with sum 0 (empty subset) for i in range(n + 1): dp[i][0] = True # Fill the dp array for i in range(1, n + 1): for j in range(1, total_sum + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] # Finding the smallest possible difference min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) return min_diff"},{"question":"Given an array `arr` of integers, your task is to find the first missing positive integer. A missing positive integer is defined as the smallest positive integer that does not appear in `arr`. Your algorithm should run in O(n) time and uses constant extra space. Example 1: Input: [1, 2, 0] Output: 3 Example 2: Input: [3, 4, -1, 1] Output: 2 Example 3: Input: [7, 8, 9, 11, 12] Output: 1 Notes: - Your solution should only use constant extra space. - You can modify the input array in-place. - The length of the array is between 1 and 300.","solution":"def first_missing_positive(arr): Returns the first missing positive integer in arr. n = len(arr) # Step 1: Replace negative numbers and numbers larger than n with a placeholder (n+1) for i in range(n): if arr[i] <= 0 or arr[i] > n: arr[i] = n + 1 # Step 2: Use the index as a hash to record the presence of numbers for i in range(n): num = abs(arr[i]) if num <= n: arr[num - 1] = -abs(arr[num - 1]) # Step 3: The first positive index + 1 is the missing number for i in range(n): if arr[i] > 0: return i + 1 # If no missing number found, return n + 1 return n + 1"},{"question":"Given an array of integers `arr` of size `N`, find if there exists a subarray (contiguous elements) with sum equal to 0. Example 1: Input: arr = [4, 2, -3, 1, 6] Output: Yes Explanation: There is a subarray with zero sum: [2, -3, 1] Example 2: Input: arr = [4, 2, 0, 1, 6] Output: Yes Explanation: There is a subarray with zero sum: [0] Example 3: Input: arr = [1, 2, 3] Output: No Explanation: There is no subarray with zero sum. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `subarrayExists()` which takes an array `arr` and an integer `N` as input and returns a boolean indicating if there is a subarray with zero sum. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4","solution":"def subarrayExists(arr, N): Function to check if there exists a subarray with sum equal to 0. Args: arr: List[int] - list of integers N: int - size of the list Returns: bool - True if there is a subarray with sum zero, False otherwise # Create a set to store prefix sums prefix_sums = set() # Initialize the sum of elements current_sum = 0 for num in arr: # Add current element to current_sum current_sum += num # If current_sum is 0 or it is already in the set, # then there is a subarray with sum 0 if current_sum == 0 or current_sum in prefix_sums: return True # Add current_sum to the set prefix_sums.add(current_sum) # If we reach here, then no subarray with 0 sum exists return False"},{"question":"Write a program that reads a string s and determines if it is a palindrome, ignoring non-alphanumeric characters and case. Constraints * 1 ≤ length of string s ≤ 1000 Input A single string s is given in a line. Output Print \\"True\\" if the input string is a palindrome, otherwise \\"False\\". Examples Input A man, a plan, a canal: Panama Output True Input race a car Output False","solution":"def is_palindrome(s): Determine if the string s is a palindrome, ignoring non-alphanumeric characters and case. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"You are given an array a of length n. You can perform the following operation exactly once: - Select any two indices i and j (1 le i < j le n) and swap the values of a_i and a_j. Determine the maximum possible number of pairs (i, j) where 1 le i < j le n such that a_i < a_j after performing the swap operation. -----Input----- The first line contains one integer n (2 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the maximum possible number of pairs (i, j) where 1 le i < j le n and a_i < a_j after performing the swap operation. -----Examples----- Input 5 5 3 1 4 2 Output 10 Input 4 1 3 2 4 Output 6 -----Note----- In the first example, you can swap a_1 and a_4, resulting in the array [4, 3, 1, 5, 2]. This permutation allows for the maximum possible number of pairs (i, j) where a_i < a_j. In the second example, you can swap a_2 and a_3, resulting in the array [1, 2, 3, 4]. This permutation gives the maximum number of pairs.","solution":"def max_pairs_after_swap(n, a): Determines the maximum possible number of pairs (i, j) such that 1 ≤ i < j ≤ n and a_i < a_j after exactly one swap of two elements in the array `a`. Parameters: n (int): Length of the array. a (list): List of integers representing the array. Returns: int: Maximum possible number of pairs (i, j) after one swap operation. total_pairs = n * (n - 1) // 2 return total_pairs"},{"question":"`DNA` or Deoxyribonucleic acid is a molecule that carries the genetic instructions used in the growth, development, functioning, and reproduction of all known living organisms and many viruses. DNA molecules consist of two biopolymer strands coiled around each other to form a double helix. These two strands are composed of simpler molecules called nucleotides. Each nucleotide is composed of one of four nitrogen-containing bases: adenine (A), cytosine (C), guanine (G), and thymine (T). Given two strands of DNA represented as strings `strand1` and `strand2`, determine the number of positions at which the corresponding bases are different. This is known as the \\"Hamming Distance.\\" Note that the strands must be of equal length. Write a function `hammingDistance` that takes in two arguments `strand1` and `strand2`, both of which are strings of equal length composed of the characters \'A\', \'C\', \'G\', and \'T\'. The function should return the Hamming distance between the two DNA strands. Example * `strand1` is \\"GAGCCTACTAACGGGAT\\" * `strand2` is \\"CATCGTAATGACGGCCT\\" The Hamming distance between these two strands is 7, since there are 7 positions at which the corresponding bases are different. ```python def hammingDistance(strand1, strand2): # Your code here ``` Constraints * The length of the DNA strands will be between 1 and 1000 inclusive. * The strings `strand1` and `strand2` will always be of the same length and will only contain the characters \'A\', \'C\', \'G\', and \'T\'.","solution":"def hammingDistance(strand1, strand2): Computes the Hamming distance between two DNA strands. Parameters: strand1 (str): First DNA strand. strand2 (str): Second DNA strand. Returns: int: The Hamming distance between strand1 and strand2. # Ensure strands are of equal length (assertion based on problem statement) assert len(strand1) == len(strand2), \\"Strands must be of equal length\\" # Compute the Hamming distance by comparing each position in the strands distance = 0 for ch1, ch2 in zip(strand1, strand2): if ch1 != ch2: distance += 1 return distance"},{"question":"Albert has a string s consisting of lowercase Latin letters. He wants to convert it to a palindrome. A palindrome is a string that reads the same backward as forward. To achieve that, he can perform the following operation multiple times: choose a position i (1 leq i leq |s|) in the string and replace the character at position i with another lowercase Latin letter. Albert wants to determine the minimum number of operations required to convert the string into a palindrome. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a string s (1 leq |s| leq 10^4) — the string Albert wants to convert to a palindrome. -----Output----- For each test case, print a single integer — the minimum number of operations required. -----Examples----- Input 3 a ab abc Output 0 1 1 -----Note----- In the first test case, the string is already a palindrome, so no operation is needed. In the second test case, we can replace the second character \'b\' with \'a\' to make the string \\"aa\\", which is a palindrome. In the third test case, we can replace the first character \'a\' with \'c\' to make the string \\"cbc\\", which is a palindrome.","solution":"def min_operations_to_palindrome(t, test_cases): For each test case, calculates the minimum number of operations required to convert the string into a palindrome. results = [] for s in test_cases: n = len(s) ops = 0 # Compare characters from the start and the end of the string for i in range(n // 2): if s[i] != s[n - 1 - i]: ops += 1 results.append(ops) return results"},{"question":"Given a list of integers, write a function to move all occurrences of an integer X to the end of the list while maintaining the relative order of other elements. Do not use any extra space. The function signature is: ```python def move_x_to_end(lst: List[int], X: int) -> List[int]: ``` Example 1: ```python Input: lst = [1, 2, 3, 4, 5, 2, 3, 2], X = 2 Output: [1, 3, 4, 5, 3, 2, 2, 2] Explanation: All occurrences of 2 have been moved to the end, and the relative order of other elements is maintained. ``` Example 2: ```python Input: lst = [2, 2, 2, 1, 3, 4, 5], X = 2 Output: [1, 3, 4, 5, 2, 2, 2] Explanation: All occurrences of 2 have been moved to the end, and the relative order of other elements is maintained. ``` Your Task: You don\'t need to read input or print anything. Your task is to complete the function `move_x_to_end()` which takes a list of integers `lst` and an integer `X` as input and returns the modified list with all occurrences of `X` moved to the end. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1. 1 ≤ len(lst) ≤ 10^5 2. -10^9 ≤ lst[i] ≤ 10^9 3. -10^9 ≤ X ≤ 10^9","solution":"def move_x_to_end(lst, X): Moves all occurrences of X to the end of the list while maintaining relative order of other elements. pos = 0 for num in lst: if num != X: lst[pos] = num pos += 1 for i in range(pos, len(lst)): lst[i] = X return lst"},{"question":"Given an integer array, you need to find the length of the shortest subarray whose sum is at least a given target value. If no such subarray exists, return 0. Example 1: Input: target = 7, nums = [2,3,1,2,4,3] Output: 2 Explanation: The subarray [4,3] has the minimal length under the problem constraint. Example 2: Input: target = 15, nums = [1,2,3,4,5] Output: 5 Explanation: The entire array is the only subarray whose sum is at least 15. Note: 1 <= target <= 10^9 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^4","solution":"def min_sub_array_len(target, nums): Returns the length of the shortest subarray whose sum is at least the target value. :param target: Integer representing the target sum. :param nums: List of integers from which we need to find the subarray. :return: Length of the shortest subarray whose sum is at least the target value. If no such subarray exists, return 0. n = len(nums) left = 0 current_sum = 0 min_len = float(\'inf\') for right in range(n): current_sum += nums[right] while current_sum >= target: min_len = min(min_len, right - left + 1) current_sum -= nums[left] left += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"Yuki is a computer science enthusiast who loves solving algorithmic puzzles. During a recent coding competition, she came across a fascinating problem involving sequences and prime numbers. You are given a sequence `S` of `N` integers and an integer `P`. Yuki needs to determine if there exists a non-empty subsequence of `S` such that the sum of the subsequence is a prime number that is greater than or equal to `P`. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a program that will help Yuki determine if such a subsequence exists. -----Input----- - The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains two integers `N` and `P` ― the length of the sequence `S` and the integer `P`, respectively. - The second line of each test case contains `N` integers denoting the elements of the sequence `S`. -----Output----- For each test case, print \\"YES\\" if there exists a non-empty subsequence of `S` such that the sum of the subsequence is a prime number that is greater than or equal to `P`. Otherwise, print \\"NO\\". -----Constraints----- - 1 le T le 10 - 1 le N le 100 - 1 le S[i] le 10^4 for all 1 le i le N - 1 le P le 10^6 -----Example Input----- 2 5 10 2 3 5 7 11 3 20 10 15 20 -----Example Output----- YES NO -----Explanation----- Example case 1: There exists a subsequence with a prime sum greater than or equal to 10. For instance, the subsequence [3, 7] has a sum of 10, which is a prime number. Example case 2: There is no subsequence whose sum is a prime number greater than or equal to 20.","solution":"def is_prime(n): Check if a number is prime. if n < 2: return False if n in (2, 3): return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def check_subsequence_sum_prime(T, test_cases): Check if there exists a subsequence sum that is a prime number >= P. results = [] for i in range(T): N, P = test_cases[i][0] S = test_cases[i][1] # Generate all possible subsequences and their sums sums = set() for num in S: new_sums = set() for s in sums: new_sums.add(s + num) sums.update(new_sums) sums.add(num) found = False for sum_val in sums: if sum_val >= P and is_prime(sum_val): found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a matrix of characters consisting of N rows and M columns. Each character in the matrix is either \'0\' or \'1\'. Your task is to answer Q queries regarding the submatrices within this matrix. Each query provides four integers R1, C1, R2, and C2. For each query, you need to determine whether the submatrix defined by the rows R1 to R2 and columns C1 to C2 contains only \'0\'s. Input format: - The first line contains two integers N and M, the number of rows and columns in the matrix. - The next N lines contain M characters each, representing the matrix. - The following line contains one integer Q, the number of queries. - Each of the next Q lines contains four integers R1, C1, R2, and C2, describing a query. Output format: - For each query, print \\"YES\\" if the submatrix only contains \'0\'s and \\"NO\\" otherwise. Constraints: - 1 ≤ N, M ≤ 1,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ R1 ≤ R2 ≤ N - 1 ≤ C1 ≤ C2 ≤ M - Each character in the matrix is either \'0\' or \'1\' SAMPLE INPUT: 5 5 00000 00100 00000 00010 00000 3 1 1 5 5 2 2 4 4 4 1 5 5 SAMPLE OUTPUT: NO YES YES","solution":"def only_zeros_in_submatrix(matrix, queries): Determines if each query\'s submatrix contains only \'0\'s. Parameters: matrix (list of list of str): Representation of the matrix where each element is either \'0\' or \'1\'. queries (list of tuple of int): List of queries where each query is a tuple (R1, C1, R2, C2). Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each query. results = [] for (R1, C1, R2, C2) in queries: contains_only_zeros = True for i in range(R1-1, R2): for j in range(C1-1, C2): if matrix[i][j] == \'1\': contains_only_zeros = False break if not contains_only_zeros: break results.append(\\"YES\\" if contains_only_zeros else \\"NO\\") return results # Example usage: # N, M = 5, 5 # matrix = [ # [\'0\', \'0\', \'0\', \'0\', \'0\'], # [\'0\', \'0\', \'1\', \'0\', \'0\'], # [\'0\', \'0\', \'0\', \'0\', \'0\'], # [\'0\', \'0\', \'0\', \'1\', \'0\'], # [\'0\', \'0\', \'0\', \'0\', \'0\'] # ] # queries = [(1, 1, 5, 5), (2, 2, 4, 4), (4, 1, 5, 5)] # print(only_zeros_in_submatrix(matrix, queries)) # Should output [\'NO\', \'YES\', \'YES\']"},{"question":"Kevin is organizing a garage sale and has several boxes, each with a different number of items. He can sell items directly or group them within boxes. He wants to ensure that all items are grouped optimally to minimize the number of transactions needed (each transaction corresponds to selling one box of items). Each box can hold a limited number of items. Also, Kevin prefers to have fewer boxes but filled closer to their maximum capacity. In other words, Kevin aims to use as few boxes as possible while making sure they are sufficiently filled. Your task is to determine the minimum number of boxes required to pack all items such that the number of transactions is minimized and each box is filled as much as possible. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of boxes and the number of items respectively. The second line contains n space-separated integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 50) — where b_{i} is the maximum capacity of the i-th box. -----Output----- Print a single integer — the minimum number of boxes required to pack all the items optimally. If it is impossible to pack all the items given the constraints, print -1. -----Examples----- Input 3 10 7 5 6 Output 2 Input 4 15 5 5 5 5 Output 3 Input 4 20 2 4 3 1 Output -1 -----Note----- For the first test case, Kevin can use the first and third boxes (7 items in the first box and 3 items in the third box), which results in 2 transactions. For the second test case, Kevin can use the first three boxes (5 items in each), makes 3 transactions. For the third test case, it is impossible to pack all 20 items given the maximum capacities of the boxes. Hence, the output is -1.","solution":"def minimum_boxes(n, m, capacities): This function calculates the minimum number of boxes required to optimally pack all items such that the number of transactions is minimized and each box is filled as much as possible. It returns -1 if it is impossible to pack all items given the constraints. Parameters: - n (int): the number of boxes - m (int): the number of items - capacities (list): a list of integers where each integer represents the maximum capacity of a box Returns: - int: the minimum number of boxes required or -1 if it is not possible # Sort capacities in descending order to prioritize larger boxes first capacities.sort(reverse=True) total_items = m count_boxes = 0 for capacity in capacities: if total_items <= 0: break total_items -= capacity count_boxes += 1 if total_items > 0: return -1 else: return count_boxes"},{"question":"POINTS - 20 Given a string S, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a single string S. Output For each test case, output \\"YES\\" if the string is a palindrome or \\"NO\\" if it is not. Constraints 1 <= T <= 100 1 <= len(S) <= 200 Example Input: 3 A man, a plan, a canal: Panama race a car No lemon, no melon Output: YES NO YES","solution":"import re def is_palindrome(S): Returns \\"YES\\" if the string S is a palindrome, \\"NO\\" otherwise, considering only alphanumeric characters and ignoring cases. # Remove non-alphanumeric characters and convert to lower case cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', S).lower() # Check if the cleaned string is equal to its reverse return \\"YES\\" if cleaned_str == cleaned_str[::-1] else \\"NO\\" def check_palindromes(test_cases): Takes a list of test cases and returns a list of results for each test case. return [is_palindrome(s) for s in test_cases]"},{"question":"Design an algorithm to determine if a given sequence of parentheses ( \'(\' and \')\' ) is valid. A sequence of parentheses is valid if it meets the following criteria: 1. Every open parenthesis \'(\' has a corresponding close parenthesis \')\'. 2. Open parentheses must be closed in the correct order. Given a sequence of parentheses represented as a string, determine if the sequence is valid. If the sequence is valid, your task will be to remove the minimum number of parentheses (either open or close) to make the sequence valid and return the resulting valid sequence. # Input - The first line contains an integer `t` (1 le t le 100) — the number of test cases. - The next `t` lines each contain a string `s` consisting of at least `1` and at most `10^5` characters `(` and `)` — the sequence of parentheses. It is guaranteed that the sum of the lengths of `s` across all test cases does not exceed 10^6. # Output - For each test case, print the valid sequence of the minimum length if the given sequence is not valid. Print the original sequence if it is already valid. If there are multiple possible valid sequences, you may print any. # Example Input 4 ()(()) ((())() (())) ((()) Output ()(()) (()) (()) (()) # Explanation - In the second test case, \\"((())()\\" is converted to \\"(())()\\". - In the third test case, \\"(()))\\" is converted to \\"(())\\". - In the fourth test case, \\"((())\\" is converted to \\"(())\\". Note: The task is to check the sequence for validity and remove the minimum number of invalid parentheses to make the sequence valid if needed.","solution":"def make_valid_parentheses(s: str) -> str: stack = [] remove_set = set() # First pass: Identify unmatched \')\' to remove for i, char in enumerate(s): if char == \'(\': stack.append(i) elif char == \')\': if stack: stack.pop() else: remove_set.add(i) # Any remaining \'(\' in the stack are unmatched and should be removed while stack: remove_set.add(stack.pop()) # Create the valid string by ignoring characters at indices in remove_set result = [] for i, char in enumerate(s): if i not in remove_set: result.append(char) return \'\'.join(result) def process_test_cases(test_cases: list) -> list: results = [] for s in test_cases: results.append(make_valid_parentheses(s)) return results"},{"question":"You are helping a friend organize their bookshelf. The bookshelf is a single horizontal row, and each book has a width. Your friend has asked you to make sure that the books are organized such that the books of the same width are adjacent to each other, with the sequence of widths in non-decreasing order. Given an array of integers `bookWidths` where `bookWidths[i]` represents the width of the i-th book, return the array after organizing it as described. Example 1: Input: bookWidths = [5, 3, 3, 2, 2, 8, 6] Output: [2, 2, 3, 3, 5, 6, 8] Explanation: After sorting the array, books of width 2 are adjacent, followed by books of width 3, then width 5, width 6, and finally width 8. Example 2: Input: bookWidths = [1, 4, 4, 4, 3, 2] Output: [1, 2, 3, 4, 4, 4] Explanation: After sorting the array, books of width 1 are first, followed by book of width 2, then width 3, and finally books of width 4. Example 3: Input: bookWidths = [7] Output: [7] Explanation: There is only one book, so no sorting is needed. Constraints: 1 <= bookWidths.length <= 100 1 <= bookWidths[i] <= 1000","solution":"def organize_books(bookWidths): Organizes the books on the bookshelf by sorting them in non-decreasing order of widths. Parameters: bookWidths (list of int): List of widths of the books. Returns: list of int: The organized list of book widths. return sorted(bookWidths)"},{"question":"Write a program that reverses the order of words in a given sentence, while keeping the words themselves intact. That is, only the order of the words should be reversed—not the letters in the words. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. - Each of the next T lines contains a single sentence consisting of words separated by spaces. ------ Output Format ------ For each test case, output the sentence with the order of words reversed. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ Length~of~each~sentence ≤ 10^3 ------ Sample Input 1 ------ 3 Hello World The quick brown fox Coding is fun ------ Sample Output 1 ------ World Hello fox brown quick The fun is Coding","solution":"def reverse_words_in_sentence(T, sentences): Reverses the order of words in each sentence. Parameters: T (int): The number of test cases. sentences (list of str): Each element is a sentence to be processed. Returns: list of str: Sentences with the word order reversed. result = [] for sentence in sentences: # Split the sentence into words and reverse the order reversed_sentence = \' \'.join(sentence.split()[::-1]) result.append(reversed_sentence) return result"},{"question":"You are given a list of words. You are allowed to rearrange the letters of each word in any order. Your goal is to find the size of the largest subset of words where each word is an anagram of another word in the subset. -----Input----- The first line of input contains one integer t (1 leq t leq 100): the number of test cases. The subsequent lines contain the description of the t test cases, two lines per test case. In the first line of each test case, you are given one integer n (1 leq n leq 100): the number of words in the list. In the second line, n words are given, each consisting of lowercase English letters. Each word has a length of at most 10 characters. -----Output----- For each test case, print one integer: the size of the largest subset of anagram words. -----Examples----- Input 3 4 listen silent enlist google 3 bat tab cat 5 abc bca cab bac acb Output 3 2 5 -----Note----- In the first example, \\"listen,\\" \\"silent,\\" and \\"enlist\\" are all anagrams of each other. \\"google\\" is not an anagram of any of the others, so the largest subset has 3 words. In the second example, \\"bat\\" and \\"tab\\" are anagrams of each other, while \\"cat\\" is not an anagram of either, making the largest subset size 2. In the third example, all five words are anagrams of each other.","solution":"def largest_anagram_group_size(t, test_cases): results = [] for i in range(t): n, words = test_cases[i] anagram_map = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagram_map: anagram_map[sorted_word] += 1 else: anagram_map[sorted_word] = 1 max_group_size = max(anagram_map.values()) results.append(max_group_size) return results # Example usage: t = 3 test_cases = [ (4, [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\"]), (3, [\\"bat\\", \\"tab\\", \\"cat\\"]), (5, [\\"abc\\", \\"bca\\", \\"cab\\", \\"bac\\", \\"acb\\"]) ] print(largest_anagram_group_size(t, test_cases)) # Output: [3, 2, 5]"},{"question":"There is a fleet of buses operating in a city. Each bus has a unique ID assigned to it. At the end of each day, the fleet management system records the distance traveled by each bus in kilometers. You are required to write a program that will help the fleet manager analyze the daily reports. Specifically, the manager wants to know how many buses traveled more than a given threshold distance on a particular day. Input The input will contain multiple lines: The first line contains an integer N denoting the number of buses in the fleet. The second line contains a single integer K which is the threshold distance. The next N lines each contain two space-separated values: a unique ID (an integer) and the distance traveled by the corresponding bus (an integer in kilometers). Output Print the number of buses that traveled more than the threshold distance K. Constraints 1 ≤ N ≤ 100 0 ≤ K ≤ 1000 1 ≤ distance traveled by each bus ≤ 2000 SAMPLE INPUT 5 300 1 450 2 200 3 340 4 310 5 100 SAMPLE OUTPUT 3 Explanation The manager specified a threshold distance of 300 kilometers. Out of the 5 buses, the following traveled more than 300 kilometers: - Bus with ID 1: 450 km - Bus with ID 3: 340 km - Bus with ID 4: 310 km Thus, the output is 3, as three buses exceeded the threshold distance.","solution":"def count_buses_exceeding_threshold(n, k, buses): Counts the number of buses that traveled more than the threshold distance k. Parameters: n (int): Number of buses. k (int): Threshold distance in kilometers. buses (list of tuples): List of tuples, each containing (bus_id, distance_traveled). Returns: int: Number of buses that traveled more than the threshold distance k. count = 0 for bus_id, distance in buses: if distance > k: count += 1 return count"},{"question":"You are given a grid with H rows and W columns where each cell is either empty or contains an obstacle. You are to determine the minimum number of moves required to move from the top-left corner of the grid (1,1) to the bottom-right corner (H,W). You can move to a cell that is either right, down, left, or up from your current position as long as it doesn\'t cross the grid\'s boundary or contain an obstacle. -----Input----- - The first line of the input contains two integers H and W denoting the height and width of the grid respectively. - The next H lines each contain a string of length W consisting of characters \'.\' and \'#\', representing empty cells and obstacles respectively. -----Output----- - Print a single integer: the minimum number of moves required to move from the top-left corner to the bottom-right corner. If there is no possible way, print -1. -----Constraints----- - 1 le H, W le 1000 - The characters in the grid are either \'.\' or \'#\'. -----Example Input----- 4 4 .... .#.. .... .... -----Example Output----- 6","solution":"from collections import deque def min_moves_to_reach_end(H, W, grid): if grid[0][0] == \'#\' or grid[H-1][W-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == H-1 and y == W-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < H and 0 <= ny < W and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # Example usage: H = 4 W = 4 grid = [ \\"....\\", \\".#..\\", \\"....\\", \\"....\\" ] print(min_moves_to_reach_end(H, W, grid)) # Output: 6"},{"question":"Vani found two binary trees in the deep forest. She decides to traverse both trees in a unique way, first with an in-order traversal and then with a pre-order traversal. She then combined the results of both traversals to determine if by making some adjustments to the second tree, it can be made identical to the first tree. To help her, you have to find out if the second tree can be transformed into the first tree by reordering its nodes. Two binary trees are considered identical if they have the same in-order and pre-order traversals. Write a function that checks if it\'s possible to reorder the second tree to get the first tree. # Input - Two binary trees represented as adjacency lists in the form of dictionaries {\'node\': \'left\', \'node\': \'right\'}. - A left or right that doesn\'t exist should be represented as null. # Output - A single boolean value (True/False), indicating whether the second tree can be reordered to match the first tree. # Example **Python representation** ```python tree1 = { \'A\': (\'B\', \'C\'), \'B\': (None, None), \'C\': (None, None) } tree2 = { \'B\': (None, None), \'A\': (\'C\', \'B\'), \'C\': (None, None) } print(can_reorder(tree1, tree2)) # Output: False tree3 = { \'A\': (\'C\', \'B\'), \'B\': (None, None), \'C\': (None, None) } print(can_reorder(tree1, tree3)) # Output: True ``` # Note - The question is case insensitive regarding node names. - The sizes of both trees will not exceed 100 nodes.","solution":"def inorder_traversal(tree, node, result): if node is None: return left, right = tree.get(node, (None, None)) inorder_traversal(tree, left, result) result.append(node) inorder_traversal(tree, right, result) def preorder_traversal(tree, node, result): if node is None: return result.append(node) left, right = tree.get(node, (None, None)) preorder_traversal(tree, left, result) preorder_traversal(tree, right, result) def can_reorder(tree1, tree2): # Get the root of tree1 (assuming it can be any node present in tree) root1 = list(tree1.keys())[0] if tree1 else None root2 = list(tree2.keys())[0] if tree2 else None if not root1 or not root2: return root1 == root2 inorder1, inorder2 = [], [] preorder1, preorder2 = [], [] inorder_traversal(tree1, root1, inorder1) inorder_traversal(tree2, root2, inorder2) if sorted(inorder1) != sorted(inorder2): return False preorder_traversal(tree1, root1, preorder1) preorder_traversal(tree2, root2, preorder2) return sorted(preorder1) == sorted(preorder2)"},{"question":"Create a function that interprets commands in a custom esoteric language called **Pixelforth**. The Language Pixelforth is inspired by classic stack-based languages and is particularly suited for manipulating Pixel grids. Your interpreter will work with a grid of pixels that can be either on (1) or off (0). The grid is 10x10 pixels for this task. Here are the Pixelforth commands: | Command | Definition |---| --------------------------- | `>` | Move the cursor right, wrapping to the first column if at the last column | `<` | Move the cursor left, wrapping to the last column if at the first column | `^` | Move the cursor up, wrapping to the last row if at the first row | `v` | Move the cursor down, wrapping to the first row if at the last row | `X` | Toggle the current pixel (change 0 to 1 or 1 to 0) | `O` | Set the current pixel to 1 | `F` | Set the current pixel to 0 | `[` | If the current pixel is 0, jump to the command after the corresponding `]` | `]` | If the current pixel is 1, jump back to the command after the corresponding `[` | `!` | Invert the entire grid (0s to 1s and 1s to 0s) | `P` | Print the grid in a human-readable format The cursor starts at the top-left corner of the grid (0,0). Your task is to create a function that executes a given sequence of Pixelforth commands on the grid, and prints the final grid. Input to your function will be the command string. # Example Given the command string: ``` \\"OOXv>X^X>X^O[P>X]vP\\" ``` The interpreter should print the resulting grid after executing all commands: ``` 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ```","solution":"def pixelforth(commands): def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row))) grid = [[0]*10 for _ in range(10)] cursor_x, cursor_y = 0, 0 i = 0 while i < len(commands): command = commands[i] if command == \'>\': cursor_y = (cursor_y + 1) % 10 elif command == \'<\': cursor_y = (cursor_y - 1) % 10 elif command == \'^\': cursor_x = (cursor_x - 1) % 10 elif command == \'v\': cursor_x = (cursor_x + 1) % 10 elif command == \'X\': grid[cursor_x][cursor_y] = 1 - grid[cursor_x][cursor_y] elif command == \'O\': grid[cursor_x][cursor_y] = 1 elif command == \'F\': grid[cursor_x][cursor_y] = 0 elif command == \'[\': if grid[cursor_x][cursor_y] == 0: open_brackets = 1 while open_brackets > 0: i += 1 if commands[i] == \'[\': open_brackets += 1 elif commands[i] == \']\': open_brackets -= 1 elif command == \']\': if grid[cursor_x][cursor_y] == 1: closed_brackets = 1 while closed_brackets > 0: i -= 1 if commands[i] == \']\': closed_brackets += 1 elif commands[i] == \'[\': closed_brackets -= 1 elif command == \'!\': grid = [[1 - cell for cell in row] for row in grid] elif command == \'P\': print_grid(grid) i += 1"},{"question":"Given a list of words, your task is to group together all anagrams and return them as a list of lists. Anagrams are words that, when rearranged, form the same word. You can assume all inputs are lowercase and there are no special characters or spaces. Input: The first line contains an integer n, the number of words in the list. The next line contains n space-separated words. Output: Output should be a list of lists, where each sublist contains words that are anagrams of each other. Constraints: 1 ≤ n ≤ 1000 Length of each word ≤ 100 SAMPLE INPUT 6 eat tea tan ate nat bat SAMPLE OUTPUT [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]]","solution":"def group_anagrams(words): Groups together all anagrams in the given list of words. Parameters: words (list): List of words to group by anagrams Returns: list: A list of lists of anagrams from collections import defaultdict anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values()) # Example usage if __name__ == \\"__main__\\": n = int(input()) words = input().split() print(group_anagrams(words))"},{"question":"Create a function that takes a list of integers and a target value, and returns whether any two different integers in the list add up to the target value. You should aim for a solution that is more efficient than O(n^2) time complexity. # Input The first input is a list of integers, which may contain both negative and positive numbers and could be of any length, including zero. The second input is a single integer, the target value. # Output The output should be a boolean value: True if there are two different integers in the list that add up to the target, and False otherwise. # Examples 1. ([1, 2, 3, 4], 5) -> True 2. ([1, 2, 3, 4], 8) -> False 3. ([-1, 2, 3, 10], 9) -> True 4. ([1, 1, 1, 1], 2) -> True 5. ([], 1) -> False","solution":"def has_pair_with_sum(nums, target): Returns True if there are two different integers in nums that add up to target, otherwise returns False. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"A grocery store is conducting an inventory check. Each item in the store has a unique product code, and the inventory count of that product can be positive or zero. Your task is to determine if any product is out of stock. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of products in the store. The second line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ 1 000) — the inventory count of each product. -----Output----- If all products are in stock, print \\"In Stock\\" (without quotes) in the only line of the output. If any product is out of stock, print \\"Out of Stock\\" (without quotes) in the only line of the output. -----Examples----- Input 5 10 5 3 12 7 Output In Stock Input 4 5 0 2 8 Output Out of Stock Input 3 0 0 0 Output Out of Stock -----Note----- In the first sample, all product counts are greater than zero, so the answer is \\"In Stock\\". In the second sample, one product has an inventory count of zero, so the answer is \\"Out of Stock\\". In the third sample, all products have an inventory count of zero, hence the answer is \\"Out of Stock\\".","solution":"def inventory_check(n, counts): Determines if any product is out of stock. Parameters: n (int): the number of products counts (list of int): the inventory counts of the products Returns: str: \\"In Stock\\" if all products are in stock, otherwise \\"Out of Stock\\" for count in counts: if count == 0: return \\"Out of Stock\\" return \\"In Stock\\""},{"question":"You are given n pairs of integers where each pair represents the coordinates (x, y) of a point on a 2D plane. Your task is to determine if there exists a pair of points such that their Euclidean distance is exactly k. The Euclidean distance between two points (x1, y1) and (x2, y2) is defined as sqrt((x2 - x1)^2 + (y2 - y1)^2). For this problem, we do not need the actual distance but to check if the squared distance is k^2. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each test case starts with an integer n denoting the number of points. The next n lines each contain two integers x and y representing the coordinates of a point. This is followed by a single integer k representing the distance to check for. -----Output----- For each test case, output a single line containing \\"yes\\" if such a pair of points exists, or \\"no\\" if no such pair exists (without quotes). -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ n ≤ 1000 - -1000 ≤ x, y ≤ 1000 - 1 ≤ k ≤ 2000 -----Example----- Input 2 3 0 0 3 4 6 8 5 4 1 2 3 1 6 5 7 8 10 Output yes no -----Explanation----- Test Case 1: The Euclidean distance between (0, 0) and (3, 4) is exactly sqrt((3-0)^2 + (4-0)^2) = 5, so the answer is \\"yes\\". Test Case 2: None of the pairs of points are exactly 10 units apart, so the answer is \\"no\\".","solution":"import math def euclidean_distance_squared(point1, point2): x1, y1 = point1 x2, y2 = point2 return (x2 - x1) ** 2 + (y2 - y1) ** 2 def check_distances(points, k): k_squared = k * k for i in range(len(points)): for j in range(i + 1, len(points)): if euclidean_distance_squared(points[i], points[j]) == k_squared: return \\"yes\\" return \\"no\\" def process_input(T, test_cases): results = [] for t in range(T): n, points, k = test_cases[t] results.append(check_distances(points, k)) return results def solve(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): n = int(data[index]) index += 1 points = [] for _ in range(n): x = int(data[index]) y = int(data[index + 1]) points.append((x, y)) index += 2 k = int(data[index]) index += 1 test_cases.append((n, points, k)) results = process_input(T, test_cases) for result in results: print(result)"},{"question":"Given an array arr[] of size n, write a function to find the maximum product of two integers in the array. Your function should return this maximum product. The result should be computed under modulo 10^9 + 7. Example 1: Input: n = 5 arr = {1, 2, 3, 4, 5} Output: 20 Explanation: The maximum product is 4*5 = 20. Example 2: Input: n = 4 arr = {-10, -3, 5, 6} Output: 30 Explanation: The maximum product is (-10)*(-3) = 30. Your Task: You do not need to read input or print anything. Your task is to complete the function maxProduct() which takes n and arr as input parameters and returns the maximum product of two integers in the array modulo 10^9 + 7. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 2 ≤ n ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def maxProduct(n, arr): Returns the maximum product of two integers in the array under modulo 10^9 + 7. MOD = 10**9 + 7 if n < 2: return 0 # Initialize the largest and second largest positive numbers max1 = max2 = float(\'-inf\') # Initialize the smallest and the second smallest negative numbers min1 = min2 = float(\'inf\') for number in arr: if number > max1: max2 = max1 max1 = number elif number > max2: max2 = number if number < min1: min2 = min1 min1 = number elif number < min2: min2 = number product1 = max1 * max2 product2 = min1 * min2 return max(product1, product2) % MOD"},{"question":"Reverse a list of words but not their characters. Given a string consisting of words separated by spaces, write a function that reverses the order of the words, but the characters in each word remain in the same order. You should not use any library function that performs this task directly. -----Input----- A single line containing a string S (1 leq |S| leq 10^4) consisting of spaces and alphanumeric characters. Words are separated by a single space with no leading or trailing whitespace. -----Output----- Output a single line with the words in reversed order. -----Examples----- Sample Input 1: hello world Sample Output 1: world hello Sample Input 2: the sky is blue Sample Output 2: blue is sky the Sample Input 3: coding is fun Sample Output 3: fun is coding","solution":"def reverse_words(s): Reverses the order of words in a string s, but keeps the characters in each word in their original order. :param s: Input string containing words separated by spaces :return: String with words in reversed order words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"# Can you rearrange it? Alex loves to play with strings. Today he found a string `s` and wants to check if it can be rearranged to form a palindrome. A string is called a palindrome if it reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". Task Given a string `s`, determine whether it can be rearranged to form a palindrome. The function should return `true` if it is possible and `false` otherwise. Constraints - The input string `s` will consist only of lowercase English letters. - The length of `s` will not exceed 1000 characters. Examples # Example 1 Input: ``` aabb ``` Output: ``` true ``` # Example 2 Input: ``` abc ``` Output: ``` false ```","solution":"def can_rearrange_to_palindrome(s): Determine if the given string can be rearranged to form a palindrome. Parameters: s (str): The input string consisting of lowercase English letters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) return odd_count <= 1"},{"question":"# Description Write a function that takes a string input representing a Roman numeral and converts it to an integer. The function should handle Roman numerals as defined by their standard form, where \'I\' is 1, \'V\' is 5, \'X\' is 10, \'L\' is 50, \'C\' is 100, \'D\' is 500, and \'M\' is 1000. Subtractive combinations like \'IV\' for 4 and \'IX\' for 9 should also be considered. Ensure the function can handle both small and large numerals appropriately. Example \\"III\\" -> 3 \\"IV\\" -> 4 \\"IX\\" -> 9 \\"MCMXCIV\\" -> 1994","solution":"def roman_to_integer(roman): Converts a Roman numeral to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Given a binary tree, you need to write a function to determine if it is a symmetric (or mirror) tree. A binary tree is symmetric if and only if it is a mirror reflection of itself. Example: Input: ``` 1 / 2 2 / / 3 4 4 3 ``` Output: True Input: ``` 1 / 2 2 3 3 ``` Output: False Your Task: Complete the function `isSymmetric()` which takes the root of a binary tree as input and returns a boolean indicating whether the tree is symmetric or not. Constraints: 1 ≤ Number of nodes ≤ 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root): Determines if a binary tree is symmetric. if not root: return True def isMirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and isMirror(t1.right, t2.left) and isMirror(t1.left, t2.right) return isMirror(root.left, root.right)"},{"question":"The \\"Magic Words\\" team has been assigned the following challenge: \\"You are given a sequence of words (strings of English letters). You need to determine if you can rearrange the words such that the last character of each word matches the first character of the next word in the sequence.\\" The task seems tricky, but the \\"Magic Words\\" team is confident they can solve it using their string manipulation skills and permutation algorithms. Help them out by determining whether it is possible to rearrange the given sequence of words to meet the specified condition. Note that each word should be used exactly once, and only one rearrangement is required to meet the condition. -----Input----- The first line contains an integer n, the number of words. The next n lines each contain a non-empty word. Each word consists of at most 100 lowercase English letters. -----Output----- Print \\"yes\\" (without the quotes) if you can rearrange the words in the specified order. Otherwise, print \\"no\\" (without the quotes). -----Examples----- Input 3 apple egg giraffe Output yes Input 4 cat tiger rat elephant Output no Input 2 hello world Output no Input 3 back kite elephant Output yes -----Note----- In the first sample, you can rearrange the words as \\"giraffe egg apple\\", where the last character of each word matches the first character of the next word. In the second sample, it is impossible to rearrange the words to meet the condition.","solution":"from itertools import permutations def can_rearrange_words(words): Determines if the sequence of words can be rearranged such that the last character of each word matches the first character of the next word in the sequence. for perm in permutations(words): if all(perm[i][-1] == perm[i+1][0] for i in range(len(perm) - 1)): return \\"yes\\" return \\"no\\""},{"question":"You are given an integer array `arr` consisting of non-negative integers. Each value in the array represents the maximum number of positions you can move forward from that element. Your task is to determine if you can reach the last index of the array starting from the first index. For example, given the array `[2, 3, 1, 1, 4]`, you can start at index 0 and jump 2 steps to reach index 2, then jump 1 step to reach index 3, and finally jump 1 step to reach the last index. So the answer is \\"YES\\". Given the array `[3, 2, 1, 0, 4]`, you will be stuck at index 3 as you cannot move further to reach the last index. So the answer is \\"NO\\". -----Input----- The first line contains an integer `n` (1 le n le 10^5) — the length of the array. The second line contains n non-negative integers `arr[i]` (0 le arr[i] le 10^6) — the elements of the array. -----Output----- Print \\"YES\\" (without quotes), if you can reach the last index. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 5 2 3 1 1 4 Output YES Input 5 3 2 1 0 4 Output NO -----Note----- In the first example, you can reach the last index by jumping from index 0 to index 2, then to index 3, and finally to index 4. Hence, the answer is \\"YES\\". In the second example, you will be stuck at index 3 as you cannot move further. Hence, the answer is \\"NO\\".","solution":"def can_reach_end(arr): Determines if you can reach the last index of the array starting from the first index. max_reachable = 0 n = len(arr) for i, value in enumerate(arr): if i > max_reachable: return \\"NO\\" max_reachable = max(max_reachable, i + value) if max_reachable >= n - 1: return \\"YES\\" return \\"NO\\""},{"question":"Implement a function that takes a list of integers and returns the length of the longest contiguous subarray with a sum equal to zero. If no such subarray exists, the function should return 0. For example: - Given the list `[1, -1, 3, 2, -2, -2, 4]`, the function should return `5` for the subarray `[3, 2, -2, -2, 4]`. - Given the list `[1, 2, -3, 4, 5]`, the function should return `3` for the subarray `[1, 2, -3]`. Details: 1. Function signature: `def longest_subarray_with_zero_sum(arr: List[int]) -> int` 2. You can assume the input list contains at least one integer.","solution":"from typing import List def longest_subarray_with_zero_sum(arr: List[int]) -> int: Returns the length of the longest contiguous subarray with a sum equal to zero. If no such subarray exists, the function returns 0. sum_indices = {} current_sum = 0 max_length = 0 for index, value in enumerate(arr): current_sum += value if current_sum == 0: max_length = index + 1 if current_sum in sum_indices: max_length = max(max_length, index - sum_indices[current_sum]) else: sum_indices[current_sum] = index return max_length"},{"question":"# Problem Statement You are given a binary string s of length n. The binary string consists only of the characters \'0\' and \'1\'. You can perform the following operation exactly once: - Choose any non-empty substring of s and flip all the bits in that substring. Flipping a bit means changing \'0\' to \'1\' and \'1\' to \'0\'. Your task is to determine the maximum number of \'1\'s you can obtain in the string after performing the operation. A substring is a contiguous sequence of characters within a string. # Input The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 1000). The second line contains a binary string s of length n. # Output For each test case, print a single integer — the maximum number of \'1\'s you can obtain in the string after performing the operation exactly once. # Example Input: ``` 3 3 110 5 01100 4 0000 ``` Output: ``` 3 4 4 ``` # Explanation - In the first test case, you can flip the substring \\"0\\" to get the string \\"111\\" with 3 \'1\'s. - In the second test case, you can flip the substring \\"110\\" to get the string \\"00111\\" with 4 \'1\'s. - In the third test case, you can flip the substring \\"0000\\" to get the string \\"1111\\" with 4 \'1\'s.","solution":"def max_ones_after_flip(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] current_ones = s.count(\'1\') max_ones = current_ones for j in range(n): for k in range(j, n): flipped = s[:j] + \'\'.join(\'1\' if x == \'0\' else \'0\' for x in s[j:k+1]) + s[k+1:] flipped_ones = flipped.count(\'1\') if flipped_ones > max_ones: max_ones = flipped_ones results.append(max_ones) return results"},{"question":"Given a 2D grid representing a chessboard, your task is to determine the minimum number of moves needed by a knight to reach a target position from a starting position. The grid is an 8x8 matrix, and the knight\'s movement rules are similar to standard chess. The knight can move two squares in one direction (horizontal or vertical) and then one square in a perpendicular direction, or one square in one direction and then two squares in a perpendicular direction. Function Signature: `def min_knight_moves(start: Tuple[int, int], end: Tuple[int, int]) -> int:` # Input - `start` : a tuple containing two integers `(x, y)` representing the starting position of the knight on the chessboard. - `end` : a tuple containing two integers `(x, y)` representing the target position of the knight on the chessboard. # Output - Return an integer representing the minimum number of moves needed for the knight to reach the target position. # Constraints - The positions are zero-indexed, so valid coordinates are from `0` to `7` inclusive. # Example ```python print(min_knight_moves((0, 0), (7, 7))) ``` Output: ```python 6 ``` # Explanation From the position `(0, 0)` to `(7, 7)`, the minimum number of moves required by the knight is `6`. The sequence of moves might be: - (0, 0) -> (2, 1) - (2, 1) -> (4, 2) - (4, 2) -> (6, 3) - (6, 3) -> (7, 5) - (7, 5) -> (5, 6) - (5, 6) -> (7, 7)","solution":"from collections import deque def min_knight_moves(start, end): Calculate the minimum number of moves for a knight to reach the end position from the start position on a chessboard. :param start: Tuple[int, int] - Starting position (x, y) :param end: Tuple[int, int] - Target position (x, y) :return: int - Minimum number of moves required if start == end: return 0 directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] def is_within_bounds(x, y): return 0 <= x < 8 and 0 <= y < 8 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) == end: return dist + 1 if is_within_bounds(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # This should never be reached on a valid chessboard"},{"question":"Given a large list of integers, you are to determine if there exists any subsequence of those integers such that each element in the subsequence differs from the next by exactly 1. The subsequence does not need to be contiguous, but it must be in the original order. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) – the number of integers in the list. The second line contains n integers a_i (1 ≤ a_i ≤ 10^6) – the elements of the list. Output Output \\"YES\\" if such a subsequence exists, otherwise output \\"NO\\". Example Input 7 1 3 2 1 2 3 4 Output YES Explanation A valid subsequence here is [1, 2, 3, 4]. Input 5 8 5 6 7 8 Output YES Explanation A valid subsequence here is [5, 6, 7, 8]. Input 6 1 2 8 9 10 11 Output NO Explanation There is no subsequence where every element differs from the next by exactly 1. Note A subsequence [a1, a2, ..., ak] of the array [b1, b2, ..., bn] is one where 1 ≤ k ≤ n, indices 1 ≤ i1 < i2 < ... < ik ≤ n, and ai = bi for all valid i.","solution":"def exists_subsequence_with_diff_one(n, a): Determines if there exists any subsequence of integers such that each element in the subsequence differs from the next by exactly 1. Parameters: n (int): The number of integers in the list. a (list of int): The elements of the list. Returns: str: \\"YES\\" if such a subsequence exists, otherwise \\"NO\\". sorted_a = sorted(set(a)) # Removing duplicates and sorting the list previous = sorted_a[0] for i in range(1, len(sorted_a)): if sorted_a[i] - previous != 1: return \\"NO\\" previous = sorted_a[i] return \\"YES\\""},{"question":"In a distant galaxy, there exists a highly advanced civilization where people travel between planets using teleportation gates. There are n planets in this galaxy, each identified by a unique integer from 1 to n. Teleportation gates are designed in such a way that they form a connected undirected tree structure. This means there is exactly one path between any two planets. The civilization recently implemented a new system to charge travelers based on the distance traveled. The distance between two planets is the number of gates (or edges) one has to pass through to travel from one planet to another. Due to recent technological advancements, they can now efficiently process multiple travel queries in real-time. Each query consists of two planets u and v. Your task is to determine the distance between these two planets for each query. # Input - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of planets and the number of queries. - The next n - 1 lines contain two integers u and v (1 ≤ u, v ≤ n), denoting a bidirectional teleportation gate connecting planets u and v. - The next q lines contain two integers u and v (1 ≤ u, v ≤ n) — each representing a query to find the distance between planets u and v. # Output - Output q integers, each one representing the distance between the two planets specified in the corresponding query. # Example Input ``` 5 3 1 2 1 3 2 4 2 5 2 4 3 5 4 5 ``` Output ``` 1 3 2 ``` # Notes In this example: - The distance between planet 2 and planet 4 is 1, as they are directly connected. - The distance between planet 3 and planet 5 is 3 (3 -> 1 -> 2 -> 5). - The distance between planet 4 and planet 5 is 2 (4 -> 2 -> 5).","solution":"import sys from collections import deque input = sys.stdin.read def find_distances(n, edges, queries): # Build the graph graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the depth of each node from the root node 1 depth = [-1] * (n + 1) parent = [-1] * (n + 1) depth[1] = 0 queue = deque([1]) while queue: node = queue.popleft() for neighbor in graph[node]: if depth[neighbor] == -1: # If not visited depth[neighbor] = depth[node] + 1 parent[neighbor] = node queue.append(neighbor) def lca(u, v): # Bring both u and v to the same depth if depth[u] < depth[v]: u, v = v, u while depth[u] > depth[v]: u = parent[u] while u != v: u = parent[u] v = parent[v] return u results = [] for u, v in queries: lca_node = lca(u, v) distance = depth[u] + depth[v] - 2 * depth[lca_node] results.append(distance) return results # Reading input def main(): data = input().split() idx = 0 n = int(data[idx]) q = int(data[idx + 1]) idx += 2 edges = [] for _ in range(n - 1): u = int(data[idx]) v = int(data[idx + 1]) edges.append((u, v)) idx += 2 queries = [] for _ in range(q): u = int(data[idx]) v = int(data[idx + 1]) queries.append((u, v)) idx += 2 results = find_distances(n, edges, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Find the maximum number of times a character appears consecutively in a given string. -----Constraints----- - The string consists of lowercase English letters (\'a\' to \'z\') only. - The length of the string is between 1 and 10^5. -----Input----- Input is given from Standard Input as a single line: - A string S. -----Output----- Print the maximum number of consecutive occurrences of any character in the string. -----Sample Input----- aabbbccddaa -----Sample Output----- 3 Explanation: The character \'b\' appears consecutively 3 times, which is the highest among all characters in the string.","solution":"def max_consecutive_repetitions(S): Finds the maximum number of times a character appears consecutively in the string S. Args: S (str): A string consisting of lowercase English letters. Returns: int: The maximum number of consecutive occurrences of any character in the string. if not S: return 0 max_count = 1 current_count = 1 for i in range(1, len(S)): if S[i] == S[i-1]: current_count += 1 else: if current_count > max_count: max_count = current_count current_count = 1 if current_count > max_count: max_count = current_count return max_count"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},j=["disabled"],R={key:0},P={key:1};function M(s,e,l,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(r.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,j)):u("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-b1229820"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/17.md","filePath":"quotes/17.md"}'),L={name:"quotes/17.md"},G=Object.assign(L,{setup(s){return(e,l)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
