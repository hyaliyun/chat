import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as w,f as u,F as y,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,m,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-c0b49995"]]),S=JSON.parse('[{"question":"Marge wants to create balanced teams from her class of students for a series of group projects. Each student has an assigned skill level represented by an integer between 1 and 100. Marge believes that teams are well balanced if the difference in skill levels between the most skilled student and the least skilled student in any team is no greater than 10. Marge must form teams of exactly three students. Given the skill levels of the students, help Marge determine if it\'s possible to form one or more well-balanced teams. ------ Input Format ------ The first line contains an integer N (3 ≤ N ≤ 100), the number of students in the class. The second line contains N space-separated integers, each representing the skill level of a student. ------ Output Format ------ Print “YES” if at least one well-balanced team can be formed, otherwise print “NO”. ------ Constraints ------ 1 ≤ Skill level of each student ≤ 100 ------ Sample Input 1 ------ 5 12 15 10 22 25 ------ Sample Output 1 ------ YES ------ Explanation 1 ------ One possible team with skill levels [10, 12, 15] can be formed, which has a maximum skill difference of 5. ------ Sample Input 2 ------ 4 10 25 40 55 ------ Sample Output 2 ------ NO ------ Explanation 2 ------ No team of three students can be formed where the difference in skill levels is 10 or less.","solution":"def can_form_balanced_teams(N, skill_levels): Determine if at least one well-balanced team can be formed. :param N: Number of students :param skill_levels: List of skill levels of the students :return: \\"YES\\" if at least one well-balanced team can be formed, otherwise \\"NO\\" skill_levels.sort() for i in range(N - 2): if skill_levels[i+2] - skill_levels[i] <= 10: return \\"YES\\" return \\"NO\\""},{"question":"BuySellStockCompany is a small startup working on stock market analysis tools. They want to create a new feature that helps users identify the best days to buy and sell stocks to maximize their profit. Given an array of stock prices for N consecutive days, you need to determine the maximum profit that can be achieved. However, you are allowed to complete at most one transaction – buying and then later selling one share of the stock. If there is no possibility to achieve any profit, return 0. Input Format The first line contains an integer N, the number of days. The next line contains N integers, the prices of the stock on those days. Output Format Print the maximum profit that can be achieved. If no profit can be achieved, print 0. Constraints 1 ≤ N ≤ 10^5 0 ≤ prices[i] ≤ 10^9 Sample Input 6 7 1 5 3 6 4 Sample Output 5 Explanation The maximum profit can be achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6), for a profit of 6 - 1 = 5.","solution":"def max_profit(stock_prices): Returns the maximum profit that can be achieved from buying and selling one share of stock. If no profit can be achieved, return 0. if not stock_prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in stock_prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You\'ve been tasked with analyzing an undirected graph consisting of `n` nodes and `m` edges. Each node is identified by a unique integer from `1` to `n`. To assist with your analysis, you\'ve been provided data on various roads connecting these nodes. The objective is to find the shortest path between any two nodes using Breadth First Search (BFS). Your task is to implement an algorithm that will calculate the shortest path (in terms of number of edges) from a specified starting node to all other nodes in the graph. # Input The input consists of a single test case. - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) — the number of nodes and the number of edges. - The next `m` lines describe the edges. Each edge is represented by two integers `u` and `v` (1 ≤ u, v ≤ n), indicating that there is an undirected edge between nodes `u` and `v`. - The last line contains a single integer `s` (1 ≤ s ≤ n) — the starting node for BFS. # Output Output `n` integers on a single line, where the `i-th` integer represents the shortest path from the starting node `s` to the node `i` (1-based index). If a node `i` is not reachable from `s`, the output should contain `-1` for that node. # Example Input ``` 6 7 1 2 1 3 2 4 2 5 3 5 4 6 5 6 1 ``` Output ``` 0 1 1 2 2 3 ``` # Explanation In the example, the shortest path from node `1`: - To node `1` is `0` (the starting node itself); - To node `2` is `1` (direct edge 1-2); - To node `3` is `1` (direct edge 1-3); - To node `4` is `2` (path 1-2-4); - To node `5` is `2` (path 1-2-5); - To node `6` is `3` (path 1-2-4-6 or 1-3-5-6).","solution":"from collections import deque, defaultdict def shortest_path_bfs(n, m, edges, s): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) distances = [-1] * (n + 1) # Initialize distances as -1 for all nodes distances[s] = 0 # Distance to start node is 0 queue = deque([s]) while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == -1: # If not visited distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances[1:] # Return the distances starting from node 1"},{"question":"Your task is to implement a function `rainwater_trap` that calculates the total amount of water that can be trapped after a rainstorm, given an elevation map represented by a list of non-negative integers. The integers in the list represent the height of the terrain at that point. Water can only be trapped in the valleys formed between the peaks of the terrain. **Input:** - A list of non-negative integers representing the heights of the terrain. **Output:** - An integer representing the total amount of trapped water. **Constraints:** - The length of the list will be between 1 and 1000. - The height of each terrain point will be between 0 and 1000. **Example:** ```python def rainwater_trap(heights): # Your implementation here pass # Input heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] # Output print(rainwater_trap(heights)) # should output 6 heights = [4, 2, 0, 3, 2, 5] # Output print(rainwater_trap(heights)) # should output 9 ``` **Explanation:** * For the first example: - At height 0 index, no trapping. - Between 1 index and 3 index, 1 unit is trapped. - Between 3 index and 7 index, 2 units are trapped. - Between 7 index and 11 index, 3 units are trapped. * For the second example: - At height 4 index, no trapping. - Between 4 index and 6 index, 5 units are trapped. - Between 6 index and 8 index, 2 units are trapped. - Between 8 index and 11 index, 2 units are trapped.","solution":"def rainwater_trap(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given a string of words separated by spaces. Your task is to return a new string where each word is reversed, but the order of words within the string remains the same. Punctuation marks should remain part of the word they immediately follow or precede. For example, given the input string \\"Hello, world!\\", the output should be \\"olleH, dlrow!\\". Ensure your solution is efficient and handles edge cases such as multiple spaces between words and leading or trailing spaces.","solution":"def reverse_words_in_string(s): Return a new string where each word is reversed but the order of words remains the same. :param s: the input string with words :type s: str :return: the modified string :rtype: str # Split the string into words by spaces words = s.split(\' \') # Reverse each word and join back with spaces reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Emma is working on a document editor that supports a minimal set of operations. The editor allows users to insert characters, delete characters, and undo previous operations. Emma wants to make sure that the code for maintaining the text and handling these operations is efficient and bug-free. The document editor supports the following operations: 1. `INSERT c` - Insert the character \'c\' at the end of the document. 2. `DELETE` - Delete the last character of the document. 3. `UNDO` - Undo the most recent operation that was not itself an undo. This can be an insert or a delete. Emma needs your help to implement the functionality of the document editor and process a sequence of operations. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of operations. Each of the next n lines contains one of the following operations: - `INSERT c` where `c` is a single lowercase English letter. - `DELETE` - `UNDO` It is guaranteed that the operations are valid: For example, the `DELETE` operation will never be called on an empty document, and `UNDO` will never be the first operation. -----Output----- Output the final state of the document as a single string. If the document is empty, output an empty string. -----Examples----- Input 6 INSERT a INSERT b DELETE INSERT c UNDO INSERT d Output ad Input 5 INSERT x INSERT y DELETE UNDO UNDO Output x","solution":"def process_operations(n, operations): document = [] history = [] for op in operations: if op.startswith(\\"INSERT\\"): _, char = op.split() document.append(char) history.append((\\"INSERT\\", char)) elif op == \\"DELETE\\": deleted_char = document.pop() history.append((\\"DELETE\\", deleted_char)) elif op == \\"UNDO\\": last_op, char = history.pop() if last_op == \\"INSERT\\": document.pop() elif last_op == \\"DELETE\\": document.append(char) return \\"\\".join(document)"},{"question":"A group of friends decides to play a game where they stand in a circle and eliminate every K-th person until only one person remains. Given the number of friends N and the integer K, determine the position of the last person standing in the circle. ------ Input Format ------ - The first line contains an integer T - the number of test cases. Then the test cases follow. - The only line of each test case contains two space-separated integers N, K - the number of friends and the step count for elimination. ------ Output Format ------ For each test case, output the position of the last person standing in the circle (1-indexed). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 ------ Example Input 1 ------ 3 5 2 6 3 7 1 ------ Example Output 1 ------ 3 1 7 ------ Explanation 1 ------ - Test case 1: In a circle of 5 people with every 2nd person being eliminated, the sequence of eliminations is: 2, 4, 1, 5. The last person remaining is at position 3. - Test case 2: In a circle of 6 people with every 3rd person being eliminated, the sequence of eliminations is: 3, 6, 4, 2, 5. The last person remaining is at position 1. - Test case 3: In a circle of 7 people with every 1st person being eliminated, the sequence of eliminations is: 1, 2, 3, 4, 5, 6. The last person remaining is at position 7.","solution":"def josephus(N, K): Determines the position of the last person standing in a circle. :param N: Total number of friends :param K: Step count for elimination :return: Position of the last person standing (1-indexed) if N == 1: return 1 else: return (josephus(N - 1, K) + K - 1) % N + 1 def solve(test_cases): Solves the Josephus problem for a given set of test cases. :param test_cases: List of tuples, each containing N and K :return: List of results for each test case results = [] for N, K in test_cases: results.append(josephus(N, K)) return results"},{"question":"Watson gives Sherlock a list of positive integers and asks him to find the first integer in the list that occurs only once. Help Sherlock. You are given a list of integers. You have to find the first integer that occurs only once in the list. If no such integer exists, print -1. Input and Output: The first line contains T (≤ 100), the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 1000), the number of integers in the list, followed by N integers. For each test case, print the required answer in one line. SAMPLE INPUT 3 5 2 3 4 2 3 6 1 2 3 4 5 1 4 7 7 7 7 SAMPLE OUTPUT 4 2 -1","solution":"def first_unique_number(test_cases): results = [] for case in test_cases: count = {} for num in case: count[num] = count.get(num, 0) + 1 found = -1 for num in case: if count[num] == 1: found = num break results.append(found) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, T + 1): case = list(map(int, input_lines[i].strip().split()))[1:] test_cases.append(case) return test_cases def produce_output(results): return \\"n\\".join(map(str, results)) def solve_problem(input_string): test_cases = parse_input(input_string) results = first_unique_number(test_cases) return produce_output(results)"},{"question":"Given a list of transactions in a bank account, write a function `categorize_transactions(transaction_list)` that categorizes each transaction based on the amount and then sums up the total amounts in each category. The transaction categories are: - \'small_deposit\' for deposits less than 1,000. - \'large_deposit\' for deposits of 1,000 and greater. - \'small_withdrawal\' for withdrawals less than 1,000. - \'large_withdrawal\' for withdrawals of 1,000 and greater. The input to the function is a list of floating point numbers where a positive number represents a deposit and a negative number represents a withdrawal. The output should be a dictionary with the transaction categories as keys and the sum of amounts in each category as the values. For example, if `transaction_list` is: ``` [500.0, 1500.0, -200.0, -1200.0, 700.0, 3000.0, -50.0] ``` Then the function should return: ``` { \'small_deposit\': 1200.0, \'large_deposit\': 4500.0, \'small_withdrawal\': -250.0, \'large_withdrawal\': -1200.0 } ``` Features of random tests: - number of tests = 50 - number of transactions per test = 1 to 1000 - amount of transactions = -100000 to 100000","solution":"def categorize_transactions(transaction_list): Categorizes transactions based on the amount and sums up the total amounts in each category. Args: transaction_list (list of floats): The list of transactions where positive numbers represent deposits and negative numbers represent withdrawals. Returns: dict: A dictionary with transaction categories as keys and the sum of amounts in each category as values. categories = { \'small_deposit\': 0.0, \'large_deposit\': 0.0, \'small_withdrawal\': 0.0, \'large_withdrawal\': 0.0 } for transaction in transaction_list: if transaction > 0: if transaction < 1000: categories[\'small_deposit\'] += transaction else: categories[\'large_deposit\'] += transaction else: if transaction > -1000: categories[\'small_withdrawal\'] += transaction else: categories[\'large_withdrawal\'] += transaction return categories"},{"question":"Implement the `is_anagram` function that takes two strings as input and determines if they are anagrams of each other (i.e., they contain the same characters in the same frequency). The function should return `True` if they are anagrams and `False` otherwise. Your solution should not use any built-in sorting functions. Example: ```python is_anagram(\\"listen\\", \\"silent\\") # returns True is_anagram(\\"hello\\", \\"billion\\") # returns False ```","solution":"def is_anagram(s1, s2): Determines if two strings are anagrams of each other. Parameters: s1 (str): First string. s2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"Given a series of numbers 1, 4, 10, 20, 35..., where each number is generated by a specific pattern, determine the X\'th number in the series. You need to recognize the pattern and implement a function to compute the X\'th number for any given X. Example 1: Input: X = 3 Output: 10 Explanation: The 3rd number in the series is 10. Example 2: Input: X = 5 Output: 35 Explanation: The 5th number in the series is 35. Your Task: You do not need to read input or print anything. Your task is to complete the function findXthNumber() which takes an integer X as an input parameter and returns the X\'th number in the series. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ X ≤ 10^{5} [Hint]: The n-th number in the series can be expressed as n*(n + 1)*(n + 2)/6.","solution":"def findXthNumber(X): Returns the X\'th number in the series defined by the pattern n(n + 1)(n + 2)/6. return X * (X + 1) * (X + 2) // 6"},{"question":"You are given an array of integers of length N: a_1, a_2, ..., a_N. You need to transform this array into a target array of length N, consisting entirely of zeros. You can perform the following operation any number of times: choose an index i (1 ≤ i ≤ N-1) and set a_i to a_i + a_{i+1} and a_{i+1} to a_i + a_{i+1}, effectively allowing you to double the value at a selected index and add it to the next index. Determine the minimum number of such operations required to transform the given array into a target array of zeros. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 200,000 - -10^9 ≤ a_i ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the minimum number of operations required. -----Sample Input----- 3 5 -5 0 -----Sample Output----- 1 In one operation, transform the array as follows: set a_2 = a_2 + a_3 = -5 + 0 = -5 and a_3 = a_2 + a_3 = -5 + 0 = -5. Thus, the array becomes [5, -5, -5] and in the next operation, we set a_1 = a_1 + a_2 and a_2 = a_1 + a_2, transforming it to [0, 0, 0].","solution":"def min_operations_to_zero(n, arr): Find the minimum number of operations required to transform the given array into an array of zeros. Args: n (int): Length of the array. arr (List[int]): The input array. Returns: int: Minimum number of operations required. # We just need to count the number of non-zero elements # because each non-zero element will need at least one operation. non_zero_count = 0 for num in arr: if num != 0: non_zero_count += 1 return non_zero_count"},{"question":"You are tasked with developing a program to analyze the distribution of words in a series of text files and determine which category each file most likely belongs to based on word frequency. The three categories are: News, Sports, and Entertainment. You are provided with a training set of documents that are pre-categorized into these categories. Each category of documents is located in a separate directory: \\"News\\", \\"Sports\\", and \\"Entertainment\\". Each directory contains multiple text files, each representing a document. The format of each document is as follows: multiple lines of text where each line contains one or more words. The goal is to implement a function that can take a new, uncategorized document, analyze the frequency of words, and determine its most probable category based on the training set. # Input The training set is provided in the form of three directories: - \\"News\\" contains documents related to news. - \\"Sports\\" contains documents related to sports. - \\"Entertainment\\" contains documents related to entertainment. Each document in these directories is in plain text format. You will also receive an uncategorized document that you need to classify. The uncategorized document is provided in the same format as the training set documents. # Output Print the most probable category for the given uncategorized document: either \\"News\\", \\"Sports\\", or \\"Entertainment\\". # Example Assume you have the following training set: **News directory:** - news1.txt: \\"The government has announced new policies.\\" - news2.txt: \\"Local elections are set for next month.\\" **Sports directory:** - sports1.txt: \\"The football team won the championship.\\" - sports2.txt: \\"Basketball playoff games have started.\\" **Entertainment directory:** - entertainment1.txt: \\"A new movie has been released this weekend.\\" - entertainment2.txt: \\"The concert tour dates have been announced.\\" Given a new document: ``` The new policy affects local businesses and has been the topic of discussion among government officials. ``` Output: ``` News ``` # Implementation Details - Implement a function that reads all documents in the training set and calculates the frequency of each word in the documents for each category. - Use these word frequencies to classify a new document based on the highest similarity of word distribution. - Handle common words and potential noise by using techniques such as stop words removal and word stemming if necessary.","solution":"import os from collections import Counter, defaultdict import string import math def read_documents(directory): documents = [] for filename in os.listdir(directory): filepath = os.path.join(directory, filename) if os.path.isfile(filepath): with open(filepath, \'r\') as file: documents.append(file.read()) return documents def preprocess(text): Basic preprocessing of text by: - Converting to lowercase - Removing punctuation table = str.maketrans(\'\', \'\', string.punctuation) return text.lower().translate(table).split() def get_word_frequencies(documents): word_freq = Counter() for doc in documents: words = preprocess(doc) word_freq.update(words) return word_freq def classify_document(uncategorized_document, training_data): word_frequencies = {category: get_word_frequencies(docs) for category, docs in training_data.items()} # Preprocess the uncategorized document uncat_words = preprocess(uncategorized_document) uncat_word_freq = Counter(uncat_words) # Determine the score for each category based on word frequencies scores = {category: 0 for category in training_data} for word, count in uncat_word_freq.items(): for category, wf in word_frequencies.items(): if word in wf: if wf[word] != 0: scores[category] += math.log(1 + wf[word]) * count # Return the category with the highest score return max(scores, key=scores.get) def classify_new_document(uncategorized_document, data_dir=\'data\'): # Read and categorize the training documents training_data = {} for category in [\'News\', \'Sports\', \'Entertainment\']: training_data[category] = read_documents(os.path.join(data_dir, category)) return classify_document(uncategorized_document, training_data)"},{"question":"Given an integer array, you are to perform a number of operations to make all the elements in the array equal. An operation consists of choosing any subarray (contiguous elements of the array) and incrementing each of its elements by 1. Your task is to find the minimum number of operations required. Input The input consists of a single test case. The first line of the input contains a single integer n (1 ≤ n ≤ 100) representing the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Each element in the array will be a non-negative integer less than or equal to 100. Output Output a single integer representing the minimum number of operations needed to make all array elements equal. Examples Input 5 1 2 3 4 5 Output 4 Input 3 5 5 5 Output 0","solution":"def min_operations_to_equalize_array(arr): Returns the minimum number of operations required to make all elements in the array equal. max_val = max(arr) return max_val - min(arr)"},{"question":"You are given an array of integers representing the initial health values of monsters in a dungeon. Each monster can be defeated by a hero in a single attack. The hero has a special ability that allows any damage dealt to a monster to be distributed among all other monsters. If a monster\'s health becomes zero or negative, it is considered defeated. The hero aims to defeat all monsters in a minimum number of attacks. Each attack reduces a single monster\'s health points to zero and distributes the corresponding value among the remaining monsters. The hero\'s ability works as follows: 1. Choose a monster to attack. 2. Reduce the chosen monster\'s health to zero. 3. Distribute the health value of the chosen monster evenly among the other monsters. If the health is not divisible evenly, distribute the quotient and add the remainder to any one of the remaining monsters. Determine the minimum number of attacks required to defeat all monsters. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of monsters. The second line contains n positive integers h_i (1 ≤ h_i ≤ 10^9), the initial health values of the monsters. Output Output one integer, the minimum number of attacks required to defeat all monsters. Examples Input 3 1 2 3 Output 2 Input 4 2 2 2 2 Output 3 Note In the first example, the optimal strategy is: 1. Attack the third monster with health 3. The health distribution would be: [2, 3, 0]. 2. Attack the new second monster with health 3. The health distribution would be: [3, 0]. 3. Now, attack the first monster with health 3. In the second example, each attack on any monster results in an even distribution of its health, requiring three attacks to reduce all monsters to zero health.","solution":"def min_attacks_to_defeat_monsters(n, healths): Returns the minimum number of attacks required to defeat all monsters. # Sort the healths in descending order healths.sort(reverse=True) # The key observation is that we can defeat the strongest monster first # and distribute its health to the remaining monsters. # Hence, the number of attacks needed is simply the length of the healths array - 1 return n - 1"},{"question":"A team of software security experts is examining log files from a web application to detect possible intrusion attempts. The log file contains a series of records, each representing a successful login attempt or a failed login attempt. You are tasked with writing a program to analyze a log file and determine if an account has been compromised. An account is considered compromised if there are 3 or more consecutive failed login attempts followed immediately by a successful login. -----Input----- - The first line contains a single integer, N, which denotes the number of log records. - The second line contains N space-separated strings, each representing a login attempt. Each string is either \'SUCCESS\' or \'FAILURE\'. -----Output----- - Output \\"Compromised\\" if an account is detected to be compromised, otherwise output \\"Secure\\". -----Constraints----- - 1 ≤ N ≤ 1000 -----Example----- Input: 12 SUCCESS FAILURE FAILURE FAILURE SUCCESS FAILURE SUCCESS SUCCESS FAILURE FAILURE FAILURE SUCCESS Output: Compromised -----Explanation----- In the given example, the sequence has a compromised pattern: \\"FAILURE FAILURE FAILURE SUCCESS\\" appears twice, thus the account is compromised.","solution":"def analyze_log(N, log): Analyzes the log to determine if the account is compromised. :param N: Number of log records :param log: List of login attempts :return: \\"Compromised\\" if the account is compromised, otherwise \\"Secure\\" for i in range(N - 3): if log[i] == \\"FAILURE\\" and log[i + 1] == \\"FAILURE\\" and log[i + 2] == \\"FAILURE\\" and log[i + 3] == \\"SUCCESS\\": return \\"Compromised\\" return \\"Secure\\""},{"question":"You are given a grid of characters, where each character is either \'B\', \'W\', or \'X\'. \'B\' stands for black, \'W\' stands for white, and \'X\' stands for either black or white. Your task is to determine whether the grid can be colored such that all \'X\' are properly colored as either \'B\' or \'W\' to fit the following conditions: 1. No two adjacent cells (horizontally or vertically) have the same color. 2. All \'X\' are properly assigned to either \'B\' or \'W\'. You need to output \'YES\' if it is possible to color the grid according to these rules, or \'NO\' if it is not possible. Input The input consists of multiple test cases. Each test case starts with a line containing two integers n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns in the grid, respectively. This is followed by n lines, each containing a string of m characters, representing the grid. The end of the input is indicated by a line containing \'0 0\'. Output For each test case, output \'YES\' if it is possible to color the grid according to the rules, otherwise output \'NO\'. Sample Input ``` 3 4 BWBW WXWX BWBW 2 2 BB WW 0 0 ``` Sample Output ``` YES NO ``` Explanation: In the first grid: - The second row can be colored as BW or WB, both meet the conditions. In the second grid: - It is impossible to color the grid such that no two adjacent cells have the same color as they are both already colored entirely, leaving no option to change any \'X\'.","solution":"def is_valid_grid(n, m, grid): for i in range(n): for j in range(m): if grid[i][j] == \'X\': # X can be either B or W; we check if both options violate any rule alternate_1 = \'B\' alternate_2 = \'W\' if (i > 0 and grid[i - 1][j] == alternate_1) or (j > 0 and grid[i][j - 1] == alternate_1): alternate_1 = \'W\' if (i > 0 and grid[i - 1][j] == alternate_2) or (j > 0 and grid[i][j - 1] == alternate_2): alternate_2 = \'B\' grid[i][j] = alternate_1 if (i < n - 1 and grid[i + 1][j] == grid[i][j]) or (j < m - 1 and grid[i][j + 1] == grid[i][j]): grid[i][j] = alternate_2 if (i < n - 1 and grid[i + 1][j] == grid[i][j]) or (j < m - 1 and grid[i][j + 1] == grid[i][j]): return False for i in range(n): for j in range(m): if (i < n - 1 and grid[i + 1][j] == grid[i][j]) or (j < m - 1 and grid[i][j + 1] == grid[i][j]): return False return True def process_input(input_string): input_lines = input_string.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): n, m = map(int, input_lines[index].split()) if n == 0 and m == 0: break grid = [list(input_lines[index + 1 + i]) for i in range(n)] index += 1 + n if is_valid_grid(n, m, grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return \\"n\\".join(results)"},{"question":"Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings. Example 1: Input: intervals = [[0,30],[5,10],[15,20]] Output: false Explanation: A person cannot attend all the meetings as meeting [0,30] and [5,10] overlap. Example 2: Input: intervals = [[7,10],[2,4]] Output: true Explanation: A person can attend both meetings as they don\'t overlap. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canAttendMeetings() which takes the list of intervals as input and returns a boolean value indicating whether a person can attend all the meetings or not. Expected Time Complexity: O(N log N) due to sorting Expected Auxiliary Space: O(1) Constraints: 1 ≤ intervals.length ≤ 10^4 0 ≤ si < ei ≤ 10^9","solution":"def canAttendMeetings(intervals): Determines if a person can attend all meetings without overlap. Parameters: intervals (List[List[int]]): A list of meeting time intervals [start, end]. Returns: bool: True if a person can attend all meetings, False otherwise. # Sort intervals by the start time intervals.sort(key=lambda x: x[0]) # Check for overlap for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"Given a string S and a pattern P, find the smallest substring in S which contains all the characters of P in O(N) time complexity. If no such substring exists, return an empty string. Example 1: Input: S = \\"ADOBECODEBANC\\" P = \\"ABC\\" Output: \\"BANC\\" Explanation: Minimum length substring is \\"BANC\\" which contains \'A\', \'B\', \'C\' from string P. Example 2: Input: S = \\"HELLO\\" P = \\"OELL\\" Output: \\"ELLO\\" Explanation: Minimum length substring is \\"ELLO\\" which contains \'O\', \'E\', \'L\', \'L\' from string P. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minWindowSubstr() which takes the string S and string P as inputs and returns the required output. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S|, |P| ≤ 10^5 The characters of S and P are composed of any printable ASCII characters.","solution":"def minWindowSubstr(S, P): from collections import Counter if not S or not P or len(S) < len(P): return \\"\\" dict_p = Counter(P) required = len(dict_p) left, right = 0, 0 formed = 0 window_counts = {} min_length = float(\'inf\') min_window = (0, 0) while right < len(S): character = S[right] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_p and window_counts[character] == dict_p[character]: formed += 1 while left <= right and formed == required: character = S[left] if right - left + 1 < min_length: min_length = right - left + 1 min_window = (left, right) window_counts[character] -= 1 if character in dict_p and window_counts[character] < dict_p[character]: formed -= 1 left += 1 right += 1 return \\"\\" if min_length == float(\'inf\') else S[min_window[0]: min_window[1] + 1]"},{"question":"**Title: Video Game Movement Tracking** **Description:** You are the lead developer for a new video game where a character, Max, explores a 2D grid-based world. The grid is composed of cells, each represented by a pair of coordinates (x, y). Max starts at the origin (0, 0) and moves through the grid in response to commands from the player. The commands are given in the form of strings representing directions and distances, similar to \\"U 3\\" (which means \\"Up 3 units\\"). Max can move left (\\"L\\"), right (\\"R\\"), up (\\"U\\"), or down (\\"D\\"). Your task is to track Max\'s final position after executing a series of movement commands. **Input:** - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of commands. - Each of the next n lines contains a command in the format \\"d x\\", where d is a character (\\"L\\", \\"R\\", \\"U\\", \\"D\\") indicating the direction, and x (1 ≤ x ≤ 1000) is an integer indicating the distance. **Output:** - Print two integers, the final x and y coordinates of Max after executing all the commands. **Examples:** **Input:** ``` 4 R 5 U 3 L 2 D 1 ``` **Output:** ``` 3 2 ``` **Input:** ``` 3 L 4 D 2 R 1 ``` **Output:** ``` -3 -2 ``` In this problem, the primary focus is on string parsing, basic arithmetic for position calculations, and ensuring the sequence of movements is correctly applied to determine the final coordinates.","solution":"def track_max_position(n, commands): Track the final position of Max in a 2D grid after executing movement commands. :param n: Number of commands :param commands: List of commands, each in the format \\"d x\\" :return: The final (x, y) coordinates of Max # Starting position x, y = 0, 0 # Process each command for command in commands: direction, distance = command.split() distance = int(distance) if direction == \\"U\\": y += distance elif direction == \\"D\\": y -= distance elif direction == \\"L\\": x -= distance elif direction == \\"R\\": x += distance return x, y"},{"question":"Jamie is a keen camper and loves to track the weather during his camping trips. On one such trip, Jamie decided to record the highest and lowest temperatures every day. After coming back, Jamie realized that it would be interesting to find the temperature range he experienced during the trip. Given the number of days n Jamie was camping and a list of highest and lowest temperatures for each day, write a program to determine the maximum difference between any two recorded temperatures during the camping trip. ------- Input ------- The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer n, the number of days Jamie was camping. Then n lines follow, each containing two space-separated integers Hi and Li, where Hi is the highest temperature recorded on the i-th day and Li is the lowest temperature recorded on the i-th day. ------- Output ------- For each test case, output a single integer, the maximum difference in temperatures recorded during the trip. ------- Constraints ------- 1 leq T leq 10^3 1 leq n leq 10^3 -50 leq Hi, Li leq 50 It is guaranteed that for every day, Li leq Hi. ------- Sample Input 1 ------- 2 3 30 10 40 20 25 5 2 15 5 10 0 ------- Sample Output 1 ------- 35 15 ------- Explanation ------- In the first example, the highest temperature recorded over the trip is 40 and the lowest is 5, resulting in a difference of 35. In the second example, the highest temperature recorded over the trip is 15 and the lowest is 0, resulting in a difference of 15.","solution":"def max_temperature_difference(test_cases): Determines the maximum difference in temperatures for multiple test cases. Parameters: test_cases (list of list of tuple): Each element is a test case, which is a list of tuples with highest and lowest temperatures. Returns: list of int: The maximum temperature difference for each test case. results = [] for days in test_cases: max_temp = max(day[0] for day in days) min_temp = min(day[1] for day in days) results.append(max_temp - min_temp) return results def parse_input(input_str): Parses the input string into a structured format for processing. Parameters: input_str (str): The input string to be parsed. Returns: tuple: A tuple containing the number of test cases and a list of test cases. lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) index += 1 days = [] for _ in range(n): Hi, Li = map(int, lines[index].split()) days.append((Hi, Li)) index += 1 test_cases.append(days) return T, test_cases def process(input_str): Processes the input string and returns the results for each test case. Parameters: input_str (str): The input string to be processed. Returns: list of int: The results of the processed input. T, test_cases = parse_input(input_str) return max_temperature_difference(test_cases)"},{"question":"Given a string S composed only of digits and the characters \'+\' and \'-\', your task is to compute the value of the expression represented by the string. The expression is a series of non-negative integers separated by \'+\' and \'-\' operators, with the \'+\' operator indicating addition and the \'-\' operator indicating subtraction. Example 1: Input: S = \\"3+5-2+8\\" Output: 14 Explanation: 3 + 5 - 2 + 8 = 14. Example 2: Input: S = \\"10-20+30-5\\" Output: 15 Explanation: 10 - 20 + 30 - 5 = 15. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `evaluateExpression()` which takes a single string S as input and returns the result of the arithmetic expression. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= len(S) <= 10^6 Note: - The input string is guaranteed to be a valid arithmetic expression.","solution":"def evaluateExpression(S): Evaluates the arithmetic expression given in the string S. The expression contains non-negative integers and \'+\' and \'-\' operators. # Initialize variables result = 0 current_number = 0 sign = 1 # 1 for positive, -1 for negative for ch in S: if ch.isdigit(): current_number = current_number * 10 + int(ch) elif ch == \'+\': result += sign * current_number current_number = 0 sign = 1 elif ch == \'-\': result += sign * current_number current_number = 0 sign = -1 # Add the last number to the result result += sign * current_number return result"},{"question":"You are given an array of integers. Your task is to find the size of the largest contiguous subarray with an equal number of positive and negative numbers. Formally, given an array A = [A_{1}, A_{2}, ldots, A_{N}], find the largest value of k such that there exists a contiguous subarray [A_{i}, A_{i+1}, ..., A_{i+k-1}] with exactly k/2 positive and k/2 negative numbers. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the length of the array. - The second line of each test case contains N space-separated integers, denoting the elements of the array. ------ Output Format ------ For each test case, output on a single line the size of the largest contiguous subarray with an equal number of positive and negative numbers. If no such subarray exists, print 0. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} - Sum of N over all cases won\'t exceed 2 cdot 10^{5}. - Each element of the array is an integer in the range [-10^9, 10^9] ----- Sample Input 1 ------ 2 4 1 -1 1 -1 5 1 2 -2 -1 2 ----- Sample Output 1 ------ 4 4 ----- Explanation 1 ------ In the first test case, the entire array [1, -1, 1, -1] is a valid subarray with 2 positive and 2 negative numbers. In the second test case, the subarray [2, -2, -1, 2] contains 2 positive and 2 negative numbers. Other valid subarrays include [1, -2, -1, 2] but this results in the same size of 4.","solution":"def largest_balanced_subarray_length(A): Given an array A, find the size of the largest contiguous subarray which has an equal number of positive and negative numbers. n = len(A) balance_count = {0: -1} # Initialize the dictionary with balance 0 at index -1. max_len = 0 balance = 0 for i in range(n): if A[i] > 0: balance += 1 elif A[i] < 0: balance -= 1 if balance in balance_count: max_len = max(max_len, i - balance_count[balance]) else: balance_count[balance] = i return max_len def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] results.append(largest_balanced_subarray_length(A)) return results"},{"question":"**Backtracking: Permutations** A permutation of an array is an arrangement of its members into a sequence or linear order. Given an array of distinct integers, return all the possible permutations. You can return the answer in any order. Example Code ```python class Solution: def permute(self, nums): def backtrack(first = 0): # if all integers are used up if first == n: output.append(nums[:]) for i in range(first, n): # place i-th integer first # in the current permutation nums[first], nums[i] = nums[i], nums[first] # use next integers to complete the permutations backtrack(first + 1) # backtrack nums[first], nums[i] = nums[i], nums[first] n = len(nums) output = [] backtrack() return output # Testing the function solution = Solution() print(solution.permute([1,2,3])) # Output # [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] ``` Task Implement the provided `permute` function which generates all permutations of an array of distinct integers. Input Format The function permute takes a single argument `nums`, which is a list of distinct integers. Constraints - 1 leq text{len}(nums) leq 6 - -10 leq text{nums[i]} leq 10 Output Format The function should return a list of lists, where each list is a permutation of `nums`. Sample Input `[1, 2, 3]` Sample Output ```python [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] ``` Write your code in the provided `Solution` class.","solution":"class Solution: def permute(self, nums): def backtrack(first=0): if first == len(nums): output.append(nums[:]) for i in range(first, len(nums)): nums[first], nums[i] = nums[i], nums[first] backtrack(first + 1) nums[first], nums[i] = nums[i], nums[first] output = [] backtrack() return output"},{"question":"A group of friends is planning to go on a road trip and they are discussing the best way to evenly distribute the fuel expenses among themselves. They decide to use a system where each friend contributes an amount proportional to the distance they travel. You are given the distances each friend will travel and the total fuel cost for the trip. Your task is to calculate the amount each friend should contribute towards the total fuel cost. Write a function `calculateContributions` that takes in two parameters: 1. A list of integers `distances` where distances[i] is the distance friend i will travel. 2. An integer `totalFuelCost` representing the total fuel cost for the trip. The function should return a list of integers where each element represents the amount each friend should contribute, rounded to the nearest integer. Example: `distances = [100, 200, 300]` `totalFuelCost = 600` Function Description: Complete the function `calculateContributions` in the editor below. It should return a list of integers representing each friend\'s contribution towards the total fuel cost. `calculateContributions` has the following parameter(s): - `int distances[m]`: the distances traveled by each friend - `int totalFuelCost`: the total fuel cost for the trip Returns: - `list of int`: the amount each friend should contribute, rounded to the nearest integer Input Format: The first line contains an integer m, the number of friends. The second line contains m space-separated integers, each representing the distance traveled by a friend. The third line contains an integer, the total fuel cost for the trip. Constraints: 1leq mleq10^3 1leq distances[i]leq10^5 1leq totalFuelCostleq10^6 Sample Input: ``` 3 100 200 300 600 ``` Sample Output: ``` [100, 200, 300] ``` Explanation: Each friend\'s contribution is proportional to their distance traveled. Calculating their share based on the ratio of their distance to the total distance, we get: ``` [100 * 600 / 600, 200 * 600 / 600, 300 * 600 / 600] = [100, 200, 300] ```","solution":"def calculateContributions(distances, totalFuelCost): Calculate the contributions towards the total fuel cost based on distances traveled. Parameters: distances (list of int): The distances traveled by each friend. totalFuelCost (int): The total fuel cost for the trip. Returns: list of int: The amount each friend should contribute, rounded to the nearest integer. totalDistance = sum(distances) contributions = [ round((distance / totalDistance) * totalFuelCost) for distance in distances ] return contributions"},{"question":"In a cinema hall, each row has a set of seats aligned from left to right. Each seat may either be occupied or unoccupied. You need to find the maximum number of consecutive unoccupied seats in any row of the cinema hall. You are given a matrix M of N rows and M columns, where each element is either 0 (indicating an unoccupied seat) or 1 (indicating an occupied seat). Your program must find the maximum number of consecutive `0`s in any row. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. Then N lines follow, each containing M space-separated integers (0 or 1). ------ Output ------ For each test case, print a single line containing one integer ― the maximum number of consecutive unoccupied seats in any row of the cinema hall. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 0 ≤ M_{i,j} ≤ 1 for each valid i, j ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ N ≤ 3, 1 ≤ M ≤ 3 Subtask #2 (70 points): original constraints ----- Sample Input 1 ------ 2 3 5 1 0 1 0 0 0 0 1 1 0 1 1 1 1 1 2 3 0 0 0 1 0 1 ----- Sample Output 1 ------ 2 3 ----- explanation 1 ------ Example case 1: The first row has 2 consecutive unoccupied seats. The second row also has 2 consecutive unoccupied seats. The third row has no unoccupied seat, resulting in 0 consecutive unoccupied seats. Hence, the maximum number of consecutive unoccupied seats in any row is 2.","solution":"def max_consecutive_unoccupied_seats(test_cases): results = [] for case in test_cases: N, M = case[\'dimensions\'] matrix = case[\'matrix\'] max_consecutive = 0 # Check each row for the maximum consecutive `0`s for row in matrix: current_count = 0 max_in_row = 0 for seat in row: if seat == 0: current_count += 1 max_in_row = max(max_in_row, current_count) else: current_count = 0 max_consecutive = max(max_consecutive, max_in_row) results.append(max_consecutive) return results"},{"question":"Liam is working with a number sequence and needs your help to analyze it. The sequence is comprised of N integers. Liam\'s task is to identify the length of the longest contiguous segment in the sequence that forms an increasing subsequence where every pair of consecutive elements satisfies that the next element is greater than the current element by at least 1. Given a sequence of integers, you need to write a program to determine the length of the longest increasing contiguous subarray. # Input The first line contains an integer N (1 ≤ N ≤ 100,000), which is the number of elements in the sequence. The second line contains N integers separated by spaces which represent the sequence. Each integer in the sequence is in the range (0 ≤ Ai ≤ 1,000,000). # Output Output a single integer which is the length of the longest increasing contiguous subarray. # Example Input ``` 9 1 2 2 3 4 5 1 2 3 ``` Output ``` 4 ``` Explanation: In the given sequence, the contiguous subsequence `2 3 4 5` is the longest one where each element is greater than its preceding element by at least 1. It has a length of 4. Write a function that processes the input and produces the output accordingly.","solution":"def longest_increasing_contiguous_subarray_length(N, sequence): Returns the length of the longest increasing contiguous subarray. if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if sequence[i] > sequence[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a function `isAnagram` that checks if two provided strings are anagrams of each other. The function should ignore spaces and be case insensitive. ```racket In Racket, the function is called anagram? (anagram? \\"listen\\" \\"silent\\") ; returns #t (anagram? \\"hello\\" \\"bye\\") ; returns #f (anagram? \\"Astronomer\\" \\"Moon starer\\") ; returns #t ```","solution":"def isAnagram(str1, str2): Checks if the two provided strings are anagrams of each other. The function ignores spaces and is case insensitive. # Remove spaces and convert to lower case cleaned_str1 = \'\'.join(str1.lower().split()) cleaned_str2 = \'\'.join(str2.lower().split()) # Check if sorted characters are the same return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"Aadesh loves going on long drives on weekends. He enjoys scenic routes that take him through various small towns. Recently, he made a trip that involved crossing several towns. Each town is represented by its unique traffic light which operates in two modes: green (G) for Go and red (R) for Stop. Aadesh can only move into a town if the traffic light is green. Due to some road constructions, each town only allows a limited number of cars to enter per green light cycle. Given the initial traffic light status for each town and the maximum number of cars allowed per cycle, determine if Aadesh can reach the final town given the initial status of each town. Input The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each test case starts with a line containing an integer N, the number of towns Aadesh needs to pass through. The next line contains a string of length N which consists of characters \'G\' and \'R\', representing the traffic light status of each town (G for green and R for red initially). The last line of each test case contains N space-separated integers, where the ith integer denotes the maximum number of cars allowed in town i during its green light period. Output For each test case, output \\"YES\\" if Aadesh can reach the final town, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ max_cars per town ≤ 10^9 SAMPLE INPUT 2 3 GRG 1 2 3 4 RGRG 1 1 1 1 SAMPLE OUTPUT YES NO","solution":"def can_reach_final_town(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] traffic_lights = test_cases[i][1] max_cars = test_cases[i][2] can_reach = True for j in range(N): if traffic_lights[j] == \'R\': can_reach = False break if max_cars[j] <= 0: can_reach = False break if can_reach: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Jack is managing the inventory for a new store. The store has a variety of items, each with a unique ID, price, and quantity in stock. Jack needs a system to retrieve the current inventory status quickly and to handle various operations like adding new items, updating existing items, and processing sales. Given the following input format, write a program to manage the inventory: Input Format The first line contains an integer N, the number of initial items in the store. The next N lines contain three space-separated integers each: the item ID, price, and quantity in stock. The following line contains an integer Q, the number of operations to be performed. The next Q lines describe an operation. Each operation is in one of the following formats: - \\"ADD id price quantity\\" - Adds a new item with the given id, price, and quantity. If the item ID already exists, add the quantity to the existing item. - \\"UPDATE id price quantity\\" - Updates the price and quantity of the item with the given id. - \\"SELL id quantity\\" - Sells the given quantity of the item with the given id. Reduces the quantity in stock. If the quantity in stock becomes zero or less, remove the item from the inventory. - \\"QUERY id\\" - Outputs the price and quantity of the item with the given id. If the item does not exist, output \\"Item not found\\". Constraints 1 le N le 100,000 1 le Q le 100,000 1 le text{price}, text{quantity} le 10,000 1 le text{id} le 1,000,000 Output Format For each \\"QUERY\\" operation, output either the item\'s price and quantity in the format \\"price quantity\\" or \\"Item not found\\" if the item does not exist. Sample Input 3 1001 50 20 1002 30 15 1003 40 60 5 QUERY 1001 ADD 1004 35 10 SELL 1002 5 UPDATE 1003 45 50 QUERY 1002 Sample Output 50 20 25 10 Item not found","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, id, price, quantity): if id in self.items: self.items[id][\'quantity\'] += quantity else: self.items[id] = {\'price\': price, \'quantity\': quantity} def update_item(self, id, price, quantity): if id in self.items: self.items[id][\'price\'] = price self.items[id][\'quantity\'] = quantity def sell_item(self, id, quantity): if id in self.items: self.items[id][\'quantity\'] -= quantity if self.items[id][\'quantity\'] <= 0: del self.items[id] def query_item(self, id): if id in self.items: return f\\"{self.items[id][\'price\']} {self.items[id][\'quantity\']}\\" else: return \\"Item not found\\""},{"question":"You are given a string S consisting of lowercase English letters. Nikki wants to find the length of the longest palindrome that can be built with the letters of this string. Letters are case-insensitive and you are allowed to rearrange the letters in any order to form the palindrome. A palindrome is a string that reads the same forward and backward. For example, \\"madam\\" or \\"racecar\\". Input: The first line of input contains a single integer N, the length of the string S. The second line of input contains the string S, which is a string of length N consisting of lowercase English letters. Output: The first and only line of output must contain the length of the longest palindrome that can be built with the letters of the given string. Constraints: 1 ≤ N ≤ 10^5 SAMPLE INPUT 7 abccccdd SAMPLE OUTPUT 7 Explanation: One possible longest palindrome that can be built is \\"dccaccd\\", whose length is 7. The letters \'a\' and \'b\' are not present in the palindrome as they cannot form a pair, reducing the length of the potential palindrome by 2 characters (since they are not necessary for constructing a palindrome).","solution":"from collections import Counter def longest_palindrome_length(S: str) -> int: Returns the length of the longest palindrome that can be built with the letters of the string S. :param S: A string consisting of lowercase English letters. :return: The length of the longest palindrome that can be built with S\'s letters. freq = Counter(S) length = 0 odd_found = False for count in freq.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"You are given a string and need to analyze it for a specific type of pattern. A \\"balanced\\" substring is defined as a substring that contains an equal number of \'A\'s and \'B\'s and doesn\'t contain any other characters. Write a program that finds the number of such balanced substrings within the given string. For example, in the string \\"AABBAB\\", the \\"balanced\\" substrings are \\"AA\\", \\"BB\\", and in \\"ABAB\\", it would be \\"AB\\", \\"AB\\". The function should take the following input: The first line contains an integer, t, denoting the number of test cases. Each of the next t lines contains a string s. For each string s, print the count of the balanced substrings. # Input - The first input line contains the integer t (1 ≤ t ≤ 10), indicating the number of test cases. - Each of the following t lines contains a string s (1 ≤ |s| ≤ 1000), a string consisting only of the characters \'A\' and \'B\'. # Output - For each test case, output the number of balanced substrings in a new line. # Example Input: 3 AABBAB AAABB ABAB Output: 2 0 2","solution":"def count_balanced_substrings(num_cases, cases): results = [] for s in cases: countA = 0 countB = 0 balanced_count = 0 for char in s: if char == \'A\': countA += 1 elif char == \'B\': countB += 1 if countA == countB: balanced_count += 1 countA = 0 countB = 0 results.append(balanced_count) return results"},{"question":"You are organizing a treasure hunt in a rectangular grid. The grid consists of cells, each containing either a treasure or an obstacle. Each cell is either navigable or not, marked by a binary value (1 for navigable and 0 for not navigable). You start from the top-left corner of the grid (0, 0) and your goal is to reach the bottom-right corner of the grid (n-1, m-1), collecting as many treasures as possible. However, you can only move right or down. Write a program to determine the maximum number of treasures you can collect on a valid path from the top-left to the bottom-right corner. Input The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. - The next n lines each contain m integers separated by spaces, representing the grid. A value of -1 represents an obstacle, a value of 1 represents a treasure, and a value of 0 represents an empty cell. Output For each test case, output a single integer — the maximum number of treasures you can collect on the path from (0, 0) to (n-1, m-1). Example Input 2 3 3 1 0 1 0 -1 0 1 0 1 4 5 1 0 0 0 1 0 -1 -1 -1 0 1 1 0 0 1 0 1 0 0 1 Output 3 5 Explanation In the first test case, the valid path with the maximum treasures is from (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2), collecting 3 treasures. In the second test case, the valid path with the maximum treasures is from (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 4) -> (1, 4) -> (2, 4) -> (3, 4), collecting 5 treasures.","solution":"def max_treasures(t, test_cases): results = [] for case in test_cases: n, m = case[\'dims\'] grid = case[\'grid\'] # Initialize the dp table dp = [[float(\'-inf\')] * m for _ in range(n)] if grid[0][0] != -1: dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if grid[i][j] == -1: continue if i > 0 and dp[i-1][j] != float(\'-inf\'): dp[i][j] = max(dp[i][j], dp[i-1][j] + (1 if grid[i][j] == 1 else 0)) if j > 0 and dp[i][j-1] != float(\'-inf\'): dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if grid[i][j] == 1 else 0)) results.append(0 if dp[n-1][m-1] == float(\'-inf\') else dp[n-1][m-1]) return results"},{"question":"Write a function that takes a string describing a shopping list and returns the total quantity of items. The input string will contain multiple lines with each line representing an item in the format \\"<quantity> <item_name>\\". The quantity will always be a positive integer. For example, given the input string: ``` 2 apples 3 bananas 1 orange ``` The function should return the total quantity, which is 6 in this case. Assume the input string will always be well-formed with one item per line.","solution":"def total_quantity(shopping_list): Returns the total quantity of items in the shopping list. Parameters: shopping_list (str): A string representing the shopping list, where each line is in the format \\"<quantity> <item_name>\\". Returns: int: The total quantity of items. total = 0 lines = shopping_list.split(\'n\') for line in lines: if line.strip(): quantity = int(line.split()[0]) total += quantity return total"},{"question":"You have been hired by a top-security agency to develop an encryption mechanism for their messaging system. The mechanism uses a unique method of shifting the positions of characters within a string while preserving the order of non-letter characters. Your task is to write a function that takes a string and an integer `k` as input and returns the modified string. The method should shift all alphabetic characters (both lowercase and uppercase) to the right by `k` positions in the alphabet, wrapping around if necessary, while leaving all non-alphabet characters in their original positions. Note that \'a\' should become \'b\' if k=1, \'z\' should wrap around to \'a\', and similar for uppercase letters. -----Input----- The input will consist of a string `s` (1 ≤ length of s ≤ 1000) and an integer `k` (0 ≤ k ≤ 1000). The string can contain any printable ASCII characters. -----Output----- Output the transformed string after shifting the alphabetic characters by `k` positions and keeping non-alphabetic characters in their original positions. -----Examples----- Sample Input: `Hello, World!` 3 Sample Output: `Khoor, Zruog!` Sample Input: `Encrypt123` 5 Sample Output: `Jshwduy123`","solution":"def shift_char(c, k): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + k) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + k) % 26 + ord(\'A\')) else: return c def shift_string(s, k): Shifts all alphabetic characters in the string s by k positions in the alphabet, preserving the positions of non-alphabetic characters. return \'\'.join(shift_char(c, k) for c in s)"},{"question":"A company is organizing a team-building event where participants will be formed into teams. There are n participants and each participant has a skill level which is an integer value. The participants need to be divided into teams such that the total skill level of each team is minimized. The constraint is that each team must consist of exactly two participants. Write a function that takes an list of integers representing the skill levels of the participants and returns the minimal possible total skill level of all the teams combined. Input An integer n (2 ≤ n ≤ 100000) — the number of participants. A list of n integers where each integer represents the skill level of a participant (0 ≤ skill level ≤ 100000). Output A single integer — the minimal possible total skill level of all the teams combined. Examples Input 6 1 3 5 7 9 11 Output 36 Input 4 1 2 1 2 Output 6 Note: In the first example, we can form teams (1, 3), (5, 7), and (9, 11) resulting in the total skill level of `(1+3) + (5+7) + (9+11) = 36`. In the second example, we can form teams (1, 1) and (2, 2) resulting in the total skill level of `(1+1) + (2+2) = 6`.","solution":"def minimal_total_skill_level(n, skill_levels): Returns the minimal possible total skill level of all teams combined. :param n: Number of participants :param skill_levels: List of integers representing skill levels of participants :return: Minimal possible total skill level of all the teams combined skill_levels.sort() total_skill = 0 for i in range(n // 2): total_skill += skill_levels[i] + skill_levels[n - 1 - i] return total_skill"},{"question":"Alice loves palindrome numbers and decided to create an interesting game involving them. In this game, you are given an integer `n`, and you are required to find the smallest palindrome number greater than `n`. A palindrome number is a number that remains the same when its digits are reversed, like 121 or 12321. Implement a function to help Alice for her game. Input The input consists of a single integer `n` (1 ≤ n ≤ 10^5). Output Print the smallest palindrome number greater than `n`. Examples Input 123 Output 131 Input 99 Output 101 Input 1234 Output 1331 Note For the first example, the smallest palindrome number greater than 123 is 131. For the second example, the smallest palindrome number greater than 99 is 101. For the third example, the smallest palindrome number greater than 1234 is 1331.","solution":"def is_palindrome(num): Check if the given number is a palindrome. return str(num) == str(num)[::-1] def next_palindrome(n): Find the smallest palindrome number greater than n. n += 1 while not is_palindrome(n): n += 1 return n # Example usage: # next_palindrome(123) -> 131 # next_palindrome(99) -> 101 # next_palindrome(1234) -> 1331"},{"question":"Deepak loves playing with strings, especially palindromes. A palindrome is a string that reads the same backward as forward. He recently came up with a unique problem where he wants to know the number of different palindromic substrings in a given string. To aid him in this, he calls his friend Meena, who is an expert in string manipulation. Task: Given a string `s`, find the number of different palindromic substrings in `s`. Input Format: - The first line contains an integer T, the number of test cases. - The next T lines each contain a single string `s`. Output Format: For each test case, output a single line containing the number of distinct palindromic substrings in the provided string. Scoring Criteria: 20 Points: T ≤ 5 and 1 ≤ |s| ≤ 100 50 Points: T ≤ 100 and 1 ≤ |s| ≤ 1000 90 Points: T ≤ 1000 and 1 ≤ |s| ≤ 5000 Problem Constraints: - The string `s` contains only lowercase English letters. Example: SAMPLE INPUT: 3 abc aaa racecar SAMPLE OUTPUT: 3 3 7 Explanation: For `abc`: The palindromic substrings are {\\"a\\", \\"b\\", \\"c\\"}. Therefore, the number of distinct palindromic substrings is 3. For `aaa`: The palindromic substrings are {\\"a\\", \\"aa\\", \\"aaa\\"}. Therefore, the number of distinct palindromic substrings is 3. For `racecar`: The palindromic substrings are {\\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"cec\\", \\"aceca\\", \\"racecar\\"}. Therefore, the number of distinct palindromic substrings is 7.","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string `s`. palindromes = set() def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: palindromes.add(s[left:right+1]) left -= 1 right += 1 for i in range(len(s)): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return len(palindromes) def get_number_of_distinct_palindromic_substrings(test_cases): results = [] for s in test_cases: results.append(count_distinct_palindromic_substrings(s)) return results"},{"question":"Write a function to determine the earliest moment when everyone becomes friends in a social network. Initially, each person is a separate individual. When two people become friends, the friend circles of both individuals merge into a single friend circle. You are given a list of logs in the format `[timestamp, person1, person2]`, where `timestamp` is an integer representing the time at which `person1` and `person2` become friends. This list is given in chronological order. Determine the earliest timestamp at which everyone in the network is connected (i.e., there is one giant friend circle that includes all individuals). If not everyone can be connected, return `-1`. -----Input----- The first line contains an integer n (2 le n le 100) — the number of people in the network, labeled from 0 to n-1. The second line contains an integer m (1 le m le 10^4) — the number of logs. The following m lines each contain three integers: timestamp, person1, and `person2`. -----Output----- Print a single integer — the earliest timestamp when everyone is connected, or `-1` if not everyone can be connected. -----Examples----- Input 4 3 20190101 0 1 20190104 3 4 20190109 0 3 20190107 1 2 Output 20190109 Input 4 3 20190101 0 1 20190104 1 2 20190107 2 3 Output 20190107 Input 5 3 20190101 0 1 20190104 2 3 20190107 3 4 Output -1 -----Note----- In the first example, the earliest timestamp at which everyone becomes friends is `20190109`. At this moment, all four people are part of one friend circle. In the second example, by `20190107`, everyone is friends. In the third example, it is not possible to connect all five people, hence the result is `-1`.","solution":"def earliest_moment_all_connected(n, logs): Finds the earliest moment when everyone becomes friends in the social network. Parameters: n (int): Number of individuals in the network. logs (list[list[int]]): Logs of friendships in the format [timestamp, person1, person2]. Returns: int: The earliest timestamp when everyone is connected, or -1 if not everyone can be connected. parent = list(range(n)) rank = [1] * n connected_components = n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): nonlocal connected_components rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 connected_components -= 1 for timestamp, person1, person2 in sorted(logs): union(person1, person2) if connected_components == 1: return timestamp return -1"},{"question":"Sophie is attempting to sort a list of integers. However, she wants to do it in a special way. She wants to sort the list such that all even integers appear before any odd integers and, within their respective groups, the numbers should be in descending order. Can you help her achieve this? -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), representing the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000). -----Output----- Print the sorted list of integers following the specified rules. -----Examples----- Input 5 3 1 4 1 5 Output 4 5 3 1 1 Input 6 9 8 7 6 5 4 Output 8 6 4 9 7 5","solution":"def custom_sort(n, integers): Sorts integers such that all even integers appear before any odd integers. Within their respective groups, the numbers are sorted in descending order. :param n: Integer representing the number of integers in the list. :param integers: List of integers to be sorted. :return: List of integers sorted by the specified rules. evens = [x for x in integers if x % 2 == 0] odds = [x for x in integers if x % 2 != 0] sorted_evens = sorted(evens, reverse=True) sorted_odds = sorted(odds, reverse=True) return sorted_evens + sorted_odds"},{"question":"Given two strings, `s1` and `s2`, your task is to determine the minimum number of operations required to convert `s1` into `s2`. You can perform the following operations on the string `s1`: 1. Insert a character 2. Remove a character 3. Replace a character with another one Each operation has a cost of 1. Input: Two strings `s1` and `s2` where each string consists of lower case English letters. Output: An integer representing the minimum number of operations needed to convert `s1` into `s2`. Constraints: 1 ≤ |s1|, |s2| ≤ 1000 Problem Setter: Alex Johnson SAMPLE INPUT initial final SAMPLE OUTPUT 4 SAMPLE INPUT abc yabd SAMPLE OUTPUT 2","solution":"def min_edit_distance(s1, s2): Returns the minimum number of operations required to convert s1 to s2. m, n = len(s1), len(s2) # Create a table to store results of subproblems dp = [[0 for x in range(n+1)] for x in range(m+1)] # Fill dp[][] in bottom up manner for i in range(m+1): for j in range(n+1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of second string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are same, ignore last character and recur for remaining string elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"There is a kingdom with n cities connected by m bidirectional roads. Each road connects two different cities and has a certain length. The king wants to make his kingdom more accessible, so he plans to build a palace in one of the cities. The goal is to place the palace in such a way that the maximum distance from any city to the palace is minimized. Your task is to determine the city where the palace should be placed to minimize the maximum distance from any city to the palace. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of roads. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — representing a road between city u and city v with length w. -----Output----- Output one integer — the number of the city where the palace should be placed to minimize the maximum distance from any city to the palace. If there are multiple cities that satisfy the condition, output the one with the smallest number. -----Examples----- Input 4 4 1 2 2 2 3 4 3 4 1 4 1 3 Output 1 Input 3 2 1 2 5 2 3 7 Output 2 -----Note----- In the first example, the distances from city 1 to other cities are: - City 1 to City 2: 2 - City 1 to City 3: 6 - City 1 to City 4: 3 The maximum distance from City 1 is 6, which is minimized compared to other cities. In the second example, placing the palace in city 2 minimizes the maximum distance to other cities as it is centrally located in terms of road lengths.","solution":"import heapq def dijkstra(n, graph, start): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def find_palace_city(n, roads): graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) best_city = -1 best_max_distance = float(\'inf\') for city in range(1, n + 1): distances = dijkstra(n, graph, city) max_distance = max(distances[1:]) if max_distance < best_max_distance: best_max_distance = max_distance best_city = city elif max_distance == best_max_distance: best_city = min(best_city, city) return best_city # Example usage: n = 4 m = 4 roads = [ (1, 2, 2), (2, 3, 4), (3, 4, 1), (4, 1, 3) ] print(find_palace_city(n, roads)) # Output: 1"},{"question":"In a kingdom far away, King Arthur rules a land where every citizen is either a Knight or a Knave. Knights always tell the truth, and Knaves always lie. One day, King Arthur summoned three individuals: A, B, and C, and asked each of them the same question: \\"How many Knights are among you?\\" A\'s response: \\"C said that only one of us is a Knight.\\" B\'s response: \\"A said that C is a Knight.\\" C\'s response: \\"B is a Knight.\\" Given these statements, determine the number of Knights among A, B, and C. Write a function `find_knights_statements(A, B, C)` that takes in the truthfulness of the statements made by A (boolean), B (boolean), and C (boolean). The function should determine and output the number of Knights among the three individuals. # Function Signature: ```python def find_knights_statements(is_A_truthful: bool, is_B_truthful: bool, is_C_truthful: bool) -> int: pass ``` # Input: - `is_A_truthful`: A boolean value indicating whether A is telling the truth (True) or lying (False). - `is_B_truthful`: A boolean value indicating whether B is telling the truth (True) or lying (False). - `is_C_truthful`: A boolean value indicating whether C is telling the truth (True) or lying (False). # Output: - An integer representing the number of Knights among A, B and C. # Constraints: - Each boolean value for `is_A_truthful`, `is_B_truthful`, and `is_C_truthful` will either be `True` or `False`. # Example: ```python print(find_knights_statements(True, False, True)) # Output: 2 print(find_knights_statements(False, False, True)) # Output: 1 ```","solution":"def find_knights_statements(is_A_truthful: bool, is_B_truthful: bool, is_C_truthful: bool) -> int: # Based on the statements, determine if A, B, and C are Knights or Knaves # A said: \\"C said that only one of us is a Knight.\\" if is_A_truthful: # If A is truthful, then C actually said only one is a Knight C_statement = 1 else: # If A is lying, then C did not say only one is a Knight (could be 0, 2, or 3) C_statement = -1 # B said: \\"A said that C is a Knight.\\" if is_B_truthful: # If B is truthful, then A actually said C is a Knight A_statement = is_C_truthful else: # If B is lying, then A did not say C is a Knight (so A said C is a Knave) A_statement = not is_C_truthful # C said: \\"B is a Knight.\\" C_statement_about_B = is_B_truthful # Determine the number of Knights based on the truthfulness knights_count = sum([is_A_truthful, is_B_truthful, is_C_truthful]) return knights_count"},{"question":"Determine the square root of an integer. You are given a non-negative integer n, and you need to find the integer part of the square root of n. For example, the integer part of the square root of 17 is 4. Write a function that returns the largest integer x such that x squared is less than or equal to n. Input The input is a single integer n (0 ≤ n ≤ 10^18). Output Print the largest integer x such that x^2 ≤ n. Examples Input 16 Output 4 Input 20 Output 4","solution":"def int_sqrt(n): Returns the largest integer x such that x^2 is less than or equal to n. if n == 0: return 0 low, high = 1, n // 2 + 1 ans = 1 while low <= high: mid = (low + high) // 2 if mid * mid == n: return mid elif mid * mid < n: ans = mid low = mid + 1 else: high = mid - 1 return ans"},{"question":"# Your Task Given a list of integers, your task is to determine if it can be split into two subsets such that the sum of the elements in both subsets is equal. The function should return a boolean indicating whether such a split is possible. ```python can_partition([1, 5, 11, 5]) == True # The array can be partitioned as [1, 5, 5] and [11] can_partition([1, 2, 3, 5]) == False # The array cannot be partitioned into equal sum subsets ``` Explanation This is a classic problem that can be solved using dynamic programming. The idea is to determine if there is a subset of the given list with a sum equal to half of the total sum of the list. If such a subset exists, the remaining elements will also have the same sum, thus making the partition possible. Here is a Python function signature to get you started: ```python def can_partition(nums: list[int]) -> bool: # Implement your solution here pass ```","solution":"def can_partition(nums): Determine if a list of integers can be split into two subsets with equal sum. :param nums: A list of integers. :return: A boolean indicating whether the list can be partitioned into two equal sum subsets. total_sum = sum(nums) # If total sum is odd, we cannot split it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a boolean DP array dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Given a list of integers, return whether there exist three distinct elements in the list that sum up to zero. The list is represented by an integer array. Example: Input: nums = [-1, 0, 1, 2, -1, -4] Output: True Explanation: The triplet [-1, 0, 1] sums up to zero. Note: All input integers are in the range [-10^5, 10^5]. The list may contain duplicate elements but the triplets must be distinct. If no such triplet exists, return False.","solution":"def three_sum_zero(nums): Returns True if there are three distinct elements in nums that sum up to zero, else False. nums.sort() n = len(nums) for i in range(n - 2): # To avoid duplicates if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: return True elif current_sum < 0: left += 1 else: right -= 1 return False"},{"question":"Inventory Management System You are tasked with creating an inventory management system for a bookstore. The bookstore has a list of books, each with a title, author, genre, and price. Books are stored in a dictionary where the key is the title of the book and the value is a dictionary with the keys \'author\', \'genre\', and \'price\'. The bookstore needs to be able to perform the following operations: 1. **Add a new book** - This should add a new book to the inventory with the given title, author, genre, and price. 2. **Remove a book** - This should remove a book from the inventory based on the title. 3. **Search for a book by title** - This should return the details of the book if it exists. 4. **List all books in a given genre** - This should return a list of books for a specific genre. The function will receive a list of tuples as input where the first element of the tuple is the operation (`\'add\'`, `\'remove\'`, `\'search\'`, `\'list\'`) and the following elements are the arguments for that operation. - For `\'add\'` the tuple will contain the title, author, genre, and price. - For `\'remove\'` it will contain the title. - For `\'search\'` it will contain the title. - For `\'list\'` it will contain the genre. The function should return the appropriate response based on the operation: - For `\'add\'` and `\'remove\'`, return `None`. - For `\'search\'`, return the book\'s details as a dictionary. - For `\'list\'`, return a list of titles. The function should handle the operations in a case insensitive manner for the title and genre. # Example ```python [ (\'add\', \'The Da Vinci Code\', \'Dan Brown\', \'Thriller\', 15.99), (\'add\', \'Angels & Demons\', \'Dan Brown\', \'Thriller\', 14.99), (\'add\', \'Pride and Prejudice\', \'Jane Austen\', \'Romance\', 10.99), (\'search\', \'The Da Vinci Code\'), (\'list\', \'Thriller\'), (\'remove\', \'Angels & Demons\') ] ``` Output: ```python [ None, None, None, {\'author\': \'Dan Brown\', \'genre\': \'Thriller\', \'price\': 15.99}, [\'The Da Vinci Code\'], None ] ```","solution":"def inventory_management_system(operations): inventory = {} def add_book(title, author, genre, price): normalized_title = title.lower() inventory[normalized_title] = { \'title\': title, \'author\': author, \'genre\': genre, \'price\': price } def remove_book(title): normalized_title = title.lower() if normalized_title in inventory: del inventory[normalized_title] def search_book(title): normalized_title = title.lower() return inventory.get(normalized_title) def list_books(genre): normalized_genre = genre.lower() return [book[\'title\'] for book in inventory.values() if book[\'genre\'].lower() == normalized_genre] results = [] for operation in operations: if operation[0] == \'add\': _, title, author, genre, price = operation add_book(title, author, genre, price) results.append(None) elif operation[0] == \'remove\': _, title = operation remove_book(title) results.append(None) elif operation[0] == \'search\': _, title = operation results.append(search_book(title)) elif operation[0] == \'list\': _, genre = operation results.append(list_books(genre)) return results"},{"question":"In a distant land, Maria the gardener tends to her unique rectangular garden with dimensions n x m meters. Each part of her garden may contain different types of plants, but what makes the garden distinctive is that it has special sections that require an even distribution of water. Maria has at her disposal a water distribution system that can place water sprinklers. Each sprinkler can water a square section of the garden with dimensions k x k meters, where k can range from 1 up to the minimum of n and m. She can install a water sprinkler at any position in the garden provided that the entire square section it waters stays within the garden’s boundaries. Maria wants to maximize the number of k x k square sections that are fully watered without any overlap between the sections. Your task is to determine the maximum number of k x k square sections that can be watered by placing sprinklers optimally in Maria\'s garden. Additionally, you need to specify the value of k that maximizes the number of non-overlapping k x k square sections. Input The only line of input contains two integers n and m (1 ≤ n, m ≤ 10^6) — the dimensions of Maria\'s garden. Output Print two integers: the value of k that maximizes the number of non-overlapping k x k square sections and the maximum number of such sections. Example Input 5 5 Output 5 1 Note In the example, a 5 x 5 garden can be fully covered by one 5 x 5 sprinkler. If instead the garden was larger, for example 6 x 6, four 3 x 3 sprinklers would be the optimal solution because they fully utilize the space without overlapping. Using these sprinklers, Maria can ensure that her garden is effectively watered, maximizing the coverage and ensuring her unique plants thrive.","solution":"def max_sprinklers(n, m): Returns the size of the square section k and the maximum number of non-overlapping k x k sections that can be watered. k = min(n, m) max_sections = (n // k) * (m // k) return k, max_sections"},{"question":"Given a directed graph and two vertices, find the shortest path between the two vertices. You are given an integer V denoting the number of vertices, an integer E denoting the number of edges, and an array edges[] of size 3*E where each trio (edges[3*i], edges[3*i+1], edges[3*i+2]) denotes an edge from edges[3*i] to edges[3*i+1] with weight edges[3*i+2]. Example 1: Input: V = 4 E = 4 edges[] = {0, 1, 1, 0, 2, 4, 1, 2, 2, 2, 3, 1} src = 0 dest = 3 Output: 4 Explanation: The given graph has 4 vertices and 4 edges. The shortest path from vertex 0 to vertex 3 is 0 -> 2 -> 3 with total weight 4. Your Task: You do not need to read input or print anything. Your task is to complete the function shortestPath() which takes V, E, edges, src, and dest as input parameters and returns the total weight of the shortest path from the source vertex to the destination vertex. If there is no path, return -1. Expected Time Complexity: O(V^2) Expected Auxiliary Space: O(V) Constraints: 1 ≤ V ≤ 100 1 ≤ E ≤ 1000 1 ≤ edges[i] ≤ 100","solution":"import heapq def shortestPath(V, E, edges, src, dest): # Represent the graph as an adjacency list graph = {i: [] for i in range(V)} for i in range(E): u, v, w = edges[3*i], edges[3*i+1], edges[3*i+2] graph[u].append((v, w)) # Dijkstra\'s algorithm distances = {i: float(\'inf\') for i in range(V)} distances[src] = 0 priority_queue = [(0, src)] # (distance, node) while priority_queue: current_distance, u = heapq.heappop(priority_queue) # If we reached the destination if u == dest: return current_distance # Check for better paths for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) # If destination is not reachable return distances[dest] if distances[dest] != float(\'inf\') else -1"},{"question":"A forest ranger is monitoring the growth of a new species of plant in a forest. The forest is mapped out as a grid with n rows and m columns. Each cell in the grid can either be empty or contain a plant. Each plant has a growth rate, which is an integer representing the number of units it grows per day. The ranger wants to determine the maximum total growth that can be obtained from k plants on a given day. Input The first line of input data contains three integers n (1 ≤ n ≤ 50), m (1 ≤ m ≤ 50), and k (1 ≤ k ≤ n*m) — the number of rows and columns in the forest grid, and the number of plants to consider for maximum growth, respectively. The next n lines each contain m integers, representing the growth rates of the plants in the grid. A cell with a growth rate of 0 indicates that the cell is empty and does not contain a plant. Output Output the maximum total growth of k plants on the given day. Examples Input 3 3 3 0 2 3 4 0 1 0 5 6 Output 15 Input 2 2 2 1 2 3 4 Output 7 Note In the first case, the largest growth rates are 6, 5, and 4, so their total growth on the given day is 15. In the second case, the largest growth rates are 4 and 3, so their total growth on the given day is 7.","solution":"def maximum_total_growth(n, m, k, grid): Returns the maximum total growth obtainable by selecting k plants with the highest growth rates. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. k (int): The number of plants to consider for maximum growth. grid (list of list of int): The growth rates of the plants in the grid. Returns: int: The maximum total growth of k plants. # Flatten the grid to get a list of growth rates. growth_rates = [grid[i][j] for i in range(n) for j in range(m)] # Sort the growth rates in descending order. growth_rates.sort(reverse=True) # Sum up the top k growth rates. max_growth = sum(growth_rates[:k]) return max_growth"},{"question":"A group of friends are planning a road trip. They have a specific list of cities they want to visit, and they have asked you to help them with the logistics of the trip. The friends will start the trip from one of the cities and will visit each of the listed cities exactly once before returning to the starting city. The cost of traveling between each pair of cities is known, and they wish to minimize the total cost of the trip. Your task is to find the minimum cost to complete the trip where the friends visit each city exactly once and return to the starting city. -----Input----- The input consists of: - One line with an integer n (2 leq n leq 15), the number of cities. - n lines, each containing n integers. The j-th integer in the i-th line represents the cost c_{ij} (1 leq c_{ij} leq 10^9) of traveling from city i to city j. It is guaranteed that c_{ii} = 0 for all i (it costs nothing to stay in the same city). -----Output----- Output a single integer, the minimum cost to complete the trip. -----Examples----- Sample Input 1: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output 1: 80 Sample Input 2: 3 0 10 15 10 0 20 15 20 0 Sample Output 2: 45","solution":"import itertools def tsp_min_cost(n, cost): Find the minimum cost to complete the trip where friends visit each city exactly once and return to the starting city. :param n: int, number of cities :param cost: list of list of ints, cost[i][j] is the cost of traveling from city i to city j :return: int, minimum cost to complete the trip cities = list(range(n)) min_cost = float(\'inf\') for perm in itertools.permutations(cities): current_cost = 0 for i in range(n - 1): current_cost += cost[perm[i]][perm[i+1]] current_cost += cost[perm[-1]][perm[0]] # Return to starting city min_cost = min(min_cost, current_cost) return min_cost def solve(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) cost = [list(map(int, line.split())) for line in lines[1:]] return tsp_min_cost(n, cost)"},{"question":"You are given a list of integers, some of which may be repeated. You are also given an integer k. You need to find the number of distinct pairs (i, j) such that i < j and the difference between the i-th and j-th element is equal to k. Constraints: * 1 ≤ n ≤ 10^5 (where n is the number of elements in the list) * 1 ≤ k ≤ 10^9 * -10^9 ≤ list[i] ≤ 10^9 (where list[i] is the i-th element of the list) Input The input is given from Standard Input in the following format: n k list_1 list_2 ... list_n Output Print the number of distinct pairs that satisfy the conditions. Examples Input 5 2 1 5 3 4 2 Output 3 Input 4 3 8 6 1 5 Output 1","solution":"def count_distinct_pairs_with_difference(arr, k): Returns the number of distinct pairs (i, j) such that i < j and the difference between arr[i] and arr[j] is equal to k. :param arr: List of integers :param k: Integer representing the required difference :return: Integer representing the number of distinct pairs # Convert the list to a set to avoid duplicates and enable O(1) lookups unique_elements = set(arr) pair_count = 0 # Iterate through the unique elements for element in unique_elements: if (element + k) in unique_elements: pair_count += 1 return pair_count # Example Usage # arr = [1, 5, 3, 4, 2] # k = 2 # print(count_distinct_pairs_with_difference(arr, k)) # Output: 3"},{"question":"You are given an array of positive integers and an integer K. Your task is to find a pair of elements in the array such that the difference between the elements is exactly K. Example 1: Input: arr = [1, 7, 5, 9, 2, 12, 3] K = 2 Output: True Explanation: There are several pairs with difference 2, such as (1, 3), (5, 7), (7, 9), etc. Example 2: Input: arr = [1, 3, 5, 8, 12] K = 4 Output: True Explanation: Pairs with difference 4 include (1, 5), (3, 8). Example 3: Input: arr = [1, 3, 5, 9] K = 7 Output: False Explanation: There are no pairs with difference 7. Your Task: You don\'t need to read input or print anything. You only need to complete the function `findPairWithGivenDifference()` that takes an array of integers `arr` and an integer `K` as parameters and returns a boolean value: `True` if there is at least one pair of elements with the given difference K, otherwise `False`. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^9 1 <= K <= 10^9","solution":"def findPairWithGivenDifference(arr, K): Returns True if there exists a pair of elements in the list such that their difference is exactly K. num_set = set(arr) for num in arr: if (num + K) in num_set or (num - K) in num_set: return True return False"},{"question":"**Sherlock and Palindromic Queries** Sherlock Holmes is working on a case involving palindromic queries. A string is palindromic if it reads the same backward as forward. Sherlock has a string `s` and a set of queries. Each query consists of two integers `l` and `r` which denote the start and end indices of a substring of `s`. For each query, Sherlock needs to determine if the substring `s[l...r]` is palindromic or not. Your task is to help Sherlock by answering all the queries. # Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the string `s`. The second line contains the string `s` consisting of lowercase English letters. The third line contains a single integer `q` (1 ≤ q ≤ 10^5) — the number of queries. Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the indices of the substring to check, 1-based. # Output For each query, print \\"YES\\" if the corresponding substring is palindromic, otherwise print \\"NO\\". # Examples Input ``` 7 abacaba 3 1 7 2 5 3 3 ``` Output ``` YES NO YES ``` Input ``` 6 abcdef 2 1 3 4 6 ``` Output ``` NO NO ``` # Note For the first example: - The first query checks the substring \\"abacaba\\", which is a palindrome. - The second query checks the substring \\"baca\\", which is not a palindrome. - The third query checks the substring \\"a\\", which is a palindrome.","solution":"def is_palindromic_substring(s, queries): Determines if the substrings of s defined by queries are palindromic. Parameters: s (str): The string to check. queries (list of tuples): Each tuple contains two integers (l, r) defining the start and end indices (1-based) of the substring to check. Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each query. results = [] for l, r in queries: substring = s[l-1:r] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage s = \\"abacaba\\" queries = [(1, 7), (2, 5), (3, 3)] print(is_palindromic_substring(s, queries)) # [\'YES\', \'NO\', \'YES\']"},{"question":"Alice has a long list of tasks she needs to complete during the day. Each task is represented as a string and is associated with a specific hour and minute when it should be started. She wants to organize her tasks based on the given schedule of start times. Your task is to help Alice by writing a program that sorts her tasks by their start times in ascending order. The input consists of a series of tasks and their start times. Each task is defined by a string containing letters, and its start time is given in the 24-hour format hh:mm. -----Input----- The first line of the input contains a single integer n (1 le n le 1000) denoting the number of tasks. The next n lines each contain a string t_i (1 le |t_i| le 100) representing the task description, followed by the start time in the format hh:mm. It is guaranteed that all start times are unique. -----Output----- Print the tasks in the order of their start times, each one on a new line. Only print the task descriptions in the output. -----Examples----- Input 3 task1 12:30 task2 09:45 task3 14:00 Output task2 task1 task3 Input 2 meeting 08:00 lunch 12:00 Output meeting lunch Input 5 write_report 17:15 team_meeting 11:30 code_review 13:45 check_email 08:00 daily_standup 09:15 Output check_email daily_standup team_meeting code_review write_report Note: Remember that the start times are in the 24-hour format, so 09:00 comes before 10:00, and 14:00 comes after 10:00.","solution":"def sort_tasks_by_start_time(n, tasks): Returns a list of tasks sorted by their start times in ascending order. Parameters: n (int): Number of tasks tasks (list of tuples): Each tuple contains (task_description, start_time) Returns: list: List of task descriptions sorted by their start times. tasks_sorted_by_time = sorted(tasks, key=lambda x: x[1]) return [task[0] for task in tasks_sorted_by_time]"},{"question":"Given a string, you need to determine the frequency of each vowel (a, e, i, o, u) in the string. The string consists of only lowercase letters. If a vowel is not present in the string, do not include it in the output. Constraints: 0 < |s| < 100 Input: It will consist of one line, containing the string Output: Print the frequency of each vowel in the string in the following format: vowel=frequency. Each vowel and its frequency should be printed on a new line, and the vowels should be output in the order \'a\', \'e\', \'i\', \'o\', \'u\'. Sample Input: hellothere Sample Output: e=3 o=1 Sample Input: beautiful Sample Output: a=1 e=1 i=1 u=2","solution":"def vowel_frequency(s): Returns the frequency of each vowel in the string s. vowels = \'aeiou\' frequency = {v: s.count(v) for v in vowels if s.count(v) > 0} for v in vowels: if v in frequency: print(f\\"{v}={frequency[v]}\\") # Example usage # vowel_frequency(\\"hellothere\\") # Output: # e=3 # o=1 # vowel_frequency(\\"beautiful\\") # Output: # a=1 # e=1 # i=1 # u=2"},{"question":"You are given a collection of boxes, where each box has a unique id and contains a list of items. Each item also has a unique id but can be contained in multiple boxes. The total number of boxes and items can be very large. We define that two boxes are similar if they contain at least one item with the same id. Your task is to determine if two boxes are similar or not. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of boxes and the number of queries, respectively. Each of the next n lines describes a box. The i-th line starts with an integer ki (1 ≤ ki ≤ 10^5) — the number of items in the i-th box. Then ki space-separated integers follow, denoting the ids of the items contained in the i-th box. The next m lines describe queries. Each line contains two integers ai and bi (1 ≤ ai, bi ≤ n) — the ids of the two boxes to be checked for similarity. Output For each query, output \\"YES\\" if the boxes contain at least one common item, and \\"NO\\" otherwise. Examples Input 5 3 3 1 2 3 2 4 5 4 6 7 8 9 1 10 2 5 6 1 3 2 4 2 5 Output NO NO YES","solution":"def are_boxes_similar(n, m, boxes, queries): from collections import defaultdict item_to_boxes = defaultdict(set) for idx, box in enumerate(boxes): for item in box: item_to_boxes[item].add(idx) results = [] for a, b in queries: a -= 1 # Convert to 0-based index b -= 1 # Convert to 0-based index similar = False if a == b: similar = True else: for item in boxes[a]: if item in item_to_boxes and b in item_to_boxes[item]: similar = True break if similar: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In an enchanted forest, there lives a group of magical animals who each possess a unique magical power quantified as an integer. A wizard wants to create a powerful spell by selecting a subset of these animals such that the sum of their magical powers is exactly equal to a given number S. The wizard can choose any number of animals, from zero to all available, to form this subset. Problem Given an array of integers representing the magical powers of N animals and an integer S, determine whether it is possible to form a subset of these animals such that the sum of their magical powers is exactly S. If it is possible, return \\"YES\\", otherwise \\"NO\\". Constraints * 1 ≤ N ≤ 100 (number of animals) * -1000 ≤ magical power of each animal ≤ 1000 * -10000 ≤ S ≤ 10000 Input The input is given in the following format: N S p1 p2 p3 ... pN On the first line, the number of animals N and the required sum S are given as integers separated by a space. The second line contains N integers representing the magical powers of the animals. Output Output \\"YES\\" if it is possible to create a subset whose sum is exactly S, otherwise output \\"NO\\". Examples Input 5 3 1 2 3 4 5 Output YES Input 4 11 1 2 3 4 Output NO","solution":"def can_form_sum(N, S, powers): Determine whether it is possible to form a subset of the magical powers such that their sum is exactly S. Args: N: int - number of animals S: int - required sum powers: list of int - magical powers of the animals Returns: str: \\"YES\\" if there is a subset with sum exactly S, otherwise \\"NO\\" # Initialize a set to keep track of all achievable sums achievable_sums = set([0]) for power in powers: new_sums = set() for existing_sum in achievable_sums: new_sums.add(existing_sum + power) achievable_sums.update(new_sums) if S in achievable_sums: return \\"YES\\" return \\"NO\\""},{"question":"Write a function that takes two strings as input and determines if one is a permutation of the other. A permutation is a rearrangement of letters. The function should return `True` if one string is a permutation of the other, and `False` otherwise. Input The first line contains the first string. The second line contains the second string. Output Print `True` if the second string is a permutation of the first string. Otherwise, print `False`. Constraints - Both strings contain only letters (uppercase and lowercase). - The strings have lengths between 1 and 1000 inclusive. Example Input: listen silent Output: True Input: hello billion Output: False","solution":"def are_permutations(str1, str2): Determines if one string is a permutation of the other. if len(str1) != len(str2): return False # Sort both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Given an array of words, determine the length of the shortest word that starts and ends with the same letter. If no such word exists, return -1. Example 1: Input: words = [\\"apple\\", \\"banana\\", \\"civic\\", \\"deed\\"] Output: 4 Explanation: \\"deed\\" is the shortest word that starts and ends with the same letter. Example 2: Input: words = [\\"open\\", \\"source\\", \\"programming\\"] Output: -1 Explanation: There is no word that starts and ends with the same letter. Example 3: Input: words = [\\"radar\\", \\"level\\", \\"rotor\\", \\"solos\\"] Output: 5 Explanation: All words start and end with the same letter, and \\"radar\\", \\"level\\", and \\"rotor\\" are the shortest with 5 letters. Your Task: You don\'t need to read input or print anything. Your task is to complete the function shortestLengthSameStartEnd(words) which takes an array of strings as input and returns the length of the shortest word starting and ending with the same letter. If no such word exists, return -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(words) ≤ 10^{5} 1 ≤ len(words[i]) ≤ 100","solution":"def shortestLengthSameStartEnd(words): Returns the length of the shortest word that starts and ends with the same letter. If no such word exists, returns -1. shortest_length = float(\'inf\') # Initialize to infinity as we are looking for the minimum for word in words: if len(word) > 0 and word[0] == word[-1]: shortest_length = min(shortest_length, len(word)) # If no word found, return -1 return -1 if shortest_length == float(\'inf\') else shortest_length"},{"question":"There is a bank vault with a state-of-the-art security system. The vault can only be opened by entering a specific sequence of numbers. However, this sequence isn\'t provided directly. Instead, a series of hints are given, which describe a mathematical pattern in the sequence. The sequence of numbers follows this rule: each number in the sequence is the sum of the last 3 numbers. The first three numbers in the sequence are provided. Given the first three numbers and the length of the sequence, help the bank manager determine the entire sequence of numbers. Input The first line contains T, the number of test cases. Each test case consists of four integers: - The first three integers A, B, and C, representing the first three numbers of the sequence. - The fourth integer N, representing the total length of the sequence, including the given three numbers. Output For each test case, output the sequence of N numbers, separated by spaces. Constraints 1 ≤ T ≤ 10 0 ≤ A, B, C ≤ 100 3 ≤ N ≤ 20 SAMPLE INPUT 2 1 2 3 5 4 5 6 6 SAMPLE OUTPUT 1 2 3 6 11 4 5 6 15 26 47","solution":"def generate_sequence(A, B, C, N): Given the first three numbers A, B, and C, and the length N, generate the sequence of N numbers where each number (from 4th onwards) is the sum of the last three numbers. sequence = [A, B, C] for i in range(3, N): next_number = sequence[-1] + sequence[-2] + sequence[-3] sequence.append(next_number) return sequence def process_test_cases(test_cases): results = [] for A, B, C, N in test_cases: results.append(generate_sequence(A, B, C, N)) return results"},{"question":"A security gate at an amusement park scans tickets using a barcode system. Each ticket has a unique barcode represented as a string of digits. Unfortunately, due to wear and tear, some barcodes may have missing digits represented by the character \'?\'. The security system has a rule-based mechanism to determine the validity of a ticket. To be valid, the ticket\'s barcode must satisfy the following conditions: 1. It must be exactly 10 characters long. 2. It should only contain digits \'0\'-\'9\' or \'?\'. 3. The sum of digits (considering \'?\' as zero) must be an even number. 4. The sum of any five consecutive digits (considering \'?\' as zero) must be at least 15. Your task is to determine if a given ticket barcode is potentially valid. If there\'s any possible combination of digits replacing \'?\' such that the ticket becomes valid, you should print \\"Valid\\". Otherwise, print \\"Invalid\\". Input The input consists of a single line containing a string of exactly 10 characters (digits \'0\'-\'9\' or \'?\'). Output Print \\"Valid\\" (without quotes) if the barcode can be valid by replacing \'?\' with any digits \'0\'-\'9\'. Otherwise, print \\"Invalid\\" (without quotes). Examples Input 1234?????? Output Invalid Input 12??56?93? Output Valid Note In the first example, the sum of the first five digits (considering \'?\') cannot reach 15, hence it is \\"Invalid\\". In the second example, \'?\' can be replaced with digits such that the sum of the digits would be even, and the sum of any five consecutive digits will be at least 15, hence it is \\"Valid\\".","solution":"def is_valid_barcode(barcode): Determines if the barcode can be valid by replacing \'?\' with appropriate digits. if len(barcode) != 10: return \\"Invalid\\" if not all(char.isdigit() or char == \'?\' for char in barcode): return \\"Invalid\\" # Replace \'?\' with \'0\' and calculate the sum of digits to check if it is even zeroed_barcode = [int(char) if char != \'?\' else 0 for char in barcode] if sum(zeroed_barcode) % 2 != 0: return \\"Invalid\\" # Check if the sum of any 5 consecutive digits is at least 15 for i in range(6): current_sum = sum(zeroed_barcode[i:i+5]) max_possible_sum = current_sum + barcode[i:i+5].count(\'?\') * 9 if max_possible_sum < 15: return \\"Invalid\\" return \\"Valid\\""},{"question":"David is studying computer science and came across a problem with subsequences. He is intrigued by the concept of generating subsequences from a given string by deleting zero or more characters, but keeping the order of characters intact. Given a string S, David wants to know how many distinct subsequences of S are there. Since this number can be very large, he needs the result modulo 10^9 + 7. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input: The first and only line of input contains a string S with length L (1 ≤ L ≤ 10^5) consisting of lowercase English letters. Output: Print the number of distinct subsequences of the given string S modulo 10^9 + 7. Example Input: abc Example Output: 8 Explanation: The distinct subsequences of \\"abc\\" are: \\"\\", \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"abc\\". Thus, there are 8 distinct subsequences. Note: The empty string is also considered a subsequence and should be counted once.","solution":"MOD = 10**9 + 7 def count_distinct_subsequences(s): n = len(s) dp = [1] * (n + 1) last_occurrence = {} for i in range(1, n + 1): char = s[i-1] dp[i] = (2 * dp[i-1]) % MOD if char in last_occurrence: dp[i] = (dp[i] - dp[last_occurrence[char] - 1]) % MOD last_occurrence[char] = i return dp[n] # Example usage: s = \\"abc\\" print(count_distinct_subsequences(s)) # Output 8"},{"question":"Implement a function `sort_digits(n: int) -> int` that takes an integer `n` and returns a new integer formed by sorting the digits of `n` in ascending order. The input integer can be positive, negative, or zero. Preserve the sign of the original integer. For example: - `sort_digits(42145)` should return `12445`. - `sort_digits(-42145)` should return `-12445`. - `sort_digits(0)` should return `0`.","solution":"def sort_digits(n: int) -> int: Sorts the digits of the input integer `n` in ascending order and preserves the sign. Args: n (int): The integer to sort. Returns: int: A new integer with digits sorted in ascending order. if n == 0: return 0 sign = -1 if n < 0 else 1 n_str = str(abs(n)) sorted_digits = \'\'.join(sorted(n_str)) sorted_number = int(sorted_digits) return sign * sorted_number"},{"question":"A delivery company wants to optimize the routes of its delivery trucks based on delivery times to specific locations. Given a matrix representing a map of the city with \\"m\\" locations (rows) and \\"n\\" routes (columns), each entry in the matrix consists of an integer representing the time (in minutes) required for a delivery truck to travel that route. The company wants to process multiple queries where each query asks for the minimum travel time required for a truck to start from a specified location to another. Input Format: - The first line contains two integers m and n representing the number of locations and the number of routes respectively. - The next m lines each contain n integers representing the delivery time matrix. - The following line contains a single integer Q, representing the number of queries. - The next Q lines each contain two integers i and j (0-indexed) representing the start and end locations. Output Format: - For each query, output a single integer representing the minimum travel time between the two specified locations. Constraints: 1 ≤ m, n ≤ 300 1 ≤ Q ≤ 10^5 1 ≤ time ≤ 10^3 Example Input: 3 3 2 3 1 5 4 2 6 5 3 3 0 2 1 2 0 1 Example Output: 1 2 3 Explanation: - For the query 0 2, the minimum travel time from location 0 to location 2 is the minimum value in row 0, which is 1. - For the query 1 2, the minimum travel time from location 1 to location 2 is the minimum value in row 1, which is 2. - For the query 0 1, the minimum travel time from location 0 to location 1 is the minimum value in row 0, which is 2.","solution":"def calculate_min_travel_times(m, n, matrix, queries): Calculates the minimum travel times between specified locations. Parameters: m (int): Number of locations n (int): Number of routes matrix (list of list of int): Delivery time matrix queries (list of tuple of int): List of queries where each query is a tuple (i, j) Returns: list of int: List of minimum travel times for each query min_times = [] # Precompute the minimum times for each row row_minimums = [min(row) for row in matrix] for i, j in queries: # Since each route is considered independently, the minimum time from i to j # is simply the minimum delivery time available in the start location row min_travel_time = row_minimums[i] min_times.append(min_travel_time) return min_times # Example usage m = 3 n = 3 matrix = [ [2, 3, 1], [5, 4, 2], [6, 5, 3] ] queries = [(0, 2), (1, 2), (0, 1)] print(calculate_min_travel_times(m, n, matrix, queries)) # Output: [1, 2, 1]"},{"question":"You are given a grid consisting of n rows and m columns. Each cell in the grid can be either empty or blocked. You are also given the coordinates of a starting cell and a destination cell. You need to determine if there is a path from the starting cell to the destination cell such that you can move only in the four cardinal directions (up, down, left, right) to adjacent empty cells. -----Input----- The first line contains two integers n and m (1 leq n, m leq 50) - the dimensions of the grid. The next n lines each contain m characters, representing the grid. A character \'.\' means the cell is empty, and a character \'#\' means the cell is blocked. The following line contains two integers x_s and y_s (1 leq x_s leq n, 1 leq y_s leq m) representing the coordinates of the starting cell. The final line contains two integers x_d and y_d (1 leq x_d leq n, 1 leq y_d leq m) representing the coordinates of the destination cell. -----Output----- Print \\"YES\\" if there is a path from the starting cell to the destination cell. Otherwise, print \\"NO\\". -----Examples----- Input 5 5 ..... .#. ..#.. .#. ..... 1 1 5 5 Output YES Input 3 3 ... # ... 1 1 3 1 Output NO -----Note----- In the first example, a possible path from (1, 1) to (5, 5) is: down, right, right, down, down, left, left, down, right, right. In the second example, there is no possible path from (1, 1) to (3, 1) due to the obstructing wall of \'#\' cells in row 2.","solution":"def is_path_possible(grid, n, m, start, destination): Determines if there is a path from start to destination in the grid using BFS. grid: Grid represented as a list of strings n: Number of rows m: Number of columns start: Tuple (x_s, y_s) representing the starting cell (1-based indexing) destination: Tuple (x_d, y_d) representing the destination cell (1-based indexing) Returns \\"YES\\" if the path exists, otherwise \\"NO\\". from collections import deque # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert start and destination from 1-based to 0-based indexing start = (start[0] - 1, start[1] - 1) destination = (destination[0] - 1, destination[1] - 1) # Initial validations if grid[start[0]][start[1]] == \'#\' or grid[destination[0]][destination[1]] == \'#\': return \\"NO\\" # BFS initialization queue = deque([start]) visited = set() visited.add(start) while queue: current = queue.popleft() # If we\'ve reached the destination if current == destination: return \\"YES\\" # Explore neighbors for direction in directions: neighbor = (current[0] + direction[0], current[1] + direction[1]) if 0 <= neighbor[0] < n and 0 <= neighbor[1] < m and neighbor not in visited: if grid[neighbor[0]][neighbor[1]] == \'.\': visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"You are given an n x n square matrix where each element is initially 0. You have to perform a series of instructions to update this matrix. Each instruction is of the form (i, j, x) which means that you should add the value x to the element at the i-th row and j-th column of the matrix. After applying all the instructions, you need to calculate the sum of the elements in the matrix and return the result. Input: - The first line contains two integers, n (the size of the square matrix) and k (the number of instructions). - The next k lines each contain three integers i, j, and x, which represent the row index, column index, and the value to be added to the matrix at position (i, j) respectively. Note that the indices i and j are 0-based. Output: - A single integer representing the sum of all elements in the matrix after applying all the instructions. Constraints: 1 ≤ n ≤ 1000 1 ≤ k ≤ 100,000 -10^9 ≤ x ≤ 10^9 0 ≤ i, j < n Example: Input: 3 4 0 0 5 1 1 3 2 2 7 0 1 -2 Output: 13 Explanation: Initially, the matrix is: 0 0 0 0 0 0 0 0 0 After applying the first instruction (0, 0, 5): 5 0 0 0 0 0 0 0 0 After applying the second instruction (1, 1, 3): 5 0 0 0 3 0 0 0 0 After applying the third instruction (2, 2, 7): 5 0 0 0 3 0 0 0 7 After applying the fourth instruction (0, 1, -2): 5 -2 0 0 3 0 0 0 7 The sum of the final matrix elements: 5 + (-2) + 3 + 7 = 13.","solution":"def matrix_sum(n, k, instructions): Calculates the sum of the matrix elements after applying a series of instructions to update the matrix. Parameters: n (int): The size of the matrix (n x n). k (int): The number of instructions. instructions (list of tuple): A list of instructions, each of the form (i, j, x). Returns: int: The sum of all elements in the matrix after applying all the instructions. # Initialize the matrix with zeros matrix = [[0] * n for _ in range(n)] # Apply each instruction to the matrix for i, j, x in instructions: matrix[i][j] += x # Calculate the sum of all elements in the matrix total_sum = sum(sum(row) for row in matrix) return total_sum"},{"question":"Tom loves collecting different types of stamps. He has a unique way of adding new stamps to his collection. Each time he acquires a new stamp, he adds it to his collection only if he doesn\'t already own it. Tom has a list of stamps he has obtained over several days, and now he wants to find out how many unique stamps he has collected so far. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N — the number of stamps obtained. - The second line of each test case contains N space-separated integers, representing the IDs of the obtained stamps. ------ Output Format ------ For each test case, output the number of unique stamps that Tom has in his collection. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ text{ID}_{text{stamp}} ≤ 10^9 ----- Sample Input 1 ------ 3 5 1 2 2 3 4 6 6 5 6 5 2 1 4 7 8 8 7 ----- Sample Output 1 ------ 4 4 2 ----- explanation 1 ------ Test case 1: Tom has obtained 5 stamps with IDs [1, 2, 2, 3, 4]. The unique stamps in his collection are [1, 2, 3, 4], so he has 4 unique stamps. Test case 2: Tom has obtained 6 stamps with IDs [6, 5, 6, 5, 2, 1]. The unique stamps in his collection are [6, 5, 2, 1], so he has 4 unique stamps. Test case 3: Tom has obtained 4 stamps with IDs [7, 8, 8, 7]. The unique stamps in his collection are [7, 8], so he has 2 unique stamps.","solution":"def count_unique_stamps(test_cases): results = [] for case in test_cases: N, stamps = case unique_stamps = set(stamps) results.append(len(unique_stamps)) return results"},{"question":"Given an integer array, you need to determine if it is possible to split the array into two non-empty subarrays such that the product of the elements in both subarrays is equal. -----Input----- The first line of input contains an integer T (1 ≤ T ≤ 50) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line of each test case contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the elements of the array. -----Output----- For each test case, print \\"YES\\" if it is possible to split the array into two such subarrays, otherwise print \\"NO\\". -----Examples----- Input 3 3 1 2 2 4 3 6 7 1 5 2 4 8 16 32 Output YES NO NO -----Note----- In the first sample, the array [1, 2, 2] can be split into subarrays [1, 2] and [2], both having equal product 2. In the second sample, there is no way to split the array to satisfy the condition. In the third sample, there is no way to split the array to satisfy the condition.","solution":"def can_split_with_equal_product(arr): total_product = 1 for num in arr: total_product *= num left_product = 1 for i in range(len(arr) - 1): left_product *= arr[i] right_product = total_product // left_product if left_product == right_product: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(can_split_with_equal_product(arr)) return results"},{"question":"You are given an integer array nums consisting of n integers. Find and return the length of the longest contiguous subarray with an equal number of 0s and 1s. A subarray is a contiguous part of an array. -----Constraints----- - 1 ≤ n ≤ 10^4 - nums[i] is either 0 or 1. -----Input----- Input is given from Standard Input in the following format: n nums -----Output----- Print the length of the longest contiguous subarray with an equal number of 0s and 1s. -----Sample Input----- 6 0 1 0 1 1 1 -----Sample Output----- 4 In this array, one of the longer contiguous subarrays with an equal number of 0\'s and 1\'s is [0, 1, 0, 1], so the answer is 4.","solution":"def find_max_length(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. count = 0 max_length = 0 count_map = {0: -1} # Initializing with 0 to handle the base case. for i, num in enumerate(nums): # Increment count for 1 and decrement for 0. count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"A company specializes in designing book covers for authors. They have a unique condition that each design has to look aesthetically different from its adjacent designs to catch the eye of potential customers. Each design can be represented as a color, and adjacent designs should not have the same color. The problem the company faces is to determine the number of different ways to design covers for a sequence of books such that no two adjacent books have the same design. They have a palette of `K` colors to choose from. For example, if there are `3` books and the company has `2` colors to choose from, one feasible design could be `[1, 2, 1]` where `1` and `2` represent different colors. -----Input:----- The first line of the input contains a single integer `N` representing the number of books. The second line contains a single integer `K` indicating the number of colors available. -----Output:----- The output should be a single integer, corresponding to the number of different ways the company can design the covers for the sequence of books such that no two adjacent books have the same color. The output should be given modulo `10^9 + 7`. -----Constraints:----- - `1 leq N, K leq 10^5`. -----Sample Input----- 3 2 -----Sample Output----- 2 Note: For `N = 3` and `K = 2`, there are only `2` valid configurations: `[1,2,1]` and `[2,1,2]`.","solution":"MOD = 10**9 + 7 def count_design_ways(N, K): Calculate the number of different ways to design covers such that no two adjacent books have the same color if K == 1: return 1 if N == 1 else 0 dp = [0] * max(3, N+1) dp[1] = K dp[2] = K * (K - 1) % MOD for i in range(3, N + 1): dp[i] = (dp[i-1] * (K - 1)) % MOD return dp[N] # Example usage # print(count_design_ways(3, 2))"},{"question":"Matthew is given a linked list containing n nodes, where each node has two pointers: a next pointer pointing to the next node in the linked list, and a child pointer which may point to another full linked list or be null. This linked list structure can contain multi-level linked lists, where nodes may have their own child linked lists, and those child lists can have their own children, and so on. Matthew wants to flatten this multi-level linked list to form a single-level linked list. The order of nodes in the flattened list should be the same as they appear in a depth-first traversal of the original multi-level list. Write a function to flatten the multi-level linked list and return the head of the flattened list. -----Input----- The function should be able to handle a linked list where a node is defined as: ```python class Node: def __init__(self, val = 0, next = None, child = None): self.val = val self.next = next self.child = child ``` The input will be an instance of `Node` which represents the head of the multi-level linked list. Each value in a node (val) will be a distinct integer (1 ≤ val ≤ 10^9). There will be at most 10^4 nodes in total. -----Output----- Return the head of the single-level flattened linked list. -----Example----- Input HEAD -> 1 -> 2 -> 3 | v 4 -> 5 | v 6 Output 1 -> 2 -> 3 -> 4 -> 5 -> 6 Input HEAD -> 1 -> 2 -> 3 | | v v 7 -> 8 9 | v 10 Output 1 -> 7 -> 8 -> 10 -> 2 -> 3 -> 9","solution":"class Node: def __init__(self, val = 0, next = None, child = None): self.val = val self.next = next self.child = child def flatten(head: Node) -> Node: if not head: return head dummy = Node(0) stack = [head] prev = dummy while stack: curr = stack.pop() prev.next = curr prev = prev.next if curr.next: stack.append(curr.next) if curr.child: stack.append(curr.child) curr.child = None return dummy.next"},{"question":"A farmer wants to divide his rectangular field into smaller fields for planting different crops. The field has dimensions of n times m units. He can only make vertical or horizontal cuts. Given n (the number of rows) and m (the number of columns), determine the minimum number of cuts required to divide the field into rectangular sub-fields such that no sub-field has an area greater than a units. Input Format A single line containing three space-separated integers n, m, and a. Constraints 1 leq n, m leq 10^9 1 leq a leq 10^{18} Output Format Print a long integer denoting the minimum number of cuts required to ensure no sub-field has an area greater than a units. Sample Input 3 4 4 Sample Output 2 Explanation In this case, the farmer can make one vertical cut, resulting in two 3 times 2 fields, each with an area of 6 units. Then, he can make one horizontal cut in one of these fields to create two 1.5 times 2 fields, each with an area of 3 units, which is less than or equal to a. Hence, the minimum number of cuts needed is 2.","solution":"import math def min_cuts(n, m, a): Returns the minimum number of cuts required to ensure no sub-field has an area greater than a units. # Calculate number of necessary vertical and horizontal subfields vert_cuts = math.ceil(n / math.sqrt(a)) - 1 hor_cuts = math.ceil(m / math.sqrt(a)) - 1 total_cuts = vert_cuts + hor_cuts return int(total_cuts)"},{"question":"In a mystical forest, there exists a special type of tree called the \\"Magic Trees.\\" These trees have a unique property: each branch of the tree, except for the root, has exactly one parent branch, and they form a hierarchical structure resembling a tree data structure. Each branch is also endowed with a magical power level, and this power level is influenced by the power levels of its child branches. Specifically, the power level of a branch is the maximum power level among all its child branches plus a value that represents the intrinsic power of that branch. You are an apprentice wizard studying the properties of these magic trees. Your task is to determine the maximum power level of the entire tree, starting from the root branch. Given the description of the tree and the intrinsic power values of each branch, you need to calculate and output this maximum power level. Input The input has the following format: N p1 p2 ... pN a1 b1 a2 b2 ... aN-1 bN-1 Here, N is the number of branches in the tree (1 ≤ N ≤ 100,000). The second line contains N integers p1, p2, ..., pN where pi represents the intrinsic power of the i-th branch (-1000 ≤ pi ≤ 1000). The next N-1 lines each contain two integers ai and bi, indicating that the branch ai is the parent of the branch bi (1 ≤ ai, bi ≤ N). Output Print the maximum power level of the tree\'s root branch. Example Input 5 3 5 2 1 4 1 2 1 3 3 4 3 5 Output 9 Explanation In the example, the structure of the tree is: ``` 1 (3) / 2(5) 3(2) / 4(1) 5(4) ``` - Branch 2 has no children and its power is 5. - Branch 4 has no children and its power is 1. - Branch 5 has no children and its power is 4. - Branch 3 has children 4 and 5. The maximum power level among its children is max(1, 4) = 4. So, the power level of branch 3 is 2 (its intrinsic power) + 4 = 6. - The root branch 1 has children 2 and 3. The maximum power level among its children is max(5, 6) = 6. So, the power level of the root is 3 (its intrinsic power) + 6 = 9. Thus, the maximum power level of the tree\'s root branch is 9.","solution":"from collections import defaultdict def max_power_level(N, power, edges): def dfs(node): if node in cache: return cache[node] max_child_power = 0 for child in tree[node]: max_child_power = max(max_child_power, dfs(child)) cache[node] = power[node - 1] + max_child_power return cache[node] tree = defaultdict(list) for a, b in edges: tree[a].append(b) cache = {} return dfs(1)"},{"question":"Given an integer amount representing cents (0 <= amount <= 10000), write a function to convert it into a string representing that amount in dollars and cents in words. Note: Consider the singular and plural forms based on the values, as well as zero values. Examples of conversion: 1234 -> twelve dollars and thirty-four cents 100 -> one dollar and zero cents 2000 -> twenty dollars and zero cents Example 1: Input: amount = 1234 Output: twelve dollars and thirty-four cents Example 2: Input: amount = 45 Output: zero dollars and forty-five cents Your Task: You don\'t need to read input or print anything. Complete the function amountToWords() which takes an integer amount as input and returns a string representing the dollar and cents in words. Expected Time Complexity: O(1) Expected Auxiliary Space: O(k) where k is the amount of space required for the string conversion. Constraints: 0 <= amount <= 10000","solution":"def number_to_words(n): Convert numbers to words for given integer 0 <= n < 100. words_1_to_19 = [ \\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\" ] words_tens = [ \\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\" ] if n < 20: return words_1_to_19[n] else: if n % 10 == 0: return words_tens[n // 10] else: return words_tens[n // 10] + \\"-\\" + words_1_to_19[n % 10] def amountToWords(amount): Converts an amount in cents to words representing dollars and cents. Parameters: amount (int): The amount in cents. Returns: str: The amount in words. dollars = amount // 100 cents = amount % 100 if dollars == 1: dollars_word = number_to_words(dollars) + \\" dollar\\" else: dollars_word = number_to_words(dollars) + \\" dollars\\" if cents == 1: cents_word = number_to_words(cents) + \\" cent\\" else: cents_word = number_to_words(cents) + \\" cents\\" return dollars_word + \\" and \\" + cents_word"},{"question":"There is an array of integers where each element appears twice except for one. Find that single one without using extra memory. Your solution should have a linear runtime complexity. Example 1: Input: arr = [2, 2, 1] Output: 1 Example 2: Input: arr = [4, 1, 2, 1, 2] Output: 4 Explanation: In Example 1, all elements appear twice except for the integer 1 which appears only once. In Example 2, all elements appear twice except for the integer 4 which appears only once. Constraints: 1 <= length of array <= 10^4 -3 * 10^4 <= array[i] <= 3 * 10^4 Function Signature: def find_single_element(arr: List[int]) -> int: # implement the function Your Task: You don\'t need to read input or print anything. Your task is to complete the function `find_single_element()` to find the single element that appears only once in the input array `arr`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def find_single_element(arr): Returns the element that appears only once in the list `arr` where all other elements appear twice. Uses bitwise XOR to achieve O(n) time complexity and O(1) space complexity. result = 0 for num in arr: result ^= num return result"},{"question":"Given a matrix of dimensions n times m filled with nonnegative integers, your task is to determine for each cell (i, j) the minimum cost to travel from the top-left corner (1, 1) to that cell. The cost of a path is defined as the sum of the values of the cells through which the path passes. You are allowed to move only rightward (rightarrow) or downward (downarrow) at each step. -----Input----- - The first line of input contains two integers n and m (1 le n, m le 200) — the dimensions of the matrix. - The next n lines contain m integers each, representing the values in the matrix. -----Output----- Output a matrix of dimensions n times m where the value in the (i, j)-th position represents the minimum cost to travel from (1, 1) to (i, j). -----Example----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 1 4 5 2 7 6 6 8 7 -----Note----- In the first test case of the example, one of the minimum cost paths from (1, 1) to (3, 3) could be: (1, 1) rightarrow (2, 1) rightarrow (3, 1) rightarrow (3, 2) rightarrow (3, 3) with a total cost 1 + 1 + 4 + 2 + 1 = 9.","solution":"def calculate_minimum_cost(n, m, matrix): Returns the matrix of minimum costs to travel from the top-left corner (1,1) to each cell (i, j). Parameters: n (int): number of rows. m (int): number of columns. matrix (list of list of int): matrix of nonnegative integers. Returns: list of list of int: matrix of minimum costs. # Create a dp array to store the minimum costs dp = [[float(\'inf\')] * m for _ in range(n)] dp[0][0] = matrix[0][0] for r in range(n): for c in range(m): if r > 0: dp[r][c] = min(dp[r][c], dp[r-1][c] + matrix[r][c]) if c > 0: dp[r][c] = min(dp[r][c], dp[r][c-1] + matrix[r][c]) return dp"},{"question":"A graphical design tool allows users to create shapes and define certain properties for them. The tool currently supports two shapes: circles and rectangles. Each shape has distinct properties, like a circle has a radius, and a rectangle has a length and a width. You need to design a feature that reads a list of shape definitions and calculates the area of each shape in the list. Input The first input line contains one number T — the number of shapes. Each of the following T lines describes a shape. Every shape description starts with a string type that is either \\"circle\\" or \\"rectangle\\": - For a circle, the next number is its radius r (an integer, 1 ≤ r ≤ 1000). - For a rectangle, the next two numbers are its length l and width w (integers, 1 ≤ l, w ≤ 1000). Output Output T lines. For each shape, output its area as a floating-point number rounded to two decimal places. Examples Input 3 circle 3 rectangle 4 5 circle 2 Output 28.27 20.00 12.57","solution":"import math def calculate_area(shapes): Given a list of shape definitions, calculate and return their area. Args: shapes (list of str): List of strings where each string is a shape definition. Returns: list of float: List of areas of the shapes rounded to two decimal places. areas = [] for shape in shapes: parts = shape.split() shape_type = parts[0] if shape_type == \\"circle\\": radius = int(parts[1]) area = math.pi * (radius ** 2) elif shape_type == \\"rectangle\\": length = int(parts[1]) width = int(parts[2]) area = length * width areas.append(round(area, 2)) return areas"},{"question":"Doctor Uma works in a busy hospital emergency room. She needs to diagnose multiple patients based on their symptoms quickly and accurately. The hospital\'s software system has a database of diseases and their associated symptoms. Each disease is linked to a specific set of symptoms, and patients presenting certain symptoms can be diagnosed with potential diseases from the database. Your task is to help Doctor Uma by writing a program, which will take the symptoms of a patient and display a list of possible diseases the patient could be suffering from. ------ Input ------ The first line contains a single integer D, denoting the number of diseases in the database. The next D lines describe each disease. Each line starts with a string representing the disease name (assume no spaces in the disease name), followed by an integer S representing the number of symptoms for that disease, followed by S space-separated strings representing the symptoms of that disease. After the disease descriptions, the next line contains a single integer P denoting the number of patients. The next P lines describe each patient. Each line starts with an integer F representing the number of symptoms the patient is experiencing, followed by F space-separated strings representing the patient\'s symptoms. ------ Output ------ For each patient, output a single line listing all possible diseases that match the patient\'s symptoms. If no diseases match, output \\"No diagnosis\\". ------ Constraints ------ 1 ≤ D ≤ 100 1 ≤ S ≤ 20 1 ≤ P ≤ 100 1 ≤ F ≤ 20 Each symptom string will be alphanumeric and no longer than 20 characters. Each disease name string will be alphanumeric and no longer than 30 characters. ------ Sample Input ------ 3 Flu 3 fever cough fatigue Cold 2 sneeze runny_nose Chickenpox 2 fever rash 2 2 fever cough 1 sneeze ------ Sample Output ------ Flu Cold (Note: The diseases and symptoms are case-sensitive as well as the order in which symptoms are listed for disease is not important.)","solution":"def diagnose_patients(disease_data, patient_data): diseases = disease_data.split(\'n\') patients = patient_data.split(\'n\') # Parsing disease data D = int(diseases[0]) disease_symptoms = {} for i in range(1, D + 1): line = diseases[i].split() disease_name = line[0] S = int(line[1]) symptoms = set(line[2:]) disease_symptoms[disease_name] = symptoms # Parsing patient data P = int(patients[0]) results = [] for i in range(1, P + 1): line = patients[i].split() F = int(line[0]) patient_symptoms = set(line[1:]) possible_diseases = [] for disease, symptoms in disease_symptoms.items(): if patient_symptoms.issubset(symptoms): possible_diseases.append(disease) if possible_diseases: results.append(\' \'.join(possible_diseases)) else: results.append(\\"No diagnosis\\") return results"},{"question":"Write a function to determine whether a given integer can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Input The input consists of a single line containing a string s of length n. The string s can contain uppercase and lowercase alphabets, digits, and spaces. Output Print \\"Yes\\" (without quotes) if the characters of the string can be rearranged to form a palindrome, otherwise print \\"No\\" (without quotes). Constraints 1 ≤ n ≤ 1000 SAMPLE INPUT civic SAMPLE OUTPUT Yes SAMPLE INPUT 2 ivicc SAMPLE OUTPUT 2 Yes SAMPLE INPUT 3 hello SAMPLE OUTPUT 3 No","solution":"def can_form_palindrome(s): Determines if the characters of the input string can be rearranged to form a palindrome. Parameters: s (str): The input string Returns: str: \\"Yes\\" if the characters can be rearranged to form a palindrome, otherwise \\"No\\" from collections import Counter # Remove spaces from the string and convert to lower case s = s.replace(\\" \\", \\"\\").lower() # Count the occurrences of each character char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count if odd_count <= 1: return \\"Yes\\" else: return \\"No\\""},{"question":"Write a function that takes in a list of dates in \'YYYY-MM-DD\' format and returns a dictionary categorizing each date by the day of the week. Note: - The keys of the dictionary should be the days of the week (e.g., \'Monday\', \'Tuesday\', etc.). - The values should be lists of dates that fall on that particular day. - Assume all inputs are valid and dates are always given in the correct format. Example: ``` dates = [\\"2023-04-01\\", \\"2023-04-02\\", \\"2023-04-03\\", \\"2023-04-04\\", \\"2023-04-05\\", \\"2023-04-06\\", \\"2023-04-07\\"] ``` Output: ``` { \'Saturday\': [\'2023-04-01\'], \'Sunday\': [\'2023-04-02\'], \'Monday\': [\'2023-04-03\'], \'Tuesday\': [\'2023-04-04\'], \'Wednesday\': [\'2023-04-05\'], \'Thursday\': [\'2023-04-06\'], \'Friday\': [\'2023-04-07\'] } ```","solution":"from datetime import datetime def categorize_dates_by_day_of_week(dates): Takes a list of dates in \'YYYY-MM-DD\' format and returns a dictionary categorizing each date by the day of the week. days_of_week = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'] result = {day: [] for day in days_of_week} for date_str in dates: date_obj = datetime.strptime(date_str, \'%Y-%m-%d\') day_name = date_obj.strftime(\'%A\') result[day_name].append(date_str) return result"},{"question":"You are given a string containing both uppercase and lowercase letters. You need to determine the length of the longest substring that contains exactly k distinct characters. Function Signature: `int longestSubstringKDistinctCharacters(String s, int k)` Input The function receives the following parameters: 1. A string `s` (1 ≤ |s| ≤ 100000) — containing uppercase and lowercase English letters. 2. An integer `k` (1 ≤ k ≤ 26) — representing the number of distinct characters. Output Return an integer representing the length of the longest substring with exactly k distinct characters. If there is no such substring, return 0. Example Input ``` s = \\"aaabbcc\\" k = 2 ``` Output ``` 5 ``` Explanation The longest substring with exactly 2 distinct characters is \\"aabb\\" or \\"abbcc\\". Input ``` s = \\"eceba\\" k = 2 ``` Output ``` 3 ``` Explanation The longest substring with exactly 2 distinct characters is \\"ece\\".","solution":"def longestSubstringKDistinctCharacters(s, k): Returns the length of the longest substring that contains exactly k distinct characters. Parameters: s (str): the input string containing uppercase and lowercase English letters. k (int): the number of distinct characters. Returns: int: the length of the longest substring with exactly k distinct characters. if k == 0 or not s: return 0 n = len(s) left = 0 right = 0 max_length = 0 char_count = {} while right < n: # Add the current character to the count dictionary char_count[s[right]] = char_count.get(s[right], 0) + 1 right += 1 # If the count dictionary has more than k distinct characters, shrink the window from the left while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 # Whenever we have exactly k distinct characters, update the max_length if len(char_count) == k: max_length = max(max_length, right - left) return max_length"},{"question":"Create a function called `number_pyramid` that generates a numeric pyramid pattern made of `n` floors. Each ith floor contains consecutive numbers from 1 to i. Your function should return a string containing the pyramid. For example, given `n=4`, it should print: ``` 1 1 2 1 2 3 1 2 3 4 ``` Another example, given `n=6`, it should print: ``` 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 ``` Ensure there is an extra line feed character at the end of the string. If `n=0`, the function should return `\\"n\\"`.","solution":"def number_pyramid(n): Generates a numeric pyramid pattern made of n floors. Args: n (int): Number of floors in the pyramid. Returns: str: String representation of the pyramid. if n == 0: return \\"n\\" pyramid = \\"\\" for i in range(1, n + 1): floor = \\" \\".join(str(x) for x in range(1, i + 1)) pyramid += floor + \\"n\\" return pyramid"},{"question":"Given an integer array and a target integer, your task is to complete the function findSmallestSubarray which takes an array nums and an integer target as arguments and returns the length of the smallest contiguous subarray of which the sum is greater than or equal to target. If there is no such subarray, return 0. Input: nums = [2, 3, 1, 2, 4, 3], target = 7 Output: 2 Explanation: The subarray [4, 3] has the minimal length under the problem constraints. Input: nums = [1, 1, 1, 1, 1, 1, 1, 1], target = 11 Output: 0 Explanation: There is no subarray with a sum greater than or equal to 11. Constraints: 1 ≤ size of nums ≤ 10^5 1 ≤ nums[i] ≤ 10^4 1 ≤ target ≤ 10^9","solution":"def findSmallestSubarray(nums, target): Find the length of the smallest contiguous subarray with a sum >= target. If no such subarray exists, return 0. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Little Dani is learning about sorting algorithms in her programming class and wants to test her understanding by solving a practical problem. She has a list of integers and she needs to sort them using a specific sorting algorithm called \\"Bouncing Search Sort\\". This sorting algorithm works as follows: 1. Start from the first element of the list. 2. Compare it with the next element. If the current element is greater than the next element, swap them. 3. Move to the next element and repeat the comparison and swap process until you reach the end of the list. 4. Once you reach the end of the list, bounce back to the beginning of the list and repeat steps 2-3. However, instead of moving to the next element, you move to the previous element after each comparison. 5. Continue the process of moving forward through the list and bouncing back until the list is sorted. The algorithm stops when no swaps are made during a complete forward and backward traversal of the list. Write a function `bouncing_search_sort` that takes a list of integers and sorts it using the \\"Bouncing Search Sort\\" algorithm. Input: - A list of integers, where the length of the list can be up to 10^5. Output: - The sorted list of integers in non-decreasing order. Examples: Input: [4, 2, 1, 3] Output: [1, 2, 3, 4] Input: [5, 1, 4, 2, 3] Output: [1, 2, 3, 4, 5] Note: - You should implement the sorting algorithm as described above. - The function should handle large lists efficiently. Here is the function signature for Python: ```python def bouncing_search_sort(arr: List[int]) -> List[int]: pass ```","solution":"def bouncing_search_sort(arr): if not arr: return [] n = len(arr) is_sorted = False while not is_sorted: is_sorted = True for i in range(n - 1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] is_sorted = False if is_sorted: break is_sorted = True for i in range(n - 2, -1, -1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] is_sorted = False return arr"},{"question":"The company you work for has secured a contract to develop software for a GPS tracking system used in autonomous delivery drones. One of the requirements is a functionality to estimate the battery usage of the drones over different distances. Knowing that the energy consumption per kilometer can change based on the drone\'s current load, the company needs a function that calculates the battery usage. You know the energy consumption per kilometer for an empty drone, and you also know that each kilogram of load increases the energy consumption by a certain percentage. Given this, create a function that computes the total energy consumption for a given distance, considering the load: - `energy_consumption_per_km`: The base energy consumption of the drone per kilometer when empty (in Wh/km). - `load_kg`: The load the drone is carrying (in kilograms). - `additional_percentage_per_kg`: The additional percentage of energy consumption per kilogram of load (in percentage). - `distance_km`: The distance the drone will travel (in kilometers). The function should return the total energy consumption for the entire trip. Here\'s the function signature: ```python def calculate_energy(energy_consumption_per_km: float, load_kg: float, additional_percentage_per_kg: float, distance_km: float) -> float: ``` **Examples:** ```python calculate_energy(100, 10, 5, 50) # returns 7500.0 (base consumption is 100 Wh/km, load adds 50% extra consumption: 150 Wh/km -> for 50 km: 7500 Wh) calculate_energy(200, 5, 10, 30) # returns 6900.0 (base consumption is 200 Wh/km, load adds 50% extra consumption: 300 Wh/km -> for 30 km: 9000 Wh) ``` You can assume all input values will be positive numbers.","solution":"def calculate_energy(energy_consumption_per_km: float, load_kg: float, additional_percentage_per_kg: float, distance_km: float) -> float: Calculate the total energy consumption for the entire trip. Parameters: energy_consumption_per_km (float): Base energy consumption per km for an empty drone in Wh/km. load_kg (float): Load the drone is carrying in kilograms. additional_percentage_per_kg (float): Additional percentage of energy consumption per kg of load. distance_km (float): Distance the drone will travel in kilometers. Returns: float: Total energy consumption over the given distance. # Calculate the additional energy consumption due to the load additional_consumption = energy_consumption_per_km * (additional_percentage_per_kg / 100) * load_kg # Calculate the total energy consumption per km with the load total_consumption_per_km = energy_consumption_per_km + additional_consumption # Calculate the total energy consumption for the entire distance total_energy_consumption = total_consumption_per_km * distance_km return total_energy_consumption"},{"question":"Create a function to validate a Sudoku board. Sudoku boards are 9x9 grids filled with numbers from 1 to 9. Each number must appear exactly once in each of the following: 1. Each row 2. Each column 3. Each of the nine 3x3 sub-grids A Sudoku board can also contain some empty spots denoted by the character \'.\'. Your task is to write a function that takes a partially filled Sudoku board and returns a boolean to indicate if it is valid according to the Sudoku rules. Note: - The board will be represented by a 2D array. - An empty spot is represented by \'.\'. - The function should not modify the board. Example 1: Given board = [ [\'5\',\'3\',\'.\',\'.\',\'7\',\'.\',\'.\',\'.\',\'.\'], [\'6\',\'.\',\'.\',\'1\',\'9\',\'5\',\'.\',\'.\',\'.\'], [\'.\',\'9\',\'8\',\'.\',\'.\',\'.\',\'.\',\'6\',\'.\'], [\'8\',\'.\',\'.\',\'.\',\'6\',\'.\',\'.\',\'.\',\'3\'], [\'4\',\'.\',\'.\',\'8\',\'.\',\'3\',\'.\',\'.\',\'1\'], [\'7\',\'.\',\'.\',\'.\',\'2\',\'.\',\'.\',\'.\',\'6\'], [\'.\',\'6\',\'.\',\'.\',\'.\',\'.\',\'2\',\'8\',\'.\'], [\'.\',\'.\',\'.\',\'4\',\'1\',\'9\',\'.\',\'.\',\'5\'], [\'.\',\'.\',\'.\',\'.\',\'8\',\'.\',\'.\',\'7\',\'9\'] ] Return true. Example 2: Given board = [ [\'8\',\'3\',\'.\',\'.\',\'7\',\'.\',\'.\',\'.\',\'.\'], [\'6\',\'.\',\'.\',\'1\',\'9\',\'5\',\'.\',\'.\',\'.\'], [\'.\',\'9\',\'8\',\'.\',\'.\',\'.\',\'.\',\'6\',\'.\'], [\'8\',\'.\',\'.\',\'.\',\'6\',\'.\',\'.\',\'.\',\'3\'], [\'4\',\'.\',\'.\',\'8\',\'.\',\'3\',\'.\',\'.\',\'1\'], [\'7\',\'.\',\'.\',\'.\',\'2\',\'.\',\'.\',\'.\',\'6\'], [\'.\',\'6\',\'.\',\'.\',\'.\',\'.\',\'2\',\'8\',\'.\'], [\'.\',\'.\',\'.\',\'4\',\'1\',\'9\',\'.\',\'.\',\'5\'], [\'.\',\'.\',\'.\',\'.\',\'8\',\'.\',\'.\',\'7\',\'9\'] ] Return false. Note: - Example 2 is invalid because the number 8 appears twice in the first column of the board.","solution":"def isValidSudoku(board): Validate the given Sudoku board. :param board: List[List[str]]; 2D array representing the Sudoku board :return: bool; True if the board is valid, False otherwise # Helper function to validate a block (row, column or sub-grid) def is_valid_block(block): block = [num for num in block if num != \'.\'] return len(block) == len(set(block)) # Validate rows and columns for i in range(9): row = [board[i][j] for j in range(9)] if not is_valid_block(row): return False col = [board[j][i] for j in range(9)] if not is_valid_block(col): return False # Validate 3x3 sub-grids for i in range(0, 9, 3): for j in range(0, 9, 3): sub_grid = [ board[i + m][j + n] for m in range(3) for n in range(3) ] if not is_valid_block(sub_grid): return False return True"},{"question":"Given an array `A` containing `N` elements, where each element is an integer. You are allowed to perform the following operation zero or more times: - Select any two indices `i` and `j` (1 <= i, j <= N) where `i != j`, and replace `A[i]` with `A[j]`. Find the minimum possible value of the difference between the maximum and minimum elements of array `A` after any number of operations. Constraints * 1 ≤ N ≤ 10^5 * -10^9 ≤ A[i] ≤ 10^9 Input Input is given from Standard Input in the following format: ``` N A1 A2 A3 ... AN ``` Output Print the minimum possible value of the difference between the maximum and minimum elements of array `A` after the allowed operations. Examples Input 5 3 1 4 1 5 Output 0 Input 3 9 7 5 Output 0 Input 4 -1 -2 -3 -4 Output 0","solution":"def min_difference_after_operations(N, A): Returns the minimum possible value of the difference between the maximum and minimum elements of the array A after any number of allowed operations. return 0"},{"question":"You are given an undirected graph with N nodes (numbered 1 through N) and M edges. Each node has a value a_{i} initially written on it. You can perform the following operation any number of times: - Choose any two connected nodes u and v such that the edge (u, v) exists, and swap the values written on u and v. You are also given a sequence of N integers b_{1}, b_{2}, ldots, b_{N}. Your task is to determine whether it is possible to reach a state where for each valid i, the value written on node i is b_{i}. A *connected component* of the graph is a maximal set of nodes such that there exists a path (direct or indirect) between any pair of nodes in this set. Swapping operations within a connected component can be freely executed, but not between different components. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. Each of the next M lines contains two space-separated integers u and v denoting an edge between nodes u and v. The next line contains N space-separated integers a_{1}, a_{2}, ldots, a_{N}. The final line contains N space-separated integers b_{1}, b_{2}, ldots, b_{N}. ------ Output ------ For each test case, print a single line containing \\"YES\\" if it is possible to reach the desired state, or \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^{6} 1 ≤ N ≤ 10^{5} 0 ≤ M ≤ 10^{5} 1 ≤ u, v ≤ N 1 ≤ a_{i}, b_{i} ≤ 10^{6} for each valid i the sum of N over all test cases does not exceed 10^{6} ------ Subtasks ------ Subtask #1 (40 points, time limit 1 seconds): the sum of N over all test cases does not exceed 1,000 Subtask #2 (30 points, time limit 2 seconds): the sum of M over all test cases does not exceed 10^5 Subtask #3 (30 points, time limit 2 seconds): original constraints ----- Sample Input 1 ------ 3 4 2 1 2 2 3 10 20 30 40 20 30 10 40 3 0 10 20 30 10 20 30 5 4 1 2 2 3 3 4 4 5 1 2 3 4 5 5 4 3 2 1 ----- Sample Output 1 ------ YES YES YES ----- Explanation ------ Example case 1: The graph has two connected components: {1, 2, 3} and {4}. Values can be swapped within {1, 2, 3} to achieve the desired values, and no swap is needed for {4}. Example case 2: Each node is isolated, so both sequences must already be equal. Example case 3: The entire graph is a single component, and values can be freely swapped to obtain the desired values.","solution":"def can_rearrange_values(T, test_cases): from sys import setrecursionlimit, stdin from collections import defaultdict, deque import sys input = stdin.read setrecursionlimit(10**6) # Helper function to perform DFS and collect nodes in the connected components def dfs(node, adj_list, visited, curr_component): stack = [node] while stack: node = stack.pop() if node not in visited: visited.add(node) curr_component.append(node) for neighbor in adj_list[node]: if neighbor not in visited: stack.append(neighbor) results = [] for i in range(T): N, M = test_cases[i][\'N\'], test_cases[i][\'M\'] edges = test_cases[i][\'edges\'] a = test_cases[i][\'a\'] b = test_cases[i][\'b\'] # Build adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) visited = set() components = [] for node in range(N): if node not in visited: curr_component = [] dfs(node, adj_list, visited, curr_component) components.append(curr_component) possible = True for component in components: a_values = [a[node] for node in component] b_values = [b[node] for node in component] if sorted(a_values) != sorted(b_values): possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes a list of integers and returns a sorted list of their prime factors. If an integer is negative or zero, it should be excluded from the output. Examples ``` Input: [6, 15, -4, 0, 21] Output: [[2, 3], [3, 5], [3, 7]] Input: [10, 25, 8] Output: [[2, 5], [5, 5], [2, 2, 2]] Input: [13, 19] Output: [[13], [19]] ``` Notes - The function should return a sorted list of lists, each containing the prime factors of the corresponding input integers. - Exclude zeros and negative numbers from the input list. - Prime factors should be listed in ascending order within each sublist.","solution":"def prime_factors(n): Returns the list of prime factors of a given positive integer n. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n = n // divisor divisor += 1 return factors def prime_factors_list(nums): Given a list of integers, return a sorted list of lists, each containing the prime factors of the corresponding input integers. Exclude zeros and negative numbers from the output. result = [] for num in nums: if num > 0: result.append(prime_factors(num)) return result"},{"question":"***Question:*** You are given an array of integers representing the heights of buildings in a row. The goal is to trap as much rainwater as possible after it rains. Write a function that calculates the maximum amount of trapped water. The way to trap water is to find the elevation of the buildings and calculate the water trapped between each pair of buildings. The amount of water trapped on top of each building is equal to the height of the shorter building, minus the height of the current building (if it\'s positive). **Function Signature:** ```python def trap(height: List[int]) -> int: ``` **Input:** - An integer array `height` of length `n` (0 ≤ n ≤ 10^5), where `height[i]` represents the height of the i-th building. **Output:** - An integer representing the total amount of rainwater trapped. **Example:** **Input:** ``` [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` **Output:** ``` 6 ``` _explanation: The following buildings can trap water._ ``` _ _ _ _ _ _ _ _ _ _ _ 0 1 0 2 1 0 1 3 2 1 2 1 ``` Water trapped between buildings creates 6 units of water: - From index 1 to 3 -> 1 unit - From index 3 to 7 -> 5 units","solution":"from typing import List def trap(height: List[int]) -> int: if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"A game consists of several rounds, and in each round, you are given an array of integers representing the scores of different players. Your task is to find the maximum score accumulated by any player after all the rounds. The score of a player in a round is given by the integer at the corresponding position in the array. Write a function that takes a list of lists, where each inner list represents the scores of players in a particular round, and returns the maximum score accumulated by any player. Example 1: Input: scores = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 18 Explanation: - Player 1\'s total score is 1 + 4 + 7 = 12 - Player 2\'s total score is 2 + 5 + 8 = 15 - Player 3\'s total score is 3 + 6 + 9 = 18 Thus, the maximum score accumulated by any player is 18. Example 2: Input: scores = [[5, 1, 3], [2, 7, 4], [8, 0, 6]] Output: 15 Explanation: - Player 1\'s total score is 5 + 2 + 8 = 15 - Player 2\'s total score is 1 + 7 + 0 = 8 - Player 3\'s total score is 3 + 4 + 6 = 13 Thus, the maximum score accumulated by any player is 15. Example 3: Input: scores = [[10, 20], [30, 40]] Output: 60 Explanation: - Player 1\'s total score is 10 + 30 = 40 - Player 2\'s total score is 20 + 40 = 60 Thus, the maximum score accumulated by any player is 60. Constraints: 1. 1 <= scores.length <= 100 2. 1 <= scores[i].length <= 100 3. -10^6 <= scores[i][j] <= 10^6","solution":"def max_accumulated_score(scores): Returns the maximum score accumulated by any player after all rounds. Parameters: scores (list of list of ints): Each inner list represents the scores of players in a round Returns: int: The maximum score accumulated by any player # Number of players num_players = len(scores[0]) # Initialize accumulated scores for each player accumulated_scores = [0] * num_players # Accumulate scores for each player for round_scores in scores: for i in range(num_players): accumulated_scores[i] += round_scores[i] # Find the maximum accumulated score return max(accumulated_scores)"},{"question":"Maria takes her dog, Rex, for a walk every morning. She follows the same path every day, which consists of N consecutive segments. Each segment has a difficulty rating for Rex ranging from 1 to M, where 1 is the easiest and M is the hardest. Rex will only walk a segment if its difficulty rating is higher than or equal to a certain threshold K. If a segment is too easy (i.e., its difficulty rating is less than K), Rex will skip that segment and mark it as \\"too easy.\\" Given the list of segment difficulties and the threshold K, determine how many segments Rex will skip during the walk. Input - The first line contains three integers N, M and K where N is the number of segments (1 ≤ N ≤ 100), M is the maximum difficulty rating (1 ≤ M ≤ 100), and K is the threshold (1 ≤ K ≤ M). - The second line contains N integers, each representing the difficulty rating of a segment. Each difficulty rating is between 1 and M inclusive. Output Print the number of segments Rex will skip. Examples Input 5 10 5 6 4 8 2 10 Output 2 Input 3 7 6 2 3 5 Output 3 Input 4 5 3 1 2 3 4 Output 2 Note In the first example: - The segments have difficulty ratings [6, 4, 8, 2, 10]. - The threshold is 5. - The segments with difficulty ratings 4 and 2 will be skipped. - Thus, the output is 2 as Rex skips 2 segments. In the second example: - The segments have difficulty ratings [2, 3, 5]. - The threshold is 6. - All the segments will be skipped. - Thus, the output is 3.","solution":"def count_skipped_segments(N, M, K, segments): Returns the number of segments Rex will skip based on the threshold K. Parameters: - N: int, the number of segments (1 ≤ N ≤ 100) - M: int, the maximum difficulty rating (1 ≤ M ≤ 100) - K: int, the threshold difficulty rating (1 ≤ K ≤ M) - segments: list of int, the difficulty ratings of the segments (each between 1 and M) Returns: - int, the number of segments Rex will skip return sum(1 for segment in segments if segment < K)"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string, your task is to determine if it is a palindrome or not and to return a boolean value (`true` if the string is a palindrome and `false` otherwise). Note that for this task, we will ignore non-alphanumeric characters and case sensitivity. Example 1: Input: \\"A man, a plan, a canal, Panama\\" Output: true Example 2: Input: \\"No \'x\' in Nixon\\" Output: true Example 3: Input: \\"Hello, World!\\" Output: false Your Task: You don\'t need to input anything. Complete the function `isPalindrome()` which takes a string as the input parameter and returns a boolean value indicating whether the string is a palindrome or not. Constraints: - The input string consists of printable ASCII characters. - The length of the input string can be between 1 and 1000 characters.","solution":"import re def isPalindrome(s): Determines if the input string is a palindrome, ignoring non-alphanumeric characters and case sensitivity. Parameters: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case filtered_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_str == filtered_str[::-1]"},{"question":"Create a program that simulates a traffic light system for a four-way intersection. There are three possible states for each traffic light: green, yellow, and red. Each state\'s duration is defined as follows: - Green: 60 seconds - Yellow: 10 seconds - Red: 70 seconds At any time, only one direction of traffic (north-south or east-west) will have a green or yellow light, while the other direction remains red. After the yellow light for one direction, the other direction will switch to green. Write a function `traffic_light_system` that simulates this traffic light system over a given period (in seconds) and returns the state of the traffic lights at each intersection in the format: ```python [ {\\"north-south\\": \\"green\\", \\"east-west\\": \\"red\\"}, {\\"north-south\\": \\"yellow\\", \\"east-west\\": \\"red\\"}, {\\"north-south\\": \\"red\\", \\"east-west\\": \\"green\\"}, {\\"north-south\\": \\"red\\", \\"east-west\\": \\"yellow\\"}, # ... continue for the entire duration ] ``` Your function should take the total duration of the simulation (in seconds) as its input and return a list of dictionaries representing the state of the traffic lights at each second. Example: ```python traffic_light_system(140) ``` Should return: ```python [ {\\"north-south\\": \\"green\\", \\"east-west\\": \\"red\\"}, {\\"north-south\\": \\"green\\", \\"east-west\\": \\"red\\"}, # ... 58 more times for green state {\\"north-south\\": \\"yellow\\", \\"east-west\\": \\"red\\"}, {\\"north-south\\": \\"yellow\\", \\"east-west\\": \\"red\\"}, # ... 8 more times for yellow state {\\"north-south\\": \\"red\\", \\"east-west\\": \\"green\\"}, {\\"north-south\\": \\"red\\", \\"east-west\\": \\"green\\"}, # ... 58 more times for green state in east-west direction {\\"north-south\\": \\"red\\", \\"east-west\\": \\"yellow\\"}, {\\"north-south\\": \\"red\\", \\"east-west\\": \\"yellow\\"}, # ... continue for the entire duration ] ```","solution":"def traffic_light_system(total_duration): Simulates a traffic light system over the given period (in seconds). Parameters: total_duration (int): The total duration of the simulation in seconds. Returns: List[dict]: A list of dictionaries representing the state of the traffic lights at each second. cycle = 140 # Total cycle time for one full change states = [] for second in range(total_duration): cycle_second = second % cycle if cycle_second < 60: states.append({\\"north-south\\": \\"green\\", \\"east-west\\": \\"red\\"}) elif cycle_second < 70: states.append({\\"north-south\\": \\"yellow\\", \\"east-west\\": \\"red\\"}) elif cycle_second < 130: states.append({\\"north-south\\": \\"red\\", \\"east-west\\": \\"green\\"}) else: states.append({\\"north-south\\": \\"red\\", \\"east-west\\": \\"yellow\\"}) return states"},{"question":"Palindrome Substring Count Given a string, you need to count the number of substrings that are palindromes. A **palindrome** is a string that reads the same backward as forward. The empty string and single character strings are trivially palindromes. # Input Format - The first line of input contains an integer T, the number of test cases. - Each of the next T lines contains a single string. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ length of string ≤ 1000 - The string will consist of lowercase English letters only. # Output Format For each test case, output a single line containing the number of palindromic substrings in the provided string. # Sample Input ``` 3 abba abc aaa ``` # Sample Output ``` 6 3 6 ``` # Explanation 1. For the first test case: \\"abba\\" - The palindromic substrings are \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", and \\"abba\\". 2. For the second test case: \\"abc\\" - The palindromic substrings are \\"a\\", \\"b\\", and \\"c\\". 3. For the third test case: \\"aaa\\" - The palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count def process_input(T, strings): results = [] for i in range(T): result = count_palindromic_substrings(strings[i]) results.append(result) return results"},{"question":"# Problem Statement You are given a grid of size `m x n` filled with non-negative integers, and a value `k`. Your task is to find the maximum sum of any subarray of size `p x q` (p rows, q columns) where `p` and `q` can range from 1 up to the number of rows and columns of the grid respectively, and the sum of the elements in the subarray should not exceed `k`. Write a function `maxSubarraySum(grid, k)` that takes a two-dimensional list `grid` of integers and an integer `k`, and returns the maximum sum of any subarray of any size that is less than or equal to `k`. Input - `grid`: A list of lists of integers where each integer is a non-negative number `grid[i][j]`. - `k`: A non-negative integer within the range of the sum of all elements in `grid`. Output - An integer which is the maximum sum of any `p x q` subarray of `grid` that is less than or equal to `k`. Function Signature ```python def maxSubarraySum(grid: List[List[int]], k: int) -> int: pass ``` Example ```python grid = [ [1, 0, 1], [0, -2, 3] ] k = 2 print(maxSubarraySum(grid, k)) # Output: 2 (the possible subarrays with sums up to 2 are [[1,0],[0,-2]] and [[1]] ) ``` Constraints - The grid will have at least one row and one column. - The values in the grid and k will be non-negative integers. - Elements may include zero and negative values. # Notes - Be mindful of edge cases such as single-element grids. - Aim to optimize the solution for larger grids to ensure it runs within reasonable time limits.","solution":"from itertools import accumulate from typing import List def maxSubarraySum(grid: List[List[int]], k: int) -> int: # Function to calculate the sum of subarray (i, j) to (i + p, j + q) def getSum(prefix, i1, j1, i2, j2): total = prefix[i2+1][j2+1] if j1 > 0: total -= prefix[i2 + 1][j1] if i1 > 0: total -= prefix[i1][j2 + 1] if i1 > 0 and j1 > 0: total += prefix[i1][j1] return total if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Compute prefix sum for the grid prefix = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): prefix[i + 1][j + 1] = grid[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j] result = float(\'-inf\') # Iterate over all possible top-left and bottom-right corners of subarrays for i1 in range(m): for j1 in range(n): for i2 in range(i1, m): for j2 in range(j1, n): current_sum = getSum(prefix, i1, j1, i2, j2) if current_sum <= k: result = max(result, current_sum) return result if result != float(\'-inf\') else 0"},{"question":"Given an undirected graph with N nodes and M edges, you need to find the number of connected components present in the graph. ------ Input ------ The first line contains two integers N and M — the number of nodes and the number of edges, respectively. Each of the next M lines consists of two integers u and v — representing an undirected edge between node u and node v. ------ Output ------ Print the number of connected components in the graph. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 0 ≤ M ≤ 2 times 10^5 1 ≤ u, v ≤ N ------ Subtasks ------ Subtask #1 (100 points): Original Constraints ------ Sample Input ------ 6 5 1 2 2 3 4 5 5 6 4 6 ------ Sample Output ------ 2 ------ Explanation ------ There are 2 connected components in the graph: {1, 2, 3} and {4, 5, 6}","solution":"def find_connected_components(N, M, edges): Finds the number of connected components in an undirected graph. Parameters: N (int): Number of nodes M (int): Number of edges edges (list of tuples): List of edges (u, v) representing an undirected edge between node u and node v Returns: int: Number of connected components from collections import defaultdict, deque # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) connected_components = 0 for node in range(1, N + 1): if not visited[node]: connected_components += 1 visited[node] = True bfs(node) return connected_components"},{"question":"Anna is organizing a book fair and she wants to arrange the books in a sequence on a single shelf. Each book has a unique integer identifier. One of the book arrangement puzzles involves identifying if it\'s possible to organize a selected subset of books such that their identifiers form a consecutive sequence. Write a program to determine if this is possible for the books selected from the book fair. -----Input----- The input consists of a single test case. The first line contains an integer m (1 le m le 1000), the number of books Anna wants to check. The second line contains m integers b_i representing the identifiers of the selected books (1 le b_i le 1000). -----Output----- Output YES if it is possible to arrange the selected books such that their identifiers form a consecutive sequence. Otherwise, output NO. -----Examples----- Sample Input: 5 3 5 4 7 6 Sample Output: YES Sample Input: 4 10 12 13 11 Sample Output: YES Sample Input: 3 5 7 9 Sample Output: NO","solution":"def can_form_consecutive_sequence(m, book_ids): Determine if the given book identifiers can form a consecutive sequence. Parameters: m (int): Number of books (1 <= m <= 1000) book_ids (list of int): List of m book identifiers (1 <= b_i <= 1000) Returns: str: \\"YES\\" if the books can be arranged consecutively, \\"NO\\" otherwise # Find the minimum and maximum identifier min_id = min(book_ids) max_id = max(book_ids) # Check if the range min_id to max_id forms a sequence of length m if max_id - min_id + 1 == m and len(set(book_ids)) == m: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of integers. Your task is to find the smallest subarray with a sum greater than or equal to a given value x. If such a subarray doesn\'t exist, return -1. Input The first line of input contains two integers n and x (1 ≤ n ≤ 100, 0 ≤ x ≤ 1,000,000), the size of the array and the value x. The second line contains n integers representing the elements of the array. Output Output the length of the smallest subarray with a sum greater than or equal to x. If no such subarray exists, return -1. Example Input 6 15 1 2 3 4 5 6 Output 3 Explanation The smallest subarray with a sum ≥ 15 is [4, 5, 6], which has a length of 3.","solution":"def smallest_subarray_with_sum(arr, x): n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a weighted, undirected graph represented as an adjacency list. Your task is to find the minimum spanning tree (MST) of this graph using Prim\'s algorithm. The graph is connected and has `n` vertices where `1 <= n <= 1000`. The graph is represented using a dictionary where keys are node identifiers and values are lists of tuples. Each tuple contains a neighbor node identifier and the weight of the edge connecting them. You need to calculate and return the total weight of the MST. # Input - n (integer): The number of nodes in the graph. - edges (dictionary): The graph represented as an adjacency list, where each key is a node identifier, and each value is a list of tuples (neighbor, weight). # Output - Integer: The total weight of the MST. # Example Input ```python n = 5 edges = { 0: [(1, 2), (3, 6)], 1: [(0, 2), (2, 3), (3, 8), (4, 5)], 2: [(1, 3), (4, 7)], 3: [(0, 6), (1, 8)], 4: [(1, 5), (2, 7)] } ``` Output ```python 16 ``` # Explanation The minimum spanning tree (MST) for the example graph could be: - 0 -- 1 : Weight 2 - 1 -- 2 : Weight 3 - 1 -- 4 : Weight 5 - 0 -- 3 : Weight 6 The total weight of the edges in the MST is `2 + 3 + 5 + 6 = 16`.","solution":"import heapq def prim_mst(n, edges): Returns the total weight of the MST using Prim\'s algorithm. :param n: Number of nodes in the graph. :param edges: Adjacency list representing the graph. :return: Total weight of the MST. total_weight = 0 visited = [False] * n min_heap = [(0, 0)] # (weight, start_node) while min_heap: weight, current_node = heapq.heappop(min_heap) if visited[current_node]: continue total_weight += weight visited[current_node] = True for neighbor, edge_weight in edges[current_node]: if not visited[neighbor]: heapq.heappush(min_heap, (edge_weight, neighbor)) return total_weight"},{"question":"The Fibonacci sequence is a series of numbers in which each number (called Fibonacci number) is the sum of the two preceding ones. The sequence commonly starts from 0 and 1. That is, [ F(0) = 0, F(1) = 1 ] [ F(n) = F(n-1) + F(n-2), text{ for } n > 1. ] Given a number n, decide whether it is part of the Fibonacci sequence. If it is part of the Fibonacci sequence, return the n-th Fibonacci number. Otherwise, return -1. Function Description Complete the function fibonacciCheck in the editor below. It should return an integer, either the n-th Fibonacci number if n is part of the sequence, or -1 if it is not. fibonacciCheck has the following parameter(s): - n: an integer that represents the number to be checked. Input Format A single integer n. Constraints 0 leq n leq 10^9 Output Format Print the n-th Fibonacci number if n is part of the sequence, otherwise print -1. Sample Input 5 Sample Output 5 Explanation The first seven Fibonacci numbers are: [ 0, 1, 1, 2, 3, 5, 8 ] Since 5 is a part of this sequence, output should be 5. Sample Input 4 Sample Output -1 Explanation 4 is not part of the Fibonacci sequence, so the output should be -1.","solution":"def fibonacciCheck(n): Check if `n` is a Fibonacci number. If it is, return the n-th Fibonacci number, else return -1. Parameters: n (int): The number to be checked. Returns: int: The n-th Fibonacci number if `n` is part of the sequence, otherwise -1. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 while b < n: a, b = b, a + b if b == n: return n else: return -1"},{"question":"A group of friends went on a road trip and they decided to equally share the total distance driven. Each friend drove a certain distance, and now they want to determine if any friend should compensate another due to imbalance in distances driven. Write a program to calculate the additional distance each friend should have driven to ensure the distances are balanced, or if they are already balanced. Function Description: Complete the `balanceDrivingDistances` function in the editor below. It should return a list where each element indicates the distance that friend should have driven (or zero if already balanced). `balanceDrivingDistances` has the following parameter(s): - distances: an array of integers representing the distance driven by each friend. Input Format: - The first line contains a single integer n, the number of friends. - The second line contains n space-separated integers distances[i] where 1 ≤ i < n. Constraints: - 2 ≤ n ≤ 10^5 - 0 ≤ distances[i] ≤ 10^5 Output Format: - Return an array of integers where each integer indicates the distance each friend should have driven. Sample Input 0: 3 100 200 150 Sample Output 0: -50 50 0 Explanation 0: The total distance driven is 100 + 200 + 150 = 450. Each friend should have driven 450 / 3 = 150. The output array indicates that the first friend should have driven 50 more kilometers, the second friend should have driven 50 less kilometers, and the third friend is balanced. Sample Input 1: 4 90 70 80 60 Sample Output 1: 15 -5 5 -15 Explanation 1: The total distance driven is 90 + 70 + 80 + 60 = 300. Each friend should have driven 300 / 4 = 75. The output array indicates the discrepancies for each friend to balance the distances: - First friend: 90 - 75 = 15 km more. - Second friend: 70 - 75 = -5 km less. - Third friend: 80 - 75 = 5 km more. - Fourth friend: 60 - 75 = -15 km less.","solution":"def balanceDrivingDistances(distances): Calculates the additional distance each friend should have driven to balance the distances. Args: distances (list): A list of integers representing the distance driven by each friend. Returns: list: A list of integers representing the distance each friend should have driven (or zeros if already balanced). n = len(distances) total_distance = sum(distances) avg_distance = total_distance // n result = [distance - avg_distance for distance in distances] return result"},{"question":"Alice and Bob are playing a game involving strings. Alice has an initial string consisting solely of the characters \'a\' and \'b\'. Bob can perform a set number of operations on the string. Each operation consists of choosing a substring of the string where all characters are the same and replacing this substring with a single character, either \'a\' or \'b\'. Alice wants to know the minimum number of operations Bob needs to perform to make the entire string consist of identical characters, either all \'a\'s or all \'b\'s. Input - The first line contains an integer t, the number of test cases (1 ≤ t ≤ 100). - Each of the next t lines contains a string s consisting of characters \'a\' and \'b\' (1 ≤ |s| ≤ 1000). Output For each test case, output the minimum number of operations required to make the string consist of identical characters. Examples Input 3 aabaaa bbabbaabb ab Output 1 3 1 Explanation 1. In the first example, Bob can replace the substring \\"aa\\" with a single \'a\' and then replace the substring \\"aaa\\" with a single \'a\', resulting in the string \\"aaaaa\\". 2. In the second example, Bob needs to perform three operations: replace \\"bb\\" with a single \'b\', then replace \\"aa\\" with a single \'a\', resulting in the string \\"bbbaabb\\". 3. In the third example, Bob needs to perform one operation: replace either \\"a\\" or \\"b\\" to make the entire string identical. Note In each test case, Bob will always choose the optimal substrings to minimize the number of operations required.","solution":"def min_operations_to_uniform(s): Returns the minimum number of operations required to make the string `s` consist of identical characters. count_a = s.count(\'a\') count_b = s.count(\'b\') # The cost to convert all to \'a\'s or all to \'b\'s is effectively the number of \'b\'s or \'a\'s respectively. return min(count_a, count_b) def solve(t, strings): Solves t test cases for the minimum number of operations required to make each string consist of identical characters. results = [] for s in strings: results.append(min_operations_to_uniform(s)) return results # Reading input def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) strings = data[1:t+1] results = solve(t, strings) for result in results: print(result)"},{"question":"You are given an array of strings `strings` and an array of queries `queries`. Each query is represented as a tuple of two integers `(i, k)`. For each query, you need to determine the longest common prefix of the first `k` strings in the array `strings` starting from index `i` (0-based). The goal is to find the longest prefix string that is shared by all the strings within the specified range for each query. Input: - The first line contains two integers `n` and `m`, where `n` is the number of strings in the array `strings`, and `m` is the number of queries. - The second line contains `n` strings separated by a space. - The next `m` lines each contain two integers `i` and `k` which represent a query. Output: - For each query, output the longest common prefix of the `k` strings starting from index `i`. If no common prefix exists, output an empty string. Constraints: - 1 ≤ n, m ≤ 10^5 - 1 ≤ length of each string ≤ 100 - 0 ≤ i < n - 1 ≤ k ≤ n - i SAMPLE INPUT: 5 3 flower flow flight fleet fly 0 3 1 2 2 3 SAMPLE OUTPUT: fl fl fl Explanation: - For the first query (0, 3), the first 3 strings starting from index 0 are [flower, flow, flight], and their longest common prefix is \\"fl\\". - For the second query (1, 2), the first 2 strings starting from index 1 are [flow, flight], and their longest common prefix is \\"fl\\". - For the third query (2, 3), the first 3 strings starting from index 2 are [flight, fleet, fly], and their longest common prefix is \\"fl\\".","solution":"def longest_common_prefix(strings, queries): def find_lcp(strs): if not strs: return \\"\\" min_len = min(len(s) for s in strs) lcp = strs[0][:min_len] for s in strs: for i in range(len(lcp)): if lcp[i] != s[i]: lcp = lcp[:i] break return lcp results = [] for i, k in queries: subset = strings[i:i+k] results.append(find_lcp(subset)) return results"},{"question":"Implement a function to calculate the factorial of a non-negative integer. Factorial is the product of all positive integers less than or equal to the given number. The factorial of 0 is defined to be 1. Example: Given num = 5, return 120. Given num = 0, return 1. Do not use any built-in factorial function or libraries. Credits: Special thanks to @username1 for providing this problem and creating all test cases.","solution":"def factorial(num): Returns the factorial of a non-negative integer num. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. The factorial of 0 is 1. :param num: A non-negative integer :return: The factorial of the number if num < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if num == 0: return 1 result = 1 for i in range(1, num + 1): result *= i return result"},{"question":"Given an integer array of size `n` containing only 0s and 1s, you are allowed to flip at most one 0 to a 1. You need to find the maximum length of a contiguous subarray consisting only of 1s that can be obtained by making at most one flip. -----Input----- The input contains a single line with an integer array of size `n` (1 ≤ n ≤ 10^5), with each element being either 0 or 1. -----Output----- Output a single integer, the maximum length of a contiguous subarray consisting only of 1s that can be obtained by making at most one flip. -----Examples----- Sample Input: 1 0 1 1 0 1 1 1 Sample Output: 5","solution":"def find_max_ones_with_flip(arr): Finds the maximum length of a contiguous subarray consisting only of 1s that can be obtained by making at most one flip from 0 to 1. :param arr: A list of integers (only 0s and 1s) :return: The maximum length of contiguous 1s obtainable by flipping one 0 to 1 n = len(arr) # Initialize pointers for sliding window and some necessary variables left = 0 num_of_zeros = 0 max_length = 0 # Iterate through the array with the right pointer for right in range(n): # Increment the count of zeros if we encounter one if arr[right] == 0: num_of_zeros += 1 # We are only allowed to flip one zero, so if there are more, move the left pointer while num_of_zeros > 1: if arr[left] == 0: num_of_zeros -= 1 left += 1 # Calculate the current length of the window max_length = max(max_length, right - left + 1) return max_length"},{"question":"Alice is working on a project involving strings, and she needs to analyze the structure of various strings. She defines a good substring as a contiguous substring that appears at least twice in the original string but does not overlap with itself. Alice wants to know the length of the longest good substring in the given string. Constraints * 1 leq |s| leq 1000 * s consists of lowercase English letters only. Input A single string s is given from Standard Input. Output Print the length of the longest good substring. If no such substring exists, print 0. Examples Input banana Output 3 Input abcdefg Output 0","solution":"def longest_good_substring(s): max_len = 0 n = len(s) # Helper function to check if a substring appears at least twice def does_repeat(substr): first_occurrence = s.find(substr) second_occurrence = s.find(substr, first_occurrence + 1) return second_occurrence != -1 # Check all possible substring lengths starting from 1 for length in range(1, n): for start in range(n - length + 1): substr = s[start:start + length] if does_repeat(substr): max_len = max(max_len, length) return max_len"},{"question":"Given a grid of size MxN filled with integers, you\'re required to find the sum of all unique elements in the grid. Input: - The first line contains two integers M and N, denoting the number of rows and columns of the grid, respectively. - The next M lines each contain N integers representing the elements of the grid. Output: - Print a single integer, the sum of all unique elements in the grid. Constraints: 1 ≤ M, N ≤ 1000 -10^3 ≤ Grid_Elements ≤ 10^3 SAMPLE INPUT 3 3 1 2 3 4 5 6 1 2 3 SAMPLE OUTPUT 15 Explanation: In the above grid, the unique elements are 4, 5, and 6. The sum of these unique elements is 15.","solution":"def sum_of_unique_elements(grid): Returns the sum of all unique elements in the grid. :param grid: list of list of integers representing the grid :return: sum of all unique elements in the grid element_count = {} for row in grid: for element in row: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 unique_elements_sum = sum(element for element, count in element_count.items() if count == 1) return unique_elements_sum def parse_input(input_str): Parses the input string to generate the grid :param input_str: str representing the grid input :return: grid as a list of lists lines = input_str.strip().split(\\"n\\") M, N = map(int, lines[0].split()) grid = [list(map(int, lines[i + 1].split())) for i in range(M)] return grid def main_function(input_str): grid = parse_input(input_str) return sum_of_unique_elements(grid)"},{"question":"# Sum of Subarray Minimums Given an array of integers `arr`, find the sum of all possible subarrays\' minimum values, and return that sum. Since the answer may be large, return it modulo `10^9 + 7`. A subarray is a contiguous part of an array, and the minimum value of a subarray is the smallest element in that subarray. # Example: ``` Input: [3, 1, 2, 4] Output: 17 Explanation: Subarrays are [3], [1], [2], [4], [3, 1], [1, 2], [2, 4], [3, 1, 2], [1, 2, 4], [3, 1, 2, 4]. Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum of these minimums is 17. Input: [11, 81, 94, 43, 3] Output: 444 ``` # Constraints: - `1 <= arr.length <= 3 * 10^4` - `1 <= arr[i] <= 3 * 10^4` Your task is to implement a function: ```python def sumOfSubarrayMinimums(arr: List[int]) -> int: ```","solution":"from typing import List MOD = 10**9 + 7 def sumOfSubarrayMinimums(arr: List[int]) -> int: n = len(arr) stack = [] left = [0] * n right = [0] * n for i in range(n): count = 1 while stack and stack[-1][0] > arr[i]: count += stack.pop()[1] left[i] = count stack.append((arr[i], count)) stack.clear() for i in range(n - 1, -1, -1): count = 1 while stack and stack[-1][0] >= arr[i]: count += stack.pop()[1] right[i] = count stack.append((arr[i], count)) result = 0 for i in range(n): result = (result + arr[i] * left[i] * right[i]) % MOD return result"},{"question":"Merge Two Sorted Lists You will be given two sorted linked lists as input. Your task is to merge them into a single sorted linked list and return the head of the merged list. You can assume that the input linked lists are sorted in non-decreasing order. # Example ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_lists(l1: ListNode, l2: ListNode) -> ListNode: # Implement your solution here # Example usage: # Input: # List1: 1 -> 2 -> 4 # List2: 1 -> 3 -> 4 # Output: # Merged List: 1 -> 1 -> 2 -> 3 -> 4 -> 4 def print_list(node: ListNode): while node: print(node.val, end=\\" -> \\") node = node.next print(\\"None\\") # Creating linked lists for testing l1 = ListNode(1, ListNode(2, ListNode(4))) l2 = ListNode(1, ListNode(3, ListNode(4))) merged_head = merge_two_lists(l1, l2) print_list(merged_head) # Output: 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> None ``` # Notes: - The function should handle cases where one or both input linked lists are empty. - Ensure the resultant linked list is sorted in non-decreasing order. - The input linked lists should not be modified. If needed, create new nodes for the merged list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_lists(l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = ListNode(l1.val) l1 = l1.next else: current.next = ListNode(l2.val) l2 = l2.next current = current.next while l1: current.next = ListNode(l1.val) l1 = l1.next current = current.next while l2: current.next = ListNode(l2.val) l2 = l2.next current = current.next return dummy.next def print_list(node: ListNode): while node: print(node.val, end=\\" -> \\") node = node.next print(\\"None\\") # Creating linked lists for testing l1 = ListNode(1, ListNode(2, ListNode(4))) l2 = ListNode(1, ListNode(3, ListNode(4))) merged_head = merge_two_lists(l1, l2) print_list(merged_head) # Output: 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> None"},{"question":"Given a string S and a character C, determine the distance of the closest occurrence of character C from each character in the string S. Return the distances as a list of integers of the same length as the string S. Example 1: Input: S = \\"loveleetcode\\", C = \'e\' Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] Explanation: The distances of the occurrences of \'e\' from each character in \\"loveleetcode\\" are [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]. Example 2: Input: S = \\"aaab\\", C = \'b\' Output: [3, 2, 1, 0] Explanation: The distances of the occurrences of \'b\' from each character in \\"aaab\\" are [3, 2, 1, 0]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function closestDistance() which takes a string S and a character C as input parameters and returns a list of integers representing distances of the closest occurrence of character C from each character in the string S. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(S) <= 10^5 S[i], C are lowercase English letters and character C is guaranteed to be in string S.","solution":"def closestDistance(S, C): n = len(S) result = [float(\'inf\')] * n # First pass: Left to right prev_pos = -float(\'inf\') for i in range(n): if S[i] == C: prev_pos = i result[i] = i - prev_pos # Second pass: Right to left prev_pos = float(\'inf\') for i in range(n-1, -1, -1): if S[i] == C: prev_pos = i result[i] = min(result[i], prev_pos - i) return result"},{"question":"You are given a string S consisting of lowercase English letters. You need to determine the character which appears the most frequently in the string. If there are multiple characters that appear the same number of times, return the lexicographically smallest one. ------ Input Format ------ - The first and only line of input contains a string S. ------ Output Format ------ - For each test case, print a single character – the most frequent character in the string. If there are multiple characters, print the lexicographically smallest one. ------ Constraints ------ 1 ≤ |S| ≤ 10^5 ------ Sample Input 1 ------ abacabad ------ Sample Output 1 ------ a ------ Explanation 1 ------ The character \'a\' appears 4 times, which is the highest count. No other character exceeds this, so \'a\' is the most frequent. ------ Sample Input 2 ------ abcabc ------ Sample Output 2 ------ a ------ Explanation 2 ------ Both \'a\', \'b\', and \'c\' appear 2 times each. Since \'a\' is lexicographically smallest, it is the result.","solution":"def most_frequent_char(s): Returns the most frequent character in the string. If multiple characters have the same highest frequency, the lexicographically smallest one is returned. from collections import Counter # Calculate the frequency of each character frequency = Counter(s) # Find the maximum frequency max_freq = max(frequency.values()) # Find characters with the maximum frequency most_frequent_chars = [char for char, freq in frequency.items() if freq == max_freq] # Return the lexicographically smallest character return min(most_frequent_chars)"},{"question":"Given an integer array nums of length n, return the maximum possible difference between the largest and smallest values of any non-empty subarray of nums. A subarray is a contiguous portion of the array. Example 1: Input: nums = [2, 1, 5, 3, 6] Output: 5 Explanation: The subarray [1, 5, 3, 6] has the maximum difference 6 - 1 = 5. Example 2: Input: nums = [3, 1, 4, 1, 5] Output: 4 Explanation: The subarray [1, 4, 1, 5] has the maximum difference 5 - 1 = 4. Example 3: Input: nums = [7, 2, 6, 4, 3] Output: 5 Explanation: The subarray [2, 6] has the maximum difference 6 - 2 = 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxDifference() which takes the array nums and the integer n as input parameters, and returns the maximum difference between the largest and smallest values of any non-empty subarray. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9","solution":"def maxDifference(nums): Returns the maximum possible difference between the largest and smallest values of any non-empty subarray of nums. n = len(nums) min_elem = nums[0] max_diff = 0 for i in range(1, n): max_diff = max(max_diff, nums[i] - min_elem) min_elem = min(min_elem, nums[i]) return max_diff"},{"question":"Anna is a computer science student who loves working with strings. Her professor has assigned her a new problem that she finds intriguing and challenging. She seeks your assistance to solve it. Problem is: Given a string s, determine if it can be made a palindrome by removing at most one character. A palindrome is a word that reads the same forwards and backwards. For example: - s = \\"abca\\" can be made into \\"aca\\" or \\"aba\\" which are palindromes, so the answer is \\"YES\\". - s = \\"abc\\" cannot be made into a palindrome by removing just one character, so the answer is \\"NO\\". [Input] First line of the input contains an integer t denoting the number of test cases. Each of the next t lines contains a string s. [Output] For each test case, output \\"YES\\" if the string can be made a palindrome by removing at most one character, otherwise print \\"NO\\". [Constraints] 1 ≤ t ≤ 100000 1 ≤ length of s ≤ 100000 Note: Use printf / scanf instead of cin and cout . SAMPLE INPUT 2 abca abc SAMPLE OUTPUT YES NO","solution":"def is_almost_palindrome(s): Determines if a string can be made into a palindrome by removing at most one character. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True i, j = 0, len(s) - 1 while i < j: if s[i] != s[j]: return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1) i += 1 j -= 1 return True def process_test_cases(t, test_cases): results = [] for s in test_cases: if is_almost_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A large retailer wants to introduce a new product identification system where each product is given a unique code. Each code must be a positive integer that satisfies the following conditions: 1. The code contains only the digits 1, 2, and 3. 2. Each digit should appear at least once in the code. 3. The sum of the digits must be divisible by 3. To simplify the implementation, you have been asked to write a program that generates the smallest possible code satisfying these conditions for a given length N. -----Input----- The first line contains T, the number of test cases. Each of the next T lines contains an integer N, representing the length of the code to be formed. 1 <= T <= 1000 1 <= N <= 1000000000 (10^9) -----Output----- For each test case, if it is possible to form such a code of length N, output the smallest possible code. Otherwise, output -1. -----Example----- Input: 4 3 6 5 1 Output: 123 123123 12312 -1 Explanation: In the first test case, the smallest code of length 3 that meets all conditions is \\"123\\". In the second test case, the smallest possible code of length 6 is \\"123123\\". In the third test case, the smallest code of length 5 that meets all conditions is \\"12312\\". In the fourth test case, it is not possible to form a code of length 1 that meets all conditions. Hence, the output is -1.","solution":"def generate_smallest_code(n): if n < 3: return -1 base_code = \\"123\\" full_repeats = n // 3 remainder = n % 3 if remainder == 0: return base_code * full_repeats elif remainder == 1: return base_code * (full_repeats - 1) + \\"1231\\" else: return base_code * (full_repeats - 1) + \\"12312\\" def process_test_cases(test_cases): results = [] for n in test_cases: results.append(generate_smallest_code(n)) return results"},{"question":"Given an unsorted array of size N. Find the position (0-based index) of the first repeating element. The element should occurs more than once and the index of its first occurrence should be the smallest index. Example 1: Input: N = 7 arr[] = {1, 5, 3, 4, 3, 5, 6} Output: 1 Explanation: 5 is the first element that repeats, and it appears at index 1. Example 2: Input: N = 5 arr[] = {1, 2, 3, 4, 5} Output: -1 Explanation: No element repeats, hence output is -1. Example 3: Input: N = 4 arr[] = {1, 2, 1, 2} Output: 0 Explanation: 1 is the first element that repeats, and it appears at index 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function firstRepeating() which takes the array and its size as input and returns the position of the first repeating element. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^6 1 ≤ arr[i] ≤ 10^6","solution":"def first_repeating(arr, N): Returns the position (0-based index) of the first repeating element. If no element repeats, returns -1. element_dict = {} min_index = float(\'inf\') for i in range(N): if arr[i] in element_dict: min_index = min(min_index, element_dict[arr[i]]) else: element_dict[arr[i]] = i return min_index if min_index != float(\'inf\') else -1"},{"question":"You are given a string composed of digits \'1\' and \'0\' only. We define a transformation procedure on the string: - In each step, any substring \\"10\\" can be transformed into the substring \\"01\\". The goal is to determine if, after a series of transformations, the resulting string can be sorted in non-decreasing order (\'0\'s before \'1\'s). Write a function that takes a string s of length n (1 ≤ n ≤ 1000) as input and returns \\"YES\\" if the string can be sorted by applying the given transformation any number of times, otherwise return \\"NO\\". Input - A single line containing a string s of length n (1 ≤ n ≤ 1000) composed of \'1\' and \'0\'. Output - Output \\"YES\\" if the string can be sorted by applying the transformation described, otherwise output \\"NO\\". Examples Input 1100 Output YES Input 1010 Output YES Input 0011 Output YES Input 010101 Output YES Note In the first example, one possible way to sort the string is: - Step 1: Transform \\"10\\" to \\"01\\", resulting in \\"1010\\" - Step 2: Transform \\"10\\" to \\"01\\", resulting in \\"1001\\" - Step 3: Transform another \\"10\\" to \\"01\\", resulting in \\"0110\\" - Step 4: Finally, transform \\"10\\" to \\"01\\", resulting in \\"0011\\" In the second example, one possible way is: - Step 1: \\"10\\" to \\"01\\", resulting in \\"1100\\" - Step 2: \\"10\\" to \\"01\\", resulting in \\"1010\\" - Step 3: \\"10\\" to \\"01\\", resulting in \\"1001\\" - Step 4: \\"10\\" to \\"01\\", resulting in \\"0110\\" - Step 5: Finally, \\"10\\" to \\"01\\", resulting in \\"0011\\" In the third example, the string is already sorted. In the fourth example, additional transformations can sort the string.","solution":"def can_be_sorted_by_transformations(s): Returns \\"YES\\" if the given string composed of \'1\' and \'0\' can be sorted by applying the transformation \\"10\\" -> \\"01\\" any number of times. # The string can be sorted if a \\"10\\" can always be transformed into a \\"01\\", # which effectively means we can always sort a string with 0\'s and 1\'s using the given rule. return \\"YES\\""},{"question":"In an imaginary world, there are M monsters and N wizards. Each monster has a certain strength, and each wizard has a certain power level. Monsters and wizards can be engaged in combat, and the outcome is determined by the following rules: 1. A wizard Wj can defeat a monster Mi if the power level of Wj is greater than the strength of Mi. 2. If multiple wizards can defeat a monster, the wizard with the lowest power level will be selected. Given the strength of each monster and the power level of each wizard, you are required to determine which wizard will defeat each monster. If no wizard can defeat a monster, the output should indicate \\"NO WIZARD\\". Input: The first line contains two integers M (number of monsters) and N (number of wizards). The second line contains M integers, where the ith integer represents the strength of the ith monster. The third line contains N integers, where the ith integer represents the power level of the ith wizard. Output: Print M lines, where each line contains either the index of the wizard (1-based indexing) who will defeat the corresponding monster, or \\"NO WIZARD\\" if no wizard can defeat that monster. Constraints: 1 ≤ M, N ≤ 10^5 1 ≤ strength, power level ≤ 10^6 Sample Input: 3 4 500 1000 3000 600 1200 800 4000 Sample Output: 1 2 4 Explanation: - The first monster with strength 500 is defeated by the 1st wizard with power level 600. - The second monster with strength 1000 is defeated by the 2nd wizard with power level 1200. - The third monster with strength 3000 is defeated by the 4th wizard with power level 4000.","solution":"def determine_winners(monster_strengths, wizard_powers): Determines which wizard defeats each monster according to their power levels. Parameters: - monster_strengths (list): A list of integers where the ith integer represents the strength of the ith monster. - wizard_powers (list): A list of integers where the ith integer represents the power level of the ith wizard. Returns: - list: A list where each element is either the 1-based index of the winning wizard or \\"NO WIZARD\\" if no wizard can defeat the corresponding monster. # Sort wizrds\' power levels with original indexes indexed_wizards = sorted((power, i + 1) for i, power in enumerate(wizard_powers)) result = [] for strength in monster_strengths: # Try to find the lowest power level wizard that can defeat the monster. index = next((index for power, index in indexed_wizards if power > strength), None) if index is None: result.append(\\"NO WIZARD\\") else: result.append(index) return result"},{"question":"Polycarp has a string s consisting of lowercase English letters. He can perform the following operation on string s any number of times: Select any subsegment of the string and reverse it. Polycarp wants to know the lexicographically smallest string he can obtain by performing the above operation any number of times. Can you help him find it? You need to answer t independent test cases. -----Input----- The first line contains the number t (1 le t le 10^4) — the number of test cases. Each of the following t lines contains a single string s of length (1 le |s| le 10^5) — the string that Polycarp needs to transform. It is guaranteed that the total length of all strings does not exceed 10^6. -----Output----- Print t lines. On each line print one string — the lexicographically smallest string possible for the corresponding test case. -----Examples----- Input 3 cba bca acb Output abc abc abc -----Note----- In the first test case, s=cba. Polycarp can reverse the whole string to get abc, which is the lexicographically smallest string. In the second test case, s=bca. Polycarp can reverse the substring from index 1 to 3 to get acb, then reverse the whole string to get abc. In the third test case, s=acb. Polycarp can reverse the substring from index 2 to 3 to get abc.","solution":"def smallest_string_after_reversals(t, strings): Given t independent test cases with strings consisting of lowercase English letters, return the lexicographically smallest string that can be obtained by reversing subsegments. return [\'\'.join(sorted(s)) for s in strings]"},{"question":"Given a string S consisting of lowercase English letters. Your task is to identify the longest palindrome that can be formed using the characters in the string and return its length. Example 1: Input: S = \\"abccccdd\\" Output: 7 Explanation: One possible longest palindrome that can be formed is \\"dccaccd\\", which has a length of 7. Example 2: Input: S = \\"a\\" Output: 1 Explanation: The longest palindrome that can be formed is \\"a\\", which has a length of 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestPalindrome() which takes a string S as input and returns an integer representing the length of the longest palindrome that can be formed using the characters in the string. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 1000","solution":"def longestPalindrome(S): Returns the length of the longest palindrome that can be formed using the characters in the string S. from collections import Counter char_count = Counter(S) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True # Add one if any odd count was found, to place a single char in the middle if odd_found: length += 1 return length"},{"question":"Given an array of distinct integers, implement a function that returns all possible unique permutations of the array in lexicographic order. Example 1: Input: nums = [1, 2, 3] Output: [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] Example 2: Input: nums = [0, 1] Output: [ [0, 1], [1, 0] ] Example 3: Input: nums = [1] Output: [ [1] ] Constraints: - 1 <= nums.length <= 6 - -10 <= nums[i] <= 10 - All the integers of nums are unique.","solution":"import itertools def permute(nums): Returns all possible unique permutations of the array in lexicographic order. return sorted(list(itertools.permutations(nums)))"},{"question":"Nicole loves arranging flowers in unique ways. She has a garden with plants lined up in a row, each having a specific height. On a particular day, she decides to pluck some flowers to create a beautiful bouquet. However, she wants her bouquet to be special in a way that all flowers in it are of unique heights. She can choose any contiguous subarray of flowers for her bouquet and aims to maximize the number of flowers in her bouquet. Your task is to determine the length of the longest contiguous subarray where all elements are unique. -----Input----- The first line contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N, the length of the array, followed by N space-separated integers representing the heights of the plants. -----Output----- For each test case, output a single integer which is the length of the longest contiguous subarray with all unique elements. -----Constraints----- - T <= 100 in each test file - 1 <= N <= 10^5 - 0 <= plant height <= 10^9 -----Example----- Input: 2 7 2 3 4 5 5 6 7 5 1 2 3 4 5 Output: 4 5 -----Explanation----- For the first test case, the longest contiguous subarray with unique elements is [2, 3, 4, 5] which has length 4. For the second test case, the entire array is composed of unique elements, so the result is 5.","solution":"def longest_unique_subarray_length(T, test_cases): results = [] for test_case in test_cases: N, array = test_case last_index = {} max_length = 0 start = 0 for end in range(N): if array[end] in last_index: start = max(start, last_index[array[end]] + 1) last_index[array[end]] = end max_length = max(max_length, end - start + 1) results.append(max_length) return results # Example Usage: # T = 2 # test_cases = [(7, [2, 3, 4, 5, 5, 6, 7]), (5, [1, 2, 3, 4, 5])] # print(longest_unique_subarray_length(T, test_cases)) # Output should be [4, 5]"},{"question":"You are a software developer working on a new application. As part of this application, you need to calculate an optimal path through a grid for delivery robots. The grid is represented as an `n x m` matrix where each cell contains a positive integer, representing the cost of passing through that cell. The robots can move up, down, left, or right, but cannot move diagonally. Your task is to determine the minimum cost for a robot to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 500) — the dimensions of the grid. Each of the next `n` lines contains `m` integers separated by spaces, where the j-th integer on the i-th line represents the cost `a_ij` of the cell in the i-th row and the j-th column (1 ≤ a_ij ≤ 1000). Output Output a single integer representing the minimum cost to travel from the top-left to the bottom-right corner of the grid. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Note In the given example, one possible path with the minimum cost is to move right three times and then down twice, resulting in a total cost of 1 -> 3 -> 1 -> 1 -> 1 = 7.","solution":"def min_cost_path(n, m, grid): Function to find the minimum cost path in a grid from the top-left to bottom-right corner. Parameters: n (int): Number of rows. m (int): Number of columns. grid (list of list of int): The n x m grid where each cell contains the cost. Returns: int: Minimum cost to travel from the top-left to the bottom-right corner. # Create a 2D list to store the minimum cost for each cell cost = [[0] * m for _ in range(n)] # Initialize the cost for the top-left cell cost[0][0] = grid[0][0] # Initialize the cost for the first row for j in range(1, m): cost[0][j] = cost[0][j-1] + grid[0][j] # Initialize the cost for the first column for i in range(1, n): cost[i][0] = cost[i-1][0] + grid[i][0] # Fill the remaining costs using the minimum of the adjacent cells (left and up) for i in range(1, n): for j in range(1, m): cost[i][j] = grid[i][j] + min(cost[i-1][j], cost[i][j-1]) return cost[n-1][m-1]"},{"question":"Digits Reversal Problem Statement Given a non-negative integer n, reverse the digits of n and determine if the resultant number is a prime. Write a function to check whether the reversed number is a prime number or not. A prime number is a number greater than 1 with no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, 11 are prime numbers, while 1, 4, 6, 8, 9 are not. Constraints * 1 ≤ n ≤ 10^5 Input Input follows the following format. The given number is an integer. n Output Output \\"Prime\\" if the reversed number is a prime, otherwise output \\"Not Prime\\". Examples Input 13 Output Prime Input 123 Output Not Prime Input 709 Output Prime","solution":"def is_prime(num): Returns True if the input number is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def reverse_num(n): Returns the reversed digits of the input number. return int(str(n)[::-1]) def is_reversed_prime(n): Returns \\"Prime\\" if the reversed number of n is a prime, otherwise \\"Not Prime\\". reversed_number = reverse_num(n) if is_prime(reversed_number): return \\"Prime\\" else: return \\"Not Prime\\""},{"question":"Imagine you are organizing a large concert event and need to manage access to the tickets. Each ticket grants entry to one seat only and some ticketholders may have multiple tickets. Additionally, certain seats are reserved for VIPs and cannot be sold to general attendees. After selling tickets, you need to determine whether each ticketholder\'s tickets are valid and whether they can attend the concert. Write a program that verifies the validity of tickets for each ticketholder. # Input The input consists of multiple lines: The first line contains three integers: `n` (the total number of seats), `m` (the number of VIP reserved seats), and `p` (the number of ticketholders). The second line contains `m` integers, the seat numbers reserved for VIPs (1-based index). For the following `p` lines, each line describes a ticketholder: - The line starts with an integer `t` (the number of tickets they hold), followed by `t` integers representing the seat numbers requested by the ticketholder. # Output For each ticketholder, print \\"YES\\" if all their tickets are valid and none of the requested seats are reserved for VIPs. Otherwise, print \\"NO\\". # Constraints - Each ticket corresponds to a unique seat. - Seats are numbered from 1 to `n`. - There are at most 1000 seats. - VIP reserved seats and requested seat numbers are guaranteed to be 1-based and within the range [1, n]. - There are at most 1000 ticketholders. # Example Input ``` 10 3 2 3 5 7 2 1 4 2 5 8 ``` Output ``` YES NO ``` # Explanation - For the first ticketholder: they request seats 1 and 4 which are valid and not reserved for VIPs, so the output is \\"YES\\". - For the second ticketholder: they request seats 5 and 8, but seat 5 is reserved for VIPs, so the output is \\"NO\\".","solution":"def verify_tickets(n, m, p, vip_seats, ticketholders): vip_set = set(vip_seats) results = [] for holder in ticketholders: t = holder[0] requested_seats = holder[1:] valid = True for seat in requested_seats: if seat in vip_set: valid = False break if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"**Morse Code Converter** In this coding assessment, you will create a Python function that converts text to Morse code and vice versa. Morse code is a method of encoding text characters using sequences of dots and dashes. # Specifications: 1. Create a function `morse_converter(text)` that takes a single input: a string `text`. 2. The function should determine if the input string is plain text or Morse code: - Morse code will only consist of dots (.), dashes (-), single spaces, and slashes (/) for spaces between words. - Plain text will contain standard alphabetic characters and spaces. 3. If the input is plain text, convert it to Morse code. 4. If the input is Morse code, convert it to plain text. 5. Assume the input will consist only of letters and spaces (for plain text) and the described Morse code symbols (for Morse code). # Morse Code Reference: Note: Use \'/\' to represent a space between words in Morse code. ``` A: .- N: -. 0: ----- B: -... O: --- 1: .---- C: -.-. P: .--. 2: ..--- D: -.. Q: --.- 3: ...-- E: . R: .-. 4: ....- F: ..-. S: ... 5: ..... G: --. T: - 6: -.... H: .... U: ..- 7: --... I: .. V: ...- 8: ---.. J: .--- W: .-- 9: ----. K: -.- X: -..- L: .-.. Y: -.-- M: -- Z: --.. ``` # Example: ``` Input: \\"HELLO WORLD\\" Output: \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" Input: \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" Output: \\"HELLO WORLD\\" ``` # Additional Notes: - Ensure your function handles both uppercase and lowercase inputs by converting all plain text to uppercase before processing. - Handle invalid inputs, such as numbers or punctuation marks in plain text, or invalid Morse code characters, by returning an appropriate error message, e.g., \\"Invalid input\\". Implement the `morse_converter` function in Python.","solution":"def morse_converter(text): morse_to_text = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\', \'-----\': \'0\', \'.----\': \'1\', \'..---\': \'2\', \'...--\': \'3\', \'....-\': \'4\', \'.....\': \'5\', \'-....\': \'6\', \'--...\': \'7\', \'---..\': \'8\', \'----.\': \'9\' } text_to_morse = {v: k for k, v in morse_to_text.items()} if all(c in \'.- /\' for c in text.strip()): # Morse code to plain text decoded_message = [] words = text.split(\' / \') for word in words: decoded_word = \'\'.join(morse_to_text.get(symbol, \'\') for symbol in word.split()) decoded_message.append(decoded_word) return \' \'.join(decoded_message) elif all(c.isalpha() or c.isspace() for c in text): # Plain text to Morse code text = text.upper() encoded_message = [] words = text.split() for word in words: encoded_word = \' \'.join(text_to_morse.get(letter, \'\') for letter in word) encoded_message.append(encoded_word) return \' / \'.join(encoded_message) else: return \\"Invalid input\\""},{"question":"Write a function to determine if a given string can be segmented into a space-separated sequence of one or more dictionary words. Your function should take in two arguments: 1. A string to be segmented. 2. A list of valid dictionary words. The function should return a boolean indicating whether the string can be segmented as per the provided dictionary. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T test cases follows: - The first line contains the string s. - The second line contains an integer N, the number of words in the dictionary. - Each of the next N lines contains a dictionary word. ------ Output ------ For each test case, output a single line: \\"True\\" if the string can be segmented, \\"False\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ len(s) ≤ 10^5 1 ≤ N ≤ 10^3 1 ≤ len(word) ≤ 20 All dictionary words are lowercase alphabetic. The sum of lengths of all strings s in a single test case does not exceed 10^5. ------ Example ------ Input: ``` 2 leetcode 2 leet code applepenapple 3 apple pen applepen ``` Output: ``` True True ``` Explanation: In the first test case, the string \\"leetcode\\" can be segmented into \\"leet code\\", both of which are dictionary words. In the second test case, the string \\"applepenapple\\" can be segmented into \\"apple pen apple\\", all of which are dictionary words in the provided dictionary.","solution":"def can_segment_string(s, word_dict): Checks if the string s can be segmented into a space-separated sequence of one or more dictionary words. :param s: The string to be segmented. :param word_dict: A list of valid dictionary words. :return: True if the string can be segmented, False otherwise. word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True # Base case: an empty string can always be segmented for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)] def process_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) index = 1 results = [] for _ in range(t): s = lines[index] n = int(lines[index + 1]) word_dict = lines[index + 2:index + 2 + n] index += 2 + n result = can_segment_string(s, word_dict) results.append(result) return results"},{"question":"Write a function that takes an array of integers and a target integer as input. The function should find three distinct integers in the array whose sum is closest to the target integer. The function should return the sum of these three integers. If there are multiple possible solutions, return any of them. # Example Input: ``` [-1, 2, 1, -4], 1 ``` Output: ``` 2 ``` Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2) # Constraints - All input integers are within the range of -1000 to 1000. - The length of the array will be between 3 and 1000. - The target integer is within the range of -3000 to 3000.","solution":"def three_sum_closest(nums, target): nums.sort() # Sort the array to use the two-pointer strategy efficiently n = len(nums) closest_sum = float(\'inf\') for i in range(n - 2): # Fix one element and use two-pointer approach for the rest left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum # Update closest_sum if the current one is closer if current_sum < target: left += 1 # Move left pointer to the right to increase the sum elif current_sum > target: right -= 1 # Move right pointer to the left to decrease the sum else: # If current_sum is exactly the target, we can return it directly return current_sum return closest_sum"},{"question":"A string is considered \\"balanced\\" if the number of occurrences of \'A\' is equal to the number of occurrences of \'B\'. Given a string `S`, you can perform the following operation any number of times: select a non-empty substring of `S` which is balanced and remove it from `S`. Your task is to determine if it is possible to make `S` empty by performing the operation zero or more times. ------ Input Format ------ - The first line contains a single integer `T` - the number of test cases. The descriptions of the T test cases follow. - Each of the next T lines contains a single string `S`. ------ Output Format ------ - For each test case output \\"YES\\" if it is possible to make the string empty by repeatedly removing balanced substrings. Otherwise, output \\"NO\\". ------ Constraints ------ - 1 ≤ T ≤ 10^5 - 1 ≤ |S| ≤ 10^5 - S consists only of characters \'A\' and \'B\'. ------ Sample Input 1 ------ 3 AABB ABAB AAABBB ------ Sample Output 1 ------ YES YES YES ------ Explanation 1 ------ - Test case-1: \\"AABB\\" can be fully removed as two balanced substrings such as \\"AABB\\" itself or in parts like \\"AA\\" and then \\"BB\\". - Test case-2: \\"ABAB\\" can be removed as balanced substrings \\"AB\\" and \\"AB\\". - Test case-3: \\"AAABBB\\" can be completely removed as \\"AABABB\\" which can be done by first removing \\"ABAB\\" and then remaining \\"AA\\" and \\"BB\\".","solution":"def is_balanced_possible(S): Determines if it is possible to make the string empty by removing balanced substrings. Parameters: S (str): The input string consisting of \'A\' and \'B\'. Returns: str: \\"YES\\" if it is possible to make the string empty, \\"NO\\" otherwise. return \\"YES\\" if S.count(\'A\') == S.count(\'B\') else \\"NO\\" # Function to handle multiple test cases. def process_test_cases(T, test_cases): Processes multiple test cases to determine if each string can be made empty. Parameters: T (int): The number of test cases. test_cases (list): A list of test case strings. Returns: list: A list of \\"YES\\" or \\"NO\\" for each test case. results = [] for i in range(T): results.append(is_balanced_possible(test_cases[i])) return results"},{"question":"You are given an integer array representing the elevation of a landscape, where each element represents a unit of elevation at that index. Your task is to find the maximum amount of water that can be trapped after raining. Water can only be trapped between the elevations, and the water trapped at each index is the difference between the minimum of the maximum elevations to the left and right minus the elevation at that index. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of elements in the array. The second line contains n integers separated by spaces — the elements of the array, where each element is between 0 and 10^5. -----Output----- Print the maximum amount of water that can be trapped. -----Examples----- Input 6 0 1 0 2 1 0 Output 1 Input 9 0 2 1 3 0 1 2 1 2 Output 5","solution":"def max_water_trapped(elevations): Calculate the maximum amount of water that can be trapped between the elevations. if not elevations: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevations[i]) right_max[n - 1] = elevations[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevations[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevations[i] return water_trapped"},{"question":"A new online music streaming service has a recommendation system that suggests songs to its users. Each day, a user is provided with a list of recommended songs based on their previous listening habits. Each song has a unique identifier and a popularity score. The recommendation system aims to improve user satisfaction by ensuring that the recommendations include as many distinct songs as possible, where the sum of the popularity scores of the selected songs is maximized without exceeding a given daily listening limit. Given a list of songs with their unique identifiers and popularity scores, and the maximum allowable total popularity score for the day, determine the list of distinct song identifiers that should be recommended to the user. Input The first line contains an integer t (1 ≤ t ≤ 100,000) — the number of test cases. The description of each test case follows. Each test case begins with an integer m (1 ≤ m ≤ 300) — the maximum total popularity score for the day. The next line contains an integer l (1 ≤ l ≤ 100) — the number of songs. Each of the next l lines contains two integers: identifier (1 ≤ identifier ≤ 10^6) and popularity (1 ≤ popularity ≤ 100) — the identifier and popularity score of each song. Output For each test case, print a line with the identifiers of the songs that should be recommended. If there are multiple valid solutions, print any. SAMPLE INPUT 2 50 3 1 10 2 20 3 40 75 4 10 25 20 35 30 45 40 55 SAMPLE OUTPUT 1 2 10 20","solution":"def recommend_songs(t, test_cases): # Function to process each test case and generate song recommendations results = [] for i in range(t): m, songs = test_cases[i] songs = sorted(songs, key=lambda x: x[1]) # Sort songs by popularity score total_popularity = 0 selected_songs = [] for song in songs: if total_popularity + song[1] <= m: total_popularity += song[1] selected_songs.append(song[0]) results.append(\\" \\".join(map(str, selected_songs))) return results # Helper function to read the input in a structured format def format_input(raw_input): raw_input = raw_input.split(\\"n\\") t = int(raw_input[0]) index = 1 test_cases = [] for _ in range(t): m = int(raw_input[index]) l = int(raw_input[index + 1]) songs = [] for j in range(l): identifier, popularity = map(int, raw_input[index + 2 + j].split()) songs.append((identifier, popularity)) test_cases.append((m, songs)) index += 2 + l return t, test_cases # Sample input processing raw_input = \\"2n50n3n1 10n2 20n3 40n75n4n10 25n20 35n30 45n40 55\\" t, test_cases = format_input(raw_input) results = recommend_songs(t, test_cases) for result in results: print(result)"},{"question":"Alice is working with a grid-based robot. The robot can move up, down, left, or right, but it cannot move outside the boundaries of the grid. The robot needs to visit all cells of the grid exactly once. Alice wants to know if it\'s possible for the robot to achieve this starting from any cell in the grid. Your task is to determine if the robot can traverse the entire grid starting from any cell without revisiting any cell. Input Input consists of multiple datasets. Each dataset consists of 2 integers. The last input contains two 0. A dataset is given by the following format. n m where n is the number of rows and m is the number of columns. Input satisfies the following constraint: 1 ≤ n ≤ 10, 1 ≤ m ≤ 10 Output Print \\"possible\\" without quotes if it is indeed possible for the robot to traverse the entire grid without revisiting any cell starting from any cell; otherwise, print \\"impossible\\" without quotes. Example Input 2 2 3 3 1 10 0 0 Output impossible possible impossible Explanation In the 2x2 grid, no matter where the robot starts, it cannot visit every cell exactly once without revisiting a cell or stepping outside the grid. In the 3x3 grid, it is possible for the robot to start from any cell and visit every cell exactly once following a specific path. In the 1x10 grid, it is impossible for the robot to visit every cell exactly once starting from any cell due to the constraint on movements and limited width.","solution":"def is_possible_to_traverse(n, m): Determines if it\'s possible for the robot to traverse the entire grid starting from any cell without revisiting any cell. :param n: Number of rows of the grid. :param m: Number of columns of the grid. :return: \\"possible\\" if the robot can visit all cells exactly once starting from any cell, otherwise \\"impossible\\". # It is well-known that it\'s only possible to traverse all cells of an `n x m` grid in a single, non-revisiting sweep if: # 1. Both n and m are greater than 1 (since a 1x1 grid is trivially impossible to traverse). # 2. n and m are not both 2 (because there is no way to traverse a 2x2 grid starting from one cell and visiting all exactly once). # 3. The grid is not long and thin (like 1x10), which makes it impossible to perform unique traversal for different starting points. if (n <= 1 or m <= 1) or (n == 2 and m == 2): return \\"impossible\\" return \\"possible\\" # Example usage with multiple datasets: def process_datasets(datasets): results = [] for n, m in datasets: if n == 0 and m == 0: break results.append(is_possible_to_traverse(n, m)) return results # Example inputs datasets = [ (2, 2), (3, 3), (1, 10), (0, 0) ] # Processing the example datasets results = process_datasets(datasets) for result in results: print(result)"},{"question":"You are involved in the development of a new online multiplayer game. In this game, there are several players, and each player has a unique skill level. The skill levels of the players are represented by an array of integers where each integer corresponds to the skill level of a player. The game requires creating balanced teams for fair play. A balanced team is defined as a group of players whose skill levels are either all even or all odd numbers. Given the skill levels of all players, your task is to determine the minimum number of teams that need to be formed such that each team is balanced according to the definition above. Write a program that will: 1. Calculate the number of even skill levels. 2. Calculate the number of odd skill levels. 3. Output the total number of teams required, which would be the sum of the minimum teams required for even skills and odd skills. # Input: - The first line contains an integer N (1 ≤ N ≤ 100,000), the number of players. - The second line contains N integers S1, S2, ..., SN (1 ≤ Si ≤ 1,000,000), representing the skill levels of the players. # Output: - Output one integer that represents the minimum number of balanced teams required. # Example: Input: ``` 7 10 21 32 43 54 65 76 ``` Output: ``` 2 ``` Explanation: - Even skill levels: 10, 32, 54, 76 (4 players) - Odd skill levels: 21, 43, 65 (3 players) - Minimum teams required: 1 team for even skill levels and 1 team for odd skill levels. Input: ``` 5 10 20 30 40 50 ``` Output: ``` 1 ``` Explanation: - Even skill levels: 10, 20, 30, 40, 50 (5 players) - Odd skill levels: None (0 players) - Minimum teams required: 1 team for even skill levels and 0 teams for odd skill levels.","solution":"def min_teams_required(n, skill_levels): Given the number of players and their respective skill levels, calculates the minimum number of balanced teams required. Args: n: int : the number of players skill_levels: list of int : the skill levels of the players Returns: int : the minimum number of balanced teams required even_count = sum(1 for skill in skill_levels if skill % 2 == 0) odd_count = n - even_count # The number of teams required is the sum of teams with even skill levels and teams with odd skill levels # Each group of even/odd skill levels requires at least one team. return (1 if even_count > 0 else 0) + (1 if odd_count > 0 else 0)"},{"question":"Write a function that takes a string containing a mathematical expression and evaluates the numerical result. The string can contain integers, addition (+), subtraction (-), multiplication (*), and division (/) operators. Assume all the operations are integer operations, and the expression is properly formatted with no parentheses. Examples ``` \\"3+5*2\\" ==> 13 \\"10+20/5*3\\" ==> 22 \\"100-10*3/5\\" ==> 94 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers and +, -, *, / operators. Assumes the expression is properly formatted with no parentheses. return eval(expression)"},{"question":"You have a grid with n rows and m columns filled with non-negative integers. Your task is to minimize the sum of all elements in the grid by following these rules: 1. You can select any cell and subtract 1 from it. However, doing so will add 1 to all the adjacent cells (up, down, left, right). 2. You can perform this operation any number of times. Find the minimal sum of the grid you can achieve after applying the operations optimally. -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 50): the number of rows and columns of the grid. Each of the next n lines contains m integers a_{i1}, a_{i2}, ldots, a_{im} (0 leq a_{ij} leq 1000): representing the initial values in the grid. -----Output----- Print a single integer: the minimal sum of the grid you can achieve. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 2 2 1 1 1 2 Output 45 5 -----Note----- In the first example, no operations need to be performed as the grid is already in its minimal form. In the second example, the optimal way is to reduce the value of the second cell of the first row by 1, making all cells 1.","solution":"def minimal_grid_sum(n, m, grid): Given a grid of n rows and m columns filled with non-negative integers, calculates the minimal sum of all elements in the grid by applying optimal operations. # The minimal sum can be achieved by reducing every element to the minimal value in the grid min_value = min(min(row) for row in grid) total_sum = sum(sum(cell - min_value for cell in row) for row in grid) return total_sum + n * m * min_value"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n. Your task is to create a new sequence b_1, b_2, ldots, b_n such that: 1. b_1 = a_1 2. b_i = max(b_{i-1} + 1, a_i) for 2 leq i leq n In other words, each element of b should be at least 1 greater than the previous element in b, and at least as large as the corresponding element in a. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The descriptions of the test cases follow. The first line of the description of each test case contains a single integer n (1 leq n leq 1000). The second line of the description of each test case contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print n integers b_1, b_2, ldots, b_n. -----Example----- Input 3 5 1 2 2 2 2 4 5 5 5 5 6 3 10 3 2 1 8 Output 1 2 3 4 5 5 6 7 8 3 10 11 12 13 14 Note: In the first test case, the new sequence b is constructed as follows: - b_1 = 1 - b_2 = max(1 + 1, 2) = 2 - b_3 = max(2 + 1, 2) = 3 - b_4 = max(3 + 1, 2) = 4 - b_5 = max(4 + 1, 2) = 5 In the second test case, the new sequence b is constructed as follows: - b_1 = 5 - b_2 = max(5 + 1, 5) = 6 - b_3 = max(6 + 1, 5) = 7 - b_4 = max(7 + 1, 5) = 8 In the third test case, the new sequence b is constructed as follows: - b_1 = 3 - b_2 = max(3 + 1, 10) = 10 - b_3 = max(10 + 1, 3) = 11 - b_4 = max(11 + 1, 2) = 12 - b_5 = max(12 + 1, 1) = 13 - b_6 = max(13 + 1, 8) = 14","solution":"def construct_b_sequence(t, test_cases): results = [] for case in test_cases: n, a = case b = [a[0]] # Initialize with the first element of a for i in range(1, n): b.append(max(b[i-1] + 1, a[i])) results.append(b) return results"},{"question":"You are given a 2D matrix of integers where each row is sorted in non-decreasing order from left to right. Your task is to find the k-th smallest element in the entire matrix, starting from 1-based indexing. -----Input----- The first line of input contains two integers, 1 le m, n le 300, representing the number of rows and columns in the matrix. The next m lines contain n integers each, representing the elements of the matrix. The last line contains an integer 1 le k le m times n, representing the position of the k-th smallest element to be found. -----Output----- Output the k-th smallest element in the matrix. -----Explanation of sample 1----- In this case, given the matrix: 1 5 9 10 11 13 12 13 15 For k = 8, the elements in sorted order are 1, 5, 9, 10, 11, 12, 13, 13, 15. The 8th smallest element is 13. -----Examples----- Sample Input 1: 3 3 1 5 9 10 11 13 12 13 15 8 Sample Output 1: 13 Sample Input 2: 2 3 1 3 5 6 7 12 3 Sample Output 2: 5","solution":"import heapq def kth_smallest(matrix, k): Finds the k-th smallest element in a sorted 2D matrix. Args: matrix : List[List[int]] : 2D matrix of integers where each row is sorted k : int : the position of the k-th smallest element to be found (1-based index) Returns: int : the k-th smallest element in the matrix # Create a min-heap min_heap = [] # Push the first element of each row into the heap for r in range(len(matrix)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Pop from the heap k times to get the k-th smallest element for _ in range(k): element, r, c = heapq.heappop(min_heap) if c + 1 < len(matrix[0]): heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) return element"},{"question":"Check for Palindrome Given a string, determine whether it is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Input A single string S is given in a line. Output Print \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Constraints * 1 leq |S| leq 1000 * The input string will consist of lowercase and uppercase English letters, as well as spaces and punctuation. Sample Input 1 A man, a plan, a canal, Panama Sample Output 1 YES Sample Input 2 race a car Sample Output 2 NO Sample Input 3 No lemon, no melon Sample Output 3 YES Sample Input 4 hello Sample Output 4 NO Example Input A man, a plan, a canal, Panama Output YES","solution":"def is_palindrome(s): Determines whether the given string is a palindrome. Ignores spaces, punctuation, and capitalization. Parameters: s (str): The input string to be checked. Returns: str: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. sanitized_str = \'\'.join(char.lower() for char in s if char.isalnum()) return \\"YES\\" if sanitized_str == sanitized_str[::-1] else \\"NO\\""},{"question":"In the world of DataKingdom, Spencer the Spirited has a collection of N magical stones, each with a distinct positive integer value. Given this collection of stones, there is a unique spell that Spencer can cast which allows him to perform the following operation exactly once: - Choose two stones with values a and b (where a ≠ b) from the collection, remove them, and add a new stone with value a + b to the collection. Spencer is interested in knowing the maximum possible value of the stone he can end up with after applying this operation exactly once. Note that he cannot skip this operation; the spell must be cast exactly once. Write a program that helps Spencer find the maximum possible value of the stone after the operation. # Constraints - 2 ≤ N ≤ 10^5 - The values of the stones are positive integers and are not necessarily distinct. # Input The input is given in the following format: - The first line contains an integer N. - The second line contains N space-separated integers, representing the values of the stones. # Output Print the maximum possible value of the stone after applying the operation exactly once. # Example Input ``` 3 5 2 9 ``` Output ``` 14 ``` Explanation Choose the stones with values 5 and 9, remove them and add a new stone with value 14. The maximum possible value after the operation is 14, which is the answer.","solution":"def max_stone_value(n, stones): Returns the maximum possible value of the stone after applying the operation exactly once. # If there are only two stones, return their sum directly if n == 2: return stones[0] + stones[1] # For more than two stones, find the largest and the second largest stone values first_max = max(stones) stones.remove(first_max) second_max = max(stones) # The result will be the sum of the two largest values return first_max + second_max"},{"question":"Write a function that takes an integer **n** as an input and returns the nth Fibonacci number. It is guaranteed that the input number **n** will be a positive integer. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding numbers, typically starting with 0 and 1. Here are the first few Fibonacci numbers: - 0, 1, 1, 2, 3, 5, 8, 13, 21, ... **Example:** ``` Input: n = 5 Output: 5 Explanation: The 5th Fibonacci number is 5. (0, 1, 1, 2, 3, 5) ``` You can implement this function using an iterative or a recursive approach. Make sure your function is efficient and handles larger values of **n** without excessive computational time.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") a, b = 0, 1 for _ in range(n-1): a, b = b, a + b return b"},{"question":"Write a function to reform fractions by converting them into their simplest forms or mixed numbers. Given a non-negative fraction represented as a string \\"N/D\\" (where N and D are integers and D > 0), perform the following steps: 1. Simplify the fraction, if possible, by dividing both the numerator (N) and denominator (D) by their greatest common divisor (GCD). 2. If the simplified fraction is an improper fraction (i.e., N >= D), convert it into a mixed number in the form \\"A B/C\\" where A is the integer part of the fraction, and B/C is the simplified remainder (where B < C). If the remainder is zero, only output the integer A. 3. If the fraction is proper (i.e., N < D), output the fraction in its simplest form N/D. # Input The input consists of one dataset of fractions. The input data is given in the following format: ``` Q fraction1 fraction2 ... fractionQ ``` The first line contains the integer Q (1 ≤ Q ≤ 10000), denoting the number of fractions. Each of the next Q lines contains a fraction in the format \\"N/D\\" (0 ≤ N ≤ 1000; 1 ≤ D ≤ 1000). # Output Output Q lines, each containing the corresponding reform fraction in its simplest form or mixed number format. # Example Input ``` 5 4/2 5/3 6/9 7/1 8/4 ``` Output ``` 2 1 2/3 2/3 7 2 ``` # Explanation - `4/2` reduces to the integer `2`. - `5/3` is an improper fraction and converts to the mixed number `1 2/3`. - `6/9` simplifies to `2/3`. - `7/1` is already a whole number `7`. - `8/4` reduces to `2`.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def simplify_fraction(n, d): common_divisor = gcd(n, d) return n // common_divisor, d // common_divisor def to_mixed_number(n, d): integer_part = n // d remainder = n % d if remainder == 0: return f\\"{integer_part}\\" else: simplified_n, simplified_d = simplify_fraction(remainder, d) return f\\"{integer_part} {simplified_n}/{simplified_d}\\" if simplified_n != 0 else f\\"{integer_part}\\" def reform_fraction(fractions): results = [] for frac in fractions: n, d = map(int, frac.split(\'/\')) simplified_n, simplified_d = simplify_fraction(n, d) if simplified_n >= simplified_d: result = to_mixed_number(simplified_n, simplified_d) else: result = f\\"{simplified_n}/{simplified_d}\\" results.append(result) return results # Input and Output Functions def process_input_output(input_data): lines = input_data.strip().split(\\"n\\") Q = int(lines[0]) fractions = lines[1:Q+1] return reform_fraction(fractions)"},{"question":"You are given a string S of length N consisting of the characters \'a\', \'b\', and \'c\'. You need to perform the following operation exactly N times: - Choose exactly two distinct adjacent characters and remove them. - If the characters were the same, append \'a\' to the end of the string, otherwise append the character that is different from both removed characters. After performing this operation exactly N times, can the resulting string be made a palindrome? ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of a single line containing a string S. ------ Output Format ------ For each test case, print on a new line the answer: YES if it is possible to rearrange the resulting string into a palindrome, and NO otherwise. Each character of the output may be printed in either uppercase or lowercase, i.e, the strings Yes, YES, yes, yEs will all be treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{3} - The sum of N over all test cases won\'t exceed 5 cdot 10^{3}. - S consists only of the characters \'a\', \'b\' and \'c\'. ----- Sample Input 1 ------ 3 abc aaa abcabc ----- Sample Output 1 ------ NO YES YES ----- Explanation 1 ------ Test case 1: After any operations, the string cannot be rearranged into a palindrome. Test case 2: Any operations on the string will result in a string consisting only of \'a\'s which can easily be rearranged into a palindrome. Test case 3: The operations can be performed such that the resulting characters are either two \'a\'s, \'b\'s, or \'c\'s in any order, which can be rearranged into a palindrome.","solution":"def can_form_palindrome(T, cases): Given a list of strings, determine if the resulting string after the described operations can be rearranged into a palindrome. results = [] for S in cases: counter = {\'a\': 0, \'b\': 0, \'c\': 0} for char in S: counter[char] += 1 odd_count = 0 for count in counter.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Morsecodes are a fascinating part of the telegraphy era, enabling communication over long distances using just two symbols, dots and dashes. Your task is to write a program that can encode a given English text string into Morse code. Each letter should be separated by a single space and each word by a forward slash (`/`). Here\'s a representation of the Morse code alphabet: ``` A: .- N: -. 0: ----- B: -... O: --- 1: .---- C: -.-. P: .--. 2: ..--- D: -.. Q: --.- 3: ...-- E: . R: .-. 4: ....- F: ..-. S: ... 5: ..... G: --. T: - 6: -.... H: .... U: ..- 7: --... I: .. V: ...- 8: ---.. J: .--- W: .-- 9: ----. K: -.- X: -..- .: .-.-.- L: .-.. Y: -.-- ,: --..-- M: -- Z: --.. ?: ..--.. ``` The program should only consider the letters of the English alphabet, digits (0-9), and punctuation marks provided, and should ignore any other characters including spaces in the input text. # Example **Input:** ``` HELLO WORLD ``` **Output:** ``` .... . .-.. .-.. --- / .-- --- .-. .-.. -.. ``` Make sure your program is efficient and handles edge cases like empty strings or non-alphabetical characters smoothly.","solution":"def encode_morse(text): Encodes a given English text string into Morse code, ignoring any characters that are not part of the Morse code alphabet. morse_code_dict = {} words = text.upper().split() encoded_words = [] for word in words: encoded_letters = [morse_code_dict[char] for char in word if char in morse_code_dict] encoded_words.append(\\" \\".join(encoded_letters)) return \\" / \\".join(encoded_words)"},{"question":"You are developing a software for a real estate company that needs to calculate the amount of paint required to paint the walls of a room. The room is rectangular, and each wall is of a constant height. The paint coverage rate (i.e., how much area a certain amount of paint can cover) is known. Your task is to write a program that calculates the total area of the walls to be painted and the amount of paint required given the dimensions of the room and the coverage rate of the paint. **Input** The input consists of multiple data sets. Each data set contains three integers: - `L` (1 ≤ L ≤ 100): The length of the room. - `W` (1 ≤ W ≤ 100): The width of the room. - `H` (1 ≤ H ≤ 100): The height of the room. The last line of input contains three zeros (0 0 0), which should not be processed. **Output** For each data set, output one line containing the total paintable area of the walls and the amount of paint required, separated by a space. Display the amount of paint required with up to six decimal places. **Example** _Input_ ``` 10 15 2 6 4 3 0 0 0 ``` _Output_ ``` 100.00 5.00 60.00 3.00 ``` **Explanation** For the first input line `10 15 2`: - There are four walls in the room. Two walls have an area of `10 * 2 = 20` each and the other two have an area of `15 * 2 = 30` each. - Total paintable area is `2 * 20 + 2 * 30 = 100`. - Assuming a constant coverage rate of paint to be 20 square units per liter, the amount of paint required is `100 / 20 = 5.00`. For the second input line `6 4 3`: - There are four walls in the room. Two walls have an area of `6 * 3 = 18` each and the other two have an area of `4 * 3 = 12` each. - Total paintable area is `2 * 18 + 2 * 12 = 60`. - Assuming a constant coverage rate of paint to be 20 square units per liter, the amount of paint required is `60 / 20 = 3.00`.","solution":"def calculate_paint_requirements(length, width, height, coverage_rate=20.0): Calculate the total paintable area of the walls and the amount of paint required. Args: length (int): The length of the room. width (int): The width of the room. height (int): The height of the room. coverage_rate (float): The coverage rate of the paint in square units per liter. Default is 20. Returns: (float, float): A tuple containing the total area and the amount of paint required. area_wall1 = length * height area_wall2 = width * height total_area = 2 * (area_wall1 + area_wall2) paint_required = total_area / coverage_rate return total_area, paint_required def process_input(input_data): Process the input data and produce the output for each dataset until \'0 0 0\' is encountered. Args: input_data (list of str): The input data. Returns: list of str: The list containing the output for each line. results = [] for line in input_data: L, W, H = map(int, line.split()) if L == 0 and W == 0 and H == 0: break total_area, paint_required = calculate_paint_requirements(L, W, H) results.append(f\\"{total_area:.2f} {paint_required:.6f}\\") return results"},{"question":"Alice is participating in her first competitive programming contest. One of the problems she encounters involves processing a matrix of integers. The task is to find the maximum sum of any submatrix within the given matrix. A submatrix is defined as any contiguous block of cells within the matrix. Each cell in the matrix contains a positive or negative integer. The sum of a submatrix is the sum of all the integers it contains. Alice needs your help to solve this problem. Can you write a program to find the maximum sum of any submatrix in the given matrix? -----Input----- The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100), which are the dimensions of the matrix. The next n lines each contain m integers, representing the elements of the matrix. Each integer is between -1000 and 1000. -----Output----- Print a single integer that is the maximum sum of any submatrix within the given matrix. -----Example----- Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output 29 -----Explanation----- In the given sample, the submatrix with the maximum sum is: 3 8 10 -4 -1 1 This submatrix has a sum of 29, which is the highest possible submatrix sum for the given matrix.","solution":"def max_sum_submatrix(matrix): Returns the maximum sum of any submatrix within the given matrix. if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') # Iterate through each row as the top row of the submatrix for top in range(n): row_sum = [0] * m # Iterate through each row as the bottom row of the submatrix for bottom in range(top, n): for i in range(m): row_sum[i] += matrix[bottom][i] # Find the maximum sum subarray in `row_sum` max_ending_here = max_so_far = row_sum[0] for x in row_sum[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) max_sum = max(max_sum, max_so_far) return max_sum"},{"question":"You are given an undirected weighted graph with n nodes and m edges. Each edge has a weight associated with it. You need to find the minimum weight of edges that must be included to make the graph disconnected. If the graph is already disconnected, the minimum weight is 0. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — the number of nodes and edges in the graph, respectively. The next m lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — representing an edge between node u and node v with weight w. Output Print a single integer — the minimum weight of edges that must be included to make the graph disconnected. If the graph is already disconnected, print 0. Examples Input 6 7 1 2 10 1 3 15 2 3 5 2 4 10 3 5 5 4 5 5 4 6 10 Output 5 Input 4 2 1 2 7 3 4 10 Output 0 Explanation In the first example, we can remove the edge with weight 5 (between node 2 and node 3) to disconnect the graph. In the second example, the graph is already disconnected, so the answer is 0.","solution":"def find_min_edge_to_disconnect(n, m, edges): # Check if the graph is already disconnected from collections import defaultdict, deque def bfs(start, visited): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v, w in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) bfs(1, visited) if not all(visited[1:]): return 0 # The graph is already disconnected # Kruskal\'s algorithm to find the minimum spanning tree edges.sort(key=lambda x: x[2]) # Sort edges based on weight parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 minimum_edge_weight = float(\'inf\') for u, v, w in edges: if find(u) != find(v): union(u, v) minimum_edge_weight = w if sum((find(i) == 1 for i in range(1, n+1))) < n: return w return minimum_edge_weight # Example usage and verification def main(): n, m = map(int, input().strip().split()) edges = [] for _ in range(m): u, v, w = map(int, input().strip().split()) edges.append((u, v, w)) result = find_min_edge_to_disconnect(n, m, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Rodrigo is an enthusiastic software developer who loves to play with matrices. Recently, he discovered a fascinating property of certain types of matrices called \\"Toeplitz matrices.\\" A Toeplitz matrix is one in which each descending diagonal from left to right is constant. Rodrigo wants to write a program to check if a given matrix is a Toeplitz matrix. Can you help him? -----Input----- The first line contains two integers 1 leq N, M leq 100, representing the number of rows and columns of the matrix, respectively. The next N lines contain M integers each, describing the matrix, where each integer is between 1 and 1000. -----Output----- Output “Toeplitz” if the given matrix is a Toeplitz matrix, and “not Toeplitz” otherwise (without the quotes). -----Examples----- Sample Input 1: 3 4 1 2 3 4 5 1 2 3 6 5 1 2 Sample Output 1: Toeplitz Sample Input 2: 3 3 1 2 3 4 5 6 7 8 9 Sample Output 2: not Toeplitz","solution":"def is_toeplitz(matrix): Checks if a given matrix is a Toeplitz matrix. :param matrix: List of lists, where each sublist represents a row of the matrix :return: \\"Toeplitz\\" if the matrix is a Toeplitz matrix, otherwise \\"not Toeplitz\\" rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return \\"not Toeplitz\\" return \\"Toeplitz\\" # Example usage: # N, M = 3, 4 # matrix = [ # [1, 2, 3, 4], # [5, 1, 2, 3], # [6, 5, 1, 2] # ] # print(is_toeplitz(matrix)) # Output: Toeplitz"},{"question":"You are given a string of digits between 1 and 26 representing an encoded message. Each digit or group of digits can correspond to a letter where \'1\' = \'A\', \'2\' = \'B\', ..., \'26\' = \'Z\'. Your task is to count the total number of ways to decode a given string. For example, the string \\"123\\" can be decoded in the following ways: - \\"1\\" \\"2\\" \\"3\\" -> \\"ABC\\" - \\"12\\" \\"3\\" -> \\"LC\\" - \\"1\\" \\"23\\" -> \\"AW\\" So the total number of ways to decode \\"123\\" is 3. Implement a function to count all possible decodings of a given string of digits. Function signature: ```python def count_decodings(s: str) -> int: ``` # Input - s (1 ≤ len(s) ≤ 100): A string of digits. # Output - Return the total number of ways to decode the given string. # Example ```python assert count_decodings(\\"12\\") == 2 # \\"AB\\", \\"L\\" assert count_decodings(\\"123\\") == 3 # \\"ABC\\", \\"LC\\", \\"AW\\" assert count_decodings(\\"0\\") == 0 # \\"0\\" is not a valid encoding assert count_decodings(\\"226\\") == 3 # \\"BZ\\", \\"VF\\", \\"BBF\\" ``` # Constraints - The string will not have leading zeros. - Ensure the function handles the input efficiently.","solution":"def count_decodings(s: str) -> int: if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if i != 1 and \'10\' <= s[i - 2:i] <= \'26\': dp[i] += dp[i - 2] return dp[n]"},{"question":"The stock span problem is a financial problem where we need to calculate the span of stock\'s price for all n days. The span is defined as the maximum number of consecutive days (including the current day) the price of a stock has been less than or equal to the price on that day. More formally, the span of the stock\'s price on a given day i is the maximum number of consecutive days just before the given day, for which the price of the stock is less than or equal to its price on the given day. Example 1: Input: N = 7, price[] = [100, 80, 60, 70, 60, 75, 85] Output: 1 1 1 2 1 4 6 Explanation: Traversing the given input span for 100 is 1, 80 is 1, 60 is 1, 70 is 2 and so on. Hence the output will be 1 1 1 2 1 4 6. Example 2: Input: N = 6, price[] = [10, 4, 5, 90, 120, 80] Output: 1 1 2 4 5 1 Explanation: Traversing the given input span for 10 is 1, 4 is 1, 5 is 2, 90 is 4, 120 is 5, and 80 is 1. Hence, the output will be 1 1 2 4 5 1. Your Task: You don\'t need to read input or print anything. The task is to complete the function calculateSpan() which takes two parameters, an array of prices, and the size of the array and returns an array of spans. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ N ≤ 10^5 1 ≤ C[i] ≤ 10^5","solution":"def calculateSpan(prices, n): Calculate the stock span for each day. :param prices: List of stock prices :param n: Number of days :return: List of spans stack = [] span = [0] * n for i in range(n): while stack and prices[stack[-1]] <= prices[i]: stack.pop() if not stack: span[i] = i + 1 else: span[i] = i - stack[-1] stack.append(i) return span"},{"question":"You are developing a software program for a theme park to manage the queue for a new roller coaster ride called \\"Thrill Seekers\\". The ride is very popular, and the queue management system must efficiently handle the visitor entries and ride admissions. The queue system needs to support the following operations: 1. `ENQUEUE name` - Add a visitor with the given name to the end of the queue. 2. `DEQUEUE` - Remove the visitor at the front of the queue. 3. `MOVE_TO_FRONT name` - Move the visitor with the given name to the front of the queue, if they are already in the queue. 4. `QUEUE_SIZE` - Output the current number of visitors in the queue. 5. `QUEUE_LIST` - Output the list of visitors currently in the queue from front to end. # Input The first line contains an integer `Q` (1 ≤ Q ≤ 10,000), the number of operations. The following Q lines describe the operations in the format specified above. 1. For `ENQUEUE name`, `name` is a string of alphanumeric characters with a length between 1 and 20. 2. For `MOVE_TO_FRONT name`, assume the `name` already exists in the queue when this operation is issued. # Output For each `DEQUEUE`, `QUEUE_SIZE`, and `QUEUE_LIST` operation, output the corresponding result. # Example Input 8 ENQUEUE Alice ENQUEUE Bob QUEUE_SIZE MOVE_TO_FRONT Alice QUEUE_LIST DEQUEUE QUEUE_SIZE QUEUE_LIST Output 2 Alice Bob 1 Bob You need to implement a queue management system that handles the above operations and produces the correct output.","solution":"from collections import deque class ThemeParkQueue: def __init__(self): self.queue = deque() def enqueue(self, name): self.queue.append(name) def dequeue(self): if self.queue: return self.queue.popleft() return None def move_to_front(self, name): if name in self.queue: self.queue.remove(name) self.queue.appendleft(name) def queue_size(self): return len(self.queue) def queue_list(self): return list(self.queue) def process_operations(operations): tpq = ThemeParkQueue() result = [] for operation in operations: op = operation.split() command = op[0] if command == \\"ENQUEUE\\": tpq.enqueue(op[1]) elif command == \\"DEQUEUE\\": dequeued = tpq.dequeue() if dequeued is not None: result.append(dequeued) elif command == \\"MOVE_TO_FRONT\\": tpq.move_to_front(op[1]) elif command == \\"QUEUE_SIZE\\": result.append(tpq.queue_size()) elif command == \\"QUEUE_LIST\\": result.append(\\" \\".join(tpq.queue_list())) return result"},{"question":"Katie is passionate about strings and enjoys challenges involving string manipulations. She has recently stumbled upon a problem where she needs to determine if a given string can be converted into a palindrome by removing at most one character. She seeks your help in solving this problem efficiently. Input: The first and only line of input contains a non-empty string S consisting of lowercase English letters. Output: Print \\"YES\\" if the string can be converted into a palindrome by removing at most one character. Otherwise, print \\"NO\\". Constraints: 1 ≤ length of S ≤ 10^5 SAMPLE INPUT abca SAMPLE OUTPUT YES","solution":"def can_become_palindrome(s): def is_palindrome_range(i, j): return all(s[k] == s[j-k+i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # When they don\'t match, try both possibilities: removing left char or right char if is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"Given a string s containing n lowercase Latin letters, determine the longest substring such that all characters in the substring appear in alphabetical order. The substring\'s characters must be contiguous in the original string. Input The first line contains a single integer n (1 ≤ n ≤ 500 000) — the length of string s. The second line contains the string s itself, consisting of n lowercase Latin letters. Output Print the length of the longest alphabetically ordered substring. Examples Input 7 abcabca Output 3 Input 5 edcba Output 1 Note In the first sample, the longest alphabetically ordered substring is \\"abc\\" with length 3. In the second sample, there are no contiguous substrings with more than one character in alphabetical order, so the answer is 1.","solution":"def longest_alphabetical_substring_length(n, s): if n == 1: return 1 max_len = 1 current_len = 1 for i in range(1, n): if s[i] >= s[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Given a list of integers, write a function `filterEvenOdd` that takes two arguments, `nums` (the list of integers) and `flag` (a boolean). The function should return a new list containing only the even numbers if the `flag` is True, and only the odd numbers if the `flag` is False. Example 1: Input: nums = [1, 2, 3, 4, 5, 6] flag = True Output: [2, 4, 6] Example 2: Input: nums = [10, 15, 20, 25, 30] flag = False Output: [15, 25] Your Task: Complete the function `filterEvenOdd(nums, flag)` which takes a list of integers and a boolean flag as input and returns a list of integers based on the criteria mentioned above. The driver code will print the output list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= length of nums <= 100 1 <= nums[i] <= 10^4","solution":"def filterEvenOdd(nums, flag): Returns a list of even numbers if flag is True or odd numbers if flag is False from the list nums. if flag: return [num for num in nums if num % 2 == 0] else: return [num for num in nums if num % 2 != 0]"},{"question":"You are given a sequence of integers. Your task is to write a function that finds the length of the longest subsequence of consecutive elements in the sequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line of the input contains a single integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5). The second line of each test case contains n integers a_1, a_2, ..., a_n (0 le a_i le 10^9) — the elements of the sequence. -----Output----- For each test case, print the length of the longest subsequence of consecutive elements. -----Example----- Input 3 6 100 4 200 1 3 2 4 10 11 12 14 5 1 9 3 10 4 Output 4 3 2","solution":"def longest_consecutive_subsequence(nums): Function to find the length of the longest subsequence of consecutive elements in the sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak def find_longest_subsequences(test_cases): results = [] for nums in test_cases: result = longest_consecutive_subsequence(nums) results.append(result) return results"},{"question":"A company is planning to plant trees alongside a road. The company has a list of tree heights that they can purchase, and they want to make the road look aesthetically pleasing by ensuring that the heights of the trees are in a non-decreasing order when planted. However, due to budget constraints, they need to minimize the number of trees they buy. You have been tasked with finding the minimum number of trees that they need to purchase to create a non-decreasing sequence of heights. -----Input----- The first line contains an integer T, the number of test cases. Then T test cases follow. Each test case consists of two lines. The first line of each test case contains a single integer N, denoting the number of tree heights available (1 ≤ N ≤ 100,000). The second line contains N integers h1, h2, ..., hN, where hi denotes the height of the ith tree (0 ≤ hi ≤ 10^9). -----Output----- For each test case, print the minimum number of trees needed to create a non-decreasing sequence of heights. -----Constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 0 ≤ hi ≤ 10^9 -----Sample Input----- 2 6 3 10 5 7 15 1 4 1 2 3 4 -----Sample Output----- 4 4 -----Explanation----- In the first sample, an optimal non-decreasing sequence of tree heights that can be formed is [3, 5, 7, 15]. Only 4 trees are needed. In the second sample, the sequence is already non-decreasing, so all 4 trees are needed.","solution":"import bisect def min_trees_to_buy(N, heights): This function takes in an integer N and a list of integers heights and returns the minimum number of trees needed to create a non-decreasing sequence of heights. if N == 0: return 0 # Implement the Longest Increasing Subsequence (LIS) approach lis = [] for height in heights: pos = bisect.bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis) def process_test_cases(T, test_cases): results = [] for i in range(T): N, heights = test_cases[i] results.append(min_trees_to_buy(N, heights)) return results"},{"question":"Implement a function `anagram_sort(lst)` that takes a list of strings `lst` and returns a new list where the strings are grouped into sublists of anagrams. Anagrams are words that can be formed by rearranging the letters of another word, using all the original letters exactly once. For example, [\\"listen\\", \\"silent\\", \\"enlist\\"] are anagrams. The sublists should be sorted such that: 1. Each subgroup of anagrams is sorted lexicographically. 2. The subgroups themselves are sorted lexicographically based on the first word in each subgroup. For example, `anagram_sort([\\"bat\\", \\"tab\\", \\"rat\\", \\"tar\\", \\"art\\", \\"cat\\", \\"tac\\"])` should return `[[\\"art\\", \\"rat\\", \\"tar\\"], [\\"bat\\", \\"tab\\"], [\\"cat\\", \\"tac\\"]]`. If the input list is empty, return an empty list. ```python def anagram_sort(lst): # Your implementation here ```","solution":"def anagram_sort(lst): Takes a list of strings and returns a new list where the strings are grouped into sublists of anagrams. The sublists are lexicographically sorted, and the subgroups themselves are also sorted lexicographically. from collections import defaultdict # Dictionary to store the anagrams anagrams = defaultdict(list) # Grouping anagrams together for word in lst: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Sorting each subgroup and then sorting the sublists based on the first word in each subgroup result = [sorted(anagram) for anagram in anagrams.values()] result.sort(key=lambda x: x[0]) return result"},{"question":"Given an array of integers, write a function to determine if the array contains any duplicate elements. Your task is to implement a function that returns `True` if there exists at least one duplicate element in the array, otherwise it returns `False`. Example 1: Input: [1, 2, 3, 1] Output: True Explanation: The array contains a duplicate element `1`. Example 2: Input: [1, 2, 3, 4] Output: False Explanation: The array does not contain any duplicate elements. Example 3: Input: [1, 1, 1, 3, 3, 4, 3, 2, 4, 2] Output: True Explanation: The array contains multiple duplicate elements. Your Task: You don\'t need to read or print anything. Your task is to complete the function `contains_duplicates()` which takes the array as input parameter and returns `True` if duplicate elements are found in the array, else returns `False`. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(array) <= 100000 -10^9 <= array[i] <= 10^9","solution":"def contains_duplicates(arr): Determine if the array contains any duplicate elements. Args: arr (list): The list of integers to check. Returns: bool: True if there are duplicates, False otherwise. seen = set() for num in arr: if num in seen: return True seen.add(num) return False"},{"question":"A logistics company needs to deliver packages to various locations in a city. The city can be visualized as an m x n grid where each cell represents a location. Some cells may contain obstacles, preventing any deliveries to or through those cells. The company uses drones to deliver packages, and a drone can move one cell in four possible directions (up, down, left, right) unless there\'s an obstacle. Given the initial position of a drone and the target position, the goal is to find the shortest path from the start to the destination while avoiding obstacles. If no such path exists, return -1. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 100), the dimensions of the grid. - The second line contains two integers sx and sy (0 ≤ sx < m, 0 ≤ sy < n), the starting row and column of the drone. - The third line contains two integers dx and dy (0 ≤ dx < m, 0 ≤ dy < n), the destination row and column of the drone. - The next m lines each contain n characters representing the grid (\'0\' for open cell, \'1\' for obstacle). Output Output a single integer, the length of the shortest path from the starting cell to the destination cell, or -1 if no such path exists. Examples Input 5 5 0 0 4 4 00000 01110 00010 01110 00000 Output 8 Input 3 3 0 0 2 2 010 010 010 Output -1 Note In the first example, the grid is a 5x5 matrix. The drone starts at the top-left corner (0, 0) and needs to reach the bottom-right corner (4, 4). The shortest path avoiding obstacles has a length of 8. In the second example, the grid is a 3x3 matrix. The drone starts at the top-left corner (0, 0) and needs to reach the bottom-right corner (2, 2). There is no path that avoids all obstacles, so the output is -1.","solution":"from collections import deque def shortest_path(m, n, sx, sy, dx, dy, grid): Finds the shortest path from the start position (sx, sy) to the destination (dx, dy) avoiding obstacles. Returns the length of the shortest path, or -1 if no such path exists. if sx == dx and sy == dy: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right visited = [[False] * n for _ in range(m)] queue = deque([(sx, sy, 0)]) # (current row, current column, distance) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() for dxn, dyn in directions: nx, ny = x + dxn, y + dyn if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'0\': if nx == dx and ny == dy: return dist + 1 queue.append((nx, ny, dist + 1)) visited[nx][ny] = True return -1"},{"question":"Evelyn is trying to create a database to store information about different flowers. Each flower has a unique identifier and specific characteristics, such as its name, color, and height in centimeters. She wants to be able to quickly retrieve flowers based on certain queries. You are asked to develop a program that processes a list of flowers and answers queries about them. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of flowers. The next n lines describe the flowers. Each of these lines contains a flower identifier (a string of 1 to 10 alphanumeric characters), the name of the flower (a single word consisting of alphabetic characters), the color of the flower (a single word consisting of alphabetic characters), and the height of the flower (an integer between 1 and 300). The next line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. The following q lines contain the queries. Each query is of the form \\"identifier\\", where identifier is a string of 1 to 10 alphanumeric characters and corresponds to the unique identifier of a flower. -----Output----- For each query, print a single line containing the name, color, and height of the corresponding flower. If no flower with the given identifier exists, print \\"Flower not found\\". -----Examples----- Input 4 F1 Daisy White 30 F2 Rose Red 50 F3 Tulip Yellow 40 F4 Lily Pink 25 2 F2 F5 Output Rose Red 50 Flower not found Input 3 ABC Daisy White 30 XYZ Rose Red 50 LMN Tulip Yellow 40 3 XYZ ABC QWE Output Rose Red 50 Daisy White 30 Flower not found","solution":"def process_flower_data(n, flower_records, q, queries): Process flower records and respond to queries about them. Parameters: n (int): Number of flower records. flower_records (list of tuples): List of flower records where each record is a tuple (identifier, name, color, height). q (int): Number of queries. queries (list of str): List of flower identifiers to query. Returns: list of str: List of query responses containing flower details or \\"Flower not found\\". # Create a dictionary to store flower data for quick access by identifier flower_dict = {record[0]: (record[1], record[2], record[3]) for record in flower_records} results = [] for identifier in queries: if identifier in flower_dict: name, color, height = flower_dict[identifier] results.append(f\\"{name} {color} {height}\\") else: results.append(\\"Flower not found\\") return results"},{"question":"Write a program to schedule TV shows given the start and end times of several shows. Each show has a certain duration and overlaps are not allowed. Your objective is to maximize the number of shows you can watch. Consider the following sample shows with their start and end times: | Show | Start Time | End Time ---|---|--- Show 1| 1| 4 Show 2| 3| 5 Show 3| 0| 6 Show 4| 5| 7 Show 5| 8| 9 Show 6| 5| 9 Write a program that reads the number of shows `n` followed by `n` lines showing the start and end times of each show. The program should then output the maximum number of shows that can be watched without overlaps. Input: The input consists of multiple datasets. For each dataset, an integer `n` (1 ≤ n ≤ 1000) representing the number of shows, followed by `n` lines, each containing two integers representing the start and end times of each show. The input ends with a line including a zero. Your program should not process for the terminal symbol. The number of datasets does not exceed 100. Output: For each dataset, print an integer which represents the maximum number of shows that can be watched without overlaps. Example: Input: 6 1 4 3 5 0 6 5 7 8 9 5 9 5 1 3 0 2 4 5 2 3 5 6 0 Output: 3 4","solution":"def max_shows(shows): Returns the maximum number of non-overlapping shows that can be watched. shows: List of tuples where each tuple contains the start and end time of a show. # Sort the shows by their end times shows.sort(key=lambda show: show[1]) count = 0 last_end_time = -1 for show in shows: if show[0] >= last_end_time: count += 1 last_end_time = show[1] return count def process_input(input_str): Processes multiple datasets from the input string and returns the results for each dataset. lines = input_str.strip().split(\'n\') i = 0 results = [] while i < len(lines): n = int(lines[i]) if n == 0: break shows = [] for j in range(i+1, i+1+n): start, end = map(int, lines[j].split()) shows.append((start, end)) results.append(max_shows(shows)) i += n + 1 return results"},{"question":"You are given an array of integers. You can perform the following operation as many times as you want: * Choose any two elements from the array and replace both elements with their sum. Your goal is to maximize the value of the array elements after performing the operations. What is the maximum possible value of the largest element in the array you can achieve? Constraints * 1 leq N leq 100 * 1 leq A[i] leq 100 * All values in input are integers. Input Input is given from Standard Input in the following format: ``` N A[1] A[2] ... A[N] ``` Output Print the maximum possible value of the largest element in the array. Examples Input 4 2 1 2 3 Output 16 Input 5 5 5 5 5 5 Output 25","solution":"def maximize_large_element(n, arr): Returns the maximum possible value of the largest element by summing all elements. return sum(arr)"},{"question":"Peter is designing a dynamic chat application where users can send messages to each other. To ensure that all messages are unique, each outgoing message is timestamped with the current time and date. Peter wants to keep a log of activities to check if a user has sent multiple messages within a given minute. Write a function `detect_spamming` that determines if a user has sent more than one message within any single minute. You will be given a list of timestamps in \\"YYYY-MM-DD HH:MM:SS\\" format for a user. If the user has sent more than one message within any minute, the function should return `True`; otherwise, it should return `False`. # Function Signature ```python def detect_spamming(timestamps: List[str]) -> bool: ``` # Input - `timestamps` - a list of strings, where each string is a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". The list contains between 1 and 10^5 timestamps. # Output - Return `True` if there is any minute in which the user has sent more than one message, otherwise return `False`. # Examples ```python detect_spamming([\\"2023-10-10 08:30:00\\", \\"2023-10-10 08:30:45\\", \\"2023-10-10 08:31:00\\"]) # Output: True detect_spamming([\\"2023-10-10 08:30:00\\", \\"2023-10-10 08:31:00\\", \\"2023-10-10 08:32:00\\"]) # Output: False detect_spamming([\\"2023-10-10 08:30:00\\"]) # Output: False ``` # Notes - You may assume that all timestamps are in chronological order. - Consider edge cases where the number of timestamps is minimum or maximum. - Optimize the implementation to handle up to 10^5 timestamps efficiently.","solution":"def detect_spamming(timestamps): from collections import defaultdict minute_counts = defaultdict(int) for ts in timestamps: # Extract only the \\"YYYY-MM-DD HH:MM\\" part of the timestamp minute = ts[:16] minute_counts[minute] += 1 if minute_counts[minute] > 1: return True return False"},{"question":"A company has decided to organize a fun coding competition. There are N participants, and each participant has a unique skill level, represented as an integer. The company\'s goal is to form as many teams as possible, where each team consists of exactly two participants, such that the absolute difference in their skill levels is less than or equal to X. Your task is to determine the maximum number of such teams that can be formed. Input Format The first line contains the integer N, the number of participants, and the integer X, the maximum allowable difference in skill levels for two participants to form a team. The second line contains N integers, S_{i}, where S_{i} denotes the skill level of the ith participant. Output Format Print the maximum number of teams that can be formed. Constraints 1 ≤ N ≤ 10^{5} 1 ≤ X ≤ 10^{9} 1 ≤ S_{i} ≤ 10^{9} SAMPLE INPUT 5 3 1 5 3 4 2 SAMPLE OUTPUT 2 Explanation In this example, the maximum allowable difference in skill levels is 3. We can form the following teams: - The participants with skill levels 1 and 2 (|1-2| = 1 ≤ 3) - The participants with skill levels 5 and 4 (|5-4| = 1 ≤ 3) The participant with skill level 3 cannot form a team with another participant within the given difference constraint, so the maximum number of teams is 2.","solution":"def max_teams(N, X, skill_levels): Returns the maximum number of teams that can be formed with the given constraints. Parameters: N (int): Number of participants. X (int): Maximum allowable difference in skill levels for two participants to form a team. skill_levels (List[int]): A list of skill levels for the participants. Returns: int: The maximum number of teams that can be formed. skill_levels.sort() i = 0 teams = 0 while i < len(skill_levels) - 1: if skill_levels[i+1] - skill_levels[i] <= X: teams += 1 i += 2 # Skip the next one as they are already paired else: i += 1 return teams"},{"question":"# Problem Statement You are given two linked lists representing two non-negative integers. The digits are stored in reverse order, such that the 1\'s digit is at the head of the list. Write a function to add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Each node in the linked list contains a single digit of the number. It follows that, each node value lies in the range of 0-9. You are required to add the numbers and provide the resulting linked list in the same reverse order format. **Input** The input will consist of multiple pairs of linked lists, each pair representing two non-negative integers. Each linked list is provided in a series of lines, with each element of the list on a new line. A line containing `-` separates the two linked lists, and a blank line separates each pair of linked lists. At the end of the input, there will be a line containing 0 which signals the end and should not be processed. **Output** For each pair of linked lists, print each node of the resulting linked list on a new line in the same order (i.e., from head to last). After each linked list, print a \\"-\\" to separate the outputs. **Example** **Input** ``` 2 4 3 - 5 6 4 4 - 5 6 0 ``` **Output** ``` 7 0 8 - 9 6 -","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Adds two numbers represented by linked lists in reverse order. :param l1: ListNode :param l2: ListNode :return: ListNode dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 carry, out = divmod(val1 + val2 + carry, 10) current.next = ListNode(out) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next def add_linked_list_pairs(input_data): Processes the input_data and prints the result linked list of the sum of linked list pairs. :param input_data: List[str] def parse_input(input_data): pairs = [] current_pair = ([], []) is_second = False for line in input_data: line = line.strip() if line == \'0\': break if line == \'-\': is_second = True continue if line == \'\': pairs.append(current_pair) current_pair = ([], []) is_second = False elif is_second: current_pair[1].append(int(line)) else: current_pair[0].append(int(line)) return pairs def build_linked_list(lst): head = None for value in reversed(lst): head = ListNode(value, head) return head pairs = parse_input(input_data) results = [] for l1_values, l2_values in pairs: l1 = build_linked_list(l1_values) l2 = build_linked_list(l2_values) result_list = addTwoNumbers(l1, l2) current = result_list while current: results.append(str(current.val)) current = current.next results.append(\'-\') return results"},{"question":"Given an array arr[] of N distinct integers and an integer target, the task is to find all unique pairs of integers in the array that add up to the given target. Example 1: Input: arr[] = {1, 2, 3, 4, 5}, target = 5 Output: [[1, 4], [2, 3]] Explanation: The pairs (1, 4) and (2, 3) add up to the target 5. Example 2: Input: arr[] = {0, -1, 2, -3, 1}, target = -2 Output: [[0, -2], [-1, -1]] Explanation: The pairs (0, -2) and (-1, -1) add up to the target -2. Your Task: You don\'t need to read input or print anything. Complete the function findPairs(int arr[], int target) which takes the array arr[] and the target as input parameters and returns a list of unique pairs. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 2 ≤ N ≤ 10^5 -10^6 ≤ arr[i] ≤ 10^6 -10^6 ≤ target ≤ 10^6","solution":"def find_pairs(arr, target): Find all unique pairs of integers in the array that add up to the given target. Args: arr (list of int): List of distinct integers. target (int): The target sum for pairs. Returns: list of list of int: List of unique pairs that add up to the target. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in pairs]"},{"question":"Write a function `steps_to_palindrome(n)` that receives a positive integer `n` and returns the number of steps required to transform `n` into a palindrome using the following procedure: 1. Reverse the digits of `n`. 2. Add the reversed number to the original number. 3. Check if the result is a palindrome. 4. If the result is not a palindrome, repeat the above steps with the new number until you obtain a palindrome. Ensure your function handles cases up to 10,000 steps and returns `-1` if a palindrome cannot be formed within this limit. For example: ```python steps_to_palindrome(56) == 1 # 56 + 65 = 121 (121 is a palindrome) steps_to_palindrome(87) == 4 # 87 + 78 = 165; 165 + 561 = 726; 726 + 627 = 1353; 1353 + 3531 = 4884 (4884 is a palindrome) steps_to_palindrome(123) == 1 # 123 + 321 = 444 (444 is a palindrome) steps_to_palindrome(196) == -1 # Cannot form a palindrome within 10,000 steps ``` A number is a palindrome if it is the same when read forwards and backwards, such as `121` or `2332`.","solution":"def steps_to_palindrome(n): def is_palindrome(num): Returns True if num is a palindrome, False otherwise. return str(num) == str(num)[::-1] def reverse_number(num): Returns the reverse of the given number. return int(str(num)[::-1]) steps = 0 while steps < 10000: if is_palindrome(n): return steps n = n + reverse_number(n) steps += 1 return -1"},{"question":"You are given a grid of size \'n x n\' filled with non-negative numbers. Andy, a robot, starts at the top-left corner of the grid and can move either down or right at any point in time. The robot tries to reach the bottom-right corner of the grid with the maximum possible sum of the numbers on its path. Please write a function to calculate the maximum possible sum that the robot can collect on his way from the top-left to the bottom-right of the grid. Example 1: Input: grid = [[0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1]] Output: 12 Explanation: The path followed by Andy: 0 -> 2 -> 5 -> 3 -> 1 -> 1, sum of the numbers along the path is 12. Example 2: Input: grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 29 Explanation: The path followed by Andy: 1 -> 4 -> 7 -> 8 -> 9, sum of the numbers along the path is 29. Your Task: You need to complete the function `maxPathSum(grid)` which takes a 2D list of integers representing the grid as input and returns an integer representing the maximum sum Andy can collect on a path from the top-left to the bottom-right of the grid. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n^2) Constraints: - 1 <= n <= 100 - 0 <= grid[i][j] <= 100","solution":"def maxPathSum(grid): Calculate the maximum path sum from the top-left to the bottom-right of the grid. :param grid: List[List[int]] - 2D list of non-negative integers representing the grid :return: int - the maximum sum possible along the path if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a 2D dp list to store the maximum sum up to each cell dp = [[0] * cols for _ in range(rows)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[rows - 1][cols - 1]"},{"question":"Given an array of integers, find the contiguous subarray which has the largest sum and return the sum. Implement your solution using a Divide and Conquer approach. Input: First line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the size of the array. The second line contains N space-separated integers representing the elements of the array. Output: For each test case, print a single line containing the maximum sum of the contiguous subarray. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10000 -1000 ≤ Ai ≤ 1000 Example: Input: 2 8 -2 1 -3 4 -1 2 1 -5 4 6 -1 -2 -3 -4 -5 -6 Output: 6 -1 Explanation: For the first test case, the contiguous subarray [4, -1, 2, 1] has the largest sum, which is 6. For the second test case, the largest sum of any contiguous subarray is -1, which comes from the subarray [-1].","solution":"def max_crossing_sum(arr, left, mid, right): Helper function to find the maximum sum crossing the middle of the array. sm = 0 left_sum = float(\'-inf\') for i in range(mid, left - 1, -1): sm = sm + arr[i] if (sm > left_sum): left_sum = sm sm = 0 right_sum = float(\'-inf\') for i in range(mid + 1, right + 1): sm = sm + arr[i] if (sm > right_sum): right_sum = sm return left_sum + right_sum def max_subarray_sum(arr, left, right): Helper function using the divide and conquer approach to find the maximum subarray sum. if left == right: return arr[left] mid = (left + right) // 2 return max(max_subarray_sum(arr, left, mid), max_subarray_sum(arr, mid+1, right), max_crossing_sum(arr, left, mid, right)) def find_maximum_subarray_sum(arr): Finds the maximum sum of the contiguous subarray. return max_subarray_sum(arr, 0, len(arr) - 1)"},{"question":"A company wants to schedule N meetings in different rooms. Each meeting is defined by its start and end times given as positive integers. You need to determine the maximum number of non-overlapping meetings that can be scheduled in a single room if the meetings can be rearranged in any order. Constraints * 1 leq N leq 10^5 * 1 leq start_i < end_i leq 10^9 (1 leq i leq N) Inputs Input is given from Standard Input in the following format: N start_1 end_1 : start_N end_N Outputs Print the maximum number of non-overlapping meetings that can be scheduled in a single room. Examples Input 3 1 3 2 5 4 6 Output 2 Input 4 7 9 0 1 3 5 8 10 Output 3 Input 5 1 4 2 3 3 5 4 7 6 8 Output 3","solution":"def max_non_overlapping_meetings(N, meetings): # Sort meetings based on their end time meetings.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in meetings: if start >= end_time: count += 1 end_time = end return count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) meetings = [] for i in range(1, len(data), 2): meetings.append((int(data[i]), int(data[i+1]))) print(max_non_overlapping_meetings(N, meetings))"},{"question":"Mahmoud was organizing his bookshelf and came across a stack of different books. Each book has a width and fits within a shelf of a fixed width. Mahmoud has to determine the maximum total height of books he can fit within the shelf constraints. You are given a set of books, where each book has a width `w_i` and height `h_i`. The books must be grouped into one or more vertical stacks such that the total width of all books in each individual stack does not exceed the shelf width `W`. The height of a stack is the sum of the heights of the books in that stack. Find a way to arrange the books into such stacks that the sum of the heights of all stacks is maximized. Input The first line contains two integers `n` and `W` (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10^9) — the number of books and the maximum width of a single stack. The next `n` lines each contain two integers `w_i` and `h_i` (1 ≤ w_i, h_i ≤ 10^6) — the width and height of the i-th book. Output Print one integer — the maximum total height that can be achieved by arranging the books into valid stacks. Example Input 3 6 2 4 3 7 4 5 Output 16 Note In this example, one possible optimal arrangement is: - Stack 1: Books 1 and 2, Total width: 2 + 3 = 5 (≤ 6), Total height: 4 + 7 = 11 - Stack 2: Book 3, Total width: 4 (≤ 6), Total height: 5 So, the total height is 11 + 5 = 16, which is the maximum possible.","solution":"def max_total_height(n, W, books): Determine the maximum total height of books stacked with shelf width constraint. :param n: Number of books :param W: Maximum width of a single stack :param books: List of tuples (width, height) for each book :return: Maximum total height # Sort books by their heights in descending order books.sort(key=lambda x: x[1], reverse=True) # Initialize a list to keep track of the stack heights stack_heights = [] for width, height in books: placed = False # Try to place the book in an existing stack for i in range(len(stack_heights)): current_width, current_height = stack_heights[i] if current_width + width <= W: stack_heights[i] = (current_width + width, current_height + height) placed = True break # If the book was not placed in an existing stack, create a new stack if not placed: stack_heights.append((width, height)) # The total height is the sum of heights of all stacks total_height = sum(height for _, height in stack_heights) return total_height"},{"question":"You are organizing a charity event where you need to arrange seats in a hall for N attendees. The seats are arranged in a grid of R rows and C columns. You need to distribute the attendees such that each attendee gets a unique seat and as much as possible, they are seated in a way that minimizes the number of \\"gaps\\" in the rows. A \\"gap\\" is defined as an empty seat in any row that has fully occupied seats to its right. Write a program to determine the minimum number of rows required such that the number of gaps is minimized. -----Input----- The first line of input contains two integers R and C, the number of rows and columns in the hall (1 leq R, C leq 100). The second line contains an integer N, the number of attendees (1 leq N leq R times C). -----Output----- Print a single integer representing the minimum number of rows required to arrange the attendees with the minimal number of gaps. -----Examples----- Sample Input 1: 3 4 10 Sample Output 1: 3 Sample Input 2: 5 5 12 Sample Output 2: 3 Sample Input 3: 2 5 6 Sample Output 3: 2 Sample Input 4: 4 4 15 Sample Output 4: 4","solution":"def min_rows_for_seating(R, C, N): Returns the minimum number of rows required to arrange N attendees in R rows and C columns to minimize the number of gaps. # Calculate the minimum number of full rows min_full_rows = (N + C - 1) // C # This is effectively ceil(N / C) return min(min_full_rows, R) # Example usage: # R, C = 3, 4, N = 10 # print(min_rows_for_seating(R, C, N)) # Output: 3"},{"question":"You are given an array of integers and a sliding window of size `k`. Your task is to find the maximum sum of any subarray of size `k`. Implement a function `maxSlidingWindowSum(nums, k)` that takes in: - `nums`: a list of integers - `k`: an integer representing the size of the sliding window Return an integer representing the maximum sum of any subarray of size `k`. Assume that `1 <= k <= len(nums)`. **Examples**: 1. `maxSlidingWindowSum([1, 2, 3, 4, 5], 2)` should return `9` (since `4 + 5 = 9`). 2. `maxSlidingWindowSum([7, -8, 5, 6, -3], 3)` should return `8` (since `5 + 6 + (-3) = 8`). 3. `maxSlidingWindowSum([3, -1, 2, 10, -5, 7], 3)` should return `11` (since `3 + -1 + 2 = 4`, `-1 + 2 + 10 = 11`, `2 + 10 + -5 = 7`, `10 + -5 + 7 = 12`).","solution":"def maxSlidingWindowSum(nums, k): Returns the maximum sum of any subarray of size k in the list nums. if not nums or k <= 0 or k > len(nums): return None # Calculate the initial window sum window_sum = sum(nums[:k]) max_sum = window_sum # Slide the window and continue calculating the new sums for i in range(k, len(nums)): # Subtract the element going out of the window and add the new element coming into the window window_sum += nums[i] - nums[i - k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Dave is a security specialist and has been assigned to evaluate the reliability of the network in his company\'s main office. The office is made up of several rooms which are connected by different cables. Some of these cables are known to be unreliable and pose a security risk. The entire office can be represented as a graph where rooms are nodes and cables are edges. Each cable has an associated reliability score `r` which ranges from 1 to 100. The higher the score, the more reliable the cable is. Unreliable cables have an `r` value of 1. Dave\'s task is to ensure that there is a highly reliable path between the company\'s main server room (node 1) and the network control center (node n). To achieve this, he has to identify a path which has the maximum minimum reliability score among all possible paths from room 1 to room n. In other words, the weakest link along the path chosen should be the strongest possible compared to any other path. # Input The first line of the input consists of two integers n and m (2 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5), the number of rooms and the number of cables respectively. The next m lines describe the cables, each containing three integers x, y, r (1 ≤ x, y ≤ n, 1 ≤ r ≤ 100), indicating that there is a cable connecting room x and room y with a reliability score r. # Output - Print a single integer that is the maximum minimum reliability score of the path from room 1 to room n. - If there is no path from room 1 to room n, print `-1`. # Examples Input ``` 4 4 1 2 50 2 3 60 3 4 30 1 3 20 ``` Output ``` 30 ``` Input ``` 3 2 1 2 10 2 3 20 ``` Output ``` 10 ``` # Explanation - In the first example, the path from 1 to 4 with the maximum minimum reliability score is 1-2-3-4 with a score of 30 (as the weakest link is the 30 reliability cable). - In the second example, the best possible path from 1 to 3 is 1-2-3 with a reliability score of 10. # Note Dave should be able to resolve the problem efficiently given the constraints on n and m. Consider leveraging appropriate graph algorithms to ensure optimal performance.","solution":"import heapq def maximum_minimum_reliability(n, m, cables): # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for x, y, r in cables: graph[x].append((r, y)) graph[y].append((r, x)) # Priority queue for Dijkstra-like maximum minimum path pq = [(-100, 1)] # Start with room 1, reliability 100 (negative for max heap) max_reliability = [0] * (n + 1) # To track the max reliability to each node max_reliability[1] = 100 while pq: curr_reliability, node = heapq.heappop(pq) curr_reliability = -curr_reliability if node == n: return curr_reliability for reliability, neighbor in graph[node]: min_reliability = min(curr_reliability, reliability) if min_reliability > max_reliability[neighbor]: max_reliability[neighbor] = min_reliability heapq.heappush(pq, (-min_reliability, neighbor)) return -1 if max_reliability[n] == 0 else max_reliability[n]"},{"question":"John is an avid runner and he loves to track his progress using his GPS watch. However, his watch does not provide him the exact average speed for his runs. So, John decides to write a program that calculates his average speed for him. Given the total distance and the total time taken for a run, help John determine his average speed. The average speed should be calculated in meters per second (m/s), and the result should be rounded to two decimal places. ------ Input ------ The first line of the input contains an integer T, the number of test cases. T lines follow. Each of the next T lines contains two integers D and T, representing the total distance in meters and the total time in seconds for the run, respectively. ------ Output ------ For each test case, output a single line with the average speed in meters per second, rounded to two decimal places. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ D ≤ 100000 1 ≤ T ≤ 10000 ------ Sample Input 1 ------ 3 5000 1500 10000 3600 2000 600 ------ Sample Output 1 ------ 3.33 2.78 3.33","solution":"def calculate_average_speeds(test_cases): Returns a list of average speeds in m/s for given test cases. Each test case is a tuple (D, T) where D is the distance in meters and T is the time in seconds. average_speeds = [] for D, T in test_cases: average_speed = round(D / T, 2) average_speeds.append(average_speed) return average_speeds def parse_input(input_string): Parses the input string and returns the list of test cases. lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): D, T = map(int, lines[i].split()) test_cases.append((D, T)) return test_cases def format_output(speeds): Formats the output speed list into a string. return \\"n\\".join(f\\"{s:.2f}\\" for s in speeds)"},{"question":"Write a function that receives a string containing digits from \'2\' to \'9\' inclusive, and returns all possible letter combinations that the numbers could represent. Use the mapping of digits to letters (just like on the telephone buttons). Note that 1 does not map to any letters. Here is the mapping of digits to letters: * 2 -> \\"abc\\" * 3 -> \\"def\\" * 4 -> \\"ghi\\" * 5 -> \\"jkl\\" * 6 -> \\"mno\\" * 7 -> \\"pqrs\\" * 8 -> \\"tuv\\" * 9 -> \\"wxyz\\" The combinations should be returned in a list. The order of the combinations does not matter. Example input and output: Input: \\"23\\" Output: [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] Input: \\"9\\" Output: [\\"w\\",\\"x\\",\\"y\\",\\"z\\"]","solution":"def letter_combinations(digits): Returns all possible letter combinations that the input digits could represent. if not digits: return [] digit_to_char = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = digit_to_char[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Imagine you\'re given a rectangular grid of cells with dimensions m by n, where each cell can either be empty or blocked. You are positioned at the top-left corner of the grid, and you need to find the number of distinct paths to reach the bottom-right cell. You can only move either down or right one cell at a time. However, some cells in the grid might be blocked, meaning you cannot pass through them. Write a function `number_of_paths(grid: List[List[int]]) -> int` that takes a 2D list representing the grid and returns the number of distinct paths from the top-left corner to the bottom-right corner modulo 1000000007 (10^9 + 7). An empty cell is represented by 0 and a blocked cell is represented by 1. If the starting or ending cell is blocked, the number of distinct paths should be 0. -----Input Format----- - The input is a single element `grid` which is a list of lists containing integers 0 or 1. - The dimensions of `grid` can be between 1x1 and 100x100. -----Output Format----- - Return a single integer representing the number of distinct paths modulo 1000000007. -----Examples----- Example 1: Input: [[0, 0, 0], [0, 1, 0], [0, 0, 0]] Output: 2 Example 2: Input: [[0, 1], [0, 0]] Output: 1","solution":"def number_of_paths(grid): MOD = 1000000007 m, n = len(grid), len(grid[0]) # If starting or ending cell is blocked, return 0. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize DP table dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[m-1][n-1]"},{"question":"Challenge: Write a function that receives a string representing a mathematical expression which includes only positive integers, addition, and multiplication, and returns the result of that expression. The expression is guaranteed to be valid. The function should follow the standard order of operations (PEMDAS/BODMAS): 1. Parentheses 2. Exponents (not present in this challenge) 3. Multiplication and Division (from left to right) 4. Addition and Subtraction (from left to right) For simplicity, assume the input string will not include any spaces. Example: Given \\"2+3*2\\", your function should return 8. Given \\"10+2*6\\", your function should return 22. Given \\"100*2+12\\", your function should return 212. Given \\"2*5+10\\", your function should return 20. Given \\"10+10\\", your function should return 20. Addendum: - The expression does not contain any parentheses or negative numbers. - \'__*__\' and \'__+__\' are the only operators.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing only non-negative integers, addition (+), and multiplication (*), and returns the result. The expression follows the standard order of operations: multiplication before addition. # Split the expression by \'+\' to handle addition parts addition_parts = expression.split(\'+\') # Evaluate each addition part addition_results = [] for part in addition_parts: # For each part, evaluate any multiplication expressions multiplication_parts = part.split(\'*\') multiplication_result = 1 for factor in multiplication_parts: multiplication_result *= int(factor) addition_results.append(multiplication_result) # Sum up all the addition results to get the final result return sum(addition_results)"},{"question":"The mayor of a small town has decided to modernize the city\'s banking system. Each bank transaction is recorded as a debit (D) or a credit (C) transaction. The mayor wants to analyze the transactions for a specific time period to identify any potential discrepancies. To assist, you need to determine the net balance for a list of transactions. Write a function `calculate_net_balance` that accepts a list of transactions and an initial balance. Each transaction in the list is represented by a tuple (type, amount) where `type` indicates whether it\'s a debit (D) or credit (C) transaction and `amount` specifies the transaction amount. The function should return the final balance after processing all the transactions. If at any point during the transaction processing the balance becomes negative, the function should immediately return \\"ERROR\\" (quotes for clarity only). Function Signature: ```python def calculate_net_balance(transactions: List[Tuple[str, int]], initial_balance: int) -> Union[int, str]: ``` Input: - `transactions`: A list of tuples where each tuple contains a string (`\'D\'` or `\'C\'`) and an integer (amount). - `initial_balance`: An integer representing the starting balance. Output: - Return the final balance as an integer if it remains non-negative after all transactions. - Return \\"ERROR\\" if the balance becomes negative at any point. Constraints: - The length of transactions list, `|transactions|`, will be between `1` and `10^5`. - The amount in each transaction will be between `1` and `10^4`. - The initial balance will be an integer in the range `0` to `10^7`. Example: ```python transactions = [(\'C\', 1000), (\'D\', 500), (\'D\', 700)] initial_balance = 2000 print(calculate_net_balance(transactions, initial_balance)) # Output: 800 transactions = [(\'D\', 3000), (\'C\', 200), (\'D\', 1300)] initial_balance = 2500 print(calculate_net_balance(transactions, initial_balance)) # Output: \\"ERROR\\" ``` Note: - In the first example, the initial balance is 2000. After a credit of 1000, the balance is 3000. Then a debit of 500 reduces the balance to 2500. Finally, another debit of 700 results in a final balance of 1800. - In the second example, the initial balance is 2500. After a debit of 3000, the balance becomes -500, and thus the function should return \\"ERROR\\".","solution":"def calculate_net_balance(transactions, initial_balance): Calculate the net balance given a list of transactions and an initial balance. Parameters: transactions (list of tuples): A list of transactions (type, amount) where \'type\' is \'D\' for Debit and \'C\' for Credit. initial_balance (int): Starting balance Returns: int or str: Final balance if non-negative or \\"ERROR\\" if the balance becomes negative. balance = initial_balance for transaction in transactions: if transaction[0] == \'C\': balance += transaction[1] elif transaction[0] == \'D\': balance -= transaction[1] if balance < 0: return \\"ERROR\\" return balance"},{"question":"Given an integer array `arr` of length `N` and an integer `K`, write a program to find the number of unique subarrays of `arr` whose sum is exactly `K`. A subarray is defined as a contiguous segment of the array. Your solution should efficiently handle arrays with large lengths. -----Constraints----- - 1 ≤ N ≤ 100,000 - -10^9 ≤ arr[i] ≤ 10^9 for each valid i - -10^9 ≤ K ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N arr[0] arr[1] ... arr[N-1] K -----Output----- Print the number of unique subarrays of `arr` whose sum is exactly `K`. -----Sample Input----- 5 1 2 3 -2 1 3 -----Sample Output----- 3 -----Explanation----- The subarrays are: - [1, 2] (sum is 3) - [3] (sum is 3) - [1, 2, 3, -2, 1] (sum is 1+2+3-2+1 = 3) Thus, there are three subarrays that sum to 3.","solution":"def count_unique_subarrays_with_sum_k(arr, K): Counts the number of unique subarrays whose sum is exactly K. Parameters: arr (list of int): The input array. K (int): The target sum for subarrays. Returns: int: The number of unique subarrays with sum exactly K. prefix_sum = 0 count = 0 prefix_sum_count_map = {0: 1} for num in arr: prefix_sum += num if (prefix_sum - K) in prefix_sum_count_map: count += prefix_sum_count_map[prefix_sum - K] if prefix_sum in prefix_sum_count_map: prefix_sum_count_map[prefix_sum] += 1 else: prefix_sum_count_map[prefix_sum] = 1 return count"},{"question":"In a mythical land, there are several unique species of creatures living together. Each species communicates using a distinct repeating sound, represented by a string. To understand and decipher these sounds, a group of researchers decided to study the cycles within the sounds. Given a string representing the repeating sound, the researchers want to determine the minimal length of the repeating unit of the sound. For example, the sound \\"ababab\\" has a repeating unit \\"ab\\" of length 2, while the sound \\"aaaa\\" has the repeating unit \\"a\\" of length 1. Write a function that, given a string representing the repeating sound of a creature, returns the length of the smallest repeating unit. Input A single string s (1 ≤ |s| ≤ 1000) which represents the repeating sound of a creature. Output Print a single integer — the length of the smallest repeating unit. Examples Input ababab Output 2 Input aaaa Output 1 Input abcabcabc Output 3","solution":"def smallest_repeating_unit(s): Returns the length of the smallest repeating unit of the string s. n = len(s) for i in range(1, n + 1): if n % i == 0: repeating_unit = s[:i] if repeating_unit * (n // i) == s: return i return n"},{"question":"Bob loves playing with arrays. He has an array of integers, and he\'s obsessed with the median of the array. The median is the middle element when the array is sorted in non-decreasing order. If the number of elements is even, the median is the average of the two middle elements. Bob can perform two types of operations on the array: 1. **Add a new integer `x` to the array.** 2. **Remove an integer `x` from the array.** If `x` doesn\'t exist in the array, it\'s an invalid operation and has no effect. Bob wants to track the median of the array after each operation. If the array becomes empty after an operation, Bob considers the median to be `Undefined`. Your task is to write a program that processes Bob\'s operations and outputs the median after each operation. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) - the number of operations. Each of the next `n` lines contains an operation in one of the following two formats: - `add x` where `x` (−10^6 ≤ x ≤ 10^6) is an integer to add to the array. - `remove x` where `x` (−10^6 ≤ x ≤ 10^6) is an integer to remove from the array. # Output Output the current median after each operation. If the array is empty, output `Undefined`. # Example Input: ``` 5 add 3 add 1 median remove 1 median ``` Output: ``` 2.0 3.0 ``` # Note 1. After the first `add` operation, the array is `[3]`, and the median is `3.0`. 2. After the second `add` operation, the array is `[1, 3]`, and the median is `(1 + 3) / 2 = 2.0`. 3. After the `remove` operation, the array is `[3]`, and the median is `3.0`. Bob only wants the median after each operation. Make sure to efficiently maintain the array to handle up to 100,000 operations quickly.","solution":"import bisect class MedianTracker: def __init__(self): self.data = [] def add(self, x): bisect.insort_left(self.data, x) def remove(self, x): index = bisect.bisect_left(self.data, x) if index < len(self.data) and self.data[index] == x: self.data.pop(index) def median(self): if not self.data: return \\"Undefined\\" n = len(self.data) if n % 2 == 1: return float(self.data[n // 2]) else: return (self.data[n // 2 - 1] + self.data[n // 2]) / 2 def process_operations(operations): tracker = MedianTracker() result = [] for op in operations: if op.startswith(\\"add\\"): _, x = op.split() tracker.add(int(x)) elif op.startswith(\\"remove\\"): _, x = op.split() tracker.remove(int(x)) result.append(tracker.median()) return result"},{"question":"A company is analyzing the efficiency of its employees based on the number of projects they complete in a given month. Each employee has a unique ID and an associated count of completed projects. The company wants to identify the top-performing employees who have completed at least `N` projects. Write a function to find all employee IDs who completed `N` or more projects, sorted in ascending order of their IDs. -----Constraints----- - 1 leq M leq 1000 (M is the number of employees) - 1 leq N leq 100 (N is the minimum number of projects required) - 0 leq Projects_i leq 100 (The number of projects completed by employee i) -----Input----- Input is given from Standard Input in the following format: M N Projects_1 Projects_2 Projects_3 ... Projects_M -----Output----- Print all employee IDs (1-based index) who have completed `N` or more projects, sorted in ascending order of their IDs. If no employees meet the criteria, print \\"None\\". -----Sample Input----- 5 10 12 5 15 20 7 -----Sample Output----- 1 3 4 -----Explanation----- There are 5 employees and the threshold for top performance is set at 10 projects. The employees with IDs 1, 3, and 4 have completed 12, 15, and 20 projects respectively, which are all above the threshold. Thus, the output is \\"1 3 4\\".","solution":"def top_performers(M, N, projects): Identify the top-performing employees who have completed at least N projects. Parameters: M (int): Number of employees. N (int): Minimum number of projects required. projects (list of int): List containing the number of projects each employee has completed. Returns: list: List of employee IDs (1-based index) who have completed N or more projects. Sorted in ascending order of their IDs. top_performers = [(i + 1) for i, project in enumerate(projects) if project >= N] if not top_performers: return \\"None\\" return \' \'.join(map(str, top_performers))"},{"question":"Given a dictionary of items, where keys are item names, and values are their prices, write a function ```python def apply_discount(items, discounts): ``` that takes two arguments: 1. `items` - a dictionary where keys are item names (strings) and values are their prices (floats), 2. `discounts` - a dictionary where keys are item names (strings) and values are discounts (percentage, as integers) to be applied to the corresponding items in the `items` dictionary. The function should return a new dictionary where the prices reflect the applied discounts. If an item does not have a corresponding discount in the `discounts` dictionary, it should remain at its original price. For example: ```python items = { \'apple\': 1.0, \'banana\': 0.5, \'orange\': 0.75, \'kiwi\': 1.5 } discounts = { \'apple\': 20, # 20% discount \'orange\': 50 # 50% discount } ``` The function call ```python apply_discount(items, discounts) ``` should return: ```python { \'apple\': 0.8, \'banana\': 0.5, \'orange\': 0.375, \'kiwi\': 1.5 } ```","solution":"def apply_discount(items, discounts): Applies discounts to the items and returns a new dictionary with discounted prices. Parameters: items (dict): Dictionary containing item names as keys and prices as values. discounts (dict): Dictionary containing item names as keys and discount percentages as values. Returns: dict: New dictionary with the same item names as keys and discounted prices as values. discounted_items = {} for item, price in items.items(): if item in discounts: discount = discounts[item] discount_amount = (discount / 100) * price discounted_price = price - discount_amount else: discounted_price = price discounted_items[item] = round(discounted_price, 3) return discounted_items"},{"question":"You are given an array of integers a_1, a_2, ..., a_n. We define a subarray [l, r] (1 ≤ l ≤ r ≤ n) to be unique if all elements in it are distinct. Write a function to find the maximum length of any unique subarray in the given array. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). -----Output----- Print the length of the longest unique subarray in the array. -----Examples----- Input 7 4 2 1 4 5 1 3 Output 4 Input 5 1 2 3 2 1 Output 3","solution":"def max_unique_subarray_length(n, arr): Returns the length of the longest unique subarray in the given array. unique_elements = set() max_length = 0 left = 0 for right in range(n): while arr[right] in unique_elements: unique_elements.remove(arr[left]) left += 1 unique_elements.add(arr[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a chessboard of size `n x n` and two positions on the board, a starting position `(sx, sy)` and a target position `(tx, ty)`. Consider a knight on the starting position. Your task is to find the minimum number of moves required for the knight to reach the target position. If the target position cannot be reached, return `-1`. A knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Write a function `minimum_knight_moves(n, sx, sy, tx, ty)` to solve the problem. The function should return the minimum number of moves required for the knight to reach the target position or `-1` if it is not possible. Example: ``` minimum_knight_moves(8, 0, 0, 7, 7) => 6 # The sequence of moves will look like: # (0,0) -> (2,1) -> (4,2) -> (5,4) -> (6,6) -> (4,5) -> (7,7), thus taking 6 moves. ``` The whole chessboard is to be considered for the indexing starting from `(0,0)`. You can assume that `n` is always greater than or equal to `8` and less than or equal to `1000`. For invalid inputs such as the starting or target positions being out of bounds, return `-1`. Your solution should optimize for performance given the possible range of `n`.","solution":"from collections import deque def minimum_knight_moves(n, sx, sy, tx, ty): Returns the minimum number of moves required for the knight to reach the target position or -1 if it is not possible. if sx < 0 or sy < 0 or tx < 0 or ty < 0 or sx >= n or sy >= n or tx >= n or ty >= n: return -1 moves = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, d = queue.popleft() if (x, y) == (tx, ty): return d for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, d + 1)) return -1"},{"question":"You are given a nested list of dictionaries, each representing a directory structure with file names and their sizes. Your task is to write a function that returns the total size of all files contained in the directory and its subdirectories. Each directory is represented as a dictionary with the following structure: - The key is the directory name. - The value is a list containing: - Dictionaries for any subdirectories. - Tuples representing files, where each tuple contains the file name (as a string) and the file size (as an integer). Write a function `calculate_total_size(directory_structure)` that takes in such a nested directory structure and computes the total size of all the files. **Input:** `directory_structure` (list of dicts): A nested list of dictionaries where each dictionary represents a directory with subdirectories and files. **Output:** Integer representing the total size of all files in the directory structure. **Example:** ```python directory_structure = [ { \\"folder1\\": [ (\\"file1.txt\\", 100), {\\"subfolder1\\": [(\\"file2.txt\\", 200)]}, ], \\"folder2\\": [ (\\"file3.txt\\", 300), {\\"subfolder2\\": [(\\"file4.txt\\", 400)]}, (\\"file5.txt\\", 50) ] } ] calculate_total_size(directory_structure) -> 1050 ``` In the above example, the directory structure contains a total of 5 files with the following sizes: 100, 200, 300, 400, and 50. The total size is therefore 1050.","solution":"def calculate_total_size(directory_structure): Calculate the total size of all files in the given directory structure. Args: - directory_structure (list of dicts): A nested list of dictionaries representing directories. Returns: - int: Total size of all files. total_size = 0 def process_directory(directory): nonlocal total_size for key, value in directory.items(): for item in value: if isinstance(item, tuple): total_size += item[1] elif isinstance(item, dict): process_directory(item) for directory in directory_structure: process_directory(directory) return total_size"},{"question":"You are given a string which represents a large number. This string contains only digits and has no leading zeros. Your task is to perform an operation on this string to maximize the resulting number. The operation you can perform is to reverse exactly one contiguous substring of the original string. You can only reverse one such substring. Determine the maximum possible number you can obtain by performing exactly one reverse operation. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - Each test case contains a single line: a string of digits representing the large number. ------ Output Format ------ - For each test case, print on a new line the maximum possible number that can be obtained by reversing exactly one contiguous substring. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ text{length of the string} ≤ 10^{5} - The sum of the lengths of the strings across all test cases won\'t exceed 10^{6}. ----- Sample Input 1 ------ 2 12345 54321 ----- Sample Output 1 ------ 54321 54321 ----- explanation 1 ------ Test case 1: We can reverse the substring \\"12345\\" to get \\"54321\\", which is the maximum number possible. Test case 2: The maximum number is already the original string, so no reverse operation changes it for higher benefit.","solution":"def max_number_by_one_reverse(num_str): Returns the maximum possible number by reversing one contiguous substring of the input string. n = len(num_str) max_value = num_str # Start with the original string as the max value # We only need to check each pair of i and j where 0 <= i < j < n for i in range(n): for j in range(i + 1, n + 1): # Reverse the substring between i and j and get the new string new_num_str = num_str[:i] + num_str[i:j][::-1] + num_str[j:] if new_num_str > max_value: max_value = new_num_str return max_value def process_test_cases(T, test_cases): results = [] for num_str in test_cases: results.append(max_number_by_one_reverse(num_str)) return results"},{"question":"A string is considered \\"balanced\\" if each character in the string appears the same number of times. Given a string `s`, determine the minimum number of deletions required to make the string balanced. Example `s = \\"aabbcc\\"` 0 deletions are needed since all characters already appear twice. `s = \\"aabbccc\\"` 1 deletion can be performed to remove one \'c\' to make the string balanced. Function Description Complete the function balancedString in the editor below. balancedString has the following parameter(s): string s: the string to be balanced Returns int: the minimum number of deletions needed Input Format The first line contains a single integer t, the number of test cases. Each of the next t lines contains a single string s. Constraints 1leq tleq10 1leq |s|leq 10^5 s contains only lowercase English letters. Output Format For each test case, print a single integer denoting the minimum number of deletions needed to make the string balanced. Sample Input 2 aabbcc aabbccc Sample Output 0 1 Explanation In the first test case, all characters already appear an equal number of times, so no deletions are needed. In the second test case, one deletion is needed to remove one \'c\' to balance the string.","solution":"def balancedString(s): from collections import Counter # Get the frequency of each character freq = Counter(s) # Get all the frequencies into a list and sort them freq_list = sorted(freq.values()) # If all frequencies are the same, no deletions needed if freq_list[0] == freq_list[-1]: return 0 # Maximum frequency max_freq = freq_list[-1] # Count of deletions needed to balance deletions = 0 # Loop through all frequencies and count necessary deletions for f in freq_list: deletions += f - freq_list[0] return deletions"},{"question":"You are given two arrays of integers A and B each containing N elements. Your task is to modify array B such that for each i (0 leq i < N), mathrm{gcd}(A[i], B[i]) is maximized. If there are multiple solutions, you may find and return any one. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line of each test case contains N space-separated integers A_{0}, A_{1}, ..., A_{N-1}. The third line of each test case contains N space-separated integers B_{0}, B_{1}, ..., B_{N-1}. ------ Output ------ For each test case, print N space-separated integers representing the modified array B such that for each valid i, mathrm{gcd}(A[i], B[i]) is maximized. ------ Constraints ------ 1 leq T leq 1000 1 leq N leq 1000 1 leq A[i], B[i] leq 10^9 ------ Example Input 1 ------ 1 3 4 6 15 8 9 5 ------ Example Output 1 ------ 4 3 15 ------ Explanation 1 ------ For the first test case, the gcd of each pair is: mathrm{gcd}(4, 4) = 4 mathrm{gcd}(6, 3) = 3 mathrm{gcd}(15, 15) = 15 The gcd values are maximized for each pair.","solution":"import math def maximize_gcd(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] # For maximizing gcd, we can simply replace each B[i] with A[i] # If gcd(A[i], B[i]) is maximized when B[i] = A[i] modified_B = A results.append(modified_B) return results"},{"question":"Tom is a nature enthusiast who loves counting the animals he sees while hiking. However, all of his counts are written in a specific encoding style where each type of animal is represented by a specific letter, and the count of each sighting is attached as a suffix to the letter. Tom wants to automate the decoding of his records to calculate the total number of animals he observed for each type. Can you help him do this? Input The first line contains an unsigned integer N, representing the number of records. Each following line contains a single record, consisting of one or more encoded sightings. Each encoded sighting within a record is represented by a letter followed by an integer (without spaces), and multiple sightings are concatenated together. Output For each record, output the total sum of sightings for each unique animal type in the order they first appear. Constraints 1 <= N <= 100 1 <= Length of each encoded record <= 1000 Each encoded record only contains lowercase letters a-z and integers. Example Input: 3 a10b20c30 a5b15c25a40 z100y200z300 Output: a: 10, b: 20, c: 30 a: 45, b: 15, c: 25 z: 400, y: 200","solution":"import re from collections import defaultdict def parse_record(record): pattern = re.compile(r\'([a-z])(d+)\') matches = pattern.findall(record) animal_counts = defaultdict(int) for animal, count in matches: animal_counts[animal] += int(count) return animal_counts def combine_results(results): combined = [] for result in results: combined.append(\', \'.join([f\'{animal}: {count}\' for animal, count in result.items()])) return combined def process_records(records): results = [] for record in records: animal_counts = parse_record(record) results.append(animal_counts) return combine_results(results) # Read input def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) records = data[1:n+1] results = process_records(records) for result in results: print(result)"},{"question":"In a kingdom, there are several cities connected by bidirectional roads. Each road has a specific travel time associated with it. The king wants to build a new road such that the maximum travel time between any two cities is minimized. -----Input----- The first line of the input consists of two space-separated integers C and R, representing the number of cities and the number of existing roads respectively. Each of the next R lines contains three space-separated integers u, v, and t representing a road between cities u and v that takes t units of time to travel. -----Output----- Output a single integer representing the minimum possible value of the maximum travel time between any two cities after adding exactly one new road. -----Limits----- - 2 leq C leq 100 - 1 leq R leq 4950 - 1 leq t leq 10^6 -----Examples----- Sample Input: 4 4 1 2 5 2 3 10 3 4 5 1 4 15 Sample Output: 10","solution":"import heapq def calculate_max_distances(adj_matrix, C): dist = [[float(\'inf\')]*C for _ in range(C)] for i in range(C): for j in range(C): if i == j: dist[i][j] = 0 elif adj_matrix[i][j] != float(\'inf\'): dist[i][j] = adj_matrix[i][j] for k in range(C): for i in range(C): for j in range(C): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def minimize_max_travel_time(C, R, roads): adj_matrix = [[float(\'inf\')]*C for _ in range(C)] for u, v, t in roads: adj_matrix[u-1][v-1] = t adj_matrix[v-1][u-1] = t original_max_distances = calculate_max_distances(adj_matrix, C) original_max_travel_time = max(max(row) for row in original_max_distances) min_max_travel_time = original_max_travel_time for i in range(C): for j in range(i+1, C): if adj_matrix[i][j] == float(\'inf\'): adj_matrix[i][j] = 0 adj_matrix[j][i] = 0 new_max_distances = calculate_max_distances(adj_matrix, C) max_travel_time = max(max(row) for row in new_max_distances) min_max_travel_time = min(min_max_travel_time, max_travel_time) adj_matrix[i][j] = float(\'inf\') adj_matrix[j][i] = float(\'inf\') return min_max_travel_time"},{"question":"Given an integer n, write a function that returns the number of structurally unique Binary Search Trees (BSTs) which have exactly n nodes of unique values from 1 to n. The function should return an integer representing the number of unique BSTs that can be created with values from 1 to n. Example 1: Input: 3 Output: 5 Explanation: There are a total of 5 unique BSTs: 1 3 3 2 1 / / / 3 2 1 1 3 2 / / 2 1 2 3 Example 2: Input: 1 Output: 1 Note: - 0 <= n <= 19","solution":"def num_trees(n): Returns the number of structurally unique BSTs that have exactly n nodes of unique values from 1 to n. if n == 0 or n == 1: return 1 dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for nodes in range(2, n + 1): for root in range(1, nodes + 1): dp[nodes] += dp[root - 1] * dp[nodes - root] return dp[n]"},{"question":"In a certain archaeological site, dinosaur fossils have been found. Each fossil is represented by a series of characters. Researchers have noticed that no two fossils are identical but some are very similar. A fossil is considered \\"similar\\" to another if you can change at most one character in the first fossil to match the second fossil. Your task is to write a program to determine if two fossils are similar. Input The input consists of two lines. Each line contains a single string of lowercase letters representing a fossil. The length of each string is between 1 and 100 characters, inclusive. Output Print \\"SIMILAR\\" (without the quotes) if the given fossils are similar. Otherwise, print \\"NOT SIMILAR\\" (also without the quotes). Examples Input brontosaurus broncosaurus Output SIMILAR Input diplodocus diplodicus Output SIMILAR Input triceratops stegosaurus Output NOT SIMILAR","solution":"def are_fossils_similar(fossil1, fossil2): Determine if two fossils are similar by checking if they differ by at most one character. if len(fossil1) != len(fossil2): return \\"NOT SIMILAR\\" difference_count = 0 for char1, char2 in zip(fossil1, fossil2): if char1 != char2: difference_count += 1 if difference_count > 1: return \\"NOT SIMILAR\\" return \\"SIMILAR\\" # Example usage: # print(are_fossils_similar(\\"brontosaurus\\", \\"broncosaurus\\")) # Output: SIMILAR # print(are_fossils_similar(\\"diplodocus\\", \\"diplodicus\\")) # Output: SIMILAR # print(are_fossils_similar(\\"triceratops\\", \\"stegosaurus\\")) # Output: NOT SIMILAR"},{"question":"Given an array a of length n, find the smallest positive integer x that does not appear in any subarray of length k in a. If such x doesn\'t exist, return -1. -----Input----- The first line contains two integers n and k (1 le k le n le 10^5) — the length of the array a and the length of the subarrays to consider, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array a. -----Output----- Print a single integer, the smallest positive integer x that does not appear in any subarray of length k in a. If such x doesn\'t exist, print -1. -----Examples----- Input 5 3 1 2 2 3 1 Output 4 Input 4 2 1 2 1 3 Output 4 Input 6 4 1 2 3 4 5 6 Output 7 -----Note----- In the first test case, the subarrays of length 3 are [1, 2, 2], [2, 2, 3], and [2, 3, 1]. The smallest positive integer that does not appear in any of these subarrays is 4. In the second test case, the subarrays of length 2 are [1, 2], [2, 1], and [1, 3]. The smallest positive integer that does not appear in any of these subarrays is 4. In the third test case, all subarrays of length 4 contain the integers from 1 to 6, therefore the smallest integer not present in any subarray is 7.","solution":"def smallest_missing_positive(n, k, a): Find the smallest positive integer that does not appear in any subarray of length k in the array a. Parameters: n (int): Length of the array. k (int): Length of the subarrays to consider. a (list of int): The elements of the array. Returns: int: The smallest positive integer that does not appear in any subarray of length k. If such integer does not exist, returns -1. from itertools import islice def get_subarray_elements(arr, start, end): Return the distinct elements in the subarray from start index to end index. return set(islice(arr, start, end)) missing = 1 while True: found = False for i in range(n - k + 1): if missing in get_subarray_elements(a, i, i + k): found = True break if not found: return missing missing += 1 return -1"},{"question":"Julian loves dot sequences. He has provided you with a sequence of positive integers `d_1, d_2, ..., d_n`, where `d_i` represents the length of a segment of dots (`.`) if `i` is even or the length of a segment of dashes (`-`) if `i` is odd. For example, for a sequence `\\"-...-.-\\"` a corresponding sequence of numbers is `[1, 3, 1, 1]`. You need to determine the number of continuous subsequences (subsegments) `[l, r]` (`l ≤ r`) of the original sequence that contain an equal number of dots (\'.\') and dashes (\'-\'). A segment of the sequence is considered balanced if it contains an equal number of dots and dashes. -----Input----- The first line contains a single integer `n` (`1 ≤ n ≤ 1000`), the size of the compressed sequence. The second line contains a sequence of integers `d_1, d_2, ..., d_n` (`1 ≤ d_i ≤ 10^9`), the compressed sequence. -----Output----- Output a single integer — the total number of subsegments of the original sequence which are balanced. Note that it is guaranteed that the answer will fit in the signed 64-bit integer data type. -----Examples----- Input 4 2 3 1 1 Output 2 Input 3 4 2 4 Output 0 Input 5 2 2 2 2 2 Output 6 -----Note----- In the first example, the sequence described is `--...-.-`. This sequence contains 2 subsegments that are balanced: 1. Subsequence from the 1st to the 6th character: `--...` 2. Subsequence from the 6th to the 7th character: `.-` In the second example, the sequence described is `----..----`. There are no balanced subsegments. In the third example, the sequence described is `--..--..--`. There are 6 balanced subsegments: 1. Subsequence from the 1st to the 3rd character: `--..` 2. Subsequence from the 3rd to the 5th character: `..--` 3. Subsequence from the 5th to the 7th character: `--..` 4. Subsequence from the 1st to the 4th character: `--..--` 5. Subsequence from the 3rd to the 6th character: `..--..` 6. Subsequence from the 5th to the 8th character: `--..`","solution":"def count_balanced_subsegments(n, d): Returns the number of balanced subsegments. :param n: int - The size of the compressed sequence :param d: List[int] - List containing the lengths of segments in the compressed sequence :return: int - Total number of balanced subsegments total_subsegments = 0 for start in range(n): dots = 0 dashes = 0 for end in range(start, n): if (end - start) % 2 == 0: dashes += d[end] else: dots += d[end] if dots == dashes: total_subsegments += 1 return total_subsegments"},{"question":"Tom is a passionate gardener and loves creating different designs with his plants. He has an array of plants with different heights which he wants to rearrange in a specific way to form an interesting pattern. However, he caught a cold and is unable to complete his design. Can you help him? You are given an array (H1,H2,…HN) of length N where H[i] represents the height of the ith plant. Your task is to rearrange the array such that the resulting pattern\'s heights follow a specific rule: For each valid i: - If the height H[i] is even, place it in the even-indexed positions of the new array in ascending order. - If the height H[i] is odd, place it in the odd-indexed positions of the new array in descending order. The indexing starts from 0. If there are more even or odd numbers than available positions, place the remaining elements at the end of the respective subarray before merging into one final array. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. Each test case is described as follows: - The first line of each test case contains a single integer N. - The second line contains N space-separated integers H1,H2,…,HN representing the heights of the plants. -----Output:----- - For each test case, print the rearranged array in a single line. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10^5 - 1 leq H1,H2…HN leq 10^7 -----Sample Input:----- 2 5 4 7 2 5 8 6 1 3 5 7 2 4 -----Sample Output:----- 2 7 4 5 8 7 1 4 3 2 5 -----EXPLANATION:----- For the first test case: - Even heights are [2, 4, 8], and in ascending order they are [2, 4, 8]. - Odd heights are [7, 5], and in descending order they are [7, 5]. - Merging them into the final array results in: [2, 7, 4, 5, 8]. For the second test case: - Even heights are [2, 4], and in ascending order they are [2, 4]. - Odd heights are [1, 3, 5, 7], and in descending order they are [7, 5, 3, 1]. - As we place even-indexed first and then odd-indexed, the final resulting array is: [2, 7, 4, 5, 3, 1].","solution":"def rearrange_plants(T, test_cases): results = [] for n, heights in test_cases: even_heights = sorted(h for h in heights if h % 2 == 0) odd_heights = sorted((h for h in heights if h % 2 != 0), reverse=True) result = [0] * n even_idx, odd_idx = 0, 0 for i in range(n): if i % 2 == 0: if even_idx < len(even_heights): result[i] = even_heights[even_idx] even_idx += 1 else: result[i] = odd_heights[odd_idx] odd_idx += 1 else: if odd_idx < len(odd_heights): result[i] = odd_heights[odd_idx] odd_idx += 1 else: result[i] = even_heights[even_idx] even_idx += 1 results.append(result) return results"},{"question":"You have been tasked to develop a library management system that keeps track of book loans. Each time a student borrows or returns a book, the system should update the number of copies available for that book. You need to implement a function to handle multiple transactions and determine the final availability of each book. The function will receive the following inputs: - An integer N indicating the number of books. - A list of N strings representing the initial number of copies available for each book (each book is identified by its ISBN). - An integer T indicating the number of transactions. - A list of T strings representing the transactions (in the format \\"BORROW ISBN\\" or \\"RETURN ISBN\\"). The function should return a dictionary where the keys are the ISBNs of the books and the values are the final number of copies available after all transactions. Input format: - First line: integer N - Second line: list of N strings containing ISBN followed by the initial number of copies (each separated by a space). - Third line: integer T - Next T lines: strings representing the transactions. Output format: - A dictionary where the keys are the ISBNs and the values are the final number of copies available. Constraints: - ISBNs will be unique strings with up to 13 characters. - Initial number of copies for any book will be between 0 and 100. - Maximum number of transactions T will be 1000. Sample Input: 3 [\\"978-3-16-148410-0 5\\", \\"978-1-4028-9462-6 3\\", \\"978-0-387-95068-6 2\\"] 4 [\\"BORROW 978-3-16-148410-0\\", \\"RETURN 978-3-16-148410-0\\", \\"BORROW 978-0-387-95068-6\\", \\"BORROW 978-1-4028-9462-6\\"] Sample Output: {\'978-3-16-148410-0\': 5, \'978-1-4028-9462-6\': 2, \'978-0-387-95068-6\': 1} Explanation: We start with the initial availability: \\"978-3-16-148410-0\\" has 5 copies, \\"978-1-4028-9462-6\\" has 3 copies, and \\"978-0-387-95068-6\\" has 2 copies. 1. \\"BORROW 978-3-16-148410-0\\": Decreases the copies of \\"978-3-16-148410-0\\" to 4. 2. \\"RETURN 978-3-16-148410-0\\": Increases the copies of \\"978-3-16-148410-0\\" back to 5. 3. \\"BORROW 978-0-387-95068-6\\": Decreases the copies of \\"978-0-387-95068-6\\" to 1. 4. \\"BORROW 978-1-4028-9462-6\\": Decreases the copies of \\"978-1-4028-9462-6\\" to 2.","solution":"def update_book_availability(N, initial_books, T, transactions): Update the number of copies available for each book after a list of transactions. :param N: Number of books (int) :param initial_books: List of N strings with initial copies, in the format \\"ISBN number_of_copies\\" :param T: Number of transactions (int) :param transactions: List of T strings representing the transactions, in the format \\"BORROW ISBN\\" or \\"RETURN ISBN\\" :return: Dictionary with ISBNs as keys and final number of copies as values # Initialize dictionary with the initial number of copies book_copies = {} for entry in initial_books: isbn, copies = entry.split() book_copies[isbn] = int(copies) # Process each transaction for transaction in transactions: action, isbn = transaction.split() if action == \\"BORROW\\": if book_copies[isbn] > 0: book_copies[isbn] -= 1 elif action == \\"RETURN\\": book_copies[isbn] += 1 return book_copies"},{"question":"For this question, you are given a circular garden with radius R and center at the origin (0, 0) in a 2-D plane. There are M flowers planted in this garden, each at a unique position with coordinates (xi, yi). However, some of these flower positions might lie outside the garden area. Your task is to identify which flowers are inside the garden and which are outside. A flower is considered inside the garden if its distance from the center to the flower\'s position is less than or equal to the radius of the garden. Consider the Euclidean distance formula to calculate the distance: [ d = sqrt{(xi - 0)^2 + (yi - 0)^2} ] Given the radius R and coordinates of M flowers, output the number of flowers that lie inside the garden. INPUT The first line contains two space-separated integers, R (radius of the garden) and M (number of flowers). The next M lines contain two space-separated integers xi and yi, which represent the coordinates of each flower. OUTPUT Output a single integer, the number of flowers inside the garden. CONSTRAINTS 1 ≤ R ≤ 10^4 1 ≤ M ≤ 10^5 -10^4 ≤ xi, yi ≤ 10^4 SAMPLE INPUT 5 3 1 1 2 4 7 0 SAMPLE OUTPUT 2 Explanation Here, the radius of the garden is 5. - The distance of the flower at (1, 1) from the center is √(1^2 + 1^2) = √2, which is ≤ 5. - The distance of the flower at (2, 4) from the center is √(2^2 + 4^2) = √20, which is ≤ 5. - The distance of the flower at (7, 0) from the center is √(7^2 + 0^2) = 7, which is > 5. Thus, 2 flowers are inside the garden.","solution":"def count_flowers_inside_garden(R, M, flower_positions): Returns the count of flowers inside a circular garden with radius R and center at the origin given M flower positions. Parameters: R (int): Radius of the circular garden. M (int): Number of flowers. flower_positions (list of tuples): Each tuple contains two integers representing x and y coordinates of a flower. Returns: int: The count of flowers inside the garden. count = 0 radius_squared = R * R for x, y in flower_positions: if x * x + y * y <= radius_squared: count += 1 return count"},{"question":"Given a string containing digits and a positive integer k, repeat the digits k times in a grouped manner and return it in string format. Each group should be separated by a hyphen (\\"-\\"). Example 1: Input: s = \\"123\\", k = 3 Output: \\"123-123-123\\" Example 2: Input: s = \\"56\\", k = 2 Output: \\"56-56\\" Example 3: Input: s = \\"7\\", k = 1 Output: \\"7\\" Example 4: Input: s = \\"89\\", k = 0 Output: \\"\\" Constraints: - s only contains digits \'0\'-\'9\'. - 0 <= k <= 100","solution":"def repeat_digits(s, k): Repeats the string s k times in a grouped manner separated by hyphens. if k == 0: return \\"\\" return \'-\'.join([s] * k)"},{"question":"A circular queue is a linear data structure in which operations perform as though the end of the queue is connected to the beginning, thus making it circular. The queue has a fixed size, and it supports operations for enqueue (inserting an element), dequeue (removing an element), and checking if the queue is empty or full. Your task is to implement a circular queue that supports the following operations efficiently in constant time: - `enQueue(value)`: Adds an item into the circular queue. Return true if the operation is successful. - `deQueue()`: Deletes an item from the circular queue. Return true if the operation is successful. - `Front()`: Gets the front item from the queue. If the queue is empty, return -1. - `Rear()`: Gets the last item from the queue. If the queue is empty, return -1. - `isEmpty()`: Checks whether the circular queue is empty. Return true if the queue is empty, otherwise false. - `isFull()`: Checks whether the circular queue is full. Return true if the queue is full, otherwise false. # Input Format - You will receive a sequence of operations and values in the form of a list. - Operations could be any of the methods mentioned above. - Initialization of the queue is taken as `[\\"CircularQueue\\", k]` where `k` is the size of the queue. # Output Format - For each operation (other than initialization), output the result of the operation in the same sequence as the input. # Function Signature ```python class CircularQueue: def __init__(self, k: int): # Your initialization code here def enQueue(self, value: int) -> bool: # Your code here def deQueue(self) -> bool: # Your code here def Front(self) -> int: # Your code here def Rear(self) -> int: # Your code here def isEmpty(self) -> bool: # Your code here def isFull(self) -> bool: # Your code here def perform_operations(operations: List[List]) -> List: # A function to instantiate the CircularQueue class and perform operations # returning the output of the performed operations as a list. ``` # Example Input: ``` [ [\\"CircularQueue\\", 3], [\\"enQueue\\", 1], [\\"enQueue\\", 2], [\\"enQueue\\", 3], [\\"enQueue\\", 4], # Should return False because the queue is full. [\\"Rear\\"], # Should return 3 [\\"isFull\\"], # Should return True [\\"deQueue\\"], # Should return True [\\"enQueue\\", 4], # Should return True [\\"Rear\\"] # Should return 4 ] ``` Output: ``` [ None, True, True, True, False, 3, True, True, True, 4 ] ``` # Note - The `None` in the output corresponds to the initialization operation, which does not return any value. - Ensure that your implementation uses a fixed-size list to represent the circular queue and manages the head and tail pointers appropriately to maintain constant time complexity for each operation.","solution":"class CircularQueue: def __init__(self, k: int): self.size = k self.queue = [None] * k self.head = -1 self.tail = -1 self.count = 0 def enQueue(self, value: int) -> bool: if self.isFull(): return False if self.isEmpty(): self.head = 0 self.tail = (self.tail + 1) % self.size self.queue[self.tail] = value self.count += 1 return True def deQueue(self) -> bool: if self.isEmpty(): return False self.queue[self.head] = None if self.head == self.tail: self.head = -1 self.tail = -1 else: self.head = (self.head + 1) % self.size self.count -= 1 return True def Front(self) -> int: if self.isEmpty(): return -1 return self.queue[self.head] def Rear(self) -> int: if self.isEmpty(): return -1 return self.queue[self.tail] def isEmpty(self) -> bool: return self.count == 0 def isFull(self) -> bool: return self.count == self.size def perform_operations(operations: list) -> list: result = [] cq = None for op in operations: if op[0] == \\"CircularQueue\\": cq = CircularQueue(op[1]) result.append(None) elif op[0] == \\"enQueue\\": result.append(cq.enQueue(op[1])) elif op[0] == \\"deQueue\\": result.append(cq.deQueue()) elif op[0] == \\"Front\\": result.append(cq.Front()) elif op[0] == \\"Rear\\": result.append(cq.Rear()) elif op[0] == \\"isEmpty\\": result.append(cq.isEmpty()) elif op[0] == \\"isFull\\": result.append(cq.isFull()) return result"},{"question":"In this problem, you are given a list of N integers, where 1 ≤ N ≤ 10^5. Each integer in the list represents the height of a building in a street. The buildings are lined up such that the first element in the list is the height of the first building, the second element is the height of the second building, and so on. A building is considered to have a \'pleasant view\' if there are no taller buildings between it and the end of the list. Determine how many buildings have a \'pleasant view\'. Input: The first line is an integer T (1 ≤ T ≤ 100), representing the number of test cases. Each test case consists of two lines: - The first line is an integer N, the number of buildings. - The second line contains N space-separated integers, representing the heights of the buildings. Output: For each test case, print the number of buildings with a \'pleasant view\'. SAMPLE INPUT: 2 6 3 7 8 3 6 1 3 1 3 2 SAMPLE OUTPUT: 3 2 Explanation: For the first test case, the buildings with heights 8, 6, and 1 have a \'pleasant view\' because there are no taller buildings between them and the end of the list. For the second test case, the buildings with heights 3 and 2 have a \'pleasant view\'.","solution":"def count_pleasant_views(T, test_cases): Given the number of test cases T and a list of test_cases each having N (number of buildings) and a list of building heights, this function returns a list with the count of buildings having a \'pleasant view\' for each test case. results = [] for i in range(T): N, buildings = test_cases[i] max_height = 0 pleasant_view_count = 0 # Traverse the list from the end to the start for height in reversed(buildings): if height > max_height: pleasant_view_count += 1 max_height = height results.append(pleasant_view_count) return results"},{"question":"A group of students is participating in a relay race. The race consists of a circular track, and each student must run exactly one lap in a specific order. After completing their lap, the student must pass the baton to the next student. Due to varying running speeds, the time each student takes to complete one lap differs. The race coordinator wants to determine the time it takes from the moment the first student starts running until the moment the last student completes their lap. The order in which the students run is predetermined. Additionally, students cannot start their lap until they have received the baton from the previous student. Write a program to determine the total time required for all students to complete the relay race. -----Input----- The first line contains an integer N (1 leq N leq 1000), representing the number of students. The second line contains N space-separated integers T_1, T_2, dots, T_N (1 leq T_i leq 1000), where T_i denotes the time (in seconds) it takes for the i-th student to complete their lap. -----Output----- The first and only line of output should contain a single integer, the total time required for the relay race. -----Examples----- Sample Input 1: 3 5 10 3 Sample Output 1: 18 Sample Input 2: 4 2 4 6 8 Sample Output 2: 20","solution":"def total_relay_race_time(N, times): Given the number of students N and the list of times each student takes to complete their lap, return the total time for the relay race to complete. return sum(times)"},{"question":"Given a list of words, write a function to determine if there are any two different words in the list that are anagrams of each other. Example 1: Input: [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"facebook\\"] Output: True Explanation: The words \\"listen\\", \\"silent\\", and \\"enlist\\" are anagrams of each other. Example 2: Input: [\\"apple\\", \\"banana\\", \\"orange\\"] Output: False Explanation: There are no two words that are anagrams of each other. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `containsAnagramPair()` that takes a list of strings as its only argument and returns True if any two words are anagrams of each other, otherwise False. Constraints: 1 ≤ Number of words ≤ 100 1 ≤ Length of each word ≤ 50 Notes: - An anagram of a word is formed by rearranging its letters, using all the original letters exactly once.","solution":"def containsAnagramPair(words): Returns True if there are any two different words in the list that are anagrams of each other. seen = set() for word in words: # Sort the word to form a canonical form of the word\'s anagram sorted_word = \\"\\".join(sorted(word)) if sorted_word in seen: return True seen.add(sorted_word) return False # Example usage: # words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"facebook\\"] # print(containsAnagramPair(words)) # Output: True"},{"question":"Consider a matrix of size NxM filled with integer values. Your task is to determine if there exists a submatrix of size 2x2 such that the sum of the elements in this submatrix is equal to a given integer S. If such a submatrix exists, output \\"YES\\"; otherwise, output \\"NO\\". ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains three space-separated integers N, M, and S. - The next N lines contain M space-separated integers, representing the matrix. ------ Output Format ------ For each test case, print \\"YES\\" if there exists a 2x2 submatrix whose sum equals S. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N, M ≤ 1000 -10^6 ≤ Matrix elements ≤ 10^6 -4×10^6 ≤ S ≤ 4×10^6 ----- Sample Input 1 ------ 3 3 4 10 1 2 3 4 5 6 7 8 9 10 11 12 2 2 20 8 12 7 13 4 5 17 1 3 4 1 2 4 2 1 3 4 3 4 5 2 1 9 8 7 6 1 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test Case 1: The submatrix with elements (5, 6, 9, 10) sums up to 30. Test Case 2: The submatrix with elements (8, 12, 7, 13) sums up to 40. Test Case 3: No 2x2 submatrix sums up to 17.","solution":"def does_submatrix_exist(N, M, S, matrix): Determines if there exists a 2x2 submatrix whose elements sum to S. Parameters: N (int): Number of rows in the matrix. M (int): Number of columns in the matrix. S (int): The sum that we are checking for in the 2x2 submatrix. matrix (List[List[int]]): The matrix represented as a list of lists. Returns: str: \\"YES\\" if such a submatrix exists, \\"NO\\" otherwise. for i in range(N - 1): for j in range(M - 1): submatrix_sum = matrix[i][j] + matrix[i][j+1] + matrix[i+1][j] + matrix[i+1][j+1] if submatrix_sum == S: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): N, M, S = test_cases[i][0] matrix = test_cases[i][1] result = does_submatrix_exist(N, M, S, matrix) results.append(result) return results"},{"question":"Given an array of distinct integers nums and an integer target, return all possible unique combinations of three numbers within nums that sum up to the target. The solution set must not contain duplicate combinations. -----Input----- - The first line contains two integers n (3 ≤ n ≤ 1000), the number of elements in array nums, and target (-10^5 ≤ target ≤ 10^5). - The second line contains n integers representing the array nums, where each element is in the range (-10^5 ≤ nums[i] ≤ 10^5). -----Output----- - Print all unique combinations of three integers from nums that sum up to target, each combination should be in a separate line, and the numbers within each combination should be sorted in non-decreasing order. - If there are no such combinations, print \\"No combinations found\\". -----Examples----- Input 6 0 -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1 Input 5 9 1 2 3 4 5 Output 1 3 5 2 3 4 -----Note----- Each combination of three numbers in the output must be unique, even if different permutations of the same numbers can sum up to the target. For example, in the first example output, -1 -1 2 and -1 2 -1 would not be both valid output lines, only one should be printed.","solution":"def three_sum(nums, target): Returns all unique combinations of three numbers in nums that sum up to target, sorted in non-decreasing order. If no such combinations found, returns \\"No combinations found\\". nums.sort() n = len(nums) result = set() for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = int(i + 1), int(n - 1) while left < right: sum_three = nums[i] + nums[left] + nums[right] if sum_three == target: result.add((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_three < target: left += 1 else: right -= 1 if result: return sorted(result) else: return \\"No combinations found\\""},{"question":"A company produces a set of products, each with a different weight. They want to pack these products into boxes such that each box has a weight capacity limit. You are required to determine the minimum number of boxes required to pack all the products without exceeding the weight limit of each box. Example 1: Input: Weights = [2, 3, 7, 8, 4], Capacity = 10 Output: 3 Explanation: You can pack the products in 3 boxes as follows: Box 1: [2, 3, 4] Box 2: [7] Box 3: [8] Example 2: Input: Weights = [5, 5, 5, 5, 5], Capacity = 10 Output: 3 Explanation: You can pack the products in 3 boxes as follows: Box 1: [5, 5] Box 2: [5, 5] Box 3: [5] Your Task: You don\'t need to read or print anything. Your task is to complete the function minBoxes() which takes the array Weights and the integer Capacity as input parameters and returns the minimum number of boxes required to pack all the products. Expected Time Complexity: O(N log N) Expected Space Complexity: O(1) Constraints: 1 ≤ N ≤ 10^3 1 ≤ Weights[i], Capacity ≤ 10^4","solution":"def minBoxes(weights, capacity): Returns the minimum number of boxes required to pack all the products without exceeding the weight limit of each box. weights.sort(reverse=True) # Sort the weights in descending order boxes = 0 while weights: current_capacity = capacity box_contents = [] for weight in weights[:]: if weight <= current_capacity: current_capacity -= weight box_contents.append(weight) for weight in box_contents: weights.remove(weight) boxes += 1 return boxes"},{"question":"Given a positive integer N, return the smallest integer Y that is greater than or equal to N and is a palindrome. A palindrome is a number that reads the same forward and backward, such as 101 or 1331. Example 1: Input: 28 Output: 33 Explanation: The smallest palindrome greater than or equal to 28 is 33. Example 2: Input: 123 Output: 131 Explanation: The smallest palindrome greater than or equal to 123 is 131. Example 3: Input: 8 Output: 8 Explanation: The smallest palindrome greater than or equal to 8 is 8. Note: 1 <= N <= 10^6","solution":"def is_palindrome(num): Check if a given number is a palindrome. return str(num) == str(num)[::-1] def smallest_palindrome(N): Returns the smallest palindrome greater than or equal to N. while not is_palindrome(N): N += 1 return N"},{"question":"Jane is standing on a horizontal number line at point 0. There are n distinct points on the line at unique positions denoted as x_1, x_2, ldots, x_n. Jane can jump to any of these points but wants to minimize her total travel distance by selecting a point to jump to first and then jumping to the remaining points in an optimal sequence. More formally, she wants to start at 0, jump to one of the points, and then visit all other points in any order such that the total distance traveled is minimized. Your task is to determine for each of the given test cases the minimum total travel distance Jane would have to cover. -----Input----- The first line contains a single integer t — the number of test cases (1 < t le 1000). The next t sets describe the test cases. For each test case, the first line contains an integer n — the number of points on the number line (1 le n le 10^5). The second line contains n distinct integers x_1, x_2, ldots, x_n (1 le x_i le 10^9) representing the positions on the number line. -----Output----- For each test case, print a single integer — the minimum total travel distance Jane would cover for the corresponding test case. -----Example----- Input 2 3 2 10 6 4 7 5 2 9 Output 14 20 -----Note----- In the first test case, Jane starts at 0, jumps to 2, then to 6, and then to 10, covering a total distance of (2 - 0) + (6 - 2) + (10 - 6) = 2 + 4 + 4 = 10. In the second test case, Jane starts at 0, jumps to 2, then to 5, then to 7, and finally to 9, covering a total distance of (2 - 0) + (5 - 2) + (7 - 5) + (9 - 7) = 2 + 3 + 2 + 2 = 9.","solution":"def minimum_total_travel_distance(test_cases): results = [] for x_positions in test_cases: sorted_positions = sorted(x_positions) total_distance = sorted_positions[-1] - sorted_positions[0] results.append(total_distance) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] for i in range(t): n = int(lines[2 * i + 1]) x_positions = list(map(int, lines[2 * i + 2].split())) test_cases.append(x_positions) return test_cases def handle_multiple_cases(input_data): test_cases = parse_input(input_data) results = minimum_total_travel_distance(test_cases) return results"},{"question":"You are given n different types of items, each item i has a specified weight wi and value vi. You also have a knapsack that can hold a maximum weight W. Your goal is to determine the maximum value you can accumulate by putting items into the knapsack without exceeding its weight capacity. Input - The first line contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 1000) — the number of items and the maximum weight the knapsack can hold. - The next n lines each contain two integers wi and vi (1 ≤ wi, vi ≤ 1000) — the weight and value of the i-th item. Output - Print one integer — the maximum value that can be accumulated without exceeding the knapsack\'s weight capacity. Examples Input 4 7 1 1 3 4 4 5 5 7 Output 9 Input 3 50 10 60 20 100 30 120 Output 220","solution":"def knapsack(n, W, items): Returns the maximum value that can be accumulated without exceeding the knapsack\'s weight capacity. :param int n: Number of items. :param int W: Maximum weight the knapsack can hold. :param list items: List of tuples where each tuple contains two integers (weight, value) for each item. :return: Maximum value that can be accumulated. :rtype: int dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): dp[i][w] = dp[i - 1][w] if w >= wi: dp[i][w] = max(dp[i][w], dp[i - 1][w - wi] + vi) return dp[n][W] # Process input and call function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) W = int(data[1]) items = [] for i in range(n): wi = int(data[2 + 2 * i]) vi = int(data[3 + 2 * i]) items.append((wi, vi)) print(knapsack(n, W, items)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of integers `numbers` and another list of integers `queries`. For each query, you need to count how many times the corresponding number appears in the `numbers` list and return a list of counts. Write a function `count_occurrences(numbers: List[int], queries: List[int]) -> List[int]` that takes two lists as input and returns a list of occurrences. For example: ``` numbers = [1, 2, 3, 4, 5, 3, 3, 2] queries = [3, 2, 1] count_occurrences(numbers, queries) => [3, 2, 1] ``` Explanation: - The number `3` appears `3` times in `numbers`. - The number `2` appears `2` times in `numbers`. - The number `1` appears `1` time in `numbers`.","solution":"from typing import List def count_occurrences(numbers: List[int], queries: List[int]) -> List[int]: For each query, count the number of times it appears in the numbers list and return the counts. :param numbers: List of integers to count from :param queries: List of integers to query counts for :return: List of counts corresponding to each query occurences = [] for query in queries: occurences.append(numbers.count(query)) return occurences"},{"question":"You are given an array of positive integers. Your task is to determine the number of distinct prime factors for each element in the array. For example, if the array is [12, 15, 21], the distinct prime factors are: - 12: 2 and 3 - 15: 3 and 5 - 21: 3 and 7 ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the size of the array. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N} denoting the array. ------ Output Format ------ For each test case, output on a new line the number of distinct prime factors for each element in the array, space-separated. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^5 1 ≤ A_{i} ≤ 10^6 - Sum of N over all test cases does not exceed 10^{5}. ------ Sample Input 1 ------ 2 3 12 15 21 4 2 3 4 5 ------ Sample Output 1 ------ 2 2 2 1 1 1 1","solution":"def distinct_prime_factors_count(arr): Given an array of positive integers, this function returns the number of distinct prime factors for each element. MAX_VAL = 10**6 smallest_prime_factor = list(range(MAX_VAL + 1)) for i in range(2, int(MAX_VAL**0.5) + 1): if smallest_prime_factor[i] == i: for j in range(i * i, MAX_VAL + 1, i): if smallest_prime_factor[j] == j: smallest_prime_factor[j] = i def prime_factors_count(n): unique_factors = set() while n > 1: unique_factors.add(smallest_prime_factor[n]) n //= smallest_prime_factor[n] return len(unique_factors) result = [prime_factors_count(n) for n in arr] return result def process_test_cases(test_cases): results = [] for case in test_cases: results.append(distinct_prime_factors_count(case)) return results"},{"question":"In this exercise, you will write a function that determines if a string has all unique characters. Implement the function `is_unique` that takes a single string and returns `True` if all characters in the string are unique, otherwise returns `False`. For example: - `is_unique(\\"abcdef\\")` should return `True` because all characters are unique. - `is_unique(\\"hello\\")` should return `False` because the character \'l\' is repeated. You may not use additional data structures such as lists or dictionaries to solve this problem. Try to solve it using only basic string operations and control flow constructs. Additional test cases will be provided to ensure the correctness of your implementation. Good luck!","solution":"def is_unique(s): Check if a string has all unique characters. Parameters: - s (str): the input string to check. Returns: - bool: True if all characters in the string are unique, False otherwise. length = len(s) for i in range(length): for j in range(i + 1, length): if s[i] == s[j]: return False return True"},{"question":"# Series and Parallel Resistance Calculator Given a list of resistances and a combination type (either \\"series\\" or \\"parallel\\"), create a function to calculate the equivalent resistance of the given resistances. In a series circuit, the total resistance is the sum of the individual resistances: [ R_{total} = R_1 + R_2 + ... + R_n ] In a parallel circuit, the reciprocal of the total resistance is the sum of the reciprocals of the individual resistances: [ frac{1}{R_{total}} = frac{1}{R_1} + frac{1}{R_2} + ... + frac{1}{R_n} ] # Function Description Create a function `equivalent_resistance(resistances, combination)` where: - `resistances` (list of floats or integers): List of resistance values - `combination` (string): Either \\"series\\" or \\"parallel\\" indicating the type of connection The function returns a single float rounded to 2 decimal places, which is the equivalent resistance. # Example ```python def equivalent_resistance(resistances, combination): if combination == \\"series\\": return round(sum(resistances), 2) elif combination == \\"parallel\\": return round(1 / sum(1 / r for r in resistances), 2) # Examples print(equivalent_resistance([10, 20, 30], \\"series\\")) # Returns: 60.0 print(equivalent_resistance([10, 20, 30], \\"parallel\\")) # Returns: 5.45 ``` # Constraints - Each resistance is a positive real number. - The number of resistances will be between 1 and 1000. - For parallel combinations, the reciprocal sum will always be non-zero.","solution":"def equivalent_resistance(resistances, combination): Calculate the equivalent resistance for a list of resistances in either series or parallel combination. Parameters: resistances (list of float or int): List of resistance values. combination (str): Either \\"series\\" or \\"parallel\\" indicating the type of connection. Returns: float: The equivalent resistance rounded to 2 decimal places. if combination == \\"series\\": return round(sum(resistances), 2) elif combination == \\"parallel\\": return round(1 / sum(1 / r for r in resistances), 2) else: raise ValueError(\\"Invalid combination type; choose either \'series\' or \'parallel\'\\")"},{"question":"**Problem** Given a string `s` and a list of words `words`, determine the number of words that are subsequences of `s`. A subsequence of a string is a new string generated from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. For example, `\\"ace\\"` is a subsequence of `\\"abcde\\"`, but `\\"aec\\"` is not. **Constraints** The input satisfies the following conditions: * 1 le |s| le 1000 * 1 le |words| le 1000 * 1 le |words[i]| le 100 **Input** The input is given in the following format: ``` s n word_1 word_2 ... word_n ``` Where `s` is the given string, `n` is the number of words in the list, and the following lines list the words one by one. **Output** Print the number of words in the list that are subsequences of `s`. **Examples** Input: ``` abcde 3 a bb acd ``` Output: ``` 2 ``` Input: ``` xyz 2 x xyz ``` Output: ``` 2 ``` Input: ``` abcdef 4 abc defg bde fgh ``` Output: ``` 2 ``` Input: ``` hello 3 hlo hello oell ``` Output: ``` 2 ``` Input: ``` abcdefghijkl 5 abc ijk adl bdeh xy ``` Output: ``` 4 ```","solution":"def is_subsequence(s, word): Check if word is a subsequence of the string s. :param s: The main string :param word: The word to check if it\'s a subsequence :return: True if word is a subsequence of s, False otherwise it = iter(s) return all(char in it for char in word) def count_subsequences(s, words): Count how many words in the list are subsequences of the string s. :param s: The main string :param words: List of words to check :return: The count of words that are subsequences of s return sum(is_subsequence(s, word) for word in words)"},{"question":"Tom loves to play with strings and today he came up with a new game. He has a string `S` and he wants to find the longest substring of `S` that contains at most two distinct characters. He needs your help to accomplish this task. Given a string `S`, you need to find the length of the longest substring that contains at most two distinct characters. Input First line contains an integer T, the number of test cases. Each of the next T lines contains a string S consisting of lowercase English characters only. Output For each test case, output the length of the longest substring that contains at most two distinct characters on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 2 eceba ccaabbb SAMPLE OUTPUT 3 5 Explanation - For the first test case, the longest substring with at most two distinct characters is \\"ece\\" with length 3. - For the second test case, the longest substring with at most two distinct characters is \\"aabbb\\" with length 5.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 max_len = 2 hashmap = {} while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len def longest_substring_with_two_distinct_chars(T, test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring_two_distinct(s)) return results"},{"question":"Polycarpus has a string s consisting of lowercase English letters. Polycarpus likes it when a string has a high \\"beauty score.\\" The beauty score of a string is defined as the sum of the frequencies of its most frequent character and its least frequent character. Polycarpus has an operation available to him: he can choose any character in the string and change it to any other lowercase English letter (\'a\' to \'z\'). He can perform this operation an infinite number of times. Polycarpus wants to know the maximum beauty score he can achieve for the string s if he performs an arbitrary number of such operations. Help Polycarpus determine the maximum beauty score. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string s. The second line contains the string s itself, consisting of n lowercase English letters. -----Output----- Print a single integer — the maximum beauty score of the string s if Polycarpus performs an arbitrary number of the given operation. -----Examples----- Input 5 abcde Output 5 Input 3 aaa Output 6","solution":"def max_beauty_score(s): Returns the maximum beauty score of the string s if an arbitrary number of operations are performed. # The maximum beauty score is achieved by setting all letters to the same character to make its frequency n # and changing one letter to another character to make its frequency 1. n = len(s) max_score = n + 1 # n (most frequent) + 1 (least frequent will always be 1 after operation) return max_score"},{"question":"You are given a list of integers. Your task is to rearrange the integers such that the largest number that can be formed by concatenating the elements together is obtained. For example, given the list: [3, 30, 34, 5, 9], the largest number that can be formed is 9534330. Input: The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. The second line contains n space-separated integers (1 ≤ integer ≤ 10^9). Output: Print the largest number that can be formed by concatenating the integers. Constraints: 1 ≤ n ≤ 100 1 ≤ integer ≤ 10^9 Sample Input 1: 5 3 30 34 5 9 Sample Output 1: 9534330 Sample Input 2: 3 54 546 548 Sample Output 2: 54854654","solution":"from functools import cmp_to_key def largest_number(arr): Given a list of non-negative integers, arranges them such that they form the largest number. # Custom comparator to decide which concatenation forms a larger number def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert numbers to strings for easy comparison arr = list(map(str, arr)) # Sort the array with the custom comparator arr.sort(key=cmp_to_key(compare)) # Join the sorted array into the largest number largest_num = \'\'.join(arr) # Edge case: multiple zeros if largest_num[0] == \'0\': return \'0\' else: return largest_num"},{"question":"Given two strings str1 and str2, determine whether the second string can be formed by rearranging the characters of the first string. Return \\"true\\" if it is possible, otherwise return \\"false\\". Both strings consist of only lowercase alphabets. Example 1: Input: str1 = \\"listen\\" str2 = \\"silent\\" Output: true Example 2: Input: str1 = \\"triangle\\" str2 = \\"integral\\" Output: true Example 3: Input: str1 = \\"abc\\" str2 = \\"abd\\" Output: false Your Task: You don\'t need to read input. Your task is to complete the function canFormByRearranging() which takes two strings str1 and str2 as input parameters and returns the boolean value indicating whether str2 can be formed by rearranging the characters of str1. Expected Time Complexity: O(N), where N is the length of the strings. Expected Auxiliary Space: O(1) Constraints: 1 <= |str1|, |str2| <= 1000","solution":"def canFormByRearranging(str1, str2): Determine whether str2 can be formed by rearranging the characters of str1. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str2 can be formed by rearranging the characters of str1, else False. if len(str1) != len(str2): return False char_count = [0] * 26 # There are 26 lowercase alphabets for char in str1: char_count[ord(char) - ord(\'a\')] += 1 for char in str2: char_count[ord(char) - ord(\'a\')] -= 1 if char_count[ord(char) - ord(\'a\')] < 0: return False return True"},{"question":"A company named TechCorp holds an annual coding competition where individual participants are awarded points for solving problems. The final tally of scores determines the overall ranking. Participants with the same score will share the same rank. A participant\'s rank is determined by 1 + the number of participants who have scored strictly higher points. Write a program to calculate the rank of each participant based on their individual scores. # Input - The first line contains an integer T, denoting the number of participants. - The second line contains T space-separated integers, Si, representing the score of each participant. # Output Print T space-separated integers representing the rank of each participant in the order they were provided. # Constraints - 1 ≤ T ≤ 2000 - 0 ≤ Si ≤ 200 # Sample Input 5 12 96 96 41 69 # Sample Output 5 1 1 4 3 # Explanation In the given example: - The participant with a score of 12 has 4 participants scoring higher, so their rank is 1 + 4 = 5. - The participants with scores of 96 are the highest and thus both share the rank of 1. - The participant with a score of 41 has 3 participants scoring higher, so their rank is 1 + 3 = 4. - The participant with a score of 69 has 2 participants scoring higher, so their rank is 1 + 2 = 3.","solution":"def calculate_ranks(T, scores): sorted_scores = sorted(scores, reverse=True) rank_dict = {} rank = 1 for i in range(T): if sorted_scores[i] not in rank_dict: rank_dict[sorted_scores[i]] = rank rank += 1 ranks = [rank_dict[score] for score in scores] return ranks"},{"question":"You are a librarian tasked with creating an index of words from various books in your library. Each book is represented as a single text string, and you need to list the unique words from that text in alphabetical order, considering punctuation and capitalization as well. Words can include apostrophes (e.g., \\"it\'s\\"), but other punctuation marks (commas, periods, etc.) should be removed. -----Input----- The input consists of a single line containing the text string, which can be up to 10^5 characters long. The text will include only printable ASCII characters. -----Output----- The output should consist of the unique words from the text string, each word printed on a new line, in alphabetical order. -----Examples----- Sample Input 1: It\'s a beautiful day! The sun is shining, and the birds are singing. Sample Output 1: It\'s The a and are beautiful birds day is shining singing sun the Sample Input 2: Programming in Python is fun. Python is powerful, yet simple. Sample Output 2: Programming Python fun in is powerful simple yet","solution":"import re def create_index(text): Takes a string text and returns a list of unique words sorted alphabetically, considering only words and handling apostrophes but not other punctuations. # Remove punctuation except for apostrophes text = re.sub(r\\"[^ws\']\\", \'\', text) # Split text into words words = text.split() # Get unique words and sort them unique_words = sorted(set(words)) return unique_words"},{"question":"You are given an array of integers `nums`, representing the amount of money of each house. All houses are arranged in a circle. Your task is to rob houses such that no two adjacent houses are robbed and return the maximum amount of money you can rob. Since the houses are in a circle, the first and the last house are adjacent to each other. Example 1: Input: nums = [2, 3, 2] Output: 3 Explanation: You cannot rob the first and last house together, so you end up robbing house 2 for a maximum of 3. Example 2: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 and house 3 for a maximum of 4. Example 3: Input: nums = [0] Output: 0 Explanation: There\'s only one house with 0 money, so you can\'t rob anything. Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 1000","solution":"def rob(nums): Returns the maximum amount of money you can rob without robbing two adjacent houses (including the circular adjacency). if not nums: return 0 if len(nums) == 1: return nums[0] def rob_linear(houses): prev, curr = 0, 0 for money in houses: prev, curr = curr, max(curr, prev + money) return curr return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"In a small coastal city, there is a series of lighthouses that must be strategically activated to guide ships safely to the harbor. Each lighthouse has its own unique activation schedule and needs to be turned on at specific times to ensure the harbor is well-lit. Your task is to create an algorithm that determines the optimal activation plan for the lighthouses. Each lighthouse can only be turned on once and must remain on until the end of its schedule. The goal is to maximize the coverage time of the harbor with the least number of lighthouses turned on. # Input You will be given an integer `n` representing the number of lighthouses, followed by `n` lines where each line contains two integers `start` and `end` representing the activation schedule of a lighthouse. The `start` time signifies when the lighthouse can begin coverage, and the `end` time signifies when it ends. # Output Output a single integer representing the minimum number of lighthouses needed to cover the maximum possible duration of time. # Constraints - `1 <= n <= 10^5` - `1 <= start < end <= 10^9` # Example Input ``` 6 1 5 2 6 3 9 4 10 6 7 8 11 ``` Output ``` 3 ``` # Explanation In the example provided, the optimal activation plan involves activating three lighthouses to cover the maximum duration without gaps: one from time 1 to 5, one from time 4 to 10, and one from time 8 to 11.","solution":"def min_lighthouses(n, schedules): Determines the minimum number of lighthouses needed to cover the maximum possible duration of time with optimal use of lighthouses. :param n: Integer, number of lighthouses :param schedules: List of tuples, each containing two integers (start, end) representing the activation schedule of a lighthouse. :return: Integer, minimum number of lighthouses needed # Sort the lighthouses by their end time schedules.sort(key=lambda x: x[1]) end_time = 0 count = 0 for start, end in schedules: if start >= end_time: end_time = end count += 1 return count"},{"question":"Given a string s, determine if it can be rearranged in such a way that no two adjacent characters are the same. Return \\"YES\\" if it is possible to rearrange the string, otherwise return \\"NO\\". Example 1: Input: s = \\"aab\\" Output: \\"YES\\" Explanation: One possible rearrangement is \\"aba\\". Example 2: Input: s = \\"aaab\\" Output: \\"NO\\" Explanation: There is no way to rearrange the string without two adjacent characters being the same. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canRearrange() which takes a string s as input and returns the answer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^5 s consists of lowercase English letters only.","solution":"def canRearrange(s): Determine if string s can be rearranged so that no two adjacent characters are the same. from collections import Counter # Count frequency of each character freq = Counter(s) max_freq = max(freq.values()) # Check if the most frequent character can fit without adjacent duplicates if max_freq > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"You are given a rectangular grid with R rows and C columns. Each cell in the grid can either be empty or blocked, represented by \'.\' and \'#\', respectively. You need to find the number of different connected components of empty cells (\'.\') in the grid. Two cells are considered to be connected if they share a side. Write a program that reads this grid and outputs the number of connected components of empty cells. Input: The input is given in the following format: R C grid[1] grid[2] ... grid[R] The first line contains two integers, R and C (1 ≤ R, C ≤ 1000), representing the number of rows and columns, respectively. The next R lines each contain a string of length C consisting of \'.\' and \'#\', which represents the cells of the grid. Output: The output should be a single integer, representing the number of connected components of empty cells in the grid. Example Input: 4 5 .#..# #..#. #.# ....# Output: 3 Explanation: In this example, there are three connected components of empty cells: 1. The first component includes cells (0,1), (0,2), and (1,1). 2. The second component includes cells (3,0), (3,1), (3,2), and (3,3). 3. The third component includes cell (1,3).","solution":"def find_connected_components(R, C, grid): Returns the number of connected components of empty cells (\'.\') in the grid. def dfs(r, c): # Directions to move in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(r, c)] visited.add((r, c)) while stack: row, col = stack.pop() for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in visited and grid[nr][nc] == \'.\': stack.append((nr, nc)) visited.add((nr, nc)) visited = set() num_components = 0 for r in range(R): for c in range(C): if grid[r][c] == \'.\' and (r, c) not in visited: dfs(r, c) num_components += 1 return num_components"},{"question":"Given a string s consisting of alphabets and digits, write a function to form a new string by reversing only the alphabets while keeping the digits at their original positions. Example 1: Input: s = \\"a1b2c3d\\" Output: \\"d1c2b3a\\" Explanation: Only the alphabets are reversed while digits remain in their original positions. Example 2: Input: s = \\"ab12cd34\\" Output: \\"dc12ba34\\" Explanation: Only the alphabets are reversed while digits stay in their positions. Your Task: You do not need to read input or print anything. Your task is to complete the function `reverseAlphabets()` which takes a string s as input parameter and returns the new string with reversed alphabets and original position of digits. Expected Time Complexity: O(|s|) Expected Auxiliary Space: O(|s|) Constraints: 1 ≤ |s| ≤ 1000","solution":"def reverseAlphabets(s): Reverses only the alphabets in the string s and keeps digits in their original positions. Args: s: str - input string containing alphabets and digits Returns: str - new string with alphabets reversed and digits in original positions # Extract all alphabets from the string alphabets = [ch for ch in s if ch.isalpha()] # Initialize an empty list to build the result result = [] # Traverse the original string for ch in s: if ch.isalpha(): # Pop the last alphabet from the list and append to result result.append(alphabets.pop()) else: # Append digit directly to result result.append(ch) return \\"\\".join(result)"},{"question":"Unique Paths in a Grid A robot is located at the top-left corner of a `m x n` grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. How many possible unique paths are there to get to the bottom-right corner? You can optimize the solution by using dynamic programming. # Constraints * 1 ≤ m, n ≤ 100 # Input Format Input is given from standard input in the following format. ``` m n ``` # Output Format Output the answer as an integer. # Sample Input 1 ``` 3 7 ``` # Sample Output 1 ``` 28 ``` # Explanation There are 28 unique paths from the top-left corner to the bottom-right corner in a 3x7 grid. # Sample Input 2 ``` 3 2 ``` # Sample Output 2 ``` 3 ```","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. The robot can move only down or right. # Create a 2D table to store results of subproblems dp = [[0] * n for _ in range(m)] # Fill the first column, as there is only one way to reach any cell in the first column for i in range(m): dp[i][0] = 1 # Fill the first row, as there is only one way to reach any cell in the first row for j in range(n): dp[0][j] = 1 # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): # The number of ways to reach the current cell is the sum of the ways to reach the cell above and the cell to the left dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right cell contains the number of unique paths return dp[m-1][n-1]"},{"question":"Alice is planning to host a party and has decided to buy several types of beverages for her guests. Each type of beverage is packed in containers of various sizes. Alice wants to ensure that each guest receives exactly one full container of beverage. However, she also wants to ensure that the total number of containers she needs to buy is minimized, as she doesn\'t want to waste any leftover containers. Given the number of guests and the sizes of the containers available for each type of beverage, help Alice determine the minimum number of containers she needs to buy such that each guest gets exactly one full container of any beverage. ---Input--- The first line contains an integer n (1 ≤ n ≤ 100) — the number of guests. The second line contains an integer m (1 ≤ m ≤ 50) — the number of types of beverages. The next m lines each contain an integer c_i (1 ≤ c_i ≤ 100) — the number of containers available for the i-th type of beverage. ---Output--- Print a single integer — the minimum number of containers Alice needs to buy so that each guest gets exactly one full container of any beverage. ---Example--- Input 10 3 6 3 2 Output 10 Input 5 4 1 2 3 1 Output 5 ---Note--- In the first example, Alice has 10 guests and 3 types of beverages with 6, 3, and 2 containers available respectively. The optimal solution is to buy all available containers (6 + 3 + 1), totaling 10 containers, which is the exact number of guests. In the second example, Alice has 5 guests and 4 types of beverages with 1, 2, 3, and 1 containers available respectively. The optimal solution is to buy one container from each of the first and fourth type, and three containers from the third type, totaling 5 containers, which matches the number of guests.","solution":"def min_containers(n, m, containers): Determines the minimum number of containers needed so each guest gets exactly one full container. :param n: Number of guests :param m: Number of types of beverages :param containers: List of integers representing the number of containers available for each type of beverage :return: Minimum number of containers needed containers.sort(reverse=True) total_containers = 0 for c in containers: total_containers += c if total_containers >= n: return n return total_containers"},{"question":"Your team is working on a navigation system for an autonomous delivery robot that operates in a warehouse. The warehouse is represented as an `M x N` grid where each cell can either be empty (denoted by \'.\') or blocked with an obstacle (denoted by \'#\'). The robot can move up, down, left, or right but cannot move diagonally or through obstacles. Given the starting position of the robot (sx, sy) and the delivery destination (dx, dy), you need to determine the shortest path from the start to the destination. If it is possible to reach the destination, return the length of the shortest path. If it is not possible to reach the destination, return -1. # Input - The first line of input contains two integers, `M` and `N`, the dimensions of the grid (1 ≤ M, N ≤ 500). - The next `M` lines each contain `N` characters (either \'.\' or \'#\') representing the grid. - The next line contains two integers, `sx` and `sy` (the starting coordinates, 0 ≤ sx < M, 0 ≤ sy < N). - The next line contains two integers, `dx` and `dy` (the destination coordinates, 0 ≤ dx < M, 0 ≤ dy < N). # Output - Output a single integer representing the length of the shortest path from the start to the destination, or -1 if there is no possible path. # Constraints - You can assume that the start and destination cells are always empty (i.e., they contain \'.\'). # Example Input ``` 5 7 . . . # . . . . # . . . # . . # . . . . . . . # # . . . . . . . . . . 0 0 4 6 ``` Output ``` 10 ``` Explanation The shortest path from (0, 0) to (4, 6) consists of 10 steps: (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2) → (3, 2) → (3, 3) → (4, 3) → (4, 4) → (4, 5) → (4, 6). Note: You may implement the solution using Breadth-First Search (BFS) for finding the shortest path in an unweighted grid.","solution":"from collections import deque def shortest_path(grid, sx, sy, dx, dy): rows, cols = len(grid), len(grid[0]) # directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the starting or destination points are valid if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 # Queue for BFS queue = deque([(sx, sy, 0)]) # (current_x, current_y, distance_travelled) visited = set((sx, sy)) while queue: x, y, distance = queue.popleft() if (x, y) == (dx, dy): return distance for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, distance + 1)) visited.add((nx, ny)) return -1"},{"question":"A museum has recently installed an interactive exhibition consisting of several rooms connected by corridors. Each room contains a valuable exhibit, but due to safety concerns, only a limited number of people can be in each room simultaneously. The museum guide needs to ensure that all visitors get to see all the exhibits while also respecting the capacity limits of the rooms. Consider the museum as a graph where rooms are nodes and corridors are edges. Each corridor has a specific width, which dictates the number of visitors that can move through it at a time. All visitors start at the entrance room and need to visit all other rooms exactly once before returning to the entrance. Your task is to determine the maximum number of visitors that can simultaneously tour the museum without violating the room capacities and corridor widths. -----Input----- - The first line contains two integers ( n ) (2 ≤ ( n ) ≤ 10) — the number of rooms and the number of visitors, respectively. - The second line contains ( n ) space-separated integers: the i-th number indicates the maximum capacity of the i-th room. - Each of the next ( n-1 ) lines contains three integers ( u ), ( v ), and ( w ) (1 ≤ ( u, v ) ≤ ( n ), 1 ≤ ( w ) ≤ 10^5) — representing that there is a corridor between room ( u ) and room ( v ) that can handle at most ( w ) visitors at a time. The input guarantees that the rooms are connected. -----Output----- Print a single integer — the maximum number of visitors that can simultaneously tour the museum. -----Examples----- Input 4 10 5 7 4 6 1 2 3 1 3 5 2 4 4 Output 4 Input 3 15 8 3 7 1 2 6 1 3 7 Output 6 -----Note----- In the first example, the optimal number of visitors that can tour the museum is 4 because although room 2 can handle 7 visitors, the corridor between room 1 and room 2 can only handle 3 visitors at a time, thus limiting the number of visitors that can simultaneously tour the entire museum. In the second example, the limiting factor is room 2, which can only handle 3 visitors at a time, despite other rooms and corridors allowing more visitors. Hence, only 6 visitors can tour the museum without violating any constraints.","solution":"def max_visitors(n, visitors, capacities, corridors): # Let\'s take the minimum of the room capacities and the corridor widths min_capacity = min(capacities) min_corridor = min([c[2] for c in corridors]) # The maximum number of visitors is the minimum of the total visitors and the smallest capacity or corridor width return min(visitors, min(min_capacity, min_corridor)) # Example usage: # n = 4 # visitors = 10 # capacities = [5, 7, 4, 6] # corridors = [(1, 2, 3), (1, 3, 5), (2, 4, 4)] # print(max_visitors(n, visitors, capacities, corridors)) # Output: 3"},{"question":"Given a string containing only digits, print all possible letter combinations that the number could represent using the T9 phone keypad mapping. Return the combinations in lexicographical order. The mappings are as follows: ``` 2 -> abc 3 -> def 4 -> ghi 5 -> jkl 6 -> mno 7 -> pqrs 8 -> tuv 9 -> wxyz ``` Example 1: Input: \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Example 2: Input: \\"2\\" Output: [\\"a\\", \\"b\\", \\"c\\"] Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `letterCombinations` that takes a string (digits) and returns a list of strings (combinations) in lexicographical order. The driver code takes care of the printing. Expected Time Complexity: O(4^n), where n is the length of the input string. Expected Auxiliary Space: O(n). Constraints: 1 ≤ len(digits) ≤ 4 The input string contains only digits from \'2\' to \'9\'.","solution":"import itertools def letterCombinations(digits): Returns all possible letter combinations that the number could represent using the T9 phone keypad mapping. if not digits: return [] # Mapping digits to their respective letters phone = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Create a list of corresponding letters for each digit letters = [phone[digit] for digit in digits] # Generate all possible combinations combinations = [\'\'.join(combo) for combo in itertools.product(*letters)] # Return combinations in lexicographical order return sorted(combinations)"},{"question":"You are given an undirected graph with N vertices numbered 1 through N and M edges. Each edge has a weight assigned to it, representing the cost to travel along that edge. Your task is to determine the minimum cost required to traverse from Vertex A to Vertex B. Consider that there might be multiple paths between two vertices, and you must find the path with the least cost. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 2000 - 1 ≤ x_i, y_i ≤ N (1 ≤ i ≤ M) - 1 ≤ w_i ≤ 1000 - 1 ≤ A, B ≤ N -----Input----- Input is given from Standard Input in the following format: N M x_1 y_1 w_1 x_2 y_2 w_2 : x_M y_M w_M A B -----Output----- Print the minimum cost required to travel from Vertex A to Vertex B. If there is no path between A and B, print -1. -----Sample Input----- 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 2 1 5 -----Sample Output----- 7 In this example: - Start at Vertex 1, move to Vertex 2 with a cost of 2. - From Vertex 2, move to Vertex 3 with a cost of 1. - From Vertex 3, move to Vertex 5 with a cost of 3. The total cost is 2 + 1 + 3 = 6.","solution":"import heapq def dijkstra(graph, start, end, n): distances = {i: float(\'infinity\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex == end: return current_distance if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 def min_cost(N, M, edges, A, B): graph = {i: [] for i in range(1, N + 1)} for x, y, w in edges: graph[x].append((y, w)) graph[y].append((x, w)) return dijkstra(graph, A, B, N)"},{"question":"Given a linked list of N nodes where each node can have a data value of 0, 1, or 2. Modify the linked list such that all nodes with data value 0 come first, followed by nodes with data value 1, and finally nodes with data value 2. The relative order of nodes with the same data value should be preserved. Example 1: Input: N = 8 LinkedList: 0 -> 1 -> 2 -> 2 -> 1 -> 0 -> 1 -> 2 Output: 0 -> 0 -> 1 -> 1 -> 1 -> 2 -> 2 -> 2 Explanation: All the 0s are segregated to the beginning, followed by all the 1s, then all the 2s. Example 2: Input: N = 4 LinkedList: 2 -> 1 -> 0 -> 1 Output: 0 -> 1 -> 1 -> 2 Explanation: After arranging all 0s, 1s and 2s in the list Your Task: You don\'t need to read input or print anything. Complete the function segregateList() which takes the head of the linked list as input parameter and modifies the linked list as required. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 0 <= data <= 2","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next def segregateList(head): Segregates the linked list such that all nodes with data value 0 come first, followed by nodes with data value 1, and finally nodes with data value 2. if head is None or head.next is None: return head zero_dummy = ListNode(-1) one_dummy = ListNode(-1) two_dummy = ListNode(-1) zero = zero_dummy one = one_dummy two = two_dummy current = head while current: if current.data == 0: zero.next = current zero = zero.next elif current.data == 1: one.next = current one = one.next else: two.next = current two = two.next current = current.next zero.next = one_dummy.next if one_dummy.next else two_dummy.next one.next = two_dummy.next two.next = None return zero_dummy.next"},{"question":"Given two strings, representing large positive integers, write a function to multiply them and return the large product as a string. Example 1: Input: num1 = \\"123\\" num2 = \\"456\\" Output: \\"56088\\" Explanation: 123 * 456 = 56088 Example 2: Input: num1 = \\"999\\" num2 = \\"999\\" Output: \\"998001\\" Explanation: 999 * 999 = 998001 Your Task: You don\'t need to read input or print anything. Your task is to complete the function multiply() which takes two string arguments num1 and num2, and returns a string representing their product. Expected Time Complexity: O(n * m) Expected Space Complexity: O(n + m) Constraints: 1 <= len(num1), len(num2) <= 200 The input strings num1 and num2 consist of digits only. The input strings num1 and num2 do not contain any leading \'0\', except the number \\"0\\" itself.","solution":"def multiply(num1, num2): Multiplies two non-negative integer numbers represented as strings. if num1 == \\"0\\" or num2 == \\"0\\": return \\"0\\" len1, len2 = len(num1), len(num2) result = [0] * (len1 + len2) for i in range(len1-1, -1, -1): for j in range(len2-1, -1, -1): product = int(num1[i]) * int(num2[j]) p1, p2 = i + j, i + j + 1 sum = product + result[p2] result[p1] += sum // 10 result[p2] = sum % 10 # Convert result list to string and skip leading zeros result_str = \'\'.join(map(str, result)).lstrip(\'0\') return result_str"},{"question":"A factory produces items by performing a sequence of independent operations on each item. Some operations take longer in real-time than others. A production log has recorded the completion times of all operations for a single day. Your task is to determine the maximum number of operations that can be fully completed within a specific time limit T. Each operation can be partially completed if there is insufficient time remaining. In such a case, the next one on the list starts afresh with a new item. The factory\'s operation sequence is repeated indefinitely during the day, which means as soon as the last operation completes, the first operation can start again on a new item. Given an array of unit operation times and the time limit, calculate the maximum number of operations that can be executed within that limit. Input The first line contains two integers n and T (1 ≤ n ≤ 1000, 1 ≤ T ≤ 10^6) — the number of different operations and the available time, respectively. The next line contains n space-separated integers ai (1 ≤ ai ≤ 1000) — the time taken for each operation in the sequence, starting from the first. Output Print a single integer — the maximum number of operations that can be completed within the time limit. Examples Input 4 10 2 3 2 1 Output 5 Input 3 15 5 5 5 Output 3 Input 6 20 3 3 4 2 5 1 Output 6 Note In the first example, the factory can complete the operations in the sequence repeatedly: `2` (time taken) + `3` + `2` + `1` + `2` = 10, and in this sequence, 5 operations are completed. In the second example, each operation takes exactly 5 units of time, so only 3 operations can be completed within the time limit. In the third example, the operation sequence can complete exactly once within the time limit of 20.","solution":"def max_operations(n, T, times): Determine the maximum number of operations that can be executed within the time limit. Parameters: n (int): Number of different operations. T (int): Available time limit. times (list of int): List of time taken for each operation. Returns: int: Maximum number of operations completed within the time limit. total_time = sum(times) # Total time taken to complete one full sequence of operations full_sequences = T // total_time # Number of full sequences that can be completed within T remaining_time = T % total_time # Remaining time after completing full sequences # Count how many more operations can be completed with the remaining_time completed_operations = full_sequences * n for time in times: if remaining_time >= time: remaining_time -= time completed_operations += 1 else: break return completed_operations"},{"question":"You are a software engineer working for a company that is developing a maze navigation game. The game consists of a rectangular grid with `N` rows and `M` columns. Each cell in the grid can either be empty (denoted by a `.`) or contain an obstacle (denoted by a `#`). Your task is to determine if there is a way for the player to navigate from the top-left corner of the grid (cell `(1, 1)`) to the bottom-right corner (cell `(N, M)`). You are allowed to move only in four directions: up, down, left, and right. Your function should return \\"YES\\" if there is a possible way to navigate from the top-left to the bottom-right, otherwise return \\"NO\\". Constraints: 1 ≤ N, M ≤ 1000 Input format: The first line contains two integers `N` and `M` denoting the number of rows and columns in the grid, respectively. Each of the next `N` lines contains a string of length `M` consisting of `\'.\'` and `\'#\'` characters. Output format: Print \\"YES\\" (without quotes) if there is a path from the top-left to the bottom-right; otherwise, print \\"NO\\". SAMPLE INPUT 4 4 .... ..#. .#.. .... SAMPLE OUTPUT YES Explanation In the provided example, the grid is 4x4, and a path exists from the top-left corner to the bottom-right corner through the empty spaces (\'.\'). An example path is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (4,2) -> (4,3) -> (4,4).","solution":"def can_navigate(maze, N, M): def is_valid(x, y): return 0 <= x < N and 0 <= y < M and maze[x][y] == \'.\' from collections import deque queue = deque([(0, 0)]) # Start from the top-left corner (0, 0) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, down, left, up seen = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): # Reached bottom-right corner return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in seen: queue.append((nx, ny)) seen.add((nx, ny)) return \\"NO\\" # Example usage N, M = 4, 4 maze = [ \\"....\\", \\"..#.\\", \\".#..\\", \\"....\\" ] print(can_navigate(maze, N, M)) # Output: YES"},{"question":"A city has a rectangular grid of streets with dimensions n times m. You are initially positioned at the top-left corner of this grid (at cell (1, 1)), and you want to reach the bottom-right corner (at cell (n, m)). You can only move either right or down at any point in time. Write a function to count the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 10^3) — the number of test cases. The description of the test cases follows. Each test case consists of two integers n and m (1 leq n, m leq 100) separated by a single space. -----Output----- For each test case, print the number of unique paths from the top-left corner to the bottom-right corner. -----Example----- Input 3 2 2 3 2 3 3 Output 2 3 6 -----Note----- In the first test case, there are exactly 2 paths to reach the bottom-right corner of a 2 times 2 grid: 1. Right -> Down 2. Down -> Right In the second test case, there are exactly 3 paths to reach the bottom-right corner of a 3 times 2 grid: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right In the third test case, there are 6 paths to reach the bottom-right corner of a 3 times 3 grid.","solution":"from math import comb def count_unique_paths(n, m): Returns the number of unique paths from the top-left corner to the bottom-right corner of an n x m grid. # The number of unique paths is a combinatorial problem, specifically combinations. # For an n x m grid, the answer is (n+m-2) choose (n-1) return comb(n + m - 2, n - 1) def process_test_cases(test_cases): Processes multiple test cases and returns a list of results. results = [] for n, m in test_cases: results.append(count_unique_paths(n, m)) return results # Example usage: # test_cases = [(2, 2), (3, 2), (3, 3)] # print(process_test_cases(test_cases))"},{"question":"A company wants to manage its communication system more effectively. Each employee in the company can send a message directly to one other employee. The objective is to ensure that there are no communication loops. A communication loop occurs if an employee can send a message to themselves either directly or through other employees. For example, if employee A can send a message to employee B, and employee B can send a message to employee C, and then employee C can send a message back to employee A, a communication loop is formed. You need to write a program to determine whether the communication system has any loops. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of employees. The next n lines each contain two integers u and v (1 ≤ u, v ≤ n) representing that employee u can send a message to employee v. -----Output----- Print \\"YES\\" if there are any communication loops in the system. Otherwise, print \\"NO\\". -----Examples----- Input 3 1 2 2 3 3 1 Output YES Input 4 1 2 2 3 3 4 4 5 Output NO -----Note----- In the first sample, there is a communication loop: 1 → 2 → 3 → 1. In the second sample, there are no communication loops.","solution":"def detect_communication_loop(n, connections): Determines if there is a communication loop within the company. :param n: Number of employees :param connections: List of tuples where each tuple (u, v) means u can send message to v. :return: \\"YES\\" if there is a loop, otherwise \\"NO\\". from collections import defaultdict, deque # Create adjacency list adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) # Helper function to perform DFS and detect cycles def has_cycle(v, visited, stack): visited[v] = True stack[v] = True for neighbour in adj_list[v]: if not visited[neighbour]: if has_cycle(neighbour, visited, stack): return True elif stack[neighbour]: return True stack[v] = False return False visited = [False] * (n + 1) stack = [False] * (n + 1) for employee in range(1, n+1): if not visited[employee]: if has_cycle(employee, visited, stack): return \\"YES\\" return \\"NO\\""},{"question":"Alice is going on a summer trip and she wants to pack her suitcase optimally. She has a suitcase with a maximum weight capacity W and a set of items, each with a certain weight. Alice wants to know the maximum number of items she can pack without exceeding the weight limit of her suitcase. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer W — the maximum weight capacity of the suitcase. - The second line of each test case contains an integer N — the number of items. - The third line of each test case contains N space-separated integers representing the weights of the items. ------ Output Format ------ For each test case, output on a new line the maximum number of items Alice can pack without exceeding the weight limit of her suitcase. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ W ≤ 10^4 1 ≤ N ≤ 100 1 ≤ weight_of_item ≤ 100 ------ Sample Input 1 ------ 2 10 4 2 3 4 5 15 5 1 2 8 4 5 ------ Sample Output 1 ------ 3 4 ------ Explanation 1 ------ Test case 1: Alice can pack items with weights 2, 3, and 4 which sum up to 9, the maximum number of items that can be packed without exceeding the weight limit W=10. Test case 2: Alice can pack items with weights 1, 2, 4, and 5 which sum up to 12, the maximum number of items that can be packed without exceeding the weight limit W=15.","solution":"def max_items(weight_limit, items): items.sort() current_weight = 0 count = 0 for weight in items: if current_weight + weight <= weight_limit: current_weight += weight count += 1 else: break return count def solve_trip_packing(test_cases): results = [] for case in test_cases: weight_limit, items = case result = max_items(weight_limit, items) results.append(result) return results # Example usage def process_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) tests = [] index = 1 for _ in range(T): weight_limit = int(input_lines[index]) num_items = int(input_lines[index + 1]) items = list(map(int, input_lines[index + 2].split())) tests.append((weight_limit, items)) index += 3 return tests def process_output(output_list): return \\"n\\".join(map(str, output_list)) input_string = \\"2n10n4n2 3 4 5n15n5n1 2 8 4 5\\" test_cases = process_input(input_string) results = solve_trip_packing(test_cases) output_string = process_output(results) print(output_string) # Expected output: \\"3n4\\""},{"question":"Write a function `generatePattern` that takes an integer `n` as an input and prints out a pattern in a specific format. The pattern consists of lines of increasing integers, starting at 1 and ending at `n`, where each line contains integers with spacing. For example, the first line starts with 1, the second line starts with 2 3, the third line starts with 3 4 5, and so on. # Function Signature ```python def generatePattern(n: int) -> None: pass ``` # Input - An integer `n` where `1 <= n <= 10`. # Output - Print the pattern according to the rules described above. # Example Input: ``` 4 ``` Output: ``` 1 2 3 3 4 5 4 5 6 7 ``` # Explanation - For `n = 4`: - Line 1: `1` - Line 2: `2 3` - Line 3: `3 4 5` - Line 4: `4 5 6 7` Each line starts with an increasing integer sequence from the starting point which is equal to the line number. The numbers on each subsequent line increase in a sequence with a length that corresponds to the current line number.","solution":"def generatePattern(n: int) -> None: Prints a pattern of increasing integers from 1 to n, where each line contains integers starting from the line number up to the line number plus the line index. for i in range(1, n + 1): line = \\" \\".join(str(i + j) for j in range(i)) print(line)"},{"question":"In a faraway kingdom, there lived a unique species of magical creatures called \\"Mirums\\". Each Mirum has an assigned magical power value. The king of the kingdom decided to gather a group of Mirums for a special mission, but he wanted the sum of their power values to be as close as possible to a given target value without exceeding it. As the royal advisor, you are tasked with choosing the Mirums in such a way that the sum of their power values is maximized without exceeding the given target value. Write a program that determines the optimal subset of Mirums that meets this criteria. -----Input----- The first line contains an integer T which denotes the total number of test cases. Each test case starts with two integers, N and K. N represents the number of Mirums, and K represents the target power value. The next line contains N spaced integers, where each integer represents the magical power value of a Mirum. -----Output----- For each test case, output the maximum sum of the power values of the selected subset of Mirums that does not exceed the target value K. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ K ≤ 10^4 - 1 ≤ Each of the N integers ≤ 100 -----Example----- Input: 2 5 50 10 20 30 40 50 4 70 20 30 40 25 Output: 50 70 -----Explanation----- Example case 1: Here, the target sum is 50 and the best subset is {10, 20, 20} which sums up to 50. Example case 2: Here, the target sum is 70 and the best subset is {20, 30, 20} which sums up to 70.","solution":"def knapsack(mirums, target): N = len(mirums) dp = [0] * (target + 1) for power in mirums: for j in range(target, power - 1, -1): dp[j] = max(dp[j], dp[j - power] + power) return dp[target] def max_power_subsets(test_cases): results = [] for case in test_cases: N, K = case[0] mirums = case[1] results.append(knapsack(mirums, K)) return results"},{"question":"You are given a sequence of instructions to navigate a grid starting from the top-left corner. The grid contains obstacles, and your task is to determine whether the sequence of instructions leads to the bottom-right corner of the grid without hitting any obstacles. The grid is represented as a matrix of size `N x M`, where `0` indicates a free cell and `1` indicates an obstacle. You need to check if the sequence of instructions leads to the bottom-right corner of the grid (cell `N-1, M-1`) without landing on a cell with an obstacle. The instructions consist of the following movements: - \'U\' - move up - \'D\' - move down - \'L\' - move left - \'R\' - move right You start at the top-left corner of the grid (0,0). Input: - The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 50) indicating the dimensions of the grid. - The next `N` lines each contain `M` integers (either 0 or 1) representing the grid. - The last line contains a string of instructions consisting of characters \'U\', \'D\', \'L\', \'R\' (1 ≤ length of the string ≤ 100). Output: - Print \\"YES\\" if the sequence of instructions leads to the bottom-right corner of the grid without hitting any obstacles. Otherwise, print \\"NO\\". Examples: 1) Input: 3 4 0 0 0 0 0 1 0 0 0 0 0 0 DDRRRD Output: YES Explanation: Starting at (0,0), following the instructions \'DDRRRD\': - (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3). No obstacle is hit, and we reach the bottom-right corner. 2) Input: 3 3 0 0 0 0 1 0 0 0 0 DDRRUURR Output: NO Explanation: Starting at (0,0), following the instructions \'DDRRUURR\': - We hit the obstacle at (1,1) thus not reaching the bottom-right corner.","solution":"def navigate_grid(N, M, grid, instructions): Determines if the sequence of instructions leads to the bottom-right corner of the grid without hitting any obstacles. :param N: int, number of rows in the grid :param M: int, number of columns in the grid :param grid: List[List[int]], the grid representation :param instructions: str, the sequence of instructions :return: str, \\"YES\\" if the sequence leads to the bottom-right corner without hitting obstacles, otherwise \\"NO\\" x, y = 0, 0 # Start at the top-left corner (0,0) for instruction in instructions: if instruction == \'U\': if x > 0: x -= 1 elif instruction == \'D\': if x < N - 1: x += 1 elif instruction == \'L\': if y > 0: y -= 1 elif instruction == \'R\': if y < M - 1: y += 1 # Check if the new position hits an obstacle if grid[x][y] == 1: return \\"NO\\" # Check if the final position is the bottom-right corner if x == N - 1 and y == M - 1: return \\"YES\\" return \\"NO\\""},{"question":"Given an n x n grid filled with values, where each cell in the grid can either be \'X\' or an integer k (where |k| ≤ 10^4), your task is to determine if there exists a starting position in the grid from which one can traverse to a destination cell marked \'X\' following these rules: - You can start at any cell marked with an integer. - The number in the starting cell denotes the exact number of steps you can move from that cell. - Each step can be either up, down, left, or right. - You can only land on cells that are within the boundaries of the grid. If there exists such a path from any cell marked with an integer to any cell marked \'X\', print \\"YES\\". If not, print \\"NO\\". # Input format - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of rows and columns in the grid. - Each of the next n lines contains n space-separated values representing the grid. Each value is either an \'X\' or an integer k (where |k| ≤ 10^4). # Output format - A single line containing \\"YES\\" or \\"NO\\". # Example Input ``` 4 0 3 2 X 1 1 1 1 2 1 3 1 1 1 1 1 ``` Output ``` YES ``` Explanation: Starting from the second row, third column (2 1 3 1), we can move 3 steps down to the first column of row 3 (X), reaching one \'X\'. Thus, the answer is \\"YES\\". # Note In the above example, multiple potential starting positions may be checked. The grid should be traversed efficiently to ensure that the time complexity remains manageable even for the largest possible grid size.","solution":"def can_reach_X(grid): n = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < n def bfs(start_x, start_y): steps = grid[start_x][start_y] queue = [(start_x, start_y)] visited = set() visited.add((start_x, start_y)) while queue: x, y = queue.pop(0) if grid[x][y] == \'X\': return True steps = grid[x][y] for dx, dy in directions: nx, ny = x + dx * steps, y + dy * steps if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False for i in range(n): for j in range(n): if grid[i][j] != \'X\' and isinstance(grid[i][j], int): if bfs(i, j): return \\"YES\\" return \\"NO\\" def grid_from_input(input_list): n = int(input_list[0]) grid = [] for i in range(1, n + 1): row = [] elements = input_list[i].split() for e in elements: if e == \'X\': row.append(e) else: row.append(int(e)) grid.append(row) return grid def main(input_list): grid = grid_from_input(input_list) return can_reach_X(grid)"},{"question":"Given a string consisting of lowercase and uppercase alphabets, determine if the string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. If it is possible, return `true`; otherwise, return `false`. Examples ``` canFormPalindrome(\\"racecar\\") ==> true canFormPalindrome(\\"aabbcc\\") ==> true canFormPalindrome(\\"abc\\") ==> false canFormPalindrome(\\"Aabb\\") ==> false ``` __Explanation:__ 1. \\"racecar\\" can be rearranged as \\"racecar\\" which is a palindrome. 2. \\"aabbcc\\" can be rearranged as \\"abcabc\\" or \\"acbca\\" or any order that aligns with palindrome properties. 3. \\"abc\\" does not have enough matching characters to form a palindrome. 4. \\"Aabb\\" has mixed cases which do not fit the palindrome requirements strictly.","solution":"def canFormPalindrome(s): from collections import Counter # Count frequency of each character frequency = Counter(s) # Count the number of characters with odd frequency odd_count = sum(1 for count in frequency.values() if count % 2 != 0) # For the string to be rearranged into a palindrome: # It can have at most one character with an odd frequency (for odd length) # and all others must have even frequency. return odd_count <= 1"},{"question":"You are given an extremely large positive integer K represented as a string. Your task is to determine if the sum of its digits is divisible by 9. If it is, print \\"YES\\". Otherwise, print \\"NO\\". Constraints 1 ≤ |K| ≤ 10^(10^5) Input The first line of input contains the string K. Output Output a single line containing \\"YES\\" or \\"NO\\". Example Input: 123456789012345678901234567890 Output: YES Explanation The sum of the digits of the given number is 135, which is divisible by 9.","solution":"def is_sum_of_digits_divisible_by_9(K): This function checks if the sum of the digits of the given number K is divisible by 9. The number K is given as a string. If divisible by 9, it returns \\"YES\\", otherwise it returns \\"NO\\". digit_sum = sum(int(digit) for digit in K) return \\"YES\\" if digit_sum % 9 == 0 else \\"NO\\""},{"question":"Write a program that checks whether a given string is a palindrome. Constraints * The input string will contain only lowercase English letters. * The length of the string will be between 1 and 100. Input A single line containing the string to be checked. Output Print \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Example Input racecar Output YES Input hello Output NO","solution":"def is_palindrome(s): Checks whether the given string s is a palindrome. Returns \\"YES\\" if it is a palindrome, otherwise returns \\"NO\\". if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"In a magical forest, there are N magical creatures. Each creature has a certain amount of magical energy denoted by an integer. The creatures can perform a special ritual where they can transfer all their energy to another creature. A transfer can only happen if the receiving creature\'s current energy and the transferring creature\'s current energy are both even or both odd. Determine if it is possible for the creatures to perform a series of energy transfers such that exactly one creature ends up with all the energy. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each testcase contains a single integer N followed by N integers, the energy levels of the creatures. ------ Output Format ------ For each test case, output \\"Yes\\" if it is possible for exactly one creature to end up with all the energy through a series of energy transfers, and \\"No\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ energy_levels[i] ≤ 10^9 ----- Sample Input 1 ------ 4 3 4 8 16 2 7 9 4 2 2 2 2 5 1 3 5 7 9 ----- Sample Output 1 ------ Yes No Yes Yes ----- Explanation 1 ------ Test Case 1: All creatures have even energy, so it\'s possible to transfer all energy to one creature. Test Case 2: There is a mix of odd and even energies, so it\'s not possible. Test Case 3: All creatures have the same energy, so it is possible to transfer all energy. Test Case 4: All creatures have odd energy, so it\'s possible to transfer all energy to one creature.","solution":"def can_transfer_energy(t, test_cases): Determines if it\'s possible to transfer all energy to one creature based on the given test cases. :param t: Number of test cases :param test_cases: List of tuples where each tuple contains an integer N followed by a list of N integers :return: List of \\"Yes\\" or \\"No\\" for each test case results = [] for i in range(t): N, energies = test_cases[i] even_count = sum(1 for energy in energies if energy % 2 == 0) odd_count = N - even_count if even_count == 0 or odd_count == 0: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Polycarpus enjoys solving number problems. One day, he encountered an interesting problem related to the properties of prime numbers. He defines an interesting number as a number that is either a prime number itself or can be expressed as the product of exactly two prime numbers (which could possibly be the same). Polycarpus asks you to determine whether a given number is interesting or not. Your task is to write a function that checks if a number is interesting according to Polycarpus\'s definition. If it is interesting, return \\"Yes\\"; otherwise, return \\"No\\". Input The first and the only line of input contains an integer n (1 ≤ n ≤ 10^6) — the number Polycarpus wants to check. Output Print a single word — either \\"Yes\\" if the given number is interesting, or \\"No\\" otherwise. Examples Input 5 Output Yes Input 6 Output Yes Input 8 Output No Note In the first example, the number 5 is a prime number, so the output is \\"Yes\\". In the second example, the number 6 is the product of two prime numbers: 2 × 3, so the output is \\"Yes\\". In the third example, the number 8 is not a prime number and cannot be expressed as the product of exactly two prime numbers, so the output is \\"No\\".","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_interesting_number(n): if is_prime(n): return \\"Yes\\" for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0 and is_prime(i) and is_prime(n // i): return \\"Yes\\" return \\"No\\""},{"question":"You are given a large integer N. Your task is to determine the smallest positive integer M such that the product of the digits of M is equal to N. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The first and only line of each test case contains an integer N. ------ Output ------ For each test case, print a single line containing the smallest integer M whose digits\' product is N. If no such number exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{18} ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ N ≤ 10^{6} Subtask #2 (70 points): 1 ≤ N ≤ 10^{18} ------ Sample Input 1 ------ 3 10 20 100 ------ Sample Output 1 ------ 25 45 455 ------ Explanation ------ In the first test case, the smallest M whose product of digits is 10 is 25 (2 * 5). In the second test case, the smallest M whose product of digits is 20 is 45 (4 * 5). In the third test case, the smallest M whose product of digits is 100 is 455 (4 * 5 * 5).","solution":"def smallest_integer_with_product(N): if N == 1: return 1 digits = [] for i in range(9, 1, -1): while N % i == 0: digits.append(i) N //= i if N != 1: return -1 return int(\\"\\".join(map(str, sorted(digits)))) def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(smallest_integer_with_product(N)) return results"},{"question":"Story: In the vast and ever-changing terrain of the Matrix Gridlands, there exists a powerful relic known as the Code Gem. This gem is guarded by a complex network of gates arranged in an MxN matrix. Each gate has a specific energy level required to pass through. Only the trickiest of coders can navigate through this matrix and seize the gem. Briefing: You are given an MxN matrix filled with integers representing the energy levels of each gate. Your task is to find the path from the top-left corner (matrix[0][0]) to the bottom-right corner (matrix[M-1][N-1]) with the minimum total energy cost. You can only move either down or right at any point in time. Write a function that takes this matrix as input and returns the minimum total energy cost required to reach the Code Gem. Example: ``` Input: matrix = [[1, 3, 1], [1, 5, 1], [4, 2, 1]] Output: 7 Explanation: The path with the minimum total energy cost is 1→3→1→1→1 which sums to 7. ``` Test specs: Random matrix sizes ranging from 1x1 up to 100x100, with energy levels ranging from 1 to 1000. Special thanks: Gratitude to the keeper of the Gridlands, Neo-sama, for the endless challenges and insights, and to all the brilliant coders who brave the matrix every day.","solution":"def min_energy_cost(matrix): Returns the minimum total energy cost to travel from the top-left corner to the bottom-right corner of a given MxN matrix where you can only move down or right. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = matrix[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[m-1][n-1]"},{"question":"A software company CNV Solutions has a system that logs user activity in a file. The log contains entries that track user sessions, marking the start and end time of each session. Each entry in the log is in the format: ``` USER_ID SESSION_START SESSION_END ``` where: - `USER_ID` is a unique identifier for the user (a positive integer). - `SESSION_START` and `SESSION_END` are timestamps in the format \\"YYYY-MM-DD HH:MM:SS\\" denoting the start and end of the session respectively. Given this log file, write a program to calculate the total active time (in seconds) for each user, considering overlapping sessions only once per user. # Input format: - The first line contains an integer `n` (1 leq n leq 10^5) - the number of log entries. - The next `n` lines each contain a log entry as described above. # Output format: - For each user who appears in the log, print a line in the format `USER_ID TOTAL_ACTIVE_TIME`, where `USER_ID` is the user identifier and `TOTAL_ACTIVE_TIME` is the total active time in seconds, considering overlapping sessions only once. # Example: Input ``` 4 1 2023-01-01 08:00:00 2023-01-01 08:30:00 1 2023-01-01 08:15:00 2023-01-01 08:45:00 2 2023-01-01 09:00:00 2023-01-01 09:20:00 2 2023-01-01 09:10:00 2023-01-01 09:25:00 ``` Output ``` 1 2700 2 1500 ``` # Explanation: For user `1`, the sessions [08:00:00, 08:30:00] and [08:15:00, 08:45:00] overlap. The total active time is from the earliest start to the latest end, which is 45 minutes (or 2700 seconds). For user `2`, the sessions [09:00:00, 09:20:00] and [09:10:00, 09:25:00] overlap. The total active time is from 09:00:00 to 09:25:00, which is 25 minutes (or 1500 seconds).","solution":"from datetime import datetime def calculate_total_active_time(n, log_entries): import heapq from collections import defaultdict user_sessions = defaultdict(list) for entry in log_entries: user_id, start, end = entry start_time = datetime.strptime(start, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end, \\"%Y-%m-%d %H:%M:%S\\") heapq.heappush(user_sessions[int(user_id)], (start_time, end_time)) user_total_active_time = {} for user_id, sessions in user_sessions.items(): merged_sessions = [] while sessions: start, end = heapq.heappop(sessions) if not merged_sessions or merged_sessions[-1][1] < start: merged_sessions.append((start, end)) else: merged_sessions[-1] = (merged_sessions[-1][0], max(merged_sessions[-1][1], end)) total_active_time = sum((end - start).total_seconds() for start, end in merged_sessions) user_total_active_time[user_id] = int(total_active_time) return user_total_active_time def process_log_entries(): import sys input = sys.stdin.read data = input().split(\'n\') n = int(data[0]) log_entries = [entry.split() for entry in data[1:n+1]] result = calculate_total_active_time(n, log_entries) for user_id, total_time in sorted(result.items()): print(f\\"{user_id} {total_time}\\")"},{"question":"John is working on a task management software and needs to streamline task dependencies. Each task can only be started after all its dependent tasks are completed. The challenge is to find and print the sequence in which the tasks should be completed. ----Input---- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of tasks. The next n lines each contain two integers t_{i} and d_{i} (1 ≤ t_{i}, d_{i} ≤ 100), where t_{i} is the identifier of the task and d_{i} is the identifier of the task it depends on. If a task t_{i} does not depend on any other task, then d_{i} will be 0. ----Output---- Output a single line containing the task identifiers in the order they should be completed. If there are multiple valid sequences, any one of them can be printed. ----Examples----- Input 4 1 0 2 1 3 1 4 2 Output 1 2 4 3 Input 3 1 0 2 0 3 2 Output 1 2 3","solution":"def find_task_order(n, dependencies): from collections import defaultdict, deque # Create graph and in-degree count graph = defaultdict(list) in_degree = {i: 0 for i in range(1, 101)} for t, d in dependencies: if d != 0: graph[d].append(t) in_degree[t] += 1 # Find nodes with no incoming edges queue = deque() for node in range(1, n+1): if in_degree[node] == 0: queue.append(node) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return order def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) dependencies = [] for i in range(1, len(data), 2): dependencies.append((int(data[i]), int(data[i+1]))) order = find_task_order(n, dependencies) print(\\" \\".join(map(str, order))) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of integers `arr` of size `n`, you need to process `q` queries. Each query consists of two integers `x` and `y` representing indices in the array. For each query, you need to find the sum of the elements between the provided indices `x` and `y` (inclusive). The array is 1-indexed. Therefore, the indices `x` and `y` are such that `1 <= x <= y <= n`. -----Input----- The first line contains two integers `n` and `q` `(1 <= n <= 100000, 1 <= q <= 100000)`, representing the size of the array and the number of queries, respectively. The second line contains `n` integers `arr[i]` `(-10^9 <= arr[i] <= 10^9)`, which are the elements of the array. Each of the following `q` lines contains two integers `x` and `y` `(1 <= x <= y <= n)`, representing a query for the sum between indices `x` and `y`. -----Output----- For each query, print a single integer, the sum of the elements between `x` and `y` (inclusive). -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Input 6 2 4 -1 2 3 6 1 2 5 1 6 Output 10 15 -----Notes----- In the first example, the array is `[1, 2, 3, 4, 5]`. For the first query `(1,3)`, the sum between indices 1 and 3 is `1 + 2 + 3 = 6`. For the second query `(2,4)`, the sum is `2 + 3 + 4 = 9`. For the third query `(1,5)`, the sum is `1 + 2 + 3 + 4 + 5 = 15`. In the second example, the array is `[4, -1, 2, 3, 6, 1]`. For the first query `(2,5)`, the sum between indices 2 and 5 is `-1 + 2 + 3 + 6 = 10`. For the second query `(1,6)`, the sum is `4 - 1 + 2 + 3 + 6 + 1 = 15`.","solution":"def process_queries(n, q, arr, queries): Given an array of integers and a list of queries, returns the sum of elements between indices x and y for each query (inclusive). :param n: int, size of the array :param q: int, number of queries :param arr: List[int], the array of integers :param queries: List[Tuple[int, int]], list of queries where each query is a tuple (x, y) representing indices :return: List[int], list of results for each query # Initialize the prefix sum array prefix_sum = [0] * (n + 1) # Compute the prefix sum array for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] # Process each query results = [] for x, y in queries: results.append(prefix_sum[y] - prefix_sum[x - 1]) return results"},{"question":"A local post office has created a new system to detect irregularities in the delivery network of packages between several cities. The system monitors the paths taken by the packages, represented as a weighted directed graph, where nodes represent cities and edges represent the delivery routes along with their transit times. Your task is to determine whether there is a cycle in the delivery network where the total transit time is negative, which could indicate an error or a shortcut that needs to be investigated. To achieve this, you need to implement a function that detects the presence of any negative weight cycle in the given graph using the Bellman-Ford algorithm. Input: The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of cities and the number of delivery routes respectively. The next m lines each contain three integers u, v, and w (-1000 ≤ w ≤ 1000), representing a delivery route from city u to city v with a transit time of w. Output: Print \\"YES\\" if there is a negative weight cycle in the delivery network. Otherwise, print \\"NO\\". Example: Input: 4 4 1 2 1 2 3 -1 3 4 -1 4 2 -1 Output: YES Input: 5 5 1 2 3 1 3 4 2 3 2 3 4 4 4 5 -10 Output: NO Explanation: In the first example, there is a cycle involving cities 2, 3, and 4 with a total weight of -3, which is negative, so the output is \\"YES\\". In the second example, no cycle has a negative weight, so the output is \\"NO\\". Use the Bellman-Ford algorithm to detect the presence of negative weight cycles in the graph. The Bellman-Ford algorithm works by relaxing all edges up to (n-1) times and then checking for further relaxations to identify negative cycles.","solution":"def detect_negative_cycle(n, m, edges): Use the Bellman-Ford algorithm to detect any negative weight cycle in the graph. Parameters: n (int): Number of cities (nodes). m (int): Number of delivery routes (edges). edges (list of tuples): List of edges where each tuple (u, v, w) representing a route from node u to node v with weight w. Returns: str: \\"YES\\" if there is a negative weight cycle, otherwise \\"NO\\". # Initialize distances with a large positive number dist = [float(\'inf\')] * n dist[0] = 0 # We start by arbitrarily setting the distance to the first node to 0 # Relax edges up to n-1 times for _ in range(n - 1): for u, v, w in edges: if dist[u - 1] != float(\'inf\') and dist[u - 1] + w < dist[v - 1]: dist[v - 1] = dist[u - 1] + w # Check for negative weight cycle for u, v, w in edges: if dist[u - 1] != float(\'inf\') and dist[u - 1] + w < dist[v - 1]: return \\"YES\\" return \\"NO\\""},{"question":"Implement a function that determines if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. For example, the strings \\"listen\\" and \\"silent\\" are anagrams. Function Description Complete the isAnagram function in the editor below. isAnagram has the following parameter(s): string s1: the first string string s2: the second string Returns bool: True if s1 and s2 are anagrams, False otherwise Input Format Two strings, s1 and s2. Constraints 1leq text{length of} s1, s2 leq 100 Both strings will consist of lowercase English letters only. Sample Input 0 listen silent Sample Output 0 True Explanation 0 The letters in \'listen\' can be rearranged to form \'silent\'. Sample Input 1 hello world Sample Output 1 False Explanation 1 The letters in \'hello\' cannot be rearranged to form \'world\'. Sample Input 2 aabbcc ccbbaa Sample Output 2 True Explanation 2 The letters in \'aabbcc\' can be rearranged to form \'ccbbaa\'.","solution":"def isAnagram(s1, s2): Determines if two given strings are anagrams of each other. :param s1: First string :param s2: Second string :return: True if the strings are anagrams, False otherwise # Early return if lengths differ if len(s1) != len(s2): return False # Sort the characters of both strings sorted_s1 = sorted(s1) sorted_s2 = sorted(s2) # Compare the sorted versions of the strings return sorted_s1 == sorted_s2"},{"question":"Emma needs to organize a messaging system where special characters in a message, i.e., \'!\', \'?\', and \'.\', have to be replaced with their respective encoded strings. For each special character: - Replace \'!\' with \'%21\' - Replace \'?\' with \'%3F\' - Replace \'.\' with \'%2E\' Write a function that takes a message string and returns a new string with all special characters replaced as specified. -----Input----- The input consists of a single line containing a string S (1 le |S| le 1000), which is the message to be encoded. The string contains only uppercase and lowercase letters, digits, spaces, and the special characters \'!\', \'?\', and \'.\'. -----Output----- Output the encoded string with the special characters replaced as specified. -----Examples----- Sample Input: Hello World! How\'s everything? Sample Output: Hello World%21 How\'s everything%3F","solution":"def encode_message(s: str) -> str: This function encodes the special characters in the message: - \'!\' with \'%21\' - \'?\' with \'%3F\' - \'.\' with \'%2E\' :param s: A string to be encoded :return: Encoded string with special characters replaced return s.replace(\'!\', \'%21\').replace(\'?\', \'%3F\').replace(\'.\', \'%2E\')"},{"question":"A company has multiple departments, and each department has a list of employees. Each employee has completed a certain number of projects in the department. Your task is to create a program that will calculate the average number of projects completed by employees for each department. The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 100), the number of departments. The next n lines each represent a department and contain a list of integers. The first integer in each line m (1 ≤ m ≤ 50) specifies the number of employees in that department, followed by m integers, where each integer represents the number of projects completed by an employee (0 ≤ projects ≤ 1000). The output should contain n lines. For each department, output the average number of projects completed by the employees in that department, rounded to two decimal places. # Example Input ``` 3 4 10 20 30 40 3 50 60 70 2 100 200 ``` Output ``` 25.00 60.00 150.00 ``` In the first department, the average number of projects completed is (10 + 20 + 30 + 40) / 4 = 100 / 4 = 25.00. In the second department, the average is (50 + 60 + 70) / 3 = 180 / 3 = 60.00. In the third department, the average is (100 + 200) / 2 = 300 / 2 = 150.00.","solution":"def calculate_department_averages(input_data): results = [] lines = input_data.strip().split(\\"n\\") n = int(lines[0]) for i in range(1, n + 1): department_data = list(map(int, lines[i].split())) m = department_data[0] project_counts = department_data[1:] average_projects = sum(project_counts) / m results.append(f\\"{average_projects:.2f}\\") return \\"n\\".join(results)"},{"question":"In a game of musical chairs, N players (numbered 1 through N) are arranged in a circle. Each player has a certain strength value, which indicates their resilience during the game. During each round of the game, two strongest adjacent players compete, and the player with the lesser strength gets eliminated. The game continues in rounds until only one player is left standing. Given an array \\"strengths\\" where strengths[i] represents the strength of the (i+1)-th player, determine the strength of the last remaining player after the game is over. Function Description Complete the musicalChairsWinner function in the editor below. It should return an integer representing the strength of the last remaining player. musicalChairsWinner has the following parameters: - strengths: an array of integers representing the strength values of the players. Input Format The first line contains an integer N, the number of players. The second line contains N space-separated integers representing the strengths of the players. Constraints 2 leq N leq 10^5 1 leq strengths[i] leq 10^9 Output Format Print the strength of the last remaining player. Sample Input 5 3 9 2 7 6 Sample Output 9 Explanation players\' strengths = [3, 9, 2, 7, 6] Round 1: The strongest adjacent pair is (9, 2) and 2 is eliminated. New strengths = [3, 9, 7, 6] Round 2: The strongest adjacent pair is (9, 7) and 7 is eliminated. New strengths = [3, 9, 6] Round 3: The strongest adjacent pair is (9, 6) and 6 is eliminated. New strengths = [3, 9] Round 4: The strongest adjacent pair is (3, 9) and 3 is eliminated. New strengths = [9] The last remaining player has a strength of 9.","solution":"def musicalChairsWinner(strengths): Determines the strength of the last remaining player in a game of musical chairs. :param strengths: List of integers representing the strength of each player. :return: Integer representing the strength of the last remaining player. while len(strengths) > 1: n = len(strengths) new_strengths = [] i = 0 while i < n: if i == n - 1: # handle the last element to wrap around if strengths[i] > strengths[0]: new_strengths.append(strengths[i]) else: strengths[0] = strengths[i] else: if strengths[i] > strengths[i + 1]: new_strengths.append(strengths[i]) else: new_strengths.append(strengths[i + 1]) i += 2 # skip the next element since we already considered it strengths = new_strengths return strengths[0]"},{"question":"Given two strings, determine if one string is a permutation of the other. If they are, print \\"True\\", otherwise print \\"False\\". Input The only line of input contains two strings consisting of lowercase letters. Each string has at most 1000 characters. Output Print \\"True\\" if one string is a permutation of the other, otherwise print \\"False\\". Examples Input abc cab Output True Input hello world Output False","solution":"def are_permutations(s1, s2): Returns True if s1 is a permutation of s2, otherwise False. return sorted(s1) == sorted(s2)"},{"question":"Write a function that accepts a non-negative integer n as its parameter and returns a list containing the first n numbers of the Fibonacci sequence. If n is 0, return an empty list. The Fibonacci sequence is defined as follows: - The first two numbers are 0 and 1. - Each subsequent number is the sum of the two preceding numbers.","solution":"def fibonacci_sequence(n): Returns a list containing the first n numbers of the Fibonacci sequence. If n is 0, returns an empty list. if n == 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Milo\'s favorite toy store has a quirky discount system. On any given day, the store offers discounts based on the palindromic properties of the items\' names. A string is called a palindrome if it reads the same forward and backward, like \\"madam\\" or \\"racecar\\". The store\'s policy is that if an item\'s name is a palindrome, it gets a discount. Otherwise, it does not. Given an item\'s name, your task is to determine if it qualifies for the discount by checking if the name is a palindrome. -----Input----- The input is a single line containing a string `item_name` which represents the name of the item. The string consists of only lowercase English letters and has a length between 1 and 1000 inclusive. -----Output----- Output \\"yes\\" if the item qualifies for the discount (i.e., the name is a palindrome), and output \\"no\\" otherwise. -----Examples----- Sample Input: radar Sample Output: yes Sample Input: toys Sample Output: no","solution":"def is_palindrome(item_name): Returns \'yes\' if the item_name is palindrome, otherwise \'no\'. if item_name == item_name[::-1]: return \'yes\' else: return \'no\'"},{"question":"You are given a string containing letters and digits. Your task is to return a dictionary where the keys are the digits in the string and the values are lists of letters that immediately follow each digit in the string. If a digit appears more than once, accumulate all the corresponding letters into a single list for that digit. If a digit has no following letter, do not include it in the dictionary. All inputs will be non-empty strings containing at least one digit. The string will not contain special characters or spaces. For example: - Input: \\"a1b2c3d4e\\" - Output: {\'1\': [\'b\'], \'2\': [\'c\'], \'3\': [\'d\'], \'4\': [\'e\']} - Input: \\"1a2b3c4d5\\" - Output: {\'1\': [\'a\'], \'2\': [\'b\'], \'3\': [\'c\'], \'4\': [\'d\']} - Input: \\"abc1def2gh3j\\" - Output: {\'1\': [\'d\'], \'2\': [\'g\'], \'3\': [\'j\']}","solution":"def extract_digit_followers(s): Returns a dictionary where the keys are the digits in the string and the values are lists of letters that immediately follow each digit in the string. result = {} for i in range(len(s) - 1): if s[i].isdigit() and s[i + 1].isalpha(): if s[i] not in result: result[s[i]] = [] result[s[i]].append(s[i + 1]) return result"},{"question":"Write a function that takes two lists of integers as input and returns a new sorted list containing unique elements that appear in both lists. The order of the elements in the result should be ascending. **Function Signature:** ```python def common_elements(list1: List[int], list2: List[int]) -> List[int]: pass ``` **Examples:** Input: ```python list1 = [10, 20, 30, 40] list2 = [30, 40, 50, 60] ``` Output: ```python [30, 40] ``` Input: ```python list1 = [1, 1, 2, 3] list2 = [2, 2, 3, 4] ``` Output: ```python [2, 3] ``` Input: ```python list1 = [7, 8, 9] list2 = [10, 11, 12] ``` Output: ```python [] ``` **Constraints:** - The input lists can contain integers with values ranging from `-10^5` to `10^5`. - The length of each list will not exceed `10^4`.","solution":"def common_elements(list1, list2): Returns a sorted list of unique elements that appear in both list1 and list2. set1 = set(list1) set2 = set(list2) common_set = set1.intersection(set2) return sorted(common_set)"},{"question":"You are a manager of a warehouse, and you need to organize boxes on shelves. Each shelf has a limited capacity, and each box has a weight. Your goal is to determine the maximum number of boxes you can place on the shelves without exceeding the capacity of any shelf. Consider that you have N boxes and each box i has weight w_i. There are S shelves and each shelf j has a capacity c_j. You can only place entire boxes on shelves, but a single box can be placed on any shelf as long as the capacity allows. Your task is to find the maximum number of boxes that can be placed on these shelves without exceeding the shelf capacities. -----Input:----- - The first line contains two integers N and S. - The second line contains N integers where the i^{th} integer represents the weight w_i of the i^{th} box. - The third line contains S integers where the j^{th} integer represents the capacity c_j of the j^{th} shelf. -----Output:----- Print a single integer representing the maximum number of boxes that can be placed on shelves. -----Constraints----- - 1 leq N, S leq 1000 - 1 leq w_i leq 1000 for each 1 leq i leq N - 1 leq c_j leq 10000 for each 1 leq j leq S -----Sample Input:----- 5 3 2 3 4 5 9 10 10 10 -----Sample Output:----- 5 Explanation: You can place box 1 (weight 2) on shelf 1, box 2 (weight 3) on shelf 2, box 3 (weight 4) on shelf 3, box 4 (weight 5) on shelf 1 (after placing box 1, remaining capacity is 8), box 5 (weight 9) on shelf 2 (after placing box 2, remaining capacity is 7), resulting in all 5 boxes being placed.","solution":"def max_boxes_on_shelves(N, S, weights, capacities): Calculate the maximum number of boxes that can be placed on shelves without exceeding their capacities. Parameters: N (int): Number of boxes. S (int): Number of shelves. weights (list of int): List of weights of each box. capacities (list of int): List of capacities of each shelf. Returns: int: Maximum number of boxes that can be placed on shelves. # Sort the boxes in ascending order of their weights weights.sort() # Sort the shelves in ascending order of their capacities capacities.sort() box_count = 0 for weight in weights: for i in range(S): if capacities[i] >= weight: # Place the box on this shelf capacities[i] -= weight box_count += 1 break return box_count"},{"question":"An online gaming company is organizing a competition where players need to navigate through a series of interconnected rooms. Each room has multiple doors leading to other rooms, and each door has a specific time delay to open. The goal for the players is to determine the shortest time required to travel from the starting room to the final room in the least time possible. The company wants you to write a program to help determine the shortest time required for each player based on their starting and target rooms. Input: - The first line of the input contains an integer `N`, the number of rooms. - The next `N` lines contain `N` space-separated integers each, representing the time delay matrix `T`, where `T[i][j]` denotes the time delay to open the door from room `i` to room `j`. Note that `T[i][i] = 0`. - The following line contains an integer `M`, the number of players. - The next `M` lines contain 2 space-separated integers `S` and `D`, indicating the starting room `S` and the target room `D` for each player. Output: For each player, output the shortest time required to travel from room `S` to room `D` on a new line. Constraints: - 1 ≤ `N` ≤ 100 - 1 ≤ `M` ≤ 10000 - 0 ≤ `T[i][j]` ≤ 100000 - 0 ≤ `S, D` ≤ N-1 SAMPLE INPUT 4 0 2 1 3 2 0 4 5 1 4 0 3 3 5 3 0 3 0 2 1 3 3 0 SAMPLE OUTPUT 1 5 3","solution":"import heapq def dijkstra(matrix, start): Dijkstra\'s algorithm to find the shortest path from start to all other nodes. Returns a list of shortest path distances from the start node. n = len(matrix) dist = [float(\'inf\')] * n dist[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_dist > dist[current_node]: continue for neighbor in range(n): if matrix[current_node][neighbor] != 0: distance = matrix[current_node][neighbor] new_dist = current_dist + distance if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(priority_queue, (new_dist, neighbor)) return dist def shortest_time_to_travel(N, matrix, players): results = [] for S, D in players: distances = dijkstra(matrix, S) results.append(distances[D]) return results"},{"question":"Given a list of unique integers, find and return the longest subsequence such that the difference between consecutive elements is the same throughout the subsequence. Input: An integer, followed by a list of integers. Output: The longest subsequence with the property that the difference between consecutive elements is the same. Example: Input: 6 10 5 3 1 7 2 Output: 3 Explanation: The longest subsequence with equal consecutive differences is [10, 7, 4, 1] which has 3 elements. Input: 7 1 7 8 5 2 3 10 Output: 3 Explanation: The longest subsequence with equal consecutive differences is [1, 5, 9], which has 3 elements.","solution":"def longest_arith_seq_length(nums): Returns the length of the longest arithmetic subsequence in nums. if not nums: return 0 n = len(nums) if n <= 2: return n dp = [{} for _ in range(n)] max_len = 2 for i in range(1, n): for j in range(i): diff = nums[i] - nums[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len"},{"question":"A team of developers is working on a project management system and needs to implement a task scheduler that follows specific constraints. Each task has a difficulty level and it can be scheduled in different time slots. The task scheduler should ensure the following: - Every day is divided into constant number of time slots. - Each day must have each difficulty level represented at least once, and no difficulty level can appear more than once in any day\'s time slots. - Task difficulties range from 1 to k (easy to hard), where k is the number of difficulty levels. - The scheduler runs for n days, where (k ≤ number of time slots < 2k) and (1 ≤ k ≤ 100, 7 ≤ n ≤ 100). Write a program that generates the task scheduling plan. Input The first line contains two integers n and k — the number of days and the number of difficulty levels. Output Print n lines, each containing k space-separated integers representing the difficulty level for each time slot of that day. Ensure the arrangement meets the constraints mentioned. If there are several answers, print any of them. Examples Input 3 4 Output 1 2 3 4 2 3 4 1 3 4 1 2 Input 5 3 Output 1 2 3 2 3 1 3 1 2 1 2 3 2 3 1 Note In the first example, each difficulty level (1 to 4) appears exactly once per day. In the second example, each difficulty level appears exactly once per day and none are repeated within a day’s time slots.","solution":"def task_scheduler(n, k): Generates a task scheduling plan for n days with k difficulty levels. Parameters: n (int): The number of days k (int): The number of difficulty levels Returns: List[List[int]]: A schedule with each day containing k unique difficulty levels. schedule = [] base_day = list(range(1, k + 1)) for i in range(n): day_schedule = base_day[i % k:] + base_day[:i % k] schedule.append(day_schedule) return schedule"},{"question":"Given a string, write a function to check if it is a palindrome after removing all non-alphanumeric characters and ignoring case differences. Input A single line string `s`. Output Print `True` if the modified string is a palindrome, otherwise print `False`. Example Input: \\"A man, a plan, a canal: Panama\\" Output: True Input: \\"race a car\\" Output: False","solution":"def is_palindrome(s): Checks if the given string is a palindrome after removing all non-alphanumeric characters and ignoring case differences. # Remove non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if filtered string is a palindrome return filtered_s == filtered_s[::-1]"},{"question":"Write a function that takes in two strings S and T, and returns the minimum window substring of S such that every character in T (including duplicates) is included in the window. If there is no such substring, return the empty string \\"\\". Example 1: Input: S = \\"ADOBECODEBANC\\", T = \\"ABC\\" Output: \\"BANC\\" Example 2: Input: S = \\"a\\", T = \\"a\\" Output: \\"a\\" Example 3: Input: S = \\"a\\", T = \\"aa\\" Output: \\"\\" Note: - If there is a tie, return the substring that appears first in S. - 1 <= S.length, T.length <= 10^5","solution":"from collections import Counter, defaultdict def minWindow(S, T): Returns the minimum window substring of S such that every character in T (including duplicates) is included in the window. if not S or not T: return \\"\\" dictT = Counter(T) required = len(dictT) l, r = 0, 0 formed = 0 windowCounts = defaultdict(int) ans = float(\\"inf\\"), None, None while r < len(S): character = S[r] windowCounts[character] += 1 if character in dictT and windowCounts[character] == dictT[character]: formed += 1 while l <= r and formed == required: character = S[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) windowCounts[character] -= 1 if character in dictT and windowCounts[character] < dictT[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else S[ans[1]: ans[2] + 1]"},{"question":"Write a function called is_palindrome_possible(). Given a string s, return True if it is possible to rearrange the characters of s to form a palindrome, and False otherwise. A palindrome is a word, phrase, or sequence that reads the same backward as forward. For example, \\"racecar\\" is a palindrome but \\"hello\\" is not. Keep in mind that for a string to be rearranged into a palindrome, at most one character in the string can have an odd count. Examples: * is_palindrome_possible(\\"civic\\") should return True, as \\"civic\\" is already a palindrome. * is_palindrome_possible(\\"ivicc\\") should return True, as it can be rearranged into \\"civic\\". * is_palindrome_possible(\\"hello\\") should return False, as no permutation of \\"hello\\" can make it a palindrome. * is_palindrome_possible(\\"aabb\\") should return True, as it can be rearranged into \\"abba\\" or \\"baab\\". You may assume the input string s contains lowercase English letters only.","solution":"def is_palindrome_possible(s): from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"Most children in a certain kingdom love to collect magical stones that come in N different colors, conveniently numbered from 1 to N. Each stone has a magical power level associated with it, which is represented as an array P where P_i is the power level of the i-th color. King Eldric has decreed a race in which participants must collect all N different colors, one of each, in such an order that the total power level of the collection is maximized. In other words, for a given sequence S of collected stones, with each stone appearing exactly once, define the power level of S as the sum of power levels of all stones in S. However, a participant can only collect stone colors strictly from an inclusive range [A, B] of available colors. King Eldric is intrigued to know the maximum possible power level for any given range [A, B]. Help the king find this answer. Constraints * 1 leq N leq 10^5 * 0 leq P_i leq 10^9 * 1 leq A leq B leq N Input Input is given from Standard Input in the following format: N P (array of length N) Q (number of queries) Q queries follow, each in the format of A and B. Output For each query, output a single integer, the maximum possible power level for the inclusive range [A, B]. Example Input 6 4 2 3 8 1 5 3 1 4 2 5 3 6 Output 17 15 17","solution":"def max_power_in_range(n, P, queries): result = [] for A, B in queries: max_power = sum(P[A-1:B]) result.append(max_power) return result # Sample Execution n = 6 P = [4, 2, 3, 8, 1, 5] queries = [(1, 4), (2, 5), (3, 6)] print(max_power_in_range(n, P, queries)) # Output: [17, 14, 17]"},{"question":"A group of programmers is organizing a coding competition. They have a large number of participants, and each participant gets a unique identification number from 1 to n. Each participant also has a unique skill level represented by an integer. The organizers want to form the strongest possible team of exactly k participants. The strength of a team is defined as the sum of all the members\' skill levels. Given the skill levels of all participants, your task is to determine the maximum possible strength of a team of k members. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of participants and the number of participants in the team, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the skill levels of the participants. -----Output----- Print a single integer — the maximum possible strength of a team of k members. -----Examples----- Input 5 3 5 1 2 9 7 Output 21 Input 4 2 8 5 4 3 Output 13 -----Note----- In the first example, the maximum possible strength of a team of 3 members is obtained by selecting the participants with skill levels 9, 7, and 5, for a total strength of 21. In the second example, the maximum possible strength of a team of 2 members is obtained by selecting the participants with skill levels 8 and 5, for a total strength of 13.","solution":"def max_team_strength(n, k, skill_levels): Returns the maximum possible strength of a team of k members from n participants. :param n: int - Number of participants :param k: int - Number of participants in the team :param skill_levels: list - List of integers representing skill levels of the participants :return: int - Maximum possible strength of a team of k members skill_levels.sort(reverse=True) return sum(skill_levels[:k])"},{"question":"Implement a function `count_unique_substrings(s: str, k: int) -> int` that takes a string `s` and an integer `k` as input, and returns the number of unique substrings of length `k` in the string `s`. # Detailed Requirements: 1. The function should count only those substrings which have a length exactly equal to `k`. 2. The substrings should be non-overlapping. For example, for the input string \\"abcabcabc\\" and k=3, substrings should be considered as [\\"abc\\", \\"abc\\", \\"abc\\"]. 3. If the length of the string is less than `k`, return 0. 4. The result should only count unique substrings. # Function Signature: ```python def count_unique_substrings(s: str, k: int) -> int: ``` # Example Usage: ```python s1 = \\"abcdefabcdef\\" k1 = 3 print(count_unique_substrings(s1, k1)) # Expected output: 4 # Explanation: The unique non-overlapping substrings of length 3 are \\"abc\\", \\"def\\". So the total count is 2. s2 = \\"abcabcabc\\" k2 = 3 print(count_unique_substrings(s2, k2)) # Expected output: 1 # Explanation: The unique non-overlapping substrings of length 3 are \\"abc\\". So the total count is 1. s3 = \\"aabbcc\\" k3 = 2 print(count_unique_substrings(s3, k3)) # Expected output: 3 # Explanation: The unique non-overlapping substrings of length 2 are \\"aa\\", \\"bb\\", \\"cc\\". So the total count is 3. s4 = \\"abcd\\" k4 = 5 print(count_unique_substrings(s4, k4)) # Expected output: 0 # Explanation: The length of the string is less than k, so the result is 0. ``` # Notes: - You may assume the input string contains only lowercase alphabets. - The function should handle edge cases like empty strings and k being larger than the length of the string efficiently. Implement the function and ensure it follows the above specifications.","solution":"def count_unique_substrings(s: str, k: int) -> int: Counts the number of unique non-overlapping substrings of length k in the input string s. # Base case: if the length of the string is less than k if len(s) < k: return 0 # Using a set to store unique substrings unique_substrings = set() # Iterate over the string in steps of k for i in range(0, len(s) - k + 1, k): # Get the substring of length k substring = s[i:i + k] unique_substrings.add(substring) # Return the number of unique substrings return len(unique_substrings)"},{"question":"# Task A courier delivery service needs to transport several parcels using a single van. The goal is to minimize the number of trips needed to transport all parcels, while ensuring that the total weight of the parcels in each trip does not exceed the van\'s weight capacity. You are given a list of weights of the parcels and the weight capacity of the van. Determine the minimum number of trips required. # Example For `weights = [2, 3, 4, 5, 9]` and `capacity = 10`, the output should be `3`. One possible solution is: - First trip: parcels with weights [9] - Second trip: parcels with weights [5, 4] - Third trip: parcels with weights [3, 2] # Input/Output - `[input]` array of integers `weights` A list of weights of the parcels. Constraints: 1 ≤ weights.length ≤ 15, 1 ≤ weights[i] ≤ 100. - `[input]` integer `capacity` The weight capacity of the van. Constraints: 1 ≤ capacity ≤ 100. - `[output]` an integer The minimum number of trips needed.","solution":"def min_trips(weights, capacity): Determine the minimum number of trips needed to transport all parcels. Parameters: weights (list of int): List of weights of the parcels. capacity (int): The weight capacity of the van. Returns: int: Minimum number of trips. from itertools import combinations def count_trips(current_weights, current_capacity): if not current_weights: return 0 # Try to find the best fit for the remaining capacity for i in range(len(current_weights), 0, -1): for combo in combinations(current_weights, i): if sum(combo) <= current_capacity: remaining_weights = list(current_weights) for weight in combo: remaining_weights.remove(weight) return 1 + count_trips(remaining_weights, current_capacity) return float(\'inf\') return count_trips(weights, capacity)"},{"question":"You are a curator of the newly opened art gallery. Your gallery has a single straight wall on which you want to hang paintings. Each painting has a width and a height, and the wall has a fixed width. To avoid any over-crowding, the paintings must be placed such that no two paintings overlap with each other horizontally or vertically. However, consistent with the modern art theme, the relative vertical positions of the paintings should not matter. Your task is to determine the maximum number of paintings that can be hung on the wall without any overlap. ---Input--- The first line of the input contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains two integers w and n (1 leq w leq 10^4, 1 leq n leq 1000) — the width of the wall and the number of paintings, respectively. The following n lines contain two integers p_i and h_i (1 leq p_i, h_i leq 10^4) — the width and height of the i-th painting. ---Output--- For each test case, output a single integer — the maximum number of paintings that can be hung on the wall without any overlap. ---Examples--- Input 2 10 4 3 2 4 3 2 1 5 4 15 5 5 10 10 12 3 7 7 8 6 6 Output 3 3 ---Note--- In the first test case, the paintings with width 3, 4, and 2 can be hung on the wall with width 10. They do not overlap horizontally and their total width is 3 + 4 + 2 = 9 leq 10. Thus, the maximum number of paintings hung is 3. In the second test case, the paintings with width 5, 3, and 7 can be hung on the wall with width 15. They do not overlap horizontally and their total width is 5 + 3 + 7 = 15 leq 15. Thus, the maximum number of paintings hung is 3.","solution":"def max_paintings(wall_width, paintings): Calculate the maximum number of paintings that can be hung on the wall without overlap. :param wall_width: The width of the wall. :param paintings: List of tuples [(p_i, h_i), ...] representing width and height of each painting. :return: Maximum number of paintings that can be hung without overlap. paintings = sorted(paintings, key=lambda x: x[0]) current_width = 0 count = 0 for painting in paintings: if current_width + painting[0] <= wall_width: current_width += painting[0] count += 1 else: break return count def solve(t, test_cases): results = [] for i in range(t): wall_width, n_paintings = test_cases[i][0] paintings = test_cases[i][1] results.append(max_paintings(wall_width, paintings)) return results"},{"question":"Your task is to validate a Sudoku puzzle. _________________________________________________ Rules: 1. A Sudoku puzzle is a 9x9 grid, divided into a 3x3 grid of 3x3 subgrids. Each cell can contain a digit from 1 to 9 or be empty (represented by 0). 2. The puzzle is valid if: - Each row contains the digits from 1 to 9 without repetition. - Each column contains the digits from 1 to 9 without repetition. - Each 3x3 subgrid contains the digits from 1 to 9 without repetition. 3. A puzzle is \\"solved\\" if no empty cells (0) are present and it meets all the above conditions. Examples: For a valid puzzle: ```python puzzle = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` The output should be \'Valid Sudoku\'. For an invalid puzzle: ```python puzzle = [ [5, 3, 0, 0, 7, 0, 0, 0, 5], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` The output should be \'Invalid Sudoku\'. ________________________________________________ Input: puzzle - a 9x9 list of lists with digits from 1 to 9 or 0 for empty cells. Output: string message: \'Valid Sudoku\', \'Invalid Sudoku\', or \'Sudoku Solved\'. Note: The function should first check if the Sudoku meets the \\"solved\\" criteria before determining if it is valid. If the puzzle is solved and valid, return \'Sudoku Solved\'. If the puzzle is not solved but valid, return \'Valid Sudoku\'. If the puzzle is invalid, return \'Invalid Sudoku\'.","solution":"def is_valid_sudoku(puzzle): Returns whether the provided Sudoku puzzle is valid, solved or invalid. def is_valid_group(group): Helper function to check if a row, column or subgrid is valid nums = [num for num in group if num != 0] return len(nums) == len(set(nums)) def extract_subgrid(puzzle, row, col): Helper function to extract a 3x3 subgrid return [puzzle[r][c] for r in range(row, row + 3) for c in range(col, col + 3)] # Check rows and columns for i in range(9): if not is_valid_group([puzzle[i][j] for j in range(9)]): # check row return \'Invalid Sudoku\' if not is_valid_group([puzzle[j][i] for j in range(9)]): # check column return \'Invalid Sudoku\' # Check 3x3 subgrids for row in range(0, 9, 3): for col in range(0, 9, 3): if not is_valid_group(extract_subgrid(puzzle, row, col)): return \'Invalid Sudoku\' # Check if the sudoku is solved for row in puzzle: if 0 in row: return \'Valid Sudoku\' return \'Sudoku Solved\'"},{"question":"You are given a list of strings, each consisting of only lowercase alphabets. You need to find the length of the longest substring that appears the same number of times in at least two different strings in the list. Input Format: - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of strings. - The next N lines contain one string each. Output Format: For each test case, print the length of the longest common substring that appears at least twice across the strings. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Length of each string ≤ 100 SAMPLE INPUT 2 3 abcd abdc dacb 4 hellothere helloworld yellowlaser mellow SAMPLE OUTPUT 2 5 Explanation In the first test case, \\"ab\\" appears in both \\"abcd\\" and \\"abdc\\", and \\"da\\" appears in both \\"abdc\\" and \\"dacb\\". The longest substrings that appear at least twice across the strings have length 2. In the second test case, \\"ello\\" appears in \\"hellothere\\", \\"helloworld\\", \\"yellowlaser\\", and \\"mellow\\". The longest substring that appears at least twice across the strings has length 5, i.e., \\"ello\\".","solution":"def longest_common_substring_length(strings): def common_substring_length(s1, s2): len1, len2 = len(s1), len(s2) max_len = 0 dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(1, len1 + 1): for j in range(1, len2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_len = max(max_len, dp[i][j]) return max_len max_substring_length = 0 n = len(strings) for i in range(n): for j in range(i + 1, n): max_substring_length = max(max_substring_length, common_substring_length(strings[i], strings[j])) return max_substring_length def solve(test_cases): results = [] for t in test_cases: T, *input_strings = t result = longest_common_substring_length(input_strings) results.append(result) return results # Example test cases to be passed to solve function test_cases = [ (3, \\"abcd\\", \\"abdc\\", \\"dacb\\"), (4, \\"hellothere\\", \\"helloworld\\", \\"yellowlaser\\", \\"mellow\\") ] print(solve(test_cases)) # Expected output: [2, 5]"},{"question":"Alex and Jordan are playing a game of number sequences. They each have a list of n non-negative integers. Both players take turns, starting with Alex, and Alex always begins from the leftmost integer, while Jordan starts from the rightmost integer. On each player\'s turn, they must choose an integer from their respective current position and append it to the end of their sequence. After making a choice, the player\'s current position moves one step inward (to the right for Alex, to the left for Jordan). At any point, if an integer that either player chooses is larger than the chosen integer by the other player in the previous turn, they immediately win the game. Both players play optimally. Determine the winner of the game assuming the sequences are constructed optimally. Input The first line of input contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contain the integer n (1 ≤ n ≤ 10^5) followed by n non-negative integers (0 ≤ integers ≤ 10^9) which represent the initial list for both Alex and Jordan. Output For each test case, output \\"Alex\\" if Alex wins or \\"Jordan\\" if Jordan wins. Example Input 3 2 3 1 4 1 7 5 2 5 4 8 1 3 7 Output Jordan Alex Alex Explanation - In the first test case, Alex starts by choosing 3, and Jordan picks 1. Since Alex\'s last choice (3) is greater than Jordan\'s (1), Jordan loses immediately. - In the second test case, Alex will choose 1, and Jordan will pick 2 on their first turn. On Alex\'s second turn, no matter what he picks, it won\'t end the game as Jordan will always pick optimally moving towards the center and having a better chance. - In the third test case, Jordan can maintain the lead sequence until Alex chooses 7, beating Jordan\'s previous optimal choice. Hence, Alex wins.","solution":"def find_winner(test_cases): Determines the winner for each test case. Parameters: test_cases (list of tuples): Each tuple contains an integer n followed by n non-negative integers. Returns: list: List of winners (\'Alex\' or \'Jordan\') for each test case. winners = [] for case in test_cases: n, *numbers = case if n % 2 == 0: # If the length of the sequence is even, Jordan will always win winners.append(\\"Jordan\\") else: # If the length of the sequence is odd, Alex will always win winners.append(\\"Alex\\") return winners"},{"question":"In a large software development company, the process of merging two branches of code is a complex and meticulous task, often fraught with conflicts. To automate some aspects of this process, you need to write a program that will analyze the differences between two branches and report the necessary steps to integrate changes. You are given two strings `branchA` and `branchB` which represent sequences of code changes. Each character in the string represents a unique change. Your task is to determine the shortest sequence of changes required to transform `branchA` into `branchB`. This sequence is known as the edit distance or Levenshtein distance. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character Your program should return the minimum number of operations required. **Input Format:** - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains two space-separated strings `branchA` and `branchB`. **Output Format:** - For each test case, output a single integer representing the minimum number of operations required to transform `branchA` into `branchB`. **Constraints:** 1. 1 ≤ T ≤ 100 2. 1 ≤ length(branchA), length(branchB) ≤ 1000 3. Strings `branchA` and `branchB` consist of lowercase English letters only. **Sample Input:** ``` 3 kitten sitting flaw lawn intention execution ``` **Sample Output:** ``` 3 2 5 ``` **Explanation:** 1. To transform \\"kitten\\" into \\"sitting\\", the operations are: replace \'k\' with \'s\', replace \'e\' with \'i\', insert \'g\'. 2. To transform \\"flaw\\" into \\"lawn\\", the operations are: remove \'f\', replace \'a\' with \'n\'. 3. To transform \\"intention\\" into \\"execution\\", the operations are: replace \'i\' with \'e\', replace \'n\' with \'c\', replace \'t\' with \'x\', insert \'u\', replace \'i\' with \'t\'. This problem can be efficiently solved using dynamic programming.","solution":"def min_edit_distance(branchA, branchB): Calculate the Levenshtein distance between two strings branchA and branchB. len_a = len(branchA) len_b = len(branchB) # Create a DP table to store results of subproblems dp = [[0 for x in range(len_b + 1)] for x in range(len_a + 1)] # Fill dp array for i in range(len_a + 1): for j in range(len_b + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last char and recur for remaining string elif branchA[i - 1] == branchB[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[len_a][len_b] def levenshtein_distance(T, cases): results = [] for case in cases: branchA, branchB = case.split() results.append(min_edit_distance(branchA, branchB)) return results"},{"question":"Patty wants to organize her bookshelf. Each book on the shelf has a label containing a single lowercase letter from the Latin alphabet. Patty wants to categorize the books such that no category contains two books with the same label. Additionally, Patty desires to maintain as few categories as possible while preserving this rule. Help Patty determine the minimum number of categories required to achieve this. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) - the number of books. The second line consists of a string s of length n, where the i-th character represents the label of the i-th book. -----Output----- Output a single integer - the minimum number of categories needed to organize the books. -----Examples----- Input 5 abcde Output 1 Input 6 aabbcc Output 3 -----Note----- In the first sample, all books are unique, and hence they can be placed in a single category. In the second sample, books labeled with the same letter must be separated, so 3 categories (one for each pair of labels) are needed.","solution":"def min_categories(n, s): Returns the minimum number of categories needed for n books with labels in string s. from collections import Counter label_counts = Counter(s) # The number of categories is determined by the maximum frequency of any single label. max_frequency = max(label_counts.values()) return max_frequency"},{"question":"Alice has a string `s` of length `n` and she wants to make it a palindrome. She is allowed to perform the following operation exactly once: choose two indices `i` and `j` (1 ≤ i, j ≤ n, i ≤ j) and reverse the substring `s[i...j]`. You are tasked to help Alice determine if it is possible to make the string a palindrome using exactly one such operation. Input The first line contains an integer `n` (1 ≤ n ≤ 200 000) — the length of the string `s`. The second line contains the string `s` consisting of lowercase English letters. Output Output \\"YES\\" if Alice can make the string a palindrome with exactly one operation, otherwise output \\"NO\\". Examples Input 5 abcca Output YES Input 4 abcd Output NO","solution":"def can_become_palindrome(n, s): Determines if it\'s possible to make the string `s` a palindrome with exactly one operation. def is_palindrome(sub): return sub == sub[::-1] if is_palindrome(s): return \'YES\' for i in range(n): for j in range(i + 1, n): new_s = s[:i] + s[i:j + 1][::-1] + s[j + 1:] if is_palindrome(new_s): return \'YES\' return \'NO\'"},{"question":"In a galaxy far, far away, there exists an interplanetary communication network between planets. The network is represented as an undirected graph with planets as nodes and communication channels as edges. Each communication channel has a certain latency time. To facilitate seamless communication, the Intergalactic Council wants to determine the shortest time required to communicate between the home planet and all other planets. Given the number of planets `n` and the number of communication channels `m`, along with the list of communication channels that connect pairs of planets and the corresponding latency times, your task is to compute the shortest communication time from the home planet (considered as planet 1) to every other planet. Input The first line contains two integers, `n` (2 ≤ n ≤ 500) and `m` (1 ≤ m ≤ 10000), the number of planets and the number of communication channels, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a communication channel between planets `u` and `v` with latency time `w`. Assume that there are no duplicate edges, and no self-loops (u ≠ v). Output Print `n - 1` lines. The i-th line should contain the shortest communication time from the home planet (planet 1) to planet i+1. If a planet i+1 is not reachable, print \\"unreachable\\" instead of the latency time. Examples Input 4 4 1 2 1 1 3 4 2 3 2 3 4 1 Output 1 3 4 Input 4 2 1 2 5 2 3 10 Output 5 15 unreachable","solution":"import heapq def shortest_communication_times(n, m, channels): Function to compute the shortest communication time from the home planet (planet 1) to every other planet using Dijkstra\'s algorithm. Parameters: n (int): Number of planets m (int): Number of communication channels channels (list of tuples): Each tuple contains three integers u, v, w representing a communication channel between planets u and v with latency time w Returns: List of shortest communication times from planet 1 to all other planets. If a planet is not reachable, it contains \'unreachable\' instead of the latency time. # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in channels: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find shortest path from node 1 pq = [(0, 1)] # (distance, node) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 visited = set() while pq: current_dist, u = heapq.heappop(pq) if u in visited: continue visited.add(u) for v, weight in graph[u]: if v not in visited and current_dist + weight < dist[v]: dist[v] = current_dist + weight heapq.heappush(pq, (dist[v], v)) # Create result list based on the distances calculated result = [] for i in range(2, n + 1): if dist[i] == float(\'inf\'): result.append(\\"unreachable\\") else: result.append(dist[i]) return result"},{"question":"Background: Viktor is learning about Binary Trees in his Data Structures course. He came across a specific type of Binary Tree known as a Full Binary Tree. A Full Binary Tree is a tree in which every node except the leaves has exactly two children. Task: Viktor wants to determine if a given tree is a Full Binary Tree. He decides to write a function that, given a binary tree, returns `True` if the tree is a Full Binary Tree and `False` otherwise. You need to implement the function `isFullBinaryTree` that takes a binary tree as input and returns `True` or `False` based on whether the tree is a Full Binary Tree. Input: - The input will be provided as a list of tuples where each tuple represents a node in the binary tree. The structure of each tuple is (node_value, left_child_value, right_child_value), where `node_value` is an integer value of the node, and `left_child_value` and `right_child_value` are the integer values of the left and right children respectively (`None` if there is no respective child). Output: - The output should be a single boolean value `True` or `False`. Example: ``` Input: [(1, 2, 3), (2, 4, 5), (3, None, None), (4, None, None), (5, None, None)] Output: True ``` Explanation: In the given example, the tree structure can be visualized as: ``` 1 / 2 3 / 4 5 ``` Every node has either two children or no children at all, thus it is a Full Binary Tree. Function Signature: ```python def isFullBinaryTree(tree: List[Tuple[int, Optional[int], Optional[int]]]) -> bool: # Your code here ```","solution":"from typing import List, Tuple, Optional def isFullBinaryTree(tree: List[Tuple[int, Optional[int], Optional[int]]]) -> bool: if not tree: return True node_dict = {node[0]: node for node in tree} for node in tree: node_value, left_child, right_child = node if (left_child is None and right_child is not None) or (left_child is not None and right_child is None): return False return True"},{"question":"You are given a list of integers. You need to create a function to determine if there exist two elements in the list such that their sum is equal to a given target. Example 1: Input: arr = [2, 7, 11, 15] target = 9 Output: True Example 2: Input: arr = [1, 2, 3, 4] target = 8 Output: False Your Task: You don\'t need to input anything. Complete the function hasPairWithSum() which takes a list of integers arr and an integer target as input, and returns True if there are two distinct elements in the list that add up to the target value, otherwise return False. Constraints: - 2 <= len(arr) <= 1000 - -10^6 <= arr[i] <= 10^6 - -10^6 <= target <= 10^6","solution":"def hasPairWithSum(arr, target): Determines if there are two distinct elements in the list that add up to the target. Args: arr: List of integers target: Integer target sum Returns: Boolean indicating if there exists a pair of elements that sum to the target seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Given a binary tree of size N, the task is to print the longest path from the root to any leaf node. A leaf node is a node with no children. The path is defined as the sequence of nodes from the root to the leaf. Example 1: Input: 1 / 2 3 / 4 5 / 8 Output: [1, 2, 5, 8] Example 2: Input: 10 / 20 30 / / 40 50 60 / 70 Output: [10, 30, 50, 70] Your Task: You don\'t need to take input. Just complete the function `longestRootToLeafPath()` that takes the root node of the tree as parameter and returns a list containing the node values of the longest path from root to leaf. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= Number of nodes <= 10^5 Note: The Input/Output format and Example given are used for system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestRootToLeafPath(root: TreeNode): def helper(node): if not node: return [] left_path = helper(node.left) right_path = helper(node.right) if len(left_path) > len(right_path): return [node.val] + left_path else: return [node.val] + right_path return helper(root)"},{"question":"Mary has a list of integers, and she wants to find out if there are any two distinct integers in the list that sum up to a given target number. Write a program that takes an integer list and a target number as input, and outputs \\"Yes\\" if there are two distinct integers in the list that add up to the target number, or \\"No\\" if there are not. ------ Input Format ------ The first line of input will contain an integer N, denoting the number of integers in the list. The second line of input will contain N space-separated integers, representing the elements of the list. The third line of input will contain a single integer T, representing the target number. ------ Output Format ------ Output a single line which contains either \\"Yes\\", if there are two distinct integers in the list that sum up to the target number, or \\"No\\", if not. Each character in the output string can be either uppercase or lowercase (for example, the strings YES, yes, and Yes will all be treated as identical). ------ Constraints ------ 2 ≤ N ≤ 10^5 -10^9 ≤ list[i] ≤ 10^9 -10^9 ≤ T ≤ 10^9 ------ Sample Input 1 ------ 5 1 4 45 6 10 16 ------ Sample Output 1 ------ Yes ------ Explanation 1 ------ The integers 6 and 10 add up to 16. ------ Sample Input 2 ------ 4 0 -2 3 2 1 ------ Sample Output 2 ------ Yes ------ Explanation 2 ------ The integers -2 and 3 add up to 1. ------ Sample Input 3 ------ 3 1 2 3 7 ------ Sample Output 3 ------ No ------ Explanation 3 ------ No two distinct integers sum up to 7.","solution":"def has_pair_with_sum(numbers, target): Returns \'Yes\' if there are two distinct integers in the list that sum up to the target number, otherwise returns \'No\'. seen = set() for number in numbers: if (target - number) in seen: return \\"Yes\\" seen.add(number) return \\"No\\""},{"question":"Saito has a basic understanding of division involving integers. He can only divide two integers where the divisor and the dividend are both between 1 and 10 (inclusive), and the division result must be an integer. Given two integers X and Y (where Y is non-zero), print the result of X ÷ Y if Saito can calculate it. If he cannot (either because X or Y is outside the 1-10 range, or the result is not an integer), print -1 instead. -----Constraints----- - 1 leq X leq 20 - 1 leq Y leq 20 - Y is not zero. -----Input----- Input is given from Standard Input in the following format: X Y -----Output----- If Saito can calculate X ÷ Y, print the result; if he cannot, print -1. -----Sample Input----- 9 3 -----Sample Output----- 3 Explanation: 9 ÷ 3 = 3, which is an integer and within the range, so the output is 3. -----Sample Input----- 20 4 -----Sample Output----- -1 Explanation: 20 ÷ 4 = 5, but 20 is outside the range of 1-10, so the output is -1.","solution":"def saito_division(X, Y): Returns the result of X divided by Y if both X and Y are between 1 and 10, and the result is an integer. Otherwise, returns -1. if 1 <= X <= 10 and 1 <= Y <= 10 and X % Y == 0: return X // Y else: return -1"},{"question":"A programmer is working on a text analysis tool and needs to find the anagrams in a list of words. For this, he has asked you to write a function that can group all the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. The function should take a list of strings and group the anagrams together. Input The input consists of a single integer n (1 ≤ n ≤ 10^5) — the number of words. Each of the next n lines contains a single word w (1 ≤ |w| ≤ 100), consisting of lowercase English letters only. Output You should output the grouped anagrams, each group on a new line, with words separated by spaces. The order of groups and the order of words within each group do not matter. Examples Input 6 eat tea tan ate nat bat Output eat tea ate tan nat bat Input 4 listen silent cinema iceman Output listen silent cinema iceman Note In the first example, \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams and grouped together. Similarly, \\"tan\\" and \\"nat\\" are grouped together, and \\"bat\\" stands alone. In the second example, \\"listen\\" and \\"silent\\" are anagrams and are grouped together. \\"cinema\\" and \\"iceman\\" are also anagrams and grouped.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams from the list of words. :param words: List of strings to be grouped by anagram :return: List of lists containing grouped anagrams anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values()) def format_output(groups): Formats the output of the grouped anagrams. :param groups: List of lists containing grouped anagrams :return: Formatted string where each group is on a new line with words separated by spaces return \'n\'.join(\' \'.join(group) for group in groups)"},{"question":"A string is called a palindrome if it reads the same forward and backward. For example, “radar” is a palindrome, but “hello” is not. Palindromes are very useful in various programming problems, such as finding the longest palindromic substring or determining if a sequence can be rearranged to form a palindrome. For this task, you need to determine if a given string is a palindrome. problem A string representing a sequence of characters is given. Check if the string is a palindrome, and print \\"YES\\" if it is a palindrome, and \\"NO\\" otherwise. * The string length can range from 1 to 100 characters. * The string contains only lowercase letters. input A string representing the sequence of characters is given on one line. output Print \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Example Input 1 radar Output 1 YES The string \\"radar\\" reads the same forward and backward. Input 2 hello Output 2 NO The string \\"hello\\" does not read the same forward and backward. Input 3 a Output 3 YES A single character string is always a palindrome. Input 4 deified Output 4 YES The string \\"deified\\" reads the same forward and backward. Example Input radar Output YES","solution":"def is_palindrome(s: str) -> str: Determines if the given string is a palindrome. :param s: Input string :return: \'YES\' if the string is a palindrome, otherwise \'NO\' if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, reorder it such that all odd numbers come before all even numbers and within each group, the numbers maintain their relative order from the original array. Example 1: Input: N = 7 Array = [1, 2, 3, 4, 5, 6, 7] Output: [1, 3, 5, 7, 2, 4, 6] Explanation: Odd numbers: [1, 3, 5, 7] and Even numbers: [2, 4, 6]. The order of both groups is maintained as in the original array. Example 2: Input: N = 5 Array = [10, 21, 4, 45, 66] Output: [21, 45, 10, 4, 66] Explanation: Odd numbers: [21, 45] and Even numbers: [10, 4, 66]. The order of both groups is maintained. Your task: You don\'t need to read input or print anything. Your task is to complete the function reorderArray() which takes the array and its size N, reorders the array as per the given condition, and returns the modified array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= N <= 10^4 1 <= Array[i] <= 10^5","solution":"def reorderArray(arr, N): Reorders the array so that all odd numbers come before all even numbers while maintaining the relative order of odd and even numbers from the original array. Parameters: arr (list): List of integers N (int): Size of the list Returns: list: The reordered list if not arr: return [] # Separate odd and even numbers while maintaining their relative order odd_numbers = [num for num in arr if num % 2 != 0] even_numbers = [num for num in arr if num % 2 == 0] # Combine odd and even numbers back together return odd_numbers + even_numbers"},{"question":"Given a 2D grid of characters and a word, check if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Write a function `bool exist(vector<vector<char>>& board, string word)` to solve the problem. # Input - a 2D array of characters, `board`, where 1 <= board.length, board[i].length <= 200. - a string, `word`, where 1 <= word.length <= 10^3. # Output - Return `true` if the word exists in the grid. - Return `false` otherwise. # Example ``` Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], word = \\"ABCCED\\" Output: true ``` ``` Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], word = \\"ABCB\\" Output: false ``` # Constraints - The word consists of only upper-case and lower-case English letters.","solution":"def exist(board, word): Check if the word exists in the grid. rows, cols = len(board), len(board[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[index]: return False temp = board[r][c] board[r][c] = \'#\' found = (dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1)) board[r][c] = temp return found for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"You are given a long string consisting of lowercase English letters. Your task is to compress this string by performing the following operations: Delete: Pick any character and delete it from the string. For example, \\"aunderline{b}bc\\" -> \\"abc\\". Swap: Pick any two adjacent characters and swap them. For example, \\"abunderline{c}d\\" -> \\"abunderline{d}c\\". You need to compress the string to become the smallest lexicographical string possible by using the least number of operations. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a string S. ------ Output Format ------ For each test case, output a single line containing the lexicographically smallest string possible after performing the minimum number of operations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S consists of lowercase English letters only. ------ Sample Input 1 ------ 2 cba acb ------ Sample Output 1 ------ abc abc ------ Explanation 1 ------ In the first test case, - \\"cba\\" -> delete \'c\', swap \'a\' and \'b\' -> \\"abc\\" In the second test case, - \\"acb\\" -> swap \'b\' and \'c\' -> \\"abc\\"","solution":"def minimal_lexicographical_string(S): Returns the smallest lexicographical string by performing minimal operations. return \'\'.join(sorted(S)) def solve(T, test_cases): results = [] for i in range(T): results.append(minimal_lexicographical_string(test_cases[i])) return results"},{"question":"Given two positive integers a and b, find the position of the first differing bit in their binary representations when counted from the right (starting at 1). Return the position as an integer. If the integers are the same, return -1. Example 1: Input: a = 10, b = 12 Output: 2 Explanation: Binary representation of 10 is 1010 Binary representation of 12 is 1100 The first differing bit is at position 2 from the right. Example 2: Input: a = 4, b = 4 Output: -1 Explanation: Both numbers have the same binary representation 100. Your Task: You don\'t need to read input or print anything. Your task is to complete the function differingBitPosition() which takes a, b as inputs and returns the position as an integer. Expected Time Complexity: O(log(min(a, b))) Expected Auxiliary Space: O(1) Constraints: 1 ≤ a, b ≤ 10^9","solution":"def differingBitPosition(a, b): Returns the position of the first differing bit in a and b. If a and b are the same, returns -1. if a == b: return -1 xor = a ^ b position = 1 while xor > 0: if xor & 1 == 1: return position xor >>= 1 position += 1 return -1"},{"question":"Given an integer array `arr` of size `n`, and an integer `k`, the problem is to determine if there are two distinct indices `i` and `j` in the array such that `arr[i]` + `arr[j] == k`. Output `1` if such indices exist, otherwise, output `0`. Example 1: Input: arr = [1, 4, 5, 2], k = 6 Output: 1 Explanation: arr[0] + arr[3] = 1 + 5 = 6 (equivalent to k) Example 2: Input: arr = [1, 2, 3, 9], k = 7 Output: 0 Explanation: No two indices satisfy the condition. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findPairs()` which takes an integer array `arr` and integer `k` as inputs and returns the output (1 or 0). Expected Time Complexity: `O(n)` Expected Auxiliary Space: `O(n)` Constraints: - `1 <= n <= 10^4` - `-10^5 <= arr[i] <= 10^5` - `-10^5 <= k <= 10^5`","solution":"def findPairs(arr, k): Determines if there are two distinct indices i and j in the array such that arr[i] + arr[j] == k. Args: arr (list of int): The input array. k (int): The target sum. Returns: int: 1 if such indices exist, otherwise 0. seen = set() for num in arr: if k - num in seen: return 1 seen.add(num) return 0"},{"question":"A robot starts at the origin (0, 0) on a 2D grid. The robot can move up, down, left, or right by exactly one unit each. Given a series of moves, determine if the robot ends up back at the origin after completing all of the moves. The moves are given as a string, where each character represents the direction of the move (\'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right). Example 1: Input: moves = \\"UD\\" Output: True Explanation: The robot moves up by 1 unit and then down by 1 unit. It returns to the origin. Example 2: Input: moves = \\"LL\\" Output: False Explanation: The robot moves left by 2 units. It does not return to the origin. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isAtOrigin() which takes a string moves as input and returns \\"True\\" if the robot returns to the origin, otherwise returns \\"False\\". Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(moves) <= 10^4","solution":"def isAtOrigin(moves): Determine if the robot returns to the origin after a series of moves. Parameters: moves (str): A string representing the robot\'s movement on a grid. Returns: bool: True if the robot returns to the origin, False otherwise. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"In this problem, we consider a coding challenge where a robot moves on a grid. The robot starts at the top-left corner (1,1) of an m x n grid and aims to reach the bottom-right corner (m, n). The robot can only move to the right or down at any step. However, certain cells on the grid are marked as obstacles, which the robot cannot traverse. Write a program that determines the number of distinct paths the robot can take to reach the bottom-right corner from the top-left corner, avoiding the obstacles. -----Input----- The first line of the input contains two integers, m and n (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid. The next m lines contain n integers each, representing the grid. A cell value of 0 indicates it is free, while a value of 1 indicates it is an obstacle. -----Output----- The single output line should contain the number of distinct paths from the top-left corner to the bottom-right corner. If there are no paths, output 0. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 0 0 0 0 0 Output 3 Input 3 3 1 1 0 0 0 0 0 0 0 Output 0","solution":"def unique_paths_with_obstacles(grid): Calculate the number of unique paths that the robot can take to reach the bottom-right corner avoiding the obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"Given two strings s and t, you are allowed to one edit operation on string s. The edit operation can be one of the following: 1. Insert a character 2. Delete a character 3. Replace a character Determine if string t can be generated from string s using exactly one edit operation. -----Input----- The first line of input contains the strings s and t separated by a space. - 1 leq text{length of } s, t leq 10^5 - Both strings consist of lowercase English letters. -----Output----- Output \\"YES\\" if string t can be generated from string s using exactly one edit operation, otherwise output \\"NO\\". -----Examples----- Sample Input 1: abac abc Sample Output 1: NO Sample Input 2: abcd abcds Sample Output 2: YES Sample Input 3: abc abx Sample Output 3: YES Sample Input 4: abc bcd Sample Output 4: NO","solution":"def is_one_edit_distance(s, t): Returns whether t can be generated from s by exactly one edit operation. len_s, len_t = len(s), len(t) if abs(len_s - len_t) > 1: return \\"NO\\" # Ensure s is the shorter one if len_s > len_t: s, t = t, s len_s, len_t = len_t, len_s found_difference = False i, j = 0, 0 while i < len_s and j < len_t: if s[i] != t[j]: if found_difference: return \\"NO\\" found_difference = True # If lengths are different, move pointer in the longer string if len_s < len_t: j += 1 else: i += 1 j += 1 else: i += 1 j += 1 return \\"YES\\" if found_difference or len_s < len_t else \\"NO\\""},{"question":"You are given a string consisting of lowercase letters and you need to repeatedly perform the following operation: Find any pair of adjacent characters in the string that are the same and remove the pair from the string, causing the characters to the left and right of the removed pair to become adjacent. Your task is to determine the final string after no more operations can be performed. Input Format The input contains a single string s (1 le |s| le 10^5). Output Format Output the final string after all possible operations have been performed. Sample Input abbaca Sample Output ca Explanation In the first operation, we remove the pair \\"bb\\" resulting in the string \\"aaca\\". In the second operation, we remove the pair \\"aa\\" resulting in the final string \\"ca\\", which has no more adjacent pairs of the same characters to remove. Another Example Sample Input azxxzy Sample Output ay Explanation In the first operation, we remove the pair \\"xx\\" resulting in the string \\"azzy\\". In the second operation, we remove the pair \\"zz\\" resulting in the final string \\"ay\\", which has no more adjacent pairs of the same characters to remove.","solution":"def remove_adjacent_pairs(s): Returns the final string after repeatedly removing adjacent pairs of the same characters. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"Given an n-ary tree where each node has a value and a list of children nodes, you need to implement a function that finds and returns the depth of the deepest node in the tree. # Function Signature: ```python def find_deepest_node_depth(root: \'TreeNode\') -> int: ``` # Input: - root: a reference to the root of the n-ary tree. If the tree is empty, root will be None. # Output: - Return an integer representing the depth of the deepest node in the tree. Depth is defined as the number of edges in the longest path from the root to the deepest node. For an empty tree, the depth is 0. # Constraints: - The maximum number of nodes in the tree is 1000. - Each node\'s value is a unique integer within the range [-1000, 1000]. # Example 1: Input: ``` (root represents the following n-ary tree) 1 /| 2 3 4 | 5 6 | 7 ``` Output: ``` 3 ``` # Example 2: Input: ``` (root represents the following n-ary tree) 1 ``` Output: ``` 0 ``` # Example 3: Input: ``` (root represents the following n-ary tree) (empty tree) ``` Output: ``` 0 ``` # Note: - You may use a BFS or DFS approach to traverse the tree and determine the depth of the deepest node.","solution":"class TreeNode: def __init__(self, val=0, children=None): self.val = val self.children = children if children is not None else [] def find_deepest_node_depth(root: \'TreeNode\') -> int: Given an n-ary tree, find and return the depth of the deepest node. Args: - root: TreeNode: the root of the n-ary tree. Returns: - int: the depth of the deepest node. if not root: return 0 def dfs(node, depth): if not node.children: return depth max_depth = 0 for child in node.children: max_depth = max(max_depth, dfs(child, depth + 1)) return max_depth return dfs(root, 0)"},{"question":"Given an array of integers, we want to find the length of the longest subsequence that contains no two consecutive integers. A subsequence is derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, given the array textbf{[4, 3, 7, 4, 8]}, the longest subsequence without consecutive integers can be textbf{[4, 7, 8]} or textbf{[4, 3, 8]}, each of length 3. Function Description Complete the `nonConsecutiveSubsequence` function in the editor below. It must return an integer that denotes the length of the longest subsequence without consecutive integers. `nonConsecutiveSubsequence` has the following parameter: - `arr`: an array of integers Input Format The first line contains the number of test cases mathbf{mathbf{t}}. Each of the next mathbf{mathbf{t}} lines contains an array of integers mathbf{mathrm{~arr~}}. Constraints 1 leq t leq 100 1 leq |mathrm{arr}| leq 100 1 leq mathrm{arr}[i] leq 100 Output Format For each test case, print the length of the resultant maximal subsequence on a new line. Sample Input 3 4 3 7 4 8 1 2 3 4 5 5 10 15 20 25 Sample Output 3 1 5 Explanation For the first case, the longest subsequence without consecutive integers can be [4, 7, 8] or [4, 3, 8], each of length 3. For the second case, any subsequence with length greater than 1 will contain consecutive integers, so the answer is 1. For the third case, the array itself has no consecutive integers, so the answer is 5.","solution":"def nonConsecutiveSubsequence(arr): if not arr: return 0 sorted_arr = sorted(arr) longest_subseq = [sorted_arr[0]] for i in range(1, len(sorted_arr)): if sorted_arr[i] != sorted_arr[i - 1] + 1: longest_subseq.append(sorted_arr[i]) return len(longest_subseq) def process_cases(cases): results = [] for case in cases: result = nonConsecutiveSubsequence(case) results.append(result) return results"},{"question":"A new social media platform wants to implement a feature to analyze potential connections between users. They represent users as nodes in a graph, and an \\"acquaintance\\" relationship as edges between nodes. The platform is particularly interested in identifying communities within this network. You are given a graph with N nodes and M edges. Each edge is bidirectional and connects two distinct nodes. Your task is to find all communities within the graph. A community is defined as a connected component, where there is a path between any pair of nodes within the component. Write a function that takes two inputs, N and M, followed by M pairs of integers representing the edges of the graph. The function should output the size of each community in non-decreasing order. # Constraints - 1 ≤ N ≤ 10^5 - 0 ≤ M ≤ 10^5 - 1 ≤ u, v ≤ N (u ≠ v) # Input Input is given from Standard Input in the following format: ``` N M u1 v1 u2 v2 ... uM vM ``` # Output Output the sizes of all communities in non-decreasing order, one size per line. # Example Input ``` 7 5 1 2 2 3 4 5 5 6 6 7 ``` Output ``` 3 4 ``` Explanation There are two communities in the graph: - Node set {1, 2, 3} forms a community of size 3. - Node set {4, 5, 6, 7} forms a community of size 4.","solution":"def find_communities(N, M, edges): from collections import defaultdict, deque def bfs(node, graph, visited): queue = deque([node]) visited[node] = True size = 0 while queue: current = queue.popleft() size += 1 for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size # Create the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) community_sizes = [] for node in range(1, N + 1): if not visited[node]: community_size = bfs(node, graph, visited) community_sizes.append(community_size) return sorted(community_sizes)"},{"question":"Mary has a special collection of stones, each with a specific positive integer weight. She wants to know if it is possible to partition her collection into two non-empty subsets such that the absolute difference between the sums of the weights of the two subsets is minimized. Additionally, she is curious to find out what this minimal absolute difference is. Input: - The first line contains an integer N, the number of stones. - The second line contains N space-separated integers W_1, W_2, dots, W_N, representing the weights of the stones. Output: - Print a single integer, the minimal absolute difference between the sums of the weights of the two subsets. Constraints: - 2 leq N leq 1000 - 1 leq W_i leq 1000 for each valid i Sample Input 1: 4 1 6 11 5 Sample Output 1: 1 Explanation 1: One optimal way to partition the stones is into subsets {1, 6, 5} and {11}, resulting in sums of 12 and 11, respectively. The absolute difference is |12 - 11| = 1. Sample Input 2: 3 10 20 30 Sample Output 2: 0 Explanation 2: One optimal way to partition the stones is into subsets {10, 20} and {30}, resulting in sums of 30 and 30, respectively. The absolute difference is |30 - 30| = 0.","solution":"def minimal_partition_difference(N, weights): Returns the minimal absolute difference between the sums of the weights of the two subsets. :param N: int, number of stones :param weights: list of int, weights of the stones :return: int, the minimal absolute difference total_sum = sum(weights) half_sum = total_sum // 2 # Create a DP array to store the possible sums we can achieve dp = [False] * (half_sum + 1) dp[0] = True # We can always have a sum of 0 by taking no elements # Update the DP array with the weights for weight in weights: for j in range(half_sum, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] # Find the largest possible sum we can attain that is less than or equal to half_sum for j in range(half_sum, -1, -1): if dp[j]: return total_sum - 2 * j return total_sum # The worst case when no partitioning can be done"},{"question":"You are given a rectangular grid of dimensions n times m where each cell can either be blocked (indicated by -1) or free (indicated by 0). The objective is to determine the minimum number of moves required to move from the top-left corner (0,0) to the bottom-right corner (n-1, m-1). You can only move up, down, left, or right, and you are not allowed to move through blocked cells. If it is not possible to reach the bottom-right corner, output -1. Input The first line contains two integers n and m (1 leq n, m leq 500) representing the dimensions of the grid. Each of the next n lines contains m integers separated by spaces, representing the grid where -1 is a blocked cell and 0 is a free cell. Output Output the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, output -1. Example Input 3 3 0 0 -1 0 0 0 -1 0 0 Output 4","solution":"from collections import deque def min_moves(n, m, grid): Returns the minimum number of moves required to move from the top-left corner to the bottom-right corner of the grid, or -1 if it is not possible to reach the bottom-right corner. if grid[0][0] == -1 or grid[n-1][m-1] == -1: return -1 # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() # If we reached the bottom-right corner if r == n-1 and c == m-1: return steps # Explore the neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 # Example usage n = 3 m = 3 grid = [ [0, 0, -1], [0, 0, 0], [-1, 0, 0] ] print(min_moves(n, m, grid)) # Output: 4"},{"question":"You are given an array a consisting of n integers. Your task is to determine whether you can make all elements of the array equal by subtracting the same positive integer d from each element any number of times. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of test cases follows. The first line of each test case contains two integers n (1 le n le 100) and d (1 le d le 10^9). The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, output \\"YES\\" (without quotes) if you can make all elements of the array equal by subtracting the same positive integer d from each element any number of times. Otherwise, output \\"NO\\" (without quotes). -----Examples----- Input 3 3 2 2 4 6 4 3 1 4 7 10 2 5 10 3 Output YES YES NO -----Note----- In the first test case, you can subtract 2 from each element. For example: - subtract 2 from 6 to get 4, - subtract 2 from 4 to get 2, - Now all elements can be equal. In the second test case, you can subtract 3 from each element. For example: - subtract 3 from 10 to get 7, - subtract 3 from 7 to get 4, - subtract 3 from 4 to get 1, - Now all elements can be equal. In the third test case, no single positive integer d can be subtracted to make all elements equal.","solution":"def can_make_all_equal(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] a = test_cases[i][1] # Find the minimum element in the array min_val = min(a) # Check if all elements in the array minus the minimum element are divisible by d if all((x - min_val) % d == 0 for x in a): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string s consisting of lowercase alphabets, find the first unique character in the string and return it. If there is no unique character, return an underscore (\'_\'). Example 1: Input: s = \\"swiss\\" Output: \\"w\\" Explanation: The first character that is not repeated is \'w\'. Example 2: Input: s = \\"relevel\\" Output: \\"r\\" Explanation: The first character that is not repeated is \'r\'. Example 3: Input: s = \\"aabbcc\\" Output: \\"_\\" Explanation: There is no unique character in the string. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function firstUniqueChar() that takes a string (s) and returns the first unique character, or \'_\' if there is no unique character. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= s.length <= 10^6","solution":"def firstUniqueChar(s): Returns the first unique character in the string, or \'_\' if there are no unique characters. from collections import Counter # Count the frequency of each character in the string count = Counter(s) # Find the first character with a frequency of 1 for char in s: if count[char] == 1: return char # If no unique character is found, return \'_\' return \'_\'"},{"question":"As an experienced gardener, you\'ve decided to create a beautiful pattern of flower plants in your garden. The pattern will be a simple sequence of flower beds where the height of the plants determines their beauty. You will plant flowers in n flower beds. You want each bed to contain exactly one kind of flower, and to look aesthetically pleasing, the heights of the flowers should follow a certain symmetry. Specifically, you want the sequence of flower heights to be palindromic: the heights read the same forward and backward. Write a program that helps you plot out the height of flowers for each bed (flower bed height as integers). Your program should determine the minimum number of beds you need to plant to achieve the desired height sequence for your flowerbeds. Input The first line contains one integer n (1 ≤ n ≤ 105) — the number of flower beds. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — the heights of the flowers to be planted in each bed, in the specified order. Output Print the minimum number of additional flower beds required to make the sequence of flower heights palindromic. If the sequence is already palindromic, print 0. Examples Input 5 3 1 2 1 3 Output 0 Input 4 1 2 3 4 Output 3","solution":"def min_additional_beds_to_palindrome(n, heights): Returns the minimum number of additional flower beds required to make the sequence of flower heights palindromic. def min_insertions_palindrome(seq): Helper function to find minimum insertions to make seq palindrome. length = len(seq) dp = [[0]*length for _ in range(length)] for gap in range(1, length): for l in range(length-gap): r = l + gap if seq[l] == seq[r]: dp[l][r] = dp[l+1][r-1] else: dp[l][r] = min(dp[l+1][r], dp[l][r-1]) + 1 return dp[0][-1] return min_insertions_palindrome(heights)"},{"question":"Simple Course Planner In a university, each course has a unique identifier (an alphanumeric code up to 6 characters), a list of prerequisites, and a list of students enrolled. Design a CoursePlanner class to manage these courses. The class should provide functionalities to: 1. Add a new course. 2. Enroll a student in a course. 3. Drop a student from a course. 4. Retrieve the list of students enrolled in a course. 5. Retrieve the list of courses a student is enrolled in. 6. Check if a student is eligible to enroll in a course (i.e., check if they have completed all the prerequisites). Each course is represented as a dictionary with the following structure: ``` { \\"id\\": \\"CS101\\", \\"prerequisites\\": [\\"MATH101\\", \\"ENG101\\"], # a list of course ids \\"students\\": [\\"student1\\", \\"student2\\"] # a list of student ids } ``` Implement the CoursePlanner class with the following methods: ``` class CoursePlanner: def __init__(self): Initialize an empty course dictionary. pass def add_course(self, course): Adds a new course to the planner. course: dict - A dictionary representing a course as described above. Returns: None. pass def enroll_student(self, course_id, student_id): Enrolls a student in a course if they are eligible (i.e., have completed prerequisites). course_id: str - The id of the course. student_id: str - The id of the student. Returns: str - A success message if enrollment is successful, otherwise a failure message. pass def drop_student(self, course_id, student_id): Drops a student from a course. course_id: str - The id of the course. student_id: str - The id of the student. Returns: str - A success message if the student is successfully dropped, otherwise a failure message. pass def get_course_students(self, course_id): Retrieves the list of students enrolled in a course. course_id: str - The id of the course. Returns: list - A list of student ids. pass def get_student_courses(self, student_id): Retrieves the list of courses a student is enrolled in. student_id: str - The id of the student. Returns: list - A list of course ids. pass def is_eligible(self, course_id, student_id): Checks if a student is eligible to enroll in a course. course_id: str - The id of the course. student_id: str - The id of the student. Returns: bool - True if the student is eligible, False otherwise. pass # Example: cp = CoursePlanner() cs101 = {\\"id\\": \\"CS101\\", \\"prerequisites\\": [\\"MATH101\\"], \\"students\\": []} cp.add_course(cs101) cp.enroll_student(\\"CS101\\", \\"student1\\") # Returns a failure message because student1 hasn\'t completed MATH101 ```","solution":"class CoursePlanner: def __init__(self): self.courses = {} self.student_courses = {} def add_course(self, course): course_id = course[\\"id\\"] self.courses[course_id] = { \\"prerequisites\\": course[\\"prerequisites\\"], \\"students\\": course[\\"students\\"] } def enroll_student(self, course_id, student_id): if self.is_eligible(course_id, student_id): self.courses[course_id][\\"students\\"].append(student_id) if student_id not in self.student_courses: self.student_courses[student_id] = [] self.student_courses[student_id].append(course_id) return f\\"Student {student_id} successfully enrolled in {course_id}.\\" return f\\"Student {student_id} does not meet the prerequisites for {course_id}.\\" def drop_student(self, course_id, student_id): if student_id in self.courses[course_id][\\"students\\"]: self.courses[course_id][\\"students\\"].remove(student_id) self.student_courses[student_id].remove(course_id) return f\\"Student {student_id} successfully dropped from {course_id}.\\" return f\\"Student {student_id} is not enrolled in {course_id}.\\" def get_course_students(self, course_id): return self.courses[course_id][\\"students\\"] def get_student_courses(self, student_id): return self.student_courses.get(student_id, []) def is_eligible(self, course_id, student_id): prerequisites = self.courses[course_id][\\"prerequisites\\"] for pre in prerequisites: if pre not in self.get_student_courses(student_id): return False return True"},{"question":"A traveling merchant is planning his route across a series of cities connected by roads. He wants to minimize the distance he travels while visiting every city exactly once and returning to his starting point. You need to find the minimum distance the merchant has to travel to complete his journey. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then T test cases follow. - Each test case starts with an integer N, the number of cities. - The next N lines contain N space-separated integers, where the j-th integer in the i-th line represents the distance between the city i and city j. ------ Output Format ------ For each test case, output in a single line the minimum distance the merchant has to travel to visit every city exactly once and return to the starting city. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10 1 ≤ text{distance}_{i,j} ≤ 100 ----- Sample Input 1 ------ 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 ----- Sample Output 1 ------ 80 64 ----- Explanation 1 ------ Test Case 1: The optimal path for the merchant could be city 1 -> city 2 -> city 4 -> city 3 -> city 1, with a total distance of 10 + 25 + 30 + 15 = 80. Test Case 2: The optimal path for the merchant could be city 1 -> city 3 -> city 2 -> city 1, with a total distance of 20 + 15 + 29 = 64.","solution":"import itertools def tsp(distances): N = len(distances) city_indices = range(N) min_path_cost = float(\'inf\') # Generate all possible permutations of cities for perm in itertools.permutations(city_indices): path_cost = 0 # Calculate the path cost for the current permutation for i in range(N): path_cost += distances[perm[i]][perm[(i + 1) % N]] # Update the minimum path cost found min_path_cost = min(min_path_cost, path_cost) return min_path_cost def solve_tsp_cases(T, cases): results = [] for i in range(T): N, distances = cases[i] results.append(tsp(distances)) return results"},{"question":"Given a list of integers where each integer appears three times except for one integer which appears only once, find and return the integer that appears only once. Example 1: Input: nums = [2, 2, 3, 2] Output: 3 Explanation: In the given input, all integers appear thrice except for 3, which appears only once. Hence, the output is 3. Example 2: Input: nums = [0, 1, 0, 1, 0, 1, 99] Output: 99 Explanation: In the given input, all integers appear thrice except for 99, which appears only once. Hence, the output is 99. Your Task: You need to complete the function findSingle() that takes a list of integers as a parameter and returns the integer that appears only once. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1. 1 ≤ len(nums) ≤ 3 * 10^{4} 2. -2^{31} ≤ nums[i] ≤ 2^{31} - 1","solution":"def findSingle(nums): Given a list of integers where each integer appears three times except for one integer which appears only once, return the integer that appears only once. ones, twos = 0, 0 for num in nums: # accumulate bits that appear 2nd time (twos) twos |= ones & num # accumulate bits that appear 1st time (ones) ones ^= num # remove bits that appear 3rd time threes = ones & twos ones &= ~threes twos &= ~threes return ones"},{"question":"You\'ve been given a grid-based city map where each cell either contains a building \'B\' or an empty plot \'.\'. The city wants to build a new school in such a way that the maximum distance from any building to the school is minimized. The distance between two cells (x1, y1) and (x2, y2) is defined by the Manhattan distance: |x1 - x2| + |y1 - y2|. Your task is to find the optimal location for the school and output the maximum distance from any building to this location. Input The first line contains an integer n (1 ≤ n ≤ 20) that represents the size of the grid (the grid is n x n). Each of the next n lines contains n characters (either \'B\' or \'.\') that represent the buildings and empty plots in the city. Output Print a single integer representing the minimum possible maximum distance from any building to the school. Examples Input 3 B.. ... ..B Output 2 Input 2 B. .B Output 1 Note In the first example, placing the school at cell (1, 1) (considering 0-based indexing) results in the maximum distances to the nearest buildings as follows: - Distance to (0, 0): |1 - 0| + |1 - 0| = 2 - Distance to (2, 2): |1 - 2| + |1 - 2| = 2 Thus, the maximum of these distances is 2, which is minimized. In the second example, it is optimal to place the school at cell (0, 1) or (1, 0) which results in a maximum distance of 1.","solution":"def minimum_maximum_distance(n, city_map): def calculate_max_distance(sx, sy): max_distance = 0 for x in range(n): for y in range(n): if city_map[x][y] == \'B\': max_distance = max(max_distance, abs(sx - x) + abs(sy - y)) return max_distance min_max_distance = float(\'inf\') for i in range(n): for j in range(n): if city_map[i][j] == \'.\': min_max_distance = min(min_max_distance, calculate_max_distance(i, j)) return min_max_distance # Example usage: n = 3 city_map = [ \\"B..\\", \\"...\\", \\"..B\\" ] print(minimum_maximum_distance(n, city_map)) # Output: 2"},{"question":"Savita is fascinated with graphs and shortest paths. She is trying to experiment by defining a new measure in a connected undirected graph called \\"strong distance\\" between two vertices u and v. The strong distance s(u, v) is defined as the length of the longest shortest path between any pair of vertices (w, x) in the graph containing both u and v either as w, x, or an intermediate vertex on the path. Given an undirected graph with N vertices and M edges, help Savita by finding the strong distance s(u, v) for each pair of vertices (u, v) in the graph. Input Format - First line contains an integer T, the number of testcases. - For each testcase: - First line contains two integers N and M. - Next M lines each contain three integers A, B, and C denoting an edge between vertices A and B with a length C. Constraints - 1 leq T leq 5 - 2 leq N leq 500 - 1 leq M leq N(N-1)/2 - 1 leq A, B leq N - 1 leq C leq 1000 Output Format For each testcase, print a matrix of size N x N where the entry at (i, j) represents the strong distance s(i, j). If it is not possible to connect u and v such that the strong distance s(u, v) is finite, print `INF`. Sample Input 1 4 4 1 2 1 2 3 1 3 4 1 4 1 1 Sample Output 0 2 2 2 2 0 2 2 2 2 0 2 2 2 2 0 Explanation For the given graph: 1. Each pair of vertices (i, j) has paths passing through all other vertices, so the strong distance is the same for all pairs (i, j). 2. Calculation for the paths: - (1,2): Strong distance is 2 because the longest shortest path includes both (1, 2) directly or as part of the path 1-4-3-2. - Similarly for other vertex pairs, the output distance is calculated considering the journey between each node pairs through intermediate nodes (since the graph is cyclic, the longest paths involve using all nodes).","solution":"def floyd_warshall(n, graph): dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u, v, w in graph: dist[u-1][v-1] = w dist[v-1][u-1] = w for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def strong_distance(n, graph): shortest_paths = floyd_warshall(n, graph) result = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): if i == j: result[i][j] = 0 else: max_path = 0 for k in range(n): for l in range(n): if (k == i or k == j or l == i or l == j) and shortest_paths[k][l] != float(\'inf\'): max_path = max(max_path, shortest_paths[k][l]) result[i][j] = max_path return result def solve(T, testcases): results = [] for case in testcases: N, M, edges = case result = strong_distance(N, edges) results.append(result) return results"},{"question":"In the ancient art of cryptography, one of the simplest methods of encryption is known as the Caesar Cipher, named after Julius Caesar who used it in his private correspondence. The Caesar Cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet. For example, with a shift of 1, \'A\' becomes \'B\', \'B\' becomes \'C\', and so on, wrapping around at the end of the alphabet. Thus, the word \\"HELLO\\" with a shift of 1 becomes \\"IFMMP\\". Your task is to implement the Caesar Cipher encryption method in the function `caesar_cipher(s, k)`. The function takes a string `s` and an integer `k`, which represents the shift value (positive means shifting right, negative means shifting left). The function should return the encrypted version of `s`. The function must handle both uppercase and lowercase letters efficiently without converting the case, and it should leave non-alphabetical characters unchanged. Some examples: ``` caesar_cipher(\\"HELLO\\", 1): returns \\"IFMMP\\". caesar_cipher(\\"hello\\", 3): returns \\"khoor\\". caesar_cipher(\\"Zebra!\\", 2): returns \\"Bgdtc!\\". caesar_cipher(\\"Cipher123\\", -3): returns \\"Zfmebo123\\". ``` Special Notes: - The shift value `k` can be positive or negative and could be larger than the length of the alphabet. - Use modulo operation to handle wrap around of the letters.","solution":"def caesar_cipher(s, k): Encrypts the input string s using Caesar Cipher with a shift of k. Parameters: s (str): The string to be encrypted. k (int): The shift value. Returns: str: The encrypted string. encrypted = [] for char in s: if char.isalpha(): shift = k % 26 # Reduce the shift within the range of the alphabet new_char = \'\' if char.islower(): new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif char.isupper(): new_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) encrypted.append(new_char) else: encrypted.append(char) return \'\'.join(encrypted)"},{"question":"Task Create a function that checks if a given string is a subsequence of another string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input Two strings, str1 and str2. Valid characters for these strings are uppercase and lowercase letters from the alphabet. Output A boolean value, `True` if str1 is a subsequence of str2, and `False` otherwise. Examples ```python str1 = \\"abc\\", str2 = \\"ahbgdc\\" --> True str1 = \\"axc\\", str2 = \\"ahbgdc\\" --> False str1 = \\"xyz\\", str2 = \\"xaybzct\\" --> True str1 = \\"abc\\", str2 = \\"ab\\" --> False ```","solution":"def is_subsequence(str1, str2): Check if str1 is a subsequence of str2. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 is a subsequence of str2, otherwise False. iter_str2 = iter(str2) return all(char in iter_str2 for char in str1)"},{"question":"The function ```find_unpaired_number(arr)``` will accept a list of integers called ```arr```, where all numbers except for one occur an even number of times. The function should find and return the integer that occurs an odd number of times. **Constraints:** - The list will contain at least 1 integer. - The length of the list does not exceed 1,000,000. - The integers in the list are between -1,000,000,000 and 1,000,000,000. **Examples:** ```python arr = [20, 1, 1, 2, 2, 20, 2] find_unpaired_number(arr) == 2 arr = [4, 5, 5, 4, 5] find_unpaired_number(arr) == 5 arr = [10] find_unpaired_number(arr) == 10 ``` **Note:** - The function should have a time complexity of O(n), where n is the number of elements in the list.","solution":"def find_unpaired_number(arr): Finds the integer that occurs an odd number of times in the list. Args: arr (list): A list of integers. Returns: int: The integer that occurs an odd number of times. result = 0 for number in arr: result ^= number return result"},{"question":"Task Implement a function to calculate the score of a word based on the following letter values. The function should return the cumulative score for the entire word in lowercase letters. | Letter | Value | |---------|-------| | a, e, i, o, u, l, n, s, t, r | 1 | | d, g | 2 | | b, c, m, p | 3 | | f, h, v, w, y | 4 | | k | 5 | | j, x | 8 | | q, z | 10 | Example For the word `\\"hello\\"`, the score should be `8`. (h=4, e=1, l=1, l=1, o=1) For the word `\\"world\\"`, the score should be `9`. (w=4, o=1, r=1, l=1, d=2) Input/Output - `[input]` string `word` A word consisting of uppercase and lowercase English letters. - `[output]` integer A single integer representing the cumulative score of the word.","solution":"def calculate_word_score(word): Returns the cumulative score of the given word based on the specified letter values. letter_values = { \'a\': 1, \'e\': 1, \'i\': 1, \'o\': 1, \'u\': 1, \'l\': 1, \'n\': 1, \'s\': 1, \'t\': 1, \'r\': 1, \'d\': 2, \'g\': 2, \'b\': 3, \'c\': 3, \'m\': 3, \'p\': 3, \'f\': 4, \'h\': 4, \'v\': 4, \'w\': 4, \'y\': 4, \'k\': 5, \'j\': 8, \'x\': 8, \'q\': 10, \'z\': 10 } word = word.lower() score = 0 for letter in word: score += letter_values.get(letter, 0) return score"},{"question":"Three friends are sharing a cake for a party. The cake is a perfect circle and each friend likes a specific segment of the cake that starts from the center and extends to the edge. The segments are defined by angles a, b, and c degrees (in counterclockwise direction from the center). Each friend will only take her specific segment and leave the rest. Determine if it is possible for all three friends to get their desired segments without any overlapping. -----Constraints----- - 1 ≦ a, b, c ≦ 360 -----Input----- The input is given from Standard Input in the following format: a b c -----Output----- If it is possible for them to take the segments without overlapping, print Yes. Otherwise, print No. -----Sample Input----- 90 90 180 -----Sample Output----- Yes All three segments can fit perfectly within the 360-degree circle without any overlap. Each friend\'s segment can be placed adjacently in the circle.","solution":"def can_share_cake(a, b, c): Checks if three friends can share a cake with segments of angles a, b, and c degrees without overlapping. if a + b + c == 360: return \\"Yes\\" else: return \\"No\\""},{"question":"Problem You are a software engineer working for a fintech start-up. You are tasked with implementing a simplified banking system for managing accounts and carrying out transactions. Each account has a unique account number and a balance. Your system should be able to handle the following types of queries: - **CREATE X Y**: Create a new account with account number X and an initial balance of Y. If an account with account number X already exists, the operation should be ignored. - **DEPOSIT X Y**: Deposit amount Y into the account with account number X. If no such account exists, the operation should be ignored. - **WITHDRAW X Y**: Withdraw amount Y from the account with account number X. If the account has insufficient funds or does not exist, the operation should be ignored. - **BALANCE X**: Print the current balance of the account with account number X. If no such account exists, print \\"ACCOUNT NOT FOUND\\". - **TRANSFER X Y Z**: Transfer amount Z from the account with account number X to the account with account number Y. If either account does not exist or account X has insufficient funds, the operation should be ignored. Input The input begins with an integer Q representing the number of queries. The next Q lines contain one of the above queries. Constraints - 1 ≤ Q ≤ 100000 - All account numbers and amounts are non-negative integers. - Account numbers are less than or equal to 1000000. - Amounts are less than or equal to 1000000. Output For each \\"BALANCE\\" query, print the current balance of the specified account. If the account does not exist, print \\"ACCOUNT NOT FOUND\\". Examples Input 7 CREATE 1001 500 DEPOSIT 1001 200 CREATE 1002 300 WITHDRAW 1001 100 TRANSFER 1001 1002 200 BALANCE 1001 BALANCE 1002 Output 400 500 Input 6 CREATE 2000 1000 WITHDRAW 2000 500 DEPOSIT 2000 1500 TRANSFER 2000 3000 700 BALANCE 2000 BALANCE 3000 Output 1300 ACCOUNT NOT FOUND","solution":"class BankSystem: def __init__(self): self.accounts = {} def create(self, account_number, initial_balance): if account_number not in self.accounts: self.accounts[account_number] = initial_balance def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number] += amount def withdraw(self, account_number, amount): if account_number in self.accounts and self.accounts[account_number] >= amount: self.accounts[account_number] -= amount def balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number] else: return \\"ACCOUNT NOT FOUND\\" def transfer(self, from_account, to_account, amount): if from_account in self.accounts and to_account in self.accounts: if self.accounts[from_account] >= amount: self.accounts[from_account] -= amount self.accounts[to_account] += amount def process_queries(queries): bank_system = BankSystem() results = [] for query in queries: parts = query.split() operation = parts[0] if operation == \\"CREATE\\": account_number = int(parts[1]) initial_balance = int(parts[2]) bank_system.create(account_number, initial_balance) elif operation == \\"DEPOSIT\\": account_number = int(parts[1]) amount = int(parts[2]) bank_system.deposit(account_number, amount) elif operation == \\"WITHDRAW\\": account_number = int(parts[1]) amount = int(parts[2]) bank_system.withdraw(account_number, amount) elif operation == \\"BALANCE\\": account_number = int(parts[1]) balance = bank_system.balance(account_number) results.append(balance) elif operation == \\"TRANSFER\\": from_account = int(parts[1]) to_account = int(parts[2]) amount = int(parts[3]) bank_system.transfer(from_account, to_account, amount) return results"},{"question":"You have been given the coordinates of N points in a 2-dimensional plane and an integer K. You are tasked with finding out if there exists a straight line that passes through at least K of these points. A straight line in the form `Ax + By = C` can be determined using any two distinct points `(x1, y1)` and `(x2, y2)` on the plane. Write a function `line_through_k_points(n: int, k: int, points: List[Tuple[int, int]]) -> bool` that returns `True` if such a line exists, otherwise returns `False`. # Input - An integer N (1 ≤ N ≤ 200), the number of points. - An integer K (2 ≤ K ≤ N), the minimum number of points that must lie on the same straight line. - A list of N tuples, each containing two integers (x, y) representing the coordinates of a point, where the coordinates are in the range of -10^6 to 10^6. # Output - Return `True` if there exists a line that passes through at least K of the points. - Return `False` otherwise. # Example Input: ``` 5 3 (1, 1) (2, 2) (3, 3) (1, 2) (2, 3) ``` Output: ``` True ``` # Explanation: The points (1, 1), (2, 2), and (3, 3) are collinear, thus there is a line that passes through at least 3 points. # Additional Information: - The points may not be unique, meaning there may be duplicate points. - Consider using combinations or hashing techniques to determine the lines formed by point pairs, and count how many points lie on each unique line.","solution":"from typing import List, Tuple from collections import defaultdict from math import gcd def line_through_k_points(n: int, k: int, points: List[Tuple[int, int]]) -> bool: def get_normalized_line(p1, p2): # Calculate A, B, C for line equation Ax + By = C x1, y1 = p1 x2, y2 = p2 A = y2 - y1 B = x1 - x2 C = A * x1 + B * y1 gcd_AB = gcd(A, B) gcd_ABC = gcd(gcd_AB, C) # Normalize by greatest common divisor to avoid different representations of the same line A //= gcd_ABC B //= gcd_ABC C //= gcd_ABC # Ensure normalization consistency if A < 0 or (A == 0 and B < 0): A *= -1 B *= -1 C *= -1 return (A, B, C) if k == 1: return True line_count = defaultdict(set) for i in range(n): for j in range(i + 1, n): line = get_normalized_line(points[i], points[j]) line_count[line].add(points[i]) line_count[line].add(points[j]) for line in line_count: if len(line_count[line]) >= k: return True return False"},{"question":"You are given a sequence of `n` integers, where each element may be duplicated, and you need to find the length of the longest contiguous subarray where all elements are distinct. Write a program to solve this problem. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the sequence. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Output: - Output a single integer — the length of the longest contiguous subarray with distinct elements. Example: Input: ``` 5 1 2 1 3 2 ``` Output: ``` 3 ``` Explanation: In the example, the longest contiguous subarray with distinct elements is `[2, 1, 3]`, which has a length of 3. Another valid subarray could be `[1, 3, 2]`. Note: Your solution should be efficient, ideally with a time complexity of O(n).","solution":"def longest_contiguous_distinct_subarray(n, arr): Returns the length of the longest contiguous subarray where all elements are distinct. if n == 0: return 0 seen = {} start = 0 max_length = 0 for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Mira is organizing a charity event where a number of items are to be offered at an auction. Each item has a specific value assigned to it and participants can bid on the items with the goal of obtaining the highest value collection of items without exceeding a given budget. Mira knows the values of all the items and has a budget limit. She wants to determine the maximum total value of items she can collect without exceeding her budget. INPUT The first line contains an integer N, the number of items. The second line contains N positive integers, V[1], V[2], ..., V[N] where V[i] represents the value of the i-th item. The third line contains an integer B, the budget limit. OUTPUT In a single line, output the maximum total value of items that can be collected without exceeding the budget. CONSTRAINTS 1 ≤ N ≤ 1000 1 ≤ V[i] ≤ 1000 1 ≤ B ≤ 10000 SAMPLE INPUT 5 2 2 4 5 1 10 SAMPLE OUTPUT 10","solution":"def max_value_under_budget(n, values, budget): :param n: int - the number of items :param values: List[int] - the values of the items :param budget: int - the budget limit :return: int - the maximum total value of items that can be collected without exceeding the budget # Using a DP approach, similar to the 0/1 Knapsack problem dp = [0] * (budget + 1) for value in values: for b in range(budget, value - 1, -1): dp[b] = max(dp[b], dp[b - value] + value) return dp[budget]"},{"question":"Write a function that takes a list of integers and returns a new list where all the prime numbers are moved to the front, and the non-prime numbers are moved to the back, preserving their original order within their respective groups. Examples ```python For the input list: [10, 3, 4, 7, 6, 11, 13, 15] Output should be: [3, 7, 11, 13, 10, 4, 6, 15] For the input list: [1, 2, 3, 5, 8, 9, 10] Output should be: [2, 3, 5, 1, 8, 9, 10] For the input list: [4, 6, 8, 10, 12] Output should be: [4, 6, 8, 10, 12] For the input list: [2, 2, 2, 3, 3, 3] Output should be: [2, 2, 2, 3, 3, 3] ``` Note: The solution should efficiently handle large input lists.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def move_primes_to_front(nums): Returns a new list where all the prime numbers are at the front and non-prime numbers at the back. primes = [num for num in nums if is_prime(num)] non_primes = [num for num in nums if not is_prime(num)] return primes + non_primes"},{"question":"A \\"permuted multiple\\" of a number is another number that contains the same digits but in a different order. For example, `142857` is a permuted multiple of `285714` since both numbers contain the same digits. Write a function named `find_permuted_multiple` that takes an integer input `n` and finds the smallest positive integer `x` such that `2x, 3x, 4x, 5x, and 6x` are all permuted multiples of `x`. The value of `x` should be equal to or greater than `n`. # Example ```python find_permuted_multiple(1) # returns 142857 find_permuted_multiple(100000) # returns 142857 find_permuted_multiple(142000) # returns 142857 ``` # Constraints - The input `n` is a positive integer. - The function should be efficient enough to handle large values of `n` up to `1000000`. # Hints - Consider the number of digits and the properties of permutations in solving the problem. - It\'s advisable to check if `2x, 3x, 4x, 5x, 6x` are permuted multiples rather than generating permutations of a number.","solution":"def is_permuted_multiple(x, k): Check if k * x is a permuted multiple of x. return sorted(str(x)) == sorted(str(k * x)) def find_permuted_multiple(n): Finds the smallest integer x such that 2x, 3x, 4x, 5x, and 6x are all permuted multiples of x. The value of x should be greater than or equal to n. x = n while True: if all(is_permuted_multiple(x, k) for k in range(2, 7)): return x x += 1"},{"question":"# Task **_Given_** a **_string s_** and a **_character c_**, *Find the leftmost occurrence of the character c in the string s* , such that: # Conditions : * The search should be case-insensitive. * The character should match exactly. ___ # Notes * The **_parameters (s, c)_** passed to the function are *only valid strings and characters*. * It\'s guaranteed that the character will be present in the string. ___ # Input >> Output Examples ``` leftmost_occurrence(\\"hello\\", \'l\') ==> return (2) ``` Explanation: **_(2)_** is the leftmost occurrence of the character **_‘l’_** in the string **_\\"hello\\"_** . ___ ``` leftmost_occurrence(\\"Programming\\", \'G\') ==> return (3) ``` Explanation: The search is case-insensitive, so **_(3)_** is the leftmost occurrence of the character **_‘G’_** (or **_‘g’_**) in the string **_\\"Programming\\"_** . ___ ``` leftmost_occurrence(\\"OpenAI\\", \'a\') ==> return (4) ``` Explanation: The search is case-insensitive, so **_(4)_** is the leftmost occurrence of the character **_‘a’_** (or **_‘A’_**) in the string **_\\"OpenAI\\"_** . ___ ___","solution":"def leftmost_occurrence(s, c): Finds the leftmost occurrence of the character c in the string s. The search is case-insensitive. :param s: str :param c: str :return: int s_lower = s.lower() c_lower = c.lower() return s_lower.find(c_lower)"},{"question":"You are given four integers, X, Y, Z, and W, which represent the coordinates of two points (X, Y) and (Z, W) in a 2D plane. Your task is to determine the Manhattan distance between these two points. The Manhattan distance between two points (x1, y1) and (x2, y2) is calculated as |x1 - x2| + |y1 - y2|. -----Constraints----- - -1000 leq X, Y, Z, W leq 1000 - X, Y, Z, and W are all integers. -----Input----- Input is given from Standard Input in the following format: X Y Z W -----Output----- Print the Manhattan distance between the given points (X, Y) and (Z, W). -----Sample Input----- 3 4 1 2 -----Sample Output----- 4 In this case, the Manhattan distance is |3 - 1| + |4 - 2| = 2 + 2 = 4.","solution":"def manhattan_distance(X, Y, Z, W): Returns the Manhattan distance between two points (X, Y) and (Z, W). return abs(X - Z) + abs(Y - W)"},{"question":"Sam is an avid collector of rare items and he loves to catalog them based on their uniqueness. To manage his collection efficiently, he decided to group similar items together based on a unique attribute value each item possesses. Given two lists, one containing item IDs and the other containing their corresponding attribute values, help Sam find out the number of groups that can be formed where each group can have items with the same unique attribute value. Your task is to write a program that determines how many such groups exist. INPUT First line contains number of test cases T. Each test case contains two components: 1. An integer N denoting the number of items. 2. Two lists: the first list contains N integers representing item IDs and the second list contains N integers representing the attribute values. OUTPUT For each test case, print the number of groups that can be formed where each group consists of items with the same unique attribute value. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Item ID, Attribute Value ≤ 1000000 SAMPLE INPUT 2 5 101 102 103 104 105 30 40 30 50 40 6 201 202 203 204 205 206 10 20 10 20 30 40 SAMPLE OUTPUT 3 4","solution":"def find_number_of_groups(T, test_cases): Determines the number of groups of items based on unique attribute values. Args: T: int, number of test cases. test_cases: list of tuples, each containing: - N: int, number of items. - item_ids: list of N integers, item IDs. - attribute_values: list of N integers, attribute values corresponding to item IDs. Returns: list of integers, each representing the number of unique attribute value groups per test case. results = [] for i in range(T): _, item_ids, attribute_values = test_cases[i] unique_groups = len(set(attribute_values)) results.append(unique_groups) return results"},{"question":"# Description Write a function that takes as input a non-negative integer `n` and returns the sum of its digits raised to the power of the number of digits. If the number has 3 digits, each digit should be raised to the power of 3 and then summed together. Finally, the function should return `True` if this sum is equal to the original number, and `False` otherwise. Example ``` 153 -> True (1^3 + 5^3 + 3^3 == 153) 9474 -> True (9^4 + 4^4 + 7^4 + 4^4 == 9474) 10 -> False (1^2 + 0^2 == 1) ```","solution":"def is_armstrong_number(n): Checks if a given number \'n\' is an Armstrong number. Args: n (int): A non-negative integer. Returns: bool: True if \'n\' is an Armstrong number, otherwise False. digits = [int(digit) for digit in str(n)] num_digits = len(digits) sum_of_powers = sum(digit ** num_digits for digit in digits) return sum_of_powers == n"},{"question":"You are given an integer array a of length n and an integer k. You need to answer m queries. Each query consists of two integers l and r (1 le l le r le n). For each query, you are required to find the number of distinct integers in the subarray a[l..r] that are strictly greater than or equal to k. -----Input----- The first line contains three integer numbers n, m and k (1 le n, m le 10^5, -10^9 le k le 10^9) — the length of array a, the number of queries, and the integer k, respectively. The second line contains n integers a_i (-10^9 le a_i le 10^9) — the elements of the array a. Each of the next m lines contains two integer numbers l_i and r_i (1 le l_i le r_i le n) — the arguments for the i-th query. -----Output----- Print m lines — the i-th line should contain the answer to the i-th query, that is the number of distinct integers in the subarray a[l_i..r_i] that are greater than or equal to k. -----Examples----- Input 8 3 5 1 3 5 5 7 8 5 10 1 5 2 7 4 8 Output 2 3 4 Input 5 2 1 1 1 1 1 1 1 3 2 5 Output 1 1 Input 7 1 0 -5 0 2 3 -2 1 4 1 7 Output 5 -----Note----- In the first example, the queries are the subarrays: [1, 3, 5, 5, 7], [3, 5, 5, 7, 8, 5], and [5, 7, 8, 5, 10], respectively. For the first query, the integers greater than or equal to 5 are {5, 7}, so the answer is 2. For the second query, the integers greater than or equal to 5 are {5, 7, 8}, so the answer is 3. For the third query, the integers greater than or equal to 5 are {5, 7, 8, 10}, so the answer is 4.","solution":"def distinct_integers_count(n, m, k, a, queries): results = [] for query in queries: l, r = query distinct_set = set() for i in range(l-1, r): # l and r are 1-based, converting to 0-based if a[i] >= k: distinct_set.add(a[i]) results.append(len(distinct_set)) return results"},{"question":"You are given a grid with dimensions n times m filled with lowercase letters. A word is *visible* in the grid if it exists as a contiguous sequence of letters that can be read either horizontally (left to right) or vertically (top to bottom). Given such a grid and a list of queries, each query containing a word, determine if each word is visible in the grid. ------ Input ------ The first line of the input contains two integers n and m denoting the dimensions of the grid. The next n lines contain m characters each, representing the grid. The following line contains a single integer q denoting the number of queries. The next q lines contain one word each. ------ Output ------ For each query, print the string \\"yes\\" if the word is visible in the grid or \\"no\\" otherwise. ------ Constraints ------ 1 ≤ n, m ≤ 1000 2 ≤ |word| ≤ max(n, m) 1 ≤ q ≤ 10^5 All words in the queries consist of lowercase English letters. ----- Sample Input 1 ------ 4 4 abcd efgh ijkl mnop 3 abcd fj hse ----- Sample Output 1 ------ yes yes no ----- explanation 1 ------ Example case 1: The word \\"abcd\\" is visible horizontally on the first row. Example case 2: The word \\"fj\\" is visible vertically starting from the second row and first column. Example case 3: The word \\"hse\\" is not visible in the grid either horizontally or vertically.","solution":"def is_word_visible(grid, n, m, word): word_len = len(word) # Check horizontally for row in grid: if word in row: return True # Check vertically for col in range(m): col_str = \'\'.join(grid[row][col] for row in range(n)) if word in col_str: return True return False def word_visibility(grid, queries): n = len(grid) m = len(grid[0]) results = [] for word in queries: if is_word_visible(grid, n, m, word): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Emily is an intern in a tech company. She has just started learning about sorting algorithms. One day, her mentor gave her an interesting task to test her understanding of sorting and arrays. She needs to find the k-th smallest element in an unsorted array. -----Input----- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n), indicating the size of the array and the position of the smallest element she needs to find, respectively. The second line contains integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the elements of the array. -----Output----- Print a single integer — the k-th smallest element in the array. -----Examples----- Input 5 2 3 1 5 2 4 Output 2 Input 7 5 10 40 20 30 50 60 70 Output 50","solution":"def kth_smallest_element(n, k, arr): Returns the k-th smallest element in the array. arr.sort() return arr[k-1]"},{"question":"A software company requires you to write a function to balance the work distribution among its employees. Each employee is assigned a number of tasks represented by an array b of positive integers where b_i is the number of tasks assigned to the i-th employee. Your goal is to make the workload as equal as possible by performing a series of operations. In one operation, you can choose two employees i and j (1 leq i, j leq m, i neq j), and redistribute their tasks such that the total number of tasks between them remains the same, but their individual workloads get closer to each other. Formally, if the tasks of the two employees before the operation are b_i and b_j respectively, this operation will change them to lceilfrac{b_i + b_j}{2}rceil and lfloorfrac{b_i + b_j}{2}rfloor. What is the minimum possible maximum workload of any employee after performing the optimal number of operations? -----Input----- The first line contains the number of test cases t (1 le t le 100). The description of the test cases follows. The first line of each test case contains an integer m (1 leq m leq 10^5) — the number of employees. The second line of each test case contains m integers b_{1}, b_{2}, dots, b_{m} (1 leq b_{i} leq 10^9) — the initial number of tasks assigned to each employee. The sum of m over all test cases will not exceed 10^5. -----Output----- For each test case, print one integer: the minimum possible maximum workload of any employee after performing the optimal number of operations. -----Example----- Input 2 3 2 6 4 2 5 9 Output 4 7 -----Note----- In the first test case, you can do the following to achieve the minimum maximum workload of 4: - Choose employees 1 and 3 (tasks: 2 and 4) to get [3, 6, 3] - Choose employees 2 and 3 (tasks: 6 and 3) to get [3, 4, 5] - Choose employees 1 and 2 (tasks: 3 and 4) to get [4, 4, 4] In the second test case, you can do the following: - Choose employees 1 and 2 (tasks: 5 and 9) to get [7, 7]","solution":"def min_max_workload(test_cases): import math results = [] for t in test_cases: m = t[0] b = t[1] avg = math.ceil(sum(b) / m) # Calculate the ceiling average of workloads results.append(avg) # This would be the minimum possible maximum workload. return results"},{"question":"Polycarpus is taking a walk in a park that is represented as a grid with n rows and m columns. Some cells in the grid have obstacles, while some cells are empty. Polycarpus can only walk in the four cardinal directions (up, down, left, right), and he cannot walk through obstacles. Given a starting position (sx, sy) and a destination position (dx, dy) in the grid, determine whether Polycarpus can reach the destination from the starting position. The grid is provided as a list of strings, where each string represents a row of the grid, and each character in the string is either \'.\' representing an empty cell or \'#\' representing an obstacle. If Polycarpus can reach the destination, output \\"YES\\". Otherwise, output \\"NO\\". Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns of the grid. The next n lines contain strings of length m, representing the grid. The last line contains four space-separated integers sx, sy, dx, dy (1 ≤ sx, sy, dx, dy ≤ 100), representing the starting and destination positions. Output Output \\"YES\\" if Polycarpus can reach the destination. Otherwise, output \\"NO\\". Examples Input 5 5 ..... ..#.. ..#.. ..... ..... 1 1 5 5 Output YES Input 3 3 .#. # ..# 1 1 3 3 Output NO","solution":"def can_reach_destination(n, m, grid, sx, sy, dx, dy): from collections import deque # Adjust coordinates to 0-based index sx, sy, dx, dy = sx - 1, sy - 1, dx - 1, dy - 1 # Directions for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy)]) visited = set() visited.add((sx, sy)) # BFS to find path from (sx, sy) to (dx, dy) while queue: x, y = queue.popleft() # If we reach the destination if (x, y) == (dx, dy): return \\"YES\\" # Explore the four directions for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Implement a function to invert a given binary tree. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. The function `invertTree` should take one parameter: - `root`: the root node of the binary tree. The function should invert the binary tree, meaning all the left and right children of all nodes should be swapped. For example, given the following binary tree: ``` 4 / 2 7 / / 1 3 6 9 ``` The inverted tree will be: ``` 4 / 7 2 / / 9 6 3 1 ``` The function signature will be: ```python def invertTree(root: Optional[TreeNode]) -> Optional[TreeNode]: ``` Where `TreeNode` is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` You may assume the binary tree is valid and may consist of multiple nodes or be an empty tree (i.e., `root` is `None`). The function should return the root node of the inverted binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invertTree(root: TreeNode) -> TreeNode: Inverts a binary tree by swapping the left and right children of each node. :param root: TreeNode, the root of the binary tree to be inverted :return: TreeNode, the root of the inverted binary tree if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively invert the left and right subtrees invertTree(root.left) invertTree(root.right) return root"},{"question":"You are given a list of `n` words and a target word. Your task is to find the word from the list that can be rearranged (anagrammed) to form the target word. If there are multiple words in the list that can be rearranged to form the target, return the one that appears first lexicographically. If no such word exists, return \\"-1\\". -----Input----- The input begins with a single integer `n` (1 ≤ n ≤ 100) which indicates the number of words in the list. The next `n` lines contain one word per line. The last line contains the target word. All words will consist of between 1 and 100 lowercase letters only. -----Output----- Output exactly one line. The line should contain the result word if found. If no anagram is found, output \\"-1\\". -----Examples----- Sample Input 1: 4 listen enlist google banana silent Sample Output 1: enlist Sample Input 2: 3 rat cat bat tab Sample Output 2: bat Sample Input 3: 2 hello world python Sample Output 3: -1","solution":"def find_anagram_word(n, words, target): Finds the word from a list that can be rearranged (anagrammed) to form the target word. If multiple words can be anagrammed to form the target, it returns the one that appears first lexicographically. If no such word exists, returns \\"-1\\". :param n: int, number of words in the list :param words: list of str, the list of words :param target: str, the target word to form :return: str, the word that can be rearranged to form the target or \\"-1\\" if no such word exists # Sort the target word to easily compare sorted_target = \\"\\".join(sorted(target)) # List to store anagram matches anagram_matches = [] for word in words: # Sort the word to compare if \\"\\".join(sorted(word)) == sorted_target: anagram_matches.append(word) # If no anagram is found, return \\"-1\\" if not anagram_matches: return \\"-1\\" # Return the first word lexicographically return min(anagram_matches)"},{"question":"You are given an array a consisting of n integers. In one move, you can choose any subarray of a and reverse the order of its elements. You can perform such moves any number of times (possibly, zero). Your task is to check if it is possible to obtain a non-decreasing array (an array where each element is not less than the one before it). You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. The next 2t lines describe the test cases. The first line contains one integer n (1 le n le 1000) — the number of elements in the array a. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000), where a_i is the i-th element of the array. It is guaranteed that the sum of n over all test cases does not exceed 1000 (sum n le 1000). -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to obtain a non-decreasing array using the described moves, otherwise print \\"NO\\". -----Example----- Input 3 3 3 1 2 4 4 3 2 1 5 1 2 3 4 5 Output YES YES YES","solution":"def can_be_sorted(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] if a == sorted(a): results.append(\\"YES\\") else: results.append(\\"YES\\") return results # Example input processing function def process_input(input_lines): t = int(input_lines[0]) test_cases = [] current_line = 1 for _ in range(t): n = int(input_lines[current_line]) a = list(map(int, input_lines[current_line + 1].split())) test_cases.append((n, a)) current_line += 2 return t, test_cases # Example function that can be used for the complete input-output process def main(input_lines): t, test_cases = process_input(input_lines) return can_be_sorted(t, test_cases)"},{"question":"Create a function `mostFrequentWords(text, k)` that takes a string `text` and an integer `k`, and returns a list of the `k` most frequent words in `text`. The words in the return list should be in descending order of frequency, and in case of a tie, they should appear in lexicographical order. **Here are the rules to follow**: 1. Words are case insensitive, i.e., \\"Word\\" and \\"word\\" are considered the same. 2. Punctuation marks should be ignored when considering word boundaries. 3. The function should be optimized to handle large texts efficiently. **Examples**: ```python mostFrequentWords(\\"The cat in the hat. The cat likes the hat!\\", 2) # -> [\'the\', \'cat\'] mostFrequentWords(\\"It was the best of times, it was the worst of times.\\", 3) # -> [\'times\', \'it\', \'of\'] mostFrequentWords(\\"Hello world! Hello universe. World says hello.\\", 1) # -> [\'hello\'] ```","solution":"from collections import Counter import re def mostFrequentWords(text, k): Returns the k most frequent words in the given text. The words are case insensitive, and punctuation is ignored. # Normalize the text by converting to lower case and removing punctuation text = text.lower() words = re.findall(r\'bw+b\', text) # Count the frequency of each word word_counts = Counter(words) # Sort the words by frequency and then lexicographically sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Extract the top k words return [word for word, count in sorted_words[:k]]"},{"question":"Given a list of unique integers and a target integer, determine if there are three distinct numbers in the list that add up to the target integer. Print `Yes` if such a triplet exists, and `No` otherwise. Constraints * The length of the list is between 3 and 100 (inclusive). * All integers in the list are between -1000 and 1000 (inclusive). * The target integer is between -3000 and 3000 (inclusive). Input Input is given from Standard Input in the following format: n a1 a2 a3 ... an target where `n` is the number of integers in the list, followed by the `n` integers, and then the target integer. Output Print `Yes` if there are three distinct numbers in the list that add up to the target. Otherwise, print `No`. Examples Input 5 1 2 3 4 5 9 Output Yes Input 4 10 20 30 40 100 Output No Input 6 -1 0 1 2 -1 -4 0 Output Yes Input 3 -5 9 1 6 Output No","solution":"def has_triplet_sum(nums, target): Determines if there are three distinct numbers in the list that add up to the target integer. Returns \'Yes\' if such a triplet exists, and \'No\' otherwise. Args: nums : List[int] - list of integers. target : int - target integer. Returns: str - \'Yes\' or \'No\'. nums.sort() n = len(nums) for i in range(n): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return \\"Yes\\" elif current_sum < target: left += 1 else: right -= 1 return \\"No\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) target = int(data[n+1]) print(has_triplet_sum(nums, target))"},{"question":"Luna is organizing a concert and has hired a band with n members. Each member can play one or multiple musical instruments, represented by an integer a_i (number of instruments). However, the concert venue has a peculiar rule: No two band members can play the same number of instruments. If two members end up playing the same number of instruments, they create disharmony. Help Luna determine if she can assign musical instruments to each member such that no two members play the same number of instruments. If possible, output any one such assignment. Formally, rearrange the array a such that all values are distinct. If it\'s not possible, output \\"NO\\". -----Input----- The first line of the input contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer n (1 le n le 100) — the number of members in the band. The second line of each test case contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 100) — the number of instruments each band member can play. The total number of instruments is guaranteed to be at least n. -----Output----- For each test case, if Luna can assign the instruments such that no two members play the same number of instruments, print \\"YES\\" followed by the modified array a. If not, print \\"NO\\". If there are multiple solutions, output any. -----Examples----- Input 3 4 1 2 2 4 3 5 5 5 5 1 3 2 5 4 Output YES 1 2 3 4 NO YES 1 3 2 5 4 -----Note----- In the first test case, Luna can rearrange the instruments such that each member ends up playing a different number of instruments: [1, 2, 3, 4]. In the second test case, all three members intend to play 5 instruments, which is not possible to change uniquely given the constraints. In the third test case, each band member can already play a distinct number of instruments, so no changes are needed.","solution":"def can_assign_instruments(test_cases): results = [] for case in test_cases: n, instruments = case instruments.sort() for i in range(1, n): if instruments[i] == instruments[i - 1]: instruments[i] += 1 if len(set(instruments)) == n: results.append(f\\"YES {\' \'.join(map(str, instruments))}\\") else: results.append(\\"NO\\") return results"},{"question":"You\'ve been given a list of integers. Each integer can represent a letter of the alphabet, where 1 corresponds to \'A\', 2 corresponds to \'B\', up to 26 corresponding to \'Z\'. Your task is to determine how many different ways you can decode the given string into a sequence of letters. For example, the string \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12), thus having 2 different decodings. Given a string of digits, return the total number of ways to decode it. ---Input--- The first line contains an integer t (1 <= t <= 1000), the number of test cases. Each test case consists of a single input line which is a string of digits (1 <= length of string <= 50). ---Output--- For each test case, print a single integer, the total number of ways to decode the string. ---Example--- Input 4 12 226 0 2101 Output 2 3 0 1 ---Note--- The first test case was explained in the statement. In the second test case, the string \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6) and \\"BBF\\" (2 2 6), yielding 3 possible decodings. In the third test case, \\"0\\" does not map to any letter, therefore it is not decodable. In the fourth test case, \\"2101\\" can only be decoded as \\"UAA\\" (21 01 can\'t be used, 01 is invalid), yielding 1 possible decoding.","solution":"def num_decodings(s): if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = dp[1] = 1 for i in range(2, n + 1): one_digit = int(s[i-1:i]) two_digits = int(s[i-2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i-1] if 10 <= two_digits <= 26: dp[i] += dp[i-2] return dp[n] def decode_ways(t, test_cases): results = [] for case in test_cases: results.append(num_decodings(case)) return results"},{"question":"Alice has recently learned about the concept of \\"bitwise AND\\" and is excited to apply it to solve some challenges. She has an array `a` of `n` integers `a0, a1, ..., an-1`. She also has an integer `k`. Alice is curious to know what is the minimum bitwise AND value that can be obtained by considering any contiguous subarray of length exactly `k`. Given the array `a` and the integer `k`, help Alice find the minimum bitwise AND value among all possible contiguous subarrays of length `k`. The bitwise AND of a subarray [ai, ai+1, ..., ai+k-1] is defined as `ai AND ai+1 AND ... AND ai+k-1`. -----Input----- The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n) — the number of elements in the array and the length of the subarray respectively. The second line contains `n` space-separated integers `a0, a1, ..., an-1` (0 ≤ ai ≤ 10^6) — the elements of the array a. -----Output----- Print a single integer — the minimum bitwise AND value among all contiguous subarrays of length `k`. -----Examples----- Input 4 2 1 2 3 4 Output 0 Input 3 2 5 5 5 Output 5 Input 5 3 6 7 8 9 10 Output 0 -----Note----- In the first test case, the contiguous subarrays of length 2 are: - [1, 2] with bitwise AND = 1 AND 2 = 0 - [2, 3] with bitwise AND = 2 AND 3 = 2 - [3, 4] with bitwise AND = 3 AND 4 = 0 The minimum bitwise AND value among these subarrays is 0. In the second test case, the only contiguous subarrays of length 2 is: - [5, 5] with bitwise AND = 5 AND 5 = 5 The minimum bitwise AND value among this subarray is 5. In the third test case, the contiguous subarrays of length 3 are: - [6, 7, 8] with bitwise AND = 6 AND 7 AND 8 = 0 - [7, 8, 9] with bitwise AND = 7 AND 8 AND 9 = 0 - [8, 9, 10] with bitwise AND = 8 AND 9 AND 10 = 0 The minimum bitwise AND value among these subarrays is 0.","solution":"def min_bitwise_and_subarray(n, k, a): min_and = float(\'inf\') for i in range(n - k + 1): current_and = a[i] for j in range(1, k): current_and &= a[i + j] if current_and < min_and: min_and = current_and return min_and"},{"question":"=====Function Descriptions===== linspace The linspace tool returns evenly spaced numbers over a specified interval. import numpy print numpy.linspace(2.0, 3.0, num=5) #Output [ 2. 2.25 2.5 2.75 3. ] Furthermore, you can also specify a boolean parameter endpoint. If True, the stop value is included. If False, it is not included. The default value of endpoint is True. import numpy print numpy.linspace(2.0, 3.0, num=5, endpoint=False) #Output [ 2. 2.2 2.4 2.6 2.8] repeats The repeats tool allows repeated values. import numpy print numpy.repeat(3, 4) #Output [3 3 3 3] Using the repeats tool, you can repeat the values along different axes. import numpy print numpy.repeat([1, 2, 3], 2) #Output [1 1 2 2 3 3] =====Problem Statement===== Your task is to generate a list of size N containing evenly spaced values between a start and end value. From this list, create a new array where each element in the original list is repeated K times and return this array. =====Input Format===== A single line containing four space-separated values: start end num K start denotes the start value of the interval. end denotes the end value of the interval. num denotes the number of evenly spaced values. K denotes the number of times each value should be repeated. =====Output Format===== Print the resultant array. =====Sample Input===== 2.0 3.0 5 2 =====Sample Output===== [2. 2. 2.25 2.25 2.5 2.5 2.75 2.75 3. 3. ]","solution":"import numpy as np def generate_repeated_linspace(start, end, num, K): Generates a list of size N containing evenly spaced values between a start and end value. From this list, creates a new array where each element in the original list is repeated K times. Parameters: start (float): The start value of the interval. end (float): The end value of the interval. num (int): The number of evenly spaced values. K (int): The number of times each value should be repeated. Returns: numpy.ndarray: The resultant array where each evenly spaced value is repeated K times. linspace_values = np.linspace(start, end, num) repeated_values = np.repeat(linspace_values, K) return repeated_values"},{"question":"You are given a matrix of integers with n rows and m columns. Determine the sum of the matrix elements that are greater than a given threshold value k. If no elements exceed the threshold, output 0. Input The first input line contains three integers n, m, and k (1 ≤ n, m ≤ 100; -1000 ≤ k ≤ 1000) — the dimensions of the matrix and the threshold value. The next n lines contain m integers each, representing the matrix elements. Each element of the matrix is an integer between -1000 and 1000. Output Print the sum of the elements greater than the threshold value k. If no such elements exist, print 0. Examples Input 3 3 5 1 6 3 7 2 8 -1 9 0 Output 30 Input 2 2 -3 -4 -2 -5 -1 Output -2 Note In the first sample, the elements greater than 5 are 6, 7, 8, and 9. Their sum is 6 + 7 + 8 + 9 = 30. In the second sample, the elements greater than -3 are -2 and -1. Their sum is -2 + (-1) = -3.","solution":"def sum_of_elements_greater_than_threshold(matrix, k): Given a matrix of integers, return the sum of elements greater than a given threshold k. If no elements exceed the threshold, return 0. total_sum = 0 for row in matrix: for element in row: if element > k: total_sum += element return total_sum"},{"question":"In a prestigious programming tournament, teams compete against each other to solve complex problems. Each team is given a certain number of problems to solve within a limited duration. Points are awarded based on the difficulty levels of the problems, and the team with the highest points at the end of the tournament wins. The scoring system works as follows: - For each solving attempt, the team gains points equal to the difficulty level of the problem solved correctly. - If a team tries to solve a problem and fails, they lose half the points of the difficulty level (rounded down). - Each team can attempt to solve each problem multiple times until they succeed or the tournament ends. Your task is to determine the maximum score a team can achieve by the end of the tournament if they use the most optimal strategy. Input Format The first line contains an integer n, the number of problems. The second line contains n integers, where the i-th integer represents the difficulty level of the i-th problem. Output Format Print an integer representing the maximum score the team can achieve. Input Constraints 1 ≤ n ≤ 100 1 ≤ difficulty level ≤ 1000 SAMPLE INPUT 3 4 7 2 SAMPLE OUTPUT 13 Explanation: The team solves the first problem with a difficulty of 4 on the first attempt (4 points) and then solves the second problem with a difficulty of 7 on the first attempt (7 points), and finally solves the third problem with a difficulty of 2 on the first attempt (2 points). The total points are 4 + 7 + 2 = 13.","solution":"def max_score(n, difficulties): Returns the maximum score a team can achieve by solving all problems correctly on first attempt. return sum(difficulties)"},{"question":"You are given a 2D grid initialized with zeros. There are two possible updates: 1. Increment all values in a specified row by a given integer. 2. Increment all values in a specified column by a given integer. After performing a series of updates, determine the maximum value in the grid. Input The input consists of an integer n (the size of the grid, 1 ≤ n ≤ 100), an integer m (the number of updates, 1 ≤ m ≤ 1000), followed by m lines each containing three integers: - The type of update `t` (1 for a row update, 2 for a column update), - The index `x` (the index of the row or column to be updated, 0 ≤ x < n), - and the increment value `v` (an integer which can be negative or positive). Output Output a single integer: the maximum value in the grid after all updates are performed. Example Input 3 4 1 0 2 2 1 3 1 2 -1 2 0 4 Output 7 Explanation: - Initially, the grid is: ``` 0 0 0 0 0 0 0 0 0 ``` - After the first update (increment all values in row 0 by 2), the grid becomes: ``` 2 2 2 0 0 0 0 0 0 ``` - After the second update (increment all values in column 1 by 3), the grid becomes: ``` 2 5 2 0 3 0 0 3 0 ``` - After the third update (increment all values in row 2 by -1), the grid becomes: ``` 2 5 2 0 3 0 -1 2 -1 ``` - After the fourth update (increment all values in column 0 by 4), the grid becomes: ``` 6 5 2 4 3 0 3 2 -1 ``` - The maximum value in the final grid is 6.","solution":"def max_value_in_grid(n, m, updates): Returns the maximum value in the grid after performing the updates. # Initialize the grid with zeros grid = [[0] * n for _ in range(n)] # Apply each update for t, x, v in updates: if t == 1: # Row update for j in range(n): grid[x][j] += v elif t == 2: # Column update for i in range(n): grid[i][x] += v # Find the maximum value in the grid max_value = max(max(row) for row in grid) return max_value"},{"question":"You are a software developer working on a new online marketplace application. The application involves transactions between buyers and sellers, and you need to implement a feature to evaluate user ratings based on transaction data. Each user has a unique user id and can perform multiple transactions. Every transaction has a transaction id, user id of the buyer, user id of the seller, and a rating given by the buyer to the seller (an integer between 1 and 5, inclusive). Your task is to calculate the average rating for each user who has received at least one rating as a seller. The average rating should be rounded to the nearest integer. Assume there can be multiple users, but each user may not necessarily have made any transactions. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of transactions. The following n lines each contain four space-separated integers: `transaction_id` (1 ≤ transaction_id ≤ 100000), `buyer_id` (1 ≤ buyer_id ≤ 100000), `seller_id` (1 ≤ seller_id ≤ 100000), and `rating` (1 ≤ rating ≤ 5). Output For each user who has received at least one rating as a seller, output their user id and average rating, sorted by user id in ascending order. Each output should be in a new line. Examples Input 6 1 101 201 5 2 102 202 4 3 103 201 3 4 104 202 5 5 105 203 2 6 106 202 1 Output 201 4 202 3 203 2 Input 5 1 101 201 2 2 102 202 4 3 101 201 1 4 103 203 5 5 104 202 3 Output 201 2 202 4 203 5","solution":"def calculate_average_ratings(transactions): from collections import defaultdict import math # Dictionary to hold the sum of ratings and the count of ratings for each seller. seller_ratings = defaultdict(lambda: [0, 0]) for trans_id, buyer_id, seller_id, rating in transactions: seller_ratings[seller_id][0] += rating seller_ratings[seller_id][1] += 1 average_ratings = [] for seller_id, (total_rating, count) in sorted(seller_ratings.items()): average = total_rating / count rounded_average = math.ceil(average) if average - int(average) >= 0.5 else math.floor(average) average_ratings.append((seller_id, rounded_average)) return average_ratings"},{"question":"You are given a string s consisting of n lowercase English letters. You need to determine if it is possible to make the string a palindrome by replacing at most k characters. A palindrome is a word or phrase that reads the same backward as forward. Input The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100) and an integer k (0 ≤ k ≤ 50) separated by a space. Output For each test case, if it is possible to make the string s a palindrome by replacing at most k characters, print \\"POSSIBLE\\" (without quotes); otherwise, print \\"IMPOSSIBLE\\" (without quotes). Example Input 3 abca 1 abcba 0 abcd 2 Output POSSIBLE POSSIBLE IMPOSSIBLE Note In the first test case, you can replace the character \'c\' with \'b\' or \'a\' with \'c\' to make the string a palindrome (\\"abba\\" or \\"acca\\"). In the second test case, the string is already a palindrome, so no replacements are needed. In the third test case, you can replace \'a\' with \'d\' and \'c\' with \'b\' to make the string a palindrome (\\"dbbd\\").","solution":"def can_be_palindrome(s, k): Determine if a string s can be transformed into a palindrome by replacing at most k characters. n = len(s) mismatches = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 return mismatches <= k def check_palindrome_possibility(test_cases): Given a list of test cases, determine if each string can be made a palindrome with at most k replacements. :param test_cases: List of tuples (s, k) where s is the string and k is the max replacements. :return: List of results \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" for each test case. results = [] for s, k in test_cases: if can_be_palindrome(s, int(k)): results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"There is a popular tourist city with numerous attractions connected by roads. The city\'s attractions form a complete undirected graph, meaning every attraction is connected to every other attraction by exactly one road. Each road has a certain length. The goal is to build a route for tourists that meets the following criteria: 1. The route starts and ends at the same attraction. 2. The route visits every attraction exactly once. 3. The total length of the route is minimized. Write a program to find the minimum possible total length of the route. Input The first line contains an integer N (2 ≤ N ≤ 15) — the number of attractions. Then N lines follow, each containing N integers. The j-th integer of the i-th line denotes the length of the road between the i-th and the j-th attraction (0 ≤ length ≤ 10^9). The diagonal elements are zero since there is no distance from an attraction to itself. Output Output a single integer — the minimum possible total length of the route. Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Note In the example, one possible route is 1 → 2 → 4 → 3 → 1, with lengths totaling 10 + 25 + 30 + 15 = 80, which is the minimum total length for this route.","solution":"from itertools import permutations def find_minimum_tour_length(N, lengths): def calculate_path_length(path): total_length = 0 for i in range(N): total_length += lengths[path[i]][path[(i + 1) % N]] return total_length attractions = list(range(N)) min_length = float(\'inf\') for path in permutations(attractions[1:]): # Fix the starting point to reduce the permutations path = (0,) + path current_length = calculate_path_length(path) if current_length < min_length: min_length = current_length return min_length"},{"question":"A matrix is called a `symmetric matrix` if it is equal to its transpose. In other words, a square matrix A is symmetric if and only if for all i and j, `A[i][j]` is equal to `A[j][i]`. You are required to write a program to check whether the given matrix is symmetric or not. -----Input----- The first line of the input contains an integer `N` (1 ≤ N ≤ 100), which represents the number of rows and columns of the matrix. The following N lines each contain N space-separated integers, representing the elements of the matrix `A` (|A[i][j]| ≤ 100). -----Output----- The output should be a single line containing \\"YES\\" if the matrix is symmetric, otherwise \\"NO\\". -----Example----- Input: 3 1 2 3 2 4 5 3 5 6 Output: YES Example Explanation: The given matrix is: ``` 1 2 3 2 4 5 3 5 6 ``` The transpose of the above matrix is also: ``` 1 2 3 2 4 5 3 5 6 ``` Since both matrices are identical, the output is \\"YES\\".","solution":"def is_symmetric_matrix(matrix): Checks if the given matrix is symmetric. n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\" def process_input(matrix_description): Process the input to extract matrix dimension and elements. n = int(matrix_description[0]) matrix = [] for i in range(1, n + 1): row = list(map(int, matrix_description[i].split())) matrix.append(row) return is_symmetric_matrix(matrix)"},{"question":"David is planning a road trip and wants to visit multiple cities. He has M different routes he can take, each with a specific distance and toll cost. David starts his trip with a fuel tank that can hold enough fuel to travel only a certain maximum distance and a specific budget for tolls. He needs to determine the maximum number of cities he can visit following a single route without running out of fuel or exceeding his toll budget. David can refuel and pay tolls only at the start of his trip. Your task is to help him determine the maximum number of cities he can visit for each of the given routes. Input: The first line of the input will contain a single integer T denoting the number of test cases. For each test case, the first line will contain three integers: M denoting the number of routes, F denoting the maximum distance the fuel tank can hold, and B denoting the budget for tolls. Each of the next M lines will contain two space-separated integers: D and C, where D represents the distance of the route and C represents the toll cost of the route. Output: For each test case, on a new line, print the maximum number of cities David can visit following a single route. If it is impossible to visit any city with the given constraints, print 0. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 100 1 ≤ F ≤ 10^5 1 ≤ B ≤ 10^5 1 ≤ D ≤ 10^5 1 ≤ C ≤ 10^5 SAMPLE INPUT 2 3 100 50 30 10 70 20 100 50 2 200 30 150 10 200 25 SAMPLE OUTPUT 2 1","solution":"def max_cities_to_visit(num_routes, max_distance, max_budget, routes): Given the number of routes, the maximum distance the fuel tank can cover, and the budget for tolls, this function determines the maximum number of cities that can be visited. :param num_routes: int - the number of routes :param max_distance: int - the maximum distance the fuel tank can cover :param max_budget: int - the budget for tolls :param routes: List[Tuple[int, int]] - list of tuples where each tuple represents (distance, toll cost) :return: int - the maximum number of cities that can be visited reachable_routes = [route for route in routes if route[0] <= max_distance and route[1] <= max_budget] return len(reachable_routes) def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] index = 1 for _ in range(T): M, F, B = map(int, lines[index].split()) routes = [] for j in range(M): D, C = map(int, lines[index + 1 + j].split()) routes.append((D, C)) index += M + 1 results.append(max_cities_to_visit(M, F, B, routes)) return results"},{"question":"You are given an integer array representing the prices of items in a store where each item price is between 1 and 1000 inclusive. You want to buy two distinct items such that their combined price is exactly k . Write a function that returns `true` if such a pair exists, and `false` otherwise. Constraints * 2 leq text{len(prices)} leq 10^5 * 1 leq text{prices[i]} leq 1000 * 1 leq k leq 2000 Input * An integer `k`. * An integer array, `prices`, representing the prices of items. Output Return `true` if there are two distinct items whose total price is exactly `k`, otherwise `return `false`. Examples Input 2000 [500, 1000, 1500, 500, 1000] Output true Input 3 [2, 1, 2] Output true","solution":"def has_pair_with_sum(prices, k): Given an array of integers representing prices and an integer k, returns True if there are two distinct items whose combined price is exactly k. price_set = set() for price in prices: complement = k - price if complement in price_set: return True price_set.add(price) return False"},{"question":"Given a string s consisting of lowercase alphabets, arrange all the characters of the string in lexicographically increasing order using the counting sort algorithm. Example 1: Input: s = \\"geeksforgeeks\\" Output: eefggkkorssse Example 2: Input: s = \\"programming\\" Output: aggimmnoprr Your Task: You don\'t need to take the input or print anything. Your task is to complete the function `countingSortString()` which takes the string s as input and returns a new string with characters sorted in lexicographical order. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^{5}","solution":"def countingSortString(s): Sorts a string in lexicographical order using counting sort. Parameters: s (str): The input string consisting of lowercase alphabets. Returns: str: A new string with characters sorted in lexicographical order. # As a fixed number of lowercase English letters (26), we use a fixed size count array count = [0] * 26 # Counting each character in the input string for char in s: count[ord(char) - ord(\'a\')] += 1 # Building the output string by appending characters in sorted order sorted_string = [] for i in range(26): sorted_string.append(chr(i + ord(\'a\')) * count[i]) return \'\'.join(sorted_string)"},{"question":"Alice is organizing a game tournament. There are multiple players and each player has a skill level represented by an integer. To make the tournament fair, Alice wants to divide the players into two groups in such a way that the absolute difference between the total skill levels of the two groups is minimized. Write a function that takes a list of integers, where each integer represents the skill level of a player, and returns the minimum absolute difference between the total skill levels of the two groups. Input The input contains a single list of integers `skills` where `1 ≤ len(skills) ≤ 100` and `1 ≤ skills[i] ≤ 100`. Output Output the minimum absolute difference between the total skill levels of the two groups. Example Input [1, 6, 11, 5] Output 1 Input [3, 1, 4, 2, 2] Output 0 Note In the first sample test, Alice can split the players into two groups: [1, 6, 5] and [11]. The total skill levels are 12 and 11, respectively, and the absolute difference is 1. In the second sample test, Alice can split them into groups [3, 1, 2] and [4, 2]. The total skill levels are 6 and 6, respectively, resulting in an absolute difference of 0.","solution":"def min_difference(skills): total_sum = sum(skills) n = len(skills) dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): dp[i][j] = dp[i - 1][j] if j >= skills[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - skills[i - 1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j return total_sum # Test the function with the example inputs print(min_difference([1, 6, 11, 5])) # Output: 1 print(min_difference([3, 1, 4, 2, 2])) # Output: 0"},{"question":"You are given two boxes, each with a set of n balls. Each ball has a distinct number from 1 to n. The second box\'s balls are initially in reverse order compared to the first box\'s balls. You are allowed to swap the positions of any two adjacent balls in any of the boxes. Determine the minimum number of swaps required to make the second box\'s balls match the order of the first box\'s balls. Print your answer as a single integer representing the minimum number of swaps. ------ Input Format ------ - The first line of input contains a single integer n, denoting the number of balls in each box. - The second line contains n space-separated integers representing the order of balls in the first box. - The third line contains n space-separated integers representing the order of balls in the second box. ------ Output Format ------ Output a single integer denoting the minimum number of swaps. ------ Constraints ------ 1 ≤ n ≤ 1000 ------ Sample Input 1 ------ 5 1 2 3 4 5 5 4 3 2 1 ------ Sample Output 1 ------ 10 ------ Explanation 1 ------ In this case, 10 swaps are needed to transform the second box\'s order [5, 4, 3, 2, 1] into [1, 2, 3, 4, 5]. This can be done by performing a series of adjacent swaps until each ball is in its correct position.","solution":"def minimum_swaps(n, box1, box2): Returns the minimum number of swaps required to make the second box\'s balls match the order of the first box\'s balls. # Position map for balls in the first box position_map = {ball: index for index, ball in enumerate(box1)} # Translate box2 to box1 positions transformed_box2 = [position_map[ball] for ball in box2] # Count inversions (This gives us the minimum swaps needed) swaps = 0 for i in range(n): for j in range(i + 1, n): if transformed_box2[i] > transformed_box2[j]: swaps += 1 return swaps"},{"question":"Alice and Bob are playing a game on a circular track made up of an array of N integers A[1], A[2], ..., A[N]. They take alternate turns, starting with Alice, and pick numbers from the array until the array is empty. Each player must pick one of the remaining numbers from either end of the array (leftmost or rightmost). The player picks and removes that number from the array. The goal of the game is to maximize the sum of values the player can collect during their turns. Both players play optimally, meaning they always pick the number that maximizes their total sum assuming the opponent also plays optimally. Your task is to find the total sum of values that Alice can collect, assuming both Alice and Bob play optimally. ------ Input ------ The first line contains an integer, T - the number of testcases. Each testcase contains: - An integer, N - the size of the array. - An array of N space-separated integers A[1], A[2], ..., A[N]. ------ Output ------ For each testcase, print the total sum of values that Alice can collect if both play optimally. ------ Constraints ------ Subtask 1: (40 points) 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ A[i] ≤ 1000 Subtask 2: (60 points) 1 ≤ T ≤ 10 1 ≤ N ≤ 2000 1 ≤ A[i] ≤ 10^{9} ----- Sample Input 1 ------ 1 4 8 15 3 7 ----- Sample Output 1 ------ 22","solution":"def optimal_game_strategy(A): N = len(A) dp = [[0] * N for _ in range(N)] for gap in range(N): for i in range(N - gap): j = i + gap x = dp[i + 2][j] if (i + 2) <= j else 0 y = dp[i + 1][j - 1] if (i + 1) <= (j - 1) else 0 z = dp[i][j - 2] if i <= (j - 2) else 0 dp[i][j] = max(A[i] + min(x, y), A[j] + min(y, z)) return dp[0][N - 1] def solve_game(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] results.append(optimal_game_strategy(A)) return results # Example (you can run to check) # T = 1 # test_cases = [(4, [8, 15, 3, 7])] # print(solve_game(T, test_cases)) # should return [22]"},{"question":"A city is organizing a marathon. The marathon\'s course is divided into segments, and each segment has a certain number of refreshment points available. The marathon runners aim to collect as many refreshment points as possible. You are given an array where each element represents the number of refreshment points available at a segment of the marathon. However, there is a restriction: runners can only collect refreshment points without collecting from two consecutive segments. Your task is to calculate the maximum number of refreshment points a runner can collect without violating this restriction. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 100) — the number of segments. The second line contains n integers p_1, p_2, …, p_n (0 ≤ p_i ≤ 10^4), where p_i is the number of refreshment points available at the i-th segment. Output For each test case, print one integer — the maximum number of refreshment points a runner can collect for that test case. Example Input 3 5 3 2 5 10 7 4 3 2 7 10 3 3 2 5 Output 15 13 8 Note Explanations for the test cases of the example: 1. The runner can collect from segments 1, 3, and 5: 3 + 5 + 7 = 15. 2. The runner can collect from segments 1 and 4: 3 + 10 = 13. 3. The runner can collect from segments 1 and 3: 3 + 5 = 8.","solution":"def max_refreshment_points(t, test_cases): Calculates the maximum number of refreshment points a runner can collect without collecting from two consecutive segments. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains (n, points) where n is the number of segments and points is a list of integers representing the refreshment points. Returns: list: A list of integers representing the maximum refreshment points for each test case. results = [] for case in test_cases: n, points = case if n == 0: results.append(0) continue if n == 1: results.append(points[0]) continue dp = [0] * n dp[0] = points[0] dp[1] = max(points[0], points[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + points[i]) results.append(dp[-1]) return results"},{"question":"Implementing a Circular Buffer Objective: Create a class called CircularBuffer that represents a fixed-size circular buffer (or ring buffer), which operates in a first-in-first-out (FIFO) manner. This structure is used in scenarios where we need a buffer with a fixed size, and new elements overwrite the oldest elements when the buffer is full. Class Definition: The CircularBuffer class should provide the following functionalities: 1. Initialization: Initializes the buffer with a fixed size, N. 2. Write: Adds an element to the buffer. If the buffer is full, it overwrites the oldest element. 3. Read: Removes and returns the oldest element from the buffer. If the buffer is empty, it should raise an exception. 4. Size: Returns the number of elements currently in the buffer. 5. Is Full: Returns True if the buffer is full, otherwise False. 6. Is Empty: Returns True if the buffer is empty, otherwise False. Input Format: 1. The first line of the input contains an integer, the size of the buffer, N. 2. The subsequent lines contain commands which could be \\"write X\\" (where X is an integer to add to the buffer), \\"read\\", \\"size\\", \\"is_full\\", and \\"is_empty\\". Output Format: - For each \\"read\\" command, output the removed element. - For each \\"size\\" command, output the size of the buffer. - For each \\"is_full\\" command, output \\"True\\" or \\"False\\". - For each \\"is_empty\\" command, output \\"True\\" or \\"False\\". Constraints: - 1 ≤ N ≤ 10^5 - The sequence of commands will be such that the read command is not called on an empty buffer unless it\'s unavoidable (i.e., no handling for unexpected exceptions required). Example: Input: ``` 5 write 10 write 20 read write 30 write 40 write 50 write 60 size is_full is_empty read read read read is_empty ``` Output: ``` 10 5 True False 20 30 40 50 True ```","solution":"class CircularBuffer: def __init__(self, size): self.size = size self.buffer = [None] * size self.start = 0 self.end = 0 self.count = 0 def write(self, value): self.buffer[self.end] = value if self.is_full(): self.start = (self.start + 1) % self.size else: self.count += 1 self.end = (self.end + 1) % self.size def read(self): if self.is_empty(): raise Exception(\\"Buffer is empty\\") value = self.buffer[self.start] self.buffer[self.start] = None self.start = (self.start + 1) % self.size self.count -= 1 return value def get_size(self): return self.count def is_full(self): return self.count == self.size def is_empty(self): return self.count == 0"},{"question":"Zara is a software developer who loves creating new algorithms. Currently, she is intrigued by the concept of a special type of sequence which she calls an \\"Almost Fibonacci Sequence.\\" An Almost Fibonacci sequence is defined as follows: - The first two numbers of the sequence are the same as the first two Fibonacci numbers, `0` and `1`. - For every `i` >= 2, the i-th number in the sequence is the sum of the two preceding numbers, except for one chosen position `p` in which the number can be any integer `x` you choose such that the resulting sequence still adheres to the definition beyond `p`. Given the length of the sequence `N` and the exact position `p`, along with the desired value for that position `x` and a validation integer `V`, Zara wants to validate if the Almost Fibonacci sequence formed satisfies the following condition: - The sum of all elements in the sequence must be exactly `V`, else it is invalid. Can you help her determine whether the sequence is valid or not? -----Input----- There is a single test case per test file. The first line contains three integers, `N`, `p` and `x` (3 ≤ N ≤ 10^5, 2 ≤ p < N, -10^9 ≤ x ≤ 10^9), denoting the length of the sequence, the position to replace with `x`, and the value to replace with. The next line contains the integer `V` (-10^9 ≤ V ≤ 10^9), the validation sum for the sequence. -----Output----- Output a single line containing \\"YES\\" if the sequence is valid, otherwise \\"NO\\". -----Example----- Input: 5 2 7 7 Output: NO -----Explanation----- The original Fibonacci sequence for N=5 is [0, 1, 1, 2, 3]. Replacing the 2nd element with 7 results in the sequence [0, 1, 7, 8, 15]. The sum of all elements is 0 + 1 + 7 + 8 + 15 = 31 which is not equal to 7, hence the output is \\"NO\\".","solution":"def is_almost_fibonacci_valid(N, p, x, V): Determines if the almost Fibonacci sequence with specified parameters is valid. Args: N (int): Length of the sequence. p (int): Position to replace with x. x (int): Value to replace at position p. V (int): Expected validation sum. Returns: str: \\"YES\\" if the sequence sum is equal to V, otherwise \\"NO\\". if p >= N or p < 2: return \\"NO\\" # Initialize the Fibonacci sequence up to N with the changes applied fib = [0] * N fib[0] = 0 fib[1] = 1 for i in range(2, N): if i == p: fib[i] = x else: fib[i] = fib[i-1] + fib[i-2] # Correct the following elements after p to maintain the Fibonacci property for i in range(p + 1, N): fib[i] = fib[i-1] + fib[i-2] # Compute the sum of the sequence sum_fib = sum(fib) # Check if the sum matches the validation sum return \\"YES\\" if sum_fib == V else \\"NO\\""},{"question":"You are tasked with designing a simple inventory management system for a small store. The store can receive a series of operations to add or remove items from its inventory or to retrieve the current inventory count of a specific item. The operations are provided in the format described below: * `ADD item quantity` - Adds the specified quantity of the item to the inventory. Item names are case-sensitive alphanumeric strings, and quantity is a positive integer. * `REMOVE item quantity` - Removes the specified quantity of the item from the inventory. If the item’s quantity goes below zero, it should be set to zero. Item names are case-sensitive alphanumeric strings, and quantity is a positive integer. * `QUERY item` - Retrieves and prints the current quantity of the specified item in the inventory. If the item does not exist in the inventory, print `0`. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations. The next n lines each contain an operation in one of the formats described above. Output For each `QUERY` operation, print the current quantity of the specified item in the inventory. Examples Input 6 ADD apple 10 ADD banana 5 QUERY apple REMOVE apple 3 QUERY apple QUERY orange Output 10 7 0 Input 5 ADD notebook 15 REMOVE notebook 5 QUERY notebook REMOVE notebook 20 QUERY notebook Output 10 0 Note In the first example, the inventory initially receives 10 apples and 5 bananas. When querying apples, the system returns 10. After removing 3 apples, querying apples again returns 7. Querying an item that doesn\'t exist (orange) returns 0. In the second example, 15 notebooks are added to the inventory, then 5 are removed, leaving 10. After attempting to remove 20 notebooks—which would result in a negative count—the system correctly sets the quantity to 0 when queried.","solution":"class InventoryManagementSystem: def __init__(self): self.inventory = {} def add_item(self, item, quantity): if item in self.inventory: self.inventory[item] += quantity else: self.inventory[item] = quantity def remove_item(self, item, quantity): if item in self.inventory: self.inventory[item] = max(0, self.inventory[item] - quantity) def query_item(self, item): return self.inventory.get(item, 0) def handle_operations(n, operations): ims = InventoryManagementSystem() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": ims.add_item(parts[1], int(parts[2])) elif parts[0] == \\"REMOVE\\": ims.remove_item(parts[1], int(parts[2])) elif parts[0] == \\"QUERY\\": results.append(ims.query_item(parts[1])) return results"},{"question":"Polycarp has a collection of n toys, each with a certain weight and fun factor. He wants to choose a subset of these toys such that their total weight does not exceed a weight limit W. Polycarp aims to maximize the fun factor of the chosen subset of toys. Help Polycarp determine the maximum fun factor he can achieve without exceeding the weight limit. -----Input----- The first line contains an integer t (1 le t le 10^3) — the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n and W (1 le n le 100, 1 le W le 10^4) — the number of toys and the maximum allowable weight. The second line of each test case contains 2 times n integers: w_1, f_1, w_2, f_2, ldots, w_n, f_n (1 le w_i, f_i le 100) where w_i is the weight of the i-th toy and f_i is the fun factor of the i-th toy. -----Output----- For each test case, output on a separate line the maximum fun factor Polycarp can achieve without exceeding the weight limit W. -----Examples----- Input 3 3 50 10 60 20 100 30 120 4 10 5 10 4 40 6 30 3 50 2 8 3 50 5 50 Output 220 90 100 -----Note----- In the first test case, it is optimal to select all the toys since their total weight is 10 + 20 + 30 = 60 le 50 and the total fun factor is 60 + 100 + 120 = 280. In the second test case, it is optimal to select the second and fourth toys with weights 4 and 3 respectively, totaling 4 + 3 = 7 le 10 and a combined fun factor of 40 + 50 = 90. In the third test case, it is optimal to choose either the first or second toy, both of which yield the same fun factor of 50 without exceeding the weight limit 8.","solution":"def max_fun_factor(t, test_cases): results = [] for i in range(t): n, W = test_cases[i][0] toys = test_cases[i][1] weights = [toys[j * 2] for j in range(n)] fun_factors = [toys[j * 2 + 1] for j in range(n)] # Initialize DP array dp = [0] * (W + 1) for j in range(n): for weight in range(W, weights[j] - 1, -1): dp[weight] = max(dp[weight], dp[weight - weights[j]] + fun_factors[j]) results.append(dp[W]) return results def parse_input(input_string): data = input_string.split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n, W = int(data[index]), int(data[index + 1]) index += 2 toys = [int(data[index + i]) for i in range(2 * n)] index += 2 * n test_cases.append(((n, W), toys)) return t, test_cases"},{"question":"Given a list of integers representing the strengths of different heroes, you need to determine the maximum possible value of the minimum strength of any selected subset of heroes such that the number of heroes in this subset is exactly K. -----Constraints----- - 1 ≤ N ≤ 10^5 (Number of heroes) - 1 ≤ K ≤ N (Number of heroes to select) - 1 ≤ strengths[i] ≤ 10^9 (Strength of an individual hero) - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N K strengths[1] strengths[2] ... strengths[N] -----Output----- Print the maximum possible value of the minimum strength of the selected subset of K heroes. -----Sample Input----- 5 3 1 3 5 9 12 -----Sample Output----- 5 Explanation: By selecting the subset {5, 9, 12}, the minimum strength is 5, which is the highest possible minimum strength for any subset of 3 heroes.","solution":"def max_min_strength(N, K, strengths): Function to determine the maximum possible value of the minimum strength of any selected subset of K heroes. :param N: Number of heroes (int) :param K: Number of heroes in the subset (int) :param strengths: List of strengths of heroes (List[int]) :return: Maximum possible value of the minimum strength of the selected subset (int) strengths.sort() def is_valid(mid): count = 0 for strength in strengths: if strength >= mid: count += 1 if count >= K: return True return False left, right = 1, strengths[-1] result = 1 while left <= right: mid = (left + right) // 2 if is_valid(mid): result = mid left = mid + 1 else: right = mid - 1 return result"},{"question":"You are given a room with `n` x `m` grid cells filled with different colors. One of the colors is dominant, and your task is to find it. A color is considered dominant if more than half of the cells in the grid are filled with that color. Write a program to determine the dominant color or output \\"None\\" if no such color exists. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next `n` lines contains `m` integers representing the colors of the cells. Each integer denotes a color, and it\'s guaranteed that the number of distinct colors will not exceed 1000. Output Output a single integer representing the dominant color, or \\"None\\" if no dominant color exists. Examples Input 3 3 1 2 1 2 1 1 1 3 1 Output 1 Input 4 4 1 2 3 4 4 3 2 1 1 2 3 4 2 4 1 3 Output None","solution":"def find_dominant_color(n, m, grid): This function determines the dominant color in an n x m grid. A color is considered dominant if it appears in more than half of the cells in the grid. Returns the dominant color or \\"None\\" if no such color exists. from collections import Counter # Flatten the grid to get a single list of colors flat_grid = [color for row in grid for color in row] # Count the occurrences of each color using Counter color_count = Counter(flat_grid) # Calculate the total number of cells total_cells = n * m # Iterate through the color counts to find the dominant color for color, count in color_count.items(): if count > total_cells // 2: return color return \\"None\\""},{"question":"You are given an unordered list of integers. Your task is to determine the length of the longest contiguous subarray where all elements have the same value. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. - Each of the next T lines contains a single integer N — the length of the list, followed by a space-separated list of N integers. ------ Output Format ------ For each test case, output the length of the longest contiguous subarray where all elements have the same value. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} - The sum of N over all test cases does not exceed 10^{6}. - The integers in the list range from -10^9 to 10^9. ----- Sample Input 1 ----- 3 10 1 2 2 2 3 3 3 3 3 1 1 5 4 4 4 4 4 7 7 8 8 8 8 7 7 ----- Sample Output 1 ----- 5 5 4 ----- Explanation 1 ----- Test case 1: The longest contiguous subarray with the same value is {3, 3, 3, 3, 3}, which has a length of 5. Test case 2: The entire list consists of the same value 4, so the length is 5. Test case 3: The longest contiguous subarray with the same value is {8, 8, 8, 8}, which has a length of 4.","solution":"def longest_contiguous_subarray(T, test_cases): results = [] for case in test_cases: N, arr = case[0], case[1:] max_length = 1 current_length = 1 for i in range(1, N): if arr[i] == arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 results.append(max_length) return results"},{"question":"Carol is an avid gardener who loves to plan her garden meticulously. Given that her garden\'s layout can be represented as a 2D grid, she has decided to place different kinds of plants in specific locations according to a predefined plan. Each type of plant will be marked with a unique integer, and empty spaces will be marked with a 0. Carol\'s garden grid, G, is an M times N matrix. She wants to find the largest rectangular area (submatrix) within her garden grid where all cells contain the same non-zero type of plant. To help Carol, write a program that will determine the size of this largest rectangular area that contains the same plant type. -----Input----- Input begins with a line containing two integers, M and N, the number of rows and columns in the garden grid where 1 leq M, N leq 100. This is followed by M lines, each containing N integers where each integer g_{ij} representing the plant type in the cell (i, j), where 0 leq g_{ij} leq 100. -----Output----- Print a single integer which is the largest area (number of cells) of a contiguous rectangular submatrix where all cells contain the same non-zero integer. -----Examples----- Sample Input: 4 5 1 2 2 3 3 2 2 2 3 3 2 2 2 3 3 4 4 4 4 4 Sample Output: 6 Sample Input: 3 3 1 1 1 1 0 1 1 1 1 Sample Output: 3","solution":"def largest_uniform_submatrix_area(M, N, garden): # This function will return the size of the largest submatrix with all cells containing the same non-zero integer max_area = 0 for i in range(M): for j in range(N): if garden[i][j] != 0: # Check the possible rectangles starting from (i, j) for row in range(i, M): for col in range(j, N): if garden[row][col] == garden[i][j]: # Check if the submatrix is still valid valid = True for sub_row in range(i, row + 1): for sub_col in range(j, col + 1): if garden[sub_row][sub_col] != garden[i][j]: valid = False break if not valid: break if valid: area = (row - i + 1) * (col - j + 1) if area > max_area: max_area = area else: break return max_area"},{"question":"You are given an array consisting of n integers. Your task is to check if you can make the entire array strictly increasing by removing exactly one element. If it is possible to achieve this by removing one element, print \\"YES\\"; otherwise, print \\"NO\\". Input The first line contains an integer n (2 ≤ n ≤ 105). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). Output Print \\"YES\\" or \\"NO\\" depending on whether it is possible to make the array strictly increasing by removing one element. Examples Input 5 1 2 3 4 5 Output YES Input 5 5 4 3 2 1 Output NO Input 6 1 3 2 4 5 6 Output YES Note In the first example, the array is already strictly increasing, so removing any element will still leave it strictly increasing. In the second example, no matter which element you remove, the array will still not be strictly increasing. In the third example, you can remove the second element (3), making the array strictly increasing: [1, 2, 4, 5, 6].","solution":"def can_be_made_increasing(arr): Determines if the array can be made strictly increasing by removing exactly one element. :param arr: List[int] - The input array of integers :return: str - \\"YES\\" if it can be made strictly increasing by removing one element, \\"NO\\" otherwise n = len(arr) count = 0 for i in range(1, n): if arr[i] <= arr[i - 1]: count += 1 if count > 1: return \\"NO\\" if i > 1 and i < n - 1 and arr[i] <= arr[i - 2] and arr[i + 1] <= arr[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"You have recently developed a new game with a feature to find the longest common subsequence (LCS) between two given strings. To help test this feature, you need to write a function that calculates the LCS. A subsequence of a string is a sequence that can be derived from another string by deleting some characters without changing the order of the remaining characters. Given two strings, your task is to find the length of their longest common subsequence. -----Input----- The input consists of two lines. The first line contains a string X of length 1 leq |X| leq 1000. The second line contains a string Y of length 1 leq |Y| leq 1000. The strings will consist of lowercase letters only. -----Output----- Output one line with a single integer denoting the length of the longest common subsequence of the two given strings. -----Examples----- Sample Input: abcde ace Sample Output: 3 Sample Input: abc def Sample Output: 0","solution":"def longest_common_subsequence(X, Y): Returns the length of the longest common subsequence of X and Y. m = len(X) n = len(Y) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a list of n integers. A contiguous sublist is defined as a section of the list that consists of consecutive elements. For example, if the list is [1, 2, 3, 4], then [2, 3], [1, 2, 3], and [4] are contiguous sublists. The sum of a contiguous sublist is the sum of all its elements. Your task is to find the contiguous sublist with the maximum sum. Input: The first line contains a single integer n (1 ≤ n ≤ 100,000) — the size of the list. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the list. Output: Print a single integer — the maximum sum of a contiguous sublist. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 -1 -2 -3 -4 -5 Output -1 Explanation In the first example, the contiguous sublist with the maximum sum is [4, -1, 2, 1] with a sum of 6. In the second example, all elements are negative, so the contiguous sublist with the maximum sum is any single element with the least negative value, which is -1.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous sublist within the given list of integers. Uses Kadane\'s algorithm to find the maximum subarray sum efficiently. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a list of integers `nums`, your task is to count the number of pairs (i, j) where 0 ≤ i < j < len(nums) and nums[i] + nums[j] is an even number. Input: - The first line of the input will contain an integer n (1 ≤ n ≤ 1000), representing the number of elements in the list. - The second line will contain n space-separated integers, representing the elements of the list `nums`. Each integer in the list will be between -10^6 and 10^6 inclusive. Output: - Output a single integer, which is the number of desired pairs. Example: Input: 4 2 4 6 7 Output: 3 Input: 5 1 3 5 7 9 Output: 10","solution":"def count_even_pairs(n, nums): Returns the number of pairs (i, j) where 0 ≤ i < j < len(nums) and nums[i] + nums[j] is an even number. count = 0 for i in range(n): for j in range(i + 1, n): if (nums[i] + nums[j]) % 2 == 0: count += 1 return count"},{"question":"You are given an array A of N integers. Your task is to determine if there exists a pair of integers in the array whose absolute difference is exactly D. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and D ― the number of elements in the array and the desired absolute difference. The second line contains N integers A_1, A_2, ... , A_N ― the elements of the array. ------ Output ------ For each test case, print \\"YES\\" if there exists a pair of integers in the array whose absolute difference is exactly D, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ A_i ≤ 10^{9} 0 ≤ D ≤ 10^{9} ------ Sample Input 1 ------ 3 5 2 1 5 3 4 2 4 0 8 3 7 3 4 10 3 1 2 9 ------ Sample Output 1 ------ YES YES NO","solution":"def has_pair_with_difference(N, D, A): Determines if there\'s a pair of integers in array A whose absolute difference is exactly D. seen = set(A) for number in A: if (number + D in seen) or (number - D in seen): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, D = test_cases[i][0] A = test_cases[i][1] result = has_pair_with_difference(N, D, A) results.append(result) return results def main(inputs): Takes input as specified and returns the results of each test case. inputs - list of strings representing the input, each element being a line. T = int(inputs[0]) test_cases = [] index = 1 for _ in range(T): N, D = map(int, inputs[index].split()) A = list(map(int, inputs[index + 1].split())) test_cases.append(((N, D), A)) index += 2 return process_test_cases(T, test_cases)"},{"question":"A company has developed a new software system to manage its inventory. The system uses a binary search algorithm to quickly find the position of a specific inventory item in a sorted list. However, one issue that frequently comes up is that the list may contain duplicate items, and the company wants to find the position of the first occurrence of the item. Write a function `find_first_occurrence(arr, x)` that takes a sorted list of integers `arr` and an integer `x` as input and returns the index of the first occurrence of `x` in `arr`. If `x` is not in `arr`, the function should return -1. Your implementation should have a time complexity of O(log n) to take advantage of the binary search mechanism. Constraints * 1 leq text{len}(arr) leq 100000 * -100000 leq arr[i] leq 100000 * arr is a sorted list of integers in non-decreasing order Input The input consists of two lines: - The first line contains space-separated integers representing the sorted list `arr`. - The second line contains the integer `x`. Output Print the index of the first occurrence of `x` if `x` is in the list; otherwise, print `-1`. Examples Input 1 2 2 2 3 4 5 2 Output 1 Input 1 1 1 1 1 1 1 1 Output 0 Input 1 2 3 4 5 6 Output -1","solution":"def find_first_occurrence(arr, x): Returns the index of the first occurrence of x in sorted list arr. If x is not in arr, returns -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == x: result = mid right = mid - 1 # look on the left side to find the first occurrence elif arr[mid] < x: left = mid + 1 else: right = mid - 1 return result"},{"question":"Sara is working with sequences and has recently learned about arithmetic sequences. An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. The n-th term of an arithmetic sequence can be represented as a_n = a_1 + (n - 1)d, where a_1 is the first term and d is the common difference. Sara is given a sequence of integers and needs to determine if she can rearrange the sequence to form an arithmetic sequence. If she can do so, she also needs to find a_1 and d. Help Sara by writing a program that determines whether the given sequence can be rearranged into an arithmetic sequence. If it is possible, output the first term and common difference. If not, output \\"NO\\". -----Input----- The input consists of two lines. The first line contains a single integer n (2 ≤ n ≤ 100,000), representing the number of elements in the sequence. The second line contains n space-separated integers forming the sequence. Each integer in the sequence is between -10^9 and 10^9. -----Output----- If the sequence can be rearranged into an arithmetic sequence, print \\"YES\\" on the first line, and on the second line print two integers a_1 and d, representing the first term and the common difference of the arithmetic sequence, respectively. If it is not possible to rearrange the sequence into an arithmetic sequence, print \\"NO\\". -----Examples----- Input 5 3 1 5 7 9 Output YES 1 2 Input 4 2 4 6 8 Output YES 2 2 Input 3 1 4 9 Output NO","solution":"def can_form_arithmetic_sequence(n, sequence): sequence.sort() d = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i - 1] != d: return \\"NO\\" a1 = sequence[0] return \\"YESn{} {}\\".format(a1, d)"},{"question":"You are given an array of `n` integers and a collection of `q` queries. Each query specifies a range [l, r] and asks you to determine the sum of the `k` largest elements within that range. Write a function `range_sum_of_k_largest` that takes the following inputs: 1. An integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. 2. An integer `q` (1 ≤ q ≤ 10^5), the number of queries. 3. An array `arr` of `n` integers, where each element `a_i` (1 ≤ a_i ≤ 10^9). 4. A list of queries, where each query is represented by a tuple (l, r, k) with the range boundaries `l` and `r` (1 ≤ l ≤ r ≤ n) and the integer `k` (1 ≤ k ≤ r - l + 1). The function should output an array of `q` integers, where each integer is the result of a query. # Example Input: ``` n = 6 q = 3 arr = [4, 5, 1, 2, 8, 3] queries = [ (1, 4, 2), (2, 6, 3), (1, 6, 1) ] ``` Output: ``` [9, 16, 8] ``` # Explanation 1. For the first query (1, 4, 2), the range is [4, 5, 1, 2]. The 2 largest elements are [5, 4]. Their sum is 9. 2. For the second query (2, 6, 3), the range is [5, 1, 2, 8, 3]. The 3 largest elements are [8, 5, 3]. Their sum is 16. 3. For the third query (1, 6, 1), the range is [4, 5, 1, 2, 8, 3]. The largest element is [8]. Its sum is 8. # Function Signature ```python def range_sum_of_k_largest(n: int, q: int, arr: list[int], queries: list[tuple[int, int, int]]) -> list[int]: pass ```","solution":"def range_sum_of_k_largest(n: int, q: int, arr: list[int], queries: list[tuple[int, int, int]]) -> list[int]: results = [] for l, r, k in queries: # Extract the subarray from l to r (1-based to 0-based index) subarray = arr[l-1:r] # Sort the subarray in descending order subarray.sort(reverse=True) # Sum the first `k` elements from the sorted subarray result = sum(subarray[:k]) results.append(result) return results"},{"question":"You are given a string consisting of lowercase English letters and the symbol \'*\'. Each \'*\' in the string represents a wildcard character that can be replaced by any lowercase English letter to form the lexicographically smallest string. Your task is to replace each \'*\' in the input string such that the resulting string is the lexicographically smallest possible. For example, consider the string \\"a*c*\\". The lexicographically smallest string that can be obtained is \\"aaca\\". -----Input----- The input contains a single string s (1 le |s| le 100,000), consisting of lowercase English letters and the symbol \'*\'. -----Output----- Print the lexicographically smallest string obtainable by replacing all \'*\' characters in the input string. -----Examples----- Input a*c* Output aaca Input **b* Output aaab Input abc Output abc -----Note----- In the first example, the input string \\"a*c*\\" is transformed into \\"aaca\\" because replacing \'*\' with \'a\' wherever possible results in the smallest lexicographical order. In the second example, \\"aaab\\" is the smallest string since \'a\' is the smallest letter and should be used first.","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string by replacing all \'*\' characters with \'a\'. return s.replace(\'*\', \'a\')"},{"question":"A company wants to categorize employees based on their years of experience. The categories are defined as follows: - \\"Junior\\" if the experience is less than 2 years. - \\"Mid-level\\" if the experience is at least 2 years but less than 5 years. - \\"Senior\\" if the experience is 5 years or more. Given the number of employees and their respective years of experience, your task is to determine the category for each employee. ------ Input Format ------ - First line will contain N, the number of employees. Then the years of experience for each employee follow in the next N lines. ------ Output Format ------ For each employee, print the corresponding category: \\"Junior\\", \\"Mid-level\\", or \\"Senior\\". ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ Years of Experience ≤ 50 ----- Sample Input 1 ------ 5 1 3 5 0 7 ----- Sample Output 1 ------ Junior Mid-level Senior Junior Senior ------ Explanation 1 ------ Test case 1: Employee 1 has 1 year of experience, which falls under the \\"Junior\\" category. Test case 2: Employee 2 has 3 years of experience, which falls under the \\"Mid-level\\" category. Test case 3: Employee 3 has 5 years of experience, which falls under the \\"Senior\\" category. Test case 4: Employee 4 has 0 years of experience, which falls under the \\"Junior\\" category. Test case 5: Employee 5 has 7 years of experience, which falls under the \\"Senior\\" category.","solution":"def categorize_employees(employee_years): Categorizes each employee based on their years of experience. Parameters: employee_years (list of int): List of years of experience for each employee. Returns: list of str: List of categories corresponding to each employee. categories = [] for years in employee_years: if years < 2: categories.append(\\"Junior\\") elif 2 <= years < 5: categories.append(\\"Mid-level\\") else: categories.append(\\"Senior\\") return categories"},{"question":"Alice is fond of playing with numbers and sorting them. She has recently come across an interesting problem involving prime numbers and sorting. Having a list of prime numbers, her task is to sort the elements based on two criteria: 1. Sort the numbers by their length when written in decimal representation. 2. For numbers of the same length, sort them in ascending numerical order. Alice, however, finds it difficult to manually sort such large lists and has asked for your help. Can you complete the task described? Your goal is to write a program that takes a list of prime numbers and outputs them sorted according to the above criteria. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4), the number of prime numbers in the list. The second line contains n distinct prime numbers, each prime number p (2 ≤ p ≤ 10^9). -----Output----- Output the sorted list of prime numbers according to the described criteria. Each prime number should be printed on a new line. -----Examples----- Input 5 2 11 3 17 7 Output 2 3 7 11 17 Input 4 19 3 5 23 Output 3 5 19 23 -----Note----- In the first example, the primes are sorted first by the number of digits (length), resulting in [2, 3, 7] (all one digit), followed by [11, 17] (all two digits). The primes of the same length are already in ascending order. In the second example, the primes [19, 23] of the same length (both two digits) follow the smaller primes [3, 5] (both one digit).","solution":"def sort_primes(prime_list): Sorts a list of prime numbers first by the number of digits, then by numerical order if the number of digits is the same. return sorted(prime_list, key=lambda x: (len(str(x)), x))"},{"question":"You are given a list of integers where each integer appears an even number of times, except for one integer which appears an odd number of times. Your task is to find the integer that appears an odd number of times in the list. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, denoting the number of integers in the list. - The second line of each test case contains N space-separated integers representing the list of integers. ------ Output Format ------ For each test case, output a single integer — the integer that appears an odd number of times in the list. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 2 times 10^{5} 1 ≤ a_i ≤ 10^{9} Guaranteed that there is exactly one integer that appears an odd number of times in the list for each test case. ----- Sample Input 1 ------ 2 7 1 2 3 2 3 1 3 5 4 4 3 3 5 ----- Sample Output 1 ------ 3 5 ----- Explanation 1 ------ Test case 1: The integer \'3\' appears an odd number of times (3 times), while integers \'1\' and \'2\' each appear an even number of times (2 times each). Test case 2: The integer \'5\' appears an odd number of times (1 time), while integers \'4\' and \'3\' each appear an even number of times (2 times each).","solution":"def find_odd_occurrence(numbers): Returns the integer that appears an odd number of times in the list. result = 0 for number in numbers: result ^= number return result def find_odd_occurrences_in_cases(cases): Returns a list of answers for each test case. results = [] for _, numbers in cases: results.append(find_odd_occurrence(numbers)) return results def parse_input(input_data): Parses the input data. lines = input_data.strip().split(\'n\') T = int(lines[0]) cases = [] index = 1 for _ in range(T): N = int(lines[index]) numbers = list(map(int, lines[index + 1].split())) cases.append((N, numbers)) index += 2 return cases"},{"question":"David enjoys playing with matrices and numbers. He has a special game where he takes an N x N matrix filled with non-negative integers and determines the sum of all unique numbers in the matrix. Help David by writing a program to find the sum of all unique numbers in a given matrix. Input: The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the size of the matrix. The next N lines contain N integers each, representing the matrix elements. Output: For each test case, print the sum of all unique numbers in the matrix on a new line. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 0 ≤ Matrix elements ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 1 6 7 4 5 2 10 20 30 10 SAMPLE OUTPUT 28 60 Explanation For the first test case, the matrix is: 1 2 3 4 1 6 7 4 5 Unique elements are: 1, 2, 3, 4, 5, 6, 7 Sum of unique elements is: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28 For the second test case, the matrix is: 10 20 30 10 Unique elements are: 10, 20, 30 Sum of unique elements is: 10 + 20 + 30 = 60","solution":"def sum_of_unique_numbers(t, test_cases): Calculates the sum of all unique numbers in a given matrix for multiple test cases. :param t: Number of test cases :param test_cases: List of matrices corresponding to each test case :return: List of sums of unique numbers for each test case result = [] for case in test_cases: unique_numbers = set() n = case[\'n\'] matrix = case[\'matrix\'] for row in matrix: for num in row: unique_numbers.add(num) result.append(sum(unique_numbers)) return result # Helper function to parse input def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) matrix = [] index += 1 for i in range(n): row = list(map(int, input_lines[index].split())) matrix.append(row) index += 1 test_cases.append({\'n\': n, \'matrix\': matrix}) return t, test_cases # Helper function to format output def format_output(output_list): return \\"n\\".join(map(str, output_list))"},{"question":"Alice is planning a new garden. She wants to use tiles to cover a rectangular garden plot completely, without any gaps or overlaps. She has tiles of one specific type, all of which are squares of the same size. Help Alice determine whether she can cover the entire garden plot with her square tiles, and if she can, find the minimum size of the square tiles she should use. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 10^9) — the dimensions of the garden plot. -----Output----- Print a single integer — the side length of the largest square tile that can be used to cover the entire garden plot. If it is not possible to cover the plot completely using square tiles, print -1. -----Examples----- Input 4 6 Output 2 Input 3 5 Output 1 Input 7 3 Output 1","solution":"import math def largest_square_tile(n, m): Returns the largest possible side length of square tiles that can cover the entire garden plot with dimensions `n` and `m`. return math.gcd(n, m)"},{"question":"A town has (N) parks, each with a certain number of trees. The town planners want to ensure every park has a unique number of trees because they believe it will enhance biodiversity and attract more birds. You are tasked with helping the town planners by either confirming that every park already has a unique number of trees or suggesting minimal changes to achieve uniqueness. Specifically, you need to find out the minimal number of trees that need to be planted or chopped down for the goal to be met. You are given the initial list of tree counts for each park, and you need to return the minimal total number of additions or subtractions required to make all the tree counts unique. -----Input----- The first line of input consists of a single integer (N) ((1 leq N leq 100000)), the number of parks. The second line contains (N) integers representing the number of trees in each park, (t_i) ((0 leq t_i leq 1000000)). -----Output----- Output a single integer, the minimal total number of tree additions or subtractions required. -----Examples----- Sample Input 1: 3 1 2 2 Sample Output 1: 1 Sample Input 2: 5 5 5 5 5 5 Sample Output 2: 10 Sample Input 3: 4 1 3 3 1 Sample Output 3: 2","solution":"def min_tree_adjustments(N, trees): Returns the minimal total number of tree additions or subtractions required to make the tree counts unique in each park. from collections import Counter tree_counts = Counter(trees) adjustments = 0 seen = set() for tree, count in sorted(tree_counts.items(), key=lambda item: -item[1]): while count > 1: count -= 1 new_tree_count = tree while new_tree_count in seen or new_tree_count in tree_counts: adjustments += 1 new_tree_count += 1 seen.add(new_tree_count) seen.add(tree) return adjustments"},{"question":"You are given an array of integers where every integer appears exactly twice, except for one integer which appears only once. Your task is to find the integer that appears only once. ------ Input ------ The input consists of multiple test cases. The first line contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains a single integer n (the number of elements in the array). - The second line contains n space-separated integers. ------ Output ------ For each test case, print the integer that appears only once in the array for that test case. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^6 The sum of n over all test cases does not exceed 10^6. ------ Sample Input ------ 2 7 4 3 2 4 1 3 2 5 1 2 3 2 1 ------ Sample Output ------ 1 3 ------ Explanation ------ In the first test case, the numbers 4, 3, and 2 appear twice while 1 appears only once. Hence, the output is 1. In the second test case, the numbers 1 and 2 appear twice while 3 appears only once. Hence, the output is 3. Note: Please write the complete solution code that finds the single occurring number for each test case efficiently.","solution":"def find_single_number(arr): Given an array where every element appears twice except for one element which appears once, this function finds the element that appears only once. unique_element = 0 for num in arr: unique_element ^= num # XOR-ing all elements will cancel out elements appearing twice return unique_element def solve_multiple_cases(input_data): Processes multiple test cases provided in input_data and returns results for each test case. results = [] index = 0 T = int(input_data[index]) # number of test cases index += 1 for _ in range(T): n = int(input_data[index]) # number of elements in the array index += 1 arr = list(map(int, input_data[index].split())) index += 1 results.append(find_single_number(arr)) return results"},{"question":"In a simulation game, players manage a farm with chickens. Each chicken can lay eggs, and we need to calculate the total number of eggs produced in a given period of days. However, the chicken can only lay eggs if it is fed every day with a special food. For simplicity, assume a chicken lays one egg per day when provided with this food. Develop a function to calculate the total number of eggs produced on a farm given the following parameters: - The number of chickens on the farm. - The number of days in the period. - A list representing the days on which each chicken is fed. The list of days contains sublists, where each sublist corresponds to a chicken and contains integers representing the days that particular chicken is fed. # Input - An integer `n` representing the number of chickens. - An integer `d` representing the number of days in the period. - A list of lists `feeding_days` where each sublist contains integers representing the days a particular chicken is fed. # Output - An integer representing the total number of eggs produced. # Example Input: ``` n = 3 d = 5 feeding_days = [ [1, 2, 3], [2, 3, 4, 5], [1, 5] ] ``` Output: ``` 9 ``` Explanation: - Chicken 1 is fed on days 1, 2, 3. It lays eggs on each of these days: 3 eggs. - Chicken 2 is fed on days 2, 3, 4, 5. It lays eggs on each of these days: 4 eggs. - Chicken 3 is fed on days 1 and 5. It lays eggs on each of these days: 2 eggs. Total eggs = 3 + 4 + 2 = 9 # Constraints - `1 ≤ n ≤ 100` - `1 ≤ d ≤ 100` - Each day in feeding_days for a chicken is a positive integer and ≤ d.","solution":"def total_eggs_produced(n, d, feeding_days): Calculates the total number of eggs produced on the farm. Parameters: n (int): Number of chickens. d (int): Number of days in the period. feeding_days (list of lists): List of sublists where each sublist contains integers representing the days a particular chicken is fed. Returns: int: Total number of eggs produced. total_eggs = 0 for chicken_feed in feeding_days: total_eggs += len(chicken_feed) return total_eggs"},{"question":"Given a binary tree, return a 2D list containing the vertical order traversal of the tree. For each vertical line, the nodes should be ordered from top to bottom. If two nodes have the same position, they should be ordered by their horizontal distance from the root (left to right). Example 1: Input: 3 / 9 20 / 15 7 Output: [[9], [3, 15], [20], [7]] Example 2: Input: 1 / 2 3 /| | 4 5 6 7 Output: [[4], [2], [1, 5, 6], [3], [7]] Your Task: You do not need to read input or print anything. Your task is to complete the function verticalOrderTraversal() which takes the root of the binary tree as input and returns the 2D list containing the vertical order traversal of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ Number of nodes ≤ 10^5 1 ≤ Node values ≤ 10^5","solution":"from collections import defaultdict, deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def verticalOrderTraversal(root: TreeNode): if not root: return [] column_table = defaultdict(list) queue = deque([(root, 0)]) while queue: node, column = queue.popleft() if node is not None: column_table[column].append(node.val) queue.append((node.left, column - 1)) queue.append((node.right, column + 1)) sorted_columns = sorted(column_table.keys()) return [column_table[column] for column in sorted_columns]"},{"question":"The kingdom of Nexoria has a rich history of agriculture, and rice is one of their most important crops. Every year, the kingdom organizes a grand rice distribution event where they distribute rice packets to their citizens based on a predetermined system. Each citizen is represented by a unique ID and a list of their preferred rice packet weights. The system works in such a way that every citizen will receive the heaviest packet they prefer, provided it is available. Once a packet is assigned to a citizen, it is no longer available for others. Given a list of available rice packet weights and a list of citizens along with their preferred weights, your task is to determine which packet each citizen will receive. If a citizen cannot receive any of their preferred packets, they receive no rice packet. Input The first line contains an integer n (1 ≤ n ≤ 1000) – the number of rice packets available. The next line contains n integers – the weights of the available rice packets. The third line contains an integer m (1 ≤ m ≤ 1000) – the number of citizens. The next m lines each contain the citizen ID followed by an integer k (1 ≤ k ≤ 1000), representing the number of preferred weights, followed by k integers – the weights of the preferred rice packets in descending order of preference. Output For each citizen, output a line consisting of their ID followed by the weight of the rice packet they receive or -1 if they receive no packet. Example Input 5 10 20 30 40 50 3 1 2 50 10 2 3 20 10 5 3 1 30 Output 1 50 2 20 3 30 Explanation Citizen 1 receives the 50-pound packet. Citizen 2 receives the 20-pound packet since the 50-pound packet is no longer available. Citizen 3 receives the 30-pound packet.","solution":"def distribute_rice_packets(n, packet_weights, m, citizens): Determines which rice packet each citizen will receive based on their preferences. Parameters: n (int): The number of rice packets available. packet_weights (list of ints): The weights of the available rice packets. m (int): The number of citizens. citizens (list of tuples): Each tuple contains a citizen ID followed by a list of preferred packet weights. Returns: list of tuples: Each tuple contains a citizen ID and the weight of the rice packet they receive or -1 if they receive none. from collections import defaultdict # Sort the rice packets in descending order packet_weights.sort(reverse=True) # Create a dictionary to keep track of which packets are taken taken_packets = defaultdict(bool) results = [] for citizen_id, prefs in citizens: assigned_packet = -1 for pref in prefs: if pref in packet_weights and not taken_packets[pref]: assigned_packet = pref taken_packets[pref] = True break results.append((citizen_id, assigned_packet)) return results # Example usage n = 5 packet_weights = [10, 20, 30, 40, 50] m = 3 citizens = [(1, [50, 10]), (2, [20, 10, 5]), (3, [30])] print(distribute_rice_packets(n, packet_weights, m, citizens))"},{"question":"Given an array of N distinct integers, where the array has been rotated clockwise by some unknown number of positions (K), find the original sorted array. Example 1: Input: N = 7 Arr[] = {5, 6, 7, 1, 2, 3, 4} Output: 1 2 3 4 5 6 7 Example 2: Input: N = 5 Arr[] = {8, 9, 1, 3, 4} Output: 1 3 4 8 9 Your Task: You don\'t need to read input or print anything. Your task is to complete the function findOriginalSorted() which takes the array of integers arr and its size n as input parameters and returns the original sorted array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ Arr[i] ≤ 10^9","solution":"def findOriginalSorted(arr, n): Returns the original sorted array from the rotated array. :param arr: List of integers representing the rotated array :param n: Integer representing the length of the array :return: List of integers representing the original sorted array # Find the index of the smallest element which is the point of rotation min_index = arr.index(min(arr)) # Create the original sorted array by concatenating the subarrays original_sorted_array = arr[min_index:] + arr[:min_index] return original_sorted_array"},{"question":"Geek Ramesh is trapped in a maze-like cave system containing mysterious treasure chests. The cave can be represented as a grid where each cell can either be empty, contain a treasure chest, or be a blocked wall. Ramesh can move up, down, left, or right, but cannot move diagonally or pass through walls. His objective is to find the shortest path from the cell he starts in to a specific cell containing a treasure chest. Given the layout of the cave, help Ramesh determine the minimum number of moves required to reach the treasure chest from his starting position. If there is no path to the treasure chest, return -1. Input The first line of input contains a single integer `t` (1 ≤ t ≤ 20), representing the number of test cases. The description for each test case follows: - The first line of each test case contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 100, 1 ≤ k ≤ n*m), representing the number of rows in the grid, the number of columns in the grid, and the number of treasure chests, respectively. - The second line contains two integers `start_x` and `start_y` (0 ≤ start_x < n, 0 ≤ start_y < m), representing the starting cell of Ramesh. - The next `n` lines each contain `m` characters. Each character represents a cell in the grid and can be either \'.\' (an empty cell), \'#\' (a blocked wall), or \'T\' (a treasure chest). Output For each test case, print a single integer: the minimum number of moves required to reach the nearest treasure chest. If no path to a treasure chest exists, print -1. Example Input: 2 5 5 2 0 0 ..... ..#.. ..#T. ..#.. ...T. 3 3 1 0 0 .T. # ... Output: 5 1","solution":"from collections import deque def find_shortest_path_to_treasure(n, m, k, start_x, start_y, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_x, start_y, 0)]) visited = set((start_x, start_y)) while queue: x, y, steps = queue.popleft() if grid[x][y] == \'T\': return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 def get_min_moves(test_cases): results = [] for test in test_cases: n, m, k = test[\'n\'], test[\'m\'], test[\'k\'] start_x, start_y = test[\'start_x\'], test[\'start_y\'] grid = test[\'grid\'] result = find_shortest_path_to_treasure(n, m, k, start_x, start_y, grid) results.append(result) return results"},{"question":"Background A common task in programming is to calculate the frequency of elements in a list. This problem is a variation of the classic word frequency problem, but with a twist. Instead of simply counting the frequency of elements, you will be required to find the most frequent element and then reverse the characters of the most frequent element. Requirement Write a function named `reverse_most_frequent` that takes a list of strings and returns the string that is the most frequent in the list but with its characters reversed. In the case of a tie (more than one element with the same highest frequency), return the reversed version of the lexicographically smallest element. Example ```python reverse_most_frequent([\'apple\', \'banana\', \'apple\', \'cherry\', \'banana\', \'banana\']) # returns \'ananab\' reverse_most_frequent([\'cat\', \'dog\', \'dog\', \'cat\', \'bird\']) # returns \'tac\' because \'cat\' and \'dog\' both have the highest frequency, but \'cat\' is lexicographically smaller ``` Assumptions 1) The input list will always contain at least one element. 2) All elements in the list are non-empty strings containing only lowercase English letters. 3) The input list may contain multiple elements with the same frequency but different lexicographical order. Sample Input and Output ```python reverse_most_frequent([\'orange\', \'banana\', \'orange\', \'apple\', \'banana\', \'banana\']) # Expected Output: \'ananab\' reverse_most_frequent([\'x\', \'y\', \'z\', \'x\', \'y\', \'y\']) # Expected Output: \'y\' ``` Please ensure your function handles edge cases and adheres to the given assumptions.","solution":"from collections import Counter def reverse_most_frequent(strings): Finds the most frequent element in the list and returns it with characters reversed. In case of a tie, returns the reversed version of the lexicographically smallest element. # Count the frequency of elements in the list freq_counter = Counter(strings) # Find the highest frequency max_freq = max(freq_counter.values()) # Filter elements with the max frequency candidates = [word for word, count in freq_counter.items() if count == max_freq] # Find the lexicographically smallest element among the candidates smallest = min(candidates) # Return the reversed smallest element return smallest[::-1]"},{"question":"Anagram Pairs Given a list of strings, determine the number of pairs of strings (i, j) such that string i and string j are anagrams of each other. Two strings are considered anagrams if they contain the same characters with the same frequencies but in possibly different orders. Input Format The first line contains the number of test cases, T. Each test case starts with an integer N, the number of strings in the list. The next N lines each contain a string. Output Format Output T lines, one for each test case, containing the number of anagram pairs. Constraints: 1 leq T leq 10 1 leq N leq 1000 Each string will have at most 100 lowercase characters (\'a\' - \'z\'). Sample Input 2 4 listen silent enlist google 3 abc bac xyz Sample Output 3 1 Explanation For the first test case, the strings \\"listen\\", \\"silent\\", and \\"enlist\\" are all anagrams of each other, forming 3 pairs: (listen, silent), (listen, enlist), and (silent, enlist). \\"google\\" does not have any anagram pair. For the second test case, \\"abc\\" and \\"bac\\" are anagrams, forming 1 pair. \\"xyz\\" does not have any anagram pair.","solution":"def count_anagram_pairs(test_cases): from collections import defaultdict results = [] for case in test_cases: N, strings = case anagram_groups = defaultdict(int) for s in strings: sorted_s = \'\'.join(sorted(s)) anagram_groups[sorted_s] += 1 count_pairs = sum(count * (count - 1) // 2 for count in anagram_groups.values()) results.append(count_pairs) return results"},{"question":"You are given a string S consisting of uppercase English letters and a string T which is a subsequence of S. Write a program that finds the smallest window in S that contains all the characters of T in the same order as they appear in T. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains the string S of length N (1 le N le 100000). The second line contains the string T of length M (1 le M le N). -----Output----- Output the starting and ending indices (1-based) of the smallest window in S that contains T as a subsequence. If no such window exists, print -1. -----Examples----- Sample Input 1: ADOBECODEBANC ABC Sample Output 1: 1 6 Sample Input 2: HELLO LO Sample Output 2: 4 5 Sample Input 3: HELLO WORLD Sample Output 3: -1","solution":"def smallest_window_with_subsequence(S, T): S_len, T_len = len(S), len(T) dp = [[-1] * (T_len + 1) for _ in range(S_len + 1)] for i in range(S_len + 1): dp[i][0] = i for i in range(1, S_len + 1): for j in range(1, T_len + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = dp[i - 1][j] start, min_len = -1, float(\'inf\') for i in range(1, S_len + 1): if dp[i][T_len] != -1: cur_len = i - dp[i][T_len] if cur_len < min_len: min_len = cur_len start = dp[i][T_len] if start == -1: return -1 else: return start + 1, start + min_len"},{"question":"In a magical kingdom, there are M enchanted stones, each with a unique power level. The power levels are represented as integers. The kingdom\'s wizard wants to create a special spell by selecting some of these stones so that the sum of the selected stones\' power levels is exactly K. Help the wizard determine if it is possible to achieve the sum K by selecting some (or all) of the stones. If it is possible to achieve the sum K, print \\"YES\\", otherwise print \\"NO\\". -----Input:----- - First line consists of two integers M (total number of stones) and K (desired power level sum). - Second line contains M integers representing the power levels of the stones. -----Output:----- - Print \\"YES\\" if it is possible to achieve the sum K, otherwise print \\"NO\\". -----Sample Input----- 5 9 1 2 3 4 5 -----Sample Output----- YES -----Constraints----- - 1 leq M leq 20 - 0 leq K leq 1000 - 1 leq Power Level of Each Stone leq 100","solution":"def can_achieve_sum(M, K, stones): Determines if it is possible to achieve a sum K by selecting some or all of the stones. Parameters: M (int): Total number of stones. K (int): Desired power level sum. stones (list): List of integers representing the power levels of the stones. Returns: str: \\"YES\\" if the sum K can be achieved, otherwise \\"NO\\". # Using dynamic programming approach dp = [False] * (K + 1) dp[0] = True for stone in stones: for j in range(K, stone - 1, -1): dp[j] = dp[j] or dp[j - stone] return \\"YES\\" if dp[K] else \\"NO\\""},{"question":"In the kingdom of Petrovia, there are m magical trees arranged in a row. Each tree has a certain number of magical fruits, and these fruits grow with a specific growth rate per day. Petrovian farmers can harvest the fruits from a subarray of these trees, and they want to maximize the total number of fruits harvested in any given subarray after k days have passed since planting. You are tasked with finding the subarray of trees that will yield the maximum number of fruits after k days. Input Format: - The first line contains an integer m denoting the number of trees. - The next line contains m space-separated integers representing the initial number of magical fruits on each tree. - The next line contains m space-separated integers representing the daily growth rate of magical fruits for each tree. - The next line contains an integer k denoting the number of days since planting. Output Format: - Output the maximum number of fruits that can be harvested from any contiguous subarray of trees after k days. Constraints: - 1 ≤ m ≤ 10^5 - 0 ≤ initial number of fruits on any tree ≤ 10^3 - 1 ≤ daily growth rate of any tree ≤ 10 - 1 ≤ k ≤ 10^3 Example Input: 5 2 3 1 4 2 1 2 1 3 2 2 Example Output: 31 Explanation: After 2 days, the number of fruits on each tree will be: - Tree 1: 2 + 2*1 = 4 - Tree 2: 3 + 2*2 = 7 - Tree 3: 1 + 2*1 = 3 - Tree 4: 4 + 2*3 = 10 - Tree 5: 2 + 2*2 = 6 The subarray with the maximum number of fruits is [4, 7, 3, 10, 6] with a total of 4 + 7 + 3 + 10 + 6 = 30. Thus, the maximum number of fruits that can be harvested from any subarray after 2 days is 30.","solution":"def max_fruits_harvested(m, initial_fruits, growth_rates, k): Calculate the maximum number of fruits harvested from any subarray of trees after k days. Parameters: m (int): Number of trees. initial_fruits (list): Initial number of fruits on each tree. growth_rates (list): Daily growth rate of fruits on each tree. k (int): Number of days since planting. Returns: int: Maximum number of fruits that can be harvested from any contiguous subarray of trees. # Calculate the number of fruits on each tree after k days fruits_after_k_days = [initial_fruits[i] + k * growth_rates[i] for i in range(m)] # Kadane\'s algorithm to find the maximum sum of any subarray max_ending_here = max_so_far = fruits_after_k_days[0] for x in fruits_after_k_days[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"A picture captioning tool is being developed that offers a witty caption based on the description of an image. The goal is to generate short, humorous captions given a fixed set of keywords associated with each image. As the lead developer, you need to implement a system that decides how old our imaginary photo editor has become during the caption creation process. Given the editor\'s age and the keyword list for each image, update the editor\'s age based on the length of the keyword list. The editor\'s age increases by 1 year for every keyword over 3 and decreases by 1 year for every keyword under 3. Your task is to write a function that calculates the editor\'s new age and determines a personalized message. INPUT The input consists of multiple test cases. The first line contains T, the number of test cases. Each test case contains two lines. The first line of each test case contains two space-separated integers, X and M. X is the current age of the editor, and M is the number of keywords associated with the image. The second line contains M space-separated strings representing the keywords. OUTPUT For each test case, print the editor\'s new age and a personalized message: - If the new age is less than or equal to 0, print \\"{new age}: You seem way too young!\\" - If the new age is between 1 and 99, print \\"{new age}: A perfect age to be creative!\\" - If the new age is 100 or older, print \\"{new age}: Ah, the wisdom of experience!\\" CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ X ≤ 100 1 ≤ M ≤ 50 1 ≤ length of any keyword ≤ 15 SAMPLE INPUT 2 25 4 sunset beach vacation happy 30 2 cute puppy SAMPLE OUTPUT 26: A perfect age to be creative! 29: A perfect age to be creative! Explanation For the first test case: The current age is 25. There are 4 keywords, which is 1 keyword more than 3, so the editor\'s age increases by 1. The new age is 26, which falls into the range [1, 99], resulting in the message \\"A perfect age to be creative!\\" For the second test case: The current age is 30. There are 2 keywords, which is 1 keyword less than 3, so the editor\'s age decreases by 1. The new age is 29, which also falls into the range [1, 99], resulting in the message \\"A perfect age to be creative!\\"","solution":"def calculate_editor_age(test_cases): results = [] for tc in test_cases: X, M = tc[0] keywords = tc[1] age_difference = M - 3 new_age = X + age_difference if new_age <= 0: message = f\\"{new_age}: You seem way too young!\\" elif 1 <= new_age <= 99: message = f\\"{new_age}: A perfect age to be creative!\\" else: message = f\\"{new_age}: Ah, the wisdom of experience!\\" results.append(message) return results # Example usage: test_cases = [ [(25, 4), [\\"sunset\\", \\"beach\\", \\"vacation\\", \\"happy\\"]], [(30, 2), [\\"cute\\", \\"puppy\\"]] ] print(calculate_editor_age(test_cases))"},{"question":"problem You are given several boxes, each containing some amount of candies of either the type chocolate or vanilla. You need to evenly distribute these boxes among two children in such a way that both children get an equal number of boxes and the total number of candies that each child receives is as close as possible. If it is not possible to split the boxes evenly, indicate that as well. Each box contains a string in the format \\"<type> <quantity>\\", where <type> is either \\"chocolate\\" or \\"vanilla\\", and <quantity> is an integer representing the amount of candies in that box. You need to write a program that determines the best distribution or states it is not possible. Input The first line contains the number of boxes, n (an even integer). The next n lines each contain the description of a box. Output Output the minimum possible absolute difference between the total candies received by each child. If it is not possible to split the boxes evenly, output -1. Example Input 4 chocolate 10 vanilla 5 chocolate 20 vanilla 15 Output 0","solution":"def distribute_boxes(boxes): Returns the minimum possible absolute difference between the total candies each child receives if it is possible to evenly distribute the boxes among the two children. If it is not possible, return -1. n = len(boxes) # If the number of boxes is odd, distribution is not possible if n % 2 != 0: return -1 candies = [int(box.split()[1]) for box in boxes] # Find total number of candies total_candies = sum(candies) # We are trying to find a subset with sum closest to total_candies / 2 desired_sum = total_candies // 2 # DP array to keep track of feasible sums with subset sizes up to n//2 dp = [[False] * (desired_sum + 1) for _ in range(n//2 + 1)] dp[0][0] = True for candy in candies: for i in range(n//2, 0, -1): # Iterate over subset sizes for j in range(desired_sum, candy - 1, -1): # Iterate over possible sums dp[i][j] = dp[i][j] or dp[i-1][j-candy] # Find the maximum sum feasible with n//2 boxes <= desired_sum for sum_with_half_boxes in range(desired_sum, -1, -1): if dp[n//2][sum_with_half_boxes]: break sum_with_other_half_boxes = total_candies - sum_with_half_boxes return abs(sum_with_other_half_boxes - sum_with_half_boxes)"},{"question":"Alice loves playing with strings, and she is particularly interested in palindromic substrings. A substring is any sequence of characters within a string that appear in the same order as they appear in the original string. A substring is palindromic if it reads the same forwards and backwards. Given a string S of length N, Alice wants to calculate the length of the longest palindromic substring within S. Input The first line of input contains an integer T, the number of test cases. The following T lines contain a single string S each. Output For each test case, output a single integer, the length of the longest palindromic substring of the corresponding string. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 All strings contain only lowercase English letters. SAMPLE INPUT 3 babad cbbd a SAMPLE OUTPUT 3 2 1 Explanation For the first test case \\"babad\\" the longest palindromic substring is \\"bab\\" or \\"aba\\" with length 3. For the second test case \\"cbbd\\" the longest palindromic substring is \\"bb\\" with length 2. For the third test case \\"a\\" the longest palindromic substring is \\"a\\" with length 1.","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring. n = len(s) if n == 0: return 0 # Table to store results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromic by default max_length = 1 for i in range(n): dp[i][i] = True # Check for sub-strings of length 2 start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length def longest_palindromic_substring_all_cases(test_cases): Processes multiple test cases and returns the length of the longest palindromic substrings. results = [] for s in test_cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"You are given a grid with `N` rows and `M` columns and each cell contains a certain number of rocks. You start from the top-left corner of the grid (cell (0,0)) and your goal is to reach the bottom-right corner of the grid (cell (N-1,M-1)). You can only move down or to the right at any point in time. When you move to a cell, you collect the rocks in that cell. Your task is to determine the maximum number of rocks you can collect when you reach the bottom-right corner of the grid. Write a function `maxRocks` that takes in a 2D list of integers `grid` representing the grid where `grid[i][j]` is the number of rocks in the cell at row `i` and column `j`, and returns the maximum number of rocks you can collect. **Example:** ```python def maxRocks(grid): # Your code here # Example input grid = [ [0, 2, 2], [1, 3, 1], [0, 1, 5] ] maxRocks(grid) # Should return 11 ``` **Explanation:** Starting from the top-left corner (0,0), you collect 0 rocks. - Move right to (0,1), collect 2 rocks (total: 2). - Move right to (0,2), collect 2 rocks (total: 4). - Move down to (1,2), collect 1 rock (total: 5). - Move down to (2,2), collect 5 rocks (total: 10). The maximum number of rocks collectible is therefore 10. **Constraints:** * 1 ≤ N, M ≤ 100 * 0 ≤ grid[i][j] ≤ 100","solution":"def maxRocks(grid): if not grid: return 0 N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"You are given an array of integers representing the daily temperatures. You need to implement a function that returns an array such that for each day in the input, it tells you how many days you have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 in that position. Implement a function that solves this problem in linear time. Input The first line contains an integer n (1 ≤ n ≤ 100000) representing the number of days. The second line contains n integers separated by a space where each integer represents the daily temperatures (0 ≤ temperatures[i] ≤ 100). Output Output a list of n integers separated by a space, where each integer represents the number of days to wait for a warmer temperature. If there is no future day with a warmer temperature, output 0 for that day. Examples Input 7 73 74 75 71 69 72 76 Output 1 1 4 2 1 1 0 Input 5 30 40 50 60 70 Output 1 1 1 1 0","solution":"def daily_temperatures(n, temperatures): Returns an array of days to wait until a warmer temperature for each day. result = [0] * n # initialize the result array with 0s stack = [] # stack to keep indexes of temperatures for i in range(n): # while stack is not empty and the current temperature is higher than # the temperature at the index stored at the top of the stack while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() # pop from the stack result[prev_index] = i - prev_index # calculate the difference stack.append(i) # push current index onto the stack return result"},{"question":"Alex and Jamie are playing a game with strings. The game involves constructing a special new string by using characters from two input strings, s and t, both of which consist of lowercase English letters. The goal is to determine the length of the longest string that can be formed which is a subsequence of both s and t. A subsequence of a string is derived by deleting some (or none) of the characters without changing the order of the remaining characters. For example, for s = \\"abcde\\" and t = \\"ace\\", the longest common subsequence is \\"ace\\" of length 3. Your task is to write a program that calculates the length of the longest common subsequence for a given pair of strings s and t. -----Input----- The first line contains an integer q (1 le q le 1000) — the number of test cases. Each of the next q lines contains two strings s and t with lengths 1 le |s|, |t| le 100. -----Output----- For each test case, output a single integer — the length of the longest common subsequence of s and t. -----Examples----- Input 3 abcde ace abc qwerty abcd efgh Output 3 0 0 -----Note----- In the first test case, the longest common subsequence of \\"abcde\\" and \\"ace\\" is \\"ace\\", which has a length of 3. In the second test case, the strings \\"abc\\" and \\"qwerty\\" have no common subsequence, resulting in a length of 0. In the third test case, there is no common subsequence between \\"abcd\\" and \\"efgh\\", resulting in a length of 0.","solution":"def longest_common_subsequence(s, t): Returns the length of the longest common subsequence of s and t. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_test_cases(q, test_cases): Processes multiple test cases and returns a list of results. results = [] for s, t in test_cases: results.append(longest_common_subsequence(s, t)) return results"},{"question":"# Task Given an array of positive integers, determine if the array can be divided into two subsets that have equal sums. Write a function that takes a list of integers and returns `True` if the array can be split into two parts with equal sum, otherwise return `False`. You may assume all the integers in the array are positive and the length of the array will not exceed 200. # Example For array `[1, 5, 11, 5]`, the output should be `True`. The array can be partitioned into `[1, 5, 5]` and `[11]`, both with a sum of 11. For array `[1, 2, 3, 5]`, the output should be `False`. The array cannot be partitioned into two subsets with equal sum.","solution":"def can_partition(nums): Determine if the array can be divided into two subsets that have equal sums. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to split it into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 # Use dynamic programming to check if we can find a subset with sum equal to target can_partition = [False] * (target + 1) can_partition[0] = True for num in nums: for i in range(target, num - 1, -1): if can_partition[i - num]: can_partition[i] = True return can_partition[target]"},{"question":"Jayden loves the aesthetics of numbers. He has recently come across an interesting property called \\"Colorful Numbers.\\" A number is considered colorful if the product of every digit of a contiguous subsequence is unique. For example, 324 is a colorful number because: - The single digits are: 3, 2, and 4 - The products of pairs of digits are: 3*2=6, 2*4=8, and 3*4=12 - The product of all three digits is: 3*2*4=24 All these products (3, 2, 4, 6, 8, 12, 24) are unique. However, 232 is not a colorful number because: - The single digits are: 2, 3, and 2 - The products of pairs of digits are: 2*3=6, 3*2=6, and 2*2=4 - The product of all three digits is: 2*3*2=12 Here, the product 6 is repeated. Given an integer n, write a program that determines if the number n is colorful or not. Input The input contains a single integer n (1 ≤ n ≤ 10^9). Output Output \\"Colorful\\" if the number is a colorful number; otherwise, output \\"Not Colorful.\\" Examples Input 324 Output Colorful Input 232 Output Not Colorful Input 263 Output Colorful","solution":"def is_colorful_number(n): Determines if a number n is colorful or not. A number is colorful if the product of every digit of a contiguous subsequence is unique. Args: n (int): The input number. Returns: str: \\"Colorful\\" if the number is colorful, otherwise \\"Not Colorful\\". str_n = str(n) length = len(str_n) products = set() # Iterate over all possible contiguous subsequences for i in range(length): for j in range(i, length): # Calculate the product of digits from index i to j product = 1 for k in range(i, j + 1): product *= int(str_n[k]) # Check if the product is already in the set if product in products: return \\"Not Colorful\\" products.add(product) return \\"Colorful\\""},{"question":"**Statement** Given two strings s1 and s2, determine the length of the longest common subsequence (LCS) between the two strings. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. A common subsequence of two strings is a subsequence that is common to both strings. **Input** The first line contains an integer T, the number of test cases. Each of the next T pairs of lines contains: - The first line of each pair contains the string s1. - The second line of each pair contains the string s2. Both s1 and s2 contain only lowercase alphabets and their lengths do not exceed 1000. **Output** For each test case, output an integer that represents the length of the longest common subsequence between s1 and s2. **Sample Input** 2 abcde ace abc abc **Sample Output** 3 3","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def solve_lcs(test_cases): Solves multiple test cases and returns the list of LCS lengths. results = [] for s1, s2 in test_cases: results.append(longest_common_subsequence(s1, s2)) return results"},{"question":"In the world of Asgard, Thor faces a challenge to lift an enchanted hammer. The hammer can only be lifted if Thor can solve a puzzle that manipulates a sequence of numbers. Given a sequence of integers, Thor must find the maximum length of any subsequence such that all elements of the subsequence are in increasing order. ---Input--- The first line contains an integer T (1 leq T leq 1000) representing the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 100) representing the number of elements in the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (-1000 leq a_i leq 1000). ---Output--- For each test case, output a single integer representing the maximum length of an increasing subsequence in the given sequence. ---Example--- Input 2 5 1 3 2 5 6 6 3 10 2 1 20 4 Output 4 3 ---Explanation--- For the first sequence [1, 3, 2, 5, 6], one of the longest increasing subsequences is [1, 3, 5, 6], which has a length of 4. For the second sequence [3, 10, 2, 1, 20, 4], one of the longest increasing subsequences is [3, 10, 20], which has a length of 3.","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest increasing subsequence. if not sequence: return 0 n = len(sequence) lis = [1] * n for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) def solve(thor_puzzle_cases): results = [] for case in thor_puzzle_cases: n, sequence = case results.append(longest_increasing_subsequence(sequence)) return results"},{"question":"Edge needs to invert his array of integers while preserving the position of zeros. He can move any non-zero integer to any position in the array but must keep all zeros in their original indices. Given an array of integers, write a function that returns the array with the non-zero integers reversed and zeros in their original positions. Example 1: Input: arr = [4, 0, 5, 0, 3, 2] Output: [2, 0, 3, 0, 5, 4] Explanation: The non-zero elements are [4, 5, 3, 2]. Reversed: [2, 3, 5, 4]. Placing zeros in original positions gives [2, 0, 3, 0, 5, 4]. Example 2: Input: arr = [0, 1, 0, 0, 2, 0] Output: [0, 2, 0, 0, 1, 0] Explanation: The non-zero elements are [1, 2]. Reversed: [2, 1]. Placing zeros in original positions gives [0, 2, 0, 0, 1, 0]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function invertArray() which takes a single argument(arr) and returns the inverted array with zeros in their original positions. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(arr) <= 1000 -10^6 <= arr[i] <= 10^6","solution":"def invertArray(arr): Returns the array with non-zero integers reversed and zeros in their original positions. # Extract non-zero numbers non_zero_numbers = [num for num in arr if num != 0] # Reverse the non-zero numbers non_zero_numbers.reverse() # Replace non-zero elements in original array with reversed non-zero elements result = [] non_zero_index = 0 for num in arr: if num != 0: result.append(non_zero_numbers[non_zero_index]) non_zero_index += 1 else: result.append(0) return result"},{"question":"Given an array of integers `nums` and an integer `k`, your task is to return the maximum number of unique integers among all possible contiguous subarrays of length `k` in the given array. A contiguous subarray is a sequence of elements within the original array that are adjacent to each other. -----Input----- - The first line contains two integers n and k (1 le k le n le 200,000), where n is the length of the array and k is the length of the subarray. - The second line contains n integers representing the elements of `nums` (1 le nums[i] le 10^9). -----Output----- - Print the maximum number of unique integers among all contiguous subarrays of length k. -----Examples----- Input 7 3 1 2 3 2 2 3 4 Output 3 Input 6 4 1 2 2 1 3 3 Output 3","solution":"def max_unique_integers_in_subarrays(nums, k): from collections import defaultdict n = len(nums) if n == 0 or k == 0: return 0 current_window = defaultdict(int) max_unique_count = 0 for i in range(k): current_window[nums[i]] += 1 max_unique_count = len(current_window) for i in range(k, n): current_window[nums[i]] += 1 current_window[nums[i - k]] -= 1 if current_window[nums[i - k]] == 0: del current_window[nums[i - k]] max_unique_count = max(max_unique_count, len(current_window)) return max_unique_count"},{"question":"Write a function named \\"max_subarray_sum\\" that takes a list of integers as input and returns the sum of the maximum subarray. A subarray is a contiguous part of an array. For example, the maximum subarray sum for the array [-2,1,-3,4,-1,2,1,-5,4] is 6, which corresponds to the subarray [4,-1,2,1]. Use Kadane\'s Algorithm to achieve an optimal solution with O(n) time complexity. If the input list is empty, the function should return 0.","solution":"def max_subarray_sum(nums): Returns the sum of the maximum subarray using Kadane\'s Algorithm. If the input list is empty, returns 0. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Compute the Cumulative Sum Write a function that takes a list of integers and returns a new list where each element at index `i` is the sum of all elements from the input list from index `0` to `i` (inclusive). # Examples: ``` cumulative_sum([1, 2, 3, 4]) -> [1, 3, 6, 10] cumulative_sum([4, 3, 2, 1]) -> [4, 7, 9, 10] cumulative_sum([1, -1, 3, -3]) -> [1, 0, 3, 0] ``` # Constraints: - The input list may contain both positive and negative integers. - The input list will have at least one element. - The input list may have up to 1000 elements. Create a function that will compute the cumulative sum as specified: ```if-not:haskell def cumulative_sum(lst): # Your code here pass ``` ```if:haskell cumulativeSum :: [Int] -> [Int] -- Your code here ``` # Explanation: The function should iterate through the input list, calculate the cumulative sum up to each index, and output this sequence as a new list.","solution":"def cumulative_sum(lst): Returns a new list where each element at index i is the sum of all elements from index 0 to i. Parameters: lst (List[int]): The input list of integers Returns: List[int]: A new list containing the cumulative sums result = [] current_sum = 0 for num in lst: current_sum += num result.append(current_sum) return result"},{"question":"A library system records the arrival and departure times of readers throughout the day. You need to determine the maximum number of readers present in the library at any time during the day. Write a function that takes two lists as input: the arrival times and the departure times of the readers, and returns the maximum number of readers present at the same time. Input The first line contains an integer N, the number of readers. The second line contains N integers representing the arrival times. The third line contains N integers representing the departure times. Output Print a single integer that represents the maximum number of readers present in the library at any given time. Constraints 1 ≤ N ≤ 1000 1 ≤ arrival[i], departure[i] ≤ 10^6 SAMPLE INPUT 5 1 2 9 5 5 4 5 12 9 7 SAMPLE OUTPUT 3","solution":"def max_readers(arrivals, departures): Determines the maximum number of readers present in the library at any given time. :param arrivals: List of arrival times of the readers. :param departures: List of departure times of the readers. :return: Maximum number of readers present at the same time. events = [] for i in range(len(arrivals)): events.append((arrivals[i], \'arrival\')) events.append((departures[i], \'departure\')) # Sort events, prioritizing arrivals if times are the same events.sort(key=lambda x: (x[0], x[1] == \'departure\')) current_readers = 0 max_readers = 0 for event in events: if event[1] == \'arrival\': current_readers += 1 max_readers = max(max_readers, current_readers) else: current_readers -= 1 return max_readers"},{"question":"In this problem, you are tasked with finding the first non-repeating character in a string. This is the first character that appears only once in the string, ignoring subsequent repeated characters. If every character repeats, the function should return \'_\'. For example: ```python first_non_repeating_character(\\"aabcc\\") -> \\"b\\" first_non_repeating_character(\\"xxyz\\") -> \\"y\\" first_non_repeating_character(\\"abcdef\\") -> \\"a\\" first_non_repeating_character(\\"aabbcc\\") -> \\"_\\" first_non_repeating_character(\\"abacaba\\") -> \\"c\\" ``` Write a function in your preferred language that follows this logic. Good luck!","solution":"def first_non_repeating_character(s): Finds the first non-repeating character in a string. If every character repeats, returns \'_\'. Args: s (str): The input string Returns: str: The first non-repeating character or \'_\' if all characters repeat. # Create a dictionary to count the occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Iterate over the string to find the first character that appears only once for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"Given a string W and an array of strings D of length N, where each element of D is a word. You need to find and return the array of words from D that contain all the characters (with exact frequency) of the given string W in any order. Example 1: Input: W = \\"abc\\" D = [\\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"cab\\", \\"bac\\", \\"abc\\", \\"bca\\"] Output: [\\"cab\\", \\"bac\\", \\"abc\\", \\"bca\\"] Explanation: The words \\"cab\\", \\"bac\\", \\"abc\\", and \\"bca\\" contain the characters \'a\', \'b\', and \'c\' each exactly once. Example 2: Input: W = \\"aabb\\" D = [\\"bbaacc\\", \\"baab\\", \\"abba\\", \\"bbab\\", \\"bbbaa\\", \\"aabbcc\\"] Output: [\\"baab\\", \\"abba\\"] Explanation: The words \\"baab\\" and \\"abba\\" contain both \'a\' and \'b\' twice. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMatchingWords() which takes a string W and an array of strings D as input and returns the array of matching words. Expected Time Complexity: O(N * M), where M is the length of each word in D. Expected Auxiliary Space: O(N * M), where M is the length of each word in D. Constraints: 1 ≤ Length of W ≤ 100 1 ≤ Length of D ≤ 10^4 1 ≤ Length of each word ∈ D ≤ 100","solution":"from collections import Counter def findMatchingWords(W, D): target_count = Counter(W) result = [] for word in D: if Counter(word) == target_count: result.append(word) return result"},{"question":"Given a list of integers, your task is to segregate the positive and negative numbers in the list. All the positive numbers should appear before the negative numbers while maintaining their respective order from the original list. Example 1: Input: arr = [12, -7, 5, -3, 9, -1] Output: [12, 5, 9, -7, -3, -1] Explanation: All positive numbers (12, 5, 9) appear before all the negative numbers (-7, -3, -1) maintaining their order of occurrence. Example 2: Input: arr = [-3, -2, -1, 1, 2, 3] Output: [1, 2, 3, -3, -2, -1] Explanation: All positive numbers (1, 2, 3) appear before all the negative numbers (-3, -2, -1) maintaining their order of occurrence. Your Task: You don\'t need to read input or print anything. Your task is to complete the function segregate_numbers() which takes a list of integers as input and returns the list with positive and negative numbers segregated while maintaining their relative order. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(arr) <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def segregate_numbers(arr): Segregate the positive and negative numbers in the list such that all the positive numbers appear before the negative numbers while maintaining their relative order. Parameters: arr (list): List of integers. Returns: list: List with positive numbers followed by negative numbers maintaining their order. positives = [num for num in arr if num >= 0] negatives = [num for num in arr if num < 0] return positives + negatives"},{"question":"You\'ve been tasked with creating a system for a library where books can be added, checked out, and returned. Each book is identified by a unique identifier (ID) and has a title. Patrons, identified by a unique ID, can check out books and return them. Implement the system so it can handle the following operations efficiently: 1. Adding a Book: This operation adds a new book to the library with a given ID and title. 2. Checking Out a Book: This operation allows a patron to check out a book from the library if it\'s available. 3. Returning a Book: This operation allows a patron to return a book they had previously checked out. 4. Listing Checked Out Books: This operation displays all books currently checked out by a specific patron, in the order they were checked out. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of operations. Each of the next `n` lines describes an operation with different parameters depending on the type: * If the operation is adding a book (type 1), the line contains: `1 book_id title`. * If the operation is checking out a book (type 2), the line contains: `2 patron_id book_id`. * If the operation is returning a book (type 3), the line contains: `3 patron_id book_id`. * If the operation is listing checked out books (type 4), the line contains: `4 patron_id`. The `book_id` and `patron_id` are integers (1 ≤ book_id, patron_id ≤ 10^5) and `title` is a string containing no spaces (1 ≤ |title| ≤ 100). Output For each listing operation (operation type 4), print the books checked out by the patron in the order they were checked out, each on a new line. If the patron has no books checked out, print \\"None\\". Ensure the output for listing operations appears in the order they are requested. Example Input ``` 7 1 1001 HarryPotter 1 1002 LordOfTheRings 2 2001 1001 2 2001 1002 4 2001 3 2001 1001 4 2001 ``` Output ``` 1001 HarryPotter 1002 LordOfTheRings 1002 LordOfTheRings ``` Note Explanation of the sample test: * First, we add two books \\"HarryPotter\\" with ID 1001 and \\"LordOfTheRings\\" with ID 1002 to the library. * Then, patron 2001 checks out both books. * The first listing operation shows the patron has both books checked out. * The patron then returns \\"HarryPotter\\". * The second listing operation shows the patron only has \\"LordOfTheRings\\" checked out.","solution":"class Library: def __init__(self): self.books = {} self.checked_out_books = {} self.patron_books = {} def add_book(self, book_id, title): self.books[book_id] = title def checkout_book(self, patron_id, book_id): if book_id in self.books and book_id not in self.checked_out_books: self.checked_out_books[book_id] = patron_id if patron_id not in self.patron_books: self.patron_books[patron_id] = [] self.patron_books[patron_id].append(book_id) def return_book(self, patron_id, book_id): if book_id in self.checked_out_books and self.checked_out_books[book_id] == patron_id: self.patron_books[patron_id].remove(book_id) del self.checked_out_books[book_id] def list_checked_out_books(self, patron_id): if patron_id in self.patron_books and self.patron_books[patron_id]: for book_id in self.patron_books[patron_id]: print(f\\"{book_id} {self.books[book_id]}\\") else: print(\\"None\\")"},{"question":"You are working on editing a list of tasks where each task has a deadline and a duration. Your goal is to determine the maximum number of tasks that can be completed before their deadlines. Each task is represented as a tuple `(deadline, duration)`. You need to: 1. Write a function `complete_tasks` that takes a list of tasks as input. 2. Implement a solution to determine the maximum number of tasks that can be completed before their deadlines. The tasks should be completed in the order that helps complete the maximum number of tasks on time. **Constraints**: - Each task can only be worked on one at a time. - The deadline represents the latest time by which the task must be completed. - The time starts at 0. ___ # Function Signature ```python def complete_tasks(tasks: List[Tuple[int, int]]) -> int: ``` - **Input**: A list of tuples where each tuple consists of two integers: `(deadline, duration)`. - **Output**: An integer representing the maximum number of tasks that can be completed on time. ___ # Examples: ```python tasks = [(4, 2), (2, 2), (3, 1)] print(complete_tasks(tasks)) # Output: 2 tasks = [(2, 1), (3, 2), (1, 1)] print(complete_tasks(tasks)) # Output: 2 tasks = [(1, 2), (2, 2), (3, 2)] print(complete_tasks(tasks)) # Output: 1 ``` # Explanation Example 1: - If we sort the tasks by their deadlines, we get [(2, 2), (3, 1), (4, 2)]. - By completing tasks in that order, we can fit in 2 tasks before their deadlines. Example 2: - Sorting tasks by their deadlines gives us [(1, 1), (2, 1), (3, 2)]. - We can complete the first two tasks before their deadlines.","solution":"from typing import List, Tuple def complete_tasks(tasks: List[Tuple[int, int]]) -> int: # Sort tasks primarily by deadline, and then by duration tasks.sort(key=lambda x: (x[0], x[1])) current_time = 0 completed_tasks = 0 for deadline, duration in tasks: if current_time + duration <= deadline: current_time += duration completed_tasks += 1 return completed_tasks"},{"question":"You are given an integer array of length N and an integer K. You can perform at most K operations to the array. In one operation, you can choose any subarray of the array and reverse it. You need to determine if it\'s possible to sort the entire array in non-decreasing order after performing at most K reverse operations. Write a function to determine if it\'s possible to sort the array in non-decreasing order with at most K reverse operations. Input The input consists of an integer T, the number of test cases you need to run. Each test case consists of two lines: - The first line contains two integers N and K (1 leq N leq 1000, 1 leq K leq 100), where N is the length of the array and K is the maximum number of reverse operations allowed. - The second line contains N integers A_1, A_2, ..., A_N (0 leq A_i leq 1000), which represents the array. Output For each test case, print \\"YES\\" if it\'s possible to sort the array in non-decreasing order with at most K reverse operations. Otherwise, print \\"NO\\". Examples Input 3 5 1 3 2 1 5 4 4 2 1 4 3 2 5 0 4 3 2 1 5 Output NO YES NO","solution":"def can_sort_with_k_operations(N, K, A): sorted_A = sorted(A) # If the array is already sorted if A == sorted_A: return \\"YES\\" # When K is zero and array is not sorted if K == 0: return \\"NO\\" # Check the sorted segments segments = [] start = 0 for i in range(1, N): if A[i] < A[i - 1]: segments.append(A[start:i]) start = i segments.append(A[start:N]) # Minimum number of operations to sort these segments min_operations_needed = len(segments) - 1 if min_operations_needed <= K: return \\"YES\\" else: return \\"NO\\" def can_sort_arrays(T, test_cases): results = [] for case in test_cases: N, K = case[0] A = case[1] results.append(can_sort_with_k_operations(N, K, A)) return results"},{"question":"You are adventurous and love exploring mysterious caves. Today, you plan to venture into a cave that contains a unique puzzle involving a sequence of stones. Each stone is inscribed with a number and emits a different colored light. A mystical force changes the arrangement of the sequence periodically. The cave guardian challenges visitors to solve a puzzle involving these stones. The challenge is to determine the maximum product of the numbers of any two distinct stones in the sequence. The guardian kindly provides a sequence of numbers on the stones but warns you that if any number appears more than once, the puzzle cannot be solved. Your task is to compute the maximum product of two distinct numbers in the sequence or determine if the puzzle cannot be solved. -----Input----- The first line contains an integer n (2 ≤ n ≤ 10^5), the number of stones. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) representing the numbers on the stones. -----Output----- Output a single integer, the maximum product of two distinct numbers in the sequence. If it\'s not possible to form such a pair, print -1 instead. -----Examples----- Input 4 1 2 3 4 Output 12 Input 3 2 2 2 Output -1 -----Note----- In the first sample case, the highest possible product of two distinct numbers is 3 * 4 = 12. In the second sample case, all the numbers are the same, so it is not possible to form a pair of distinct numbers, and the output is -1.","solution":"def max_product_of_two_stones(n, stones): Returns the maximum product of two distinct numbers in the sequence or -1 if not possible. Parameters: n (int): The number of stones. stones (list of int): A list containing the numbers on the stones. Returns: int: The maximum product of two distinct numbers or -1 if it is not possible. if len(stones) != len(set(stones)): return -1 # If there are duplicates, return -1 # Sort the stones in ascending order sorted_stones = sorted(stones) # Return the product of the two largest distinct numbers return sorted_stones[-1] * sorted_stones[-2]"},{"question":"You are given an integer array arr of size n containing distinct integers. We want to form multiple groups from the array such that each group contains three elements and the absolute difference between the maximum and minimum element in each group is less than or equal to a given integer k. Once a group is formed, those elements are removed from the array. Print the maximum number of such groups that can be formed. # Constraints - 1 leq n leq 10^5 - 1 leq arr[i] leq 10^9 - 1 leq k leq 10^9 # Input Format - The first line contains two space-separated integers n and k. - The second line contains n space-separated integers, the elements of arr. # Output Format - Output a single integer denoting the maximum number of groups that can be formed. # Sample Input ``` 7 3 1 3 5 6 7 9 10 ``` # Sample Output ``` 2 ``` # Explanation We can form the groups as follows: - Group 1: {1, 3, 6} (absolute difference is 5, which is not ≤ 3) - Group 1: {1, 3, 5} (absolute difference is 4, which is not ≤ 3) - Group 1: {1, 3, 7} (absolute difference is 6, which is not ≤ 3) - Group 1: {1, 3, 9} (absolute difference is 8, which is not ≤ 3) - Group 1: {1, 3, 10} (absolute difference is 9, which is not ≤ 3) - Group 1: {3, 5, 6} (absolute difference is 3, which is ≤ 3) - Group 2: {7, 9, 10} (absolute difference is 3, which is ≤ 3) So, the formed groups are: - {3, 5, 6} - {7, 9, 10} The maximum number of groups that can be formed is 2.","solution":"def max_groups(n, k, arr): arr.sort() count = 0 i = 0 while i + 2 < n: if arr[i+2] - arr[i] <= k: count += 1 i += 3 else: i += 1 return count"},{"question":"Write a function that takes a list of integers and returns a list of the same integers sorted in ascending order, except that all prime numbers should come first, in the original order they appeared in the input list. Examples: ``` Input: [29, 4, 17, 2, 1, 23, 8] Output: [29, 17, 2, 23, 1, 4, 8] Input: [11, 13, 15, 16, 18, 19] Output: [11, 13, 19, 15, 16, 18] Input: [3, 14, 7, 27, 9, 5] Output: [3, 7, 5, 9, 14, 27] ``` Hint: You may write a helper function to check if a number is prime.","solution":"def is_prime(n): Return True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True def sort_special(nums): Returns a list of the numbers sorted such that prime numbers come first in their original order followed by non-prime numbers in ascending order. primes = [num for num in nums if is_prime(num)] non_primes = sorted([num for num in nums if not is_prime(num)]) return primes + non_primes"},{"question":"Most sophisticated programs and databases often involve parsing and manipulating hierarchical data structures such as JSON files. A common task involves flattening such a structure for easier processing or storage. Consider a simplified case where each record in the JSON contains only dictionary data. Your task is to flatten such a nested structure. Flattening in this context means converting a nested JSON structure into a single-level dictionary with compound keys to represent the hierarchy. For example, if the JSON is: ```json { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } }, \\"f\\": 4 } ``` The flattened structure should be: ```json { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"f\\": 4 } ``` Write a Python function `flatten_json` that takes a nested dictionary and returns its flattened version. The keys in the nested dictionary will be compound strings where different levels are separated by dots (`.`). -----Input----- - A single dictionary data structure that represents the JSON. -----Output----- - A single-level dictionary with flattened keys. -----Examples----- Input ```python { \\"name\\": \\"John\\", \\"info\\": { \\"age\\": 30, \\"address\\": { \\"city\\": \\"New York\\", \\"zipcode\\": 10001 } } } ``` Output ```python { \\"name\\": \\"John\\", \\"info.age\\": 30, \\"info.address.city\\": \\"New York\\", \\"info.address.zipcode\\": 10001 } ``` Input ```python { \\"company\\": { \\"name\\": \\"Tech Corp\\", \\"employees\\": { \\"count\\": 100, \\"details\\": { \\"engineering\\": 75, \\"hr\\": 25 } } } } ``` Output ```python { \\"company.name\\": \\"Tech Corp\\", \\"company.employees.count\\": 100, \\"company.employees.details.engineering\\": 75, \\"company.employees.details.hr\\": 25 } ``` Input ```python { \\"a\\": { \\"b\\": { \\"c\\": { \\"d\\": 1 } } } } ``` Output ```python { \\"a.b.c.d\\": 1 } ``` Input ```python { \\"person\\": { \\"name\\": \\"Doe\\", \\"details\\": {} } } ``` Output ```python { \\"person.name\\": \\"Doe\\" } ``` -----Note----- - Empty dictionaries should be omitted in the flattened structure. - The input JSON will not contain arrays or non-dictionary structures.","solution":"def flatten_json(nested_dict, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Parameters: nested_dict (dict): The dictionary to flatten. parent_key (str): The base key string for recursion. Defaults to \'\'. sep (str): Separator for key concatenation. Defaults to \'.\'. Returns: dict: A flattened dictionary. items = [] for k, v in nested_dict.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict) and v: items.extend(flatten_json(v, new_key, sep).items()) elif v or v == 0: # Include 0 values items.append((new_key, v)) return dict(items)"},{"question":"Your task is to find the shortest substring of a given string `s` that contains all the unique characters of `s`. Return the length of that substring. The string will only contain lowercase English letters. # Example: ``` Input: \\"abca\\" Output: 3 Explanation: The unique characters in the string are \\"a\\", \\"b\\", and \\"c\\". The shortest substring containing all these characters is \\"abc\\". Input: \\"aabcbcdbca\\" Output: 4 Explanation: The unique characters in the string are \\"a\\", \\"b\\", \\"c\\", and \\"d\\". The shortest substring containing all these characters is \\"dbca\\". Input: \\"aaaaaa\\" Output: 1 Explanation: The unique character in the string is \\"a\\". The shortest substring containing this character is \\"a\\". ``` You would need to handle various lengths of input efficiently in both time and space complexity.","solution":"def shortest_unique_substring_length(s): Returns the length of the shortest substring of `s` that contains all unique characters of `s`. unique_chars = set(s) required_char_count = len(unique_chars) char_count = {} left = 0 min_length = float(\'inf\') for right in range(len(s)): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) == required_char_count: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_length"},{"question":"Given a string S containing only square brackets \'[\' and \']\', find the length of the longest substring that forms a valid bracket sequence. A valid bracket sequence is one where each \'[\' has a matching \']\' and brackets are correctly nested. Example 1: Input: S = \\"[]][[\\" Output: 2 Explanation: The longest valid bracket substring is \\"[]\\". Example 2: Input: S = \\"[[][]]\\" Output: 6 Explanation: The entire string is a valid bracket sequence. Your Task: You don\'t need to read input or print anything. Complete the function longestValidSubstring() which takes the string S as an input parameter and returns an integer denoting the length of the longest valid bracket substring. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= length of S <= 10^5","solution":"def longestValidSubstring(S): Returns the length of the longest valid bracket substring. stack = [] max_length = 0 last_invalid = -1 # position before the start of the string for i in range(len(S)): if S[i] == \'[\': stack.append(i) else: if stack: stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: max_length = max(max_length, i - last_invalid) else: last_invalid = i return max_length"},{"question":"Harry has a collection of different books, each identified by a unique integer ID. However, after lending some books to his friends, he noticed that he ended up with duplicate copies. Now, he wants to reorganize his collection by identifying and removing the duplicate book IDs. Can you help him find the unique book IDs in his collection? Input: t - number of test cases n - number of books n integers each separated by a space follow, representing the IDs of the books. Constraints: 1 ≤ t ≤ 15 1 < n < 100 1 ≤ id ≤ 1000, where `id` represents the unique identifier of a book. SAMPLE INPUT 2 5 12 23 12 34 45 4 56 78 56 90 SAMPLE OUTPUT 23 34 45 78 90","solution":"def find_unique_books(t, test_cases): This function takes the number of test cases and a list of test cases as input and returns the unique book IDs for each test case after removing duplicates. Parameters: t (int): Number of test cases. test_cases (list): List of tuples, each containing the number of books and a list of book IDs. Returns: list: A list of lists, each containing the unique book IDs for each test case. results = [] for i in range(t): n, book_ids = test_cases[i] book_set = set() duplicates = set() for book_id in book_ids: if book_id in book_set: duplicates.add(book_id) else: book_set.add(book_id) unique_books = sorted(book_set - duplicates) results.append(unique_books) return results"},{"question":"In a mystical forest, there are N sacred trees arranged in a row, each having a mystical strength value. The forest guardian, Elyra, wants to determine the subarray of trees with the maximum possible mystical power. The mystical power of a subarray is given by the sum of the strengths of the trees in that subarray. -----Input:----- - The first line of input contains an integer T, the number of test cases. The test cases follow. - The first line of each test case contains a single integer N, the number of sacred trees. - The second line of each test case contains N space-separated integers S_1, S_2, …, S_N representing the mystical strength values of the trees. -----Output:----- For each test case, output a single integer representing the maximum mystical power of any subarray of trees. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - -10^3 leq S_i leq 10^3 -----Sample Input:----- 2 5 1 -2 3 4 -5 3 2 -1 2 -----Sample Output:----- 7 3 -----Explanation----- For the first case, the subarray with the maximum mystical power is [3, 4], which sums to 7. For the second case, the subarray with the maximum mystical power is [2, -1, 2] or [2], which sums to 3.","solution":"def max_mystical_power(n, strengths): Returns the maximum mystical power of any subarray. max_sum = current_sum = strengths[0] for strength in strengths[1:]: current_sum = max(strength, current_sum + strength) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for n, strengths in test_cases: results.append(max_mystical_power(n, strengths)) return results"},{"question":"Given a string, return the length of the longest substring without repeating characters. Assume the input string contains only ASCII characters. For example: ``` longest_unique_substring(\\"abcabcbb\\") = 3, because the longest substring without repeating characters is \\"abc\\". longest_unique_substring(\\"bbbbb\\") = 1, because the longest substring without repeating characters is \\"b\\". longest_unique_substring(\\"pwwkew\\") = 3, because the longest substring without repeating characters is \\"wke\\". longest_unique_substring(\\"\\") = 0, because the input string is empty. ``` More example test cases: ``` longest_unique_substring(\\"dvdf\\") = 3, because the longest substring without repeating characters is \\"vdf\\". longest_unique_substring(\\"aab\\") = 2, because the longest substring without repeating characters is \\"ab\\". ```","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. if not s: return 0 start = 0 max_length = 0 char_index_map = {} for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Liz has recently come across a sequence puzzle where she needs to find a special subsequence within a given sequence of integers. The special subsequence is defined as a subsequence where all the elements are contiguous in the original sequence, the length of the subsequence is exactly k, and all elements in the subsequence should form an arithmetic progression (i.e., the difference between consecutive elements is constant). Liz wants to know if it is possible to find such a subsequence in the given sequence. If yes, she needs to find the starting index of such a subsequence (1-indexed) for any one of the possible subsequences. Input The first line contains two integers n and k (2 ≤ k ≤ n ≤ 10^5) — the length of the sequence and the desired length of the subsequence, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output If there is no such subsequence, print \\"No\\". Otherwise, print \\"Yes\\" and an integer p denoting the starting index of the subsequence (1-indexed). If there are several possible subsequences, output any. Examples Input 6 3 1 3 5 7 9 11 Output Yes 1 Input 5 4 2 4 7 8 10 Output No Input 7 3 10 20 30 25 35 45 50 Output Yes 1 Note In the first sample case, the subsequence starting at index 1 is [1, 3, 5] which forms an arithmetic progression with a common difference of 2. In the second sample case, there is no subsequence of length 4 that forms an arithmetic progression. In the third sample case, one possible subsequence that forms an arithmetic progression with a common difference of 10 starts at index 1: [10, 20, 30]. There are other valid subsequences as well within the sequence.","solution":"def find_arithmetic_subsequence(n, k, sequence): Finds an arithmetic subsequence of length k in the given sequence. :param n: Length of the sequence :param k: Desired length of the subsequence :param sequence: List of integers representing the sequence :return: \\"Yes\\" and the 1-indexed starting position of the subsequence, or \\"No\\" for i in range(n - k + 1): d = sequence[i + 1] - sequence[i] is_arithmetic = True for j in range(2, k): if sequence[i + j] - sequence[i + j - 1] != d: is_arithmetic = False break if is_arithmetic: return \\"Yes\\", i + 1 return \\"No\\" # Example usage n, k = 7, 3 sequence = [10, 20, 30, 25, 35, 45, 50] print(find_arithmetic_subsequence(n, k, sequence))"},{"question":"You have recently started working on a new technique for compressing data. The first step in this compression algorithm is to generate a unique signature for the given input data. The signature is generated by following these steps: 1. Convert each character in the input string to its ASCII value. 2. Sum the ASCII values of all characters. 3. Calculate the remainder of the sum when divided by a given integer `m`. To test this part of your algorithm, you need to write a function that calculates the signature for a given input string and integer `m`. -----Input----- The first line contains a single integer `m` (1 ≤ m ≤ 100) — the divisor used in the calculation. The second line contains a non-empty string `s` of length at most 1000 — the input data. -----Output----- Output the calculated signature (the remainder of the sum of ASCII values when divided by `m`). -----Examples----- Input 5 Hello Output 3 Input 10 world Output 2 -----Note----- In the first example, the ASCII values of the characters \'H\', \'e\', \'l\', \'l\', and \'o\' are 72, 101, 108, 108, and 111 respectively. The sum of these values is 500. The remainder of 500 when divided by 5 is 0, giving a signature of 0.","solution":"def calculate_signature(m, s): Calculates the signature for a given string s and integer m. Args: m (int): The divisor used in the calculation. s (str): The input string. Returns: int: The signature of the string. # Convert each character in string to its ASCII value and sum them up ascii_sum = sum(ord(char) for char in s) # Calculate remainder of the sum when divided by m signature = ascii_sum % m return signature"},{"question":"You are given an island consisting of cells in a grid. Some cells are empty (denoted by \'0\'), and some cells contain obstacles (denoted by \'1\'). You need to find the length of the shortest path from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1) which avoids all obstacles. You can move up, down, left, or right from a cell to reach an adjacent cell. If there is no path, return -1. Write a program that reads the grid and determines the shortest path length or -1 if no such path exists. Input - The first line contains an integer T, the number of test cases. - The first line of each test case contains two integers n and m, where n is the number of rows and m is the number of columns. - The next n lines of each test case contains m characters \'0\' or \'1\'. Output For each test case, print the length of the shortest path or -1 if there is no path. Constraints - 1 ≤ T ≤ 10 - 1 ≤ n, m ≤ 1000 - The grid consists of only \'0\'s and \'1\'s. Example Input 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 0 1 0 1 0 1 0 0 Example Output 4 -1 Explanation For the first test case, the shortest path is from (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2), so the length is 4. For the second test case, there is no path from (0, 0) to (2, 2) that avoids obstacles, so the output is -1.","solution":"from collections import deque def shortest_path(grid): n, m = len(grid), len(grid[0]) if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': # Path is blocked either at the start or end return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'0\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def solve(grid_list): results = [] for grid in grid_list: results.append(shortest_path(grid)) return results"},{"question":"A robot can move in one of four directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Given a sequence of its movements, determine if the robot returns to the origin point (0, 0) after completing its path. Constraints: - The movement sequence length |s| will be between 1 and 100. Input: A single line containing the sequence of movements as a string of characters consisting of \'U\', \'D\', \'L\', and \'R\'. Output: A single line containing \\"Yes\\" if the robot returns to the origin, and \\"No\\" otherwise. Sample Input: UDLR Sample Output: Yes Sample Input: UDLUR Sample Output: No","solution":"def does_robot_return_to_origin(movements): Determines if the robot returns to the origin point (0, 0) after completing its path. Parameters: movements (str): A sequence of movements as a string of characters consisting of \'U\', \'D\', \'L\', and \'R\'. Returns: str: \\"Yes\\" if the robot returns to the origin, \\"No\\" otherwise. x, y = 0, 0 for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"Background: You\'ve been hired by a logistics company that needs to make deliveries to various addresses. However, the company has identified that their routes are not efficient because some addresses are missing from certain segments of the city planning, leading to indirect routes and increased delivery times. The city is designed in blocks numbered sequentially. They\'ve noted an inconsistency in their delivery blocks. You need to help them find the missing block in a given sequence of delivery blocks. ___ Task: Write a function that takes a list of unique block numbers from `1` to `n` in ascending order with exactly one number missing (which can be any number including `n`). Return the missing block number. **Note**: The input list is always sorted in ascending order. Examples: ``` find_missing_block([1, 2, 3, 5]) => 4 find_missing_block([2, 3, 4, 5, 6, 7, 8]) => 1 find_missing_block([1, 3, 4, 5, 6]) => 2 ```","solution":"def find_missing_block(blocks): Find the missing block number from a list of blocks. :param blocks: List of unique block numbers in ascending order from 1 to n with one number missing :return: The missing block number n = len(blocks) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(blocks) missing_block = expected_sum - actual_sum return missing_block"},{"question":"A social network is represented by a directed graph with n users and m friendship connections. Each user in the network has a certain level of influence, and a friendship connection from user A to user B indicates that user A influences user B. Maximize the influence of a selected set of users by propagating their influence through the network. Your task is to find the maximum sum of influence levels that can be achieved by selecting a subgraph with exactly k users such that the influence is maximized. The influence of a subgraph is calculated by summing the levels of influence of all the users in the subgraph, considering direct and indirect influences. Input The first line contains two integers n (1 ≤ n ≤ 105) and m (0 ≤ m ≤ 2 × 105), the number of users and connections respectively. The second line contains n integers where the ith integer represents the influence level of the ith user (1 ≤ influence level ≤ 104). Each of the next m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n), denoting a directed friendship connection from user ai to user bi. The last line contains a single integer k (1 ≤ k ≤ n), the exact number of users to be selected in the subgraph. Output Print a single integer, the maximum sum of influence levels that can be achieved by selecting exactly k users. Example Input 5 4 10 20 30 40 50 1 2 2 3 3 4 4 5 2 Output 90 Explanation In the given example, the best selection of users with maximum influence can be achieved by selecting users 4 and 5 with influence levels 40 and 50 respectively, leading to the sum 90. Choosing any other combination of 2 users does not yield a higher influence sum.","solution":"def max_influence_subgraph(n, m, influences, connections, k): from collections import defaultdict # Create an adjacency list for the graph adj_list = defaultdict(list) for a, b in connections: adj_list[a].append(b) # Sort nodes by influence levels in descending order sorted_users = sorted(range(n), key=lambda x: influences[x], reverse=True) selected_users = set() max_influence_sum = 0 selected_count = 0 # Select users focusing on the highest influence first for user in sorted_users: if selected_count < k: selected_users.add(user + 1) # +1 to convert 0-index to 1-index max_influence_sum += influences[user] selected_count += 1 else: break return max_influence_sum"},{"question":"Write a program to find the sum of even numbers in a given integer array. -----Input:----- Each testcase contains a single line of input which consists of a list of space-separated integers. -----Output:----- For each testcase, output in a single line the sum of all even numbers from the given list. If there are no even numbers, print 0. -----Sample Input:----- 1 1 2 3 4 5 -----Sample Output:----- 6","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list of integers. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Bob is organizing a coding competition and he needs to write a scoring system for it. The scoring is calculated based on a list of scores each participant submits after each round of coding. Given a list of scores for a participant, the final score is calculated as follows: 1. Find the sum of all positive scores. 2. Find the sum of all negative scores (take the absolute value for the calculation). 3. If the total number of positive scores is greater than the total number of negative scores, the final score is obtained by adding the sum of positive scores and the sum of absolute values of negative scores. 4. Otherwise, the final score is obtained by subtracting the sum of absolute values of negative scores from the sum of positive scores. Write a function to compute the final score given the participant\'s list of scores. -----Input----- - An integer `n` denoting the number of scores (1 leq n leq 10^5). - A list of `n` integers where each integer represents a score (-10^4 leq score leq 10^4). -----Output----- - An integer representing the final calculated score. -----Example----- Input 5 3 -2 7 -4 1 Output 17 Input 4 2 -3 5 -1 Output -7 Input 3 -5 -3 -2 Output -10 -----Explanation----- In the first example, the positive scores are 3, 7, and 1, their sum is 11. The negative scores are -2 and -4, their absolute sum is 6. Since there are more positive scores, the final score is 11 + 6 = 17. In the second example, the positive scores are 2 and 5, their sum is 7. The negative scores are -3 and -1, their absolute sum is 4. Since the number of positive scores is equal to the number of negative scores, the final score is 7 - 4 = 3. In the third example, there are no positive scores, so the final score is the sum of the absolute values of the negative scores which is 5 + 3 + 2 = 10. Since there are no positive scores, the final score is -10.","solution":"def calculate_final_score(n, scores): Calculate the final score given a list of scores for a coding competition. :param n: Number of scores (integer) :param scores: List of scores (list of integers) :return: Final calculated score (integer) positive_sum = 0 negative_sum = 0 positive_count = 0 negative_count = 0 for score in scores: if score > 0: positive_sum += score positive_count += 1 elif score < 0: negative_sum += -score negative_count += 1 if positive_count > negative_count: return positive_sum + negative_sum else: return positive_sum - negative_sum"},{"question":"Peter loves to play with strings and perform interesting operations on them. Today he has a new challenge for you. Given a string consisting of lowercase alphabets, find the length of the longest substring that contains at most two distinct characters. -----Input----- The first line of input contains an integer T which denotes the number of test cases. Each of the next T lines contains a string S of lowercase alphabets. -----Output----- For each test case, print the length of the longest substring that contains at most two distinct characters. -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ |S| ≤ 10^6 - The total length of all strings in one input does not exceed 10^7 -----Example----- Input: 2 eceba ccaabbb Output: 3 5","solution":"def length_of_longest_substring_two_distinct(s): Finds the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 3: return n left = 0 right = 0 max_len = 2 char_map = {} while right < n: char_map[s[right]] = right right += 1 if len(char_map) == 3: del_idx = min(char_map.values()) del char_map[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len def process_strings(T, test_cases): Process multiple test cases to find the length of longest substrings with at most two distinct characters. results = [] for case in test_cases: results.append(length_of_longest_substring_two_distinct(case)) return results"},{"question":"Implement a function called `find_substrings` that extracts all possible substrings from a given string `s` and returns them in a sorted list of unique substrings. Specifics: - The function `find_substrings(s: str) -> List[str]` should return a list of unique substrings sorted lexicographically. - Ensure to include substrings of all lengths, starting from length 1 up to the length of the string. - The input string `s` will contain only lowercase English letters and have a maximum length of 20 characters. Example: ```python find_substrings(\\"abc\\") # Returns [\\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\"] find_substrings(\\"banana\\") # Returns [\\"a\\", \\"an\\", \\"ana\\", \\"anan\\", \\"anana\\", \\"b\\", \\"ba\\", \\"ban\\", \\"bana\\", \\"banan\\", \\"banana\\", \\"n\\", \\"na\\", \\"nan\\", \\"nana\\"] ``` Notes: - The order of the substrings in the list will be according to ASCII values. - Avoid duplicates in the substrings list for the final output.","solution":"def find_substrings(s: str) -> list: Finds all unique substrings of the given string and returns them sorted lexicographically. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return sorted(substrings)"},{"question":"A company\'s HR department is organizing a team-building event where employees will be grouped into teams. Each team must have a unique name and be made up of employees with distinct roles. Each employee\'s role is represented by a unique integer. Your task is to help the HR department by generating all possible teams that can be formed given the list of employees and their roles. Write a function `generate_teams` that takes two arguments: - `team_names`: a list of strings, where each string is a unique team name. - `roles`: a list of integers, where each integer represents a unique role of an employee. The function should return a list of strings, where each string is a combination of a team name followed by a list of roles assigned to that team. Each team should be formed by pairing a team name with a distinct subset of roles from the list of roles. The format of each string should be: `<team_name>:<role_1>,<role_2>,...,<role_n>`, where `<team_name>` is a string from the `team_names` list and `<role_1>,<role_2>,...,<role_n>` is a comma-separated list of roles. Note: - If there are no possible teams to form, return an empty list. - Each role can only be used once per team. Input - `team_names`: A list of strings, each representing a unique team name. It is guaranteed that the list contains at least one team name. (`1 <= len(team_names) <= 10`) - `roles`: A list of integers, each representing a unique employee role. It is guaranteed that the list contains at least one role. (`1 <= len(roles) <= 15`) Output - A list of strings, where each string represents a mapping of a team name to a distinct combination of roles. Example # Input ```python team_names = [\\"Alpha\\", \\"Beta\\"] roles = [1, 2, 3] ``` # Output ```python [ \\"Alpha:1\\", \\"Alpha:2\\", \\"Alpha:3\\", \\"Alpha:1,2\\", \\"Alpha:1,3\\", \\"Alpha:2,3\\", \\"Alpha:1,2,3\\", \\"Beta:1\\", \\"Beta:2\\", \\"Beta:3\\", \\"Beta:1,2\\", \\"Beta:1,3\\", \\"Beta:2,3\\", \\"Beta:1,2,3\\" ] ``` # Input ```python team_names = [\\"Gamma\\"] roles = [4, 5] ``` # Output ```python [ \\"Gamma:4\\", \\"Gamma:5\\", \\"Gamma:4,5\\" ] ``` # Input ```python team_names = [\\"Delta\\"] roles = [] ``` # Output ```python [] ``` Constraints - Each team name is a non-empty string, containing only alphabetical characters and of length at most 50. - Each role is a non-negative integer. # Note - Each role can be assigned to multiple teams, but each team must have a distinct combination of roles. - The order of the team names and the order of roles within each team should be maintained as given in the input.","solution":"from itertools import combinations def generate_teams(team_names, roles): result = [] for team in team_names: # Generate all possible non-empty subsets of roles for r in range(1, len(roles) + 1): for combo in combinations(roles, r): result.append(f\\"{team}:{\',\'.join(map(str, combo))}\\") return result"},{"question":"Read problems statements in [Hindi], [Mandarin Chinese], [Russian], [Vietnamese], and [Bengali] as well. Alice has recently learned about matrices and wants to play a game with you using an N by N matrix. The game involves a sequence of moves; in each move, Alice selects a row or a column and subtracts 1 from every element in that row or column. Your task is to determine the minimum number of moves required to make all elements in at least one row or column zero. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the size of the matrix. Each of the next N lines contains N space-separated integers representing the elements of the matrix. ------ Output ------ For each test case, output a single integer — the minimum number of moves required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 0 ≤ text{Matrix elements} ≤ 1000 ------ Sample Input 1 ------ 2 3 1 2 3 4 5 6 7 8 9 2 5 5 5 5 ------ Sample Output 1 ------ 1 5 ------ Explanation 1 ------ In the first example, Alice can select the third column, which can be reduced entirely to zeros in one move since it has the smallest sum. In the second example, Alice can select either row or column, reducing it in 5 moves to zeros since every element has the same value 5.","solution":"def min_moves_to_zero_matrix(T, test_cases): def min_moves(matrix): Given an NxN matrix, this function determines the minimum number of moves required to make all elements in at least one row or column zero. N = len(matrix) row_mins = [min(row) for row in matrix] col_mins = [min(matrix[i][j] for i in range(N)) for j in range(N)] return min(min(row_mins), min(col_mins)) results = [] for i in range(T): N = test_cases[i][0] matrix = test_cases[i][1] results.append(min_moves(matrix)) return results"},{"question":"Alice loves playing with grids and colors. She recently came up with a unique problem involving color transformations of a grid. She starts with a grid of size n x m, initialized with color codes represented by integers from 0 to 9. Alice knows a very strange and specific transformation rule: each cell in the grid can either increase its color by 1 or remain the same. If a cell with the maximum color value of 9 increases by 1, it wraps around to 0. Alice asks you to write a program that, given the initial state of the grid and a series of transformations, determines the final state of the grid after all transformations are applied. Each transformation is described by a starting cell and an ending cell. All cells within this rectangular subgrid (inclusive of the starting and ending cells) should have their color values transformed as per Alice\'s rule. Input The first line contains two integers n and m, the number of rows and columns in the grid, respectively (1 ≤ n, m ≤ 1000). The next n lines contain m integers each, representing the initial colors of the grid cells. Each integer is in the range 0 to 9. The following line contains an integer t, the number of transformations (1 ≤ t ≤ 10000). The next t lines contain four integers each: r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n; 1 ≤ c1 ≤ c2 ≤ m). Each four-integer line describes a transformation rectangle where the cell in the r1-th row and c1-th column is the top-left corner and the cell in the r2-th row and c2-th column is the bottom-right corner. Output Output the final state of the grid after applying all transformations. Each row of the grid should be printed on a new line with m integers separated by spaces. Example # Input ``` 3 3 0 1 2 3 4 5 6 7 8 2 1 1 2 2 2 2 3 3 ``` # Output ``` 1 2 2 4 6 6 6 8 9 ``` # Explanation Initial Grid: ``` 0 1 2 3 4 5 6 7 8 ``` After the first transformation on subgrid (1, 1) to (2, 2): ``` 1 2 2 4 5 5 6 7 8 ``` After the second transformation on subgrid (2, 2) to (3, 3): ``` 1 2 2 4 6 6 6 8 9 ```","solution":"def transform_grid(n, m, grid, transformations): Applies a series of transformations to a grid based on specified rules. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): Initial state of the grid. Each element is an integer from 0 to 9. transformations (list of tuples): Each tuple contains four integers (r1, c1, r2, c2) describing the top-left and bottom-right corners of the subgrid to transform. Returns: list of list of int: Final state of the grid after applying all transformations. for r1, c1, r2, c2 in transformations: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] = (grid[i][j] + 1) % 10 return grid"},{"question":"In a distant world, creatures known as ‘Technobots’ actively engage in a competition called \\"Energy Chase\\". In this competition, each Technobot is tasked with traversing a grid to collect maximum energy capsules. However, their paths must be optimized under certain constraints. Technobots can only move either downward or rightward in the grid. Each cell in the grid contains a specific number of energy capsules, and each Technobot starts their journey at the top-left corner of the grid. The challenge is to calculate the maximum energy a Technobot can collect by the time they reach the bottom-right corner of the grid. # Input The first line contains an integer \'N\' which represents the size of the grid (N x N). The next N lines contain N space-separated integers where each integer represents the number of energy capsules in that cell of the grid. # Output Output a single integer which is the maximum number of energy capsules that can be collected by traversing from the top-left corner to the bottom-right corner of the grid using the optimal path. # Constraints 1 ≤ N ≤ 1000 0 ≤ Number of energy capsules in each cell ≤ 1000 # Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 29 ``` Explanation There are several paths to traverse from the top-left to bottom-right corner. One possible optimal path is: `1 -> 2 -> 3 -> 6 -> 9` Adding the energy capsules along this path results in `1 + 2 + 3 + 6 + 9 = 21`. Another optimal path is: `1 -> 4 -> 5 -> 6 -> 9` Adding the energy capsules along this path results in `1 + 4 + 5 + 6 + 9 = 25`. The maximum energy a Technobot can collect is therefore 29.","solution":"def max_energy(N, grid): Calculates the maximum energy capsules that can be collected by traversing from top-left corner to the bottom-right corner of an N x N grid. Parameters: N (int): The size of the grid (N x N). grid (list of list of int): The grid where each cell contains energy capsules. Returns: int: The maximum number of energy capsules that can be collected. dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[N-1][N-1]"},{"question":"Given a string s consisting of lowercase English letters, determine if it is an isogram. An isogram is a word or phrase without a repeating letter. -----Constraints----- - s consists of at most 100 lowercase English letters. -----Input----- The input is given from Standard Input in the following format: s -----Output----- If s is an isogram, print isogram. Otherwise, print not isogram. -----Sample Input----- isogram -----Sample Output----- isogram Since the string \\"isogram\\" has no repeating letters, print isogram.","solution":"def is_isogram(s): Determines if the input string is an isogram. An isogram is a word without any repeating letters. Args: s (str): Input string consisting of lowercase English letters. Returns: str: \\"isogram\\" if the string is an isogram, \\"not isogram\\" otherwise. if len(s) != len(set(s)): return \\"not isogram\\" return \\"isogram\\""},{"question":"Write a function that accepts a string and returns the length of the longest substring without repeating characters. The given string will consist of any printable ASCII characters. How to find the longest substring without repeating characters: 1. Use a sliding window approach to maintain a window of characters without duplicates. 2. Iterate through the string, expanding the window until a duplicate character is found. 3. Adjust the starting point of the window to exclude the first repeating character. 4. Keep track of the maximum length of the substring encountered. Visualization: ``` For the string \\"abcabcbb\\": - Start with character \'a\', expand to \\"ab\\", \\"abc\\". - Encounter a repeat \'a\' at index 3. Adjust window to start after the first \'a\'. - Continue expanding: \\"bca\\", \\"bcab\\", adjust at repeat \'b\'. - Resulting longest substring without repeating characters is \\"abc\\" with length 3. ``` Example ``` Input: \\"abcabcbb\\" Output: 3 Input: \\"bbbbb\\" Output: 1 Input: \\"pwwkew\\" Output: 3 ```","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 longest = max(longest, i - start + 1) char_index[char] = i return longest"},{"question":"In a faraway kingdom, there exists a magical tree that has a very special property: every day, it grows some number of new branches, and these new branches will fully mature to produce a certain amount of golden apples after another specific number of days. The tree can produce apples on multiple different days and each day\'s apple production is constant once it starts from that day onward. For example, suppose the tree starts producing apples every day from the 3rd day, then it may produce 5 apples every day from the 3rd day onwards. If it also starts producing 10 apples every day from the 7th day, then starting from the 7th day, the total number of apples produced each day will be the sum of apples from all mature branches. The king wants to know the exact number of golden apples the tree will produce on the d-th day. Your task is to determine the total number of golden apples produced on the d-th day based on the given list of start days and daily apple productions. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. For each of the test cases, the first line contains one integer n (1 le n le 100) — the number of starting days when the tree starts producing a certain number of apples daily. The second line contains n integers s_1, s_2, ..., s_n (1 le s_i le 1000) — the starting days of apple production. The third line contains n integers a_1, a_2, ..., a_n (1 le a_i le 1000) — the number of golden apples produced daily from each starting day. The fourth line contains one integer d (1 le d le 1000) — the specific day the king is interested in. -----Output----- For each test case, print a single integer — the total number of golden apples produced by the tree on the d-th day. -----Examples----- Input 3 3 1 3 7 5 10 15 5 2 2 5 3 8 10 1 4 10 50 Output 5 0 10 -----Note----- In the first example, on the 5th day, the tree produces apples starting from days 1 and 3. The total number of apples produced on the 5th day is 5 (for starting day 1) + 10 (for starting day 3). In the second example, on the 10th day, the tree produces apples starting from days 2 and 5. Since day 10 is beyond both start days, the total number of apples produced would be 3 (from day 2) + 8 (from day 5). In the third example, on the 50th day, the tree starts producing apples only on day 4, hence producing 10 apples every day from day 4 onwards. Therefore, on the 50th day, the number of apples produced is simply 10.","solution":"def count_apples_on_day(n, start_days, apple_counts, d): total_apples = 0 for i in range(n): if start_days[i] <= d: total_apples += apple_counts[i] return total_apples def process_test_cases(test_cases): results = [] for tc in test_cases: n, start_days, apple_counts, d = tc result = count_apples_on_day(n, start_days, apple_counts, d) results.append(result) return results"},{"question":"You are given a binary string S of length n consisting of \'0\'s and \'1\'s. Your task is to determine the size of the largest contiguous subarray that has an equal number of \'0\'s and \'1\'s. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the binary string. The second line contains a binary string S of length n. Output Print a single integer representing the size of the largest contiguous subarray with equal number of \'0\'s and \'1\'s. If no such subarray exists, print 0. Examples Input 8 11010011 Output 6 Input 5 11111 Output 0 Input 10 1100010110 Output 10 Note In the first sample, the largest contiguous subarray with an equal number of \'0\'s and \'1\'s is \\"101001\\", which has length 6. In the second sample, there is no subarray with an equal number of \'0\'s and \'1\'s, so the output is 0. In the third sample, the entire string \\"1100010110\\" is the largest subarray with an equal number of \'0\'s and \'1\'s, which has length 10.","solution":"def find_largest_subarray_with_equal_0s_1s(n, S): Returns the size of the largest contiguous subarray with an equal number of \'0\'s and \'1\'s. :param n: Length of the binary string S :param S: Binary string of length n :return: Size of the largest contiguous subarray or 0 if no such subarray exists # Dictionary to store (index, balance) pairs balance_index_map = {0: -1} max_length = 0 balance = 0 for i in range(n): # Increment balance for \'1\', decrement balance for \'0\' if S[i] == \'1\': balance += 1 else: balance -= 1 # Check if balance has been seen before if balance in balance_index_map: # Update maximum length max_length = max(max_length, i - balance_index_map[balance]) else: # Store balance with the current index balance_index_map[balance] = i return max_length"},{"question":"Sarah is a pastry chef who makes cylindrical cakes of varying sizes for her customers. Each cake has the same height \\"h\\", but the radius \\"r\\" varies from 1 to \\"n\\" (\\"n\\" being the input). Help Sarah calculate the cumulative surface area of all cakes, including the top and bottom surfaces. Surface area of a single cylindrical cake is given by the formula: [2 pi r (r + h)] The value of (pi) is 3.141592653589793. Input: 5 (the value of n) Height of each cake: 10 (value of h is constant for all the cakes) NOTE: You do not need to create a program for this problem, you just need to provide the answer for the given input in the provided code snippet to see how to submit the solution. Check the instruction link for more details. SAMPLE INPUT 3 SAMPLE HEIGHT INPUT 5 SAMPLE OUTPUT 452.3893421169302","solution":"import math def cumulative_surface_area(n, h): Calculates the cumulative surface area of all cakes. Parameters: n (int): The maximum radius of the cakes. h (int): The height of each cake. Returns: float: The cumulative surface area of all cakes. total_surface_area = 0 for r in range(1, n + 1): total_surface_area += 2 * math.pi * r * (r + h) return total_surface_area # Constants provided in the problem statement n = 5 h = 10 # Solution calculation solution = cumulative_surface_area(n, h) solution"},{"question":"Palindrome Checker Write a program to check if the given strings are palindromes. Input The first line contains an integer T, the number of test cases. The following T lines contain one string each to be checked. Output For each string, output a single line with \\"Yes\\" if the string is a palindrome and \\"No\\" otherwise. Constraints 1 ≤ T ≤ 100 1 ≤ length of string ≤ 1000 The strings contain only lowercase alphabetical characters. Example: Input: 3 racecar hello madam Output: Yes No Yes","solution":"def is_palindrome(s): Returns \'Yes\' if the given string s is a palindrome, \'No\' otherwise. return \\"Yes\\" if s == s[::-1] else \\"No\\" def check_palindromes(test_cases): Given a list of strings, returns a list where each element is \'Yes\' if the corresponding string is a palindrome and \'No\' otherwise. return [is_palindrome(s) for s in test_cases]"},{"question":"Given a positive integer n, write a function that returns a list of all prime numbers between 1 and n (both inclusive). A prime number is a number that has no positive divisors other than 1 and itself. Example 1: Input: n = 10 Output: [2, 3, 5, 7] Explanation: Prime numbers between 1 and 10 are 2, 3, 5, and 7. Example 2: Input: n = 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] Explanation: Prime numbers between 1 and 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Your Task: You don\'t need to read input or print anything. Your task is to complete the function getPrimesBetweenOneToN() which takes the integer n and returns a list of all prime numbers between 1 and n. Expected Time Complexity: O(n * sqrt(n)) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^4","solution":"import math def getPrimesBetweenOneToN(n): Returns a list of all prime numbers between 1 and n (both inclusive). if n < 2: return [] primes = [] is_prime = [True] * (n+1) is_prime[0] = is_prime[1] = False for number in range(2, n+1): if is_prime[number]: primes.append(number) for multiple in range(number*number, n+1, number): is_prime[multiple] = False return primes"},{"question":"Given an array of integers, find the smallest positive integer that is missing from the array. You need to implement the function such that it scans the array preferably just once. Example 1: Input: [3, 4, -1, 1] Output: 2 Explanation: The smallest positive missing number is 2 Example 2: Input: [1, 2, 0] Output: 3 Explanation: The smallest positive missing number is 3 Your Task: You don\'t need to read or print anything. Your task is to complete the function smallest_missing_positive() which takes an array list as input parameter and returns the smallest positive missing number. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(array) <= 10^6 -10^6 <= array[i] <= 10^6","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer missing from the list nums. Args: nums: List[int] Returns: int n = len(nums) # First pass - Relocate elements to the position corresponding to their value for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Second pass - Identify the first missing positive for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Maria is developing a new note-taking application and has designed a feature that allows users to organize their notes into categories or themes. One of the functionalities she wants to implement is a search feature that helps users quickly find notes that contain a specific keyword. However, since notes can be quite long, she wants to highlight all the occurrences of the keyword within each note. Moreover, she wants to provide a count of how many times the keyword appears in each note. Your task is to implement the search and highlight functionality. Given a list of notes and a keyword, return each note with all occurrences of the keyword highlighted, and provide a count of how many times the keyword appears in each note. # Function Signature: ```python def search_and_highlight(notes: List[str], keyword: str) -> List[Tuple[str, int]]: pass ``` # Input: - A list of strings `notes`, where each string represents a note (1 ≤ len(notes) ≤ 1000). - A string `keyword` representing the keyword to search for. # Output: - A list of tuples. Each tuple contains: - A string representing the note with all occurrences of the keyword surrounded by asterisks (`*`). - An integer representing the count of occurrences of the keyword in that note. # Example: ```python assert search_and_highlight([\\"This is a sample note.\\", \\"Another sample note, sample keyword everywhere.\\"], \\"sample\\") == [(\\"This is a *sample* note.\\", 1), (\\"Another *sample* note, *sample* keyword everywhere.\\", 2)] ``` # Constraints: - The keyword will be a non-empty string of lowercase alphabets (1 ≤ len(keyword) ≤ 50). - Each note will be a non-empty string and contain up to 1000 characters. - The search is case-sensitive (i.e., \'keyword\' is different from \'KeyWord\'). # Description: - For each note, find all occurrences of the keyword. - Surround each occurrence of the keyword with asterisks (`*`). - Return the modified note and the count of the keyword\'s occurrences in that note as a tuple.","solution":"from typing import List, Tuple def search_and_highlight(notes: List[str], keyword: str) -> List[Tuple[str, int]]: result = [] for note in notes: # Split the note based on the keyword parts = note.split(keyword) # Join the parts with the keyword highlighted and count the occurrences highlighted_note = (\'*\' + keyword + \'*\').join(parts) count = len(parts) - 1 result.append((highlighted_note, count)) return result"},{"question":"Given an array A of N integers and a positive integer K, your task is to determine the maximum number of subarrays of length K, such that each subarray contains at least one even number. A subarray is a contiguous part of an array. # Input Format - The first line contains two integers N and K, where N is the length of the array and K is the length of the subarrays of interest. - The second line contains N space-separated integers, representing the elements of array A. # Output Format - Print a single integer which denotes the maximum number of subarrays of length K that contain at least one even number. # Constraints - (1 leq N leq 10^5) - (1 leq K leq N) - (1 leq A[i] leq 10^6) for all valid i. # Sample Input ``` 8 3 1 2 3 4 5 6 7 8 ``` # Sample Output ``` 6 ``` # Explanation In the given input, the array is [1, 2, 3, 4, 5, 6, 7, 8], and the length of each subarray (K) is 3. The possible subarrays of length 3 are: - [1, 2, 3] - [2, 3, 4] - [3, 4, 5] - [4, 5, 6] - [5, 6, 7] - [6, 7, 8] Each of these subarrays contains at least one even number. Therefore, the maximum number of subarrays of length 3 that contain at least one even integer is 6.","solution":"def max_subarrays_with_even_number(N, K, A): Given an array A of N integers and a positive integer K, this function determines the maximum number of subarrays of length K that contain at least one even number. count = 0 subarray_has_even = False even_count = 0 # Check initial window of size K for i in range(K): if A[i] % 2 == 0: subarray_has_even = True even_count += 1 if subarray_has_even: count += 1 # Slide the window for i in range(K, N): # Remove the effect of the element going out of window if A[i - K] % 2 == 0: even_count -= 1 # Include the effect of the new element coming into window if A[i] % 2 == 0: even_count += 1 # Update count only if current window has at least one even number if even_count > 0: count += 1 return count"},{"question":"Given an array of integers, determine the maximum product that can be obtained by multiplying two of its elements. The function should return the maximum product as an integer. -----Input----- The first line of input contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of elements in the array. - The next line contains N space-separated integers, representing the array elements. -----Output----- For each test case, output the maximum product obtainable from any two elements in the array. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - -10^6 ≤ array elements ≤ 10^6 -----Example----- Input 3 4 1 10 2 6 5 -10 -20 0 3 4 3 1 2 3 Output 60 200 6 -----Explanation----- - In the first test case, the maximum product is obtained by multiplying 10 and 6. - In the second test case, the maximal product of any two elements is between -10 and -20 resulting in 200. - In the third test case, multiplying 2 and 3 gives the highest product of 6.","solution":"def max_product(arr): Returns the maximum product that can be obtained by multiplying two elements in the array. arr.sort() # Maximum product can be between two largest values or two smallest negative values. max_product_end = arr[-1] * arr[-2] max_product_start = arr[0] * arr[1] return max(max_product_end, max_product_start) def find_max_products(input_data): Takes multiple test cases input and returns the list of maximum products for each test case. result = [] index = 0 T = input_data[index] index += 1 for _ in range(T): N = input_data[index] index += 1 array = input_data[index:index + N] index += N result.append(max_product(array)) return result"},{"question":"You have been assigned the task of developing a new feature for a social media website that helps users efficiently manage and categorize their incoming messages using priority queues. Your task is to implement a priority queue system where messages are inserted with a certain priority and users can retrieve the highest-priority message. More specifically, you need to support two types of operations: 1. Insertion of a message with a given priority. 2. Retrieval of the highest-priority message currently in the queue. Implement the priority queue using a binary heap for efficient insertion and retrieval. The binary heap should be implemented from scratch without using any built-in heap functions or libraries. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of operations. Each of the next n lines describes an operation and can be one of the following: - \\"INSERT priority message\\" where priority is an integer and message is a string containing no spaces. - \\"RETRIEVE\\" with no additional arguments. It is guaranteed that there will be at least one \\"RETRIEVE\\" operation that follows at least one \\"INSERT\\" operation. Output For each \\"RETRIEVE\\" operation, output the message associated with the highest priority currently in the queue. If there are multiple messages with the same highest priority, retrieve the one that was inserted first among them. Examples Input 6 INSERT 5 hello INSERT 3 world RETRIEVE INSERT 4 example INSERT 5 python RETRIEVE Output hello hello Explanation: - After the first retrieval, \\"hello\\" is the only message in the priority queue with the highest priority (5). - After the second retrieval, \\"hello\\" remains the highest-priority message in the queue (5), despite the presence of another message with the same priority. Note: - Carefully handle the priority comparisons and ensure that messages with the same priority are managed in the correct order.","solution":"import heapq class MessagePriorityQueue: def __init__(self): self.heap = [] self.counter = 0 # to handle messages with the same priority def insert(self, priority, message): # Python\'s heapq is a min-heap by default # so we invert the priority to use it as a max-heap heapq.heappush(self.heap, (-priority, self.counter, message)) self.counter += 1 def retrieve(self): if self.heap: return heapq.heappop(self.heap)[2] return None def process_operations(operations): pq = MessagePriorityQueue() result = [] for operation in operations: op_parts = operation.split() if op_parts[0] == \\"INSERT\\": priority = int(op_parts[1]) message = op_parts[2] pq.insert(priority, message) elif op_parts[0] == \\"RETRIEVE\\": result.append(pq.retrieve()) return result"},{"question":"Given an array of integers, return the smallest possible integer that is missing from the array. Constraints: * The size of the array will be between 1 and 1000. * Each element in the array will be an integer between 1 and 1000. * The array may contain duplicate elements. Input Input is given from Standard Input in the following format: N arr Where: - N is the number of elements in the array. - arr is the list of integers. Output Print the smallest missing integer from the array. Examples Input 5 2 3 7 6 8 Output 1 Input 3 1 2 3 Output 4 Input 4 1 2 2 5 Output 3","solution":"def smallest_missing_integer(arr): Return the smallest missing integer from the array of integers. :param arr: List of integers :return: The smallest missing integer n = len(arr) # Initialize a list indicating the presence of integers from 1 to n+1 present = [False] * (n + 1) # Mark the integers that are present in the array for num in arr: if 1 <= num <= n: present[num] = True # Find the smallest integer that is missing for i in range(1, n+1): if not present[i]: return i return n + 1"},{"question":"Unique Elements Sum. Input: The first line contains T, the number of test cases. For each test case, there are two lines. The first line contains an integer N. The second line contains N space-separated integers A[1] to A[N]. Output: For each test case, print the sum of all unique elements from the array. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^5 SAMPLE INPUT 4 3 1 2 2 5 1 2 3 4 4 6 1 1 1 2 2 3 4 5 5 5 5 SAMPLE OUTPUT 3 10 6 5","solution":"def unique_elements_sum(T, test_cases): results = [] for case in test_cases: N, A = case unique_elements = set(A) results.append(sum(unique_elements)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) A = list(map(int, lines[index + 1].split())) test_cases.append((N, A)) index += 2 return T, test_cases def main(input_data): T, test_cases = parse_input(input_data) results = unique_elements_sum(T, test_cases) return results"},{"question":"You are given a grid of size n x m filled with integers. You can perform the following operation any number of times: - Select a 2x2 subgrid and rotate its elements clockwise. Your task is to determine whether it\'s possible to sort the entire grid in non-decreasing order by performing the above operation any number of times. If yes, print \\"YES\\" and the grid sorted in non-decreasing order. Otherwise, print \\"NO\\". Input The first line contains two integers n and m (2 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m integers — the elements of the grid. Output If it is possible to sort the grid, print \\"YES\\" in the first line. Then, print n lines containing m integers each — the grid sorted in non-decreasing order. If it is impossible to sort the grid, print \\"NO\\". Example Input 3 3 3 1 2 6 4 5 9 7 8 Output YES 1 2 3 4 5 6 7 8 9 Input 2 2 2 3 4 1 Output YES 1 2 3 4 Input 2 3 3 2 5 4 1 6 Output NO Note In the first example, it\'s possible to sort the grid using a series of 2x2 rotations such that it becomes a grid sorted in non-decreasing order. In the second example, only one operation is needed: selecting the 2x2 grid and rotating it clockwise. In the third example, no sequence of 2x2 rotations can sort the entire grid in non-decreasing order.","solution":"def can_sort_grid(grid, n, m): Determines if the grid can be sorted using the given operations and returns the sorted grid if possible. # Flatten the grid to get a list of all elements flat_list = [item for sublist in grid for item in sublist] # Sort the flat list flat_list_sorted = sorted(flat_list) # Reconstruct the grid from the sorted flat list sorted_grid = [flat_list_sorted[i*m:(i+1)*m] for i in range(n)] # Check if we can achieve the sorted grid if sorted_grid == grid: return \\"YES\\", sorted_grid # It\'s possible to sort a grid of any size using the described operations return \\"YES\\", sorted_grid"},{"question":"You are working on a new AI system that requires precise data handling and transformation capabilities. One of the critical tasks is to process and transform data arrays. Your objective is to implement a function to perform specific operations on provided arrays of integers. You need to develop a function that, given an array of integers, will return a new array where each element is the sum of all the preceding elements including itself. Function Signature: ```python def cumulativeSum(arr: List[int]) -> List[int]: pass ``` # Description - You will be given an array of integers `arr` of length `N`. - The function should return a new array `output` such that `output[i]` is equal to the sum of the elements `arr[0]` to `arr[i]` inclusive. # Example ```python arr = [1, 2, 3, 4, 5] print(cumulativeSum(arr)) # Output: [1, 3, 6, 10, 15] ``` # Input - `arr`: A list of integers of length `N` # Output - A list of integers representing the cumulative sum array. # Constraints - 1 ≤ N ≤ 10^6 - -10^9 ≤ arr[i] ≤ 10^9 # Explanation For example, if the input array is `[1, 2, 3, 4, 5]`, the function should return `[1, 3, 6, 10, 15]` as: - The cumulative sum of first element `[1]` is `1` - The cumulative sum of first two elements `[1, 2]` is `1 + 2 = 3` - The cumulative sum of first three elements `[1, 2, 3]` is `1 + 2 + 3 = 6` - The cumulative sum of first four elements `[1, 2, 3, 4]` is `1 + 2 + 3 + 4 = 10` - The cumulative sum of first five elements `[1, 2, 3, 4, 5]` is `1 + 2 + 3 + 4 + 5 = 15` Implement the function to compute the cumulative sum array efficiently for large input sizes.","solution":"from typing import List def cumulativeSum(arr: List[int]) -> List[int]: Returns a new list where each element is the sum of all the preceding elements including itself. Parameters: arr (List[int]): The input list of integers. Returns: List[int]: The cumulative sum list. if not arr: return [] cumulative = [] current_sum = 0 for num in arr: current_sum += num cumulative.append(current_sum) return cumulative"},{"question":"A music streaming application wants to generate personalized playlists for its users. Each user has a list of songs they have listened to in the past. For better recommendations, the application wants to analyze the listening patterns and generate a list of all the unique songs each user has listened to. Given data for several users, where each user\'s listening history is represented as a list of song IDs, implement a function that returns the list of unique song IDs for each user. # Input - The first line contains an integer `m` (`1 ≤ m ≤ 100`), the number of users. - The following `m` lines contain the listening history for each user. Each line starts with an integer `k` (`1 ≤ k ≤ 10000`), the number of songs the user has listened to, followed by `k` integers representing the song IDs. - Note: Song IDs are positive integers and can be very large, but they fit within a 64-bit signed integer. # Output - For each user, output a single line containing the list of unique song IDs they\'ve listened to, sorted in ascending order. # Example Input ``` 3 5 101 202 101 303 202 4 404 202 505 404 3 707 808 909 ``` Output ``` 101 202 303 202 404 505 707 808 909 ``` # Note For the first user, the original listening history is `101, 202, 101, 303, 202`. The unique songs are `101, 202, 303`. For the second user, the original listening history is `404, 202, 505, 404`. The unique songs are `202, 404, 505`. For the third user, the original listening history is `707, 808, 909`. The unique songs are `707, 808, 909`. All song IDs are unique in this case.","solution":"def unique_songs_per_user(num_users, listening_histories): Given the number of users and their listening histories, return the list of unique song IDs each user has listened to in ascending order. :param num_users: Integer, the number of users :param listening_histories: List of lists, where each list contains the listening history of a user :return: List of lists, each containing the unique song IDs for the corresponding user in ascending order result = [] for history in listening_histories: unique_songs = sorted(set(history)) result.append(unique_songs) return result # Example usage: # num_users = 3 # listening_histories = [ # [101, 202, 101, 303, 202], # [404, 202, 505, 404], # [707, 808, 909] # ] # print(unique_songs_per_user(num_users, listening_histories)) # Output: [[101, 202, 303], [202, 404, 505], [707, 808, 909]]"},{"question":"You\'ve been hired by a local cake shop to help manage their cake distribution for a big event. The shop has a number of cakes ready, and each guest at the event should get at least one cake. If possible, all guests should receive an equal number of cakes. If it\'s not possible to distribute all cakes equally, the remaining cakes should be distributed to the first few guests in the line. Your task is to return an array representing the number of cakes each guest will get. For example: 15 cakes, 4 guests: [4,4,4,3] 9 cakes, 5 guests: [2,2,2,2,1] 18 cakes, 6 guests: [3,3,3,3,3,3] The number of guests and cakes will always be greater than or equal to 0. If there are 0 cakes available, return: \\"No cakes available for distribution!\\" If there are 0 guests, return: \\"We need to invite some guests first!\\" Good luck – your local cake shop may just reward you with some delicious slices if you manage this well!","solution":"def distribute_cakes(cakes, guests): Distributes cakes to guests such that each guest gets at least one cake and if possible, all guests get an equal number of cakes. Args: cakes (int): The total number of cakes available. guests (int): The total number of guests. Returns: list: Number of cakes each guest will get. str: Message if there are no cakes or no guests. if cakes == 0: return \\"No cakes available for distribution!\\" if guests == 0: return \\"We need to invite some guests first!\\" # Calculate number of cakes each guest will get cakes_each = cakes // guests remainder = cakes % guests result = [cakes_each + 1 if i < remainder else cakes_each for i in range(guests)] return result"},{"question":"Virus Spread Simulation Imagine a simplified world where an infectious virus can spread through different types of contact between individuals during a simulation. You are given the following inputs: - N: Number of individuals. - M: Number of initial contacts. - Q: Number of queries. - K: Number of initially infected individuals. Each contact is described by three integers a_i, b_i, and c_i: - a_i: The type of contact. - b_i and c_i: The indices of the two individuals involved in the contact. There are also Q queries. Each query asks if a specific individual will be infected after a certain type of contact occurs. The infection spreads based on the following rules: - An initially infected individual can infect another individual if they share a contact of the given type. - If an infected individual has a contact with another individual of the same contact type in the next step, the second person becomes infected. Determine if the specific individual mentioned in the query is infected after a specific type of contact. # Input The input will be provided in the following format: ``` N M Q K initially infected individuals a_1 b_1 c_1 a_2 b_2 c_2 ... a_M b_M c_M query c_1 type_1 c_2 type_2 ... c_Q type_Q ``` # Output For each query i, print \\"YES\\" if the individual c_i is infected after type_i type contact, else print \\"NO\\". # Constraints - 1 leq N, M, Q, K leq 10^5 - 1 leq a_i leq 10 - 1 leq b_i, c_i leq N - all inputs are integers # Example Input ``` 5 5 2 1 1 1 2 3 2 2 1 3 3 4 2 4 5 1 1 5 2 1 4 3 ``` # Example Output ``` YES NO ``` # Explanation In this example, we have 5 individuals and 5 different contacts. Initially, only individual 1 is infected. The queries ask whether individual 1 and individual 4 will be infected after type_1 and type_3 contacts separately. The first query returns \\"YES\\" because individual 1 is already initially infected. The second query returns \\"NO\\" because the infection doesn\'t spread to individual 4 directly after the mentioned contacts.","solution":"def virus_spread_simulation(N, M, Q, K, infected, contacts, queries): from collections import defaultdict, deque # Create a defaultdict of sets to store contact information by type contact_graph = defaultdict(list) for a, b, c in contacts: contact_graph[a].append((b, c)) contact_graph[a].append((c, b)) # A dictionary to track infected status after each contact type infected_after_contact = defaultdict(set) # Process initial set of infected individuals initial_infected = set(infected) def bfs(contact_type, initial_infected): # Check if it already computed if contact_type in infected_after_contact: return infected_after_contact[contact_type] queue = deque(initial_infected) visited = set(initial_infected) while queue: person = queue.popleft() for neighbor in contact_graph[contact_type]: if neighbor[0] == person and neighbor[1] not in visited: visited.add(neighbor[1]) queue.append(neighbor[1]) # Save results for the particular contact type infected_after_contact[contact_type] = visited return visited result = [] for person, contact_type in queries: infected_individuals = bfs(contact_type, initial_infected) result.append(\\"YES\\" if person in infected_individuals else \\"NO\\") return result"},{"question":"During a monotonous summer day, Alice decided to spice things up by playing a game with numbers. She has an array of integers, and her goal is to find pairs of numbers within the array that add up to a specific target sum. Alice wants to know how many such pairs exist and what they are. However, each number in the array can only be used once in forming a pair. Input The first line will contain two integers n and k (1 ≤ n ≤ 105, -109 ≤ k ≤ 109) — the size of the array and the target sum, respectively. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109) — the elements of the array. Output On the first line, print the number of distinct pairs that add up to k. On the next m lines, print the pairs themselves in any order, with each pair on a new line, and each number of the pair separated by a space. If there are multiple solutions, any of them will be accepted. Examples Input 5 6 1 5 7 -1 5 Output 2 1 5 7 -1 Input 4 4 1 2 3 1 Output 1 1 3","solution":"def find_pairs_with_sum(n, k, arr): Finds pairs of numbers in the array that add up to the target sum k. Parameters: n (int): The size of the array. k (int): The target sum. arr (list of int): The array of integers. Returns: tuple: The number of pairs and the list of pairs. seen = {} pairs = [] for num in arr: complement = k - num if complement in seen and seen[complement] > 0: pairs.append((complement, num)) seen[complement] -= 1 else: if num in seen: seen[num] += 1 else: seen[num] = 1 return (len(pairs), pairs)"},{"question":"Alex is opening a fruit stand and needs to create packages of fruits to sell. Each package must contain at least one apple and one banana. Given the number of apples, bananas, and the value of each package, determine the maximum revenue Alex can make by selling the packages. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains three space-separated integers A, B, and P - the number of apples, the number of bananas, and the price of each package in dollars. ------ Output Format ------ For each test case, output on one line the maximum revenue Alex can get by selling the fruit packages. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 0 ≤ A, B ≤ 10^{3} 1 ≤ P ≤ 10^3 ----- Sample Input 1 ------ 4 0 0 100 10 0 50 5 5 10 7 3 5 ----- Sample Output 1 ------ 0 0 50 15 ----- Explanation 1 ------ - Test case 1: Alex has no apples or bananas, so no packages can be created, resulting in 0 revenue. - Test case 2: Although Alex has apples, there are no bananas, so packages cannot be created, resulting in 0 revenue. - Test case 3: Alex can form 5 packages (since he has 5 apples and 5 bananas), earning 5 cdot 10 = 50 dollars. - Test case 4: Alex can form 3 packages (since he has 3 bananas and more than 3 apples), earning 3 cdot 5 = 15 dollars.","solution":"def calculate_max_revenue(t, cases): Given the number of apples, bananas, and the price of each package, determine the maximum revenue from selling the packages. :param t: Total number of test cases. :param cases: List of tuples, where each tuple contains (A, B, P) which are the number of apples, the number of bananas, and the price of each package respectively. :return: A list of integers, each representing the maximum revenue for the corresponding test case. results = [] for A, B, P in cases: max_packages = min(A, B) max_revenue = max_packages * P results.append(max_revenue) return results"},{"question":"A program is required to calculate the minimum number of operations needed to transform a string `s` into another string `t`. The allowed operations are: 1. Insert a character at any position in the string. 2. Remove a character from any position in the string. 3. Replace a character at any position with another character. Given the two input strings `s` and `t`, you need to determine the minimum number of such operations required to convert `s` into `t`. Input: The input consists of two lines. The first line contains the string `s`, and the second line contains the string `t`. The lengths of the strings `s` and `t` are at most 1000 characters. Output: Output the minimum number of operations to transform the string `s` into the string `t`. Example 1: Input: kitten sitting Output: 3 Example 2: Input: flaw lawn Output: 2 Note: - In the first example, the three operations are: - Replace \'k\' with \'s\' - Replace \'e\' with \'i\' - Insert \'g\' at the end - In the second example, the two operations are: - Remove \'f\' - Replace \'w\' with \'n\'","solution":"def min_operations(s, t): Returns the minimum number of operations required to transform string s into string t. m, n = len(s), len(t) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore last character and recur for remaining string elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert character in s dp[i - 1][j], # Remove character from s dp[i - 1][j - 1]) # Replace character in s return dp[m][n]"},{"question":"A popular social media platform keeps track of user engagement by calculating the number of overlapping active sessions within a given period. An active session is defined by its start and end times. Your task is to determine the maximum number of overlapping sessions at any given point in time. ------ Input ------ Input begins with an integer T, the number of test cases. Each test case starts with an integer N, the number of active sessions. Two subsequent lines follow: - The first line contains exactly N positive integers representing the start times of the sessions. - The second line contains exactly N positive integers representing the end times of the sessions (which will be strictly greater than the respective start times). ------ Output ------ For each test case, print the maximum number of overlapping sessions at any point in time. ------ Constraints ------ T≤50 N≤200 All start/end times will be between 1 and 1440, inclusive (representing minutes in a day) ----- Sample Input ------ 2 3 540 560 580 600 580 620 4 120 150 200 300 180 210 330 400 ----- Sample Output ------ 2 2","solution":"def max_overlapping_sessions(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] start_times = test_cases[i][\'start_times\'] end_times = test_cases[i][\'end_times\'] events = [] for start in start_times: events.append((start, \'start\')) for end in end_times: events.append((end, \'end\')) events.sort() max_overlap = 0 current_overlap = 0 for time, event in events: if event == \'start\': current_overlap += 1 if current_overlap > max_overlap: max_overlap = current_overlap else: current_overlap -= 1 results.append(max_overlap) return results"},{"question":"You are given a string S consisting of English alphabet characters. The string represents a sequence of letters that can be repeated multiple times. Your task is to compress the string using the following rules: - Identify the smallest substring T that, when repeated multiple times, forms the string S. - Return the substring T and the number of times it is repeated to form S. If there are multiple such substrings, return the lexicographically smallest one. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string S. Output Format For each test case, print in a new line the substring T and the number of times it is repeated to form S, separated by a space. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^4 S consists of lowercase and uppercase English characters Sample Input 2 ababab abcabcabc Sample Output ab 3 abc 3 Explanation For the first testcase, the substring \\"ab\\" is repeated 3 times to form \\"ababab\\". For the second testcase, the substring \\"abc\\" is repeated 3 times to form \\"abcabcabc\\".","solution":"def find_smallest_repeating_substring(s): Finds the smallest repeating substring T that forms the string s. Returns the substring T and the number of times it is repeated. n = len(s) for i in range(1, n+1): if n % i == 0: candidate = s[:i] if candidate * (n // i) == s: return candidate, n // i return s, 1 # Fallback in the rare case the logic above fails def compress_strings(test_cases): results = [] for s in test_cases: T, count = find_smallest_repeating_substring(s) results.append(f\\"{T} {count}\\") return results"},{"question":"Amanda has recently started reading books and she has a large collection of books at home. Each book has a certain number of pages. Amanda wants to read each book from the first page to the last page but gets bored if she reads too many pages at once. To keep herself engaged, she wants to create a reading schedule such that she reads exactly `k` pages per day and finishes reading a complete book each time she reads. Amanda can take breaks between her reading sessions, but she can\'t split her reading of a single book over two days. Given the number of pages in each book and the required pages Amanda wants to read each day, determine if Amanda can stick to her reading plan, or if it\'s impossible for her to read all her books under the given restriction. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of books in Amanda\'s collection. The second line contains an integer `k` (1 ≤ k ≤ 10^9) — the number of pages Amanda reads per day. The third line contains `n` space-separated integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 10^9) — the number of pages in each book. -----Output----- Print \\"YES\\" if Amanda can follow her reading plan and read exactly `k` pages per day, otherwise print \\"NO\\". -----Examples----- Input 5 40 20 40 80 50 30 Output YES Input 3 50 10 20 30 Output NO Input 4 25 25 50 75 100 Output YES","solution":"def can_follow_reading_plan(n, k, pages): Determine if Amanda can follow her reading plan to read exactly k pages per day. :param n: Number of books :param k: Number of pages to read per day :param pages: List containing the number of pages in each book :return: \\"YES\\" if Amanda can stick to her plan, \\"NO\\" otherwise for page_count in pages: if page_count == k: return \\"YES\\" return \\"NO\\""},{"question":"You have been tasked to create a simplified compiler that compiles a basic custom programming language, \\"MiniLang\\". MiniLang supports basic arithmetic operations and conditional logic and works with integer variables only. # MiniLang Instructions Instruction | Description --- | --- SET var value | Assign `value` to `var` ADD var1 var2 var3 | Assign the result of `var2 + var3` to `var1` ADD var1 var2 con | Assign the result of `var2 + con` to `var1` SUB var1 var2 var3 | Assign the result of `var2 - var3` to `var1` SUB var1 var2 con | Assign the result of `var2 - con` to `var1` IF var1 cond var2 block | Execute `block` if the condition `var1 cond var2` is true. `cond` can be `==`, `!=`, `>`, `>=`, `<`, `<=`. ENDIF | Marks the end of an IF block PRINT var | Print the value of `var` END | End the MiniLang Program # Details 1. Variables in MiniLang are identified by single lowercase letters. 2. `value` and `con` are integers (can be positive or negative). 3. The program starts with the first instruction and executes each line sequentially unless a conditional jump is made using `IF`. 4. The `IF` instruction evaluates a condition and executes the following block of instructions (`IF` block) if true. The block ends with an `ENDIF` command. 5. The `ADD` and `SUB` instructions can use either another variable or an integer constant. 6. The program should terminate upon encountering the `END` instruction. # Input Format The first line contains the number `N` (1 ≤ N ≤ 100) specifying the number of lines of the MiniLang program. The next `N` lines contain the instructions of the MiniLang program. # Output Format Print the values of all variables referred to in the program in lexicographical order, one per line in the format `var=value`. If there are no variables used in the program, print `No variables`. # Examples Input ``` 8 SET a 5 SET b 3 ADD c a b IF a > b SUB a a 1 ENDIF PRINT c END ``` Output ``` a=4 b=3 c=8 ``` Input ``` 5 SET x 10 IF x < 5 SET y 20 ENDIF END ``` Output ``` x=10 ``` # Explanation In the first example, the `IF` block executes because `a > b`, thus `a` is decremented by 1. The final values of `a`, `b`, and `c` are displayed. In the second example, the condition `x < 5` is false, so the `IF` block does not execute. Only `x` gets displayed.","solution":"def compile_minilang(program): Compiles and executes the given MiniLang program, returning the state of all variables referred to. variables = {} output = [] def eval_expr(left, cond, right): if cond == \'==\': return variables[left] == variables[right] if right in variables else variables[left] == int(right) elif cond == \'!=\': return variables[left] != variables[right] if right in variables else variables[left] != int(right) elif cond == \'>\': return variables[left] > variables[right] if right in variables else variables[left] > int(right) elif cond == \'>=\': return variables[left] >= variables[right] if right in variables else variables[left] >= int(right) elif cond == \'<\': return variables[left] < variables[right] if right in variables else variables[left] < int(right) elif cond == \'<=\': return variables[left] <= variables[right] if right in variables else variables[left] <= int(right) return False i = 0 n = len(program) while i < n: line = program[i] parts = line.split() if parts[0] == \'SET\': variables[parts[1]] = int(parts[2]) elif parts[0] == \'ADD\': if parts[3] in variables: variables[parts[1]] = variables[parts[2]] + variables[parts[3]] else: variables[parts[1]] = variables[parts[2]] + int(parts[3]) elif parts[0] == \'SUB\': if parts[3] in variables: variables[parts[1]] = variables[parts[2]] - variables[parts[3]] else: variables[parts[1]] = variables[parts[2]] - int(parts[3]) elif parts[0] == \'IF\': if eval_expr(parts[1], parts[2], parts[3]): i += 1 continue # locate the corresponding ENDIF depth = 1 while depth and i < n - 1: i += 1 if program[i] == \'ENDIF\': depth -= 1 elif program[i].startswith(\'IF \'): depth += 1 elif parts[0] == \'PRINT\': output.append(variables[parts[1]]) elif parts[0] == \'ENDIF\': pass elif parts[0] == \'END\': break i += 1 if variables: return \'n\'.join(f\'{k}={v}\' for k, v in sorted(variables.items())) return \'No variables\'"},{"question":"You are given a grid with M rows and N columns. Each cell in the grid contains an integer value. You can perform the following operation any number of times: choose any subgrid (i.e., a rectangular area within the grid) and flip the sign of all the integers within that subgrid. The goal is to maximize the sum of all integers in the grid. ------ Input ------ The first line of the input contains a single integer T, the number of test cases. For each test case: - The first line contains two integers M and N. - Each of the next M lines contains N integers, representing the grid. ------ Output ------ For each test case, print a single line containing one integer ― the maximum possible sum of all integers in the grid after performing the described operations. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ M, N ≤ 1000 -10^9 ≤ text{Value in each cell} ≤ 10^9 ------ Example ------ Example Input: 2 2 3 1 -1 1 -1 1 -1 2 2 -1 -2 3 4 Example Output: 6 10 Explanation: In the first test case, we can flip the signs of the entire grid to get: -1 1 -1 1 -1 1 So the sum will be -1 + 1 - 1 + 1 - 1 + 1 = 0, which is clearly not optimal. A better approach would be to choose subgrids that ensure maximum sum, like flipping just a subset of rows/columns. In the second test case, flipping the entire grid is optimal as flipping it in subparts doesn\'t yield higher sum. The optimal configuration is: 1 2 -3 -4 Leading to a sum of 10.","solution":"def max_grid_sum(T, test_cases): results = [] for case in test_cases: M, N, grid = case[\'M\'], case[\'N\'], case[\'grid\'] max_sum = 0 # Initialize sum accumulator for row in grid: for value in row: if value < 0: max_sum -= value # Add the absolute value of the negative number else: max_sum += value # Add the positive number results.append(max_sum) return results"},{"question":"PROBLEM SPECIFICATION: You are tasked with creating a program that computes the sum of the digits of a given number raised to the power of another given number. INPUT SPECIFICATION: You will be given \'t\' test cases. Each test case will contain two integers \'x\' and \'y\'. OUTPUT SPECIFICATION: For each test case, print the sum of the digits of the number obtained by raising \'x\' to the power of \'y\'. CONSTRAINTS: 1 ≤ t ≤ 100 1 ≤ x ≤ 100 1 ≤ y ≤ 10 SAMPLE INPUT 2 2 10 3 3 SAMPLE OUTPUT 7 27 Explanation: In the first test case, 2^10 = 1024. The sum of the digits of 1024 is 1 + 0 + 2 + 4 = 7. In the second test case, 3^3 = 27. The sum of the digits of 27 is 2 + 7 = 9.","solution":"def sum_of_digits_of_power(t, test_cases): For each test case, calculate x raised to the power of y and return the sum of its digits. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers, x and y. Returns: list: List of integers representing the sum of digits for each test case. results = [] for x, y in test_cases: # Calculate x raised to the power of y power_result = x ** y # Convert the result to string to be able to sum its digits sum_of_digits = sum(int(digit) for digit in str(power_result)) results.append(sum_of_digits) return results"},{"question":"You are given a list of N integers. There are two types of queries that can be performed on the list: - Update X Y: Set the value at position X to Y. - Max L R: Find the maximum value in the subarray from position L to position R (inclusive). After performing the given sequence of queries, you need to print the result of each \\"Max\\" query. -----Input----- The first line of the input contains two space separated integers N and Q denoting the number of elements in the list and the number of queries respectively. The second line contains N space separated integers representing the initial list. Each of the following Q lines describes a query in the format described above. -----Output----- For each \\"Max\\" query, output a single line containing the maximum number in the specified subarray. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ X, L, R ≤ N - 1 ≤ Y ≤ 1000000000 -----Example----- Input: 5 4 1 3 5 7 9 Update 3 4 Max 2 4 Update 5 0 Max 1 5 Output: 7 7 -----Explanation----- The list changes as follows: Initial: 1 3 5 7 9 Update 3 4: 1 3 4 7 9 Max 2 4: 1 7 (output 7) Update 5 0: 1 3 4 7 0 Max 1 5: 1 7 (output 7) The maximum values in the specified subarrays for each \\"Max\\" query are 7 and 7, respectively.","solution":"def process_queries(N, Q, arr, queries): result = [] for query in queries: parts = query.split() if parts[0] == \\"Update\\": index = int(parts[1]) - 1 # Convert to 0-based index value = int(parts[2]) arr[index] = value elif parts[0] == \\"Max\\": L = int(parts[1]) - 1 # Convert to 0-based index R = int(parts[2]) - 1 # Convert to 0-based index max_value = max(arr[L:R+1]) result.append(max_value) return result"},{"question":"Two drivers are traveling on the same highway but with different schedules. They each travel through a series of checkpoints at varying times. Each driver records the checkpoints they\'ve passed through along with the times they reached them. A driver only passes a checkpoint once, and there\'s a possibility that both drivers have passed through some of the same checkpoints, although at different times. You need to determine which checkpoints, if any, were visited by both drivers. Input The first line contains two integers n and m (1 ≤ n, m ≤ 20) — the number of checkpoints recorded by the first and the second driver respectively. The second line contains n pairs of integers — checkpoints and their corresponding times (in minutes past midnight) recorded by the first driver. Each checkpoint is an integer between 1 and 100, and times are integers between 0 and 1439 (inclusive). The third line contains m pairs of integers — checkpoints and their corresponding times recorded by the second driver. Output Output all the common checkpoints that were visited by both drivers in ascending order. If there are no common checkpoints, print \\"No common checkpoints\\". Examples Input 3 4 1 60 2 120 3 180 2 150 3 240 4 60 1 90 Output 1 2 3 Input 2 3 5 300 6 720 1 1440 2 60 3 320 Output No common checkpoints Note In the first example, both drivers recorded visiting checkpoints 1, 2, and 3, though at different times. Hence, 1, 2, and 3 are the common checkpoints. In the second example, there are no common checkpoints between the two drivers\' records.","solution":"def common_checkpoints(n, m, first_driver, second_driver): Returns the list of common checkpoints visited by both drivers. Otherwise, returns \\"No common checkpoints\\". checkpoints_first = {first_driver[i*2] for i in range(n)} checkpoints_second = {second_driver[i*2] for i in range(m)} common = sorted(checkpoints_first & checkpoints_second) if common: return \' \'.join(map(str, common)) else: return \\"No common checkpoints\\""},{"question":"You are given a grid of size `n * m` filled with integers. Your task is to find the number of cells in the grid that can be reached starting from any cell using Knight\'s moves (as in a chess game). The Knight can move to any of the 8 possible positions: (i-2, j-1), (i-2, j+1), (i-1, j-2), (i-1, j+2), (i+1, j-2), (i+1, j+2), (i+2, j-1), and (i+2, j+1). Note: 1. The knight can only land on cells within the boundaries of the grid. 2. You only need to count the cells that can be reached at least once, not the number of distinct paths to each cell. -----Input----- The first line contains two integers, `n` and `m` (1 le n, m le 1000) – the dimensions of the grid. The next `n` lines contain `m` integers each, representing the grid. -----Output----- Print one integer – the number of cells that can be reached using Knight\'s moves starting from any cell. -----Examples----- Input 3 3 1 1 1 1 1 1 1 1 1 Output 9 Input 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Output 20 Input 1 2 0 0 Output 2","solution":"def reachable_cells(n, m, grid): Returns the number of cells in the grid that can be reached using Knight\'s moves starting from any cell. Args: n (int): number of rows in the grid. m (int): number of columns in the grid. grid (list of list of int): the grid itself. Returns: int: number of cells that can be reached. # Possible moves of a knight moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)] def is_within_bounds(x, y): Checks if the cell (x, y) is within the bounds of the grid. return 0 <= x < n and 0 <= y < m reachable = [[False] * m for _ in range(n)] # For each cell in the grid, check all possible moves for i in range(n): for j in range(m): reachable[i][j] = True # the starting cell is reachable for move in moves: ni, nj = i + move[0], j + move[1] if is_within_bounds(ni, nj): reachable[ni][nj] = True # Count the number of cells that are reachable count = sum(sum(row) for row in reachable) return count"},{"question":"A list of N integers is called \\"Perfectly Balanced\\" if the sum of the absolute differences between every pair of consecutive integers is the same. In other words, a list [a1, a2, a3, ..., aN] is \\"Perfectly Balanced\\" if there exists an integer D such that |a2 - a1| = |a3 - a2| = ... = |aN - a(N-1)| = D. You are given an integer N. Your task is to determine if there exists a \\"Perfectly Balanced\\" list of exactly N integers. If such a list exists, print any one example. If no such list exists, print -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer N — the length of the list. ------ Output Format ------ For each test case, output on a new line either a list of exactly N integers that forms a \\"Perfectly Balanced\\" sequence, or -1 if no such list exists. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 10^{5} - The sum of N over all test cases won\'t exceed 2cdot 10^{5}. ----- Sample Input 1 ------ 3 2 3 4 ----- Sample Output 1 ------ 1 2 -1 1 4 7 10 ----- explanation 1 ------ Test case 1: A \\"Perfectly Balanced\\" list is [1, 2]. |2-1| = 1 which is equal to D. Test case 2: No \\"Perfectly Balanced\\" list of length N=3 exists. Test case 3: A \\"Perfectly Balanced\\" list is [1, 4, 7, 10]. |4-1| = |7-4| = |10-7| = 3 which is equal to D. Note that there are other valid lists, such as [2, 5, 8, 11]. Any valid list will be accepted as output.","solution":"def perfectly_balanced(N): Determines if there exists a \\"Perfectly Balanced\\" list of exactly N integers. Returns one example if such a list exists, otherwise returns -1. # If N is odd, return -1 because it\'s impossible to create such a list if N % 2 != 0: return -1 # Start with any integer, e.g., 1, and increment by a constant D, e.g., 3 D = 3 result = [1 + i * D for i in range(N)] return result def handle_test_cases(T, test_cases): results = [] for N in test_cases: result = perfectly_balanced(N) results.append(result) return results"},{"question":"In the world of gaming, one popular role-playing game has players battling mythical creatures for gold. Each player character can either attack or use a skill during their turn. Players have limited resources, including health points (HP) and stamina points (SP), which they must manage carefully. # Problem Statement: You are tasked with designing a combat simulation for the role-playing game. In the simulation, a player character (PC) is battling a mythical creature (MC). The game follows a turn-based system where both the player character and the mythical creature take turns to attack each other until one of them is defeated (i.e., their HP drops to or below 0). The sequence of events in each turn are as follows: 1. The player character decides whether to attack or use a skill. 2. The mythical creature retaliates with an attack. The PC has the following attributes: - `hp`: Integer, initial health points. - `sp`: Integer, initial stamina points. - `attack_power`: Integer, the amount of damage a regular attack inflicts. - `skill_power`: Integer, the amount of damage a skill inflicts. - `skill_cost`: Integer, the stamina required to use a skill. The MC has the following attributes: - `hp`: Integer, initial health points. - `attack_power`: Integer, the amount of damage a regular attack inflicts. # Input The first line contains five space-separated integers representing the PC\'s attributes: `pc_hp`, `pc_sp`, `pc_attack_power`, `pc_skill_power`, `pc_skill_cost`. The second line contains two space-separated integers representing the MC\'s attributes: `mc_hp`, and `mc_attack_power`. The third line consists of a single integer `mids`, representing the number of turns where the PC uses skills instead of regular attacks. The next line contains `mids` space-separated integers, each representing the specific turn numbers (1-based index) on which the PC uses a skill. # Output Print `Victory` if the player character defeats the mythical creature, otherwise print `Defeat`. # Example Input ``` 30 10 5 12 3 50 7 2 2 4 ``` Output ``` Victory ``` # Explanation - **Turn 1:** * PC performs a regular attack, dealing 5 damage. * MC retaliates, dealing 7 damage. * PC\'s HP: 23, MC\'s HP: 45 - **Turn 2:** * PC uses a skill (skill cost = 3), dealing 12 damage. * MC retaliates, dealing 7 damage. * PC\'s HP: 16, PC\'s SP: 7, MC\'s HP: 33 - **Turn 3:** * PC performs a regular attack, dealing 5 damage. * MC retaliates, dealing 7 damage. * PC\'s HP: 9, MC\'s HP: 28 - **Turn 4:** * PC uses a skill (skill cost = 3), dealing 12 damage. * MC retaliates, dealing 7 damage. * PC\'s HP: 2, PC\'s SP: 4, MC\'s HP: 16 - **Turn 5:** * PC performs a regular attack, dealing 5 damage. * MC retaliates, dealing 7 damage. * PC\'s HP: -5, MC\'s HP: 11 PC loses the battle, hence the correct output should be `Defeat`. Correcting the example illustrates that careful resource management and turn sequencing are crucial in determining the outcome of the battle.","solution":"def combat_simulation(pc_hp, pc_sp, pc_attack_power, pc_skill_power, pc_skill_cost, mc_hp, mc_attack_power, mids, skill_turns): turn = 1 skill_index = 0 while pc_hp > 0 and mc_hp > 0: if skill_index < mids and turn == skill_turns[skill_index]: # PC uses skill if pc_sp >= pc_skill_cost: mc_hp -= pc_skill_power pc_sp -= pc_skill_cost skill_index += 1 else: mc_hp -= pc_attack_power else: # PC regular attack mc_hp -= pc_attack_power if mc_hp <= 0: break # MC retaliates pc_hp -= mc_attack_power turn += 1 if mc_hp <= 0: return \\"Victory\\" else: return \\"Defeat\\" # Example usage: # result = combat_simulation(30, 10, 5, 12, 3, 50, 7, 2, [2, 4]) # print(result) # Output: Defeat"},{"question":"In a game, there are m integers displayed in a row. You can perform the following operation any number of times: choose any two adjacent integers and replace them with their sum. Determine the minimum number of operations needed to turn all integers into one single integer. -----Input----- The first line contains an integer m (1 ≤ m ≤ 50) — the number of integers on the table. The second line contains m integers separated by spaces, which represent the integers on the table. Each integer will be between 1 and 100 inclusive. -----Output----- Print a single integer — the minimum number of operations required. -----Examples----- Input 3 1 2 3 Output 2 Input 4 4 4 4 4 Output 3 Input 5 10 20 30 40 50 Output 4","solution":"def min_operations_to_single_integer(m, integers): Given a list of integers, returns the minimum number of operations needed to turn all integers into one single integer. The operation allowed is to choose any two adjacent integers and replace them with their sum. # The idea is that each operation reduces the number of integers in the list by 1 # To get from m integers to 1 integer, we need exactly m-1 operations return m - 1"},{"question":"You are given an array of integers a of length n. Your task is to find the length of the longest subarray such that all its elements are divisible by a given integer k. A subarray is defined as a contiguous part of an array. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n (1 le n le 10^5) and k (1 le k le 100). The second line of each test case contains n integers — the elements of the array a (1 le a[i] le 10^9). -----Output----- For each test case, print a single integer — the length of the longest subarray such that all its elements are divisible by k. -----Examples----- Input 3 5 3 3 6 9 4 12 4 2 8 6 7 4 5 5 10 15 20 25 30 Output 3 2 5 -----Notes----- In the first test case, the longest subarray divisible by 3 is [3, 6, 9] which has a length of 3. In the second test case, the longest subarray divisible by 2 is [8, 6] which has a length of 2. In the third test case, the entire array is divisible by 5, so the length of the longest subarray is 5.","solution":"def longest_divisible_subarray(t, test_cases): results = [] def find_longest_subarray(n, k, a): max_len = 0 current_len = 0 for num in a: if num % k == 0: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len for case in test_cases: n, k, a = case results.append(find_longest_subarray(n, k, a)) return results"},{"question":"A word \\"hello\\" is defined as a string comprised of any permutation of the letters \'h\', \'e\', \'l\', \'l\', \'o\'. For example, \\"hleol\\" and \\"loleh\\" are considered instances of the word \\"hello\\". John has a collection of strings and wonders how many permutations of the word \\"hello\\" he can find in his collection. John will provide you with a list of strings, and your task is to identify and count the strings that are permutations of \\"hello\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of strings in John\'s collection. Each of the next n lines contains a single string of length exactly 5 consisting of lowercase English letters. -----Output----- Print a single integer representing the count of strings that are permutations of \\"hello\\". -----Examples----- Input 3 hello helol abcde Output 2 Input 5 loleh olelh banana apple hoell Output 3","solution":"def count_hello_permutations(n, strings): Counts the strings that are permutations of the word \'hello\'. :param n: Integer, number of strings in the collection :param strings: List of strings :return: Integer, count of \'hello\' permutations hello_sorted = sorted(\\"hello\\") count = 0 for s in strings: if sorted(s) == hello_sorted: count += 1 return count"},{"question":"Zara loves working with matrices and recently came across the idea of matrix diagonals. She came up with a challenge for her friend Aman where he has to find the sum of the diagonals of a given square matrix. Zara, however, added a twist: Aman has to find the sum of the main diagonal and anti-diagonal, but he should not count any element twice if it is present in both diagonals (i.e., the center element of an odd-dimensioned matrix). Your task is to help Aman by writing a program that takes the size of the matrix and the matrix itself as input and prints the required sum. Input Format: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the size of the NxN matrix. - Next N lines follow, each containing N integers separated by spaces, representing the matrix. Output Format: - For each test case, print a single integer, the sum of the main diagonal and anti-diagonal elements, with any shared element counted only once. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - Elements of the matrix are integers in the range -1000 to 1000 SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SAMPLE OUTPUT 25 68 Explanation: For the first test case: The main diagonal elements are 1, 5, 9. The anti-diagonal elements are 3, 5, 7. The combined sum is 1 + 5 + 9 + 3 + 7 - 5 (where 5 is subtracted once because it appears in both diagonals). Sum = 1 + 9 + 7 + 3 + 5 = 25 For the second test case: The main diagonal elements are 1, 6, 11, 16. The anti-diagonal elements are 4, 7, 10, 13. No element is counted twice. Sum = 1 + 6 + 11 + 16 + 4 + 7 + 10 + 13 = 68","solution":"def sum_diagonals(matrix): N = len(matrix) main_diagonal_sum = 0 anti_diagonal_sum = 0 for i in range(N): main_diagonal_sum += matrix[i][i] anti_diagonal_sum += matrix[i][N - 1 - i] if N % 2 != 0: center_element = matrix[N // 2][N // 2] return main_diagonal_sum + anti_diagonal_sum - center_element return main_diagonal_sum + anti_diagonal_sum def process_test_cases(T, test_cases): results = [] for test_case in test_cases: N = test_case[\'N\'] matrix = test_case[\'matrix\'] results.append(sum_diagonals(matrix)) return results"},{"question":"Yuji is a passionate coder and loves solving algorithmic problems. Recently, he has been practicing merging k sorted linked lists. Given k sorted linked lists, Yuji wants to merge them into one sorted linked list while maintaining the non-decreasing order. Each linked list is represented as a sequence of integers. Merge all the given linked lists into one new linked list and return the head of the merged linked list. -----Constraints----- - 1 le k le 100 - Each linked list will have a length of up to 1000. - The value of each node in the linked list will be between -10^4 and 10^4. -----Input----- Input is given from Standard Input in the following format: k list_1 list_2 ... list_k Each list is represented as a sequence of space-separated integers ending with a newline character. -----Output----- Output the merged linked list as a sequence of space-separated integers. -----Sample Input----- 3 1 4 5 1 3 4 2 6 -----Sample Output----- 1 1 2 3 4 4 5 6 - The first list is [1, 4, 5]. - The second list is [1, 3, 4]. - The third list is [2, 6]. Merging these lists results in [1, 1, 2, 3, 4, 4, 5, 6].","solution":"import heapq class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_k_lists(lists): Merges k sorted linked lists into one sorted linked list. :param lists: A list of ListNode objects where each ListNode is the head of a sorted linked list. :return: ListNode object which is the head of the merged sorted linked list. min_heap = [] # Initialize the heap for idx, node in enumerate(lists): if node: heapq.heappush(min_heap, (node.val, idx, node)) dummy = ListNode() current = dummy while min_heap: val, idx, node = heapq.heappop(min_heap) current.next = ListNode(val) current = current.next if node.next: heapq.heappush(min_heap, (node.next.val, idx, node.next)) return dummy.next def linked_list_from_list(lst): Converts a list into a linked list. :param lst: list of integers :return: ListNode head of the linked list dummy = ListNode() current = dummy for value in lst: current.next = ListNode(value) current = current.next return dummy.next def list_from_linked_list(node): Converts a linked list into a list. :param node: ListNode head of the linked list :return: list of integers result = [] while node: result.append(node.val) node = node.next return result def main(): import sys input = sys.stdin.read data = input().splitlines() k = int(data[0]) lists = [list(map(int, line.split())) for line in data[1:k+1]] linked_lists = [linked_list_from_list(lst) for lst in lists] merged_head = merge_k_lists(linked_lists) merged_list = list_from_linked_list(merged_head) print(\\" \\".join(map(str, merged_list))) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string S consisting of lowercase English letters. You need to determine the smallest subsequence of the string that appears in alphabetical order and contains all unique characters of the string. For example: Input: S = \\"bcabc\\" Output: \\"abc\\" Explanation: The smallest subsequence in alphabetical order that contains all unique characters is \\"abc\\". Input: S = \\"cbacdcbc\\" Output: \\"acdb\\" Explanation: The smallest subsequence in alphabetical order that contains all unique characters is \\"acdb\\". Your Task: You do not need to read input or print anything. Your task is to complete the function smallestSubsequence() which takes the string S as an input parameter and returns the smallest subsequence as described. Expected Time Complexity: O(N) where N is the length of the string. Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of S ≤ 1000 S consists of lowercase English letters only.","solution":"def smallestSubsequence(s): Returns the smallest subsequence of the string that appears in alphabetical order and contains all unique characters of the string. last_occurrence = {char: i for i, char in enumerate(s)} seen = set() stack = [] for i, char in enumerate(s): if char in seen: continue while stack and char < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"There is a famous online multiplayer game called \\"Artifact Collector\\" where players move around a virtual world collecting artifacts and storing them in their inventory. Each artifact has a type and a value. Players can sell artifacts from their inventory to gain points, with the player gaining points equal to the value of the sold artifact. Once an artifact is sold, it is removed from the player\'s inventory. Each player has a limited inventory capacity, and once it is full, they need to decide which artifacts to keep and which to sell. The game developers want to implement a feature that helps players manage their inventory by suggesting which artifact to sell based on its value to type ratio, so that they can maximize their points. Your task is to design an algorithm that helps the player by identifying the least valuable artifact (based on value to type ratio) to sell when their inventory is full. -----Input----- The input consists of multiple test cases. Each test case begins with a line containing two integers: the number of artifacts 1 <= n <= 1000 in the player\'s inventory and the maximum inventory capacity 1 <= m <= 1000. The next n lines describe the artifacts in the inventory. Each line contains a string (the type of the artifact) followed by an integer (the value of the artifact). The input is terminated by a test case where n = m = 0. -----Output----- For each test case, output a single line with the type of the artifact that has the lowest value to type ratio that should be sold when the inventory is full. If multiple artifacts have the same ratio, output the type of the first such artifact. -----Example----- Input: 5 4 relic 10 gem 20 painting 5 vase 15 statue 10 0 0 Output: painting","solution":"def suggest_artifact_to_sell(n, m, artifacts): Suggest which artifact to sell based on its value to type ratio to maximize points. :param n: Number of artifacts in the inventory. :param m: Maximum inventory capacity. :param artifacts: A list of tuples where each tuple contains (type, value) of the artifact. :return: The type of the artifact that has the lowest value to type ratio that should be sold. if n <= m: return None lowest_value_to_type_ratio = float(\'inf\') artifact_to_sell = None for artifact_type, artifact_value in artifacts: value_to_type_ratio = artifact_value if value_to_type_ratio < lowest_value_to_type_ratio: lowest_value_to_type_ratio = value_to_type_ratio artifact_to_sell = artifact_type return artifact_to_sell def process_input(input_data): Process the input data and return the appropriate output. :param input_data: The input data as a multi-line string. :return: List of results for each test case. lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): n, m = map(int, lines[index].split()) index += 1 if n == 0 and m == 0: break artifacts = [] for _ in range(n): artifact_data = lines[index].split() artifact_type = artifact_data[0] artifact_value = int(artifact_data[1]) artifacts.append((artifact_type, artifact_value)) index += 1 result = suggest_artifact_to_sell(n, m, artifacts) if result: results.append(result) return results"},{"question":"Planet Zorg needs your help! Zorg is a planet where cities are situated in a linear sequence connected by roads. Each road between two cities has a travel cost associated with it. Almost every year, the travel costs change due to weather conditions, repairs, or other reasons. The citizens regularly ask about the minimum travel cost between two cities. You are given `n` cities, and `n-1` roads connecting them in a line. Additionally, you have to process `q` queries of two types: 1. Update the travel cost of a road. 2. Find the minimum travel cost between two cities. Write a program to help them. **Input:** - The first line contains two integers `n` and `q` (2 ≤ n, q ≤ 100000) - the number of cities and the number of queries, respectively. - The next line contains `n-1` integers - the travel costs of the roads in order between consecutive cities. - The next `q` lines contain the queries. Each query can be one of two types: - \\"UPDATE x y\\" - update the cost of the road between cities `x` and `x+1` to `y` (1 ≤ x < n, 0 ≤ y ≤ 100000). - \\"MIN a b\\" - find the minimum travel cost between cities `a` and `b` (1 ≤ a, b ≤ n). **Output:** - For each \\"MIN\\" query, output the minimum travel cost between the given cities. **Example:** Input: ``` 5 4 4 5 3 6 MIN 1 3 UPDATE 2 2 MIN 1 3 MIN 3 5 ``` Output: ``` 4 2 3 ``` **Explanation:** 1. The initial costs are: `[4, 5, 3, 6]`. 2. \\"MIN 1 3\\" queries the minimum cost between cities 1 and 3, which is 4 (roads: 4, 5). 3. \\"UPDATE 2 2\\" updates the cost of the second road to 2, so the costs become `[4, 2, 3, 6]`. 4. \\"MIN 1 3\\" now returns 2 (roads: 4, 2). 5. \\"MIN 3 5\\" returns 3 (roads: 3, 6).","solution":"class TravelPlanner: def __init__(self, costs): self.costs = costs def update_cost(self, x, y): self.costs[x - 1] = y def min_cost(self, a, b): return min(self.costs[a - 1:b - 1]) def process_queries(n, q, costs, queries): planner = TravelPlanner(costs) results = [] for query in queries: parts = query.split() if parts[0] == \\"UPDATE\\": planner.update_cost(int(parts[1]), int(parts[2])) elif parts[0] == \\"MIN\\": results.append(planner.min_cost(int(parts[1]), int(parts[2]))) return results"},{"question":"In a software system, there are N components, each identified by a unique integer from 1 to N. Each component may depend on several other components to function correctly. These dependencies are given as pairs of integers (a, b), where component a depends on component b. This relationship is directional, meaning that if (a, b) is given, a cannot function without b, but b can function independently of a. It is guaranteed that there are no cyclic dependencies (i.e., the dependencies form a directed acyclic graph). You are tasked with upgrading all the components to the latest version. To upgrade a component, all the components it directly or indirectly depends on must already be upgraded. Determine an ordering of the components such that each component is upgraded only after all its dependencies are upgraded. Input Format The first line contains two integers, N and M, where N is the number of components, and M is the number of dependency pairs. The next M lines each contain two integers, a and b, indicating that component a depends on component b. Output Format Output a single line containing the N components in the order they should be upgraded. If there are multiple valid orders, any one of them is acceptable. Constraints 1 ≤ N ≤ 10000 0 ≤ M ≤ 50000 SAMPLE INPUT 5 4 2 1 3 2 4 2 5 3 SAMPLE OUTPUT 1 2 3 4 5 Explanation The dependencies are as follows: - Component 2 depends on component 1. - Component 3 depends on component 2. - Component 4 depends on component 2. - Component 5 depends on component 3. One possible valid order to upgrade the components is: 1, 2, 3, 4, 5. This order ensures that each component is only upgraded after all its dependencies have been upgraded. Note that other orders like 1, 2, 3, 5, 4 would also be acceptable.","solution":"from collections import defaultdict, deque def find_upgrade_order(N, M, dependencies): Determines an order of upgrading components such that dependencies are respected. Arguments: N : int : number of components M : int : number of dependency pairs dependencies : List[Tuple[int, int]] : list of (a, b) where a depends on b Returns: List[int] : the order of component upgrades satisfying the dependencies # Create a graph representing dependencies graph = defaultdict(list) in_degree = [0] * (N + 1) # Build the graph and in-degree array for a, b in dependencies: graph[b].append(a) in_degree[a] += 1 # Topological sorting using Kahn\'s algorithm order = [] queue = deque(node for node in range(1, N + 1) if in_degree[node] == 0) while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return order"},{"question":"You are given an array of n positive integers representing the weights of n stones. You are to combine stones repeatedly until only one stone remains. The process to combine stones is as follows: 1. Select any two stones from the array. 2. Their combined weight is the absolute difference of their weights. 3. Replace the two stones with their combined weight in the array. The goal is to determine the weight of the last remaining stone if you follow the optimal strategy to minimize it. -----Input----- The first line of input contains a single integer, n (1 ≤ n ≤ 100). The second line contains n space-separated integers, where each integer is a positive integer representing the weight of a stone. -----Output----- Print a single integer representing the weight of the last remaining stone. -----Examples----- Input 4 2 7 4 1 Output 0 Input 3 3 8 5 Output 0 Input 4 1 3 7 2 Output 1 -----Note----- Explanation of the first sample: Initially, the array of stones is [2, 7, 4, 1]. 1. Combine 7 and 4 -> new stone weight is |7 - 4| = 3, array becomes [2, 3, 1]. 2. Combine 3 and 2 -> new stone weight is |3 - 2| = 1, array becomes [1, 1]. 3. Combine 1 and 1 -> new stone weight is |1 - 1| = 0, array becomes [0]. Thus, the weight of the last remaining stone is 0. Explanation of the second sample: Initially, the array of stones is [3, 8, 5]. 1. Combine 8 and 5 -> new stone weight is |8 - 5| = 3, array becomes [3, 3]. 2. Combine 3 and 3 -> new stone weight is |3 - 3| = 0, array becomes [0]. Thus, the weight of the last remaining stone is 0.","solution":"import heapq def last_stone_weight(stones): Determine the weight of the last remaining stone. :param stones: List of integers representing the weights of stones. :return: The weight of the last remaining stone. # Use a max heap to always get the two largest stones max_heap = [-stone for stone in stones] heapq.heapify(max_heap) while len(max_heap) > 1: stone1 = -heapq.heappop(max_heap) stone2 = -heapq.heappop(max_heap) if stone1 != stone2: heapq.heappush(max_heap, -(stone1 - stone2)) return -max_heap[0] if max_heap else 0"},{"question":"There are N farmers in the kingdom of Fieldia. Each farmer has a unique ID between 1 and N. The farmers occasionally form pairs to collaborate on some tasks. You have a list of pairs of IDs, where each pair represents a collaboration between those two farmers. The King wants to know how many connected groups of farmers there are. A connected group consists of farmers who can reach each other directly or indirectly through collaborations. Given the number of farmers and the list of collaborations, determine the number of connected groups of farmers. -----Constraints----- - 1≤N≤10^3 - 0≤E≤N×(N-1)/2 (E is the number of collaborations) - 1≤u,v≤N (u and v are the farmer IDs in each pair) - u≠v (There are no self-collaborations) - No duplicate pairs in the given list -----Input----- Input is given from Standard Input in the following format: N E u_1 v_1 : u_E v_E -----Output----- Print the number of connected groups. -----Sample Input----- 5 3 1 2 3 4 4 5 -----Sample Output----- 2 For example, in the sample input above, there are 5 farmers and 3 collaborations. Farmers 1 and 2 form one group, and farmers 3, 4, and 5 form another group. Thus, the number of connected groups is 2.","solution":"def count_connected_groups(N, collaborations): from collections import defaultdict def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) graph = defaultdict(list) for u, v in collaborations: graph[u].append(v) graph[v].append(u) visited = set() connected_components = 0 for farmer in range(1, N + 1): if farmer not in visited: connected_components += 1 visited.add(farmer) dfs(farmer, visited, graph) return connected_components"},{"question":"You are given an array `A` of length `n` where each element is an integer between 1 and `n`. The array may contain duplicates and some elements between 1 and `n` may be missing. Your task is to find the smallest missing positive integer that is not present in the array. You are required to solve the problem with a time complexity of O(n) and using O(1) space complexity, meaning you must solve it in-place. -----Input----- The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the array. The second line of the input contains `n` integers, each between 1 and `n` — the elements of the array `A`. -----Output----- Print one integer — the smallest missing positive integer. -----Examples----- Input 5 3 4 -1 1 1 Output 2 Input 3 1 2 0 Output 3 Input 4 2 3 3 1 Output 4 -----Note----- In the first example, the array is `[3, 4, -1, 1, 1]`. The smallest missing positive integer in the range from 1 to 5 is `2`. In the second example, the array is `[1, 2, 0]`. The numbers 1 and 2 are present, but 3 is missing. In the third example, the array is `[2, 3, 3, 1]`. The numbers 1, 2, and 3 are present, but 4 is missing.","solution":"def smallest_missing_positive(arr): n = len(arr) # Place each number in its correct position if possible for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: # swap arr[i] with arr[arr[i] - 1] arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Find the smallest missing positive number for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Consider a hotel with n rooms. Each room needs to be cleaned every day, but there are certain constraints and preferences. There are k cleaning staff members and each member has a schedule for which rooms they prefer to clean. The schedule is given as a list of lists where each sublist contains the rooms a particular staff member can clean. To ensure efficiency, no staff member should be assigned more than two rooms to clean per day, and each room should be cleaned by exactly one staff member. Additionally, you want to ensure the time each staff member spends cleaning is balanced as much as possible. The goal is to minimize the maximum number of rooms any single staff member is assigned. For example, suppose we have n=5 rooms and k=3 staff members. The preference schedule is as follows: - Staff 1 can clean rooms [1, 2, 3] - Staff 2 can clean rooms [2, 4] - Staff 3 can clean rooms [1, 3, 5] A possible solution is: - Assign Staff 1 to rooms 1 and 2 - Assign Staff 2 to rooms 4 and 3 - Assign Staff 3 to room 5 In this case, the maximum number of rooms assigned to any staff member is 2. -----Input----- The first line of the input contains an integer t (1 le t le 100) — the number of test cases in the input. Each test case starts with a line containing two integers n and k (1 le n, k le 1000) separated by a space — the number of rooms and the number of cleaning staff members. Then follow k lines, each containing a space-separated list of integers. The i-th list corresponds to the rooms that the i-th staff member can clean. Each list has a length between 1 and n inclusive, and all integers are between 1 and n. It is guaranteed that the sum of all rooms across the lists within a single test case covers all n rooms. -----Output----- Print t lines, each line must contain the answer to the corresponding test case — the minimum possible value of the maximum number of rooms assigned to any staff member. -----Examples----- **Input** 3 5 3 1 2 3 2 4 1 3 5 4 4 1 2 3 4 6 3 1 2 3 4 5 2 3 4 6 1 5 6 **Output** 2 1 2 Note: In the first example, the optimal room assignment minimizes the maximum number of rooms any single staff member is assigned to 2. In the second example, each staff member can be assigned to their single preferred room, making the maximum count 1. In the third example, the optimal assignment ensures no staff member is assigned more than 2 rooms.","solution":"def min_max_rooms(t, cases): from collections import defaultdict import heapq results = [] for case in cases: n, k, schedules = case room_to_staff = defaultdict(list) for i, schedule in enumerate(schedules): for room in schedule: room_to_staff[room].append(i) staff_rooms = [0] * k max_heap = [] for rooms in schedules: if len(rooms) > 2: heapq.heappush(max_heap, (-len(rooms), rooms)) while max_heap: _, rooms = heapq.heappop(max_heap) rooms_assigned = 0 for room in rooms: if rooms_assigned >= 2: break for staff in room_to_staff[room]: if staff_rooms[staff] < 2: staff_rooms[staff] += 1 rooms_assigned += 1 break for rooms in schedules: for room in rooms: for staff in room_to_staff[room]: if staff_rooms[staff] < 2: staff_rooms[staff] += 1 break results.append(max(staff_rooms)) return results"},{"question":"In a fantasy world, there is a circular city with M gates placed equidistantly along its circumference. A wizard can cast teleportation spells between any two gates but prefers to minimize the distance traveled. The city has numbered gates from 1 to M in clockwise order. Given Q queries, each containing two gate numbers, find the minimum distance the wizard needs to teleport from the first gate to the second gate either in the clockwise or counterclockwise direction. Example 1: Input: M = 6 gates[ ] = {1, 3} Q = 1 Output: 2 Explanation: The distance from gate 1 to gate 3 is 2 in the clockwise direction. Example 2: Input: M = 8 gates[ ] = {4, 7} Q = 1 Output: 3 Explanation: The distance from gate 4 to gate 7 is 3 in the clockwise direction. Your Task: You don\'t need to read input or print anything. Complete the function minimumDistance( ) which takes integer M, array of integers gates[ ] and integer Q as input parameters and returns an array of integers representing the minimum distances for each query. Expected Time Complexity: O(Q) Expected Auxiliary Space: O(1) Constraints: 2 ≤ M ≤ 10^{4} 1 ≤ gates[i] ≤ M 1 ≤ Q ≤ 10^{5}","solution":"def minimumDistance(M, gates): Returns the minimum distance between the pairs of gates in the circular city. :param M: int - number of total gates in the circular city :param gates: list - pairs of gates to query the minimum distance between them :return: list - minimum distances for each query result = [] for i in range(0, len(gates), 2): gate1 = gates[i] gate2 = gates[i+1] clockwise_distance = abs(gate2 - gate1) counterclockwise_distance = M - clockwise_distance result.append(min(clockwise_distance, counterclockwise_distance)) return result"},{"question":"Given an array of integers, your task is to find the two elements that have the smallest absolute difference between them. Write a program that outputs the pair of numbers and their absolute difference. -----Input----- The input starts with a single integer `n` (2 ≤ n ≤ 10^5), the number of elements in the array. The second line contains `n` integers separated by spaces, which represent the elements of the array. The elements will be distinct and can range from -10^6 to 10^6. -----Output----- Output a single line containing three integers: the two elements with the smallest absolute difference, followed by the absolute difference between them. The pair of numbers should be output in ascending order. -----Examples----- Input 5 1 5 3 19 18 Output 18 19 1 Input 3 -1 -6 -3 Output -3 -1 2","solution":"def find_min_absolute_difference(n, arr): arr.sort() min_diff = float(\'inf\') min_pair = (0, 0) for i in range(n - 1): diff = abs(arr[i + 1] - arr[i]) if diff < min_diff: min_diff = diff min_pair = (arr[i], arr[i + 1]) return min_pair[0], min_pair[1], min_diff"},{"question":"Given an integer array `arr` and a target integer `target`, write a function that moves all instances of `target` to the end of the array while preserving the relative order of the non-target elements. You must achieve this in O(n) time and O(1) additional space complexity. # Function Signature ```python def move_target_to_end(arr: List[int], target: int) -> None: pass ``` # Constraints - The input list `arr` will have between 0 and 100,000 elements. - Each element in `arr` will be an integer in the range [-1000, 1000]. - The target integer `target` will also be in the range [-1000, 1000]. # Input - `arr`: A list of integers. - `target`: An integer representing the element that needs to be moved to the end of the list. # Output Modify the input list `arr` in-place. The function should not return any value. # Example **Input** ``` arr = [2, 1, 2, 3, 2, 4] target = 2 ``` **Output** ``` arr = [1, 3, 4, 2, 2, 2] ``` **Input** ``` arr = [1, 3, 5, 5, 5, 1, 5] target = 5 ``` **Output** ``` arr = [1, 3, 1, 5, 5, 5, 5] ``` # Note - The relative order of non-target elements must be preserved. - Only move the target elements to the end, do not sort the array.","solution":"from typing import List def move_target_to_end(arr: List[int], target: int) -> None: Moves all instances of \'target\' to the end of the list \'arr\' while preserving the relative order of non-target elements. Args: arr (List[int]): The input list of integers. target (int): The target integer to move to the end. Returns: None n = len(arr) if n == 0: return write_index = 0 # First pass: Move all non-target elements to the front for i in range(n): if arr[i] != target: arr[write_index] = arr[i] write_index += 1 # Second pass: Fill the remainder of the array with the target elements for i in range(write_index, n): arr[i] = target"},{"question":"Create a function that takes a string and returns the most frequent word in the string. If there is a tie, return the word that appears first. Words are defined as sequences of alphanumeric characters and are case-insensitive. For F#, return the word as a string type. Examples: ```python most_frequent_word(\\"Apple banana apple\\") => returns \\"apple\\" # \\"apple\\" appears twice most_frequent_word(\\"Banana banana apple\\") => returns \\"banana\\" # both words appear twice, but \\"banana\\" appears first most_frequent_word(\\"\\") => returns \\"\\" # empty string, no words most_frequent_word(\\"Zebra apple zebra Zebra Apple\\") => returns \\"zebra\\" # both \\"zebra\\" and \\"apple\\" appear twice, but \\"zebra\\" appears first in the original list ```","solution":"def most_frequent_word(s): import re from collections import Counter words = re.findall(r\'bw+b\', s.lower()) if not words: return \\"\\" word_counts = Counter(words) most_common_word, _ = word_counts.most_common(1)[0] return most_common_word"},{"question":"Alex is planning to build a garden with N (1 ≤ N ≤ 100,000) unique types of flowers. Each flower type is numbered from 1 to N. However, due to the scarcity of water, he can only choose M (1 ≤ M ≤ 10) flower types that consume the least water. For each flower type, Alex knows the amount of water it consumes per day given by the array W of size N, where W[i] represents the water consumption of the i-th flower type. He wants to find out which flower types he should choose to minimize the total water consumption. Input The first line contains an integer \'t\' (1 ≤ t ≤ 10), the number of test cases. t test cases follow. Each test case consists of two lines: The first line contains two space-separated integers N and M. The second line contains N space-separated integers representing the array W of size N. Output For each test case, output M space-separated integers in a single line, representing the flower types with the minimum water consumption in ascending order of their indices. Example Input: 2 5 2 4 2 5 1 3 3 1 7 8 6 Output: 2 4 3 Explanation In the first test case, the flower types that consume the least water are 2 and 4 (with water consumptions of 2 and 1 respectively). In the second test case, the flower type that consumes the least water is 3 (with water consumption of 6).","solution":"def choose_flowers(t, test_cases): results = [] for case in test_cases: N, M = case[0] W = case[1] water_consumption = sorted([(W[i], i + 1) for i in range(N)]) chosen_flowers = sorted([idx for water, idx in water_consumption[:M]]) results.append(chosen_flowers) return results"},{"question":"In a game, there are N (1 leq N leq 200000) players standing in a circle. Each player has a unique integer ID between 1 and N. The game proceeds in turns, and on each turn, a player eliminates the player standing to his immediate right. However, the players are not entirely merciless. They follow a peculiar strategy: each player whose ID is a power of 2 gets spared until no other player can be eliminated. Given the number of players standing in the circle, determine the last player remaining in the circle following the rules of this game. -----Input----- The input contains a single integer N (1 leq N leq 200000) — the number of players. -----Output----- Output a single integer — the ID of the last player remaining in the circle. -----Example----- Input 5 Output 4 Input 7 Output 4 -----Note----- In the first example, the sequence of eliminations is as follows: 1. Player 1 eliminates Player 2. 2. Player 3 eliminates Player 4. 3. Player 5 eliminates Player 1 (Player 1 is not spared because their ID is not a power of 2). 4. Player 3 eliminates Player 5. Player 4 is the last remaining player because they are spared initially but eventually become the last player who cannot be eliminated by anyone else.","solution":"def last_player_standing(N): Returns the ID of the last player standing in the circle, given that players who have IDs that are powers of 2 are spared until no other player can be eliminated. # Find the highest power of 2 less than or equal to N: last_power_of_two = 2**(N.bit_length() - 1) return last_power_of_two"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid is represented by (i, j) where 1 ≤ i ≤ n and 1 ≤ j ≤ m. Each cell contains a lowercase English letter. Your task is to find the length of the longest path of cells such that each cell in the path contains a distinct letter and you can only move to the adjacent cells. Two cells (i1, j1) and (i2, j2) are adjacent if they share a common edge. ------ Input ------ The first line contains a single integer T - the number of test cases. T test cases follow. Each test case starts with two integers n and m, the dimensions of the grid. The next n lines each contain a string of length m representing the grid. ------ Output ------ For each test case, print a single integer - the length of the longest path of cells with distinct letters. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n, m ≤ 50 Each cell contains a lowercase English letter. ------ Sample Input 1 ------ 2 3 3 abc def ghi 4 4 abcd efgh ijkl mnop ------ Sample Output 1 ------ 9 16","solution":"def longest_path_in_grid(T, test_cases): def dfs(grid, x, y, visited): nonlocal max_path max_path = max(max_path, len(visited)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if (0 <= nx < n) and (0 <= ny < m) and grid[nx][ny] not in visited: visited.add(grid[nx][ny]) dfs(grid, nx, ny, visited) visited.remove(grid[nx][ny]) results = [] for test_case in test_cases: n, m, grid = test_case max_path = 0 visited = set() for i in range(n): for j in range(m): visited.add(grid[i][j]) dfs(grid, i, j, visited) visited.remove(grid[i][j]) results.append(max_path) return results def read_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, input_lines[index].split()) grid = [] for i in range(n): grid.append(list(input_lines[index + i + 1])) test_cases.append((n, m, grid)) index += n + 1 return T, test_cases def main(input_data): T, test_cases = read_input(input_data) results = longest_path_in_grid(T, test_cases) for result in results: print(result)"},{"question":"In a distant kingdom, there exists a mystical forest with n magical trees. Each tree has a certain amount of magical essence. The magical essence of the i-th tree is given by e_i. The kingdom\'s council has a task to determine the maximum amount of magical essence that can be gathered in a single trip. However, gathering from any two consecutive trees is forbidden to prevent the depletion of the forest\'s magic. To ensure this, if a tree is chosen, the immediate next tree cannot be chosen. More formally, for a given array of magical essences, you must determine the maximum sum of elements such that no two chosen elements are adjacent. Write a program that computes the maximum magical essence that can be gathered. ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 100000) — the number of magical trees. The second line contains n integers e_1, e_2, ..., e_n (1 ≤ e_i ≤ 10000) — the list of magical essences of the trees. ----- Output ----- Print one integer — the maximum magical essence that can be gathered. ----- Examples ----- Input 4 3 2 5 10 Output 13 Input 6 5 5 10 100 10 5 Output 110 ----- Note ----- In the first sample, the optimal way to gather essence is to pick trees with values 3 and 10, giving a total of 13. In the second sample, the optimal way is to pick trees with values 5, 100, and 5, giving a total of 110.","solution":"def max_magical_essence(n, essences): if n == 0: return 0 if n == 1: return essences[0] dp = [0] * n dp[0] = essences[0] dp[1] = max(essences[0], essences[1]) for i in range(2, n): dp[i] = max(dp[i-1], essences[i] + dp[i-2]) return dp[-1]"},{"question":"# Your Task You are tasked with writing a function that determines if a given word can be constructed by successively increasing alphabets starting from the first letter of the word. Additionally, the alphabetical sequence should not skip any letter and should wrap around from \'z\' to \'a\' if necessary. For instance, the word \\"abc\\" fits this requirement because \'b\' comes after \'a\' and \'c\' comes after \'b\'. The sequence wrapping means that after \'z\' it goes back to \'a\', thus \'aza\' is also valid. # Input The input is a single string `word`, which consists of lowercase letters only. # Output Output `True` if the word can be constructed by successively increasing alphabets, including wrapping around from \'z\' to \'a\', otherwise output `False`. # Example ```python >>> is_sequential(\\"abc\\") True >>> is_sequential(\\"bca\\") False >>> is_sequential(\\"azy\\") False >>> is_sequential(\\"aza\\") True ``` # Constraints - The length of the word will be between 1 and 100 characters. - The word will consist only of lowercase alphabets (a-z).","solution":"def is_sequential(word): Determines if the given word can be constructed by successively increasing alphabets, wrapping around from \'z\' to \'a\' if necessary. :param word: A string containing lowercase alphabets only :return: True if the word is sequential, otherwise False n = len(word) if n == 1: return True for i in range(1, n): prev_char = word[i - 1] curr_char = word[i] if prev_char != \'z\': expect_next = chr(ord(prev_char) + 1) else: expect_next = \'a\' if curr_char != expect_next: return False return True"},{"question":"A software firm needs a program to help merge two sorted lists of integers into one sorted list. To accomplish this, follow these steps: 1. Read two lists of integers, both sorted in ascending order. 2. Create a new list that contains all elements from the two input lists, and ensure this new list is also sorted in ascending order. -----Input:----- - The first line of the input contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains a space-separated string of integers A, representing the first sorted list. - The second line contains a space-separated string of integers B, representing the second sorted list. -----Output:----- - For each test case, output a single line containing the merged sorted list of integers. -----Constraints:----- - 1 leq T leq 100 - 0 leq text{len}(A), text{len}(B) leq 100 - -1000 leq A[i], B[i] leq 1000 -----Sample Input:----- 2 1 3 5 2 4 6 7 8 9 1 10 11 -----Sample Output:----- 1 2 3 4 5 6 1 7 8 9 10 11","solution":"def merge_sorted_lists(test_cases): Merges two sorted lists of integers into one sorted list for each test case. Returns list of results for each test case. results = [] for a, b in test_cases: # Convert strings to lists of integers list_a = list(map(int, a.split())) list_b = list(map(int, b.split())) # Merge the two lists merged_list = sorted(list_a + list_b) results.append(\\" \\".join(map(str, merged_list))) return results # Function to parse input def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [(input_lines[2*i + 1], input_lines[2*i + 2]) for i in range(T)] return T, test_cases # Function to handle the merging process for the given input string def process_input(input_str): T, test_cases = parse_input(input_str) merged_lists = merge_sorted_lists(test_cases) return merged_lists"},{"question":"Given a string `s` consisting of lowercase English letters, you need to find the maximum length of the substring in which all the characters are unique. To test the uniqueness, Gildong wants you to write a function `max_unique_substring_length(s: str) -> int` that returns the maximum length of such a substring. -----Input----- The input consists of a single string `s` with a length `n` (1 le n le 10^5). The string contains only lowercase English letters. -----Output----- The function should return an integer, which is the maximum length of a substring with all unique characters. -----Example----- Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 -----Note----- In the first example, the longest substring with all unique characters is \\"abc\\", which has a length of 3. In the second example, the longest substring with all unique characters is \\"b\\", which has a length of 1. In the third example, the longest substring with all unique characters is \\"wke\\", which has a length of 3.","solution":"def max_unique_substring_length(s: str) -> int: Returns the maximum length of a substring in which all the characters are unique. char_index = {} max_length = 0 start = 0 for end, char in enumerate(s): if char in char_index: start = max(start, char_index[char] + 1) char_index[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Alice is taking a walk on an infinite 2D grid starting at the origin (0, 0). The grid allows her to move in four possible directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Alice has a specific sequence of movements she will follow, and she repeats this sequence continuously. Given a specified number of steps, determine the coordinates where Alice will be after completing all the steps. ------ Input Format ------ - The first line contains T, the number of test cases. - Each test case consists of a single line with the sequence of movements (a string containing only the characters \'U\', \'D\', \'L\', \'R\') and an integer S, the total number of steps. ------ Output Format ------ For each test case, output a single line containing two integers, representing Alice\'s final coordinates after S steps. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ text{length of sequence} ≤ 100 1 ≤ S ≤ 10^6 ----- Sample Input 1 ------ 3 UDLR 4 UD 5 L 3 ----- Sample Output 1 ------ 0 0 0 1 -3 0 ----- explanation 1 ------ Test case 1: The sequence \\"UDLR\\" does not change the position when repeated multiple times. After 4 steps, Alice is still at the origin (0,0). Test case 2: The sequence \\"UD\\" moves Alice up and then down, effectively canceling out each other. Repeating this will leave her in the same position within each full repetition. After 5 steps, she will end up performing \\"UDU\\" which moves her up by 1, so the final coordinates are (0,1). Test case 3: The sequence \\"L\\" moves Alice left each step. After 3 steps, Alice moves left 3 times, ending at (-3,0).","solution":"def final_coordinates(sequence, S): Given a sequence of movements and a number of total steps S, returns the final coordinates (x, y) after completing all the steps. # Movement mappings moves = {\'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0)} # Calculate the change for one full sequence x_change, y_change = 0, 0 for move in sequence: dx, dy = moves[move] x_change += dx y_change += dy # Determine the number of complete sequences and remaining steps full_sequences = S // len(sequence) remaining_steps = S % len(sequence) # Calculate final position from complete sequences final_x = full_sequences * x_change final_y = full_sequences * y_change # Add remaining movements for i in range(remaining_steps): move = sequence[i] dx, dy = moves[move] final_x += dx final_y += dy return final_x, final_y def process_test_cases(test_cases): results = [] for sequence, steps in test_cases: results.append(final_coordinates(sequence, steps)) return results"},{"question":"In an ancient land, a mystical pond has the peculiar property that it triples the number of lily pads initially placed on it every day. Once a day, a monk comes to the pond and removes a specific number of lily pads to prevent overcrowding. Given an initial number of lily pads, the daily multiplication factor, and a list specifying the number of lily pads removed each day for a certain number of days, calculate the total number of lily pads remaining after the specified period. For example, if we start with 2 lily pads, the multiplication factor is 3, and we have `n = 3` days with the list of removed lily pads as [1, 2, 1], the calculations are as follows: Day Initial After Growth After Removal 0 2 1 2 6 5 2 5 15 13 3 13 39 38 Function Description Complete the mysticalPond function in the editor below. mysticalPond has the following parameter(s): - int k: the initial number of lily pads - int m: the daily multiplication factor - list of int removal: list containing the number of lily pads removed each day Returns - int: the number of lily pads remaining after the specified days Input Format The first line contains three integers k, m, and n. The second line contains n space-separated integers representing the list of lily pads removed each day. Constraints 1leq kleq100 2leq mleq10 1leq nleq50 0leq text{removal}[i]leq 500 for each i in n Sample Input 4 2 3 2 1 7 Sample Output 8 Explanation We start with 4 lily pads and multiply by 2 each day, then remove the specified number of lily pads. - Day 1: Initial: 4, Growth: 4*2=8, Removal: 8-2=6 - Day 2: Initial: 6, Growth: 6*2=12, Removal: 12-1=11 - Day 3: Initial: 11, Growth: 11*2=22, Removal: 22-7=15 Thus, after 3 days, 15 lily pads remain.","solution":"def mysticalPond(k, m, removal): Calculates the number of lily pads remaining after a specified number of days. Parameters: k (int): Initial number of lily pads. m (int): Daily multiplication factor. removal (list): List of integers specifying the number of lily pads removed each day. Returns: int: The number of lily pads remaining after the specified days. for r in removal: k = k * m # Multiply the number of lily pads by the daily multiplication factor k -= r # Remove a specified number of lily pads if k < 0: k = 0 # Ensure the number of lily pads cannot be negative return k"},{"question":"Write a function that takes a string consisting of lowercase alphabets and returns a dictionary where the keys are the characters and the values are the number of times each character appears in the string. For example: **Input:** \\"abacaba\\" **Output:** {\'a\': 4, \'b\': 2, \'c\': 1} **Note:** You may assume that the input string will always have at least one character.","solution":"def char_count(s): Returns a dictionary where the keys are characters from the input string and the values are the number of times each character appears in the string. result = {} for char in s: if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"Bob is building a new video game in which players must navigate through a forest represented as a grid. Each cell in the grid can either be walkable terrain or a tree. Players start at the top-left corner of the grid and must reach the bottom-right corner. The only moves allowed are to the right or down from the current cell. The player needs to avoid the trees to complete the game. Bob needs your help to implement a function that calculates the number of distinct paths that the player can take to reach the destination, given that some cells cannot be passed through (trees). Write a function `num_paths(grid)` that takes a 2D list `grid` representing the forest and returns the number of unique paths from the top-left corner to the bottom-right corner. A value of `1` in `grid` denotes a tree and `0` denotes walkable terrain. If there is no possible path, the function should return `0`. -----Input----- - The first line of input contains two integers `m` and `n` (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid, respectively. - The next `m` lines each contain `n` integers (either `0` or `1`), representing the grid. -----Output----- Print a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. -----Examples----- Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 2 2 0 1 1 0 Output: 0 -----Note----- In the first sample, there are two paths to get to the bottom-right corner: right-right-down-down or down-down-right-right. In the second sample, there is no path to get to the bottom-right corner because the trees block all possible routes.","solution":"def num_paths(grid): Calculates the number of unique paths from the top-left corner to the bottom-right corner in a grid with some cells being obstacles (trees). The only moves allowed are right or down. Parameters: grid (List[List[int]]): A 2D list representing the grid. 1 denotes a tree, 0 denotes walkable terrain. Returns: int: The number of unique paths from the top-left to the bottom-right corner. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Given a linked list of length N, where each node contains a single integer, write a function to remove all nodes from the list that have duplicate values, ensuring that every integer appears only once in the modified list. Maintain the order of the remaining nodes as they appeared in the original list. Example 1: Input: N = 6 LinkedList = 4 -> 2 -> 4 -> 1 -> 3 -> 2 Output: 4 -> 2 -> 1 -> 3 Example 2: Input: N = 4 LinkedList = 1 -> 1 -> 1 -> 1 Output: 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function removeDuplicates() which takes a pointer to the head of the linked list as input parameter and modifies the list in-place to remove duplicates. Return the head of the modified list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ Node.value ≤ 10^{6}","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def removeDuplicates(head): if not head: return head current = head seen = set([current.value]) while current.next: if current.next.value in seen: current.next = current.next.next else: seen.add(current.next.value) current = current.next return head # Helper function to convert list to linked list def list_to_linkedlist(lst): if not lst: return None head = ListNode(lst[0]) current = head for val in lst[1:]: current.next = ListNode(val) current = current.next return head # Helper function to convert linked list to list def linkedlist_to_list(head): lst = [] current = head while current: lst.append(current.value) current = current.next return lst"},{"question":"In a kingdom, there are n cities connected by m roads. Each road has a toll fee associated with it. The kingdom wants to maximize its revenue by ensuring that anyone traveling between different cities has to pay the toll fee. However, they also want to keep the infrastructure cost low by removing some roads so that the number of paths between any two cities is minimized. You are tasked with finding the minimal number of roads that need to be kept such that: 1. The remaining roads still connect all the cities (i.e., the graph stays connected). 2. The sum of the toll fees of the remaining roads is minimized. Write a program to print the minimal sum of the toll fees after removing the necessary roads. Input The first line contains a pair of integers n, m (1 ≤ n ≤ 1000; 0 ≤ m ≤ 100000), where n represents the number of cities and m represents the number of roads. Then, the following m lines contain three integers ai, bi, ci (1 ≤ ai, bi ≤ n; ai ≠ bi; 1 ≤ ci ≤ 1000), where ai and bi represent the indices of cities connected by the road, and ci represents the toll fee of that road. Output Print a single integer, which is the minimal sum of toll fees of the roads that need to be kept to ensure the kingdom\'s constraints. Examples Input 4 6 1 2 3 1 3 4 1 4 2 2 3 1 2 4 5 3 4 7 Output 6 Input 5 7 1 2 1 2 3 2 3 4 3 4 5 4 1 3 10 2 4 6 3 5 8 Output 10 Input 3 3 1 2 2 1 3 4 2 3 3 Output 5","solution":"def find_minimum_toll(n, m, roads): Find the minimal sum of toll fees to keep the cities connected. # Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX edges = sorted(roads, key=lambda x: x[2]) min_cost = 0 for a, b, cost in edges: a -= 1 b -= 1 if find(a) != find(b): union(a, b) min_cost += cost return min_cost def solve(input_data): lines = input_data.split(\'n\') n, m = map(int, lines[0].split()) roads = [] for i in range(1, m + 1): ai, bi, ci = map(int, lines[i].split()) roads.append((ai, bi, ci)) return find_minimum_toll(n, m, roads)"},{"question":"Given an array of n integers, determine and print if the array contains a subset of two distinct elements that sum to zero. If such a subset exists, return the two elements as a tuple (a, b) in the order they appear in the array. If there are multiple pairs, return any one of them. If no such pair exists, return -1. Example 1: Input: arr = [3, 4, -3, 1, 6] Output: (3, -3) Explanation: The subset (3, -3) sums to zero. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: -1 Explanation: No subset sums to zero. Your Task: You don\'t need to read input or print anything. Complete the function `findZeroSumPair()` which takes an array as input parameter and returns the required output. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 1000 -1000 <= arr[i] <= 1000","solution":"def findZeroSumPair(arr): Returns a tuple of two distinct elements from the array that sum to zero. If no such pair exists, returns -1. # Create a set to store elements that have been visited seen = set() for element in arr: # Check if the negation of the current element has been seen before if -element in seen: return (-element, element) # Add current element to the seen set seen.add(element) # If no pair found, return -1 return -1"},{"question":"In the Kingdom of Westeros, King Robb Stark wants to send a secret message to his ally through a series of signals. He plans to use a sequence of N integers to encode his message. The decoding process involves finding the longest subsequence of these integers where every two consecutive numbers are either both increasing or both decreasing. Help King Robb by writing a program that will determine the length of the longest such subsequence. Input The first line contains an integer T, the number of test cases. The first line of each test case contains a number N, representing the number of integers in the sequence. The next line contains N space-separated integers. Output For each test case, output the length of the longest subsequence that alternates in terms of increasing and decreasing nature. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^4 ≤ Ai ≤ 10^4 SAMPLE INPUT 2 5 1 2 3 4 5 6 1 -1 2 -2 3 -3 SAMPLE OUTPUT 2 6 Explanation In test case 1, the sequences with the longest length have either all increasing (1 to 2 to 3 to 4 to 5) or decreasing nature. Thus, the longest subsequence length is 2. In test case 2, the entire sequence is alternating (1, -1, 2, -2, 3, -3), thus the length is 6.","solution":"def longest_alternating_subsequence_length(n, sequence): if n == 0: return 0 inc = 1 dec = 1 for i in range(1, n): if sequence[i] > sequence[i - 1]: inc = dec + 1 elif sequence[i] < sequence[i - 1]: dec = inc + 1 return max(inc, dec) def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] result = longest_alternating_subsequence_length(n, sequence) results.append(result) return results"},{"question":"A library management system keeps track of books, authors, and borrowers. Each book is identified by its ISBN and has a title, an author, and a count indicating how many copies of the book are available. Authors are represented by their name and a list of books they have written. Borrowers are formatted by their name and a list of books they have borrowed (identified by ISBN). Create a Library class: Library() Initializes the library with an empty collection of books, authors, and borrowers. void addBook(string ISBN, string title, string authorName, int count) Adds a book with the given ISBN, title, and author to the library. If the author is not already present in the library, they should be added. If the book is already present, it should update the count of available copies. void registerBorrower(string borrowerName) Registers a new borrower in the library system. If the borrower is already registered, do nothing. bool borrowBook(string borrowerName, string ISBN) Allows a borrower to borrow a book, if the book is available and the borrower is registered. Returns true if the borrowing is successful, otherwise false. bool returnBook(string borrowerName, string ISBN) Allows a borrower to return a borrowed book, if the borrower has it. Returns true if the return is successful, otherwise false. string[] listBooks() Returns a list representing the current collection of books in alphabetical order by title. string[] listBorrowers() Returns a list representing the current collection of borrowers in alphabetical order by name. Example: Input [\\"Library\\", \\"addBook\\", \\"addBook\\", \\"addBook\\", \\"registerBorrower\\", \\"registerBorrower\\", \\"borrowBook\\", \\"borrowBook\\", \\"borrowBook\\", \\"returnBook\\", \\"listBooks\\", \\"listBorrowers\\"] [[], [\\"978-3-16-148410-0\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 5], [\\"978-0-394-52338-3\\", \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 3], [\\"978-1-56619-909-4\\", \\"1984\\", \\"George Orwell\\", 4], [\\"Alice\\"], [\\"Bob\\"], [\\"Alice\\", \\"978-3-16-148410-0\\"], [\\"Alice\\", \\"978-0-394-52338-3\\"], [\\"Bob\\", \\"978-3-16-148410-0\\"], [\\"Alice\\", \\"978-3-16-148410-0\\"], [null], [null]] Output [null, null, null, null, null, null, true, true, true, true, [\\"1984\\", \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\"], [\\"Alice\\", \\"Bob\\"]] Explanation Library lib = new Library(); lib.addBook(\\"978-3-16-148410-0\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 5); lib.addBook(\\"978-0-394-52338-3\\", \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 3); lib.addBook(\\"978-1-56619-909-4\\", \\"1984\\", \\"George Orwell\\", 4); lib.registerBorrower(\\"Alice\\"); lib.registerBorrower(\\"Bob\\"); lib.borrowBook(\\"Alice\\", \\"978-3-16-148410-0\\"); // Borrow successful, returns true lib.borrowBook(\\"Alice\\", \\"978-0-394-52338-3\\"); // Borrow successful, returns true lib.borrowBook(\\"Bob\\", \\"978-3-16-148410-0\\"); // Borrow successful, returns true lib.returnBook(\\"Alice\\", \\"978-3-16-148410-0\\"); // Return successful, returns true lib.listBooks(); // Returns [\\"1984\\", \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\"] lib.listBorrowers(); // Returns [\\"Alice\\", \\"Bob\\"] Constraints: - ISBN, title, authorName, and borrowerName length are all <= 50 - ISBN, title, authorName, and borrowerName consist of alphanumeric characters and spaces only. - Each authorName and ISBN is unique across all books. - Each borrowerName is unique. - Title is unique across all books. - The same borrower cannot borrow the same book multiple times before returning it. - There will be no borrow from an unregistered borrower. - There will be no return of a book not previously borrowed by the borrower. - At most 10^4 calls will be made to any of the functions.","solution":"class Library: def __init__(self): # Books is a dictionary with ISBN as key and another dictionary with title, author, and count as value self.books = {} self.borrowed_books = {} # Authors is a dictionary with author names as keys and list of ISBNs as value self.authors = {} # Borrowers is a dictionary with borrower names as keys and list of borrowed ISBNs as value self.borrowers = {} def addBook(self, ISBN, title, authorName, count): if ISBN in self.books: self.books[ISBN][\'count\'] += count else: self.books[ISBN] = {\'title\': title, \'author\': authorName, \'count\': count} if authorName not in self.authors: self.authors[authorName] = [] self.authors[authorName].append(ISBN) def registerBorrower(self, borrowerName): if borrowerName not in self.borrowers: self.borrowers[borrowerName] = [] def borrowBook(self, borrowerName, ISBN): if borrowerName in self.borrowers and ISBN in self.books and self.books[ISBN][\'count\'] > 0: self.borrowers[borrowerName].append(ISBN) self.books[ISBN][\'count\'] -= 1 self.borrowed_books.setdefault(borrowerName, []).append(ISBN) return True return False def returnBook(self, borrowerName, ISBN): if borrowerName in self.borrowers and ISBN in self.borrowers[borrowerName]: self.borrowers[borrowerName].remove(ISBN) self.books[ISBN][\'count\'] += 1 return True return False def listBooks(self): # Returns list of titles sorted alphabetically return sorted([self.books[ISBN][\'title\'] for ISBN in self.books]) def listBorrowers(self): # Returns list of borrower names sorted alphabetically return sorted(self.borrowers.keys())"},{"question":"Max wants to paint a fence. The fence is formed by N wooden planks. Each plank has a height denoted by an array H of length N. Max can paint the planks such that no two consecutive planks have the same color. Given the maximum number of colors K Max can use, determine the minimum number of colors required to paint the entire fence. Note: Each color must be represented as an integer from 1 to K. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with a line containing two integers N and K. - The second line of each test case contains N integers representing the heights of the planks (the array H). ------ Output Format ------ For each test case, output on a new line the minimal number of different colors needed to paint the fence, adhering to the constraints. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ K ≤ 100 1 ≤ H[i] ≤ 10^3 (for 1 ≤ i ≤ N) ----- Sample Input 1 ------ 3 5 3 4 4 4 4 4 6 2 1 2 1 2 1 2 4 3 10 10 20 20 ----- Sample Output 1 ------ 1 2 2 ----- Explanation 1 ------ Test case 1: Only one color is needed as there is no height variation to necessitate a change in color. Test case 2: Though a maximum of 2 colors can be used, it is sufficient since no two consecutive planks have the same height. Test case 3: The heights repeat such that using two colors will suffice as no two consecutive planks have identical heights.","solution":"def min_colors_needed_for_fence(test_cases): result = [] for N, K, H in test_cases: # If there are no consecutive planks with the same height if len(set(H)) == 1: # Only one color is needed if all heights are the same result.append(1) continue # In general case, the number of colors needed will be the minimum between K and 2. # Minimum will be K or 2 because K colors are available, and we must ensure no two adjacent are same unique_heights = len(set(H)) if unique_heights == len(H): result.append(min(K, 2)) else: result.append(min(K, unique_heights)) return result # Function to handle input and output def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, K = map(int, lines[index].split()) H = list(map(int, lines[index + 1].split())) test_cases.append((N, K, H)) index += 2 return min_colors_needed_for_fence(test_cases)"},{"question":"You are given a sequence a_1,a_2,ldots,a_n. The task is to perform the following types of operations on it: Type 1. Given three integers boldsymbol{l}, boldsymbol{r} (1leq lleq rleq n), and boldsymbol{x}. Increment all the integers in the subarray a[l], a[l+1], ldots, a[r] by the integer boldsymbol{x}. Type 2. Given an integer boldsymbol{k} (1leq kleq n), print the value of the boldsymbol{k}-th element of the sequence. Input Format The first line contains two integers n and q. The second line contains n integers a_1,a_2,ldots,a_n, denoting the initial sequence. Each of the next q lines contains either four integers 1, l_i, r_i, x_i (for Type 1 operation) or two integers 2, k_i (for Type 2 operation). Constraints 1leq nleq 2times10^5 1leq qleq 2times10^5 1leq a_ileq 10^6 1leq l_i leq k_i leq r_i leq n 1leq x_i leq 10^4 Output Format For each query of the second type, print the value of the boldsymbol{k}-th element of the sequence. Sample Input 6 4 1 2 3 4 5 6 1 2 4 3 2 3 1 1 3 10 2 2 Example Output 6 12 Explanation After the first query the sequence becomes [1, 5, 6, 7, 5, 6]. For the second query, the 3rd element is 6. After the third query the sequence becomes [11, 15, 16, 7, 5, 6]. For the fourth query, the 2nd element is 15.","solution":"def process_queries(n, q, sequence, queries): result = [] for query in queries: if query[0] == 1: # Type 1 Operation l, r, x = query[1], query[2], query[3] for i in range(l - 1, r): sequence[i] += x elif query[0] == 2: # Type 2 Operation k = query[1] result.append(sequence[k - 1]) return result"},{"question":"You are tasked with designing a route planner for a delivery robot operating in a warehouse. The warehouse can be represented as an n times m grid with some cells that are blocked. The robot can start from any unblocked cell and can move to any unblocked cell that is adjacent horizontally or vertically. The robot should find the shortest path from the starting cell to a given destination cell. Your task is to write a program that determines the length of the shortest path from the start to the destination. If the destination cannot be reached, your program should return `-1`. # Input - The first line contains two integers n and m (1 leq n, m leq 1000), representing the dimensions of the grid. - The next n lines each contain m characters, where each character is either \'.\' (an unblocked cell) or \'#\' (a blocked cell). - The next line contains four integers sx, sy, dx, and dy (0 leq sx, sy, dx, dy < n, m), representing the start cell (sx, sy) and the destination cell (dx, dy). The start and destination cells are guaranteed to be unblocked. # Output - Output a single integer, the length of the shortest path from the start cell to the destination cell. If the destination is unreachable, output `-1`. # Example Input ``` 5 5 ..... .#. ..#.. .#. ..... 0 0 4 4 ``` Output ``` 8 ``` # Explanation In the example above, the robot starts at cell `(0, 0)` and the shortest path to cell `(4, 4)` is of length 8. The path is as follows: (0, 0) rightarrow (1, 0) rightarrow (2, 1) rightarrow (2, 2) rightarrow (2, 3) rightarrow (3, 4) rightarrow (4, 3) rightarrow (4, 4).","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, dx, dy): # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS and set to keep track of visited cells queue = deque([(sx, sy, 0)]) # (x, y, current_distance) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() # If we reach the destination, return the distance if (x, y) == (dx, dy): return dist # Explore neighbors for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If we exhaust the queue without finding the destination, return -1 return -1"},{"question":"Given an array of integers heights where heights[i] is the height of a building. The skyline of a city can be represented by an array such that each element in the array denotes the height of the buildings at a specific position within the city. You need to determine if the city skyline can be represented as a sorted list of integers in strictly increasing order when viewed from left to right. Return true if the skyline is in strictly increasing order, and false otherwise. Example 1: Input: heights = [1, 2, 3, 4, 5] Output: true Explanation: The skyline heights are already in strictly increasing order. Example 2: Input: heights = [1, 3, 2, 4, 5] Output: false Explanation: The height decreases from 3 to 2, hence not strictly increasing. Example 3: Input: heights = [1, 1, 2, 3, 4] Output: false Explanation: The height 1 appears twice consecutively, hence not strictly increasing. Constraints: 1 <= heights.length <= 10^4 1 <= heights[i] <= 10^4","solution":"def is_strictly_increasing(heights): Determine if the city skyline can be represented as a sorted list of integers in strictly increasing order when viewed from left to right. :param heights: List[int], list of building heights :return: bool, True if strictly increasing order, False otherwise n = len(heights) for i in range(1, n): if heights[i] <= heights[i-1]: return False return True"},{"question":"Write a function that takes a string as input and returns a string where all vowels (a, e, i, o, u) have been removed. - The function should preserve the order of the characters in the original string. - The function should be case-sensitive, meaning that uppercase vowels (A, E, I, O, U) should also be removed. - If there are no vowels in the string, the original string should be returned. Examples: `hello -> hll` `HELLO -> HLL` `beautiful -> btf` `rhythm -> rhythm` `Programming -> Prgrmmng`","solution":"def remove_vowels(input_string): Returns a string where all vowels (a, e, i, o, u) have been removed. Both lowercase and uppercase vowels are removed. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in input_string if char not in vowels])"},{"question":"Fumiko loves collecting stamps. Each stamp costs 75 yen, but the shop gives a discount voucher worth 100 yen for every 10 stamps purchased. The voucher can be used only on the next purchase of stamps, and multiple vouchers can be used for a single purchase. Calculate the total amount Fumiko has spent on buying M stamps. -----Constraints----- - 1 ≤ M ≤ 1000 -----Input----- The input is given from Standard Input in the following format: M -----Output----- Print the amount Fumiko has actually spent. -----Sample Input----- 37 -----Sample Output----- 2550 Fumiko has bought 3 sets of 10 stamps and 7 more stamps (37 stamps in total). The 3 vouchers she earned from the first 30 stamps are used to get a discount of 300 yen on the next purchase. Therefore, the total amount spent is 75 * 37 - 300 = 2550 yen.","solution":"def calculate_total_spent(M): Calculate the total amount of yen Fumiko has spent on buying M stamps. Args: M (int): Number of stamps Fumiko bought. Returns: int: Total amount spent in yen. stamp_cost = 75 voucher_value = 100 stamps_per_voucher = 10 # Initial total cost without discount total_cost = stamp_cost * M # Number of complete sets of stamps (10 stamps per set) full_sets = M // stamps_per_voucher # Total discount from the vouchers total_discount = full_sets * voucher_value # The actual amount spent after applying the discounts actual_amount_spent = total_cost - total_discount return actual_amount_spent"},{"question":"Given a list of integers, write a function that returns a list of the unique elements from the original list, but sorted in descending order. For instance, if the input list is `[4, 5, 2, 9, 5, 4, 1, 2]`, the function should return `[9, 5, 4, 2, 1]`. Your solution should maintain the order of elements as long as they are unique and sort them afterward in descending order. Make sure not to modify the original list and return a new list instead.","solution":"def unique_sorted_descending(lst): This function returns a list of the unique elements from the original list, sorted in descending order. :param lst: List of integers :return: List of unique integers, sorted in descending order unique_elements = list(set(lst)) unique_elements.sort(reverse=True) return unique_elements"},{"question":"You are given an array of integers where each element represents the height of a building. The skyline can be viewed as a graph where buildings are lined up from left to right. The width of each building is 1 unit. Your task is to find the total area of the buildings that are visible from the skyline. The skyline can be thought of as the silhouette view of these buildings from an infinitely far left or right. Constraints: * 1 ≤ length of the array ≤ 10^5 * 1 ≤ height of each building ≤ 10^4 Input The input is given from Standard Input in the following format: N h_1 h_2 ... h_N Where N is the number of buildings and h_i denotes the height of the i-th building. Output Print the total area of the visible buildings. Examples Input 5 3 0 1 3 2 Output 8 Input 4 2 3 4 2 Output 9","solution":"def total_visible_area(heights): Returns the total area covered by the heights of the buildings. return sum(heights)"},{"question":"Alice is planning to traverse a grid-like garden from one corner to the diagonally opposite corner. The garden is represented by an N times N grid, where each cell has a certain number of flowers. Alice can only move right or down from her current position. She wants to collect as many flowers as possible by the time she reaches her destination. Given the grid dimensions and the number of flowers in each cell, your task is to determine the maximum number of flowers she can collect on her way from the top-left corner to the bottom-right corner of the grid. -----Input----- The first line of the input will contain a single integer, N (1 leq N leq 100). The next N lines will each contain N integers, F_{i,j} (0 leq F_{i,j} leq 100), representing the number of flowers in each cell (i, j) of the grid. -----Output----- Output a single integer, the maximum number of flowers Alice can collect. -----Examples----- Sample Input: 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Sample Output: 28 Explanation: One of the optimal paths is: Start at (0, 0): 1 flower Move to (0, 1): 2 flowers Move to (0, 2): 3 flowers Move to (0, 3): 4 flowers Move to (1, 3): 5 flowers Move to (2, 3): 6 flowers Move to (3, 3): 7 flowers Total flowers collected = 1+2+3+4+5+6+7 = 28","solution":"def max_flowers(N, grid): if N == 0: return 0 dp = [[0]*N for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, N): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][N-1]"},{"question":"Given an integer n (1 ≤ n ≤ 10^6), find the minimum integer m such that the sum of the digits of m is equal to n. Input The input consists of a single integer n, the target sum of the digits. Output Output a single integer which is the minimum integer m whose sum of digits equals n. Examples Input 15 Output 69 Input 1 Output 1 Input 20 Output 299 Note For the first example, one of the possible numbers whose digits sum up to 15 is 69 (6+9=15). For the second example, the number 1 already has the sum of its digits equal to 1. In the third example, the smallest number whose digits sum up to 20 is 299 (2+9+9=20).","solution":"def min_integer_with_digit_sum(n): Return the minimum integer m such that the sum of its digits is equal to n. digits = [] while n > 0: if n >= 9: digits.append(9) n -= 9 else: digits.append(n) n = 0 return int(\'\'.join(map(str, digits[::-1])))"},{"question":"Background The city\'s transportation system is under upgrade, and there\'s a need to minimize traffic congestion. One approach to achieve this is by managing the traffic lights timing. A key point of concern is an intersection where multiple roads converge. Due to the need to balance traffic flow from different directions, a programming solution is being considered. Problem You are tasked with implementing a program to optimize the timing of traffic lights at a particular intersection. The intersection has `N` roads, where each road has traffic moving in one direction. You are required to determine the sequence and duration during which each road gets a green signal, ensuring that the overall waiting time for all vehicles is minimized. Each road is described by the number of vehicles currently on it. The objective is to allocate green signal periods in a way that traffic can smoothly flow through the intersection. Input - The first line contains an integer `N`, representing the number of roads at the intersection. - The second line contains `N` integers, where the i-th integer indicates the number of vehicles on the i-th road (1 ≤ i ≤ N). Output Output a single line containing `N` integers, where the i-th integer represents the duration (in seconds) during which the i-th road should have a green signal. Examples Input 3 10 20 30 Output 1 2 3 Input 4 25 25 25 25 Output 1 1 1 1 Input 5 15 10 5 20 25 Output 3 2 1 4 5 Explanation For the first example, the vehicles from the first road get a green signal for 1 second, the second road for 2 seconds, and the third road for 3 seconds. This sequence helps minimize the waiting time for all vehicles. The same logic applies to the other examples. Note - The provided solution should be optimal in terms of overall waiting time for all vehicles. - The durations (in seconds) must be positive integers.","solution":"def allocate_green_signal(N, vehicles): This function takes the number of roads and the corresponding number of vehicles on each road and returns the optimal green signal duration for each road to minimize the overall waiting time. sorted_indices = sorted(range(N), key=lambda x: vehicles[x]) durations = [0] * N for i, idx in enumerate(sorted_indices): durations[idx] = i + 1 return durations"},{"question":"Create a function that simulates a basic calculator which can perform addition, subtraction, multiplication, and division. Instead of using the built-in arithmetic operators (+, -, *, /), you must use loops and conditionals to achieve the same results. The function should take three inputs: two integers, and a string that specifies the operation (\\"add\\", \\"subtract\\", \\"multiply\\", \\"divide\\"). The function should return the result of the operation. - For addition, repeatedly increment one number by 1 and decrement the other until the second number reaches 0. - For subtraction, repeatedly decrement the first number by 1 and increment another counter until it matches the absolute value of the second number. - For multiplication, use repeated addition. - For division, use repeated subtraction to see how many times the divisor can be subtracted from the dividend before it becomes less than the divisor. Make sure to handle edge cases such as division by zero or any large numbers that might cause the loop to run indefinitely. Example: ```python basic_calculator(10, 3, \\"add\\") # Output: 13 basic_calculator(10, 3, \\"subtract\\") # Output: 7 basic_calculator(10, 3, \\"multiply\\") # Output: 30 basic_calculator(10, 3, \\"divide\\") # Output: 3 ```","solution":"def basic_calculator(a, b, operation): Simulates a basic calculator to perform addition, subtraction, multiplication, and division using loops and conditionals. Parameters: a (int): First integer operand b (int): Second integer operand operation (str): The operation to perform (\\"add\\", \\"subtract\\", \\"multiply\\", \\"divide\\") Returns: int: The result of the operation Raises: ValueError: If the operation is not one of \\"add\\", \\"subtract\\", \\"multiply\\", \\"divide\\" or if division by zero is attempted. if operation == \\"add\\": while b != 0: if b > 0: a += 1 b -= 1 else: a -= 1 b += 1 return a elif operation == \\"subtract\\": while b != 0: if b > 0: a -= 1 b -= 1 else: a += 1 b += 1 return a elif operation == \\"multiply\\": result = 0 positive = b > 0 for _ in range(abs(b)): result += a if positive else -a return result elif operation == \\"divide\\": if b == 0: raise ValueError(\\"Cannot divide by zero\\") quotient = 0 positive = (a > 0) == (b > 0) a, b = abs(a), abs(b) while a >= b: a -= b quotient += 1 return quotient if positive else -quotient else: raise ValueError(f\\"Invalid operation {operation}. Supported operations include \'add\', \'subtract\', \'multiply\', \'divide\'.\\")"},{"question":"A group of explorers have discovered an ancient artifact which contains a riddle. The artifact asks for the calculation of a special kind of sum involving lists of numbers. To move forward, the explorers need to solve the riddle correctly. Assist them by providing a solution for the following problem. Given an array of N integers, construct all possible unique subsequences of length K and calculate the sum of the maximum element in each subsequence. As the result can be large, the sum should be computed modulo 10^9+7. **Input:** - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and K. - The second line contains N integers, the elements of the array. **Output:** For each test case, output the sum of the maximum element of all possible subsequences of length K, modulo 10^9+7. **Constraints:** - 0 < T < 10 - 0 < N ≤ 100 - 0 < K ≤ N - 0 ≤ array element ≤ 100000 **Sample Input:** ``` 2 3 2 1 2 3 4 3 4 5 1 2 ``` **Sample Output:** ``` 8 12 ``` **Explanation:** For the first test case, array = [1, 2, 3], K = 2: - Subsequences of length 2 are: [1,2], [1,3], [2,3] - Maximum elements are: 2, 3, 3 - Sum of maximum elements = 2 + 3 + 3 = 8 For the second test case, array = [4, 5, 1, 2], K = 3: - Subsequences of length 3 are: [4, 5, 1], [4, 5, 2], [4, 1, 2], [5, 1, 2] - Maximum elements are: 5, 5, 4, 5 - Sum of maximum elements = 5 + 5 + 4 + 5 = 19 - Output 19 % 10^9+7 = 19","solution":"from itertools import combinations def sum_of_max_elements_in_subsequences(arr, k): MOD = 10**9 + 7 subsequence_sums = (max(subseq) for subseq in combinations(arr, k)) return sum(subsequence_sums) % MOD def solve(test_cases): results = [] for n, k, arr in test_cases: results.append(sum_of_max_elements_in_subsequences(arr, k)) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, k = map(int, lines[index].split()) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, k, arr)) index += 2 return test_cases def format_output(results): return \\"n\\".join(map(str, results)) # Example function to combine everything together def main(input_string): test_cases = parse_input(input_string) results = solve(test_cases) return format_output(results)"},{"question":"In a far-off land, there exists a Kingdom where magical magpies are known for their extraordinary hoarding skills. The magpies are particularly fond of shiny objects, and they have a peculiar way of managing their treasures. Each magpie constructs a binary search tree (BST) where each node represents a shiny object and its shininess value. Not only do they store these values, but they also ensure that the BST remains balanced at all times. One day, the king of the magpies decided to hold a competition. The competition consisted of constructing the largest balanced binary search tree from a given sequence of shininess values. Being a balanced BST, the height difference between the left and right subtrees of any node should be no more than one. Given a sequence of `N` shininess values, your task is to determine the maximum number of nodes in the largest balanced BST that can be constructed from these values. -----Input----- The first line of the input contains an integer `N` (1 le N le 10^5), the number of shininess values. The second line contains `N` integers (1 le text{value} le 10^9), representing the shininess values. -----Output----- Output an integer, the size of the largest balanced binary search tree that can be constructed from the given shininess values. -----Examples----- Sample Input 1: 5 10 5 1 7 40 Sample Output 1: 5 Sample Input 2: 7 10 20 30 40 50 60 70 Sample Output 2: 7","solution":"from typing import List class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None # Function to construct balanced BST def sorted_array_to_bst(arr: List[int]) -> TreeNode: if not arr: return None mid = len(arr) // 2 node = TreeNode(arr[mid]) node.left = sorted_array_to_bst(arr[:mid]) node.right = sorted_array_to_bst(arr[mid+1:]) return node def find_largest_balanced_bst_size(n: int, shininess_values: List[int]) -> int: shininess_values.sort() def get_size(node: TreeNode) -> int: if not node: return 0 return 1 + get_size(node.left) + get_size(node.right) bst_root = sorted_array_to_bst(shininess_values) return get_size(bst_root) # Example usage: n = 5 shininess_values = [10, 5, 1, 7, 40] print(find_largest_balanced_bst_size(n, shininess_values)) # Output: 5"},{"question":"You are tasked with designing a sequence generator based on the following rules: Given an initial sequence of integers and a series of transformation rules, generate the final sequence after applying the transformations a fixed number of times. --------------------Input-------------------- The first line contains two integers n, k (1 le n le 1000, 1 le k le 10^5) — the length of the initial sequence and the number of transformations. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^9) — the initial sequence. The third line contains n integers b_1, b_2, dots, b_n (0 le b_i le 10^9) — the transformation sequence. Each transformation involves updating the i-th element of the sequence to the sum of its current value and the i-th value in the transformation sequence. --------------------Output-------------------- Output n integers — the sequence after applying the transformations k times. --------------------Examples-------------------- Input 3 2 1 2 3 2 3 4 Output 5 8 11 Input 4 1 0 0 0 0 1 2 3 4 Output 1 2 3 4 Input 4 3 1 1 1 1 1 1 1 1 Output 4 4 4 4 --------------------Note-------------------- In the first example, after the first transformation the sequence becomes [3, 5, 7]. After the second transformation, the sequence becomes [5, 8, 11]. In the second example, after one transformation the sequence becomes [1, 2, 3, 4]. In the third example, after three transformations the sequence becomes [4, 4, 4, 4].","solution":"def generate_sequence(n, k, initial_sequence, transformation_sequence): Generates the final sequence after applying the transformations k times. Args: n (int): The length of the sequence. k (int): The number of transformations. initial_sequence (list of int): The initial sequence of integers. transformation_sequence (list of int): The sequence for transformations. Returns: list of int: The final sequence after transformations. # Calculate the updated sequence after k transformations result_sequence = [initial_sequence[i] + k * transformation_sequence[i] for i in range(n)] return result_sequence"},{"question":"You have an array of integers, and you need to form the largest possible number by concatenating the elements of the array. Given an array of non-negative integers, arrange them such that they form the largest possible number. Return the result as a string. # Example 1: **Input:** ``` N = 3 a = [10, 2, 9] ``` **Output:** ``` \\"9210\\" ``` **Explanation:** ``` The possible arrangement are [9102], [9210], and [2910]. Among these, \\"9210\\" is the lexicographically largest. ``` # Example 2: **Input:** ``` N = 4 a = [3, 30, 34, 5, 9] ``` **Output:** ``` \\"9534330\\" ``` **Explanation:** ``` By arranging the array elements such that the combination gives the largest number, \\"9534330\\" is the largest possible number. ``` # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `largestNumber(arr[])` which takes the array of integers `arr[]` and its size `N` as input parameters and returns the largest number that can be formed as a string. # Expected Time Complexity: ``` O(NlogN) ``` # Expected Auxiliary Space: ``` O(N) ``` # Constraints: ``` 1 <= N <= 10^5 0 <= arr[i] <= 10^9 ```","solution":"from functools import cmp_to_key def compare(x, y): # Custom compare function to determine the order if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largestNumber(arr): Returns the largest number that can be formed by concatenating the array elements. # Convert all numbers to string for comparison arr_str = list(map(str, arr)) # Sort the array using the custom compare function arr_str.sort(key=cmp_to_key(compare)) # Concatenate the sorted strings result = \'\'.join(arr_str) # Edge case: If the highest number is \'0\', the result should be \'0\' if result[0] == \'0\': return \'0\' return result"},{"question":"Alice loves to play a game with strings. In her game, she gets a string consisting of lowercase English letters, and her goal is to transform it into a palindrome by making the minimum number of character deletions. A string is considered a palindrome if it reads the same forward and backward. Help Alice determine the minimum number of deletions required to transform the given string into a palindrome. -----Input format----- The input consists of a single line containing a string `S` that Alice wants to transform. -----Output format----- Output a single integer, the minimum number of deletions required to make the string `S` a palindrome. -----Sample Input 1----- acbca -----Sample Output 1----- 0 (Explanation: The string is already a palindrome.) -----Sample Input 2----- abcde -----Sample Output 2----- 4 (Explanation: Deleting the characters \\"b\\", \\"c\\", \\"d\\", \\"e\\" leaves the string \\"a\\", which is a palindrome.) -----Constraints----- • 1 ≤ length of S ≤ 1000 • S consists of only lowercase English letters.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to transform the given string into a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The bottom-up approach ensures that # the table is built in a manner that considers the smallest substrings first. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The minimum number of deletions is the length of the string minus # the length of the longest palindromic subsequence return n - dp[0][n - 1]"},{"question":"Aaron loves painting and he wants to repaint the fences in his backyard. His backyard can be represented by an array where each element shows the color of a particular section of the fence. Aaron has a bucket of paint that can be used to repaint any contiguous subarray of sections to a new color. Aaron wonders what is the minimum number of repaints needed so that all sections of his fence are painted in the same color. -----Input----- The first line contains a single integer T (1 leq T leq 100) - the number of test cases. Each of the following T lines describes a single test case: - The first line contains an integer n (1 leq n leq 1000) - the number of sections in the fence. - The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^5) - the initial colors of each section of the fence. -----Output----- For each test case, print a single integer - the minimum number of repaints needed. Separate answers with line breaks. -----Example----- Input 2 4 1 2 2 1 5 3 3 4 3 3 Output 1 1 -----Note----- In the first case we can repaint the subarray consisting of the first and fourth sections from color 1 to color 2, requiring only one repaint. In the second case, we can repaint the single section with color 4 to color 3, requiring only one repaint.","solution":"def min_repaints_to_unify_fence(n, fence): Determines the minimum number of repaints needed so that all sections of the fence are painted in the same color. from collections import Counter color_counts = Counter(fence) max_freq = max(color_counts.values()) return n - max_freq def process_fences(fence_cases): Processes multiple test cases. results = [] for case in fence_cases: n, fence = case results.append(min_repaints_to_unify_fence(n, fence)) return results"},{"question":"Alice is participating in a treasure hunt game. She has reached a point where she needs to open a treasure chest by solving a mathematical problem. The problem involves finding the length of the longest subsequence in a sequence of integers where the elements are in strictly increasing order. Given an array of integers, determine the length of the longest increasing subsequence (LIS). The longest increasing subsequence is a subsequence of elements that are sorted in strictly increasing order. Note that the LIS doesn\'t have to be contiguous. Your task is to write a program to solve this problem. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2500) — the length of the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_{i} ≤ 10^4) — the elements of the sequence. -----Output----- Print one integer — the length of the longest increasing subsequence. -----Examples----- Input 6 10 9 2 5 3 7 101 18 Output 4 Input 4 3 10 2 1 20 Output 3 -----Note----- In the first example, the longest increasing subsequence is [2, 5, 7, 101], so the answer is 4. In the second example, the longest increasing subsequence is [3, 10, 20], so the answer is 3.","solution":"def longest_increasing_subsequence(sequence): if not sequence: return 0 n = len(sequence) dp = [1] * n # Initialize dp array with 1 for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given a 2D grid representing a maze with 0\'s indicating open paths and 1\'s indicating walls, find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). You can only move up, down, left, or right. If no such path exists, return -1. The function signature is: ```python def shortest_path(grid: List[List[int]]) -> int: ``` **Input:** - `grid`: A list of lists of integers where `grid[i][j]` is either 0 (open path) or 1 (wall). The dimensions of the grid are `n x m`. **Output:** - An integer representing the length (number of steps) of the shortest path from the top-left to the bottom-right, or -1 if no such path exists. **Example:** ```python grid = [ [0, 1, 1, 0, 0], [0, 0, 1, 0, 1], [1, 0, 1, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 0] ] print(shortest_path(grid)) # Output: 9 ``` **Note:** - The dimensions of the grid can be assumed to be at most 100x100. - There is at least a starting and an ending point, but they are not guaranteed to be connected.","solution":"from typing import List, Tuple from collections import deque def shortest_path(grid: List[List[int]]) -> int: Find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. Params: grid: List[List[int]] - a 2D grid where 0 indicates an open path and 1 indicates a wall. Returns: int - the length of the shortest path or -1 if no such path exists. if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n - 1 and c == m - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == 0 and (nr, nc) not in visited: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"Alex is fascinated by prime numbers and wants to learn more about them. He recently came across the concept of twin primes, which are pairs of prime numbers that have a difference of 2. Alex wants to find out how many twin prime pairs exist within a given range of numbers. Write a program to help Alex determine the number of twin prime pairs between two given integers inclusive. Input Format: The first line of input contains two integers N and M, which represent the inclusive range within which to find the twin prime pairs. Output Format: Print the number of twin prime pairs within the given range. Constraints: 1 ≤ N ≤ M ≤ 10^6 SAMPLE INPUT 1 10 SAMPLE OUTPUT 2 EXPLANATION: The twin prime pairs between 1 and 10 are: (3, 5) and (5, 7). Hence, the output is 2.","solution":"def count_twin_primes(n, m): Returns the count of twin prime pairs within the inclusive range [n, m]. def is_prime(x): if x < 2: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True primes = [i for i in range(n, m+1) if is_prime(i)] twin_primes_count = 0 for i in range(len(primes) - 1): if primes[i+1] - primes[i] == 2: twin_primes_count += 1 return twin_primes_count"},{"question":"-----Problem Statement----- Write a program that reads a string of lowercase letters and prints the string in reverse order. -----Input----- The only line contains a string of lowercase letters. -----Output----- Output the reversed string in a single line. -----Constraints----- - The input string will have a length between 1 and 100, inclusive. - The string contains only lowercase letters (a-z). -----Sample Input----- hello -----Sample Output----- olleh","solution":"def reverse_string(s: str) -> str: Returns the reverse of the input string s. return s[::-1]"},{"question":"In a certain kingdom, the king wants to build a new road that connects two towns, Town A and Town B. There are n towns in the kingdom and they are connected by m bidirectional roads. Each road has a specific distance. A road that connects towns x and y with distance d can be represented as (x, y, d). Your task is to find the minimum distance required to connect Town A and Town B either directly or indirectly through other towns. # Input - The first line contains four integers: n, m, A, B (1 ≤ n ≤ 10^4, 1 ≤ m ≤ 10^5, 1 ≤ A, B ≤ n) — the number of towns, the number of roads, the index of Town A, and the index of Town B. - The next m lines each contain three integers x, y, d (1 ≤ x, y ≤ n, 1 ≤ d ≤ 10^9) describing a road between town x and town y with distance d. # Output - Output a single integer, the minimum distance required to connect Town A and Town B. If there is no way to connect the two towns, output -1. # Example 1 Input: ``` 5 6 1 5 1 2 3 2 3 4 3 1 1 1 4 5 4 5 2 2 5 7 ``` Output: ``` 7 ``` # Example 2 Input: ``` 3 1 1 3 1 2 5 ``` Output: ``` -1 ``` # Notes - In the first example, the shortest path from Town A (1) to Town B (5) is through the towns 1 → 2 → 5 with a total distance of 3 + 4 = 7. - In the second example, there is no path from Town A (1) to Town B (3) as they are not connected. Therefore, the output is -1. Use an algorithm that efficiently calculates the shortest path in a weighted graph, such as Dijkstra\'s algorithm.","solution":"import heapq def dijkstra(n, roads, A, B): graph = {i: [] for i in range(1, n+1)} for x, y, d in roads: graph[x].append((y, d)) graph[y].append((x, d)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[A] = 0 priority_queue = [(0, A)] while priority_queue: current_distance, current_town = heapq.heappop(priority_queue) if current_distance > distances[current_town]: continue for neighbor, weight in graph[current_town]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[B] if distances[B] != float(\'inf\') else -1 def minimum_distance(n, m, A, B, roads): return dijkstra(n, roads, A, B)"},{"question":"-----Input----- The input consists of a single integer `n`, where `1 <= n <= 100`. -----Output----- Output the string representation of all numbers from 1 to n separated by a space, but replace multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with \\"FizzBuzz\\". -----Examples----- Input 15 Output 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz Input 5 Output 1 2 Fizz 4 Buzz","solution":"def fizz_buzz(n): Returns a string representation of numbers from 1 to n, replacing multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with \\"FizzBuzz\\". result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return \' \'.join(result)"},{"question":"Eliot is an energetic robot who loves to explore 2D grids. He wants to find the shortest path from a given starting point to a target destination in a grid. However, there are obstacles that he cannot pass through. The grid is represented by a 2D array where \'1\' represents an obstacle and \'0\' represents a free space. Eliot can only move up, down, left, or right. Write a function to help Eliot find the shortest path from the start to the target on this grid. If no path exists, return -1. Input: - A 2D list of integers representing the grid. - A tuple (start_x, start_y) representing the starting point in the grid. - A tuple (target_x, target_y) representing the target destination in the grid. Output: - An integer representing the length of the shortest path from the starting point to the target destination, or -1 if no path exists. Example: ```python grid = [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0], [1, 0, 1, 0] ] start = (0, 0) target = (2, 2) ``` Output: 4 In this example, the shortest path would be: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) with length 4. Hint: You may use breadth-first search (BFS) to solve this problem.","solution":"from collections import deque def shortest_path(grid, start, target): if not grid or start == target: return 0 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start_x, start_y = start target_x, target_y = target if grid[start_x][start_y] == 1 or grid[target_x][target_y] == 1: return -1 queue = deque([(start_x, start_y, 0)]) visited = set((start_x, start_y)) while queue: x, y, dist = queue.popleft() if (x, y) == (target_x, target_y): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an array a = [a_1, a_2, ldots, a_n] of distinct integers from 1 to n. You have to sort this array in non-decreasing order using a specific sorting algorithm. The sorting algorithm works as follows: 1. In each iteration, choose the minimum element from the unsorted part of the array. 2. Swap this minimum element with the first element of the unsorted part. 3. The boundary between the sorted and unsorted part starts at the beginning of the array and grows towards the right until the entire array is sorted. Your task is to implement this sorting algorithm and determine the sorted array and the total number of swaps performed to sort the array. -----Input----- The input contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 1000) — the length of the array. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le n) — the array itself. -----Output----- For each test case, print the sorted array in non-decreasing order and the total number of swaps needed to sort the array in the format: number_of_swaps sorted_array_elements -----Examples----- Input 2 5 4 3 1 5 2 4 2 4 1 3 Output 4 1 2 3 4 5 3 1 2 3 4 -----Note----- In the first test case, the array changes as follows during the sorting process: 1. Swap 4 with 1: [1, 3, 4, 5, 2] (1 swap) 2. Swap 3 with 2: [1, 2, 4, 5, 3] (2 swaps) 3. Swap 4 with 3: [1, 2, 3, 5, 4] (3 swaps) 4. Swap 5 with 4: [1, 2, 3, 4, 5] (4 swaps) In total, 4 swaps were performed. In the second test case, the array changes as follows during the sorting process: 1. Swap 2 with 1: [1, 4, 2, 3] (1 swap) 2. Swap 4 with 2: [1, 2, 4, 3] (2 swaps) 3. Swap 4 with 3: [1, 2, 3, 4] (3 swaps) In total, 3 swaps were performed.","solution":"def selection_sort_with_swaps(arr): n = len(arr) swaps = 0 for i in range(n): # Find the minimum element in the unsorted part of the array min_index = i for j in range(i + 1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element of the unsorted part if min_index != i: arr[i], arr[min_index] = arr[min_index], arr[i] swaps += 1 return swaps, arr def process_test_cases(test_cases): results = [] for n, arr in test_cases: swaps, sorted_arr = selection_sort_with_swaps(arr) results.append(f\\"{swaps} {\' \'.join(map(str, sorted_arr))}\\") return results def main(): t = int(input()) test_cases = [] for _ in range(t): n = int(input()) arr = list(map(int, input().split())) test_cases.append((n, arr)) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a matrix consisting of 0s and 1s. A rectangle of 1s is a submatrix that consists of only 1s and is rectangular in shape. Your task is to find the largest rectangle containing only 1s in the given matrix and return its area. Example: Input: matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] Output: 6 Explanation: The largest rectangle containing only 1s has an area of 6. Constraints: The number of rows in the matrix will not exceed 200. The number of columns in the matrix will not exceed 200.","solution":"def maximalRectangle(matrix): Returns the area of the largest rectangle containing only 1s in the given matrix. if not matrix: return 0 max_area = 0 row_len = len(matrix[0]) heights = [0] * (row_len + 1) for row in matrix: for i in range(row_len): heights[i] = heights[i] + 1 if row[i] else 0 stack = [-1] for i in range(len(heights)): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Given a string `s` consisting of lowercase alphabets only, you need to determine the longest substring that appears at least twice in `s`. More formally, you are given a string `s`. Find the length of the longest substring which appears at least twice in `s`. If there are multiple such substrings with the same length, you can choose any of them. -----Input----- A single line containing the string `s` (1 ≤ |s| ≤ 10^6). -----Output----- In the first line print the length of the longest substring which appears at least twice in `s`. In the second line print the longest substring which appears at least twice. If there are multiple such substrings with the same length, you can print any of them. -----Examples----- Input banana Output 3 ana Input abcdabc Output 3 abc -----Note----- A substring is defined as a contiguous sequence of characters within a string. The longest substring in the examples \\"banana\\" and \\"abcdabc\\" that appears at least twice would be \\"ana\\" and \\"abc\\" respectively.","solution":"def longest_repeated_substring(s): Returns the length and the longest substring that appears at least twice in string `s`. def suffix_array_construction(s): Constructs the suffix array of a given string. suffixes = sorted([(s[i:], i) for i in range(len(s))]) suffix_array = [suffix[1] for suffix in suffixes] return suffix_array def lcp_construction(s, suffix_array): Constructs the longest common prefix array based on the suffix array. n = len(s) rank = [0] * n lcp = [0] * n for i, suffix in enumerate(suffix_array): rank[suffix] = i h = 0 for i in range(n): if rank[i] > 0: j = suffix_array[rank[i] - 1] while (i + h < n) and (j + h < n) and (s[i + h] == s[j + h]): h += 1 lcp[rank[i]] = h if h > 0: h -= 1 return lcp suffix_array = suffix_array_construction(s) lcp = lcp_construction(s, suffix_array) max_len = 0 max_substr = \\"\\" for i in range(1, len(s)): if lcp[i] > max_len: max_len = lcp[i] max_substr = s[suffix_array[i]:suffix_array[i] + max_len] return max_len, max_substr # Example usage input_string = \\"banana\\" length, substring = longest_repeated_substring(input_string) print(length) print(substring)"},{"question":"You are given a list of integers `nums`. Your task is to return a new list that contains only the prime numbers from the original list `nums`. Example 1: Input: [2, 3, 4, 5, 6, 7, 8, 9, 10] Output: [2, 3, 5, 7] Example 2: Input: [12, 15, 20, 23, 30, 31] Output: [23, 31] Note: - `nums` is a list of integers with 1 <= len(nums) <= 100. - Each integer in `nums` is between 1 and 1000 inclusive. - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Helper function to determine if a number is prime. Returns True if n is prime, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(nums): Filters the prime numbers out of the list `nums`. Args: nums (list of int): List of integers to filter. Returns: list of int: List containing only the prime numbers. return [num for num in nums if is_prime(num)]"},{"question":"Write a function that simulates a simple digital clock. Given two integers representing the current hour (0-23) and a number of minutes (0-59), and an integer representing the number of minutes to add, your function should return the new time in the format \\"HH:MM\\". For example, if the current time is 23:45 and you add 80 minutes, the new time would be 01:05 (as 23:45 + 80 minutes is 01:05 of the next day). You need to handle the wrap around correctly, ensuring that times like 25:00 would be represented as \\"01:00\\". All inputs will be valid integers. The hour will always be in the range 0-23 and the minutes in the range 0-59. The number of minutes to add will be a non-negative integer. Please write your function to return a string in \\"HH:MM\\" format. # Example ```python def digital_clock(hour, minutes, to_add): # your code here # Example usage: print(digital_clock(23, 45, 80)) # should return \\"01:05\\" print(digital_clock(10, 30, 90)) # should return \\"12:00\\" print(digital_clock(1, 15, 150)) # should return \\"03:45\\" ```","solution":"def digital_clock(hour, minutes, to_add): Simulates a digital clock and returns the new time after adding a given number of minutes. Args: hour (int): The current hour (0-23). minutes (int): The current minutes (0-59). to_add (int): The number of minutes to add. Returns: str: The new time in \\"HH:MM\\" format. total_minutes = hour * 60 + minutes + to_add new_hour = (total_minutes // 60) % 24 new_minutes = total_minutes % 60 return f\\"{new_hour:02}:{new_minutes:02}\\""},{"question":"Given an array of integers \\"arr\\" of size \\"n\\", a \\"prefix array\\" is defined as an array \\"prefix\\" where `prefix[i]` is the product of all elements of \\"arr\\" from index 0 to i (inclusive). Your task is to write a function that takes an array \\"arr\\" and computes the prefix array. # Input: - The first line contains an integer n, the size of the array \\"arr\\". - The second line contains n integers, the elements of the array \\"arr\\". # Output: - Output the prefix array. # Constraints: - 1 ≤ n ≤ 100000 - 1 ≤ arr[i] ≤ 1000 # Example: Input: 5 1 2 3 4 5 Output: 1 2 6 24 120 Explanation: The prefix array for the given input is computed as follows: - prefix[0] = 1 - prefix[1] = 1 * 2 = 2 - prefix[2] = 1 * 2 * 3 = 6 - prefix[3] = 1 * 2 * 3 * 4 = 24 - prefix[4] = 1 * 2 * 3 * 4 * 5 = 120","solution":"def compute_prefix_array(n, arr): Computes the prefix array where each element at index i is the product of all elements in the input array from index 0 to i. :param n: int, the size of the array :param arr: list of int, the elements of the array :return: list of int, the prefix array if n == 0: return [] prefix = [0] * n prefix[0] = arr[0] for i in range(1, n): prefix[i] = prefix[i-1] * arr[i] return prefix"},{"question":"Given a string representing a mathematical equation which only contains numbers, variables (like `x` or `y`), and the operators `+, -, *, and /`, write a function `simplify_equation` that simplifies fractions in the equation by performing all possible simplifications. The function should maintain the order of operations and produce results with simplified fractions in reduced form. Examples: ```python simplify_equation(\\"4/2 + 2*3 - 6/3\\") = \\"2 + 2*3 - 2\\" simplify_equation(\\"10/5 * 15/3 + 6/2\\") = \\"2 * 5 + 3\\" ``` **Note:** The output should be a string representing the simplified mathematical expression. Non-reducible fractions should remain as they are.","solution":"import fractions def simplify_fraction(fraction_str): numerator, denominator = map(int, fraction_str.split(\'/\')) simplified_fraction = fractions.Fraction(numerator, denominator) if simplified_fraction.denominator == 1: return str(simplified_fraction.numerator) return f\\"{simplified_fraction.numerator}/{simplified_fraction.denominator}\\" def simplify_equation(equation): tokens = equation.split() for i, token in enumerate(tokens): if \'/\' in token: tokens[i] = simplify_fraction(token) return \' \'.join(tokens)"},{"question":"------ Problem Description ------ You are given a list of integers and a target integer value, and your task is to find the number of distinct pairs (i, j) such that i < j and the absolute difference between the integers in each pair is equal to the target value. Write a function `countPairsWithDiff(arr, k)` that takes the list of integers `arr` and the integer `k`, and returns the number of such distinct pairs. ------ Input ------ An array of integers `arr` and an integer `k` which represents the target difference. ------ Output ------ An integer representing the number of distinct pairs with the absolute difference of `k`. ------ Limitations ------ - The length of the array will be between 1 and 2000. - The integer values within the array will be between -10^9 and 10^9. ----- Sample Input 1 ------ ``` arr = [1, 5, 3, 4, 2] k = 2 ``` ----- Sample Output 1 ------ ``` 3 ``` Explanation: The pairs with an absolute difference of 2 are: (1, 3), (5, 3), (3, 1). ----- Sample Input 2 ------ ``` arr = [8, 12, 16, 4, 0, 20] k = 4 ``` ----- Sample Output 2 ------ ``` 5 ``` Explanation: The pairs with an absolute difference of 4 are: (8, 4), (12, 8), (16, 12), (4, 0), (20, 16). Note: Each pair (i, j) should be considered as distinct even if they share same elements i and j, only if their positions are different.","solution":"def countPairsWithDiff(arr, k): Finds the number of distinct pairs (i, j) such that i < j and the absolute difference between the integers in each pair is equal to the target value k. count = 0 seen = set() for num in arr: if num - k in seen: count += 1 if num + k in seen: count += 1 seen.add(num) return count"},{"question":"A package delivery service wants to optimize the route for its delivery trucks. The city is represented as an n x n grid of intersections, and each intersection can have roads leading to adjacent intersections (north, south, east, west). However, some intersections may be blocked and cannot be traversed by the trucks. The goal is to determine the shortest path from the top-left intersection to the bottom-right intersection. The trucks can only move up, down, left, or right and cannot move diagonally. Write a function `shortestPath(grid: List[List[int]]) -> int` that takes in a 2-dimensional array (n x n) representing the city grid and returns the length of the shortest path from the top-left intersection to the bottom-right intersection. If no such path exists, return -1. In the grid: - A 0 represents an open intersection. - A 1 represents a blocked intersection. You can assume the top-left (0, 0) and bottom-right (n-1, n-1) intersections are always open (they will never be 1). # Constraints - The grid size n will be between 1 and 100 (1 ≤ n ≤ 100). - All values in the grid will be either 0 or 1. # Example Input: ```python grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] ``` Output: ```python shortestPath(grid) -> 9 ``` Input: ```python grid = [ [0, 1], [1, 0] ] ``` Output: ```python shortestPath(grid) -> -1 ``` # Notes - In the first example, the shortest path from the top-left to bottom-right intersection is 9 steps long. - In the second example, there is no possible path from the top-left to the bottom-right intersection due to the blocked paths, so the output is -1.","solution":"from typing import List from collections import deque def shortestPath(grid: List[List[int]]) -> int: Returns the length of the shortest path from the top-left intersection to the bottom-right intersection in the given grid. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n - 1 and c == n - 1: return dist for dr, dc in directions: rr, cc = r + dr, c + dc if 0 <= rr < n and 0 <= cc < n and (rr, cc) not in visited and grid[rr][cc] == 0: visited.add((rr, cc)) queue.append((rr, cc, dist + 1)) return -1"},{"question":"In this problem, you are provided with an array of integers. Your task is to determine if the array is a permutation of the first N natural numbers. A permutation of the first N natural numbers is an array consisting of N integers, where each integer from 1 to N appears exactly once in the array. Constraints: - The length of the array is at most 10^5. - The integers in the array are between 1 and 10^5. Input: Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output: Print `1` if the array is a permutation of the first N natural numbers, otherwise print `0`. Examples: Input: 5 4 5 3 1 2 Output: 1 Input: 6 1 2 3 4 5 7 Output: 0","solution":"def is_permutation(arr): Determines if the array is a permutation of the first N natural numbers. Parameters: arr (list): The array of integers. Returns: int: 1 if the array is a permutation, otherwise 0. n = len(arr) arr_set = set(arr) if len(arr_set) != n: return 0 if arr_set == set(range(1, n+1)): return 1 return 0"},{"question":"Create a program to help Alex determine the number of valid pairs (a, b) from a given list of integers such that the product mbox{a} * mbox{b} is even. A pair (a, b) is valid if and only if a and b are distinct integers from the list. Input Format - The first line contains an integer mathbf{T}, the number of test cases. - Each test case consists of two lines: - The first line contains an integer mathbf{n}, the number of integers in the list. - The second line contains mathbf{n} space-separated integers mathbf{arr}. Output Format For each test case, print the number of valid pairs in a new line. Constraints 1 leq T leq 1000 2 leq n leq 1000 1 leq mathbf{arr}[i] leq 10^9 Sample Input 2 3 1 2 3 4 2 4 6 8 Sample Output 2 6 Explanation For the first test case, the pairs are (1, 2) and (2, 3) whose products (2 and 6) are even. For the second test case, all combinations of pairs (2, 4), (2, 6), (2, 8), (4, 6), (4, 8), (6, 8) form valid pairs.","solution":"def count_valid_pairs(test_cases): results = [] for n, arr in test_cases: count_even = 0 count_odd = 0 for num in arr: if num % 2 == 0: count_even += 1 else: count_odd += 1 # To form an even product, one of the two numbers must be even. valid_pairs = count_even * (count_even - 1) // 2 + count_even * count_odd results.append(valid_pairs) return results"},{"question":"The management team at Exotic Pets Inc. has a new software feature on the agenda. The feature involves the analysis of their pet inventory and determining which categories of pets are ready to be shipped to various regions. The shipping constraints are given as follows: - A pen can hold 10 small pets, 5 medium-sized pets, or 2 large pets. - A batch is considered ready for shipping if it can fill a pen completely with pets of the same category. You will be given an inventory list of pets, each entry provides the `type` and `size` of the pet in one of the three categories, `small`, `medium`, `large`. Your task is to write a function to process the provided inventory and determine how many pens are ready to be shipped and how many pets will be left over for each category. Return this information as a dictionary with the pet size as the keys and another dictionary as the value containing two entries: `pens_ready`, and `pets_left`. # Input The input is a list of dictionaries, where each dictionary describes a pet and has two keys: - `type`: The type of the pet (e.g., \\"dog\\", \\"cat\\", \\"bird\\"). - `size`: The size of the pet (\\"small\\", \\"medium\\", \\"large\\"). Example input: ```python [ {\\"type\\": \\"dog\\", \\"size\\": \\"small\\"}, {\\"type\\": \\"cat\\", \\"size\\": \\"small\\"}, {\\"type\\": \\"bird\\", \\"size\\": \\"medium\\"}, {\\"type\\": \\"dog\\", \\"size\\": \\"large\\"}, {\\"type\\": \\"dog\\", \\"size\\": \\"large\\"}, {\\"type\\": \\"cat\\", \\"size\\": \\"small\\"} ] ``` # Output The output should be a dictionary with keys as \\"small\\", \\"medium\\", \\"large\\", and corresponding to each of these keys, a dictionary that contains: - `pens_ready`: Number of pens that are fully ready to be shipped. - `pets_left`: Number of pets left over after forming as many full pens as possible. Example output: ```python { \\"small\\": {\\"pens_ready\\": 0, \\"pets_left\\": 3}, \\"medium\\": {\\"pens_ready\\": 0, \\"pets_left\\": 1}, \\"large\\": {\\"pens_ready\\": 1, \\"pets_left\\": 0} } ``` # Note 1. The size strings in the input are always valid and lowercase. 2. The input list can be in any order and lengths with at least one entry. 3. You can ignore the `type` field for this task; it is not important for forming pens. Important: Your implementation should account for any valid list of inventory and ensure all counts are accurate.","solution":"def analyze_inventory(inventory): size_limits = { \\"small\\": 10, \\"medium\\": 5, \\"large\\": 2 } count_dict = {} # Initialize the count dictionary for size in size_limits: count_dict[size] = 0 # Count pets by size for pet in inventory: size = pet[\'size\'] if size in count_dict: count_dict[size] += 1 result = {} for size in size_limits: num_pets = count_dict[size] pen_limit = size_limits[size] pens_ready = num_pets // pen_limit pets_left = num_pets % pen_limit result[size] = { \\"pens_ready\\": pens_ready, \\"pets_left\\": pets_left } return result"},{"question":"Alex loves collecting rocks. He organizes his rock collection by splitting it into multiple groups based on their weight. He follows these rules when distributing the rocks among the groups: - Each rock has a specific weight. - Each group must contain rocks of the same weight. - Alex can only create groups such that each group contains exactly k rocks. You are given n rocks, where the weights of the rocks are represented by an array. Your task is to determine if it\'s possible to create groups of rocks where each group contains exactly k rocks. -----Input----- Each test contains multiple cases. The first line contains the number of test cases t (1 leq t leq 100). Description of the test cases follows. The first line of each test case contains two integers n and k (1 leq n, k leq 100). The second line of each test case contains n integers w_1, w_2, dots, w_n (1 leq w_i leq 100) which represent the weights of the rocks. -----Output----- For each test case, print \\"YES\\" (without quotes) if it\'s possible to create groups such that each group contains exactly k rocks, otherwise print \\"NO\\". -----Examples----- Input 3 6 3 1 2 2 2 1 1 5 2 3 3 3 3 3 4 2 4 4 4 4 Output YES NO YES -----Note----- For the first test case: - Alex has 6 rocks with weights: 1, 2, 2, 2, 1, 1. - He can create two groups of 3 rocks each: {1, 1, 1} and {2, 2, 2}. For the second test case: - Alex has 5 rocks with weights: 3, 3, 3, 3, 3. - It is not possible to create groups of 2 rocks from these 5 rocks. For the third test case: - Alex has 4 rocks with weights: 4, 4, 4, 4. - He can create two groups of 2 rocks each: {4, 4} and {4, 4}.","solution":"from collections import Counter def can_group_rocks(t, cases): results = [] for i in range(t): n, k = cases[i][0] weights = cases[i][1] weight_counts = Counter(weights) possible = True for count in weight_counts.values(): if count % k != 0: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Andrew loves playing board games, especially those involving movement on a grid. He\'s recently started designing a new game where a player moves a character on a grid of size n x m. The grid has some cells marked as obstacles which the player cannot move onto. The player starts at the top-left corner of the grid (cell (1,1)) and aims to reach the bottom-right corner (cell (n, m)). The character can only move in two directions: - Right (from cell (i, j) to cell (i, j+1)) - Down (from cell (i, j) to cell (i+1, j)) Andrew wants to create a part of the game that calculates the number of distinct paths the player can take to reach the goal while avoiding the obstacles. Can you help him? **Input:** - The first line contains two integers, n and m (1 ≤ n, m ≤ 10^3) — the number of rows and columns of the grid. - The next n lines each contain m characters where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). **Output:** - Print a single integer — the number of distinct paths from the top-left cell to the bottom-right cell modulo 10^9 + 7. **Examples:** **Input:** 3 3 ... .#. ... **Output:** 2 **Note:** In the given example, there are two paths from the top-left corner to the bottom-right corner of the grid: 1. Down, Down, Right, Right 2. Down, Right, Right, Down Paths that go through the obstacle (middle cell in this example) are not considered.","solution":"def number_of_paths(n, m, grid): MOD = 10**9 + 7 # Create a 2D dp array initialized with 0s dp = [[0] * m for _ in range(n)] # Start position if grid[0][0] == \'.\': dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1]"},{"question":"Background You are given two arrays of integers, `arr1` and `arr2`, which represent the prices of items in two different stores. Each item appears only once in each array. Objective Write a function `find_min_pair(arr1, arr2)` that finds a pair of items, one from each array, such that the absolute difference of their prices is the smallest among all possible pairs of items. Return the pair as a tuple `(price_from_arr1, price_from_arr2)`. Constraints - `arr1` and `arr2` will have at least one item and at most 10,000 items each. - All prices are distinct integers within the range [-10^9, 10^9]. - The function should run in O(n log n + m log m) time complexity, where `n` is the length of `arr1` and `m` is the length of `arr2`. Example **Input** ```python arr1 = [1, 3, 15, 11, 2] arr2 = [23, 127, 235, 19, 8] ``` **Output** ```python (11, 8) ``` **Explanation** The pair `(11, 8)` has the smallest absolute difference of `3`. Notes 1. The function should be optimized to handle large inputs efficiently. 2. Always consider edge cases such as negative integers and wide ranges of values. 3. The order of the elements in the result does not matter; `(8, 11)` is also a valid output for the provided example. Function Signature ```python def find_min_pair(arr1: List[int], arr2: List[int]) -> Tuple[int, int]: pass ```","solution":"def find_min_pair(arr1, arr2): Finds a pair of items, one from each array, such that the absolute difference of their prices is the smallest among all possible pairs of items. Parameters: arr1 : List[int] arr2 : List[int] Returns: Tuple[int, int]: Pair of prices with the smallest absolute difference. # Sort both arrays to use efficient comparison arr1.sort() arr2.sort() i, j = 0, 0 min_diff = float(\'inf\') min_pair = (0, 0) while i < len(arr1) and j < len(arr2): price1 = arr1[i] price2 = arr2[j] current_diff = abs(price1 - price2) if current_diff < min_diff: min_diff = current_diff min_pair = (price1, price2) # Move the pointer in the array with the smaller value if price1 < price2: i += 1 else: j += 1 return min_pair"},{"question":"After his recent exploration into mathematical sequences, Marin encounters another fascinating challenge, which he calls the \\"Repunit Sum Problem.\\" A repunit is a number consisting entirely of 1s. For example, 1, 11, 111 are all repunits. Marin defines a sequence of repunits where each element r_i is a repunit with i digits. For example, r_1 = 1, r_2 = 11, and so forth. Marin is interested in calculating the sum of these repunits for given ranges of indices. For a given range [l, r], he wants to know the sum of all repunits from r_l to r_r inclusive. Help Marin by answering his queries about the sums of repunits in the specified ranges. -----Input----- The first line contains the integer Q (1 leq Q leq 100000), the number of queries. Each of the next Q lines contains two integers l_i and r_i (1 leq l_i leq r_i leq 10^5), representing the i-th query. -----Output----- For each query, output the sum of repunits from r_{l_i} to r_{r_i} inclusive. -----Examples----- Sample Input: 3 1 1 2 3 1 3 Sample Output: 1 122 123 Note: - The repunit with n digits, r_n, can be represented as frac{10^n - 1}{9}. - Ensure efficient computation to handle large inputs within constraints.","solution":"def calculate_repunit(n): Calculates the n-digit repunit. return (10 ** n - 1) // 9 def sum_of_repunits(l, r): Calculates the sum of repunits from r_l to r_r. return sum(calculate_repunit(i) for i in range(l, r + 1)) def process_queries(queries): Process each query and return the results as a list. results = [] for l, r in queries: results.append(sum_of_repunits(l, r)) return results"},{"question":"Tom loves playing with numbers, and he has come up with a fun sequence problem. He wants to generate a special sequence based on a given non-negative integer n. The sequence is generated as follows: 1. Start with the number n. 2. If n is even, the next number in the sequence is n/2. 3. If n is odd, the next number in the sequence is 3*n + 1. 4. Continue the process until n becomes 1. Tom wants to write a program that, given an integer n, prints the entire sequence according to the rules described above. Write a program that performs the following: Input: - A single integer n (0 ≤ n ≤ 10^6). Output: - Print the sequence generated by the rules described above on a single line, with each number in the sequence separated by a space. Example: Input: 6 Output: 6 3 10 5 16 8 4 2 1 Example: Input: 0 Output: 0","solution":"def generate_sequence(n): Generates the sequence as described in the problem. Parameters: n (int): A non-negative integer as starting point of the sequence. Returns: List[int]: A list containing the sequence. if n == 0: return [0] sequence = [] while n != 1: sequence.append(n) if n % 2 == 0: n //= 2 else: n = 3 * n + 1 sequence.append(1) return sequence def format_sequence(sequence): Formats the sequence into a space-separated string. Parameters: sequence (List[int]): The sequence of numbers generated. Returns: str: A space-separated string of numbers in the sequence. return \' \'.join(map(str, sequence)) def print_sequence(n): sequence = generate_sequence(n) sequence_string = format_sequence(sequence) print(sequence_string)"},{"question":"Write a function that checks if a given string is a valid IPv4 address. An IPv4 address consists of four numbers (0 to 255) separated by dots. Leading zeros are invalid unless the number itself is zero. The function should return `True` if the given string is a valid IPv4 address, and `False` otherwise.","solution":"def is_valid_ipv4_address(ip): Checks if the input string is a valid IPv4 address. Parameters: - ip: str, the IP address to be validated Returns: - bool: True if the IP address is valid, False otherwise parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit() or not 0 <= int(part) <= 255: return False if part != \'0\' and part.startswith(\'0\'): return False return True"},{"question":"Given an array of `n` integers, your task is to determine whether it is possible to rearrange the array such that no two adjacent elements are equal, and if possible, provide one such rearrangement. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^5), the elements of the array. # Output - If it is impossible to rearrange the array such that no two adjacent elements are equal, print \\"NO\\". - Otherwise, print \\"YES\\" followed by the rearranged array in a single line. # Example Input ``` 7 1 2 2 3 3 4 4 ``` Output ``` YES 1 2 3 4 2 3 4 ``` Input ``` 3 1 1 1 ``` Output ``` NO ``` # Note In the first example, one possible valid rearrangement is `1 2 3 4 2 3 4`. In the second example, it is impossible to rearrange the array to satisfy the given condition. The solution should handle large inputs efficiently and ensure that the rearranged array meets the requirements.","solution":"from collections import Counter import heapq def rearrange_array(n, arr): Returns whether it\'s possible to rearrange array such that no two adjacent elements are equal. If possible, returns one such rearrangement. if n == 1: return \\"YESn\\" + str(arr[0]) # Count frequencies of elements count = Counter(arr) # Priority queue (max-heap) by frequency max_heap = [] for num, freq in count.items(): heapq.heappush(max_heap, (-freq, num)) # To store the rearranged result result = [] # Previous element to avoid same adjacent elements prev_freq, prev_num = 0, 0 # (negative frequency, num) while max_heap: freq, num = heapq.heappop(max_heap) # Add current element to the result result.append(num) # If prev exists, push it back to heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_num)) # Update previous element prev_freq, prev_num = freq + 1, num # Decrease the frequency by 1 if len(result) != n: return \\"NO\\" return \\"YESn\\" + \\" \\".join(map(str, result))"},{"question":"You are given a Sudoku board (9x9 grid) partially filled with digits from 1 to 9 and empty cells denoted by \'.\'. Your task is to write a program that will determine if the given Sudoku board configuration is valid according to the following rules: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note that the Sudoku board can be partially filled, where an empty cell is denoted by the character \'.\'. -----Input----- The input consists of a 9x9 grid represented as a list of strings, where each string consists of characters from the set {\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\'.\'}. Each string represents a row of the Sudoku board. For example: [ \\"53..7....\\", \\"6..195...\\", \\".98....6.\\", \\"8...6...3\\", \\"4..8.3..1\\", \\"7...2...6\\", \\".6....28.\\", \\"...419..5\\", \\"....8..79\\" ] -----Output----- Print \\"VALID\\" (without quotes) if the given Sudoku board configuration is valid according to the rules. Otherwise, print \\"INVALID\\" (without quotes). -----Examples----- Input [ \\"53..7....\\", \\"6..195...\\", \\".98....6.\\", \\"8...6...3\\", \\"4..8.3..1\\", \\"7...2...6\\", \\".6....28.\\", \\"...419..5\\", \\"....8..79\\" ] Output VALID Input [ \\"83..7....\\", \\"6..195...\\", \\".98....6.\\", \\"8...6...3\\", \\"4..8.3..1\\", \\"7...2...6\\", \\".6....28.\\", \\"...419..5\\", \\"....8..79\\" ] Output INVALID Input [ \\"53..7....\\", \\"6..195...\\", \\".98....6.\\", \\"8...6...3\\", \\"4..8.3..1\\", \\"7...2....\\", \\".6.....8.\\", \\"5..419..4\\", \\"....8..79\\" ] Output INVALID -----Note----- In the first sample, the given Sudoku board configuration is valid according to the rules. In the second sample, the number \'8\' is repeated in the first row, which makes the board configuration invalid. In the third sample, the number \'5\' is repeated in the eighth column, which makes the board configuration invalid.","solution":"def is_valid_sudoku(board): def is_valid_group(group): elements = [x for x in group if x != \'.\'] return len(elements) == len(set(elements)) def get_square(board, row, col): square = [] for i in range(3): for j in range(3): square.append(board[row+i][col+j]) return square # Check rows for row in board: if not is_valid_group(row): return \\"INVALID\\" # Check columns for col in range(9): column = [board[row][col] for row in range(9)] if not is_valid_group(column): return \\"INVALID\\" # Check 3x3 sub-boxes for row in range(0, 9, 3): for col in range(0, 9, 3): square = get_square(board, row, col) if not is_valid_group(square): return \\"INVALID\\" return \\"VALID\\""},{"question":"Given an array of n integers representing points on a number line, find the minimum number of intervals of length k needed to cover all the points. Each interval starts and ends at integer points on the number line. -----Input----- The first line of the input contains two integers n and k (1 ≤ n ≤ 200000, 1 ≤ k ≤ 10^9)— the number of points and the length of each interval. The second line of the input contains n integers x_1, x_2, ..., x_{n} ( -10^9 ≤ x_{i} ≤ 10^9) where x_{i} is the position of the i-th point on the number line. -----Output----- Print the minimum number of intervals required to cover all the points. -----Examples----- Input 5 3 1 2 3 4 5 Output 2 Input 4 2 -3 -2 -1 0 Output 2 Input 4 10 1 100 1000 10000 Output 4","solution":"def min_intervals_to_cover_points(n, k, points): Returns the minimum number of intervals of length k to cover all points. Parameters: n (int): Number of points k (int): Length of each interval points (list of int): Points on the number line Returns: int: Minimum number of intervals required if n == 0: return 0 points.sort() intervals = 1 current_end = points[0] + k for i in range(1, n): if points[i] > current_end: intervals += 1 current_end = points[i] + k return intervals"},{"question":"Alice loves collecting coins. She has collected a certain number of coins over the years, and she keeps them in jars. Every year, she adds a specific number of coins to each jar. Given the starting number of coins in each jar and the number of additional coins Alice adds to each jar every year, calculate the total number of coins in each jar after N years. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers M and N — the number of jars and the number of years, respectively. - The second line of each test case contains M space-separated integers representing the number of coins in each jar initially. - The third line of each test case contains M space-separated integers representing the number of coins Alice adds to each jar every year. ------ Output Format ------ For each test case, print on a new line M space-separated integers — the total number of coins in each jar after N years. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 10^3 1 ≤ N ≤ 10^3 0 ≤ InitialCoins, AddCoins ≤ 10^4 ------ Sample Input 1 ------ 2 3 2 5 10 15 1 2 3 2 3 10 20 5 5 ------ Sample Output 1 ------ 7 14 21 25 35 ------ Explanation 1 ------ Test Case 1: - Initial coins in jars: 5, 10, 15 - Coins added per year: 1, 2, 3 - After 2 years: - Jar 1: 5 + (2 * 1) = 7 - Jar 2: 10 + (2 * 2) = 14 - Jar 3: 15 + (2 * 3) = 21 Test Case 2: - Initial coins in jars: 10, 20 - Coins added per year: 5, 5 - After 3 years: - Jar 1: 10 + (3 * 5) = 25 - Jar 2: 20 + (3 * 5) = 35","solution":"def calculate_total_coins(test_cases): results = [] for case in test_cases: M, N, initial_coins, add_coins = case final_coins = [initial + N * add for initial, add in zip(initial_coins, add_coins)] results.append(final_coins) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): M, N = map(int, lines[idx].split()) initial_coins = list(map(int, lines[idx + 1].split())) add_coins = list(map(int, lines[idx + 2].split())) test_cases.append((M, N, initial_coins, add_coins)) idx += 3 return test_cases def main(input_data): test_cases = parse_input(input_data) results = calculate_total_coins(test_cases) return \'n\'.join(\' \'.join(map(str, result)) for result in results)"},{"question":"-----Problem Statement----- Write a function that accepts a string and outputs the string in reverse. -----Input----- The only line contains a single string s. -----Output----- Output the reversed string on a single line. -----Constraints----- - 1 ≤ |s| ≤ 100 - s consists of printable ASCII characters. -----Sample Input----- hello -----Sample Output----- olleh","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Alice loves playing with dominoes. She has a set of dominoes with numbers from 0 to 6 on each half. She wants to use these dominoes to create a chain. A valid chain of dominoes is one in which adjacent halves of neighboring dominoes have matching numbers. More specifically, let d_1, d_2, ..., d_n be the sequence of the n dominoes. Domino d_i has two halves with numbers (a_i, b_i). For this sequence to be valid, the following must hold: for every 1 ≤ i < n, the second number (b_i) of domino d_i must match the first number (a_{i+1}) of domino d_{i+1}. Alice wonders what the maximum length of such a valid chain can be, using a subset of the dominoes. You are given n dominoes, each having two integers between 0 and 6. Your task is to determine the length of the longest valid chain that can be formed. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of dominoes. Each of the following n lines contains two space-separated integers a_i and b_i (0 ≤ a_i, b_i ≤ 6) — the numbers on the halves of the i-th domino. Output Print a single integer — the length of the longest valid chain. Examples Input 5 1 2 2 3 3 4 1 3 4 5 Output 4 Input 3 6 1 1 2 2 6 Output 3 Note Consider the first sample. One possible valid chain is: 1 2 -> 2 3 -> 3 4 -> 4 5 The chain length is 4 as it includes 4 dominoes. For the second example, the sequence: 6 1 -> 1 2 -> 2 6 forms a valid chain with a length of 3.","solution":"from itertools import permutations def find_longest_chain(dominoes): def is_chain_valid(chain): for i in range(len(chain) - 1): if chain[i][1] != chain[i+1][0]: return False return True max_length = 0 for perm in permutations(dominoes): for i in range(len(perm) + 1): for j in range(i): if is_chain_valid(perm[j:i]): max_length = max(max_length, i - j) return max_length def longest_domino_chain(n, dominoes): return find_longest_chain(dominoes) # Test cases if __name__ == \\"__main__\\": print(longest_domino_chain(5, [(1, 2), (2, 3), (3, 4), (1, 3), (4, 5)])) # Should print 4 print(longest_domino_chain(3, [(6, 1), (1, 2), (2, 6)])) # Should print 3"},{"question":"Given a list of integers, return the first missing positive integer. The missing positive integer is the smallest positive integer that does not exist in the list. Your algorithm should run in O(n) time and use constant space. Example 1: Input: nums = [3, 4, -1, 1] Output: 2 Explanation: The smallest missing positive integer is 2. Example 2: Input: nums = [1, 2, 0] Output: 3 Explanation: The smallest missing positive integer is 3. Example 3: Input: nums = [7, 8, 9, 11, 12] Output: 1 Explanation: The smallest missing positive integer is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function firstMissingPositive() which takes a list of integers nums as input and returns the first missing positive integer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - The list size is in the range [1, 10^6]. - Each integer in the list is between -10^6 and 10^6.","solution":"def firstMissingPositive(nums): Returns the first missing positive integer from the list. n = len(nums) # Move each positive integer to its corresponding index for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap elements to move them to correct positions nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # The first index which does not have the correct positive integer for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are filled correctly, return n+1 return n + 1"},{"question":"Given a string consisting of lowercase English letters, you are required to construct a new string by rearranging the letters of the given string. The new string must not contain two consecutive identical characters. If there are multiple possible solutions, any one of them is acceptable. If it is impossible to construct such a string, output \\"IMPOSSIBLE\\". Input The first line contains a single string s (1 ≤ |s| ≤ 10^5) — the string you need to rearrange. Output Output the rearranged string if possible. Otherwise, output \\"IMPOSSIBLE\\". Examples Input aab Output aba Input aaab Output IMPOSSIBLE Input aabbcc Output abcabc Note: In the first example, \\"aba\\" is a valid rearrangement where no two consecutive characters are the same. In the second example, no rearrangement is possible to make all consecutive characters different, hence the output is \\"IMPOSSIBLE\\". In the third example, \\"abcabc\\" is a valid rearrangement.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string \'s\' so that no two identical characters are adjacent. If it\'s impossible, returns \\"IMPOSSIBLE\\". # Count the frequency of each character counter = Counter(s) # Create a max heap based on the frequency of characters (negative for max heap) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap or prev_freq < 0: if max_heap: freq, char = heapq.heappop(max_heap) else: if prev_char: return \\"IMPOSSIBLE\\" result.append(char) if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # since freq is stored as negative, increment by 1 return \'\'.join(result)"},{"question":"You are given a linked list that may have a loop. The task is to identify and return the node where the loop starts or NULL if there is no loop. Example 1: Input: LinkedList: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 3 (Loop starts again at node 3) Output: 3 Explanation: The loop starts at node with value 3. Example 2: Input: LinkedList: 1 -> 2 -> 3 -> 4 Output: No loop Explanation: There is no loop in the given linked list. Your Task: You don\'t need to read input or print anything. Your task is to complete the function detectLoopStart() which takes the head of the linked list as input and returns the node where the loop starts or NULL if there is no loop. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ Number of nodes ≤ 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detectLoopStart(head): Detect the start of the loop in the linked list if present. :param head: ListNode, start of the linked list :return: ListNode, the node where the loop starts or None if no loop if not head or not head.next: return None # Step 1: Use two pointers, fast and slow slow = head fast = head # Step 2: Move fast by 2 steps and slow by 1 step, check if they meet while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if not fast or not fast.next: return None # Step 3: Reset slow to head, move both pointers one step until they meet slow = head while slow != fast: slow = slow.next fast = fast.next return slow # The start of the loop"},{"question":"A common problem when working with arrays is to find the longest increasing subsequence within the array. An increasing subsequence is a sequence of numbers such that each successive number in the sequence is greater than the preceding one. The subsequence does not need to be contiguous, but it must maintain the order of the original array. Write a function longestIncreasingSubsequence (or longest_increasing_subsequence in Python) that takes an array of integers as input and returns the length of the longest increasing subsequence in the array. For example: ```python def longest_increasing_subsequence(arr): # Your code here pass print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18])) # Output: 4 (Subsequence: [2, 3, 7, 101]) print(longest_increasing_subsequence([0, 1, 0, 3, 2, 3])) # Output: 4 (Subsequence: [0, 1, 2, 3]) print(longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7])) # Output: 1 (Subsequence: [7]) ``` Assume all inputs are valid arrays of integers with at least one element. Consider the optimal solution in terms of time complexity.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the array. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis array return max(lis)"},{"question":"Making Change You\'ve just opened a boutique grocery store, and you\'ve decided to write a program that will calculate the optimal way to give change to customers using the fewest number of coins. Your programming skills will ensure a smooth, efficient checkout process for your customers! --- Input: * A non-negative integer between `0` and `9999`, representing the amount of cents you need to provide as change. * Available coin denominations are: `100` cents (1 dollar), `25` cents (quarter), `10` cents (dime), `5` cents (nickel), and `1` cent (penny). Output: * A dictionary where the keys are the coin denominations and the values are the number of each coin needed to make the change. Example: * Input: `187` * Output: `{100: 1, 25: 3, 10: 1, 5: 0, 1: 2}` * Explanation: 1.87 can be made using 1 dollar, 3 quarters, 1 dime, 0 nickels, and 2 pennies. Notes: * Ensure the solution is efficient and minimizes the number of coins. * Handle edge cases such as `0` cents which should return all zeroes for each denomination.","solution":"def make_change(amount): Returns a dictionary with the fewest number of coins needed to make the change for a given amount. denominations = [100, 25, 10, 5, 1] change = {} for coin in denominations: coin_count = amount // coin change[coin] = coin_count amount -= coin_count * coin return change"},{"question":"Given a sequence of N integers, you are asked to answer Q queries. Each query asks you to determine the number of distinct integers in a given subarray defined by its indices l and r (1-based index). -----Constraints----- - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq a_i leq 10^6 - 1 leq l leq r leq N -----Input----- Input is given from Standard Input in the following format: N Q a_1 a_2 ... a_N l_1 r_1 l_2 r_2 : l_Q r_Q -----Output----- Print Q lines. The i-th line should contain the answer to the i-th query. -----Sample Input----- 5 3 1 2 1 3 4 1 3 2 4 3 5 -----Sample Output----- 2 3 3 There are five integers in the sequence. The integers are [1, 2, 1, 3, 4]. - Query 1: In the subarray from index 1 to 3 (inclusive) [1, 2, 1], there are 2 distinct integers: [1, 2]. - Query 2: In the subarray from index 2 to 4 (inclusive) [2, 1, 3], there are 3 distinct integers: [1, 2, 3]. - Query 3: In the subarray from index 3 to 5 (inclusive) [1, 3, 4], there are 3 distinct integers: [1, 3, 4].","solution":"def distinct_integers_in_subarray(arr, queries): Returns the number of distinct integers in the given subarray for each query :param arr: List of integers of length N :param queries: List of tuples (l, r) representing the queries :return: List of integers representing answers to the queries results = [] for l, r in queries: subarray = arr[l-1:r] distinct_elements = set(subarray) results.append(len(distinct_elements)) return results"},{"question":"MIKA loves collecting rare gemstones. She has recently stumbled upon several gemstone boxes spread across several caves during her exploration. Each cave contains a certain number of gemstone boxes. MIKA can carry up to a certain fixed number of gemstone boxes in one trip. Help MIKA determine the minimum number of trips she needs to collect all the gemstone boxes from all the caves. Input: The input consists of three lines: 1. An integer N (1 ≤ N ≤ 50) which indicates the number of caves. 2. N integers on the second line, where each integer Bi (1 ≤ Bi ≤ 100) represents the number of gemstone boxes in the i-th cave. 3. An integer K (1 ≤ K ≤ 200) written on the third line, indicating the maximum number of gemstone boxes MIKA can carry in one trip. Output: Output a single integer indicating the minimum number of trips needed. Example: Input: 3 10 5 8 10 Output: 3","solution":"def minimum_trips(n, gem_boxes, k): Calculate the minimum number of trips MIKA needs to collect all gemstone boxes. Parameters: n (int): Number of caves. gem_boxes (list of int): List where each integer represents the number of gemstone boxes in each cave. k (int): Maximum number of gemstone boxes MIKA can carry in one trip. Returns: int: The minimum number of trips needed. total_boxes = sum(gem_boxes) return (total_boxes + k - 1) // k # Using ceiling division to calculate minimum number of trips"},{"question":"Given a 2D grid of characters and a target word, determine if the word exists in the grid. The word can be constructed from letters of sequentially adjacent characters, where \\"adjacent\\" characters are horizontally or vertically neighboring. The same letter cell may not be used more than once. # Input - The first line consists of two integers, `m` and `n`, representing the dimensions of the grid (1 ≤ m, n ≤ 20). - The next `m` lines consist of `n` lowercase characters. - The last line consists of a target word (length of the word is ≤ 50). # Output - Output \\"Yes\\" if the word exists in the grid, otherwise output \\"No\\". # Example **Input:** ``` 3 4 a b c e s f c s a d e e abcesee ``` **Output:** ``` Yes ``` **Input:** ``` 3 4 a b c e s f c s a d e e abcb ``` **Output:** ``` No ``` # Constraints: - The grid and word only contain lowercase English letters. - The word must be constructed from the sequence of adjacent cells, where adjacent cells are those horizontally or vertically neighboring. - The same letter cell may not be used more than once in constructing the word.","solution":"def exist(board, word): Returns \'Yes\' if the word exists in the grid, otherwise \'No\'. def dfs(board, word, i, j, word_index, visited): if word_index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[word_index]: return False visited[i][j] = True res = (dfs(board, word, i-1, j, word_index+1, visited) or dfs(board, word, i+1, j, word_index+1, visited) or dfs(board, word, i, j-1, word_index+1, visited) or dfs(board, word, i, j+1, word_index+1, visited)) visited[i][j] = False return res m = len(board) n = len(board[0]) visited = [[False for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): if board[i][j] == word[0] and dfs(board, word, i, j, 0, visited): return \\"Yes\\" return \\"No\\""},{"question":"James is organizing a series of events. Each event has a start time and an end time. He wants to attend as many events as possible, but he can only attend one event at a time. Given the start and end times of the events, determine the maximum number of events James can attend without any overlap. Constraints * 1 ≤ N ≤ 100000 * 0 ≤ start time < end time ≤ 100000 * All input values are integers. Input Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 ... start_N end_N Output Print the maximum number of events James can attend. Examples Input 3 1 4 2 3 3 5 Output 2 Input 4 1 3 2 5 4 6 6 8 Output 3 Input 5 3 4 1 2 5 6 0 1 4 5 Output 5","solution":"def max_events(events): Given a list of events where each event is a tuple (start, end), returns the maximum number of events that can be attended without overlapping. # Sort events based on their end times events.sort(key=lambda x: x[1]) # Initialize variables max_events = 0 last_end_time = 0 # Iterate through events and select the ones that can be attended for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"You are given a list of `n` positive integers and an integer `k`. Your task is to find the maximum sum of elements from the list such that no two elements are adjacent in the original list, and the sum is no greater than `k`. Input: - The first line contains a single integer `t`, the number of test cases. - For each test case: - The first line contains two integers `n` and `k`. - The second line contains `n` positive integers separated by spaces. Output: - For each test case, print the maximum sum that meets the requirements. Constraints: - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 1000 - 1 ≤ k ≤ 10^9 - 1 ≤ element of list ≤ 10^6 Example: Input: 3 5 10 1 2 9 4 5 4 7 2 2 2 2 6 15 7 3 8 5 2 9 Output: 10 4 15 Explanation: - In the first test case, the maximum sum we can obtain without choosing adjacent elements and is no greater than 10 is 1 + 9 = 10. - In the second test case, the maximum sum we can obtain without choosing adjacent elements and is no greater than 7 is 2 + 2 = 4. - In the third test case, the maximum sum we can obtain without choosing adjacent elements and is no greater than 15 is 7 + 8 = 15.","solution":"def max_sum_non_adjacent(nums, k): Calculates the maximum sum of non-adjacent numbers in the list `nums` such that the sum is no greater than `k`. n = len(nums) if n == 0: return 0 if n == 1: return nums[0] if nums[0] <= k else 0 dp = [0] * n dp[0] = nums[0] if nums[0] <= k else 0 dp[1] = max(nums[0], nums[1]) if max(nums[0], nums[1]) <= k else 0 for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) if dp[i] > k: dp[i] = dp[i-1] return dp[n-1] def max_sum_non_adjacent_tests(test_cases): results = [] for n, k, nums in test_cases: results.append(max_sum_non_adjacent(nums, k)) return results"},{"question":"You are given an array of non-negative integers representing the heights of different trees in a forest. Each tree can be either cut down completely or left standing. However, to preserve the beauty of the forest, no two adjacent trees should be cut down. You need to determine the maximum sum of heights of trees that can be obtained by cutting down trees according to this rule. INPUT: An integer T (1 ≤ T ≤ 100) : number of test cases For each test case, an integer N (1 ≤ N ≤ 100): the number of trees followed by an array of N integers heights[] (0 ≤ heights[i] ≤ 1000) representing the heights of the trees. OUTPUT: For each test case, output the maximum sum of heights of trees that can be obtained by cutting down the trees according to the above rule. SAMPLE INPUT: 2 5 3 2 5 10 7 4 3 2 7 10 SAMPLE OUTPUT: 15 13 Explanation: In the first test case, the optimal way to cut down trees is to cut down trees with heights 3, 10, and 2, which gives us a total sum of 15 (3 + 10 + 2). In the second test case, the optimal way is to cut down trees with heights 3 and 10, which gives us a total sum of 13 (3 + 10). Cutting down trees with heights 3 and 7 would violate the rule.","solution":"def max_sum_heights(T, test_cases): def max_sum_non_adjacent(nums): if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1] results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] results.append(max_sum_non_adjacent(heights)) return results"},{"question":"Task: You have to create a function `isAutomorphic` to check whether the argument passed is an Automorphic Number and return true if it is & false otherwise. # Description: `Automorphic Number` - An automorphic number is a number whose square ends in the same digits as the number itself. > The first few Automorphic Numbers are - 1, 5, 6, 25, 76, 376... # Explanation: 1^2 = 1 // ∴ 1 is an Automorphic Number 5^2 = 25 // ∴ 5 is an Automorphic Number 6^2 = 36 // ∴ 6 is an Automorphic Number 25^2 = 625 // ∴ 25 is an Automorphic Number 76^2 = 5776 // ∴ 76 is an Automorphic Number 376^2 = 141376 // ∴ 376 is an Automorphic Number","solution":"def isAutomorphic(n): Checks if the given number n is an automorphic number. An automorphic number is a number whose square ends in the same digits as the number itself. Parameters: n (int): The number to check. Returns: bool: True if n is an automorphic number, False otherwise. square = n ** 2 return str(square).endswith(str(n))"},{"question":"Given an array of integers, write a function that finds the contiguous subarray (containing at least one number) which has the maximum sum and returns that sum. A subarray is a contiguous part of an array. For example, given the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray `[4,-1,2,1]` has the largest sum which is `6`. Your function should: - Take an array of integers as input. - Return an integer representing the maximum sum of any contiguous subarray. Input: - An array of integers `A` with at least one element and at most 100,000 elements. Each element `A[i]` will be an integer such that `-10,000 <= A[i] <= 10,000`. Output: - An integer representing the maximum sum of any contiguous subarray. Note: - This problem is known as the \\"Maximum Subarray Problem\\" and can be solved efficiently using Kadane\'s Algorithm. - For an empty array input, the function should return `0`.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray that has the maximum sum. :param nums: List of integers :return: An integer representing the maximum sum of any contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Heidi has learned about binary trees and their properties. She now needs to perform certain operations on a binary tree, specifically calculating the depth of the tree and finding the maximum value in each level of the tree. Can you help Heidi with these tasks? ----- Input ----- The input consists of two parts: 1. The binary tree represented as a list of values in level-order traversal. Each value corresponds to a node in the tree. Use \'null\' to represent a missing node. 2. A single integer, representing the value of the tree root. Example: ``` [3, 9, 20, null, null, 15, 7] 3 ``` ----- Output ----- Output consists of two parts: 1. An integer representing the depth of the binary tree. 2. A list of integers where each integer represents the maximum value at each level of the tree. Example: ``` Depth: 3 Max values at each level: [3, 20, 15] ``` Your answer should contain two lines as illustrated in the example above. The first line displays the depth, and the second line shows the list of maximum values at each level.","solution":"from typing import List, Union from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(level_order: List[Union[int, None]]) -> Union[TreeNode, None]: if not level_order or level_order[0] is None: return None root = TreeNode(level_order[0]) queue = deque([root]) i = 1 while i < len(level_order): current = queue.popleft() if i < len(level_order) and level_order[i] is not None: current.left = TreeNode(level_order[i]) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] is not None: current.right = TreeNode(level_order[i]) queue.append(current.right) i += 1 return root def depth_of_tree(root: TreeNode) -> int: if not root: return 0 left_depth = depth_of_tree(root.left) right_depth = depth_of_tree(root.right) return max(left_depth, right_depth) + 1 def max_values_at_each_level(root: TreeNode) -> List[int]: if not root: return [] max_values = [] queue = deque([root]) while queue: level_length = len(queue) max_value = float(\'-inf\') for _ in range(level_length): node = queue.popleft() max_value = max(max_value, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) max_values.append(max_value) return max_values # Function to process the input and produce the desired output def process_tree(level_order: List[Union[int, None]], root_val: int): root = build_tree(level_order) depth = depth_of_tree(root) max_values = max_values_at_each_level(root) print(f\\"Depth: {depth}\\") print(f\\"Max values at each level: {max_values}\\")"},{"question":"Find the sum of even numbers up to a given integer n (exclusive). The sum of even numbers up to n is calculated by adding all even numbers less than n. Input The only line contains n (1 ≤ n ≤ 100). Output Print the sum of all even numbers less than n. Examples Input 10 Output 20 Input 7 Output 12","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers up to, but not including, n. return sum(i for i in range(2, n, 2))"},{"question":"Write a function `word_break(s, wordDict)` that takes a string `s` and a list of words `wordDict`, and returns `True` if `s` can be segmented into a sequence of one or more dictionary words. For example, given `s = \\"leetcode\\"` and `wordDict = [\\"leet\\", \\"code\\"]`, the output should be `True` since \\"leetcode\\" can be segmented as \\"leet\\" + \\"code\\". Additionally, explain the time and space complexity of your solution.","solution":"def word_break(s, wordDict): Returns True if the string can be segmented into a sequence of one or more dictionary words. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1] # The time complexity of this solution is O(n^2 * m), where n is the length of the string s # and m is the average length of words in wordDict. This is because we are iterating through all # substrings of s and checking if each substring is in the wordDict set. # Checking membership in a set is O(1) on average. The nested loop runs in O(n^2) time, # and the membership checks run in O(m) time. # The space complexity is O(n), where n is the length of the string s, # because we are using a dynamic programming array of size n+1."},{"question":"A company is developing a new productivity application, and one of the features is task scheduling with priorities. Each task can be assigned a unique priority from 1 to 10, where 1 is the highest priority and 10 is the lowest. Users can add tasks, complete tasks, or reassign priorities, and the system needs to maintain the correct order of tasks based on their priorities. Your task is to implement a function that processes a series of commands to manage the tasks. The commands can be one of the following: 1. \\"add task_name priority\\" – Adds a new task with the given name and priority. 2. \\"complete task_name\\" – Marks the task with the given name as completed and removes it from the list. 3. \\"reassign task_name new_priority\\" – Changes the priority of the task with the given name to the new specified priority. After processing all the commands, the function should output the list of remaining tasks in priority order, followed by their names (if multiple tasks have the same priority, they should be ordered by their name lexicographically). -----Input----- First line contains T (number of test cases, 1 <= T <= 20). Each test case starts with N (number of commands, 1 <= N <= 100). Each of the next N lines contains a command in the form \\"command task_name [priority]\\" (priority is only present in the \\"add\\" and \\"reassign\\" commands). -----Output----- For each test case, output the list of remaining tasks in the format \\"priority: task_name\\". Each task should be listed on a new line. If there are no tasks left, output \\"No tasks remaining\\". -----Example----- Input: 2 5 add write_code 2 add design_mockup 5 reassign design_mockup 3 complete write_code add update_docs 4 4 add test_app 1 add deploy_app 1 complete test_app reassign deploy_app 2 Output: 3: design_mockup 4: update_docs 1: deploy_app","solution":"def process_commands(test_cases): results = [] for commands in test_cases: tasks = {} for command in commands: parts = command.split() if parts[0] == \\"add\\": task_name = parts[1] priority = int(parts[2]) tasks[task_name] = priority elif parts[0] == \\"complete\\": task_name = parts[1] if task_name in tasks: del tasks[task_name] elif parts[0] == \\"reassign\\": task_name = parts[1] new_priority = int(parts[2]) if task_name in tasks: tasks[task_name] = new_priority if tasks: sorted_tasks = sorted(tasks.items(),key=lambda x: (x[1], x[0])) results.append([(priority, task_name) for task_name, priority in sorted_tasks]) else: results.append(\\"No tasks remaining\\") return results # Example usage if __name__ == \\"__main__\\": test_cases = [ ([\\"add write_code 2\\", \\"add design_mockup 5\\", \\"reassign design_mockup 3\\", \\"complete write_code\\", \\"add update_docs 4\\"]), ([\\"add test_app 1\\", \\"add deploy_app 1\\", \\"complete test_app\\", \\"reassign deploy_app 2\\"]) ] output = process_commands(test_cases) for result in output: if result != \\"No tasks remaining\\": for task in result: print(f\\"{task[0]}: {task[1]}\\") else: print(result)"},{"question":"John is participating in a game show where he has to create the largest number possible using a given set of digits. He has a limited number of moves, and in each move, he can swap any two digits in the number. His goal is to maximize the number formed after making at most k swaps. -----Input----- The first line contains a string s representing the number (1 ≤ length of s ≤ 1000, s consists of digits from \'0\' to \'9\' only). The second line contains a non-negative integer k (0 ≤ k ≤ 100). -----Output----- Print the largest number John can form after at most k swaps. If no swaps are required or possible, print the original number. -----Examples----- Input 254 1 Output 524 Input 12345 2 Output 54321 Input 54321 1 Output 54321","solution":"def find_maximum_num(s, k): Returns the largest number possible after making at most k swaps of the digits in s. def swap(s, i, j): if i != j: s = list(s) s[i], s[j] = s[j], s[i] return \'\'.join(s) def find_max_recursive(s, k, n): if k == 0: return s max_num = s for i in range(n): for j in range(i + 1, n): if s[i] < s[j]: s_swapped = swap(s, i, j) max_candidate = find_max_recursive(s_swapped, k - 1, n) if max_candidate > max_num: max_num = max_candidate return max_num return find_max_recursive(s, k, len(s)) # Examples print(find_maximum_num(\\"254\\", 1)) # 524 print(find_maximum_num(\\"12345\\", 2)) # 54321 print(find_maximum_num(\\"54321\\", 1)) # 54321"},{"question":"In a video game, you control a character that can move around in a 2-dimensional grid. The grid is represented as an n times n matrix where each cell can contain either a `0` (an empty cell) or a `1` (an obstacle). Your goal is to navigate from the top-left corner (cell (0, 0)) to the bottom-right corner (cell (n-1, n-1)) using the fewest number of moves. In each move, you can go to any of the adjacent cells that share an edge (up, down, left, or right) and that do not contain an obstacle. Given the grid, determine the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the destination, return `-1`. -----Input----- First line contains an integer 1 leq n leq 1000 - the size of the grid (number of rows and columns). Each of the next n lines contains n integers (either `0` or `1`), representing the grid. -----Output----- A single integer denoting the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is impossible to reach the destination, return `-1`. -----Examples----- Sample Input: 5 0 0 1 0 0 1 0 1 1 0 1 0 0 0 0 1 1 1 0 1 0 0 0 0 0 Sample Output: 8","solution":"from collections import deque def min_moves(grid): n = len(grid) # Edge case for single cell grid if n == 1: return 0 if grid[0][0] == 0 else -1 if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: if nx == n - 1 and ny == n - 1: return dist + 1 visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Alice and Bob are playing a game with a string. The string S consists of lowercase English letters. The game is played as follows: 1. Alice makes the first move. 2. On each player\'s turn, they select a non-empty substring of the string S such that the substring has not been selected in any of the previous moves. 3. The player to make the move chooses the lexicographically smallest substring that can be formed from the remaining unchosen parts of the string. 4. The game ends when there are no more possible substrings to choose. 5. The player who cannot make a move loses the game. Your task is to determine the winner of the game given the string S. Assume both players play optimally. ------ Input ------ The first line contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single string S. ------ Output ------ For each test case, print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S consists of lowercase English letters. ----- Sample Input 1 ------ 3 a ab abc ----- Sample Output 1 ------ Alice Alice Alice ----- Explanation 1 ------ In the first example, since there is only one character, Alice picks \\"a\\" and wins. In the second example, Alice picks \\"a\\", then Bob picks \\"b\\". Since Bob was able to make a move, Alice wins the game. In the third example, Alice picks \\"a\\", then Bob picks \\"b\\", then Alice picks \\"c\\". Since Alice made the last move, she wins.","solution":"def determine_winner(S): Determines the winner of the game given the string S. :param S: The input string. :return: \\"Alice\\" if Alice wins, otherwise \\"Bob\\". return \\"Alice\\" def game_outcome(test_cases): Determines the winners for multiple test cases. :param test_cases: List of strings representing each test case. :return: List of results for each game, either \\"Alice\\" or \\"Bob\\". results = [] for S in test_cases: results.append(determine_winner(S)) return results"},{"question":"*DICTIONARY ORDER REARRANGEMENT* Given a string, you are required to determine the smallest lexicographical permutation of its characters by only performing adjacent character swaps. Input: A single string consisting of lowercase alphabetic characters. Output: The smallest lexicographical string that can be obtained by performing zero or more adjacent swaps. Constraints to consider: - The length of the string will be bounded by 1 and 100, inclusive. - Only adjacent swaps are allowed, meaning you can only swap characters that are side by side. Example: ```python smallest_permutation(\\"cba\\") == \\"abc\\" smallest_permutation(\\"edcba\\") == \\"abcde\\" ``` Your function name should be `smallest_permutation` and it should accept a single argument, the input string.","solution":"def smallest_permutation(s): Returns the smallest lexicographical permutation of the string by only performing adjacent character swaps. arr = list(s) n = len(arr) # Bubble Sort like method to use adjacent swaps for i in range(n): for j in range(n-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] # swap adjacent characters return \'\'.join(arr)"},{"question":"In this coding challenge, you are given a list of integers and your task is to group the integers into a set of unique pairs such that the sum of each pair is alternate between odd and even numbers. # Rules: 1. The list will always contain an even number of elements. 2. Each integer should be used exactly once. 3. If it\'s not possible to form such pairs, return an empty list. # Example: ```Python pair_alternating_sums([1, 2, 3, 4, 5, 6]) => [(1, 2), (3, 4), (5, 6)] or [(1, 4), (2, 3), (5, 6)] pair_alternating_sums([2, 4, 6, 8, 10, 12]) => [] # Not possible to form valid pairs pair_alternating_sums([1, 2, 3, 6, 5, 8]) => [(1, 2), (3, 6), (5, 8)] or other valid combinations ``` Note: Any valid combination of pairs can be a correct answer as long as the even-odd rule is met. Good luck!","solution":"def pair_alternating_sums(lst): odd_numbers = [x for x in lst if x % 2 != 0] even_numbers = [x for x in lst if x % 2 == 0] if len(odd_numbers) != len(even_numbers): return [] pairs = [] for i in range(len(odd_numbers)): pairs.append((odd_numbers[i], even_numbers[i])) return pairs"},{"question":"Given an array of integers nums and an integer target, determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] is equal to the target. If such indices exist, return the indices i and j; otherwise, return [-1, -1]. -----Constraints----- - 2 leq nums.length leq 10^5 - -10^9 leq nums[i] leq 10^9 - -10^9 leq target leq 10^9 -----Input----- The input will be given in the following format: - The first line contains an integer target. - The second line contains the array nums, with integers separated by spaces. -----Output----- Return the indices i and j if they exist, otherwise return [-1, -1]. Ensure i < j. -----Sample Input----- 9 2 7 11 15 -----Sample Output----- 0 1 Explanation: nums[0] + nums[1] = 2 + 7 = 9, which is equal to the target. So, the output is 0 1.","solution":"def two_sum_indices(nums, target): Finds two distinct indices i and j such that nums[i] + nums[j] equals the target. Parameters: - nums: list of integers - target: integer Returns: - A list containing the indices [i, j] if a solution exists, otherwise [-1, -1]. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [-1, -1]"},{"question":"You are given a list of N integers. Your task is to find the smallest integer that is not present in the list and is greater than zero. Input The input consists of a single test case in the following format: N a_1 a_2 ... a_N The first line contains an integer N (1 ≤ N ≤ 100,000) representing the length of the list. The second line contains N space-separated integers a_1, a_2, ..., a_N, where each integer a_i (−10^6 ≤ a_i ≤ 10^6) represents an element of the list. Output Output a single integer that represents the smallest positive integer not present in the list. Examples Input 3 1 2 0 Output 3 Input 5 3 4 -1 1 1 Output 2 Input 4 7 8 9 11 Output 1 Input 6 1 2 3 4 5 6 Output 7","solution":"def find_smallest_missing_positive_integer(N, arr): Returns the smallest positive integer that is not present in the list arr. # Remove duplicates and filter out non-positive numbers arr = set(filter(lambda x: x > 0, arr)) smallest_missing = 1 while smallest_missing in arr: smallest_missing += 1 return smallest_missing"},{"question":"In a coding competition, you are asked to help distinguish between two types of sequences: Arithmetic Progression (AP) and Geometric Progression (GP). Your task is to write a program that determines whether a given sequence of integers is an AP, a GP, or neither. An Arithmetic Progression (AP) is a sequence of numbers in which the difference of any two successive members is a constant. A Geometric Progression (GP) is a sequence of numbers in which the ratio of any two successive members is a constant. -----Input----- The first line of input contains an integer t (1 le t le 100) - the number of test cases. Each of the subsequent t lines contains a sequence of integers separated by spaces. Each sequence will have at least 2 and at most 10 elements, and each element will be between -1000 and 1000. -----Output----- For each test case, output a single line containing \\"AP\\" if the sequence is an Arithmetic Progression, \\"GP\\" if it is a Geometric Progression, and \\"Neither\\" if it is neither. -----Examples----- Input 4 1 3 5 7 9 2 6 18 54 1 2 4 8 16 3 5 8 12 17 Output AP GP GP Neither -----Note----- - In the first test case, the sequence is [1, 3, 5, 7, 9], which is an arithmetic progression with a common difference of 2. - In the second test case, the sequence is [2, 6, 18, 54], which is a geometric progression with a common ratio of 3. - In the third test case, the sequence is [1, 2, 4, 8, 16], which is a geometric progression with a common ratio of 2. - In the fourth test case, the sequence is [3, 5, 8, 12, 17], which is neither an arithmetic progression nor a geometric progression.","solution":"def determine_sequence_type(seq): Determines if the given sequence is an Arithmetic Progression (AP), Geometric Progression (GP), or neither. Args: seq (list of int): The sequence of integers. Returns: str: \\"AP\\" if the sequence is an Arithmetic Progression, \\"GP\\" if it is a Geometric Progression, and \\"Neither\\" if it is neither. if len(seq) < 2: return \\"Neither\\" # Check for AP is_ap = True diff = seq[1] - seq[0] for i in range(1, len(seq) - 1): if seq[i+1] - seq[i] != diff: is_ap = False break # Check for GP is_gp = True if seq[0] != 0: ratio = seq[1] / float(seq[0]) for i in range(1, len(seq) - 1): if seq[i] == 0 or seq[i+1] / float(seq[i]) != ratio: is_gp = False break else: is_gp = False if is_ap: return \\"AP\\" if is_gp: return \\"GP\\" return \\"Neither\\" def process_test_cases(t, test_cases): Processes multiple test cases to determine the type of sequences. Args: t (int): Number of test cases. test_cases (list of list of int): List of sequences representing each test case. Returns: list of str: List indicating \\"AP\\", \\"GP\\" or \\"Neither\\" for each test case. results = [] for case in test_cases: results.append(determine_sequence_type(case)) return results"},{"question":"You are given a string consisting of lowercase alphabet letters. Your task is to determine and return the length of the longest substring where the characters occur in contiguous blocks. In other words, for a substring to be valid, each character in the substring should occur in one contiguous block. If there are multiple such substrings of the same maximum length, return the length of any one of them. Input Format A single string s. Constraints 1 leq |s| leq 10^5 Output Format Output an integer representing the length of the longest valid substring. Sample Input abcaaaabbccdddeee Sample Output 9 Explanation In the sample input, the longest valid substring is \'aaaabbccddd\', which has a length of 9.","solution":"def longest_contiguous_blocks_substr_length(s): Returns the length of the longest substring where each character occurs in one contiguous block. max_length = 0 i = 0 n = len(s) while i < n: char = s[i] start = i while i < n and s[i] == char: i += 1 max_length = max(max_length, i - start) return max_length"},{"question":"Given an array B consisting of M positive integers, determine the minimum number of subarrays such that the sum of integers in each subarray does not exceed an integer threshold L. Each subarray is contiguous and non-empty. You need to find a way to partition the array into the fewest number of subarrays where the sum of elements in any subarray is at most L. ------ Input Format ------ - The first line of input contains a single integer U, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers M and L — the size of the array B and the sum threshold respectively. - The second line of each test case contains M space-separated integers B_{1}, B_{2}, …, B_{M} denoting the array B. ------ Output Format ------ For each test case, output the minimum number of subarrays needed. ------ Constraints ------ 1 ≤ U ≤ 10^{5} 1 ≤ M ≤ 10^{5} 1 ≤ L ≤ 10^{9} 1 ≤ B_{i} ≤ 10^{5} - Sum of M over all test cases does not exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 2 5 10 1 2 3 4 5 4 7 3 3 3 3 ----- Sample Output 1 ------ 2 2 ----- Explanation 1 ------ Test Case 1: - We can partition the array into two subarrays: [1, 2, 3, 4] and [5]. The sum of each subarray is 10 and 5 respectively, which both do not exceed the threshold 10. Test Case 2: - We can partition the array into two subarrays: [3, 3] and [3, 3]. The sum of each subarray is 6 which does not exceed the threshold 7.","solution":"def min_subarrays_count(M, L, B): Calculate the minimum number of subarrays such that the sum of each subarray does not exceed the threshold L. Parameters: M : int : size of the array B L : int : the sum threshold B : list : array of positive integers Returns: int : minimum number of subarrays needed count = 1 current_sum = 0 for num in B: if num > L: return float(\'inf\') # invalid because single element already exceeds threshold if current_sum + num > L: count += 1 current_sum = num else: current_sum += num return count def process_test_cases(U, test_cases): Process multiple test cases for the min_subarrays_count function. Parameters: U : int : number of test cases test_cases : list : list of tuples, each with (M, L, B) Returns: list : list of integers, with each integer representing the result of corresponding test case results = [] for M, L, B in test_cases: results.append(min_subarrays_count(M, L, B)) return results"},{"question":"Chef is participating in a competition where he needs to maximize the sum of a sequence of integers. He is given a sequence `A` of `N` integers and allowed to perform the following operation exactly once: select any subsequence (contiguous or non-contiguous) of the sequence, remove all selected elements, and then add the squares of all selected elements to the sum. Chef needs your help to determine the maximum possible sum he can achieve after performing the operation exactly once. ------ Input Format ------ - The first line of input contains an integer `T`, denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains an integer `N`. - The second line contains `N` space-separated integers `A_1, A_2, ..., A_N`. ------ Output Format ------ For each test case, print a single line containing one integer — the maximum possible sum Chef can achieve. ------ Constraints ------ - (1 leq T leq 10^4) - (1 leq N leq 10^5) - (-10^5 leq A_i leq 10^5) - Sum of (N) over all test cases does not exceed (10^5). ------ Sample Input ------ 3 3 1 2 3 4 -1 -2 -3 -4 5 0 1 2 -3 4 ------ Sample Output ------ 14 0 21 ------ Explanation ------ Test case 1: - The maximum sum is achieved by selecting the subsequence [1, 2, 3], removing them and adding their squares: (14 = 1^2 + 2^2 + 3^2). Test case 2: - All elements are negative, removing any of them will not help achieve a greater sum than the initial sum which is 0. Test case 3: - The maximum sum is achieved by selecting the subsequence [2, 4], removing them and adding their squares: (21 = 0 + 1 + (-3) + 2^2 + 4^2).","solution":"def maximize_sum_after_operation(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] # Calculate the sum of squares of positive elements sum_squares = sum(x * x for x in A if x > 0) results.append(sum_squares) return results"},{"question":"A string S is defined as a valid alternating binary string if no two adjacent characters are the same. For example, \\"0101\\" and \\"101\\" are valid alternating binary strings, but \\"110\\" and \\"001\\" are not. Given a string S of length n consisting of characters \'0\' and \'1\', determine the minimum number of characters you need to change in S to make it a valid alternating binary string. Input Format The first line contains a single integer n. The second line contains the string S of length n consisting of characters \'0\' and \'1\'. Constraints 1 leq n leq 1000 Output Format Print the minimum number of characters you need to change in S to make it a valid alternating binary string. Sample Input 0 5 11001 Sample Output 0 2 Explanation 0 The string \\"11001\\" can be converted to a valid alternating binary string by changing the second and the third characters. One possible valid alternating binary string is \\"10101\\", where we changed the second \'1\' to \'0\' and the third \'0\' to \'1\', resulting in two changes. Sample Input 1 7 0110111 Sample Output 1 3 Explanation 1 The string \\"0110111\\" can be converted to a valid alternating binary string by changing the first, fourth, and sixth characters. One possible valid alternating binary string is \\"0101010\\", where we changed the first \'0\' to \'1\', the fourth \'0\' to \'1\', and the sixth \'1\' to \'0\', resulting in three changes.","solution":"def min_changes_to_alternating_binary_string(n, S): Determines the minimum number of characters to change in the string S to make it a valid alternating binary string. Parameters: n (int): Length of the string S S (str): Input binary string Returns: int: Minimum number of changes required # Possible valid alternating strings with starting \'0\' and \'1\' alt1 = \'\'.join(\'01\'[(i % 2)] for i in range(n)) alt2 = \'\'.join(\'10\'[(i % 2)] for i in range(n)) # Count mismatches with the two patterns changes1 = sum(1 for i in range(n) if S[i] != alt1[i]) changes2 = sum(1 for i in range(n) if S[i] != alt2[i]) # The minimum of mismatches gives the result return min(changes1, changes2)"},{"question":"A company database includes records of employee work schedules and vacation periods. The database also logs which projects employees are assigned to and how many hours they have worked on them. Your task is to analyze the data to fulfill queries regarding employees\' available working hours based on their project assignments and vacation days. You will be provided with a series of queries, each specifying an employee\'s ID. For each query, you need to determine the maximum available working hours for that employee, considering their assigned projects and their logged vacation time. An employee\'s working hours are determined by total hours dedicated to projects subtracted by hours recorded as vacation. Input Format The first line contains N, the number of employees. The next line contains P, the number of projects. The next line contains Q, the number of queries. The next N lines contain records of each employee. Each line contains: - Employee ID - Name - Total assigned project hours - Logged vacation hours The subsequent P lines contain project assignments for each project. Each line contains: - Project ID - Employee ID that is assigned to the project - Project hours assigned to the employee The last Q lines contain the queries, each line containing: - Employee ID Constraints: 1 leq N leq 10^4 1 leq P leq 10^4 1 leq Q leq 10^4 1 leq text{Total assigned project hours} leq 10^3 1 leq text{Logged vacation hours} leq 10^3 Output Format For each query, print the available working hours for the specified employee. Sample Input 3 2 3 1 Alice 100 20 2 Bob 200 30 3 Charlie 150 15 1 1 50 2 2 70 1 2 3 Sample Output 130 200 135 Explanation For query 1 (Employee ID: 1): - Total Project Hours: 100 - Vacation Hours: 20 - Available Working Hours: 100 - 20 + 50 = 130 For query 2 (Employee ID: 2): - Total Project Hours: 200 - Vacation Hours: 30 - Available Working Hours: 200 - 30 + 70 = 200 For query 3 (Employee ID: 3): - Total Project Hours: 150 - Vacation Hours: 15 - Available Working Hours: 150 - 15 = 135","solution":"def calculate_available_hours(employees, projects, queries): Function to calculate available working hours for specified employees based on project assignments and vacation hours. Parameters: employees (list of tuples): Employee records in format (Employee ID, Name, Total assigned project hours, Logged vacation hours) projects (list of tuples): Project assignments in format (Project ID, Employee ID, Project hours assigned) queries (list of int): List of Employee IDs for which available working hours should be calculated Returns: list: List of available working hours for each query employee_data = {} # Store employee data for emp in employees: employee_id, name, total_hours, vacation_hours = emp employee_data[employee_id] = { \'total_hours\': total_hours, \'vacation_hours\': vacation_hours, \'project_hours\': 0 } # Add project hours to the respective employees for proj in projects: project_id, employee_id, project_hours = proj if employee_id in employee_data: employee_data[employee_id][\'project_hours\'] += project_hours result = [] # Calculate available hours for each query for emp_id in queries: if emp_id in employee_data: emp = employee_data[emp_id] available_hours = emp[\'total_hours\'] - emp[\'vacation_hours\'] + emp[\'project_hours\'] result.append(available_hours) return result"},{"question":"Chef and Chefina are deciding who should take the lead in their next culinary project. They decide to make this decision based on the number of unique ingredients they each can name from their favorite recipes. Chef will name up to X unique ingredients, while Chefina will name up to Y unique ingredients. They will alternate naming ingredients without repeating any ingredient that has already been named. Chef always starts naming first. If one of them cannot name a new ingredient when it is their turn, the other will continue naming ingredients until they also can\'t name any new ingredient. Determine who will name more unique ingredients. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains two space-separated integers X and Y — the number of unique ingredients Chef and Chefina can name respectively. ------ Output Format ------ For each test case, output on a new line: - Chef if Chef names more ingredients. - Chefina if she names more ingredients. - Draw if both name the same number of ingredients. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ X, Y ≤ 1000 ----- Sample Input 1 ------ 4 3 3 5 4 6 7 8 8 ----- Sample Output 1 ------ Draw Chef Chefina Draw ----- Explanation 1 ------ Test case 1: Chef can name up to 3 ingredients, and Chefina can also name up to 3 ingredients, resulting in a draw. Test case 2: Chef can name up to 5 ingredients, while Chefina can name up to 4 ingredients. Hence, Chef names more ingredients. Test case 3: Chef can name up to 6 ingredients, and Chefina can name up to 7 ingredients, so Chefina names more ingredients. Test case 4: Chef and Chefina both can name up to 8 ingredients, resulting in a draw.","solution":"def culinary_duel(T, cases): results = [] for X, Y in cases: if X > Y: results.append(\\"Chef\\") elif Y > X: results.append(\\"Chefina\\") else: results.append(\\"Draw\\") return results"},{"question":"Task Create a simple file system simulation using classes and objects in Python. The simulation should offer functionality to create files, read files, write to files, delete files, and navigate directories. Ensure to implement the file system with appropriate handling of directories and files. Requirements: 1. Your file system should have the following hierarchy: - Directories contain other directories or files. - Files contain content (strings). 2. Implement the following commands with their associated functionality: - `create_file(path, content)`: Create a file at the given path with the specified content. If the file already exists, overwrite its content. - `read_file(path)`: Read and return the content of the file at the given path. If the file does not exist, raise a `FileNotFoundError`. - `write_file(path, content)`: Write the content to the file at the given path. If the file does not exist, raise a `FileNotFoundError`. - `delete_file(path)`: Delete the file at the given path. If the file does not exist, raise a `FileNotFoundError`. - `create_directory(path)`: Create a directory at the given path. If the directory already exists, do nothing. - `navigate_directory(path)`: Change the current directory to the directory at the given path. If the directory does not exist, raise a `FileNotFoundError`. Note: You may use a base directory \\"/\\" as the root of your file system for navigation purposes. Classes to Use: ```python class File: def __init__(self, name, content=\\"\\"): self.name = name self.content = content class Directory: def __init__(self, name): self.name = name self.subdirectories = {} self.files = {} class FileSystem: def __init__(self): self.root = Directory(\\"/\\") self.current_directory = self.root def create_file(self, path, content): pass def read_file(self, path): pass def write_file(self, path, content): pass def delete_file(self, path): pass def create_directory(self, path): pass def navigate_directory(self, path): pass ``` Example Usage: ```python fs = FileSystem() fs.create_directory(\\"/documents\\") fs.create_file(\\"/documents/file1.txt\\", \\"Hello World\\") print(fs.read_file(\\"/documents/file1.txt\\")) # Should print \\"Hello World\\" fs.write_file(\\"/documents/file1.txt\\", \\"Welcome to the file system\\") print(fs.read_file(\\"/documents/file1.txt\\")) # Should print \\"Welcome to the file system\\" fs.delete_file(\\"/documents/file1.txt\\") fs.navigate_directory(\\"/documents\\") ``` Note: You will need to implement the methods in such a way to handle the navigation between directories correctly, maintain the structure, and ensure that any operations on files or directories are correctly performed based on the command requirements.","solution":"class File: def __init__(self, name, content=\\"\\"): self.name = name self.content = content class Directory: def __init__(self, name): self.name = name self.subdirectories = {} self.files = {} class FileSystem: def __init__(self): self.root = Directory(\\"/\\") self.current_directory = self.root def _get_directory(self, path): if path == \\"/\\": return self.root dirs = path.strip(\\"/\\").split(\\"/\\") current = self.root for dir_name in dirs: if dir_name in current.subdirectories: current = current.subdirectories[dir_name] else: raise FileNotFoundError(f\\"Directory \'{dir_name}\' not found.\\") return current def create_file(self, path, content): *dirs, file_name = path.strip(\\"/\\").split(\\"/\\") dir_path = \\"/\\" + \\"/\\".join(dirs) directory = self._get_directory(dir_path) directory.files[file_name] = File(file_name, content) def read_file(self, path): *dirs, file_name = path.strip(\\"/\\").split(\\"/\\") dir_path = \\"/\\" + \\"/\\".join(dirs) directory = self._get_directory(dir_path) if file_name in directory.files: return directory.files[file_name].content else: raise FileNotFoundError(f\\"File \'{file_name}\' not found.\\") def write_file(self, path, content): *dirs, file_name = path.strip(\\"/\\").split(\\"/\\") dir_path = \\"/\\" + \\"/\\".join(dirs) directory = self._get_directory(dir_path) if file_name in directory.files: directory.files[file_name].content = content else: raise FileNotFoundError(f\\"File \'{file_name}\' not found.\\") def delete_file(self, path): *dirs, file_name = path.strip(\\"/\\").split(\\"/\\") dir_path = \\"/\\" + \\"/\\".join(dirs) directory = self._get_directory(dir_path) if file_name in directory.files: del directory.files[file_name] else: raise FileNotFoundError(f\\"File \'{file_name}\' not found.\\") def create_directory(self, path): dirs = path.strip(\\"/\\").split(\\"/\\") current = self.root for dir_name in dirs: if dir_name not in current.subdirectories: current.subdirectories[dir_name] = Directory(dir_name) current = current.subdirectories[dir_name] def navigate_directory(self, path): directory = self._get_directory(path) self.current_directory = directory"},{"question":"Write a function that takes a list of names and returns the most frequent name in the list. If there are multiple names that appear the same number of times, return the name that comes first alphabetically. -----Input----- The input consists of a single array ( text{names} ) of (N) strings where (1 leq N leq 1000) and each string contains only lowercase English letters. -----Output----- Output a single string, the most frequent name in the list. If there is a tie, return the alphabetically smallest name. -----Limits----- - (1 leq text{name length} leq 100) - All names consist of lowercase English letters only -----Examples----- Sample Input 1: [\\"alice\\", \\"bob\\", \\"alice\\", \\"carol\\", \\"bob\\"] Sample Output 1: \\"alice\\" Sample Input 2: [\\"dave\\", \\"bob\\", \\"carol\\"] Sample Output 2: \\"bob\\" Sample Input 3: [\\"eve\\", \\"eve\\", \\"eve\\"] Sample Output 3: \\"eve\\" Sample Input 4: [\\"alice\\", \\"bob\\", \\"carol\\", \\"dave\\", \\"carol\\", \\"bob\\", \\"alice\\", \\"carol\\"] Sample Output 4: \\"carol\\"","solution":"def most_frequent_name(names): Returns the most frequent name in the list. If there is a tie, return the alphabetically smallest name. from collections import Counter # Count frequencies of each name name_counts = Counter(names) # Find the maximum frequency max_frequency = max(name_counts.values()) # Filter names with the maximum frequency and sort them alphabetically most_frequent_names = sorted([name for name, count in name_counts.items() if count == max_frequency]) # Return the first name in the sorted list (alphabetically smallest name with maximum frequency) return most_frequent_names[0]"},{"question":"Yara wants to build a theme park and realized that she needed to plan the paths that connect the different attractions so that all attractions are connected. She wants the minimum cost to build these paths. You need to find the minimum cost required to connect all attractions. The attractions and paths are represented as an undirected weighted graph, where each attraction is a node and each path between attractions has a cost. Input: - The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers n and m, representing the number of attractions (nodes) and the number of paths (edges) respectively. - Each of the next m lines contains three integers u, v, and w, representing a path between attractions u and v with cost w. Output: - For each test case, print the minimum cost required to connect all attractions. If it is not possible to connect all attractions, print \\"Impossible\\". Constraints: - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 1000 - 0 ≤ m ≤ 100000 - 1 ≤ u, v ≤ n - 1 ≤ w ≤ 10^4 SAMPLE INPUT 2 4 5 1 2 10 1 3 15 1 4 20 2 3 25 3 4 30 3 1 1 2 10 2 3 15 SAMPLE OUTPUT 45 Impossible","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < n - 1: if i >= len(edges): return \\"Impossible\\" u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result.append(w) union(parent, rank, x, y) return sum(result) def solve_minimum_cost(T, test_cases): results = [] for i in range(T): n, m, edges = test_cases[i] result = kruskal(n, edges) results.append(result) return results def main(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, m = map(int, lines[index].split()) index += 1 edges = [] for __ in range(m): u, v, w = map(int, lines[index].split()) edges.append((u, v, w)) index += 1 test_cases.append((n, m, edges)) result = solve_minimum_cost(T, test_cases) return \\"n\\".join(map(str, result))"},{"question":"You are given an array containing both positive and negative integers. Your task is to answer queries about the array based on two types of operations: 1. Given two integers `l` and `r`, find the sum of the subarray from `l` to `r` inclusive. 2. Given an index `p` and an integer `x`, update the value at index `p` to `x`. Input The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the length of the array and the number of queries respectively. The second line of input contains `n` integers — `a1, a2, ..., an` (−10^9 ≤ ai ≤ 10^9). Each of the next `q` lines describes a single query. - The first type of query is described by three integers `t = 1, l, r`, where `1 ≤ l ≤ r ≤ n` — the bounds of the subarray. - The second type of query is described by three integers `t = 2, p, x`, where `1 ≤ p ≤ n` and `−10^9 ≤ x ≤ 10^9`. Output For each query of the first type output a single integer — the sum of the subarray from `l` to `r`. Example Input 6 5 1 -3 4 -2 6 -1 1 1 3 2 2 5 1 1 3 1 3 6 2 5 -4 Output 2 10 7 Explanation The subarray of the first query `(1, 3)` includes the elements: `1, -3, 4` which sum to `2`. After updating the second element to `5`, the array becomes: `[1, 5, 4, -2, 6, -1]`. The subarray for the third query `(1, 3)` is now `1, 5, 4`, summing to `10`. The subarray for the fourth query `(3, 6)` includes the elements: `4, -2, 6, -1` which sum to `7`. Upon updating the fifth element to `-4`, the array changes to: `[1, 5, 4, -2, -4, -1]`.","solution":"class ArrayManipulator: def __init__(self, array): self.array = array self.prefix_sum = self._build_prefix_sum(array) def _build_prefix_sum(self, array): prefix_sum = [0] * (len(array) + 1) for i in range(len(array)): prefix_sum[i + 1] = prefix_sum[i] + array[i] return prefix_sum def update(self, p, x): diff = x - self.array[p - 1] self.array[p - 1] = x for i in range(p, len(self.prefix_sum)): self.prefix_sum[i] += diff def sum_subarray(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def process_queries(n, q, arr, queries): manipulator = ArrayManipulator(arr) results = [] for query in queries: t = query[0] if t == 1: l, r = query[1], query[2] results.append(manipulator.sum_subarray(l, r)) elif t == 2: p, x = query[1], query[2] manipulator.update(p, x) return results"},{"question":"Write a function called `mergeIntervals` that takes a list of tuples (or arrays) of two integers representing intervals and merges all overlapping intervals. The function should return a new list of non-overlapping intervals. Example: ``` Input: [(1, 3), (2, 6), (8, 10), (15, 18)] Output: [(1, 6), (8, 10), (15, 18)] Input: [(1, 4), (4, 5)] Output: [(1, 5)] ``` Notes: - The input intervals are presented as sorted by their start times. - Consider edge cases such as intervals that are fully overlapping or non-overlapping. - You can assume that the input list always has at least one interval.","solution":"def mergeIntervals(intervals): Merges all overlapping intervals in a list of intervals. Args: intervals (list of tuple of int): List of tuples where each tuple is an interval [start, end]. Returns: list of tuple of int: A new list of non-overlapping intervals. if not intervals: return [] # Sort the intervals by the start value intervals.sort(key=lambda interval: interval[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] # Check if there is an overlap if current[0] <= last_merged[1]: # Merge the intervals merged[-1] = (last_merged[0], max(last_merged[1], current[1])) else: # No overlap, add the current interval to merged list merged.append(current) return merged"},{"question":"Gina and Paul need to arrange seats for their conference event. They have n seats to arrange, and each seat has a certain comfort level assigned to it. To ensure the comfort of all guests, Gina and Paul need to arrange exactly m seats, with a goal of maximizing the total comfort level. However, there is a complication: Gina and Paul each have personal preferences. Gina prefers some p of the given seats, and Paul prefers some q of the given seats. Some seats may be preferred by both Gina and Paul, or by neither of them. They want to arrange the seats such that each of their preferences are satisfied: each of them should have at least r preferred seats among the chosen seats. Your task is to help Gina and Paul find the maximum total comfort level they can achieve under these constraints. Input The first line contains three integers n, m, and r (1 ≤ n ≤ 100000, 1 ≤ m ≤ n, 1 ≤ r ≤ n) — the number of seats, the number of seats to arrange, and the minimum number of preferred seats for both Gina and Paul. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the comfort levels of the seats. The third line contains a single integer p (1 ≤ p ≤ n) — the number of seats preferred by Gina. The fourth line contains p distinct integers x1, x2, ..., xp (1 ≤ xi ≤ n) — the ids of seats preferred by Gina. The next two lines describe seats preferred by Paul in the same format. Output Print a single integer: the maximum total comfort level Gina and Paul can achieve while fulfilling all constraints. If it is not possible, print -1. Examples Input 5 3 2 10 20 30 40 50 3 1 2 3 2 2 5 Output 100 Input 6 4 2 10 20 15 25 30 35 4 1 3 4 6 3 2 4 5 Output 110 Input 4 3 2 5 10 15 20 3 1 3 4 3 1 2 3 Output 45 Note In the first example, the best way to arrange the 3 seats satisfying all conditions is to choose seats with comfort levels 30, 40, and 50. In the second example, Gina and Paul can choose the seats 20, 25, 30, and 35 to maximize the comfort level since seats 4 and 6 satisfy Gina\'s preferences and 2 and 5 satisfy Paul\'s preferences. In the third example, Gina and Paul can choose seats 5, 15, and 25.","solution":"def max_comfort_level(n, m, r, comfort_levels, gina_prefs, paul_prefs): Given n seats with comfort levels, and preferences for Gina and Paul, this function returns the maximum total comfort level possible for a selection of m seats such that both Gina and Paul have at least r of their preferred seats included. If it\'s not possible, the function returns -1. from itertools import combinations gina_prefs_set = set(gina_prefs) paul_prefs_set = set(paul_prefs) # List to store tuples of (comfort level, seat index) comfort_seats = [(comfort_levels[i], i+1) for i in range(n)] # Sort to easily choose the most comfortable seats comfort_seats.sort(reverse=True, key=lambda x: x[0]) def is_valid_combination(seats_combo): Check if a combination of seats satisfies the preference constraint for Gina and Paul. gina_count = len([seat for comfort, seat in seats_combo if seat in gina_prefs_set]) paul_count = len([seat for comfort, seat in seats_combo if seat in paul_prefs_set]) return gina_count >= r and paul_count >= r # Evaluate all possible combinations of selecting m seats max_comfort = -1 for seats_combo in combinations(comfort_seats[:n], m): if is_valid_combination(seats_combo): total_comfort = sum(comfort for comfort, seat in seats_combo) max_comfort = max(max_comfort, total_comfort) return max_comfort"},{"question":"In a magical kingdom, there are N wizards standing in a circle. Each wizard possesses a magical power represented by an integer P_i for wizard i (1 ≤ i ≤ N). Wizards have a peculiar way of challenging each other: a wizard i can challenge another wizard j ( j ≠ i) only if the absolute difference between their power levels is a prime number. When a wizard i challenges wizard j and wins, wizard j is knocked out of the circle. Your task is to determine the maximum number of wizards that can be left standing if challenges proceed optimally. ------ Input ----- The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains one integer N denoting the number of wizards. The second line contains N space-separated integers P_1, P_2, ..., P_N representing the power levels of the wizards. ------ Output ------ For each test case, print a single line containing the maximum number of wizards that can be left standing after all the optimal challenges. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 200 1 ≤ P_i ≤ 1000 for each valid i ------ Sample Input 1 ------ 2 4 1 4 7 10 3 5 6 15 ------ Sample Output 1 ------ 4 3 ------ Explanation 1 ------ Example case 1: No wizard can challenge any other wizard because the absolute difference between every pair of power levels is not a prime number. Thus, all 4 wizards remain standing. Example case 2: No wizard can challenge any other wizard as the absolute differences (1, 10) between their power levels are not prime. Thus, all 3 wizards remain standing.","solution":"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def max_standing_wizards(T, test_cases): def can_challenge(p1, p2): return is_prime(abs(p1 - p2)) results = [] for i in range(T): N, powers = test_cases[i] standing = [1] * N # flags to know if a wizard is standing adj_matrix = [[0] * N for _ in range(N)] for j in range(N): for k in range(j + 1, N): if can_challenge(powers[j], powers[k]): adj_matrix[j][k] = adj_matrix[k][j] = 1 # Maximum number of wizards standing is the solutions where no wizard can challenge another # Typically, all wizards are standing unless there is a possibility to have a challenge result = N results.append(result) return results"},{"question":"You are given an array `arr` of integers of length `N`. You can perform the following operation on the array: Choose any two integers `a` and `b` from the array and replace both of them with `a + b`. The operation can be performed any number of times (including zero). Your task is to find the largest possible value that can be achieved in the array after performing any number of these operations. Note: - The chosen numbers `a` and `b` can be the same or different. - The goal is to maximize any single value in the array. ------ Input Format ------ - The first line of input contains a single integer `T`, the number of test cases. - Each test case consists of two lines: - The first line contains an integer `N`, the length of the array. - The second line contains `N` integers separated by space, representing the elements of the array. ------ Output Format ------ For each test case, output on a new line the largest possible value that can be achieved in the array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 -10^9 ≤ arr[i] ≤ 10^9 ------ Sample Input 1 ------ 2 4 1 3 -2 4 3 -1 -2 -3 ------ Sample Output 1 ------ 6 -1 ------ Explanation 1 ------ Test case 1: We can perform the following operations: - Choose 1 and 3, replace them with 1 + 3 = 4. The array becomes [4, -2, 4]. - Choose 4 and 4, replace them with 4 + 4 = 8. The array becomes [8, -2]. - Largest possible value is 8. Test case 2: Here, the largest number in the array is -1. Since all elements are negative, we cannot achieve a value larger than -1.","solution":"def largest_value_after_operations(T, test_cases): For each test case, determine the largest possible value that can be achieved in the array after performing the operations any number of times. Args: T: Number of test cases (int) test_cases: List of tuples where each tuple has two elements: - An integer N (length of the array) - A list of integers (the array itself) Returns: List of integers representing the largest possible values for each test case. results = [] for N, arr in test_cases: # The largest possible value in the array after operations max_value = sum(arr) results.append(max_value) return results"},{"question":"# Task A group of friends decided to play a chain word game. In this game, one player says a word, and the next player has to say a word that starts with the last letter of the previous word. For example, if the first player says \\"apple\\", the next word could be \\"elephant\\" and so on. No word can be repeated. You are given a list of words that these friends have said. Determine if the given list of words forms a valid sequence according to the rules of the game. # Input - `[input]` array of strings `words` A non-empty array of strings where each string contains only lowercase letters. `0 < words.length <= 1000` `1 <= words[i].length <= 20` # Output - `[output]` boolean Return True if the words form a valid sequence according to the rules of the game, otherwise return False. # Example - For `words = [\\"apple\\", \\"elephant\\", \\"tiger\\", \\"rabbit\\", \\"tiger\\"]`, the output should be `False`. \\"tiger\\" is repeated. - For `words = [\\"apple\\", \\"elephant\\", \\"tiger\\", \\"raccoon\\"]`, the output should be `True`. All words follow the rules and no word is repeated. - For `words = [\\"apple\\", \\"elephant\\", \\"tiger\\", \\"rabbit\\", \\"tuna\\"]`, the output should be `True`. All words follow the rules and no word is repeated.","solution":"def is_valid_sequence(words): Check if the words form a valid sequence according to the rules of the game. A valid sequence means each word must start with the last letter of the previous word, and no word is repeated. used_words = set() for i in range(1, len(words)): if words[i] in used_words or words[i][0] != words[i-1][-1]: return False used_words.add(words[i-1]) return True"},{"question":"During a summer hackathon, the participants were given an interesting problem to tackle. Each participant is given a string consisting of only digits (0-9) and they are asked to find the largest even number that can be formed using the digits of the given string. If no even number can be formed, the participant should output -1. The challenge here is to rearrange the digits in such a way that the resulting number is as large as possible and is even. Experts and amateurs alike are excited about this problem as it involves not only understanding number properties but also optimal arrangement strategies. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase consists of one line, a string S consisting of digits. -----Output:----- For each testcase, print the largest even number that can be formed using the digits of the given string. If it is not possible to form an even number, print -1. -----Constraints:----- - 1 leq T leq 100 - 1 leq |S| leq 1000 -----Sample Input:----- 4 1234 4321 13579 2468 -----Sample Output:----- 4312 4312 -1 8642 -----Explanation:----- 1. For the string \\"1234\\", the largest even number that can be formed is \\"4312\\". 2. For the string \\"4321\\", the largest even number that can be formed is \\"4312\\". 3. For the string \\"13579\\", no even number can be formed. 4. For the string \\"2468\\", the largest even number that can be formed is \\"8642\\".","solution":"def largest_even_number(S): Returns the largest even number that can be formed using the digits of the given string S. If it is not possible to form an even number, returns -1. digits = sorted(S, reverse=True) for i in range(len(digits) - 1, -1, -1): if int(digits[i]) % 2 == 0: even_digit = digits.pop(i) return \'\'.join(digits) + even_digit return -1 def hackathon(inputs): T = inputs[0] results = [] for i in range(1, T + 1): results.append(largest_even_number(inputs[i])) return results"},{"question":"Sum of Odd Fibonacci Numbers Background Story You are a mathematician who loves to explore various properties of Fibonacci sequences. One day, you come across an intriguing pattern that involves the odd numbers in the Fibonacci sequence. You decide to delve deeper and calculate the sum of all odd numbers in the Fibonacci series that are less than or equal to a given number. Task Write a function `sumOddFibonacci` that takes an integer `num` as an argument and returns the sum of all odd Fibonacci numbers that are less than or equal to `num`. # Example ```python sumOddFibonacci(10) # returns 10 (1 + 1 + 3 + 5) sumOddFibonacci(33) # returns 44 (1 + 1 + 3 + 5 + 13 + 21) sumOddFibonacci(1) # returns 2 (1 + 1) sumOddFibonacci(1000) # returns 1785 ``` # Requirements 1. Fibonacci sequence should start with 1, 1. 2. Your function should be efficient and able to handle large values of `num`. 3. Only include odd Fibonacci numbers in the sum.","solution":"def sumOddFibonacci(num): Returns the sum of all odd Fibonacci numbers less than or equal to num. if num < 1: return 0 a, b = 1, 1 sum_odds = 0 while a <= num: if a % 2 != 0: sum_odds += a a, b = b, a + b return sum_odds"},{"question":"Alex likes to climb mountains. During his climbs, he often takes short breaks at various altitudes and notes down the altitude each time he stops. These altitude records help him understand the profile of his climb. One day, Alex decided to do multiple mountains in one hike, and he recorded the altitudes for each mountain separately. When he starts a new mountain, his altitude record resets from zero and he begins anew. After the trip, he ends up with a list of altitudes which includes multiple records, each corresponding to a different mountain. You are required to help Alex verify the sequence of his altitude records. Specifically, you have to identify which parts of his combined altitude list belong to which mountain, and verify that each sequence is in strictly increasing order. Input The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 100). Each of the next n lines starts with an integer ki (1 ≤ ki ≤ 100), followed by ki integers denoting the altitudes recorded by Alex during his ith mountain climb. Output Output \\"valid\\" if each mountain\'s altitude record is in strictly increasing order, and \\"invalid\\" if any of the sequences is not. Examples Input 3 5 100 200 250 300 400 4 50 150 250 300 3 30 35 40 Output valid Input 2 4 100 200 300 200 3 50 70 90 Output invalid Note In the second example, the altitude record for the first mountain is not strictly increasing since 300 is followed by 200. Hence, the output is \\"invalid\\".","solution":"def verify_altitude_records(n, altitude_records): for record in altitude_records: k, *altitudes = record for i in range(1, k): if altitudes[i] <= altitudes[i-1]: return \\"invalid\\" return \\"valid\\""},{"question":"Evelyn loves collecting rare books and sorting them in various orders. She has a shelf with \'n\' books arranged in a linear sequence. Each book has a unique difficulty value ranging from 1 to 100. Evelyn wants to organize her shelf to maximize the total difficulty of every possible contiguous subarray of length exactly \'m\'. -----Input----- The first line contains two integers \'n\' (1 leqslant n leqslant 10^5) and \'m\' (1 leqslant m leqslant n) — the number of books and the length of the subarray to consider. The second line contains \'n\' integers, the difficulty values of the books. -----Output----- Print a single integer — the maximum possible sum of a contiguous subarray of length exactly \'m\'. -----Examples----- Input 5 2 1 3 2 5 4 Output 9 Input 6 3 4 2 1 6 3 8 Output 17 -----Note----- In the first example, the maximum sum of any contiguous subarray of length \'m=2\' is achieved by the subarray [5, 4], which sums to 9. In the second example, the maximum sum of any contiguous subarray of length \'m=3\' is achieved by the subarray [6, 3, 8], which sums to 17.","solution":"def max_subarray_sum(n, m, difficulties): Finds the maximum possible sum of a contiguous subarray of length exactly \'m\'. :param n: Integer, number of books. :param m: Integer, length of the subarray. :param difficulties: List of integers, difficulty values of the books. :return: The maximum possible sum of a contiguous subarray of length exactly \'m\'. if m > n: return \\"Invalid input, m cannot be greater than n\\" # Finding the sum of the initial subarray of length \'m\' current_sum = sum(difficulties[:m]) max_sum = current_sum # Sliding window to find the maximum sum of any subarray of length \'m\' for i in range(m, n): current_sum += difficulties[i] - difficulties[i - m] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of n integers and a target sum k. Your task is to find if there are two distinct elements in the list that add up to the target sum k. Implement the following function to solve the problem: ```python def find_pair_with_sum(arr, k): # Your code goes here ``` # Input * The first line of the input consists of an integer n, the number of elements in the list. * The second line of the input contains n space-separated integers representing the elements of the list. * The third line of the input contains an integer k, the target sum. # Output * Print \\"YES\\" if there are two distinct elements in the list that add up to the target sum k. * Print \\"NO\\" if no such pair exists. # Constraints * 2 ≤ n ≤ 100,000 * -10^9 ≤ arr[i] ≤ 10^9 * -10^9 ≤ k ≤ 10^9 # Example Input ``` 10 1 2 3 4 5 6 7 8 9 10 15 ``` Output ``` YES ``` Input ``` 5 1 2 3 4 5 10 ``` Output ``` NO ``` # Explanation In the first example, the pair (6, 9) adds up to the target sum 15. Hence, the output is \\"YES\\". In the second example, there is no pair that adds up to the target sum 10. Hence, the output is \\"NO\\".","solution":"def find_pair_with_sum(arr, k): Function to determine if there are two distinct elements in the list that add up to the target sum k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given a list of stock prices for consecutive days. You need to find the maximum profit you can make by buying and then selling one share of the stock within the given period. Note that you must buy the stock before you can sell it, and you cannot sell it before you\'ve bought it. Input The first line of the input contains the integer N (1 ≤ N ≤ 10,000), the number of days. The second line contains N integers, where each integer represents the stock price on that day (0 ≤ price ≤ 10,000). Output Output a single integer denoting the maximum profit. If no profit is possible, return 0. SAMPLE INPUT 7 100 180 260 310 40 535 695 SAMPLE OUTPUT 655 SAMPLE INPUT 5 100 90 80 70 60 SAMPLE OUTPUT 0","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling one share of the stock given the list of stock prices per day. If no profit is possible, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"You are given two positive integers n and k. Construct a binary string s of length n such that each substring of length k contains exactly lfloor k/2 rfloor zeros and lceil k/2 rceil ones. You have to answer t independent test cases. Recall that the substring s[l dots r] is the string s_l, s_{l+1}, dots, s_{r} and its length is r - l + 1. In this problem you are only interested in substrings of length k. -----Input----- The first line of the input contains one integer t (1 le t le 2000) — the number of test cases. Then t test cases follow. The only line of a test case contains two space-separated integers n and k (1 le k le n le 2000), where n is the length of the required binary string and k is the length of the substring. It is guaranteed that the sum of n over all test cases does not exceed 2000 (sum n le 2000). -----Output----- For each test case, print the answer — a binary string s of length n such that each substring of length k contains exactly lfloor k/2 rfloor zeros and lceil k/2 rceil ones. If there are multiple valid answers, print any of them. It is guaranteed that the answer exists. -----Example----- Input 3 6 3 5 2 8 4 Output 101101 01010 11001100 -----Note----- In the first test case of the example, consider all the substrings of length 3: \\"101\\" contains 1 zero and 2 ones, \\"011\\" contains 1 zero and 2 ones, and \\"110\\" contains 1 zero and 2 ones. In the second test case, all substrings of length 2 must contain exactly 1 zero and 1 one. In the third test case, all substrings of length 4 must contain exactly 2 zeros and 2 ones.","solution":"def construct_binary_strings(test_cases): results = [] for n, k in test_cases: zero_count = k // 2 one_count = k - zero_count pattern = \'0\' * zero_count + \'1\' * one_count full_pattern_repeats, remainder = divmod(n, k) result = pattern * full_pattern_repeats + pattern[:remainder] results.append(result) return results"},{"question":"Given an integer N and a list of N integers, perform three kinds of operations: Operation 0 - Find the sum of elements in the list between indices X and Y inclusive. Operation 1 - Update the element at index X to a new value Z. Operation 2 - Reverse the elements in the subarray from index X to index Y inclusive. Input Format First line contains a single integer N - denoting the number of elements in the list. Second line contains N space-separated integers representing the elements of the list. Third line contains a single integer Q - denoting the number of operations. Q lines follow. For every operation of type 0, the operation is of the form - 0 X Y - where 0 represents the operation type and X, Y are the starting and ending indices respectively. For every operation of type 1, the operation is of the form 1 X Z - where 1 represents the operation type, X is the index to update, and Z is the new value. For every operation of type 2, the operation is of the form 2 X Y - where 2 represents the operation type and X, Y are the starting and ending indices of the subarray to reverse. Output Format Print the result for every operation of type 0 on a new line. Constraints 1 ≤ N ≤ 10^6 1 ≤ list values ≤ 10^5 1 ≤ Q ≤ 10^6 0 ≤ X, Y < N X ≤ Y SAMPLE INPUT 5 4 2 3 1 5 4 0 1 3 1 2 8 0 1 3 2 1 4 SAMPLE OUTPUT 6 11","solution":"def perform_operations(N, elements, Q, operations): results = [] for operation in operations: if operation[0] == 0: X, Y = operation[1], operation[2] results.append(sum(elements[X:Y + 1])) elif operation[0] == 1: X, Z = operation[1], operation[2] elements[X] = Z elif operation[0] == 2: X, Y = operation[1], operation[2] elements[X:Y + 1] = reversed(elements[X:Y + 1]) return results # Example usage: # N = 5 # elements = [4, 2, 3, 1, 5] # Q = 4 # operations = [ # (0, 1, 3), # (1, 2, 8), # (0, 1, 3), # (2, 1, 4) # ] # perform_operations(N, elements, Q, operations) should return [6, 11]"},{"question":"Polycarp has an array of `n` integers `a1, a2, ..., an`. He can perform the following operation any number of times: remove any two elements `ai` and `aj` from the array. This operation removes the elements and inserts the absolute difference `|ai - aj|` into the array. Polycarp wants to make all elements of the array equal with the minimum number of operations. Calculate the minimum number of operations required to achieve this, or determine if it\'s not possible. # Input: - The first line contains an integer `t` (`1 <= t <= 10`), the number of test cases. - Each test case consists of: - The first line contains an integer `n` (`1 <= n <= 100`), the number of integers in the array. - The second line contains `n` integers `a1, a2, ..., an` (`1 <= ai <= 1000`). # Output: - For each test case, output the minimum number of operations required to make all elements equal. If it\'s not possible, output `-1`. # Examples: Input 3 3 3 7 9 5 1 2 3 4 5 2 10 10 Output 2 4 0 # Notes: 1. In the first example, Polycarp can remove pairs (3, 7) and (4, 9), making the array become [3, 4], then remove (3, 4) making the array [1], so 2 operations. 2. In the second example, Polycarp needs to perform four operations to make all elements equal. One way is the following sequence: remove (1, 2) -> 1, 3, 4, (1), and keep repeating the process until achieving [1,1,1,1,1]. 3. In the third example, no operations are needed as all elements are already equal.","solution":"def min_operations_to_equal_array(t, test_cases): from math import gcd from functools import reduce def all_elements_equal(arr): return all(x == arr[0] for x in arr) result = [] for case in test_cases: n, a = case if all_elements_equal(a): result.append(0) continue g = reduce(gcd, a) if g == 1: result.append(n - 1) else: min_val = min(a) if min_val == g: result.append(n - 1) else: result.append(n) return result"},{"question":"Alice and Bob are playing a game using a sequence of integers. They will take turns counting numbers from the sequence according to specific rules. Alice will always start first. On her turn, she counts one number. On Bob\'s turn, he counts three numbers. This alternating goes on until the sequence is exhausted. The sequence is represented as a string formatted as `\'a1,a2,a3,...,an\'`, where each `a` is an integer. Here are the steps required to play the game: 1. Write a function `play_game(sequence)` that takes the sequence string as input and returns a tuple with two lists: the first list containing the integers Alice counted, and the second list containing the integers Bob counted. 2. Write another function `total_sum(sequence)` that returns a tuple with two integers: the first integer representing the total of Alice\'s counted numbers, and the second integer representing the total of Bob\'s counted numbers. # Examples: ```python play_game(\\"1,2,3,4,5,6,7,8,9\\") # ([1, 5, 9], [2, 3, 4, 6, 7, 8]) total_sum(\\"1,2,3,4,5,6,7,8,9\\") # (15, 30) play_game(\\"10,20,30,40,50,60,70\\") # ([10, 50], [20, 30, 40, 60, 70]) total_sum(\\"10,20,30,40,50,60,70\\") # (60, 220) ``` # Note: - The function `play_game` should handle all edge cases, including the possibility of Alice having the majority of numbers to count if the sequence length is not aligned with her and Bob\'s counting alternation. - Optimize for performance with large sequences.","solution":"def play_game(sequence): Takes the sequence string as input and returns a tuple with two lists: the first list containing the integers Alice counted, and the second list containing the integers Bob counted. numbers = list(map(int, sequence.split(\',\'))) alice_counts = [] bob_counts = [] is_alices_turn = True # Start with Alice i = 0 while i < len(numbers): if is_alices_turn: alice_counts.append(numbers[i]) i += 1 else: bob_counts.extend(numbers[i:i+3]) i += 3 is_alices_turn = not is_alices_turn return (alice_counts, bob_counts) def total_sum(sequence): Returns a tuple with two integers: the first integer representing the total of Alice\'s counted numbers, and the second integer representing the total of Bob\'s counted numbers. alice_counts, bob_counts = play_game(sequence) alice_total = sum(alice_counts) bob_total = sum(bob_counts) return (alice_total, bob_total)"},{"question":"A group of scientists is working on a new planetary exploration project. They have a rover that travels on the surface of a planet, which can be represented as a grid. The rover starts at the position (0, 0) and can move in four directions: up, down, left, and right. However, due to the planet\'s uneven terrain, there are certain cells on the grid that the rover cannot traverse. The scientists want to determine if the rover can reach a specific target position (x, y). The grid is defined by its size and the list of impassable cells. Write a program to help the scientists find out if the rover can reach the target position. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a line containing a single \'0\'. Each dataset is given in the following format: n m t x1 y1 x2 y2 ... xt yt tx ty The first line contains two integers n and m (1 ≤ n, m ≤ 1000): the number of rows and columns of the grid. The second line contains a single integer t (0 ≤ t ≤ n * m), the number of impassable cells. Each of the next t lines contains two integers xi and yi (0 ≤ xi < n, 0 ≤ yi < m), representing the coordinates of an impassable cell. The last line contains two integers tx and ty (0 ≤ tx < n, 0 ≤ ty < m), representing the target position. Output For each dataset, output a single line containing \\"YES\\" if the rover can reach the target position (tx, ty) from the starting position (0, 0) without traversing any impassable cells, and \\"NO\\" otherwise. Example Input 5 5 3 1 1 2 2 3 3 4 4 4 4 3 3 1 2 2 2 2 0 Output YES NO","solution":"from collections import deque def can_reach(n, m, impassable_cells, target_x, target_y): # Define the directions the rover can move: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Create a set for fast lookup of impassable cells impassable_set = set(impassable_cells) if (0, 0) in impassable_set or (target_x, target_y) in impassable_set: return \\"NO\\" # Create a queue for BFS and a set to track visited cells queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: x, y = queue.popleft() # If we reach the target cell, return \'YES\' if (x, y) == (target_x, target_y): return \\"YES\\" # Explore the four possible directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within bounds and not visited or impassable if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and (nx, ny) not in impassable_set: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" def process_inputs(inputs): results = [] lines = inputs.strip().split(\'n\') i = 0 while i < len(lines): if lines[i] == \'0\': break n, m = map(int, lines[i].strip().split()) t = int(lines[i + 1].strip()) impassable_cells = [] for j in range(t): x, y = map(int, lines[i + 2 + j].strip().split()) impassable_cells.append((x, y)) target_x, target_y = map(int, lines[i + 2 + t].strip().split()) result = can_reach(n, m, impassable_cells, target_x, target_y) results.append(result) i += 3 + t return results # Example usage: inputs = 5 5 3 1 1 2 2 3 3 4 4 3 3 1 2 2 2 2 0 results = process_inputs(inputs) for result in results: print(result)"},{"question":"Julianne is designing a scoring system for an online game where players can perform multiple actions during a session. Each action either increases or decreases a player\'s score based on its nature. Unfortunately, her input system is malfunctioning and sometimes registers actions multiple times in a row. Julianne decides that if two or more consecutive identical actions are recorded, they should be considered as a single action. Write a program that takes a sequence of actions and outputs the final score after removing consecutive identical actions and calculating the resultant score. Each action is represented as either an integer (positive for score increase, negative for score decrease, and zero has no effect) and these actions are separated by spaces. -----Input----- One line containing a sequence of integers separated by spaces. The length of the sequence is at most 10^6, and each integer is between -1000 and 1000 inclusive. -----Output----- A single integer representing the final score after processing the actions. -----Examples----- Sample Input 1: 3 3 -2 -2 -2 1 1 0 0 4 -1 -1 -1 Sample Output 1: 5 Sample Input 2: 5 -3 7 7 7 -2 -2 -4 4 -6 Sample Output 2: 1","solution":"def final_score(actions_str): Returns the final score after removing consecutive identical actions. :param actions_str: A string of integers separated by spaces. :return: An integer representing the final score. actions = list(map(int, actions_str.split())) n = len(actions) if n == 0: return 0 total_score = 0 prev_action = None for action in actions: if action != prev_action: total_score += action prev_action = action return total_score"},{"question":"Given a string s consisting of lowercase alphabets and integers, extract the largest number that can be obtained by removing exactly one character from s. If the resulting string after removal of a character does not contain any integers, return 0. Example 1: Input: s = \\"a1234\\" Output: 234 Explanation: By removing \'1\', the remaining string \\"234\\" forms the largest number. Example 2: Input: s = \\"112a45b\\" Output: 1245 Explanation: By removing \'1\' at index 0, the remaining string \\"1245\\" forms the largest number. Example 3: Input: s = \\"abcdef\\" Output: 0 Explanation: The string \\"abcdef\\" does not contain any integers, so removing any character still results in no integers. Note: The length of string s will be in the range [2, 1000]. The string s will contain at least one integer and at least one letter.","solution":"def largest_number_after_removal(s): max_number = 0 found_digit = False for i in range(len(s)): if s[i].isdigit(): found_digit = True new_str = s[:i] + s[i+1:] possible_number = \\"\\".join(filter(str.isdigit, new_str)) if possible_number: max_number = max(max_number, int(possible_number)) if not found_digit: return 0 return max_number"},{"question":"A delivery robot is designed to move within a warehouse that can be represented as an m x n grid. It starts at a given position and aims to deliver a package to a target position. The robot can only move up, down, left, or right, and some cells are blocked, meaning the robot cannot step on them. The robot\'s target is to find a path that will bring it from the starting position to the target position in the shortest distance possible. Write a function `shortest_path(grid, start, target)` that finds and returns the length of the shortest path from the robot\'s starting position to the target position. If such a path does not exist, return -1. Function signature: `def shortest_path(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int:` # Input - `grid` (List[List[int]]): A 2D grid of 0s and 1s where 0 represents an open cell and 1 represents a blocked cell. The grid dimensions are m x n (1 <= m, n <= 100). - `start` (Tuple[int, int]): A tuple (x, y) representing the starting position of the robot. - `target` (Tuple[int, int]): A tuple (x, y) representing the target position of the robot. # Output - Return the length of the shortest path from the starting position to the target position. If no such path exists, return -1. # Example Input ``` grid = [ [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0] ] start = (0, 0) target = (3, 4) ``` Output ``` 7 ``` Explanation The shortest path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,4), which has a length of 7. # Constraints 1. The grid dimensions are between 1 and 100. 2. Both the starting and target positions are guaranteed to be within the grid. 3. Assume that the given `start` and `target` positions are always within the grid bounds.","solution":"from collections import deque from typing import List, Tuple def shortest_path(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: rows, cols = len(grid), len(grid[0]) q = deque([(start[0], start[1], 0)]) # Queue for BFS: (row, col, distance) visited = set() directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right while q: row, col, distance = q.popleft() # If we reached the target position if (row, col) == target: return distance # Mark this cell as visited if (row, col) in visited: continue visited.add((row, col)) # Explore neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited: if grid[new_row][new_col] == 0: q.append((new_row, new_col, distance + 1)) # If we exhaust the search and do not reach the target return -1"},{"question":"Write a program that reads multiple pairs of integers and calculates their sum. Each pair represents a test case, and your program should print the sum for each pair. Constraints * 0 ≤ a, b ≤ 100 Input The input consists of multiple test cases. Each test case is described by a pair of integers a and b in a single line. The input ends with a single line containing two zeros. Output For each test case, print the sum in the following format: Sum of case i: s where i is the test case number starting from 1. Put a single space between \\"Sum of case\\" and i. Also, put a single space between \':\' and s. Example Input 3 5 10 20 1 1 6 7 0 0 Output Sum of case 1: 8 Sum of case 2: 30 Sum of case 3: 2 Sum of case 4: 13","solution":"def read_and_sum_pairs(pairs): Reads multiple pairs of integers from list and calculates their sum. Each pair represents a test case, and the function prints the sum for each pair. Pairs are provided as list of tuples where each tuple contains exactly two integers. The input ends with a pair of zeroes. Parameters: pairs (list of tuples): List of pairs of integers Returns: list of str: List of formatted sum results results = [] case_number = 1 for a, b in pairs: if a == 0 and b == 0: break s = a + b results.append(f\\"Sum of case {case_number}: {s}\\") case_number += 1 return results"},{"question":"A toy manufacturing company wants to design a new toy that has a series of rods connected by joints. The toy should be constructed from N rods, each with a given length. The goal is to create the longest possible straight rod by connecting a subset of the provided rods end-to-end. However, there is a twist: you cannot use rods that have the same length consecutively in this sequence. Your task is to calculate the maximum length of the straight rod that can be created under the given constraints. -----Input----- The first line contains an integer N, the number of rods. The next line contains N integers, where each integer indicates the length of a rod. -----Output----- In a single line, print the maximum length of the straight rod that can be created. -----Constraints----- - 1leq N leq 10^5 - 1leq text{length of each rod} leq 10^6 -----Example Input 1----- 5 1 2 3 4 5 -----Example Output 1----- 15 -----Example Input 2----- 6 1 2 2 3 3 4 -----Example Output 2----- 10 -----Explanation----- Test Case 1: All rods can be used sequentially since they all have different lengths. Test Case 2: One possible way to maximize the length is to use rods in this order: 1, 2, 3, 4. The maximum length is 10. You cannot use both of the 2\'s or both of the 3\'s consecutively.","solution":"def max_length_rods(N, rods): Returns the maximum length of the straight rod that can be created under the given constraints. if N == 0: return 0 # Sort the rods by length rods.sort() # Initialize the max_length and previous length max_length = 0 prev_length = -1 for rod in rods: if rod != prev_length: max_length += rod prev_length = rod return max_length"},{"question":"Given a string `s`, which consists of lowercase and uppercase alphabetic characters, return a new string with all the vowels removed. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. Example 1: Input: s = \\"LeetCode\\" Output: \\"LtCd\\" Explanation: After removing the vowels from the string, we are left with \\"LtCd\\". Example 2: Input: s = \\"Python\\" Output: \\"Pythn\\" Explanation: After removing the vowels from the string, we are left with \\"Pythn\\". Example 3: Input: s = \\"HELLO\\" Output: \\"HLL\\" Explanation: After removing the vowels from the string, we are left with \\"HLL\\". Constraints: - 1 <= s.length <= 1000 - s consists of only uppercase and lowercase alphabetic characters.","solution":"def remove_vowels(s): Returns a new string with all the vowels removed from the input string s. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. :param s: str :return: str vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"# Task: Write a function `find_shortest_path` that calculates the shortest path in a weighted, undirected graph using Dijkstra\'s algorithm. The graph is represented as a dictionary, where the keys are the nodes and the values are dictionaries of adjacent nodes with their corresponding weights. Function Signature: ```python def find_shortest_path(graph: dict, start: str, end: str) -> (list, int): ``` - `graph` : A dictionary representing the graph. Each key is a node, and the value is another dictionary of adjacent nodes and their edge weights. - `start` : The starting node for the path. - `end` : The target node for the path. Output: - A tuple containing two elements - a list of nodes representing the shortest path from the starting node to the target node, and the total weight of this path. If no path exists, return `([], float(\'inf\'))`. Example: Given the following graph: ```python graph = { \'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'A\': 1, \'C\': 2, \'D\': 5}, \'C\': {\'A\': 4, \'B\': 2, \'D\': 1}, \'D\': {\'B\': 5, \'C\': 1} } ``` Calling the function as follows: ```python find_shortest_path(graph, \'A\', \'D\') ``` Should return this result: ```python ([\'A\', \'B\', \'C\', \'D\'], 4) ``` Notes: - Use Dijkstra\'s algorithm to find the shortest path. - Assume that the graph does not contain any negative weight edges. - Make sure to handle edge cases, such as when the start or end node is not in the graph.","solution":"import heapq def find_shortest_path(graph: dict, start: str, end: str) -> (list, int): Function to find the shortest path in a weighted, undirected graph using Dijkstra\'s algorithm. :param graph: A dictionary representing the graph :param start: The starting node for the path :param end: The target node for the path :return: A tuple containing a list of nodes representing the shortest path, and the total weight of this path if start not in graph or end not in graph: return ([], float(\'inf\')) # Min-heap priority queue pq = [(0, start, [])] visited = set() while pq: (cost, node, path) = heapq.heappop(pq) if node in visited: continue visited.add(node) path = path + [node] # Found the shortest path to the destination if node == end: return (path, cost) for adjacent, weight in graph[node].items(): if adjacent not in visited: heapq.heappush(pq, (cost + weight, adjacent, path)) return ([], float(\'inf\'))"},{"question":"You are given an integer `n`. Your task is to determine if this integer is a \\"stepping number\\". A \\"stepping number\\" is a number in which the absolute difference between every two consecutive digits is 1. For example, 45654 is a stepping number because |4-5| = 1, |5-6| = 1, |6-5| = 1, and |5-4| = 1. However, 421 is not a stepping number as |2-1| = 1, but |4-2| = 2 (which is not 1). Write a function `is_stepping_number(n)` that returns `True` if `n` is a stepping number, and `False` otherwise. Examples: ``` is_stepping_number(45654) == True is_stepping_number(421) == False is_stepping_number(78987) == True is_stepping_number(1333) == False ``` Good luck!","solution":"def is_stepping_number(n): Returns True if the integer n is a stepping number, False otherwise. n_str = str(n) for i in range(len(n_str) - 1): if abs(int(n_str[i]) - int(n_str[i + 1])) != 1: return False return True"},{"question":"*“Find the Missing Card”* In a card game, you are given a deck of N-1 cards. The deck should originally have had N cards numbered from 1 to N, but one card is missing. Your task is to find and return the missing card number. Note: - Each card number appears exactly once. - The deck is represented as an array of integers. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer N, representing the total number of cards that should have been in the deck. - The second line of each test case contains N-1 space-separated integers, denoting the numbers on the remaining cards. ------ Output Format ------ For each test case, output in a single line the number of the missing card. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 10^{5} - The sum of (N-1) across all test cases does not exceed 5cdot 10^{5}. ------ Sample Input 1 ------ 3 5 1 2 3 5 4 1 4 3 7 7 1 2 6 4 3 ----- Sample Output 1 ------ 4 2 5 ----- Explanation 1 ------ Test Case 1: The original deck should have cards numbered 1 to 5, but card number 4 is missing. Test Case 2: The original deck should have cards numbered 1 to 4, but card number 2 is missing. Test Case 3: The original deck should have cards numbered 1 to 7, but card number 5 is missing.","solution":"def find_missing_card(N, cards): Given the total number of cards N and a list of N-1 cards, find the missing card. total_sum = sum(range(1, N + 1)) missing_card = total_sum - sum(cards) return missing_card def process_input(T, test_cases): Process multiple test cases. T is the number of test cases. test_cases is a list of tuples, each containing (N, cards). results = [] for N, cards in test_cases: results.append(find_missing_card(N, cards)) return results"},{"question":"Emily is a music enthusiast who loves categorizing her music library. She has a list of her favorite tracks and their respective genres. Emily wants to split her music library into playlists where each playlist must contain only tracks of the same genre. Furthermore, she seeks to maximize the number of tracks in each playlist since she likes listening to lengthy playlists. Given a list of n tracks each with a specific genre, help Emily organize her music into the maximum possible number of tracks in each playlist where each playlist contains tracks of the same genre. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of tracks. The second line contains n space-separated strings t_1, t_2, ..., t_{n} where each t_{i} is a genre to which the i-th track belongs. The length of each genre string is between 1 and 10 characters and consists of only lowercase English letters. -----Output----- Print a single integer, the maximum number of tracks that belong to the same genre. -----Examples----- Input 5 rock pop rock jazz pop Output 2 Input 4 classical classical classical classical Output 4 Input 3 hiphop pop jazz Output 1","solution":"def max_tracks_in_same_genre(n, genres): Returns the maximum number of tracks that belong to the same genre. Parameters: n (int): Number of tracks genres (list of str): List containing the genre for each track Returns: int: The maximum number of tracks in any single genre genre_count = {} for genre in genres: if genre in genre_count: genre_count[genre] += 1 else: genre_count[genre] = 1 return max(genre_count.values())"},{"question":"Write a function that accepts a string and returns an object containing the count of each character in the string. Ignore spaces and consider uppercase and lowercase as the same character.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the given string. Ignores spaces and considers uppercase and lowercase as the same character. result = {} for char in s: if char != \' \': char = char.lower() if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"John has recently enrolled in a data structures course and is currently learning about stacks. To solidify his understanding, his instructor has given him an interesting problem. John needs to evaluate the validity of a sequence of push and pop operations on a stack. A sequence of operations on a stack comprises \'push\' and \'pop\' operations. For instance, the sequence [\\"push\\", \\"push\\", \\"pop\\", \\"push\\", \\"pop\\", \\"pop\\"] is valid if there is a corresponding sequence of integers that can be pushed and then popped in the exact order specified by the operations. Write a function `is_valid_operation_sequence(operations)` to determine if a given sequence of operations on the stack is valid. The function should take an array of strings as input and return a boolean output: `True` if the sequence is valid, and `False` otherwise. Example: ``` is_valid_operation_sequence([\\"push\\", \\"pop\\", \\"push\\", \\"push\\", \\"pop\\", \\"pop\\"]) -> True is_valid_operation_sequence([\\"push\\", \\"push\\", \\"pop\\", \\"pop\\", \\"pop\\"]) -> False is_valid_operation_sequence([\\"push\\", \\"pop\\", \\"pop\\"]) -> False is_valid_operation_sequence([\\"push\\", \\"push\\", \\"push\\", \\"pop\\", \\"pop\\", \\"pop\\", \\"push\\"]) -> True ``` Constraints: - The input list will contain only the strings \\"push\\" and \\"pop\\". - The length of the input list will be between 1 and 1000. - The sequence starts with at least one \\"push\\" operation.","solution":"def is_valid_operation_sequence(operations): stack_size = 0 for operation in operations: if operation == \\"push\\": stack_size += 1 elif operation == \\"pop\\": if stack_size == 0: return False stack_size -= 1 return True"},{"question":"Given a grid of n rows and m columns, you are tasked with finding the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). The grid can have obstacles represented by 1, which cannot be walked on, and free spaces represented by 0, which can be walked on. However, there is an additional constraint: you are allowed to eliminate at most k obstacles (i.e., convert at most k 1s to 0s) during the traversal to potentially create a shorter path. The movement is allowed in four directions: up, down, left, and right. Write a function that takes the grid, along with integers n, m, and k, and returns the length of the shortest path from (0, 0) to (n-1, m-1). If there is no such path, return -1. Input The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 50, 0 ≤ k ≤ 10), representing the number of rows and columns in the grid and the maximum number of obstacles that can be eliminated, respectively. The next n lines contain m integers each (either 0 or 1), representing the grid. Output Output a single integer representing the length of the shortest path from the top-left to the bottom-right corner of the grid. If no such path exists, return -1. Examples Input 3 3 1 0 1 0 1 1 0 1 0 0 Output 4 Input 3 3 0 0 1 0 1 1 0 1 0 0 Output -1 Explanation In the first test case, one possible path with at most 1 obstacle elimination is: (0, 0) -> (0, 1) [eliminate] -> (0, 2) -> (1, 2) -> (2, 2). The total length of this path is 4. In the second test case, there is no path from (0, 0) to (2, 2) without eliminating any obstacles, thus the output is -1.","solution":"import collections def shortest_path_with_obstacles(grid, n, m, k): def is_valid(x, y, removed): return 0 <= x < n and 0 <= y < m and removed <= k queue = collections.deque([(0, 0, 0, 0)]) # (row, col, path length, obstacles removed) visited = collections.defaultdict(lambda: float(\'inf\')) visited[(0, 0)] = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, length, removed = queue.popleft() if (x, y) == (n-1, m-1): return length for dir_x, dir_y in directions: new_x, new_y = x + dir_x, y + dir_y if is_valid(new_x, new_y, removed): new_removed = removed + grid[new_x][new_y] if new_removed <= k and new_removed < visited[(new_x, new_y)]: visited[(new_x, new_y)] = new_removed queue.append((new_x, new_y, length + 1, new_removed)) return -1"},{"question":"In many European countries, numbers are written using a comma `,` as the decimal separator and periods `.` or spaces ` ` as the thousands separator. For example, the number one million and a half would be written as `1.500.000,50` or `1 500 000,50`. Write a function `eu_format_parser(eu_string: str) -> float` that takes a string formatted in European number style and converts it to a floating-point number. The function should handle different European formats for thousands separators such as periods and spaces. Additionally, ensure the function can handle numbers with and without a decimal part. # Examples ```python print(eu_format_parser(\\"1.500.000,50\\")) # Output: 1500000.5 print(eu_format_parser(\\"2 000 000,75\\")) # Output: 2000000.75 print(eu_format_parser(\\"2.000.000\\")) # Output: 2000000.0 print(eu_format_parser(\\"3 000 000\\")) # Output: 3000000.0 print(eu_format_parser(\\"45.6\\")) # Output: 45.6 print(eu_format_parser(\\"78,90\\")) # Output: 78.9 ``` # Guidelines 1. The numbers in the string will be well-formed according to the European notation rules. 2. Ensure that no leading zeros are present in the input numbers unless they are part of a decimal fraction. 3. The function should handle inputs with both single and multiple thousands separators. # Hints - You might find it useful to replace the periods and spaces with nothing (i.e., remove them) before handling the comma. - Consider using the `replace` method for strings to handle the separators before converting the resulting string to a float.","solution":"def eu_format_parser(eu_string: str) -> float: Converts a European-formatted number string to a float. Handles both period `.` and space ` ` as thousands separators and a comma `,` as the decimal separator. Parameters: eu_string (str): A number string in European format. Returns: float: The corresponding float value. # Remove thousands separators (periods and spaces) clean_string = eu_string.replace(\'.\', \'\').replace(\' \', \'\') # Replace decimal separator (comma) with dot clean_string = clean_string.replace(\',\', \'.\') # Convert the cleaned string to a float return float(clean_string)"},{"question":"The Binary Search algorithm is widely used in computer science due to its efficiency in searching a sorted array. It works by repeatedly dividing in half the portion of the array that could contain the target value, until the target value is found or the range is empty. In this task, you need to implement a modified version of the binary search that finds the leftmost (first occurrence) and rightmost (last occurrence) indices of a target element in a sorted array. For example, consider the sorted array `arr = [1, 2, 2, 2, 3, 4, 5]` and the target `2`. The leftmost index of `2` is `1` and the rightmost index of `2` is `3`. Function Description Complete the `findIndices` function in the editor below. It should return a tuple with two integers representing the leftmost and rightmost indices of the target element in the array. findIndices has the following parameter(s): - `arr`: a list of integers, the sorted array in which to search - `target`: an integer, the target value to search for Input Format The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains a space-separated list of integers followed by the target integer. Constraints - `T <= 100` - `1 <= len(arr) <= 10^5` - `-10^9 <= arr[i], target <= 10^9` Output Format For each test case, print the leftmost and rightmost indices of the target element as a tuple. If the target element is not found, return `(-1, -1)`. Sample Input 0 2 1 2 2 2 3 4 5 2 1 2 2 2 3 4 5 6 Sample Output 0 (1, 3) (-1, -1) Explanation 0 Test case 0 The target `2` occurs at indices `1`, `2`, and `3`. Therefore, the leftmost index of `2` is `1` and the rightmost index of `2` is `3`. Test case 1 The target `6` is not found in the array. Therefore, the output is `(-1, -1)`. Sample Input 1 3 5 7 7 8 8 10 8 5 7 7 7 8 8 10 7 5 7 7 8 8 10 6 Sample Output 1 (3, 4) (1, 2) (-1, -1) Explanation 1 Test case 0 The target `8` occurs at indices `3` and `4`. Therefore, the leftmost index of `8` is `3` and the rightmost index of `8` is `4`. Test case 1 The target `7` occurs at indices `1` and `2`. Therefore, the leftmost index of `7` is `1` and the rightmost index of `7` is `2`. Test case 2 The target `6` is not found in the array. Therefore, the output is `(-1, -1)`.","solution":"def findIndices(arr, target): Returns a tuple with the leftmost and rightmost indices of the target element in the sorted array. If the target element is not found, returns (-1, -1). def findLeftmost(): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] < target: left = mid + 1 else: right = mid - 1 return left if left < len(arr) and arr[left] == target else -1 def findRightmost(): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] > target: right = mid - 1 else: left = mid + 1 return right if right >= 0 and arr[right] == target else -1 left_index = findLeftmost() right_index = findRightmost() return (left_index, right_index)"},{"question":"You are given a list of non-negative integers representing the amount of money of each house arranged in a circle. Your task is to determine the maximum amount of money you can rob tonight without alerting the police, given that two adjacent houses cannot be robbed. Important Note: Because the houses are arranged in a circle, the first house is considered adjacent to the last house, and you cannot rob both the first and last house. Write a function `rob_circle(nums)` that takes a list of integers as input and returns the maximum money that can be robbed. Examples: Example 1: Input: nums = [2, 3, 2] Output: 3 Explanation: Rob house 1 (money = 2) and rob house 3 (money = 2), so total = 2 + 2 = 4. Example 2: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and rob house 3 (money = 3), so total = 1 + 3 = 4. Example 3: Input: nums = [0] Output: 0 Explanation: There\'s only one house and it has no money.","solution":"def rob_linear(nums): Helper function to rob houses arranged in a linear fashion if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], nums[i] + dp[i-2]) return dp[-1] def rob_circle(nums): Returns the maximum amount of money that can be robbed from houses arranged in a circle if not nums: return 0 if len(nums) == 1: return nums[0] # Case 1: Exclude the first house max_rob1 = rob_linear(nums[1:]) # Case 2: Exclude the last house max_rob2 = rob_linear(nums[:-1]) return max(max_rob1, max_rob2)"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid contains a single lowercase letter. Two cells are considered adjacent if they share a common edge. Your task is to determine whether there exists a path of consecutive adjacent cells starting and ending at the same cell, such that the letters along the path spell a palindrome. Note that the path can revisit cells, but each step must move to an adjacent cell, and you cannot use the same edge more than once in a single step of the path. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid. Each of the following n lines contains a string of m lowercase letters, representing the grid. Output If a palindrome path exists, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 4 4 abba baab baab abba Output YES Input 3 3 abc def ghi Output NO Input 5 5 abcde fghij klmno pqrst uvwxy Output NO","solution":"def exists_palindrome_path(grid): n = len(grid) m = len(grid[0]) def dfs(x, y, path, visited): if len(path) > 1 and path == path[::-1]: return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and (nx, ny) != (x, y): visited.add((nx, ny)) if dfs(nx, ny, path + grid[nx][ny], visited): return True visited.remove((nx, ny)) return False for i in range(n): for j in range(m): if dfs(i, j, grid[i][j], set([(i, j)])): return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, write a function that checks if there are duplicate elements within a specific range `k`. More formally, given an array `nums` and an integer `k`, determine if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. The function signature should be: ```python def containsNearbyDuplicate(nums: List[int], k: int) -> bool: ``` # Input - `nums`: A list of integers (1 <= len(nums) <= 10^5, -10^9 <= nums[i] <= 10^9) - `k`: An integer (`0 <= k < len(nums)`) # Output - Return `True` if there is at least one such pair of duplicates; otherwise, return `False`. # Example Example 1 Input: ```python nums = [1, 2, 3, 1] k = 3 ``` Output: ```python True ``` Explanation: The element `1` appears twice and the index difference is 3 which is equal to `k`. Example 2 Input: ```python nums = [1, 0, 1, 1] k = 1 ``` Output: ```python True ``` Explanation: The element `1` appears twice, and the indices of these occurrences are `2` and `3`, which are separated by `1`. Example 3 Input: ```python nums = [1, 2, 3, 1, 2, 3] k = 2 ``` Output: ```python False ``` Explanation: Although the element `1` appears twice, the indices `0` and `3` are separated by 3, which is larger than `k`. # Constraints - The solution must run efficiently on large inputs. - Handle edge cases where the array might be very small or very large.","solution":"from typing import List def containsNearbyDuplicate(nums: List[int], k: int) -> bool: Check if the array contains any duplicates within a range of k indices. Parameters: nums (List[int]): The list of integers to check. k (int): The range within which to check for duplicates. Returns: bool: True if there are duplicates within range k, False otherwise. num_dict = {} for i, num in enumerate(nums): if num in num_dict and i - num_dict[num] <= k: return True num_dict[num] = i return False"},{"question":"You are given an array of integers. Your task is to write a program to find the second largest unique number in the array. If there is no such number, return -1. Input: The first line contains an integer T, denoting the number of test cases. Each test case contains two lines: the first line contains the number of elements in the array N, and the second line contains N space-separated integers. Output: For each test case, print the second largest unique number in the array, or -1 if no such number exists. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ array elements ≤ 1000 SAMPLE INPUT 3 5 4 1 2 3 3 4 1 1 1 1 6 6 2 1 5 4 5 SAMPLE OUTPUT 3 -1 5","solution":"def second_largest_unique_number(arr): Returns the second largest unique number in the array. If no such number exists, returns -1. unique_nums = list(set(arr)) unique_nums.sort(reverse=True) if len(unique_nums) < 2: return -1 return unique_nums[1] def process_test_cases(T, test_cases): results = [] for i in range(T): _, arr = test_cases[i] results.append(second_largest_unique_number(arr)) return results"},{"question":"Moondoka is preparing for a logic exam and she encountered the following interesting problem: A sequence is called beautiful if each element in the sequence is a multiple of d. Given an integer n, find the length of the longest subsequence of n distinct positive integers where each element of that subsequence is a beautiful number. Help Moondoka solve this problem so she can prioritize her studying based on the difficulty level. -----Input----- The first input line contains a single integer d (2 leq d leq 10^9). The second line contains an integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a single integer n (1 leq n leq 10^9) for which you need to find the length of the longest beautiful subsequence. -----Output----- For each test case, output a single integer — the length of the longest beautiful subsequence of n distinct positive integers. -----Examples----- Input 3 2 5 10 20 Output 1 2 4 -----Explanation----- In the first example, for n = 2, the only beautiful number is 2 itself. In the second example, for n = 5, the beautiful numbers are 2 and 4. In the third example, for n = 10, the beautiful numbers are 2, 4, 6, and 8. Therefore, the length of the longest beautiful subsequence is 4.","solution":"def longest_beautiful_subsequence_length(d, test_cases): Given an integer d and a list of integers representing test cases, this function returns a list of the length of the longest beautiful subsequence for each test case. Parameters: d (int): The integer where each element in the subsequence is a multiple of d. test_cases (list of int): List of integers representing different values of n for which the subsequence length is to be calculated. Returns: list of int: A list where each element is the length of the longest beautiful subsequence for the given test case in the input list. results = [] for n in test_cases: results.append(n // d) return results"},{"question":"Daenerys has finally reached the gates of King\'s Landing, but before she can claim the Iron Throne, she encounters a new challenge. There is a large, magical wall blocking her army\'s path into the city. The wall can be brought down by solving an ancient puzzle that involves strings of characters. The puzzle requires determining the longest palindromic subsequence in a given string. A subsequence is defined as a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same backward as forward. Daenerys has tasked you with finding the length of the longest palindromic subsequence for each provided string. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S, consisting of lowercase English letters. Output For each test case, output a single integer — the length of the longest palindromic subsequence in the string S. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 SAMPLE INPUT 3 bbbab cbbd a SAMPLE OUTPUT 4 2 1 Explanation In the first test case, the longest palindromic subsequence is \\"bbbb\\", which has a length of 4. In the second test case, the longest palindromic subsequence is \\"bb\\", which has a length of 2. In the third test case, the longest palindromic subsequence is \\"a\\", which has a length of 1.","solution":"def longest_palindromic_subsequence(S): Finds the length of the longest palindromic subsequence in the given string S. n = len(S) # Create a 2D table to store results of subproblems dp = [[0] * n for _ in range(n)] # Strings of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The substrings of length 2 to n are checked. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if S[i] == S[j] and cl == 2: dp[i][j] = 2 elif S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve_puzzle(T, test_cases): Solves the puzzle for T test cases, printing the length of the longest palindromic subsequence for each given string. results = [] for i in range(T): S = test_cases[i] results.append(longest_palindromic_subsequence(S)) return results"},{"question":"John is a robot entertainer and he loves performing tricks. One of his favorite tricks is to calculate the number of possible ways he can move from one point to another on a grid. But lately, he has found it hard to entertain people with this trick since the audience is not easily amused anymore. Can you help him by writing a program to calculate the number of unique paths on a grid for him? Given a grid of size `m x n`, calculate the number of distinct paths John can take to move from the top-left corner to the bottom-right corner. He can only move either down or right at any point in time. ------ Input Format ------ - The first line will contain an integer `T`, the number of test cases. - Each of the next `T` lines will contain two integers `m` and `n` representing the number of rows and columns of the grid respectively. ------ Output Format ------ For each test case, output in a single line the number of unique paths from the top-left to the bottom-right on a `m x n` grid. ------ Constraints ------ 1 leq T leq 1000 1 leq m, n leq 100 ----- Sample Input 1 ------ 3 2 2 3 3 4 5 ----- Sample Output 1 ------ 2 6 35 ----- Explanation 1 ------ Test case 1: There are 2 distinct paths from the top-left to the bottom-right corner on a 2x2 grid: Right -> Down or Down -> Right. Test case 2: There are 6 distinct paths on a 3x3 grid. Test case 3: There are 35 distinct paths on a 4x5 grid.","solution":"def unique_paths(m, n): Calculate the number of unique paths in a m x n grid from the top-left corner to the bottom-right corner. if m == 1 or n == 1: return 1 # Create a 2D array to store the number of paths to each cell dp = [[1] * n for _ in range(m)] # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] def process_test_cases(T, test_cases): results = [] for m, n in test_cases: results.append(unique_paths(m, n)) return results"},{"question":"You are given an array of integers A of length N. Your task is to reorder the array in such a way that every consecutive pair of elements has a different sign. If such a reordering is not possible, return an empty array. Constraints * 1 leq N leq 10^5 * -10^9 leq A[i] leq 10^9 * A does not have any zero elements. Input Input is given from Standard Input in the following format: N A Output Print the reordered array if possible, otherwise print an empty array. Examples Input 7 -1 2 -3 4 -5 6 7 Output [-1, 2, -3, 4, -5, 6, 7] Input 6 1 -2 3 4 -5 6 Output [] Input 5 -1 -2 3 -4 5 Output [-1, 3, -2, 5, -4] Input 3 1 -2 3 Output [-2, 1, 3]","solution":"def reorder_array(N, A): # Separate the positive and negative numbers positive_numbers = [x for x in A if x > 0] negative_numbers = [x for x in A if x < 0] # Check if reordering is possible if abs(len(positive_numbers) - len(negative_numbers)) > 1: return [] # Determine which list starts the first element for alternating sign result = [] if len(positive_numbers) >= len(negative_numbers): longer = positive_numbers shorter = negative_numbers else: longer = negative_numbers shorter = positive_numbers # Interleave the lists for i in range(min(len(positive_numbers), len(negative_numbers))): result.append(longer[i]) result.append(shorter[i]) # Append the remaining elements from the longer list if len(longer) > len(shorter): result.append(longer[-1]) return result"},{"question":"You have recently been hired by a company that wants to improve their product recommendation system. The system currently recommends products based on purchase history, but the company wants to start incorporating user ratings into the algorithm. Each product can be rated multiple times and the ratings are stored in a list of tuples where each tuple contains the product ID and the rating given. Your task is to implement a function that, given a list of rating tuples, returns a dictionary with the average rating for each product. # Input - A list of tuples where each tuple contains two elements: - `product_id` (an integer) — the ID of the product - `rating` (an integer) — the rating given to the product # Output - A dictionary where the keys are product IDs and the values are the average rating for each product. # Example Input ```python ratings = [(1, 5), (1, 3), (2, 4), (2, 4), (2, 5), (3, 2)] ``` Output ```python {1: 4.0, 2: 4.33, 3: 2.0} ``` Note: The average rating should be rounded to two decimal places. # Assumptions - `product_id` is a positive integer. - `rating` is an integer between 1 and 5 inclusive. - There is at least one rating for each product. # Function Signature ```python def calculate_average_ratings(ratings: List[Tuple[int, int]]) -> Dict[int, float]: ``` # Additional Information - You may assume that the input will always adhere to the mentioned constraints. - Use standard Python libraries only.","solution":"from typing import List, Tuple, Dict def calculate_average_ratings(ratings: List[Tuple[int, int]]) -> Dict[int, float]: Calculate the average rating for each product. :param ratings: A list of tuples where each tuple contains a product_id and a rating. :return: A dictionary with product_id as keys and their average ratings as values. rating_sum = {} rating_count = {} for product_id, rating in ratings: if product_id in rating_sum: rating_sum[product_id] += rating rating_count[product_id] += 1 else: rating_sum[product_id] = rating rating_count[product_id] = 1 average_ratings = {product_id: round(rating_sum[product_id] / rating_count[product_id], 2) for product_id in rating_sum} return average_ratings"},{"question":"Given a list of integers, write a function that calculates the sum of the largest contiguous subarray. A contiguous subarray is a subarray that consists of consecutive elements from the original array. If the input list is empty, the function should return 0. For example, given the list `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the largest contiguous subarray sum is `6`, which comes from the subarray `[4, -1, 2, 1]`. Function signature: `def max_contiguous_subarray_sum(lst: List[int]) -> int:` # Examples: Example 1: - Input: `[−2, 1, −3, 4, −1, 2, 1, −5, 4]` - Output: `6` Example 2: - Input: `[1, 2, 3, 4, 5]` - Output: `15` Example 3: - Input: `[-1, -2, -3, -4, -5]` - Output: `-1` # Constraints: - The input list may contain positive and/or negative integers. - The input list may be of any length, including empty.","solution":"from typing import List def max_contiguous_subarray_sum(lst: List[int]) -> int: Returns the sum of the largest contiguous subarray. if not lst: return 0 current_max = lst[0] global_max = lst[0] for num in lst[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"You are given a grid with dimensions W times H (width W pixels and height H pixels). The grid contains impassable obstacles and open cells. A robot starts at the top-left corner of the grid (1, 1) and tries to reach the bottom-right corner (W, H). The robot can move one cell at a time, either right or down, but it cannot move into a cell that contains an obstacle. Your task is to determine whether the robot can reach the bottom-right corner and, if possible, find the minimum number of moves required to do so. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers W and H, the width and height of the grid. The following H lines each contain W characters, where each character is either a \'.\' (an open cell) or \'#\' (an obstacle). ------ Output ------ For each test case, print a single line. If the robot can reach the bottom-right corner, print the minimum number of moves required. Otherwise, print `-1`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ W, H ≤ 100 Each cell of the grid is either \'.\' or \'#\' The starting cell (1, 1) and the ending cell (W, H) are guaranteed to be open cells (\'.\'). ------ Sample Input 1 ------ 2 5 5 ..... ..#.. .#.#. .#... ..... 1 1 . ------ Sample Output 1 ------ 8 0 ----- explanation 1 ------ In the first test case, the robot can move 8 steps to reach the bottom-right corner. One possible path is: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5). In the second test case, the grid has only one cell, and the robot is already at the bottom-right corner, so it requires 0 moves.","solution":"from collections import deque def min_moves_to_reach_end(grid, W, H): directions = [(0, 1), (1, 0)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set([(0, 0)]) while queue: x, y, dist = queue.popleft() if x == W - 1 and y == H - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < W and 0 <= ny < H and grid[ny][nx] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def process_test_cases(T, test_cases): results = [] for i in range(T): W, H, grid = test_cases[i] result = min_moves_to_reach_end(grid, W, H) results.append(result) return results"},{"question":"Maria is participating in a number-guessing game where she tries to guess a hidden number based on a series of hints she receives. Each hint specifies whether the hidden number is lower or higher than her previous guess. Help Maria determine the range of possible hidden numbers after receiving all the hints. Input First line contains a positive integer T - the total number of test cases. Each test case consists of multiple lines: - The first line contains two positive integers L and R, representing the initial range of possible hidden numbers (inclusive). - The next line contains an integer H, the number of hints Maria receives. - Each of the next H lines contains a string \\"Higher\\" or \\"Lower\\", followed by an integer X. Output For each test case, print the final range (L\' and R\') of possible hidden numbers separated by a space. Constraints 1 ≤ T ≤ 10^4 1 ≤ L < R ≤ 10^9 1 ≤ H ≤ 10^4 1 ≤ X ≤ 10^9 Subtasks Subtask #1 (20 points) 1 ≤ T ≤ 10^3 1 ≤ L < R ≤ 10^5 1 ≤ H ≤ 10^3 1 ≤ X ≤ 10^5 Subtask #2 (80 points) 1 ≤ T ≤ 10^4 1 ≤ L < R ≤ 10^9 1 ≤ H ≤ 10^4 1 ≤ X ≤ 10^9 Sample Testcase Sample Input 1 1 100 3 Higher 50 Lower 80 Higher 60 Sample Output 61 79 Explanation In the first test case: - The initial range is 1 to 100. - The first hint \\"Higher 50\\" reduces the range to 51 to 100. - The second hint \\"Lower 80\\" reduces the range to 51 to 79. - The third hint \\"Higher 60\\" reduces the range to 61 to 79.","solution":"def find_range(T, test_cases): results = [] for i in range(T): L, R = test_cases[i][0] H = test_cases[i][1] hints = test_cases[i][2] for hint in hints: direction, X = hint if direction == \\"Higher\\": L = max(L, X + 1) elif direction == \\"Lower\\": R = min(R, X - 1) results.append((L, R)) return results"},{"question":"A Virtual Library maintains a catalog of books, each identified by a unique integer ID. The library organizes books in a shelf, but the shelves are not always sorted in order. However, due to some disturbances, books often get misplaced. Library staff frequently need to verify whether all book IDs on a particular shelf form a contiguous sequence, meaning every integer between the smallest and largest book ID in that sequence must be present on the shelf. You are tasked with writing a program to help the library staff determine if a given sequence of book IDs represents a contiguous sequence. # Input The first line contains an integer n (1 leq n leq 10^5)— the number of books on the shelf. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the IDs of the books on the shelf. # Output Print \\"Yes\\" if the sequence of book IDs is a contiguous sequence; otherwise, print \\"No\\". # Example **Input** ``` 5 4 2 3 1 5 ``` **Output** ``` Yes ``` **Input** ``` 4 7 6 8 10 ``` **Output** ``` No ``` **Explanation** In the first example, the sequence of book IDs can be rearranged to [1, 2, 3, 4, 5], which forms a contiguous sequence. Hence, the output is \\"Yes\\". In the second example, the sequence of book IDs cannot form a contiguous sequence as number 9 is missing between 8 and 10. Hence, the output is \\"No\\".","solution":"def is_contiguous_sequence(n, book_ids): Determines if the sequence of book IDs is contiguous. Parameters: n (int): The number of books on the shelf. book_ids (list of int): The IDs of the books on the shelf. Returns: str: \'Yes\' if the sequence is contiguous, otherwise \'No\'. min_id = min(book_ids) max_id = max(book_ids) if max_id - min_id + 1 == n and len(set(book_ids)) == n: return \\"Yes\\" else: return \\"No\\""},{"question":"In this problem, you are given a string containing lowercase alphabetic characters and some wildcards (\'?\'). Each wildcard can be replaced by any single lowercase letter from \'a\' to \'z\'. Your task is to determine how many unique strings can be generated by replacing all the wildcards in the given string. Input: The first line contains T, the number of test cases. Each test case consists of a single line containing a string S with lowercase letters and \'?\' wildcards. Output: For each test case, output the number of unique strings that can be formed by replacing all \'?\'s in the given string. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 Example: Input: 3 a?c ??? abc Output: 26 17576 1 Explanation: In the first test case: There is one wildcard \'?\'. It can be replaced by any of 26 letters, giving 26 different possible strings. In the second test case: There are three wildcards. Each can be replaced by any of 26 letters, giving 26 * 26 * 26 = 17576 different possible strings. In the third test case: There are no wildcards, so the given string \'abc\' is the only possible string.","solution":"def count_unique_strings(s): Returns the number of unique strings that can be formed by replacing all \'?\' wildcards in the given string with any lowercase letter. wildcard_count = s.count(\'?\') return 26 ** wildcard_count def number_of_unique_strings(test_cases): Processes a list of test cases and returns the count of unique strings for each. return [count_unique_strings(s) for s in test_cases]"},{"question":"Write a function that takes a string boldsymbol{s} as input and returns True if the string is a valid number according to the following conditions: 1. The string may start with a single \\"+\\" or \\"-\\" sign. 2. The string consists of digits 0-9, and may contain at most one dot \\".\\" which separates the integer part from the fractional part. 3. The string may optionally end with an exponent part that starts with \\"e\\" or \\"E\\", followed by an optional \\"+\\" or \\"-\\" sign and a sequence of digits. Implement the function texttt{is_valid_number(s)} that follows the above rules. Example Inputs and Outputs: textbf{Input 1:} - s: \\"123.45e+6\\" textbf{Output 1:} - True textbf{Input 2:} - s: \\"-.3E-2\\" textbf{Output 2:} - True textbf{Input 3:} - s: \\"123\\" textbf{Output 3:} - True textbf{Input 4:} - s: \\"123e\\" textbf{Output 4:} - False textbf{Input 5:} - s: \\"e3\\" textbf{Output 5:} - False","solution":"def is_valid_number(s): This function returns True if the string s is a valid number according to the described conditions, otherwise returns False. import re pattern = re.compile(r\'^[+-]?(d+(.d*)?|.d+)([eE][+-]?d+)?\') return bool(pattern.match(s))"},{"question":"Bank Transaction Records You are required to write a function that processes a list of bank transactions. Each transaction is represented by a tuple consisting of three elements: a timestamp (in the format \'YYYY-MM-DD HH:MM:SS\'), a description, and an amount (a positive or negative float indicating a credit or debit). The function should return a summary of all transactions within a specific date range. The summary should include the total number of transactions, the total amount credited, the total amount debited, and a list of descriptions of all transactions sorted by timestamp. Consider the following example: ```python transactions = [ (\\"2023-01-01 10:00:00\\", \\"Salary Credit\\", 1000.00), (\\"2023-01-03 15:30:00\\", \\"Grocery Store\\", -150.75), (\\"2023-01-02 08:00:00\\", \\"Water Bill\\", -45.00), (\\"2023-01-01 12:00:00\\", \\"Coffee Shop\\", -4.50) ] date_range = (\\"2023-01-01\\", \\"2023-01-02\\") ``` Your function should return: ```python summarize_transactions(transactions, date_range) ``` which should output: ```python { \\"total_transactions\\": 3, \\"total_credit\\": 1000.00, \\"total_debit\\": -49.50, \\"descriptions\\": [\\"Salary Credit\\", \\"Coffee Shop\\", \\"Water Bill\\"] } ``` The function signature is: ```python def summarize_transactions(transactions: List[Tuple[str, str, float]], date_range: Tuple[str, str]) -> Dict: ``` The function should adhere to the following constraints: - The transactions list can have up to 100,000 entries. - All timestamps and dates are valid and within the range \'2000-01-01\' to \'2100-12-31\'. - The date range is inclusive. - The descriptions list should maintain the order of transactions as per their timestamp. Implement the function in the way that it efficiently handles the given constraints.","solution":"from typing import List, Tuple, Dict from datetime import datetime def summarize_transactions(transactions: List[Tuple[str, str, float]], date_range: Tuple[str, str]) -> Dict: start_date = datetime.strptime(date_range[0], \'%Y-%m-%d\') end_date = datetime.strptime(date_range[1], \'%Y-%m-%d\') total_transactions = 0 total_credit = 0.0 total_debit = 0.0 descriptions = [] filtered_transactions = [] for timestamp, description, amount in transactions: transaction_date = datetime.strptime(timestamp.split()[0], \'%Y-%m-%d\') if start_date <= transaction_date <= end_date: filtered_transactions.append((timestamp, description, amount)) filtered_transactions.sort(key=lambda x: x[0]) for _, description, amount in filtered_transactions: total_transactions += 1 if amount > 0: total_credit += amount else: total_debit += amount descriptions.append(description) return { \\"total_transactions\\": total_transactions, \\"total_credit\\": total_credit, \\"total_debit\\": total_debit, \\"descriptions\\": descriptions }"},{"question":"Problem Description: In a software development company, the project manager assigns a unique task ID to each task. Each task ID is a positive integer. Due to a glitch in the company\'s task tracking software, some task IDs have gone missing. The project manager needs to find the missing task IDs to ensure all tasks are properly accounted for. You are given a list of assigned task IDs that are in a continuous range from the smallest task ID to the highest task ID, but with some IDs missing. Your task is to find all the missing task IDs. Write a function, `find_missing_tasks`, that takes in a list of assigned task IDs and returns a list of all missing task IDs in ascending order. Input: - A single list `tasks` of n integers where each integer represents an assigned task ID. Output: - A list of integers representing the missing task IDs in ascending order. Constraints: - The length of the list (n) is between 1 and 10^6. - Each task ID is a unique positive integer. - The difference between the smallest and the largest task ID does not exceed 10^6. Example: Input: [3, 7, 1, 2, 8, 4, 5] Output: [6] Explanation: The task IDs range from 1 to 8. The missing task ID is 6. Input: [10, 12, 11, 14, 13] Output: [15, 16, 17] Explanation: The task IDs range from 10 to 14. The missing task IDs are 15, 16, 17.","solution":"def find_missing_tasks(tasks): Returns a list of missing task IDs given a list of assigned tasks. if not tasks: return [] min_task = min(tasks) max_task = max(tasks) task_set = set(tasks) missing_tasks = [task_id for task_id in range(min_task, max_task + 1) if task_id not in task_set] return missing_tasks"},{"question":"You are given an array of integers and an integer k. You need to find the number of pairs (i, j) where i < j such that the difference between a[j] and a[i] is exactly k. Implement a function to count such pairs. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines. The first line contains two space-separated integers n and k, where n is the number of elements in the array and k is the target difference. The second line contains n space-separated integers representing the elements of the array. -----Output----- For each test case, output a single line containing the count of pairs (i, j) where i < j and the difference between a[j] and a[i] is k. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 1000 - 1 ≤ k ≤ 10^9 - -10^9 ≤ a[i] ≤ 10^9 -----Example----- Input 2 5 2 1 5 3 4 2 3 1 1 2 3 Output: 3 2 -----Explanation----- In the first example, the pairs with difference 2 are (1, 3), (1, 4), and (3, 5). In the second example, the pairs with difference 1 are (1, 2) and (2, 3).","solution":"def count_pairs_with_difference(arr, k): Given an array and an integer k, returns the number of pairs (i, j) where i < j such that the difference between arr[j] and arr[i] is exactly k. count = 0 num_set = set(arr) for num in arr: if num + k in num_set: count += 1 return count def count_pairs_in_test_cases(test_cases): results = [] for test_case in test_cases: n, k = test_case[0] arr = test_case[1] results.append(count_pairs_with_difference(arr, k)) return results"},{"question":"The Librarian is organizing books and needs your help in categorizing book titles based on the initial letters. Write a program to organize the books based on the first letter of their titles. -----Input:----- - The first line contains a single integer N representing the number of book titles. - The next N lines each contain a string representing a book title. -----Output:----- - For each unique initial letter present in the book titles, print the initial letter followed by the list of book titles that start with that letter. - The initial letters should be printed in alphabetical order. - The book titles under each initial letter should also be printed in alphabetical order. -----Constraints----- - 1 leq N leq 100 - 1 leq Length of each title leq 100 - Titles consist only of letters and spaces -----Sample Input:----- 5 Alice in Wonderland Adventures of Huckleberry Finn Great Expectations Gone with the Wind A Tale of Two Cities -----Sample Output:----- A A Tale of Two Cities Adventures of Huckleberry Finn Alice in Wonderland G Gone with the Wind Great Expectations","solution":"def organize_books(N, titles): Organize books by their initial letters. Args: N : int : number of book titles. titles : list of str : list of book titles. Returns: dict : dictionary with initial letters as keys and lists of titles as values. from collections import defaultdict book_dict = defaultdict(list) for title in titles: initial = title[0] book_dict[initial].append(title) for k in book_dict: book_dict[k] = sorted(book_dict[k]) return dict(sorted(book_dict.items())) def format_organized_books(organized_books): Formats the organized books dictionary into the specified output format. Args: organized_books : dict : dictionary with initial letters as keys and lists of titles as values. Returns: str : formatted string according to the output format. output = [] for letter in sorted(organized_books.keys()): output.append(letter) output.extend(organized_books[letter]) return \'n\'.join(output) def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N = int(data[0]) titles = data[1:N+1] organized_books = organize_books(N, titles) result = format_organized_books(organized_books) print(result)"},{"question":"You are given a list of cities connected by bidirectional roads. Each road has a weight representing the time it takes to travel from one city to another. You need to find the minimum time required to travel from the starting city to the destination city. You\'re also given a list of queries where each query asks for the minimum travel time between two specific cities. If there is no path between the two cities, return -1 for that query. Input The first line contains three integers n, m, and q (1 ≤ n ≤ 200, 1 ≤ m ≤ 1000, 1 ≤ q ≤ 10^4), where n is the number of cities, m is the number of roads, and q is the number of queries. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 10^6), indicating that there is a road between city u and city v with travel time t. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n), representing a query for the minimum travel time from city a to city b. Output Print the answer for each query on a new line. If there is no path between the two cities, print -1. Examples Input 4 4 3 1 2 4 1 3 5 2 3 3 3 4 9 1 4 2 4 1 3 Output 14 12 5 Input 5 3 2 1 2 1 2 3 5 4 5 3 1 3 4 3 Output 6 -1","solution":"def floyd_warshall(n, edges): # Initialize distance matrix with infinity dist = [[float(\'inf\')] * n for _ in range(n)] # Distance from a city to itself is 0 for i in range(n): dist[i][i] = 0 # Populate the distance matrix with the given edges for u, v, t in edges: dist[u-1][v-1] = t dist[v-1][u-1] = t # Floyd-Warshall algorithm to find all pairs shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def min_travel_time(n, m, q, roads, queries): dist = floyd_warshall(n, roads) result = [] for a, b in queries: if dist[a-1][b-1] == float(\'inf\'): result.append(-1) else: result.append(dist[a-1][b-1]) return result def process_input_output(n, m, q, road_list, query_list): return min_travel_time(n, m, q, road_list, query_list)"},{"question":"You are tasked with developing a software system to control a city\'s traffic lights. The city is organized as an M x N grid of intersections, and each intersection has a traffic light. Each traffic light can be either red or green. In order to ensure smooth traffic flow, you need to synchronize the traffic lights according to the following rules: 1. At an initial timestamp, some traffic lights are green. 2. Every second, a green light will cause its horizontally and vertically adjacent traffic lights to change colors (i.e., green becomes red and red becomes green). Given the initial state of the traffic lights, your goal is to determine the state of the traffic lights after a specified number of seconds. # Input - The first line contains two integers M and N, the dimensions of the grid (1 ≤ M, N ≤ 1000). - The next M lines each contain N characters, each character being either \'G\' (for green) or \'R\' (for red), representing the initial state of the traffic lights. - The last line contains an integer T, the number of seconds (0 ≤ T ≤ 10^6). # Output - Output the final state of the grid after T seconds, each line containing N characters. # Example Input ``` 3 3 RRG GRG RRG 2 ``` Output ``` RRR RRR RRR ``` Explanation - Initial State at T = 0: ``` RRG GRG RRG ``` - State at T = 1: ``` RRR GGG RRR ``` - Final State at T = 2: ``` RRR RRR RRR ``` Write a program to determine the final state of the grid after T seconds based on the initial configuration.","solution":"def get_final_state(m, n, initial_state, t): def toggle(state, x, y): if 0 <= x < m and 0 <= y < n: state[x][y] = \'R\' if state[x][y] == \'G\' else \'G\' if t % 2 == 1: final_state = [] for i in range(m): new_row = [] for j in range(n): new_row.append( \'G\' if initial_state[i][j] == \'R\' else \'R\' ) final_state.append(new_row) return final_state else: return initial_state # Parse input: def parse_input(input_string): input_lines = input_string.strip().split(\'n\') m, n = map(int, input_lines[0].split()) grid = [list(line) for line in input_lines[1:m+1]] t = int(input_lines[m+1]) return m, n, grid, t # Function to format output as expected def format_output(grid): return \'n\'.join(\'\'.join(row) for row in grid)"},{"question":"Oliver and Julia are playing a game with a sequence of integers. The sequence is given by a_1, a_2, dots, a_n. The game is played as follows: 1. The game is turn-based, and Oliver always goes first. 2. On each turn, a player selects any number of consecutive elements from the sequence and removes them, as long as at least one element is removed. 3. The game continues until the sequence becomes empty. 4. The player who cannot make a move (because the sequence is empty) loses. Both players play optimally, meaning each player aims to win and will not make moves that would lead to their own defeat if they can avoid it. Given the sequence of integers, determine the winner of the game. -----Input----- The first line contains a single integer t (1 le t le 100), the number of test cases. Each of the next t lines contains: - An integer n (1 le n le 10^6), the length of the sequence. - A sequence of n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) representing the sequence. -----Output----- For each test case, print \\"Oliver\\" if Oliver wins the game, otherwise print \\"Julia\\". -----Examples----- Input 3 3 1 2 3 4 3 1 2 4 2 100 200 Output Oliver Julia Oliver","solution":"def determine_winner(n, sequence): Determines the winner of the game. Arguments: n -- the length of the sequence sequence -- the sequence of integers list Returns: \\"Oliver\\" if Oliver wins the game, \\"Julia\\" otherwise. xor_sum = 0 for num in sequence: xor_sum ^= num return \\"Oliver\\" if xor_sum != 0 else \\"Julia\\" def game_outcomes(test_cases): Determines the game outcomes for multiple test cases. Arguments: test_cases -- a list of tuples where each tuple contains (n, sequence) Returns: A list of results for each test case, either \\"Oliver\\" or \\"Julia\\". return [determine_winner(n, sequence) for n, sequence in test_cases]"},{"question":"Mark wants to access his favorite websites easily without typing the complete URLs each time. To achieve this, he decides to create a comprehensive shortcut solution. For any given URL, if there is a corresponding shortcut in the list, he wants to use that shortcut. If there isn\'t, he will use the full URL. Help Mark determine the appropriate form to access each website based on the shortcuts provided. ------ Input Format ------ - The first line contains two space-separated integers, N and M: - N represents the number of shortcuts. - M represents the number of URLs Mark wants to access. - The next N lines each contain two space-separated strings Si and Ui, representing a shortcut Si and its corresponding URL Ui. - The following M lines each contain a single URL. ------ Output Format ------ - For each of the M URLs, output its corresponding shortcut if one exists; otherwise, output the URL itself. ------ Constraints ------ 1 ≤ N, M ≤ 100 1 ≤ |Si|, |Ui| ≤ 100 All strings consist of lowercase English letters and symbols typical in URLs (e.g., \\".\\", \\"/\\", \\"?\\"). ------ Sample Input 1 ------ 3 3 gh google.com yt youtube.com fb facebook.com google.com bing.com facebook.com ------ Sample Output 1 ------ gh bing.com fb ------ Explanation 1 ------ Test Case 1: The URL is \\"google.com\\". There is a shortcut \\"gh\\" for this URL. Test Case 2: The URL is \\"bing.com\\". There is no shortcut for this URL, so the output is \\"bing.com\\". Test Case 3: The URL is \\"facebook.com\\". There is a shortcut \\"fb\\" for this URL.","solution":"def resolve_shortcut(N, M, shortcuts, urls): Resolves each URL to its corresponding shortcut if available. Parameters: - N: Number of shortcuts - M: Number of URLs to be accessed - shortcuts: A list of tuples where each tuple contains a shortcut and its URL - urls: A list of URLs to be accessed Returns: - A list of resolved URLs or their shortcuts. shortcut_map = {url: shortcut for shortcut, url in shortcuts} result = [shortcut_map.get(url, url) for url in urls] return result # Example usage: # N = 3, M = 3 # shortcuts = [(\'gh\', \'google.com\'), (\'yt\', \'youtube.com\'), (\'fb\', \'facebook.com\')] # urls = [\'google.com\', \'bing.com\', \'facebook.com\'] # Output should be [\'gh\', \'bing.com\', \'fb\']"},{"question":"# Matrix Spiral Traversal Write a function to traverse a 2D matrix in a spiral order and return the list of values in the order they are visited. # Description Given a matrix of m x n elements (m rows and n columns), return all elements of the matrix in spiral order starting from the top left corner. # Input - A 2D list of integers `matrix` representing the matrix. # Output - A list of integers representing the values of the matrix in spiral order. # Examples Example 1 ``` Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` Example 2 ``` Input: matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] ``` # Explanation - The matrix is traversed in a spiral order, starting from the top left corner, moving to the rightmost element, then downwards, left, and upwards. This process is repeated for the inner layers of the matrix until all elements are visited. - Think carefully about the boundaries of the matrix and how they change after completing one layer of traversal.","solution":"def spiral_order(matrix): Traverses a 2D matrix in spiral order and returns the list of values. result = [] if not matrix: return result top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Given a list of integers, find the smallest positive integer that does not occur in the list. Your solution should aim for an optimal time complexity. Examples: ```python find_missing_positive([1, 2, 3]); # 4 find_missing_positive([3, 4, -1, 1]); # 2 find_missing_positive([7, 8, 9, 11, 12]); # 1 find_missing_positive([-1, -2, -3]); # 1 ``` You can assume the input list contains only integers and it may be empty. Your task is to implement the function that finds the smallest missing positive integer.","solution":"def find_missing_positive(nums): Finds the smallest positive integer that does not occur in the list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Problem You are provided with a grid of size N x M consisting of integers. Your task is to perform a series of operations to either update a value in the grid or find the maximum value in a subgrid. There are two kinds of queries: 1. \\"update x y val\\": Update the value at cell (x, y) to val. 2. \\"max x1 y1 x2 y2\\": Find the maximum value in the subgrid defined from (x1, y1) to (x2, y2) inclusive. Input: The first line contains two integers N and M, the number of rows and columns in the grid. The next N lines contain M integers each, representing the initial values in the grid. The following line contains an integer Q, the number of queries. Each of the next Q lines contains a query as described above. Output: For each \\"max\\" query, print the maximum value in the defined subgrid. Constraints: 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 100000 1 ≤ x, y, x1, y1, x2, y2 ≤ 1000 -10^6 ≤ val ≤ 10^6 -10^6 ≤ grid[i][j] ≤ 10^6 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 5 update 2 2 10 max 1 1 3 3 max 2 2 2 2 update 1 1 -5 max 1 1 1 3 SAMPLE OUTPUT 10 10 3 Explanation Initially, the grid is: 1 2 3 4 5 6 7 8 9 After the first update, the grid is: 1 2 3 4 10 6 7 8 9 The first \\"max\\" query asks for the maximum value in the subgrid (1, 1) to (3, 3), which is 10. The second \\"max\\" query asks for the maximum value in the subgrid (2, 2) to (2, 2), which is 10. The second update changes the grid to: -5 2 3 4 10 6 7 8 9 The third \\"max\\" query asks for the maximum value in the subgrid (1, 1) to (1, 3), which is 3.","solution":"class Grid: def __init__(self, n, m, initial_grid): self.n = n self.m = m self.grid = initial_grid def update(self, x, y, val): self.grid[x-1][y-1] = val def max_in_subgrid(self, x1, y1, x2, y2): max_val = float(\'-inf\') for i in range(x1-1, x2): for j in range(y1-1, y2): max_val = max(max_val, self.grid[i][j]) return max_val # Example usage and solution logic def process_queries(n, m, initial_grid, queries): grid = Grid(n, m, initial_grid) results = [] for query in queries: parts = query.split() if parts[0] == \\"update\\": _, x, y, val = parts grid.update(int(x), int(y), int(val)) elif parts[0] == \\"max\\": _, x1, y1, x2, y2 = parts result = grid.max_in_subgrid(int(x1), int(y1), int(x2), int(y2)) results.append(result) return results"},{"question":"In a faraway land, there lives a wise owl who spends his time thinking about sequences and their sums. The owl has recently encountered a peculiar sequence problem and seeks your help. Given an integer N, he wants to know the smallest positive integer K such that the sum of the first K positive integers is greater than or equal to N. ------ Input Format ------ - The first line of input contains an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains an integer N. ------ Output Format ------ - For each test case, output the smallest positive integer K for which the sum of the first K positive integers is greater than or equal to N. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{9} ------ Sample Input 1 ------ 2 10 15 ------ Sample Output 1 ------ 4 5 ------ Explanation 1 ------ Test case 1: The sum of the first 4 positive integers is 1 + 2 + 3 + 4 = 10, which is equal to N. Therefore, K = 4. Test case 2: The sum of the first 5 positive integers is 1 + 2 + 3 + 4 + 5 = 15, which is equal to N. Therefore, K = 5.","solution":"import math def find_smallest_k(N): Finds the smallest positive integer K such that the sum of the first K positive integers is greater than or equal to N. # The sum of the first K positive integers is given by the formula K * (K + 1) / 2. # We need to solve the inequality: K * (K + 1) / 2 >= N # which simplifies to solving K^2 + K - 2N >= 0 # The positive root of the equation K^2 + K - 2N = 0 is given by: # K = (-1 + sqrt(1 + 8N)) / 2 K = (-1 + math.sqrt(1 + 8 * N)) / 2 return math.ceil(K) def process_test_cases(T, test_cases): Processes a list of test cases to determine the smallest K for each. results = [] for N in test_cases: results.append(find_smallest_k(N)) return results"},{"question":"A company wants to create an innovative loyalty program where customers earn points based on their spending. They’ve devised a unique system where customers can accumulate points in an unconventional manner. Each customer has a base point value, and their points are multiplied by a multiplier that changes with each purchase made within a week. The multiplier starts at 1 for the first purchase, and doubles with each subsequent purchase. For instance, the multiplier would be 1 for the first purchase, 2 for the second, 4 for the third, and so on. Given the number of purchases a customer makes within a week and the base point value assigned to each purchase, determine the total points the customer accumulates by the end of the week. Example 1: Input: purchases = 3, base_points = 10 Output: 70 Explanation: - First purchase: 10 points - Second purchase: 10 x 2 = 20 points - Third purchase: 10 x 4 = 40 points - Total = 10 + 20 + 40 = 70 points Example 2: Input: purchases = 4, base_points = 5 Output: 75 Explanation: - First purchase: 5 points - Second purchase: 5 x 2 = 10 points - Third purchase: 5 x 4 = 20 points - Fourth purchase: 5 x 8 = 40 points - Total = 5 + 10 + 20 + 40 = 75 points Your Task: You do not need to read input or print anything. Your task is to complete the function calculateTotalPoints() which takes the number of purchases and the base point value as input parameters and returns the total points accumulated by the end of the week. Expected Time Complexity: O(purchases) Expected Auxiliary Space: O(1) Constraints: 1 ≤ purchases ≤ 30 1 ≤ base_points ≤ 100","solution":"def calculate_total_points(purchases, base_points): Calculates the total points accumulated by a customer based on the number of purchases and the base point value. The point multiplier doubles with each subsequent purchase. :param purchases: int - The number of purchases made within a week. :param base_points: int - The base points assigned to each purchase. :return: int - The total points accumulated by the end of the week. total_points = 0 multiplier = 1 for _ in range(purchases): total_points += base_points * multiplier multiplier *= 2 return total_points"},{"question":"Given a sequence of non-negative integers, you need to find a subsequence such that the difference between the maximum and minimum elements is minimized, and the length of the subsequence is exactly k. Input: The first line of input contains an integer n (1 ≤ n ≤ 2·10^5) — the number of integers in the sequence. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) that represent the sequence of integers. The third line contains a single integer k (1 ≤ k ≤ n) — the length of the subsequence. Output: Print the minimum difference between the maximum and minimum elements of the subsequence of length k. Examples: Input: 5 1 2 3 4 5 3 Output: 2 Input: 7 10 20 30 40 50 60 70 4 Output: 30 Input: 6 5 1 3 7 9 2 2 Output: 1 Explanation: In the first example, the subsequence {2, 3, 4} has the minimum difference between the maximum and minimum elements, which is 2. In the second example, the subsequence {40, 50, 60, 70} has the minimum difference of 30. In the third example, the subsequence {1, 2} has the minimum difference of 1.","solution":"def min_diff_subsequence(n, arr, k): Find the minimum difference between the maximum and minimum elements of a k-length subsequence. :param n: int, the number of integers in the sequence :param arr: List[int], the sequence of integers :param k: int, the length of the subsequence :return: int, the minimum difference arr.sort() min_diff = float(\'inf\') for i in range(n - k + 1): min_diff = min(min_diff, arr[i + k - 1] - arr[i]) return min_diff"},{"question":"Lena is responsible for organizing a series of workshops at the university. There are m workshops, each starting and ending at a specific time. Since the rooms are shared spaces, no two workshops can happen at the same time in the same room. Lena needs to find the minimum number of rooms required to hold all the workshops without any overlap. Each workshop can be represented as an interval with a start time and an end time. Given that Lena has a list of these intervals, help her determine the required number of rooms. -----Input----- The first line contains one integer m (1 leq m leq 10^5) — the number of workshops. Each of the next m lines contains two integers s_i and e_i (1 leq s_i < e_i leq 10^9) — the start and end times of the i-th workshop. -----Output----- Output one integer which denotes the minimum number of rooms required to hold all the workshops without any overlap. -----Examples----- Input 3 1 4 2 3 3 5 Output 2 Input 2 5 10 1 7 Output 2 Input 3 1 3 3 6 6 8 Output 1 -----Note----- In the first sample test, the second workshop overlaps with both the first and third workshops. Therefore, Lena needs 2 rooms. In the second test, since both workshops overlap during the time frame from 5 to 7, Lena needs 2 rooms. In the third test, no workshop overlaps with another, so only 1 room is needed.","solution":"def min_rooms_required(intervals): Determines the minimum number of rooms required to hold all workshops without any overlap. :param intervals: List of tuples representing workshop intervals [(start1, end1), (start2, end2), ...] :return: Minimum number of required rooms if not intervals: return 0 # Separate start and end times of workshops start_times = sorted([interval[0] for interval in intervals]) end_times = sorted([interval[1] for interval in intervals]) start_pointer, end_pointer = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate over all the intervals while start_pointer < len(intervals): if start_times[start_pointer] < end_times[end_pointer]: # New workshop starts before the earliest ending one ends used_rooms += 1 start_pointer += 1 else: # Existing workshop ends used_rooms -= 1 end_pointer += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"In a certain city, the bus routes are arranged such that there are `n` bus stops along a circular route. Each bus stop has a fixed number of passengers, `pi`, waiting to get on the buses. The buses can start at any bus stop and travels along the route, stopping only at adjacent bus stops until it returns to the starting stop. However, a bus can only make a maximum of `m` stops (including the starting stop) before it must return to the initial bus stop. Given these constraints, determine the maximum number of passengers that can be picked up by any single bus starting at any bus stop and making up to `m` stops. A bus can return to the starting stop early if the maximum number of stops would otherwise be exceeded. Input The first line of input contains two integers `n` and `m` (1 ≤ m ≤ n ≤ 10000) — the number of bus stops and the maximum number of stops a bus can make. The second line contains `n` integers, p1, p2, ..., pn (0 ≤ pi ≤ 1000), representing the number of passengers at each bus stop. Output Print the maximum number of passengers that can be picked up by the bus. Examples Input 7 3 1 2 3 4 5 6 7 Output 18 Input 5 5 10 20 30 40 50 Output 150 Input 8 4 8 7 6 5 4 3 2 1 Output 26 Note In the first example, the bus can start at stop 5 and pick up passengers in this sequence: 5, 6, 7, 1, making a total of 18 passengers. In the second example, since the bus can make as many stops as there are bus stops on the route, it travels all the stops and picks up all passengers, totaling 150. In the third example, starting at stop 1 and picking up passengers in this sequence: 8, 7, 6, 5, the bus gets 26 passengers.","solution":"def max_passengers(n, m, passengers): Returns the maximum number of passengers picked up by a single bus, given the constraints. n: the number of bus stops m: the maximum number of stops a bus can make passengers: a list of integers representing passengers at each bus stop max_pass = 0 for i in range(n): current_sum = 0 for j in range(m): current_sum += passengers[(i + j) % n] max_pass = max(max_pass, current_sum) return max_pass"},{"question":"A company\'s office building has a single elevator that stops at all floors from 1 to n. The company wants to schedule the usage of the elevator so that it serves certain groups of employees efficiently during the working hours. You are given a list of requests, where each request is made by a group of employees. Each request is in the form of two integers a_i and b_i denoting the floor from which the group is starting and the floor to which the group wants to go. Your task is to find the minimum total distance that the elevator needs to travel to serve all the requests. The elevator starts at floor 1 initially. Note that the elevator can continue from the floor it last stopped to serve the next request. -----Input----- - The first line of input contains a single integer n denoting the number of floors. - The second line contains a single integer m denoting the number of requests. - The next m lines each contain two integers a_i and b_i representing the start and end floors of a request. -----Output----- Output a single integer denoting the minimum total travel distance that the elevator needs to cover to serve all requests. -----Constraints----- - 2 le n le 1000 - 1 le m le 1000 - 1 le a_i, b_i le n - a_i neq b_i -----Example Input----- 5 3 1 3 3 4 4 2 -----Example Output----- 5 -----Explanation----- The elevator starts at floor 1. It travels: 1. From floor 1 to floor 1 (start), then to floor 3 (distance: 2) 2. From floor 3 to floor 4 (distance: 1) 3. From floor 4 to floor 2 (distance: 2) Hence, the minimum total travel distance is 2 + 1 + 2 = 5.","solution":"def min_elevator_distance(n, m, requests): total_distance = 0 current_floor = 1 # Elevator starts at floor 1 for a, b in requests: # Move from current floor to a total_distance += abs(current_floor - a) # Move from a to b total_distance += abs(a - b) # Update current floor to b current_floor = b return total_distance"},{"question":"Write a program that takes a string and returns \\"Palindrome\\" if the string reads the same forward and backward (ignoring spaces, punctuation, and capitalization), and \\"Not Palindrome\\" if it does not. Ex: Input: \\"A man, a plan, a canal, Panama\\" --> Output: \\"Palindrome\\" Ex: Input: \\"Hello\\" --> Output: \\"Not Palindrome\\" Ex: Input: \\"Was it a car or a cat I saw?\\" --> Output: \\"Palindrome\\"","solution":"def is_palindrome(input_str): Takes a string and returns \\"Palindrome\\" if the string reads the same forward and backward (ignoring spaces, punctuation, and capitalization), and \\"Not Palindrome\\" if it does not. import re # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', input_str).lower() # Check if the cleaned string is a palindrome if cleaned_str == cleaned_str[::-1]: return \\"Palindrome\\" else: return \\"Not Palindrome\\""},{"question":"Create a `Matrix` class that represents a 2 x 2 matrix with `a`, `b`, `c`, and `d` attributes corresponding to the elements of the matrix: ``` [a, b] [c, d] ``` Your class should implement matrix addition with an `add()` method that takes another `Matrix` as an argument and returns a new `Matrix` which is the sum of the two matrices. For example: ```python >>> m1 = Matrix(1, 2, 3, 4) >>> m1.a 1 >>> m1.b 2 >>> m1.c 3 >>> m1.d 4 >>> m2 = Matrix(5, 6, 7, 8) >>> m3 = m1.add(m2) >>> m3.a 6 >>> m3.b 8 >>> m3.c 10 >>> m3.d 12 ``` Matrix addition is performed by adding corresponding elements of the matrices.","solution":"class Matrix: def __init__(self, a, b, c, d): self.a = a self.b = b self.c = c self.d = d def add(self, other): return Matrix(self.a + other.a, self.b + other.b, self.c + other.c, self.d + other.d)"},{"question":"Samantha is organizing a distributed database system for her new application. The system consists of several nodes, and each node can hold several replicas of data. Samantha wants to ensure the durability and availability of the data even if some nodes fail. To achieve this, every piece of data is replicated on exactly k different nodes. This way, even if k-1 nodes fail, there will still be one node holding the data. Samantha decided to randomly assign each replica of a data piece to different nodes. The nodes are identified by unique IDs and she wants to distribute the replicas in such a way that each node gets an approximately equal number of replicas. However, she needs to verify that her assignment maintains this balance. To do so, you are required to write a function that simulates the assignment of replicas to nodes and checks the balance. Input: - The first line contains two integers `n` and `k`, where `n` represents the total number of nodes and `k` represents the number of replicas. - The second line contains an integer `d` which is the total number of different data pieces to be replicated. Output: - Print \\"Balanced\\" if the assignment is balanced (i.e., the difference in the number of replicas assigned to any two nodes is at most 1). - Print \\"Not Balanced\\" otherwise. Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ n - 1 ≤ d ≤ 10^6 Assume each replica is randomly assigned, and the program simply needs to verify the balance of replica distribution. Example: Input: 4 3 6 Output: Balanced Explanation: With 6 data pieces each having 3 replicas, there are a total of 18 replicas to be distributed among 4 nodes. This leads to each node ideally holding ⌊18/4⌋ = 4 or ⌈18/4⌉ = 5 replicas. The distribution will be balanced if the difference between the number of replicas on the most and least loaded nodes is at most 1.","solution":"def check_balance(n, k, d): This function checks if the distribution of replicas across nodes is balanced. Parameters: n (int): Total number of nodes. k (int): Number of replicas for each data piece. d (int): Total number of different data pieces. Returns: str: \\"Balanced\\" if the difference in the number of replicas assigned to any two nodes is at most 1, otherwise \\"Not Balanced\\". total_replicas = k * d ideal_replicas_per_node = total_replicas // n remainder = total_replicas % n # If the remainder is 0, then all nodes have exactly ideal_replicas_per_node if remainder == 0: return \\"Balanced\\" # Otherwise, the nodes should be in the range of ideal_replicas_per_node and ideal_replicas_per_node + 1 else: return \\"Balanced\\" # Example usage: # n, k, d = 4, 3, 6 # print(check_balance(n, k, d)) # Output: Balanced"},{"question":"Joy has a string consisting of lowercase English letters. She can perform the following operation any number of times: Pick two adjacent characters in the string and replace them with any single lowercase English letter that isn\'t either of the two picked characters. Joy wants all the characters in her string to be the same. Determine the minimum number of operations required to achieve this goal. -----Input----- The first line contains a single integer t (1 le t le 50) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 1000) — the length of the string. The second line of each test case contains a string of length n consisting of only lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 5000. -----Output----- For each test case, output a single integer — the minimum number of operations required for Joy to make all characters in the string the same. -----Examples----- Input 4 5 ababa 1 a 3 abc 4 aaab Output 2 0 2 1 -----Note----- In the first test case, we can pick the last two characters \'b\' and \'a\' and replace them with \'c\' to get the string text{\'ababc\'} longrightarrow text{\'abacc\'}. Next, replace the characters \'a\' and \'b\' with \'d\' to get text{\'abacc\'} longrightarrow text{\'addcc\'}. Finally, replace the characters \'d\' and \'d\' with \'b\' to make the string \\"bbbcc\\". Hence, the minimum number of operations is 2. In the second test case, the string is already uniform, so no operation is needed. In the fourth test case, we can pick the last two characters \'a\' and \'b\' and replace them with any letter other than \'a\' or \'b\', such as \'c\', to make the string \\"aaaa\\". Hence, the minimum number of operations is 1.","solution":"def min_operations_to_uniform(t, test_cases): results = [] for n, s in test_cases: if n == 1: results.append(0) else: max_count = max(s.count(char) for char in set(s)) results.append(n - max_count) return results"},{"question":"You are given a string S. Process Q queries of the following types: * `1 k`: Print the k-th character of the string S (1-indexed). * `2 l r c`: Replace all occurrences of character c with \'X\' in the substring S[l-1:r] (0-indexed), Constraints * 1 leq |S|, Q leq 200,000 * S contains only lowercase English letters. * 1 leq k leq |S| * 1 leq l leq r leq |S| Input Input is given from Standard Input in the following format: ``` S Q Query_0 Query_1 : Query_{Q-1} ``` Output For each query of the first type, print the answer. Example Input ``` abcdefg 4 1 1 2 2 4 b 1 2 1 4 ``` Output ``` a X ```","solution":"def process_queries(S, queries): result = [] S = list(S) # Convert to list to allow easy mutability for query in queries: parts = query.split() if parts[0] == \'1\': k = int(parts[1]) result.append(S[k-1]) elif parts[0] == \'2\': l = int(parts[1]) - 1 r = int(parts[2]) c = parts[3] for i in range(l, r): if S[i] == c: S[i] = \'X\' return result # Example usage # S = \\"abcdefg\\" # queries = [\\"1 1\\", \\"2 2 4 b\\", \\"1 2\\", \\"1 4\\"] # print(process_queries(S, queries)) # Should print [\'a\', \'X\', \'d\']"},{"question":"You are tasked with developing a logistic software that assists a warehouse manager in tracking and optimizing the storage of various goods. The warehouse is represented as a 2D grid where each cell can either be empty or contain a stack of goods. Each stack is identified by a unique ID and has a certain height representing the number of goods in the stack. The manager needs to perform the following operations: adding a stack of goods to an empty cell, removing an existing stack from a cell, moving a stack from one cell to another, and querying the total number of goods in a rectangular sub-region of the grid. Moreover, due to the space constraints, the manager wants to minimize the sum of distances over all required movements while keeping track of goods. Write a program that helps the manager efficiently track and optimize the storage of goods. Input The first row contains two integers n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns in the grid. The next line contains a single integer q (1 ≤ q ≤ 50,000), which represents the number of operations performed. Each of the following q lines describes an operation. The operations are of four types: * \\"A x y h t\\" – Add a stack at cell (x, y) with height h and ID t (1 ≤ x ≤ n, 1 ≤ y ≤ m, 1 ≤ h ≤ 10^6, and t is a unique integer). * \\"R x y\\" – Remove the stack from cell (x, y) (only if it exists). * \\"M x1 y1 x2 y2\\" – Move the stack from cell (x1, y1) to cell (x2, y2) (only if (x2, y2) is empty). * \\"Q x1 y1 x2 y2\\" – Query the total number of goods in the rectangular sub-region spanning from (x1, y1) to (x2, y2) (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m). Output For each query operation, output the total number of goods in the defined sub-region. Example Input 4 4 7 A 1 1 10 1 A 2 2 5 2 M 2 2 3 3 A 4 4 7 3 Q 1 1 4 4 R 1 1 Q 1 1 4 4 Output 22 12 Note - In the example, we first add a stack of height 10 at (1, 1) with ID 1. - Then we add a stack of height 5 at (2, 2) with ID 2. - We move the stack from (2, 2) to (3, 3). - We add a stack of height 7 at (4, 4) with ID 3. - The first query (Q) asks for the total number of goods in the sub-region from (1, 1) to (4, 4), which sums up to 22. - We remove the stack from (1, 1). - The second query (Q) asks again for the total number of goods in the sub-region from (1, 1) to (4, 4), which now sums up to 12 as the stack from (1, 1) has been removed.","solution":"class Warehouse: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0]*m for _ in range(n)] def add_stack(self, x, y, height, stack_id): self.grid[x-1][y-1] = height def remove_stack(self, x, y): self.grid[x-1][y-1] = 0 def move_stack(self, x1, y1, x2, y2): if self.grid[x2-1][y2-1] == 0: self.grid[x2-1][y2-1] = self.grid[x1-1][y1-1] self.grid[x1-1][y1-1] = 0 def query(self, x1, y1, x2, y2): total_goods = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total_goods += self.grid[i][j] return total_goods def warehouse_manager(commands): n, m = map(int, commands[0].split()) q = int(commands[1]) warehouse = Warehouse(n, m) result = [] for i in range(2, 2 + q): command = commands[i].split() if command[0] == \'A\': _, x, y, h, t = command warehouse.add_stack(int(x), int(y), int(h), int(t)) elif command[0] == \'R\': _, x, y = command warehouse.remove_stack(int(x), int(y)) elif command[0] == \'M\': _, x1, y1, x2, y2 = command warehouse.move_stack(int(x1), int(y1), int(x2), int(y2)) elif command[0] == \'Q\': _, x1, y1, x2, y2 = command result.append(warehouse.query(int(x1), int(y1), int(x2), int(y2))) return result"},{"question":"# Description: Write a function that takes a list of integers and returns a new list containing the cubes of only the odd integers from the original list. The new list should maintain the order of the original odd integers. # Examples ``` cube_odds([1, 2, 3, 4, 5]) == [1, 27, 125] cube_odds([2, 4, 6, 8, 10]) == [] cube_odds([1, 3, 5, 7]) == [1, 27, 125, 343] cube_odds([]) == [] cube_odds([0, -1, -3, -5]) == [-1, -27, -125] ```","solution":"def cube_odds(lst): Returns a new list containing the cubes of only the odd integers from the original list. Parameters: lst (list): List of integers. Returns: list: New list with cubes of odd integers. return [x**3 for x in lst if x % 2 != 0]"},{"question":"During a coding workshop, the instructors planned an exercise to help participants practice analyzing and transforming data. The exercise revolves around a list of strings, and participants are required to determine the most common word across multiple lists. If there is a tie (i.e., multiple words with the highest frequency), they should return the lexicographically smallest word among them. Your task is to write a function that processes multiple test cases. For each test case, the function takes a list of strings, counts the frequency of each word, and returns the most common word, or if there’s a tie, the lexicographically smallest one. Input: - The first line of the input is an integer T, which specifies the number of test cases. - For each test case: - The first line contains an integer N, the number of strings in the list. - The second line contains N space-separated words. Output: - For each test case, output the most common word or the lexicographically smallest one if there’s a tie. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ Length of each word ≤ 100 SAMPLE INPUT 3 5 apple orange banana apple orange 6 cat dog cat fish bird dog 4 red blue green red SAMPLE OUTPUT apple cat red","solution":"from collections import Counter def most_common_word(T, test_cases): results = [] for test_case in test_cases: N, words = test_case word_counts = Counter(words) most_common_count = max(word_counts.values()) most_common_words = [word for word, count in word_counts.items() if count == most_common_count] results.append(min(most_common_words)) return results"},{"question":"You are given a string `s` consisting of lowercase English letters and a list of words. Your task is to count how many words from the list are subsequences of the string `s`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. -----Constraints----- - 1 leq |s| leq 1000 - 1 leq number of words leq 100 - 1 leq |words[i]| leq 50 - All strings in the input consist only of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: ``` s number_of_words word1 word2 ... wordN ``` -----Output----- Print the number of words in the list that are subsequences of the string `s`. -----Sample Input----- ``` abcde 3 a bb ace ``` -----Sample Output----- ``` 2 ``` In this example, \\"a\\" and \\"ace\\" are subsequences of the string `abcde`, but \\"bb\\" is not, so the output is 2.","solution":"def is_subsequence(s, word): Function to check if `word` is a subsequence of `s`. it = iter(s) return all(char in it for char in word) def count_subsequences(s, words): Function to count how many words from the list are subsequences of the string `s`. return sum(is_subsequence(s, word) for word in words) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() s = data[0] number_of_words = int(data[1]) words = data[2:2 + number_of_words] print(count_subsequences(s, words))"},{"question":"# Task Archie is participating in a coding competition where he needs to solve various challenges. One of the tasks is to analyze a string that only consists of lowercase English letters. Archie has to determine the length of the longest substring that contains exactly two distinct characters. # Example For the input string `s = \\"abcbbbbcccbdddadacb\\"`, the output should be 10. In the string, the longest substring with exactly two distinct characters is \\"bcbbbbcccb\\". # Input/Output - [input] string `s` A string containing only lowercase English letters. Constraints: `1 ≤ s.length ≤ 1000` - `[output]` an integer","solution":"def longest_substring_with_two_distinct_chars(s): Returns the length of the longest substring that contains exactly two distinct characters. max_length = 0 left = 0 char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a list of non-negative integers representing the amount of bounties in houses along a street, determine the maximum amount of bounties you can collect without robbing two adjacent houses. This problem should be solved using a dynamic programming approach. The function should take the following input and produce the output as described. Function Signature: ```python def rob(nums: List[int]) -> int: pass ``` Examples: Input: [2,7,9,3,1] Output: 12 Explanation: Rob houses with bounties 2, 9, and 1. Input: [1,2,3,1] Output: 4 Explanation: Rob houses with bounties 1 and 3. Input: [0] Output: 0 Explanation: Since there is only one house with bounty 0, the maximum amount you can rob is 0. Note: - 0 <= nums.length <= 100 - 0 <= nums[i] <= 400","solution":"from typing import List def rob(nums: List[int]) -> int: if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Ivan has a very unique job - he maintains the biggest aquarium in the world. The aquarium contains `n` fish, numbered from 1 to `n`. Each fish has a distinct id and a lifespan which measures how many days it can live without food. Due to the large number of fish, it\'s not possible for Ivan to individually monitor each fish, so he decided to automate the process. Ivan has set up q monitors around the aquarium, each monitor can track a different fish. Each monitor has one of the following functionalities: 1. \\"1 i d\\" — register or update the fish `i` with a lifespan of `d` days. 2. \\"2 i\\" — unregister the fish `i`. It is guaranteed that fish `i` was registered before this operation. 3. \\"3\\" — check if all registered fish in the aquarium are currently alive. For a fish to be alive at the moment of this query, the days passed since it was last registered must be less than its lifespan (`d`). Return \\"YES\\" if all registered fish are alive and \\"NO\\" otherwise. Implement a system to help Ivan automate his job and streamline the monitoring process. Input: - The first line contains an integer `q` (1 ≤ q ≤ 100000) — the number of queries. - Each of the next `q` lines contains a query in one of the following formats: * 1 i d (1 ≤ i ≤ 10^9, 1 ≤ d ≤ 10^9) — register or update the fish `i` with a lifespan of `d`. * 2 i (1 ≤ i ≤ 10^9) — unregister the fish `i`. * 3 — check the status of all registered fish. Output: - For each query of the 3rd type, print \\"YES\\" if all the registered fish are alive, and \\"NO\\" otherwise. Notes: - It\'s guaranteed that each fish will be registered or updated before it is unregistered. - For simplicity, assume each query happens one day after another (i.e., the first query occurs on day 1, the second on day 2, and so on). Example: Input: ``` 9 1 1 10 1 2 5 3 2 1 3 1 3 2 3 1 2 1 3 ``` Output: ``` YES YES NO NO ```","solution":"def aquarium_system(queries): registered_fish = {} current_day = 0 results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": current_day += 1 i, d = int(parts[1]), int(parts[2]) registered_fish[i] = (d, current_day) elif parts[0] == \\"2\\": current_day += 1 i = int(parts[1]) if i in registered_fish: del registered_fish[i] elif parts[0] == \\"3\\": current_day += 1 all_alive = True for fish_id, (lifespan, registered_day) in registered_fish.items(): if current_day - registered_day >= lifespan: all_alive = False break results.append(\\"YES\\" if all_alive else \\"NO\\") return results"},{"question":"Given an array of non-negative integers representing the heights of pillars where the width of each pillar is 1, compute how much water it can trap after raining. Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The structure looks like this: | | || | __||_||||| The total amount of water that can be trapped on top is 6 units. Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The structure looks like this: | | | || | _||_||| The total amount of water that can be trapped on top is 9 units.","solution":"def trap(height): Computes the amount of water that can be trapped after raining. :param height: List of non-negative integers representing the heights of pillars. :return: Integer representing the units of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water += min(left_max[i], right_max[i]) - height[i] return water"},{"question":"Mike wants to create a list of consecutive integers starting from 1 that includes exactly n prime numbers. However, the list must have its last number p being a prime number. Help Mike find the shortest length of this list. -----Constraints----- - 1 ≦ n ≦ 10^4 -----Input----- The input is given from Standard Input in the following format: n -----Output----- Print the length of the shortest list. -----Sample Input----- 3 -----Sample Output----- 5 The consecutive list starting from 1 that has exactly 3 primes and ends with a prime is [1, 2, 3, 4, 5], where the prime numbers are 2, 3, and 5.","solution":"def is_prime(num): Check if a given number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_shortest_list_length(n): Find the shortest length of a list starting from 1 that contains exactly n prime numbers with the last number being a prime. count = 0 num = 1 while count < n or not is_prime(num): num += 1 if is_prime(num): count += 1 return num"},{"question":"Consider a string, S, consisting of only alphabets. We define a \\"balanced sub-string\\" as a sub-string that contains an equal number of lowercase and uppercase letters. Given the string, S, your task is to find the length of the longest balanced sub-string. -----Constraints----- - The length of the string S will be between 1 and 1000, inclusive. - The string S will consist of only English alphabets (both lowercase and uppercase). -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the length of the longest balanced sub-string. If there is no balanced sub-string, print 0. -----Sample Input----- aAaAaBbbB -----Sample Output----- 8 In the given string, \\"aAaAaBbb\\" is the longest balanced sub-string with a length of 8, containing an equal number of lowercase and uppercase letters (4 \'a\'s and 4 \'A\'s). -----Sample Input 2----- abcABC -----Sample Output 2----- 6 In the given string, the entire string \\"abcABC\\" is a balanced sub-string with 3 lowercase and 3 uppercase letters. -----Sample Input 3----- xYz -----Sample Output 3----- 2 In the given string, \\"Yz\\" is the longest balanced sub-string with a length of 2 (one \'Y\' and one \'z\').","solution":"def find_longest_balanced_substring(S): Find the length of the longest balanced sub-string where balanced means an equal number of lowercase and uppercase letters. n = len(S) max_len = 0 # Dictionary to store the first occurrence of each prefix balance prefix_balance_map = {0: -1} # Variable to store the current balance (increment for uppercase, decrement for lowercase) balance = 0 for i in range(n): if S[i].isupper(): balance += 1 else: balance -= 1 if balance in prefix_balance_map: # Calculate the length of the balanced substring max_len = max(max_len, i - prefix_balance_map[balance]) else: prefix_balance_map[balance] = i return max_len"},{"question":"Lucy is a cashier at a local supermarket. At the end of her shift, she needs to organize the coins in the cash drawer to match the required configuration set by her supervisor. The cash drawer contains only coins of four different denominations: pennies (1 cent), nickels (5 cents), dimes (10 cents), and quarters (25 cents). Because she has the keys to the coin segregator machine, she can swap any two coins in the drawer, but it takes a bit of time to find the correct coins to swap. The goal is to determine the minimum number of swaps required to match the exact configuration her supervisor has set. -----Input----- The first line contains a positive integer N, (4 leq N leq 100000), denoting the number of coins. The second line contains N characters separated by spaces, each indicating the denomination of the coins in the cash drawer. The denominations are represented as follows: \'P\' for pennies, \'N\' for nickels, \'D\' for dimes, and \'Q\' for quarters. The third line contains N characters separated by spaces, describing the desired configuration of coins in the same format. -----Output----- Output a single integer, the minimum number of swaps needed to achieve the desired configuration. -----Examples----- Sample Input: 10 P Q P N P D Q N D Q P P P N N Q Q D D Q Sample Output: 4","solution":"def min_swaps_to_configure(n, current_config, desired_config): Determine the minimum number of swaps to convert current configuration of coins to desired configuration using swaps. :param n: Number of coins :param current_config: List containing the current configuration of coins :param desired_config: List containing the desired configuration of coins :return: Minimum number of swaps required from collections import Counter from itertools import zip_longest # Count mismatched positions mismatch = Counter() for curr, desir in zip_longest(current_config, desired_config): if curr != desir: mismatch[(curr, desir)] += 1 # Calculate the minimum number of swaps using the mismatches swaps = 0 pairs = list(mismatch.items()) # Check direct swaps for (coin1, coin2), count_1_2 in pairs: if coin1 != coin2 and (coin2, coin1) in mismatch: count_2_1 = mismatch[(coin2, coin1)] min_swaps = min(count_1_2, count_2_1) swaps += min_swaps mismatch[(coin1, coin2)] -= min_swaps mismatch[(coin2, coin1)] -= min_swaps # Calculate for remaining mismatches for (coin1, coin2), count_1_2 in mismatch.items(): if coin1 != coin2: swaps += (count_1_2 + 1) // 2 return swaps"},{"question":"<!-- Problem G --> Islands in the River You are given a grid representing a river with islands. Each cell in the grid is either water (\'0\') or land (\'1\'). An island is formed by grouping all horizontally or vertically adjacent lands. Diagonal adjacency does not count for island connectivity. Your task is to find the total number of distinct islands in the river. Input The input consists of multiple datasets, each in the following format: > n m > grid_row_1 > grid_row_2 > ... > grid_row_n The integers n (1 ≤ n ≤ 300) and m (1 ≤ m ≤ 300) denote the dimensions of the grid. Each of the following n lines contains m characters representing the grid. The end of the input is indicated by a line containing two zeros. Output For each dataset, print the number of distinct islands in the river. Sample Input 4 5 11000 11000 00100 00011 3 4 0000 1100 0110 0 0 Output for the Sample Input 2 1 Example Input 4 5 11000 11000 00100 00011 3 4 0000 1100 0110 0 0 Output 2 1","solution":"def count_islands(grid, n, m): def dfs(x, y): # Base case: if the cell is out of bounds or is water, return if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\': return # Mark the cell as visited by setting it to \'0\' (water) grid[x][y] = \'0\' # Run DFS in all 4 possible directions (up, down, left, right) dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': count += 1 dfs(i, j) return count def process_input(): datasets = [] while True: # Read dimensions n, m = map(int, input().split()) if n == 0 and m == 0: break # Read the grid grid = [] for _ in range(n): grid.append(list(input().strip())) datasets.append((grid, n, m)) results = [] for grid, n, m in datasets: results.append(count_islands(grid, n, m)) return results"},{"question":"You are given an unlimited supply of three types of coins of denominations: 1 unit, 3 units, and 4 units. Your task is to determine the minimum number of coins required to achieve a given total amount. Write a function `minimum_coins(n: int) -> int` where: * `n` (1 ≤ n ≤ 10^6) - the target amount. The function should return the minimum number of coins required to make up the target amount `n` using any combination of the given coin denominations. # Input - A single integer `n`. # Output - A single integer denoting the minimum number of coins required. # Examples Input: ``` 6 ``` Output: ``` 2 ``` Explanation: One possible way to achieve 6 units is by using 2 coins of 3 units each. Input: ``` 7 ``` Output: ``` 2 ``` Explanation: One possible way to achieve 7 units is by using 1 coin of 4 units and 1 coin of 3 units. # Note: To achieve the solution, applying a dynamic programming approach or a greedy approach may be beneficial. You can utilize an array `dp` where `dp[i]` represents the minimum number of coins required for the amount `i`. Initialize `dp[0] = 0` (no coins needed for the amount 0) and for each subsequent amount calculate the required coins using previously computed results.","solution":"def minimum_coins(n: int) -> int: # Initialize the array to a very large value dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # List of coin denominations coins = [1, 3, 4] for i in range(1, n + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[n]"},{"question":"You are given a sequence of n integers. You can do the following operation on the sequence exactly once: Choose two indices i and j(1 ≤ i < j ≤ n) and swap the elements at those indices. Your goal is to determine the lexicographically smallest sequence that can be obtained by performing the operation exactly once. A sequence a is lexicographically smaller than a sequence b if at the first position where a and b differ, the sequence a has a smaller element than the corresponding element in b. Input The first line contains an integer n (2 ≤ n ≤ 100 000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output Print the lexicographically smallest sequence that can be obtained by performing the swap operation exactly once. Examples Input 5 3 2 7 5 8 Output 2 3 7 5 8 Input 3 1 9 3 Output 1 3 9 Input 4 4 3 2 1 Output 1 3 2 4","solution":"def smallest_lexicographic_sequence(n, sequence): Returns the lexicographically smallest sequence that can be obtained by performing exactly one swap operation. :param n: int - Number of elements in the sequence :param sequence: List[int] - The sequence of elements :return: List[int] - Lexicographically smallest sequence after one swap smallest_seq = sequence[:] for i in range(n): for j in range(i+1, n): # Create a new sequence by swapping elements at i and j new_seq = sequence[:] new_seq[i], new_seq[j] = new_seq[j], new_seq[i] # Compare new sequence with the current smallest sequence if new_seq < smallest_seq: smallest_seq = new_seq return smallest_seq"},{"question":"Given an array of strings arr of size n and a string pattern. Print all the strings from the array that contain all characters of the given pattern in the same order (not necessarily consecutive). Example 1: Input: n = 5, pattern = \\"abc\\" arr = [\\"abcd\\", \\"aebnc\\", \\"acbd\\", \\"abec\\", \\"cab\\"] Output: \\"abcd\\" \\"aebnc\\" \\"abec\\" Explanation: The strings \\"abcd\\", \\"aebnc\\", and \\"abec\\" contain \\"abc\\" in that order. Example 2: Input: n = 4, pattern = \\"xyz\\" arr = [\\"xaybz\\", \\"xybaz\\", \\"yxz\\", \\"zxya\\"] Output: \\"xaybz\\" \\"xybaz\\" Explanation: The strings \\"xaybz\\" and \\"xybaz\\" contain \\"xyz\\" in that order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPatternInStrings() which takes the array of strings arr, n and pattern as parameters and returns a list of strings denoting the answer. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 1 <= m <= 10^5","solution":"def findPatternInStrings(arr, pattern): def isSubsequence(s, pattern): it = iter(s) return all(char in it for char in pattern) result = [] for string in arr: if isSubsequence(string, pattern): result.append(string) return result"},{"question":"Mike and Joe are playing a game with a sequence of integers from 1 to m (m can be very large; however, they can handle such numbers). During the game, players take turns in choosing a number. Mike always goes first. If a player chooses a number y at their turn, then for the following turns y and its divisors (except 1) cannot be chosen by either player. For example, if the number 12 is chosen, then the numbers 2, 3, 4, 6 and 12 cannot be chosen in future turns. The player who cannot make a move loses. Given that both players play optimally, determine who will win the game. -----Input----- Input contains a single integer m (1 ≤ m ≤ 10^9). -----Output----- Print the name of the winner — \\"Mike\\" or \\"Joe\\" (without quotes). -----Examples----- Input 1 Output Mike Input 3 Output Joe Input 10 Output Mike -----Note----- In the first sample, Mike will choose 1 and win immediately. In the second sample, no matter which number Mike chooses during his first turn, Joe can choose one of the remaining valid numbers and win. In the third sample, Mike can choose 10 which invalidates 2 and 5 (its divisors), leaving fewer choices for Joe and ensuring a strategy that leads to Mike\'s win.","solution":"def determine_winner(m): Determines the winner of the game based on the given integer m. Args: m (int): an integer representing the range of numbers in the game. Returns: str: \\"Mike\\" if Mike wins, \\"Joe\\" if Joe wins. # If m is even, Joe wins. If m is odd, Mike wins. return \\"Joe\\" if m % 2 == 0 else \\"Mike\\""},{"question":"Anna got her hands on two strings `x` and `y` representing chemical formulas, consisting of lowercase Latin letters and digits. She wishes to find out if the formula represented by `x` can be transformed to the formula represented by `y` by rearranging the order of its elements. In a chemical formula, elements are represented by their atomic symbols (one or two letters long), followed following a positive integer representing the number of atoms if greater than 1. Anna also considers that the number of atoms implicitly is 1 when not indicated by a digit. Help Anna determine if the two given chemical formulas represent the same molecule. Input: The input consists of two lines. The first line contains the string `x` (1 ≤ |x| ≤ 1000). The second line contains the string `y` (1 ≤ |y| ≤ 1000). Output: Print \\"YES\\" if the chemical formula `x` can be transformed to `y` by rearranging; otherwise, print \\"NO\\". Examples: Input: H2O H2O Output: YES Input: C6H12O6 H12C6O6 Output: YES Input: K4[ON(SO3)2]2 K4[ON(SO3)2]2 Output: YES Input: C12H22O11 H22C12O12 Output: NO Note: In the first example, both formulas are identical. In the second example, the six carbons, twelve hydrogens, and six oxygens are all the same, irrespective of the order. In the third example, both formulas are identical. In the fourth example, the formulas differ in the number of oxygens by 1 making them non-equivalent.","solution":"import re from collections import defaultdict def parse_formula(formula): Parse a chemical formula into a dictionary of elements and their counts. pattern = re.compile(r\'([A-Z][a-z]*)(d*)\') element_count = defaultdict(int) for (element, count) in pattern.findall(formula): if count == \'\': count = 1 else: count = int(count) element_count[element] += count return element_count def are_formulas_equivalent(x, y): Check if two chemical formulas are equivalent by comparing the parsed element counts. x_elements = parse_formula(x) y_elements = parse_formula(y) return x_elements == y_elements # INPUT and OUTPUT processing def main(): import sys input = sys.stdin.read data = input().split() x = data[0] y = data[1] if are_formulas_equivalent(x, y): print(\\"YES\\") else: print(\\"NO\\") # Sample usage if __name__ == \\"__main__\\": main()"},{"question":"Background A researcher is investigating the life cycle of different species of bacteria. They claim that the growth rate of bacteria can exhibit a cyclic pattern. They need a program to analyze their data on the size of bacteria colonies over several time points and identify these growth cycles. Problem You are given the number of time points T and a list of integers representing the size of the bacteria colony at each time point. The size can increase, decrease, or remain constant. Your task is to find the length of the shortest cycle that repeats throughout the list, if such a cycle exists. A cycle is defined as a contiguous subarray that can be repeated to recreate the original list. If no cycle is found, return -1. Constraints * 1 ≤ T ≤ 10^5 * 1 ≤ size of bacteria colony at any time point ≤ 10^9 Input The input is given in the following format: T size1 size2 ... sizeT Output Print the length of the shortest repeating cycle, or -1 if no cycle is found. Examples Input 6 1 2 1 2 1 2 Output 2 Input 7 3 3 3 3 3 3 3 Output 1 Input 5 1 3 2 4 5 Output -1","solution":"def find_shortest_cycle(T, sizes): Determines the length of the shortest repeating cycle in the sizes list. Parameters: T (int): The number of time points. sizes (List[int]): The size of the bacteria colony at each time point. Returns: int: Length of the shortest repeating cycle, or -1 if no cycle is found. for cycle_length in range(1, T//2 + 1): if T % cycle_length == 0: is_cycle = True for i in range(cycle_length): for j in range(i + cycle_length, T, cycle_length): if sizes[i] != sizes[j]: is_cycle = False break if not is_cycle: break if is_cycle: return cycle_length return -1"},{"question":"You have been given a string containing a mix of alphabets and digits. Write a function that extracts the digits from the string and returns them as an integer. If no digits are found in the string, return `0`. Example: ```python extract_digits(\\"a1b2c3\\") > 123 extract_digits(\\"abc\\") > 0 ```","solution":"def extract_digits(s): Extracts digits from the string and returns them as an integer. If no digits are found, returns 0. :param s: str, input string containing mix of alphabets and digits :return: int, extracted digits or 0 if no digits are found digits = \'\'.join(c for c in s if c.isdigit()) return int(digits) if digits else 0"},{"question":"Given a list of integers and a target integer, return the indices of the two numbers that add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. For example: * `twoSum([2, 7, 11, 15], 9) = [0, 1]` because nums[0] + nums[1] = 2 + 7 = 9 * `twoSum([3, 2, 4], 6) = [1, 2]` because nums[1] + nums[2] = 2 + 4 = 6 The input will be a list of integers and a target integer. You should return a list containing the indices of the two numbers.","solution":"def twoSum(nums, target): Returns the indices of the two numbers that add up to the target. :param nums: List of integers :param target: The target integer :return: List with the indices of the two numbers num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"In a land of code and magic, there is a great wizard who loves symmetry. One day, the wizard receives a sequence of integers representing magical powers. Each integer can either be positive, negative, or zero. The wizard considers a sequence beautiful if it is symmetric, meaning it reads the same forwards and backwards. To keep peace in the land, the wizard wants to transform any given sequence into a beautiful sequence with the minimum number of modifications. A modification consists of changing any integer in the sequence to any other integer. Your task is to help the wizard determine the minimum number of modifications needed to make a given sequence beautiful. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains an integer N denoting the number of integers in the sequence. The second line contains N space-separated integers representing the sequence. ------ Output ------ For each test case, output a single line containing an integer indicating the minimum number of modifications needed to make the sequence beautiful. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 200 -10^{9} ≤ A_{i} ≤ 10^{9} ------ Sample Input 1 ------ 2 5 1 2 3 2 1 4 1 3 2 1 ------ Sample Output 1 ------ 0 1 ------ Explanation 1 ------ In test case 1, the sequence [1, 2, 3, 2, 1] is already beautiful, so no modifications are needed (0 modifications). In test case 2, the sequence [1, 3, 2, 1] can be made beautiful by changing the second (or third) element to match the first, i.e., [1, 1, 2, 1] (1 modification).","solution":"def min_modifications_to_make_beautiful(sequences): Determines the minimum number of modifications needed to make each sequence in the list beautiful. Parameters: sequences (list): A list of tuples where each tuple contains two elements: N (int), the number of integers in the sequence, and arr (list of int), the sequence of integers. Returns: list: A list of integers representing the minimum number of modifications for each sequence to become beautiful. results = [] for N, arr in sequences: modifications = 0 for i in range(N // 2): if arr[i] != arr[N - i - 1]: modifications += 1 results.append(modifications) return results"},{"question":"A company is planning to organize a marathon race. They are keeping track of the participants\' completion times in hours and minutes. To encourage more participants, they want to create a leaderboard that shows the top fastest runners in sorted order. Additionally, they want to display the time difference between each runner and the winner. The task is to write a function **`leaderboard`** that accepts a list of tuples where each tuple represents a runner\'s name and completion time in the format `(name, (hours, minutes))`. The function should return a list of runners sorted by their completion times, and for each runner, it should include the time difference from the winner. **Function Signature:** ```python def leaderboard(runners: List[Tuple[str, Tuple[int, int]]]) -> List[Tuple[str, str, str]]: ``` **Input:** - A list of tuples, where each tuple contains: * A string `name`: the runner\'s name. * A tuple `(hours, minutes)`: the runner\'s completion time in hours and minutes. **Output:** - A list of tuples, where each tuple contains: * A string `rank`: the rank of the runner starting from 1. * A string `name`: the runner\'s name. * A string `diff`: the time difference from the winner in the format \\"hh:mm\\". **Notes:** - The time difference should use the `hh:mm` format, where: * `hh` is the total hours of the difference. * `mm` is the total minutes of the difference. - Assume no two runners will have the same completion time. **Example:** ```python runners = [ (\\"Alice\\", (2, 30)), (\\"Bob\\", (2, 10)), (\\"Charlie\\", (2, 40)), (\\"Diana\\", (2, 15)) ] leaderboard(runners) ``` **Output:** ```python [ (\\"1\\", \\"Bob\\", \\"00:00\\"), (\\"2\\", \\"Diana\\", \\"00:05\\"), (\\"3\\", \\"Alice\\", \\"00:20\\"), (\\"4\\", \\"Charlie\\", \\"00:30\\") ] ```","solution":"from typing import List, Tuple def leaderboard(runners: List[Tuple[str, Tuple[int, int]]]) -> List[Tuple[str, str, str]]: # Function to convert (hours, minutes) to total minutes def to_total_minutes(time): return time[0] * 60 + time[1] # Sorting the runners based on their completion times in total minutes runners.sort(key=lambda runner: to_total_minutes(runner[1])) # Getting the total minutes of the winner to calculate differences winner_time = to_total_minutes(runners[0][1]) leaderboard = [] for rank, (name, (hours, minutes)) in enumerate(runners, start=1): runner_time = to_total_minutes((hours, minutes)) diff_minutes = runner_time - winner_time hours_diff = diff_minutes // 60 minutes_diff = diff_minutes % 60 diff_str = f\\"{hours_diff:02}:{minutes_diff:02}\\" leaderboard.append((str(rank), name, diff_str)) return leaderboard"},{"question":"A company has a collection of projects that it needs to schedule over several months. Each project has a start month and an end month. No two projects can overlap in time. Given a list of `n` projects where each project is represented by a tuple `(start, end)`, write a function to determine the maximum number of projects that can be scheduled without overlap. Example 1: Input: projects = [(1, 3), (2, 5), (4, 6), (7, 8), (5, 9)] Output: 3 Explanation: The maximum number of non-overlapping projects is 3, which can be [(1, 3), (4, 6), (7, 8)]. Example 2: Input: projects = [(1, 2), (1, 3), (2, 4), (3, 5)] Output: 2 Explanation: The maximum number of non-overlapping projects is 2, which can be [(1, 2), (3, 5)]. Your Task: You don\'t need to read or print anything. Your task is to complete the function `maxNonOverlappingProjects()` which takes a list of tuples `projects` where each tuple `(start, end)` represents the start and end month for a project and returns an integer which is the maximum number of non-overlapping projects that can be scheduled. Expected Time Complexity: O(n log n) Expected Space Complexity: O(1) Constraints: - 1 <= n <= 10^4 - 1 <= start < end <= 10^4","solution":"def maxNonOverlappingProjects(projects): Returns the maximum number of non-overlapping projects that can be scheduled. # Step 1: Sort the projects by their end times projects.sort(key=lambda x: x[1]) # Step 2: Initialize variables to keep track of the maximum count of non-overlapping projects # and the end time of the last added project max_count = 0 last_end_time = 0 # Step 3: Iterate through the sorted projects for start, end in projects: # If the start time of the current project is greater than the end time of the last added project if start >= last_end_time: # Include this project in the schedule max_count += 1 # Update the end time of the last added project last_end_time = end return max_count"},{"question":"Given an undirected graph with n nodes and m edges, determine if the graph can be colored using exactly 3 colors such that no two adjacent nodes share the same color. If such a coloring is possible, output the colors of the nodes. If not, output \\"Not possible\\". The input consists of multiple test cases. Each test case starts with two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 3000) — the number of nodes and edges in the graph. The next m lines describe the edges, each containing two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between nodes u and v. The end of input is indicated by a test case with n = 0 and m = 0, which should not be processed. Output the results for each test case in the format described. Example Input 4 4 1 2 2 3 3 4 4 1 3 3 1 2 2 3 3 1 0 0 Output 1 2 3 1 Not possible Explanation In the first test case, an example of a valid coloring is assigning colors 1, 2, 3, and 1 to nodes 1, 2, 3, and 4 respectively. In the second test case, it is not possible to color the graph with exactly 3 colors such that no two adjacent nodes share the same color.","solution":"def is_bipartite(graph, node, color, colors): queue = [node] colors[node] = color while queue: current = queue.pop(0) for neighbor in graph[current]: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[current] queue.append(neighbor) elif colors[neighbor] == colors[current]: return False return True def graph_coloring(n, edges): if n == 0: return \\"Not possible\\" graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) colors = [-1] * (n + 1) if not all(colors[node] != -1 or is_bipartite(graph, node, 0, colors) for node in range(1, n + 1)): return \\"Not possible\\" result_colors = [1 if c == 0 else 2 for c in colors[1:]] return result_colors def process_input(input_data): results = [] lines = input_data.strip().split(\\"n\\") i = 0 while i < len(lines): n, m = map(int, lines[i].strip().split()) if n == 0 and m == 0: break edges = [] for _ in range(m): i += 1 u, v = map(int, lines[i].strip().split()) edges.append((u, v)) i += 1 result = graph_coloring(n, edges) results.append(result) return results"},{"question":"Your friend has recently taken up the challenge of creating a perfect harmonic sound synthesis using a set of newly acquired robotic arms. Each robotic arm is designed to play a specific musical note by striking a unique chord on a musical instrument. These robotic arms follow a predefined path and can change direction at any point, but there is a brief pause of 1ms (one millisecond) whenever the direction changes. The robotic arms can also remain stationary for any duration. Your task is to help your friend by determining if the robotic arms can play a given sequence of musical notes as intended. For each note, you are given a list of time intervals indicating when the note should be played. Your friend wants to ensure that the robotic arms play the notes without any unintended pauses or overlap in the notes where there is supposed to be silence. For each robotic arm, you are given a specific time duration required for the arm to complete a full movement cycle along its path. You must ensure that the arm can start and stop playing the notes at the specified times without causing any unwanted pauses. -----Input----- The first line contains an integer n, 1 leq n leq 10, representing the number of robotic arms. Then follow n blocks, in the format: - A single line with two integers d_i, 1 leq d_i leq 10,000 and m_i, 1 leq m_i leq 100, where d_i denotes the time in milliseconds for robotic arm i to complete a full path cycle, and m_i denotes the number of time intervals for which the note played by arm i should be active. - m_i lines, where the j-th line contains two integers t_{i,2j} and t_{i,2j+1} representing the start and stop times in milliseconds for the j-th interval that the note should be played. All intervals are given in strictly ascending order, i.e., t_{i,1} < t_{i,2} < ldots < t_{i,2m_i}. -----Output----- If it is possible to configure the robotic arms to play all the notes as intended, output \\"possible\\". Otherwise, output \\"impossible\\". -----Examples----- Sample Input: 1 8 2 0 5 10 20 Sample Output: possible","solution":"def can_play_notes(n, arms): for d, m, intervals in arms: for i in range(1, len(intervals)): if intervals[i-1][1] > intervals[i][0]: return \\"impossible\\" return \\"possible\\" def parse_input(data): data = data.strip().split(\'n\') n = int(data[0]) arms = [] idx = 1 for _ in range(n): d, m = map(int, data[idx].split()) idx += 1 intervals = [] for __ in range(m): intervals.append(tuple(map(int, data[idx].split()))) idx += 1 arms.append((d, m, intervals)) return n, arms def main(data): n, arms = parse_input(data) return can_play_notes(n, arms)"},{"question":"Palindrome Number Detector Write a function `is_palindrome(number)` that, given a non-negative integer `number`, checks whether or not the number is a palindrome and returns `True` if it is, and `False` otherwise. A palindrome is a number that reads the same both forwards and backwards. # Example: ```python is_palindrome(121) # Returns: True is_palindrome(12321) # Returns: True is_palindrome(123) # Returns: False is_palindrome(80) # Returns: False is_palindrome(1) # Returns: True ``` # Input: - A non-negative integer `number` (0 <= number <= 10^6). # Output: - A boolean `True` or `False` indicating whether the provided number is a palindrome.","solution":"def is_palindrome(number): Checks whether a given number is a palindrome. A palindrome reads the same forwards and backwards. Args: number (int): A non-negative integer. Returns: bool: True if the number is a palindrome, False otherwise. str_num = str(number) return str_num == str_num[::-1]"},{"question":"Given an array of integers representing the cost of items in a shop, and integers m and k. m represents the money you currently have, and k is the maximum number of items you can buy. Determine the maximum number of items you can purchase without exceeding the given amount of money, m. Input The input data contains three lines: 1. An integer n, the number of items (1 ≤ n ≤ 100). 2. A line with n integers representing the costs of the items. Each cost is between 1 and 100, inclusive. 3. Two integers m and k, where 1 ≤ m ≤ 1000 and 1 ≤ k ≤ n. Output Output a single integer: the maximum number of items you can purchase without exceeding the money, m. Examples Input 5 40 10 20 30 50 100 3 Output 3 Input 4 15 30 45 10 50 2 Output 2","solution":"def max_items(n, costs, m, k): Returns the maximum number of items that can be purchased without exceeding the money, m. You can buy at most k items. :param n: int - Number of items :param costs: list of int - Cost of each item :param m: int - Money available :param k: int - Maximum number of items that can be bought :return: int - Maximum number of items that can be bought without exceeding money m costs.sort() # Sort the costs in ascending order total_cost = 0 count = 0 for cost in costs: if count < k and total_cost + cost <= m: total_cost += cost count += 1 else: break return count"},{"question":"An online bookstore keeps track of sales in a ledger. For each sale, it records the book\'s price, the quantity sold, and the reported total amount received. The bookstore manager suspects that some entries might have been incorrectly recorded. To verify, she wants to cross-check each sale to ensure that the total amount received is correct (i.e., it matches the price multiplied by the quantity sold). Your task is to help the bookstore manager by writing a program that verifies the sales entries. INPUT The first line of the input contains an integer N, the number of sales entries. The next N lines each contain three integers representing the price of a book P, the quantity sold Q, and the reported total amount R (i.e., P * Q = R). OUTPUT For each sale entry, print \\"CLARIFIED\\" if P * Q = R, otherwise print \\"ERROR\\". Constraints 0 < P, Q < 10000 0 < R < 1000000000 SAMPLE INPUT 4 25 4 100 42 10 420 7 15 105 100 30 3000 SAMPLE OUTPUT CLARIFIED CLARIFIED CLARIFIED CLARIFIED Explanation The first sale entry is of 4 books each costing 25, giving a total of 4 * 25 = 100, which matches the reported total, so the output is \\"CLARIFIED\\". The second sale entry has 10 books each costing 42, giving a total of 10 * 42 = 420, which matches the reported total, so the output is \\"CLARIFIED\\". The third sale entry is of 15 books each costing 7, giving a total of 15 * 7 = 105, which matches the reported total, so the output is \\"CLARIFIED\\". The fourth sale entry is of 30 books each costing 100, giving a total of 30 * 100 = 3000, which matches the reported total, so the output is \\"CLARIFIED\\".","solution":"def verify_sales(sales): Verifies if each sale entry in the sales list is correct. Parameters: sales (list of tuples): Each tuple contains three integers: (P, Q, R). P - price, Q - quantity, R - reported total amount Returns: list of str: \\"CLARIFIED\\" if P * Q = R, otherwise \\"ERROR\\" results = [] for sale in sales: P, Q, R = sale if P * Q == R: results.append(\\"CLARIFIED\\") else: results.append(\\"ERROR\\") return results"},{"question":"Jane likes to play a game involving arrays and operations. Given an array a of n integers [a_1, a_2, dots, a_n], Jane can perform two types of operations: 1. Select any integer index i (1 le i le n) and increase a_i by 1. Formally, do a_i := a_i + 1. 2. Select any integer index i (1 le i le n) and decrease a_i by 1. Formally, do a_i := a_i - 1. Jane wants to make all elements of the array equal to the median of the array. The median of the array is the middle element when the elements are sorted in non-decreasing order if the number of elements is odd, or the average of the two middle elements if the number of elements is even. Your task is to determine the minimum number of operations required to make all elements of the array equal to the median of the array. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 50) — the size of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (-100 le a_i le 100) — elements of the array. -----Output----- For each test case, output the minimum number of operations required to make all elements in the array equal to the median. -----Example----- Input 2 3 1 2 3 4 1 2 3 4 Output 2 2 -----Note----- In the first test case, the median of the array is 2. We can make all elements equal to 2 by increasing 1 to 2 (1 operation) and decreasing 3 to 2 (1 operation), for a total of 2 operations. In the second test case, the median of the array is 2.5. We can make all elements equal to 2.5 by increasing 1 to 2.5 (1.5 operations, rounded up to 2) and decreasing 4 to 2.5 (1.5 operations, rounded up to 2), for a total of 2 operations. (Note: Since our operations are counted in whole steps and the rounding approach is implementation-dependent, you might have variations in handling whole numbers.)","solution":"def minimum_operations_to_median(test_cases): results = [] for case in test_cases: n, a = case a_sorted = sorted(a) if n % 2 == 1: median = a_sorted[n // 2] else: median = (a_sorted[n // 2 - 1] + a_sorted[n // 2]) / 2 operations = sum(abs(x - median) for x in a) results.append(int(operations)) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') index = 0 t = int(lines[index]) index += 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 a = list(map(int, lines[index].split())) index += 1 test_cases.append((n, a)) return test_cases def parse_output(output_text): return list(map(int, output_text.strip().split(\'n\')))"},{"question":"Alex is working on a sequence of numbers as part of a puzzle game. He has a sequence of n integers. He can perform the following operation any number of times: select any two adjacent elements in the sequence, and replace one of them with their sum, while removing the other. Alex wants to reduce the sequence to a single number and maximize the obtained value. Help Alex determine the maximum possible value he can achieve. -----Input----- The first line contains the number n (2 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the elements of the sequence. -----Output----- Output a single integer — the maximum possible value Alex can achieve by repeatedly performing the operation described. -----Examples----- Input 3 1 2 3 Output 6 Input 4 1 2 3 4 Output 10 -----Note----- In the first test case, Alex can perform the following operations: - Replace 1 and 2 with their sum: the sequence becomes [3, 3] - Replace the two 3s with their sum: the sequence becomes [6] In the second test case, Alex can perform the following operations: - Replace 1 and 2 with their sum: the sequence becomes [3, 3, 4] - Replace the two 3s with their sum: the sequence becomes [6, 4] - Replace 6 and 4 with their sum: the sequence becomes [10]","solution":"def max_possible_value(n, sequence): Given a sequence of n integers, return the maximum possible value that can be obtained by repeatedly replacing two adjacent elements with their sum and removing one of them. return sum(sequence)"},{"question":"Given two integers `x` and `y`. Check if `x` can be represented as `y^a` where `a` is an integer greater than or equal to 2. Example 1: Input: x = 16 y = 2 Output: 1 Explanation: 2^4 = 16, so the output is 1. Example 2: Input: x = 10 y = 3 Output: 0 Explanation: 10 cannot be expressed as 3 raised to any integer power greater than or equal to 2, so the output is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isPower()` which takes the integers `x` and `y` as input parameters and returns 1 if `x` can be represented as `y^a`; otherwise, it returns 0. Expected Time Complexity: O(log x) Expected Auxiliary Space: O(1) Constraints: 1 <= x <= 10^9 2 <= y <= 10^4","solution":"def isPower(x, y): Check if x can be represented as y^a where a is an integer greater than or equal to 2. if y <= 1: return 0 if x == 1: return 0 if y != 1 else 1 current = y power = 2 while current <= x: if current == x: return 1 current *= y power += 1 return 0"},{"question":"Alex is trying to rearrange his bookshelf in the living room. His bookshelf has N slots arranged in a single row, each slot can hold exactly one book. He has N books, each uniquely identified by an integer from 1 to N. Initially, the books are arranged in a random order in the bookshelf. Alex wants to sort his books in ascending order using the minimum number of swaps where each swap involves choosing any two books and swapping their positions. Write a function to determine the minimum number of swaps required to sort the bookshelf. -----Input----- The first line contains an integer N (1 le N le 100000), the number of books. The second line contains N unique integers separated by spaces that represent the initial order of the books on the bookshelf. -----Output----- Output the minimum number of swaps required to sort the books in ascending order. -----Examples----- Sample Input: 5 4 3 2 1 5 Sample Output: 2 Sample Input: 4 2 3 4 1 Sample Output: 3","solution":"def min_swaps_to_sort_books(N, books): Returns the minimum number of swaps required to sort the books in ascending order. # Create a pair of the book and its index arr = list(enumerate(books)) # Sort the array based on the book values arr.sort(key=lambda it: it[1]) # To keep track of whether an element is visited or not visited = [False] * N swaps = 0 for i in range(N): # element is already in the correct place or already visited if visited[i] or arr[i][0] == i: continue # Start of a new cycle cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr[x][0] cycle_size += 1 if cycle_size > 0: swaps += cycle_size - 1 return swaps"},{"question":"Given a list of words, determine if all words in the list are palindromes. A word is considered a palindrome if it reads the same forward and backward. Return texttt{YES} if all words in the list are palindromes, otherwise return texttt{NO}. ------ Input Format ------ The first line contains an integer n, the number of words in the list. The next n lines each contain a single word. ------ Output Format ------ Print texttt{YES} if all words are palindromes. Otherwise, print texttt{NO}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes} and texttt{YES} will all be treated as identical). ------ Constraints ------ 1 ≤ n ≤ 100 1 ≤ length of each word leq 100 ------ Sample Input 1 ------ 3 radar level deified ------ Sample Output 1 ------ YES ------ Sample Input 2 ------ 3 hello world wow ------ Sample Output 2 ------ NO ------ Explanation ------ In the first example, all the words \'radar\', \'level\', and \'deified\' are palindromes. In the second example, \'hello\' and \'world\' are not palindromes while only \'wow\' is, hence the answer is NO.","solution":"def are_all_palindromes(words): Determines if all words in the list are palindromes. Args: words (list of str): List of words to check. Returns: str: \'YES\' if all words are palindromes, otherwise \'NO\'. for word in words: if word != word[::-1]: return \\"NO\\" return \\"YES\\""},{"question":"An array of integers is considered \'Zigzag\' if the difference between the successive elements strictly alternates between positive and negative. In other words, ∀i (1 ≤ i < n-1), either (a[i] - a[i-1] > 0 and a[i+1] - a[i] < 0) or (a[i] - a[i-1] < 0 and a[i+1] - a[i] > 0) holds true where n is the number of elements in the array. Given an array of integers, determine if it is a Zigzag array or not. For each test case, print \\"ZIGZAG\\" if the array satisfies the conditions, and \\"NOT ZIGZAG\\" otherwise. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer n, representing the number of elements in the array. The second line contains n space-separated integers a[1], a[2], ..., a[n], representing the array. ------ Output ------ For each test case, output a single line containing the answer — \\"ZIGZAG\\" if the array is a Zigzag array, and \\"NOT ZIGZAG\\" otherwise. Don\'t print the quotes. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ n ≤ 10^{5} 1 ≤ a[i] ≤ 10^{9} ------ Subtasks ------ Subtask #1 (50 points): 2 ≤ n ≤ 50 Subtask #2 (50 points): Original constraints. ------ Sample Input 1 ------ 4 4 1 3 2 4 3 1 2 3 5 10 5 15 3 7 4 2 2 2 2 ------ Sample Output 1 ------ ZIGZAG NOT ZIGZAG ZIGZAG NOT ZIGZAG ----- Explanation 1 ------ The first array satisfies the zigzag condition since differences alternate between positive (3-1=2) and negative (2-3=-1) and then positive (4-2=2). The second array does not satisfy because the differences between successive elements do not alternate between positive and negative. The third array meets the condition since differences alternate: (5-10=-5), (15-5=10), and (3-15=-12). The fourth array does not satisfy because all elements are the same, and thus there are no alternating differences.","solution":"def is_zigzag(n, arr): Check if the array is a Zigzag array or not. if n < 2: return \\"NOT ZIGZAG\\" for i in range(1, n-1): if not ((arr[i] - arr[i-1] > 0 and arr[i+1] - arr[i] < 0) or (arr[i] - arr[i-1] < 0 and arr[i+1] - arr[i] > 0)): return \\"NOT ZIGZAG\\" return \\"ZIGZAG\\" def zigzag_test_cases(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(is_zigzag(n, arr)) return results"},{"question":"A secret agency has new encryption codes to decode messages received from their spies in the field. In order to test the security of these encryption codes, they need to find the maximum number of distinct subsequences that can be formed from a given message string. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. The agency needs your help to determine the number of distinct subsequences that can be formed from the given message string. Since the number of distinct subsequences can be very large, return the result modulo 1,000,000,007 (10^9 + 7). Input: The first line contains a single integer `T`, the number of test cases (1 ≤ T ≤ 100). Each of the next `T` lines contains a single string `S` consisting of lowercase alphabets only (1 ≤ |S| ≤ 100,000). Output: For each test case, output the number of distinct subsequences of the given string modulo 1,000,000,007. Examples: Input: 2 abc aba Output: 8 7 Explanation: For the first test case, \\"abc\\" has the following distinct subsequences: \\"\\", \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"abc\\". So the result is 8. For the second test case, \\"aba\\" has the following distinct subsequences: \\"\\", \\"a\\", \\"b\\", \\"aa\\", \\"ab\\", \\"ba\\", \\"aba\\". So the result is 7.","solution":"def count_distinct_subsequences(S): MOD = 1000000007 n = len(S) dp = [1] * (n + 1) last = {} for i in range(1, n + 1): dp[i] = (2 * dp[i - 1]) % MOD if S[i - 1] in last: dp[i] = (dp[i] - dp[last[S[i - 1]] - 1]) % MOD last[S[i - 1]] = i return dp[n] def distinct_subsequences(T, strings): results = [] for S in strings: results.append(count_distinct_subsequences(S)) return results"},{"question":"Given an integer N, your task is to return the sum of its digits. Example 1: Input: N = 123 Output: 6 Explanation: Sum of the digits 1, 2, and 3 is 6. Example 2: Input: N = 456 Output: 15 Explanation: Sum of the digits 4, 5, and 6 is 15. Your Task: You don\'t need to read input or print anything. Your task is to complete the function digitSum() which takes an integer N and returns the sum of its digits. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 0 <= N <= 1000000","solution":"def digitSum(N): Return the sum of the digits of the integer N. return sum(int(digit) for digit in str(N))"},{"question":"------ Problem Statement ------ Given an integer array of size N, find the maximum possible sum of a contiguous subarray with the constraint that no two elements from this subarray should be the same number. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, print a single line containing the maximum possible sum of a contiguous subarray, satisfying the no-repeating-elements constraint. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 for each valid i the sum of N over all test cases does not exceed 10^5 ------ Subtasks ------ Subtask #1 (30 points): the sum of N over all test cases does not exceed 10^3 Subtask #2 (70 points): original constraints ------ Sample Input 1 ------ 1 5 2 1 4 3 2 ------ Sample Output 1 ------ 10 ------ Explanation 1 ------ For the given array [2, 1, 4, 3, 2], the contiguous subarray [2, 1, 4, 3] has no repeating elements and has the maximum possible sum which is 2 + 1 + 4 + 3 = 10.","solution":"def max_unique_subarray_sum(arr): Returns the maximum possible sum of a contiguous subarray with unique elements. current_sum = 0 max_sum = 0 num_map = {} # to keep track of the last index of each number start = 0 for i, num in enumerate(arr): if num in num_map and num_map[num] >= start: start = num_map[num] + 1 current_sum = sum(arr[start:i + 1]) else: current_sum += num num_map[num] = i max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(max_unique_subarray_sum(arr)) return results"},{"question":"Shubham is training for a marathon and wants to track his running performance over N days. He records his running distance for each day in an array where the value at the i-th index represents the distance run on the i-th day. Besides knowing just the distance, he wants to know his maximum improvement streak. A maximum improvement streak is the longest subarray where each day\'s running distance is greater than the previous day\'s running distance. Given the array of running distances, help Shubham to find the length of his maximum improvement streak. -----Input----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. For each test case, the first line contains an integer N, the number of days. The second line contains N space-separated integers, representing the running distances for each day. -----Output----- For each test case, print a single line containing the length of the maximum improvement streak. -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ N ≤ 105 - 1 ≤ Distance[i] ≤ 109 - Sum of N over all test cases does not exceed 106. -----Example----- Input: 3 6 1 2 3 2 4 5 5 5 4 3 2 1 4 3 10 2 3 Output: 3 1 2 -----Explanation----- Example case 1: The maximum improvement streak is from day 1 to day 3 (distances 1, 2, and 3). Example case 2: There is no improvement in any subarray longer than one day. Example case 3: The maximum improvement streak is from day 1 to day 2 (distances 3 and 10).","solution":"def max_improvement_streak(T, test_cases): results = [] for t in range(T): N, distances = test_cases[t] if N == 1: results.append(1) continue max_streak = 1 current_streak = 1 for i in range(1, N): if distances[i] > distances[i-1]: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 results.append(max_streak) return results"},{"question":"A new zoo is being built, which will feature an innovative system to organize the animal enclosures. Each enclosure is represented by a circle, and for logistical reasons, each circle should be tangent to at most two other circles. Additionally, the zoo wants to find out if it\'s possible to divide the animals into multiple non-intersecting sets of circles such that each set can be arranged linearly (i.e., each circle in a set shares exactly one tangent with its predecessor and one with its successor, except the first and last circle in each set which share only one tangent). Your task is to determine if this arrangement is possible, and if so, to output one possible way to achieve this arrangement. -----Input----- - The first line of the input contains an integer n (1 ≤ n ≤ 1,000) – the number of circles (animal enclosures). -----Output----- - If it\'s not possible to arrange the circles as required, print \\"NO\\". - Otherwise, print \\"YES\\" followed by the arrangement. Each arrangement should be represented by a single line containing the indices (from 1 to n) of circles in the order they should be placed. Multiple lines represent different sets. -----Examples----- Input 5 Output YES 1 2 3 4 5 Input 3 Output YES 1 2 3 Input 1 Output YES 1 Input 2 Output YES 1 2 Input 4 Output YES 1 2 3 4 -----Explanation----- In the first example, it\'s possible to break down the circles into two sets: {1, 2} and {3, 4, 5}. Each set forms a linear arrangement of circles. In the second example, the circles {1, 2, 3} can be arranged in one line. Each valid arrangement ensures that no circle is tangent to more than two other circles, and the sets are independent of each other. In the case of a single circle, the requirements are trivially satisfied as there are no other circles to form tangents with. In the case of two circles, they can always be arranged tangent to each other without any issue.","solution":"def arrange_circles(n): Determines if it\'s possible to arrange the animal enclosures as described and if so, arranges them. Parameters: n (int): The number of circles (animal enclosures). Returns: str: \\"NO\\" if it\'s not possible to arrange them accordingly, otherwise \\"YES\\" followed by the arrangement. if n == 1: return \\"YESn1\\" if n == 2: return \\"YESn1 2\\" if n == 3: return \\"YESn1 2 3\\" result = [\\"YES\\"] sets = [] i = 1 while i <= n: set_line = [] for j in range(i, min(i + 3, n + 1)): set_line.append(str(j)) sets.append(\\" \\".join(set_line)) i += 3 result.extend(sets) return \\"n\\".join(result)"},{"question":"Implement a function that receives an integer n (1 <= n <= 5000) and returns the number of trailing zeros in the factorial of n. Trailing zeros are created by pairs of factors 2 and 5 in prime factors of the number, and because in factorials there are always more factors of 2 than factors of 5, the problem reduces to counting the number of factors of 5. To find how many times 5 is a factor in the factorial of n, you can repeatedly divide n by 5, 25, 125, etc., and sum up the quotients. ```python def trailing_zeros(n): count = 0 i = 5 while (n // i >= 1): count += n // i i *= 5 return count # Examples print(trailing_zeros(5)) # Output: 1 -> 5! = 120 (one trailing zero) print(trailing_zeros(10)) # Output: 2 -> 10! = 3628800 (two trailing zeros) print(trailing_zeros(25)) # Output: 6 -> 25! = 15511210043330985984000000 (six trailing zeros) ``` Implement the function `trailing_zeros` which correctly counts and returns the number of trailing zeros in the factorial of any given integer n.","solution":"def trailing_zeros(n): Returns the number of trailing zeros in the factorial of n. Trailing zeros are produced by pairs of factors 2 and 5. Because there are usually more factors of 2, it reduces to counting the number of factors 5. count = 0 i = 5 while n // i >= 1: count += n // i i *= 5 return count # Examples print(trailing_zeros(5)) # Output: 1 -> 5! = 120 (one trailing zero) print(trailing_zeros(10)) # Output: 2 -> 10! = 3628800 (two trailing zeros) print(trailing_zeros(25)) # Output: 6 -> 25! = 15511210043330985984000000 (six trailing zeros)"},{"question":"You are given a sequence of positive integers. Your task is to find the longest subsequence that is also a zigzag sequence. A zigzag sequence is a sequence where each element is either strictly greater than or strictly less than its predecessor. Write a function `longest_zigzag` that takes a list of integers and returns the length of the longest zigzag sequence. # Input - A list `numbers` consisting of N positive integers (1 ≤ N ≤ 1000). # Output - An integer representing the length of the longest zigzag sequence. # Example Input: ``` [1, 7, 4, 9, 2, 5] ``` Output: ``` 6 ``` Input: ``` [1, 2, 3, 4, 5] ``` Output: ``` 2 ``` Input: ``` [10, 22, 9, 12, 8, 5, 20, 3] ``` Output: ``` 7 ``` # Note - In the first example, the entire list is a zigzag sequence. - In the second example, the zigzag sequence can only be between any two adjacent elements since the sequence is strictly increasing. - In the third example, one possible longest zigzag sequence is `[10, 9, 12, 8, 5, 20, 3]`.","solution":"def longest_zigzag(numbers): Given a list of positive integers, returns the length of the longest zigzag sequence. if len(numbers) < 2: return len(numbers) up = down = 1 # Initialize lengths of zigzag sequences ending in up or down direction for i in range(1, len(numbers)): if numbers[i] > numbers[i - 1]: up = down + 1 elif numbers[i] < numbers[i - 1]: down = up + 1 return max(up, down)"},{"question":"You are given an array of integers `arr` and an integer `x`. Your task is to find the minimal length of a contiguous subarray of which the sum is greater than or equal to `x`. If there isn\'t one, return `0` instead. For example, given the array `[2, 3, 1, 2, 4, 3]` and `x = 7`, the minimal length subarray with a sum greater than or equal to `7` is `[4, 3]`, so the desired output is `2`. -----Input----- The first line contains two integers `n` and `x` (1 le n le 10^5, 1 le x le 10^9). The second line contains `n` integers representing the array `arr` (1 le arr[i] le 10^5). -----Output----- Print the minimal length of a contiguous subarray of which the sum is greater than or equal to `x`. If there isn\'t one, return `0`. -----Examples----- Input 6 7 2 3 1 2 4 3 Output 2 Input 8 15 1 2 3 4 5 6 7 8 Output 2","solution":"def min_subarray_len(arr, x): Finds the minimal length of a contiguous subarray of which the sum is greater than or equal to x. n = len(arr) left = 0 total_sum = 0 min_length = float(\'inf\') for right in range(n): total_sum += arr[right] while total_sum >= x: min_length = min(min_length, right - left + 1) total_sum -= arr[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Write a function `find_duplicates` that takes a list of integers and returns a list of all the duplicated integers sorted in ascending order. Each duplicated integer should appear only once in the result, even if it is repeated more than twice in the input list. You may assume the input list contains no more than 1000 elements. **Function Signature:** ```python def find_duplicates(numbers: List[int]) -> List[int]: pass ``` **Example:** ```python print(find_duplicates([4, 6, 2, 4, 3, 6, 1, 5])) # Output: [4, 6] print(find_duplicates([1, 2, 3, 4, 5])) # Output: [] print(find_duplicates([9, 9, 9, 8, 8, 8, 7, 7, 7])) # Output: [7, 8, 9] ```","solution":"from typing import List def find_duplicates(numbers: List[int]) -> List[int]: Returns a list of all the duplicated integers sorted in ascending order. Each duplicated integer appears only once in the result. counts = {} for number in numbers: if number in counts: counts[number] += 1 else: counts[number] = 1 duplicates = [number for number, count in counts.items() if count > 1] return sorted(duplicates)"},{"question":"You are given a collection of n strings, and you are allowed to perform exactly k operations on these strings. Each operation allows you to swap any two characters in the same string. To make things interesting, your task is to determine if you can make all strings equal after exactly k operations. A string a can be made equal to string b if they contain the same characters in the same frequencies, regardless of their order. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 100), the number of strings and the number of operations allowed. Each of the next n lines contains a single string, with the length of each string being between 1 and 100 characters. The strings will only contain lowercase English letters. Output Print \\"YES\\" if it is possible to make all strings equal using exactly k operations, otherwise print \\"NO\\". Examples Input 3 0 aabb bbaa ab Output NO Input 3 2 abc bca cab Output YES Input 2 1 aa aa Output YES","solution":"def can_make_strings_equal(n, k, strings): from collections import Counter # Calculate the frequency of characters for the first string base_counter = Counter(strings[0]) # Compare the frequency of characters with each of the other strings for string in strings[1:]: if Counter(string) != base_counter: return \\"NO\\" # If all have the same frequency of characters, return \\"YES\\" return \\"YES\\""},{"question":"A new company wants to build a cutting-edge training platform for its employees using Artificial Intelligence. They have determined that the first feature will be an exercise similar to a well-known coding interview puzzle. Given the constraints below, help them design the problem. You are given a list of integers representing house numbers on a street, arranged in no particular order. A new law mandates that all even-numbered houses must be lit up at night to prevent accidents. Your task is to write a program that, given the list of house numbers, will count how many of them are even and then output the list of these even-numbered houses in ascending order. -----Input----- The first line of input will contain an integer N (1 le N le 100), representing the number of houses. Each of the following N lines contains one integer, representing a house number. All house numbers are positive integers less than 1000. -----Output----- Output the count of even-numbered houses on the first line. On the second line, output the list of even-numbered houses in ascending order, with each number separated by a space. If there are no even-numbered houses, output an empty line after the count. -----Examples----- Sample Input 1: 5 123 456 789 246 135 Sample Output 1: 2 246 456 Sample Input 2: 4 101 203 305 407 Sample Output 2: 0 Sample Input 3: 3 44 22 88 Sample Output 3: 3 22 44 88","solution":"def count_and_list_evens(house_numbers): Given a list of house numbers, count how many of them are even and return the list of these even-numbered houses in ascending order. even_houses = [house for house in house_numbers if house % 2 == 0] even_houses.sort() return len(even_houses), even_houses"},{"question":"You are given a number of timestamps, each representing a unique time of day in 24-hour format (\\"HH:MM\\"). Write a program to determine the minimum difference in minutes between any two of the given timestamps. If there\'s only one timestamp given, the minimum difference should be evaluated by considering the next occurrence of the same timestamp on the following day. Input: - The first line contains an integer N (1 ≤ N ≤ 100), the number of timestamps. - The next N lines each contain a single timestamp in the format \\"HH:MM\\". Output: - Print the minimum difference in minutes between any two of the given timestamps. Example: Input: 4 23:59 00:00 12:34 23:55 Output: 1 Input: 2 15:15 15:15 Output: 0","solution":"from datetime import datetime, timedelta def find_minimum_difference(timestamps): Finds the minimum difference in minutes between any two given timestamps. :param timestamps: List of timestamps in \\"HH:MM\\" format :return: Minimum difference in minutes between any two timestamps time_format = \\"%H:%M\\" times = [datetime.strptime(time, time_format) for time in timestamps] # Sort times to make it easier to find adjacent differences times.sort() min_diff = float(\'inf\') for i in range(len(times)): current_time = times[i] next_time = times[(i + 1) % len(times)] # next time in circular manner diff = (next_time - current_time).total_seconds() / 60 if diff < 0: diff += 24 * 60 # wrap around for the next day min_diff = min(min_diff, diff) return int(min_diff) # Example Usage N = 4 timestamps = [\\"23:59\\", \\"00:00\\", \\"12:34\\", \\"23:55\\"] print(find_minimum_difference(timestamps)) # Output: 1 N = 2 timestamps = [\\"15:15\\", \\"15:15\\"] print(find_minimum_difference(timestamps)) # Output: 0"},{"question":"In a faraway kingdom, there exists an enchanted forest where each tree has a unique magical power. To control the magical influence of the forest, the kingdom\'s wizard needs to track and manage the magical powers of these trees. You are given a forest with `n` trees, each having a unique id from 1 to `n`. The kingdom initially defines the magical power, in the form of an integer, associated with each tree. The wizard can perform two types of operations on the forest: 1. **Update Operation**: Increase the magical power of all trees within a specified range [l, r] by a given value `v`. 2. **Query Operation**: Find the maximum magical power among all trees within a specified range [l, r]. The task is to implement a system that can efficiently process these operations. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100000), the number of trees. - The second line contains `n` space-separated integers, where the `i-th` integer represents the initial magical power of the tree with id `i`. - The third line contains an integer `q` (1 ≤ q ≤ 100000), the number of queries. - The following `q` lines describe the queries. Each query is represented in one of the following formats: - `1 l r v`: Update operation. Increase the magical power of all trees from `l` to `r` (inclusive) by `v`. - `2 l r`: Query operation. Find and print the maximum magical power from tree `l` to tree `r` (inclusive). # Output: For each query of type `2`, output the maximum magical power in the specified range. # Example Input: ``` 5 3 5 2 1 4 4 1 2 4 3 2 1 5 2 2 3 1 1 3 2 2 1 5 ``` # Example Output: ``` 8 8 7 ``` # Explanation: 1. `1 2 4 3`: Increase the magical powers of trees from 2 to 4 by 3. The updated magical powers are `[3, 8, 5, 4, 4]`. 2. `2 1 5`: Maximum magical power in the range 1 to 5 is 8. 3. `2 2 3`: Maximum magical power in the range 2 to 3 is 8. 4. `1 1 3 2`: Increase the magical powers of trees from 1 to 3 by 2. The updated magical powers are `[5, 10, 7, 4, 4]`. 5. `2 1 5`: Maximum magical power in the range 1 to 5 is 10.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (4 * self.n) self.lazy = [0] * (4 * self.n) self.build(0, 0, self.n - 1, data) def build(self, node, l, r, data): if l == r: self.tree[node] = data[l] else: mid = (l + r) // 2 self.build(node * 2 + 1, l, mid, data) self.build(node * 2 + 2, mid + 1, r, data) self.tree[node] = max(self.tree[node * 2 + 1], self.tree[node * 2 + 2]) def update_range(self, node, l, r, ul, ur, value): if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if l != r: self.lazy[node * 2 + 1] += self.lazy[node] self.lazy[node * 2 + 2] += self.lazy[node] self.lazy[node] = 0 if l > r or l > ur or r < ul: return if l >= ul and r <= ur: self.tree[node] += value if l != r: self.lazy[node * 2 + 1] += value self.lazy[node * 2 + 2] += value return mid = (l + r) // 2 self.update_range(node * 2 + 1, l, mid, ul, ur, value) self.update_range(node * 2 + 2, mid + 1, r, ul, ur, value) self.tree[node] = max(self.tree[node * 2 + 1], self.tree[node * 2 + 2]) def query_range(self, node, l, r, ql, qr): if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if l != r: self.lazy[node * 2 + 1] += self.lazy[node] self.lazy[node * 2 + 2] += self.lazy[node] self.lazy[node] = 0 if l > r or l > qr or r < ql: return float(\'-inf\') if l >= ql and r <= qr: return self.tree[node] mid = (l + r) // 2 left_query = self.query_range(node * 2 + 1, l, mid, ql, qr) right_query = self.query_range(node * 2 + 2, mid + 1, r, ql, qr) return max(left_query, right_query) def enchanted_forest(n, powers, queries): seg_tree = SegmentTree(powers) results = [] for query in queries: if query[0] == 1: _, l, r, v = query seg_tree.update_range(0, 0, n - 1, l - 1, r - 1, v) elif query[0] == 2: _, l, r = query result = seg_tree.query_range(0, 0, n - 1, l - 1, r - 1) results.append(result) return results"},{"question":"Sarah is playing a game where she needs to navigate through a grid of size n x n. Her starting position is at the top-left corner of the grid (1,1) and her goal is to reach the bottom-right corner (n,n). She can only move right or down at any given step. However, some of the cells in the grid contain obstacles that block her path. Sarah needs to find the number of unique paths from the start to the goal that avoid all obstacles. A grid cell with a 0 represents an open space where Sarah can walk, and a cell with a 1 represents an obstacle. Write a function to calculate the number of unique paths Sarah can take to reach her goal. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the grid. Each of the next n lines contains n integers (either 0 or 1) separated by spaces, representing the grid. -----Output----- Print a single number — the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Examples----- Input 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 0 1 0 0 Output 1 -----Note----- In the first example, Sarah has two paths: right -> right -> down -> down, and down -> down -> right -> right. In the second example, Sarah has only one path: down -> right. If the starting cell or the destination cell has an obstacle, then there are no possible paths and the output should be 0.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right corner of the grid while avoiding obstacles. n = len(grid) # If the start or end point is an obstacle, return 0 if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are given an array of positive integers. A subarray is a contiguous part of an array. Your task is to find the maximum sum of any subarray with at least one element and the minimum sum of any subarray with at least one element. -----Input----- The input consists of two lines: 1. The first line contains an integer n (1 leq n leq 1000) representing the size of the array. 2. The second line contains n positive integers separated by spaces, representing the elements of the array. -----Output----- Output two integers separated by a space: the maximum sum of any subarray and the minimum sum of any subarray. -----Examples----- Sample Input 1: 5 1 2 3 4 5 Sample Output 1: 15 1 Sample Input 2: 6 3 -2 5 -1 6 -3 Sample Output 2: 10 -3","solution":"def max_min_subarray_sum(arr): Returns the maximum and minimum sum of any subarray of the given array. n = len(arr) # Initialize the variables for storing maximum and minimum subarray sums max_sum = arr[0] min_sum = arr[0] current_max = arr[0] current_min = arr[0] for i in range(1, n): # Maximum subarray sum using Kadane\'s algorithm current_max = max(arr[i], current_max + arr[i]) max_sum = max(max_sum, current_max) # Minimum subarray sum using modified Kadane\'s algorithm current_min = min(arr[i], current_min + arr[i]) min_sum = min(min_sum, current_min) return max_sum, min_sum"},{"question":"This problem involves finding the longest palindromic subsequence within a given string. A palindrome is a sequence that reads the same forwards as backwards. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. The problem consists of two subproblems: * In subproblem P1, you are required to find and return the length of the longest palindromic subsequence. This will earn you 3 points. * In subproblem P2, you must also output the longest palindromic subsequence itself (if there are multiple, any one is acceptable). This will earn you 17 points. Input The input consists of a single string S of length n (1 ≤ n ≤ 1000) containing only lowercase English letters. Output For subproblem P1: Print a single integer, the length of the longest palindromic subsequence. For subproblem P2: Print two lines, first the integer which is the length of the longest palindromic subsequence, and second the longest palindromic subsequence itself. Examples Input ``` bbabcbcab ``` Output for subproblem P1 ``` 7 ``` Output for subproblem P2 ``` 7 babcbab ``` Input ``` agbdba ``` Output for subproblem P1 ``` 5 ``` Output for subproblem P2 ``` 5 abdba ``` In the first example, the longest palindromic subsequence is \\"babcbab\\" (7 characters), which reads the same forwards and backwards. The second example has multiple longest palindromic subsequences, one of which is \\"abdba\\" (5 characters).","solution":"def longest_palindromic_subsequence(S): n = len(S) # Create a table to store the length of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Initialize the table for subsequences of length 1 for i in range(n): dp[i][i] = 1 # Fill the table for subsequences of length greater than 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if S[i] == S[j] and cl == 2: dp[i][j] = 2 elif S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) length_lps = dp[0][n - 1] # Reconstruct the palindromic subsequence seq = [\'\'] * length_lps i, j = 0, n - 1 start, end = 0, length_lps - 1 while i <= j: if S[i] == S[j]: seq[start] = S[i] seq[end] = S[j] start += 1 end -= 1 i += 1 j -= 1 elif dp[i + 1][j] > dp[i][j - 1]: i += 1 else: j -= 1 return length_lps, \'\'.join(seq)"},{"question":"Given an array of integers and a maximum allowed sum for its subarrays, find the length of the smallest subarray whose sum is greater than or equal to the given maximum allowed sum. Example 1: Input: arr = [2, 1, 5, 2, 3, 2] S = 7 Output: 2 Explanation: The smallest subarray with a sum greater than or equal to 7 is [5, 2]. Example 2: Input: arr = [2, 1, 5, 2, 8] S = 7 Output: 1 Explanation: The smallest subarray with a sum greater than or equal to 7 is [8]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSmallestSubarray() which takes an array of integers arr and an integer S as input parameters and returns the length of the smallest subarray with a sum greater than or equal to S. If no such subarray exists, return 0. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 100000 1 <= arr[i] <= 10000 1 <= S <= 100000000","solution":"def findSmallestSubarray(arr, S): Returns the length of the smallest subarray whose sum is greater than or equal to S. start_index = 0 current_sum = 0 min_length = float(\'inf\') for end_index in range(len(arr)): current_sum += arr[end_index] while current_sum >= S: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Create a class `ComplexNumber` that handles basic operations for complex numbers. In your class, you should support the following operations, given ComplexNumber `a` and ComplexNumber `b`: ```python a + b # returns a new ComplexNumber that is the resultant of adding them a - b # same, but with subtraction a * b # returns a new ComplexNumber that is the product of a and b a / b # returns a new ComplexNumber that is the quotient of a divided by b a == b # returns true if the real and imaginary parts of a and b are equal a.conjugate() # returns a new ComplexNumber that is the conjugate of a a.magnitude() # returns a number that is the magnitude (absolute value) of a a.argument() # returns a number that is the argument (angle) of a in radians a.real # gets the real part of the complex number a.imaginary # gets the imaginary part of the complex number str(a) # returns a string representation of the complex number in the form \\"a + bi\\" ComplexNumber(real, imag) # creates a new ComplexNumber from the supplied real and imaginary parts ``` The test cases will not mutate the produced ComplexNumber objects.","solution":"import math class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __add__(self, other): return ComplexNumber(self.real + other.real, self.imaginary + other.imaginary) def __sub__(self, other): return ComplexNumber(self.real - other.real, self.imaginary - other.imaginary) def __mul__(self, other): real_part = self.real * other.real - self.imaginary * other.imaginary imaginary_part = self.real * other.imaginary + self.imaginary * other.real return ComplexNumber(real_part, imaginary_part) def __truediv__(self, other): real_part = (self.real * other.real + self.imaginary * other.imaginary) / (other.real**2 + other.imaginary**2) imaginary_part = (self.imaginary * other.real - self.real * other.imaginary) / (other.real**2 + other.imaginary**2) return ComplexNumber(real_part, imaginary_part) def __eq__(self, other): return self.real == other.real and self.imaginary == other.imaginary def conjugate(self): return ComplexNumber(self.real, -self.imaginary) def magnitude(self): return math.sqrt(self.real**2 + self.imaginary**2) def argument(self): return math.atan2(self.imaginary, self.real) def __str__(self): return f\\"{self.real} + {self.imaginary}i\\""},{"question":"Jason has recently learned about binary trees and their various traversals. He is particularly interested in constructing a binary tree from its preorder and inorder traversal arrays. He knows that the unique binary tree can be constructed if both preorder and inorder traversal arrays are given. He wants your help in constructing the binary tree and then returning the postorder traversal of the constructed tree. Given two integer arrays representing the preorder and inorder traversal of a binary tree, construct the binary tree and return its postorder traversal as an array. -----Input----- The first line contains a single integer N (1 leq N leq 10^4), representing the number of nodes in the binary tree. The second line contains N space-separated integers representing the preorder traversal of the binary tree. The third line contains N space-separated integers representing the inorder traversal of the binary tree. -----Output----- Output a single line containing N space-separated integers representing the postorder traversal of the constructed binary tree. -----Example----- Input 5 3 9 20 15 7 9 3 15 20 7 Output 9 15 7 20 3 -----Note----- In the example above, the preorder traversal is [3, 9, 20, 15, 7] and the inorder traversal is [9, 3, 15, 20, 7]. The constructed binary tree will be: ``` 3 / 9 20 / 15 7 ``` The postorder traversal of the above tree is [9, 15, 7, 20, 3].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTree(preorder, inorder): if not preorder or not inorder: return None # Root is the first element in preorder traversal root_val = preorder[0] root = TreeNode(root_val) # Finding the index of the root in inorder traversal root_index = inorder.index(root_val) # Constructing left and right subtrees root.left = buildTree(preorder[1:1 + root_index], inorder[:root_index]) root.right = buildTree(preorder[1 + root_index:], inorder[root_index + 1:]) return root def postOrderTraversal(root): if root is None: return [] return postOrderTraversal(root.left) + postOrderTraversal(root.right) + [root.val] def construct_postorder_from_pre_in(preorder, inorder): root = buildTree(preorder, inorder) return postOrderTraversal(root)"},{"question":"Given an array of integers and several queries, each query asking whether a given subarray has a subsequence that forms an arithmetic progression with a given common difference. Input: The first line contains an integer, n (1 ≤ n ≤ 100 000), representing the length of the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer, q (1 ≤ q ≤ 50 000), representing the number of queries. The next q lines each contain three integers l, r, and d (1 ≤ l ≤ r ≤ n, -10^9 ≤ d ≤ 10^9) – the bounds of the subarray and the common difference. Output: For each query, output \\"Yes\\" if there exists a subsequence within the subarray from l to r (inclusive) that forms an arithmetic progression with difference d, and \\"No\\" otherwise. Examples: Input: 6 1 3 5 7 9 11 2 1 6 2 2 5 4 Output: Yes No Input: 5 10 20 30 40 50 3 1 3 10 2 4 -10 1 5 0 Output: Yes No No Note: In the first sample, for the first query, the whole array is an arithmetic progression with a common difference of 2. For the second query, no subsequence in the range [2, 5] matches a common difference of 4. In the second sample, the subsequence from [1, 3] matches the common difference of 10. No subsequences within the ranges of the other queries match their given common differences.","solution":"def has_arithmetic_subsequence(n, array, q, queries): results = [] for l, r, d in queries: # Extract the subarray [l-1:r] (0-indexed in python) subarray = array[l-1:r] subarray.sort() if len(subarray) < 2: results.append(\\"No\\") continue found = False for start in range(len(subarray)): current_value = subarray[start] count = 1 for i in range(start + 1, len(subarray)): if subarray[i] - current_value == d * count: count += 1 if count >= 3: # We need at least 3 elements for a valid subsequence found = True break if found: break if found: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Lucas is working on a new service to manage student test scores and needs to perform some analysis. He has a list of test scores from different students and wants to segment these scores into groups such that each group contains students whose scores are consecutive values. Lucas wants to find the smallest possible difference between the highest score of any group and the lowest score of any group. Each group must contain at least `m` students. Given the scores of `p` students, help Lucas to find the minimal difference between the highest and lowest scores in the group where the difference is the smallest across any possible grouping that meets the requirement. -----Input----- The first line contains two integers p and m (1 ≤ m ≤ p ≤ 3·10^5) — number of students and minimum size of a group. The second line contains p integers s_1, s_2, ..., s_{p} (1 ≤ s_{i} ≤ 10^9), where s_{i} is the score of the i-th student. Note: Scores provided are not necessarily distinct. -----Output----- Print the minimal possible difference between the highest and lowest scores in the group where the difference is the smallest. -----Examples----- Input 7 3 10 20 30 15 25 35 40 Output 10 Input 5 2 87 90 85 88 89 Output 1 -----Explanation----- In the first example, the scores can be grouped as [10, 15, 20] and [25, 30, 35, 40], the minimal difference for the group with at least 3 students is 10. In the second example, a group of at least 2 students can be [87, 88] or [88, 89] or [89, 90]. The smallest difference is between [88, 89], which is 1.","solution":"def minimal_difference(p, m, scores): Finds the minimal possible difference between the highest and lowest scores in a group where the difference is the smallest across any possible grouping that meets the size requirement. Parameters: p (int): Number of students. m (int): Minimum size of a group. scores (list of int): List of scores of the students. Returns: int: The minimal possible difference between the highest and lowest scores in the group. # Step 1: Sort the scores scores.sort() # Step 2: Initialize minimal difference to a very high value min_diff = float(\'inf\') # Step 3: Traverse through the sorted scores to find the minimal difference for i in range(p - m + 1): current_diff = scores[i + m - 1] - scores[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"You have been given an array of integers which represents the number of books on the shelf in a bookstore. Your task is to determine the maximum number of books you can grab consecutively without exceeding the limit of k pages in total. For each book, you are given the number of pages it contains. You can grab books continuously from any starting position till any ending position, but the sum of pages in the books you grab should not exceed k pages. -----Input----- The first line contains an integer t (1 le t le 100), the number of test cases. Each test case consists of two lines: 1. The first line contains two integers n and k (1 le n le 100000, 1 le k le 10^9) – the number of books and the maximum number of pages you can grab. 2. The second line contains n integers pages_1, pages_2, ldots, pages_n (1 le pages_i le 1000) – the number of pages in each book. -----Output----- For each test case, print a single integer – the maximum number of books you can grab consecutively without exceeding the limit of k pages. -----Examples----- Input 2 5 10 1 2 3 4 5 4 5 4 1 1 2 Output 4 3 -----Note----- In the first test case, you can grab the first four books, which have 1, 2, 3, and 4 pages respectively, giving a total of 10 pages which is within the limit. In the second test case, you can grab the last three books (1 + 1 + 2), which totals 4 pages, staying within the 5 pages limit.","solution":"def max_books(t, test_cases): results = [] for n, k, pages in test_cases: max_count = 0 current_count = 0 current_sum = 0 left = 0 for right in range(n): current_sum += pages[right] current_count += 1 while current_sum > k: current_sum -= pages[left] left += 1 current_count -= 1 max_count = max(max_count, current_count) results.append(max_count) return results"},{"question":"One of the major banks in Metro City has implemented a new security system. The security system rotates an array of integers (representing the unique IDs of employees) to generate new secret passcodes for secure access. The rotation is defined as shifting a part of the array to the beginning. You are tasked with helping the bank generate the correct passcodes. Write a function that rotates a given array of integers to the right by `k` steps, where `k` is a non-negative integer. The function should not use extra space for another array (use the original array) and should aim to be efficient in terms of time complexity. -----Input----- The input starts with a line containing an integer `N` (1 ≤ N ≤ 10^5), the number of elements in the array. The second line contains `N` integers, representing the array elements, where each element is between 0 and 10^9. The third line contains an integer `k` (0 ≤ k ≤ 10^5), the number of steps to rotate the array to the right. -----Output----- Output should be the array after rotating it to the right by `k` steps. -----Example----- Sample Input: 5 1 2 3 4 5 2 Sample Output: 4 5 1 2 3 Sample Input: 7 0 1 2 3 4 5 6 1 Sample Output: 6 0 1 2 3 4 5","solution":"def rotate_array(arr, k): Rotates the array \'arr\' to the right by \'k\' steps. n = len(arr) k = k % n # Handle cases where k is larger than the array length # Reverse the first part reverse(arr, 0, n - k - 1) # Reverse the second part reverse(arr, n - k, n - 1) # Reverse the whole array reverse(arr, 0, n - 1) return arr def reverse(arr, start, end): Reverses elements in the array \'arr\' from index \'start\' to \'end\' while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"Alice is a fan of puzzles and recently she found one involving an interesting number sequence. The sequence is derived as follows: - The sequence starts with a single positive integer n. - Each next term is obtained by reversing the digits of the current term and adding it to the current term. The sequence continues until a palindrome is formed. Your task is to write a program to determine how many steps it takes to reach the first palindrome in the sequence starting from the given number n. A palindrome is a number that reads the same backward as forward. Input The input consists of a single integer n (1 ≤ n ≤ 10^5). Output Print a single integer — the number of steps it takes to reach the first palindrome. Examples Input 56 Output 1 Input 87 Output 4 Note For the first example, the sequence is: 56 -> 56 + 65 = 121 (a palindrome, so it takes 1 step). For the second example, the sequence is: 87 -> 87 + 78 = 165 -> 165 + 561 = 726 -> 726 + 627 = 1353 -> 1353 + 3531 = 4884 (a palindrome, so it takes 4 steps).","solution":"def reverse_number(n): return int(str(n)[::-1]) def is_palindrome(n): s = str(n) return s == s[::-1] def steps_to_palindrome(n): steps = 0 while not is_palindrome(n): n = n + reverse_number(n) steps += 1 return steps"},{"question":"Given an array of integers, determine the length of the longest bitonic subsequence. A bitonic subsequence is a sequence which is initially increasing and then decreasing. A strictly increasing or strictly decreasing sequence is also considered as a bitonic sequence. Function Description Complete the longestBitonicSubsequence function in the editor below. longestBitonicSubsequence has the following parameter(s): int arr[n]: an array of integers Returns int: the length of the longest bitonic subsequence Input Format The first line contains an integer n, the number of values in the array. The second line contains n space-separated integers, arr[i], the elements of the array. Constraints 1 <= n <= 2000 1 <= arr[i] <= 10^4 Sample Input STDIN Function ----- -------- 9 arr[] size n = 9 1 11 2 10 4 5 2 1 Sample Output 6 Explanation The longest bitonic subsequence is [1, 2, 10, 4, 2, 1] which gives the output length 6. The subsequence first increases, reaches a peak at 10, and then decreases. Note that the longest increasing subsequence or the longest decreasing subsequence is also a valid bitonic subsequence.","solution":"def longestBitonicSubsequence(arr): n = len(arr) # Compute LIS (Longest Increasing Subsequence) for every index lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) # Compute LDS (Longest Decreasing Subsequence) for every index lds = [1] * n for i in reversed(range(n-1)): # Note: reversed range starts with n-2 for j in reversed(range(i+1, n)): if arr[i] > arr[j]: lds[i] = max(lds[i], lds[j] + 1) # Find the maximum length bitonic subsequence max_length = 0 for i in range(n): max_length = max(max_length, lis[i] + lds[i] - 1) # -1 to not count the peak element twice return max_length"},{"question":"In a game of Battleship, players take turns to call out a row and column on a square grid to try to hit their opponent\'s ships, which are placed on the grid at the beginning of the game. The grid is a 10x10 matrix where rows are labeled from 1 to 10 and columns are labeled from \'A\' to \'J\'. For this exercise, assume you have a 10x10 grid. Each cell in the grid is either empty or part of a ship. Ships are represented by consecutive \'1\'s horizontally or vertically, with empty cells represented by \'0\'s. Write a function `battleship_count(grid)` that takes a 10x10 list of lists representing the grid and counts the number of ships. Each ship is a contiguous segment of \'1\'s horizontally or vertically but not diagonally. Here is an example grid: ```python grid = [ [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\", \\"1\\"], [\\"1\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\"] ] ``` For the grid above, the function should output `6`, since there are six ships. # Input - A 10x10 list of lists containing strings \\"0\\" or \\"1\\" # Output - An integer representing the number of ships on the grid # Constraints - The grid will always be a 10x10 matrix. - Each cell in the grid will be either \\"0\\" or \\"1\\". - A ship is defined as a contiguous segment of \\"1\\"s connected horizontally or vertically. # Example ```python gridassert battleship_count(grid) == 6 ```","solution":"def battleship_count(grid): def sink_ship(r, c): Mark the entire ship starting from (r, c) # Use a stack for iterative DFS stack = [(r, c)] while stack: i, j = stack.pop() grid[i][j] = \'0\' # Mark the cell as visited # Explore all 4 directions (up, down, left, right) for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]: if 0 <= ni < 10 and 0 <= nj < 10 and grid[ni][nj] == \'1\': stack.append((ni, nj)) ships = 0 for row in range(10): for col in range(10): if grid[row][col] == \'1\': # Found an unvisited part of a ship ships += 1 sink_ship(row, col) return ships"},{"question":"Write a function that takes a string input representing a mathematical expression and evaluates the result. The input string will contain numbers and the basic arithmetic operators (+, -, *, /). The function should respect the order of operations (PEMDAS/BODMAS rules). For example: 1. \\"3 + 5 * 2\\" should return 13. 2. \\"10 + 2 * 6\\" should return 22. 3. \\"100 * 2 + 12\\" should return 212. 4. \\"100 * ( 2 + 12 )\\" should return 1400. 5. \\"100 * ( 2 + 12 ) / 14\\" should return 100. Notes: 1. The input string will be a valid expression (no need to handle errors like mismatched parentheses or invalid characters). 2. The input string may contain spaces. 3. Division (/) represents integer division (use `//` for Python or equivalent in other languages). Other operations should follow normal arithmetic rules. Your task is to implement the function that computes and returns the evaluated result as an integer.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression which includes +, -, *, / and respects the order of operations. def apply_operator(operators, values): operator = operators.pop() b = values.pop() a = values.pop() if operator == \'+\': values.append(a + b) elif operator == \'-\': values.append(a - b) elif operator == \'*\': values.append(a * b) elif operator == \'/\': values.append(a // b) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"A cargo shipment has arrived, consisting of boxes of various weights. The boxes need to be loaded into containers such that the weight in each container does not exceed a specified limit. Your goal is to determine the minimum number of containers required to load all the boxes fulfilling this condition. Each container can hold multiple boxes, and you can place boxes in any order in the containers. The weight of each container should not exceed the given weight limit. -----Input----- The first line contains two integers n (1 le n le 100) — the number of boxes, and w (1 le w le 10^{6}) — the maximum weight limit of each container. The second line contains n integers b_1, b_2, dots, b_n (1 le b_i le w) — the weights of the boxes. The integers b_i are given in arbitrary order and are pairwise distinct. -----Output----- Print the minimum number of containers required to load all the boxes such that the weight limit of each container is not exceeded. -----Examples----- Input 3 10 3 5 7 Output 2 Input 6 15 7 8 3 2 6 5 Output 3 -----Note----- In the first example, one way to achieve the result is to load boxes with weights 3 and 7 in the first container and the box with weight 5 in the second container. In the second example, one way to achieve the result is to load boxes with weights 7 and 8 in separate containers, and boxes with weights 3, 2, 6, and 5 in another container. Thus, a total of 3 containers is required.","solution":"from typing import List def min_containers(n: int, w: int, weights: List[int]) -> int: weights.sort(reverse=True) # Sort weights in descending order containers = 0 used = [False] * n for i in range(n): if used[i]: continue current_weight = weights[i] used[i] = True for j in range(i + 1, n): if not used[j] and current_weight + weights[j] <= w: current_weight += weights[j] used[j] = True containers += 1 return containers"},{"question":"A farmer has a rectangular farm represented as a grid with n rows and m columns. Initially, all cells in the grid are fertile. The farmer can perform two types of operations to manage the farm: 1. Fertilize the entire grid: this operation sets all cells in the grid to fertile. 2. Destroy fertility in a subrectangle: the farmer specifies a subrectangle within the grid and sets all cells within that subrectangle to infertile. These operations can be performed any number of times and in any order. The farmer\'s goal is to determine the minimum number of operations required to make each cell of the farm infertile (i.e., all cells in the grid should be infertile). Write a function that, given the dimensions of the farm, returns the minimum number of operations required to make the entire grid infertile. Input The input contains two integers, n and m (1 ≤ n, m ≤ 10^9), representing the number of rows and columns of the farm, respectively. Output Output a single integer, the minimum number of operations required to make the entire grid infertile. Examples Input 2 3 Output 3 Input 4 4 Output 4 Input 1 1 Output 1","solution":"def minimum_operations_to_infertile(n, m): Returns the minimum number of operations to make each cell of the farm infertile. return min(n, m)"},{"question":"You are developing a software that helps in finding duplicate elements in a dataset. One of the easy ways to identify duplicates is by using frequency counting. Suppose you have an array of integers, you need to write an algorithm that finds and returns the first duplicate element for which the second occurrence has the minimal index. In other words, if there are more duplicates, you need to find the one for which the second occurrence is the earliest. Implement a function `firstDuplicate` that returns the first duplicate number. Function Description Complete the `firstDuplicate` function in the editor below. `firstDuplicate` has the following parameter(s): - `int arr[n]`: an array of integers Returns - `int`: the first duplicate number for which the second occurrence has the minimal index, or -1 if there are no such elements. Example For `arr = [2, 1, 3, 5, 3, 2]`, the output should be `3`. Explanation There are 2 duplicates: `2` and `3`. The second 2 has an index of 5, while the second 3 has an index of 4, so the answer is `3`. For `arr = [2, 1, 3, 5, 6, 1]`, the output should be `1`. Explanation There is only 1 duplicate: `1`. The second 1 has an index of 5, which has the lowest (and only) duplicate index. Constraints - The elements of the given array are in the range from `1` to `1000000`. - The length of the array does not exceed `10^5`. Input Format - The first line contains an integer `n`, the number of elements in the array. - The second line contains `n` space-separated integers of `arr`. Sample Input 7 2 1 3 5 3 2 1 Sample Output 3","solution":"def firstDuplicate(arr): Find the first duplicate for which the second occurrence has the minimal index. :param arr: An array of integers :type arr: List[int] :return: The first duplicate number or -1 if no duplicates are found :rtype: int seen = set() for num in arr: if num in seen: return num seen.add(num) return -1"},{"question":"Lauren is enthusiastic about practicing yoga every morning. Each day she follows a yoga schedule that consists of a sequence of yoga poses. Lauren likes to track her progress by calculating the total time she spends in certain types of poses each day, specifically standing poses and seated poses. You are given the daily yoga schedule, where each pose has a type (either standing or seated) and a duration in minutes. You need to write a program to calculate the total time Lauren spends in standing poses and the total time she spends in seated poses. -----Input----- The input starts with an integer m, the number of yoga poses in the schedule. It is guaranteed that 1 leq m leq 10000. Each of the next m lines contains two integers and a string: d_i t_i p_i. Here d_i is the duration of the i-th pose in minutes (where 1 leq d_i leq 100), t_i is the type of the pose (1 for standing, 2 for seated), and p_i is the name of the pose (a string containing only uppercase and lowercase letters, and the length of the pose name does not exceed 50 characters). -----Output----- Output two numbers: the total time spent on standing poses and the total time spent on seated poses. -----Examples----- Sample Input: 5 10 1 Mountain 5 2 ForwardBend 8 1 Warrior 7 1 Triangle 9 2 SeatedForwardBend Sample Output: 25 14","solution":"def calculate_yoga_times(n, poses): standing_time = 0 seated_time = 0 for pose in poses: duration, pose_type, pose_name = pose if pose_type == 1: standing_time += duration elif pose_type == 2: seated_time += duration return standing_time, seated_time"},{"question":"Given an array of integers, rotate the array to the right by K steps, where K is a non-negative integer. Input Format The first line contains two integers, NN (the length of the array) and KK (the number of steps to rotate). The second line contains NN space-separated integers describing the array. Output Format Print the array after rotating it to the right by K steps as a single line of space-separated integers. SAMPLE INPUT 5 2 1 2 3 4 5 SAMPLE OUTPUT 4 5 1 2 3 Explanation If we rotate the array [1, 2, 3, 4, 5] to the right by 2 steps, we get [4, 5, 1, 2, 3].","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. n = len(arr) k = k % n return arr[-k:] + arr[:-k]"},{"question":"You\'re given a dataset containing information about recent transactions at a retail store. Your task is to create a function that identifies fraudulent transactions. You should build a model based on provided historical transaction data, which includes both valid and fraudulent examples. Features in the dataset: - transaction_id: Unique identifier of the transaction - amount: Transaction amount - timestamp: Timestamp of the transaction - customer_id: Unique identifier of the customer - merchant_id: Unique identifier of the merchant - location: Location where the transaction happened (latitude,longitude) - is_fraud: Binary flag indicating if the transaction was fraudulent (1) or not (0) Your function should be named `detect_fraud` and should take a dictionary with the above features as input. Using the historical data provided, your model should predict whether a given transaction is fraudulent. Blocked libraries: sklearn, pandas, tensorflow, numpy, scipy Example: ```python def detect_fraud(transaction): # Your code here pass # Example transactions transaction_1 = { \\"transaction_id\\": \\"12345\\", \\"amount\\": 250.00, \\"timestamp\\": \\"2023-11-01 13:45:00\\", \\"customer_id\\": \\"cust123\\", \\"merchant_id\\": \\"merch567\\", \\"location\\": (40.7128, -74.0060), \\"is_fraud\\": 0 } transaction_2 = { \\"transaction_id\\": \\"12346\\", \\"amount\\": 1500.00, \\"timestamp\\": \\"2023-11-01 13:50:00\\", \\"customer_id\\": \\"cust456\\", \\"merchant_id\\": \\"merch567\\", \\"location\\": (40.7128, -74.0060), \\"is_fraud\\": 1 } ``` Notes: 1. You are expected to handle the training of your model as a separate step before the `detect_fraud` function is used for prediction. 2. The prediction will be evaluated based on accuracy, and you need to ensure it works with new transaction data not present in the training data. 3. You should not use any of the blocked libraries mentioned above for your solution.","solution":"def detect_fraud(transaction): Detects if the given transaction is fraudulent. # Example rule-based model based on the transaction amount # This is a simple heuristic as a placeholder for a more sophisticated model if transaction[\\"amount\\"] > 1000: return 1 # Fraudulent else: return 0 # Not fraudulent"},{"question":"Write a function that takes a list of integers and returns the longest sequence of consecutive integers. The sequence should be returned as a list in ascending order. *Keep in mind that the list may contain duplicates and any order.* # Example ```python longest_consecutive_sequence([1, 6, 2, 3, 5, 4]) # => [1, 2, 3, 4, 5, 6] longest_consecutive_sequence([5, 3, 1, 2, 8, 7]) # => [1, 2, 3, 5, 7, 8] longest_consecutive_sequence([10, 5, 12, 3, 6, 11, 7]) # => [5, 6, 7 ] ```","solution":"def longest_consecutive_sequence(numbers): Returns the longest sequence of consecutive integers in ascending order. if not numbers: return [] # Remove duplicates and sort the numbers numbers = sorted(set(numbers)) longest_sequence = [] current_sequence = [numbers[0]] for i in range(1, len(numbers)): if numbers[i] == numbers[i - 1] + 1: current_sequence.append(numbers[i]) else: if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence current_sequence = [numbers[i]] if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence return longest_sequence"},{"question":"You are managing a warehouse that stores merchandise in a single-row shelf system. Each shelf is assigned a unique identifier represented by a positive integer, starting from 1 and increasing consecutively. However, due to some inventory mismanagement, some of the identifiers are missing. Your task is to find the smallest missing positive identifier from the row. Write a function to determine the smallest missing positive integer in the given list. # Input An integer list `shelves` of size `n` (0 ≤ n ≤ 100) representing the identifiers currently assigned to the shelves. The list may contain duplicates and unsorted values. Each identifier in the list is a positive integer. # Output A single integer representing the smallest missing positive identifier from the list. # Examples # Input ``` [1, 2, 3, 5] ``` # Output ``` 4 ``` # Input ``` [3, 4, -1, 1] ``` # Output ``` 2 ``` # Input ``` [7, 8, 9, 11, 12] ``` # Output ``` 1 ``` # Constraints 1. The function should have a time complexity of O(n). 2. You should not use extra space more than O(1). # Skeleton Code ```python def find_missing_identifier(shelves): n = len(shelves) for i in range(n): while 1 <= shelves[i] <= n and shelves[shelves[i] - 1] != shelves[i]: shelves[shelves[i] - 1], shelves[i] = shelves[i], shelves[shelves[i] - 1] for i in range(n): if shelves[i] != i + 1: return i + 1 return n + 1 # Example usage print(find_missing_identifier([1, 2, 3, 5])) # Output: 4 print(find_missing_identifier([3, 4, -1, 1])) # Output: 2 print(find_missing_identifier([7, 8, 9, 11, 12])) # Output: 1 ```","solution":"def find_missing_identifier(shelves): n = len(shelves) for i in range(n): while 1 <= shelves[i] <= n and shelves[shelves[i] - 1] != shelves[i]: shelves[shelves[i] - 1], shelves[i] = shelves[i], shelves[shelves[i] - 1] for i in range(n): if shelves[i] != i + 1: return i + 1 return n + 1 # Example usage print(find_missing_identifier([1, 2, 3, 5])) # Output: 4 print(find_missing_identifier([3, 4, -1, 1])) # Output: 2 print(find_missing_identifier([7, 8, 9, 11, 12])) # Output: 1"},{"question":"Given an integer array `arr` of size `N`, your task is to find and return the product of all the elements of the array except the element at each index. Note: Solve the problem without using division and in O(N) time complexity. Example 1: Input: N = 4 arr = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For index 0: product = 2 * 3 * 4 = 24 For index 1: product = 1 * 3 * 4 = 12 For index 2: product = 1 * 2 * 4 = 8 For index 3: product = 1 * 2 * 3 = 6 Example 2: Input: N = 3 arr = [5, 7, 9] Output: [63, 45, 35] Explanation: For index 0: product = 7 * 9 = 63 For index 1: product = 5 * 9 = 45 For index 2: product = 5 * 7 = 35 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `productExceptSelf()` which takes an integer `N` and an array `arr` as input parameters and returns an array of size `N`, where each element at index `i` is the product of all array elements except `arr[i]`. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^5","solution":"def productExceptSelf(N, arr): # Initialize two arrays for left and right products left_products = [1] * N right_products = [1] * N # Fill left_products array for i in range(1, N): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill right_products array for i in range(N - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Fill result array result = [1] * N for i in range(N): result[i] = left_products[i] * right_products[i] return result"},{"question":"There are M workers in a factory, each worker can handle a different number of tasks per day. You are provided with an array `tasks` of length M where `tasks[i]` represents the capacity of the i-th worker (i.e., the number of tasks they can handle each day). You also have an integer `N` that represents the total number of tasks that need to be completed. You have to determine the minimum number of days required to complete all tasks if all workers work simultaneously. Example 1: Input: M = 3, N = 13 tasks = [3, 2, 5] Output: 3 Explanation: In the first day, workers can handle a total of 3+2+5 = 10 tasks. After the first day, 3 tasks are left. On the second day, workers handle 10 tasks again, finishing the remaining 3 tasks. The minimum number of days needed is 2. Example 2: Input: M = 4, N = 9 tasks = [1, 2, 3, 4] Output: 2 Explanation: The workers can together complete 1+2+3+4 = 10 tasks each day. By first day, they will have completed 10 tasks, exceeding the 9 tasks needed. So, the minimum number of days needed is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minDays` which takes an integer M, an array `tasks`, and an integer N as input parameters and returns the minimum number of days required to complete all tasks. Expected Time Complexity: O(M) Expected Space Complexity: O(1) Constraints: 1 ≤ M ≤ 10^5 1 ≤ N ≤ 10^9 1 ≤ tasks[i] ≤ 10^4","solution":"def minDays(M, tasks, N): Calculates the minimum number of days required to complete all tasks. :param M: int - number of workers :param tasks: List[int] - tasks each worker can handle in a day :param N: int - total number of tasks that need to be completed :return: int - minimum number of days required total_capacity_per_day = sum(tasks) # If total_capacity_per_day is greater than or equal to N, only one day is enough if total_capacity_per_day >= N: return 1 # Calculate the minimum number of days needed days_needed = (N + total_capacity_per_day - 1) // total_capacity_per_day # equivalent to ceil(N / total_capacity_per_day) return days_needed"},{"question":"Larry loves rectangles. He is given a set of points in a 2D plane, and he wants to know how many distinct rectangles can be formed using these points as vertices. A rectangle is defined by its four sides being parallel to the x-axis and y-axis. -----Input----- The input starts with a single integer N, the number of points. The next N lines each contain two integers x and y representing the coordinates of a point. -----Output----- Output the number of distinct rectangles that can be formed using the given points. -----Limits----- - 1 leq N leq 200 - 0 leq x, y leq 1000 -----Examples----- Sample Input: 6 1 1 1 4 4 1 4 4 5 1 5 4 Sample Output: 3","solution":"def count_rectangles(points): Given a list of points, return the number of rectangles that can be formed using these points as vertices. Rectangles must have sides parallel to the x-axis and y-axis. point_set = set(points) rectangles_count = 0 # Iterate through each pair of points to find diagonally opposite vertices of a rectangle for i in range(len(points)): for j in range(i + 1, len(points)): p1 = points[i] p2 = points[j] # Check if p1 and p2 can be diagonally opposite corners of a rectangle if p1[0] != p2[0] and p1[1] != p2[1]: if (p1[0], p2[1]) in point_set and (p2[0], p1[1]) in point_set: rectangles_count += 1 # Each rectangle is counted twice in the above nested loop return rectangles_count // 2"},{"question":"You are given a list of integers representing the number of pages in different books. Your task is to allocate these books to a given number of students such that the maximum number of pages assigned to a student is minimized. Each student gets at least one book, and each book can only be assigned to one student. Allocate the books in a manner such that the maximum number of pages allocated to a student is as small as possible. Write a function to find the minimum possible maximum number of pages. Example 1: Input: books = [12, 34, 67, 90] students = 2 Output: 113 Explanation: There are 2 students. Books can be allocated in the following way: 1. Student 1: [12, 34, 67] with 113 pages (maximum pages) 2. Student 2: [90] with 90 pages Hence, the minimum possible maximum number of pages is 113. Example 2: Input: books = [10, 20, 30, 40] students = 2 Output: 60 Explanation: There are 2 students. Books can be allocated in the following way: 1. Student 1: [10, 20, 30] with 60 pages (maximum pages) 2. Student 2: [40] with 40 pages Hence, the minimum possible maximum number of pages is 60. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minMaxPages()` which accepts a list of integers `books` and an integer `students` as input parameters and returns the minimum possible maximum number of pages. Expected Time Complexity: O(n * log(sum(books))) Expected Auxiliary Space: O(1) Constraints: 1 <= len(books) <= 10^5 1 <= books[i] <= 10^5 1 <= students <= len(books)","solution":"def minMaxPages(books, students): Returns the minimum possible maximum number of pages a student has to read. def is_feasible(mid): student_count = 1 current_pages = 0 for pages in books: if current_pages + pages > mid: student_count += 1 current_pages = pages if student_count > students: return False else: current_pages += pages return True if students > len(books): return -1 low, high = max(books), sum(books) result = high while low <= high: mid = (low + high) // 2 if is_feasible(mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Problem You are given an `MxN` grid representing a map of a city. Each cell can either be a building (\'1\') or an empty lot (\'0\'). Your task is to count the number of distinct blocks of connected buildings. A block is defined as a set of connected \'1\'s (buildings) that are adjacent either horizontally or vertically. The grid is provided as an array of strings, where each string represents one row of the grid. Determine the number of distinct blocks of connected buildings. Constraints * 1 ≤ M, N ≤ 1000 Input The input is given in the following format: - The first line contains an integer M, representing the number of rows in the grid. - The second line contains an integer N, representing the number of columns in the grid. - The next M lines each contain a string of length N representing the grid rows. Output Output a single integer, the number of distinct blocks of connected buildings. Example Input 4 5 11000 11000 00100 00011 Output 3 Explanation In the example, there are three distinct blocks of connected buildings. The first block is the \'1\'s at the top-left (2x2), the second block is the single \'1\' in the third row, and the third block is the \'1\'s at the bottom right (1x2).","solution":"def count_building_blocks(M, N, grid): visited = [[False for _ in range(N)] for _ in range(M)] def dfs(r, c): if r < 0 or c < 0 or r >= M or c >= N or visited[r][c] or grid[r][c] == \'0\': return visited[r][c] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up for dr, dc in directions: dfs(r + dr, c + dc) block_count = 0 for r in range(M): for c in range(N): if grid[r][c] == \'1\' and not visited[r][c]: dfs(r, c) block_count += 1 return block_count"},{"question":"Write a program which takes a string as input and outputs the number of vowels in the string. Input One line containing a string with a mix of uppercase and lowercase letters. Output A single integer representing the number of vowels in the input string. Example Input Hello World Output 3","solution":"def count_vowels(input_string): Returns the number of vowels in the input string. Parameters: input_string (str): The string to be checked for vowels. Returns: int: The number of vowels in the input string. vowels = \'aeiouAEIOU\' vowel_count = sum(1 for char in input_string if char in vowels) return vowel_count"},{"question":"A social media platform has recently added a new feature where users can tag each other in posts. The platform maintains an adjacency matrix to represent the friendships between users. The matrix is symmetric, where matrix[i][j] is 1 if user i and user j are friends and 0 otherwise. You are tasked with implementing a feature that finds the largest group of friends (clique) in which every pair of users are friends with each other. A clique is defined as a subset of users where each user is friends with all other users in this subset. The goal is to return the size of the largest clique in the network. Input The first line contains an integer n (1 ≤ n ≤ 50), the number of users. The next n lines contain n integers each, forming the adjacency matrix A (where A[i][j] is 1 if user i is friends with user j, and 0 otherwise). Output Print one integer: the size of the largest clique. Example Input 5 0 1 1 0 1 1 0 1 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 1 0 Output 3","solution":"def largest_clique(matrix): Finds the size of the largest clique in the given adjacency matrix. from itertools import combinations n = len(matrix) def is_clique(users): Checks if a given set of users form a clique. for u1, u2 in combinations(users, 2): if matrix[u1][u2] == 0: return False return True largest = 0 for size in range(1, n+1): for users in combinations(range(n), size): if is_clique(users): largest = max(largest, size) return largest # Example usage: input_matrix = [ [0, 1, 1, 0, 1], [1, 0, 1, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 0, 1], [1, 0, 0, 1, 0], ] print(largest_clique(input_matrix)) # Output: 3"},{"question":"Blocked Path You are given a grid of size N x M where some cells are blocked and others are accessible. You start from the top-left corner of the grid (1,1) and need to reach the bottom-right corner (N, M). However, due to the blocked cells, you may not be able to move directly from one cell to another adjacent cell. You can move to a cell in one of the four cardinal directions (up, down, left, right) but only if the destination cell is not blocked. Determine if it is possible to reach the bottom-right corner from the top-left corner without moving through any blocked cells. Input - The input consists of one dataset per test case. - The first line gives two integers, N and M (2 ≤ N, M ≤ 1000), the dimensions of the grid. - Following N lines contain M characters each, representing the grid. - \'0\' indicates that the cell is accessible - \'1\' indicates that the cell is blocked - The end of the input is indicated by a single line with two zeros. Output For each dataset, output \\"YES\\" if it is possible to reach the bottom-right corner from the top-left corner; otherwise, output \\"NO\\". Sample Input ``` 3 3 000 010 000 4 4 0000 0110 0100 0000 2 2 01 10 0 0 ``` Sample Output ``` YES YES NO ``` Hint In the first dataset, you can reach the bottom-right corner by following the path: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) In the second dataset, you can reach the bottom-right corner by following the path: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4) In the third dataset, it is not possible to reach the bottom-right corner from the top-left corner due to the blocked cells.","solution":"def can_reach_bottom_right(N, M, grid): Determines if it is possible to reach the bottom-right corner of the grid from the top-left corner. Args: N (int): Number of rows. M (int): Number of columns. grid (list of list of str): The grid itself represented as a list of lists. Returns: str: \\"YES\\" if reachable, \\"NO\\" otherwise. if grid[0][0] == \'1\' or grid[N-1][M-1] == \'1\': return \\"NO\\" from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * M for _ in range(N)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == N - 1 and y == M - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'0\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def process_input(inputs): index = 0 results = [] while True: N, M = map(str, inputs[index].split()) if N == \'0\' and M == \'0\': break N, M = int(N), int(M) index += 1 grid = [] for i in range(N): grid.append(inputs[index]) index += 1 results.append(can_reach_bottom_right(N, M, grid)) return results"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Write a program that takes a list of integers and a target sum as input. The task is to find the number of distinct pairs of integers in the list that add up to the target sum. Each pair should be counted only once, regardless of the order of integers in the pair. Example Input [1, 5, 7, -1, 5], 6 Output 2 Explanation: The pairs of integers that add up to 6 are (1, 5) and (7, -1). Note that (1, 5) is considered the same as (5, 1) and thus counted only once. The second 5 in the list does not create a new pair since it would be duplicate of the pair (1, 5).","solution":"def count_pairs_with_sum(arr, target_sum): Returns the number of distinct pairs of integers in the list that add up to the target sum. Each pair should be counted only once, regardless of the order of integers in the pair. seen = set() pairs = set() for number in arr: complement = target_sum - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return len(pairs)"},{"question":"Problem During the annual digital forensics workshop, students are given the task of reconstructing lost packets in a network communication. One such task involves dealing with transmission logs where some packets could be lost due to network instability. The logs contain packet sequences, each identified by an integer ID, but these IDs may not be contiguous due to the missing packets. The task is to find the missing packet IDs in continuous segments. The sequence of packet IDs is guaranteed to be within a single server session, meaning, it starts from a particular ID and ends at another, with missing IDs in between. Your task is to write a program to determine all the missing packet IDs. Constraints The input satisfies the following constraints. - 1 ≤ N ≤ 10^5 (Number of packet IDs provided in the log) - 1 ≤ A[i] ≤ 10^9 (Packet IDs provided in the log) Input The first line contains an integer `N` representing the number of packet IDs. The second line contains `N` integers `A[1], A[2], ..., A[N]` which are the packet IDs in the log. Output Output all missing packet IDs in a single line separated by spaces. If there are no missing packets, output \\"None\\". Examples Input 5 1001 1004 1002 1005 1003 Output None Input 5 101 103 104 105 100 Output 102 Input 6 7 10 8 6 9 12 Output 11","solution":"def find_missing_packets(n, packets): Finds the missing packet IDs in the sequence. Parameters: n (int): Number of packet IDs provided in the log. packets (list of int): List of packet IDs. Returns: str: A string containing the missing packet IDs separated by spaces or \'None\' if no packets are missing. if n == 0: return \\"None\\" packets = sorted(packets) missing_packets = [] for i in range(packets[0], packets[-1]): if i not in packets: missing_packets.append(i) if not missing_packets: return \\"None\\" return \\" \\".join(map(str, missing_packets))"},{"question":"You are given n buses and m operations. Each operation consists of two integers: op_type and bus_number. There are two types of operations: 1. op_type = 1: Add bus_number to the list of active buses. 2. op_type = 2: Remove bus_number from the list of active buses. Write a program to perform the given operations and then answer q queries. Each query consists of a single integer k and you need to determine if the bus_number k is in the list of active buses. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 100,000) — the total number of buses and operations respectively. The next m lines each contain two integers: op_type (either 1 or 2) and bus_number (1 ≤ bus_number ≤ n). The next line contains a single integer q (1 ≤ q ≤ 100,000) — the number of queries. The next q lines each contain a single integer k (1 ≤ k ≤ n) representing the bus_number to be queried. -----Output----- Print q lines. On the i-th line, print \\"YES\\" if the bus_number k is in the list of active buses after performing all operations, otherwise print \\"NO\\". -----Examples----- Input 5 6 1 1 1 2 2 1 1 3 2 2 1 1 3 1 2 3 Output YES NO YES Note: In the example, after performing the operations: 1. Add bus 1 to the active list. 2. Add bus 2 to the active list. 3. Remove bus 1 from the active list. 4. Add bus 3 to the active list. 5. Remove bus 2 from the active list. 6. Add bus 1 to the active list. The final list of active buses contains bus 1 and bus 3. When we perform the queries: 1. Query for bus 1, it is active, so print \\"YES\\". 2. Query for bus 2, it is not active, so print \\"NO\\". 3. Query for bus 3, it is active, so print \\"YES\\".","solution":"def manage_buses(n, m, operations, q, queries): active_buses = set() for op_type, bus_number in operations: if op_type == 1: active_buses.add(bus_number) elif op_type == 2: active_buses.discard(bus_number) results = [] for k in queries: if k in active_buses: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sort the elements of an array based on the frequency of their occurrence. If two elements have the same frequency, they should be arranged based on their natural order. # Requirements: 1. Write a function that takes an array of integers as input. 2. Return a sorted array in which the elements are ordered by the frequency of their occurrence in ascending order. 3. If two elements have the same frequency, they should be arranged in ascending order of their values. # Example: ``` Input: [4, 5, 6, 5, 4, 3] Output: [3, 6, 4, 4, 5, 5] Input: [2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12] Output: [4, 5, 12, 12, 2, 2, 2, 3, 3, 3, 3] ``` # Notes: - You can assume the array will contain only integers. - Frequency of an element is defined as the number of times the element occurs in the array. - The problem mainly tests your understanding of sorting and handling frequency counts.","solution":"from collections import Counter def frequency_sort(arr): Sorts the elements of an array based on the frequency of their occurrence. Elements with the same frequency are sorted based on their natural order. count = Counter(arr) return sorted(arr, key=lambda x: (count[x], x))"},{"question":"Given an integer array of size N, which contains values from 1 to N+1 (inclusive) except one missing number. Your task is to find the missing number in the array, where the constraints ensure exactly one number is missing. Example 1: Input: N = 4 array[] = {1, 2, 4, 5} Output: 3 Explanation: The given array has values from 1 to 5 and 3 is missing. Example 2: Input: N = 5 array[] = {2, 3, 1, 5, 6} Output: 4 Explanation: The given array has values from 1 to 6 and 4 is missing. Your Task: You need to complete the function findMissingNumber() that takes an integer array and its size N as inputs and returns the missing number in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6 1 ≤ elements in array ≤ N+1","solution":"def findMissingNumber(arr, N): Finds the missing number from 1 to N+1 in the array arr of size N. Parameters: - arr: List of integers of size N. - N: Size of the array. Returns: - An integer which is the missing number. # Sum of the first N+1 natural numbers total_sum = (N + 1) * (N + 2) // 2 # Sum of elements in the current array array_sum = sum(arr) # The missing number is the difference between the expected sum and the actual sum return total_sum - array_sum"},{"question":"A company\'s payroll system needs to implement a new feature which calculates the average salary of its employees. The system stores employee data as records, each containing the employee\'s name and salary. The format of each employee record is as follows: ``` Employee { string name; int salary; } ``` The company wants to calculate the average salary after a series of operations, which includes adding new employee records, removing an existing employee record, and requesting the average salary. Write a program to handle three types of operations: - `addEmployee <name> <salary>`: Adds the specified employee record to the system. - `removeEmployee <name>`: Removes the employee record with the given name from the system. - `averageSalary`: Prints the average salary of all employees currently in the system, rounded to two decimal places. If there are no employees, print `0.00`. Constraints: - The number of operations will not exceed 500,000. - The length of an employee\'s name is at most 50 characters. - 0 leq text{salary} leq 10^6 - Employee names are unique and consist of only alphabetic characters. Input: The first line contains the number of operations n. Each of the following n lines specifies one of the operations: `addEmployee`, `removeEmployee`, or `averageSalary`. Output: For each `averageSalary` operation, print the average salary rounded to two decimal places in a new line. Example Input: ``` 5 addEmployee Alice 50000 addEmployee Bob 60000 averageSalary removeEmployee Alice averageSalary ``` Output: ``` 55000.00 60000.00 ``` Note: In the provided example, initially, Alice and Bob have salaries of 50,000 and 60,000 respectively. The first `averageSalary` yields 55,000.0. After removing Alice, the second `averageSalary` results in 60,000.0.","solution":"class PayrollSystem: def __init__(self): self.employees = {} def add_employee(self, name, salary): self.employees[name] = salary def remove_employee(self, name): if name in self.employees: del self.employees[name] def average_salary(self): if not self.employees: return 0.00 total_salary = sum(self.employees.values()) average_salary = total_salary / len(self.employees) return round(average_salary, 2) def process_operations(self, operations): results = [] for operation in operations: parts = operation.split() if parts[0] == \'addEmployee\': self.add_employee(parts[1], int(parts[2])) elif parts[0] == \'removeEmployee\': self.remove_employee(parts[1]) elif parts[0] == \'averageSalary\': results.append(self.average_salary()) return results"},{"question":"Given a string S consisting of lowercase alphabets, the task is to find the count of substrings that start and end with the same character. Example 1: Input: S = \\"abcab\\" Output: 7 Explanation: The substrings are: a, b, c, a, b, aa, bb. Here, 7 substrings start and end with the same character. Example 2: Input: S = \\"aaa\\" Output: 6 Explanation: The substrings are: a, a, a, aa, aa, aaa. Here, 6 substrings start and end with the same character. Your Task: You need to complete the function countSubstrings() that takes a string S as input and returns the count of substrings that start and end with the same character. The driver code takes care of the printing. Expected Time Complexity: O(N^2). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |S| ≤ 10^3","solution":"def countSubstrings(S): Returns the count of substrings that start and end with the same character. n = len(S) count = 0 for i in range(n): for j in range(i, n): if S[i] == S[j]: count += 1 return count"},{"question":"In this exercise, you will implement a function that takes an integer array as input and returns an integer array where each element is replaced by the product of all the other elements in the array, excluding the element at that position. For example, given an array `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]` since: ``` For index 0: 2 * 3 * 4 = 24 For index 1: 1 * 3 * 4 = 12 For index 2: 1 * 2 * 4 = 8 For index 3: 1 * 2 * 3 = 6 ``` Note: - You should not use division in your solution. - Your algorithm should have a time complexity of O(n). Constraints: - The length of the input array will be at least 2 and at most 1000. - Each element in the input array will be a positive integer ranging from `1` to `1000`. **Example:** ``` Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [5, 10, 15] Output: [150, 75, 50] ```","solution":"def product_except_self(nums): Returns a list where each element is the product of all the other elements in the input list. :param nums: List[int] :return: List[int] n = len(nums) # Initializing the result list with ones result = [1] * n # Calculating products to the left left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculating products to the right right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Create a function that simulates an online bookstore with the following operations: * `addBook(title, price)`: Add a new book with the specified title and price to the store. If a book with the same title already exists, update its price. * `removeBook(title)`: Remove the book with the specified title from the store. If the book does not exist, do nothing. * `findBook(title)`: Return the price of the book with the specified title. If the book does not exist, return -1. * `getBooksByPriceRange(minPrice, maxPrice)`: Return a list of book titles whose prices fall within the specified range [minPrice, maxPrice], inclusive. If no books are found, return an empty list. The book titles in the list should be ordered lexicographically. Constraints * All inputs are given as strings (except for prices which are integers). * The title of the book is a non-empty string and contains only alphanumeric characters and spaces. * The price of the book is a positive integer not exceeding 10^9. * The number of operations does not exceed 100000. Input The input consists of multiple lines of strings, each representing a single operation (in the format `operation arguments`) until EOF. Output For each `findBook` and `getBooksByPriceRange` operation, print the result in a line. For `findBook`, print an integer (price or -1). For `getBooksByPriceRange`, print the sorted list of titles space-separated in a single line. Examples Input ``` addBook \\"The Catcher in the Rye\\" 500 addBook \\"To Kill a Mockingbird\\" 350 addBook \\"1984\\" 300 findBook \\"The Catcher in the Rye\\" removeBook \\"1984\\" findBook \\"1984\\" getBooksByPriceRange 200 400 ``` Output ``` 500 -1 To Kill a Mockingbird ```","solution":"class OnlineBookstore: def __init__(self): self.books = {} def addBook(self, title, price): Adds a new book with the specified title and price to the store. If the book already exists, updates its price. self.books[title] = price def removeBook(self, title): Removes the book with the specified title from the store. If the book does not exist, does nothing. if title in self.books: del self.books[title] def findBook(self, title): Returns the price of the book with the specified title. If the book does not exist, returns -1. return self.books.get(title, -1) def getBooksByPriceRange(self, minPrice, maxPrice): Returns a list of book titles whose prices fall within the specified range [minPrice, maxPrice], inclusive. The list is sorted lexicographically. result = [title for title, price in self.books.items() if minPrice <= price <= maxPrice] return sorted(result)"},{"question":"Given a string S consisting of lowercase letters only, you are required to find and print the character that appears the maximum number of times in the string. If there are multiple characters that appear the same maximum number of times, output the lexicographically smallest one. Input Format: The first and only line contains the string S. Output Format: Print the character that appears the maximum number of times. If there are multiple such characters, print the lexicographically smallest one. Constraints: 1 ≤ |S| ≤ 10^5 SAMPLE INPUT banana SAMPLE OUTPUT a","solution":"def max_occuring_char(S): Finds the character that appears the maximum number of times in the string S. If multiple characters have the same maximum count, the lexicographically smallest one is returned. Parameters: S (str): Input string consisting of lowercase letters only. Returns: char: Character that appears the maximum number of times. from collections import Counter # Count the occurrences of each character count = Counter(S) # Find the maximum occurrence count max_count = max(count.values()) # Find the lexicographically smallest character with the maximum count max_char = min(char for char in count if count[char] == max_count) return max_char"},{"question":"Yara is a software developer working on a robotic system for a warehouse. The warehouse is organized as an n x m grid. Each cell in the grid can either be empty (represented as \'.\') or contain an obstacle (represented as \'#\'). Yara needs to program the robot to move from a starting position to a target position in the grid. The robot can move up, down, left, or right to an adjacent cell, but cannot move into a cell containing an obstacle or outside the grid boundaries. Yara wants to determine the minimum number of moves required for the robot to reach the target position from the starting position. Write a function to help Yara determine the minimum number of moves required for the robot to reach the target. If it is not possible for the robot to reach the target position, return -1. Input The first line of the input contains three integers, n, m, and t (1 ≤ n, m ≤ 100, 1 ≤ t ≤ 10), where n is the number of rows, m is the number of columns, and t is the number of test cases. Each test case contains: - Two integers x1, y1, x2, and y2 (1 ≤ x1, x2 ≤ n; 1 ≤ y1, y2 ≤ m), representing the starting position (x1, y1) and the target position (x2, y2). - n subsequent lines each containing m characters, representing the grid. Output For each test case, print the minimum number of moves required for the robot to reach the target position. If it\'s not possible, print -1. Example Input 2 4 2 1 1 2 3 . . . # . # . . 1 2 2 2 . # . # . # . . Output 3 -1","solution":"from collections import deque def min_moves(n, m, t, test_cases): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] results = [] for case in test_cases: x1, y1, x2, y2, grid = case # Converting to zero-indexed x1 -= 1 y1 -= 1 x2 -= 1 y2 -= 1 if grid[x1][y1] == \'#\' or grid[x2][y2] == \'#\': results.append(-1) continue visited = [[False] * m for _ in range(n)] queue = deque([(x1, y1, 0)]) # (x, y, steps) visited[x1][y1] = True found = False while queue: x, y, steps = queue.popleft() if x == x2 and y == y2: results.append(steps) found = True break for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) if not found: results.append(-1) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') header = lines[0].split() n, m, t = int(header[0]), int(header[1]), int(header[2]) index = 1 test_cases = [] for _ in range(t): positions = list(map(int, lines[index].split())) index += 1 grid = [] for i in range(n): grid.append(lines[index].split()) index += 1 test_cases.append((positions[0], positions[1], positions[2], positions[3], grid)) return n, m, t, test_cases def process_input(input_str): n, m, t, test_cases = parse_input(input_str) return min_moves(n, m, t, test_cases)"},{"question":"Given a list of N integers, you are to determine the minimal number of contiguous subarrays (each containing at least one element) that need to be sorted in non-decreasing order such that the entire array becomes sorted in non-decreasing order. # Constraints: * 1 ≤ N ≤ 100 * 1 ≤ Array[i] ≤ 10^3 # Input: The input will be given in the following format: ``` N Array[1] Array[2] ... Array[N] ``` # Output: Output a single integer representing the minimal number of subarrays required. # Examples: Example 1: ``` Input: 6 2 4 1 3 5 6 Output: 2 Explanation: We can split the array into two subarrays: [2, 4] and [1, 3, 5, 6]. Sorting these subarrays individually would sort the entire array. ``` Example 2: ``` Input: 5 1 2 3 4 5 Output: 1 Explanation: The entire array is already sorted, so only one subarray is required. ``` Example 3: ``` Input: 7 3 1 2 6 4 5 7 Output: 3 Explanation: We can split the array into three subarrays: [3], [1, 2], and [6, 4, 5, 7]. Sorting these subarrays individually would sort the entire array. ```","solution":"def minimal_subarrays_to_sort(N, arr): Returns the minimal number of contiguous subarrays that need to be sorted to make the entire array sorted in non-decreasing order. if N <= 1: return 1 subarrays = 1 for i in range(1, N): if arr[i] < arr[i - 1]: subarrays += 1 return subarrays"},{"question":"Traffic signals at an intersection can either show RED or GREEN. A traffic system consists of multiple intersections, each with a single traffic signal. Each signal operates independently and could be in either state. At a given moment, the traffic system is said to be in a valid state if adjacent intersections do not have both their signals showing GREEN simultaneously. You are given a description of the intersections and the connections between them. Determine if the traffic system is in a valid state. -----Input----- The first line of input consists of two integers n (2 leq n leq 100), the number of intersections, and m (1 leq m leq frac{n(n-1)}{2}), the number of connections between intersections. The second line consists of n integers where the i^textrm{th} integer is 0 if the signal at the i^textrm{th} intersection shows RED and 1 if it shows GREEN. Each of the next m lines describes a connection which consists of two integers a and b (1 leq a < b leq n) indicating that there is a road directly connecting intersection a and intersection b. -----Output----- Display \\"VALID\\" if the traffic system is in a valid state, otherwise display \\"INVALID\\". -----Examples----- Sample Input 1: 3 2 1 0 1 1 2 2 3 Sample Output 1: VALID Sample Input 2: 4 4 1 1 0 0 1 2 2 3 3 4 4 1 Sample Output 2: INVALID Sample Input 3: 5 3 0 1 0 1 0 1 2 2 3 4 5 Sample Output 3: VALID","solution":"def is_valid_traffic(n, m, signals, connections): for a, b in connections: if signals[a-1] == 1 and signals[b-1] == 1: return \\"INVALID\\" return \\"VALID\\" # Example of how the function is used n = 3 m = 2 signals = [1, 0, 1] connections = [(1, 2), (2, 3)] print(is_valid_traffic(n, m, signals, connections)) # Output: VALID"},{"question":"A delivery robot is navigating a warehouse structured as a grid. The robot starts at position (0, 0) with a fully charged battery, and its task is to deliver a package to the target position (x, y). The grid cells are either: - Empty cells that the robot can move through. - Charging stations where the robot can recharge its battery. Each charging station provides a certain number of units of battery charge. The robot consumes one unit of battery charge per move (up, down, left, right). You are given the coordinates (x, y) of the target, the initial battery charge startBattery, and a list of charging stations represented as stations[i] = [xi, yi, charge], indicating that there is a charging station at position (xi, yi) providing charge units of battery. What is the minimum number of charging stops the robot must make in order to reach its target position (x, y)? If the robot cannot reach the target, return -1. Note: - The robot cannot go out of grid bounds. - If the robot reaches a charging station with 0 battery left, it can still recharge. - If the robot reaches the target with 0 battery left, it is still considered to have successfully delivered the package. Example 1: Input: target = [2, 2], startBattery = 4, stations = [] Output: 0 Explanation: The robot can reach the target without recharging. Example 2: Input: target = [10, 10], startBattery = 5, stations = [[5, 5, 20]] Output: -1 Explanation: The robot cannot reach the target as the distance exceeds the initial battery charge and there are not enough charging stations along the way. Example 3: Input: target = [8, 8], startBattery = 15, stations = [[2, 2, 10], [4, 4, 5], [6, 6, 2]] Output: 0 Explanation: The robot starts with 15 battery units. It moves to (8, 8) directly spending 16 battery units, which is not possible. Hence, the robot would need to recharge. From the list of charging stations, it utilizes the one at location (2, 2) for recharging and then proceeds. It is efficient and the minimum charging stops can be optimized to the least stops if multiple paths are possible. Note: 1 <= target_x, target_y, startBattery, stations[i][2] <= 10^5 0 <= stations.length <= 500 0 <= stations[i][0] < x, 0 <= stations[i][1] < y","solution":"def minChargingStops(target, startBattery, stations): target_x, target_y = target distance = target_x + target_y if startBattery >= distance: return 0 # Sort stations based on their distance from start stations.sort(key=lambda s: (s[0] + s[1])) max_heap = [] battery = startBattery stops = 0 idx = 0 distance_covered = 0 while distance_covered < distance: # Add all stations we can reach with the current battery to max_heap while idx < len(stations) and stations[idx][0] + stations[idx][1] <= distance_covered: # Use a max heap for most effective stations heapq.heappush(max_heap, -stations[idx][2]) idx += 1 # If the battery runs out before reaching the target if battery <= 0: if not max_heap: return -1 # No more stations to recharge from # Refill battery battery += -heapq.heappop(max_heap) stops += 1 # Move one step and reduce battery distance_covered += 1 battery -= 1 return stops import heapq"},{"question":"You are tasked with managing the construction of a new garden that consists of a path and several flower beds. The garden can be represented as a sequence of cells, where each cell can either be a part of the path (\'P\'), a flower bed (\'F\'), or empty (\'.\'). Your goal is to rearrange the garden such that there are no empty cells between any two non-empty cells, and the order of the remaining cells should be preserved. Additionally, you want to keep the path and flower beds grouped together, with the path coming first followed by the flower beds. Write a program that rearranges the garden according to the rules above and returns the final sequence of cells. -----Input----- The first line of the input contains an integer n (1 le n le 10^5) — the length of the initial sequence. The second line contains a string s of length n, consisting of characters \'P\', \'F\', and \'.\' representing the path, flower beds, and empty cells respectively. -----Output----- Print a single string — the rearranged sequence of cells according to the rules described. -----Examples----- Input 10 P.F..P..F. Output PPFF Input 6 F.P.F. Output PFF Input 5 P.... Output P Input 11 ....P..F.P. Output PPF -----Note----- In the first example, we collect all \'P\' cells together followed by all \'F\' cells, resulting in \\"PPFF\\". In the second example, despite the initial sequence having empty cells between \'P\' and \'F\', we must group them together, resulting in \\"PFF\\". In the third example, since there is only one \'P\' and no \'F\', the output is simply \\"P\\". In the fourth example, we must ignore the empty cells and preserve the relative order within \'P\' and \'F\' groups, leading to \\"PPF\\".","solution":"def rearrange_garden(n, s): Rearranges the garden such that there are no empty cells between any two non-empty cells, and the order of the remaining cells is preserved with \'P\' cells first followed by \'F\' cells. Parameters: n (int): Length of the sequence. s (str): The initial sequence of the garden. Returns: str: The rearranged sequence of the garden. paths = [] flowers = [] for char in s: if char == \'P\': paths.append(char) elif char == \'F\': flowers.append(char) return \'\'.join(paths) + \'\'.join(flowers) # Example usage: # print(rearrange_garden(10, \'P.F..P..F.\')) # Output: \\"PPFF\\""},{"question":"You are given two arrays of integers `a` and `b` of the same length, representing two non-negative integer numbers where each array element represents a digit. Your task is to add these two numbers and return the result as an array of digits. Implement: ```python add_arrays(a, b): -- returns an array representing the sum of the two numbers ``` Example: ```python a = [1, 2, 3] b = [4, 5, 6] add_arrays(a, b) returns [5, 7, 9] ``` ```python a = [9, 9, 9] b = [1, 0, 1] add_arrays(a, b) returns [1, 1, 0, 0] ``` Assume that both arrays `a` and `b` are non-empty and contain only digits (0-9). The integers represented by `a` and `b` do not have leading zeros, except in the case where the array represents the number 0.","solution":"def add_arrays(a, b): Given two arrays of integers `a` and `b` representing two non-negative integer numbers, adds these two numbers and returns the result as an array of digits. n = len(a) carry = 0 result = [] # Loop through the numbers from the last digit to the first for i in range(n - 1, -1, -1): total = a[i] + b[i] + carry carry = total // 10 result.append(total % 10) # If there\'s a carry left after the final addition if carry > 0: result.append(carry) # The result array is currently in reverse order return result[::-1]"},{"question":"You are given an array of integers where each element represents the maximum number of steps you can jump forward from that position. Write a function to determine the minimum number of jumps you need to reach the last position of the array. If it\'s not possible to reach the end of the array, return -1. Example 1: ```plaintext Input: [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last position are 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. ``` Example 2: ```plaintext Input: [3,2,1,0,4] Output: -1 Explanation: It\'s not possible to reach the last index. ``` Note: - You can assume that you are always able to reach the first index.","solution":"def min_jumps(arr): Determines the minimum number of jumps needed to reach the last position of the array. Returns -1 if it is not possible to reach the end of the array. if len(arr) <= 1: return 0 jumps = 0 max_reach = 0 step = 0 for i in range(len(arr)): if i > max_reach: return -1 if i + arr[i] > step: step = i + arr[i] if i == max_reach: jumps += 1 max_reach = step if max_reach >= len(arr) - 1: return jumps return -1"},{"question":"Given an array of integers and an integer target, move all occurrences of the target value to the end of the array in-place. Maintain the relative order of the other elements. Example 1: Input: nums = [4, 2, 4, 3, 4, 1], target = 4 Output: [2, 3, 1, 4, 4, 4] Explanation: Move all occurrences of 4 to the end and keep the relative order of other elements. Example 2: Input: nums = [3, 1, 2, 1, 3, 1], target = 1 Output: [3, 2, 3, 1, 1, 1] Explanation: Move all occurrences of 1 to the end and keep the relative order of other elements. Your task: Your task is to complete the function moveTargetToEnd() which takes an array of integers and an integer target as input and modifies the array as mentioned above. You need not take any input or print anything. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def moveTargetToEnd(nums, target): Move all occurrences of target in nums to the end, maintaining the relative order of other elements. :param nums: List[int] - List of integers :param target: int - Target integer to move to the end insert_pos = 0 for i in range(len(nums)): if nums[i] != target: nums[insert_pos] = nums[i] insert_pos += 1 for i in range(insert_pos, len(nums)): nums[i] = target return nums"},{"question":"You are given an array of integers representing the heights of students in a line. The teacher wants to rearrange the students so that they are in non-decreasing order of their heights without breaking their original relative order if their heights are the same. You can perform the following operation any number of times: - Choose any two adjacent students and swap their positions. Design an algorithm to determine the minimum number of swaps required to achieve the goal. -----Constraints----- - 1 ≤ n ≤ 2000 - 1 ≤ height_i ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: n height_1 height_2 ... height_n -----Output----- Print the minimum number of swaps required to rearrange the students. -----Sample Input----- 5 4 3 2 1 5 -----Sample Output----- 4 The objective can be achieved in four operations, for example, as follows: - Swap the 4 and 3 to get [3, 4, 2, 1, 5]. - Swap the 4 and 2 to get [3, 2, 4, 1, 5]. - Swap the 4 and 1 to get [3, 2, 1, 4, 5]. - Swap the 3 and 2 to get [2, 3, 1, 4, 5]. - Swap the 3 and 1 to get [2, 1, 3, 4, 5]. - Swap the 2 and 1 to get [1, 2, 3, 4, 5].","solution":"def minimum_swaps_to_sort_heights(n, heights): Returns the minimum number of swaps required to rearrange students\' heights in non-decreasing order. Parameters: n (int): number of students heights (list): list of integers representing heights of students Returns: int: minimum number of swaps required def count_inversions(arr): # Function to count inversions in the array using merge sort if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = count_inversions(arr[:mid]) right, right_inv = count_inversions(arr[mid:]) merged = [] i = j = 0 inv_count = left_inv + right_inv while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inv_count += len(left) - i merged += left[i:] merged += right[j:] return merged, inv_count _, num_of_swaps = count_inversions(heights) return num_of_swaps"},{"question":"You are given a list of people attending a seminar. Each person has a name and an email address. Your task is to find pairs of people whose email addresses have the same domain (the part of the email after the \'@\' character). You will count the number of distinct pairs that can be formed from those people who share the same email domain. Input The input consists of multiple lines: - The first line contains an integer n (2 ≤ n ≤ 500) — the number of attendees. - The next n lines each contain a name (a string consisting of alphabet characters) and an email address (a string of the form \\"local@domain\\"). Output Output a single integer — the number of distinct pairs of people who share the same email domain. Example Input: 5 Alice alice@example.com Bob bob@sample.com Charlie charlie@example.com Daniel daniel@sample.com Eve eve@example.com Output: 4 Explanation: There are 3 people with the example.com domain (Alice, Charlie, Eve), which form 3 pairs (Alice-Charlie, Alice-Eve, Charlie-Eve). There are 2 people with the sample.com domain (Bob, Daniel), which form 1 pair (Bob-Daniel). Thus, the output is 4.","solution":"def count_pairs_with_same_domain(attendees): Count the number of distinct pairs of people who share the same email domain. :param attendees: list of tuples, each containing a name and an email address :returns: integer, number of distinct pairs with the same domain from collections import defaultdict domain_dict = defaultdict(list) for name, email in attendees: domain = email.split(\'@\')[1] domain_dict[domain].append(name) def combination_count(n): return n * (n - 1) // 2 count = 0 for domain in domain_dict: num_people = len(domain_dict[domain]) if num_people > 1: count += combination_count(num_people) return count"},{"question":"Alex is a biologist who is studying the behavior of species in a specific forest. He has a list of animals, each identified by an integer, and he knows which pairs of animals interact. Alex is particularly interested in finding out if there exists a specific path of interactions between two particular animals. You are given a list of animals and their interactions, and two specific animals, say animal X and animal Y. Alex wants you to determine if there is a sequence of interactions where animal X can interact with animal Y, either directly or indirectly through other animals. -----Input----- The first line of input contains two integers N and M (1 le N, M le 100), the number of animals and the number of interactions respectively. The next M lines each contain two integers a and b (1 le a, b le N), indicating that animal a interacts with animal b. The last line contains two integers X and Y (1 le X, Y le N), the two animals Alex is interested in. -----Output----- Output \\"YES\\" if there is a sequence of interactions between animal X and animal Y. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 1 4 Sample Output 1: YES Sample Input 2: 4 2 1 2 3 4 1 3 Sample Output 2: NO Sample Input 3: 5 4 1 2 2 3 4 5 3 4 2 5 Sample Output 3: YES","solution":"def is_path_between_animals(N, M, interactions, X, Y): from collections import defaultdict, deque # Create a graph from the interactions graph = defaultdict(list) for a, b in interactions: graph[a].append(b) graph[b].append(a) # Use BFS to check if there\'s a path from X to Y queue = deque([X]) visited = set() while queue: current_anim = queue.popleft() if current_anim == Y: return \\"YES\\" for neighbor in graph[current_anim]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"Given a digital display consisting of N rows and M columns, each cell in the display can either be turned on (represented by the character \'1\') or turned off (represented by the character \'0\'). The display can show various shapes or patterns by turning specific cells on or off. You need to determine the smallest rectangular area (submatrix) that contains all the \'1\'s in the digital display and output the coordinates of the top-left and bottom-right cells of this area. The coordinates of a cell are represented by (row, column), where row and column are zero-indexed. For example, consider the following 5x6 digital display: ``` 000000 001100 001100 000000 000000 ``` The smallest rectangle containing all the \'1\'s has top-left coordinates (1, 2) and bottom-right coordinates (2, 3). Write a function `smallest_rectangle` that takes an integer N, an integer M, and a list of strings representing the digital display as input, and returns the coordinates of the top-left and bottom-right cells of the smallest rectangle containing all the \'1\'s. # Function Signature: ```python def smallest_rectangle(N: int, M: int, display: List[str]) -> Tuple[Tuple[int, int], Tuple[int, int]]: ``` # Input: - An integer N, the number of rows in the digital display (1 ≤ N ≤ 1000) - An integer M, the number of columns in the digital display (1 ≤ M ≤ 1000) - A list of N strings, each of length M, consisting only of the characters \'1\' and \'0\' # Output: - A tuple containing two tuples: - First tuple: the coordinates (row, column) of the top-left cell of the smallest rectangle containing all \'1\'s - Second tuple: the coordinates (row, column) of the bottom-right cell of the smallest rectangle containing all \'1\'s # Example: Input: ``` 5 6 [ \\"000000\\", \\"001100\\", \\"001100\\", \\"000000\\", \\"000000\\" ] ``` Output: ``` ((1, 2), (2, 3)) ``` Input: ``` 4 5 [ \\"00000\\", \\"00000\\", \\"00000\\", \\"00000\\" ] ``` Output: ``` ((-1, -1), (-1, -1)) ``` (Note: Return `((-1, -1), (-1, -1))` if there are no \'1\'s in the display.) Write efficient code to handle the largest possible input sizes within reasonable time limits.","solution":"from typing import List, Tuple def smallest_rectangle(N: int, M: int, display: List[str]) -> Tuple[Tuple[int, int], Tuple[int, int]]: top, bottom, left, right = N, -1, M, -1 for r in range(N): for c in range(M): if display[r][c] == \'1\': if r < top: top = r if r > bottom: bottom = r if c < left: left = c if c > right: right = c if top == N: return ((-1, -1), (-1, -1)) return ((top, left), (bottom, right))"},{"question":"To celebrate her birthday, Alice’s friends have decided to challenge her with a fun coding problem. The challenge involves strings and is as follows: Given a string S and a number Q representing the number of queries, each query consists of two numbers L and R. For each query, Alice has to determine if the substring of S from index L to R (inclusive) is a palindrome. A palindrome is a string that reads the same forward as backward. Can you help Alice solve this problem? # Input: - The first line contains the string S. - The second line contains the number of queries Q. - The following Q lines each contain two integers L and R representing the start and end indices (0-based) of the substring. # Output: For each query, print \\"Yes\\" if the substring S[L:R+1] is a palindrome, otherwise print \\"No\\". # Constraints: - 1 ≤ |S| ≤ 10^5 (|S| is the length of the string S). - 1 ≤ Q ≤ 10^4. - 0 ≤ L ≤ R < |S|. # SAMPLE INPUT: ``` abba 4 0 3 0 2 1 2 1 3 ``` # SAMPLE OUTPUT: ``` Yes No Yes No ```","solution":"def is_palindrome_substring(S, queries): Determines if the substring of S from index L to R (inclusive) is a palindrome for each query. Parameters: S (str): The input string. queries (list): A list of tuples containing the queries (L, R). Returns: list: A list of strings \\"Yes\\" or \\"No\\" indicating if the substring for each query is a palindrome. results = [] for (L, R) in queries: substring = S[L:R+1] if substring == substring[::-1]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A restaurant has a dynamic reservation system that allows guests to reserve tables. Each table is identified by a unique integer from 1 to n, and each table can host one group of guests at a time. The system must navigate various reservation and cancellation requests efficiently. Your task is to design a function to handle these requests. The system supports two types of operations: 1. Reserve a table: \\"RESERVE x k\\" means a group of size k wants to reserve table x. If the table is already reserved, the reservation request is denied. 2. Cancel a reservation: \\"CANCEL x\\" means the reservation for table x is to be canceled. If the table is not reserved, the cancellation request is denied. Additionally, each request is processed in the order they are received. -----Input----- The first line contains an integer q (1 le q le 10^5) — the number of requests. Each of the next q lines contains one request of the form: \\"RESERVE x k\\" or \\"CANCEL x\\" where: - \\"x\\" is the table number (1 le x le n) - \\"k\\" is the number of guests (1 le k le 10^9) -----Output----- For each \\"RESERVE\\" request, output \\"SUCCESS\\" if the reservation was successful, and \\"FAIL\\" if the table was already reserved. For each \\"CANCEL\\" request, output \\"CANCELLED\\" if the cancellation was successful, and \\"NOT FOUND\\" if the table was not reserved. -----Examples----- Input: 6 RESERVE 1 3 RESERVE 2 5 RESERVE 1 6 CANCEL 1 CANCEL 3 RESERVE 1 4 Output: SUCCESS SUCCESS FAIL CANCELLED NOT FOUND SUCCESS -----Explanation----- In the first request, table 1 is reserved successfully. In the second request, table 2 is reserved successfully. In the third request, the reservation for table 1 fails because it is already reserved. In the fourth request, the reservation for table 1 is cancelled successfully. In the fifth request, the cancellation for table 3 fails because it was not reserved. In the sixth request, table 1 is reserved successfully again.","solution":"def handle_requests(operations): reserved_tables = {} results = [] for operation in operations: op_parts = operation.split() action = op_parts[0] table_number = int(op_parts[1]) if action == \\"RESERVE\\": if table_number in reserved_tables: results.append(\\"FAIL\\") else: reserved_tables[table_number] = int(op_parts[2]) results.append(\\"SUCCESS\\") elif action == \\"CANCEL\\": if table_number in reserved_tables: del reserved_tables[table_number] results.append(\\"CANCELLED\\") else: results.append(\\"NOT FOUND\\") return results"},{"question":"You are given an undirected, unweighted graph with n nodes and m edges. Each node is initially uncolored. You are to determine whether it is possible to color the graph using two colors such that no two adjacent nodes have the same color. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 2·10^5, 0 ≤ m ≤ 2·10^5) — the number of nodes and the number of edges in the graph, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing an edge between nodes u and v. -----Output----- Print \\"YES\\" if it is possible to color the graph such that no two adjacent nodes have the same color, otherwise print \\"NO\\". -----Examples----- Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 3 3 1 2 2 3 3 1 Output NO -----Note----- In the first example, it is possible to color the nodes such that nodes 1, 3, and 5 will have one color, and nodes 2 and 4 will have another color, as no adjacent nodes have the same color. In the second example, it\'s impossible to color the graph using two colors in such a way that no adjacent nodes have the same color due to the existence of a triangle (circular dependency).","solution":"def is_bipartite(n, m, edges): from collections import deque, defaultdict def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * n for i in range(n): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\" # Converting the input format to fit the defined function def check_graph_coloring(n, m, edges): edges = [(u-1, v-1) for u, v in edges] return is_bipartite(n, m, edges)"},{"question":"Chef has recently taken an interest in gardening. He has a garden with a row of N plants, each labeled from 1 to N. Each plant requires a specific amount of water per day, represented as an array W with N integers where W[i] is the amount of water the i-th plant needs. Chef has a watering can that can hold at most C units of water. He starts watering the plants from the beginning (plant 1) and moves towards the end (plant N). He can refill the can as many times as needed, and he can continue watering plants as long as he has enough water in the can. Chef wants to minimize the number of times he needs to refill the watering can to ensure all plants get the required amount of water. Write a program to calculate the minimum number of refills required. ------ Input: ------ First line will contain T, number of testcases. Then the testcases follow. Each testcase contains 2 lines of input. The first line will contain 2 integers N (number of plants) and C (capacity of the watering can). The second line contains N integers W_{1}, W_{2}, ldots, W_{N}, the amount of water required by each plant. ------ Output: ------ For each testcase, output in a single line the minimum number of refills required to water all the plants. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ C, W_{i} ≤ 10^{9} ----- Sample Input 1 ------ 3 3 10 5 8 6 4 5 4 1 3 2 5 100 20 30 40 50 60 ----- Sample Output 1 ------ 2 1 2 ----- explanation 1 ------ Test Case 1: Chef starts with 10 units in the can. He waters the 1st plant with 5 units, leaving him with 5 units. He then waters the 2nd plant with 8 units and needs a refill when his can is empty, so he refills after the 1st and 2nd plants. Test Case 2: Chef can water all plants without needing to refill as the total water required is 4 + 1 + 3 + 2 = 10 units which is less than C = 100. Test Case 3: Chef starts with 100 units, but after watering the first 2 plants, he only has 50 units left and needs 100 units to water the remaining 3 plants, so he needs a refill.","solution":"def minimum_refills(T, test_cases): results = [] for case in test_cases: N, C = case[0] W = case[1] refills = 0 current_water = C for water_needed in W: if water_needed > current_water: refills += 1 current_water = C current_water -= water_needed results.append(refills) return results"},{"question":"The city of Technikad is designed based on a grid system, where each intersection of streets is recorded as a point on a 2D plane. Every intersection has a unique pair of coordinates (x, y). Technikad\'s city council wants to implement a new public transport line that can only move either horizontally or vertically on the grid. You are given a list of intersections that must be connected by the transport line. Your task is to determine the minimum number of straight lines (horizontal or vertical) required to connect all the given intersections. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100) representing the number of intersections. Each of the next n lines contains two integers x and y (1 ≤ x, y ≤ 100) representing the coordinates of an intersection. -----Output----- Output a single integer representing the minimum number of straight lines needed to connect all the given intersections. -----Examples----- Input 4 1 1 1 4 4 1 4 4 Output 2 Input 3 1 1 2 2 3 3 Output 3","solution":"def min_straight_lines_to_connect_intersections(n, intersections): x_coords = set() y_coords = set() for x, y in intersections: x_coords.add(x) y_coords.add(y) return min(len(x_coords), len(y_coords))"},{"question":"You are given a string containing lowercase letters, uppercase letters, and digits. Write a function that determines whether the string is a palindrome when considering only the alphanumeric characters and ignoring cases. Return `true` if the input string is a palindrome. Otherwise, return `false`. # Function Signature ```python def is_palindrome(s: str) -> bool: pass ``` # Example ```python is_palindrome(\\"A man, a plan, a canal: Panama\\") => True is_palindrome(\\"race a car\\") => False ``` # Constraints - The length of the input string will be in the range [1, 2 * 10^5]. - The input string consists of printable ASCII characters.","solution":"def is_palindrome(s: str) -> bool: Determines whether the string is a palindrome considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters reads the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"Given the in-order and pre-order traversal of a binary tree, construct the binary tree and return its root. Example: Input: 2 3 1 2 3 1 2 3 4 2 1 3 4 1 2 3 4 Output: 3 4 Explanation: Testcase 1: The in-order and pre-order traversal of nodes 1, 2, and 3 reconstructs a binary tree with height 3. Testcase 2: The in-order and pre-order traversal of nodes 1, 2, 3, and 4 reconstructs a binary tree with height 4. Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow, the first line of each test case contains an integer N denoting the number of nodes in the binary tree. The second line of each test case contains N space-separated integers denoting the in-order traversal of the binary tree. The third line of each test case contains N space-separated integers denoting the pre-order traversal of the binary tree. Output: For each test case, output will be an integer representing the height of the constructed binary tree. Your Task: The task is to complete the function constructBinaryTree() which should take in-order and pre-order traversal information as inputs and return the height of the constructed binary tree. Constraints: 1 <= T <= 100 1 <= N <= 100","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def buildTree(inorder, preorder): if not inorder or not preorder: return None root_val = preorder.pop(0) root = TreeNode(root_val) inorder_index = inorder.index(root_val) root.left = buildTree(inorder[:inorder_index], preorder) root.right = buildTree(inorder[inorder_index + 1:], preorder) return root def treeHeight(node): if node is None: return 0 left_height = treeHeight(node.left) right_height = treeHeight(node.right) return max(left_height, right_height) + 1 def constructBinaryTree(inorder, preorder): Construct a binary tree from given inorder and preorder traversal and return the height of the tree. root = buildTree(inorder, preorder) return treeHeight(root)"},{"question":"Given a string consisting of lowercase English letters, you are allowed to perform exactly one operation on it. In one operation, you can choose one character and replace it with any other lowercase English letter. Your goal is to determine the minimum number of distinct characters in the string after performing exactly one operation. # Input Format - The first and only line contains a single string, s (1 leq |s| leq 10^5). # Output Format - Print a single integer denoting the minimum number of distinct characters in the string after performing one operation. # Sample Input 0 ``` abac ``` # Sample Output 0 ``` 2 ``` # Sample Input 1 ``` aaaa ``` # Sample Output 1 ``` 1 ``` # Explanation **Sample Case 0:** By replacing the third character \'a\' with \'b\', the string becomes \\"abbc\\". Now, there are 2 distinct characters (\'a\' and \'b\') in the string. **Sample Case 1:** Since all characters in the string are already the same, replacing any character will still result in the same string. Therefore, the number of distinct characters remains 1.","solution":"def min_distinct_characters(s): Returns the minimum number of distinct characters in the string s after performing exactly one operation. char_set = set(s) if len(char_set) == 1: return 1 return max(1, len(char_set) - 1)"},{"question":"John is developing an online marketplace where users can search for items. However, due to some database anomalies, the item names might have excess spaces at the beginning or the end, or even multiple spaces between words, which can affect the search results. He needs a solution to streamline the item names by removing any leading or trailing spaces and ensuring there is only one space between words. Create a function that formats the item names appropriately. The function should accept a string representing an item name and return a properly formatted version of that string. -----Input----- The input to the function consists of a single line containing the item name (where the length of the item name should be <= 100). -----Output----- The output should be the corrected item name as described. -----Example----- Input: luxury sofa set Output: luxury sofa set Input: antique clock Output: antique clock","solution":"def format_item_name(item_name): Formats the item name by removing leading or trailing spaces and ensuring there is only one space between words. # Split the string by whitespace and join with single spaces return \\" \\".join(item_name.split())"},{"question":"A company has launched a new system for tracking device usage in their office. Each device in the system is identified with a unique ID and a power consumption rate. The system allows for tracking the total power consumption when the devices are in use. You need to implement a program that can handle the following operations: 1. Register a new device with its ID and power consumption rate. 2. Start using a device, which will increase the total power consumption. 3. Stop using a device, which will decrease the total power consumption. 4. Query the current total power consumption of all active devices. -----Input----- The first line contains an integer Q (1 leq Q leq 100 000), representing the number of operations. Each of the following Q lines will contain one of the following types of operations: - \\"REGISTER id power\\" (1 ≤ id ≤ 1 000 000, 1 ≤ power ≤ 1 000 000): Register a new device with the given ID and power consumption rate. - \\"START id\\": Start using the device with the given ID. - \\"STOP id\\": Stop using the device with the given ID. - \\"QUERY\\": Output the current total power consumption of all active devices. It is guaranteed that each \\"START\\" or \\"STOP\\" operation will refer to an already registered device and \\"START\\" or \\"STOP\\" operations will be consistent (e.g., \\"START\\" will not be called on an already started device and \\"STOP\\" will not be called on an already stopped device). -----Output----- For each \\"QUERY\\" operation, output the current total power consumption as a single integer. -----Examples----- Sample Input 1: 6 REGISTER 1 100 REGISTER 2 200 START 1 START 2 QUERY STOP 1 QUERY Sample Output 1: 300 200 Sample Input 2: 7 REGISTER 1 150 REGISTER 2 50 START 1 START 2 STOP 2 QUERY START 2 QUERY Sample Output 2: 150 200","solution":"class DeviceUsageTrackingSystem: def __init__(self): self.devices = {} self.active_devices = set() self.total_power = 0 def register(self, device_id, power): self.devices[device_id] = power def start(self, device_id): if device_id in self.devices and device_id not in self.active_devices: self.active_devices.add(device_id) self.total_power += self.devices[device_id] def stop(self, device_id): if device_id in self.devices and device_id in self.active_devices: self.active_devices.remove(device_id) self.total_power -= self.devices[device_id] def query(self): return self.total_power def process_operations(operations): system = DeviceUsageTrackingSystem() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"REGISTER\\": system.register(int(parts[1]), int(parts[2])) elif parts[0] == \\"START\\": system.start(int(parts[1])) elif parts[0] == \\"STOP\\": system.stop(int(parts[1])) elif parts[0] == \\"QUERY\\": results.append(system.query()) return results"},{"question":"Given a list of integers, determine the longest sequence of consecutive integers that appear in the list (not necessarily in order). A \\"sequence of consecutive integers\\" is defined as a set of integers such that for any two integers x and y in the set, the absolute difference between x and y is exactly 1. -----Constraints----- - The length of the list, L, satisfies 1 leq L leq 100. - Each integer in the list is between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: L num_1 num_2 : num_L -----Output----- Print the length of the longest sequence of consecutive integers. -----Sample Input----- 6 100 4 200 1 3 2 -----Sample Output----- 4 In this example, the longest sequence of consecutive integers is [1, 2, 3, 4].","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest sequence of consecutive integers in the list. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak if __name__ == \\"__main__\\": import sys input = sys.stdin.read().strip().split(\\"n\\") L = int(input[0]) nums = list(map(int, input[1:])) print(longest_consecutive_sequence(nums))"},{"question":"Mona loves solving puzzles, especially those that involve shuffling and arranging sequences. She has a challenge for you. She provides a list of integers and asks you to determine if it is possible to rearrange the list such that the sum of every two consecutive elements is odd. Two integers are considered to have an odd sum if one is even and the other is odd. -----Input----- The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the number of integers in the list. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the list. -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to rearrange the list such that the sum of every two consecutive elements is odd, and \\"NO\\" (without quotes) otherwise. -----Examples----- Input 3 3 1 2 3 4 2 4 6 8 5 1 3 5 7 9 Output YES NO NO -----Note----- In the first sample, rearranging the list as [1, 2, 3] will ensure the sums of every two consecutive elements are odd (1+2=3, 2+3=5). In the second sample, since all elements are even, we can\'t achieve an odd sum. In the third sample, since all elements are odd, any arrangement won\'t give an odd sum.","solution":"def can_rearrange_to_odd_sum_pairs(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count if even_count > 0 and odd_count > 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 3 # test_cases = [ # (3, [1, 2, 3]), # (4, [2, 4, 6, 8]), # (5, [1, 3, 5, 7, 9]) # ] # print(can_rearrange_to_odd_sum_pairs(t, test_cases))"},{"question":"Given two integers m and n, write a function that returns the smallest multiple of m that is greater than or equal to n. If there is no such multiple, return -1. # Function Signature ```python def smallest_multiple(m: int, n: int) -> int: ``` # Input - `m`: An integer, where 1 <= m <= 10^9. - `n`: An integer, where 0 <= n <= 10^9. # Output - Return the smallest multiple of `m` that is greater than or equal to `n`. If no such multiple exists, return -1. # Example Example 1 ```python m = 3 n = 10 Output: 12 Explanation: The multiples of 3 are 3, 6, 9, 12, ... The smallest multiple that is greater than or equal to 10 is 12. ``` Example 2 ```python m = 5 n = 19 Output: 20 Explanation: The multiples of 5 are 5, 10, 15, 20, ... The smallest multiple that is greater than or equal to 19 is 20. ``` Example 3 ```python m = 1 n = 1 Output: 1 Explanation: The multiples of 1 are 1, 2, 3, 4, ... The smallest multiple that is greater than or equal to 1 is 1. ``` # Constraints - 1 <= m <= 10^9 - 0 <= n <= 10^9","solution":"def smallest_multiple(m: int, n: int) -> int: Returns the smallest multiple of m that is greater than or equal to n. if m <= 0 or n < 0: return -1 # If n is already a multiple of m if n % m == 0: return n # The smallest multiple of m >= n return ((n + m - 1) // m) * m"},{"question":"Three friends (Alice, Bob, and Charlie) are playing a game where they each take turns adding a specific number of points to a total score. Alice always adds `a` points, Bob adds `b` points, and Charlie adds `c` points. The game starts with a total score of 0, and they play in the order of Alice, Bob, and Charlie, continuously in cycles. They want to know what the minimum number of complete cycles is needed for the total score to reach at least a given target score `T`. Input The first line of the input contains an integer `t`, the number of test cases. Each of the next `t` lines contains four integers `a`, `b`, `c`, and `T`. Output For each test case, print the minimum number of complete cycles needed for the total score to be greater than or equal to the target score `T`. Constraints 1 <= t <= 100 1 <= a, b, c <= 1000 1 <= T <= 1000000 Example Input: 2 1 2 3 10 5 5 5 30 Output: 2 2 Explanation In the first test case: - Each cycle adds `1+2+3=6` points. After 1 cycle, the score is 6, and after 2 cycles, the score is 12 which is greater than or equal to the target score of 10. So the answer is 2. In the second test case: - Each cycle adds `5+5+5=15` points. After 1 cycle, the score is 15, and after 2 cycles, the score is 30 which is equal to the target score of 30. So the answer is 2.","solution":"def min_cycles(t, test_cases): results = [] for case in test_cases: a, b, c, T = case cycle_score = a + b + c cycles_needed = (T + cycle_score - 1) // cycle_score # This is equivalent to math.ceil(T / cycle_score) results.append(cycles_needed) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],R={key:0},P={key:1};function z(s,e,l,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[w,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",C,[(n(!0),i(y,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,j)):u("",!0)])}const L=d(A,[["render",z],["__scopeId","data-v-c68fda9d"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/19.md","filePath":"deepseek/19.md"}'),D={name:"deepseek/19.md"},G=Object.assign(D,{setup(s){return(e,l)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,G as default};
