import{_ as f,o as n,c as r,a as t,m,t as h,C as g,M as _,U as b,f as l,F as y,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},W={class:"review-title"},R={class:"review-content"};function F(i,e,u,c,s,o){return n(),r("div",k,[t("div",T,[t("div",W,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),m(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),m(h(u.poem.solution),1)])])])}const A=f(q,[["render",F],["__scopeId","data-v-3acd70e0"]]),I=JSON.parse(`[{"question":"Write a python function to programming a binary search tree. Implement the following functions: insert, delete, search, and in-order traversal.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert_rec(self.root, key) def _insert_rec(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert_rec(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert_rec(node.right, key) def search(self, key): return self._search_rec(self.root, key) def _search_rec(self, node, key): if node is None or node.val == key: return node if key < node.val: return self._search_rec(node.left, key) return self._search_rec(node.right, key) def delete(self, key): self.root = self._delete_rec(self.root, key) def _delete_rec(self, node, key): if node is None: return node if key < node.val: node.left = self._delete_rec(node.left, key) elif key > node.val: node.right = self._delete_rec(node.right, key) else: if node.left is None: return node.right elif node.right is None: return node.left temp = self._min_value_node(node.right) node.val = temp.val node.right = self._delete_rec(node.right, temp.val) return node def _min_value_node(self, node): current = node while current.left is not None: current = current.left return current def in_order_traversal(self): result = [] self._in_order_rec(self.root, result) return result def _in_order_rec(self, node, result): if node: self._in_order_rec(node.left, result) result.append(node.val) self._in_order_rec(node.right, result)"},{"question":"Write a python function to detect a cycle in a linked list using Floyd's Tortoise and Hare algorithm. The function should return \`True\` if a cycle is detected, and \`False\` otherwise.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Detects if there's a cycle in a linked list using Floyd's Tortoise and Hare algorithm. Returns True if a cycle is detected, otherwise False. if not head or not head.next: return False slow = head fast = head.next while slow != fast: if not fast or not fast.next: return False slow = slow.next fast = fast.next.next return True"},{"question":"Write a python function to generate the first 10 Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Could you please provide a solution for this?","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers. if n <= 0: return [] if n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence # Generate the first 10 Fibonacci numbers first_10_fibonacci = generate_fibonacci(10) print(first_10_fibonacci)"},{"question":"Write a python function to calculate the total number of distinct permutations of a given string.","solution":"from math import factorial from collections import Counter def distinct_permutations_count(s): Returns the total number of distinct permutations of a given string \`s\`. # Count the frequency of each character in the string freq = Counter(s) # Calculate the denominator product of factorials of the frequencies denominator = 1 for count in freq.values(): denominator *= factorial(count) # Calculate the number of distinct permutations return factorial(len(s)) // denominator"},{"question":"Write a python function to calculate the number of words in a given sentence, but ignore punctuation and consider \\"Hello, world!\\" and \\"Hello world!\\" as having the same number of words. To solve this problem, when counting words, you should ignore any leading, trailing, or in-between spaces, and consider \\"word,\\" and \\"word\\" (without the double quotes) as having the same number of words.","solution":"import re def count_words(sentence): Returns the number of words in a sentence, ignoring punctuation. # Remove punctuation using regex cleaned_sentence = re.sub(r'[^ws]', '', sentence) # Split the cleaned sentence into words and filter out empty strings words = [word for word in cleaned_sentence.split() if word] return len(words)"},{"question":"Write a python function to return the longest common prefix string among an array of strings. If there is no common prefix, return an empty string \\"\\". A common prefix is the sequence of characters that are the same in all the given strings from the start.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string \\"\\". if not strs: return \\"\\" # Start with the first word in the array as the base common prefix prefix = strs[0] for string in strs[1:]: # Check the common prefix with the next string while string[:len(prefix)] != prefix and prefix: # Shorten the prefix prefix = prefix[:-1] if not prefix: break return prefix"},{"question":"Write a python function to check if a string of digits is a valid phone number in the USA format, which follows the pattern (XXX) XXX-XXXX. How should I approach this problem?","solution":"import re def is_valid_phone_number(phone_number): Checks if the input phone number matches the USA format (XXX) XXX-XXXX :param phone_number: Phone number as string :return: True if valid, False otherwise pattern = r'^(d{3}) d{3}-d{4}' return bool(re.match(pattern, phone_number))"},{"question":"Write a python function to return a list containing the squares of all numbers in the input list.","solution":"def square_list(numbers): Returns a list containing the squares of all numbers in the input list. :param numbers: List of numbers :return: List of squared numbers return [number ** 2 for number in numbers]"},{"question":"Write a python function to find the maximum rectangular area in a histogram given the heights of the bars in the histogram.","solution":"def max_rect_area(hist): Finds the maximum rectangular area in a histogram given heights of the bars. Parameters: hist (list of int): A list of integers representing the heights of histogram bars. Returns: int: The maximum rectangular area in the histogram. stack = [] max_area = 0 index = 0 while index < len(hist): if not stack or hist[index] >= hist[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a python function to merge all the elements of a multi-dimensional list into a single list without using the append() method","solution":"def merge_multi_dimensional_list(multi_list): Merges all the elements of a multi-dimensional list into a single list without using the append() method. if not multi_list: return [] result = [] for element in multi_list: if isinstance(element, list): result.extend(merge_multi_dimensional_list(element)) else: result.extend([element]) return result"},{"question":"Write a python function to calculate the Fibonacci sequence using recursion. The function should take two parameters, the first for the minimum number and the second for the maximum number up to which the Fibonacci sequence is to be calculated.","solution":"def fibonacci(min_num, max_num): Calculates the Fibonacci sequence from min_num to max_num. Returns a list of Fibonacci numbers within the given range. def fib(n): if n == 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2) fibonacci_list = [] i = 0 while True: fib_num = fib(i) if fib_num > max_num: break if fib_num >= min_num: fibonacci_list.append(fib_num) i += 1 return fibonacci_list"},{"question":"Write a python function to implement the Vigenere Cipher with a key provided by the user. Ensure that the function can both encrypt and decrypt any given string with this key. The key will only consist of uppercase letters.","solution":"def vigenere_cipher(text, key, encrypt=True): Encrypt or decrypt the given text using the Vigenere Cipher with the provided key. Parameters: text (str): The text to encrypt or decrypt. key (str): The key to use for encryption or decryption. Should consist of uppercase letters only. encrypt (bool): Whether to encrypt (True) or decrypt (False) the given text. Returns: str: The encrypted or decrypted text. result = [] key_length = len(key) key_as_int = [ord(i) for i in key] text_as_int = [ord(i) for i in text] for i in range(len(text_as_int)): if encrypt: value = (text_as_int[i] + key_as_int[i % key_length] - 2 * ord('A')) % 26 + ord('A') else: value = (text_as_int[i] - key_as_int[i % key_length]) % 26 + ord('A') result.append(chr(value)) return \\"\\".join(result)"},{"question":"Write a python function to find the current date and time as a string in the format \\"YYYY-MM-DD HH:MM:SS\\".","solution":"from datetime import datetime def get_current_datetime(): Returns the current date and time as a string in the format \\"YYYY-MM-DD HH:MM:SS\\". return datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\")"},{"question":"Write a python function to find the sum of all numbers between 1 to a given number using recursion.","solution":"def sum_recursive(n): Returns the sum of all numbers from 1 to n using recursion. Args: n (int): The upper limit of the range to sum. Returns: int: The sum of all numbers from 1 to n. if n <= 1: return n else: return n + sum_recursive(n - 1)"},{"question":"Write a python function to find the maximum and minimum values in a list using recursion.","solution":"def find_min_max_recursive(lst, min_val=None, max_val=None, index=0): Returns a tuple (min_val, max_val) for the given list using recursion. # Base case: if the list is empty if len(lst) == 0: return (None, None) # Initialization in the first call if index == 0: min_val = lst[0] max_val = lst[0] # Base case: when all elements have been processed if index == len(lst): return (min_val, max_val) # Update min and max values current_value = lst[index] if current_value < min_val: min_val = current_value if current_value > max_val: max_val = current_value # Recursive call for the next element return find_min_max_recursive(lst, min_val, max_val, index + 1)"},{"question":"Write a python function to find the maximum subarray from a given array of integers.","solution":"def max_subarray(arr): Finds the maximum subarray sum using Kadane's Algorithm. :param arr: List of integers :return: Integer, maximum subarray sum max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to implement a binary search algorithm to search for a target value in a sorted array. If the target is found, return its index. If not found, return -1.","solution":"def binary_search(arr, target): Implements the binary search algorithm to find the target in the sorted array \`arr\`. Returns the index of the target if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to calculate the number of ways to represent a given integer N as the sum of k positive integers. The function should take two parameters: the integer N and the number of positive integers k.","solution":"from math import comb def number_of_ways(N, k): Returns the number of ways to represent N as the sum of k positive integers. if N < k: return 0 return comb(N - 1, k - 1)"},{"question":"Write a python function to find the sum of of all multiples of 5 and 7 less than 101.","solution":"def sum_of_multiples(): Returns the sum of all multiples of 5 and 7 less than 101. total_sum = 0 for i in range(101): if i % 5 == 0 or i % 7 == 0: total_sum += i return total_sum # In case you want to see the result directly # print(sum_of_multiples())"},{"question":"Write a python function to partition an array into two halves. If the length of the array is odd, the extra element should be placed in the first half.","solution":"def partition_array(arr): Partitions the array into two halves. If the length of the array is odd, the extra element should be placed in the first half. Args: arr (list): The input array to be partitioned. Returns: tuple: A tuple containing the two halves as lists. mid_index = (len(arr) + 1) // 2 first_half = arr[:mid_index] second_half = arr[mid_index:] return (first_half, second_half)"},{"question":"Write a python function to calculate the greatest common divisor (GCD) of two numbers. The function should be recursive and utilize the Euclidean algorithm.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. This function is implemented recursively. if b == 0: return a else: return gcd(b, a % b)"},{"question":"Write a python function to implement the Caesar cipher encryption. The function takes a string and an integer indicating the shift value and returns the encrypted string. Ensure your function also handles uppercase and lowercase letters, as well as non-alphabet characters.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using Caesar cipher with the specified shift. Parameters: text (str): the text to be encrypted. shift (int): the shift value for the cipher. Returns: str: the encrypted text. result = [] for char in text: if char.isupper(): result.append(chr((ord(char) + shift - 65) % 26 + 65)) elif char.islower(): result.append(chr((ord(char) + shift - 97) % 26 + 97)) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to find the given text substring in a parent string ignoring case sensitivity.","solution":"def find_substring(parent_str, sub_str): Returns the first index of the substring sub_str in the string parent_str ignoring case sensitivity. If the substring is not found, returns -1. parent_str_lower = parent_str.lower() sub_str_lower = sub_str.lower() return parent_str_lower.find(sub_str_lower)"},{"question":"Write a python function to print a greeting message to a list of names. The function should take the list of names as input and print a greeting message for each name in the list.","solution":"def greet_names(names): Prints a greeting message for each name in the names list. :param names: A list of names (strings) to greet. for name in names: print(f\\"Hello, {name}!\\")"},{"question":"Write a python function to return the numbers between 1-N that are divisible by both 3 and 5.","solution":"def divisible_by_3_and_5(n): Returns a list of numbers between 1 and n that are divisible by both 3 and 5. return [i for i in range(1, n+1) if i % 3 == 0 and i % 5 == 0]"},{"question":"Write a python function to find out how many days in a given year are divisible by both 3 and 5","solution":"def days_divisible_by_3_and_5(year): Returns the number of days in the given year that are divisible by both 3 and 5. Args: year (int): The year to check. Returns: int: The number of days in the year divisible by both 3 and 5. from datetime import datetime, timedelta date = datetime(year, 1, 1) count = 0 while date.year == year: if date.timetuple().tm_yday % 15 == 0: count += 1 date += timedelta(days=1) return count"},{"question":"Write a python function to check if a given matrix is symmetric. A matrix is symmetric if it is equal to its transpose.","solution":"def is_symmetric(matrix): Checks if a given matrix is symmetric. A matrix is symmetric if it is equal to its transpose. :param matrix: A 2D list representing the matrix. :return: True if the matrix is symmetric, False otherwise. if not matrix: return True n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a python function to find the maximum number in a list, including a handling mechanism for empty input list.","solution":"def find_max_in_list(lst): Returns the maximum number in a list. Handles empty lists by returning None. Parameters: lst (list): The list from which to find the maximum number. Returns: int/float/None: The maximum number in the list, or None if the list is empty. if not lst: return None return max(lst)"},{"question":"Write a python function to generate \\"logistic\\" values based on the given exponent \`n\`. The logistic function should follow the formula: \`f(x) = 1 / (1 + e^(-x))\`. You should also implement a function to test the correctness of \`f(x)\`. The test function should generate \\"logistic\\" values for a set of random numbers and check if they are within a specified range.","solution":"import math def logistic(x): Returns the logistic function value for the input x. f(x) = 1 / (1 + e^(-x)) return 1 / (1 + math.exp(-x))"},{"question":"Write a python function to implement Dijkstra's algorithm for a given directed graph with non-negative edge weights. The function should return the shortest path from a source vertex to all the vertices in the graph.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm for a given directed graph with non-negative edge weights. Parameters: graph (dict): A dictionary where keys are vertices and values are dictionaries of neighboring vertices and their edge weights. start: The source vertex from which to calculate the shortest paths. Returns: dict: A dictionary where keys are vertices and values are the shortest distance from the start vertex to that vertex. # Priority queue to keep track of minimum distance priority_queue = [(0, start)] # Dictionary to store shortest paths distances = {vertex: float('inf') for vertex in graph} distances[start] = 0 while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) # Skip processing if we have already found a shorter path if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex].items(): distance = current_distance + weight # Only consider this new path if it's better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a python function to find the first unique character in a given string. The function should return the first character that does not repeat in the string. If there is no unique character, it should return an empty string.","solution":"def first_unique_character(s): Returns the first unique character in the string. If there is no unique character, returns an empty string. char_counts = {} # Count occurrences of each character for char in s: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # Find the first unique character for char in s: if char_counts[char] == 1: return char return \\"\\""},{"question":"Write a python function to implement the Fisher-Yates shuffle algorithm.","solution":"import random def fisher_yates_shuffle(arr): Shuffles an array in place using the Fisher-Yates shuffle algorithm. Parameters: arr (list): The list to be shuffled. n = len(arr) for i in range(n - 1, 0, -1): # Pick a random index from 0 to i j = random.randint(0, i) # Swap arr[i] with the element at random index arr[i], arr[j] = arr[j], arr[i] return arr"},{"question":"Write a python function to filter out all the numbers greater than 10 from a given list and return the new list. Also, write a function to print all the even numbers from a given list.","solution":"def filter_greater_than_ten(numbers): Returns a list of numbers that are greater than 10. return [num for num in numbers if num > 10] def print_even_numbers(numbers): Prints all the even numbers from the given list. even_numbers = [num for num in numbers if num % 2 == 0] for num in even_numbers: print(num) return even_numbers # Return for testing purposes"},{"question":"Write a python function to return the number of ways to make change for a given amount using a given set of coins.","solution":"def change_ways(amount, coins): Returns the number of ways to make change for a given amount using a given set of coins. Parameters: amount (int): The amount for which we need to make change. coins (list): The list of coin denominations. Returns: int: The number of ways to make change for the given amount. # Create a list to store the number of ways to make change for each amount up to the given amount dp = [0] * (amount + 1) # There is one way to make 0 amount (by using no coins) dp[0] = 1 # Iterate over each coin for coin in coins: # Update the dp list for each amount that is greater than or equal to the coin's value for x in range(coin, amount + 1): dp[x] += dp[x - coin] return dp[amount]"},{"question":"Write a python function to find the size of a set in Python, i.e., the number of elements in the set. Do not use python's built-in len() function.","solution":"def set_size(input_set): Returns the size of the input set. count = 0 for _ in input_set: count += 1 return count"},{"question":"Write a python function to generate the first n Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence is represented as 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Generates the first n Fibonacci numbers. if n == 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to remove a specific item from a set. For example, if the function is called with the following parameters: remove_from_set(my_set, 'apple'), it should remove 'apple' from the set and return the modified set.","solution":"def remove_from_set(s, item): Removes a specific item from a set. Parameters: s (set): The set from which the item will be removed. item: The item to remove from the set. Returns: set: The modified set with the item removed. s.discard(item) return s"},{"question":"Write a python function to return the longest increasing subsequence (LIS) in a list of integers. The LIS is defined as the longest subsequence where the elements are in ascending order, and each element is larger than the preceding one.","solution":"def longest_increasing_subsequence(arr): Returns the longest increasing subsequence in an array of integers. if not arr: return [] n = len(arr) lengths = [1] * n # Lengths array to store the length of LIS up to each element predecessors = [-1] * n # Predecessor array to store the indices of previous elements in the LIS for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 predecessors[i] = j # Find the maximum length of LIS and its last index max_length = max(lengths) max_index = lengths.index(max_length) # Reconstruct the LIS lis = [] while max_index != -1: lis.append(arr[max_index]) max_index = predecessors[max_index] lis.reverse() return lis"},{"question":"Write a python function to add two numbers passed as arguments and return the sum using a lambda function.","solution":"add_lambda = lambda a, b: a + b"},{"question":"Write a python function to return the sum of all the numbers in a list using a loop. You don't have to use recursion or list comprehensions.","solution":"def sum_of_list(numbers): Returns the sum of all the numbers in the list. :param numbers: List of numbers :return: Sum of the numbers in the list total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to read a CSV file and print the contents.","solution":"import csv def read_csv(file_path): Reads a CSV file and prints its contents. :param file_path: The path to the CSV file to be read. with open(file_path, mode='r') as file: csv_reader = csv.reader(file) for row in csv_reader: print(row)"},{"question":"Write a python function to find the nth Fibonacci number using dynamic programming. The function should optimize performance for large values of n by storing previously calculated Fibonacci numbers in a memory-efficient data structure.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 if n == 1: return 1 fib = [0, 1] for i in range(2, n + 1): fib.append(fib[-1] + fib[-2]) return fib[n]"},{"question":"Write a python function to find the k-th largest element in an array. The array size could range from 10 to 1000, and the k value could be in the range of 1 to the size of the array. Use Python's built-in data structures and methods for sorting and indexing.","solution":"def find_kth_largest(nums, k): Returns the k-th largest element in the array nums. :param nums: List of integers :param k: The order of the largest element to find, 1-based index :return: The k-th largest element # Sort the array in descending order nums_sorted = sorted(nums, reverse=True) # Return the k-th largest element return nums_sorted[k - 1]"},{"question":"Write a python function to convert a given string into a dictionary where the keys are the unique characters in the string, and the values are the frequencies of these characters.","solution":"def string_to_frequency_dict(s): Converts a given string into a dictionary where the keys are the unique characters in the string, and the values are the frequencies of these characters. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Write a python function to reverse each word in a given string. The function should take a string as input and return a new string where each word's characters are reversed. For example, if the input is \\"hello world\\", the output should be \\"olleh dlrow\\".","solution":"def reverse_each_word(input_string): Reverse each word in the input string. Args: input_string (str): The input string containing words to be reversed. Returns: str: A new string where each word's characters are reversed. words = input_string.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to print a pyramid pattern of stars. The function should take an integer \`n\` as an input and print a pyramid pattern with \`n\` rows, where the first row has one star, the second row has two stars, and so on until the nth row which has \`n\` stars. Each row should be right-aligned with spaces to create the pyramid shape.","solution":"def print_pyramid(n): Prints a right-aligned pyramid pattern of stars with n rows. Each row i contains i stars. for i in range(1, n + 1): # Print spaces to right-align the stars print(' ' * (n - i) + '*' * i)"},{"question":"Write a python function to return the two numbers in an array that add up to target. If there are no two numbers that add up to target, return [0, 0]. However, the solution should not use brute force and should have a time complexity of at most O(n).","solution":"def two_sum(numbers, target): Returns two numbers from the list that add up to the target, or [0, 0] if no such pair exists. seen = {} for number in numbers: complement = target - number if complement in seen: return [complement, number] seen[number] = True return [0, 0]"},{"question":"Write a python function to print the Fibonacci series up to 'n' terms.","solution":"def fibonacci_series(n): Prints the Fibonacci series up to n terms. fib_series = [] a, b = 0, 1 for _ in range(n): fib_series.append(a) a, b = b, a + b return fib_series"},{"question":"Write a python function to find the maximum sum of a subarray within a 2-D array. The function should take a 2-D array as input and return the maximum sum of any subarray within it, where a subarray is defined as a contiguous block of elements within a row or a column.","solution":"def max_subarray_sum_2d(matrix): Returns the maximum sum of any subarray within a 2-D array. A subarray is defined as a contiguous block of elements within a row or a column. def max_subarray_sum_1d(arr): max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_sum = -float('inf') for row in matrix: row_max_sum = max_subarray_sum_1d(row) max_sum = max(max_sum, row_max_sum) for col in range(len(matrix[0])): col_array = [matrix[row][col] for row in range(len(matrix))] col_max_sum = max_subarray_sum_1d(col_array) max_sum = max(max_sum, col_max_sum) return max_sum"},{"question":"Write a python function to compute the sum of the elements of a list recursively. If the list is empty, the function should return 0. Use recursion to achieve this.","solution":"def sum_list(lst): Returns the sum of the elements in the list lst recursively. if not lst: return 0 else: return lst[0] + sum_list(lst[1:])"},{"question":"Write a python function to find the next greater element for each element in the input list. The Next Greater Element for an element x in the input list is the first greater element to its right in the list. If no such element exists for an element x, set the result as -1.","solution":"def next_greater_elements(nums): Returns a list of the next greater element for each element in the input list. If no greater element is found, -1 is placed in the result for that element. :param nums: List of integers :return: List of integers representing the next greater element for each input element result = [-1] * len(nums) stack = [] for i, num in enumerate(nums): while stack and nums[stack[-1]] < num: result[stack.pop()] = num stack.append(i) return result"},{"question":"Write a python function to simulate a simple email server that listens on a specific port and accepts incoming connections. Once a client connects, the server should receive an email message from the client and print the email content to the console.","solution":"import socket def start_email_server(host, port): Starts a simple email server that listens on the specified host and port. Parameters: host (str): The host address on which the server listens. port (int): The port number on which the server listens. # Create a socket object server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Bind the socket to the host and port server_socket.bind((host, port)) # Start listening for incoming connections server_socket.listen(1) print(f\\"Server started, listening on {host}:{port}\\") while True: # Accept a new connection client_socket, client_address = server_socket.accept() print(f\\"Connected to {client_address}\\") # Receive the email message from the client email_content = client_socket.recv(4096).decode(\\"utf-8\\") print(\\"Received email content:\\") print(email_content) # Close the client connection client_socket.close()"},{"question":"Write a python function to find the smallest integer that is greater than or equal to a given number \`n\` and is a multiple of 10.","solution":"def smallest_multiple_of_10(n): Returns the smallest integer that is greater than or equal to \`n\` and is a multiple of 10. if n % 10 == 0: return n return (n // 10 + 1) * 10"},{"question":"Write a python function to find the greatest common divisor (GCD) of two integers using the Euclidean algorithm. The Euclidean algorithm is based on the principle that the GCD of two numbers also divides their difference.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Write a python function to identify palindromes in a list of strings and return a list of these palindromes.","solution":"def find_palindromes(strings): Identifies palindromes in a list of strings. Parameters: - strings: List of strings to be checked Returns: - List of palindromes found in the input list. return [s for s in strings if s == s[::-1]]"},{"question":"Write a python function to sort an array of numbers using the insertion sort algorithm. Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.","solution":"def insertion_sort(arr): Sorts an array of numbers using the insertion sort algorithm. Parameters: arr (list): The list of numbers to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position while j >= 0 and arr[j] > key: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to convert a number from decimal to binary and then to hexadecimal. You need to return the hexadecimal representation as a string.","solution":"def decimal_to_hexadecimal(n): Converts a decimal number to its hexadecimal representation. Args: n (int): The decimal number to convert. Returns: str: The hexadecimal representation of the number. # Convert decimal to binary binary_representation = bin(n)[2:] # Convert binary to hexadecimal hexadecimal_representation = hex(int(binary_representation, 2))[2:].upper() return hexadecimal_representation"},{"question":"Write a python function to find the cumulative sum of a 1D array. The cumulative sum is the sum of elements from the start of the array to the current position in the array.","solution":"def cumulative_sum(arr): Returns the cumulative sum of elements in a 1D array. Parameters: arr (list): A list of numbers. Returns: list: A list of cumulative sums. if not arr: return [] cum_sum = [arr[0]] for i in range(1, len(arr)): cum_sum.append(cum_sum[-1] + arr[i]) return cum_sum"},{"question":"Write a python function to convert a binary number (given as a string) into its decimal equivalent.","solution":"def binary_to_decimal(binary_str): Converts a binary number (as a string) to its decimal equivalent. Args: binary_str (str): A string representing a binary number. Returns: int: The decimal equivalent of the binary number. return int(binary_str, 2)"},{"question":"Write a python function to find the maximum product of any triplet in a list.","solution":"def maximum_product_of_triplet(lst): Returns the maximum product of any triplet in a list. if len(lst) < 3: raise ValueError(\\"List must contain at least three elements\\") lst.sort() # The maximum product can be the product of the last three elements in a sorted list # or the product of the two smallest elements and the largest element. return max(lst[-1] * lst[-2] * lst[-3], lst[0] * lst[1] * lst[-1])"},{"question":"Write a python function to remove special characters from a string.","solution":"import re def remove_special_characters(input_string): Removes special characters from the input string. return re.sub(r'[^A-Za-z0-9 ]+', '', input_string)"},{"question":"Write a python function to remove duplicates from a list and return the list in reverse order.","solution":"def remove_duplicates_and_reverse(lst): Removes duplicates from the list and returns it in reverse order. unique_items = list(dict.fromkeys(lst)) unique_items.reverse() return unique_items"},{"question":"Write a python function to calculate the Fibonacci sequence up to the nth number. The function should efficiently handle large values of n using dynamic programming.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth number using dynamic programming. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to find the length of the longest common sub sequence between two strings.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. n, m = len(str1), len(str2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Write a python function to find the closest pair of points in a 2D plane. The function should take a list of tuples representing the points and return a tuple containing the two closest points and the distance between them.","solution":"import math from itertools import combinations def distance(p1, p2): Calculate the Euclidean distance between two points p1 and p2. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def closest_pair_of_points(points): Returns the two closest points and the distance between them. min_distance = float('inf') closest_pair = (None, None) for (p1, p2) in combinations(points, 2): dist = distance(p1, p2) if dist < min_distance: min_distance = dist closest_pair = (p1, p2) return closest_pair, min_distance"},{"question":"Write a python function to calculate the cumulative gravitational force between two objects using the formula F = G * (m1 * m2) / r^2, where G is the gravitational constant, m1 and m2 are the masses of the two objects, and r is the distance between them. G is approximately 6.67430e-11 m^3 kg^-1 s^-2.","solution":"def gravitational_force(m1, m2, r): Calculates the gravitational force between two masses m1 and m2 separated by a distance r. Parameters: m1 (float): Mass of the first object (in kg). m2 (float): Mass of the second object (in kg). r (float): Distance between the centers of the two objects (in meters). Returns: float: Gravitational force between the two masses (in Newtons). G = 6.67430e-11 # gravitational constant in m^3 kg^-1 s^-2 return G * (m1 * m2) / r ** 2"},{"question":"Write a python function to find the square root of a number without using any built-in functions like \`sqrt()\` or \`pow()\`. Implement the function using the Bisection method.","solution":"def sqrt_bisection(n, tolerance=1e-10): Find the square root of a number using the bisection method. Parameters: n (float): The number to find the square root of. tolerance (float): The tolerance level for the difference between the square of the estimated root and n. Returns: float: The estimated square root of n. if n < 0: raise ValueError(\\"Cannot compute the square root of a negative number\\") elif n == 0 or n == 1: return n low, high = 0, n if n < 1: high = 1 while high - low > tolerance: mid = (low + high) / 2 square = mid * mid if square < n: low = mid else: high = mid return (low + high) / 2"},{"question":"Write a python function to solve a 15-puzzle problem. The puzzle is a 4x4 grid with 15 numbered tiles and one empty space. The goal is to get the tiles in numerical order. You will be given the initial state of the puzzle and should return the minimum number of moves to solve the puzzle if possible, otherwise, return -1 indicating no solution exists.","solution":"from heapq import heappop, heappush from itertools import product class PuzzleSolver: def __init__(self, start): self.start = start self.goal = tuple(range(1, 16)) + (0,) self.dim = 4 def _generate_neighbors(self, pos): neighbors = [] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right x, y = pos for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < self.dim and 0 <= ny < self.dim: neighbors.append((nx, ny)) return neighbors def _manhattan_distance(self, state): distance = 0 for i, cell in enumerate(state): if cell != 0: correct_pos = (cell - 1) // self.dim, (cell - 1) % self.dim current_pos = i // self.dim, i % self.dim distance += abs(correct_pos[0] - current_pos[0]) + abs(correct_pos[1] - current_pos[1]) return distance def solve(self): start_flat = tuple(cell for row in self.start for cell in row) if self._is_solvable(start_flat): pq = [] start_md = self._manhattan_distance(start_flat) heappush(pq, (start_md, 0, start_flat, start_flat.index(0), self._manhattan_distance(start_flat))) seen = {start_flat: 0} while pq: _, moves, current, blank_idx, _ = heappop(pq) if current == self.goal: return moves x, y = divmod(blank_idx, self.dim) for nx, ny in self._generate_neighbors((x, y)): new_blank_idx = nx * self.dim + ny new_state = list(current) new_state[blank_idx], new_state[new_blank_idx] = new_state[new_blank_idx], new_state[blank_idx] new_state = tuple(new_state) new_moves = moves + 1 new_md = new_moves + self._manhattan_distance(new_state) if new_state not in seen or seen[new_state] > new_moves: seen[new_state] = new_moves heappush(pq, (new_md, new_moves, new_state, new_blank_idx, new_md)) return -1 else: return -1 def _is_solvable(self, state): inversion_count = 0 empty_row = 0 for i in range(16): for j in range(i + 1, 16): if state[i] and state[j] and state[i] > state[j]: inversion_count += 1 empty_row = state.index(0) // 4 if empty_row % 2 == 0: # even row from bottom (0-based indexing) return inversion_count % 2 == 1 else: # odd row from bottom (0-based indexing) return inversion_count % 2 == 0"},{"question":"Write a python function to find the maximum product of two distinct numbers in a list.","solution":"def max_product(nums): Finds the maximum product of two distinct numbers in the list. :param nums: List of integers :return: Maximum product of two distinct numbers if len(nums) < 2: raise ValueError(\\"Need at least two numbers to form a product.\\") nums.sort() # The maximum product can be either from the two largest positive numbers # or from the two largest negative numbers (which could form a positive product when multiplied). return max(nums[-1] * nums[-2], nums[0] * nums[1])"},{"question":"Write a python function to convert a string which represents a binary number into an integer. The function should handle both positive and negative binary strings (e.g., '-1101'). Application of built-in int() function is allowed for this part. The function should return the integer representation of the binary string.","solution":"def binary_to_integer(binary_str): Converts a binary string (including negative binary) to an integer. Args: - binary_str (str): The string representation of the binary number. Returns: - int: The integer representation of the binary string. return int(binary_str, 2) if binary_str[0] != '-' else -int(binary_str[1:], 2)"},{"question":"Write a python function to find the missing number in an array of integers ranging from 1 to n. The array contains integers in a randomized order and does not contain any duplicate numbers. How would you solve this problem? Any assumptions should be clearly stated.","solution":"def find_missing_number(arr): Finds the missing number in the array of integers ranging from 1 to n. Assumes the array contains integers in a randomized order with no duplicates. :param arr: List[int] - An array of integers ranging from 1 to n with one missing number :return: int - The missing number n = len(arr) + 1 # Calculate n since one number is missing total_sum = n * (n + 1) // 2 # Sum of first n natural numbers array_sum = sum(arr) # Sum of given array elements return total_sum - array_sum"},{"question":"Write a python function to convert a decimal number to binary and vice versa. The function should accept two parameters: the number and the conversion type ('decimal_to_binary' or 'binary_to_decimal'). For decimal_to_binary, the function should return the binary representation of the decimal number as a string. For binary_to_binary, it should return the decimal representation of the binary number as an integer.","solution":"def convert_number(number, conversion_type): Convert a number between decimal and binary. Parameters: number (int or str): The number to convert. It should be an integer for 'decimal_to_binary' and a binary string for 'binary_to_decimal'. conversion_type (str): The type of conversion. It should be either 'decimal_to_binary' or 'binary_to_decimal'. Returns: str or int: The converted number. Returns a binary string for 'decimal_to_binary' and an integer for 'binary_to_decimal'. if conversion_type == 'decimal_to_binary': return bin(number)[2:] elif conversion_type == 'binary_to_decimal': return int(number, 2) else: raise ValueError(\\"Invalid conversion type. Must be 'decimal_to_binary' or 'binary_to_decimal'.\\")"},{"question":"Write a python function to find the maximum profit that can be achieved from buying and selling the stock given a list of historical price data.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling the stock once. :param prices: List[int], a list of historical prices :return: int, maximum profit if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to solve a 2D grid puzzle where the task is to fill in a grid with numbers such that each row and each column contains each number from 1 to N exactly once, where N is the size of the grid. The function should take the grid as a list of lists and return the solved grid.","solution":"def is_valid(grid, row, col, num): N = len(grid) for x in range(N): if grid[row][x] == num: return False if grid[x][col] == num: return False return True def solve_grid(grid, N): for row in range(N): for col in range(N): if grid[row][col] == 0: for num in range(1, N + 1): if is_valid(grid, row, col, num): grid[row][col] = num if solve_grid(grid, N): return True grid[row][col] = 0 return False return True def solve_puzzle(grid): N = len(grid) solve_grid(grid, N) return grid"},{"question":"Write a python function to find the most frequent value in a list of numbers and return the value.","solution":"def most_frequent(numbers): Returns the most frequent value in a list of numbers. from collections import Counter if not numbers: return None frequency = Counter(numbers) most_common = frequency.most_common(1) return most_common[0][0]"},{"question":"Write a python function to compute the prefix sum of an array. Prefix sum is an array where each element at index i is the sum of all elements from the start to index i of the original array.","solution":"def prefix_sum(arr): Compute the prefix sum of an array. :param arr: List[int] -- a list of integers :return: List[int] -- a list where each element at index i is the sum of all elements from the start to index i result = [] current_sum = 0 for num in arr: current_sum += num result.append(current_sum) return result"},{"question":"Write a python function to find the sum of the digits in the number 100!","solution":"import math def sum_of_digits_in_factorial(n): Calculates the sum of the digits in the factorial of a given number n. :param n: An integer n :return: Sum of the digits in n! factorial_result = math.factorial(n) digits_sum = sum(int(digit) for digit in str(factorial_result)) return digits_sum def sum_of_digits_in_100_factorial(): Calculates the sum of the digits in the number 100! :return: Sum of the digits in 100! return sum_of_digits_in_factorial(100)"},{"question":"Write a python function to remove duplicates from a list while maintaining the original order of the element appearances. You can use any built-in data structure provided by python. I need an O(n) solution.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list while maintaining the original order. Parameters: - input_list: a list of elements. Returns: - A new list with duplicates removed and original order maintained. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to filter a list of integers, returning only those greater than a specified value.","solution":"def filter_greater_than(lst, value): Filters and returns a list of integers from the provided list that are greater than the specified value. :param lst: List of integers to be filtered. :param value: The threshold value to filter the integers. :return: A list of integers from lst that are greater than value. return [x for x in lst if x > value]"},{"question":"Write a python function to find the maximum sum of a subarray within a given 2D array. This subarray can be any size and any orientation (i.e., not necessarily rectangular, but contiguous).","solution":"def max_subarray_sum_2d(arr): def kadane_1d(nums): max_ending_here = max_so_far = nums[0] for x in nums[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far if not arr or not arr[0]: return 0 rows = len(arr) cols = len(arr[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += arr[i][right] max_sum = max(max_sum, kadane_1d(temp)) return max_sum"},{"question":"Write a python function to calculate compound interest for a given principal amount, interest rate, and number of years.","solution":"def compound_interest(principal, rate, years): Calculate compound interest. :param principal: The initial amount of money :param rate: The annual interest rate (expressed as a decimal, so 5% would be 0.05) :param years: The number of years the money is invested for :return: The amount of money accumulated after 'years' years, including interest amount = principal * (1 + rate) ** years return amount"},{"question":"Write a python function to split a list into two parts at a given position and return both parts in a tuple.","solution":"def split_list(lst, position): Splits the given list lst into two parts at the given position. Parameters: lst (list): The list to be split. position (int): The index at which to split the list. Returns: tuple: A tuple containing the two parts of the list. part1 = lst[:position] part2 = lst[position:] return (part1, part2)"},{"question":"Write a python function to print all unique triples of numbers in a list where the sum of the three numbers is zero. The list can contain duplicate numbers.","solution":"def three_sum_zero(nums): Returns a list of unique triplets (as tuples) from the list nums that add up to zero. nums.sort() triplets = set() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.add((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return list(triplets)"},{"question":"Write a python function to get the first m elements which are multiples of n from the given list. If there are less than m multiples of n in the given list, return the entire list of multiples of n.","solution":"def first_m_multiples_of_n(lst, m, n): Returns the first m elements of lst that are multiples of n. If there are less than m multiples of n in lst, return all multiples of n. multiples = [x for x in lst if x % n == 0] return multiples[:m]"},{"question":"Write a python function to generate the Fibonacci sequence. The function should take one parameter: the number of terms to generate.","solution":"def fibonacci(n): Generates the Fibonacci sequence up to the n-th term. Parameters: n (int): The number of terms to generate. Returns: list: A list of the first n terms in the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write a python function to return the maximum area of a rectangle in a given 2D array, where each cell contains a non-negative integer. The rectangle's sides are parallel to the array's edges.","solution":"def maximalRectangle(matrix): def maxHistArea(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not matrix or not matrix[0]: return 0 max_area = 0 row_len = len(matrix[0]) histogram = [0] * row_len for row in matrix: for idx in range(row_len): histogram[idx] = histogram[idx] + row[idx] if row[idx] else 0 max_area = max(max_area, maxHistArea(histogram)) return max_area"},{"question":"Write a python function to compare two strings and return -1 if the first string comes before the second when sorted, 0 if they are equal, and 1 if the first string comes after the second.","solution":"def compare_strings(str1, str2): Compares two strings lexicographically. Arguments: str1 -- the first string to compare str2 -- the second string to compare Returns: -1 if str1 comes before str2 0 if str1 is equal to str2 1 if str1 comes after str2 if str1 < str2: return -1 elif str1 == str2: return 0 else: return 1"},{"question":"Write a python function to calculate the frequency of each word in a given text and return a dictionary with the word as the key and the frequency as the value.","solution":"import re from collections import defaultdict def word_frequency(text): Returns a dictionary with the frequency of each word in the given text. Parameters: text (str): The input text. Returns: dict: A dictionary where keys are words and values are their frequencies. # Remove punctuation and make the text lowercase text = re.sub(r'[^ws]', '', text).lower() words = text.split() frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"Write a python function to find the sum and product of elements in a list remaining after removing the element at the kth index. Create a function \`calculate_sum_product\` that takes a list \`data_list\` and an integer \`k\` as arguments and returns a tuple \`(sum, product)\`.","solution":"def calculate_sum_product(data_list, k): Returns a tuple containing the sum and product of elements in a list after removing the element at the kth index. if not 0 <= k < len(data_list): raise IndexError(\\"k is out of the range of the data_list\\") # Remove the element at the kth index data_list = data_list[:k] + data_list[k + 1:] # Calculate the sum and product total_sum = sum(data_list) total_product = 1 for num in data_list: total_product *= num return (total_sum, total_product)"},{"question":"Write a python function to find the least common multiple of two numbers.","solution":"from math import gcd def lcm(a, b): Returns the least common multiple of a and b. if a == 0 or b == 0: return 0 return abs(a * b) // gcd(a, b)"},{"question":"Write a python function to calculate the sum of the first 'n' natural numbers. Your function should be named \`sum_natural_numbers\` and take an integer 'n' as its parameter. Ensure to include a brief docstring describing the function's purpose.","solution":"def sum_natural_numbers(n): Returns the sum of the first 'n' natural numbers. Parameters: n (int): The number of the first natural numbers to sum up. Returns: int: The sum of the first 'n' natural numbers. if n < 1: return 0 return n * (n + 1) / 2"},{"question":"Write a python function to find all the anagrams of a given word. An anagram is a word that can be formed by rearranging the letters of another word. For example, \\"listen\\" is an anagram of \\"silent\\".","solution":"from itertools import permutations def find_anagrams(word): Returns a sorted list of all distinct anagrams of the given word. perm = permutations(word) anagrams = set(''.join(p) for p in perm) return sorted(anagrams)"},{"question":"Write a python function to filter out all non-alphabet characters in a given string. Only alphabet characters (a-z, A-Z) should be retained. Python's built-in \`string.punctuation\` can be useful here.","solution":"import string def filter_alphabets(input_str): Filters out all non-alphabet characters from the input string. Only alphabet characters (a-z, A-Z) are retained. Parameters: input_str (str): The input string to filter. Returns: str: The filtered string containing only alphabet characters. return ''.join(char for char in input_str if char.isalpha())"},{"question":"Write a python function to find the maximum performance in a circular track race. The function should take a list of strings representing the race track and an integer \`k\` representing the number of consecutive laps you can run. The function should return the maximum performance you can achieve by choosing a starting position and running exactly \`k\` consecutive laps.","solution":"def max_performance(track, k): Returns the maximum performance by running exactly \`k\` consecutive laps on a circular track. Args: track (list): List of strings where each string represents the performance at that point in the track. k (int): Number of consecutive laps to run. Returns: int: Maximum performance achievable by running \`k\` consecutive laps. n = len(track) # Convert performance values to integers performance_values = [int(value) for value in track] # Edge case: If k is greater than the length of the track if k > n: return sum(performance_values) # Compute cumulative sum where circular nature is considered by extending the list cumulative_performance = performance_values * 2 max_sum = current_sum = sum(cumulative_performance[0:k]) for i in range(1, n): current_sum = current_sum - cumulative_performance[i - 1] + cumulative_performance[i + k - 1] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to calculate the reverse complement of a DNA sequence. The function should take a string representing a DNA sequence as an input and return the reverse complement sequence.","solution":"def reverse_complement(dna_sequence): Returns the reverse complement of a DNA sequence. complement = { 'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C' } # Find the complement of the DNA sequence complement_sequence = ''.join(complement[base] for base in dna_sequence) # Reverse the complement sequence reverse_complement_sequence = complement_sequence[::-1] return reverse_complement_sequence"},{"question":"Write a python function to find the two numbers from the list that add up to a specific target. The function should return the indices of these two numbers in the list.","solution":"def two_sum(nums, target): Find the indices of the two numbers that add up to the target. :param nums: List of integers. :param target: The sum target. :return: A tuple of two indices. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Write a python function to return the maximum and minimum elements in a list along with their indices.","solution":"def find_max_min_elements(lst): Returns a tuple containing the maximum and minimum elements in the list along with their indices. The output format will be (max_element, max_index, min_element, min_index). if not lst: return None max_element = max(lst) min_element = min(lst) max_index = lst.index(max_element) min_index = lst.index(min_element) return max_element, max_index, min_element, min_index"},{"question":"Write a python function to reverse a string in-place. How can we performance optimize the solution?","solution":"def reverse_string_in_place(s): Reverses a string in-place. # Convert the string to a list since strings are immutable in Python char_list = list(s) left, right = 0, len(char_list) - 1 while left < right: # Swap the characters char_list[left], char_list[right] = char_list[right], char_list[left] left += 1 right -= 1 # Convert the list back to a string return ''.join(char_list)"},{"question":"Write a python function to get the range between two numbers. The function should return the list of numbers between the two numbers, inclusively.","solution":"def range_inclusive(start, end): Returns the list of numbers between start and end, inclusively. if start > end: return list(range(end, start + 1))[::-1] return list(range(start, end + 1))"},{"question":"Write a python function to remove duplicates from a linked list given only the head of the linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_duplicates(head): if not head: return None current = head seen = set() seen.add(current.value) while current.next: if current.next.value in seen: current.next = current.next.next else: seen.add(current.next.value) current = current.next return head"},{"question":"Write a python function to find the maximum subarray sum given an integer array. This function should also return the starting and ending indices of the subarray that gives this maximum sum.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum and the starting and ending indices of the subarray. :param arr: List of integers :return: Tuple (maximum sum, start index, end index) if not arr: # edge case for empty list return 0, -1, -1 max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] s = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, start, end"},{"question":"Write a python function to detect if a linked list has a cycle. If it does, return the node where the cycle begins; otherwise, return \`None\`.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head): Detects if there is a cycle in a linked list. If so, returns the node where the cycle begins; otherwise, returns None. if not head or not head.next: return None slow = head fast = head # Determine if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # If there is no cycle if not fast or not fast.next: return None # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a given one-dimensional array of numbers. This is a classic problem known as \\"Kadane's Algorithm\\". You should try to implement the solution with the least complexity possible.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray using Kadane's Algorithm. :param arr: List of integers :return: Integer, the maximum sum of a contiguous subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the second highest number in a list of integers without duplicates.","solution":"def find_second_highest(nums): Returns the second highest number in a list of integers without duplicates. If the list has fewer than 2 distinct elements, None is returned. if len(nums) < 2: return None first, second = None, None for num in nums: if first is None or num > first: second = first first = num elif second is None or (num > second and num != first): second = num return second"},{"question":"Write a python function to find the most frequent character(s) in a given string. The function should return the character(s) that appear the most times and the corresponding counts. If there are multiple characters with the same highest frequency, include all of them in the output.","solution":"from collections import Counter def most_frequent_characters(s): Finds the most frequent character(s) in a given string. Parameters: s (str): The input string. Returns: list of tuples: Each tuple contains a character and its count. Returns the character(s) with the highest frequency. if not s: return [] counter = Counter(s) max_freq = max(counter.values()) result = [(char, count) for char, count in counter.items() if count == max_freq] return result"},{"question":"Write a python function to print all the prime numbers between 1 and 100. How can I achieve this efficiently?","solution":"def sieve_of_eratosthenes(limit=100): Returns all prime numbers up to \`limit\` using the Sieve of Eratosthenes algorithm. Parameters: limit (int): The upper boundary (inclusive) to find prime numbers within. Returns: list: A list of prime numbers up to the specified limit. is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, limit + 1) if is_prime[p]] return prime_numbers # Printing the prime numbers from 1 to 100 as per the requirement print(sieve_of_eratosthenes())"},{"question":"Write a python function to find the duplicates in a list. The function should return a list of duplicate elements. If there are no duplicates, return an empty list.","solution":"def find_duplicates(lst): Returns a list of duplicate elements in the input list. If there are no duplicates, returns an empty list. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to find the first repeated element in a list and return that element. If no element is repeated return None. Any algorithm with time complexity less than O(n^2) is acceptable.","solution":"def first_repeated_element(lst): Returns the first repeated element in the list. If no element is repeated, returns None. seen = set() for elem in lst: if elem in seen: return elem seen.add(elem) return None"},{"question":"Write a python function to find all numbers with no repeated digits from an input list and return them as a list.","solution":"def find_unique_digit_numbers(numbers): This function takes a list of numbers and returns a list of numbers with no repeated digits. Args: numbers (list): A list of integers. Returns: list: List of integers with no repeated digits. def has_unique_digits(number): number_str = str(number) return len(set(number_str)) == len(number_str) return [num for num in numbers if has_unique_digits(num)]"},{"question":"Write a python function to extract email addresses from a given text which contains multiple email addresses separated by commas, spaces, or both. Your function should return a list of email addresses found in the text.","solution":"import re def extract_emails(text): Extracts email addresses from a given text. Args: text (str): A string containing multiple email addresses separated by various delimiters Returns: list: A list of extracted email addresses. email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' emails = re.findall(email_pattern, text) return emails"},{"question":"Write a python function to find and return the indices of two numbers in an array such that they add up to a specific target. For example, in the given array \`arr = [2, 7, 11, 15]\` and \`target = 9\`. The function should return \`[0, 1]\` because \`arr[0] + arr[1] = 9\`.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. Parameters: nums (list): List of integers. target (int): The target sum. Returns: list: List of two indices. num_map = {} for index, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], index] num_map[num] = index return []"},{"question":"Write a python function to remove all duplicates and sort in ascending order","solution":"def remove_duplicates_and_sort(lst): Removes all duplicates from the list and sorts it in ascending order. Args: lst (list): A list of elements. Returns: list: A list without duplicates and sorted in ascending order. return sorted(set(lst))"},{"question":"Write a python function to find the number of distinct elements in a list using a set.","solution":"def count_distinct_elements(lst): Returns the number of distinct elements in the list. return len(set(lst))"},{"question":"Write a python function to calculate the total cost of a shopping cart, including tax, given a list of items with their names and prices, the tax rate, and the discount for bulk purchases. If an item's price is over 50, the discount is 20%. If the item's price is 50 or less, the discount is 10%. The total cost should be calculated as the sum of the discounted prices of all items, plus the tax applied to the total.","solution":"def calculate_total_cost(items, tax_rate): Calculate the total cost of a shopping cart including tax and discounts. Args: items (list of tuples): Each tuple contains the item name and item price. tax_rate (float): The tax rate to be applied on the total cost (e.g., 0.10 for 10% tax). Returns: float: The total cost after applying discounts and adding tax. total_cost_before_tax = 0 for name, price in items: # Apply discount based on price if price > 50: discount = 0.20 else: discount = 0.10 discounted_price = price - (price * discount) total_cost_before_tax += discounted_price # Apply tax to the total discounted cost total_cost = total_cost_before_tax + (total_cost_before_tax * tax_rate) return round(total_cost, 2)"},{"question":"Write a python function to find the maximum and minimum numbers in a list of integers using recursion.","solution":"def find_max_min(lst): Recursively finds the maximum and minimum numbers in a list of integers. Args: lst (list): A list of integers. Returns: tuple: A tuple containing the maximum and minimum numbers in the list. if len(lst) == 1: return (lst[0], lst[0]) else: sub_max, sub_min = find_max_min(lst[1:]) return (max(lst[0], sub_max), min(lst[0], sub_min))"},{"question":"Write a python function to remove duplicates from a list while preserving the original order of the elements. You can only use basic list operations and Python built-in functions without using any special libraries.","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the original order of elements. seen = set() result = [] for item in lst: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Write a python function to find the maximum and minimum values in an array of integers. Code should be clean, efficient, and well-commented.","solution":"def find_max_min(arr): Finds the maximum and minimum values in an array of integers. Parameters: arr (list of int): A list of integers. Returns: tuple: A tuple containing the minimum and maximum values in the array. if not arr: raise ValueError(\\"Array should not be empty\\") max_val = arr[0] min_val = arr[0] for num in arr: if num > max_val: max_val = num if num < min_val: min_val = num return (min_val, max_val)"},{"question":"Write a python function to reverse a list in place in Python. In-place means that the function should not allocate extra space for another list. It should automatically adjust the elements of the list it is given.","solution":"def reverse_list_in_place(lst): Reverses the list in place. :param lst: List of elements to be reversed in place left = 0 right = len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to count the number of non-distinct divisors of an integer.","solution":"def count_non_distinct_divisors(n): Returns the count of non-distinct divisors of the integer n. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") count = 0 for i in range(1, n + 1): if n % i == 0: count += 1 return count"},{"question":"Write a python function to print numbers between 1 and 10 using a loop.","solution":"def print_numbers(): Prints numbers between 1 and 10 inclusive. for num in range(1, 11): print(num)"},{"question":"Write a python function to implement the Caesar cipher encryption on a given text with a specified shift value. The function should handle both lowercase and uppercase letters, and should maintain the case of the letters. Additionally, it should handle non-alphabetical characters by not modifying them.","solution":"def caesar_cipher(text, shift): Encrypts the given text using the Caesar cipher with the specified shift value. Parameters: text (str): The input text to be encrypted. shift (int): The number of positions to shift each letter. Returns: str: The encrypted text. encrypted = [] for char in text: if char.isalpha(): offset = 65 if char.isupper() else 97 encrypted_char = chr((ord(char) - offset + shift) % 26 + offset) encrypted.append(encrypted_char) else: encrypted.append(char) return ''.join(encrypted)"},{"question":"Write a python function to find the maximum common divisor (GCD) of an array of numbers. The function should be efficient and handle large numbers gracefully.","solution":"import math from functools import reduce def gcd_of_array(arr): Returns the greatest common divisor (GCD) of an array of numbers. Uses the reduce function to apply the gcd function iteratively. return reduce(math.gcd, arr)"},{"question":"Write a python function to return the list of all permutations of the input list.","solution":"from itertools import permutations def get_permutations(lst): Returns a list of all permutations of the input list. return list(permutations(lst))"},{"question":"Write a python function to find the longest continuous substring with a maximum of two distinct characters. For example, for the string \\"eceba\\", the longest substring with at most two distinct characters is \\"ece\\".","solution":"def longest_substring_two_distinct(s): Returns the longest continuous substring with a maximum of two distinct characters. if len(s) <= 2: return s start, max_len, max_substring = 0, 0, '' char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substring = s[start:end+1] return max_substring"},{"question":"Write a python function to remove an element from a singly linked list by value. The function should take the head of the linked list, and the value to be removed. If the value is not found in the list, return the original list. If the value is found, remove the first occurrence of the value from the list and return the modified list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_element(head, value): Removes the first occurrence of 'value' from the linked list. If 'value' is not found, the original list is returned. :param head: ListNode :param value: int :return: ListNode dummy = ListNode(0) dummy.next = head current = dummy while current.next is not None: if current.next.value == value: current.next = current.next.next return dummy.next current = current.next return dummy.next"},{"question":"Write a python function to find the largest sum of non-adjacent elements in an array. I'm wondering if it could be solved via recursion.","solution":"def largest_sum_non_adjacent(nums): Finds the largest sum of non-adjacent elements in the array using recursion. :param nums: List of integers :return: Largest sum of non-adjacent elements def helper(index, memo): if index < 0: return 0 if index in memo: return memo[index] include_current = nums[index] + helper(index - 2, memo) exclude_current = helper(index - 1, memo) memo[index] = max(include_current, exclude_current) return memo[index] if not nums: return 0 memo = {} return helper(len(nums) - 1, memo)"},{"question":"Write a python function to check if a given set of three sides can form a triangle. Based on this, determine if the triangle is equilateral, isosceles, or scalene. Also, calculate the area of the triangle if it can be formed.","solution":"from math import sqrt def triangle_properties(a, b, c): Determines if a given set of three sides can form a triangle, and if so, classify it as equilateral, isosceles or scalene, and calculates its area. # Check for valid triangle if a + b <= c or a + c <= b or b + c <= a: return \\"Not a triangle\\", None # Determine the type of triangle if a == b == c: triangle_type = \\"Equilateral\\" elif a == b or b == c or a == c: triangle_type = \\"Isosceles\\" else: triangle_type = \\"Scalene\\" # Calculate the area using Heron's formula s = (a + b + c) / 2 area = sqrt(s * (s - a) * (s - b) * (s - c)) return triangle_type, area"},{"question":"Write a python function to find the minimum number of stones to be removed from a pile, such that after removal, the maximum difference between any two piles is minimized.","solution":"def min_stone_removal(piles): Given a list of stone piles, this function returns the minimum number of stones to be removed from the piles in order to minimize the maximum difference between any two piles. if not piles or len(piles) == 1: return 0 # Sort the piles list to easily find minimum differences piles.sort() # Initialize the minimum removal to maximum possible value min_removal = float('inf') # Iterate through the piles and find the minimum difference for i in range(len(piles) - 1): current_diff = piles[i+1] - piles[i] if current_diff < min_removal: min_removal = current_diff return min_removal"},{"question":"Write a python function to read data from a csv file, clean the data, and return a DataFrame. Additionally, the function should handle exceptions gracefully and provide a meaningful error message if the file does not exist or any other I/O errors occur.","solution":"import pandas as pd def read_and_clean_csv(file_path): Reads data from a CSV file, cleans it, and returns a DataFrame. Cleans the data by dropping rows with any NaN values. Parameters: file_path (str): The path to the CSV file. Returns: DataFrame: Cleaned data. try: df = pd.read_csv(file_path) cleaned_df = df.dropna() return cleaned_df except FileNotFoundError: raise FileNotFoundError(f\\"The file at path {file_path} does not exist.\\") except Exception as e: raise Exception(f\\"An error occurred while reading the file: {e}\\")"},{"question":"Write a python function to check if a string is a palindrome using the deque data structure from the collections module.","solution":"from collections import deque def is_palindrome(s): Checks if a given string is a palindrome using deque. dq = deque(s) while len(dq) > 1: if dq.popleft() != dq.pop(): return False return True"},{"question":"Write a python function to generate a valid date string representing the next business day using the datetime module, considering weekends and holidays. The function should also print this date string. Additionally, create a list of holidays that your function will take into consideration.","solution":"import datetime # List of holidays as date objects (year, month, day) HOLIDAYS = [ datetime.date(2023, 1, 1), # New Year's Day datetime.date(2023, 7, 4), # Independence Day datetime.date(2023, 12, 25), # Christmas ] def is_business_day(date): Check if a given date is a business day (i.e., not a weekend or a holiday). return date.weekday() < 5 and date not in HOLIDAYS def next_business_day(date): Given a date, returns the next business day considering weekends and holidays. next_day = date + datetime.timedelta(days=1) while not is_business_day(next_day): next_day += datetime.timedelta(days=1) return next_day # Function to print the next business day from today def print_next_business_day(): today = datetime.date.today() next_day = next_business_day(today) print(next_day) # Example call to print the next business day print_next_business_day()"},{"question":"Write a python function to check if the given array is sorted in ascending or descending order. Return 'Ascending' if the array is sorted in ascending order, 'Descending' if the array is sorted in descending order, and 'Unsorted' if the array is neither.","solution":"def check_array_sort_order(arr): Returns 'Ascending' if arr is sorted in ascending order, 'Descending' if arr is sorted in descending order, and 'Unsorted' if the array is neither. if arr == sorted(arr): return 'Ascending' elif arr == sorted(arr, reverse=True): return 'Descending' else: return 'Unsorted'"},{"question":"Write a python function to calculate and return the cumulative sum of a list of integers, where each element is multiplied by its index in the list. For example, for the list [1, 2, 3, 4], the function should return 10 because 0*1 + 1*2 + 2*3 + 3*4 = 10.","solution":"def cumulative_index_sum(lst): Returns the cumulative sum of a list of integers, where each element is multiplied by its index in the list. return sum(index * value for index, value in enumerate(lst))"},{"question":"Write a python function to find the largest integer in a given list. The function should handle an empty list by returning \`None\`. Additionally, ensure that the function includes a docstring that explains its behavior and handles exceptions if necessary.","solution":"def find_largest(nums): Return the largest integer in the given list. If the list is empty, return None. :param nums: List of integers :return: The largest integer in the list or None if the list is empty if not nums: return None largest = nums[0] for num in nums: if num > largest: largest = num return largest"},{"question":"Write a python function to find the maximum difference between any two numbers in a given list. The function should return the maximum difference found. If the list has fewer than two numbers, return \`None\`.","solution":"def max_difference(numbers): Returns the maximum difference between any two numbers in a given list. If the list has fewer than two numbers, returns None. if len(numbers) < 2: return None max_num = max(numbers) min_num = min(numbers) return max_num - min_num"},{"question":"Write a python function to find the maximum sum of a subarray within a given array \`arr\`.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray within the given array. Args: arr (list): A list of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a python function to generate all possible subsets of a given set of distinct integers.","solution":"def generate_subsets(nums): Generate all possible subsets of a given set of distinct integers. :param nums: List of distinct integers :return: List of all possible subsets res = [] def backtrack(start, path): res.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return res"},{"question":"Write a python function to reverse a string using slicing in one line.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to find the maximum and minimum element in an array. You need to print the maximum and minimum elements.","solution":"def find_max_min(arr): Returns the maximum and minimum element in an array. Parameters: arr (list): List of numerical elements. Returns: tuple: A tuple containing the maximum and minimum element in the array. if len(arr) == 0: raise ValueError(\\"Array is empty.\\") max_element = max(arr) min_element = min(arr) return max_element, min_element"},{"question":"Write a python function to obtain the transpose of a given 2D matrix.","solution":"def transpose(matrix): Returns the transpose of a given 2D matrix. :param matrix: List of lists where each inner list represents a row in the matrix. :return: Transposed matrix as a list of lists. if not matrix: return [] return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]"},{"question":"Write a python function to generate n prime numbers and print them.","solution":"def generate_primes(n): Generate and return a list of the first n prime numbers. if n <= 0: return [] primes = [] num = 2 while len(primes) < n: is_prime = all(num % p != 0 for p in primes) if is_prime: primes.append(num) num += 1 return primes"},{"question":"Write a python function to find all the prime numbers between 0 and 50. What is the time complexity of your function?","solution":"def find_primes_up_to_50(): Returns a list of all prime numbers between 0 and 50 (inclusive). primes = [] for num in range(2, 51): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes # Time complexity: O(n * sqrt(n)) # The outer loop runs n times (where n is 50 in this case), # and the inner loop runs sqrt(n) times in the worst case."},{"question":"Write a python function to find the minimum spanning tree for a given graph using Kruskal's algorithm. Your function should take an adjacency list representing the graph and return the list of edges in the Minimum Spanning Tree (MST).","solution":"# Import the Union-Find data structure to manage disjoint sets class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal(graph): Finds the Minimum Spanning Tree (MST) using Kruskal's algorithm. Parameters: graph (list): An adjacency list representing the graph. Each element is of the form (u, v, weight) where u and v are the nodes connected by an edge with the given weight. Returns: list: A list of edges in the MST where each edge is represented as (u, v, weight). mst = [] if not graph: return mst num_vertices = max(max(u, v) for u, v, _ in graph) + 1 uf = UnionFind(num_vertices) sorted_edges = sorted(graph, key=lambda x: x[2]) for u, v, weight in sorted_edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst.append((u, v, weight)) return mst"},{"question":"Write a python function to calculate the sum of squares for the first 'n' natural numbers and then print the result.","solution":"def sum_of_squares(n): Returns the sum of squares of the first 'n' natural numbers. return sum(i**2 for i in range(1, n+1))"},{"question":"Write a python function to find the number of integers from 1 to n that are divisible by either 2 or 3.","solution":"def count_divisible_by_2_or_3(n): Returns the number of integers from 1 to n that are divisible by either 2 or 3. count = 0 for i in range(1, n+1): if i % 2 == 0 or i % 3 == 0: count += 1 return count"},{"question":"Write a python function to find the duplicate characters in a string. The function should return a list of duplicate characters found in the string.","solution":"def find_duplicate_characters(s): Returns a list of duplicate characters found in the string s. char_count = {} duplicates = [] for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char, count in char_count.items(): if count > 1: duplicates.append(char) return duplicates"},{"question":"Write a python function to append all elements of list 'b' to the end of list 'a'.","solution":"def append_lists(a, b): Appends all elements of list 'b' to the end of list 'a'. Parameters: a (list): The list to which elements will be appended. b (list): The list whose elements will be appended to 'a'. Returns: list: The list 'a' after appending elements of 'b'. a.extend(b) return a"},{"question":"Write a python function to find the number of unique characters in a given string. For example, if the input string is \\"programming\\", the function should return 8, since the unique characters are 'p', 'r', 'o', 'g', 'a', 'm', 'i', and 'n'.","solution":"def unique_characters_count(s): Returns the number of unique characters in the given string s. unique_chars = set(s) return len(unique_chars)"},{"question":"Write a python function to find the maximum subarray sum in a given array, and provide a detailed explanation of your approach.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum in the given array. Parameters: arr (list): A list of integers. Returns: int: The maximum subarray sum. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to return the smallest positive integer \`n\` such that the sum of the nth-powered numbers of its digits is equal to \`n\`. This number is known as an \\"Narcissistic number\\" in base 10.","solution":"def is_narcissistic(number): Check if a number is a narcissistic number. A number is narcissistic if it is equal to the sum of its own digits each raised to the power of the number of digits. Args: number (int): The number to check. Returns: bool: True if the number is narcissistic, False otherwise. digits = [int(digit) for digit in str(number)] power = len(digits) sum_of_powers = sum([digit ** power for digit in digits]) return number == sum_of_powers def smallest_positive_narcissistic(): Find the smallest positive narcissistic number. Returns: int: The smallest positive narcissistic number. number = 1 while True: if is_narcissistic(number): return number number += 1"},{"question":"Write a python function to read and print the content of a file.","solution":"def read_file_content(file_path): Reads and returns the content of a file specified by file_path. :param file_path: string, path to the file :return: content of the file as a string with open(file_path, 'r') as file: return file.read()"},{"question":"Write a python function to find an element's first occurrence index in a sorted array using binary search.","solution":"def binary_search_first_occurrence(arr, target): Returns the index of the first occurrence of the target in the sorted array arr. If the target is not found, returns -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: middle = left + (right - left) // 2 if arr[middle] == target: result = middle right = middle - 1 # continue to search in the left half elif arr[middle] < target: left = middle + 1 else: right = middle - 1 return result"},{"question":"Write a python function to find the first non-repeating character in a string. If there is no non-repeating character, return -1. Apply this function to the string \\"abacabad\\".","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string s. If there is no non-repeating character, it returns -1. # Dictionary to store the count of each character char_count = {} # Loop through the string to populate the dictionary for char in s: char_count[char] = char_count.get(char, 0) + 1 # Loop through the string again to find the first non-repeating character for char in s: if char_count[char] == 1: return char return -1 # Applying this function to the string \\"abacabad\\" result = first_non_repeating_character(\\"abacabad\\") print(result) # Expected output is 'c'"},{"question":"Write a python function to determine the complement of a string. The function takes a string as input and returns its complement string, where A is complement to T, T is complement to A, C is complement to G and G is complement to C.","solution":"def get_complement(dna_string): Returns the complement of the given DNA string. A is complement to T, T is complement to A, C is complement to G, and G is complement to C. complement_map = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'} complement_string = ''.join(complement_map[nucleotide] for nucleotide in dna_string) return complement_string"},{"question":"Write a python function to find the duplicate number in an array of integers. The array contains n + 1 integers where each integer is between 1 and n (inclusive). The task is to find and return the duplicate number.","solution":"def find_duplicate(nums): Finds the duplicate number in an array of integers where each integer is between 1 and n (inclusive) and the array contains n + 1 integers. slow = fast = nums[0] # Phase 1: Finding the intersection point of the two runners. while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Phase 2: Finding the entrance to the cycle. slow = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Write a python function to filter and count the number of words in a given string, where a word is defined as any sequence of characters separated by whitespace. The function should consider both uppercase and lowercase letters as the same word.","solution":"def filter_and_count_words(input_string): Filters and counts the number of unique words in the given string. Treats words case-insensitively. :param input_string: str :return: int - the count of unique words words = input_string.lower().split() unique_words = set(words) return len(unique_words)"},{"question":"Write a python function to find the smallest subarray with sum at least x in an array if no subarray with sum >= x return -1.","solution":"def smallest_subarray_with_sum_at_least_x(arr, x): Finds the smallest subarray with sum at least x. Parameters: arr (): list of integers x (): integer, the required sum Returns: integer: Length of the smallest subarray with sum at least x, or -1 if no such subarray exists. n = len(arr) min_len = n + 1 for start in range(n): curr_sum = arr[start] if curr_sum >= x: return 1 for end in range(start + 1, n): curr_sum += arr[end] if curr_sum >= x and (end - start + 1) < min_len: min_len = end - start + 1 if min_len == n + 1: return -1 return min_len"},{"question":"Write a python function to return the maximum numerical value from a list of integers.","solution":"def max_value(nums): Returns the maximum value from a list of integers. Parameters: nums (list): A list of integers. Returns: int: The maximum integer in the list. if not nums: raise ValueError(\\"The list is empty\\") max_val = nums[0] for num in nums: if num > max_val: max_val = num return max_val"},{"question":"Write a python function to validate an IP address. The IP address can be in either IPv4 or IPv6 format. An IPv4 address is in the format: \\"192.168.1.1\\" and an IPv6 address is in the format \\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\\". Your function should return True if the IP address is valid, otherwise, return False.","solution":"import re def validate_ip_address(ip): Validates if the given IP address is either in IPv4 or IPv6 format. Args: ip (str): IP address as a string. Returns: bool: True if the IP address is valid, else False. # Regular expression for validating IPv4 address ipv4_pattern = re.compile(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}' r'([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])') # Regular expression for validating IPv6 address ipv6_pattern = re.compile(r'^(([0-9a-fA-F]{1,4}):){7}([0-9a-fA-F]{1,4})') if ipv4_pattern.match(ip): return True elif ipv6_pattern.match(ip): return True else: return False"},{"question":"Write a python function to create a list of all odd numbers between 1 and n (inclusive).","solution":"def get_odd_numbers(n): Returns a list of all odd numbers between 1 and n (inclusive). Parameters: n (int): The upper limit (inclusive). Returns: list: A list of all odd numbers between 1 and n. return [i for i in range(1, n + 1) if i % 2 != 0]"},{"question":"Write a python function to calculate the sum of the series 1^1 + 2^2 + 5^5 + 10^10 + ...","solution":"def sum_of_series(n): Calculate the sum of the series 1^1 + 2^2 + .. +(n^n) return sum(i**i for i in range(1, n+1))"},{"question":"Write a python function to find the sum of all odd numbers from 1 to n using a for loop.","solution":"def sum_of_odd_numbers(n): Returns the sum of all odd numbers from 1 to n. total_sum = 0 for number in range(1, n + 1): if number % 2 != 0: total_sum += number return total_sum"},{"question":"Write a python function to print all items in a list and their indexes.","solution":"def print_items_and_indexes(lst): Prints each item in a list along with its index. for index, item in enumerate(lst): print(f\\"Index: {index}, Item: {item}\\")"},{"question":"Write a python function to find the number of unique paths a robot can take in a grid from the top-left to the bottom-right corner. The robot can only move either down or right at a time. The grid is represented as a 2-dimensional list where each cell is either 0 (open) or 1 (blocked).","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths for a robot to move from top-left to bottom-right corner of a grid, given the grid can contain obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) # dp array to store the number of paths to each cell dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Write a python function to generate all the prime numbers between 0 and n using a stack data structure and print them.","solution":"def generate_primes(n): Generates all prime numbers between 0 and n using a stack data structure. # A sieve to eliminate non-primes sieve = [True] * (n + 1) p = 2 # Starting with the first prime number while (p * p <= n): # If sieve[p] is not changed, then it is a prime if sieve[p] == True: # Updating all multiples of p for i in range(p * p, n + 1, p): sieve[i] = False p += 1 # Use stack to store prime numbers stack = [] for p in range(2, n + 1): if sieve[p]: stack.append(p) return stack"},{"question":"Write a python function to check if the given list of integers contains at least one pair of numbers whose sum is equal to a given target. If such a pair exists, return True; otherwise, return False.","solution":"def has_pair_with_sum(lst, target): Checks if there is a pair of numbers in the list 'lst' whose sum is equal to 'target'. :param lst: List of integers :param target: The target sum to find in the list :return: True if such a pair exists, otherwise False seen = set() for number in lst: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"Write a python function to remove all occurrences of a given substring from a string and return the new string.","solution":"def remove_substring(string, substring): Removes all occurrences of substring from string. Parameters: string (str): The original string. substring (str): The substring to be removed. Returns: str: The modified string with all occurrences of substring removed. return string.replace(substring, '')"},{"question":"Write a python function to perform a binary search on a sorted array. What's the time complexity of this function?","solution":"def binary_search(arr, target): Performs a binary search on a sorted array to find the target value. Args: arr (list): A sorted list of elements. target (any): The element to search for. Returns: int: The index of the target element in the array if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to calculate the product of all numbers in a list. For example, if the list is \`[1, 2, 3, 4]\`, the function should return \`24\`.","solution":"def product_of_list(numbers): Returns the product of all numbers in the list. If the list is empty, returns 1. product = 1 for number in numbers: product *= number return product"},{"question":"Write a python function to create a simple server that listens on port 8080 and echoes back any data it receives from the client.","solution":"import socket def echo_server(port=8080): Creates a simple echo server that listens on the specified port and echoes back any data it receives from the client. with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: sock.bind(('localhost', port)) sock.listen() print(f\\"Server listening on port {port}...\\") conn, addr = sock.accept() with conn: print(f\\"Connected by {addr}\\") while True: data = conn.recv(1024) if not data: break print(f\\"Received {data} from {addr}\\") conn.sendall(data)"},{"question":"Write a python function to find the two numbers that sum up to a specific target number in an array of integers. The function should return the indices of these two numbers such that they add up to the target. You may assume that there is exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Finds two numbers that add up to a specific target number in an array. Parameters: nums (list of int): The list of integers to find the two numbers in. target (int): The target sum. Returns: list of int: The indices of the two numbers such that they add up to the target. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"Write a python function to find the maximum subarray problem using a divide-and-conquer strategy. The function should take in a list of integers.","solution":"def max_crossing_subarray(arr, low, mid, high): left_sum = float('-inf') total = 0 max_left = mid for i in range(mid, low - 1, -1): total += arr[i] if total > left_sum: left_sum = total max_left = i right_sum = float('-inf') total = 0 max_right = mid + 1 for i in range(mid + 1, high + 1): total += arr[i] if total > right_sum: right_sum = total max_right = i return max_left, max_right, left_sum + right_sum def max_subarray(arr, low, high): if low == high: return low, high, arr[low] mid = (low + high) // 2 left_low, left_high, left_sum = max_subarray(arr, low, mid) right_low, right_high, right_sum = max_subarray(arr, mid + 1, high) cross_low, cross_high, cross_sum = max_crossing_subarray(arr, low, mid, high) if left_sum >= right_sum and left_sum >= cross_sum: return left_low, left_high, left_sum elif right_sum >= left_sum and right_sum >= cross_sum: return right_low, right_high, right_sum else: return cross_low, cross_high, cross_sum def find_maximum_subarray(arr): if not arr: return None, None, 0 return max_subarray(arr, 0, len(arr) - 1)"},{"question":"Write a python function to implement a graph using an adjacency list.","solution":"class Graph: def __init__(self): self.graph = {} def add_vertex(self, vertex): # Add the vertex to the graph if it doesn't already exist if vertex not in self.graph: self.graph[vertex] = [] def add_edge(self, vertex1, vertex2): # Ensure both vertices are in the graph if vertex1 not in self.graph: self.add_vertex(vertex1) if vertex2 not in self.graph: self.add_vertex(vertex2) # Add the edge between vertex1 and vertex2 self.graph[vertex1].append(vertex2) self.graph[vertex2].append(vertex1) def get_adj_list(self): return self.graph"},{"question":"Write a python function to generate all unique subsets of an array. The solution set must not contain duplicate subsets.","solution":"def subsets(nums): Generates all unique subsets of the array \`nums\`. nums.sort() # Sort to handle duplicates result = [] subset_helper(nums, 0, [], result) return result def subset_helper(nums, index, path, result): result.append(path) for i in range(index, len(nums)): if i > index and nums[i] == nums[i - 1]: continue subset_helper(nums, i + 1, path + [nums[i]], result)"},{"question":"Write a python function to get the kth largest element in an unsorted array. You need to implement the function such that it returns the kth largest element while maintaining the original order of elements with the same value.","solution":"def kth_largest_element(nums, k): Returns the kth largest element in an unsorted array while maintaining the original order of elements with the same value. sorted_nums = sorted(nums, reverse=True) return sorted_nums[k-1]"},{"question":"Write a python function to implement a statistical function that can take a list of integers and return two values: the mean (average) and the standard deviation of the input list. You can't use any built-in libraries for calculating mean and standard deviation.","solution":"import math def calculate_mean_and_stddev(numbers): Calculates and returns the mean and standard deviation of a list of numbers. Args: numbers (list of int): The list of numbers. Returns: tuple: A tuple containing the mean and the standard deviation. if len(numbers) == 0: return (None, None) # Calculate mean mean = sum(numbers) / len(numbers) # Calculate variance variance = sum((x - mean) ** 2 for x in numbers) / len(numbers) # Calculate standard deviation stddev = math.sqrt(variance) return mean, stddev"},{"question":"Write a python function to calculate the sum of all prime numbers in a given range.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_primes_in_range(start, end): Returns the sum of all prime numbers in the given range [start, end]. total = 0 for num in range(start, end + 1): if is_prime(num): total += num return total"},{"question":"Write a python function to find the element that occurs the most in a list. If there are multiple elements with the same maximum occurrence, return the smallest one.","solution":"from collections import Counter def most_frequent_element(lst): Returns the element with the highest frequency in the list. If there are ties, return the smallest element. if not lst: return None counter = Counter(lst) most_common = counter.most_common() max_count = most_common[0][1] candidates = [element for element, count in most_common if count == max_count] return min(candidates)"},{"question":"Write a python function to recursively check if a number is divisible by 5, starting from the number itself and counting downward. If the number becomes 1, return 1, and if it's divisible by 5, return 0. If it doesn't meet either condition, return 2.","solution":"def check_divisible_by_5(n): Recursively checks if a number is divisible by 5, counting downward. If n becomes 1, return 1. If n is divisible by 5, return 0. If neither condition is met, return 2. # Base case: if n is divisible by 5 if n % 5 == 0: return 0 # Base case: if n becomes 1 elif n == 1: return 1 # Recursively count downward else: return check_divisible_by_5(n - 1)"},{"question":"Write a python function to find duplicates in a list. Your function should return a list of all duplicates found in the input list. If there are no duplicates, return an empty list. The list can contain integers, strings, or any other hashable type.","solution":"def find_duplicates(input_list): Returns a list of duplicates found in the input list. If no duplicates are found, returns an empty list. seen = set() duplicates = set() for item in input_list: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to find the list of elements that is present in only one of the two lists.","solution":"def unique_elements(list1, list2): Returns a list of elements that are present in only one of the two lists. set1 = set(list1) set2 = set(list2) unique_to_list1 = set1 - set2 unique_to_list2 = set2 - set1 return list(unique_to_list1.union(unique_to_list2))"},{"question":"Write a python function to check if a string \`s\` only contains digits. The function should return \`True\` if all characters in the string are digits, otherwise return \`False\`.","solution":"def is_digit_string(s): Checks if the string s only contains digits. Parameters: s (str): The string to check. Returns: bool: True if s only contains digits, False otherwise. return s.isdigit()"},{"question":"Write a python function to check if a given number is a valid hex code. A valid hex code is a string that starts with a '#' followed by exactly six characters, where each character can be a digit from 0-9 or a letter from A-F (case insensitive).","solution":"import re def is_valid_hex_code(s): Checks if the provided string s is a valid hex code. A valid hex code starts with a '#' followed by exactly six characters, where each character can be a digit from 0-9 or a letter from A-F (case insensitive). if isinstance(s, str) and re.fullmatch(r\\"#[0-9A-Fa-f]{6}\\", s): return True return False"},{"question":"Write a python function to count the number of digits in an integer that are divisible by 3.","solution":"def count_digits_divisible_by_3(n): Returns the count of digits in the integer n that are divisible by 3. Args: n (int): The input integer. Returns: int: The count of digits in n that are divisible by 3. count = 0 for digit in str(abs(n)): # Convert number to string and iterate over each character if int(digit) % 3 == 0: count += 1 return count"},{"question":"Write a python function to identify and count the occurrences of duplicate values in a list.","solution":"def count_duplicates(lst): Returns a dictionary where the keys are the duplicate elements in the list and the values are the counts of their occurrences. from collections import Counter count = Counter(lst) return {item: count for item, count in count.items() if count > 1}"},{"question":"Write a python function to reverse the order of elements in a list. You need to solve it without using any built-in functions or slicing. Swap the elements manually.","solution":"def reverse_list(lst): Reverses the order of elements in the list without using built-in functions or slicing. start = 0 end = len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 return lst"},{"question":"Write a python function to get all the combinations of k elements from n elements.","solution":"from itertools import combinations def get_combinations(n_elements, k): Returns all combinations of k elements from n elements. Parameters: n_elements (list): A list of elements. k (int): The number of elements in each combination. Returns: list: A list of tuples, each containing a combination of k elements. return list(combinations(n_elements, k))"},{"question":"Write a python function to find the sum of all elements in an array. The function should handle both cases where the array elements are either integers or floating-point numbers.","solution":"def sum_array(arr): Returns the sum of all elements in the array. Parameters: arr (list): A list of integers or floating-point numbers. Returns: float: The sum of all elements in the list. return sum(arr)"},{"question":"Write a python function to check if a given task is completed successfully, given the task is represented as a tuple. The function should return True if the task is completed successfully and False otherwise. A task is considered as completed successfully if all elements in the tuple are unique.","solution":"def is_task_completed(task): Checks if a given task is completed successfully. A task is considered as completed successfully if all elements in the task tuple are unique. Args: task (tuple): The task represented as a tuple. Returns: bool: True if the task is completed successfully, False otherwise. return len(task) == len(set(task))"},{"question":"Write a python function to find the most repeated name in a list of names. If there are multiple names with the same highest frequency, return all of them.","solution":"def most_repeated_names(names): Returns the list of names that have the highest frequency in the input list. :param names: List of names :return: List of most repeated names from collections import Counter name_counts = Counter(names) if not name_counts: return [] max_count = max(name_counts.values()) most_repeated = [name for name, count in name_counts.items() if count == max_count] return most_repeated"},{"question":"Write a python function to calculate the maximum area of a rectangle that can be formed within a right-angled triangle with given base and height. The side of the rectangle parallel to the base of the triangle must be along the base of the triangle, and its opposite corner must be along the hypotenuse of the triangle.","solution":"def max_rectangle_area(base, height): Calculate the maximum area of a rectangle that can be formed within a right-angled triangle with the given base and height. The side of the rectangle parallel to the base of the triangle must be along the base of the triangle, and its opposite corner must be along the hypotenuse of the triangle. # The maximum area of such a rectangle is given by (base * height) / 4 return (base * height) / 4"},{"question":"Write a python function to find the maximum number from a list of floats. You will need to use type hinting, error handling, and ensure that the function is robust. Your function should also handle empty lists and lists with non-numeric values.","solution":"from typing import List def find_maximum(nums: List[float]) -> float: Return the maximum number from a list of floats. Raise ValueError if the list is empty or contains non-numeric values. :param nums: List of floats :return: The maximum float in the list if not nums: raise ValueError(\\"The list is empty\\") # Ensure all elements in the list are numeric (either int or float) for num in nums: if not isinstance(num, (float, int)): raise ValueError(f\\"List contains a non-numeric value: {num}\\") return max(nums)"},{"question":"Write a python function to print all paths in a binary tree from root to leaves.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def paths_from_root_to_leaves(root): Returns all root-to-leaf paths in a binary tree. def construct_paths(node, path): if node: path += str(node.val) if not node.left and not node.right: # if leaf node paths.append(path) else: path += '->' # extend the path construct_paths(node.left, path) construct_paths(node.right, path) paths = [] construct_paths(root, \\"\\") return paths"},{"question":"Write a python function to print a message \\"Hello, World!\\".","solution":"def print_hello_world(): Prints 'Hello, World!' print(\\"Hello, World!\\")"},{"question":"Write a python function to determine if a string of parentheses is properly nested.","solution":"def is_properly_nested(s: str) -> bool: Returns True if the string s of parentheses is properly nested, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to sort a list of strings in alphabetical order. You should also handle non-alphabetic characters in the strings.","solution":"def sort_strings(strings): Sorts a list of strings in alphabetical order. Parameters: strings (list of str): The list of strings to sort. Returns: list of str: The sorted list of strings. return sorted(strings, key=lambda s: s.lower())"},{"question":"Write a python function to print the longest common prefix of an array of strings. The function should return the longest common prefix, or an empty string if there is none.","solution":"def longest_common_prefix(strs): Returns the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. if not strs: return \\"\\" # Find the minimum length string min_len = min(len(s) for s in strs) low, high = 1, min_len while low <= high: mid = (low + high) // 2 if all(s.startswith(strs[0][:mid]) for s in strs): low = mid + 1 else: high = mid - 1 return strs[0][: (low + high) // 2]"},{"question":"Write a python function to merge two dictionaries and return the result. If the same key exists in both dictionaries, the value from the second dictionary should overwrite the value from the first dictionary.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries. If the same key exists in both dictionaries, the value from the second dictionary will overwrite the value from the first dictionary. :param dict1: The first dictionary. :param dict2: The second dictionary. :return: A new dictionary with the merged results. merged_dict = dict1.copy() merged_dict.update(dict2) return merged_dict"},{"question":"Write a python function to check if a number is a prime number or not using a loop.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a python function to check if a given string is a valid palindrome which means it reads the same backward as forward, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(s): Check if the given string is a valid palindrome. A string is a palindrome if it reads the same backward as forward, considering only alphanumeric characters and ignoring cases. # Filter only alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare the list of filtered characters with its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to find the largest palindrome multiple of 3 that includes only the digits 1, 8, and 9, without repetition.","solution":"def largest_palindrome_multiple_of_3(): Returns the largest palindrome multiple of 3 that includes only the digits 1, 8, and 9, without repetition. # List possible palindromes from digits 1, 8, and 9 without repetition palindromes = ['181', '919'] for p in sorted(palindromes, reverse=True): if int(p) % 3 == 0: return int(p) return None # if no palindrome found as multiples of 3"},{"question":"Write a python function to find the second largest element in a list.","solution":"def second_largest(numbers): Returns the second largest element in a list of numbers. Parameters: numbers (list): A list of numbers Returns: int/float: The second largest number in the list if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to sort a list of numbers in ascending order without using any built-in sorting functions.","solution":"def sort_numbers(numbers): Sorts a list of numbers in ascending order using bubble sort algorithm. :param numbers: List of numerical values :return: New list containing sorted numbers # Making a copy of the list to avoid modifying the original list sorted_numbers = numbers[:] # Bubble sort algorithm n = len(sorted_numbers) for i in range(n): for j in range(0, n-i-1): if sorted_numbers[j] > sorted_numbers[j+1]: # Swapping elements if the current element is greater than the next sorted_numbers[j], sorted_numbers[j+1] = sorted_numbers[j+1], sorted_numbers[j] return sorted_numbers"},{"question":"Write a python function to find the frequency of each word in a text.","solution":"from collections import Counter import re def word_frequency(text): Returns a dictionary with the frequency of each word in the text. # Normalize the text to lowercase text = text.lower() # Use regex to find all words (a word is defined as a sequence of alphanumeric characters) words = re.findall(r'bw+b', text) # Use Counter to count the frequency of each word return Counter(words)"},{"question":"Write a python function to remove duplicates from a list. You should use a list comprehension and not the \`set\` data structure. You cannot use any built-in methods for removing duplicates (like \`remove()\`, \`pop()\`, \`index()\`, list slicing operations etc.). Additionally, your solution must be efficient in terms of both time complexity and space complexity.","solution":"def remove_duplicates(lst): Removes duplicates from a list using list comprehension. Parameters: lst (list): The input list from which duplicates are to be removed. Returns: list: A new list without duplicates. seen = {} return [x for x in lst if not (x in seen or seen_set(seen, x))] def seen_set(seen, x): Helper function to set an element in the seen dictionary. Parameters: seen (dict): The dictionary tracking elements that have been encountered. x: An element to be added to the seen dictionary. Returns: bool: Always returns False indicating the element is newly seen. seen[x] = True return False"},{"question":"Write a python function to count the number of sub-strings which are palindrome in a given string. The function will take a single string argument and return the count of palindrome sub-strings.","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings in the given string s. def is_palindrome(substring): return substring == substring[::-1] count = 0 n = len(s) for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"Write a python function to check if a list is a palindrome. A palindrome is a sequence of characters which reads the same backward as forward, for example, \\"radar\\" or \\"level\\".","solution":"def is_palindrome(lst): Check if the list is a palindrome. A palindrome reads the same backward as forward. :param lst: list of elements :return: True if the list is a palindrome, False otherwise return lst == lst[::-1]"},{"question":"Write a python function to return the sum of all the divisors of a given number N, excluding the number itself. You can assume N is a positive integer","solution":"def sum_of_divisors(N): Returns the sum of all divisors of N, excluding N itself. divisors_sum = 0 for i in range(1, N): if N % i == 0: divisors_sum += i return divisors_sum"},{"question":"Write a python function to print all the numbers from 1 to 10 in reverse order.","solution":"def print_reverse_1_to_10(): Prints all the numbers from 1 to 10 in reverse order. for number in range(10, 0, -1): print(number)"},{"question":"Write a python function to parse a CSV file and calculate the average of each column.","solution":"import csv def calculate_column_averages(file_path): Parses a CSV file and calculates the average of each column. Args: file_path (str): The file path to the CSV file. Returns: list: A list containing the average of each column. with open(file_path, mode='r') as file: csv_reader = csv.reader(file) header = next(csv_reader) # Skip header num_cols = len(header) sums = [0] * num_cols counts = [0] * num_cols for row in csv_reader: for i in range(num_cols): try: value = float(row[i]) sums[i] += value counts[i] += 1 except ValueError: pass averages = [sums[i] / counts[i] if counts[i] != 0 else 0 for i in range(num_cols)] return averages"},{"question":"Write a python function to check if the provided host is reachable or not reachable using ICMP(Ping).","solution":"import subprocess import platform def is_host_reachable(host): Check if a host is reachable using ICMP (Ping). :param host: Hostname or IP address to ping. :return: True if the host is reachable, otherwise False. param = \\"-n\\" if platform.system().lower() == \\"windows\\" else \\"-c\\" command = [\\"ping\\", param, \\"1\\", host] try: output = subprocess.check_output(command) return True except subprocess.CalledProcessError: return False"},{"question":"Write a python function to convert a string of numbers into a list of integers. Ensure that each character in the string is a digit and raise an appropriate error if the string contains non-digit characters.","solution":"def string_to_int_list(s): Converts a string of numbers into a list of integers. Raises a ValueError if the string contains non-digit characters. Parameters: s (str): A string of numbers. Returns: List[int]: A list of integers. if not s.isdigit(): raise ValueError(\\"The string contains non-digit characters.\\") return [int(char) for char in s]"},{"question":"Write a python function to check if a string is alphanumeric.","solution":"def is_alphanumeric(s): Checks if the given string is alphanumeric. Args: s (str): The string to check. Returns: bool: True if the string is alphanumeric, False otherwise. return s.isalnum()"},{"question":"Write a python function to remove all occurrences of a given substring from a given string.","solution":"def remove_substring(s, substring): Removes all occurrences of \`substring\` from the string \`s\`. Parameters: s (str): The original string. substring (str): The substring to remove from the original string. Returns: str: The modified string with all occurrences of \`substring\` removed. return s.replace(substring, '')"},{"question":"Write a python function to find the next greater element for each element in the array. The next greater element for a given element x in the array is the first greater element on the right side of x in the array. If no such element exists, the output should be -1 for that element.","solution":"def next_greater_element(arr): Finds the next greater element for each element in the array. The next greater element for a given element x in the array is the first greater element on the right side of x in the array. If no such element exists, the output is -1 for that element. Parameters: arr (List[int]): List of integers. Returns: List[int]: List containing the next greater element for each input element. result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: idx = stack.pop() result[idx] = arr[i] stack.append(i) return result"},{"question":"Write a python function to generate a list of pairings of all the people in a list such that person \`A\` is not paired with person \`B\` and vice versa, ensuring each person is paired with exactly one other person.","solution":"import random def generate_pairings(people): Generate a list of pairings for a list of people ensuring each person is paired with exactly one other person. if len(people) % 2 != 0: raise ValueError(\\"The number of people must be even to ensure everyone is paired.\\") random.shuffle(people) # Shuffle the list to randomize pairings pairings = [] for i in range(0, len(people), 2): pairings.append((people[i], people[i+1])) return pairings"},{"question":"Write a python function to reverse a given list of integers. The function should return the reversed list. Make sure your function handles empty lists and lists with a single element correctly.","solution":"def reverse_list(lst): Reverses the given list of integers. Parameters: lst (List[int]): A list of integers. Returns: List[int]: The reversed list of integers. return lst[::-1]"},{"question":"Write a python function to reverse a string and format it as a palindrome.","solution":"def format_as_palindrome(s): Returns a palindrome by reversing the input string and appending it to the original string with a separator in between. reversed_s = s[::-1] return f\\"{s}|{reversed_s}\\""},{"question":"Write a python function to find the second maximum value in a list of integers using the reduce function from functools. The list can have duplicate values. For example, if the input list is [2, 3, 3, 1, 5, 5, 4], the function should return 5.","solution":"from functools import reduce def second_maximum(lst): Returns the second maximum value in a list of integers using the reduce function. if len(lst) < 2: raise ValueError(\\"List must contain at least two distinct values\\") # Using set to find unique values and reducing them to two max elements def reducer(acc, val): if val not in acc: acc.append(val) acc = sorted(acc, reverse=True)[:2] return acc unique_values = list(set(lst)) if len(unique_values) < 2: raise ValueError(\\"List must contain at least two distinct values\\") max_two = reduce(reducer, unique_values, []) return max_two[1] # Example usage # lst = [2, 3, 3, 1, 5, 5, 4] # print(second_maximum(lst)) # Output: 4"},{"question":"Write a python function to compute the factorial of a number utilizing Python's built-in \`math\` module.","solution":"import math def factorial(n): Returns the factorial of a number n using the math module. return math.factorial(n)"},{"question":"Write a python function to generate all permutations of a given string, ensuring that each permutation is distinct and no character is repeated in the same permutation.","solution":"from itertools import permutations def generate_distinct_permutations(s): Generate all distinct permutations of the input string where no character is repeated in the same permutation. Parameters: s (str): The input string. Returns: list: A list of all distinct permutations. return sorted(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a python function to calculate and return the sum of all positive even numbers in a given integer array. How should I structure the function to receive and validate the input, compute the sum, and then display the result?","solution":"def sum_positive_even_numbers(arr): Returns the sum of all positive even numbers in the given integer array. if not isinstance(arr, list): raise ValueError(\\"Input must be a list\\") for number in arr: if not isinstance(number, int): raise ValueError(\\"All elements in the list must be integers\\") return sum(number for number in arr if number > 0 and number % 2 == 0)"},{"question":"Write a python function to find the first n multiples of a given number and return them in a sorted list. The function should also handle the case where n is 0, in which case it should return an empty list.","solution":"def find_multiples(number, n): Returns the first n multiples of the given number in a sorted list. If n is 0, returns an empty list. Args: number (int): The number to find multiples of. n (int): The number of multiples to find. Returns: list: A list of the first n multiples of the given number. if n == 0: return [] return [number * i for i in range(1, n+1)]"},{"question":"Write a python function to filter out the inefficiencies in a list of phone numbers, keeping only those numbers that have a specific length. For example, if the specific length is 10, the function should return a list of phone numbers that are exactly 10 digits long.","solution":"def filter_phone_numbers(phone_numbers, length): Filters out phone numbers that do not match the specified length. Args: phone_numbers (list): List of phone numbers to filter. length (int): The specific length to filter by. Returns: list: A new list containing only the phone numbers of the specified length. return [number for number in phone_numbers if len(number) == length]"},{"question":"Write a python function to return a list of all the words from a given string that have a length of at least 5 characters.","solution":"def words_with_min_length(text, min_length=5): Returns a list of words from the input string that have a length of at least \`min_length\` characters. Parameters: text (str): The input string. min_length (int): The minimum length of words to include in the result (default is 5). Returns: list: A list of words with at least \`min_length\` characters. words = text.split() return [word for word in words if len(word) >= min_length]"},{"question":"Write a python function to find the nth Fibonacci number. Could you please provide a solution that also handles large numbers efficiently? Python's built-in \`int\` type supports arbitrarily large integers, but you need to avoid integer overflow and ensure your function can handle very large inputs. Use recursion with memoization to achieve this.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization to handle large numbers efficiently. Args: n (int): The position of the Fibonacci sequence to retrieve. Returns: int: The nth Fibonacci number. if n in memo: return memo[n] if n <= 0: return 0 if n == 1: return 1 memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to return the nthfibonacci number. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1 (0, 1, 1, 2, 3, 5, 8, 13, ...). The function should handle the case where n is less than 0 by returning None.","solution":"def nth_fibonacci(n): Returns the nth Fibonacci number. If n is less than 0, returns None. if n < 0: return None elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the value of 'X' in the equation X * 98 = 1925. How can you solve this problem?","solution":"def find_x(): Solves the equation X * 98 = 1925 and returns the value of X. return 1925 / 98"},{"question":"Write a python function to find the first repetition in a list of integers.","solution":"def find_first_repetition(lst): Returns the first repeated integer in the list. If no repetition is found, returns None. seen = set() for num in lst: if num in seen: return num seen.add(num) return None"},{"question":"Write a python function to find the maximum number in a list of integers. Ensure the function handles an empty list by returning None.","solution":"def find_max(numbers): Returns the maximum number in a list of integers. Returns None if the list is empty. if not numbers: return None return max(numbers)"},{"question":"Write a python function to sort a list in ascending order using the merge sort algorithm.","solution":"def merge_sort(arr): Perform merge sort on the input list and return the sorted list. if len(arr) <= 1: return arr # Split the array into two halves mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] # Recursively sort both halves left_sorted = merge_sort(left_half) right_sorted = merge_sort(right_half) # Merge the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): Merge two sorted lists into one sorted list. result = [] left_index = 0 right_index = 0 # Iterate over both lists and append the smaller element to the result list while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 # Append any remaining elements from the left list result.extend(left[left_index:]) # Append any remaining elements from the right list result.extend(right[right_index:]) return result"},{"question":"Write a python function to remove all the special characters from a given string.","solution":"import re def remove_special_characters(s): Removes all special characters from the given string \`s\`. return re.sub(r'[^A-Za-z0-9 ]+', '', s)"},{"question":"Write a python function to calculate the factorial of a number, but with type checking to ensure the input is a non-negative integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is not a non-negative integer, raises a ValueError. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to calculate the repeated characters in a sentence. The function should accept one parameter and return a dictionary containing characters and their counts. If no repeated characters are found, return an empty dictionary.","solution":"def count_repeated_characters(sentence): Returns a dictionary with characters as keys and their counts as values, only for characters that are repeated in the sentence. char_count = {} for char in sentence: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Filter out characters that are not repeated repeated_chars = {char: count for char, count in char_count.items() if count > 1} return repeated_chars"},{"question":"Write a python function to implement a simple filter that removes all words from a string that are shorter than a specified length (n). Then return the filtered text as a string.","solution":"def filter_short_words(text, n): Removes all words from 'text' that are shorter than 'n' characters. Parameters: text (str): The string to filter. n (int): The minimum length of words to keep. Returns: str: The filtered string. words = text.split() filtered_words = [word for word in words if len(word) >= n] return ' '.join(filtered_words)"},{"question":"Write a python function to remove duplicates from a list, preserving the initial order of the elements. You need to modify the original list itself without using any additional data structures.","solution":"def remove_duplicates(lst): Removes duplicates from the list lst, preserving the initial order of elements. This function modifies the original list in place and does not use any additional data structures. Args: lst (list): The list from which to remove duplicates. Returns: None i = 0 while i < len(lst): j = i + 1 while j < len(lst): if lst[i] == lst[j]: del lst[j] else: j += 1 i += 1"},{"question":"Write a python function to reverse an integer. For example, if the input is 123, the output should be 321.","solution":"def reverse_integer(n): Reverses the digits of an integer n. If n is negative, the reversed integer should also be negative. sign = -1 if n < 0 else 1 reversed_number = int(str(abs(n))[::-1]) return sign * reversed_number"},{"question":"Write a python function to reverse a string, then use the function to reverse the string \\"hello world!\\"","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] # Using the function to reverse the string \\"hello world!\\" reversed_string = reverse_string(\\"hello world!\\")"},{"question":"Write a python function to validate if an email address is in the correct format. The function should use regular expressions and return True if the email is valid, and False otherwise.","solution":"import re def is_valid_email(email): Validates if the email address is in a correct format using regular expressions. Args: email (str): The email address to validate. Returns: bool: True if the email is valid, False otherwise. email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return bool(re.match(email_regex, email))"},{"question":"Write a python function to find the next greater number with the same set of digits in python. If no such number exists, return -1. For example, for the number 1234 the next greater number with the same set of digits is 1243. But for numbers like 4321 no such number exists and so, return -1.","solution":"def next_greater_element(n): Return the next greater number with the same set of digits. If no such number exists, return -1. digits = list(str(n)) length = len(digits) # Step 1: Find the first digit that is smaller than the digit next to it. for i in range(length-2, -1, -1): if digits[i] < digits[i+1]: break else: # If no such digit is found, that means the digits are in descending order. return -1 # Step 2: Find the smallest digit on the right of the above found digit that is greater than it. for j in range(length-1, i, -1): if digits[j] > digits[i]: break # Step 3: Swap the above found two digits. digits[i], digits[j] = digits[j], digits[i] # Step 4: Sort the digits after (i+1) in ascending order. digits = digits[:i+1] + sorted(digits[i+1:]) # Convert back to integer return int(''.join(digits))"},{"question":"Write a python function to check if a given triplet of numbers is a Pythagorean triplet or not. A Pythagorean triplet is a set of three natural numbers a, b and c, such that a*a + b*b = c*c.","solution":"def is_pythagorean_triplet(a, b, c): Returns True if a, b, c form a Pythagorean triplet, False otherwise. numbers = sorted([a, b, c]) return numbers[0]**2 + numbers[1]**2 == numbers[2]**2"},{"question":"Write a python function to generate a list of Fibonacci numbers up to n terms. For example, if \`n=5\`, the function should return \`[0, 1, 1, 2, 3]\`.","solution":"def generate_fibonacci(n): Generates a list of Fibonacci numbers up to n terms. :param n: Number of terms :return: List of Fibonacci numbers if n <= 0: return [] elif n == 1: return [0] fib_list = [0, 1] while len(fib_list) < n: fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Write a python function to find the second highest number in a list of integers. Your function should find the second largest number without using any built-in sorting functions, and it should work for both ascending and descending ordered lists. Consider edge cases like repeated values and an empty list.","solution":"def second_highest(numbers): Returns the second highest number in a list of integers. If the list is empty or contains less than 2 distinct numbers, return None. if not numbers or len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: first, second = number, first elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to find the second smallest number in a list. If the list contains duplicates, return the second distinct smallest number. For example, in the list [4, 1, 2, 1, 3], the function should return 2, because 2 is the second distinct smallest number in the list.","solution":"def second_smallest(nums): Returns the second distinct smallest number in the list 'nums'. If the list does not contain at least two distinct numbers, return None. if not nums or len(nums) < 2: return None distinct_nums = sorted(set(nums)) if len(distinct_nums) < 2: return None return distinct_nums[1]"},{"question":"Write a python function to determine if a given integer is a perfect square. If it is not a perfect square, return the next smallest perfect square. If it is a perfect square, return the square root of the number.","solution":"import math def perfect_square_or_nearest(n): Determines if a given integer n is a perfect square. If it is a perfect square, return the square root of the number. If it is not a perfect square, return the next smallest perfect square. sqrt_n = math.isqrt(n) if sqrt_n * sqrt_n == n: return sqrt_n else: return sqrt_n * sqrt_n"},{"question":"Write a python function to determine the number of unique ways to partition a given set of distinct integers into non-empty subsets. This is also known as finding the number of subsets of the power set excluding the empty set. The function should return the total number of unique partitions.","solution":"from math import factorial def unique_partitions(n): Calculate the number of unique ways to partition a set of size n into non-empty subsets. This number is given by the Bell number B(n). def bell_number(n): bell = [[0 for i in range(n+1)] for j in range(n+1)] bell[0][0] = 1 for i in range(1, n+1): bell[i][0] = bell[i-1][i-1] for j in range(1, i+1): bell[i][j] = bell[i-1][j-1] + bell[i][j-1] return bell[n][0] return bell_number(n)"},{"question":"Write a python function to find the longest increasing subsequence in a given sequence. The function should return the length of the longest increasing subsequence. For example, given the sequence [10, 9, 2, 5, 3, 7, 101, 18], the function should return 4, as the longest increasing subsequence is [2, 3, 7, 101].","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in the given sequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to find the middle node of a linked list. If the list has an even number of nodes, return the second middle node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def middle_node(head): Returns the middle node of the linked list. If the list has an even number of nodes, returns the second middle node. slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a python function to merge two lists, removing duplicates and maintaining the order of elements as they appear in the lists.","solution":"def merge_lists(list1, list2): Merges two lists, removing duplicates and maintaining the order of elements as they appear in the lists. result = [] seen = set() for item in list1 + list2: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the largest product of three numbers in an array. The function should handle a variety of input sizes and return the correct result efficiently.","solution":"def maximum_product_of_three(nums): Returns the largest product of three numbers in the array. # Sort the array nums.sort() # The maximum product of three numbers can be one of the two cases: # 1. Product of the three largest numbers. # 2. Product of the two smallest numbers (could be very negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a python function to take three inputs (a, b, and f), where \`a\` and \`b\` are two numbers and \`f\` is a boolean value. If \`f\` is \`True\`, the function should return the sum of \`a\` and \`b\`; otherwise, it should return the product of \`a\` and \`b\`.","solution":"def calculate(a, b, f): Returns the sum of a and b if f is True. Otherwise, returns the product of a and b. :param a: first input number :param b: second input number :param f: boolean flag that determines the operation :return: sum if f is True, product if f is False if f: return a + b else: return a * b"},{"question":"Write a python function to calculate an n x n matrix (2D array) where each element at position [i, j] is the sum of digits of i*j (1 <= i <= n, 1 <= j <= n).","solution":"def sum_digits(number): Returns the sum of digits of a number. return sum(int(digit) for digit in str(number)) def calculate_matrix(n): Returns an n x n matrix where each element at position [i, j] is the sum of digits of i*j. matrix = [] for i in range(1, n + 1): row = [] for j in range(1, n + 1): product = i * j row.append(sum_digits(product)) matrix.append(row) return matrix"},{"question":"Write a python function to calculate the day of the week for a given date in the format 'YYYY-MM-DD'. Your function should use the datetime module and return the day of the week as a string. For example, the function should return 'Friday' for the date '2023-09-29'.","solution":"from datetime import datetime def get_day_of_week(date_str): Returns the day of the week for a given date in 'YYYY-MM-DD' format. date_obj = datetime.strptime(date_str, '%Y-%m-%d') return date_obj.strftime('%A')"},{"question":"Write a python function to solve the \\"Best Time to Buy and Sell Stock\\" problem. The function should take an array of daily stock prices and return the maximum profit that can be made by buying and selling on different days. If no profit can be made, the function should return 0.","solution":"def max_profit(prices): This function takes a list of daily stock prices and returns the maximum profit that can be achieved by buying and selling on different days. If no profit can be made, it returns 0. :param prices: A list of daily stock prices (integers) :return: An integer representing the maximum profit if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to find the maximum sum of a subarray within a one-dimensional array of numbers which has both negative and positive numbers. This is a famous problem known as Kadane's Algorithm.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray within a one-dimensional array of numbers. This uses Kadane's Algorithm. :param arr: List of integers, can include both positive and negative numbers. :return: Integer, maximum sum of a subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find a number \`n\` that represents both Nth Fibonacci number and the nth number in a sequence where each term is the sum of the previous three terms (sequence starts with 0, 0, 1). The number \`n\` should be less than 20.","solution":"def find_special_number(): Finds the number \`n\` that represents both the Nth Fibonacci number and the nth number in a sequence where each term is the sum of the previous three terms, n < 20. def fibonacci(n): if n <= 1: return n a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return b def tribonacci(n): if n == 0 or n == 1: return 0 elif n == 2: return 1 else: a, b, c = 0, 0, 1 for _ in range(n - 2): a, b, c = b, c, a + b + c return c for n in range(20): if fibonacci(n) == tribonacci(n): return n return None # If no such number is found # Run the function to see the result result = find_special_number() print(result)"},{"question":"Write a python function to generate a list of the Fibonacci sequence up to a given number n.","solution":"def generate_fibonacci(n): Generates a list of the Fibonacci sequence up to a given number n. Parameters: n (int): The upper limit of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the given number n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") fibonacci = [] a, b = 0, 1 while a <= n: fibonacci.append(a) a, b = b, a + b return fibonacci"},{"question":"Write a python function to check the validity of a given date string. The function should return True if the date is valid according to the Gregorian calendar, and False otherwise. The date string should be in the format 'YYYY-MM-DD'. However, the input can be a string, an integer, or a float. The function should convert the input to a string before processing.","solution":"def is_valid_date(date): Check the validity of a given date string in 'YYYY-MM-DD' format. Converts input to string before processing. Returns True if the date is valid according to the Gregorian calendar, and False otherwise. from datetime import datetime # Convert the input to a string date_str = str(date) try: # Try to parse the date with the given format datetime.strptime(date_str, '%Y-%m-%d') return True except ValueError: # If a ValueError is raised, the date is not valid return False"},{"question":"Write a python function to check if a number is a power of two. Also, handle negative inputs appropriately.","solution":"def is_power_of_two(n): Checks if the given number n is a power of two. Arguments: n -- Integer to be checked Returns: True if n is a power of two, False otherwise and for negative numbers. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a python function to calculate the BMI (body mass index) of a person. The function should accept weight in kilograms and height in meters, calculate the BMI using the formula BMI = weight(kg) / height(m)^2, and return the calculated BMI. If the height is zero or less, the function should return None, as BMI cannot be calculated in such cases.","solution":"def calculate_bmi(weight, height): Calculate the Body Mass Index (BMI) given the weight in kilograms and height in meters. Args: weight (float): Weight of the person in kilograms. height (float): Height of the person in meters. Returns: float: The calculated BMI or None if height is zero or less. if height <= 0: return None return weight / (height ** 2)"},{"question":"Write a python function to determine if a given string is a subsequence of another string. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, string \\"abc\\" is a subsequence of \\"ahbgdc\\" because (a, b, c) appear in the same order in \\"ahbgdc\\".","solution":"def is_subsequence(s: str, t: str) -> bool: Determines if string s is a subsequence of string t. iter_t = iter(t) return all(char in iter_t for char in s)"},{"question":"Write a python function to create a string with the highest number of words, where \\"word\\" is defined as a positive integer. The function should return the string with all the numbers in ascending order.","solution":"def create_string_with_highest_number_of_words(num_string): Creates a string with the highest number of words, where each word is a positive integer. Returns the string with all numbers in ascending order. Parameters: num_string (str): A string containing integer words separated by spaces. Returns: str: A string with the integers in ascending order. # Split the input string into words words = num_string.split() # Convert the words into integers numbers = [int(word) for word in words] # Sort the numbers in ascending order sorted_numbers = sorted(numbers) # Convert the sorted numbers back to strings sorted_words = [str(number) for number in sorted_numbers] # Join the sorted words into a single string separated by spaces return ' '.join(sorted_words)"},{"question":"Write a python function to partition an array into sub-arrays such that the maximum element in each subarray is less than or equal to \`k\`. If return \`-1\` if it's not possible to partition the array in such a way.","solution":"def partition_array(arr, k): Partition the array into sub-arrays such that the maximum element in each subarray is less than or equal to k. If it is not possible, return -1. if any(element > k for element in arr): return -1 result = [] current_subarray = [] for element in arr: if element <= k: current_subarray.append(element) else: result.append(current_subarray) current_subarray = [element] if current_subarray: result.append(current_subarray) return result"},{"question":"Write a python function to calculate the square root of a given number. The function should handle both positive and negative numbers, and return an appropriate error message for invalid inputs.","solution":"import math def sqrt(number): Returns the square root of a number. If the number is negative, return an error message. If the input is not a number, return an error message. if not isinstance(number, (int, float)): return \\"Invalid input: input must be a number\\" if number < 0: return \\"Error: negative number does not have a real square root\\" return math.sqrt(number)"},{"question":"Write a python function to implement a simple counter that can increment at each call. Implement the function as a closure to use a private variable.","solution":"def make_counter(): Creates a counter function that increments at each call. count = 0 def counter(): nonlocal count count += 1 return count return counter"},{"question":"Write a python function to check if the given list contains only positive numbers.","solution":"def all_positive(numbers): Check if all numbers in the list are positive. Args: numbers (list): List of numbers to check. Returns: bool: True if all numbers are positive, False otherwise. return all(n > 0 for n in numbers)"},{"question":"Write a python function to find the maximum product of three distinct numbers in a list. The list can contain both positive and negative numbers.","solution":"def maximum_product_of_three(nums): Returns the maximum product of three distinct numbers in a list. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a python function to generate a Fibonacci sequence with memoization to improve performance.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to find the minimum number of insertions to form a palindrome.","solution":"def min_insertions_to_form_palindrome(s): Returns the minimum number of insertions to form a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n+1): for i in range(n-length+1): j = i+length-1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 return dp[0][n-1]"},{"question":"Write a python function to generate a random list of integers. The list should have a specific length, \`n\`, and its elements should be integers between \`a\` and \`b\` (inclusive). The function should return this list.","solution":"import random def generate_random_list(n, a, b): Generates a random list of integers. Parameters: n (int): The length of the list. a (int): The lower bound of the integers (inclusive). b (int): The upper bound of the integers (inclusive). Returns: list: A list of n random integers between a and b. return [random.randint(a, b) for _ in range(n)]"},{"question":"Write a python function to generate a random lowercase letter.","solution":"import random import string def random_lowercase_letter(): Returns a random lowercase letter. return random.choice(string.ascii_lowercase)"},{"question":"Write a python function to reverse a string by index.","solution":"def reverse_string(s): Returns the reversed string. return s[::-1]"},{"question":"Write a python function to return the longest increasing subsequence (LIS) in an array. The function should handle the entire array from start to end, and return the LIS as a list of integers.","solution":"def longest_increasing_subsequence(arr): Returns the longest increasing subsequence (LIS) from the given array. if not arr: return [] n = len(arr) lis = [1] * n predecessors = list(range(n)) for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 predecessors[i] = j max_lis_length = max(lis) lis_index = lis.index(max_lis_length) result = [] while predecessors[lis_index] != lis_index: result.append(arr[lis_index]) lis_index = predecessors[lis_index] result.append(arr[lis_index]) return result[::-1]"},{"question":"Write a python function to find the maximum value in a given list of integers. If the list is empty, return None. Ensure your function does not use any built-in functions except \`len()\`.","solution":"def find_max_value(lst): Returns the maximum value in a given list of integers. If the list is empty, returns None. if len(lst) == 0: return None max_value = lst[0] for number in lst[1:]: if number > max_value: max_value = number return max_value"},{"question":"Write a python function to delete specific columns from a pandas DataFrame based on a column name list. The function should work for any DataFrame and any list of column names to delete.","solution":"import pandas as pd def delete_columns(df, columns_to_delete): Deletes specific columns from a pandas DataFrame based on a column name list. Args: df (pd.DataFrame): The DataFrame from which columns will be deleted. columns_to_delete (list): A list of column names to delete from the DataFrame. Returns: pd.DataFrame: A DataFrame with the specified columns deleted. return df.drop(columns=columns_to_delete, errors='ignore')"},{"question":"Write a python function to find the maximum and minimum element in an array. This function should take a list as its parameter and return the maximum and minimum values.","solution":"def find_max_min(arr): Returns the maximum and minimum elements in the given list. if not arr: raise ValueError(\\"The input list is empty\\") max_element = max(arr) min_element = min(arr) return max_element, min_element"},{"question":"Write a python function to determine whether all digits in a number are distinct.","solution":"def all_digits_distinct(n): Determines whether all digits in a number are distinct. Parameters: n (int): The number to check. Returns: bool: True if all digits in the number are distinct, False otherwise. n_str = str(n) return len(n_str) == len(set(n_str))"},{"question":"Write a python function to find the index of the first even number in a list using a for loop. If no even number is found, return -1.","solution":"def find_first_even_index(lst): Returns the index of the first even number in the list. If no even number is found, returns -1. for index, number in enumerate(lst): if number % 2 == 0: return index return -1"},{"question":"Write a python function to convert a list of integers into a list of their corresponding binary representations as strings.","solution":"def convert_to_binary(lst): Converts a list of integers into a list of their corresponding binary representations as strings. Parameters: lst (list): List of integers. Returns: list: List of binary representation strings. return [bin(number)[2:] for number in lst]"},{"question":"Write a python function to find the maximum sum of a subarray within a one-dimensional array of numbers which has the constraint that no two elements in the subarray are adjacent.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of a subarray with no two elements being adjacent. if not nums: return 0 if len(nums) == 1: return nums[0] incl = 0 # max sum including the previous element excl = 0 # max sum excluding the previous element for num in nums: # Current max excluding i (no two elements are adjacent) new_excl = max(incl, excl) # Current max including i incl = excl + num excl = new_excl # return max of incl and excl return max(incl, excl)"},{"question":"Write a python function to find the number of occurrences of a digit 'd' in a given base 'n' number 'num'. The function should handle negative numbers and return the count of 'd' digits, ignoring any leading or trailing '-' sign.","solution":"def count_digit_in_number(num, d): Returns the number of occurrences of digit 'd' in the base 'n' number 'num'. Handles negative numbers and ignores any leading/trailing '-' sign. num_str = str(abs(num)) # Convert the number to a string and handle negative numbers return num_str.count(str(d))"},{"question":"Write a python function to check if a user's given string is composed of all unique characters, taking into account case sensitivity and non-alphabetic characters.","solution":"def has_unique_characters(s): Checks if a given string is composed of all unique characters, considering case sensitivity and non-alphabetic characters. Parameters: s (str): The string to be checked. Returns: bool: True if all characters are unique, False otherwise. return len(s) == len(set(s))"},{"question":"Write a python function to split a string into a list of words and return the list in reverse order.","solution":"def reverse_split_string(s): Splits the string s into a list of words and returns the list in reverse order. :param s: Input string :return: List of words in reverse order words = s.split() return words[::-1]"},{"question":"Write a python function to find the minimum element in a 2D array. The function should return the minimum element found.","solution":"def find_min_in_2d_array(arr): Returns the minimum element in a 2D array. :param arr: List[List[int]] - a 2D list of integers :return: int - the minimum element in the array if not arr or not arr[0]: raise ValueError(\\"Input array should not be empty\\") min_element = arr[0][0] for row in arr: for element in row: if element < min_element: min_element = element return min_element"},{"question":"Write a python function to find all the numbers in a given list that are divisible by a specified number \`n\`. The function should accept two parameters: \`numbers\` (a list of integers) and \`n\` (an integer divisor). The function should return a list of integers from the input list that are divisible by \`n\` without leaving a remainder. If no numbers meet this condition, the function should raise a custom exception \\"NoDivisibleNumbers\\" with a message indicating there are no numbers divisible by \`n\`.","solution":"class NoDivisibleNumbers(Exception): pass def find_divisible(numbers, n): Returns a list of numbers from the input list that are divisible by n without leaving a remainder. Raises a NoDivisibleNumbers exception if no numbers divisible by n are found. divisible_numbers = [num for num in numbers if num % n == 0] if not divisible_numbers: raise NoDivisibleNumbers(f\\"No numbers in the list are divisible by {n}.\\") return divisible_numbers"},{"question":"Write a python function to find the most frequent character in a given string and return it along with its frequency.","solution":"from collections import Counter def most_frequent_character(s): Finds the most frequent character in a given string and returns it along with its frequency. Parameters: s (str): The input string Returns: tuple: A tuple containing the most frequent character and its frequency if not s: return None, 0 counter = Counter(s) most_common = counter.most_common(1)[0] return most_common"},{"question":"Write a python function to convert a given string to its equivalent integer value. You will use built-in functions and no additional data structures.","solution":"def string_to_int(s): Convert string to its equivalent integer value. if s[0] == '-': return -int(s[1:]) else: return int(s)"},{"question":"Write a python function to check if a date is valid.","solution":"from datetime import datetime def is_valid_date(date_str): Checks if the date string is valid in the format YYYY-MM-DD. Parameters: date_str (str): The date string to check. Returns: bool: True if the date string is valid, False otherwise. try: datetime.strptime(date_str, \\"%Y-%m-%d\\") return True except ValueError: return False"},{"question":"Write a python function to remove all the vowels from a given string and return the modified string.","solution":"def remove_vowels(input_string): Removes all vowels from the given string. Parameters: input_string (str): The string from which vowels need to be removed. Returns: str: The string without vowels. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char not in vowels])"},{"question":"Write a python function to check whether a given number is a palindrome number or not. A palindrome number is a number that remains the same when its digits are reversed.例如，121, 222, 303, 2002.","solution":"def is_palindrome_number(n): Returns True if the given number n is a palindrome, else returns False. # Convert the number to a string for easy manipulation str_n = str(n) # Check if the string is equal to its reverse return str_n == str_n[::-1]"},{"question":"Write a python function to sort an array of positive integers in ascending order such that the elements at odd positions in the sorted array are the smallest and largest elements in the original array, and the elements at even positions are the second smallest, second largest, and so on.","solution":"def odd_even_sort(arr): Sorts the array such that odd positions have smallest and largest elements alternatively, while even positions have the second smallest, second largest, and so on. if not arr: return [] arr.sort() n = len(arr) result = [0] * n odd_index = 0 even_index = 1 left = 0 right = n - 1 while left <= right: if odd_index < n: result[odd_index] = arr[left] left += 1 odd_index += 2 if even_index < n: result[even_index] = arr[right] right -= 1 even_index += 2 return result"},{"question":"Write a python function to find the largest number in a list using recursion. Explain each step of the code.","solution":"def find_largest_recursive(arr): Find the largest number in a list using recursion. :param arr: List of numbers :return: The largest number in the list # Base case: if the list has only one element, return that element if len(arr) == 1: return arr[0] # Recursive case: find the largest number in the remaining part of the list max_of_rest = find_largest_recursive(arr[1:]) # Compare the first element with the largest number of the remaining list if arr[0] > max_of_rest: return arr[0] else: return max_of_rest"},{"question":"Write a python function to find the shortest path in a binary matrix from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.","solution":"def shortest_path_binary_matrix(grid): Returns the length of the shortest clear path in a binary matrix starting from the top-left corner (0,0) to the bottom-right corner (n-1, n-1). The path can only be made by moving right or down. if not grid or not grid[0]: return -1 n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 # Set up a grid to store the path lengths path_length = [[float('inf')]*n for _ in range(n)] path_length[0][0] = 1 # Use a queue for BFS from collections import deque queue = deque([(0, 0)]) while queue: x, y = queue.popleft() for dx, dy in [(1, 0), (0, 1)]: # down, right movements nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0: # Check if we found a shorter path if path_length[nx][ny] > path_length[x][y] + 1: path_length[nx][ny] = path_length[x][y] + 1 queue.append((nx, ny)) return path_length[-1][-1] if path_length[-1][-1] != float('inf') else -1"},{"question":"Write a python function to create a list of Fibonacci numbers up to the given length. The function should take one argument, \`length\`, which represents how many Fibonacci numbers to generate.","solution":"def fibonacci(length): Returns a list of Fibonacci numbers up to the given length. if length <= 0: return [] elif length == 1: return [0] elif length == 2: return [0, 1] fib_list = [0, 1] for i in range(2, length): fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Write a python function to find the two numbers with the smallest difference in a list. Return the two numbers as a tuple, with the smaller number first.","solution":"def find_smallest_difference(nums): Finds the two numbers with the smallest difference in a list. Args: nums: List of integers. Returns: A tuple of two integers with the smallest difference, smaller number first. if len(nums) < 2: raise ValueError(\\"At least two numbers are required to find a minimum difference.\\") nums.sort() min_diff = float('inf') smallest_pair = (None, None) for i in range(len(nums) - 1): diff = nums[i + 1] - nums[i] if diff < min_diff: min_diff = diff smallest_pair = (nums[i], nums[i + 1]) return smallest_pair"},{"question":"Write a python function to print the numbers in descending order.","solution":"def print_numbers_descending(n): Prints numbers from n down to 1 in descending order. for i in range(n, 0, -1): print(i)"},{"question":"Write a python function to guess the secret number. The function should take no parameters and prompt the user to guess the secret number between 1 and 100. It should keep track of the number of attempts and provide feedback if the guess is too high, too low, or correct. The function should use a while loop to keep prompting the user until they guess the correct number.","solution":"import random def guess_secret_number(): Function to guess the secret number between 1 and 100. Prompts the user to guess until the correct number is guessed. Provides feedback if the guess is too high, too low, or correct. secret_number = random.randint(1, 100) attempts = 0 while True: guess = int(input(\\"Guess the secret number between 1 and 100: \\")) attempts += 1 if guess < secret_number: print(\\"Your guess is too low.\\") elif guess > secret_number: print(\\"Your guess is too high.\\") else: print(f\\"Congratulations! You've guessed the number in {attempts} attempts.\\") break"},{"question":"Write a python function to serialize a list into a JSON string. I want to serialize a list that contains both integers and strings. Do you have any specific requirements or constraints for this Python function?","solution":"import json def serialize_list(input_list): Serializes a list of integers and strings into a JSON string. Args: input_list (list): List containing integers and strings. Returns: str: JSON string representation of the list. return json.dumps(input_list)"},{"question":"Write a python function to remove spaces from a string, count the frequency of each character, and return a dictionary where the keys are the characters and the values are their respective frequencies.","solution":"def char_frequency(s): Removes spaces from the string and returns a dictionary where keys are characters and values are their frequencies. s = s.replace(\\" \\", \\"\\") frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a python function to iterate over a dictionary and print each key and value.","solution":"def print_dict_items(dictionary): Iterates over a dictionary and prints each key and value. for key, value in dictionary.items(): print(f'{key}: {value}')"},{"question":"Write a python function to convert a given string to its Pig Latin equivalent. In Pig Latin, a word is formed by taking the first letter of the English word and moving it to the end, then adding \\"ay\\". If the word starts with a vowel, the word is formed by adding \\"way\\" at the end. Assume the input string contains only lowercase letters.","solution":"def to_pig_latin(word): Converts a given string to its Pig Latin equivalent. In Pig Latin, a word is formed by taking the first letter of the English word and moving it to the end, then adding \\"ay\\". If the word starts with a vowel, the word is formed by adding \\"way\\" at the end. Parameters: word (str): The input string containing only lowercase letters. Returns: str: The Pig Latin equivalent of the input word. vowels = 'aeiou' if word[0] in vowels: return word + 'way' else: return word[1:] + word[0] + 'ay'"},{"question":"Write a python function to return the list of all prime numbers less than or equal to a given integer n. If n is less than or equal to 1, the function should return an empty list. Use the Sieve of Eratosthenes algorithm for efficient computation.","solution":"def sieve_of_eratosthenes(n): Returns the list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n <= 1: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(n + 1) if is_prime[i]]"},{"question":"Write a python function to return the number of times a number appears in a list. The function should also return the index positions of that number in the list.","solution":"def number_count_and_positions(lst, target): Returns the number of times a target number appears in a list and the index positions of that number in the list. Parameters: lst (list): List of elements. target: The target element to count and find positions for. Returns: tuple: (count, positions) where count is the number of times target appears, and positions is a list of index positions of target in lst. positions = [index for index, value in enumerate(lst) if value == target] count = len(positions) return count, positions"},{"question":"Write a python function to identify if all characters in a given string are unique or not. The function should return \`True\` if all characters are unique, and \`False\` otherwise.","solution":"def all_unique_characters(s): Returns True if all characters in the string s are unique, False otherwise. return len(s) == len(set(s))"},{"question":"Write a python function to find the highest even number in a given list. If there are no even numbers in the list, the function should return \`None\`.","solution":"def highest_even_number(numbers): Returns the highest even number in the given list of numbers. If there are no even numbers, returns None. evens = [num for num in numbers if num % 2 == 0] return max(evens, default=None)"},{"question":"Write a python function to generate a list of the first \`n\` Fibonacci numbers using recursion, but with a twist: each Fibonacci number in the list should be squared.","solution":"def fibonacci_squares(n): Returns a list of the first n Fibonacci numbers, each squared. if n <= 0: return [] def fibonacci(num): if num == 0: return 0 elif num == 1: return 1 else: return fibonacci(num - 1) + fibonacci(num - 2) return [(fibonacci(i) ** 2) for i in range(n)]"},{"question":"Write a python function to sort an array in ascending order using the quicksort algorithm. Quicksort is a divide-and-conquer algorithm. Your function should take an array as input and return the sorted array.","solution":"def quicksort(arr): Sorts an array in ascending order using the quicksort algorithm. Parameters: arr (list): A list of elements to be sorted. Returns: list: The sorted list. def _quicksort(items, low, high): if low < high: pi = partition(items, low, high) _quicksort(items, low, pi-1) _quicksort(items, pi+1, high) def partition(items, low, high): pivot = items[high] i = low - 1 for j in range(low, high): if items[j] < pivot: i += 1 items[i], items[j] = items[j], items[i] items[i+1], items[high] = items[high], items[i+1] return i + 1 _quicksort(arr, 0, len(arr) - 1) return arr"},{"question":"Write a python function to find all distinct sub-strings of a given string. You can assume that the string contains only lowercase alphabets and spaces. The function should return a list of distinct sub-strings. If the input string is empty, the function should return an empty list.","solution":"def distinct_substrings(s): Return a list of all distinct substrings of the given string. :param s: The input string consisting of lowercase alphabets and spaces. :return: List of all distinct substrings. substrings = set() # Generate all possible substrings for i in range(len(s)): for j in range(i+1, len(s)+1): substrings.add(s[i:j]) return list(substrings)"},{"question":"Write a python function to merge two sorted lists and return the merged list. The function should be efficient in terms of time complexity.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. Parameters: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: Merged sorted list. # Initialize pointers for both lists i, j = 0, 0 merged_list = [] # Loop through both lists and merge them while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements if any while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to check if a given list is sorted in descending order.","solution":"def is_sorted_descending(lst): Returns True if the list is sorted in descending order, False otherwise. return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))"},{"question":"Write a python function to count the number of occurrences of a word in a given string. You can assume that the words in the string are separated by spaces.","solution":"def count_word_occurrences(sentence, word): Counts the number of occurrences of a word in a given string. Parameters: sentence (str): The string to search within. word (str): The word to count occurrences of. Returns: int: The number of times the word occurs in the string. words = sentence.split() return words.count(word)"},{"question":"Write a python function to solve the problem of arranging a sequence of numbers into a grid layout, similar to a snakepath algorithm. The function should take an integer \`n\` as input and return a \`n * n\` grid filled with numbers from 1 to \`n * n\` following the snakepath algorithm pattern. The snakepath algorithm fills the grid in a snake-like pattern, starting from the top-left corner, moving right along the first row, then down one cell, moving left across the second row, then up one cell, and so on.","solution":"def snakepath_grid(n): Generates an n x n grid filled with numbers from 1 to n*n following the snakepath algorithm. grid = [[0] * n for _ in range(n)] num = 1 for row in range(n): if row % 2 == 0: for col in range(n): grid[row][col] = num num += 1 else: for col in range(n-1, -1, -1): grid[row][col] = num num += 1 return grid"},{"question":"Write a python function to find the minimum number of coins needed to make up a specific amount, and return -1 if it's not possible. The function should use a breadth-first search (BFS) approach to solve the problem.","solution":"from collections import deque def min_coins_bfs(coins, amount): Returns the minimum number of coins needed to make up the given amount using BFS. Returns -1 if it's not possible to make the exact amount with the given coins. if amount == 0: return 0 visited = [False] * (amount + 1) queue = deque([(0, 0)]) # (current_amount, number_of_coins) visited[0] = True while queue: current_amount, num_coins = queue.popleft() for coin in coins: next_amount = current_amount + coin if next_amount == amount: return num_coins + 1 if next_amount < amount and not visited[next_amount]: visited[next_amount] = True queue.append((next_amount, num_coins + 1)) return -1"},{"question":"Write a python function to test if a given number is a beautiful number. A beautiful number is defined as a number that is both a palindrome (reads the same backward as forward) and the sum of its digits is also a palindrome.","solution":"def is_palindrome(n): Helper function to check if a given number n is a palindrome. return str(n) == str(n)[::-1] def sum_of_digits(n): Helper function to calculate the sum of the digits of a given number n. return sum(int(digit) for digit in str(n)) def is_beautiful_number(n): Returns True if the given number n is a beautiful number. A beautiful number is a number that is a palindrome and the sum of its digits is also a palindrome. if is_palindrome(n): digit_sum = sum_of_digits(n) return is_palindrome(digit_sum) return False"},{"question":"Write a python function to reverse a string a given number of times. For example, if the given string is \\"hello\\" and the number of times is 3, the function should return \\"ollehhellohello\\".","solution":"def reverse_string_times(s, times): Reverses the input string and concatenates it with the original string 'times' times. Parameters: s (str): The input string to be reversed. times (int): The number of times the original string should follow the reversed string. Returns: str: The resulting string after reversing and concatenation. reversed_string = s[::-1] return reversed_string + s * times"},{"question":"Write a python function to return the nth Fibonacci number. The function should be able to handle large values of n efficiently.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach to handle large values efficiently. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to solve the n-queens problem using the backtracking algorithm. Given an integer n, place n queens on an n×n chessboard so that no two queens threaten each other. A queen can attack another by being in the same row, the same column, or on the same diagonal.","solution":"def solve_n_queens(n): def is_not_under_attack(row, col): return not (cols[col] or hills[row - col] or dales[row + col]) def place_queen(row, col): queens.add((row, col)) cols[col] = 1 hills[row - col] = 1 dales[row + col] = 1 def remove_queen(row, col): queens.remove((row, col)) cols[col] = 0 hills[row - col] = 0 dales[row + col] = 0 def add_solution(): solution = [] for _, col in sorted(queens): solution.append('.' * col + 'Q' + '.' * (n - col - 1)) output.append(solution) def backtrack(row=0): for col in range(n): if is_not_under_attack(row, col): place_queen(row, col) if row + 1 == n: add_solution() else: backtrack(row + 1) remove_queen(row, col) cols = [0] * n hills = [0] * (2 * n - 1) dales = [0] * (2 * n - 1) queens = set() output = [] backtrack() return output"},{"question":"Write a python function to find pairs of distinct elements in an array that sum up to a given target value. The function should return all such pairs.","solution":"def find_pairs_with_sum(arr, target): Returns a list of pairs of distinct elements in 'arr' that sum up to 'target'. pairs = [] seen = set() for num in arr: complement = target - num if complement in seen: pairs.append((complement, num)) seen.add(num) return pairs"},{"question":"Write a python function to sort a list of numbers in ascending order using the partitioning principle from quicksort. The partitioning principle involves selecting a pivot element from the list and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted.","solution":"def quicksort(arr): Sorts a list of numbers in ascending order using the partitioning principle from quicksort. :param arr: List of numbers to be sorted :returns: A new list of numbers sorted in ascending order if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] less_than_pivot = [x for x in arr if x < pivot] equal_to_pivot = [x for x in arr if x == pivot] greater_than_pivot = [x for x in arr if x > pivot] return quicksort(less_than_pivot) + equal_to_pivot + quicksort(greater_than_pivot)"},{"question":"Write a python function to generate all 10-digit binary numbers that have exactly 5 ones and 5 zeros. You should return the result as a list of strings.","solution":"from itertools import permutations def generate_binary_10_digits(): Generate all 10-digit binary numbers that have exactly 5 ones and 5 zeros. Return the result as a list of strings. all_combinations = set(permutations('1111100000')) return [''.join(combination) for combination in all_combinations]"},{"question":"Write a python function to iterate over a list of strings and return the length of each string. The function should be properly documented and have type hints for its parameters and return type.","solution":"from typing import List def get_string_lengths(strings: List[str]) -> List[int]: Iterate over a list of strings and return the length of each string. Args: strings (List[str]): A list of strings. Returns: List[int]: A list containing the lengths of each string. return [len(string) for string in strings]"},{"question":"Write a python function to calculate the nth row of Pascal's Triangle. Print the nth row in a list format.","solution":"def get_pascals_triangle_row(n): Returns the nth row of Pascal's Triangle (0-indexed). row = [1] for _ in range(n): row = [x + y for x, y in zip([0] + row, row + [0])] return row"},{"question":"Write a python function to find all the divisors of a given number and return them in a sorted list.","solution":"def find_divisors(n): Returns a sorted list of all divisors of a given number n. divisors = [] for i in range(1, n + 1): if n % i == 0: divisors.append(i) return divisors"},{"question":"Write a python function to remove vowels from a given string, but keep all other characters unchanged.","solution":"def remove_vowels(s): Removes vowels from the input string s and returns the resultant string. vowels = 'aeiouAEIOU' return ''.join([char for char in s if char not in vowels])"},{"question":"Write a python function to find the maximum point in a mountain. A mountain is represented as an array where each element represents the height of a point on the mountain. The function should return the index of the maximum point.","solution":"def find_peak_index_in_mountain(arr): Returns the index of the maximum point in a mountain array. The mountain array has the property that it increases and then decreases. Parameters: arr (list): List of integers representing the mountain array Returns: int: Index of the peak element left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: # Peak is on the right side of mid (because it is still increasing) left = mid + 1 else: # Peak is on the left side of mid (or it could be mid itself) right = mid # left == right is the peak index when the loop terminates return left"},{"question":"Write a python function to find the number of days in a given month and year. The function should take two parameters: \`year\` and \`month\`. It should return the number of days in that month. For example, if the month is February in a leap year, it should return 29.","solution":"def days_in_month(year, month): Returns the number of days in the given month of the given year. # List of days in each month; February has 28 by default and will be corrected for leap years. days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for February and leap year if month == 2 and (year % 400 == 0 or (year % 100 != 0 and year % 4 == 0)): return 29 return days[month - 1]"},{"question":"Write a python function to sort a list of strings alphabetically.","solution":"def sort_strings(strings): Sorts a list of strings alphabetically. Parameters: strings (list): A list of strings to be sorted. Returns: list: A sorted list of strings. return sorted(strings)"},{"question":"Write a python function to check if a string is in reverse order of another string.","solution":"def is_reverse(str1, str2): Check if str1 is the reverse of str2. return str1 == str2[::-1]"},{"question":"Write a python function to count the number of occurrences of each unique word in a given string, ignoring case sensitivity and punctuation. Also return a dictionary where keys are the unique words and values are the number of occurrences.","solution":"import string def count_word_occurrences(text): Counts the number of occurrences of each unique word in a given string, ignoring case sensitivity and punctuation. :param text: The input string :return: A dictionary where keys are the unique words and values are the number of occurrences # Remove punctuation using str.translate and string.punctuation text = text.translate(str.maketrans('', '', string.punctuation)) # Convert text to lowercase and split into words words = text.lower().split() # Initialize a dictionary to hold word counts word_counts = {} # Iterate over each word and count occurrences for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"Write a python function to solve the following problem: Given a directed graph represented as an adjacency list, determine whether the graph contains a cycle. A directed graph contains a cycle if there is at least one path from a node back to itself.","solution":"def has_cycle(graph): Determines if the given directed graph contains a cycle. Parameters: - graph (dict): The adjacency list representation of the graph where the keys are nodes and the values are lists of nodes that the key node has directed edges to. Returns: - bool: True if the graph contains a cycle, False otherwise. visited = set() recursion_stack = set() def dfs(node): if node in recursion_stack: return True if node in visited: return False visited.add(node) recursion_stack.add(node) for neighbor in graph.get(node, []): if dfs(neighbor): return True recursion_stack.remove(node) return False for node in graph: if dfs(node): return True return False"},{"question":"Write a python function to find all pairs of prime numbers whose sum is even. In python, a prime number is a whole number that has only two distinct factors: 1 and itself. For example, 2, 3, 5, 7, 11, etc.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def find_prime_pairs(even_sum): if even_sum % 2 != 0 or even_sum < 4: return [] prime_pairs = [] for i in range(2, even_sum // 2 + 1): if is_prime(i) and is_prime(even_sum - i): prime_pairs.append((i, even_sum - i)) return prime_pairs"},{"question":"Write a python function to merge two lists into one list.","solution":"def merge_lists(list1, list2): Merges two lists into one list. return list1 + list2"},{"question":"Write a python function to find the maximum profit that can be made by trading a stock within a given time period, where only one transaction is permitted. You should return the maximum profit. If no profit can be made, return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling one stock. If no profit can be made, returns 0. :param prices: List of stock prices at different times. :return: Maximum profit. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to split a given list of numbers into two lists such that the sum of the numbers in each list is as close as possible, and the difference between the sums should be minimized.","solution":"def split_list(nums): Splits a list into two sublists such that the sums of the sublists are as close as possible. Parameters: nums (list): List of integers to be split. Returns: list, list: Two sublists with sums as close as possible. nums.sort(reverse=True) list1, list2 = [], [] sum1, sum2 = 0, 0 for num in nums: if sum1 <= sum2: list1.append(num) sum1 += num else: list2.append(num) sum2 += num return list1, list2"},{"question":"Write a python function to return the maximum value in an array \`A\` consisting of \`n\` elements. The array can have any data type, but for simplicity, assume all elements are integers or floats.","solution":"def find_max_value(A): Returns the maximum value in the array A. Args: A (list): A list of integers or floats. Returns: int or float: The maximum value in the array. if not A: raise ValueError(\\"The array should not be empty\\") max_value = A[0] for value in A: if value > max_value: max_value = value return max_value"},{"question":"Write a python function to create an n x n matrix and fill it in a spiral order. The function should take an integer n as input and return the filled matrix as a 2D list.","solution":"def create_spiral_matrix(n): Create an n x n matrix and fill it in a spiral order. Args: n (int): The dimension of the square matrix. Returns: List[List[int]]: The n x n matrix filled in spiral order. matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n - 1, 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Write a python function to produce a list of all 4-characters long strings composed of ['A', 'B', 'C'].","solution":"from itertools import product def generate_combinations(chars, length): Returns a list of all strings of given length composed of given characters. return [''.join(p) for p in product(chars, repeat=length)] def all_4_char_combinations(): Returns a list of all 4-characters long strings composed of ['A', 'B', 'C']. return generate_combinations(['A', 'B', 'C'], 4)"},{"question":"Write a python function to reverse a string. Implement it without using slicing or built-in functions like reversed().","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to implement a stack data structure using a list.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): Adds an item to the top of the stack. self.items.append(item) def pop(self): Removes and returns the item from the top of the stack. If the stack is empty, it returns None. if not self.is_empty(): return self.items.pop() return None def peek(self): Returns the item at the top of the stack without removing it. If the stack is empty, it returns None. if not self.is_empty(): return self.items[-1] return None def is_empty(self): Checks if the stack is empty. Returns True if it is empty, otherwise False. return len(self.items) == 0 def size(self): Returns the number of items in the stack. return len(self.items)"},{"question":"Write a python function to filter out numbers less than 10 from a list.","solution":"def filter_less_than_10(numbers): Filters out numbers less than 10 from the given list. Args: numbers (list): List of numbers to be filtered. Returns: list: List containing numbers greater than or equal to 10. return [num for num in numbers if num >= 10]"},{"question":"Write a python function to find the first unique character in a given string. The function should return the character that appears exactly once in the string. If no such character exists, return an underscore ('_').","solution":"def first_unique_char(s): Returns the first character that appears exactly once in the string s. If no such character exists, returns an underscore ('_'). char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first unique character for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Write a python function to add all the digits of a number until the result is a single digit. This is known as the digital root of a number. For example, the digital root of 16 is 1 + 6 = 7. If the result is not a single digit, keep summing the digits until a single digit is obtained.","solution":"def digital_root(n): Returns the digital root of a number. The digital root is obtained by continually summing the digits of a number until a single digit is achieved. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Write a python function to remove the nth occurrence of a character in a given string.","solution":"def remove_nth_occurrence(s, char, n): Removes the nth occurrence of a character from the given string. Parameters: s (str): The input string. char (str): The character to remove. n (int): The occurrence index (1-based) to remove. Returns: str: The string after removing the nth occurrence of the character. count = 0 new_string = [] for c in s: if c == char: count += 1 if count == n: continue new_string.append(c) return ''.join(new_string)"},{"question":"Write a python function to reverse a given string in-place without using any additional memory. Note that reversing a string in-place requires char swapping.","solution":"def reverse_string_in_place(s): Reverses a given string in-place by swapping characters. The string is a mutable sequence, represented as a list of characters. left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return s # Although not necessary, returning s for better testing"},{"question":"Write a python function to check if a number is divisible by both 3 and 5. If it is, return \\"Divisible by both\\"; otherwise, return \\"Not divisible by both\\".","solution":"def check_divisibility(n): Checks if the number n is divisible by both 3 and 5. if n % 3 == 0 and n % 5 == 0: return \\"Divisible by both\\" else: return \\"Not divisible by both\\""},{"question":"Write a python function to check whether the square of each digit of a number is less than the number itself.","solution":"def is_square_of_each_digit_less_than_number(n): Returns True if the square of each digit of the number n is less than n itself, otherwise returns False. str_n = str(n) for digit in str_n: digit = int(digit) if digit ** 2 >= n: return False return True"},{"question":"Write a python function to calculate the sum of all distinct pairs of elements from a list of integers.","solution":"def sum_of_distinct_pairs(nums): Returns the sum of all distinct pairs of elements from a list of integers. nums_set = set(nums) distinct_nums = list(nums_set) pair_sum = 0 for i in range(len(distinct_nums)): for j in range(i + 1, len(distinct_nums)): pair_sum += distinct_nums[i] + distinct_nums[j] return pair_sum"},{"question":"Write a python function to count the distinct words in a given text. The function should ignore case sensitivity (e.g., 'Hello' and 'hello' should be considered the same) and punctuation. The function should return the number of distinct words in the text.","solution":"import re def count_distinct_words(text): Returns the number of distinct words in the given text. Ignores case sensitivity and punctuation. # Convert text to lowercase text = text.lower() # Remove punctuation using regex text = re.sub(r'[^ws]', '', text) # Split text into words words = text.split() # Use a set to count distinct words distinct_words = set(words) return len(distinct_words)"},{"question":"Write a python function to take a list of strings and return a new list with all the strings reversed. You should use a list comprehension and not use any inbuilt reversing functions.","solution":"def reverse_strings(string_list): Takes a list of strings and returns a new list with all the strings reversed. :param string_list: List of strings :return: List of strings with each string reversed return [s[::-1] for s in string_list]"},{"question":"Write a python function to create the odd magic square of a given size, where \`n\` is a positive odd integer. The magic square is an \`n x n\` matrix where the sum of the numbers in each row, each column, and both main diagonals are all equal.","solution":"def create_odd_magic_square(n): Creates an n x n odd magic square. Args: - n (int): The size of the magic square (must be a positive odd integer). Returns: - List[List[int]]: The n x n magic square. if n % 2 == 0: raise ValueError(\\"n must be an odd number\\") magic_square = [[0] * n for _ in range(n)] # Initialize position for 1 i, j = 0, n // 2 # One by one put all values in magic square num = 1 while num <= n**2: magic_square[i][j] = num num += 1 newi, newj = (i - 1) % n, (j + 1) % n if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return magic_square"},{"question":"Write a python function to convert the RGB color to its corresponding Hexadecimal representation. The RGB color model uses three numbers typically in the range of 0 to 255 to represent colors. The hexadecimal color model represents the same colors with six digits. Each digit varies in the range of 00 to FF.","solution":"def rgb_to_hex(r, g, b): Converts RGB values to Hexadecimal representation. Parameters: r (int): Red value, in range 0-255. g (int): Green value, in range 0-255. b (int): Blue value, in range 0-255. Returns: str: The hexadecimal color string. if not all(0 <= v <= 255 for v in (r, g, b)): raise ValueError(\\"RGB values must be in the range 0-255.\\") return f'#{r:02x}{g:02x}{b:02x}'.upper()"},{"question":"Write a python function to count the occurrences of each character in a given string. The function should return a dictionary where keys are characters and values are their frequencies.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the input string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to sort a given list of numbers in descending order.","solution":"def sort_descending(arr): Sorts a given list of numbers in descending order. Parameters: arr (list): List of numbers to be sorted Returns: list: Sorted list in descending order return sorted(arr, reverse=True)"},{"question":"Write a python function to reverse a string without using slicing or loop. Here's an example input \`Hello, World!\`, and the expected output is \`!dlroW ,olleH\`.","solution":"def reverse_string(string): Returns the reversed string without using slicing or loop. if string == \\"\\": return string else: # Recursively call the function and append the first character at the end return reverse_string(string[1:]) + string[0]"},{"question":"Write a python function to find the maximum element in a list of numbers. The function should return the maximum element found, and if the list is empty, it should return \`None\`. Additionally, please handle exceptions to ensure the function can gracefully handle non-numeric elements in the list.","solution":"def find_maximum(numbers): Returns the maximum element in the list 'numbers'. If the list is empty, returns None. If the list contains non-numeric elements, gracefully handles them by ignoring them. if not numbers: return None max_number = None for num in numbers: try: num = float(num) # Attempt to convert to float to handle numeric strings if max_number is None or num > max_number: max_number = num except ValueError: # Ignore non-numeric elements continue return max_number"},{"question":"Write a python function to sort a list of string tuples by the length of the second item in each tuple.","solution":"def sort_by_second_length(tuples_list): Sort a list of string tuples by the length of the second item in each tuple. :param tuples_list: List of tuples where each tuple contains two strings. :return: List of tuples sorted by the length of the second item. return sorted(tuples_list, key=lambda x: len(x[1]))"},{"question":"Write a python function to reverse a list of integers in place. In other words, the original list should be modified to have its elements in reverse order, without returning a new list.","solution":"def reverse_list_in_place(lst): Reverses the list of integers in place. Parameters: lst (list): List of integers to be reversed. Returns: None: The list is modified in place. left = 0 right = len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to count the number of palindromes in a given string. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"import re def count_palindromes(s): Returns the number of palindromic words in the given string. # Normalize the input string normalized_str = re.sub(r'[^A-Za-z0-9]+', ' ', s).lower().strip() words = normalized_str.split() def is_palindrome(word): return word == word[::-1] count = 0 for word in words: if is_palindrome(word): count += 1 return count"},{"question":"Write a python function to convert a list of tuples where each tuple contains a key and a value, into a dictionary.","solution":"def list_of_tuples_to_dict(list_of_tuples): Converts a list of tuples, where each tuple contains a key and a value, into a dictionary. return dict(list_of_tuples)"},{"question":"Write a python function to check if a given string has all unique characters. There is a catch though, you regards 'a' and 'A' as the same character, while the original alphabet size is 26.","solution":"def has_all_unique_chars(s): Check if the given string has all unique characters (case-insensitive). 'a' and 'A' are regarded as the same character. Args: - s (str): the input string Returns: - bool: True if all characters are unique, False otherwise seen_chars = set() for char in s.lower(): if char in seen_chars: return False seen_chars.add(char) return True"},{"question":"Write a python function to reverse the elements of a given list without modifying the original list. Use slicing or any other Pythonic method available.","solution":"def reverse_list(input_list): Returns a new list that is the reverse of the input_list without modifying the original list. return input_list[::-1]"},{"question":"Write a python function to find the lexicographically smallest string by replacing some character in s such that it is a valid palindrome. A character can be replaced only once. If no such replacement can make it a palindrome, return the lexicographically smallest string possible.","solution":"def make_smallest_palindrome(s): Finds the lexicographically smallest string by replacing some characters in s such that it is a valid palindrome. A character can be replaced only once. If no such replacement can make it a palindrome, return the lexicographically smallest string possible. s_list = list(s) n = len(s_list) for i in range(n // 2): j = n - i - 1 if s_list[i] != s_list[j]: if s_list[i] < s_list[j]: s_list[j] = s_list[i] else: s_list[i] = s_list[j] return \\"\\".join(s_list)"},{"question":"Write a python function to create a subclass of the built-in \`list\` class. This subclass should have a method \`my_sum\` that calculates the sum of elements in the list that are greater than zero. Additionally, provide an example of how to use this subclass.","solution":"class MyList(list): def my_sum(self): Returns the sum of elements in the list that are greater than zero. return sum(x for x in self if x > 0) # Example usage: # lst = MyList([1, -2, 3, 4, -5]) # print(lst.my_sum()) # Output should be 8"},{"question":"Write a python function to find the most frequently occurring word in a string. If there is a tie, return all the words with the maximum frequency. How can you do it in Python?","solution":"from collections import Counter def most_frequent_words(text): Finds the most frequently occurring word(s) in the string. If there is a tie, returns all the words with the maximum frequency. words = text.split() word_counts = Counter(words) max_frequency = max(word_counts.values(), default=0) most_frequent = [word for word, count in word_counts.items() if count == max_frequency] return most_frequent"},{"question":"Write a python function to find the XOR of elements in a list.","solution":"def xor_list(lst): Returns the XOR of all elements in the list. Parameters: lst (list): List of integers. Returns: int: Result of XOR of all elements in the list. result = 0 for num in lst: result ^= num return result"},{"question":"Write a python function to return the subarrays that sum up to a specified target.","solution":"def subarrays_with_sum(arr, target): Returns a list of subarrays where the sum of the elements equals the target. Parameters: arr (list of int): The array. target (int): The target sum. Returns: list of list of int: A list containing subarrays which sum to the target. result = [] for i in range(len(arr)): current_sum = 0 subarray = [] for j in range(i, len(arr)): current_sum += arr[j] subarray.append(arr[j]) if current_sum == target: result.append(subarray.copy()) break return result"},{"question":"Write a python function to find all occurrences of a substring within a given string, ignoring case sensitivity. Also, count the number of times the substring occurs. Print the occurrences and their index positions.","solution":"def find_all_occurrences(text, substring): Returns a tuple containing the count of occurrences of the substring within the text and a list of index positions where the substring occurs. text_lower = text.lower() substring_lower = substring.lower() start = 0 occurrences = [] while start < len(text_lower): pos = text_lower.find(substring_lower, start) if pos == -1: break occurrences.append(pos) start = pos + 1 return len(occurrences), occurrences # Example usage if __name__ == \\"__main__\\": text = \\"Hello, hello, HELLO, HeLlo\\" substring = \\"hello\\" count, positions = find_all_occurrences(text, substring) print(f\\"Occurrences: {count}\\") print(f\\"Positions: {positions}\\")"},{"question":"Write a python function to accept the user's name and age as arguments, and then print a message stating their first name, last name, and age.","solution":"def person_info(first_name, last_name, age): Accepts the user's first name, last name, and age as arguments, and returns a message stating their first name, last name, and age. message = f\\"First Name: {first_name}, Last Name: {last_name}, Age: {age}\\" return message"},{"question":"Write a python function to solve the problem where you need to find the number of paths from the top-left corner to the bottom-right corner of a given grid, where you can only move either down or right at any point in time, and some cells are blocked.","solution":"def unique_paths_with_obstacles(obstacle_grid): Returns the number of unique paths from the top-left to the bottom-right corner of a grid with obstacles. You can only move right or down. Parameters: obstacle_grid (List[List[int]]): 2D list representing the grid where 1 represents an obstacle and 0 represents a free cell. Returns: int: number of unique paths if not obstacle_grid or obstacle_grid[0][0] == 1 or obstacle_grid[-1][-1] == 1: return 0 m, n = len(obstacle_grid), len(obstacle_grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if obstacle_grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[-1][-1]"},{"question":"Write a python function to find the minimum number in a sorted and rotated array. A sorted and rotated array is an array that is first sorted in ascending order and then rotated at some pivot. For example, [3, 4, 5, 1, 2] is a sorted and rotated array with the pivot at index 2.","solution":"def find_min_in_rotated_array(arr): Find the minimum number in a sorted and rotated array. Parameters: arr (list): A sorted and rotated array. Returns: int: The minimum number in the array. if not arr: raise ValueError(\\"Array cannot be empty\\") low, high = 0, len(arr) - 1 # If the array is not rotated (Sub-array from start less than sub-array from end) if arr[low] < arr[high]: return arr[low] while low < high: mid = (low + high) // 2 # Check if mid itself is the minimum element if arr[mid] > arr[high]: low = mid + 1 else: high = mid return arr[low]"},{"question":"Write a python function to find the length of the longest subarray with at most one distinct value.","solution":"def longest_subarray_with_one_distinct(arr): Returns the length of the longest subarray with at most one distinct value. if not arr: return 0 max_length = 0 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a python function to convert a binary number to its octal equivalent without using any conversion methods like int() or oct(). The function should take a binary string as its input and return a string that represents the octal equivalent.","solution":"def binary_to_octal(binary_str): Converts a binary number (given as a string) to its octal equivalent (as a string). # Dictionary to map from binary (3 bits) to octal binary_to_octal_map = { '000': '0', '001': '1', '010': '2', '011': '3', '100': '4', '101': '5', '110': '6', '111': '7' } # Pad the binary string with leading zeros to make its length a multiple of 3 padding = (3 - len(binary_str) % 3) % 3 binary_str = '0' * padding + binary_str octal_str = '' # Process each group of 3 binary digits for i in range(0, len(binary_str), 3): octal_digit = binary_to_octal_map[binary_str[i:i+3]] octal_str += octal_digit # Remove leading zeros from the result return octal_str.lstrip('0') or '0'"},{"question":"Write a python function to solve a given problem. However, the problem is not specified in the question. Please provide a clear and concise problem statement and the solution to it.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Args: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lower case filtered_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Write a python function to find the number of lines in a text file. The function should take the file path as an argument and return the number of lines.","solution":"def count_lines_in_file(file_path): Returns the number of lines in the given text file. :param file_path: Path to the text file. :return: Number of lines in the file. with open(file_path, 'r') as file: return sum(1 for _ in file)"},{"question":"Write a python function to reverse the letters of a string.","solution":"def reverse_string(s): Returns the given string reversed. return s[::-1]"},{"question":"Write a python function to find the indices of two numbers in an array of integers such that they add up to a specific target. The function should return these indices. If no such numbers exist, return an empty list.","solution":"def find_two_sum_indices(arr, target): Returns the indices of two numbers in an array that add up to a specific target. If no such numbers exist, returns an empty list. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return []"},{"question":"Write a python function to find the frequency of each character in a given string and store the result in a dictionary where the keys are the characters and the values are their frequencies. You should ignore spaces and consider uppercase and lowercase characters as distinct.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. Spaces are ignored and uppercase and lowercase characters are considered distinct. frequency = {} for char in s: if char != ' ': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a python function to find the maximum and minimum value in a list, and return them as a tuple. If the list is empty, return None.","solution":"def find_max_min(lst): Returns a tuple with the maximum and minimum value in the list. If the list is empty, returns None. if not lst: return None max_val = max(lst) min_val = min(lst) return (max_val, min_val)"},{"question":"Write a python function to check if a binary tree is symmetric (mirrored around its center).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root: TreeNode) -> bool: Checks if a binary tree is symmetric (mirrored around its center). def is_mirror(tree1: TreeNode, tree2: TreeNode) -> bool: if not tree1 and not tree2: return True if not tree1 or not tree2: return False return (tree1.val == tree2.val) and is_mirror(tree1.left, tree2.right) and is_mirror(tree1.right, tree2.left) return is_mirror(root, root)"},{"question":"Write a python function to calculate the sum of all unique elements in a given list. Unique elements are those that appear exactly once in the list.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in the given list. Args: lst (list): List of elements. Returns: int: Sum of unique elements. from collections import Counter element_counts = Counter(lst) return sum(element for element, count in element_counts.items() if count == 1)"},{"question":"Write a python function to count the number of substrings in a given string where all characters are lowercase.","solution":"def count_lowercase_substrings(s): Returns the count of substrings in the given string where all characters are lowercase. n = len(s) count = 0 for i in range(n): for j in range(i, n): if s[i:j+1].islower(): count += 1 return count"},{"question":"Write a python function to sort a linked list using Bubble Sort and return the sorted linked list. The function should use the Bubble Sort algorithm to sort the linked list. The sorted list should be returned with the smallest value at the head.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def bubble_sort_linked_list(head): if not head: return None # Bubble Sort algorithm for linked list swapped = True while swapped: current = head swapped = False while current.next: if current.val > current.next.val: current.val, current.next.val = current.next.val, current.val swapped = True current = current.next return head # Helper function to create a linked list from a list of values def create_linked_list(values): if not values: return None head = ListNode(values[0]) current = head for value in values[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert a linked list to a list of values def linked_list_to_list(head): values = [] current = head while current: values.append(current.val) current = current.next return values"},{"question":"Write a python function to find the maximum sum of a continuous subarray within a given array. This is known as the \\"Maximum Subarray Problem.\\"","solution":"def max_subarray_sum(arr): Returns the maximum sum of a continuous subarray within the given array. Uses Kadane's algorithm. :param arr: List of integers :return: Integer representing the maximum sum if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to determine if a given list of strings is a permutation of a palindrome. In a permutation of a palindrome, at most one character can have an odd count, and all other characters must have even counts. The function should return True if the list can form a palindrome permutation, and False otherwise.","solution":"def can_form_palindrome_permutation(strings): Determines if a given list of strings can form a permutation of a palindrome. Args: strings (list): A list of strings. Returns: bool: True if the list can form a permutation of a palindrome, False otherwise. from collections import Counter # Combine all strings into one concatenated string all_characters = \\"\\".join(strings) # Create a frequency count of all characters char_count = Counter(all_characters) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be a palindrome permutation, there must be at most one character with an odd frequency return odd_count <= 1"},{"question":"Write a python function to print all the odd numbers from 0 to n where n is a positive integer.","solution":"def print_odd_numbers(n): Print all the odd numbers from 0 to n (inclusive). for i in range(n + 1): if i % 2 != 0: print(i)"},{"question":"Write a python function to calculate a factorial of a number using recursion. Given a non-negative integer 'n', return the factorial of 'n'.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. # Base case: factorial of 0 or 1 is 1 if n == 0 or n == 1: return 1 # Recursive case: n * factorial of (n-1) else: return n * factorial(n-1)"},{"question":"Write a python function to print a right-angled triangle with stars. The height of the triangle should be user-defined.","solution":"def print_right_angled_triangle(height): Prints a right-angled triangle with stars (*) where the height of the triangle is user-defined. Parameters: height (int): The height of the triangle. for i in range(1, height + 1): print('*' * i)"},{"question":"Write a python function to solve the FizzBuzz problem where for multiples of three print \\"Fizz\\", for multiples of five print \\"Buzz\\", and for multiples of both three and five print \\"FizzBuzz\\". For numbers that are not multiples of three or five, print the number itself. The function should take an integer as input and return a list of strings according to the FizzBuzz pattern up to that integer.","solution":"def fizz_buzz(n): Returns a list of strings with the FizzBuzz pattern up to the integer n. - \\"Fizz\\" for multiples of three, - \\"Buzz\\" for multiples of five, - \\"FizzBuzz\\" for multiples of both three and five, - The number itself for numbers that are not multiples of three or five. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a python function to remove all duplicate elements from a list, keeping only the first occurrence of each element. The order should be maintained.","solution":"def remove_duplicates(lst): Removes all duplicate elements from the list, keeping only the first occurrence of each element. The order of elements is maintained. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to reverse the order of words in a string, but keep the words in their original case and punctuation.","solution":"def reverse_words_order(sentence): Reverses the order of words in a string while preserving their original case and punctuation. Parameters: sentence (str): The input string to reverse the word order of. Returns: str: The string with the word order reversed. words = sentence.split() reversed_words = \\" \\".join(reversed(words)) return reversed_words"},{"question":"Write a python function to generate all unique combinations of k numbers from a given array of n numbers. The solution set must not contain duplicate combinations.","solution":"from itertools import combinations def unique_combinations(arr, k): Generate all unique combinations of k numbers from a given array. Parameters: arr (list): List of n numbers. k (int): Number of elements in each combination. Returns: list of tuples: List containing all unique combinations. return list(set(combinations(arr, k)))"},{"question":"Write a python function to remove duplicates from an array of integers and return the new array that contains only the unique numbers. The function should also return the count of unique numbers.","solution":"def remove_duplicates(arr): Removes duplicates from an array and returns the new array with unique numbers and the count of unique numbers. Parameters: arr (list): The input array containing integers. Returns: tuple: A tuple containing the list of unique numbers and the count of unique numbers. unique_numbers = list(set(arr)) count = len(unique_numbers) return unique_numbers, count"},{"question":"Write a python function to find the maximum and minimum sum possible using a contiguous subsequence of numbers from an array.","solution":"def max_min_subarray_sum(arr): Returns the maximum and minimum sum possible using a contiguous subsequence of numbers from an array. if not arr: return 0, 0 max_current = max_global = arr[0] min_current = min_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) min_current = min(num, min_current + num) min_global = min(min_global, min_current) return max_global, min_global"},{"question":"Write a python function to calculate the distance between two points in a 2D space. The function should take four arguments: x1, y1, x2, and y2.","solution":"import math def calculate_distance(x1, y1, x2, y2): Returns the distance between two points (x1, y1) and (x2, y2) in 2D space. return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)"},{"question":"Write a python function to find the prime factors of a number n.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. factors = [] # Handle the number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point, so a skip of 2 (i.e i = i + 2) can be used for i in range(3, int(n**0.5) + 1, 2): # While i divides n, append i and divide n while n % i == 0: factors.append(i) n = n // i # This condition is to check if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a python function to remove duplicates from an array while keeping the order of elements. How would you test this function with a list of integers?","solution":"def remove_duplicates(arr): Removes duplicates from an array while keeping the order of elements. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to solve the LeetCode problem of finding the maximum depth of a binary tree.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of a binary tree. if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to print the current date and time in a specific format.","solution":"from datetime import datetime def current_date_time(): Returns the current date and time in the format 'YYYY-MM-DD HH:MM:SS'. return datetime.now().strftime('%Y-%m-%d %H:%M:%S')"},{"question":"Write a python function to reverse a list without using any built-in functions like \`reverse()\`, \`[::-1]\`, etc. You should only use basic Python constructs like loops and conditionals.","solution":"def reverse_list(input_list): Reverses the given list without using built-in reverse methods. reversed_list = [] for i in range(len(input_list) - 1, -1, -1): reversed_list.append(input_list[i]) return reversed_list"},{"question":"Write a python function to calculate the sum of all numbers in a list that are greater than a specified threshold. The function should also return the average of these numbers.","solution":"def sum_and_average_above_threshold(numbers, threshold): Returns the sum and average of all numbers in the list that are greater than the specified threshold. filtered_numbers = [num for num in numbers if num > threshold] total_sum = sum(filtered_numbers) count = len(filtered_numbers) average = total_sum / count if count > 0 else 0 return total_sum, average"},{"question":"Write a python function to generate the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first 10 Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, and 34. Write a function to return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence to return. Returns: int: The nth Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion with memoization to improve efficiency. How would you implement this function, and can you explain the concept of memoization?","solution":"def fibonacci(n, memo={}): Calculate the nth Fibonacci number using recursion with memoization. :param n: The index n of the Fibonacci sequence. :param memo: A dictionary to store computed Fibonacci values. :return: The nth Fibonacci number. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to find the depth of the deepest node and the node with the deepest depth in a binary tree. If there are multiple nodes at the maximum depth, return the value of the leftmost node. If the tree is empty, return None for both values.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_deepest_node(root): if not root: return None, None queue = [(root, 0)] deepest_node = root max_depth = 0 while queue: current_node, depth = queue.pop(0) if depth > max_depth: max_depth = depth deepest_node = current_node if current_node.left: queue.append((current_node.left, depth + 1)) if current_node.right: queue.append((current_node.right, depth + 1)) return max_depth, deepest_node.value"},{"question":"Write a python function to identify the most common word in a given text.","solution":"from collections import Counter import re def most_common_word(text): Returns the most common word in the given text. # Removing punctuation and converting to lowercase words = re.findall(r'bw+b', text.lower()) word_counts = Counter(words) most_common = word_counts.most_common(1) return most_common[0][0] if most_common else None"},{"question":"Write a python function to return \`True\` if the given list of integers is monotonic (either entirely non-increasing or non-decreasing), otherwise return \`False\`.","solution":"def is_monotonic(nums): Returns True if the list of integers is monotonic (either entirely non-increasing or non-decreasing), otherwise returns False. if not nums: return True is_increasing = all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1)) is_decreasing = all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1)) return is_increasing or is_decreasing"},{"question":"Write a python function to generate a random sample without replacement from a list and return the sample.","solution":"import random def random_sample_without_replacement(data, sample_size): Returns a random sample without replacement from the given list. :param data: List of items to sample from :param sample_size: Number of items to sample :return: A list containing the sampled items :raises ValueError: If sample_size is greater than the number of available items in data if sample_size > len(data): raise ValueError(\\"Sample size cannot be greater than the number of items in the input list\\") return random.sample(data, sample_size)"},{"question":"Write a python function to generate the first n Fibonacci numbers and return them as a list. The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first 10Fibonacci numbers are [0, 1, 1, 2, 3, 5, 8, 13, 21, 34].","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers and returns them as a list. if n <= 0: return [] fibonacci_sequence = [0] if n > 1: fibonacci_sequence.append(1) for i in range(2, n): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"Write a python function to reverse a string, where the function should also handle cases where the string contains special characters and numbers. For example, input should be able to handle \\"hello123!\\".","solution":"def reverse_string(s): Returns the reverse of the input string s, preserving all characters including special characters and numbers. return s[::-1]"},{"question":"Write a python function to sort a list of integers using the heap sort algorithm.","solution":"def heap_sort(arr): Sorts a list of integers using the heap sort algorithm. def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[largest] < arr[left]: largest = left if right < n and arr[largest] < arr[right]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) n = len(arr) for i in range(n//2 - 1, -1, -1): heapify(arr, n, i) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) return arr"},{"question":"Write a python function to implement the quick sort algorithm. Quick sort is a divide and conquer algorithm where the array is partitioned into sub-arrays based on a pivot value. The pivot value is chosen from the array and the array is partitioned around the pivot. Elements less than the pivot are placed before it, and elements greater are placed after it. The sub-arrays are then recursively sorted.","solution":"def quick_sort(arr): Sorts an array using the quick sort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a python function to generate all possible permutations of a given list. The function should use a backtracking algorithm to achieve this.","solution":"def permute(nums): Generates all possible permutations of a given list using backtracking. :param nums: List of elements to permute :return: A list of all permutations def backtrack(start, end): if start == end: result.append(nums[:]) for i in range(start, end): nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1, end) nums[start], nums[i] = nums[i], nums[start] result = [] backtrack(0, len(nums)) return result"},{"question":"Write a python function to find the longest common prefix in a string array \`strs[]\` of size \`n\`. If there is no common prefix, return an empty string.","solution":"def longest_common_prefix(strs): Returns the longest common prefix in a string array \`strs\`. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Sort the array strs.sort() # The first and the last elements will be most dissimilar first = strs[0] last = strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Write a python function to find the maximum number of unique integers in any contiguous subarray of length \`k\`.","solution":"def max_unique_integers(arr, k): Finds the maximum number of unique integers in any contiguous subarray of length k. Parameters: arr (list of int): The list of integers. k (int): The length of the subarray. Returns: int: The maximum number of unique integers in any contiguous subarray of length k. if k > len(arr): raise ValueError(\\"k should not be greater than the length of the array.\\") max_unique_count = 0 current_window = {} unique_count = 0 for i in range(len(arr)): # Add the current element to the window if arr[i] in current_window: current_window[arr[i]] += 1 else: current_window[arr[i]] = 1 unique_count += 1 # Remove the element that goes out of the window if i >= k: if current_window[arr[i - k]] == 1: del current_window[arr[i - k]] unique_count -= 1 else: current_window[arr[i - k]] -= 1 # Update the max unique count if i >= k - 1: max_unique_count = max(max_unique_count, unique_count) return max_unique_count"},{"question":"Write a python function to check whether all the characters in a given string are digits.","solution":"def all_digits(s): Returns True if all characters in the string are digits, otherwise False. return s.isdigit()"},{"question":"Write a python function to calculate the sum of the squares of the first 10 natural numbers and then store the result in a variable named \`sum_of_squares\`.","solution":"def calculate_sum_of_squares(): Returns the sum of the squares of the first 10 natural numbers. return sum(i**2 for i in range(1, 11)) # Storing the result in a variable named sum_of_squares sum_of_squares = calculate_sum_of_squares()"},{"question":"Write a python function to find the number of ways to arrange \`n\` distinct items in a given string \`s\`. The arrangement should be such that the order of items in the string is preserved, but the items themselves can be swapped. For example, if the string is \\"abc\\", the arrangements could be \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". How can I implement this in Python?","solution":"def count_arrangements(n, s): Returns the number of ways to arrange \`n\` distinct items in a given string \`s\`. The order of items in the string \`s\` should be preserved. # Create a set of the distinct characters in s distinct_chars = set(s) # Calculate the total number of distinct characters num_distinct_chars = len(distinct_chars) # If the length of s is greater than n, then there are no such arrangements if len(s) > n: return 0 # Calculate the number of ways to pick len(s) items from n items and arrange them from math import comb, factorial return comb(n, len(s)) * factorial(len(s))"},{"question":"Write a python function to reverse the order of elements in a list using a stack.","solution":"def reverse_list_using_stack(lst): Reverses the order of elements in a list using a stack. Parameters: lst (list): The list to reverse. Returns: list: The reversed list. stack = [] # Push all elements onto the stack for item in lst: stack.append(item) # Pop all elements to get them in reverse order reversed_list = [] while stack: reversed_list.append(stack.pop()) return reversed_list"},{"question":"Write a python function to reverse an array without using any built-in functions or additional data structures. You are not allowed to create a new list, reverse the list in place.","solution":"def reverse_array(arr): Reverses the given array in place. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a python function to calculate the sum of all even numbers in a list using list comprehension and the sum function.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the list \`numbers\`. return sum([num for num in numbers if num % 2 == 0])"},{"question":"Write a python function to calculate the total price of items in a shopping cart, given the price per item and the quantities of items in the cart.","solution":"def total_price(cart): Calculate the total price of items in a shopping cart. :param cart: A dictionary where the key is the item name (string), the value is a tuple containing (price per item, quantity). :return: Total price of all items in the cart. total = 0 for price, quantity in cart.values(): total += price * quantity return total"},{"question":"Write a python function to count the total number of vowels in a string. How can this function be used to count the vowels in the sentence \\"The quick brown fox jumps over the lazy dog\\".","solution":"def count_vowels(s): Returns the number of vowels in the given string s. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels) # Example usage sentence = \\"The quick brown fox jumps over the lazy dog\\" vowel_count = count_vowels(sentence) print(f\\"Number of vowels in the sentence: {vowel_count}\\")"},{"question":"Write a python function to check if a string contains only alphanumeric characters. Loop through the string and check each character.","solution":"def is_alphanumeric(s): Checks if the given string contains only alphanumeric characters. Args: s (str): The input string to check. Returns: bool: True if the string contains only alphanumeric characters, False otherwise. for char in s: if not char.isalnum(): return False return True"},{"question":"Write a python function to implement the Shell Sort algorithm with an explanation of how it works.","solution":"def shell_sort(arr): Implements the Shell Sort algorithm on the provided list 'arr'. Shell Sort is an in-place comparison sort. It generalizes an exchanging sort (such as insertion or bubble sort) by allowing the comparison and exchange of elements that are far apart. The function starts by sorting elements that are far apart and progressively reduces the gap between elements to be compared. Parameters: arr (list): The list of elements to be sorted. Returns: list: The sorted list. n = len(arr) gap = n // 2 # Start with a large gap, then reduce the gap while gap > 0: for i in range(gap, n): temp = arr[i] j = i # Shift earlier gap-sorted elements up until the correct location for arr[i] is found while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap] j -= gap arr[j] = temp gap //= 2 return arr"},{"question":"Write a python function to find the maximum product of two distinct elements in an array. The function should handle arrays with both positive and negative numbers, and ensure that the elements are distinct. The function should return the maximum product.","solution":"def max_product(arr): Returns the maximum product of two distinct elements in an array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") max1 = float('-inf') max2 = float('-inf') min1 = float('inf') min2 = float('inf') for n in arr: if n > max1: max2 = max1 max1 = n elif n > max2: max2 = n if n < min1: min2 = min1 min1 = n elif n < min2: min2 = n return max(max1 * max2, min1 * min2)"},{"question":"Write a python function to recursively convert all the characters in a nested list of strings to lowercase.","solution":"def to_lowercase_nested_list(nested_list): Recursively converts all characters in a nested list of strings to lowercase. Args: nested_list: list of lists or strings or both. Returns: list: A new list with all strings converted to lowercase. result = [] for element in nested_list: if isinstance(element, list): result.append(to_lowercase_nested_list(element)) elif isinstance(element, str): result.append(element.lower()) else: result.append(element) return result"},{"question":"Write a python function to sort a list of integers in ascending order. The function should be named \`sort_list\` and take a single argument, a list of integers.","solution":"def sort_list(int_list): Sorts a list of integers in ascending order. Parameters: int_list (list): A list of integers to be sorted. Returns: list: A new list containing the sorted integers. return sorted(int_list)"},{"question":"Write a python function to take an integer as an argument and return a list of the ASCII values of the characters in the integer when it is converted to a string.","solution":"def integer_to_ascii_list(n): Takes an integer n as an argument and returns a list of the ASCII values of the characters in the integer when it is converted to a string. return [ord(char) for char in str(n)]"},{"question":"Write a python function to create a binary tree. It should take as input a list of integers and create a binary tree where the list's first element is the root, second and third elements are the left and right children of the root, and so on, following the standard binary tree rules (left child first, then right child).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def create_binary_tree(values): Create a binary tree from a list of integers. Args: values (list): List of integers to create the binary tree from. Returns: TreeNode: Root node of the created binary tree. if not values: return None nodes = [TreeNode(value) for value in values] for i in range(len(values)): left_index = 2 * i + 1 right_index = 2 * i + 2 if left_index < len(values): nodes[i].left = nodes[left_index] if right_index < len(values): nodes[i].right = nodes[right_index] return nodes[0]"},{"question":"Write a python function to find the sum of all perfect squares up to a given number n. A perfect square is an integer that is the square of an integer.","solution":"def sum_of_perfect_squares(n): Returns the sum of all perfect squares up to a given number n. :param n: Upper limit number :type n: int :return: Sum of all perfect squares up to n :rtype: int sum_squares = 0 i = 1 while i * i <= n: sum_squares += i * i i += 1 return sum_squares"},{"question":"Write a python function to calculate the mean of a list of numbers. Prove its correctness using a test case.","solution":"def calculate_mean(numbers): Returns the mean of a list of numbers. If the list is empty, returns None. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Write a python function to calculate and return the factorial of a number. The function should handle edge cases and invalid inputs.","solution":"def factorial(n): Returns the factorial of a given number n. If n is not a non-negative integer, returns None. if not isinstance(n, int) or n < 0: return None if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. Also, make sure to include error checking to ensure the input is a non-negative integer.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Ensures the input is a non-negative integer. Parameters: n (int): the position in the Fibonacci sequence to retrieve. Returns: int: the nth Fibonacci number if not isinstance(n, int): raise TypeError(\\"Input must be a non-negative integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a python function to find the length of the longest consecutive elements sequence in an unsorted array of integers. The sequence does not need to be contiguous.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in an unsorted array of integers. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a python function to check if a given string contains at least one number.","solution":"def contains_number(s): Checks if the given string contains at least one number. Args: s (str): The input string. Returns: bool: True if the string contains at least one number, False otherwise. return any(char.isdigit() for char in s)"},{"question":"Write a python function to sort a list of tuples based on the second item in each tuple. The function should take a list of tuples as input and return the sorted list.","solution":"def sort_tuples_by_second_item(tuples_list): Sorts a list of tuples based on the second item in each tuple. Parameters: tuples_list (list of tuples): The list of tuples to be sorted. Returns: list of tuples: The sorted list of tuples. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to find the product of all elements in a list. If the list is empty, return 1.","solution":"def product_of_list(lst): Returns the product of all elements in the list. If the list is empty, returns 1. if not lst: return 1 product = 1 for num in lst: product *= num return product"},{"question":"Write a python function to check if the sum of the squares of the first N natural numbers is equal to the square of the sum of those N natural numbers. In other words, is the equation m1^2 + m2^2 + ... + mn^2 = (m1 + m2 + ... + mn)^2 true for the first N natural numbers?","solution":"def check_sum_of_squares_equality(n): Checks if the sum of the squares of the first N natural numbers is equal to the square of the sum of those N natural numbers. sum_of_squares = sum(i**2 for i in range(1, n + 1)) square_of_sum = sum(range(1, n + 1)) ** 2 return sum_of_squares == square_of_sum"},{"question":"Write a python function to perform in-order tree traversal. In-order tree traversal visits nodes of a binary tree in a specific order: left subtree, root node, then right subtree. Your function should receive the root of a binary tree as its argument and return a list of the node values in the order they are visited.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def in_order_traversal(root): Returns the in-order traversal of a binary tree. :param root: TreeNode, the root of the binary tree :return: List of node values in in-order traversal order def helper(node, acc): if node: helper(node.left, acc) acc.append(node.val) helper(node.right, acc) result = [] helper(root, result) return result"},{"question":"Write a python function to find the nth Fibonacci number. The function should use an iterative approach.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for i in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a python function to print prime numbers within a given range s and t. The function should consider both inclusive start and end values.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_numbers_in_range(s, t): Returns a list of prime numbers within the given range [s, t]. return [num for num in range(s, t + 1) if is_prime(num)]"},{"question":"Write a python function to count all the prefixes of a given string that are present in the list of prefix strings.","solution":"def count_prefixes(word, prefixes): Counts the number of prefixes of the given word that are present in the list of prefix strings. Args: word (str): The input string for which to count prefixes. prefixes (list): A list of prefix strings. Returns: int: The number of prefixes that are a prefix of the input string. count = 0 for prefix in prefixes: if word.startswith(prefix): count += 1 return count"},{"question":"Write a python function to remove duplicate elements from a list using a for loop and without using any in-built function.","solution":"def remove_duplicates(lst): Removes duplicate elements from a list using a for loop and without using any in-built function. result = [] for element in lst: if element not in result: result.append(element) return result"},{"question":"Write a python function to check if a given list contains duplicate elements. If it does, the function should return the duplicate elements. If not, it should return an empty list.","solution":"def find_duplicates(lst): This function checks if a given list contains duplicate elements. It returns a list of duplicate elements if there are any, otherwise an empty list. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to find all prime numbers within a range given by two integers, \`start\` and \`end\`. The function should return a list of all prime numbers in this range, inclusive.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def find_primes_in_range(start, end): Returns a list of all prime numbers within a given range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to generate a list of all even numbers between 1 and 20 using a list comprehension.","solution":"def generate_even_numbers(): Generates a list of all even numbers between 1 and 20. return [i for i in range(1, 21) if i % 2 == 0]"},{"question":"Write a python function to determine if a given string \`s\` is a palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, number, or other sequences of characters which reads the same forward and backward (ignoring spaces, punctuation, and capitalization).","solution":"def is_palindrome(s): Determines if a given string s is a palindrome, considering only alphanumeric characters and ignoring cases. :param s: str - The input string to check if it's a palindrome. :return: bool - True if s is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is the same forwards and backwards return filtered_chars == filtered_chars[::-1] # Example usage: # print(is_palindrome(\\"A man, a plan, a canal: Panama\\")) # Output: True # print(is_palindrome(\\"race a car\\")) # Output: False"},{"question":"Write a python function to find the largest n-digit number expressible as the sum of the nth power of its digits.","solution":"def largest_n_digit_number(n): Returns the largest n-digit number expressible as the sum of the nth power of its digits. if n <= 0: return 0 max_digit = 9 upper_bound = max_digit ** n * n for num in range(upper_bound, 0, -1): if sum(int(digit) ** n for digit in str(num)) == num and 10**(n-1) <= num < 10**n: return num return 0"},{"question":"Write a python function to convert a binary string to an integer. A binary string consists of '0's and '1's. The function should handle both Python 2.x and Python 3.x versions.","solution":"def binary_to_integer(binary_str): Convert a binary string to an integer. Parameters: binary_str (str): A string consisting of '0's and '1's representing a binary number. Returns: int: The integer representation of the binary string. return int(binary_str, 2)"},{"question":"Write a python function to reverse the digits of a positive integer n without using string conversion, division, or modulus operators.","solution":"def reverse_digits(n): Reverses the digits of a positive integer n without using string conversion, division, or modulus operators. def helper(x, rev=0): if x == 0: return rev rev = rev * 10 + (x % 10) return helper(x // 10, rev) return helper(n)"},{"question":"Write a python function to return the Fibonacci sequence up to 'n' digits. The function should handle overflow exceptions and return the result as a string. For example, fib('10') should return the first 10 Fibonacci numbers as a string, each separated by commas.","solution":"def fib(n): Returns the Fibonacci sequence up to 'n' digits as a string, each separated by commas. Parameters: n (str): The length of the Fibonacci sequence to generate. Returns: str: A comma-separated string of Fibonacci numbers up to 'n' digits. try: num = int(n) if num <= 0: return \\"\\" # Initial Fibonacci sequence values fib_sequence = [0, 1] # Generate Fibonacci sequence for i in range(2, num): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) # Convert list of integers to string format result = ','.join(map(str, fib_sequence[:num])) return result except (ValueError, OverflowError): return \\"Invalid input: Please enter a valid non-negative integer.\\" # Example usage: # print(fib('10')) # Output: '0,1,1,2,3,5,8,13,21,34'"},{"question":"Write a python function to find the largest number less than or equal to N which is also an exact power of k.","solution":"def largest_power(N, k): Returns the largest number less than or equal to N which is also an exact power of k. if k <= 1: raise ValueError(\\"k must be greater than 1\\") power = 1 while power * k <= N: power *= k return power"},{"question":"Write a python function to print the factorial of all numbers from 1 to 5 (inclusive) using a loop.","solution":"def print_factorials(): Prints the factorial of numbers from 1 to 5 (inclusive). def factorial(n): if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) for i in range(1, 6): print(f\\"Factorial of {i}: {factorial(i)}\\")"},{"question":"Write a python function to check if a string is a palindrome or not. Write a program that takes string input from the user and checks whether the input string is a palindrome or not using function.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. # Remove whitespace and convert to lowercase for a case insensitive comparison cleaned_string = ''.join(s.split()).lower() return cleaned_string == cleaned_string[::-1]"},{"question":"Write a python function to implement a simple Caesar cipher. The function should take a string and an integer as input and return the encrypted string using the Caesar cipher method. The Caesar cipher method involves shifting each alphabetical character in the string by the specified number of positions in the alphabet. Non-alphabetical characters should remain unchanged.","solution":"def caesar_cipher(text, shift): Encrypts a given text using Caesar cipher with a specified shift. Parameters: text (str): The input text to be encrypted. shift (int): The number of positions by which to shift each alphabetical character. Returns: str: The encrypted text. result = [] for char in text: if char.isalpha(): start = ord('A') if char.isupper() else ord('a') new_char = chr(start + (ord(char) - start + shift) % 26) result.append(new_char) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to reverse a string. The function should be able to handle both strings with spaces and special characters. For example, if the input string is \\"hello world!\\", the output should be \\"!dlrow olleh\\".","solution":"def reverse_string(s): Given a string s, returns the string reversed. The function can handle strings with spaces and special characters. Args: s (str): input string Returns: str: reversed string return s[::-1]"},{"question":"Write a python function to implement insertion sort.","solution":"def insertion_sort(arr): Sorts an array using the Insertion Sort algorithm. Parameters: arr (list): List of elements to be sorted Returns: list: Sorted list of elements for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to reverse the string provided as input. The function should also handle cases where the input string could be empty or contain spaces.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to generate a list of Fibonacci numbers up to a given limit. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. For example, the sequence starts 0, 1, 1, 2, 3, 5, 8, 13, ... The function should take one argument, \`limit\`, which is the upper bound for the numbers in the sequence.","solution":"def generate_fibonacci(limit): Generates a list of Fibonacci numbers up to a given limit. :param limit: The upper bound for the Fibonacci numbers in the sequence. :return: A list of Fibonacci numbers up to the given limit. if limit < 0: return [] fibonacci_sequence = [] a, b = 0, 1 while a <= limit: fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Write a python function to remove duplicates from a string, preserving the order of the characters. You are not allowed to use any additional data structures except for primitive data types.","solution":"def remove_duplicates(s): Returns a string with duplicates removed, preserving the order of characters. result = \\"\\" seen = set() for char in s: if char not in seen: seen.add(char) result += char return result"},{"question":"Write a python function to find the bottom left value of a binary tree. The bottom left value is the value of the leftmost node at the lowest level of the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_bottom_left_value(root): Given the root of a binary tree, return the bottom left value. if not root: return None queue = [root] bottom_left_value = root.value while queue: current_node = queue.pop(0) if current_node.right: queue.append(current_node.right) if current_node.left: queue.append(current_node.left) bottom_left_value = current_node.value return bottom_left_value"},{"question":"Write a python function to check if a given string contains at least one uppercase and one lowercase letter.","solution":"def has_upper_and_lower(s): Check if the string contains at least one uppercase and one lowercase letter. has_upper = any(char.isupper() for char in s) has_lower = any(char.islower() for char in s) return has_upper and has_lower"},{"question":"Write a python function to find the number of occurrences of the substring \\"code\\" in a given string. The function should return the count of all occurrences, including overlapping ones.","solution":"def count_substring_occurrences(s, substring): Returns the number of occurrences of the substring in the given string, including overlapping occurrences. :param s: The input string in which to search. :param substring: The substring to search for. :return: The count of all occurrences of the substring in the string. count = 0 sub_len = len(substring) for i in range(len(s) - sub_len + 1): if s[i:i+sub_len] == substring: count += 1 return count"},{"question":"Write a python function to find the maximum of five numbers.","solution":"def max_of_five(a, b, c, d, e): Returns the maximum of five numbers. return max(a, b, c, d, e)"},{"question":"Write a python function to sort the elements of a given list in ascending order.","solution":"def sort_list(elements): Returns a new list containing the elements sorted in ascending order. return sorted(elements)"},{"question":"Write a python function to take a list of dictionaries and return the list of dictionaries with the maximum value for a specified key","solution":"def max_by_key(dicts, key): Given a list of dictionaries, return the dictionaries that have the maximum value for the specified key. :param dicts: List[Dict], list of dictionaries :param key: str, the key for which to find dictionaries with maximum value :return: List[Dict], list of dictionaries with the maximum value for the given key if not dicts: return [] max_value = max(d.get(key, float('-inf')) for d in dicts) return [d for d in dicts if d.get(key) == max_value]"},{"question":"Write a python function to solve a simple version of the \\"Bulls and Cows\\" game. In this simplified version, the game is played with two-digit numbers. The function should take two strings as input: the secret number and the guess. It should return a tuple (Bulls, Cows) where Bulls represent the number of correct digits in the correct positions, and Cows represent the number of correct digits in the wrong positions.","solution":"def bulls_and_cows(secret: str, guess: str): Determines the number of bulls and cows in a simple version of the Bulls and Cows game. Args: secret (str): The secret two-digit number as a string. guess (str): The guessed two-digit number as a string. Returns: tuple: A tuple containing the number of bulls and cows. bulls = sum(s == g for s, g in zip(secret, guess)) cows = sum(min(secret.count(d), guess.count(d)) for d in set(guess)) - bulls return (bulls, cows)"},{"question":"Write a python function to find and print numbers within a given range that are divisible by both 3 and 5.","solution":"def find_divisible_by_3_and_5(start, end): Returns a list of numbers within the specified range that are divisible by both 3 and 5. Parameters: start (int): Starting value of the range. end (int): Ending value of the range. Returns: List[int]: List containing numbers divisible by both 3 and 5. return [x for x in range(start, end + 1) if x % 3 == 0 and x % 5 == 0]"},{"question":"Write a python function to sort an array such that all the negative numbers are on the left, and all the positive numbers are on the right. The order of the numbers doesn't matter.","solution":"def sort_array(nums): Sorts an array such that all negative numbers are on the left, and all positive numbers are on the right. left = 0 right = len(nums) - 1 while left <= right: if nums[left] < 0: left += 1 elif nums[right] >= 0: right -= 1 else: nums[left], nums[right] = nums[right], nums[left] left += 1 right -= 1 return nums"},{"question":"Write a python function to read a csv file named \\"input.csv\\" and write the contents to a new file named \\"output.csv\\". The code should handle any file not found exceptions appropriately.","solution":"import csv import os def copy_csv(input_file, output_file): Copies the contents of input_file to output_file. Parameters: - input_file (str): The path to the input CSV file. - output_file (str): The path to the output CSV file. if not os.path.exists(input_file): raise FileNotFoundError(f\\"The file {input_file} does not exist.\\") with open(input_file, mode='r', newline='') as infile: reader = csv.reader(infile) with open(output_file, mode='w', newline='') as outfile: writer = csv.writer(outfile) for row in reader: writer.writerow(row)"},{"question":"Write a python function to count the frequency of each character in a string and return a dictionary with characters as keys and their frequencies as values. However, discard characters that are not alphabets from the counting process.","solution":"def count_char_frequencies(s): Returns a dictionary with characters as keys and their frequencies as values, including only alphabet characters. frequency = {} for char in s: if char.isalpha(): char = char.lower() # Count in a case-insensitive way frequency[char] = frequency.get(char, 0) + 1 return frequency"},{"question":"Write a python function to find the sum of a given number's steps until it reduced to a single digit. This process is known as digit sum or digital root. For example, for the number 39, the function should return 3 (3 + 9 = 12, 1 + 2 = 3).","solution":"def digit_sum(n): Returns the digital root of the given number n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Write a python function to remove duplicates from a list of lists without changing the order of elements. The function should return a new list of lists that contains only unique elements.","solution":"def remove_duplicates(list_of_lists): Removes duplicates from a list of lists without changing the order of elements. Returns a new list of lists that contains only unique elements. unique_lists = [] seen = set() for lst in list_of_lists: t = tuple(lst) if t not in seen: unique_lists.append(lst) seen.add(t) return unique_lists"},{"question":"Write a python function to check the data types and print them out based on a given nested dictionary. Your function should handle multiple levels of nesting and should also handle cases where non-dictionary items are present.","solution":"def print_data_types(data, indent=0): Recursively prints the data types of elements in a nested dictionary. Parameters: data (dict): The nested dictionary. indent (int): The current level of nesting, used for formatting the output. for key, value in data.items(): if isinstance(value, dict): print(\\" \\" * indent + f\\"{key}: dict\\") print_data_types(value, indent + 2) else: print(\\" \\" * indent + f\\"{key}: {type(value).__name__}\\") # Example usage #nested_dict = { # 'a': 1, # 'b': { # 'c': 'hello', # 'd': { # 'e': 3.14, # 'f': [1, 2, 3] # } # } #} #print_data_types(nested_dict)"},{"question":"Write a python function to reverse an integer and return the reversed integer. If reversing the integer causes it to overflow, return 0.","solution":"def reverse_integer(x): Reverses the given integer and returns the reversed integer. If reversing the integer causes it to overflow, return 0. sign = -1 if x < 0 else 1 x *= sign reversed_x = 0 while x != 0: reversed_x = reversed_x * 10 + x % 10 x = x // 10 reversed_x *= sign # Overflow checks (considering 32-bit signed integer range) if reversed_x < -2**31 or reversed_x > 2**31 - 1: return 0 return reversed_x"},{"question":"Write a python function to find the sum of three numbers.","solution":"def sum_of_three_numbers(a, b, c): Returns the sum of the three given numbers a, b, and c. return a + b + c"},{"question":"Write a python function to find the shortest word from a given string. You should ignore any punctuation and consider words to be sequences of characters separated by whitespace.","solution":"import string def find_shortest_word(sentence): Returns the shortest word in a given sentence, ignoring punctuation. # Remove punctuation using str.translate and str.maketrans translator = str.maketrans('', '', string.punctuation) sentence = sentence.translate(translator) # Split the sentence into words words = sentence.split() # Return the shortest word if not words: return \\"\\" return min(words, key=len)"},{"question":"Write a python function to calculate the sum of all even numbers in an array using recursion.","solution":"def sum_even_numbers(arr): Recursively calculates the sum of all even numbers in an array. :param arr: List of integers :return: Integer sum of all even numbers in the array if not arr: return 0 else: current = arr[0] if current % 2 == 0: return current + sum_even_numbers(arr[1:]) else: return sum_even_numbers(arr[1:])"},{"question":"Write a python function to find the minimum number of elements that must be removed from a given list of integers such that the sum of the remaining elements is maximized.","solution":"def min_removals_to_maximize_sum(arr): Returns the minimum number of elements that must be removed from the list such that the sum of the remaining elements is maximized. # Filter only positive numbers positive_numbers = [num for num in arr if num > 0] # Return the number of elements that were removed, i.e., the original length minus the length of the positive numbers return len(arr) - len(positive_numbers)"},{"question":"Write a python function to find the minimum number of steps required to reach the target position from a starting position in a 2D grid. The grid can contain obstacles represented by 1s and empty spaces represented by 0s. You can move to adjacent cells (up, down, left, right) but cannot move to obstacle cells. Use the Breadth-First Search (BFS) algorithm.","solution":"from collections import deque def min_steps_to_target(grid, start, target): Returns the minimum number of steps required to reach the target position from the start position in a 2D grid. Parameters: grid: List[List[int]] - 2D grid containing 0s (empty) and 1s (obstacles) start: Tuple[int, int] - Starting position target: Tuple[int, int] - Target position Returns: int: Minimum number of steps required to reach the target position, -1 if the target is unreachable. rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and grid[x][y] == 0 queue = deque([(start[0], start[1], 0)]) visited = set([(start[0], start[1])]) while queue: x, y, steps = queue.popleft() if (x, y) == target: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Write a python function to calculate the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. How can I write a function to calculate the nth Fibonacci number?","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the length of the last word in a given string. The string may contain trailing spaces.","solution":"def length_of_last_word(s): Finds the length of the last word in a given string, ignoring trailing spaces. Parameters: s (str): The input string Returns: int: The length of the last word s = s.strip() # Remove trailing spaces if not s: return 0 words = s.split() return len(words[-1])"},{"question":"Write a python function to find and return a new list with unique elements from the given list, maintaining their original order.","solution":"def unique_elements(lst): Returns a list of unique elements from the given list, maintaining their original order. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Write a python function to find the number of duplicate characters in a given string.","solution":"def count_duplicate_characters(s): Returns the number of duplicate characters in the given string. from collections import Counter counter = Counter(s) return sum(1 for count in counter.values() if count > 1)"},{"question":"Write a python function to detect cycles in an undirected graph using dfs. The graph is represented by a list of lists. Each element in the list represents a node in the graph and provides a list of its adjacent nodes.","solution":"def has_cycle(graph): Detects if there is a cycle in an undirected graph using DFS. The graph is represented as an adjacency list. :param graph: List[List[int]], adjacency list of the graph :return: bool, True if there is a cycle, False otherwise def dfs(node, parent): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor, node): return True elif neighbor != parent: return True return False visited = [False] * len(graph) for node in range(len(graph)): if not visited[node]: if dfs(node, -1): return True return False"},{"question":"Write a python function to generate a list of n random numbers between 0 and 1. You can use any built-in function to generate random numbers.","solution":"import random def generate_random_numbers(n): Generate a list of n random numbers between 0 and 1. :param n: Number of random numbers to generate :type n: int :return: List of n random numbers between 0 and 1 :rtype: list of float return [random.random() for _ in range(n)]"},{"question":"Write a python function to find the maximum sum of any continuous subarray of size k. The function should return the maximum sum found.","solution":"def max_sum_subarray(arr, k): This function returns the maximum sum of any continuous subarray of size k. Parameters: arr (list): List of integers k (int): Size of the subarray Returns: int: Maximum sum of the continuous subarray of size k if len(arr) < k: raise ValueError(\\"The array length must be at least as large as k.\\") # Initialize the maximum sum to the sum of first 'k' elements max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window across the array, updating the sums for i in range(k, len(arr)): current_sum = current_sum + arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to check if a list contains only primes","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def contains_only_primes(lst): Returns True if all elements in the list are prime numbers, else False. return all(is_prime(x) for x in lst)"},{"question":"Write a python function to print all prime numbers from 1 to n using the Sieve of Eratosthenes algorithm. The function should take a single integer parameter n and print all prime numbers less than or equal to n.","solution":"def sieve_of_eratosthenes(n): Prints all prime numbers from 1 to n using the Sieve of Eratosthenes algorithm. :param n: The upper limit (inclusive) for finding prime numbers if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] print(primes) return primes"},{"question":"Write a python function to sort an array of integers in ascending order using the selection sort algorithm.","solution":"def selection_sort(arr): Sorts an array of integers in ascending order using the selection sort algorithm. Parameters: arr (list of int): The list of integers to be sorted. Returns: list: The sorted list of integers. n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a python function to solve a 9x9 Sudoku puzzle. A Sudoku puzzle is a 9x9 grid, where each row, each column, and each of the nine 3x3 sub-grids that compose the grid (also called \\"boxes\\", \\"blocks\\", or \\"regions\\") contains all of the digits from 1 to 9. The puzzle is given with some of the cells already filled in and others that are empty (and may be indicated by 0).","solution":"def solve_sudoku(board): Solve the Sudoku puzzle by filling empty cells. The input board is a 9x9 list of lists. Empty cells are denoted by 0. def is_valid(board, row, col, num): Check if it's valid to place the number \`num\` in the cell at (row, col). for i in range(9): if board[row][i] == num or board[i][col] == num: return False box_row_start = (row // 3) * 3 box_col_start = (col // 3) * 3 for i in range(box_row_start, box_row_start + 3): for j in range(box_col_start, box_col_start + 3): if board[i][j] == num: return False return True def solve(board): Use backtracking to solve the Sudoku puzzle. for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True solve(board) return board"},{"question":"Write a python function to find the list of prime factors of a given number. A prime factor is a factor that is a prime number. For example, the prime factors of 13195 are 5, 7, 13, and 29.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. factors = [] # Handle the smallest prime number, which is 2 while n % 2 == 0: factors.append(2) n //= 2 # Check for odd numbers from 3 upwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i # If n becomes a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a python function to find and return a list of all unique factors of a given positive integer, excluding the number itself. Here, a factor is a number that divides the given number evenly (remainder is zero).","solution":"def unique_factors(n): Returns a list of all unique factors of a given positive integer, excluding the number itself. if n <= 1: return [] factors = [] for i in range(1, n): if n % i == 0: factors.append(i) return factors"},{"question":"Write a python function to split a sentence into words, considering both spaces and punctuation.","solution":"import re def split_sentence(sentence): Splits a sentence into words considering both spaces and punctuation. words = re.findall(r'bw+b', sentence) return words"},{"question":"Write a python function to find the maximum and minimum values in a given list, and also return the positions of these values. If the list has less than two elements, return -1 as the position.","solution":"def find_max_min_positions(arr): Function to find the maximum and minimum values in a given list, and also return the positions of these values. Parameters: arr (list): A list of numbers. Returns: tuple: A tuple containing (max_value, max_position, min_value, min_position) positions are -1 if the list has less than two elements. if len(arr) < 2: return (None, -1, None, -1) max_value = max(arr) min_value = min(arr) max_position = arr.index(max_value) min_position = arr.index(min_value) return (max_value, max_position, min_value, min_position)"},{"question":"Write a python function to count the number of occurrences of a word in a given string, considering case-sensitivity.","solution":"def count_word_occurrences(text, word): Counts the number of occurrences of a word in a given string, considering case-sensitivity. Parameters: text (str): The string to search within. word (str): The word to count. Returns: int: The number of occurrences of the word. return text.split().count(word)"},{"question":"Write a python function to find pairs of numbers in the given list whose difference is 'd' and return the count of such pairs. The list will contain only integers.","solution":"def count_pairs_with_difference(nums, d): Finds and returns the count of pairs in the list 'nums' whose difference is 'd'. Parameters: nums (list of int): List of integers. d (int): The difference we are looking for. Returns: int: The count of pairs with difference 'd'. count = 0 num_set = set(nums) for num in nums: if (num + d) in num_set: count += 1 return count"},{"question":"Write a python function to read data from a CSV file and return the data as a list of dictionaries, where each dictionary represents a row in the CSV file, and the keys of the dictionary are the column headers.","solution":"import csv def read_csv_as_dicts(file_path): Reads data from a CSV file and returns it as a list of dictionaries. :param file_path: Path to the CSV file. :return: List of dictionaries where each dictionary represents a row in the CSV file. data = [] with open(file_path, mode='r', encoding='utf-8') as file: reader = csv.DictReader(file) for row in reader: data.append(row) return data"},{"question":"Write a python function to count the number of unique elements in a list of integers.","solution":"def count_unique_elements(lst): Returns the number of unique elements in the list of integers. return len(set(lst))"},{"question":"Write a python function to find the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n >= 2. Your function should be efficient and avoid redundant calculations using memoization.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n == 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to find the factorial of a number without using recursion. To find the factorial of 0 is 1. To find the factorial of negative number is undefined. Your function should handle errors for negative inputs and return the factorial of non-negative integers.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. For n = 0, the return value is 1. For negative n, returns None indicating an error. if n < 0: return None result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to reverse a word. For example, if the input is \\"Hello\\", the function should return \\"olleH\\".","solution":"def reverse_word(word): Returns the reverse of the given word. return word[::-1]"},{"question":"Write a python function to remove the duplicates from a sorted linked list, so that each element appear only once.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates_from_sorted_list(head): Removes duplicates from a sorted linked list. current = head while current and current.next: if current.val == current.next.val: current.next = current.next.next else: current = current.next return head"},{"question":"Write a python function to calculate the power of 2 to a given number without using the \`**\` operator.","solution":"def power_of_2(n): Returns 2 raised to the power of n. if n < 0: raise ValueError(\\"This function does not support negative exponents.\\") result = 1 for _ in range(n): result *= 2 return result"},{"question":"Write a python function to check if all characters in a given string are unique. How would you test this function with different types of input?","solution":"def are_all_characters_unique(string): Checks if all characters in the string are unique. Args: string (str): The string to check. Returns: bool: True if all characters in the string are unique, False otherwise. return len(set(string)) == len(string)"},{"question":"Write a python function to find the first repeated word in a string. Hier the first repeated word means the first word that has already occurred in the string.","solution":"def first_repeated_word(s): Returns the first repeated word in the string s. If there are no repeated words, returns None. words = s.split() seen = set() for word in words: if word in seen: return word seen.add(word) return None"},{"question":"Write a python function to replace all occurrences of a given character in a string with another character. I want the function to be case-sensitive.","solution":"def replace_character(s, old_char, new_char): Replaces all occurrences of old_char in the string s with new_char. Parameters: s (str): The input string. old_char (str): The character to be replaced. new_char (str): The character to replace with. Returns: str: The modified string with old_char replaced by new_char. return s.replace(old_char, new_char)"},{"question":"Write a python function to sum the digits of an integer. For example, if the input is 123, the function should return 6 (1+2+3).","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. If the integer is negative, it considers the absolute value. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"Write a python function to find all divisors of a number.","solution":"def find_divisors(n): Returns a list of all divisors of the given number n. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") divisors = [] for i in range(1, n + 1): if n % i == 0: divisors.append(i) return divisors"},{"question":"Write a python function to perform element-wise addition of two lists. If the lists are of different lengths, the function should return the result up to the length of the shorter list.","solution":"def elementwise_addition(list1, list2): Returns a list that is the element-wise addition of the two input lists. If the input lists are of different lengths, the result is truncated to the length of the shorter list. Args: list1: First list of numbers. list2: Second list of numbers. Returns: A list of the element-wise addition. min_length = min(len(list1), len(list2)) return [list1[i] + list2[i] for i in range(min_length)]"},{"question":"Write a python function to find the shortest distance in a weighted graph. The graph is represented as an adjacency list with weights of the edges. The function should take the graph, the number of vertices, and the source vertex as input and return the shortest distances from the source vertex to all other vertices.","solution":"import heapq def dijkstra(graph, num_vertices, source): Finds the shortest distances from the source vertex to all other vertices in a weighted graph. distances = [float('inf')] * num_vertices distances[source] = 0 priority_queue = [(0, source)] # (distance, vertex) heapq.heapify(priority_queue) while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has the constraint that no two elements in the subarray are adjacent.","solution":"def max_sum_non_adjacent(nums): Returns the maximum sum of a subarray with non-adjacent elements. if not nums: return 0 if len(nums) == 1: return nums[0] include = nums[0] exclude = 0 for i in range(1, len(nums)): new_exclude = max(include, exclude) include = exclude + nums[i] exclude = new_exclude return max(include, exclude)"},{"question":"Write a python function to get the first character of a string. If the string is empty, return an empty string.","solution":"def first_character(s): Returns the first character of the string s. If the string is empty, returns an empty string. if s: return s[0] return ''"},{"question":"Write a python function to find the number of separate communities in a graph using the Graph Theory concept of connected components. A community in this context is a subgraph where all nodes in the subgraph are connected to each other directly or through paths. Given an adjacency list representation of the graph, return the number of connected components.","solution":"def number_of_communities(adj_list): Returns the number of connected components in the graph. :param adj_list: Dictionary where keys are nodes and values are lists of connected nodes :return: Number of connected components (communities) def dfs(node, visited): stack = [node] while stack: curr = stack.pop() for neighbor in adj_list.get(curr, []): if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) visited = set() count = 0 for node in adj_list: if node not in visited: dfs(node, visited) count += 1 return count"},{"question":"Write a python function to find the length of the longest contiguous substring with no repeating characters.","solution":"def longest_unique_substr_length(s): Returns the length of the longest substring with all unique characters. :param s: input string :return: length of the longest substring with all unique characters n = len(s) if n == 0: return 0 # Dictionary to store the last positions of characters last_seen = {} max_length = 0 start = 0 for end in range(n): if s[end] in last_seen: # Update the start position to the right of the last seen position of the current character start = max(start, last_seen[s[end]] + 1) last_seen[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a python function to read a file and return its contents as a list of strings, where each element is a line from the file.","solution":"def read_file_lines(file_path): Reads a file and returns its contents as a list of strings, where each element is a line from the file. :param file_path: path to the file :return: list of lines from the file with open(file_path, 'r') as file: return file.readlines()"},{"question":"Write a python function to check if a number is a prime number and then return the list of all prime factors of the number if it is a prime.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_factors(n): Returns a list of all prime factors of n if n is a prime number. If n is not a prime number, returns an empty list. if not is_prime(n): return [] factors = [] d = 2 while n > 1: while n % d == 0: factors.append(d) n //= d d += 1 return factors"},{"question":"Write a python function to find all substrings of a given string that contain a specific character.","solution":"def find_substrings_with_char(s, char): Returns a list of all substrings of s that contain the specified character. substrings = [] for i in range(len(s)): if s[i] == char: for j in range(i, len(s)): substrings.append(s[i:j+1]) return substrings"},{"question":"Write a python function to get the first and last character of a given string.","solution":"def get_first_and_last_char(string): Returns the first and last character of the given string. If the string is empty, return an empty string. If the string has only one character, return that character twice. if not string: return \\"\\" if len(string) == 1: return string * 2 return string[0] + string[-1]"},{"question":"Write a python function to transpose a 2D list. The function should return a new 2D list where rows and columns have been swapped.","solution":"def transpose(matrix): Transposes a given 2D list (matrix). Parameters: matrix (list of list of int): 2D list to be transposed Returns: list of list of int: transposed 2D list return [list(row) for row in zip(*matrix)]"},{"question":"Write a python function to check if a given number is a Fibonacci number. Fibonacci numbers are numbers that appear in the Fibonacci sequence, where each number after the first two is the sum of the two preceding ones. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, ... and so forth. A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square.","solution":"import math def is_fibonacci_number(n): Checks if a given number n is a Fibonacci number. Fibonacci numbers are defined by the recurrence relation: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n >= 2 A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x # Check if one or both conditions are perfect squares return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)"},{"question":"Write a python function to calculate the mean and median of a given list of numbers. Additionally, handle the scenario where the list is empty or has only one element.","solution":"def calculate_mean_and_median(numbers): Returns the mean and median of a given list of numbers. If the list is empty, returns (None, None). If the list contains only one element, returns (element, element). if not numbers: return (None, None) n = len(numbers) mean = sum(numbers) / n sorted_numbers = sorted(numbers) if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 return (mean, median)"},{"question":"Write a python function to find the number of '1' bits in the binary representation of a number. This function should be efficient and work for both positive and negative integers.","solution":"def count_one_bits(n): Returns the number of '1' bits in the binary representation of a number. Parameters: - n: int, the number to analyze Returns: - int, the count of '1' bits in the binary representation of n # Handle negative numbers by using the two's complement representation if n < 0: n = n & 0xFFFFFFFF return bin(n).count('1')"},{"question":"Write a python function to add two numbers with varying digit lengths. For example, given the numbers 12 and 8765, the function should return the sum as 8877.","solution":"def add_numbers(num1, num2): Returns the sum of num1 and num2. Parameters: num1 (int): The first number num2 (int): The second number Returns: int: The sum of num1 and num2 return num1 + num2"},{"question":"Write a python function to print all numbers between 1 to 10 and mark them with whether they are odd or even.","solution":"def mark_odd_even(): Returns a list of numbers between 1 and 10 with their odd/even status. result = [] for num in range(1, 11): if num % 2 == 0: result.append(f\\"{num} is even\\") else: result.append(f\\"{num} is odd\\") return result"},{"question":"Write a python function to parse the given text and return the list of \\"Problem ID\\" and \\"Subject\\". The text contains multiple instances of \\"Problem ID\\" followed by a number and \\"Subject\\" followed by a text, separated by a comma. Additionally, there may be random characters or spaces in the text.","solution":"import re def parse_problem_data(text): Parses the given text and returns a list of dictionaries with 'Problem ID' and 'Subject'. :param text: str: A string containing multiple instances of \\"Problem ID\\" followed by a number and \\"Subject\\" followed by a text. :return: list[dict]: A list of dictionaries with keys 'Problem ID' and 'Subject' pattern = re.compile(r'Problem IDs*:s*(d+)s*,s*Subjects*:s*([^,]+)') matches = pattern.findall(text) result = [{'Problem ID': problem_id, 'Subject': subject.strip()} for problem_id, subject in matches] return result"},{"question":"Write a python function to find the most common pair of elements in a list. You can assume that the input is a list of integers and there is at least one pair with the highest frequency. If there are multiple pairs with the same highest frequency, return all of them.","solution":"from collections import defaultdict def most_common_pairs(elements): Returns the most common pair(s) of elements in the list. If there are multiple pairs with the same highest frequency, return all of them. Params: elements (list): List of integers. Returns: List of tuple(s): List containing the most common pair(s) of integers. if len(elements) < 2: return [] pair_frequency = defaultdict(int) for i in range(len(elements) - 1): pair = (elements[i], elements[i + 1]) pair_frequency[pair] += 1 max_freq = max(pair_frequency.values()) most_common = [pair for pair, freq in pair_frequency.items() if freq == max_freq] return most_common"},{"question":"Write a python function to generate the output \\"Hello, World!\\" and print it to the console.","solution":"def print_hello_world(): Prints 'Hello, World!' to the console. print(\\"Hello, World!\\")"},{"question":"Write a python function to find the length of the longest palindromic substring in a given string. A palindromic substring is a substring that reads the same backward as forward, such as \\"radar\\" or \\"level\\".","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring in the given string s. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 if not s: return 0 start, end = 0, 0 for i in range(len(s)): len1 = expand_around_center(i, i) len2 = expand_around_center(i, i + 1) max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return end - start + 1"},{"question":"Write a python function to scrape data from a web page and store it in a CSV file. To achieve this, we will use the BeautifulSoup library for parsing HTML and the requests library to fetch the HTML content of the web page. Please provide the detailed steps and explanations for the implementation.","solution":"import requests from bs4 import BeautifulSoup import csv def scrape_and_store_to_csv(url, csv_filename): Scrapes data from the given URL and stores it in a CSV file. Parameters: - url: str, the URL of the web page to scrape. - csv_filename: str, name of the CSV file to save the data. response = requests.get(url) response.raise_for_status() # Raise an error if the request fails # Parse the content of the retrieved HTML soup = BeautifulSoup(response.text, 'html.parser') # Extract the desired data; this part depends on the structure of the web page # For demonstration, we'll assume we're extracting data from a table with <tr> and <td> elements data = [] table = soup.find('table') # Modify this to target the correct table if table: rows = table.find_all('tr') for row in rows: cols = row.find_all('td') cols = [ele.text.strip() for ele in cols] if cols: data.append(cols) # Write the data to a CSV file with open(csv_filename, 'w', newline='') as file: writer = csv.writer(file) writer.writerows(data)"},{"question":"Write a python function to implement merge sort. Merge sort is a divide-and-conquer algorithm that splits the input array into n subarrays, each containing one element (an array with one element is considered sorted), and then repeatedly merges subarrays to produce new sorted subarrays until there is only one sorted subarray that remains.","solution":"def merge_sort(arr): Function to perform merge sort on an array. Parameters: arr (list): List of elements to be sorted. Returns: list: Sorted list. if len(arr) <= 1: return arr # Finding the mid of the array mid = len(arr) // 2 # Dividing the elements into 2 halves left_half = arr[:mid] right_half = arr[mid:] # Recursive call on each half left_sorted = merge_sort(left_half) right_sorted = merge_sort(right_half) # Merging the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): Function to merge two sorted lists. Parameters: left (list): First sorted list. right (list): Second sorted list. Returns: list: Merged and sorted list. sorted_list = [] left_index, right_index = 0, 0 # Traverse both lists and insert smallest element from left or right into sorted_list while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # Capture remaining elements from left or right list sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"Write a python function to loop through a list and print the elements.","solution":"def print_elements(lst): Loops through the given list and prints each element. for element in lst: print(element)"},{"question":"Write a python function to find and return the largest continuous sublist with the same sum in a list of integers. If there are multiple sublists with the same largest sum, return any one of them.","solution":"def largest_continuous_sublist_with_same_sum(nums): Returns the largest continuous sublist with the largest sum. If there are multiple sublists with the same largest sum, returns any one of them. max_sum = float('-inf') current_sum = 0 start = 0 max_start = 0 max_end = 0 for end in range(len(nums)): if current_sum <= 0: start = end current_sum = nums[end] else: current_sum += nums[end] if current_sum > max_sum: max_sum = current_sum max_start = start max_end = end return nums[max_start:max_end+1]"},{"question":"Write a python function to find the most frequent n-grams for a provided text. The function should take a string and an integer n as parameters and return the n most frequent n-grams in the string. n-grams are contiguous substrings of n characters from a given text. For instance, the string \\"abcde\\" contains n-grams 'ab', 'bc', 'cd', 'de'.","solution":"from collections import Counter def most_frequent_ngrams(text, n, top_n): Returns the top_n most frequent n-grams from the given text. Parameters: text (str): The input text from which to extract n-grams. n (int): The length of each n-gram. top_n (int): The number of top n-grams to return. Returns: List[Tuple[str, int]]: A list of tuples where each tuple contains an n-gram and its frequency. if n <= 0 or top_n <= 0: return [] # Generate n-grams ngrams = [text[i:i+n] for i in range(len(text)-n+1)] # Count the frequencies of each n-gram ngram_counts = Counter(ngrams) # Return the top_n most common n-grams return ngram_counts.most_common(top_n)"},{"question":"Write a python function to check if a number is a palindrome in any base between 2 and 36.","solution":"def is_palindrome(number, base): Returns True if the given number is a palindrome in the specified base, otherwise False. :param number: Integer, the number to check for palindrome :param base: Integer, the base (between 2 and 36) in which to check for palindrome :return: Boolean, True if the number is a palindrome in the given base, otherwise False if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36\\") # Convert number to the desired base digits = [] while number: digits.append(number % base) number //= base # Check if the digits form a palindrome return digits == digits[::-1]"},{"question":"Write a python function to generate a list of 200 unique random integers from 1 to 1000 and sort them in ascending order.","solution":"import random def generate_sorted_unique_random_integers(): Generates a list of 200 unique random integers from 1 to 1000 and sorts them in ascending order. random_integers = random.sample(range(1, 1001), 200) sorted_integers = sorted(random_integers) return sorted_integers"},{"question":"Write a python function to sort a list of strings based on their length. If two strings have the same length, sort those strings alphabetically in ascending order.","solution":"def sort_strings_by_length(strings): Sorts a list of strings based on their length. If two strings have the same length, sorts those strings alphabetically in ascending order. :param strings: List of strings to sort. :return: A new list of strings sorted by the specified criteria. return sorted(strings, key=lambda s: (len(s), s))"},{"question":"Write a python function to extract text from HTML and return a list of all headings in the HTML (H1 to H6).","solution":"from bs4 import BeautifulSoup def extract_headings(html): Extracts and returns a list of all headings (H1 to H6) from the given HTML. soup = BeautifulSoup(html, 'html.parser') headings = [] for i in range(1, 7): headings.extend([h.get_text() for h in soup.find_all(f'h{i}')]) return headings"},{"question":"Write a python function to check whether all characters in a string are unique. If not, then return the first repeated character. If there are no repeated characters, return -1.","solution":"def first_repeated_char(s): Checks whether all characters in a string are unique. Returns the first repeated character if any, otherwise returns -1. Parameters: s (str): The input string Returns: str or int: The first repeated character or -1 if all characters are unique seen = set() for char in s: if char in seen: return char seen.add(char) return -1"},{"question":"Write a python function to solve a Sudoku puzzle. The function should take a 2D list representing the Sudoku board as input and return the solved Sudoku board in the same format.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle using backtracking. :param board: 2D list representing the Sudoku board with 0 indicating empty cells. :return: 2D list representing the solved Sudoku board. def is_valid(board, row, col, num): # Check if num is not in the given row for x in range(9): if board[row][x] == num: return False # Check if num is not in the given column for x in range(9): if board[x][col] == num: return False # Check if num is not in the 3x3 subgrid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if board[i][j] == num: return False return True def solve(): for i in range(9): for j in range(9): if board[i][j] == 0: for num in range(1, 10): if is_valid(board, i, j, num): board[i][j] = num if solve(): return True board[i][j] = 0 return False return True solve() return board"},{"question":"Write a python function to generate a list of Fibonacci numbers up to a given limit. The function should take an integer as an input and return a list of Fibonacci numbers that are less than or equal to that integer.","solution":"def generate_fibonacci(limit): Generates a list of Fibonacci numbers up to a given limit. :param limit: An integer representing the upper bound for the Fibonacci numbers. :return: A list of Fibonacci numbers less than or equal to the limit. if limit < 0: return [] fibonacci = [0, 1] while True: next_fib = fibonacci[-1] + fibonacci[-2] if next_fib > limit: break fibonacci.append(next_fib) if limit == 0: return [0] return fibonacci"},{"question":"Write a python function to find the sum of all even numbers from 1 to n using a while loop.","solution":"def sum_of_evens(n): Returns the sum of all even numbers from 1 to n. total = 0 num = 2 while num <= n: total += num num += 2 return total"},{"question":"Write a python function to generate the Fibonacci sequence using dynamic programming.","solution":"def fibonacci(n): Generates the Fibonacci sequence up to the nth number using dynamic programming. :param n: The length of the Fibonacci sequence to generate. :return: A list containing the Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return fib"},{"question":"Write a python function to convert the hexadecimal number to binary counterparts. For example, when the hexadecimal number is '1A' it should return the reesult as '11010'. You can use the built-in \`bin()\` function, but make the function to work with any valid hexadecimal (up to hexadecimal number FFFFFF) and to validate the input.","solution":"def hex_to_bin(hex_num): Converts a hexadecimal number (as a string) to its binary counterpart (also as a string). Parameters: hex_num (str): A hexadecimal number. Returns: str: The binary representation of the hexadecimal number. Raises: ValueError: If the input is not a valid hexadecimal number. if not isinstance(hex_num, str): raise ValueError(\\"Input should be a string\\") # Validate the hexadecimal number try: int(hex_num, 16) except ValueError: raise ValueError(\\"Input is not a valid hexadecimal number\\") # Convert to binary and remove the '0b' prefix bin_num = bin(int(hex_num, 16))[2:] return bin_num"},{"question":"Write a python function to return a list with the elements in reverse order.","solution":"def reverse_list(lst): Returns the list with elements in reverse order. return lst[::-1]"},{"question":"Write a python function to find the shortest path in a graph using Dijkstra's algorithm. The graph is represented as an adjacency list, where each key is a node and its value is a list of tuples representing the adjacent nodes and their corresponding edge weights.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm to find the shortest path in a graph. Parameters: graph (dict): The graph represented as an adjacency list. start: The starting node. Returns: dict: The shortest distance from the start node to all other nodes. # Distance dictionary to store the minimum distance from start to each node distances = {node: float('inf') for node in graph} distances[start] = 0 # Priority queue to determine the next node to process priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If a node's distance is already smaller than the processed one, skip it if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight # If a shorter path to the neighbor is found if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a python function to calculate the error between two sample sets using the Mean Squared Error (MSE). The function should take two lists of numbers as input and return the MSE.","solution":"def mean_squared_error(actual, predicted): Calculate the Mean Squared Error between two lists of numbers. Parameters: actual (list of float): The actual values. predicted (list of float): The predicted values. Returns: float: The Mean Squared Error between the actual and predicted values. if len(actual) != len(predicted): raise ValueError(\\"The actual and predicted lists must have the same length.\\") mse = sum((a - p) ** 2 for a, p in zip(actual, predicted)) / len(actual) return mse"},{"question":"Write a python function to find the sum of the first N natural numbers. What is the time complexity of this function?","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers. :param N: The number up to which to sum the natural numbers. :return: The sum of the first N natural numbers. return N * (N + 1) // 2 # The time complexity of this function is O(1) because it uses a constant-time arithmetic formula."},{"question":"Write a python function to get the maximum value in a given list of numbers. You should handle the case where the list is empty and return None in that scenario.","solution":"def get_max_value(numbers): Returns the maximum value in a given list of numbers. Returns None if the list is empty. if not numbers: return None return max(numbers)"},{"question":"Write a python function to solve the problem of finding the maximum sum of a subarray of a given array, where the subarray must contain at least one element from the original array and may not contain any consecutive elements from the original array.","solution":"def max_non_consecutive_subarray_sum(nums): Finds the maximum sum of a subarray where the subarray does not contain consecutive elements. Parameters: nums (list): The input array of integers. Returns: int: The maximum sum of a subarray with non-consecutive elements. if not nums: return 0 n = len(nums) if n == 1: return nums[0] # dp[i] will be the maximum sum we can obtain considering the array until the i-th element dp = [0] * n # Initialize the dp array dp[0] = max(0, nums[0]) if n > 1: dp[1] = max(dp[0], nums[1]) for i in range(2, n): # Either take the current element and add to dp[i-2] or skip current element dp[i] = max(dp[i-1], nums[i] + dp[i-2]) return max(dp)"},{"question":"Write a python function to determine the minimum number of interventions required to balance the number of peaches in a single basket. In this scenario, there are two baskets filled with peaches. The intervention is defined as peeling off the outer layer of peaches from one basket and adding them to the other basket. The goal is to achieve an equal number of peaches in both baskets with the minimum number of interventions. Given the initial count of peaches in both baskets, your task is to find the least number of interventions needed to achieve the goal.","solution":"def minimum_interventions(peaches_in_basket1, peaches_in_basket2): Determine the minimum number of interventions required to balance the number of peaches in two baskets. # Calculate the difference between the number of peaches in both baskets difference = abs(peaches_in_basket1 - peaches_in_basket2) # The number of interventions needed to achieve balance interventions = difference // 2 return interventions"},{"question":"Write a python function to extract all the headers (h1 to h6) from an HTML string.","solution":"from bs4 import BeautifulSoup def extract_headers(html_string): Extracts all headers (h1 to h6) from an HTML string. Parameters: html_string (str): The input HTML string. Returns: List[str]: A list of headers tagged from h1 to h6. soup = BeautifulSoup(html_string, 'html.parser') headers = [] for i in range(1, 7): headers.extend([header.get_text() for header in soup.find_all(f'h{i}')]) return headers"},{"question":"Write a python function to find the nearest integer to the average of a list of numbers, rounded to the nearest integer. The function should take an array as input and return the integer closest to the average, rounded to the nearest integer.","solution":"def nearest_integer_to_average(arr): Returns the nearest integer to the average of a list of numbers. Parameters: arr (list): A list of numbers (integers or floats) Returns: int: The integer closest to the average of the list if not arr: raise ValueError(\\"Array cannot be empty\\") average = sum(arr) / len(arr) return round(average)"},{"question":"Write a python function to find the maximum subarray sum in an array that may contain both positive and negative integers.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to parse a CSV file and convert the CSV data into a dictionary for handling in Python. The keys of the dictionary should be the column names specified in the first row of the CSV file. The values should be lists of the data in each corresponding column.","solution":"import csv def parse_csv_to_dict(file_path): Parses a CSV file and converts the data into a dictionary. Args: file_path (str): The path to the CSV file. Returns: dict: A dictionary with column names as keys and lists of column data as values. data_dict = {} with open(file_path, mode='r') as csv_file: csv_reader = csv.DictReader(csv_file) for row in csv_reader: for column, value in row.items(): if column not in data_dict: data_dict[column] = [] data_dict[column].append(value) return data_dict"},{"question":"Write a python function to implement a basic calculator that supports basic operations like addition, subtraction, multiplication, and division. The calculator will take two numbers and an operation as input and return the result of the operation. If division is performed and the divisor is zero, the function should return \\"Error: Division by zero\\".","solution":"def calculator(a, b, operation): Performs basic operations (addition, subtraction, multiplication, division) on two numbers. Returns the result of the operation. if operation == \\"add\\": return a + b elif operation == \\"subtract\\": return a - b elif operation == \\"multiply\\": return a * b elif operation == \\"divide\\": if b == 0: return \\"Error: Division by zero\\" return a / b else: return \\"Error: Invalid operation\\""},{"question":"Write a python function to remove duplicates from a list while maintaining the original order. You can use the following list for testing: \`input_list = [1, 2, 2, 3, 4, 4, 5]\`.","solution":"def remove_duplicates(input_list): Returns a list with duplicates removed while maintaining the original order. seen = set() result = [] for item in input_list: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Write a python function to print the first 10 even Fibonacci numbers.","solution":"def even_fibonacci_numbers(limit=10): Returns the first 'limit' Fibonacci numbers that are even. even_fibs = [] a, b = 0, 1 while len(even_fibs) < limit: a, b = b, a + b if b % 2 == 0: even_fibs.append(b) return even_fibs"},{"question":"Write a python function to find the longest common subsequence (LCS) between two strings. Can you provide a detailed explanation of each step in the solution?","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two strings s1 and s2. # Initialize the DP table with zeros m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: # Matching characters dp[i][j] = dp[i - 1][j - 1] + 1 else: # Not matching characters dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of LCS will be in the cell dp[m][n] return dp[m][n]"},{"question":"Write a python function to minimize the cost function of a linear regression problem. The cost function for linear regression is given by: J(θ) = (1/2m) * Σ (hθ(x) - y)^2 where m is the number of training examples, hθ(x) = θ0 + θ1 * x and θ are the parameters of the linear model.","solution":"def linear_regression_cost_function(theta, x, y): Computes the cost function for linear regression. Parameters: theta (list): A list containing the parameters theta0 and theta1. x (list): The input feature data. y (list): The actual output data. Returns: float: The computed cost. m = len(y) h = [theta[0] + theta[1] * xi for xi in x] cost = (1 / (2 * m)) * sum((hi - yi) ** 2 for hi, yi in zip(h, y)) return cost"},{"question":"Write a python function to count all the words in a given string where each word is separated by either a space or a comma. For instance, given the string \\"hello ,world this is a, test sentence\\", the output should be 5 since there are five words. Also, include a docstring that explains what the function does.","solution":"def count_words(s): Counts all the words in a given string where each word is separated by either a space or a comma. Parameters: s (str): The input string. Returns: int: The count of words. # Replace commas with spaces, then split on spaces, and filter out empty strings. return len([word for word in s.replace(',', ' ').split() if word])"},{"question":"Write a python function to find all unique pairs in the array that sum up to a given target. The function should take two parameters: an unsorted list of integers and a target integer, and return a list of tuples containing each unique pair that sums up to the target.","solution":"def find_pairs_with_sum(nums, target): Returns a list of unique pairs (as tuples) from the list \`nums\` that add up to \`target\`. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"Write a python function to take in a list of integers and return the length of the longest consecutive subsequence of numbers.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence of numbers. if not nums: return 0 nums = set(nums) max_length = 0 for num in nums: if num - 1 not in nums: current_num = num current_length = 1 while current_num + 1 in nums: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a python function to check if a number is prime or not. You should define the function with one parameter, \`number\`, and return \`True\` if the number is prime, and \`False\` otherwise. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 5 is prime because the only divisors of 5 are 1 and 5. However, 6 is not prime as well as 21 because they have more than two divisors (6 = 1*6 and 6 = 2*3).","solution":"def is_prime(number): Returns True if 'number' is a prime number, else False. if number <= 1: return False if number == 2: return True # 2 is the only even prime if number % 2 == 0: return False for i in range(3, int(number ** 0.5) + 1, 2): if number % i == 0: return False return True"},{"question":"Write a python function to calculate the length of a string in bytes, taking into account the encoding used. You can use the \`encode()\` method to convert the string into a bytes object, which can then be measured using the \`len()\` function. However, the \`encode()\` method can take an encoding parameter that can be used to specify the encoding of the string.","solution":"def length_in_bytes(s, encoding='utf-8'): Returns the length of the string s in bytes for the given encoding. return len(s.encode(encoding))"},{"question":"Write a python function to find the maximum profit that can be obtained by buying and selling a stock without being in a position (not holding a stock) for less than 2 days. That is, if you sell on day i, you must have bought it on day j where j < i - 1.","solution":"def max_profit(prices): Finds the maximum profit that can be obtained by buying and selling a stock without being in a position for less than 2 days. :param prices: List of stock prices where prices[i] is the price of the stock on day i. :return: Maximum profit possible. n = len(prices) if n < 2: return 0 # Initialize the profits array with two less days as we need at least 2 days gap profits = [0] * n for i in range(2, n): max_profit = 0 for j in range(i - 2): max_profit = max(max_profit, prices[i] - prices[j]) profits[i] = max(profits[i-1], max_profit) return max(profits)"},{"question":"Write a python function to check if all elements in a list are unique. If they are not unique, return the duplicates as a list. If all elements are unique, return an empty list.","solution":"def find_duplicates(lst): Checks if all elements in the list are unique. If they are not unique, returns the duplicates as a list. If all elements are unique, returns an empty list. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to find the minimum length of a subarray with a sum that is greater than or equal to a given k using the sliding window technique. If no such subarray exists, return -1.","solution":"def min_subarray_len(nums, k): Returns the minimum length of a subarray with a sum greater than or equal to k. If no such subarray exists, returns -1. n = len(nums) min_length = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float('inf') else -1"},{"question":"Write a python function to implement K-Nearest Neighbors algorithm. The function should use 1D Euclidean distance as the metric for finding nearest neighbors.","solution":"import numpy as np from collections import Counter def euclidean_distance(point1, point2): Calculate the Euclidean distance between two 1D points. return np.abs(point1 - point2) def knn_predict(X_train, y_train, x_test, k): Implement K-Nearest Neighbors algorithm. Parameters: X_train: 1D numpy array of training data points. y_train: 1D numpy array of training data labels. x_test: float of the test data point. k: int of the number of neighbors to consider. Returns: The predicted label for the test data point. # Compute distances from the test point to all training points distances = [euclidean_distance(x, x_test) for x in X_train] # Get the indices of the k smallest distances k_indices = np.argsort(distances)[:k] # Get the labels of the k nearest neighbors k_nearest_labels = [y_train[i] for i in k_indices] # Return the most common label among the nearest neighbors return Counter(k_nearest_labels).most_common(1)[0][0]"},{"question":"Write a python function to update the value of a key in the dictionary if the key exists, otherwise add it to the dictionary with a specified value.","solution":"def update_or_add(dictionary, key, value): Updates the value of a key in the dictionary if the key exists, otherwise adds it to the dictionary with the specified value. Parameters: dictionary (dict): The dictionary to update or add the key-value pair. key: The key to update or add in the dictionary. value: The value to set for the key. Returns: dict: The updated dictionary. dictionary[key] = value return dictionary"},{"question":"Write a python function to reverse the words in a string. For example, if the input string is \\"I am a student\\", the output should be \\"student a am I\\".","solution":"def reverse_words(s): Returns a string with the words in reverse order. words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to count the unique elements in an array and return a dictionary where the keys are the unique elements and the values are their frequencies.","solution":"def count_unique_elements(arr): Returns a dictionary with unique elements in the array as keys and their frequencies as values. frequency_dict = {} for element in arr: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 return frequency_dict"},{"question":"Write a python function to find the missing number in a given array of integers. The array contains numbers from 1 to n, but one number is missing. How can I solve this problem?","solution":"def find_missing_number(arr): Given an array containing numbers from 1 to n with one number missing, this function returns the missing number. n = len(arr) + 1 total_sum = n * (n + 1) / 2 actual_sum = sum(arr) return int(total_sum - actual_sum)"},{"question":"Write a python function to find the maximum product of any triplet in a list of integers. The function should handle cases with both positive and negative integers, including cases with all negative numbers, all positive numbers, and other mixed cases.","solution":"def maximum_product_of_triplet(nums): Returns the maximum product of any triplet in a list of integers. if len(nums) < 3: raise ValueError(\\"List must contain at least three numbers\\") nums.sort() # The maximum product of triplet can be the product of the three largest numbers # or the product of the two smallest numbers (which can be negatives) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a python function to check if a string \\"s\\" is a palindrome or not. A palindrome is a string that reads the same backward as forward. For example, \\"radar\\" is a palindrome and \\"apple\\" is not. Make sure to handle empty strings and avoid any other non-alphanumeric characters from affecting the palindrome check.","solution":"import re def is_palindrome(s): Returns True if the string 's' is a palindrome, otherwise returns False. A palindrome is a string that reads the same backward as forward. Non-alphanumeric characters are ignored, and the comparison is case-insensitive. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to find the maximum sum of a subarray within a one-dimensional array of numbers. This is commonly known as the \\"Maximum Subarray Problem\\". Your function should take a list of integers as input and return the maximum sum. If the input list is empty, return 0.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within a one-dimensional array. If the input list is empty, returns 0. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the second largest number in an array. If the array has less than 2 elements, the function should raise a ValueError.","solution":"def second_largest_number(arr): Finds the second largest number in an array. Parameters: arr (list): The list of integers. Returns: int: The second largest number in the array. Raises: ValueError: If there are less than 2 elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") first_largest = second_largest = float('-inf') for number in arr: if number > first_largest: second_largest = first_largest first_largest = number elif first_largest > number > second_largest: second_largest = number if second_largest == float('-inf'): raise ValueError(\\"Array must contain at least two distinct elements\\") return second_largest"},{"question":"Write a python function to check if the input string is palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"radar\\" or \\"madam\\". The function should ignore case sensitivity and spaces.","solution":"def is_palindrome(s): Check if the input string is a palindrome. Parameters: s (str): Input string to check Returns: bool: True if the input string is a palindrome, False otherwise # Remove spaces and convert to lower case s = ''.join(s.split()).lower() # Compare the string with its reverse return s == s[::-1]"},{"question":"Write a python function to convert a decimal integer to a binary number without using any built-in functions for binary conversion.","solution":"def decimal_to_binary(n): Converts a decimal integer to a binary number. if n == 0: return '0' binary_num = '' while n > 0: remainder = n % 2 n = n // 2 binary_num = str(remainder) + binary_num return binary_num"},{"question":"Write a python function to reverse the order of the elements in a list using an iterative approach.","solution":"def reverse_list(lst): Reverses the order of the elements in a list using an iterative approach. start = 0 end = len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 return lst"},{"question":"Write a python function to find the first Non-repeating character in a String. Your function should return null if every character in the string is repeating. For example, if input string is 'AsString', output should be 'A' because 'A' is the first character that does not repeat and appears first in the string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. Returns None if every character in the string is repeating. # Create a dictionary to store the count of each character char_count = {} # Iterate over the string to count each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # Return None if there is no non-repeating character return None"},{"question":"Write a python function to find the minimum sum of a non-empty subarray sum.","solution":"def minimum_subarray_sum(nums): Returns the minimum sum of a non-empty subarray. :param nums: List of integers :return: Integer representing the minimum subarray sum if not nums: raise ValueError(\\"The input array must not be empty\\") current_min = nums[0] global_min = nums[0] for num in nums[1:]: current_min = min(num, current_min + num) global_min = min(global_min, current_min) return global_min"},{"question":"Write a python function to find the second largest number in a given list of integers. If the list has less than two elements, return None. Use the provided list \`[4, 7, 2, 8, 3, 8]\` as an example input.","solution":"def find_second_largest(numbers): Returns the second largest number in the list of integers. If the list has less than two elements, returns None. if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif number > second and number != first: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to check if a given string s is a palindrome, ignoring case and spaces.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome, ignoring case and spaces. # Remove spaces and convert to lower case cleaned = ''.join(s.split()).lower() # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a python function to process a list of integers and return the total number of positive integers with an even number of digits, where the first and last digits are the same. For example, 242 is a valid number because it has 3 digits (an odd number), and 12321 is valid because it has 5 digits (an odd number), but 12312 is a valid number because it has 5 digits (an odd number) and its first and last digits are both 1.","solution":"def count_valid_numbers(nums): Returns the total number of positive integers with an even number of digits, where the first and last digits are the same. def has_even_digits(n): Checks if a number has an even number of digits. return len(str(n)) % 2 == 0 def first_and_last_same(n): Checks if the first and last digits of a number are the same. s = str(n) return s[0] == s[-1] count = 0 for num in nums: if num > 0 and has_even_digits(num) and first_and_last_same(num): count += 1 return count"},{"question":"Write a python function to solve the 0/1 Knapsack problem using dynamic programming.","solution":"def knapsack(W, weights, values): Solve the 0/1 Knapsack problem using dynamic programming. Parameters: W (int): Maximum weight capacity of the knapsack. weights (list of int): Weights of the items. values (list of int): Values of the items. Returns: int: The maximum value that can be achieved with the given constraints. n = len(weights) dp = [[0 for x in range(W + 1)] for y in range(n + 1)] for i in range(n + 1): for w in range(W + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"Write a python function to print all the unique characters in a string, in the order of their first appearance. How would you test this function?","solution":"def unique_characters(s): Returns a string with all unique characters from the input string s, in the order of their first appearance. seen = set() unique_chars = [] for char in s: if char not in seen: seen.add(char) unique_chars.append(char) return ''.join(unique_chars)"},{"question":"Write a python function to print all the divisors of a given number. Your function should output the divisors in ascending order.","solution":"def get_divisors(n): Returns a list of all divisors of a given number n in ascending order. divisors = [] for i in range(1, n + 1): if n % i == 0: divisors.append(i) return divisors"},{"question":"Write a python function to create a frequency histogram for a list of numbers and return the histogram as a dictionary where keys represent the numbers and values represent their frequencies.","solution":"def frequency_histogram(numbers): Given a list of numbers, returns a dictionary where the keys are the numbers and the values are their frequencies in the list. :param numbers: List of numbers :return: Dictionary representing frequency histogram of the numbers histogram = {} for number in numbers: if number in histogram: histogram[number] += 1 else: histogram[number] = 1 return histogram"},{"question":"Write a python function to read a ZIP file and extract its contents to a specified directory.","solution":"import zipfile import os def extract_zip(zip_path, extract_to): Extracts the contents of a ZIP file to a specified directory. :param zip_path: Path to the ZIP file. :param extract_to: Directory where the contents will be extracted. if not zipfile.is_zipfile(zip_path): raise ValueError(\\"The provided file is not a valid ZIP file.\\") if not os.path.exists(extract_to): os.makedirs(extract_to) with zipfile.ZipFile(zip_path, 'r') as zip_ref: zip_ref.extractall(extract_to)"},{"question":"Write a python function to find the reverse of a string using a stack data structure. How would you approach this problem?","solution":"def reverse_string_using_stack(s): Reverses a string using a stack data structure. stack = [] # Push all characters of the string to the stack for char in s: stack.append(char) # Pop all characters from the stack and append to result reversed_string = \\"\\" while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Write a python function to return the index of the first element in a sorted array which is greater than or equal to a given target, or return -1 if no such element exists.","solution":"def find_first_greater_equal(arr, target): Returns the index of the first element in sorted array which is greater than or equal to the target. If no such element exists, return -1. low, high = 0, len(arr) - 1 result = -1 while low <= high: mid = (low + high) // 2 if arr[mid] >= target: result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Write a python function to find the most frequent element in a list using the standard library collections.","solution":"from collections import Counter def most_frequent_element(lst): Returns the most frequent element in the list. If multiple elements have the same frequency, returns one of them. if not lst: return None counter = Counter(lst) most_common_element = counter.most_common(1)[0][0] return most_common_element"},{"question":"Write a python function to reverse a string using slicing. How would you test this function?","solution":"def reverse_string(s): Returns the reverse of the input string using slicing. return s[::-1]"},{"question":"Write a python function to print out the first n Fibonacci numbers. Define a function \`fibonacci(n)\` where \`n\` is the number of Fibonacci numbers to print. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3.","solution":"def fibonacci(n): Prints the first n Fibonacci numbers. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write a python function to convert a nested dictionary to a flat dictionary. The keys in the flat dictionary should be concatenated strings with values separated by underscores (_).","solution":"def flatten_dict(d, parent_key='', sep='_'): Converts a nested dictionary to a flat dictionary. Args: d - nested dictionary parent_key - the base key for recursion (should be empty string for initial call) sep - separator to use when concatenating keys Returns: A flat dictionary with concatenated keys flat_dict = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): flat_dict.update(flatten_dict(v, new_key, sep=sep)) else: flat_dict[new_key] = v return flat_dict"},{"question":"Write a python function to find the smallest element in a list. The function should be named \`find_smallest\` and should take one parameter: a list of numbers. The function should return the smallest number in the list.","solution":"def find_smallest(numbers): Returns the smallest number in the list. if not numbers: raise ValueError(\\"The list is empty\\") smallest = numbers[0] for number in numbers[1:]: if number < smallest: smallest = number return smallest"},{"question":"Write a python function to sort an array using the radix sort algorithm.","solution":"def radix_sort(arr): Sorts an array using the radix sort algorithm. if len(arr) == 0: return arr # Find the maximum number to decide number of digits max_num = max(arr) # Start with the least significant digit exp = 1 while max_num // exp > 0: counting_sort(arr, exp) exp *= 10 return arr def counting_sort(arr, exp): A utility function to do counting sort of arr[] according to the digit represented by exp. n = len(arr) output = [0] * n # The output array elements that will have sorted arr count = [0] * 10 # Initialize count array as 0 # Store count of occurrences in count[] for i in range(n): index = arr[i] // exp count[index % 10] += 1 # Change count[i] so that count[i] now contains the actual # position of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array for i in range(n - 1, -1, -1): index = arr[i] // exp output[count[index % 10] - 1] = arr[i] count[index % 10] -= 1 # Copy the output array to arr[], so that arr now contains sorted numbers for i in range(n): arr[i] = output[i]"},{"question":"Write a python function to find the minimum and maximum values in a list using recursion. You are not allowed to use any built-in functions or Python's inbuilt min/max functions.","solution":"def find_min_max_recursive(arr, min_val=None, max_val=None, index=0): Finds the minimum and maximum values in a list using recursion. if not arr: return None, None if index == 0: min_val = arr[0] max_val = arr[0] if index >= len(arr): return min_val, max_val if arr[index] < min_val: min_val = arr[index] if arr[index] > max_val: max_val = arr[index] return find_min_max_recursive(arr, min_val, max_val, index + 1)"},{"question":"Write a python function to generate a binary numeric matrix of dimensions \`m*n\` where \`m\` is the number of rows and \`n\` is the number of columns. The matrix should have alternating zeros and ones. The function should return the matrix.","solution":"def generate_alternating_matrix(m, n): Generates a binary numeric matrix with alternating 0s and 1s. Parameters: m (int): number of rows n (int): number of columns Returns: list: a 2D list representing the binary matrix matrix = [[(i + j) % 2 for j in range(n)] for i in range(m)] return matrix"},{"question":"Write a python function to find the kth smallest element in a list of tuples. The function should take a list of tuples and an integer k as input and return the kth smallest element according to the first element of the tuples.","solution":"def kth_smallest_element(lst, k): Returns the kth smallest element in a list of tuples, sorted by the first element of the tuples. Parameters: lst (list of tuples): The list of tuples to search within. k (int): The position (1-based index) of the desired element in the sorted list. Returns: tuple: The kth smallest element in the list. if not lst or k < 1 or k > len(lst): return None # Sort the list based on the first element of the tuples sorted_lst = sorted(lst, key=lambda x: x[0]) return sorted_lst[k-1]"},{"question":"Write a python function to convert a given HTML string into a plain text string.","solution":"from html.parser import HTMLParser class HTMLToTextParser(HTMLParser): def __init__(self): super().__init__() self.text = [] def handle_data(self, data): self.text.append(data) def get_text(self): return ''.join(self.text) def html_to_text(html): Converts a given HTML string into a plain text string. parser = HTMLToTextParser() parser.feed(html) return parser.get_text()"},{"question":"Write a python function to determine the presence of a cycle in a directed graph using DFS. The function should take the number of vertices and the adjacency list representing the graph as inputs and return True if a cycle exists, False otherwise.","solution":"def has_cycle_dfs(num_vertices, adjacency_list): Determines if there is a cycle in a directed graph using DFS. Parameters: num_vertices: int - The number of vertices in the graph. adjacency_list: dict - The adjacency list representing the graph. Returns: bool - True if there is a cycle, False otherwise. def dfs(vertex): # If the vertex is already in the recursion stack, a cycle is found if rec_stack[vertex]: return True # If the vertex is already visited, no need to process it again if visited[vertex]: return False # Mark the current vertex as visited and add it to the recursion stack visited[vertex] = True rec_stack[vertex] = True # Recur for all the vertices adjacent to this vertex for neighbor in adjacency_list.get(vertex, []): if dfs(neighbor): return True # Remove the vertex from the recursion stack rec_stack[vertex] = False return False # Initialize visited and recursion stack arrays visited = [False] * num_vertices rec_stack = [False] * num_vertices # Call the recursive helper function to detect cycle in different DFS trees for node in range(num_vertices): if not visited[node]: if dfs(node): return True return False"},{"question":"Write a python function to find the maximum of a list of numbers using the divide and conquer approach. The function should be implemented recursively.","solution":"def find_maximum(arr): Returns the maximum value in the list using the divide and conquer approach. # Base cases for recursive approach if len(arr) == 1: return arr[0] if len(arr) == 2: return max(arr[0], arr[1]) # Divide mid = len(arr) // 2 left_max = find_maximum(arr[:mid]) right_max = find_maximum(arr[mid:]) # Conquer return max(left_max, right_max)"},{"question":"Write a python function to find the second largest number in a list. If the second largest number does not exist (because the list is too short or has all the same elements), return \`None\`.","solution":"def find_second_largest(numbers): Finds the second largest number in a list. If the second largest number does not exist, returns None. if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to find the reverse of a number using the stack data structure.","solution":"def reverse_number_using_stack(number): Returns the reverse of a given number using a stack data structure. :param number: int - The number to be reversed. :return: int - The reversed number. stack = [] is_negative = number < 0 number = abs(number) # Push digits of the number onto the stack while number > 0: stack.append(number % 10) number //= 10 # Pop digits from the stack to form the reversed number reversed_number = 0 place = 1 while stack: reversed_number += stack.pop() * place place *= 10 if is_negative: reversed_number *= -1 return reversed_number"},{"question":"Write a python function to check if a given array of integers contains a repeating element within a given distance \`k\`. The function should return \`True\` if such an element exists, otherwise return \`False\`.","solution":"def contains_nearby_duplicate(nums, k): Check if there are any duplicates within k distance in the array nums. Args: nums: List of integers. k: Integer distance within which to check for duplicates. Returns: Boolean: True if duplicates are within k distance, otherwise False. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Write a python function to determine if a given array can be partitioned into two subsets such that the sum of elements in both subsets is equal. This is known as the \\"Partition Equal Subset Sum\\" problem.","solution":"def can_partition(nums): Determines if the given array can be partitioned into two subsets such that the sum of elements in both subsets is equal. :param nums: List[int] - the list of integers to partition :return: bool - True if the partition is possible, otherwise False total_sum = sum(nums) # If the total sum is odd, it's not possible to partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize a boolean array for dynamic programming dp = [False] * (target + 1) dp[0] = True # Zero sum can be achieved trivially for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Write a python function to convert a sentence string into a list of word strings.","solution":"def sentence_to_words(sentence): Converts a sentence string into a list of word strings. words = sentence.split() return words"},{"question":"Write a python function to find the minimum number of operations required to make all values in an array equal. The allowed operations are incrementing an array element by one or decrementing it by one.","solution":"def min_operations_to_equal_elements(arr): Finds the minimum number of operations required to make all values in an array equal. Allowed operations are incrementing or decrementing an element by 1. if not arr: return 0 # If the array is empty, no operations are needed median = sorted(arr)[len(arr) // 2] return sum(abs(x - median) for x in arr)"},{"question":"Write a python function to find the sum of the first n natural numbers. You should create a function that takes an integer n as input and returns the sum of the first n natural numbers. Make sure to include a check function that verifies the correctness of your solution with provided data points.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. :param n: An integer n :return: The sum of the first n natural numbers if n < 1: raise ValueError(\\"n should be a positive integer\\") return n * (n + 1) // 2"},{"question":"Write a python function to remove duplicates from a list of integers while maintaining the original order of the list. How can I accomplish this using list comprehension? Additionally, how can I ensure the solution is efficient?","solution":"def remove_duplicates(nums): Removes duplicates from the list of integers while maintaining the original order. Args: nums (list): A list of integers which may contain duplicates. Returns: list: A list with duplicates removed, maintaining the original order. seen = set() return [x for x in nums if not (x in seen or seen.add(x))]"},{"question":"Write a python function to find the sum of an array交错 array. An交错 array is defined as an array where each element is either even or odd.","solution":"def sum_zigzag_array(arr): Calculate the sum of a zigzag array. A zigzag array is defined as an array where each element is either even or odd and alternates between the two. Args: arr (list): List of integers Returns: int: Sum of the array if it's a valid zigzag array, otherwise 0 if len(arr) < 2: return sum(arr) for i in range(1, len(arr)): if (arr[i] % 2 == arr[i - 1] % 2): return 0 # Not a zigzag array return sum(arr)"},{"question":"Write a python function to automate the process of email sending, given the recipient's email address, the subject, and the body of the email. The function should use the smtplib library to achieve this.","solution":"import smtplib from email.mime.text import MIMEText def send_email(recipient_email, subject, body, sender_email, sender_password, smtp_server='smtp.gmail.com', smtp_port=587): Send an email using smtplib. Parameters: - recipient_email (str): Address of the recipient. - subject (str): Subject of the email. - body (str): Body of the email. - sender_email (str): Address of the sender. - sender_password (str): Password for the sender's email account. - smtp_server (str): SMTP server address. Default is 'smtp.gmail.com'. - smtp_port (int): SMTP server port. Default is 587. # Create the email content msg = MIMEText(body) msg['Subject'] = subject msg['From'] = sender_email msg['To'] = recipient_email try: # Set up the SMTP server with smtplib.SMTP(smtp_server, smtp_port) as server: server.starttls() # Secure the connection server.login(sender_email, sender_password) # Login to the email account server.sendmail(sender_email, recipient_email, msg.as_string()) # Send the email return \\"Email sent successfully\\" except Exception as e: return f\\"Failed to send email. Error: {e}\\""},{"question":"Write a python function to compute the factorial of a number. The function should be recursive. Calculate the factorial of 5.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0: return 1 else: return n * factorial(n - 1) factorial_of_5 = factorial(5)"},{"question":"Write a python function to check if a string represents an integer without converting it to an integer.","solution":"def is_integer_string(s): Check if the input string s represents an integer without converting it to an integer. Args: s (str): The input string to check. Returns: bool: True if the string represents an integer, False otherwise. if not s: return False if s[0] in ('-', '+'): return s[1:].isdigit() return s.isdigit()"},{"question":"Write a python function to convert an input string to \\"Title Case\\". Title case means that the first letter of each word is capitalized, and the remaining letters in the word are in lowercase. The function should ignore non-alphabetic characters and keep them in their original positions.","solution":"def to_title_case(s): Converts an input string to title case. Title case means that the first letter of each word is capitalized, and the remaining letters in the word are in lowercase. The function ignores non-alphabetic characters and keeps them in their original positions. words = s.split() title_cased_words = [word.capitalize() for word in words] return ' '.join(title_cased_words)"},{"question":"Write a python function to check if a given string contains at least one digit and one capital letter.","solution":"def has_digit_and_capital_letter(s): Returns True if the input string contains at least one digit and one capital letter. has_digit = False has_capital_letter = False for char in s: if char.isdigit(): has_digit = True if char.isupper(): has_capital_letter = True if has_digit and has_capital_letter: return True return False"},{"question":"Write a python function to find all unique pairs in a list that sum up to a given number. You should consider each pair only once, and the order of elements in the pair does not matter, i.e., (a, b) is considered the same as (b, a).","solution":"def find_pairs_with_sum(numbers, target_sum): Finds all unique pairs in the list that sum up to the target_sum. Each pair is considered only once, and the order of elements in the pair does not matter. :param numbers: List of integers :param target_sum: Integer target sum :return: Set of unique pairs (tuples) seen = set() pairs = set() for number in numbers: complement = target_sum - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return pairs"},{"question":"Write a python function to find and print each unique element of a list, followed by the number of times it appears in the list. You should not use any in-built functions like count() or collections.Counter. For simplicity, you can assume that the elements of the list are integers.","solution":"def print_unique_elements_with_counts(lst): Prints each unique element in the list followed by the number of times it appears in the list. unique_elements = {} for element in lst: if element in unique_elements: unique_elements[element] += 1 else: unique_elements[element] = 1 for element, count in unique_elements.items(): print(f\\"{element}: {count}\\")"},{"question":"Write a python function to find the nth Fibonacci number. The function should be efficient and use either memoization or dynamic programming to avoid recalculating values.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 else: fib = [0] * (n + 1) fib[0], fib[1] = 0, 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python function to return the nth fibonacci number using memoization. Memoization is a technique where previous computations are stored and reused to speed up future computations.","solution":"def fib(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fib(n-1, memo) + fib(n-2, memo) return memo[n]"},{"question":"Write a python function to get all unique subsets of a list, maintaining the order of the elements.","solution":"def get_unique_subsets(arr): Generates all unique subsets of the input list while maintaining the order of elements. def backtrack(start, path): subsets.append(path) for i in range(start, len(arr)): # To handle duplicates, skip elements that are the same as the previous one if i > start and arr[i] == arr[i-1]: continue backtrack(i + 1, path + [arr[i]]) arr.sort() # Sort the array to handle duplicates subsets = [] backtrack(0, []) return subsets"},{"question":"Write a python function to find all the prime factors of a given number, and return them as a list. The function should include a efficient method of identifying prime factors.","solution":"def prime_factors(n): Returns all prime factors of a given number n as a list. factors = [] # Factor out the number of 2s while n % 2 == 0: factors.append(2) n //= 2 # n must be odd at this point, thus a skip of 2 (i = i + 2) can be used for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i # This condition is to check if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a python function to count the number of vowels (a, e, i, o, u) in a given string.","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the given string s. vowels = set('aeiouAEIOU') return sum(1 for char in s if char in vowels)"},{"question":"Write a python function to find the combination of numbers from a given list that sums up to a given target. If no combination sums up to the target, return an empty list.","solution":"from itertools import combinations def find_combination(nums, target): Finds a combination of numbers from the given list \`nums\` that sums up to the \`target\`. Parameters: nums (list of int): List of numbers to find the combination from. target (int): The target sum. Returns: List[int]: A combination of numbers that sums up to the target. If no such combination is found, return an empty list. for r in range(1, len(nums) + 1): for combo in combinations(nums, r): if sum(combo) == target: return list(combo) return []"},{"question":"Write a python function to find the maximum distance between any two nodes in a binary tree. This is also known as the diameter of the binary tree. The diameter is the number of nodes on the longest path between any two ends of tree. Note that the path may or may not pass through the root.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def diameterOfBinaryTree(root: TreeNode) -> int: Returns the diameter of the binary tree. def depth(node: TreeNode): nonlocal diameter if not node: return 0 left_depth = depth(node.left) right_depth = depth(node.right) diameter = max(diameter, left_depth + right_depth) return max(left_depth, right_depth) + 1 diameter = 0 depth(root) return diameter"},{"question":"Write a python function to multiply two matrices A and B, where A is a 2D list (list of lists) and B is also a 2D list. Assume that the multiplication is valid (i.e., the number of columns in A is equal to the number of rows in B). The function should return the resulting matrix as a 2D list.","solution":"def multiply_matrices(A, B): Multiply two matrices A and B where A and B are 2D lists and the multiplication is valid (i.e., number of columns in A is equal to number of rows in B). Returns the resultant matrix as a 2D list. # Get the number of rows in A and B num_rows_A = len(A) num_cols_B = len(B[0]) num_cols_A = len(A[0]) # Initialize the result matrix with zeros result = [[0] * num_cols_B for _ in range(num_rows_A)] # Perform matrix multiplication for i in range(num_rows_A): for j in range(num_cols_B): for k in range(num_cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to identify if a string is a palidrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same forward and backward, ignoring cases and spaces.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. A palindrome reads the same forward and backward, ignoring case and spaces. # Remove spaces and convert to lowercase cleaned_s = ''.join(filter(str.isalnum, s)).lower() # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to check if a string is a valid hexadecimal color code. A valid hexadecimal color code starts with a '#' symbol and is followed by exactly six hexadecimal digits (0-9, A-F, a-f).","solution":"import re def is_hex_color_code(s): Checks if the string s is a valid hexadecimal color code. A valid hexadecimal color code starts with a '#' and is followed by exactly 6 hexadecimal digits. :param s: string to check :return: True if s is a valid hex color code, False otherwise hex_color_regex = r'^#[0-9A-Fa-f]{6}' return bool(re.match(hex_color_regex, s))"},{"question":"Write a python function to remove all occurrences of the largest number from a list. If the list is empty, return an empty list.","solution":"def remove_largest_numbers(lst): Removes all occurrences of the largest number in a list. If the list is empty, returns an empty list. if not lst: return [] largest_number = max(lst) return [x for x in lst if x != largest_number]"},{"question":"Write a python function to perform a quicksort on a list of numbers.","solution":"def quicksort(arr): Performs quicksort on a list of numbers. :param arr: List of numbers to be sorted :return: Sorted list of numbers if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"},{"question":"Write a python function to find the maximum element in an array using a heap data structure. In the Python language, the heapq module provides an implementation of the heap queue or priority queue algorithm. This function should use this module to find and return the maximum element.","solution":"import heapq def find_max_using_heap(arr): Finds the maximum element in the array using heap. :param arr: List of numbers. :return: Maximum element in the array. if not arr: return None # Convert the list to a min-heap heapq.heapify(arr) # We use negative values to use the min-heap as a max-heap max_heap = [-x for x in arr] heapq.heapify(max_heap) # Get the maximum element (which is the smallest in the max-heap) return -heapq.heappop(max_heap)"},{"question":"Write a python function to calculate the Jaynes-Cummings model for a qubit and a single photon in two-level systems.","solution":"import numpy as np def jaynes_cummings_model(g, t): Simulate the Jaynes-Cummings model for a qubit and a single photon in two-level systems. Parameters: g (float): Coupling constant. t (float): Time evolution parameter. Returns: numpy.ndarray: Probabilities of the excited state and ground state for the qubit respectively. # Probability amplitude of being in excited state |e,0> C_eg = np.cos(g * t) # Probability amplitude of being in ground state |g,1> C_g1 = -1j * np.sin(g * t) # Probabilities: P_e = np.abs(C_eg) ** 2 P_g = np.abs(C_g1) ** 2 return np.array([P_e, P_g])"},{"question":"Write a python function to check if a given number is a palindrome in both binary and decimal representation.","solution":"def is_palindrome(s): Helper function to check if a given string is a palindrome. return s == s[::-1] def is_binary_decimal_palindrome(n): Check if a given number is a palindrome in both binary and decimal representation. Parameters: n (int): The number to check Returns: bool: True if the number is a palindrome in both representations, False otherwise. decimal_str = str(n) binary_str = bin(n)[2:] return is_palindrome(decimal_str) and is_palindrome(binary_str)"},{"question":"Write a python function to calculate the sum of elements in a given list. The function should handle the case where the list may contain elements of different data types (e.g., integers, floats) and should ignore non-numeric values.","solution":"def sum_of_elements(lst): Calculates the sum of numeric elements in the given list, ignoring non-numeric values. Parameters: lst (list): The list containing elements of various data types. Returns: float: The sum of all numeric elements in the list. total = 0 for item in lst: if isinstance(item, (int, float)): total += item return total"},{"question":"Write a python function to find the largest prime number within a given range [m, n] where m and n are both inclusive. If there are no prime numbers in the range, the function should return -1.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def largest_prime_in_range(m, n): Returns the largest prime number in the range [m, n]. If no primes are found, return -1. largest_prime = -1 for num in range(n, m-1, -1): if is_prime(num): largest_prime = num break return largest_prime"},{"question":"Write a python function to take input of a 3-digit number and check whether the sum of the digits is divisible by 3.","solution":"def is_sum_of_digits_divisible_by_3(number): Checks whether the sum of the digits of a 3-digit number is divisible by 3. Parameters: number (int): The 3-digit number to check. Returns: bool: True if the sum of the digits is divisible by 3, False otherwise. if not 100 <= number <= 999: raise ValueError(\\"The input number must be a 3-digit number.\\") digit_sum = sum(int(digit) for digit in str(number)) return digit_sum % 3 == 0"},{"question":"Write a python function to generate and return a URL-encoded version of a given string.","solution":"import urllib.parse def url_encode(input_str): Returns the URL-encoded version of the given string. return urllib.parse.quote(input_str)"},{"question":"Write a python function to find the frequency of a number in a given list. The function should return a dictionary where the key is the number and the value is the number of times it appears in the list.","solution":"def frequency_of_numbers(lst): Returns a dictionary with the frequency of each number in the list. Parameters: lst (list): A list of integers. Returns: dict: A dictionary where the keys are the numbers from the list, and the values are the count of each number's occurrences. frequency_dict = {} for num in lst: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return frequency_dict"},{"question":"Write a python function to validate if an input string is a valid IP address, IPv4 or IPv6. An IP address is considered valid if it follows the standard formatting of IPv4 or IPv6.","solution":"import re def is_valid_ip(ip): Validates if the given string is a valid IPv4 or IPv6 address. ipv4_pattern = re.compile(r'^((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9]).){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])') ipv6_pattern = re.compile(r'^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|' r'([0-9a-fA-F]{1,4}:){1,7}:|' r'([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|' r'([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|' r'([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|' r'([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|' r'([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|' r'[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|' r':((:[0-9a-fA-F]{1,4}){1,7}|:)|' r'fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|' r'::(ffff(:0{1,4}){0,1}:){0,1}' r'((25[0-5]|(2[0-4]|1{0,1}[0-9]|)[0-9]).){3,3}' r'(25[0-5]|(2[0-4]|1{0,1}[0-9]|)[0-9])|' r'([0-9a-fA-F]{1,4}:){1,4}:' r'((25[0-5]|(2[0-4]|1{0,1}[0-9]|)[0-9]).){3,3}' r'(25[0-5]|(2[0-4]|1{0,1}[0-9]|)[0-9]))') if ipv4_pattern.match(ip): return True elif ipv6_pattern.match(ip): return True else: return False"},{"question":"Write a python function to remove any redundant strings from a text file. A redundant string is defined as a string that appears more than once in the text file. Given that the text file is too large to read into memory all at once.","solution":"def remove_redundant_strings(file_path): from collections import defaultdict # Function to get the output file path def get_output_file_name(input_file_path): return f\\"{input_file_path.split('.')[0]}_cleaned.txt\\" # Reading the file line by line due to large size string_count = defaultdict(int) with open(file_path, 'r') as file: for line in file: string_count[line.strip()] += 1 # Writing to a new file without redundant strings output_file_path = get_output_file_name(file_path) with open(output_file_path, 'w') as output_file: with open(file_path, 'r') as file: for line in file: if string_count[line.strip()] == 1: output_file.write(line) return output_file_path"},{"question":"Write a python function to intersection of two sets.","solution":"def intersection(set1, set2): Returns the intersection of two sets. Parameters: set1 (set): A set of elements. set2 (set): Another set of elements. Returns: set: The intersection of set1 and set2. return set1 & set2"},{"question":"Write a python function to reverse the characters in each word of a sentence. For example, if the input sentence is \\"hello world\\", the output should be \\"olleh dlrow\\".","solution":"def reverse_characters_in_each_word(sentence): Returns a new sentence where each word has its characters reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to get the nth Fibonacci number, where n is a positive integer. The function should be optimized for large n.","solution":"def fibonacci(n): Returns the nth Fibonacci number. This function uses an iterative approach to handle large values of n efficiently. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a python function to check if a list is a prefix of another list. You should also include error handling to manage cases where the input is not a list.","solution":"def is_prefix(prefix, lst): Check if prefix is a prefix of lst. :param prefix: Potential prefix list :param lst: List to be checked against :return: True if prefix is a prefix of lst, False otherwise if not isinstance(prefix, list) or not isinstance(lst, list): raise ValueError(\\"Both arguments must be lists\\") return lst[:len(prefix)] == prefix"},{"question":"Write a python function to generate the Fibonacci Sequence up to the nth term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Here's how it starts: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write a python function to return the number of elements in a list that are not integers.","solution":"def count_non_integers(lst): Returns the number of elements in the list that are not integers. Parameters: lst (list): A list of elements Returns: int: Number of non-integer elements in the list return sum(1 for x in lst if not isinstance(x, int))"},{"question":"Write a python function to identify and print common elements in two lists.","solution":"def find_common_elements(list1, list2): Returns a list of common elements in list1 and list2. return list(set(list1) & set(list2))"},{"question":"Write a python function to find the minimum cost of inorder traversal of a tree. In this traversal, each node needs to be visited and traversed in an inorder manner (left, root, right). Each node costs a certain amount, and the cost of traversing a node depends on the path length from the root to the node.","solution":"class TreeNode: def __init__(self, value, cost, left=None, right=None): self.value = value self.cost = cost self.left = left self.right = right def min_inorder_cost(node, depth=0): Returns the minimum cost of inorder traversal of a tree. Each node has an associated cost and the cost of traversing a node depends on the path length from the root. if node is None: return 0 left_cost = min_inorder_cost(node.left, depth + 1) right_cost = min_inorder_cost(node.right, depth + 1) return left_cost + (depth * node.cost) + right_cost"},{"question":"Write a python function to calculate the factorial of a number, but with caching to improve performance for frequently requested numbers.","solution":"import functools @functools.lru_cache(maxsize=None) def factorial(n): Computes the factorial of a given number n using caching to improve performance. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to search for a key in an in-order traversal result of a binary search tree (BST). The function should return the first occurrence of the key if it exists, and \`None\` if it doesn't. Assume the BST is not empty.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def inorder_traversal(root, result=None): if result is None: result = [] if root is not None: inorder_traversal(root.left, result) result.append(root.key) inorder_traversal(root.right, result) return result def search_in_bst(root, key): # Perform in-order traversal inorder_list = inorder_traversal(root) # Search for the key in the in-order traversal result for val in inorder_list: if val == key: return val return None"},{"question":"Write a python function to reverse a string using slicing. You can make use of string slicing to solve this problem. Sstring slicing is a useful technique in Python for extracting a part or a subpart of a string. It works by providing start, stop, and step parameters.","solution":"def reverse_string(s): Returns the reverse of the input string \`s\` using slicing. return s[::-1]"},{"question":"Write a python function to calculate the number of lines in a given list of strings. The function should take a list of strings as input and return the total count of lines. Each string in the list represents a line of text.","solution":"def count_lines(string_list): Returns the total number of lines in the given list of strings. Args: string_list (list of str): List of strings representing lines of text Returns: int: Total count of lines return len(string_list)"},{"question":"Write a python function to sort an array in such a way that elements at even indices are in increasing order and elements at odd indices are in decreasing order.","solution":"def sort_even_odd(arr): Sorts the array such that elements at even indices are in increasing order and elements at odd indices are in decreasing order. if not arr: return arr even_indices = sorted(arr[::2]) odd_indices = sorted(arr[1::2], reverse=True) result = [] even_iter = iter(even_indices) odd_iter = iter(odd_indices) for i in range(len(arr)): if i % 2 == 0: result.append(next(even_iter)) else: result.append(next(odd_iter)) return result"},{"question":"Write a python function to merge overlapping intervals in a list. The intervals are given as tuples of two values, representing the start and end points of the interval. The function should return a new list of merged intervals in ascending order of their start points.","solution":"def merge_intervals(intervals): Merges overlapping intervals from a list of tuples. Args: intervals (list of tuples): List of intervals where each interval is represented as a tuple (start, end). Returns: list of tuples: List of merged intervals in ascending order of their start points. if not intervals: return [] # Sort the intervals by their start points intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged is empty or the current interval does not overlap with the previous, append it if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is an overlap, merge the current and previous intervals merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) return merged"},{"question":"Write a python function to print the first 10 prime numbers. How can I approach this problem?","solution":"def is_prime(num): Check if a number is prime. :param num: integer to check :return: True if num is prime, else False if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def first_10_primes(): Print the first 10 prime numbers. primes = [] num = 2 while len(primes) < 10: if is_prime(num): primes.append(num) num += 1 print(primes) return primes"},{"question":"Write a python function to calculate the area of a rectangle given its length and width. The function should also handle cases where the length or width is negative, by raising a ValueError with an appropriate message.","solution":"def rectangle_area(length, width): Calculate the area of a rectangle given its length and width. Raise a ValueError if length or width is negative. if length < 0 or width < 0: raise ValueError(\\"Length and width must be non-negative values.\\") return length * width"},{"question":"Write a python function to print out all Fibonacci numbers below a certain number n.","solution":"def fibonacci_below_n(n): Prints all Fibonacci numbers below a certain number n. if n <= 0: return [] fib_numbers = [] a, b = 0, 1 while a < n: fib_numbers.append(a) a, b = b, a + b return fib_numbers"},{"question":"Write a python function to flip a binary string (convert all '0's to '1's and all '1's to '0's).","solution":"def flip_binary_string(binary_string): Flips a binary string, converting all '0's to '1's and all '1's to '0's. Args: - binary_string (str): A string consisting of '0' and '1' characters. Returns: - str: The flipped binary string. return ''.join('1' if char == '0' else '0' for char in binary_string)"},{"question":"Write a python function to find the most repeated word in a given string \`s\` and return it. If there are multiple words with the same highest frequency, return the one that appears first in the string. The function should also handle punctuation and consider words in a case-insensitive manner.","solution":"import re from collections import defaultdict def most_repeated_word(s): Returns the most repeated word in the given string \`s\`. If there are multiple words with the same highest frequency, it returns the one that appears first in the string. # Convert to lowercase and find words using regex words = re.findall(r'bw+b', s.lower()) # Default dictionary to store word counts word_count = defaultdict(int) # Count the occurrences of each word for word in words: word_count[word] += 1 # Determine the word with the highest frequency max_count = 0 most_repeated = None for word in words: if word_count[word] > max_count: max_count = word_count[word] most_repeated = word return most_repeated"},{"question":"Write a python function to implement binary search. Binary search is an efficient search algorithm that works on sorted arrays. It repeatedly divides the search interval in half. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.","solution":"def binary_search(arr, target): Perform binary search on the sorted array to find the index of the target element. Parameters: arr (list): A sorted list of elements target: The element to search for in the list Returns: int: The index of the target element if found, otherwise -1 low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Write a python function to remove the duplicate elements from an array.","solution":"def remove_duplicates(arr): Removes duplicate elements from an array. Parameters: arr (list): The input array. Returns: list: A new array with duplicate elements removed. return list(set(arr))"},{"question":"Write a python function to perform image scaling using the nearest neighbor interpolation method. Nearest neighbor interpolation is a simple image scaling algorithm that works by mapping each of the new pixels to be the same as the pixel nearest to the corresponding location in the original image.","solution":"import numpy as np def nearest_neighbor_interpolation(image, new_height, new_width): Scales an image using nearest neighbor interpolation. :param image: numpy array of shape (height, width, channels) :param new_height: new height of the scaled image :param new_width: new width of the scaled image :return: scaled image as numpy array of shape (new_height, new_width, channels) old_height, old_width, channels = image.shape scaled_image = np.zeros((new_height, new_width, channels), dtype=image.dtype) row_scale = old_height / new_height col_scale = old_width / new_width for i in range(new_height): for j in range(new_width): old_i = int(i * row_scale) old_j = int(j * col_scale) scaled_image[i, j] = image[old_i, old_j] return scaled_image"},{"question":"Write a python function to find the maximum possible sum of a contiguous subarray within a one-dimensional array of numbers. This is known as the Maximum Subarray Problem and it can be solved using Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum possible sum of a contiguous subarray within a one-dimensional array of numbers. Uses Kadane's Algorithm. :param nums: List[int] - a list of integers :return: int - the maximum sum of a contiguous subarray if not nums: return 0 # Assuming the maximum sum for an empty array is 0. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to count the number of distinct pairs of numbers in a list that sum up to a given target number. For example, for the list \`[2, 4, 7, -1, 3, 5]\` and a target sum of 10, the function should return 5, since there are five distinct pairs that sum up to 10.","solution":"def count_pairs_with_sum(nums, target): Returns the number of distinct pairs in the list nums that sum up to the target number. Args: nums: List[int] - List of integers where the pairs are to be found. target: int - The target sum for the pairs. Returns: int - The count of distinct pairs with the given sum. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Write a python function to find the nth Fibonacci number. The function should be able to handle both positive and negative integers by using memoization to optimize performance for negative integers as well, by evaluating them in reverse order if necessary. For negative integers, the Fibonacci sequence is defined as F(n) = F(n+2) - F(n+1).","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number. Handles both positive and negative integers. if n in memo: return memo[n] if n == 0: result = 0 elif n == 1: result = 1 elif n == -1: result = 1 elif n > 1: result = fibonacci(n-1, memo) + fibonacci(n-2, memo) else: result = fibonacci(n+2, memo) - fibonacci(n+1, memo) memo[n] = result return result"},{"question":"Write a python function to perform the In-Order Traversal of a Binary Tree. This function should return a list of values representing the In-Order Traversal of the given Binary Tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def in_order_traversal(root): Performs an in-order traversal of a binary tree. :param root: TreeNode, the root of the binary tree :return: list of values representing the in-order traversal result = [] def traverse(node): if node is not None: traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Write a python function to find the kth largest element in an unsorted array using the Min-Heap approach in Python.","solution":"import heapq def find_kth_largest(nums, k): Finds the kth largest element in an unsorted array using the Min-Heap approach. Parameters: nums (list): The list of numbers in which to find the kth largest element. k (int): The index of the largest element to find. Returns: int: The kth largest element in the list. min_heap = nums[:k] heapq.heapify(min_heap) for num in nums[k:]: if num > min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, num) return min_heap[0]"},{"question":"Write a python function to check if a given number is odd using the bitwise XOR operator. The function should return \`True\` if the number is odd, and \`False\` otherwise.","solution":"def is_odd(number): Returns True if the provided number is odd, else False. Uses the bitwise XOR operator to determine if a number is odd. return (number ^ 1) == number - 1"},{"question":"Write a python function to print all the solutions for a given string \`s\` and an integer \`k\` where \`s\` is the string and \`k\` is the number of characters to be replaced with the \`k\`th character of the string.","solution":"def replace_kth_character(s, k): Replace each character in the string \`s\` with the \`k\`th character of the string. If \`k\` is out of bounds (i.e., greater than or equal to the length of the string), return the original string. if k < 0 or k >= len(s): return s kth_char = s[k] return kth_char * len(s)"},{"question":"Write a python function to compute and return the interquartile range of a given list of numbers. The interquartile range (IQR) is the difference between the third quartile (Q3) and the first quartile (Q1) of the data. For example, if the input list is [1, 2, 3, 4, 5, 6, 7, 8, 9], the function should return 2.5.","solution":"def interquartile_range(data): Computes and returns the interquartile range (IQR) of a given list of numbers. IQR is defined as the difference between Q3 (75th percentile) and Q1 (25th percentile). if not data: return 0 sorted_data = sorted(data) n = len(sorted_data) def percentile(lst, percent): k = (len(lst) - 1) * percent / 100 f = int(k) c = f + 1 if c >= len(lst): return lst[f] return lst[f] + (lst[c] - lst[f]) * (k - f) Q1 = percentile(sorted_data, 25) Q3 = percentile(sorted_data, 75) return Q3 - Q1"},{"question":"Write a python function to find the duplicate values in a list. For example, in the list \`[1, 2, 2, 3, 4, 4, 5]\`, the function should return \`[2, 4]\`.","solution":"def find_duplicates(lst): Returns a list of duplicate values from the input list. Parameters: lst (list): The input list from which duplicates are to be found. Returns: list: A list of duplicate values. from collections import Counter counter = Counter(lst) return [item for item, count in counter.items() if count > 1]"},{"question":"Write a python function to sort a list of strings based on the length of the strings using the Quick Sort algorithm.","solution":"def quick_sort_strings_by_length(strings): Sorts a list of strings based on the length of the strings using the Quick Sort algorithm. if len(strings) <= 1: return strings pivot = strings[len(strings) // 2] left = [x for x in strings if len(x) < len(pivot)] middle = [x for x in strings if len(x) == len(pivot)] right = [x for x in strings if len(x) > len(pivot)] return quick_sort_strings_by_length(left) + middle + quick_sort_strings_by_length(right)"},{"question":"Write a python function to generate the nth Fibonacci number using a recursive approach. The function should have a default parameter value of 10 for n.","solution":"def fibonacci(n=10): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a python function to calculate the sum of squares of the first n natural numbers. You should use a loop to implement this.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. Parameters: n (int): The number of first natural numbers to sum the squares. Returns: int: The sum of the squares of the first n natural numbers. total = 0 for i in range(1, n+1): total += i ** 2 return total"},{"question":"Write a python function to find the most frequently occurring character in a given string.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in a given string. In case of a tie, return any one of the most frequent characters. if not s: # if the string is empty, return None return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 most_frequent = max(char_count, key=char_count.get) return most_frequent"},{"question":"Write a python function to sort an array without using the built-in sort function. Implement the sorting algorithm of your choice. You must also provide a best-case, average-case, and worst-case time complexity analysis of your solution.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort algorithm. Time Complexity: - Best-case: O(n) when the array is already sorted. - Average-case: O(n^2) when the array elements are in random order. - Worst-case: O(n^2) when the array is sorted in reverse order. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Write a python function to remove the duplicate elements from a list and return a new list with the unique elements, preserving the original order of appearance.","solution":"def remove_duplicates(lst): Remove duplicate elements from the list and return a new list with unique elements, preserving the original order of appearance. seen = set() unique_list = [] for item in lst: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a python function to check if a given number is a palindrome number, considering both integer and floating point numbers.","solution":"def is_palindrome_number(n): Check if a given number is a palindrome. Parameters: n (int or float): The number to check. Returns: bool: True if the number is a palindrome, False otherwise. # Convert number to string str_n = str(n) # Remove any decimal points str_n = str_n.replace('.', '') # Check if the string is equal to its reverse return str_n == str_n[::-1]"},{"question":"Write a python function to implement a stack using a list in Python. A stack is a Last In First Out (LIFO) data structure. Your function should include operations for pushing an element onto the stack, popping an element from the stack, and checking if the stack is empty.","solution":"class Stack: def __init__(self): Initialize an empty stack. self.items = [] def push(self, item): Pushes an item onto the stack. Args: item : Any The item to be pushed onto the stack. self.items.append(item) def pop(self): Pops the top item off the stack and returns it. Returns: Any The item at the top of the stack. Returns None if the stack is empty. if not self.is_empty(): return self.items.pop() return None def is_empty(self): Checks if the stack is empty. Returns: bool True if the stack is empty, False otherwise. return len(self.items) == 0"},{"question":"Write a python function to find elements which are present in lists but not in tuples.","solution":"def elements_in_lists_not_in_tuples(lists, tuples): Returns a list of elements that are present in the list but not in the tuple. :param lists: list of elements :param tuples: tuple of elements :return: list of elements return [element for element in lists if element not in tuples]"},{"question":"Write a python function to print all words in a given sentence that have more than three characters.","solution":"def words_more_than_three_chars(sentence): Returns a list of words from the given sentence that have more than three characters. words = sentence.split() return [word for word in words if len(word) > 3]"},{"question":"Write a python function to check if a list of numbers forms a palette memory. A palette memory is a list where each element is a string representing a color in hexadecimal format, and every color is surrounded by a space, except for the first and last elements. The function should return True if the list is a palette memory, and False otherwise. For example, ['#FFFFFF ', '#000000 ', '#FFA500 '] is a valid palette memory, whereas ['#FFFFFF', '#000000', '#FFA500'] and ['#FFFFFF ', '#000000', '#FFA500 '] are not.","solution":"def is_palette_memory(palette): Checks if a list of strings represents a palette memory. A palette memory is a list where each element is a string representing a color in hexadecimal format, and every color is surrounded by a space, except for the first and last elements. Parameters: palette (list of str): The list of strings to check. Returns: bool: True if it's a palette memory, False otherwise. n = len(palette) if n == 0: return False for i in range(n): if i == 0 or i == n-1: # first and last elements should not have trailing space if len(palette[i]) != 7 or not palette[i].startswith('#') or palette[i][-1] == ' ': return False else: if len(palette[i]) != 8 or not palette[i].startswith('#') or palette[i][-1] != ' ': return False return True"},{"question":"Write a python function to find the duplicate number in an array of integers ranging from 1 to n where n is the size of the array. The function should return the duplicate number.","solution":"def find_duplicate(nums): Returns the duplicate number in an array of integers ranging from 1 to n. The array must have exactly one duplicate and one number missing. # Using Floyd's Tortoise and Hare (Cycle Detection) algorithm slow = nums[0] fast = nums[0] # Phase 1: Finding the intersection point of the two runners. while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Phase 2: Find the entrance to the cycle (i.e., the duplicate number) slow = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Write a python function to convert grams to kilograms.","solution":"def grams_to_kilograms(grams): Converts grams to kilograms. Parameters: grams (float): The weight in grams. Returns: float: The weight in kilograms. return grams / 1000"},{"question":"Write a python function to extract positive numbers from a list using list comprehension.","solution":"def extract_positive_numbers(numbers): Extracts positive numbers from a list using list comprehension. Args: numbers (list): A list of integers or floats. Returns: list: A list containing only the positive numbers from the input list. return [num for num in numbers if num > 0]"},{"question":"Write a python function to sum the following series: ( sum_{i=0}^{n} frac{1}{i!} ) where ( n ) is a non-negative integer provided as input.","solution":"import math def sum_series(n): Returns the sum of the series 1 + 1/1! + 1/2! + ... + 1/n! where n is a non-negative integer. return sum(1 / math.factorial(i) for i in range(n+1))"},{"question":"Write a python function to find the maximum number in a list of integers. If the list is empty, the function should return \`None\`. Also, ensure that your function handles non-integer values gracefully by ignoring them.","solution":"def find_max(numbers): Returns the maximum integer from the list of numbers. If the list is empty or contains no valid integers, returns None. Non-integer values are ignored. if not numbers: return None integers = [num for num in numbers if isinstance(num, int)] if not integers: return None return max(integers)"},{"question":"Write a python function to find the intersection of two sets. The function should handle empty sets and sets containing duplicate elements.","solution":"def intersection(set1, set2): Returns the intersection of two sets. The function handles empty sets and sets containing duplicate elements. return set(set1) & set(set2)"},{"question":"Write a python function to read data from a CSV file and return the data as a list of tuples. Each tuple should contain the values of one row from the CSV.","solution":"import csv def read_csv_to_tuples(file_path): Reads data from a CSV file and returns it as a list of tuples. Args: file_path (str): The path to the CSV file. Returns: List[Tuple]: A list of tuples, where each tuple contains the values of one row from the CSV. data = [] with open(file_path, newline='') as csvfile: csvreader = csv.reader(csvfile) for row in csvreader: data.append(tuple(row)) return data"},{"question":"Write a python function to sort an array using the Quicksort algorithm. What are the pros and cons of using Quicksort?","solution":"def quicksort(arr): Sorts an array in ascending order using the Quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) # Pros of Quicksort: # 1. Average and Best case time complexity is O(n log n). # 2. Performs well in practice for most typical input data. # 3. It is an in-place sort (does not require additional storage) for many implementations. # 4. Works well with cache due to good locality of reference. # Cons of Quicksort: # 1. Worst-case time complexity is O(n^2), although this can be mitigated with good pivot selection. # 2. Not a stable sort, meaning that it does not preserve the relative order of equal elements. # 3. Recursive implementation can lead to stack overflow if not implemented carefully."},{"question":"Write a python function to find the maximum product of pairs in a given list. The function should take a list of integers as input and return the maximum product of any two distinct elements in the list. If the list contains less than 2 elements, return \`-1\` as no valid pair can be formed.","solution":"def max_product_of_pairs(lst): Returns the maximum product of any two distinct elements in the list. If list contains less than 2 elements, return -1. if len(lst) < 2: return -1 lst.sort(reverse=True) return max(lst[0] * lst[1], lst[-1] * lst[-2])"},{"question":"Write a python function to multiply two matrices, \`A\` and \`B\`, given that they are 2D lists (matrices) of integers. The matrices must have compatible dimensions for multiplication (i.e., the number of columns in \`A\` must equal the number of rows in \`B\`). Return the resulting matrix as a 2D list. If the dimensions are not compatible, return an appropriate message.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B and returns the result as a new matrix. Parameters: A (list of lists of int): The first matrix. B (list of lists of int): The second matrix. Returns: list of lists of int: The resultant matrix after multiplication. str: Error message if matrices are not compatible for multiplication. # Get the dimensions of the matrices rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) # Check if matrices A and B are compatible for multiplication if cols_A != rows_B: return \\"Matrices are not compatible for multiplication.\\" # Initialize the resulting matrix with zeros result_matrix = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): # or equivalently range(rows_B) result_matrix[i][j] += A[i][k] * B[k][j] return result_matrix"},{"question":"Write a python function to count the number of occurrences of each word in a given text, and return a dictionary with words as keys and their counts as values.","solution":"def count_word_occurrences(text): Returns a dictionary with words as keys and their counts as values. word_count = {} words = text.split() for word in words: word = word.lower().strip('.,!?\\";:()[]{}') if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Write a python function to check if a given sequence is a palindrome or not.","solution":"def is_palindrome(sequence): Checks if the given sequence is a palindrome. A palindrome is a sequence that reads the same backward as forward. Parameters: sequence (str): The sequence to check. Returns: bool: True if the sequence is a palindrome, False otherwise. return sequence == sequence[::-1]"},{"question":"Write a python function to remove adjacent duplicates from a list.","solution":"def remove_adjacent_duplicates(lst): Removes adjacent duplicates from a list. :param lst: List of elements :return: A list with all adjacent duplicates removed if not lst: return [] # Initialize the new list with the first element of the input list result = [lst[0]] # Iterate over the list starting from the second element for element in lst[1:]: # Only add the element if it is different from the last element added if element != result[-1]: result.append(element) return result"},{"question":"Write a python function to check if a string contains any special characters. Special characters are those which are not letters, numbers and underscores.","solution":"import re def contains_special_characters(s): Checks if the string contains any special characters. Special characters are those which are not letters, numbers, or underscores. :param s: input string :return: True if special characters are present, False otherwise return bool(re.search(r'[^a-zA-Z0-9_]', s))"},{"question":"Write a python function to calculate the maximum sum of a non-empty subarray.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a non-empty subarray. if not nums: raise ValueError(\\"The input array must not be empty.\\") max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to reverse a string using recursion. Ensure that your function handles empty strings and strings with a single character.","solution":"def reverse_string(s): Reverses a string using recursion. if s == \\"\\": return s else: return reverse_string(s[1:]) + s[0]"},{"question":"Write a python function to print the Nth node from the end of a given linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def get_nth_from_end(head, n): Returns the value of the Nth node from the end of the linked list. main_ptr = head ref_ptr = head count = 0 while count < n: if ref_ptr is None: return -1 # If n is more than the number of nodes in the list ref_ptr = ref_ptr.next count += 1 while ref_ptr is not None: main_ptr = main_ptr.next ref_ptr = ref_ptr.next return main_ptr.value if main_ptr else -1"},{"question":"Write a python function to calculate and return the factorial of a given number 'n'. The function should handle both positive and non-negative inputs, and return an appropriate error message for invalid inputs (like strings or negative numbers that are not integers). Additionally, ensure that your function uses an iterative approach rather than a recursive one for better educational value.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is not a non-negative integer, returns an error message. if not isinstance(n, int) or n < 0: return \\"Error: Input must be a non-negative integer.\\" result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to replace empty \`\\"\\"\` strings in a list with the word \`\\"missing\\"\`.","solution":"def replace_empty_strings_with_missing(lst): Replaces empty strings in the list with the word 'missing'. Args: lst (list): List of strings. Returns: list: List with empty strings replaced by 'missing'. return [\\"missing\\" if item == \\"\\" else item for item in lst]"},{"question":"Write a python function to identify and return the longest subsequence of a given list that is strictly increasing. This subsequence does not have to be contiguous or unique. For example, in the list [1, 3, 0, 2, 5, 8, 6], the longest strictly increasing subsequence is [2, 5, 8].","solution":"def longest_increasing_subsequence(arr): Returns the longest strictly increasing subsequence of the given list. if not arr: return [] n = len(arr) lis = [1] * n prev_index = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev_index[i] = j max_length = max(lis) max_index = lis.index(max_length) subsequence = [] current_index = max_index while current_index != -1: subsequence.append(arr[current_index]) current_index = prev_index[current_index] return subsequence[::-1]"},{"question":"Write a python function to find the two numbers that add up to a specific target. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.","solution":"def two_sum(nums, target): Finds two indices of numbers in nums that add up to the target. Parameters: nums (list): List of integers. target (int): The target sum. Returns: list: Indices of the two numbers that add up to target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return [] # In case no solution is found."},{"question":"Write a python function to find the maximum sum of a subarray in a 2D array. You are allowed to move in four directions: up, down, left, and right. The function should take a 2D array of integers as input and return the maximum sum.","solution":"def max_sum_subarray_2d(arr): Finds the maximum sum of a subarray in a 2D array allowing moves in all four directions. Implementation uses Kadane's Algorithm for 2D arrays. if not arr or not arr[0]: return 0 rows = len(arr) cols = len(arr[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += arr[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def kadane(arr): Helper function to find the maximum sum of a 1D array using Kadane's algorithm. max_sum = float('-inf') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to define a list, named \\"test_list\\", containing 5 tuples where each tuple contains two integers. Then, write a loop to print each integer in test_list. How can we optimize the code for better performance?","solution":"def create_and_print_test_list(): Creates a list of 5 tuples where each tuple contains two integers, then prints each integer in the tuples. test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)] for a, b in test_list: print(a) print(b) def optimized_create_and_print_test_list(): Optimized version to create a list of 5 tuples where each tuple contains two integers, then prints each integer in the tuples. test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)] list(map(lambda x: (print(x[0]), print(x[1])), test_list))"},{"question":"Write a python function to compute the factorial of a given number. You cannot use the built-in factorial function. The function should be named \`factorial\` and take one parameter \`n\`.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to find the second largest number in a list. If the list has less than two elements, return \`None\`. For example, given the input list \`[10, 20, 30, 40, 50]\`, the output should be \`40\`. If the input list is \`[5, 5, 5, 5]\`, the output should be \`None\` since all elements are the same.","solution":"def second_largest(numbers): Returns the second largest number in a list. If the list has less than two unique elements, returns None. if len(numbers) < 2: return None # Remove duplicates and sort the list unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None # Sort the unique numbers in descending order unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a python function to calculate the sum of all numbers in a list. If the list contains a zero, the function should return 'Error' as the presence of zero means that the sum will always be zero due to its property in multiplication.","solution":"def sum_list(numbers): Returns the sum of all numbers in the list. If the list contains zero, returns 'Error'. :param numbers: List of integers :return: Integer sum of the list or 'Error' if zero is present if 0 in numbers: return 'Error' return sum(numbers)"},{"question":"Write a python function to shuffle a deck of cards. A standard deck of cards has 52 cards, divided into 4 suits of 13 cards each (hearts, diamonds, clubs, spades). Each card should be represented as a string with its rank followed by its suit. For example, \\"2H\\" means the 2 of hearts, \\"10D\\" means the 10 of diamonds, \\"QS\\" means the Queen of spades, and so on. The function should take no arguments and should return a list of shuffled cards.","solution":"import random def shuffle_deck(): Returns a shuffled deck of 52 cards. suits = ['H', 'D', 'C', 'S'] ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'] deck = [rank + suit for suit in suits for rank in ranks] random.shuffle(deck) return deck"},{"question":"Write a python function to reverse the elements of an array without using built-in functions or additional data structures. You should modify the array in place and only use a single loop to achieve this.","solution":"def reverse_array_in_place(arr): Reverses the elements of the array in place using only a single loop. n = len(arr) for i in range(n // 2): # Swap the elements arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i] return arr"},{"question":"Write a python function to read the contents of a file and return them as a string. If the file does not exist, the function should return \`None\`.","solution":"def read_file_contents(file_path): Reads the contents of a file and returns them as a string. If the file does not exist, returns None. :param file_path: Path to the file :return: Contents of the file as a string or None if the file does not exist try: with open(file_path, 'r') as file: return file.read() except FileNotFoundError: return None"},{"question":"Write a python function to generate the nth Fibonacci number. The function should take an integer \`n\` as input and return the nth Fibonacci number. Make sure to handle the base cases for \`n=0\` and \`n=1\`.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2), for n > 1 if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to print BST in spiral form.","solution":"from collections import deque class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def spiral_order_bst(root): Print BST in spiral form. if not root: return [] result = [] deque_nodes = deque() deque_nodes.append(root) left_to_right = True while deque_nodes: level_size = len(deque_nodes) level_nodes = [] for _ in range(level_size): if left_to_right: node = deque_nodes.popleft() if node.left: deque_nodes.append(node.left) if node.right: deque_nodes.append(node.right) else: node = deque_nodes.pop() if node.right: deque_nodes.appendleft(node.right) if node.left: deque_nodes.appendleft(node.left) level_nodes.append(node.value) result.extend(level_nodes) left_to_right = not left_to_right return result"},{"question":"Write a python function to extract the domain name from a URL. What should the function return if the URL is invalid or does not contain a domain name?","solution":"from urllib.parse import urlparse def extract_domain(url): Extract the domain name from a given URL. :param url: The URL to extract the domain from. :return: The domain name if the URL is valid and contains a domain, otherwise None. try: parsed_url = urlparse(url) domain = parsed_url.netloc if domain: return domain return None except Exception: return None"},{"question":"Write a python function to return the \\"square root\\" of a number using the Newton method.","solution":"def newton_sqrt(number, tolerance=1e-10): Returns the square root of a number using the Newton method (also known as the Heron's method). Args: number (float): The number to find the square root of. It should be non-negative. tolerance (float): The convergence tolerance. The function returns when the difference between successive approximations is smaller than this value. Returns: float: The square root of the given number. if number < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") if number == 0: return 0 # Initial guess will be half of the number (better guesses can be used) guess = number / 2.0 while True: # Newton's method formula: guess = (guess + number / guess) / 2 previous_guess = guess guess = (guess + number / guess) / 2 # Check the difference between the current guess and the previous guess if abs(guess - previous_guess) < tolerance: return guess"},{"question":"Write a python function to generate the fibonacci sequence in a list with a max value. The function should accept two integers as parameters: the index of the first item to return and the maximum value of the sequence. Here is the erroneous python function.","solution":"def fibonacci(start_index, max_value): Generates the Fibonacci sequence up to the max_value and returns a sublist of the sequence starting from start_index. :param start_index: The index of the first item to return. :param max_value: The maximum value of the sequence. :return: A list containing the Fibonacci sequence from start_index up to max_value. if max_value < 0: raise ValueError(\\"max_value must be non-negative\\") if start_index < 0: raise ValueError(\\"start_index must be non-negative\\") sequence = [] a, b = 0, 1 while a <= max_value: sequence.append(a) a, b = b, a + b return sequence[start_index:]"},{"question":"Write a python function to merge multiple sorted lists of integers into a single sorted list. The function should be able to handle any number of input lists, each potentially containing duplicates and sorted. The function should return the merge result as a single sorted list without duplicates. Additionally, the function should be a member of a class called \`ListMerger\` and should be named \`merge_lists\`.","solution":"from heapq import merge class ListMerger: @staticmethod def merge_lists(*lists): Merges multiple sorted lists into a single sorted list without duplicates. :param lists: Multiple sorted lists to be merged. :return: A single sorted list without duplicates. merged_list = list(merge(*lists)) unique_sorted_list = sorted(set(merged_list)) return unique_sorted_list"},{"question":"Write a python function to find the square root of a number without using any built-in functions or libraries for square root. Implement the function using the Bisection method or the Newton-Raphson method.","solution":"def sqrt_newton_raphson(number, tolerance=1e-7): Returns the square root of a number using the Newton-Raphson method. Parameters: number (float): The number whose square root is to be computed. tolerance (float): The accuracy of the result. Returns: float: The square root of the number. if number < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") if number == 0: return 0 guess = number / 2.0 while abs(guess * guess - number) > tolerance: guess = (guess + number / guess) / 2.0 return guess"},{"question":"Write a python function to check if a string contains only alphanumeric characters. You need to ensure your function works correctly for strings of various lengths, including empty strings.","solution":"def is_alphanumeric(s): Returns True if the string s contains only alphanumeric characters, False otherwise. return s.isalnum()"},{"question":"Write a python function to convert a decimal number to binary, floating numbers","solution":"def decimal_to_binary(num): Converts a decimal number to its binary representation. Parameters: num (int/float): The decimal number to be converted to binary. Returns: str: The binary representation of the decimal number. if isinstance(num, int): return bin(num).replace(\\"0b\\", \\"\\") elif isinstance(num, float): # Split the number into integer and decimal parts integer_part = int(num) decimal_part = num - integer_part # Convert integer part to binary binary_integer = bin(integer_part).replace(\\"0b\\", \\"\\") # Convert decimal part to binary binary_decimal = [] while decimal_part and len(binary_decimal) < 52: # Precision limit for float of 52 bits decimal_part *= 2 bit = int(decimal_part) binary_decimal.append(str(bit)) decimal_part -= bit return f\\"{binary_integer}.{''.join(binary_decimal)}\\" else: return \\"Invalid input\\""},{"question":"Write a python function to find if there is a subarray with a sum that is a multiple of a given number k.","solution":"def has_subarray_with_multiple_sum(arr, k): Determines if there is a subarray with a sum that is a multiple of k. Parameters: arr (list of int): The input array. k (int): The given number. Returns: bool: True if such a subarray exists, False otherwise. if not arr: # If the array is empty, return False return False prefix_sum_mod = {0} current_sum = 0 for num in arr: current_sum += num if k != 0: current_sum %= k if current_sum in prefix_sum_mod: return True prefix_sum_mod.add(current_sum) return False"},{"question":"Write a python function to print \\"Hello World\\" 10 times using the \`for\` loop.","solution":"def print_hello_world_10_times(): Prints \\"Hello World\\" 10 times using a for loop. for _ in range(10): print(\\"Hello World\\")"},{"question":"Write a python function to find the largest and smallest element in an array of integers.","solution":"def find_largest_and_smallest(arr): Returns a tuple with the largest and smallest element in the array. if not arr: raise ValueError(\\"Array must not be empty.\\") largest = arr[0] smallest = arr[0] for num in arr: if num > largest: largest = num if num < smallest: smallest = num return largest, smallest"},{"question":"Write a python function to create a simple web server that can serve files from a specified directory. The server should handle GET requests and serve files with the correct content type.","solution":"import http.server import socketserver import os import mimetypes def simple_web_server(port, directory): Create and run a simple web server serving files from the specified directory. Parameters: port (int): The port number on which the server will listen. directory (str): The directory from which files will be served. if not os.path.isdir(directory): raise ValueError(\\"The specified directory does not exist\\") os.chdir(directory) Handler = http.server.SimpleHTTPRequestHandler with socketserver.TCPServer((\\"\\", port), Handler) as httpd: print(f\\"Serving HTTP on port {port} from directory {directory}...\\") httpd.serve_forever()"},{"question":"Write a python function to find the maximum and minimum elements in an unsorted array and return both of them in a tuple format. If the array is empty, return (None, None).","solution":"def find_max_and_min(arr): Returns a tuple containing the maximum and minimum elements in the array. If the array is empty, returns (None, None). if not arr: return (None, None) max_elem = max(arr) min_elem = min(arr) return (max_elem, min_elem)"},{"question":"Write a python function to find the length of the longest increasing subsequence in a list. The list may contain integers or floating-point numbers.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the list of integers or floating-point numbers \`nums\`. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to check if a given string is a valid ISBN-13 number. An ISBN-13 number is a string of 13 characters that follows a specific pattern. The pattern is that the first 12 characters are digits, and the last character is a digit or a letter 'X', where 'X' represents the digit 10.","solution":"def is_valid_isbn13(isbn): Returns True if the given string is a valid ISBN-13 number, otherwise returns False. ISBN-13 must be a string of 13 characters, where the first 12 are digits and the last character is a digit or 'X'. if len(isbn) != 13: return False if not isbn[:-1].isdigit(): return False if not (isbn[-1].isdigit() or isbn[-1] == 'X'): return False return True"},{"question":"Write a python function to check if a specific element exists in a list. The function should return True if the element exists, and False otherwise.","solution":"def element_exists(lst, element): Checks if a specific element exists in a list. Parameters: lst (list): The list to check. element: The element to find in the list. Returns: bool: True if the element exists in the list, False otherwise. return element in lst"},{"question":"Write a python function to convert a string from lowercase to uppercase using built-in functions.","solution":"def to_uppercase(s): Converts a given string to uppercase. Parameters: s (str): The string to be converted. Returns: str: The converted uppercase string. return s.upper()"},{"question":"Write a python function to find the most frequent integer in a given sequence. If there are multiple integers with the same highest frequency, return all of them in ascending order.","solution":"from collections import Counter def most_frequent_integers(seq): Returns a list of the most frequent integers in the given sequence. If there are multiple integers with the same highest frequency, the result is sorted in ascending order. if not seq: return [] count = Counter(seq) max_freq = max(count.values()) most_frequent = [key for key, value in count.items() if value == max_freq] return sorted(most_frequent)"},{"question":"Write a python function to implement a simple \\"Guess the Number\\" game. The game should allow the user to guess a number between 1 and 100, providing feedback on whether the guess is too high, too low, or correct. The game should continue until the user guesses the number correctly.","solution":"import random def guess_the_number(target_number, user_guess): Checks the user's guess against the target number. Parameters: target_number (int): The number the user is trying to guess. user_guess (int): The user's guess for the target number. Returns: str: Feedback indicating if the guess is too high, too low, or correct. if user_guess < target_number: return \\"Your guess is too low.\\" elif user_guess > target_number: return \\"Your guess is too high.\\" else: return \\"Correct!\\" # Function to generate a random target number def generate_target_number(): return random.randint(1, 100)"},{"question":"Write a python function to implement a deep copy of a list. A deep copy is a process in which the copying process occurs recursively. Every object of a class is copied to new memory. Multiple objects can hold reference to the same object and if the reference object changes value, the changes are reflected in all the objects that hold references to it.","solution":"import copy def deep_copy_list(original_list): Returns a deep copy of the original list. return copy.deepcopy(original_list)"},{"question":"Write a python function to find the n-th Fibonacci number using recursion. How would you implement this function? Explain the recursion part.","solution":"def fibonacci(n): Compute the n-th Fibonacci number using recursion. :param n: the position in the Fibonacci sequence :return: the n-th Fibonacci number if n < 0: raise ValueError(\\"Input cannot be negative\\") elif n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a python function to sum up all the elements in a list. If the list is empty, return 0. If the list contains any non-numeric elements, the function should ignore them and continue with the summation.","solution":"def sum_elements(lst): Sums up all numeric elements in a list. Ignores non-numeric elements. Parameters: lst (list): The list containing elements to sum up. Returns: int/float: The sum of all numeric elements in the list. total = 0 for element in lst: if isinstance(element, (int, float)): total += element return total"},{"question":"Write a python function to create a directory named \\"directory_name\\" and write \\"Hello World\\" to a new file named \\"file_name\\" inside it. Ensure that the directory and file are only created if they do not already exist.","solution":"import os def create_directory_and_file(directory_name, file_name): Creates a directory named 'directory_name' and writes \\"Hello World\\" to a file named 'file_name' inside it. Ensures that the directory and file are only created if they do not already exist. # Check if directory exists; if not, create it if not os.path.exists(directory_name): os.makedirs(directory_name) # Define the full file path file_path = os.path.join(directory_name, file_name) # Check if file exists; if not, create it and write to it if not os.path.exists(file_path): with open(file_path, 'w') as file: file.write(\\"Hello World\\")"},{"question":"Write a python function to check if all numbers in a list have at least one digit. The function should return True if all numbers in the list are single-digit, otherwise, it should return False.","solution":"def all_single_digit(numbers): Returns True if all numbers in the list are single-digit, otherwise False. return all(0 <= abs(num) < 10 for num in numbers)"},{"question":"Write a python function to implement a simple Caesar cipher, which is a fundamental encryption technique involving rotating the alphabet by a certain number of positions. For example, with a rotation of 3, 'A' would be replaced by 'D', 'B' by 'E', and so on. The function should also handle uppercase and lowercase letters, and non-alphabet characters should remain unchanged.","solution":"def caesar_cipher(text, shift): Encrypts the input text using Caesar cipher with a given shift. Parameters: - text (str): Input text to be encrypted. - shift (int): Number of positions to rotate each alphabet character. Returns: - str: Encrypted text. result = [] for char in text: if char.isalpha(): shift_amount = shift % 26 shifted_char = chr(((ord(char) - ord('a') + shift_amount) % 26) + ord('a')) if char.islower() else chr(((ord(char) - ord('A') + shift_amount) % 26) + ord('A')) result.append(shifted_char) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to reverse the characters of the string passed to it.","solution":"def reverse_string(s): Returns the reverse of the string s. return s[::-1]"},{"question":"Write a python function to write the words of an array to a file.","solution":"def write_words_to_file(words, file_path): Write the words of an array to a file, one word per line. Parameters: words (list of str): The list of words to write to the file. file_path (str): The path of the file to write the words to. with open(file_path, 'w') as file: for word in words: file.write(word + 'n')"},{"question":"Write a python function to find the maximum subarray sum in an array with a size of n, where n is not greater than 1000. The array can contain both positive and negative integers. The time complexity of your solution should be O(n). You can use Kadane's algorithm to achieve this.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum using Kadane's algorithm. Parameters: arr (list): A list of integers (both positive and negative) with a length <= 1000. Returns: int: The maximum subarray sum. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to reverse the order of words in a string, but keep the characters in each word in the same order. For example, given the string \\"Hello world from Alibaba Cloud\\", the function should return \\"Cloud Alibaba from world Hello\\".","solution":"def reverse_words_order(sentence): Reverses the order of words in a given string, but keeps the characters in each word in the same order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to determine the next Fibonacci number in a given sequence.","solution":"def next_fibonacci(seq): Given a sequence of Fibonacci numbers, return the next Fibonacci number in the sequence. Args: seq: List[int] - A list of integers representing the current Fibonacci sequence. Returns: int - The next Fibonacci number in the sequence. if len(seq) < 2: raise ValueError(\\"The sequence must contain at least two Fibonacci numbers.\\") return seq[-1] + seq[-2]"},{"question":"Write a python function to count the number of substrings containing at most C distinct characters.","solution":"def count_substrings_with_at_most_k_distinct(s, k): Given a string s and an integer k, returns the count of substrings containing at most k distinct characters. n = len(s) if n == 0 or k == 0: return 0 start = 0 end = 0 count = 0 char_map = {} while end < n: if s[end] in char_map: char_map[s[end]] += 1 else: char_map[s[end]] = 1 while len(char_map) > k: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 count += end - start + 1 end += 1 return count"},{"question":"Write a python function to generate all possible subsets of a given set with an input size, n. I need assistance in both the logic and the code implementation, as I'm new to programming.","solution":"def generate_subsets(s): Generates all possible subsets of a given set s. Parameters: s (iterable): The input set from which to generate subsets. Returns: list: A list of all possible subsets. subsets = [] n = len(s) s = list(s) def backtrack(start, current_subset): subsets.append(current_subset[:]) for i in range(start, n): current_subset.append(s[i]) backtrack(i + 1, current_subset) current_subset.pop() backtrack(0, []) return subsets"},{"question":"Write a python function to check if all characters in a string appear only once. You can assume that the string contains only English letters and digits.","solution":"def are_all_characters_unique(s): Check if all characters in a string appear only once. Args: s (str): The input string containing only English letters and digits. Returns: bool: True if all characters are unique, False otherwise. return len(set(s)) == len(s)"},{"question":"Write a python function to find the first occurrence of a given substring in a string, without using the built-in \`.find()\` or \`.index()\` methods. You should return the index of the substring if it is found, otherwise return -1.","solution":"def find_substring(s, sub): Returns the index of the first occurrence of the substring \`sub\` in the string \`s\`. If the substring is not present in the string, returns -1. len_s = len(s) len_sub = len(sub) if len_sub == 0: return 0 for i in range(len_s - len_sub + 1): if s[i:i + len_sub] == sub: return i return -1"},{"question":"Write a python function to find the maximum values from a given list of numbers. If the list is empty, the function should return \`None\`. Additionally, the function should handle exceptions if the list contains non-numeric values and return a message indicating that some values were skipped during processing.","solution":"def find_maximum(numbers): Returns the maximum value from the list of numbers. If the list is empty, returns None. If the list contains non-numeric values, they will be skipped and an appropriate message will be shown. if not numbers: return None max_value = None non_numeric_found = False for num in numbers: try: num = float(num) except (ValueError, TypeError): non_numeric_found = True continue if max_value is None or num > max_value: max_value = num if non_numeric_found: print(\\"Some non-numeric values were skipped during processing.\\") return max_value"},{"question":"Write a python function to calculate the factorial of a number. The function should handle large numbers and perform calculations quickly. Which libraries can be used for this task, and how can we use them effectively?","solution":"import math import sympy def factorial(n): Returns the factorial of n using the sympy library which can handle very large numbers efficiently. return int(sympy.factorial(n)) def math_factorial(n): Returns the factorial of n using the math library's factorial function. return math.factorial(n)"},{"question":"Write a python function to calculate the most common character in a given string and return it. If there are multiple characters with the same highest frequency, return all of them in a list.","solution":"from collections import Counter def most_common_char(s): Returns the most common character(s) in the given string. If there are multiple characters with the same highest frequency, returns all of them in a list. if not s: return [] count = Counter(s) max_count = max(count.values()) most_common = [char for char, freq in count.items() if freq == max_count] return most_common[0] if len(most_common) == 1 else most_common"},{"question":"Write a python function to find the most repeated word in a given string. If there are multiple most repeated words, return all of them.","solution":"from collections import Counter import re def most_repeated_words(text): Returns a list of the most repeated word(s) in the given string. # Remove punctuation and convert to lower case text = re.sub(r'[^ws]', '', text).lower() words = text.split() # Count the frequency of each word word_counts = Counter(words) if not word_counts: return [] # Find the maximum frequency max_count = max(word_counts.values()) # Find all words with the maximum frequency most_repeated = [word for word, count in word_counts.items() if count == max_count] return most_repeated"},{"question":"Write a python function to find all subsets of a given set. For example, if the given set is {1, 2, 3}, then the function should return all possible subsets, including the empty set and the set itself.","solution":"def find_subsets(s): Find all subsets of the given set s. :param s: A set of unique elements :return: A list of sets, representing all subsets of s subsets = [[]] for element in s: subsets += [subset + [element] for subset in subsets] # Convert list of lists to list of sets return [set(subset) for subset in subsets] # Example usage: # print(find_subsets({1, 2, 3}))"},{"question":"Write a python function to find the shortest path from the top-left cell to the bottom-right cell in a grid filled with 1s and 0s, where 0s represent walkable cells and 1s represent walls. The function should return the length of the shortest path if it exists, otherwise return -1.","solution":"from collections import deque def shortest_path(grid): Finds the shortest path in a grid from top-left to bottom-right cell. :param grid: List[List[int]], 2D grid where 0s are walkable and 1s are walls. :return: int, length of the shortest path if exists, otherwise -1. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 1)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == rows - 1 and y == cols - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a python function to perform a depth-first search on a binary tree, and return the result as a list of the nodes in the order they were visited.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def depth_first_search(root): Perform a depth-first search on a binary tree and return the result as a list of the nodes in the order they were visited. :param root: TreeNode, the root of the binary tree. :return: List[int], the values of the nodes in the order they were visited. if root is None: return [] stack = [root] result = [] while stack: node = stack.pop() result.append(node.val) # Push right first so that left is processed first if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"Write a python function to find the longest palindromic subsequence in a given string. A palindromic subsequence is a sequence that appears in the same order whether read forward or backward, and it does not need to occupy consecutive positions in the string.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string s. n = len(s) if n == 0: return 0 # Create a 2D array to store the lengths of longest palindromic subsequences dp = [[0] * n for _ in range(n)] # Strings of length 1 have a longest palindromic subsequence of length 1 for i in range(n): dp[i][i] = 1 # Build the dp array for cl in range(2, n + 1): # cl is the length of the current substring for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The longest palindromic subsequence length for the entire string is dp[0][n-1] return dp[0][n - 1]"},{"question":"Write a python function to inverse a linked list. How can you do this without using recursion?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list without using recursion. :param head: ListNode, the head node of the linked list :return: ListNode, the new head node of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to find the maximum number of elements that can be included in a subset of an array such that no two elements in the subset are adjacent in the original array.","solution":"def find_max_non_adjacent_subset(arr): Find the maximum number of elements that can be included in a subset of an array such that no two elements in the subset are adjacent in the original array. :param arr: List of integers :return: Integer, the maximum number of non-adjacent elements that can be included in the subset n = len(arr) if n == 0: return 0 if n == 1: return 1 # Variables to store the maximum count incl = 1 # Count included excl = 0 # Count excluded for i in range(1, n): # Current max count excluding arr[i] new_excl = max(incl, excl) # Current max count including arr[i] incl = excl + 1 excl = new_excl # Return maximum of incl and excl return max(incl, excl)"},{"question":"Write a python function to find the maximum value in a given 2-dimensional array (list of lists).","solution":"def find_max_2d_array(arr): Returns the maximum value in a given 2-dimensional array. :param arr: List of lists of numbers. :return: Maximum number in the 2D list. if not arr or not arr[0]: return None max_val = arr[0][0] for row in arr: for item in row: if item > max_val: max_val = item return max_val"},{"question":"Write a python function to count the number of \\"train\\" in a given string. The case of the letters doesn't matter. The input string can contain any printable ASCII characters. You need to return the count of the word \\"train\\", case-insensitively.","solution":"import re def count_trains(input_string): Returns the count of the word \\"train\\" in the input_string, case-insensitively. return len(re.findall(r'btrainb', input_string, re.IGNORECASE))"},{"question":"Write a python function to find the minimum element in a list of integers given as input. The function should return the minimum value from the list.","solution":"def find_minimum(lst): Returns the minimum element in a list of integers. :param lst: List of integers :return: Minimum integer in the list if not lst: raise ValueError(\\"List is empty\\") return min(lst)"},{"question":"Write a python function to print the even numbers from 1 to n using a for loop.","solution":"def print_even_numbers(n): Returns a list of even numbers from 1 to n. even_numbers = [] for number in range(1, n + 1): if number % 2 == 0: even_numbers.append(number) return even_numbers"},{"question":"Write a python function to find the maximum sum subarray in a one-dimensional array of numbers. The array can contain both positive and negative numbers. You have to implement this using Kadane's algorithm.","solution":"def max_sum_subarray(arr): Finds the maximum sum subarray using Kadane's algorithm. Parameters: arr (list): A list of integers Returns: int: The maximum sum of any contiguous subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to count the frequency of each word in a given string.","solution":"def count_word_frequency(text): Returns a dictionary with the frequency of each word in the given string. :param text: A string containing words separated by spaces. :return: A dictionary where keys are words and values are their frequencies. words = text.split() frequency = {} for word in words: frequency[word] = frequency.get(word, 0) + 1 return frequency"},{"question":"Write a python function to find the largest product of a triplet from the given list of integers. The function should have a time complexity of O(n).","solution":"def largest_product_of_triplet(nums): Finds the largest product of a triplet in the given list of integers. if len(nums) < 3: raise ValueError(\\"The list must contain at least three integers.\\") # Initialize the three largest and two smallest values max1 = max2 = max3 = float('-inf') min1 = min2 = float('inf') for num in nums: # Update the three largest values if num > max1: max3, max2, max1 = max2, max1, num elif num > max2: max3, max2 = max2, num elif num > max3: max3 = num # Update the two smallest values if num < min1: min2, min1 = min1, num elif num < min2: min2 = num # The largest product is the maximum of the product of the three largest values # or the product of the two smallest values and the largest value return max(max1 * max2 * max3, min1 * min2 * max1)"},{"question":"Write a python function to find the shortest palindrome by appending characters to the end of a given string. For example, given the string \\"race\\", the shortest palindrome can be formed by appending \\"car\\" to make \\"racecar\\". How can we achieve this?","solution":"def shortest_palindrome(s): Returns the shortest palindrome created by appending characters to the end of the given string. if s == s[::-1]: return s for i in range(len(s)): if s[i:] == s[i:][::-1]: return s + s[:i][::-1] return s # if its an already palindrome"},{"question":"Write a python function to implement a simple hash table that supports insert, delete, and search operations. The hash table should be implemented using a list as an array of linked lists, each representing a bucket.","solution":"class ListNode: Node class for storing individual elements in the linked list for each bucket in the hash table. def __init__(self, key, value): self.key = key self.value = value self.next = None class HashTable: Simple hash table implementation using an array of linked lists for collision resolution. def __init__(self, size=10): self.size = size self.table = [None] * size def _hash(self, key): return hash(key) % self.size def insert(self, key, value): index = self._hash(key) new_node = ListNode(key, value) if self.table[index] is None: self.table[index] = new_node else: current = self.table[index] while True: if current.key == key: current.value = value return if current.next is None: break current = current.next current.next = new_node def delete(self, key): index = self._hash(key) current = self.table[index] prev = None while current is not None: if current.key == key: if prev is None: self.table[index] = current.next else: prev.next = current.next return True prev = current current = current.next return False def search(self, key): index = self._hash(key) current = self.table[index] while current is not None: if current.key == key: return current.value current = current.next return None"},{"question":"Write a python function to merge two dictionaries based on a specific condition that the sum of values from both dictionaries should be less than or equal to a given threshold. If the condition is met, the function should return a new dictionary containing the merged key-value pairs. If the condition fails, it should return a message indicating the failure.","solution":"def merge_dictionaries(dict1, dict2, threshold): Merges two dictionaries if the sum of values from both dictionaries is less than or equal to a given threshold. Parameters: - dict1: First dictionary with numeric values. - dict2: Second dictionary with numeric values. - threshold: A numeric value representing the maximum allowable sum of values from both dictionaries. Returns: - A new dictionary containing merged key-value pairs if the condition is met. - A string message indicating the failure if the condition is not met. merged_dict = {} total_sum = sum(dict1.values()) + sum(dict2.values()) if total_sum <= threshold: merged_dict.update(dict1) merged_dict.update(dict2) return merged_dict else: return \\"The sum of values exceeds the given threshold.\\""},{"question":"Write a python function to find the minimum and maximum values of an array of integers without using any built-in min and max functions but with only one pass through the array.","solution":"def find_min_max(arr): Returns the minimum and maximum values of the array. if len(arr) == 0: raise ValueError(\\"The array should not be empty\\") min_val = arr[0] max_val = arr[0] for num in arr[1:]: if num < min_val: min_val = num elif num > max_val: max_val = num return min_val, max_val"},{"question":"Write a python function to remove duplicate characters from a given string while preserving the order of characters. For example, if the input is \\"abcabc\\", the output should be \\"abc\\".","solution":"def remove_duplicates(s): Removes duplicate characters from a given string while preserving the order of characters. Args: s (str): The input string. Returns: str: A string with duplicates removed, preserving the order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to return the maximum element in a binary search tree. The function should take the root node of the binary search tree as its argument and return the maximum element in the tree. If the tree is empty, the function should return \`None\`.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_in_bst(root): Returns the maximum element in a binary search tree. If the tree is empty, returns None. if not root: return None current = root while current.right is not None: current = current.right return current.value"},{"question":"Write a python function to create a dictionary with key-value pairs where the key is a number in the range 1 to 5 (inclusive) and the value is the square of the key. To demonstrate the function, print the resulting dictionary.","solution":"def create_square_dict(): Returns a dictionary where the keys are numbers from 1 to 5 (inclusive) and the values are the squares of the keys. return {num: num ** 2 for num in range(1, 6)} # To demonstrate the function, print the resulting dictionary square_dict = create_square_dict() print(square_dict)"},{"question":"Write a python function to implement the Knapsack problem using a dynamic programming approach. The function should return the maximum value that can be put in a knapsack of a given capacity.","solution":"def knapsack(capacity, weights, values, n): Implements the Knapsack problem using a dynamic programming approach. Parameters: capacity (int): Capacity of the knapsack weights (list): List of weights of items values (list): List of values of items n (int): Number of items Returns: int: Maximum value that can be put in a knapsack of given capacity # Create a 2D array to store the values of subproblems K = [[0 for x in range(capacity + 1)] for x in range(n + 1)] # Build table K[][] in a bottom-up manner for i in range(n + 1): for w in range(capacity + 1): if i == 0 or w == 0: K[i][w] = 0 elif weights[i-1] <= w: K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]], K[i-1][w]) else: K[i][w] = K[i-1][w] return K[n][capacity]"},{"question":"Write a python function to check if a string is a valid identifier in Python.","solution":"def is_valid_identifier(s): Check if a string is a valid Python identifier. A valid identifier starts with a letter (A-Z, a-z) or an underscore (_), followed by letters, digits (0-9), or underscores. Args: s (str): The string to check. Returns: bool: True if the string is a valid Python identifier, False otherwise. if not s.isidentifier(): return False return True"},{"question":"Write a python function to sort a list of integers.","solution":"def sort_list(numbers): Returns a sorted list of integers. :param numbers: List of integers to sort. :return: Sorted list of integers. return sorted(numbers)"},{"question":"Write a python function to find the number of shortest paths from a given source vertex to a target vertex in a weighted graph.","solution":"import heapq from collections import defaultdict, deque def count_shortest_paths(n, edges, source, target): Finds the number of shortest paths from source to target in a weighted graph. Parameters: n (int): The number of vertices in the graph. edges (List[Tuple[int, int, int]]): A list of edges in the graph, where each edge is represented by a tuple (u, v, w). source (int): The source vertex. target (int): The target vertex. Returns: int: The number of shortest paths from source to target. graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra's algorithm to find the shortest path distances dist = [float('inf')] * n dist[source] = 0 paths = [0] * n paths[source] = 1 pq = [(0, source)] while pq: curr_dist, u = heapq.heappop(pq) if curr_dist > dist[u]: continue for v, weight in graph[u]: distance = curr_dist + weight if distance < dist[v]: dist[v] = distance paths[v] = paths[u] heapq.heappush(pq, (distance, v)) elif distance == dist[v]: paths[v] += paths[u] return paths[target]"},{"question":"Write a python function to find the minimum integer in a list and its index. The function should return a tuple containing the minimum integer and its index. If the list is empty, return None. The function should also handle lists with duplicate minimum values and return the first occurrence.","solution":"def find_min_and_index(lst): Finds the minimum integer in a list and its index. Args: lst (list): A list of integers. Returns: tuple: A tuple containing the minimum integer and its index. Returns None if the list is empty. if not lst: return None min_value = min(lst) min_index = lst.index(min_value) return (min_value, min_index)"},{"question":"Write a python function to print all unique permutations of a given string. Ensure each permutation is output only once.","solution":"from itertools import permutations def unique_permutations(s): Prints all unique permutations of the given string s. perms = set(permutations(s)) unique_perms = [\\"\\".join(p) for p in perms] return unique_perms"},{"question":"Write a python function to calculate the most frequent integer in a list. If there's a tie,返回 the smallest integer. If the list is empty, return None.","solution":"def most_frequent_integer(lst): Returns the most frequent integer in the list. If there's a tie, returns the smallest integer. If the list is empty, returns None. if not lst: return None from collections import Counter counter = Counter(lst) max_frequency = max(counter.values()) max_freq_integers = [num for num, freq in counter.items() if freq == max_frequency] return min(max_freq_integers)"},{"question":"Write a python function to calculate the factorial of a number. The function should take a non-negative integer as input and return the factorial of the number. Use recursion to implement the factorial calculation. Recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to find the number of integers within a given range that are multiples of 3 and 4. Use the function \`num_multiples_of_3_4(start, end)\` where \`start\` and \`end\` are the inclusive bounds of the range.","solution":"def num_multiples_of_3_4(start, end): Returns the number of integers within a given range [start, end] that are multiples of both 3 and 4. count = 0 for i in range(start, end + 1): if i % 3 == 0 and i % 4 == 0: count += 1 return count"},{"question":"Write a python function to convert a given binary number as a string to its decimal equivalent. The binary number might contain digits outside the standard binary range (0 or 1). You should handle these cases and ensure that the error is gracefully handled.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. If the string contains non-binary digits, raises a ValueError. Parameters: binary_str (str): A string representing a binary number. Returns: int: The decimal equivalent of the binary number. # Validate binary string for char in binary_str: if char not in '01': raise ValueError(f\\"Invalid character '{char}' in binary string\\") # Convert binary string to decimal return int(binary_str, 2)"},{"question":"Write a python function to find minimum difference between two elements in an array. The function should return the minimum difference. If the array has less than two elements, it should return \`None\`.","solution":"def minimum_difference(arr): Returns the minimum difference between any two elements in the array. If the array has less than two elements, returns None. if len(arr) < 2: return None arr.sort() min_diff = float('inf') for i in range(len(arr) - 1): min_diff = min(min_diff, arr[i+1] - arr[i]) return min_diff"},{"question":"Write a python function to convert a given string into Pig Latin. Pig Latin is a made-up language for children, where words are transformed by appending a suffix to the beginning of the word based on its starting consonant. If a word begins with a vowel, just add \\"way\\" to the end of it. If a word begins with a consonant, move the consonants from the beginning to the end of the word and then add \\"ay\\".","solution":"def to_pig_latin(s): Converts a given string to Pig Latin. vowels = 'aeiouAEIOU' words = s.split() pig_latin_words = [] for word in words: if word[0] in vowels: pig_latin_words.append(word + 'way') else: first_vowel_index = len(word) for i, char in enumerate(word): if char in vowels: first_vowel_index = i break pig_latin_words.append(word[first_vowel_index:] + word[:first_vowel_index] + 'ay') return ' '.join(pig_latin_words)"},{"question":"Write a python function to find the character that appears most frequently in a string. If there are ties, return all the characters that appear most frequently.","solution":"from collections import Counter def most_frequent_characters(s): Returns a list of characters that appear most frequently in the string s. If there are ties, returns all the characters that appear most frequently. if not s: return [] counter = Counter(s) max_frequency = max(counter.values()) return [char for char, count in counter.items() if count == max_frequency]"},{"question":"Write a python function to count the number of '1's in the binary representation of an integer and return this count. The function should work for both positive and negative integers (where negative numbers are represented in two's complement form).","solution":"def count_ones_in_binary(n): Counts the number of '1's in the binary representation of an integer. This function works for both positive and negative integers. Parameters: n (int): The integer whose binary representation is to be analyzed. Returns: int: The count of '1's in the binary representation of n. if n < 0: # If n is negative, convert it to its two's complement binary form in 32 bits n = n & 0xFFFFFFFF return bin(n).count('1')"},{"question":"Write a python function to add up all the numbers in a list. You can assume that all elements in the list are integers.","solution":"def sum_list(numbers): Returns the sum of all the numbers in the list. :param numbers: List of integers :return: Sum of the integers return sum(numbers)"},{"question":"Write a python function to check whether a string is symmetric. A string is considered symmetric if it reads the same forwards and backwards. Your function should return \`True\` if the string is symmetric, and \`False\` otherwise.","solution":"def is_symmetric(s): Checks if the given string is symmetric, meaning it reads the same forwards and backwards. return s == s[::-1]"},{"question":"Write a python function to sort a list using merge sort.","solution":"def merge_sort(arr): Sorts a list using the merge sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 return arr"},{"question":"Write a python function to find the two numbers whose product equals the input number \`n\` and their sum is the smallest. If there are multiple pairs with the same smallest sum, return the pair with the smallest values in lexicographical order.","solution":"def find_numbers_with_smallest_sum(n): Finds and returns the pair of numbers whose product equals the input number \`n\` and their sum is the smallest. If there are multiple pairs with the same smallest sum, returns the pair with the smallest values in lexicographical order. if n <= 0: return None # Invalid input for this problem min_sum = float('inf') best_pair = None for i in range(1, int(n**0.5) + 1): if n % i == 0: j = n // i if i + j < min_sum: min_sum = i + j best_pair = (i, j) return best_pair"},{"question":"Write a python function to filter a list based on a condition passed as a lambda function. The list contains dictionaries representing books with keys 'title', 'genre', and 'author'. The function should return a list of books that match the specified genre.","solution":"def filter_books(books, condition): Filters a list of books based on a condition. Parameters: books (list): A list of dictionaries, where each dictionary represents a book with keys 'title', 'genre', and 'author'. condition (function): A lambda function that specifies the condition to filter books by. Returns: list: A list of books that match the specified condition. return [book for book in books if condition(book)]"},{"question":"Write a python function to generate the Fibonacci series up to a given limit. The function should take the limit as a parameter and return a list containing the Fibonacci series up to that limit.","solution":"def fibonacci_series(limit): Generates the Fibonacci series up to a given limit. Parameters: limit (int): The upper limit of the Fibonacci series to be generated. Returns: list: A list containing the Fibonacci series up to the given limit. if limit <= 0: return [] series = [0, 1] while True: next_value = series[-1] + series[-2] if next_value > limit: break series.append(next_value) return series"},{"question":"Write a python function to find the second largest number in a list. Here is a sample list: [5, 3, 9, 1, 10, 2]","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list has fewer than 2 unique numbers, returns None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2] # Sample list to demonstrate the function sample_list = [5, 3, 9, 1, 10, 2] print(second_largest(sample_list))"},{"question":"Write a python function to find the maximum sum of any two numbers in a given list. The function should handle edge cases such as lists with fewer than two elements, lists with negative numbers, and lists with all negative numbers.","solution":"def max_sum_two_numbers(lst): Returns the maximum sum of any two numbers in the given list. If the list contains fewer than two elements, returns None. if len(lst) < 2: return None lst.sort() return lst[-1] + lst[-2]"},{"question":"Write a python function to print the numbers from 1 to 10 and their squares.","solution":"def print_numbers_and_squares(): Prints numbers from 1 to 10 and their squares. result = [] for i in range(1, 10+1): result.append((i, i**2)) print(f\\"{i}: {i**2}\\") return result"},{"question":"Write a python function to sort a list of strings based on their length in ascending order. You can assume that all strings are alphanumeric and consist of lowercase letters.","solution":"def sort_strings_by_length(strings): Sorts a list of strings based on their length in ascending order. :param strings: List of strings to be sorted :return: List of strings sorted by length return sorted(strings, key=len)"},{"question":"Write a python function to count the number of distinct characters in a string. The function should be case-sensitive, meaning 'A' and 'a' are considered different characters.","solution":"def count_distinct_characters(s): Returns the number of distinct characters in a string. The function is case-sensitive, counting 'A' and 'a' as different characters. return len(set(s))"},{"question":"Write a python function to count the number of overlapping triangles within a given square. The function should return the total count of overlapping triangles. An overlapping triangle is one that shares more than one point with another triangle.","solution":"def count_overlapping_triangles(triangles): Returns the count of pairs of overlapping triangles. A triangle is represented as a tuple of three vertices (each a tuple of x and y coordinates). An overlapping triangle pair shares at least two vertices. :param triangles: List of tuples representing triangles. :return: Count of overlapping triangle pairs. count = 0 n = len(triangles) for i in range(n): for j in range(i + 1, n): shared_vertices = len(set(triangles[i]).intersection(set(triangles[j]))) if shared_vertices > 1: count += 1 return count"},{"question":"Write a python function to remove duplicates from a list without using any built-in function or library.","solution":"def remove_duplicates(lst): Removes duplicates from a list without using any built-in function or library. unique_list = [] seen = {} for item in lst: if item not in seen: unique_list.append(item) seen[item] = True return unique_list"},{"question":"Write a python function to replace whitespaces with underscores. Here is an example \\"hello world\\" should be converted to \\"hello_world\\". How can this be done using python's built-in string methods?","solution":"def replace_whitespace_with_underscore(s): Replaces all whitespaces in the input string with underscores. :param s: Input string :return: Modified string with whitespaces replaced by underscores return s.replace(' ', '_')"},{"question":"Write a python function to identify prime numbers in a range of numbers.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(start, end): Returns a list of prime numbers in the range [start, end] (inclusive). return [n for n in range(start, end + 1) if is_prime(n)]"},{"question":"Write a python function to calculate the minimum size of a subarray that needs to be sorted in order to make the entire array sorted. The given array contains unique integers from 1 to n. If the array is already sorted, the function should return 0.","solution":"def find_unsorted_subarray_len(array): Returns the minimum size of a subarray that needs to be sorted in order to make the entire array sorted. n = len(array) start, end = -1, -1 for i in range(n - 1): if array[i] > array[i + 1]: start = i break if start == -1: # The array is already sorted return 0 for i in range(n - 1, 0, -1): if array[i] < array[i - 1]: end = i break subarray_min = min(array[start:end+1]) subarray_max = max(array[start:end+1]) for i in range(start): if array[i] > subarray_min: start = i break for i in range(n-1, end, -1): if array[i] < subarray_max: end = i break return end - start + 1"},{"question":"Write a python function to convert a Roman numeral to an integer. Could you provide a solution using Python, specifically a code snippet that implements the conversion algorithm? Here's an example of a Roman numeral: \\"MCMXCIV\\".","solution":"def roman_to_int(roman): Converts a Roman numeral to an integer. :param roman: str, the Roman numeral string :return: int, the integer representation of the Roman numeral roman_values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(roman): curr_value = roman_values[char] if curr_value < prev_value: total -= curr_value else: total += curr_value prev_value = curr_value return total"},{"question":"Write a python function to count the number of occurrences of a specific substring within a string, delimited by spaces.","solution":"def count_substring_occurrences(s, substring): Returns the number of occurrences of a specific substring within a string, delimited by spaces. Args: s (str): The string in which to count substrings. substring (str): The substring to count. Returns: int: The number of occurrences of the substring in the string. words = s.split() return words.count(substring)"},{"question":"Write a python function to determine the number of unique letters in a given string while ignoring case sensitivity and spaces.","solution":"def count_unique_letters(s): Returns the number of unique letters in the given string, ignoring case sensitivity and spaces. letters = set() for char in s.lower(): if char.isalpha(): letters.add(char) return len(letters)"},{"question":"Write a python function to find the sum of all even numbers in a list. If the sum is 0, return -1.","solution":"def sum_of_evens(lst): Returns the sum of all even numbers in the list. If the sum is 0, return -1. even_sum = sum(x for x in lst if x % 2 == 0) return even_sum if even_sum != 0 else -1"},{"question":"Write a python function to check if two strings are anagrams. Anagrams are words or phrases made by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". Ensure your solution is efficient and easy to understand.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, otherwise False. # Anagrams must be the same length if len(str1) != len(str2): return False # Sort the characters of both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Write a python function to simulate the Rock-Paper-Scissors game with one player and the computer. The function should take one input parameter: a single string representing the player's choice (\\"rock\\", \\"paper\\", or \\"scissors\\"). The function should return the result of the game as a string (\\"player wins\\", \\"computer wins\\", or \\"it's a tie\\"). Assume the game rules are standard: rock beats scissors, paper beats rock, and scissors beat paper.","solution":"import random def rock_paper_scissors(player_choice): Simulates a game of rock-paper-scissors between one player and the computer. Args: player_choice (str): The choice of the player, should be one of \\"rock\\", \\"paper\\", or \\"scissors\\". Returns: str: The result of the game (\\"player wins\\", \\"computer wins\\", or \\"it's a tie\\"). choices = [\\"rock\\", \\"paper\\", \\"scissors\\"] computer_choice = random.choice(choices) if player_choice == computer_choice: return \\"it's a tie\\" elif (player_choice == \\"rock\\" and computer_choice == \\"scissors\\") or (player_choice == \\"paper\\" and computer_choice == \\"rock\\") or (player_choice == \\"scissors\\" and computer_choice == \\"paper\\"): return \\"player wins\\" else: return \\"computer wins\\""},{"question":"Write a python function to merge two sorted arrays into one sorted array. The function should take two arrays as input and return the merged sorted array. Ensure that the function handles arrays of different sizes efficiently.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements of arr2, if any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a python function to validate an IP address. An IP address is valid if and only if all four octets are in the range \`0-255\`. For example, \`192.168.1.1\` is valid while \`256.100.50.25\` is invalid.","solution":"def is_valid_ip(ip_address): Validate an IP address. An IP address is valid if and only if all four octets are in the range 0-255. # Split the IP address based on the dot character octets = ip_address.split('.') # Check that there are exactly four octets if len(octets) != 4: return False # Check if all octets are valid numbers and in the range 0-255 for octet in octets: if not octet.isdigit() or not (0 <= int(octet) <= 255): return False return True"},{"question":"Write a python function to check if all elements in a list are unique, except for one pair of numbers that can be the same.","solution":"def has_one_pair(lst): Checks if all elements in the list are unique, except for one pair of numbers that can be the same. from collections import Counter counts = Counter(lst) pair_count = 0 for count in counts.values(): if count == 2: pair_count += 1 elif count > 2: return False return pair_count == 1"},{"question":"Write a python function to return the most common element in a list of integers. If there are multiple elements with the same highest frequency, return the smallest one. If the list is empty, return None.","solution":"from collections import Counter def most_common_element(nums): Returns the most common element in the list of integers. If there are multiple elements with the same highest frequency, the smallest one is returned. If the list is empty, return None. if not nums: return None counts = Counter(nums) max_count = max(counts.values()) most_common = [num for num, count in counts.items() if count == max_count] return min(most_common)"},{"question":"Write a python function to find the minimum required number of coins to make a given amount. The function should take an integer array of coins where each coin has a fixed value and the integer amount to be made up.","solution":"def coinChange(coins, amount): Returns the minimum number of coins required to make up the given amount. :param coins: List[int] - A list of the coin denominations. :param amount: int - The target amount to make up. :return: int - The minimum number of coins required to make up the given amount, or -1 if it's not possible. # Create a list to store the minimum coins required for each amount from 0 to amount. dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to reverse the words in a string. You should reverse the order of words and also reverse each word individually. For example, given the string \\"Hello World\\", the function should return \\"olleH dlroW\\".","solution":"def reverse_words(s): Reverses the order of words in a string and also reverses each word individually. Args: s (str): Input string. Returns: str: String with the order of words reversed and each word itself reversed. return ' '.join(word[::-1] for word in s.split()[::-1])"},{"question":"Write a python function to implement binary search in an array of integers. Binary search assumes that the array is sorted in ascending order. Your function should take an array of integers and a target value as inputs, and return the index of the target if found, and -1 if not found.","solution":"def binary_search(arr, target): Perform binary search on the sorted array to find the target value. Parameters: arr (list of int): A list of integers sorted in ascending order. target (int): The target integer to find in the array. Returns: int: The index of the target in the array if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to flatten a nested list using recursion, and ensure that only list elements of type \`list\` are considered for flattening.","solution":"def flatten(nested_list): Recursively flattens a nested list. Parameters: nested_list (list): A list that may contain other nested lists Returns: list: A flattened version of the input list flattened_list = [] for element in nested_list: if isinstance(element, list): flattened_list.extend(flatten(element)) else: flattened_list.append(element) return flattened_list"},{"question":"Write a python function to calculate the area of a circle using the formula A = πr².","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative.\\") return math.pi * radius ** 2"},{"question":"Write a python function to calculate the sum of a series of numbers in a given line of text. The numbers in the line are separated by a semicolon, and the function should return the sum of these numbers. For example, if the input is \\"5;10;15;20\\", the function should return 50.","solution":"def sum_of_series(line): Returns the sum of a series of numbers in a given line of text. Numbers in the line are separated by a semicolon. numbers = map(int, line.split(';')) return sum(numbers)"},{"question":"Write a python function to solve the LeetCode problem \\"Two Sum\\". The problem states that you are given a list of integers and a target and you need to return the indices of the two numbers such that they add up to the target.","solution":"def two_sum(nums, target): Given a list of integers 'nums' and an integer 'target', returns indices of the two numbers such that they add up to the target. Args: nums: List of integers. target: Integer target sum. Returns: List containing indices of the two numbers. num_map = {} # To store the mapping of number and its index. for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return [] # If no solution is found, though the problem guarantees one."},{"question":"Write a python function to convert a list of numbers into a string of numbers separated by commas. With the list [3, 5, 7, 2, 8], it should return \\"3,5,7,2,8\\".","solution":"def list_to_comma_string(num_list): Converts a list of numbers into a string of numbers separated by commas. return ','.join(map(str, num_list))"},{"question":"Write a python function to encrypt a message using a Caesar cipher with a given shift value. The Caesar cipher shifts each letter in the plaintext by a certain number of places down or up the alphabet. For example, with a shift of 1, 'A' would be replaced by 'B', 'B' would become 'C', and so on. The function should handle both upper and lower case letters, and non-alphabetical characters should remain unchanged.","solution":"def caesar_cipher(message, shift): Encrypts the message using a Caesar cipher with the given shift. encrypted_message = [] for char in message: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_message.append(encrypted_char) else: encrypted_message.append(char) return ''.join(encrypted_message)"},{"question":"Write a python function to find the largest element in a binary search tree (BST). What's the best way to implement this function and explain your choice of approach?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_largest_element(root: TreeNode) -> int: Find the largest element in a binary search tree (BST). if root is None: raise ValueError(\\"Tree is empty\\") current = root while current.right is not None: current = current.right return current.value"},{"question":"Write a python function to return the nth node from the end of the linked list. For example, if the linked list is 1 -> 2 -> 3 -> 4 -> 5 and n is 2, the function should return the node with value 4.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def nth_from_end(head, n): Returns the nth node from the end of the linked list. Parameters: head (ListNode): The head of the linked list. n (int): The 1-based index from the end of the list. Returns: ListNode: The node that is n-th from the end. fast = slow = head for _ in range(n): if fast is None: return None # Out of bounds fast = fast.next while fast: fast = fast.next slow = slow.next return slow"},{"question":"Write a python function to convert a list of integers into a string.","solution":"def list_to_string(int_list): Converts a list of integers to a string, with elements separated by a space. Parameters: int_list (list): A list of integers. Returns: str: A string representation of the list elements separated by spaces. return ' '.join(map(str, int_list))"},{"question":"Write a python function to check if two rectangles overlap. Each rectangle is represented as a tuple of four integers: (x1, y1, x2, y2) where (x1, y1) is the bottom-left corner and (x2, y2) is the top-right corner. Replace the function \`check_overlap\` in the below code snippet with your solution.","solution":"def check_overlap(rect1, rect2): Determines if two rectangles overlap. :param rect1: Tuple[int, int, int, int], coordinates of the first rectangle (x1, y1, x2, y2) :param rect2: Tuple[int, int, int, int], coordinates of the second rectangle (x1, y1, x2, y2) :return: bool, True if the rectangles overlap, False otherwise # Unpacking the coordinates of the first rectangle x1, y1, x2, y2 = rect1 # Unpacking the coordinates of the second rectangle x3, y3, x4, y4 = rect2 # If one rectangle is to the left of the other if x1 >= x4 or x3 >= x2: return False # If one rectangle is above the other if y1 >= y4 or y3 >= y2: return False return True"},{"question":"Write a python function to find the length of a string without using the len() function.","solution":"def string_length(s): Returns the length of the given string s without using the len() function. count = 0 for char in s: count += 1 return count"},{"question":"Write a python function to convert Celsius to Fahrenheit and display it with two decimal places.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit and returns it rounded to two decimal places. fahrenheit = celsius * 9 / 5 + 32 return round(fahrenheit, 2)"},{"question":"Write a python function to return the number of occurrences of the substring \\"hi\\" in a given string. The function should be case-sensitive.","solution":"def count_hi(s): Returns the number of occurrences of the substring \\"hi\\" in the given string s. return s.count(\\"hi\\")"},{"question":"Write a python function to find the second most frequent word in a given string. If there is no second most frequent word, return None. The function should be case-insensitive and should ignore punctuation.","solution":"import re from collections import Counter def second_most_frequent_word(s): Find the second most frequent word in a given string. The function is case-insensitive and ignores punctuation. # Remove punctuation and make lowercase s = re.sub(r'[^ws]', '', s).lower() words = s.split() if not words: return None # Count the frequency of each word word_counts = Counter(words) # Get the frequencies sorted in descending order most_common = word_counts.most_common() if len(most_common) < 2: return None # Return the second most frequent word return most_common[1][0]"},{"question":"Write a python function to check if a number is prime or not using recursion. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime_recursive(n, divisor=None): Returns True if the given number n is a prime number, False otherwise. This function uses recursion to check for primality. if n <= 1: return False if divisor is None: divisor = n - 1 if divisor == 1: return True if n % divisor == 0: return False return is_prime_recursive(n, divisor - 1)"},{"question":"Write a python function to check if a given number is a perfect square. If it is, return \\"perfect square\\"; if not, return \\"not perfect square\\". Since you are generating a sequence, also make sure to return the next perfect square if it doesn't exist return \\"next perfect square not present\\".","solution":"import math def check_perfect_square(n): Checks if a given number n is a perfect square. If it is, returns \\"perfect square\\". If it is not, returns \\"not perfect square\\" and the next perfect square if it exists. # Calculate the square root of n sqrt_n = math.isqrt(n) if sqrt_n * sqrt_n == n: return \\"perfect square\\" else: next_perfect_square = (sqrt_n + 1) ** 2 return f\\"not perfect square, next perfect square is {next_perfect_square}\\""},{"question":"Write a python function to find the cube root of a number using the Newton-Raphson method. The cube root function takes a single parameter a (the number). The iterative method continues until the difference between successive guesses is less than a small threshold (e.g. 1e-7). The function should return the cube root of the number with an error less than the threshold.","solution":"def cube_root(a): Returns the cube root of a number using the Newton-Raphson method. if a == 0: return 0 tolerance = 1e-7 guess = a / 3.0 error = float(\\"inf\\") while error > tolerance: previous_guess = guess guess = (2 * guess + a / (guess * guess)) / 3 error = abs(guess - previous_guess) return guess"},{"question":"Write a python function to print a pattern of numbers from 1 to n, where each line contains one more number than the previous line, starting with 1.","solution":"def print_number_pattern(n): Prints a pattern of numbers from 1 to n, where each line contains one more number than the previous line, starting with 1. result = [] for i in range(1, n + 1): line = ' '.join(str(x) for x in range(1, i + 1)) result.append(line) print(line) return result"},{"question":"Write a python function to find the first negative or zero number in an array. If a negative number appears in the array, the function should return the negative number, otherwise, it should return 0 after scanning the entire array.","solution":"def first_negative_or_zero(numbers): Returns the first negative number or zero from the list of numbers. If no negative number is found, returns 0. for number in numbers: if number <= 0: return number return 0"},{"question":"Write a python function to find the sum of all positive even numbers in a list. The function should return the sum.","solution":"def sum_positive_even_numbers(numbers): This function returns the sum of all positive even numbers in a list. :param numbers: List of integers :return: Sum of all positive even numbers return sum(num for num in numbers if num > 0 and num % 2 == 0)"},{"question":"Write a python function to check if the given string is palindromic. If it is, return True, otherwise return False.","solution":"def is_palindrome(s): Checks if the given string is palindromic. Args: s (str): The string to check. Returns: bool: True if the string is palindromic, False otherwise. s = s.replace(\\" \\", \\"\\").lower() # Remove spaces and lowercase the string return s == s[::-1]"},{"question":"Write a python function to count the occurrences of each character in a given string and return the character with the highest frequency.","solution":"def highest_frequency_character(s): Returns the character with the highest frequency in the given string s. If there are multiple characters with the same highest frequency, return any one of them. if not s: return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_freq = max(char_count.values()) for char, freq in char_count.items(): if freq == max_freq: return char"},{"question":"Write a python function to return \\"Prime\\" if 'n' is a prime number. Otherwise return \\"Not Prime\\".","solution":"def check_prime(n): Returns \\"Prime\\" if n is a prime number, otherwise returns \\"Not Prime\\". if n <= 1: return \\"Not Prime\\" for i in range(2, int(n**0.5) + 1): if n % i == 0: return \\"Not Prime\\" return \\"Prime\\""},{"question":"Write a python function to calculate the sum of all elements in a list. If the list is empty, the function should return 0. Ensure the function is named \`sum_of_elements\` and handle any data types inside the list that can be added together.","solution":"def sum_of_elements(lst): Returns the sum of all elements in a list. If the list is empty, return 0. It handles any data types inside the list that can be added together. return sum(lst) if lst else 0"},{"question":"Write a python function to find the nth prime number in Python. What is a prime number?","solution":"def nth_prime(n): Returns the nth prime number. Args: n (int): The position (1-based) of the prime number to find. Returns: int: The nth prime number. if n < 1: raise ValueError(\\"n must be a positive integer\\") primes = [] candidate = 2 while len(primes) < n: is_prime = all(candidate % prime != 0 for prime in primes) if is_prime: primes.append(candidate) candidate += 1 return primes[-1]"},{"question":"Write a python function to find all the duplicate elements in a list and return them as a list.","solution":"def find_duplicates(elements): Returns a list of duplicate elements in the input list. seen = set() duplicates = set() for element in elements: if element in seen: duplicates.add(element) else: seen.add(element) return list(duplicates)"},{"question":"Write a python function to remove the repeating letters in a string to leave only one of each, maintaining their original order.","solution":"def remove_repeating_letters(s): Returns a new string with only one instance of each character in the original order. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to find the maximum digits that can be obtained by flipping exactly one bit (0 to 1 or 1 to 0) in the binary representation of a given number.","solution":"def max_digits_by_flipping_one_bit(n): This function calculates the maximum number possible by flipping exactly one bit in the binary representation of n. Parameters: n (int): The input number Returns: int: The maximum integer value obtained by flipping one bit in n's binary representation. # Convert n to binary and get as string without '0b' prefix binary_rep = bin(n)[2:] max_val = n length = len(binary_rep) for i in range(length): flipped_bit = binary_rep[i] == '1' and '0' or '1' flipped_number = int(binary_rep[:i] + flipped_bit + binary_rep[i+1:], 2) max_val = max(max_val, flipped_number) return max_val"},{"question":"Write a python function to find the maximum number in a given list. The function should take a list of integers as input and return the maximum number in that list. If the list is empty, the function should return \`None\`. Additionally, provide a check function that tests the \`find_max\` function with various data points to ensure its correctness.","solution":"def find_max(numbers): Returns the maximum number in the given list. If the list is empty, returns None. if not numbers: # Checks if the list is empty return None return max(numbers)"},{"question":"Write a python function to find the intersection point(s) of two string arrays. The function should take two lists of strings and return a list of strings that are common in both lists, preserving the order they appear in the first list.","solution":"def find_intersection(list1, list2): Returns the intersection points of two string arrays, preserving the order they appear in the first list. set_list2 = set(list2) intersection = [item for item in list1 if item in set_list2] return intersection"},{"question":"Write a python function to remove all duplicates from an array while maintaining the order. You should also implement a solution with a time complexity of O(n).","solution":"def remove_duplicates(arr): Remove all duplicates from the array while maintaining the order. Args: arr (list): A list of elements. Returns: list: A list of elements with duplicates removed, maintaining the original order. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the minimum value in a list of numbers. If the list is empty, the function should return None. The function should have a time complexity of O(n).","solution":"def find_minimum(numbers): Returns the minimum value in a list of numbers. If the list is empty, returns None. :param numbers: List of numbers :return: Minimum value or None if not numbers: return None min_value = numbers[0] for num in numbers: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to pretty print a given list. The list elements can be of any data type, including nested lists. You need to indent each level based on its depth in the list.","solution":"def pretty_print(lst, indent=0): Pretty prints a given list with indentation based on the nesting level. for element in lst: if isinstance(element, list): pretty_print(element, indent + 1) else: print(' ' * indent + str(element))"},{"question":"Write a python function to merge two sorted arrays, \`arr1\` and \`arr2\`, and return the merged array sorted in ascending order. The function should not use any additional space for arrays other than what is required to store the final output, and it should achieve this in \`O(n)\` time complexity.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array in ascending order. # Lengths of the input arrays n1, n2 = len(arr1), len(arr2) # Resultant merged array merged_array = [] i, j = 0, 0 # Pointers for arr1 and arr2 respectively # Traverse through both arrays while i < n1 and j < n2: if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Store remaining elements of arr1 while i < n1: merged_array.append(arr1[i]) i += 1 # Store remaining elements of arr2 while j < n2: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a python function to convert a given positive integer number to its corresponding English words representation. For example, 123 should return \\"One Hundred Twenty-Three\\".","solution":"def number_to_words(num): Convert a positive integer to its English words representation. if num == 0: return 'Zero' below_20 = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'] tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'] thousands = ['', 'Thousand', 'Million', 'Billion'] def helper(n): if n < 20: return below_20[n] elif n < 100: return tens[n // 10] + ('' if n % 10 == 0 else '-' + below_20[n % 10]) elif n < 1000: return below_20[n // 100] + ' Hundred' + ('' if n % 100 == 0 else ' ' + helper(n % 100)) else: for idx, word in enumerate(thousands): if n < 1000 ** (idx + 1): return helper(n // 1000 ** idx) + ' ' + thousands[idx] + ('' if n % 1000 ** idx == 0 else ' ' + helper(n % 1000 ** idx)) return helper(num).strip()"},{"question":"Write a python function to find the highest and lowest numbers in a given list.","solution":"def find_high_and_low(numbers): Returns a tuple containing the highest and lowest numbers from the given list. Args: numbers (list): The list of integers. Returns: tuple: A tuple containing the highest and lowest numbers in the format (highest, lowest). if not numbers: return (None, None) return (max(numbers), min(numbers))"},{"question":"Write a python function to construct a dictionary from two lists, where one list contains keys and the other list contains values.","solution":"def construct_dict(keys, values): Construct and return a dictionary from two lists: one containing keys and the other containing values. Args: keys (list): The list of keys. values (list): The list of values. Returns: dict: A dictionary mapping each key to its corresponding value. if len(keys) != len(values): raise ValueError(\\"The length of keys and values lists must be the same.\\") return dict(zip(keys, values))"},{"question":"Write a python function to return the two largest numbers in a given list. Your function should handle cases where the list has fewer than two elements, and should also handle cases where the two largest numbers are the same.","solution":"def two_largest_numbers(lst): Returns the two largest numbers in the given list. If the list has fewer than two elements, appropriate measures will be taken. if len(lst) < 2: return \\"List needs to have at least two elements.\\" # Sort the list in descending order and extract the two largest elements lst_sorted = sorted(lst, reverse=True) return lst_sorted[0], lst_sorted[1]"},{"question":"Write a python function to find the longest word in a given list of words, where the order of the words in the returned list should be the same as the order of their first occurrences in the input list.","solution":"def longest_word(words): Returns the longest word in a given list of words. If multiple words have the same length, the first occurrence is returned. if not words: return None max_length = -1 longest = None for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"Write a python function to reverse the letters in each word of a string, keeping the spaces and punctuation intact.","solution":"def reverse_letters_in_words(s): Reverse the letters in each word of a string, keeping the spaces and punctuation intact. import re def reverse_word(word): return word[::-1] return re.sub(r'bw+b', lambda match: reverse_word(match.group()), s)"},{"question":"Write a python function to filter out all the words in a sentence that have a length less than or equal to 2.","solution":"def filter_short_words(sentence): Filters out words from the sentence that have a length less than or equal to 2. Parameters: sentence (str): The input sentence. Returns: str: The sentence with words of length less than or equal to 2 removed. words = sentence.split() filtered_words = [word for word in words if len(word) > 2] return ' '.join(filtered_words)"},{"question":"Write a python function to find all the prime numbers in a given list of numbers.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_div = int(n ** 0.5) + 1 for i in range(3, max_div, 2): if n % i == 0: return False return True def find_primes_in_list(numbers): Returns a list of prime numbers from the given list of numbers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a python function to find the largest sum of non-adjacent numbers in a list. You can include the first and the last numbers in the sum Alternate solution can be that included numbers in the sum should not be adjacent to each other.","solution":"def largest_non_adjacent_sum(nums): Returns the largest sum of non-adjacent numbers in the list. if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) incl = max(0, nums[0]) # max sum including the previous element excl = 0 # max sum excluding the previous element for num in nums[1:]: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Write a python function to return the number of hours and minutes from a given total number of minutes. This function should handle cases where the input number of minutes is negative and return the corresponding number of hours and minutes in a negative format.","solution":"def convert_minutes_to_hours_minutes(total_minutes): Converts a given total number of minutes to hours and minutes. Args: total_minutes (int): The total number of minutes. Returns: tuple: A tuple containing two elements (hours, minutes). sign = -1 if total_minutes < 0 else 1 total_minutes = abs(total_minutes) hours = total_minutes // 60 minutes = total_minutes % 60 return (sign * hours, sign * minutes)"},{"question":"Write a python function to return True if the list is sorted, categorized into ascending and descending. A list is considered sorted if it is monotonically increasing or decreasing. A list that is not monotonic is not considered sorted.","solution":"def is_sorted(lst): Returns True if the list is sorted either in ascending or descending order. A list is considered sorted if it is monotonically increasing or decreasing. if len(lst) <= 1: return True ascending = all(lst[i] <= lst[i+1] for i in range(len(lst) - 1)) descending = all(lst[i] >= lst[i+1] for i in range(len(lst) - 1)) return ascending or descending"},{"question":"Write a python function to check if a number \`n\` is a perfect square without using any built-in math functions like \`sqrt\`, \`pow\`, etc. To solve this, you can use a binary search approach to find out if there is a number \`x\` such that \`x*x == n\`. The binary search should be optimized for large values of \`n\`.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. Uses binary search to determine if a number is a perfect square. if n < 0: return False if n in (0, 1): return True low, high = 1, n while low <= high: mid = (low + high) // 2 square = mid * mid if square == n: return True elif square < n: low = mid + 1 else: high = mid - 1 return False"},{"question":"Write a python function to compress a string such that 'AAABBBCC' becomes '3ABC'.","solution":"def compress_string(s): Compresses the string such that consecutive repeating characters are replaced with the count of repetitions followed by the character itself. For example, 'AAABBBCC' becomes '3A3B2C'. if not s: return \\"\\" compressed = [] count = 1 previous_char = s[0] for current_char in s[1:]: if current_char == previous_char: count += 1 else: compressed.append(f\\"{count}{previous_char}\\") previous_char = current_char count = 1 # Append the last set of characters compressed.append(f\\"{count}{previous_char}\\") return ''.join(compressed)"},{"question":"Write a python function to print the number of words in a sentence that are greater than a given length N.","solution":"def count_long_words(sentence, N): Returns the number of words in the sentence that are longer than a given length N. Args: sentence (str): The sentence to analyze. N (int): The length to compare against. Returns: int: The number of words longer than N. words = sentence.split() long_words_count = sum(1 for word in words if len(word) > N) return long_words_count"},{"question":"Write a python function to reverse the order of words in a given sentence without using built-in functions like reversed(), split(), and join().","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The sentence to reverse. Returns: str: The sentence with the words in reverse order. words = [] word = '' for char in sentence: if char == ' ': if word: words.append(word) word = '' else: word += char if word: words.append(word) reversed_sentence = '' for i in range(len(words) - 1, -1, -1): reversed_sentence += words[i] if i != 0: reversed_sentence += ' ' return reversed_sentence"},{"question":"Write a python function to check if a given string is a palindrome. Write the function in a way that is clear to understand, even for someone new to Python programming.","solution":"def is_palindrome(s): Checks if the given string \`s\` is a palindrome. A string is a palindrome if it reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Args: s (str): The string to check. Returns: bool: True if \`s\` is a palindrome, False otherwise. # Normalize the string by removing non-alphanumeric characters and converting to lowercase normalized_s = ''.join(char.lower() for char in s if char.isalnum()) # Compare the normalized string with its reverse return normalized_s == normalized_s[::-1]"},{"question":"Write a python function to find the maximum subarray sum given an integer array. This is known as Kadane's Algorithm. Implement robust error handling and ensure your function works efficiently even for very large arrays.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum using Kadane's Algorithm. :param arr: List of integers :return: Maximum subarray sum if not arr or not isinstance(arr, list): raise ValueError(\\"Input should be a non-empty list of integers.\\") max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to generate all possible anagrams of a given string.","solution":"from itertools import permutations def generate_anagrams(s): Generates all possible anagrams of the given string. :param s: String for which anagrams are to be generated :return: List of all possible anagrams # Create a set from all permutations to get unique anagrams anagrams = set(permutations(s)) # Convert tuple to string and return as a list return [''.join(anagram) for anagram in anagrams]"},{"question":"Write a python function to convert an integer to its binary representation without using built-in functions like bin() or format().","solution":"def int_to_binary(n): Converts an integer to its binary representation. Args: n (int): The integer to be converted. Returns: str: The binary representation of the integer. if n == 0: return \\"0\\" binary = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: binary = str(n % 2) + binary n = n // 2 if is_negative: return \\"-\\" + binary return binary"},{"question":"Write a python function to find the intersection of two strings, where the intersection should be returned as a string containing unique characters sorted in alphabetical order.","solution":"def string_intersection(s1, s2): Returns the intersection of two strings as a string of unique characters, sorted in alphabetical order. # Convert both strings to sets to find unique characters set1 = set(s1) set2 = set(s2) # Find the intersection of the sets intersection = set1 & set2 # Convert the intersection to sorted list and join to form the result string result = ''.join(sorted(intersection)) return result"},{"question":"Write a python function to find the element that occurs most frequently in a given list. If there are multiple elements with the same maximum frequency, return the smallest one. If the list is empty, return None.","solution":"from collections import Counter def most_frequent_element(lst): Returns the element that occurs most frequently in the list. If multiple elements have the same maximum frequency, return the smallest one. If the list is empty, return None. if not lst: return None count = Counter(lst) max_freq = max(count.values()) most_frequent = [k for k, v in count.items() if v == max_freq] return min(most_frequent)"},{"question":"Write a python function to find the sum of all the odd numbers in a list using a loop. You can assume that the input list will not be empty.","solution":"def sum_of_odds(numbers): Returns the sum of all the odd numbers in the list 'numbers'. total = 0 for num in numbers: if num % 2 != 0: total += num return total"},{"question":"Write a python function to remove all elements from a list that appear more than once.","solution":"def remove_duplicates(lst): Removes all elements from the list that appear more than once. Parameters: lst (list): The input list from which duplicates should be removed. Returns: list: A list with all duplicates removed. from collections import Counter # Count the frequency of each element in the list counts = Counter(lst) # Create a new list with elements that appear only once return [item for item in lst if counts[item] == 1]"},{"question":"Write a python function to calculate the sum of all even numbers in the range of 1 to 100. How would you test this function with various data points?","solution":"def sum_even_numbers(): Returns the sum of all even numbers in the range of 1 to 100. return sum(i for i in range(1, 101) if i % 2 == 0)"},{"question":"Write a python function to return the minimum and maximum difference between any two numbers in a given list. If the list is empty or has one element, return \`None\`.","solution":"def min_max_diff(nums): Returns a tuple (min_diff, max_diff) where: - min_diff is the minimum difference between any two numbers in the list. - max_diff is the maximum difference between any two numbers in the list. Returns None if the list is empty or has only one element. if len(nums) < 2: return None nums_sorted = sorted(nums) min_diff = float('inf') max_diff = nums_sorted[-1] - nums_sorted[0] for i in range(1, len(nums_sorted)): diff = nums_sorted[i] - nums_sorted[i - 1] if diff < min_diff: min_diff = diff return (min_diff, max_diff)"},{"question":"Write a python function to return the size of a given string. You should not use the built-in \`len()\` function, and instead implement your logic by iterating through the string. The function should also return -1 if the input is not a string.","solution":"def string_size(s): Returns the size of the given string without using the built-in len() function. If the input is not a string, returns -1. if not isinstance(s, str): return -1 count = 0 for _ in s: count += 1 return count"},{"question":"Write a python function to find the number of unique permutations of a given string. The permutations should be considered unique based on their character order.","solution":"from math import factorial from collections import Counter def unique_permutations(s): Returns the number of unique permutations of the given string. counter = Counter(s) result = factorial(len(s)) for count in counter.values(): result //= factorial(count) return result"},{"question":"Write a python function to merge two linked lists represented in reverse order. The function should return the head of the merged list which is also represented in reverse order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Merge two linked lists represented in reverse order and return the head of the merged list in reverse order. dummy = ListNode(0) current = dummy carry = 0 while l1 or l2 or carry: val1 = (l1.val if l1 else 0) val2 = (l2.val if l2 else 0) carry, out = divmod(val1 + val2 + carry, 10) current.next = ListNode(out) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy.next"},{"question":"Write a python function to find the maximum product of a pair of numbers in a list. The function will take a list of integers as input and return the maximum product. If the list has fewer than two integers, the function should return None.","solution":"def max_product_of_pair(numbers): Find the maximum product of a pair of numbers in a list. If the list has fewer than two integers, return None. :param numbers: List of integers (can be positive, negative, or zero) :return: Maximum product of a pair of integers or None if not applicable if len(numbers) < 2: return None sorted_nums = sorted(numbers) return max(sorted_nums[0] * sorted_nums[1], sorted_nums[-1] * sorted_nums[-2])"},{"question":"Write a python function to merge two sorted lists in a way that the elements of the resulting list are in lexicographical (alphabetical) order. Your function should take two lists of strings and return a single sorted list. The input lists are guaranteed to be sorted but may contain duplicates.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists lexicographically. :param list1: First sorted list of strings. :param list2: Second sorted list of strings. :return: A single lexicographically sorted list. merged_list = [] i = j = 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Collect remaining elements from both lists merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"question":"Write a python function to find the largest number in a list. How would you handle an empty list?","solution":"def find_largest_number(lst): Returns the largest number in a list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a python function to print the numbers from 1 to 10 using a loop.","solution":"def print_numbers(): Print numbers from 1 to 10. numbers = [] for i in range(1, 11): numbers.append(i) return numbers"},{"question":"Write a python function to extract all the substrings between the brackets \`[]\` in the given string. Your function should return a list containing all these substrings. If no brackets are present, return an empty list.","solution":"import re def extract_substrings_between_brackets(s): Extract all substrings between the brackets [] in the given string. Args: s (str): input string. Returns: list: a list containing all substrings between the brackets. return re.findall(r'[(.*?)]', s)"},{"question":"Write a python function to implement a Binary Search Tree (BST). The function should support insert, search, delete, and in-order traversal operations. Additionally, write a function to check if a binary tree is a valid BST. How would you go about tackling this problem?","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.value = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.value: if node.left is None: node.left = TreeNode(key) else: self._insert(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert(node.right, key) def search(self, key): return self._search(self.root, key) def _search(self, node, key): if node is None or node.value == key: return node is not None if key < node.value: return self._search(node.left, key) return self._search(node.right, key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, node, key): if node is None: return node if key < node.value: node.left = self._delete(node.left, key) elif key > node.value: node.right = self._delete(node.right, key) else: # Node with only one child or no child if node.left is None: return node.right elif node.right is None: return node.left # Node with two children, get the inorder successor node.value = self._minValueNode(node.right).value node.right = self._delete(node.right, node.value) return node def _minValueNode(self, node): current = node while current.left is not None: current = current.left return current def in_order_traversal(self): return self._in_order_traversal(self.root, []) def _in_order_traversal(self, node, nodes): if node: self._in_order_traversal(node.left, nodes) nodes.append(node.value) self._in_order_traversal(node.right, nodes) return nodes def is_valid_bst(node, left=float('-inf'), right=float('inf')): if not node: return True if not (left < node.value < right): return False return is_valid_bst(node.left, left, node.value) and is_valid_bst(node.right, node.value, right)"},{"question":"Write a python function to find the number of distinct paths in a grid from the top-left corner to the bottom-right corner, moving only right and down. The grid dimensions are given as \`n\` rows and \`m\` columns.","solution":"def num_paths(n, m): Returns the number of distinct paths in a grid of size n x m from the top-left corner to the bottom-right corner. Movement is allowed only to the right and down. # Create a 2D list to store the number of paths to each cell dp = [[0]*m for _ in range(n)] # Initialize the first row and first column for i in range(n): dp[i][0] = 1 for j in range(m): dp[0][j] = 1 # Fill the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will contain the number of distinct paths return dp[n-1][m-1]"},{"question":"Write a python function to remove all vowels from a given string and check if the resulting string is a palindrome. A palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def remove_vowels_and_check_palindrome(s): Removes all vowels from the given string and checks if the resulting string is a palindrome. Parameters: s (str): The input string from which vowels are removed. Returns: bool: True if the resulting string is a palindrome, False otherwise. vowels = \\"aeiouAEIOU\\" no_vowels_str = ''.join([char for char in s if char not in vowels]) cleaned_str = ''.join([char.lower() for char in no_vowels_str if char.isalnum()]) return cleaned_str == cleaned_str[::-1]"},{"question":"Write a python function to provide a solution to this task which is to format a given List of numbers such that all numbers are at least of two digits and all numbers are aligned.","solution":"def format_numbers(numbers): Formats a list of numbers such that all numbers are at least two digits and aligned. Args: numbers (list): List of integers. Returns: list: List of formatted strings representing the numbers. # Convert each number to a zero-padded two-digit format if necessary formatted_numbers = [f\\"{num:02}\\" for num in numbers] return formatted_numbers"},{"question":"Write a python function to return the most frequent item in a list. If there is a tie, return the item that appears first in the list.","solution":"def most_frequent_item(lst): Returns the most frequent item in the list. In case of a tie, returns the item that appears first. if not lst: # check if the list is empty return None frequency = {} max_count = 0 most_frequent = None for item in lst: if item in frequency: frequency[item] += 1 else: frequency[item] = 1 # update most frequent item if frequency[item] > max_count or (frequency[item] == max_count and most_frequent is None): max_count = frequency[item] most_frequent = item return most_frequent"},{"question":"Write a python function to generate a series of numbers in a spiral pattern on a grid. The function should take two integers \`n\` and \`m\` as parameters, where \`n\` is the number of rows and \`m\` is the number of columns in the grid. The function should return a 2D list representing the spiral pattern.","solution":"def generate_spiral(n, m): Generates a spiral pattern grid of size n x m. Parameters: n (int): number of rows m (int): number of columns Returns: list: 2D list representing the spiral pattern grid = [[0] * m for _ in range(n)] value = 1 top, bottom, left, right = 0, n-1, 0, m-1 while top <= bottom and left <= right: for i in range(left, right + 1): grid[top][i] = value value += 1 top += 1 for i in range(top, bottom + 1): grid[i][right] = value value += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): grid[bottom][i] = value value += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): grid[i][left] = value value += 1 left += 1 return grid"},{"question":"Write a python function to normalize prices from a list. The function should take a list of prices as an input and return a list where each price is normalized by the maximum price in the list. The normalized prices should be between 0 and 1, where the maximum price in the original list becomes 1 and the minimum becomes 0.","solution":"def normalize_prices(prices): Normalizes prices in the list such that the maximum price in the list is 1 and the minimum price is 0. Args: prices (list): A list of prices. Returns: list: A list of normalized prices where the maximum is 1 and the minimum is 0. if not prices: # Return empty list if input list is empty. return [] max_price = max(prices) min_price = min(prices) if max_price == min_price: # If all prices are the same, return a list of ones. return [1 for _ in prices] return [(price - min_price) / (max_price - min_price) for price in prices]"},{"question":"Write a python function to check whether a given string is a palindrome or not. Additionally, check if the palindrome is a strict palindrome (ignoring case, spaces, and punctuation). A strict palindrome is one that reads the same backward as forward, ignoring spaces, punctuation, and case.","solution":"import re def is_palindrome(s): Check if the given string is a palindrome. return s == s[::-1] def is_strict_palindrome(s): Check if the given string is a strict palindrome, ignoring case, spaces, and punctuation. cleaned_s = re.sub(r'[W_]', '', s.lower()) # Removing non-alphanumeric characters and converting to lowercase return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to find the maximum sum of non-adjacent elements in a list. For example, if the input is [3, 2, 7, 10], the output should be 13 (3 + 10).","solution":"def max_sum_non_adjacent(nums): Returns the maximum sum of non-adjacent elements in the list nums. :param nums: List of integers :return: Maximum sum of non-adjacent elements if not nums: return 0 include = 0 exclude = 0 for num in nums: # Current max excluding num new_exclude = max(include, exclude) # Current max including num include = exclude + num exclude = new_exclude # Return max of both include and exclude return max(include, exclude)"},{"question":"Write a python function to find the kmers of a given string.","solution":"def find_kmers(string, k): Returns all kmers (substrings of length k) of the given string. :param string: The input string. :param k: The length of each kmer. :return: A list of kmers. kmers = [] for i in range(len(string) - k + 1): kmers.append(string[i:i+k]) return kmers"},{"question":"Write a python function to reverse the elements of a list in-place. The function should take a list as an argument and return nothing.","solution":"def reverse_list_in_place(lst): Reverses the elements of the list in place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to maximize the number of item pairs that can be selected such that one item in each pair is from set A and one item is from set B. The function should take two lists of integers as input, representing the sets A and B. It should return the maximum number of such pairs that can be formed.","solution":"def maximize_pairs(A, B): Returns the maximum number of pairs that can be formed such that one item in each pair is from set A and one item is from set B. A.sort() B.sort() i, j = 0, 0 pairs = 0 while i < len(A) and j < len(B): pairs += 1 i += 1 j += 1 return pairs"},{"question":"Write a python function to create a dictionary that stores user input data. The function should allow the user to input multiple key-value pairs. It should continue asking for input until the user decides to stop. The function should also handle cases where the user enters duplicate keys by choosing to either overwrite the existing value or ignore the input.","solution":"def create_user_dictionary(): Creates a dictionary based on user input. It allows the user to input multiple key-value pairs until they decide to stop. In case of duplicate keys, it asks the user whether to overwrite or ignore the entry. Returns: dict: A dictionary containing the user inputs. user_dict = {} while True: key = input(\\"Enter key (or 'stop' to finish): \\") if key.lower() == 'stop': break value = input(f\\"Enter value for {key}: \\") if key in user_dict: choice = input(f\\"Key '{key}' already exists. Overwrite? (yes/no): \\").lower() if choice == 'yes': user_dict[key] = value else: user_dict[key] = value return user_dict"},{"question":"Write a python function to check if a number is a perfect power of a given base.","solution":"def is_perfect_power_of_base(number, base): Returns True if the given number is a perfect power of the base, False otherwise. if number < 1 or base < 2: return False power = 0 while base ** power < number: power += 1 return base ** power == number"},{"question":"Write a python function to check if a list is sorted in a specific order or not.","solution":"def is_sorted(lst, order=\\"asc\\"): Checks if the list is sorted in the specified order. Parameters: - lst: list of elements to check. - order: str, either 'asc' for ascending or 'desc' for descending. Defaults to 'asc'. Returns: - bool: True if the list is sorted in the specified order, False otherwise. if order == \\"asc\\": return lst == sorted(lst) elif order == \\"desc\\": return lst == sorted(lst, reverse=True) else: raise ValueError(\\"order must be either 'asc' or 'desc'\\")"},{"question":"Write a python function to detect a substring in a string using the \`find\` function. The function should return the index of the first occurrence of the substring. If the substring is not found, it should return -1.","solution":"def find_substring(main_string, substring): Returns the index of the first occurrence of the substring in the main string. If the substring is not found, returns -1. return main_string.find(substring)"},{"question":"Write a python function to sort a given list using bubble sort algorithm. The function takes a list as an argument and sorts it in increasing order. The function should return the sorted list.","solution":"def bubble_sort(arr): Sorts a given list using the bubble sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to find the maximum number of occurrences of a number in a list of integers.","solution":"def max_occurrences(nums): Returns the number that has the maximum occurrences in the list. If there are multiple, return one of them. :param nums: List of integers. :return: Integer with the highest occurrences and its count. if not nums: return None, 0 count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 max_num = max(count, key=count.get) return max_num, count[max_num]"},{"question":"Write a python function to find the value at median position, i.e., the middle value after sorting. Note: If the list contains an odd number of elements, return the middle element. If the list contains an even number of elements, return the average of the two middle elements. The function should have parameters \`list\`: this is the list of numbers.","solution":"def find_median(lst): Returns the median value of the list. If the list length is odd, returns the middle element. If the list length is even, returns the average of the two middle elements. if not lst: raise ValueError(\\"The list must not be empty.\\") sorted_list = sorted(lst) n = len(sorted_list) if n % 2 == 1: # Odd number of elements, return the middle element return sorted_list[n // 2] else: # Even number of elements, return the average of the two middle elements mid1 = n // 2 - 1 mid2 = n // 2 return (sorted_list[mid1] + sorted_list[mid2]) / 2"},{"question":"Write a python function to find the maximum product of lengths of two parts of a positive integer N, where N is divided into two parts. The function should return the maximum product.","solution":"def max_product_of_parts(N): Returns the maximum product of lengths of two parts of N when divided into two parts. if N <= 1: return 0 max_product = 0 for i in range(1, N // 2 + 1): product = i * (N - i) if product > max_product: max_product = product return max_product"},{"question":"Write a python function to return the minimum and maximum as a tuple from a list of list of integers. You should use lambda and map functions for this.","solution":"def min_max_from_lists(lists): Returns a tuple containing the minimum and maximum value from a list of lists of integers. flat_list = sum(lists, []) return (min(flat_list), max(flat_list))"},{"question":"Write a python function to print all sub-arrays with their sum equal to zero.","solution":"def find_subarrays_with_zero_sum(arr): Finds and prints all sub-arrays with their sum equal to zero. n = len(arr) for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] if current_sum == 0: # Print the subarray print(arr[i:j+1])"},{"question":"Write a python function to find the first repeated element in a list.","solution":"def first_repeated_element(lst): Returns the first repeated element in the list. Parameters: lst (list): The list to check for repeated elements. Returns: The first repeated element if found, otherwise None. seen = set() for elem in lst: if elem in seen: return elem seen.add(elem) return None"},{"question":"Write a python function to parse the following string and return a dictionary where the keys are the unique words and the values are their occurrences.","solution":"def parse_string_to_word_count(s): Parses a given string and returns a dictionary where the keys are the unique words and the values are their occurrences. Parameters: s (str): The string to be parsed. Returns: dict: A dictionary with unique words as keys and their occurrences as values. words = s.split() word_count = {} for word in words: word = word.lower().strip('.,!?') if word not in word_count: word_count[word] = 1 else: word_count[word] += 1 return word_count"},{"question":"Write a python function to find common elements in three given lists using the set data structure. The function should return a list of common elements.","solution":"def common_elements(list1, list2, list3): Finds the common elements in three given lists using the set data structure. Args: list1, list2, list3: Lists of elements. Returns: A list of common elements in all three lists. # Convert lists to sets and find the intersection set1 = set(list1) set2 = set(list2) set3 = set(list3) # Find common elements common_set = set1 & set2 & set3 # Convert the set back to a list return list(common_set)"},{"question":"Write a python function to toggle the case of each character in a given string. The function should handle both uppercase and lowercase letters and leave non-alphabetic characters unchanged.","solution":"def toggle_case(s): Returns a new string with the case of each character in the input string toggled. Uppercase letters become lowercase, and lowercase letters become uppercase. Non-alphabetic characters are unchanged. :param s: str - Input string :return: str - String with toggled case characters return s.swapcase()"},{"question":"Write a python function to create a list of tuples, where each tuple contains the index of the number in the list and the number itself. You can use the enumerate() function.","solution":"def list_with_indices(numbers): Returns a list of tuples where each tuple contains the index of the number in the list and the number itself. :param numbers: List of numbers :return: List of tuples return list(enumerate(numbers))"},{"question":"Write a python function to determine if a string contains only unique characters without using any additional data structures. You are only allowed to use basic data types like integers and boolean.","solution":"def has_unique_characters(s): Determine if a string contains only unique characters without using any additional data structures. if len(s) > 128: # Assuming ASCII character set return False # Using an integer to track existence of characters # There are 128 possible characters in ASCII set, we can use 2^7 bits (0-127) checker = 0 for char in s: val = ord(char) if (checker & (1 << val)) > 0: return False checker |= (1 << val) return True"},{"question":"Write a python function to calculate the sum of an array of integers. The function should use a modern and efficient coding approach, and it should include comments and error handling.","solution":"def sum_array(arr): Returns the sum of an array of integers. Parameters: arr (list of int): The array of integers to sum. Returns: int: The sum of the array elements. Raises: TypeError: If arr is not a list or if any element in arr is not an integer. if not isinstance(arr, list): raise TypeError(\\"Input should be a list\\") for element in arr: if not isinstance(element, int): raise TypeError(\\"All elements in the array should be integers\\") return sum(arr)"},{"question":"Write a python function to reverse the order of words in a given string sentence. Each word is assumed to be separated by a single space.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The sentence to be reversed. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to check if a matrix is diagonally dominant. A matrix is considered diagonally dominant if, for every row of the matrix, the absolute value of the diagonal element is greater than the sum of the absolute values of the remaining elements in the same row.","solution":"def is_diagonally_dominant(matrix): Checks if a given square matrix is diagonally dominant. A matrix is considered diagonally dominant if, for every row i, the absolute value of the diagonal element at row i, column i is greater than the sum of the absolute values of the remaining elements in that row. Args: matrix (list of list of int): A square matrix represented as a list of lists. Returns: bool: True if the matrix is diagonally dominant, False otherwise. n = len(matrix) for i in range(n): diag_element = abs(matrix[i][i]) non_diag_sum = sum(abs(matrix[i][j]) for j in range(n) if j != i) if diag_element <= non_diag_sum: return False return True"},{"question":"Write a python function to find the minimum distance between two different elements in a numerical array.","solution":"def min_distance(arr, x, y): Returns the minimum distance between two different elements x and y in a numerical array arr. n = len(arr) min_dist = float('inf') x_idx = -1 y_idx = -1 for i in range(n): if arr[i] == x: x_idx = i elif arr[i] == y: y_idx = i if x_idx != -1 and y_idx != -1: min_dist = min(min_dist, abs(x_idx - y_idx)) if min_dist == float('inf'): return -1 # x or y not present in array return min_dist"},{"question":"Write a python function to find the maximum set bits in a number. Set bits are those bits which are set to 1.","solution":"def max_set_bits(num): Returns the maximum number of set bits in the binary representation of the given number. Args: num (int): The input number. Returns: int: The count of set bits in the input number. return bin(num).count('1')"},{"question":"Write a python function to count the occurrences of a given element in a list. The function should return the count of the element if it exists, otherwise return 0.","solution":"def count_occurrences(lst, element): Returns the number of occurrences of the given element in the list. If the element is not present in the list, returns 0. return lst.count(element)"},{"question":"Write a python function to check if a provided list of integers contains a \\"Pythagorean triple\\". A Pythagorean triple consists of three positive integers a, b, and c, such that a² + b² = c².","solution":"def has_pythagorean_triple(lst): Checks if the provided list of integers contains a Pythagorean triple. A Pythagorean triple consists of three positive integers a, b, and c, such that a² + b² = c². Parameters: lst (list): List of integers to check. Returns: bool: True if there exists a Pythagorean triple, otherwise False. squared_numbers = set(x ** 2 for x in lst) for a in lst: for b in lst: if a != b: if a ** 2 + b ** 2 in squared_numbers: return True return False"},{"question":"Write a python function to print n numbers of Fibonacci series.","solution":"def fibonacci(n): Returns a list containing the first n numbers in the Fibonacci series. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] series = [0, 1] for i in range(2, n): series.append(series[-1] + series[-2]) return series"},{"question":"Write a python function to determine if a given string of parentheses is balanced. A string of parentheses is considered balanced if every opening parenthesis '(' has a corresponding closing parenthesis ')' and the pairs are properly nested.","solution":"def is_balanced_parentheses(s): Determines if a given string of parentheses is balanced. Arguments: s -- string input containing parentheses Returns: True if the string is balanced, False otherwise stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to print \\"hello world!\\" 10 times with a delay of 1 second between each iteration.","solution":"import time def print_hello_world(): Prints \\"hello world!\\" 10 times with a delay of 1 second between each iteration. for _ in range(10): print(\\"hello world!\\") time.sleep(1)"},{"question":"Write a python function to system date and time.","solution":"from datetime import datetime def get_system_datetime(): Returns the current system date and time. return datetime.now()"},{"question":"Write a python function to calculate the sum of all Fibonacci numbers up to a given number n.","solution":"def sum_fibonacci_up_to(n): Calculates the sum of all Fibonacci numbers up to a given number n. if n < 0: return 0 a, b = 0, 1 fib_sum = 0 while a <= n: fib_sum += a a, b = b, a + b return fib_sum"},{"question":"Write a python function to check if two lists are the same or not.","solution":"def are_lists_same(list1, list2): Check if two lists are the same. Args: list1: First list to compare. list2: Second list to compare. Returns: True if both lists are the same, False otherwise. return list1 == list2"},{"question":"Write a python function to calculate the product of any number of numbers.","solution":"def product(*args): Returns the product of any number of numbers. result = 1 for num in args: result *= num return result"},{"question":"Write a python function to find the maximum value in a list of numbers. You should use the approach of dynamic programming to solve this problem. However, consider that the dynamic programming solution should run in a time complexity of O(n) and use a constant amount of extra space. This is a bit tricky because dynamic programming often involves maintaining a table, but we need to avoid this overhead for this specific task.","solution":"def find_max_value(nums): Returns the maximum value in a list of numbers using a dynamic programming approach with a time complexity of O(n) and a constant amount of extra space. if not nums: raise ValueError(\\"The list is empty\\") max_value = nums[0] for num in nums: if num > max_value: max_value = num return max_value"},{"question":"Write a python function to calculate the total amount of money a person would receive if they gave a 10% commission to a salesperson for every 100 dollars sold. The function should take the total sales amount as an argument and return the commission amount.","solution":"def calculate_commission(total_sales): Calculates the commission based on a 10% rate for every 100 dollars sold. Args: total_sales (float): The total amount of sales in dollars. Returns: float: The calculated commission. commission_rate = 0.10 commission = (total_sales // 100) * 100 * commission_rate return commission"},{"question":"Write a python function to generate the Fibonacci series upto n terms. The function should take the number of terms as input and return the series as a list.","solution":"def fibonacci_series(n): Generates the Fibonacci series up to n terms. Parameters: n (int): The number of terms in the Fibonacci series. Returns: list: A list containing the Fibonacci series up to n terms. if n <= 0: return [] elif n == 1: return [0] series = [0, 1] while len(series) < n: series.append(series[-1] + series[-2]) return series"},{"question":"Write a python function to find the maximum sum of a subarray within a 2D array (list of lists).","solution":"def max_sum_subarray_2d(matrix): Finds the maximum sum of a subarray within a 2D array. Args: matrix (list of list of int): 2D array of integers. Returns: int: Maximum sum of a subarray. def kadane(arr): # Helper function to perform the 1D Kadane's algorithm max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum rows = len(matrix) cols = len(matrix[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Write a python function to solve the following problem: Given a string s and an integer k, return the maximum number of substrings that can be obtained by deleting at most k characters. A substring is defined as a contiguous part of a string.","solution":"def max_substrings_after_deletion(s, k): Returns the maximum number of substrings that can be obtained by deleting at most k characters from the string s. Args: s: str - the input string k: int - the maximum number of deletions allowed Returns: int - the maximum number of substrings # If k is greater than or equal to the length of the string, we can delete all characters, # thus making no substrings left. if k >= len(s): return 0 # Otherwise, each character in the string can be considered a potential split point for the substrings num_splits = len(s) - k return num_splits"},{"question":"Write a python function to check if a given number is odd or even, using the modulus operator.","solution":"def is_even(number): Returns True if the given number is even, False if it is odd. return number % 2 == 0"},{"question":"Write a python function to find the largest substring of a given string where all characters are unique. For example, the input string \\"abcabcbb\\" should return \\"abc\\", as \\"abc\\" is the longest substring with all unique characters.","solution":"def longest_unique_substring(s): Returns the longest substring of a given string where all characters are unique. Args: s (str): The input string. Returns: str: The longest substring with all unique characters. char_index_map = {} start = 0 max_length = 0 max_substring = \\"\\" for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i if i - start + 1 > max_length: max_length = i - start + 1 max_substring = s[start:i+1] return max_substring"},{"question":"Write a python function to remove all the duplicates from a list and return the list. The function should handle large lists efficiently and also consider the case where the list contains None values.","solution":"def remove_duplicates(lst): Remove duplicates from a list and return the list with only unique elements. seen = set() unique_list = [] for item in lst: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a python function to find the minimum number of coins required to make a given total using a given set of coins denominations. You need to return the minimum number of coins required or -1 if it is not possible to form the total given the coin denominations.","solution":"def min_coins(coins, total): Returns the minimum number of coins required to make the given total using the given set of coins, or -1 if it is not possible to form the total. Coins: List[int] - The denominations of the coins available. Total: int - The total amount to be formed. # Initialize the array to store the minimum coins needed for every value from 0 to total dp = [float('inf')] * (total + 1) dp[0] = 0 # Base case: No coins are needed to form the total 0 # Iterate over every amount from 1 to total for i in range(1, total + 1): # Check for every coin denomination for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[total] if dp[total] != float('inf') else -1"},{"question":"Write a python function to check the primality of a number using a for loop and without using python's built-in function is_prime.","solution":"def is_prime(n): Checks if a number n is prime. Args: n (int): The number to check. Returns: bool: True if n is prime, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a python function to evaluate the value of an arithmetic expression represented as a string.","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression represented as a string. Args: expression (str): The arithmetic expression to evaluate. Returns: int/float: The result of the arithmetic expression. try: # Evaluate the expression using eval result = eval(expression) return result except (SyntaxError, NameError, TypeError, ZeroDivisionError): return \\"Invalid expression\\""},{"question":"Write a python function to print a list of string patterns based on the number of elements. If the list has '5' elements, it should print \\"*\\".","solution":"def print_star_pattern(num_elements): Returns a list of strings with '*' character repeated num_elements times. If num_elements is 5, the output list will contain [\\"*\\"], if 10 then [\\"**********\\"], etc. if num_elements < 1: return [] return [\\"*\\" * num_elements]"},{"question":"Write a python function to rotate the elements of an array by k positions. For example, if the array is [1, 2, 3, 4, 5] and k=2, the output should be [4, 5, 1, 2, 3]. You can assume that k is non-negative and no larger than the length of the array.","solution":"def rotate_array(arr, k): Rotates the elements of arr by k positions to the right. Parameters: arr (list): The list of elements to rotate. k (int): The number of positions to rotate the array by. Returns: list: The rotated array. if not arr: return arr n = len(arr) k = k % n # To handle cases where k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"Write a python function to generate all possible subsets of a given array. For example, given the array [1, 2, 3], the function should return all possible subsets: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]].","solution":"from itertools import chain, combinations def all_subsets(arr): Generate all possible subsets of a given array. # Chain all combinations from 0 to length of array return list(chain.from_iterable(combinations(arr, r) for r in range(len(arr)+1)))"},{"question":"Write a python function to find the sum of products of consecutive integers in a list.","solution":"def sum_of_products(lst): Returns the sum of products of consecutive integers in a list. Parameters: lst (list): A list of integers. Returns: int: The sum of products of consecutive integers. if len(lst) < 2: return 0 total = 0 for i in range(len(lst) - 1): total += lst[i] * lst[i + 1] return total"},{"question":"Write a python function to convert an angle in degrees to its equivalent in radians. Consider using the math module for trigonometric functions. Use the formula \`radians = degrees * (π / 180)\`. To do this, you can access the value of π using \`math.pi\`.","solution":"import math def degrees_to_radians(degrees): Converts an angle from degrees to radians. Parameters: degrees (float): The angle in degrees. Returns: float: The angle in radians. radians = degrees * (math.pi / 180) return radians"},{"question":"Write a python function to solve the following problem: given a list of numbers, return the missing number from a sequence from 1 to n, where n is the length of the list plus one. For example, if the input is [1, 2, 4], the output should be 3.","solution":"def find_missing_number(nums): Returns the missing number in the sequence from 1 to n, where n is the length of nums plus one. n = len(nums) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(nums) return total_sum - actual_sum"},{"question":"Write a python function to find the length of the longest common prefix between two strings. For example, if the input is (\\"flower\\", \\"flow\\"), the output should be 4 because the longest common prefix is \\"flow\\".","solution":"def longest_common_prefix(str1, str2): Returns the length of the longest common prefix between two strings. Parameters: - str1 (str): The first string. - str2 (str): The second string. Returns: int: The length of the longest common prefix. min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] != str2[i]: return i return min_length"},{"question":"Write a python function to calculate and return the square root of a given number. If the number is negative, return an error message.","solution":"import math def sqrt(number): Returns the square root of the given number if non-negative. If the number is negative, returns an error message. if number < 0: return \\"Error: Cannot calculate the square root of a negative number.\\" return math.sqrt(number)"},{"question":"Write a python function to check if a given string is a correct mathematical expression. The function should return True if the expression is correct, and False otherwise. A correct expression is well-formed and all parentheses are closed. For example, \\"2 + (3 * 4)\\" is a correct expression, but \\"2 + (3 * 4\\" is not.","solution":"def is_correct_expression(expression): This function checks if the given string is a correct mathematical expression. A correct expression must be well-formed and have all parentheses closed. Parameters: expression (str): The input expression string. Returns: bool: True if the expression is correct, False otherwise. stack = [] for char in expression: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to check if a given number is a prime number or not. Please include a brief explanation of your approach and any external libraries you use.","solution":"def is_prime(n): Check if a given number n is a prime number. A prime number is a natural number greater than 1 that is not divisible by any number other than 1 and itself. :param n: int :return: bool if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to find the maximum sum of a subarray in a given array. This function should handle large arrays efficiently.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given array using Kadane's Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the number of nodes at each level in a binary tree.","solution":"from collections import deque, defaultdict def nodes_at_each_level(root): Returns the number of nodes at each level in a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: dict: A dictionary where keys are levels (starting from 0) and values are the number of nodes at each level. if not root: return {} level_counts = defaultdict(int) queue = deque([(root, 0)]) while queue: node, level = queue.popleft() level_counts[level] += 1 if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return dict(level_counts) # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right"},{"question":"Write a python function to find the sum of all the numbers in a given list. You should handle possible exceptions by ensuring the list contains only numbers and are not empty.","solution":"def sum_of_numbers(numbers): Returns the sum of all the numbers in the given list. Parameters: numbers (list): A list of numbers. Returns: int or float: The sum of all the numbers in the list. Raises: ValueError: If the list is empty or contains non-numeric elements. if not numbers: raise ValueError(\\"The list is empty.\\") total = 0 for num in numbers: if not isinstance(num, (int, float)): raise ValueError(f\\"Non-numeric element found in the list: {num}\\") total += num return total"},{"question":"Write a python function to find all permutations of a given list. Ensure the function handles duplicates and returns unique permutations.","solution":"import itertools def unique_permutations(lst): Returns all unique permutations of the given list. return list(set(itertools.permutations(lst)))"},{"question":"Write a python function to check if a given number is a prime number or not. The function should return \`True\` if the number is prime and \`False\` otherwise. Additionally, provide a couple of test cases to ensure the function works correctly.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to check if the list is empty, if yes return \\"List is empty\\", else return the head of the list.","solution":"def check_list(lst): Checks if the list is empty. If empty, returns \\"List is empty\\". Otherwise, returns the head of the list. if not lst: return \\"List is empty\\" else: return lst[0]"},{"question":"Write a python function to detect if there are any duplicate numbers in the given list. If there are, return 'Duplicate', otherwise, return 'No duplicates'.","solution":"def detect_duplicates(numbers): Detect if there are any duplicate numbers in the given list. Parameters: numbers (list of int): The list of integers to check for duplicates. Returns: str: 'Duplicate' if any duplicates are found, 'No duplicates' otherwise. if len(numbers) != len(set(numbers)): return 'Duplicate' return 'No duplicates'"},{"question":"Write a python function to convert a string into a dictionary where the keys are the letters of the alphabet and the values are the counts of how many times each letter appears in the string. Ignore case and ignores non-alphabet characters.","solution":"def count_letters(s): Converts a string into a dictionary where the keys are the letters of the alphabet and the values are the counts of how many times each letter appears in the string. Ignores case and ignores non-alphabet characters. s = s.lower() letter_counts = {} for char in s: if 'a' <= char <= 'z': if char in letter_counts: letter_counts[char] += 1 else: letter_counts[char] = 1 return letter_counts"},{"question":"Write a python function to find the beginning and the end of a given natural number in form of a string.","solution":"def find_beg_end_of_number_string(n: int) -> (str, str): Returns the first and last digits of a given natural number in form of a string. :param n: Natural number (int) :return: (str, str) tuple containing the first and last digits as strings num_str = str(n) return (num_str[0], num_str[-1])"},{"question":"Write a python function to calculate the sum of all numbers in a nested dictionary, where numbers can be nested within dictionaries or lists within the dictionary.","solution":"def sum_nested(data): Recursively sums all numbers in a nested dictionary, where numbers can be within dictionaries or lists within the dictionary. if isinstance(data, dict): return sum(sum_nested(value) for value in data.values()) elif isinstance(data, list): return sum(sum_nested(item) for item in data) elif isinstance(data, (int, float)): return data else: return 0 # Sample usage # data = { # \\"a\\": 1, # \\"b\\": { # \\"c\\": 2, # \\"d\\": [3, 4] # }, # \\"e\\": [5, {\\"f\\": 6}] # } # print(sum_nested(data)) # Output: 21"},{"question":"Write a python function to find the closest number from a list of numbers using binary search.","solution":"def closest_number(arr, target): Finds the closest number to the target in a sorted list arr using binary search. Parameters: arr (list): A list of sorted integers. target (int): The target integer to find the closest number to. Returns: int: The closest number to the target in the list. if not arr: raise ValueError(\\"The array should not be empty\\") low, high = 0, len(arr) - 1 best_guess = arr[0] while low <= high: mid = (low + high) // 2 if arr[mid] == target: return arr[mid] # Update the best guess if the current mid is closer to target if abs(arr[mid] - target) < abs(best_guess - target): best_guess = arr[mid] if target < arr[mid]: high = mid - 1 else: low = mid + 1 return best_guess"},{"question":"Write a python function to calculate the area of a rectangle given its length and width.","solution":"def calculate_rectangle_area(length, width): Returns the area of a rectangle given its length and width. if length < 0 or width < 0: raise ValueError(\\"Length and width must be non-negative.\\") return length * width"},{"question":"Write a python function to print all the prime numbers up to a given number n. Also, calculate the time complexity and space complexity of your function.","solution":"def primes_up_to(n): Prints all prime numbers up to a given number n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) for p in range(2, n + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return primes # Time Complexity: O(n log log n) # Space Complexity: O(n)"},{"question":"Write a python function to find a missing number in an array containing n n-1 integers where each integer is in the range [1, n]. There is exactly one number missing.","solution":"def find_missing_number(arr): Find the missing number in the array containing integers from 1 to n. n = len(arr) + 1 total = n * (n + 1) // 2 return total - sum(arr)"},{"question":"Write a python function to find out the maximum and minimum values in a list. You should also include error handling for cases where the list is empty or contains non-numeric values.","solution":"def find_max_min(values): Returns a tuple with the maximum and minimum values in the list. Parameters: values (list): A list of numeric values. Returns: tuple: A tuple containing the maximum and minimum values. Raises: ValueError: If the list is empty or contains non-numeric values. if not values: raise ValueError(\\"The list is empty.\\") if not all(isinstance(x, (int, float)) for x in values): raise ValueError(\\"The list contains non-numeric values.\\") return (max(values), min(values))"},{"question":"Write a python function to solve the Leetcode problem 53. Maximum Subarray.","solution":"def max_sub_array(nums): Returns the sum of the maximum subarray from the given list of integers. :param nums: List[int] :return: int if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to generate the Fibonacci sequence up to a given number of terms. The terms are input by the user. The function should return the sequence as a list.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to n terms. if n <= 0: return [] elif n == 1: return [0] fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write a python function to partition an array into k subsets such that the maximum sum of any subset is minimum.","solution":"def can_partition(nums, k, max_sum): Helper function to check if we can partition the nums array into k subsets with each subset sum <= max_sum. current_sum = 0 required_subsets = 1 for num in nums: if current_sum + num > max_sum: required_subsets += 1 current_sum = num if required_subsets > k: return False else: current_sum += num return True def min_max_partition_sum(nums, k): Returns the minimum possible value of the maximum sum of any subset when partitioning the array nums into k subsets. left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_partition(nums, k, mid): right = mid else: left = mid + 1 return left"},{"question":"Write a python function to find the intersection of two lists of integers, where the intersection contains only unique elements. The lists may contain duplicate elements. The function should return a sorted list of the unique common elements.","solution":"def intersection_of_lists(list1, list2): Returns a sorted list of unique common elements from two lists of integers. # Convert lists to sets to find unique elements and their intersection set1 = set(list1) set2 = set(list2) intersection = set1 & set2 # Return the sorted list of the intersection return sorted(list(intersection))"},{"question":"Write a python function to create a unique identifier.","solution":"import uuid def create_unique_identifier(): Generates a unique identifier using the uuid4 method. This identifier is in the form of a UUID (Universally Unique Identifier). return str(uuid.uuid4())"},{"question":"Write a python function to determine if two strings are anagram of each other or not. Two strings are anagram if they are made of the same characters and in the same frequency.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Write a python function to find the two numbers such that they add up to a specific target number. You may assume that each input would have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return None"},{"question":"Write a python function to create a Binary Search Tree (BST) and perform an InOrder traversal on it. Given a list of integers as input, convert the list into a balanced BST, and then perform an InOrder traversal to print the elements in sorted order.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def sorted_array_to_bst(arr): if not arr: return None mid = len(arr) // 2 root = TreeNode(arr[mid]) root.left = sorted_array_to_bst(arr[:mid]) root.right = sorted_array_to_bst(arr[mid+1:]) return root def inorder_traversal(root): if root: yield from inorder_traversal(root.left) yield root.value yield from inorder_traversal(root.right) def convert_list_to_bst_and_inorder(int_list): sorted_list = sorted(int_list) bst_root = sorted_array_to_bst(sorted_list) return list(inorder_traversal(bst_root)) # Example usage # my_list = [4, 2, 5, 1, 3] # print(convert_list_to_bst_and_inorder(my_list)) # Output: [1, 2, 3, 4, 5]"},{"question":"Write a python function to find the frequency of each word in a given string. The string can contain different types of characters (letters, numbers, punctuation), and your function should handle these cases appropriately. Ensure that all words are compared in a case-insensitive manner, and punctuation should be removed from the words.","solution":"import re from collections import Counter def word_frequency(s): Returns a dictionary containing the frequency of each word in the given string. This function is case-insensitive and removes punctuation. Parameters: s (str): The input string. Returns: dict: A dictionary with words as keys and their frequency as values. # Convert to lower case s = s.lower() # Remove punctuation s = re.sub(r'[^ws]', '', s) # Split the string into words words = s.split() # Get the frequency of each word freq = Counter(words) return freq"},{"question":"Write a python function to remove duplicate characters from a string. The function should return the string with all duplicate characters removed.","solution":"def remove_duplicate_characters(s): Removes all duplicate characters from the string s. Parameters: s (str): The input string. Returns: str: A string with all duplicate characters removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to find the maximum sum of any contiguous subarray of size \`k\` in a given list of integers.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any contiguous subarray of size \`k\` in the given list \`arr\`. if not arr or k <= 0 or k > len(arr): return 0 max_sum = float('-inf') current_sum = sum(arr[:k]) max_sum = current_sum for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to calculate the ASCII value of a character.","solution":"def ascii_value(char): Returns the ASCII value of the given character. return ord(char)"},{"question":"Write a python function to find the maximum sum of a continuous subarray within a one-dimensional array of numbers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a continuous subarray within the given one-dimensional array of numbers. This implementation utilizes Kadane's algorithm. :param nums: List[int] - A list of integers :return: int - The maximum sum found in any of the continuous subarrays if not nums: return 0 max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to calculate the sum of all odd numbers from 0 to n (inclusive).","solution":"def sum_of_odd_numbers(n): Returns the sum of all odd numbers from 0 to n (inclusive). return sum(i for i in range(n + 1) if i % 2 != 0)"},{"question":"Write a python function to find the maximum number in a list of integers. If the list is empty, return None.","solution":"def find_maximum(numbers): Returns the maximum number in a list of integers. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Write a python function to calculate and return a list of strings of the equivalent 16 humidex scale values for temperatures ranging from 20 to 40 degrees Celsius with a step of 2. Each string should follow the format \\"#°C #.#°F #.# HU\\".","solution":"def calculate_humidex(): Calculate and return a list of strings of the equivalent 16 humidex scale values for temperatures ranging from 20 to 40 degrees Celsius with a step of 2. Each string should follow the format \\"#°C #.#°F #.# HU\\". temperatures_c = list(range(20, 42, 2)) humidex_list = [] for temp_c in temperatures_c: temp_f = (temp_c * 9/5) + 32 # Simplified humidex calculation as example; real equation would use dew point and other factors humidex = temp_c + 5 # This is a placeholder for the actual humidex calculation humidex_list.append(f\\"{temp_c}°C {temp_f:.3f}°F {humidex:.3f} HU\\") return humidex_list"},{"question":"Write a python function to print the even factors of a given number.","solution":"def even_factors(n): Returns a list of even factors of the given number n. if n < 1: return [] return [i for i in range(2, n + 1, 2) if n % i == 0]"},{"question":"Write a python function to sort a list of lists by the second item in each sublist using Bubble Sort algorithm.","solution":"def bubble_sort_by_second_item(lst): Sorts a list of lists based on the second item in each sublist using Bubble Sort algorithm. Args: lst (list of lists): The list to be sorted. Returns: list of lists: The sorted list. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j][1] > lst[j+1][1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Write a python function to find the number of days between two dates given in the format DD/MM/YYYY.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the number of days between two dates given in DD/MM/YYYY format. date_format = \\"%d/%m/%Y\\" start_date = datetime.strptime(date1, date_format) end_date = datetime.strptime(date2, date_format) delta = end_date - start_date return abs(delta.days)"},{"question":"Write a python function to sort a list of tuples by the third item in each tuple.","solution":"def sort_by_third_item(tuples_list): Sorts a list of tuples by the third item in each tuple. Args: tuples_list (list of tuples): List of tuples to be sorted. Returns: list of tuples: Sorted list of tuples. return sorted(tuples_list, key=lambda x: x[2])"},{"question":"Write a python function to remove duplicates from a list of integers in O(n) time complexity.","solution":"def remove_duplicates(nums): Removes duplicate integers from a list while maintaining original order. Args: nums (List[int]): The list of integers. Returns: List[int]: A list without duplicates. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a python function to count the number of sentences in a given string.","solution":"def count_sentences(text): Returns the number of sentences in a given string. A sentence is defined as ending with a period (.), exclamation mark (!), or question mark (?). import re # Split the text by sentence-ending punctuation followed by some space or end of the string sentences = re.split(r'[.!?]s*', text) # Filter out any empty strings that may result from the split sentences = [s for s in sentences if s] return len(sentences)"},{"question":"Write a python function to generate the first N Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Your function should return a list of the first N Fibonacci numbers.","solution":"def generate_fibonacci(n): Generate the first N Fibonacci numbers. Args: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first N Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) return fibonacci_sequence"},{"question":"Write a python function to find the element that occurs most frequently in an array. If there are multiple such elements, return the smallest one. If the array is empty, return None.","solution":"from collections import Counter def most_frequent_element(arr): Finds the element that occurs most frequently in the array. If there are multiple such elements, returns the smallest one. If the array is empty, returns None. if not arr: return None counter = Counter(arr) max_count = max(counter.values()) most_frequent = [k for k, v in counter.items() if v == max_count] return min(most_frequent)"},{"question":"Write a python function to determine the points on a circle that are covered by another circle. The function should take as input the center and radius of both circles and return a list of points that are covered by both circles.","solution":"import math def points_covered_by_another_circle(center1, radius1, center2, radius2): Determine the points on a circle that are covered by another circle. Parameters: center1 (tuple): A tuple representing the center (x1, y1) of the first circle. radius1 (float): The radius of the first circle. center2 (tuple): A tuple representing the center (x2, y2) of the second circle. radius2 (float): The radius of the second circle. Returns: list: A list of tuples representing the points that are on the circumference of the first circle and within the second circle. x1, y1 = center1 x2, y2 = center2 points = [] # Sample points on the circumference of the first circle for angle in range(0, 360): theta = math.radians(angle) point_x = x1 + radius1 * math.cos(theta) point_y = y1 + radius1 * math.sin(theta) # Check if the sampled point is within the second circle if (point_x - x2) ** 2 + (point_y - y2) ** 2 <= radius2 ** 2: points.append((point_x, point_y)) return points"},{"question":"Write a python function to find the harmonious array. The definition of a harmonious array is that the number of differing elements between two adjacent elements is 1(i.e., they need to be consecutive). The function should return the maximum length of such an array.","solution":"def findLHS(nums): Finds the maximum length of a harmonious array in the given list of numbers. A harmonious array is one where the difference between its maximum and minimum values is exactly 1. Parameters: nums (list): A list of integers. Returns: int: The maximum length of a harmonious array. from collections import Counter # Count the occurrences of each number in the list count = Counter(nums) max_length = 0 # Iterate over the unique numbers in the list for num in count: # Check if the consecutive number is in the list if num + 1 in count: # Update the maximum length if the current pair forms a longer harmonious array max_length = max(max_length, count[num] + count[num + 1]) return max_length"},{"question":"Write a python function to convert a string to a list of words, where each word is separated by space. If the input string is empty or consists only of spaces, the function should return an empty list.","solution":"def string_to_words(input_string): Converts a string to a list of words, where each word is separated by space. If the input string is empty or consists only of spaces, returns an empty list. # Split the string by spaces and filter out any empty strings return [word for word in input_string.split() if word]"},{"question":"Write a python function to find the index of an item in a list, but if the item is not found, return the next available index instead of raising an error.","solution":"def find_index_or_next(lst, item): Returns the index of the item in the list. If the item is not found, returns the next available index. try: return lst.index(item) except ValueError: return len(lst)"},{"question":"Write a python function to return the last element of a list.","solution":"def get_last_element(lst): Returns the last element of the list. Parameters: lst (list): The list from which to get the last element. Returns: any: The last element of the list. if not lst: return None return lst[-1]"},{"question":"Write a python function to find the minimum and maximum number of elements in a given list of lists. The function should return a tuple containing the minimum and maximum elements found in any of the sub-lists.","solution":"def find_min_max_elements(lists): Find the minimum and maximum elements in a list of lists. Args: lists (list of lists): A list containing sub-lists. Returns: tuple: A tuple containing the minimum and maximum elements found in any of the sub-lists. if not lists: return (None, None) min_element = float('inf') max_element = float('-inf') for sublist in lists: if sublist: min_element = min(min_element, min(sublist)) max_element = max(max_element, max(sublist)) min_element = min_element if min_element != float('inf') else None max_element = max_element if max_element != float('-inf') else None return (min_element, max_element)"},{"question":"Write a python function to convert a nested dictionary to a nested list. The function should return a list of lists, where each nested list corresponds to the keys and values of a dictionary at each level of nesting.","solution":"def dict_to_nested_list(d): Convert a nested dictionary to a nested list. Parameters: d (dict): The dictionary to convert. Returns: list: The nested list representation of the dictionary. if not isinstance(d, dict): return d return [[k, dict_to_nested_list(v)] for k, v in d.items()]"},{"question":"Write a python function to find the most frequently occurring integer in a list. If multiple integers occur with the same frequency, return the smallest one.","solution":"from collections import Counter def most_frequent_integer(lst): Returns the most frequently occurring integer in a list. If multiple integers occur with the same frequency, returns the smallest one. if not lst: return None # Return None if the list is empty counter = Counter(lst) most_frequent = min(counter.keys(), key=lambda x: (-counter[x], x)) return most_frequent"},{"question":"Write a python function to enumerate all the characters in a provided string that are not vowels (e.g., a, e, i, o, u). The function should return a list of these characters.","solution":"def enumerate_non_vowels(s): Returns a list of all characters in the given string that are not vowels. Parameters: s (str): The string to enumerate characters from. Returns: list: A list of non-vowel characters. vowels = set(\\"aeiouAEIOU\\") return [char for char in s if char not in vowels]"},{"question":"Write a python function to check if a given string contains only alphabets and spaces.","solution":"def is_alpha_space(s): Checks if the input string contains only alphabets and spaces. Parameters: s (str): The input string to check. Returns: bool: True if the string contains only alphabets and spaces, False otherwise. return all(c.isalpha() or c.isspace() for c in s)"},{"question":"Write a python function to sort an array using the quick sort algorithm. The function should handle edge cases such as an array of size one and an empty array. Justify your choice of partition algorithm and provide a detailed explanation of your Quick Sort implementation.","solution":"def quick_sort(arr): Sorts an array in place using the Quick Sort algorithm. Parameters: arr (list): The list of elements to be sorted. Returns: list: The sorted list. def partition(low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] < pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_sort_recursive(low, high): if low < high: pi = partition(low, high) quick_sort_recursive(low, pi - 1) quick_sort_recursive(pi + 1, high) if len(arr) <= 1: return arr quick_sort_recursive(0, len(arr) - 1) return arr"},{"question":"Write a python function to find the sum of all numbers in a list of lists using recursion.","solution":"def sum_recursive(lst): Returns the sum of all numbers in a list of lists using recursion. total = 0 for item in lst: if isinstance(item, list): total += sum_recursive(item) else: total += item return total"},{"question":"Write a python function to find the maximum number of unique integers in a given array.","solution":"def max_unique_integers(arr): Returns the maximum number of unique integers in the given array. Args: arr (list): A list of integers Returns: int: The count of unique integers in the array return len(set(arr))"},{"question":"Write a python function to fetch and display the list of all files and directories in a given directory along with their types (either file or directory). Suppose that the function takes a single string parameter representing the directory path and returns a list of tuples. Each tuple contains two elements: the name of the file/directory and its type ('file' or 'dir').","solution":"import os def list_files_and_directories(directory_path): Returns a list of tuples containing the names of files and directories in the given directory, along with their types ('file' or 'dir'). Parameters: directory_path (str): The path of the directory to list. Returns: list of tuples: Each tuple contains (name, type) where type is either 'file' or 'dir'. items = [] for item_name in os.listdir(directory_path): item_path = os.path.join(directory_path, item_name) if os.path.isfile(item_path): items.append((item_name, 'file')) elif os.path.isdir(item_path): items.append((item_name, 'dir')) return items"},{"question":"Write a python function to calculate the factorial of a number using recursion and then write a test case to check the function.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to reverse a list of elements. You cannot use the built-in reverse function or slicing. How can you do this?","solution":"def reverse_list(lst): Returns a new list with the elements of the original list in reverse order. reversed_lst = [] for element in lst: reversed_lst.insert(0, element) return reversed_lst"},{"question":"Write a python function to find the maximum occurring element in an array of integers and return its count. If there are multiple elements with the same maximum frequency, return the smallest element among them.","solution":"def max_occurrence(nums): Returns the count of the maximum occurring element in an array of integers. If multiple elements have the same maximum frequency, returns the smallest element among them. Parameters: nums (list of int): List of integers. Returns: int: The count of the maximum occurring element. from collections import Counter count = Counter(nums) max_count = max(count.values()) max_elements = [num for num, cnt in count.items() if cnt == max_count] return count[min(max_elements)]"},{"question":"Write a python function to print a pattern of numbers.","solution":"def print_pattern(n): Prints a right-aligned pattern of incremental numbers for the given number n. For example, if n = 5, the output will be: 1 12 123 1234 12345 :param n: The number of lines in the pattern for i in range(1, n + 1): # Print leading spaces print(' ' * (n - i), end='') # Print incremental numbers for j in range(1, i + 1): print(j, end='') # Newline at the end of each row print() # Example call for manual testing print_pattern(5)"},{"question":"Write a python function to sort a list of strings based on the length of the strings. If two strings have the same length, sort them based on their lexicographic order. The function should return the sorted list of strings.","solution":"def sort_strings(strings): Sort a list of strings based on the length of the strings. If two strings have the same length, sort them based on their lexicographic order. return sorted(strings, key=lambda s: (len(s), s))"},{"question":"Write a python function to determine if a person is a senior citizen based on their age. A senior citizen is any one who is 60 years old or older. Implement the function and include example usage with comments to explain each part of the function.","solution":"def is_senior_citizen(age): Determines if a person is a senior citizen based on their age. A senior citizen is anyone who is 60 years old or older. Parameters: age (int): The age of the individual. Returns: bool: True if the individual is a senior citizen, False otherwise. return age >= 60 # Example usage: # print(is_senior_citizen(59)) # Output: False (Person is not a senior citizen) # print(is_senior_citizen(60)) # Output: True (Person is a senior citizen) # print(is_senior_citizen(70)) # Output: True (Person is a senior citizen)"},{"question":"Write a python function to find the first character that repeats in a string. I want it to return the character that repeats for the first time. If no character repeats, the function should return -1. \`find_the_duplicate_char(\\"programming\\")\` should return 'r'.","solution":"def find_the_duplicate_char(s): Returns the first character that repeats in the string. If no character repeats, returns -1. seen = set() for char in s: if char in seen: return char seen.add(char) return -1"},{"question":"Write a python function to calculate the Fibonacci sequence up to a given number of terms, n. The function should return the Fibonacci sequence as a list, where the first two numbers are always 0 and 1, respectively.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the n-th term (inclusive). Args: n (int): The number of terms in the sequence. Returns: list: A list containing the Fibonacci sequence. if n <= 0: return [] if n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to find the squares of numbers from 1 to n.","solution":"def find_squares(n): Returns a list of squares of numbers from 1 to n. :param n: The upper limit of the range (inclusive). :return: A list of squares of numbers from 1 to n. return [i ** 2 for i in range(1, n + 1)]"},{"question":"Write a python function to calculate the sum of all natural numbers up to a given limit \`n\`. Use recursion.","solution":"def sum_natural_numbers_recursive(n): Returns the sum of all natural numbers up to a given limit n using recursion. if n <= 0: return 0 return n + sum_natural_numbers_recursive(n - 1)"},{"question":"Write a python function to find the nth Fibonacci number using an iterative approach with dynamic programming.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach with dynamic programming. if n <= 0: raise ValueError(\\"n should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 fib_numbers = [0, 1] for i in range(2, n): next_fib = fib_numbers[-1] + fib_numbers[-2] fib_numbers.append(next_fib) return fib_numbers[-1]"},{"question":"Write a python function to check if a given number is a sum of consecutive primes.","solution":"def is_sum_of_consecutive_primes(number): Returns True if the given number is a sum of consecutive primes, otherwise False. def generate_primes(limit): Generates prime numbers up to the given limit. sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False primes = [] for i in range(2, limit + 1): if sieve[i]: primes.append(i) for multiple in range(i*i, limit + 1, i): sieve[multiple] = False return primes if number < 2: return False # Assumption: We will only consider sums of primes below a reasonable limit. limit = number primes = generate_primes(limit) for start in range(len(primes)): current_sum = 0 for end in range(start, len(primes)): current_sum += primes[end] if current_sum == number: return True if current_sum > number: break return False"},{"question":"Write a python function to determine if a given string has a balanced bracket sequence. A bracket sequence is balanced if every opening bracket '[' has a corresponding closing bracket ']', and every closing bracket ']' has a corresponding opening bracket '['. Also, all brackets are properly nested.","solution":"def is_balanced_bracket_sequence(s): Determines if the given string has a balanced bracket sequence. A bracket sequence is balanced if: - Every opening bracket \\"[\\" has a corresponding closing bracket \\"]\\" - Every closing bracket \\"]\\" has a corresponding opening bracket \\"[\\" - All brackets are properly nested Parameters: s (str): The string containing the bracket sequence. Returns: bool: True if the bracket sequence is balanced, False otherwise. stack = [] for char in s: if char == '[': stack.append(char) elif char == ']': if not stack: return False stack.pop() return not stack"},{"question":"Write a python function to find the number of unique elements in a given list, ignoring case sensitivity for strings, and considering 0 and False to be equal.","solution":"def unique_count(lst): Returns the number of unique elements in the list. Treats strings case insensitively and considers 0 and False to be equal. unique_elements = set() for elem in lst: if isinstance(elem, str): elem = elem.lower() elif elem == 0 or elem is False: elem = 0 unique_elements.add(elem) return len(unique_elements)"},{"question":"Write a python function to print \\"Hello, world!\\" and an integer number \`n\`.","solution":"def print_hello_world_and_number(n): Prints \\"Hello, world!\\" followed by the integer number n. print(\\"Hello, world!\\") print(n)"},{"question":"Write a python function to find the longest palindrome subsequence in a given string. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. The length of a palindrome subsequence would be the maximum length of any such subsequence.","solution":"def longest_palindromic_subsequence(s): Function to find the length of the longest palindromic subsequence in a given string. :param s: Input string :return: Length of the longest palindromic subsequence n = len(s) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Strings of length 1 are palindrome of length 1 for i in range(n): dp[i][i] = 1 # cl is the length of the substring for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Write a python function to find the maximum sum of a contiguous subarray using dynamic programming. The function should take a list of integers as input and return the maximum sum. For example, given the list \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the function should return \`6\`, which is the maximum sum of the subarray \`[4, -1, 2, 1]\`.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using dynamic programming technique. :param nums: List of integers :return: Maximum sum of contiguous subarray if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to check if a given integer n is a prime number.","solution":"def is_prime(n): Check if a given integer n is a prime number. Parameters: n (int): The integer to check. Returns: bool: True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a python function to implement Dijkstra's algorithm to find the shortest path in a graph. The function should take a graph and a starting node as input and return a dictionary containing the shortest path distances to all nodes.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm to find the shortest path in a graph. Parameters: graph (dict): A dictionary representation of the graph where keys are node labels and values are dictionaries of neighbors with edge weights. start: The starting node for the algorithm. Returns: dict: A dictionary of shortest path distances from the start node to all other nodes. # Initialize the smallest distances to each node with infinity, except the start node. shortest_paths = {node: float('inf') for node in graph} shortest_paths[start] = 0 # Priority queue to hold the nodes to be processed. priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If the distance is greater than the recorded shortest path, skip processing. if current_distance > shortest_paths[current_node]: continue # Process each neighbor of the current node. for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < shortest_paths[neighbor]: shortest_paths[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return shortest_paths"},{"question":"Write a python function to find all the Armstrong numbers in a given range. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. For example, 371 is an Armstrong number since 3*3*3 + 7*7*7 + 1*1*1 = 371.","solution":"def find_armstrong_numbers(start, end): Returns a list of Armstrong numbers in the given range [start, end). def is_armstrong_number(num): digits = list(map(int, str(num))) num_digits = len(digits) return num == sum([digit ** num_digits for digit in digits]) return [num for num in range(start, end) if is_armstrong_number(num)]"},{"question":"Write a python function to count the number of unique words in a given sentence. The function should return the count of unique words. A unique word is defined as a word with the same sequence of characters but ignoring case sensitivity and spaces.","solution":"def count_unique_words(sentence): Returns the count of unique words in the given sentence. Words are considered case-insensitive. words = sentence.lower().split() unique_words = set(words) return len(unique_words)"},{"question":"Write a python function to swap two numbers using a third variable.","solution":"def swap_numbers(a, b): Swaps two numbers using a third variable. Parameters: a (int/float): First number b (int/float): Second number Returns: tuple: The swapped numbers as a tuple (b, a) temp = a a = b b = temp return a, b"},{"question":"Write a python function to calculate the volume of a cube given its side length. The function should take the side length as input and return the volume of the cube.","solution":"def cube_volume(side_length): Returns the volume of a cube given its side length. Parameters: side_length (float): The length of a side of the cube Returns: float: The volume of the cube return side_length ** 3"},{"question":"Write a python function to count the number of words in a given string. The function should return the word count as an integer.","solution":"def count_words(s): Returns the number of words in the given string \`s\`. Words are separated by whitespace characters. # Split the string by whitespace to extract words words = s.split() # Return the length of the list containing the words return len(words)"},{"question":"Write a python function to sort an array of integers in ascending order. You should use the Bubble Sort algorithm for sorting. In addition, make sure that your function uses the \\"pass by value\\" mechanism in Python (though Python doesn't support pass by value, you can achieve a similar effect by working on a copy of the array).","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using Bubble Sort algorithm. The function creates and sorts a copy of the array to ensure the original array is not modified. n = len(arr) sorted_arr = arr[:] for i in range(n): for j in range(0, n-i-1): if sorted_arr[j] > sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr"},{"question":"Write a python function to remove all occurrences of a specific element from a list. Your function should take in a list and an element to be removed, and return the modified list without the specified element. The function should be able to handle any data type for the elements in the list.","solution":"def remove_all_occurrences(lst, element): Removes all occurrences of the specified element from the list. Parameters: lst (list): The list from which to remove the element. element: The element to remove from the list. Returns: list: A new list with all occurrences of the element removed. return [x for x in lst if x != element]"},{"question":"Write a python function to find the number of pairs in a list that add up to a specific target value. Your function should be efficient and scalable for large lists.","solution":"def find_pairs_with_sum(arr, target): Returns the number of pairs in the list 'arr' that add up to 'target'. seen = {} count = 0 for number in arr: complement = target - number if complement in seen: count += seen[complement] if number in seen: seen[number] += 1 else: seen[number] = 1 return count"},{"question":"Write a python function to convert an integer to its Roman numeral representation in lowercase.","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation in lowercase. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] symbols = [ \\"m\\", \\"cm\\", \\"d\\", \\"cd\\", \\"c\\", \\"xc\\", \\"l\\", \\"xl\\", \\"x\\", \\"ix\\", \\"v\\", \\"iv\\", \\"i\\" ] roman = [] for i in range(len(val)): count = int(num / val[i]) roman.append(symbols[i] * count) num -= val[i] * count return ''.join(roman)"},{"question":"Write a python function to get the common elements between two lists. You must not use any in-built function and list comprehension, i.e., you can only use basic for loops, and if statements.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2 without using any in-built functions and list comprehensions. common = [] for element in list1: for item in list2: if element == item: if element not in common: common.append(element) return common"},{"question":"Write a python function to check if a given list contains a specific element. You need to implement the function \`contains_element(lst, element)\` that takes a list \`lst\` and an element as input and returns \`True\` if the element is found in the list, and \`False\` otherwise.","solution":"def contains_element(lst, element): Returns True if the element is found in the list lst, otherwise False. return element in lst"},{"question":"Write a python function to find the maximum difference between two elements in an array such that the larger element comes after the smaller one in the array. Here is the array: arr = [2, 3, 10, 6, 4, 8, 1]","solution":"def max_difference(arr): Find the maximum difference between two elements in an array such that the larger element comes after the smaller one. Parameters: arr (list of int): The input array Returns: int: The maximum difference if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): current_diff = arr[i] - min_element if current_diff > max_diff: max_diff = current_diff if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Write a python function to find the smallest power of 2 greater than or equal to a given number \`N\`. This function should be efficient and work for large values of \`N\`.","solution":"def smallest_power_of_two_geq(N): Finds the smallest power of 2 greater than or equal to N. Args: N (int): The input number. Returns: int: The smallest power of 2 greater than or equal to N. if N < 1: return 1 power = 1 while power < N: power *= 2 return power"},{"question":"Write a python function to check if a given string is a palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"radar\\" or \\"level\\". Your function should ignore case sensitivity and spaces.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, ignoring case sensitivity and spaces. cleaned_str = ''.join(c for c in s if c.isalnum()).lower() return cleaned_str == cleaned_str[::-1]"},{"question":"Write a python function to check if a list of words contains duplicates, and if so, return the list of duplicate words. If there are no duplicates, return an empty list.","solution":"def find_duplicates(words): Finds and returns a list of duplicate words in the input list 'words'. If no duplicates are found, returns an empty list. word_count = {} duplicates = [] for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 for word, count in word_count.items(): if count > 1: duplicates.append(word) return duplicates"},{"question":"Write a python function to get the minimum number of slaps a short sword can have to cut through a thick log. Given that the log is initially intact, and each slap can either cut through the log or miss it. If the log is cut through completely, return the number of slaps required. If it is not possible to cut through the log, return an error message.","solution":"def minimum_slaps_to_cut(log_thickness, slap_strength): Returns the minimum number of slaps required to cut through the log. Parameters: log_thickness (int): The thickness of the log in arbitrary units. slap_strength (int): The effectiveness of one slap in cutting the log in arbitrary units. Returns: int: The minimum number of slaps required. # If either the thickness or the slap strength is not positive, cutting is impossible. if log_thickness <= 0 or slap_strength <= 0: return \\"Error: Invalid log thickness or slap strength.\\" # Calculate the number of slaps required slaps_required = (log_thickness + slap_strength - 1) // slap_strength return slaps_required"},{"question":"Write a python function to perform string operations such as general hello world print, getting a substring, and concatenating strings.","solution":"def hello_world(): Returns the string \\"Hello, World!\\". return \\"Hello, World!\\" def get_substring(s, start, end): Returns the substring from a string s, starting at index start and ending at index end. return s[start:end] def concatenate_strings(s1, s2): Concatenates two strings s1 and s2 and returns the result. return s1 + s2"},{"question":"Write a python function to solve the \\"Two Sum\\" problem, where you are given an array of integers and a target integer. The function should return the indices of the two numbers such that they add up to the target. Each input would have exactly one solution, and the indices returned should not be the same.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. Parameters: nums (list of int): List of integers. target (int): Target integer to find the sum. Returns: list of int: Indices of the two numbers adding up to the target. num_map = {} # To store the indices of the numbers for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"Write a python function to check if a given year is a leap year. Print \\"Leap Year\\" if it is a leap year, otherwise print \\"Not a Leap Year\\".","solution":"def check_leap_year(year): Checks if the given year is a leap year. Prints \\"Leap Year\\" if it is a leap year, otherwise prints \\"Not a Leap Year\\". if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): print(\\"Leap Year\\") else: print(\\"Not a Leap Year\\")"},{"question":"Write a python function to implement a stack data structure using a list. The stack should support the following operations: push, pop, and peek. Additionally, the stack should have a method to return the minimum value in the stack in constant time, despite the stack containing multiple minimum values.","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, val): self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self): if self.stack: if self.stack[-1] == self.min_stack[-1]: self.min_stack.pop() return self.stack.pop() def peek(self): if self.stack: return self.stack[-1] def get_min(self): if self.min_stack: return self.min_stack[-1]"},{"question":"Write a python function to calculate the sum of elements in a list. Please include a docstring in your function explaining what the function does.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. Parameters: lst (list): A list of numeric elements. Returns: int/float: The sum of all elements in the list. return sum(lst)"},{"question":"Write a python function to check if the given string is a palindrome or not using a iterative approach with a stack.","solution":"def is_palindrome(s): Return True if the given string s is a palindrome using an iterative approach with a stack, otherwise return False. # Remove non-alphanumeric characters and convert to lowercase s = ''.join(filter(str.isalnum, s)).lower() # Initialize a stack stack = [] # Push all characters of the string into the stack for char in s: stack.append(char) # Pop characters from the stack and compare with corresponding characters in the string for char in s: if char != stack.pop(): return False return True"},{"question":"Write a python function to convert a date string from one format to another (e.g., \\"YYYY-MM-DD\\" to \\"MM/DD/YYYY\\"). However, handle potential errors and edge cases properly, such as invalid date formats or non-existent dates.","solution":"from datetime import datetime def convert_date_format(date_str, input_format, output_format): Convert a date string from one format to another. Parameters: date_str (str): the date string to be converted. input_format (str): the format of the input date string. output_format (str): the desired format of the output date string. Returns: str: the date string in the desired format, or an error message for invalid input. try: date_obj = datetime.strptime(date_str, input_format) return date_obj.strftime(output_format) except ValueError as e: return f\\"Error: {e}\\""},{"question":"Write a python function to sort an array of 0s, 1s, and 2s in ascending order using the Dutch National Flag problem solution.","solution":"def dutch_national_flag_sort(arr): Sort an array of 0s, 1s, and 2s in ascending order using the Dutch National Flag problem solution. low, mid, high = 0, 0, len(arr) - 1 while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: arr[mid], arr[high] = arr[high], arr[mid] high -= 1 return arr"},{"question":"Write a python function to find the maximum sum of subsequence in an array such that no two elements are adjacent.","solution":"def max_sum_subsequence_no_adjacent(arr): Finds the maximum sum of a subsequence in an array such that no two elements are adjacent. Args: arr (list): The input list of integers. Returns: int: The maximum sum of non-adjacent elements. if not arr: return 0 if len(arr) == 1: return arr[0] incl = arr[0] # Sum including the first element excl = 0 # Sum excluding the first element for i in range(1, len(arr)): excl_new = max(incl, excl) # The new exclude can be the max of previous include and exclude incl = excl + arr[i] # Include current element excl = excl_new # Update exclude return max(incl, excl)"},{"question":"Write a python function to sort a list of tuples by the second element in each tuple using the built-in \`sorted\` function.","solution":"def sort_tuples_by_second_element(tuples_list): Sorts a list of tuples by the second element in each tuple. Parameters: tuples_list (list): A list of tuples to be sorted. Returns: list: The sorted list of tuples. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to append items to an existing list. The function should take two parameters: the list and the item to be appended. Ensure that the function does not return anything, but modifies the list in-place.","solution":"def append_to_list(lst, item): Appends an item to the end of the provided list. Parameters: lst (list): The list to which the item will be appended. item: The item to append to the list. lst.append(item)"},{"question":"Write a python function to convert the first character of each word in a string to uppercase and the remaining characters to lowercase.","solution":"def title_case(sentence): Converts the first character of each word in the sentence to uppercase and the remaining characters to lowercase. return ' '.join(word.capitalize() for word in sentence.split())"},{"question":"Write a python function to accept a list and a target sum \`k\`, and return the indices of the first two numbers such that they add up to a specific target sum \`k\`.","solution":"def two_sum(nums, k): Returns the indices of the two numbers in the list that add up to the target sum \`k\`. num_map = {} for index, num in enumerate(nums): complement = k - num if complement in num_map: return [num_map[complement], index] num_map[num] = index return None"},{"question":"Write a python function to print the n-th Fibonacci number.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a python function to find the first negative number in each continuous subarray of size k in a given array of integers.","solution":"from collections import deque def first_negative_in_subarray(arr, k): Finds the first negative number in each continuous subarray of size k in a given array of integers. :param arr: List[int], the given array of integers :param k: int, the size of the subarray :return: List[int], a list containing the first negative number of each subarray of size k result = [] negatives = deque() for i in range(len(arr)): # Add current element index to the deque if it's negative if arr[i] < 0: negatives.append(i) # Remove elements that are out of the bounds of the current window if negatives and negatives[0] < i - k + 1: negatives.popleft() # Once we have processed at least k elements, the first element in negatives deque # is the first negative number in the current window if i >= k - 1: if negatives: result.append(arr[negatives[0]]) else: result.append(0) # Assuming 0 for no negative number in the window return result"},{"question":"Write a python function to find the maximum and minimum values in a list of integers without using built-in functions like \`max()\` and \`min()\`. Also, ensure your solution has a time complexity of O(n).","solution":"def find_max_min(lst): Returns the maximum and minimum values in a list of integers. :param lst: List of integers :return: Tuple containing (max_value, min_value) if not lst: raise ValueError(\\"List must not be empty\\") max_value = lst[0] min_value = lst[0] for num in lst[1:]: if num > max_value: max_value = num if num < min_value: min_value = num return max_value, min_value"},{"question":"Write a python function to multiply two matrices, given that the function takes two lists of lists as input and returns their product. Each inner list represents a row of the matrix. Ensure the matrices can be multiplied if the number of columns in the first matrix is equal to the number of rows in the second matrix.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. :param A: List of lists where each inner list represents a row of the first matrix. :param B: List of lists where each inner list represents a row of the second matrix. :return: The product of matrices A and B as a list of lists. :raises ValueError: If the number of columns in A does not match the number of rows in B. # Number of columns in A must equal number of rows in B if len(A[0]) != len(B): raise ValueError(\\"Cannot multiply: number of columns in A does not match the number of rows in B.\\") # Initialize result matrix with zeros result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] # Matrix multiplication for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to find the first and last position of target in a sorted array.","solution":"def find_first_and_last_position(nums, target): Returns the first and last position of the target in a sorted array. If the target is not present in the array, returns [-1, -1]. def binary_search_left(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: right = mid - 1 return left def binary_search_right(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid - 1 return right left_index = binary_search_left(nums, target) right_index = binary_search_right(nums, target) if left_index < len(nums) and nums[left_index] == target: return [left_index, right_index] else: return [-1, -1]"},{"question":"Write a python function to merge K sorted lists. The function should take \`k\` lists as input and return a single sorted list containing all elements from the input lists. The function should aim to have a time complexity of \`O(N log K)\`, where \`N\` is the total number of elements in all lists combined, and \`K\` is the number of lists.","solution":"from heapq import heappush, heappop, heapify def merge_k_sorted_lists(lists): Merges k sorted lists into a single sorted list. parameters: lists (List[List[int]]): A list of k sorted lists. Returns: List[int]: A single sorted list containing all elements from the input lists. min_heap = [] # Initialize the heap with the first element from each list for index, sorted_list in enumerate(lists): if sorted_list: heappush(min_heap, (sorted_list[0], index, 0)) merged_list = [] while min_heap: value, list_index, element_index = heappop(min_heap) merged_list.append(value) # If the next element exists, add it to the heap if element_index + 1 < len(lists[list_index]): next_value = lists[list_index][element_index + 1] heappush(min_heap, (next_value, list_index, element_index + 1)) return merged_list"},{"question":"Write a python function to calculate the power of a given number. The function should take three parameters: base, exponent, and mod. It should return the result of (base^exponent) % mod. Use a loop to implement this. Ensure the result is positive and within the range of a 64-bit integer.","solution":"def power_mod(base, exponent, mod): Calculates (base^exponent) % mod. if mod == 1: return 0 result = 1 base = base % mod while exponent > 0: if (exponent % 2) == 1: result = (result * base) % mod exponent = exponent >> 1 base = (base * base) % mod return result"},{"question":"Write a python function to reverse a list of integers using recursion.","solution":"def reverse_list_recursive(lst): Reverses a list of integers using recursion. Parameters: lst (list): The list of integers to be reversed. Returns: list: The reversed list. if len(lst) == 0: return [] else: return [lst[-1]] + reverse_list_recursive(lst[:-1])"},{"question":"Write a python function to find the minimum value among all the positive integer numbers that can be obtained by rearranging the digits of the given integer num.","solution":"def min_rearranged_positive_integer(num): Returns the minimum value among all positive integers that can be obtained by rearranging the digits of the given integer num. digits = [d for d in str(num)] digits.sort() # To handle leading zeros, find the first non-zero digit and swap with the first element if digits[0] == '0': for i in range(1, len(digits)): if digits[i] != '0': digits[0], digits[i] = digits[i], '0' break return int(''.join(digits))"},{"question":"Write a python function to compare two numbers and return the larger one. If they are equal, return a message that they are equal.","solution":"def compare_numbers(a, b): Compares two numbers and returns the larger one. If they are equal, return a message that they are equal. if a > b: return a elif b > a: return b else: return \\"The numbers are equal.\\""},{"question":"Write a python function to traverse a given binary tree in inorder and return the values in a list. Inorder traversal follows the order: left subtree, root, right subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Traverse the given binary tree in inorder and return the values in a list. Inorder traversal follows the order: left subtree, root, right subtree. Args: root (TreeNode): The root of the binary tree. Returns: list: List of values from inorder traversal of the binary tree. if root is None: return [] result = [] result.extend(inorder_traversal(root.left)) result.append(root.val) result.extend(inorder_traversal(root.right)) return result"},{"question":"Write a python function to convert a given string into a list where each element is a word from the string and the elements are separated by space.","solution":"def string_to_word_list(s): Converts a given string into a list where each element is a word from the string. Args: s (str): The input string. Returns: list: A list with words separated by spaces. return s.split()"},{"question":"Write a python function to check if a given string is a palindrome or not using stack (LIFO).","solution":"def is_palindrome(s): Returns True if the given string 's' is a palindrome, False otherwise. This function checks using stack (LIFO). stack = [] # Push all characters of the string into the stack for char in s: stack.append(char) # Pop characters from the stack to create the reversed string reversed_s = '' while stack: reversed_s += stack.pop() # Check if the reversed string is same as the original string return s == reversed_s"},{"question":"Write a python function to check if a string is \\"good\\". A string is considered \\"good\\" if there are no repeated characters. Additionally, the function should return the length of the longest substring without any repeated characters if the string is good. If the string is not good, return -1.","solution":"def is_good_string(s): Checks if string \`s\` is 'good'. A string is considered 'good' if there are no repeated characters. Returns the length of the longest substring without any repeated characters if the string is good. If the string is not good, returns -1. if len(s) != len(set(s)): return -1 # Since the string is good (without repeated characters), return its length return len(s)"},{"question":"Write a python function to determine the maximum defense value a player can achieve by collecting items from a game world. The player can only collect items from the first n groups (1 <= n <= 5) and cannot skip any group. The player starts with 0 defense value. The player can only collect items if they have at least the required attack value to overcome the group's defense.","solution":"def max_defense_value(groups): Determine the maximum defense value a player can achieve by collecting items from the first n groups. Parameter: groups (list): A list of tuples where each tuple contains: - the required attack value to overcome the group's defense (int) - the defense value of items in the group (int) Returns: int: The maximum defense value that can be achieved. # Initialize starting values current_attack = 0 total_defense = 0 # Iterate through each group for required_attack, defense_value in groups: # Check if the player has enough attack value to overcome the group's defense if current_attack >= required_attack: # Collect items and update total defense value total_defense += defense_value # Update current attack value (assuming the defense value can be used as attack power) current_attack += defense_value return total_defense"},{"question":"Write a python function to calculate the factorial of a number. Python does not provide a built-in function for factorial but can be calculated easily using a loop. Your function should take an integer as input and return the factorial of that number.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to remove duplicates from an array while preserving the order of elements.","solution":"def remove_duplicates(arr): Removes duplicates from the array while preserving the order of elements. Parameters: arr (list): A list of elements which may contain duplicates. Returns: list: A new list with duplicates removed, preserving the original order. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to calculate the factorial of a number using recursion. What's the recursive definition of factorial?","solution":"def factorial(n): Returns the factorial of n using recursion. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. By definition, factorial(0) is 1. if n < 0: raise ValueError(\\"n must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1) # The recursive definition of factorial is: # 1. factorial(0) = 1 # 2. factorial(n) = n * factorial(n - 1) for n > 0"},{"question":"Write a python function to check if a string is a valid parentheses string (also known as \\"balanced parentheses\\"). A valid parentheses string is one where every opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\" in the correct order.","solution":"def is_valid_parentheses(s): Returns True if the input string s is a valid parentheses string, otherwise returns False. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to count the number of pairs of numbers in a given list that have a sum of 10.","solution":"def count_pairs_with_sum_ten(nums): Count the number of pairs in the list 'nums' that have a sum of 10. count = 0 num_map = {} for num in nums: complement = 10 - num if complement in num_map: count += num_map[complement] if num in num_map: num_map[num] += 1 else: num_map[num] = 1 return count"},{"question":"Write a python function to perform chunk insertion in a linked list. Given a singly linked list and a function that creates a new node with a given value \`x\`, your task is to insert a chunk of nodes after a given node. The chunk should be created as an array of values \`data\` and should be inserted after the given node.","solution":"class ListNode: def __init__(self, value=0, next_node=None): self.value = value self.next = next_node def insert_chunk_after(node, data): Inserts a chunk of nodes after the given node. :param node: ListNode, the node after which the chunk will be inserted :param data: List of values for the new chunk nodes current = node for value in data: new_node = ListNode(value) new_node.next, current.next = current.next, new_node current = new_node"},{"question":"Write a python function to solve the problem of finding the shortest path in a given grid. The grid is represented as a 2D list where 0 represents passable cells and 1 represents blocked cells. You can move up, down, left, or right but not diagonally. The function should return the minimum number of steps to reach the bottom-right corner from the top-left corner. If it's not possible to reach the end, return -1.","solution":"from collections import deque def shortest_path(grid): Returns the minimum number of steps to reach the bottom-right corner from the top-left corner in a 2D grid. If it's not possible, returns -1. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, step_count) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == rows - 1 and col == cols - 1: return steps for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < rows and 0 <= c < cols and grid[r][c] == 0 and (r, c) not in visited: queue.append((r, c, steps + 1)) visited.add((r, c)) return -1"},{"question":"Write a python function to find the minimum jumps a player needs to make to reach the end of a given array, where each element in the array represents the maximum number of steps one can jump from that point. The player starts at the first element of the array.","solution":"def min_jumps(arr): Function to return the minimum number of jumps to reach the end of the array. Each element in the array represents the maximum number of steps one can jump from that point. Parameters: arr (list): List of non-negative integers representing maximum jump lengths. Returns: int: Minimum number of jumps needed to reach the end of the array. n = len(arr) if (n == 1): return 0 if (arr[0] == 0): return float('inf') jumps = 0 maxReach = arr[0] step = arr[0] for i in range(1, n): if i == n - 1: return jumps + 1 maxReach = max(maxReach, i + arr[i]) step -= 1 if step == 0: jumps += 1 if i >= maxReach: return float('inf') step = maxReach - i return float('inf')"},{"question":"Write a python function to find the second largest number in a list. The list can contain both positive and negative numbers. If there is no second largest number, return None.","solution":"def second_largest(numbers): Returns the second largest number in the list. If there is no second largest number, returns None. if len(numbers) < 2: return None # Remove duplicates by converting the list to a set unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"Write a python function to calculate the sum of a list of numbers without using Python's built-in sum function.","solution":"def custom_sum(numbers): Returns the sum of a list of numbers without using Python's built-in sum function. total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to find the minimum number of stars required to form a pyramid structure where each row has one more star than the previous row, starting from a single star at the top. The pyramid should be centered and have \`n\` rows.","solution":"def min_stars_for_pyramid(n): Returns the minimum number of stars required to form a pyramid structure with n rows. Each row of the pyramid has one more star than the previous row. # The number of stars required is the sum of the first n natural numbers return n * (n + 1) // 2"},{"question":"Write a python function to check if a given integer is a perfect square. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. The largest possible perfect square less than 10000 is 9801 (99*99).","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, else False. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Write a python function to generate a palindrome by rearranging the given string. If it's not possible to rearrange the string into a palindrome, return an empty string.","solution":"def generate_palindrome(s): Generates a palindrome by rearranging the given string. If it's not possible to rearrange the string into a palindrome, returns an empty string. from collections import Counter # Count occurrences of each character char_counts = Counter(s) # Check for the number of odd counts odd_count_chars = [char for char, count in char_counts.items() if count % 2 != 0] # A string can only be rearranged into a palindrome if it has at most one odd count character if len(odd_count_chars) > 1: return \\"\\" # Initialize the left and right parts of the palindrome left_half = [] middle_part = [] for char, count in char_counts.items(): if count % 2 != 0: middle_part = [char] * count else: left_half.extend([char] * (count // 2)) # Combine left_half with middle_part and reverse of left_half to form the palindrome return \\"\\".join(left_half) + \\"\\".join(middle_part) + \\"\\".join(left_half[::-1])"},{"question":"Write a python function to generate the powers of 2 up to a given number \`n\`. The function should return a list containing all the powers of 2 from \`2^0\` up to \`2^n\` (inclusive).","solution":"def powers_of_2(n): Generates the powers of 2 up to a given number n. Parameters: n (int): The exponent limit Returns: list: A list containing all the powers of 2 from 2^0 up to 2^n (inclusive) return [2**i for i in range(n + 1)]"},{"question":"Write a python function to check if a given list has all unique elements. How can this be efficiently done?","solution":"def has_unique_elements(lst): Returns True if the list has all unique elements, otherwise False. return len(lst) == len(set(lst))"},{"question":"Write a python function to count the number of words in a given string. The function should be case-sensitive and consider words as sequences of characters separated by whitespace.","solution":"def count_words(s): Returns the number of words in the given string. Words are sequences of characters separated by whitespace. return len(s.split())"},{"question":"Write a python function to calculate the nth root of a number using the Newton-Raphson method. The function should take two parameters: the number \`n\` and the root \`r\`. It should return the nth root of \`r\` with up to 6 decimal places.","solution":"def nth_root(n, r): Calculate the nth root of a number r using the Newton-Raphson method. Parameters: n (int): the degree of the root r (float): the number to find the root of Returns: float: the nth root of r if r == 0: return 0.0 # Initial guess will be r, or 1 if r is less than 1 (e.g., for roots of small fractions or negative numbers no real root) guess = max(r, 1.0) # Precision level tolerance = 1e-7 # Newton-Raphson iteration while True: next_guess = ((n - 1) * guess + r / (guess ** (n - 1))) / n if abs(guess - next_guess) < tolerance: break guess = next_guess return round(guess, 6)"},{"question":"Write a python function to find and return the largest number in a list. The function should also handle negative numbers and zeros.","solution":"def find_largest_number(lst): Returns the largest number in the list. Handles negative numbers and zeros. if not lst: return None return max(lst)"},{"question":"Write a python function to check if a given string is a palindrome. What are palindromes? Please explain the logic behind the function.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Args: - s (str): The input string to check. Returns: - bool: True if the string is a palindrome, False otherwise. return s == s[::-1]"},{"question":"Write a python function to find the maximum element in a given list. If the list is empty, the function should return None. Also, implement error handling for cases where the list contains non-numeric elements.","solution":"def find_max_element(lst): Returns the maximum element in a list. If the list is empty, returns None. If the list contains non-numeric elements, raises a ValueError. if not lst: return None try: max_element = max(lst) except TypeError: raise ValueError(\\"List contains non-numeric elements\\") return max_element"},{"question":"Write a python function to perform convolution on two arrays.","solution":"import numpy as np def convolve(array1, array2): Perform the convolution of two 1D arrays. :param array1: List or array of numbers (first input array) :param array2: List or array of numbers (second input array) :return: Convolved array as a list return np.convolve(array1, array2).tolist()"},{"question":"Write a python function to calculate the factorial of a number. The function should be able to handle large numbers efficiently and return the result as a string. The function should also handle negative numbers and zero, returning an appropriate message for each case.","solution":"def factorial(n): Returns the factorial of a non-negative integer n as a string. If n is negative, returns an appropriate message. if n < 0: return \\"Factorial is not defined for negative numbers\\" elif n == 0: return \\"1\\" else: result = 1 for i in range(1, n + 1): result *= i return str(result)"},{"question":"Write a python function to remove all occurrences of a given value from a list of integers.","solution":"def remove_all_occurrences(lst, value): Remove all occurrences of the given value from the list. :param lst: List of integers. :param value: Integer value to be removed from the list. :return: A new list with all occurrences of the value removed. return [x for x in lst if x != value]"},{"question":"Write a python function to extract and return the last 3 characters from a string.","solution":"def last_three_chars(s): Returns the last 3 characters of the given string. # Check if the string has at least 3 characters if len(s) < 3: return s return s[-3:]"},{"question":"Write a python function to convert numbers from decimal to binary. The function should be able to handle large numbers efficiently and provide the result as a string.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. Args: n (int): Decimal number to convert. Returns: str: Binary representation of the decimal number. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a python function to return the sum of all numeric values in a Python dictionary.","solution":"def sum_of_numeric_values(data): Returns the sum of all numeric values in a dictionary. Args: data (dict): Dictionary containing numeric and non-numeric values. Returns: int/float: Sum of all numeric values in the dictionary. return sum(value for value in data.values() if isinstance(value, (int, float)))"},{"question":"Write a python function to compute the length of the longest common subsequence between two sequences. The function should return the length of the longest common subsequence.","solution":"def longest_common_subsequence(X, Y): Returns the length of the longest common subsequence between two sequences X and Y. m = len(X) n = len(Y) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for i in range(m + 1)] # Build the dp array from the bottom up for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a python function to reverse a string, but only if the string is longer than 5 characters. Otherwise, return the original string.","solution":"def reverse_string_if_long(string): Reverses the string if its length is greater than 5, otherwise returns the original string. if len(string) > 5: return string[::-1] return string"},{"question":"Write a python function to sort a list of integers using the radix sort algorithm. Provide a step-by-step explanation of how the radix sort algorithm works.","solution":"def counting_sort(arr, exp): A function to perform counting sort on arr based on the digit represented by exp (10^i) n = len(arr) output = [0] * n # Output array to store sorted numbers count = [0] * 10 # Count array to store count of occurrences of digits (0 to 9) # Store the count of occurrences of each digits (0 to 9) in count[] for i in range(n): index = (arr[i] // exp) % 10 count[index] += 1 # Change count[i] to contain the actual position of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array for i in range(n - 1, -1, -1): index = (arr[i] // exp) % 10 output[count[index] - 1] = arr[i] count[index] -= 1 # Copy the output array back to arr[], so that arr[] contains the sorted numbers according to the current digit for i in range(n): arr[i] = output[i] def radix_sort(arr): The function to sort arr[] of size n using Radix Sort # Find the maximum number to know the number of digits max_num = max(arr) # Do counting sort for every digit. Note that instead of passing the digit number, # exp is passed. exp is 10^i where i is the current digit number exp = 1 while max_num // exp > 0: counting_sort(arr, exp) exp *= 10 return arr"},{"question":"Write a python function to find the maximum sum subarray. I am looking for the implementation of Kadane's Algorithm.","solution":"def max_sum_subarray(arr): Finds the maximum sum subarray using Kadane's Algorithm. :param arr: List of integers :return: An integer representing the maximum sum of the subarray. if not arr: return 0 max_ending_here = arr[0] max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to generate all subsets of a given set. The function should return all subsets in a list of lists.","solution":"def subsets(s): Returns all subsets of the given set. Parameters: s (list): The input set as a list of unique elements. Returns: list: A list of lists, where each list is a subset of the input set. result = [[]] for element in s: result += [current + [element] for current in result] return result"},{"question":"Write a python function to detect a loop in a linked list. I cannot use any built-in library or function for detecting the loop. Only standard data structures are allowed.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_loop(head): Detects a loop in a linked list using Floyd's Tortoise and Hare algorithm. Args: head (ListNode): The head of the linked list. Returns: bool: True if there is a loop, False otherwise. slow = head fast = head while fast is not None and fast.next is not None: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a python function to find the one that is missing from the two list","solution":"def find_missing_element(list1, list2): Given two lists, where the second list is missing exactly one element from the first list, find and return the missing element. sum_list1 = sum(list1) sum_list2 = sum(list2) return sum_list1 - sum_list2"},{"question":"Write a python function to remove duplicates from a list, preserving the order of the remaining elements. What are some considerations for handling large datasets?","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of elements. Arguments: lst -- input list from which duplicates should be removed. Returns: A list with duplicates removed, preserving the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to multiply two numbers and return the result. Ensure that the function handles cases where the inputs are not numbers by raising an appropriate error.","solution":"def multiply(a, b): Returns the product of a and b. Parameters: - a: Operand, should be a number. - b: Operand, should be a number. Raises: - TypeError: If either a or b is not a number. if not (isinstance(a, (int, float)) and isinstance(b, (int, float))): raise TypeError(\\"Both a and b must be numbers\\") return a * b"},{"question":"Write a python function to generate the first 10 Fibonacci numbers.","solution":"def generate_fibonacci(n): Generate the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibonacci = [0, 1] for i in range(2, n): fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2]) return fibonacci # Generate the first 10 Fibonacci numbers print(generate_fibonacci(10))"},{"question":"Write a python function to remove all the vowels from a sentence, considering both lowercase and uppercase vowels.","solution":"def remove_vowels(sentence): Removes all vowels from the input sentence. :param sentence: str, input string from which vowels need to be removed :return: str, sentence without vowels vowels = \\"aeiouAEIOU\\" return ''.join(char for char in sentence if char not in vowels)"},{"question":"Write a python function to generate Fibonacci numbers up to a given 'n' using a generator. Concurrency is not an issue in this case.","solution":"def fibonacci_generator(n): Generator function to yield Fibonacci numbers up to n. a, b = 0, 1 while a <= n: yield a a, b = b, a + b"},{"question":"Write a python function to print \\"Hello, World!\\" and then call this function.","solution":"def hello_world(): Prints 'Hello, World!'. print(\\"Hello, World!\\") # Call the function hello_world()"},{"question":"Write a python function to implement a priority queue that can insert elements and extract the minimum element efficiently.","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] def insert(self, element): Inserts an element into the priority queue. heapq.heappush(self.heap, element) def extract_min(self): Extracts the minimum element from the priority queue. if self.heap: return heapq.heappop(self.heap) else: raise IndexError(\\"extract_min from an empty priority queue\\")"},{"question":"Write a python function to convert a string into a binary string. The function should take a string as input and return a binary string representation of the given string. Each character in the string should be converted to its 8-bit binary representation. If the binary representation of any character is less than 8 bits, it should be padded with leading zeros to make it 8 bits.","solution":"def string_to_binary(s): Converts a string into a binary string representation. Each character is represented by its 8-bit binary form. Parameters: s (str): The input string to convert. Returns: str: A binary string representing the input string. return ''.join(format(ord(char), '08b') for char in s)"},{"question":"Write a python function to reverse a string input by the user and then find the frequency of each character in the reversed string.","solution":"def reverse_and_count_frequency(input_string): Reverses the given string and finds the frequency of each character. Parameters: input_string (str): The string to reverse and analyze. Returns: dict: A dictionary with characters as keys and their frequencies as values. reversed_string = input_string[::-1] frequency_dict = {} for char in reversed_string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return (reversed_string, frequency_dict)"},{"question":"Write a python function to calculate the sum of the first 'n' natural numbers. You need to implement this using recursion. Please provide the function signature and a detailed explanation of your implementation.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first 'n' natural numbers using recursion. :param n: The number of natural numbers to sum. :return: The sum of the first 'n' natural numbers. if n <= 0: return 0 return n + sum_of_natural_numbers(n - 1)"},{"question":"Write a python function to sort an array without using any built-in sorting functions. You should aim for the most efficient sorting algorithm possible, and provide a brief explanation of why you chose this algorithm.","solution":"def quicksort(arr): Sorts an array using the quicksort algorithm. Quicksort is chosen for its average O(n log n) time complexity and its practical efficiency. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. The function should take two parameters and return the GCD of the two numbers. Additionally, include a simple test function that checks the correctness of your GCD function with some predefined data points.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two numbers a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return a"},{"question":"Write a python function to find the sum of all numbers in a list and then divide the sum by the number of elements in the list to calculate the average. If the list is empty, handle the case by returning a message.","solution":"def calculate_average(numbers): Returns the average of all numbers in the list. If the list is empty, returns a message. if not numbers: return \\"The list is empty.\\" total_sum = sum(numbers) count = len(numbers) average = total_sum / count return average"},{"question":"Write a python function to generate the Collatz sequence for a given positive integer.","solution":"def collatz_sequence(n): Generates the Collatz sequence for a given positive integer n. Parameters: n (int): A positive integer. Returns: list: The Collatz sequence starting from n and ending at 1. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") sequence = [n] while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(n) return sequence"},{"question":"Write a python function to generate a random integer between 1 and 10 using the random library.","solution":"import random def generate_random_integer(): Returns a random integer between 1 and 10 inclusive. return random.randint(1, 10)"},{"question":"Write a python function to find the maximum number of consecutive ones in an integer array.","solution":"def find_max_consecutive_ones(nums): Returns the maximum number of consecutive 1's in the array. max_count = 0 current_count = 0 for num in nums: if num == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Write a python function to generate and return the nth Fibonacci number using both recursive and iterative approaches.","solution":"def fibonacci_recursive(n): Returns the nth Fibonacci number using the recursive approach. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) def fibonacci_iterative(n): Returns the nth Fibonacci number using the iterative approach. if n <= 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(n-1): a, b = b, a + b return b"},{"question":"Write a python function to sort a dictionary by values. You should return a new dictionary with keys ordered by their corresponding values in descending order.","solution":"def sort_dict_by_values(d): Returns a new dictionary sorted by values in descending order. Parameters: d (dict): The dictionary to sort. Returns: dict: The dictionary with keys sorted by their values in descending order. return dict(sorted(d.items(), key=lambda item: item[1], reverse=True))"},{"question":"Write a python function to check if a given string has all unique characters. You can not use any additional data structures like lists, sets, or dictionaries. The function should return \`True\` if all characters are unique, otherwise \`False\`.","solution":"def has_all_unique_characters(s): Returns True if the given string has all unique characters, otherwise False. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Write a python function to filter out strings with odd lengths from a given list of strings and return a new list containing only the strings with even lengths.","solution":"def filter_even_length_strings(strings): Filters out strings with odd lengths and returns a list of strings with even lengths. Parameters: strings (list): List of strings to filter. Returns: list: List of strings with even lengths. return [s for s in strings if len(s) % 2 == 0]"},{"question":"Write a python function to find the next available number in a sequence.","solution":"def next_available_number(sequence): Finds the next available number in a sequence. Parameters: sequence (list of int): The input sequence of numbers. Returns: int: The next available number not in the sequence. if not sequence: return 1 sequence_set = set(sequence) next_number = 1 while next_number in sequence_set: next_number += 1 return next_number"},{"question":"Write a python function to swap every two nodes in a singly linked list. The function should assume that the linked list has even number of nodes. You are not allowed to modify the values in the list's nodes. Only the nodes themselves may be changed.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def swap_pairs(head): Swaps every two adjacent nodes in the given linked list. Assumes that the linked list has an even number of nodes. :param head: ListNode :return: ListNode dummy = ListNode(0) dummy.next = head current = dummy while current.next and current.next.next: first = current.next second = current.next.next # Swapping nodes first.next = second.next current.next = second current.next.next = first # Move to the next pair current = current.next.next return dummy.next"},{"question":"Write a python function to print a right-angled triangle of star pattern with a given number of rows.","solution":"def print_right_angled_triangle(rows): Prints a right-angled triangle pattern of stars with the given number of rows. for i in range(1, rows + 1): print('*' * i)"},{"question":"Write a python function to validate if a string is a pangram or not. A pangram is a sentence containing every letter of the English alphabet at least once. For example, \\"The quick brown fox jumps over the lazy dog\\".","solution":"def is_pangram(s): Checks if the input string s is a pangram. A pangram is a sentence containing every letter of the English alphabet at least once. alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") return alphabet.issubset(set(s.lower()))"},{"question":"Write a python function to find the minimum element in a list of numbers. The function should have a time complexity of O(n). The list is guaranteed to have at least one element.","solution":"def find_minimum(lst): Returns the minimum element in a list of numbers. min_value = lst[0] for num in lst: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to print the Fibonacci sequence of a given number of terms. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. For example, the first six terms are 0, 1, 1, 2, 3, 5.","solution":"def fibonacci(n): Returns the Fibonacci sequence of n terms. sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to find the maximum number in a list. Your function should return -1 if the list is empty.","solution":"def find_maximum(numbers): Returns the maximum number in the list. If the list is empty, return -1. if not numbers: return -1 return max(numbers)"},{"question":"Write a python function to convert a string to a list.","solution":"def string_to_list(s): Converts a string to a list of its characters. Parameters: s (str): The string to be converted. Returns: List[str]: A list of characters from the input string. return list(s)"},{"question":"Write a python function to count the frequency of each word in a sentence and return a dictionary where the keys are the words and the values are their frequencies. For example, if the input sentence is \\"hello world hello\\", the output should be \`{ 'hello': 2, 'world': 1 }\`.","solution":"def word_frequency(sentence): Returns a dictionary where the keys are words and the values are their frequencies in the sentence. words = sentence.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a python function to return the length of a string without using the built-in len() function.","solution":"def string_length(s): Returns the length of the string s without using the built-in len() function. count = 0 for char in s: count += 1 return count"},{"question":"Write a python function to check if a string can be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Checks if a string can be rearranged to form a palindrome. Args: s (str): the input string Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Palindromes can have at most one character with an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a python function to convert a string into a valid python variable name using the rules of python naming conventions.","solution":"import re def to_valid_variable_name(name): Converts a string into a valid Python variable name. # Replace any invalid characters with an underscore name = re.sub(r'W|^(?=d)', '_', name) # Remove leading underscores or digits name = re.sub(r'^[d_]+', '', name) # Ensure it is not empty after replacements return name if name else '_'"},{"question":"Write a python function to check if all characters in a string are unique. Your function should return True if all characters are unique and False otherwise.","solution":"def are_all_characters_unique(s): Returns True if all characters in the string s are unique, False otherwise. return len(s) == len(set(s))"},{"question":"Write a python function to calculate the area of a circle with a given radius. The function should handle exceptions for invalid inputs and use a user-friendly message to inform the user of any errors. Additionally, the function should format the output to two decimal places.","solution":"import math def area_of_circle(radius): Returns the area of a circle with a given radius. Parameters: radius (float): the radius of the circle Returns: float: the area of the circle rounded to two decimal places try: if not isinstance(radius, (int, float)): raise TypeError(\\"The radius must be a number\\") if radius < 0: raise ValueError(\\"The radius cannot be negative\\") area = math.pi * (radius ** 2) return round(area, 2) except Exception as e: return str(e)"},{"question":"Write a python function to calculate the sum of squares of the first n natural numbers. Define the function \`sum_of_squares\` that takes an integer \`n\` as an argument and returns the sum of squares from 1 to \`n\`.","solution":"def sum_of_squares(n): Calculate the sum of squares of the first n natural numbers. Args: n (int): The number up to which the sum of squares will be calculated. Returns: int: The sum of squares from 1 to n. return sum(i ** 2 for i in range(1, n+1))"},{"question":"Write a python function to merge two sorted lists in-place without using extra space.","solution":"def merge_in_place(arr1, arr2): Merges two sorted arrays \`arr1\` and \`arr2\` into a single sorted array in-place. This method assumes that \`arr1\` has enough extra space at the end to hold elements from \`arr2\`. n = len(arr1) m = len(arr2) i, j, k = n - m - 1, m - 1, n - 1 while i >= 0 and j >= 0: if arr1[i] > arr2[j]: arr1[k] = arr1[i] i -= 1 else: arr1[k] = arr2[j] j -= 1 k -= 1 while j >= 0: arr1[k] = arr2[j] j -= 1 k -= 1 return arr1"},{"question":"Write a python function to find the first missing number in an array containing integers from 1 to N with no duplicates. The function should take one parameter: a list of integers and return the missing number.","solution":"def find_first_missing_number(arr): Finds the first missing number in an array containing integers from 1 to N with no duplicates. :param arr: List of integers :return: The first missing integer n = len(arr) total_sum = (n + 1) * (n + 2) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a python function to find the maximum number in a list. You should not use the built-in \`max()\` function. Additionally, you should handle the case where the list might be empty and return None in such cases.","solution":"def find_maximum(numbers): Returns the maximum number in a list. If the list is empty, returns None. if not numbers: return None max_num = numbers[0] for num in numbers[1:]: if num > max_num: max_num = num return max_num"},{"question":"Write a python function to print \\"Hello, World!\\" and initialize the count to 0. Then, in a loop, print the number of elements in the list and increment the count by 1 after each iteration. Finally, print the final count value outside of the loop.","solution":"def hello_world_and_count(lst): Prints 'Hello, World!', then initializes the count to 0. In a loop, it prints the number of elements in the list and increments the count by 1 after each iteration. Finally, it prints the final count value. print(\\"Hello, World!\\") count = 0 for _ in lst: print(f\\"Number of elements in the list: {len(lst)}\\") count += 1 print(f\\"Final count value: {count}\\") return count"},{"question":"Write a python function to determine if a given binary tree is a perfect binary tree or not. A binary tree is perfect if all levels are completely filled and all nodes are as left as possible.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_perfect_binary_tree(root): Determines if a given binary tree is a perfect binary tree. A perfect binary tree is a type of binary tree in which all interior nodes have two children and all leaves have the same depth or level. :param root: TreeNode, the root of the binary tree. :return: bool, True if the binary tree is perfect, False otherwise. # Helper function to calculate depth of the tree def calculate_depth(node): d = 0 while node is not None: d += 1 node = node.left return d depth = calculate_depth(root) def is_perfect(node, d, level=0): if node is None: return True # If there's no left or right child and it's not a leaf node if node.left is None and node.right is None: return d == level + 1 if node.left is None or node.right is None: return False return is_perfect(node.left, d, level + 1) and is_perfect(node.right, d, level + 1) return is_perfect(root, depth)"},{"question":"Write a python function to find the count of elements in an array that are greater than a specified number.","solution":"def count_greater_than(arr, threshold): Returns the count of elements in the array that are greater than the specified threshold. return sum(1 for x in arr if x > threshold)"},{"question":"Write a python function to assign roles to people based on their age.","solution":"def assign_role(age): Assign roles based on the person's age. Parameters: age (int): The age of the person. Returns: str: The role of the person based on their age. if age < 18: return \\"Child\\" elif 18 <= age <= 65: return \\"Adult\\" else: return \\"Senior\\""},{"question":"Write a python function to set all the characters in a string to upper case.","solution":"def to_upper_case(s): Returns a string where all characters are converted to upper case. return s.upper()"},{"question":"Write a python function to convert a given string to a palindrome. The function should return the minimum number of insertions required to convert the string into a palindrome. A palindrome is a string that reads the same backward as forward.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to convert the given string into a palindrome. def lcs(X, Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L[m][n] reverse_s = s[::-1] length_s = len(s) lcs_length = lcs(s, reverse_s) return length_s - lcs_length"},{"question":"Write a python function to filter and display the even numbers between 1 and 50.","solution":"def filter_even_numbers(start=1, end=50): Returns a list of even numbers between the specified start and end range (inclusive). Parameters: start (int): The starting number of the range. Default is 1. end (int): The ending number of the range. Default is 50. Returns: list: A list of even numbers within the specified range. return [num for num in range(start, end + 1) if num % 2 == 0]"},{"question":"Write a python function to find the minimum value in an array of integers. You are not allowed to use built-in Python functions or libraries to find the minimum value. The function should return the minimum value found in the array.","solution":"def find_minimum(arr): Returns the minimum value in an array of integers. if not arr: raise ValueError(\\"Array should not be empty\\") min_value = arr[0] for num in arr: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to solve the quadratic equation ax^2 + bx + c = 0. The function should return solutions as a tuple (x1, x2) for the given coefficients a, b, and c. If the solutions are complex, it should return them in the form of complex numbers. If the equation has no real solutions, the function should return 'No real solutions'.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0. Parameters: a (float): coefficient of x^2 b (float): coefficient of x c (float): constant Returns: tuple: (x1, x2) where x1 and x2 are the solutions, which can be real or complex numbers. If there are no real solutions, it will return 'No real solutions'. if a == 0: if b == 0: return 'No real solutions' if c != 0 else (0, 0) return (-c / b, ) discriminant = b**2 - 4*a*c if discriminant >= 0: x1 = (-b + discriminant**0.5) / (2*a) x2 = (-b - discriminant**0.5) / (2*a) return (x1, x2) else: x1 = (-b + cmath.sqrt(discriminant)) / (2*a) x2 = (-b - cmath.sqrt(discriminant)) / (2*a) return (x1, x2)"},{"question":"Write a python function to solve the problem of determining the XOR of all numbers from 1 to n, where n is the size of an array. The function should take the array as input and return the result of XORing all numbers from 1 to n.","solution":"def xor_upto_n(arr): Returns the XOR of all numbers from 1 to the size of the array. Parameters: arr (list): The input array. Returns: int: The result of XORing all numbers from 1 to n. n = len(arr) xor_result = 0 for num in range(1, n + 1): xor_result ^= num return xor_result"},{"question":"Write a python function to solve the subset sum problem using dynamic programming. The function should take a list of integers and a target sum as inputs and return True if there is a subset of the list that adds up to the target sum, and False otherwise.","solution":"def subset_sum(arr, target): Determines if there is a subset of the list \`arr\` that adds up to \`target\`. Uses dynamic programming approach to solve the subset sum problem. :param arr: List of integers :param target: Target sum :return: True if there is a subset that adds up to target sum, False otherwise n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] # If target sum is 0, then there is a subset (empty set) for any array for i in range(n + 1): dp[i][0] = True # Fill dp array for i in range(1, n + 1): for j in range(1, target + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target]"},{"question":"Write a python function to find the deepest level of a tree node and the node at that level. If there are multiple nodes at that level, return a list of those nodes.","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def deepest_level_node(root): Given the root of a binary tree, return the deepest level and the nodes at that level. if not root: return -1, [] level = 0 queue = deque([(root, level)]) deepest_level = -1 nodes_at_deepest_level = [] while queue: node, current_level = queue.popleft() if current_level > deepest_level: deepest_level = current_level nodes_at_deepest_level = [node.value] elif current_level == deepest_level: nodes_at_deepest_level.append(node.value) if node.left: queue.append((node.left, current_level + 1)) if node.right: queue.append((node.right, current_level + 1)) return deepest_level, nodes_at_deepest_level"},{"question":"Write a python function to print \\"Hello Wor prick\\" if the input is 'prick', otherwise print \\"Hello World\\".","solution":"def greet(name): Prints \\"Hello Wor prick\\" if the input is 'prick', otherwise prints \\"Hello World\\". if name == 'prick': print(\\"Hello Wor prick\\") else: print(\\"Hello World\\")"},{"question":"Write a python function to remove the duplicate characters in a given string. The order of the characters should be preserved. You should not use any extra space except that provided for the output.","solution":"def remove_duplicates(s): Removes duplicate characters from the string while preserving the order. Parameters: s (str): The input string. Returns: str: A string with duplicates removed and order preserved. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to calculate the sum of all numbers in a list that are multiples of 6.","solution":"def sum_multiples_of_six(numbers): Returns the sum of all numbers in the list that are multiples of six. Args: numbers (list of int): List containing integers. Returns: int: Sum of all integers in the list that are multiples of six. return sum(num for num in numbers if num % 6 == 0)"},{"question":"Write a python function to calculate the sum of a list, but only include numbers that are positive and greater than 10.","solution":"def sum_positive_greater_than_ten(numbers): Calculates the sum of numbers in the list that are positive and greater than 10. Parameters: numbers (list): A list of numbers Returns: int: The sum of numbers that are positive and greater than 10 return sum(num for num in numbers if num > 10)"},{"question":"Write a python function to calculate the sum of all the multiples of 3 or 5 below a given limit.","solution":"def sum_of_multiples(limit): Returns the sum of all the multiples of 3 or 5 below the given limit. return sum(x for x in range(limit) if x % 3 == 0 or x % 5 == 0)"},{"question":"Write a python function to add two numbers using recursion.","solution":"def recursive_add(a, b): Adds two numbers a and b using recursion. if b == 0: return a elif b > 0: return recursive_add(a + 1, b - 1) else: # b < 0 return recursive_add(a - 1, b + 1)"},{"question":"Write a python function to find the character that appears first in a given string and has the minimum ASCII value among all characters that appear only once in the string.","solution":"def first_min_ascii_unique_char(s): Finds the character that appears first in the string and has the minimum ASCII value among all characters that appear only once in the string. # Dictionary to store the count of each character char_count = {} # Fill the dictionary with counts of characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the minimum ASCII value character that appears only once min_char = None for char in s: if char_count[char] == 1: if min_char is None or ord(char) < ord(min_char): min_char = char return min_char"},{"question":"Write a python function to perform a merge operation on two lists of integers. The merged list should be sorted and contain only unique elements. Additionally, the function should handle any type of iterable inputs, not just lists.","solution":"def merge_and_sort_unique(iter1, iter2): Merges two iterables into a sorted list with unique elements. Args: iter1, iter2: Any type of iterable containing integers. Returns: A sorted list with unique elements. merged_set = set(iter1).union(set(iter2)) return sorted(merged_set)"},{"question":"Write a python function to filter out numbers from a given list that are not divisible by 3.","solution":"def filter_not_divisible_by_3(numbers): Filters out numbers from the given list that are not divisible by 3. :param numbers: List of integers :return: List of integers that are not divisible by 3 return [num for num in numbers if num % 3 != 0]"},{"question":"Write a python function to calculate the total price of items in a shopping cart. Each item in the shopping cart is represented as a dictionary with the keys 'price' and 'quantity'. The function should take a list of these dictionaries and return the total price of all items.","solution":"def calculate_total_price(cart): Calculate the total price of items in a shopping cart. Parameters: cart (list of dict): A list of dictionaries where each dictionary represents an item with 'price' and 'quantity'. Returns: float: The total price of all items. total_price = 0.0 for item in cart: total_price += item['price'] * item['quantity'] return total_price"},{"question":"Write a python function to calculate the surface area of a rectangular prism in 3D space. The function should take the length, width, and height of the prism as parameters.","solution":"def surface_area_rectangular_prism(length, width, height): Calculates the surface area of a rectangular prism. Args: length (float): The length of the rectangular prism. width (float): The width of the rectangular prism. height (float): The height of the rectangular prism. Returns: float: The surface area of the rectangular prism. return 2 * (length * width + length * height + width * height)"},{"question":"Write a python function to find the index of the first occurrence of a given element in an array. If the element is not present in the array, return -1.","solution":"def find_first_occurrence(array, element): Finds the index of the first occurrence of the given element in the array. Args: array: List of elements. element: The element to find. Returns: Index of the first occurrence of the element, or -1 if not found. for index, value in enumerate(array): if value == element: return index return -1"},{"question":"Write a python function to find the most frequent word in a text. If there are multiple words with the same highest frequency, return all of them in alphabetical order.","solution":"from collections import Counter import re def most_frequent_words(text): Finds and returns the most frequent word(s) in a text. If there are multiple words with the same highest frequency, returns all of them in alphabetical order. # Use regex to find words and convert all to lower case words = re.findall(r'bw+b', text.lower()) word_counts = Counter(words) if not word_counts: return [] # Find the maximum frequency max_frequency = max(word_counts.values()) # Collect all words with the maximum frequency most_frequent = [word for word, count in word_counts.items() if count == max_frequency] # Return in alphabetical order return sorted(most_frequent)"},{"question":"Write a python function to generate a list containing all the prime numbers between 1 and 100.","solution":"def get_primes_upto_100(): Generates a list of prime numbers between 1 and 100. primes = [] for num in range(2, 101): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to calculate the sum of a given list of numbers. Please make sure your solution handles large lists efficiently.","solution":"def sum_of_list(numbers): Returns the sum of a given list of numbers. Args: numbers (list of int/float): The list of numbers to sum. Returns: int/float: The sum of the list of numbers. return sum(numbers)"},{"question":"Write a python function to calculate the sum of the first n natural numbers. Your function should be named \`sum_natural_numbers\` and take a single integer parameter \`n\`. The function should return the sum of the first n natural numbers.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number of first natural numbers to sum up. Returns: int: The sum of the first n natural numbers. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Write a python function to find the maximum sum from any contiguous subarray of size \`k\` in an array.","solution":"def max_sum_subarray_of_size_k(arr, k): Returns the maximum sum of any contiguous subarray of size \`k\`. Parameters: arr (list of int): The input array. k (int): The size of the contiguous subarray. Returns: int: The maximum sum. if not arr or k <= 0 or k > len(arr): return 0 max_sum = float('-inf') current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if i >= k - 1: max_sum = max(max_sum, current_sum) current_sum -= arr[i - (k - 1)] return max_sum"},{"question":"Write a python function to count the number of vowels in a given sentence.","solution":"def count_vowels(sentence): Counts the number of vowels in a given sentence. Args: sentence (str): The input sentence to count vowels from. Returns: int: The number of vowels in the sentence. vowels = 'aeiouAEIOU' return sum(1 for char in sentence if char in vowels)"},{"question":"Write a python function to reverse a list without using inbuilt functions such as slicing or reversed(). Write the function to handle an empty list and lists with a single element.","solution":"def reverse_list(lst): Reverses a list without using inbuilt functions like slicing or reversed(). Args: lst (list): The list to be reversed. Returns: list: The reversed list. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Write a python function to implement a sliding window maximum. Given an array of integers and a window size \`k\`, find the maximum value in each sliding window of size \`k\`.","solution":"from collections import deque def sliding_window_maximum(nums, k): Returns a list of the maximum values in each sliding window of size k. Parameters: nums (list): A list of integers. k (int): Size of the sliding window. Returns: list: A list of maximum values for each sliding window. if not nums or k <= 0: return [] deq = deque() result = [] for i in range(len(nums)): # Remove elements not within the sliding window while deq and deq[0] < i - k + 1: deq.popleft() # Remove elements from the deque that are smaller than the current element while deq and nums[deq[-1]] < nums[i]: deq.pop() # Add the current element to the deque deq.append(i) # The window has reached its full size, add the maximum to the results list if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"Write a python function to calculate sum of the series 1 + 2 + 3 + 4 + 5 + ... + n, where n is an input. The function should return the sum of the series.","solution":"def sum_of_series(n): Returns the sum of the series 1 + 2 + ... + n. return n * (n + 1) // 2"},{"question":"Write a python function to calculate the maximum value of any subarray of size 'k' in the given list of integers 'nums'. Your function should handle all possible edge cases, including when the size of 'k' is greater than the length of the input list.","solution":"def max_subarray_of_size_k(nums, k): Calculate the maximum value of any subarray of size 'k' in the given list of integers 'nums'. Parameters: nums (list of int): The list of integers. k (int): The size of the subarray. Returns: int: The maximum value of any subarray of size 'k'. if k > len(nums) or k <= 0: raise ValueError(\\"k should be between 1 and the length of nums inclusive.\\") max_sum = float('-inf') current_sum = 0 for i in range(len(nums)): current_sum += nums[i] if i >= k - 1: max_sum = max(max_sum, current_sum) current_sum -= nums[i - (k - 1)] return max_sum"},{"question":"Write a python function to find the smallest multiple of n which is greater than or equal to x, where n is a given number and x is a given value.","solution":"def smallest_multiple(n, x): Finds the smallest multiple of n which is greater than or equal to x. Parameters: n (int): The number whose multiple is to be found. x (int): The lower bound for the multiple. Returns: int: The smallest multiple of n greater than or equal to x. # If n is 0, the function cannot compute as multiples of 0 do not exist if n == 0: raise ValueError(\\"n cannot be zero.\\") # Calculate the smallest multiple of n >= x quotient = x // n # If x is exactly a multiple of n, we use that multiple. Otherwise, we move to the next one. if x % n == 0: return x else: return (quotient + 1) * n"},{"question":"Write a python function to calculate the number of even numbers in a given list and the sum of those even numbers without using any loops or built-in functions like \`sum()\` or \`len()\`. This function should utilize recursion and functional programming concepts.","solution":"def count_and_sum_evens(lst): Returns a tuple containing the count of even numbers and their sum in the given list. The function uses recursion and does not use any loops or built-in functions like sum() or len(). def helper(lst, count, total): if not lst: return count, total current = lst[0] if current % 2 == 0: return helper(lst[1:], count+1, total+current) else: return helper(lst[1:], count, total) return helper(lst, 0, 0)"},{"question":"Write a python function to solve the 8-puzzle game using Depth-First Search (DFS). The function should accept a 3x3 puzzle in the form of a 2D list and return whether the puzzle is solvable in the fewest number of moves. Since the puzzle is provided as a 2D list, you can represent it as an array and treat it as 1D.","solution":"def is_solvable(puzzle): Check if the 8-puzzle is solvable. The puzzle should be provided as a 2D list representing a 3x3 grid. It is converted to a 1D array to check for the number of inversions. flat_puzzle = [item for row in puzzle for item in row] inversions = 0 for i in range(len(flat_puzzle) - 1): for j in range(i + 1, len(flat_puzzle)): if flat_puzzle[i] != 0 and flat_puzzle[j] != 0 and flat_puzzle[i] > flat_puzzle[j]: inversions += 1 # For 3x3 puzzles, if the number of inversions is even, the puzzle is solvable. return inversions % 2 == 0"},{"question":"Write a python function to find all prime numbers up to a given number n. The function should return a list of prime numbers.","solution":"def find_primes_up_to(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to count the number of distinct elements in an array using a set.","solution":"def count_distinct_elements(arr): Returns the number of distinct elements in the array \`arr\`. return len(set(arr))"},{"question":"Write a python function to find the number of times a given number appears in a list. The list can be of any length. The function should be efficient and handle cases where the list contains both positive and negative integers.","solution":"def count_occurrences(lst, number): Returns the number of times \`number\` appears in the list \`lst\`. return lst.count(number)"},{"question":"Write a python function to find and replace characters in a string.","solution":"def find_and_replace(input_string, find_char, replace_char): This function finds all instances of \`find_char\` in \`input_string\` and replaces them with \`replace_char\`. :param input_string: The string in which we will find and replace characters. :param find_char: The character to find in the input string. :param replace_char: The character to replace the found character with. :return: A new string with the characters replaced. return input_string.replace(find_char, replace_char)"},{"question":"Write a python function to display the Fibonacci sequence using recursion up to n terms.","solution":"def fibonacci_sequence(n, a=0, b=1): Returns the Fibonacci sequence up to n terms using recursion. if n <= 0: return [] if n == 1: return [a] return [a] + fibonacci_sequence(n - 1, b, a + b)"},{"question":"Write a python function to generate all combinations of an array and return a list of those combinations.","solution":"from itertools import combinations def generate_combinations(arr): Generate all combinations of an array and return a list of those combinations. :param arr: List of elements to generate combinations from :return: List of all combinations comb_list = [] for r in range(1, len(arr) + 1): comb_list.extend(combinations(arr, r)) return comb_list"},{"question":"Write a python function to reverse a linked list. You should reverse both the pointer and the value of each node. Additionally, ensure that the reversed linked list maintains the order of the original linked list in terms of the original value of each node when traversed. For example, if the original linked list contains \`{1, 2, 3, 4, 5}\`, the reversed linked list should contain \`{10, 20, 30, 40, 50}\` where each node's value is the value of the corresponding original node multiplied by 10.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list_and_multiply(head): Reverses the linked list and multiplies each value by 10. :param head: ListNode :return: ListNode prev = None current = head while current: next_node = current.next current.next = prev current.value *= 10 prev = current current = next_node return prev"},{"question":"Write a python function to find all pairs of numbers in an array that sum up to a given target value, and return the pairs as a list of tuples.","solution":"def find_pairs_with_sum(arr, target): Returns all pairs of numbers in an array that sum up to a given target value. Parameters: arr (list of int): The list of integers to search for pairs. target (int): The target sum value. Returns: list of tuples: A list of tuples where each tuple contains a pair of numbers that sum up to the target value. pairs = [] seen = set() for num in arr: complement = target - num if complement in seen: pairs.append((complement, num)) seen.add(num) return pairs"},{"question":"Write a python function to find the maximum number of points that can be formed by connecting any two points.","solution":"def max_lines(n): Returns the maximum number of lines that can be formed by connecting any two points from n points. Parameters: n (int): The number of points. Returns: int: The maximum number of lines. if n < 2: return 0 # No lines can be formed with less than 2 points return (n * (n - 1)) // 2"},{"question":"Write a python function to construct a binary tree from a list of integers where -1 indicates a null node. The function should return the root of the constructed binary tree. Additionally, write a function to print the in-order traversal of the binary tree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def construct_binary_tree(index, lst): Constructs a binary tree from a list of integers where -1 indicates a null node. Args: index (int): The current index in the list. lst (list): The list of integers. Returns: TreeNode: The root of the constructed binary tree. if index >= len(lst) or lst[index] == -1: return None root = TreeNode(lst[index]) root.left = construct_binary_tree(2 * index + 1, lst) root.right = construct_binary_tree(2 * index + 2, lst) return root def in_order_traversal(root): Returns the in-order traversal of the binary tree. Args: root (TreeNode): The root of the binary tree. Returns: list: The in-order traversal of the binary tree. result = [] if root: result.extend(in_order_traversal(root.left)) result.append(root.val) result.extend(in_order_traversal(root.right)) return result"},{"question":"Write a python function to calculate the sum of all the numbers in a list. The list can contain both integers and floating point numbers.","solution":"def sum_of_list(numbers): Returns the sum of all the numbers in a list, which can contain both integers and floating point numbers. return sum(numbers)"},{"question":"Write a python function to find the common elements between two lists using a set.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2 using sets. set1 = set(list1) set2 = set(list2) common_set = set1.intersection(set2) return list(common_set)"},{"question":"Write a python function to find the maximum number in an array. If the array is empty, the function should return None.","solution":"def find_max(arr): Returns the maximum number in an array. If the array is empty, returns None. if not arr: return None return max(arr)"},{"question":"Write a python function to find all subsets of a given set. The set is represented as a list of unique integers, and the function should return a list of lists where each inner list represents a unique subset.","solution":"def find_subsets(nums): Returns all subsets of a given set of unique integers. result = [[]] # Start with the empty set for num in nums: # For the current number, add it to all existing subsets new_subsets = [current + [num] for current in result] result.extend(new_subsets) return result"},{"question":"Write a python function to return a sorted list of all prime numbers less than a given number n, using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a sorted list of all prime numbers less than the given number n. Parameters: n (int): The upper limit to find all prime numbers less than n. Returns: list: A sorted list of all prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to check if a list is sorted. The function should return \`True\` if the list is sorted in non-decreasing order, otherwise, it should return \`False\`.","solution":"def is_sorted(lst): Returns True if the list is sorted in non-decreasing order, otherwise False. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Write a python function to find the maximum sum possible of subarray with the constraint that no two elements in the sum are adjacent in the original array.","solution":"def max_non_adjacent_sum(arr): Finds the maximum sum of a subarray with the constraint that no two elements in the sum are adjacent in the original array. :param arr: List of integers :return: Maximum possible sum with the constraint if not arr: return 0 incl = 0 # Maximum sum including the previous element excl = 0 # Maximum sum excluding the previous element for num in arr: new_excl = max(incl, excl) # Current max excluding current element incl = excl + num # Current max including current element excl = new_excl # Update exclude to latest max return max(incl, excl)"},{"question":"Write a python function to determine the most frequently occurring character in a given string. If there are multiple characters with the same highest frequency, return all of them in alphabetical order.","solution":"def most_frequent_chars(s): Returns the most frequently occurring character(s) in the string 's'. If multiple characters have the same highest frequency, returns them in alphabetical order. Parameters: - s : str : input string Returns: - List[str] : list of the most frequently occurring character(s) from collections import Counter if not s: return [] frequency = Counter(s) max_freq = max(frequency.values()) most_frequent = [char for char, freq in frequency.items() if freq == max_freq] return sorted(most_frequent)"},{"question":"Write a python function to find the common elements in two lists using list comprehension.","solution":"def common_elements(list1, list2): Returns a list of common elements between two lists using list comprehension. return [element for element in list1 if element in list2]"},{"question":"Write a python function to create a bar chart using matplotlib. explains the steps involved.","solution":"import matplotlib.pyplot as plt def create_bar_chart(data, labels, title, x_label, y_label): Creates a bar chart using the provided data and labels. :param data: List of values for the bar heights. :param labels: List of labels for the bars. :param title: Title of the bar chart. :param x_label: Label for the x-axis. :param y_label: Label for the y-axis. # Step 1: Define the positions of the bars positions = range(len(data)) # Step 2: Create the bar chart plt.bar(positions, data, tick_label=labels) # Step 3: Add a title and axis labels plt.title(title) plt.xlabel(x_label) plt.ylabel(y_label) # Step 4: Show the bar chart plt.show()"},{"question":"Write a python function to check if a given list has any repeated elements. The function should return \`True\` if there are any duplicates and \`False\` otherwise. Additionally, the function should also return a dictionary of elements that are duplicated, with their counts. For example, for the input list \`[1, 2, 3, 2, 4, 5, 1]\`, the output should be \`(True, {1: 2, 2: 2})\`.","solution":"def check_duplicates(lst): Returns a tuple with a boolean indicating if there are any duplicates in the list and a dictionary of duplicated elements with their counts. Parameters: lst (list): The list to check for duplicates. Returns: tuple: (has_duplicates (bool), duplicates (dict)) element_counts = {} for item in lst: if item in element_counts: element_counts[item] += 1 else: element_counts[item] = 1 duplicates = {key: value for key, value in element_counts.items() if value > 1} has_duplicates = len(duplicates) > 0 return has_duplicates, duplicates"},{"question":"Write a python function to determine whether the product of two polynomials is a zero polynomial. Provide examples for both a zero polynomial and a non-zero polynomial.","solution":"def is_zero_polynomial(poly1, poly2): Determines if the product of two polynomials is a zero polynomial. Args: poly1 (list): Coefficients of the first polynomial, starting from the constant term. poly2 (list): Coefficients of the second polynomial, starting from the constant term. Returns: bool: True if the product is a zero polynomial, False otherwise. if not poly1 or not poly2: # One of the polynomials is empty return True if len(poly1) == 1 and poly1[0] == 0: # The first polynomial is zero return True if len(poly2) == 1 and poly2[0] == 0: # The second polynomial is zero return True # Calculate product of polynomials product = [0] * (len(poly1) + len(poly2) - 1) for i in range(len(poly1)): for j in range(len(poly2)): product[i + j] += poly1[i] * poly2[j] # Check if the product is a zero polynomial return all(coef == 0 for coef in product)"},{"question":"Write a python function to return the list of prime numbers less than n (3<=n<=10^6).","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers less than n. Parameters: n (int): The upper limit (exclusive) for generating primes. Returns: list: A list of prime numbers less than n. if n < 3: return [] # There are no primes less than 2 is_prime = [True] * n is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n, i): is_prime[j] = False return [i for i in range(2, n) if is_prime[i]]"},{"question":"Write a python function to find the sum of the digits in the factorial of a given number \`n\`.","solution":"import math def sum_of_digits_in_factorial(n): Returns the sum of the digits in the factorial of n. factorial_result = math.factorial(n) return sum(int(digit) for digit in str(factorial_result))"},{"question":"Write a python function to reverse the bits of an unsigned integer. The function should take an integer as input and return the integer after reversing its bits. For example, if the input is \`1011\`, the output should be \`12\`.","solution":"def reverse_bits(n): Reverse the bits of the given unsigned integer n and return the result as an integer. :param n: The unsigned integer :return: The integer representing the reversed bits reversed_bits = 0 for _ in range(32): reversed_bits = (reversed_bits << 1) | (n & 1) n >>= 1 return reversed_bits"},{"question":"Write a python function to find the nth Fibonacci number using recursion. What are the steps involved in this process?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to check if a number is a prime number. To ensure understanding, please provide详细的解释 and examples.","solution":"import math def is_prime(n): Check if a number is prime. Parameters: - n (int): The number to be checked. Returns: - bool: True if the number is prime, False otherwise. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # other even numbers are not primes for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a python function to add two fractions represented as tuples. The fractions are in the format \`(numerator, denominator)\`. The function should return the result as a tuple representing the sum of the two fractions.","solution":"from fractions import Fraction def add_fractions(fraction1, fraction2): Adds two fractions represented as tuples. Parameters: fraction1 (tuple): The first fraction as (numerator, denominator). fraction2 (tuple): The second fraction as (numerator, denominator). Returns: tuple: The sum of the two fractions as (numerator, denominator). f1 = Fraction(fraction1[0], fraction1[1]) f2 = Fraction(fraction2[0], fraction2[1]) result = f1 + f2 return (result.numerator, result.denominator)"},{"question":"Write a python function to group a list of tuples by the first element of the tuple. Assume all tuples in the list have the same type at the first element.","solution":"from collections import defaultdict def group_tuples_by_first_element(tuples): Groups a list of tuples by the first element of the tuple. Args: tuples (list): A list of tuples. Returns: dict: A dictionary where the keys are the first elements of the tuples, and the values are lists of tuples with that key as their first element. grouped = defaultdict(list) for tup in tuples: grouped[tup[0]].append(tup) return dict(grouped)"},{"question":"Write a python function to convert a list of numbers into a single string, separated by commas.","solution":"def list_to_string(numbers): Converts a list of numbers into a single string, separated by commas. Parameters: numbers (list): A list of numbers Returns: str: A string of numbers separated by commas return ','.join(map(str, numbers))"},{"question":"Write a python function to remove all non-alphanumeric characters from a given string and return the modified string.","solution":"import re def remove_non_alphanumeric(s): Removes all non-alphanumeric characters from the given string. Parameters: s (str): The input string. Returns: str: The modified string with only alphanumeric characters. return re.sub(r'[^w]', '', s)"},{"question":"Write a python function to sort a list of integers using the merge sort algorithm. The function should return the sorted list.","solution":"def merge_sort(arr): Sorts a list of integers using the merge sort algorithm and returns the sorted list. if len(arr) <= 1: return arr # Split the list in half mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] # Recursively sort each half left_sorted = merge_sort(left_half) right_sorted = merge_sort(right_half) # Merge the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): Merges two sorted lists into one sorted list. sorted_list = [] left_index = right_index = 0 # Compare elements from both lists and merge while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # Append remaining elements, if any sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"Write a python function to find the second largest number in a given list of numbers. If the list contains duplicates of the largest number, the function should ignore these and find the next largest unique number.","solution":"def second_largest(numbers): Returns the second largest unique number in a given list of numbers. if not numbers or len(numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers\\") # Create a sorted list of unique numbers unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers\\") unique_numbers.sort() # The second largest number will be the second last element in the sorted list return unique_numbers[-2]"},{"question":"Write a python function to extract a list of all the words from the given string that are greater than a specified length.","solution":"def extract_words_greater_than_length(s, length): Extract a list of all words from the given string that are greater than the specified length. :param s: Input string :param length: Length to compare the words against :return: List of words greater than the specified length words = s.split() return [word for word in words if len(word) > length]"},{"question":"Write a python function to evaluate the boolean expression \\"b ^ (c | d)\\" where b, c, and d are boolean variables. The function should take three arguments (b, c, and d) and return the result of the expression.","solution":"def evaluate_expression(b, c, d): Evaluates the boolean expression 'b ^ (c | d)'. Args: b (bool): The first boolean input. c (bool): The second boolean input. d (bool): The third boolean input. Returns: bool: The result of the boolean expression 'b ^ (c | d)'. return b ^ (c | d)"},{"question":"Write a python function to validate a date string using the dd-mm-yyyy format.","solution":"import re from datetime import datetime def validate_date(date_string): Validates a date string in the format dd-mm-yyyy. Args: date_string (str): The date string to validate. Returns: bool: True if the date string is valid, False otherwise. # Define the regex pattern pattern = r\\"^d{2}-d{2}-d{4}\\" # Check if the date string matches the pattern if not re.match(pattern, date_string): return False # Extract the day, month, and year from the date string day, month, year = map(int, date_string.split('-')) # Construct a date object to check if it's valid try: datetime(year, month, day) except ValueError: return False return True"},{"question":"Write a python function to remove duplicates from a list of strings, while preserving the original order of the elements. You can use a combination of python built-in data structure and functions to achieve this. Be sure to return the unique elements in their original order.","solution":"def remove_duplicates(input_list): Removes duplicates from a list of strings, preserving the original order. Parameters: input_list (list): A list of strings which may contain duplicates. Returns: list: A list of strings with duplicates removed, preserving the original order. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the nth smallest element in a list. The function should be efficient and handle edge cases such as an empty list or an invalid nth value.","solution":"def nth_smallest_element(lst, n): Returns the nth smallest element in the list. Parameters: lst (list): List of elements. n (int): Position of the smallest element to retrieve (1-based). Returns: int/float: The nth smallest element in the list. Raises: ValueError: If the list is empty or n is out of range. if not lst: raise ValueError(\\"List is empty\\") if n <= 0 or n > len(lst): raise ValueError(\\"n is out of range\\") sorted_lst = sorted(lst) return sorted_lst[n - 1]"},{"question":"Write a python function to generate a list containing 200 elements.","solution":"def generate_list(): Returns a list containing 200 elements from 0 to 199. return list(range(200))"},{"question":"Write a python function to convert a string to an integer. If the string contains non-numeric characters, those should be removed before conversion. Additionally, handle negative numbers correctly.","solution":"def string_to_integer(s): Converts a given string to an integer. Non-numeric characters are removed before conversion. Handles negative numbers correctly. # Remove non-numeric characters except the first '-' if it exists cleaned_str = ''.join(c for c in s if c.isdigit() or (c == '-' and s.index(c) == 0)) # Return 0 if there's no numeric part if not cleaned_str or cleaned_str == '-': return 0 return int(cleaned_str)"},{"question":"Write a python function to find the elements that appear more than once in a list. The function should return a list of these elements, without duplicates.","solution":"def find_duplicates(lst): Returns a list of elements that appear more than once in the input list, without duplicates. Parameters: lst (list): The input list. Returns: list: A list of duplicate elements, without duplicates. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to return the missing number in an array of integers from 1 to n. The array is sorted in ascending order, and exactly one number from the range is missing. For example, if the array is [1, 2, 4, 5], the missing number is 3.","solution":"def find_missing_number(arr): Returns the missing number in a sorted array of integers from 1 to n. n = len(arr) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a python function to find the upper limit price of goods in a warehouse. The function should take a list of tuples representing goods, where each tuple contains the product name and price of a good. The function should return the highest price found among the goods.","solution":"def find_upper_limit_price(goods): Returns the highest price found among the goods. :param goods: List of tuples, where each tuple contains the product name and price. :return: The highest price in the list of goods. if not goods: return 0 return max(price for name, price in goods)"},{"question":"Write a python function to convert a given integer to its binary representation. The function should take an integer as input and return a string representing the binary form of the integer.","solution":"def int_to_binary(n): Converts a given integer to its binary representation as a string. Parameters: n (int): The integer to convert. Returns: str: The binary representation of the integer. return bin(n)[2:]"},{"question":"Write a python function to sort a given list of integers, where the first element is the minimum and the last element is the maximum. The function should modify the list in place.","solution":"def sort_list_in_place(nums): Sorts the given list of integers in place such that the first element is the minimum and the last element is the maximum. Parameters: nums (list): List of integers to sort. nums.sort()"},{"question":"Write a python function to find the sum of the elements of an n x n matrix.","solution":"def matrix_sum(matrix): Returns the sum of all elements in an n x n matrix. total = 0 for row in matrix: total += sum(row) return total"},{"question":"Write a python function to convert a decimal number to its binary representation. The function should take a non-negative integer as input and return a string representing the binary equivalent of the decimal number. If the input is not a non-negative integer, the function should return an appropriate error message.","solution":"def decimal_to_binary(n): Converts a non-negative integer to its binary representation as a string. Returns an error message if the input is not a non-negative integer. if not isinstance(n, int) or n < 0: return \\"Input must be a non-negative integer\\" return bin(n)[2:]"},{"question":"Write a python function to find the length of the longest word in a given sentence without counting spaces as part of the word length.","solution":"def longest_word_length(sentence): Returns the length of the longest word in the given sentence. words = sentence.split() if not words: return 0 longest = max(words, key=len) return len(longest)"},{"question":"Write a python function to convert a given string into a palindrome. A palindrome is a string which reads the same backward as forward. The function should reverse the given string and return it as the palindrome.","solution":"def make_palindrome(s): Converts the given string into a palindrome by reversing the string. return s[::-1]"},{"question":"Write a python function to find and return the nth Fibonacci number. The nth Fibonacci number is the sum of the (n-1)th and (n-2)th Fibonacci numbers, with the initial cases being F(0) = 0 and F(1) = 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to calculate the maximum number of bottles of water a fridge can store. The fridge can only store bottles with a height of 10cm or less. The function should take as input a list of bottle heights and return the maximum number of bottles that can fit in the fridge.","solution":"def max_bottles_in_fridge(bottle_heights): Returns the maximum number of bottles that can be stored in the fridge. The fridge can only store bottles with a height of 10cm or less. Parameters: bottle_heights (list of int): The list of bottle heights. Returns: int: The maximum number of bottles that can be stored in the fridge. max_height = 10 count = 0 for height in bottle_heights: if height <= max_height: count += 1 return count"},{"question":"Write a python function to find the kth smallest element in an array. For example, given an array \`arr = [7, 10, 4, 3, 20, 15]\` and \`k = 3\`, the function should return the 3rd smallest element, which is \`7\`.","solution":"def find_kth_smallest(arr, k): Returns the kth smallest element in the array. Args: arr (list): List of integers k (int): The order of the smallest element to find Returns: int: The kth smallest element in the array if not 1 <= k <= len(arr): raise ValueError(\\"k is out of the bounds of the array\\") return sorted(arr)[k-1]"},{"question":"Write a python function to determine if a string \`s\` can be converted into a palindrome by rearranging its characters. The function should return \`true\` if it is possible to rearrange the characters of \`s\` to form a palindrome, otherwise return \`false\`.","solution":"def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"Write a python function to sort a list in descending order without using the built-in sort function.","solution":"def sort_descending(lst): Sorts a list in descending order without using Python's built-in sort function. for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] < lst[j]: lst[i], lst[j] = lst[j], lst[i] return lst"},{"question":"Write a python function to reverse a linked list. Analyze the time and space complexity of your function.","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. Args: head (Node): The head of the linked list. Returns: Node: The new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev # Time Complexity: O(n), where n is the number of nodes in the linked list. # Space Complexity: O(1), as we are using a constant amount of extra space."},{"question":"Write a python function to find the minimum element in a given array. The function should be able to handle arrays of any size and should return the smallest number found in the array.","solution":"def find_minimum(arr): Returns the minimum element in a given array. if not arr: raise ValueError(\\"The array is empty\\") min_elem = arr[0] for elem in arr[1:]: if elem < min_elem: min_elem = elem return min_elem"},{"question":"Write a python function to check if a number is a power of four. The function should return True if the number is a power of four, and False otherwise. A number is considered a power of four if there exists a non-negative integer \`x\` such that 4^x equals the number.","solution":"def is_power_of_four(n): Returns True if n is a power of four, otherwise returns False. if n <= 0: return False # Keep dividing the number by 4 while it's even and greater than one while n % 4 == 0: n = n // 4 return n == 1"},{"question":"Write a python function to check if two strings are one edit away from each other. An edit can be an insert, delete, or replace a character. For example, 'hello' and 'helloa' are one edit away as the letter 'a' is appended at the end. 'helo' and 'hello' are also one edit away as the letter 'l' is removed (insertOneEditAway('helloa', 'hello') == True). 'hello' and 'halo' are one edit away as the letter 'l' is replaced with 'a' (insertOneEditAway('hello', 'halo') == True). The function should return True if the two strings are one edit away otherwise it should return False.","solution":"def one_edit_away(s1, s2): Check if two strings are one edit away from each other. len1, len2 = len(s1), len(s2) # If length difference is greater than 1, they are not one edit away if abs(len1 - len2) > 1: return False # Identify the shorter and longer string if len1 > len2: s1, s2 = s2, s1 len1, len2 = len2, len1 # Variables to keep track of the indices and the edit occurred index1 = index2 = 0 found_difference = False while index1 < len1 and index2 < len2: if s1[index1] != s2[index2]: if found_difference: return False found_difference = True # If lengths are different, increment longer string's index2 only if len1 != len2: index2 += 1 continue index1 += 1 index2 += 1 return True"},{"question":"Write a python function to count the number of factors for a given number. For example, the number 6 has factors 1, 2, 3, and 6. So, there are 4 factors for the number 6.","solution":"def count_factors(n): Returns the number of factors of the given number n. if n <= 0: return 0 count = 0 for i in range(1, int(n ** 0.5) + 1): if n % i == 0: count += 2 if i != n // i else 1 return count"},{"question":"Write a python function to reverse the uppercase and lowercase letters of a given string. For example, the input \\"Hello World!\\" should yield \\"hELLO wORLD!\\". How can I achieve this?","solution":"def reverse_case(s): Reverses the uppercase and lowercase letters of the given string. Parameters: s (str): The string to reverse the letters case. Returns: str: The string with reversed case letters. return s.swapcase()"},{"question":"Write a python function to solve the following problem: Given a string of digits, you need to find the maximum sum of a continuous sub-array (subsequence to be a contiguous part of the array). You can only use each digit once in each sub-array.","solution":"def max_continuous_subarray_sum(digits): Finds the maximum sum of a continuous sub-array in the given string of digits. Parameters: digits (str): A string representing the digits. Returns: int: The maximum sum of a continuous sub-array. max_sum = 0 current_sum = 0 for digit in digits: num = int(digit) current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the minimum element in a sorted and rotated array without duplicates. The rotation means that the array was originally sorted in a certain order and then rotated a certain number of positions to the right. For example, [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2].","solution":"def find_min_in_rotated_sorted_array(nums): Finds the minimum element in a rotated sorted array without duplicates. :param nums: List[int] - The input rotated sorted array :return: int - The minimum element in the array left, right = 0, len(nums) - 1 # Binary search while left < right: mid = (left + right) // 2 # Minimum element is always in the unsorted part of the array if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Write a python function to find the smallest subarray that needs to be sorted. If a subarray is sorted, it means that all numbers in it are in ascending order. Please be aware that the smallest subarray means the least number of elements in it.","solution":"def smallest_subarray_to_sort(arr): Returns the start and end indices of the smallest subarray that needs to be sorted to make the entire array sorted. If the array is already sorted, returns an empty array. Args: arr (list of int): The input array. Returns: list of int: A list with two elements, the start and end indices of the subarray. # Step 1: Identify the first position from the left where the order is violated. left = 0 while left < len(arr) - 1 and arr[left] <= arr[left + 1]: left += 1 # If left has reached the end, the array is already sorted. if left == len(arr) - 1: return [] # Step 2: Identify the last position from the right where the order is violated. right = len(arr) - 1 while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Step 3: Find the minimum and maximum values in this subarray. subarray_min = min(arr[left:right + 1]) subarray_max = max(arr[left:right + 1]) # Step 4: Extend left and right to include any out-of-order values in the complete subarray. while left > 0 and arr[left - 1] > subarray_min: left -= 1 while right < len(arr) - 1 and arr[right + 1] < subarray_max: right += 1 return [left, right]"},{"question":"Write a python function to find the unique numbers in a list and return them in a new list, maintaining their insertion order.","solution":"def unique_numbers(lst): Returns a list of unique numbers from the input list, maintaining their insertion order. seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst"},{"question":"Write a python function to find the most frequent word in a sentence. If there are multiple words with the highest frequency, return all of them in a list. For simplicity, assume that the input sentence does not contain any punctuation and all words are in lowercase.","solution":"from collections import Counter def most_frequent_words(sentence): Returns the most frequent words in a sentence. If there are multiple words with the highest frequency, return all of them in a list. words = sentence.split() word_count = Counter(words) if not word_count: return [] max_frequency = max(word_count.values()) most_frequent = [word for word, count in word_count.items() if count == max_frequency] return most_frequent"},{"question":"Write a python function to find the sum of digits in even numbers from a list.","solution":"def sum_of_digits_even_numbers(number_list): Returns the sum of the digits of all even numbers in a given list. Parameters: number_list (list): List of integers. Returns: int: Sum of the digits of all even numbers. def sum_digits(n): return sum(int(digit) for digit in str(abs(n))) even_numbers = [number for number in number_list if number % 2 == 0] return sum(sum_digits(number) for number in even_numbers)"},{"question":"Write a python function to replace all the vowels in a string with consonants, keeping the consoant as it is.","solution":"def replace_vowels_with_consonants(s): Replaces all vowels in the input string with 'b' and keeps consonants as they are. Parameters: s (str): The input string. Returns: str: The modified string with vowels replaced by 'b'. vowels = 'aeiouAEIOU' return ''.join(['b' if char in vowels else char for char in s])"},{"question":"Write a python function to remove duplicates and return the unique values in a list.","solution":"def remove_duplicates(lst): Remove duplicates from a list and return the unique values. Args: lst (list): The input list with potential duplicate values. Returns: list: A list with unique values. return list(set(lst))"},{"question":"Write a python function to traverse a binary tree in depth first search (DFS) order and return the nodes in a list. For this problem, use both iterative and recursive methods.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_recursive(root): Recursive method to perform depth first search on a binary tree. nodes = [] def traverse(node): if node is not None: nodes.append(node.value) traverse(node.left) traverse(node.right) traverse(root) return nodes def dfs_iterative(root): Iterative method to perform depth first search on a binary tree. if root is None: return [] stack, nodes = [root], [] while stack: node = stack.pop() if node is not None: nodes.append(node.value) stack.append(node.right) stack.append(node.left) return nodes"},{"question":"Write a python function to find all factors of a given number, but do not include 1 and the number itself as factors.","solution":"def find_factors(n): Returns a list of factors for a given number n, excluding 1 and n itself. if n <= 1: return [] factors = [] for i in range(2, n): if n % i == 0: factors.append(i) return factors"},{"question":"Write a python function to find the most common element in a list. If there are multiple elements with the same highest frequency, the function should return all of them. The function should ignore case sensibility for strings. How can this be achieved?","solution":"from collections import Counter def most_common_elements(lst): Finds the most common element(s) in the list. If there are ties, returns all of them. Ignores case sensitivity for strings. Parameters: lst (list): List of elements. Returns: list: List of the most common element(s). # Normalize strings to lowercase normalized_lst = [str(item).lower() for item in lst] count = Counter(normalized_lst) if not count: return [] max_count = max(count.values()) return [item for item, cnt in count.items() if cnt == max_count]"},{"question":"Write a python function to find the maximum number of unique elements in a window of size k in an array. For example, given an array [1, 2, 2, 3, 4, 2, 3] and k = 3, return 2 (the unique elements in the window of size 3 are [1,2,2], [2,3,4], and [3,4,2]).","solution":"def max_unique_elements_window(arr, k): Finds the maximum number of unique elements in any window of size k in an array. :param arr: List of integers :param k: Size of the window :return: Maximum number of unique elements in any window of size k if k > len(arr): return 0 max_unique = 0 for i in range(len(arr) - k + 1): window = arr[i:i + k] unique_elements_count = len(set(window)) if unique_elements_count > max_unique: max_unique = unique_elements_count return max_unique"},{"question":"Write a python function to identify and print all common elements between two lists. The lists can contain any type of elements, but they are guaranteed to be hashable. The function should return a set of these common elements.","solution":"def common_elements(list1, list2): Returns a set containing all common elements between two lists. return set(list1) & set(list2)"},{"question":"Write a python function to check if a particular character is present in a given string or not.","solution":"def is_char_in_string(char, string): Checks if a particular character is present in a given string. Args: char (str): The character to check for. string (str): The string to check within. Returns: bool: True if the character is present, False otherwise. return char in string"},{"question":"Write a python function to remove duplicates from a list while maintaining the original order of elements. If the list is empty, the function should return an empty list.","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining order of elements. Parameters: lst (list): The input list from which duplicates need to be removed Returns: list: A list without duplicates, maintaining the original order seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to calculate the square of a number. The function should handle not just basic numerical inputs but also check whether the input is even or odd, and print a corresponding message along with the square of the number. If the input is not a number, the function should raise a ValueError with the message \\"Invalid input. Please provide a number.\\"","solution":"def square_number(n): Returns the square of the number n and prints whether the number is even or odd. If the input is not a number, raises a ValueError. if not isinstance(n, (int, float)): raise ValueError(\\"Invalid input. Please provide a number.\\") result = n ** 2 if n % 2 == 0: print(\\"The number is even.\\") else: print(\\"The number is odd.\\") return result"},{"question":"Write a python function to reverse a string. I.e., if you input \`\\"Hello world!\\"\`, the function should return \`\\"!dlrow olleH\\"\`.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to find the minimum value in a list of numbers. If the list is empty, the function should return None.","solution":"def find_minimum(numbers): Returns the minimum value in a list of numbers. If the list is empty, return None. if not numbers: return None return min(numbers)"},{"question":"Write a python function to generate a list of all prime numbers between two given numbers (both inclusive). The function should be optimized for large numbers.","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes_between(a, b): Returns a list of all prime numbers between a and b (both inclusive). primes = [] for num in range(a, b + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to convert a decimal number to its binary representation without using the built-in bin() function or any other binary conversion functions. You need to implement your own algorithm to convert the decimal number to binary.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. if n == 0: return \\"0\\" binary = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: binary = str(n % 2) + binary n = n // 2 if is_negative: binary = \\"-\\" + binary return binary"},{"question":"Write a python function to find the minimum Swaps required to sort the given array where the array contains both positive and negative numbers.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the given array. The array contains both positive and negative numbers. n = len(arr) arrpos = list(enumerate(arr)) arrpos.sort(key=lambda it: it[1]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Write a python function to check if a given string contains a palindrome as a substring. A palindrome is a string that reads the same backward as forward. You should implement this without using any external libraries.","solution":"def contains_palindrome(s): Checks if the given string contains a palindrome as a substring. Args: s (str): The string to check. Returns: bool: True if there is at least one palindrome substring, False otherwise. n = len(s) for i in range(n): for j in range(i + 2, n + 1): # Checking for substrings of length 2 or more sub = s[i:j] if sub == sub[::-1]: return True return False"},{"question":"Write a python function to calculate the average of numbers in a list. How can I handle cases where the list might be empty, and what should I return in such cases?","solution":"def average(numbers): Returns the average of the numbers in the list. If the list is empty, return None. if not numbers: # list is empty return None return sum(numbers) / len(numbers)"},{"question":"Write a python function to print Odd and Even numbers in a list. You can use the \`range\` function in Python to generate numbers.","solution":"def print_odd_even(numbers): Prints odd and even numbers from the given list of numbers. Parameters: numbers (list): A list of integers. odd_numbers = [num for num in numbers if num % 2 != 0] even_numbers = [num for num in numbers if num % 2 == 0] print(\\"Odd numbers:\\", odd_numbers) print(\\"Even numbers:\\", even_numbers)"},{"question":"Write a python function to merge two lists. The merged list should contain each element only once. For example, if the lists are [1, 2, 3] and [3, 4, 5], the merged list should be [1, 2, 3, 4, 5].","solution":"def merge_lists(list1, list2): Merges two lists into one, with each element appearing only once. Elements in the merged list should maintain their order of appearance from the original lists. merged_set = set(list1 + list2) # Combine both lists and convert to set to remove duplicates merged_list = [] for item in list1 + list2: if item in merged_set: merged_list.append(item) merged_set.remove(item) # This ensures each element is added only once and maintains order return merged_list"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a given array of integers. The function should return the maximum sum while ensuring that the subarray contains at least one number.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within a given array of integers. The subarray must contain at least one number. if not nums: return 0 max_so_far = nums[0] current_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"Write a python function to solve a classic \\"Two Sum\\" coding problem. The function should find the indices of the two numberssuch that they add up to a specific target. For example, if the input list is [2, 7, 11, 15] and the target is 9, the function should return [0, 1] because 2 + 7 = 9.","solution":"def two_sum(nums, target): Find the indices of the two numbers in \`nums\` such that they add up to \`target\`. Parameters: nums (list): List of integers. target (int): The target sum. Returns: list: A list containing the indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a python function to find the shortest path between two nodes in a graph using Dijkstra's algorithm. The function should take the graph represented as an adjacency list and the start and end nodeIds as input. It should return the shortest distance and the path from the start node to the end node.","solution":"import heapq def dijkstra(graph, start, end): Uses Dijkstra's algorithm to find the shortest path in a graph. Args: graph: A dictionary where keys are nodeIds and values are lists of (neighbor, weight) tuples. start: The starting nodeId. end: The ending nodeId. Returns: A tuple containing the shortest distance and the path from start to end. # Priority queue to store (distance, node, path) queue = [(0, start, [])] # Set to store visited nodes visited = set() while queue: (dist, current, path) = heapq.heappop(queue) if current in visited: continue path = path + [current] visited.add(current) if current == end: return (dist, path) for neighbor, weight in graph.get(current, []): if neighbor not in visited: heapq.heappush(queue, (dist + weight, neighbor, path)) return float('inf'), [] # Example usage: # graph = { # 'A': [('B', 1), ('C', 4)], # 'B': [('A', 1), ('C', 2), ('D', 5)], # 'C': [('A', 4), ('B', 2), ('D', 1)], # 'D': [('B', 5), ('C', 1)], # } # dijkstra(graph, 'A', 'D')"},{"question":"Write a python function to convert an integer to roman numeral. Can you provide a solution that handles the conversion efficiently and covers all edge cases?","solution":"def int_to_roman(num): Converts an integer to a roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a python function to generate all possible subsets of a set. Given a set represented as a list, return a list of lists where each inner list is a possible subset.","solution":"from itertools import chain, combinations def all_subsets(input_set): Generates all possible subsets of a set. :param input_set: List of elements representing the set :return: List of lists where each inner list is a possible subset input_list = list(input_set) return list(chain.from_iterable(combinations(input_list, r) for r in range(len(input_list)+1)))"},{"question":"Write a python function to check if a given integer n is a power of 2.","solution":"def is_power_of_two(n): Checks if the given integer n is a power of 2. :param n: integer to check :return: True if n is a power of 2, else False if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a python function to calculate the similarity between two documents based on their Levenshtein distance. The function should take two strings as input and return the similarity as a percentage.","solution":"def levenshtein_similarity(doc1, doc2): Returns the similarity between two documents based on their Levenshtein distance as a percentage. def levenshtein_distance(s1, s2): if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1] lev_distance = levenshtein_distance(doc1, doc2) max_len = max(len(doc1), len(doc2)) similarity_percentage = ((max_len - lev_distance) / max_len) * 100 if max_len != 0 else 100 return similarity_percentage"},{"question":"Write a python function to find the maximum sum of non-adjacent elements from a given list of positive integers.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements from a given list of positive integers. if not nums: # if the list is empty return 0 incl = 0 # max sum including the current element excl = 0 # max sum excluding the current element for num in nums: # Current max excluding i (no adjacent) new_excl = max(incl, excl) # Current max including i incl = excl + num excl = new_excl # Return max of incl and excl return max(incl, excl)"},{"question":"Write a python function to reorder a list of integers in such a way that all the odd numbers come before all the even numbers. The function should maintain the relative order of the odd and even numbers as much as possible.","solution":"def reorder_odd_even(numbers): Re-orders the list so that all odd numbers come before all the even numbers, maintaining the relative order of the odd and even numbers. Parameters: numbers (list[int]): List of integers to be reordered. Returns: list[int]: Reordered list with odd numbers first, then even numbers. odds = [] evens = [] for number in numbers: if number % 2 == 0: evens.append(number) else: odds.append(number) return odds + evens"},{"question":"Write a python function to print the longest increasing subsequence in a given sequence.","solution":"def longest_increasing_subsequence(sequence): Returns the longest increasing subsequence in the given sequence. if not sequence: return [] # Length of the sequence n = len(sequence) # \`lis\` stores the sub-sequences based on their lengths lis = [[] for _ in range(n)] # init the \`lis\` with the first element of \`sequence\` lis[0].append(sequence[0]) for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and len(lis[i]) < len(lis[j]) + 1: lis[i] = lis[j][:] lis[i].append(sequence[i]) # Find the longest subsequence in \`lis\` max_lis = [] for sub in lis: if len(sub) > len(max_lis): max_lis = sub return max_lis"},{"question":"Write a python function to return the factorial of a number. Factorial of a number n is the product of all positive integers less than or equal to n. For example, factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120.","solution":"def factorial(n): Returns the factorial of a number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to find the second largest number in a list. If the list has less than two unique numbers, your function should return None.","solution":"def second_largest(numbers): Returns the second largest number in a list, or None if there are less than two unique numbers in the list. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a python function to extract the last occurrence of a specified character from a given string. If the character is not found, return -1.","solution":"def find_last_occurrence(input_string, character): Returns the index of the last occurrence of the specified character in the input string. If the character is not found, returns -1. return input_string.rfind(character)"},{"question":"Write a python function to calculate the number of uppercase letters, lowercase letters, digits, and special characters in a given string.","solution":"def analyze_string(s): Returns a dictionary with counts of uppercase letters, lowercase letters, digits, and special characters in the given string s. result = { 'uppercase': 0, 'lowercase': 0, 'digits': 0, 'special_chars': 0 } for char in s: if char.isupper(): result['uppercase'] += 1 elif char.islower(): result['lowercase'] += 1 elif char.isdigit(): result['digits'] += 1 else: result['special_chars'] += 1 return result"},{"question":"Write a python function to implement a basic calculator which can perform addition, subtraction, multiplication, and division. The function should take three parameters - the first two are the numbers on which the operation is to be performed, and the third is the operation (addition, subtraction, multiplication, or division). Your function should return the result of the operation.","solution":"def calculator(a, b, operation): Perform basic arithmetic operations: addition, subtraction, multiplication, and division. Args: a (float): The first number. b (float): The second number. operation (str): The operation to perform. Should be one of 'add', 'subtract', 'multiply', 'divide'. Returns: float: The result of the arithmetic operation. Raises: ValueError: If the operation is not one of the specified operations or if division by zero is attempted. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b else: raise ValueError(\\"Invalid operation. Available operations: 'add', 'subtract', 'multiply', 'divide'.\\")"},{"question":"Write a python function to reverse a list of lists.","solution":"def reverse_list_of_lists(lists): Reverses a list of lists. Each list within the main list is also reversed. Args: lists (list of lists): The main list containing lists to be reversed. Returns: list of lists: The reversed main list with each sub-list reversed. reversed_lists = [sub_list[::-1] for sub_list in lists] return reversed_lists[::-1]"},{"question":"Write a python function to reverse the elements of a list in Python. You should not use any built-in functions or slicing.","solution":"def reverse_list(lst): Reverses the elements of the list lst. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Write a python function to reverse the words in a sentence. For example, given the sentence \\"Hello world!\\", the function should return \\"!dlrow olleH\\".","solution":"def reverse_words(sentence): Reverses the characters of each word in a given sentence. Each word is considered as a sequence of characters separated by spaces. Parameters: sentence (str): The input sentence. Returns: str: The sentence with each word's characters reversed. words = sentence.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to calculate the minimum number of jumps to reach the last index of an array such that each element in the array represents the maximum number of steps that can be taken forward from that position.","solution":"def min_jumps(arr): Given an array of integers where each element represents the maximum number of steps that can be taken forward from that position, the function returns the minimum number of jumps to reach the last index. If it is not possible to reach the end, the function returns -1. if len(arr) <= 1: return 0 if arr[0] == 0: return -1 n = len(arr) jumps = 1 max_reach = arr[0] steps = arr[0] for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Write a python function to merge two sorted lists into a single sorted list. The function should have a time complexity of O(n + m), where n is the length of the first list and m is the length of the second list. The function should be able to handle the cases where the lists may have different lengths, and should be able to handle when the lists contain duplicate elements.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: A single sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append the remaining elements of list1 or list2 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to reverse a given string. The function should take a string as input and return the reversed string. Additionally, ensure that your code is optimized for performance.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to output \\"Hello, World!\\"","solution":"def hello_world(): Returns the string \\"Hello, World!\\". return \\"Hello, World!\\""},{"question":"Write a python function to create a binary search tree from a sorted array and traverse the tree using the in-order traversal method.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sorted_array_to_bst(nums): if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root def in_order_traversal(root): result = [] def traverse(node): if not node: return traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Write a python function to create, sort and remove duplicates from data in a python list. What are some common mistakes when using \`sort()\` and \`sorted()\` methods?","solution":"def create_sort_remove_duplicates(data): Takes a list of data, sorts it, removes duplicates, and returns the processed list. if not isinstance(data, list): raise ValueError(\\"The input must be a list.\\") # Remove duplicates by converting to a set and back to a list processed_data = list(set(data)) # Sort the list processed_data.sort() return processed_data # Common mistakes with \`sort()\` and \`sorted()\`: # 1. Using \`sort()\` on a non-list iterable. \`sort()\` is a method specific to list objects. # 2. Using \`sorted()\` when in-place sorting is desired. \`sorted()\` returns a new sorted list and does not modify the original list. # 3. Neglecting that \`sort()\` modifies the original list and does not return any value (returns None). # 4. Misunderstanding the use of key parameters in both \`sort()\` and \`sorted()\`."},{"question":"Write a python function to count how many times a specific word appears in a given text.","solution":"def count_word_occurrences(text, word): Returns the number of times the specified word appears in the given text. Parameters: text (str): The text to search within. word (str): The word to search for. Returns: int: The number of occurrences of the specified word. # Split the text into words by spaces and other delimiters words = text.lower().split() # Clean each word by removing punctuation cleaned_words = [''.join(filter(str.isalnum, w)) for w in words] # Count occurrences of the specified word return cleaned_words.count(word.lower())"},{"question":"Write a python function to perform a binary search on an array of integers to find the index of a target value. If the target value is not found, return -1.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the index of the target value. If the target value is not found, return -1. Args: arr (list): A list of integers (sorted in ascending order). target (int): The target integer to search for in the list. Returns: int: The index of the target value in the list, or -1 if not found. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to identify the positions of the minimum and maximum values in a list of integers. The function should return a tuple containing two lists: the first list contains all the positions of the minimum value, and the second list contains the positions of the maximum value in the input list.","solution":"def find_min_max_positions(numbers): Returns the positions of the minimum and maximum values in the list of integers. Args: numbers: List of integers. Returns: A tuple of two lists: - First list contains positions of minimum value. - Second list contains positions of maximum value. if not numbers: return ([], []) min_value = min(numbers) max_value = max(numbers) min_positions = [index for index, value in enumerate(numbers) if value == min_value] max_positions = [index for index, value in enumerate(numbers) if value == max_value] return (min_positions, max_positions)"},{"question":"Write a python function to check if a given number is a palindrome Using recursion.","solution":"def is_palindrome_recursive(num): Returns whether a given number is a palindrome using recursion. num_str = str(num) def helper(s, start, end): if start >= end: return True if s[start] != s[end]: return False return helper(s, start + 1, end - 1) return helper(num_str, 0, len(num_str) - 1)"},{"question":"Write a python function to find the removed integer from a sorted list. The list is almost sorted, meaning that only one integer is missing. The missing integer is guaranteed to be between the smallest and largest elements of the list.","solution":"def find_missing_integer(arr): Given a sorted list with one integer missing, this function returns the missing integer. Parameters: arr (list of int): The sorted list with one integer missing. Returns: int: The missing integer. # Expected sum of integers from the first element to the last element in the list if no element was missing expected_sum = sum(range(arr[0], arr[-1] + 1)) # Actual sum of elements in the list actual_sum = sum(arr) # The missing integer missing_integer = expected_sum - actual_sum return missing_integer"},{"question":"Write a python function to check if a given string is a palindrome without using the numismatic value of the string. For example, \\"madam\\" is a palindrome, \\"python\\" is not.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. A palindrome is a word that reads the same backward as forward. return s == s[::-1]"},{"question":"Write a python function to solve the problem of finding the shortest subarray with sum at least target. The function should be efficient and handle edge cases properly.","solution":"from collections import deque from typing import List def shortest_subarray_with_sum_at_least_target(nums: List[int], target: int) -> int: n = len(nums) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + nums[i] min_length = float('inf') dq = deque() for i in range(n + 1): while dq and prefix_sums[i] - prefix_sums[dq[0]] >= target: min_length = min(min_length, i - dq.popleft()) while dq and prefix_sums[i] <= prefix_sums[dq[-1]]: dq.pop() dq.append(i) return min_length if min_length != float('inf') else -1"},{"question":"Write a python function to determine the frequency of a character in a string using a dictionary. The function should take in a string and a character as input and return the frequency of the specified character in the string.","solution":"def char_frequency(s, char): Returns the frequency of a specified character in the given string. Parameters: s (str): The string to analyze. char (str): The character whose frequency is to be determined. Returns: int: The frequency of the specified character in the string. frequency_dict = {} for c in s: if c in frequency_dict: frequency_dict[c] += 1 else: frequency_dict[c] = 1 return frequency_dict.get(char, 0)"},{"question":"Write a python function to return the roots of a quadratic equation. The function should take three parameters a, b, and c, which are the coefficients of the quadratic equation ax^2 + bx + c = 0. Your function should return a tuple of the roots. If the roots are complex, return them as complex numbers.","solution":"import cmath def quadratic_roots(a, b, c): Returns the roots of the quadratic equation ax^2 + bx + c = 0. Parameters: a (float): coefficient of x^2 b (float): coefficient of x c (float): constant term Returns: tuple: a tuple containing both roots (real or complex) # Calculate the discriminant discriminant = b**2 - 4*a*c # Calculating the two roots using the quadratic formula root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) return (root1, root2)"},{"question":"Write a python function to find the longest word in a given text.","solution":"def find_longest_word(text): Returns the longest word in the given text. If there are multiple words with the same maximum length, returns the first occurrence. Parameters: text (str): the input text Returns: str: the longest word in the text words = text.split() longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Write a python function to calculate the frequency of each character in a given string and return the result as a dictionary where the keys are the characters and the values are their frequencies. For example, for the string \\"hello world\\", the function should return {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}. Keep in mind that the function should ignore case sensitivity.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the given string, ignoring case sensitivity. freq = {} for char in s.lower(): if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Write a python function to find the second largest number in a list. If the list has less than two elements or all elements are the same, return None.","solution":"def second_largest(nums): Finds the second largest number in a list. Returns None if the list has less than two elements or all elements are the same. if len(nums) < 2: return None first = second = float('-inf') for num in nums: if num > first: second = first first = num elif num > second and num != first: second = num return None if second == float('-inf') else second"},{"question":"Write a python function to convert an IP address from dot-decimal notation to binary Notation.","solution":"def ip_to_binary(ip_address): Converts an IP address from dot-decimal notation to binary notation. Args: ip_address (str): The IP address in dot-decimal notation (e.g., \\"192.168.0.1\\"). Returns: str: The IP address in binary notation (e.g., \\"11000000.10101000.00000000.00000001\\"). binary_ip = '.'.join(format(int(octet), '08b') for octet in ip_address.split('.')) return binary_ip"},{"question":"Write a python function to find if a three-digit number is an Armstrong (Narcissistic) number. An Armstrong number is an integer such that the sum of the cubes of its digits is equal to the number itself. For example, 153 is an Armstrong number because (1^3 + 5^3 + 3^3 = 153).","solution":"def is_armstrong_number(n): Check if a three-digit number is an Armstrong number. Parameters: n (int): The three-digit number to check. Returns: bool: True if the number is an Armstrong number, False otherwise. if n < 100 or n > 999: raise ValueError(\\"Input must be a three-digit number\\") digits = [int(d) for d in str(n)] return n == sum(d ** 3 for d in digits)"},{"question":"Write a python function to find the largest prime number less than n that is also a palindrome.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Check if a number is a palindrome. return str(n) == str(n)[0:][::-1] def largest_prime_palindrome(n): Finds the largest prime number less than n that is also a palindrome. for num in range(n - 1, 1, -1): if is_prime(num) and is_palindrome(num): return num return None"},{"question":"Write a python function to implement a binary search algorithm for an ordered list. Assume the list is sorted in ascending order. Your function should return the index of the target value if it exists in the list, or -1 if it does not exist.","solution":"def binary_search(arr, target): Implements binary search algorithm to find the target in a sorted list. Args: arr (list): The sorted list in which to search. target (int): The value to search for. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the solution to a given binomial coefficient C(n, k). The function should return the value of the binomial coefficient, which is C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1.","solution":"def binomial_coefficient(n, k): Calculates the binomial coefficient C(n, k) using a recursive approach. # Base cases if k == 0 or k == n: return 1 # Recursive calculation return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)"},{"question":"Write a python function to identify and return all strings in a list that are shorter than a specified length. The function should accept a list of strings and an integer representing the maximum allowed length for the strings. It should return a new list containing all strings from the original list that have a length less than the specified maximum length.","solution":"def filter_short_strings(strings, max_length): Returns a list of strings that are shorter than the specified max_length. :param strings: List of strings to be filtered. :param max_length: Integer representing the maximum allowed length for the strings. :return: List of strings shorter than max_length. return [string for string in strings if len(string) < max_length]"},{"question":"Write a python function to find all pairs of elements in a list of integers that sum exactly to a given value. You should also handle cases where the list may contain duplicates and negative numbers. Your function should return a set of unique pairs (i.e., each pair should appear only once, regardless of order).","solution":"def find_pairs_with_sum(lst, target): Given a list of integers, finds all unique pairs that sum up to the target value. seen = set() pairs = set() for num in lst: complement = target - num if complement in seen: # Add the pair to the set in sorted order to avoid duplicates pairs.add(tuple(sorted((num, complement)))) seen.add(num) return pairs"},{"question":"Write a python function to create a dictionary with keys as roll numbers and values as the corresponding names of students. Suppose the result of this function should be something like {101: 'John Doe', 102: 'Jane Smith', 103: 'Alice Johnson'}.","solution":"def create_student_dictionary(roll_numbers, names): Creates a dictionary with roll numbers as keys and student names as values. Parameters: roll_numbers (list): List of roll numbers. names (list): List of student names. Returns: dict: Dictionary mapping roll numbers to student names. if len(roll_numbers) != len(names): raise ValueError(\\"The number of roll numbers must match the number of names\\") return dict(zip(roll_numbers, names))"},{"question":"Write a python function to find the number of nodes in a given binary tree. The function should return the total count of nodes in the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_nodes(root): Counts the number of nodes in a given binary tree. :param root: TreeNode, the root of the binary tree :return: int, total count of nodes in the tree if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a python function to perform string encryption.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using a Caesar cipher with the specified shift. result = [] for char in text: if char.isalpha(): shift_base = 65 if char.isupper() else 97 result.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to find two numbers in a list that sum up to a given target value. The function should return the indices of these two numbers in the list.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target value. num_map = {} # to store the indices of the numbers for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return None # return None if no pair is found that sums up to the target"},{"question":"Write a python function to check if the parentheses in a string have a valid ordering, considering that all characters other than parentheses are ignored. The function should return True if the order of parentheses is correct, otherwise False.","solution":"def valid_parentheses(s): Check if the parentheses in the string have a valid ordering. :param s: A string containing characters including parentheses. :return: True if the parentheses are in valid order, otherwise False. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to check if a given number is a power of 2. The function should take an integer as input and return True if the number is a power of 2, and False otherwise.","solution":"def is_power_of_two(n): Returns True if n is a power of 2, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a python function to shuffle a given array. The function should take an array as input and return a shuffled version of the array.","solution":"import random def shuffle_array(arr): Shuffles the given array. Parameters: arr (list): The array to shuffle Returns: list: The shuffled array shuffled = arr[:] random.shuffle(shuffled) return shuffled"},{"question":"Write a python function to find the maximum frequency of any digit in a given integer. For example, if the input is 112233, the function should return 3 as the digit '3' appears three times in a row.","solution":"def max_digit_frequency(n): Find the maximum frequency of any digit in the given integer. Args: n (int): The input integer. Returns: int: The maximum frequency of any digit. from collections import Counter # Convert the integer to its string representation str_n = str(n) # Count the frequency of each digit in the string digit_count = Counter(str_n) # Return the maximum frequency from the count dictionary return max(digit_count.values())"},{"question":"Write a python function to count the number of sublists that contain a specific element in a list.","solution":"def count_sublists_with_element(lst, element): Returns the count of sublists that contain the specific element. Parameters: lst (list): The list of sublists. element (any): The element to look for in the sublists. Returns: int: The count of sublists containing the specified element. count = 0 for sublist in lst: if element in sublist: count += 1 return count"},{"question":"Write a python function to find the maximum depth of a binary tree. The function should take a \`TreeNode\` object as its input, where each node has attributes \`value\` and \`left\`/\`right\` pointing to the left and right child nodes, respectively. The function should return an integer representing the maximum depth of the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree. if not root: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to find the number of 1s in the binary representation of a given number. For example, the number 5 in binary is 101, which has two 1s.","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of the given number n. return bin(n).count('1')"},{"question":"Write a python function to solve the following question: You have a \`products\` list, where each element is a tuple representing a product. The tuple contains the product name and its price. Your function should return a list of strings, where each string is a formatted product name and price. For example, given the list \`products = [('Laptop', 1200), ('Mouse', 25)]\`, the function should return \`['Laptop - 1200', 'Mouse - 25']\`.","solution":"def format_product_prices(products): Returns a list of formatted product names and prices. Args: products (list of tuples): Each tuple contains the product name (str) and its price (int/float). Returns: list of str: Formatted strings with product name and price. return [f\\"{name} - {price}\\" for name, price in products]"},{"question":"Write a python function to implement Dijkstra's algorithm on a directed graph.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm to find the shortest paths from the start node to all other nodes in a graph. Parameters: graph -- A dictionary where the keys are nodes and the values are dictionaries with neighboring nodes as keys and edge weights as values. start -- The starting node for Dijkstra's algorithm. Returns: A tuple containing two dictionaries: - The first dictionary has nodes as keys and their shortest distance from the start node as values. - The second dictionary has nodes as keys and their leading predecessor in the shortest path from the start node as values. # Priority queue to store nodes along with their current shortest distance from the start node priority_queue = [(0, start)] # (distance, node) # Dictionary to store the shortest distance from start to each node distances = {node: float('inf') for node in graph} distances[start] = 0 # Dictionary to store the leading predecessor in the shortest path from start to each node predecessors = {node: None for node in graph} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance predecessors[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) return distances, predecessors"},{"question":"Write a python function to check if a number is a palindrome number or not without using any additional memory for strings or arrays.","solution":"def is_palindrome_number(x): Returns True if x is a palindrome number, else returns False. if x < 0: return False original_x = x reversed_num = 0 while x != 0: digit = x % 10 reversed_num = reversed_num * 10 + digit x //= 10 return original_x == reversed_num"},{"question":"Write a python function to find the number of non-empty substrings within a string that consist only of uppercase letters. How should the function be named, and what should its input and output be?","solution":"def count_uppercase_substrings(s): Returns the number of non-empty substrings within a string that consist only of uppercase letters. count = 0 current_length = 0 for char in s: if char.isupper(): current_length += 1 count += current_length else: current_length = 0 return count"},{"question":"Write a python function to return the most frequent element in a list. If there are multiple elements with the same highest frequency, return the one that appears first in the list. If the list is empty, return None.","solution":"def most_frequent_element(lst): Returns the most frequent element in a list. If there are multiple elements with the same highest frequency, returns the one that appears first. If the list is empty, returns None. if not lst: return None frequency_dict = {} for element in lst: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 most_frequent = lst[0] max_frequency = frequency_dict[most_frequent] for element in lst: if frequency_dict[element] > max_frequency: most_frequent = element max_frequency = frequency_dict[element] return most_frequent"},{"question":"Write a python function to reverse the list while preserving the order of elements within the nested lists. For example, if the input is \`nested_list = [[1,2,3], [4,5,6], [7,8,9]]\`, the output should be \`reverse_nested_list = [[7,8,9], [4,5,6], [1,2,3]]\`.","solution":"def reverse_nested_list(nested_list): Reverses the outer list while preserving the order of elements within the nested lists. Parameters: nested_list (list): A list containing nested lists. Returns: list: A list with the order of the nested lists reversed. return nested_list[::-1]"},{"question":"Write a python function to compute the Fibonacci sequence, and provide a step-by-step explanation of the code.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth element. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. Parameters: n (int): The length of the sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth element. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] seq = [0, 1] for i in range(2, n): seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Write a python function to determine if an array of integers contains any duplicate values. If duplicates are found, return the duplicate values in a list. Otherwise, return an empty list.","solution":"def find_duplicates(arr): Returns a list of duplicate values in the input array. If no duplicates are found, returns an empty list. duplicates = [] seen = set() for num in arr: if num in seen and num not in duplicates: duplicates.append(num) seen.add(num) return duplicates"},{"question":"Write a python function to find the number of distinct prime factors of a given number. For example, the number 12 has prime factors 2, 2, and 3, so it has 2 distinct prime factors.","solution":"def count_distinct_prime_factors(n): Returns the number of distinct prime factors of the given number n. prime_factors = set() factor = 2 while factor * factor <= n: while (n % factor) == 0: prime_factors.add(factor) n //= factor factor += 1 if n > 1: prime_factors.add(n) return len(prime_factors)"},{"question":"Write a python function to check if a given list of integers contains a subsequence that sums to a target value.","solution":"def has_subsequence_with_sum(nums, target): Returns True if there exists a subsequence in nums that sums to target, otherwise False. def find_subsequence(index, current_sum): if current_sum == target: return True if index == len(nums): return False return find_subsequence(index + 1, current_sum + nums[index]) or find_subsequence(index + 1, current_sum) return find_subsequence(0, 0)"},{"question":"Write a python function to find the smallest number in a list of numbers. The list will contain integers and may include both positive and negative numbers.","solution":"def find_smallest_number(numbers): Returns the smallest number in a list of numbers. :param numbers: List of integers :return: The smallest integer in the list if not numbers: raise ValueError(\\"The list cannot be empty.\\") return min(numbers)"},{"question":"Write a python function to check if a given list of integers contains a specific integer \`x\`. The function should return the index of \`x\` if it exists in the list, and \`-1\` otherwise. You should also include a simple test case to verify your function.","solution":"def find_index(lst, x): Returns the index of x in list lst if it exists, otherwise returns -1. Parameters: lst (list): A list of integers. x (int): The integer to search for in the list. Returns: int: The index of x if it is found in lst, otherwise -1. try: return lst.index(x) except ValueError: return -1"},{"question":"Write a python function to compare strings and find the longest common prefix of two input strings.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix of two input strings. min_length = min(len(str1), len(str2)) prefix = \\"\\" for i in range(min_length): if str1[i] == str2[i]: prefix += str1[i] else: break return prefix"},{"question":"Write a python function to compute the Fibonacci sequence up to a given number n. The function should return a list of Fibonacci numbers up to n (inclusive if n itself is a Fibonacci number). The function should be efficient and avoid redundant calculations.","solution":"def fibonacci_sequence(n): Compute the Fibonacci sequence up to a given number n (inclusive if n itself is a Fibonacci number). Parameters: n (int): The upper limit for the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to n. if n < 0: return [] fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > n: break fib_sequence.append(next_fib) if n == 0: return [0] elif n == 1: return fib_sequence[:2] else: return fib_sequence"},{"question":"Write a python function to find the maximum depth of a binary tree. The function should take the root node of a binary tree as input and return the maximum depth calculated. The binary tree is represented using a class where each node contains a value and pointers to its left and right children.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree. if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to rotate an array. The function should take the array to be rotated, the starting index, and the ending index. The rotation should be in such a manner that the elements from the starting index to the ending index are rotated one position to the right. If the starting index is greater than the ending index, the function should return the array as is.","solution":"def rotate_array(arr, start, end): Rotates the section of array from start to end indices one position to the right. If start index is greater than end index, returns the array as is. if start > end: return arr if start < 0 or end >= len(arr): raise IndexError(\\"start or end index is out of bounds\\") last_element = arr[end] for i in range(end, start, -1): arr[i] = arr[i - 1] arr[start] = last_element return arr"},{"question":"Write a python function to find the length of the longest contiguous subarray with at most two different characters.","solution":"def longest_subarray_with_two_distinct_characters(s): Returns the length of the longest contiguous subarray with at most two different characters. :param s: A string :return: An integer representing the length of the longest subarray with at most two different characters if not s: return 0 left = 0 max_length = 0 char_count = {} for right in range(len(s)): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a python function to check if a given number is a perfect power.","solution":"import math def is_perfect_power(n): Returns True if n is a perfect power, otherwise False. A number n is a perfect power if there exist positive integers x and k such that n = x^k. if n < 2: return False max_base = int(math.sqrt(n)) for base in range(2, max_base + 1): power = 2 # Start with the square of base while (result := base ** power) <= n: if result == n: return True power += 1 return False"},{"question":"Write a python function to remove duplicate characters from a given string while preserving the order of characters. Use sets for this task. Sets inherently remove duplicates and maintain order since Python 3.7.","solution":"def remove_duplicates(input_string): Removes duplicate characters from the given string while preserving the order of characters. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to reverse an integer. However, if the reversed integer overflows, return 0. An integer overflows if it is less than -2^31 or greater than 2^31 - 1.","solution":"def reverse_integer(x): Reverses an integer. If the reversed integer overflows, returns 0. sign = -1 if x < 0 else 1 x = abs(x) reversed_x = int(str(x)[::-1]) * sign if reversed_x < -(2**31) or reversed_x > 2**31 - 1: return 0 return reversed_x"},{"question":"Write a python function to find the first repeating element in an array. The array can contain integers and has n elements. If there is no repeating element, return -1.","solution":"def first_repeating_element(arr): Finds the first repeating element in an array. If there is no repeating element, returns -1. :param arr: List of integers :return: The first repeating integer or -1 if no repeating element exists seen = {} for index, value in enumerate(arr): if value in seen: return value else: seen[value] = index return -1"},{"question":"Write a python function to sort a list of tuples where each tuple contains a name and an integer. The function should sort the list in descending order based on the integer, and then by ascending order of the string if the integers are the same.","solution":"def sort_tuples(tuples_list): Sorts a list of tuples (name, integer) in descending order based on the integer, and by ascending order of the string if the integers are the same. :param tuples_list: List[Tuple[str, int]] :return: List[Tuple[str, int]] return sorted(tuples_list, key=lambda x: (-x[1], x[0]))"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a 2D array (matrix). This function should have a time complexity of O(n*m), where n is the number of rows and m is the number of columns in the matrix. You can vary the position of the subarray but all elements must be from the same row or column.","solution":"def max_sum_subarray_2d(matrix): def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_sum = float('-inf') rows, cols = len(matrix), len(matrix[0]) # Check each row for row in matrix: max_sum = max(max_sum, max_subarray_sum(row)) # Check each column for col in range(cols): col_array = [matrix[row][col] for row in range(rows)] max_sum = max(max_sum, max_subarray_sum(col_array)) return max_sum"},{"question":"Write a python function to find the number of occurrences of a given value in a nested list using recursion.","solution":"def count_occurrences(nested_list, value): Returns the number of occurrences of 'value' in 'nested_list'. Args: nested_list (list): A list, potentially nested, containing elements. value: The value to count occurrences of. Returns: int: The count of occurrences of 'value' in 'nested_list'. count = 0 for element in nested_list: if isinstance(element, list): count += count_occurrences(element, value) else: if element == value: count += 1 return count"},{"question":"Write a python function to calculate the factorial of a number using iterative approach. The function should handle both positive and zero values correctly.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to count the number of elements in a given list. How can I test this function with an example list?","solution":"def count_elements(lst): Returns the number of elements in the given list. return len(lst)"},{"question":"Write a python function to reverse a stack using recursion. The function should take a stack as input and return the reversed stack without using any additional data structures like lists or arrays.","solution":"def reverse_stack(stack): Reverses a stack using recursion. Parameters: stack (list): A list representing a stack where the last element is the top. Returns: list: The reversed stack. if len(stack) == 0: return [] # Pop the top element top = stack.pop() # Reverse the remaining stack reversed_stack = reverse_stack(stack) # Insert the top element at the bottom of the reversed stack insert_at_bottom(reversed_stack, top) return reversed_stack def insert_at_bottom(stack, item): Inserts an element at the bottom of a stack using recursion. Parameters: stack (list): A list representing a stack where the last element is the top. item: The element to be inserted at the bottom. if len(stack) == 0: stack.append(item) else: # Pop all elements and insert the item at the bottom top = stack.pop() insert_at_bottom(stack, item) stack.append(top)"},{"question":"Write a python function to convert temperatures in Celsius to Fahrenheit. Fahrenheit to Celsius.","solution":"def celsius_to_fahrenheit(celsius): Converts temperature from Celsius to Fahrenheit. :param celsius: Temperature in Celsius :return: Temperature in Fahrenheit. return celsius * 9 / 5 + 32 def fahrenheit_to_celsius(fahrenheit): Converts temperature from Fahrenheit to Celsius. :param fahrenheit: Temperature in Fahrenheit :return: Temperature in Celsius. return (fahrenheit - 32) * 5 / 9"},{"question":"Write a python function to generate a Fibonacci sequence up to n terms. What are some of the potential pitfalls when implementing this function? Do you have any alternate solutions or optimizations?","solution":"def fibonacci(n): Generate a Fibonacci sequence up to n terms. :param n: Number of terms in the Fibonacci sequence to generate. Must be a positive integer. :return: A list containing the Fibonacci sequence up to n terms. if n <= 0: raise ValueError(\\"n must be a positive integer\\") sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to generate a list of even numbers between two given integers, inclusive. The function should return the list in ascending order. If the first number is greater than the second number, the function should return an empty list.","solution":"def generate_even_numbers(start, end): Generates a list of even numbers between two given integers, inclusive. If the first number is greater than the second number, returns an empty list. Args: start (int): The starting integer. end (int): The ending integer. Returns: list: A list of even numbers between start and end, inclusive. if start > end: return [] return [num for num in range(start, end + 1) if num % 2 == 0]"},{"question":"Write a python function to reverse a given polynomial represented as a list. The polynomial is represented in the form of a list where the index of the list represents the exponent of x and the value at that index represents the coefficient of that exponent. For example, the list \`[3, 2, 1]\` represents the polynomial \`3 + 2x + 1x^2\`. The function should return a new list representing the reversed polynomial.","solution":"def reverse_polynomial(poly): Reverses the given polynomial represented as a list. The index of the list represents the exponent of x and the value at that index represents the coefficient of that exponent. Parameters: poly (list of int): The input polynomial list. Returns: list of int: The reversed polynomial list. return poly[::-1]"},{"question":"Write a python function to validate if a string is a valid file extension. The function should take two parameters: the filename and the valid extension list. It should return True if the file extension is valid, and False otherwise.","solution":"def is_valid_extension(filename, valid_extensions): Validates if the file extension of the given filename is in the valid_extensions list. Args: filename (str): The name of the file to validate. valid_extensions (list): A list of valid file extensions. Returns: bool: True if the file extension is valid, False otherwise. if not isinstance(valid_extensions, list) or not all(isinstance(ext, str) for ext in valid_extensions): raise ValueError(\\"valid_extensions must be a list of strings\\") file_extension = filename.split('.')[-1] return file_extension in valid_extensions"},{"question":"Write a python function to find the nth Fibonacci number using recursion. The function should be efficient and handle large values of n. To achieve this, use memoization to store previously computed Fibonacci numbers. This will prevent the exponential time complexity associated with naive recursion.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to extract website content from a given URL. How can I use a library like BeautifulSoup to parse HTML and retrieve data?","solution":"import requests from bs4 import BeautifulSoup def extract_website_content(url): Extracts content from a website given its URL. Parameters: - url (str): The URL of the website to extract content from. Returns: - str: The extracted content of the website. response = requests.get(url) response.raise_for_status() # Raise an HTTPError if the HTTP request returned an unsuccessful status code soup = BeautifulSoup(response.content, 'html.parser') return soup.get_text()"},{"question":"Write a python function to find the sum of all numbers in a list using a loop.","solution":"def sum_list(numbers): Returns the sum of all numbers in the list. Parameters: numbers (list): A list of numeric values Returns: int/float: The sum of all numbers in the list total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to determine the quickest way to traverse from one point to another on a grid. Use dijkstra's algorithm with a priority queue to solve this problem. Here's a sample grid.","solution":"import heapq def dijkstra(grid, start, end): rows, cols = len(grid), len(grid[0]) distances = [[float('inf')] * cols for _ in range(rows)] distances[start[0]][start[1]] = 0 pq = [(0, start[0], start[1])] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while pq: current_dist, x, y = heapq.heappop(pq) if (x, y) == end: return current_dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: new_dist = current_dist + grid[nx][ny] if new_dist < distances[nx][ny]: distances[nx][ny] = new_dist heapq.heappush(pq, (new_dist, nx, ny)) return float('inf') # return infinity if there's no path"},{"question":"Write a python function to filter out all the None values from a list and return the updated list.","solution":"def filter_none_values(lst): Returns a list with all None values removed. :param lst: List of elements :return: List with None values removed return [x for x in lst if x is not None]"},{"question":"Write a python function to reverse the digits of a given integer. For example, if the input is -123, the output should be -321. If the reversed integer overflows (i.e., it is outside the range [-2^31, 2^31 - 1]), return 0.","solution":"def reverse_integer(x): Reverse the digits of a given integer. If the reversed integer overflows, return 0. INT_MIN, INT_MAX = -2**31, 2**31 - 1 # Define the 32-bit integer range sign = -1 if x < 0 else 1 x *= sign reversed_x = 0 while x != 0: pop = x % 10 x //= 10 if (reversed_x > INT_MAX // 10 or (reversed_x == INT_MAX // 10 and pop > INT_MAX % 10)): return 0 # Overflow so return 0 reversed_x = reversed_x * 10 + pop return sign * reversed_x"},{"question":"Write a python function to determine if two strings are permutations of each other. Two strings are permutations if they contain the same characters with the same frequency.","solution":"def are_permutations(str1, str2): Determines if two strings are permutations of each other. :param str1: First string to compare :param str2: Second string to compare :return: True if the strings are permutations of each other, False otherwise return sorted(str1) == sorted(str2)"},{"question":"Write a python function to solve the LeetCode problem 2: Add Two Numbers. The function should take two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Adds two numbers represented by linked lists. Parameters: l1 (ListNode): First linked list l2 (ListNode): Second linked list Returns: ListNode: A linked list representing the sum dummy_head = ListNode() current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Write a python function to calculate the roots of a quadratic equation ax^2 + bx + c = 0 using the quadratic formula. The function should take three parameters (a, b, c) for the coefficients of the quadratic equation and return the roots of the equation. If the roots are complex, the function should return them as complex numbers. The function also should handle cases where a is zero and raise an exception in such cases.","solution":"import cmath def quadratic_roots(a, b, c): Calculates the roots of the quadratic equation ax^2 + bx + c = 0. Parameters: - a: coefficient of x^2 - b: coefficient of x - c: constant term Returns: - roots: A tuple containing either two real roots or two complex roots. Raises: - ValueError: If \`a\` is zero, indicating it's not a quadratic equation. if a == 0: raise ValueError(\\"Coefficient 'a' must not be zero for a quadratic equation.\\") # Calculate the discriminant discriminant = b**2 - 4 * a * c # Calculate the two roots using quadratic formula root1 = (-b + cmath.sqrt(discriminant)) / (2 * a) root2 = (-b - cmath.sqrt(discriminant)) / (2 * a) return (root1, root2)"},{"question":"Write a python function to merge two sorted linked lists and return it as a sorted linked list. The function should use recursion to achieve this.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. if not l1: return l2 if not l2: return l1 if l1.val < l2.val: l1.next = mergeTwoLists(l1.next, l2) return l1 else: l2.next = mergeTwoLists(l1, l2.next) return l2"},{"question":"Write a python function to find the first non-repeating character in a string. If no such character exists, return an underscore. For example, in the string \\"aabbc\\", the first non-repeating character is 'c'.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string. If no such character exists, returns an underscore. char_frequency = {} for char in s: if char in char_frequency: char_frequency[char] += 1 else: char_frequency[char] = 1 for char in s: if char_frequency[char] == 1: return char return '_'"},{"question":"Write a python function to count the number of zeros in a binary number representation of a given integer.","solution":"def count_zeros_in_binary(n): Returns the count of zeros in the binary representation of a given integer n. # Convert number to binary, remove the '0b' prefix and count the zeros return bin(n).count('0') - 1 # subtract 1 to exclude the '0b' prefix"},{"question":"Write a python function to sort a list of dictionaries by a specific dictionary key. The list of dictionaries could represent items in a store. Each dictionary contains details about an item such as name, price, and category. The function should accept parameters for the list of dictionaries and the key by which to sort the items. The function should then return the sorted list of dictionaries.","solution":"def sort_items(items, sort_key): Sorts a list of dictionaries by a specific key. Parameters: items (list): A list of dictionaries where each dictionary represents an item. sort_key (str): The key by which to sort the items. Returns: list: The sorted list of dictionaries. return sorted(items, key=lambda x: x[sort_key])"},{"question":"Write a python function to check if the sum of first n natural numbers is divisible by n.","solution":"def is_sum_of_first_n_natural_numbers_divisible_by_n(n): Returns True if the sum of the first n natural numbers is divisible by n, otherwise False. # The sum of the first n natural numbers is given by the formula: n * (n + 1) / 2 sum_of_n = n * (n + 1) // 2 # Check if this sum is divisible by n return sum_of_n % n == 0"},{"question":"Write a python function to generate a list of the first n Fibonacci numbers using iteration. The function should be named \`generate_fibonacci_sequence\` and take an integer \`n\` as its parameter. The function should return a list containing the first \`n\` Fibonacci numbers.","solution":"def generate_fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] for i in range(2, n): next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) return fibonacci_sequence"},{"question":"Write a python function to reverse an integer, but remember to handle possible integer overflows (both positive and negative).","solution":"def reverse_integer(n): Reverses the digits of an integer, handling possible overflows. INT_MAX = 2**31 - 1 INT_MIN = -2**31 negative = n < 0 n = abs(n) reversed_num = 0 while n != 0: digit = n % 10 n = n // 10 # Check for overflow if reversed_num > (INT_MAX - digit) // 10: return 0 reversed_num = reversed_num * 10 + digit if negative: reversed_num = -reversed_num return reversed_num"},{"question":"Write a python function to swap the first and last elements in a list. How can I ensure my function works for any list, including empty lists or lists with a single element?","solution":"def swap_first_and_last(lst): Swaps the first and last elements of the list. If the list is empty or has only one element, it remains unchanged. Parameters: lst (list): The list to swap elements of. Returns: list: The list with first and last elements swapped. if len(lst) > 1: lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Write a python function to find the maximum subarray sum in a one-dimensional numerical array. Implement a solution using Kadane's algorithm, which efficiently finds the maximum contiguous sum of a subarray within a one-dimensional numerical array. The function should take an array as an input and return the maximum sum.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray using Kadane's algorithm. Parameters: arr (list of int): The input array. Returns: int: The maximum sum of the contiguous subarray. max_sum = float('-inf') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to implement the insertion sort algorithm. The function should take a list of integers as input and return the list sorted in ascending order.","solution":"def insertion_sort(arr): Implements the insertion sort algorithm to sort a list of integers in ascending order. Args: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. for i in range(1, len(arr)): key = arr[i] j = i-1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to check if a string is a palindrome, considering only alphanumeric characters and ignoring cases. Here is a sample string: \\"A man, a plan, a canal, Panama!\\".","solution":"def is_palindrome(s): Check if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. import re # Remove non-alphanumeric characters and convert the string to lowercase sanitized = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the sanitized string is equal to its reverse return sanitized == sanitized[::-1]"},{"question":"Write a python function to sort a list of dictionaries by a specific key. The function should take two arguments: the list of dictionaries and the key by which the list should be sorted. For example, if the list of dictionaries is \`[{\\"name\\": \\"Alice\\", \\"age\\": 25}, {\\"name\\": \\"Bob\\", \\"age\\": 20}]\` and the sorting key is \`\\"age\\"\`, the function should return \`[{\\"name\\": \\"Bob\\", \\"age\\": 20}, {\\"name\\": \\"Alice\\", \\"age\\": 25}]\`.","solution":"def sort_dicts_by_key(dicts_list, key): Sorts a list of dictionaries by a specific key. Args: dicts_list (list): A list of dictionaries. key (str): The key by which the list should be sorted. Returns: list: List of dictionaries sorted by the specified key. return sorted(dicts_list, key=lambda x: x[key])"},{"question":"Write a python function to count the number of times a given character appears in a string. The function should take two parameters: the string and the character to search for. The function should return the count of the character's appearance in the string.","solution":"def count_char_occurrences(input_string, char_to_find): Returns the number of times the character \`char_to_find\` appears in \`input_string\`. Parameters: input_string (str): The string to search in. char_to_find (str): The character to search for. Returns: int: The count of the character's appearance in the string. return input_string.count(char_to_find)"},{"question":"Write a python function to implement a sliding window maximum. The function should take two parameters: \`nums\` which is a list of integers, and \`k\` which is the size of the sliding window. The function should return a list of the maximum numbers of each window in the array. Assume the list \`nums\` contains at least \`k\` numbers.","solution":"from collections import deque def sliding_window_maximum(nums, k): Returns a list of the maximum numbers of each window of size k in the array nums. if not nums or k <= 0: return [] dq = deque() max_values = [] for i, num in enumerate(nums): # Remove indexes that are out of the current window if dq and dq[0] < i - k + 1: dq.popleft() # Remove elements from the deque that are less than the current element while dq and nums[dq[-1]] < num: dq.pop() # Add the current element at the back of the deque dq.append(i) # The front of the deque contains the index of the maximum element for the current window if i >= k - 1: max_values.append(nums[dq[0]]) return max_values"},{"question":"Write a python function to implement a queue using two stacks. A queue follows the First In First Out (FIFO) principle, while a stack follows the Last In First Out (LIFO) principle. Your task is to design a queue in Python using two stacks and provide enqueuing and dequeuing operations.","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, item): self.stack1.append(item) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: raise IndexError(\\"dequeue from empty queue\\") return self.stack2.pop() def is_empty(self): return not self.stack1 and not self.stack2"},{"question":"Write a python function to create a nested list based on the given list of strings, where each string represents a path in a directory. The function should group the paths by their common prefix up to the first difference and return the nested list.","solution":"def create_nested_list(paths): Converts a list of directory paths into a nested list structure. Each path is split by '/' and then nested according to their directories. def insert_path(tree, path_parts): if not path_parts: return for node in tree: if node[0] == path_parts[0]: insert_path(node[1], path_parts[1:]) break else: new_node = (path_parts[0], []) tree.append(new_node) insert_path(new_node[1], path_parts[1:]) tree = [] for path in paths: path_parts = path.split('/') insert_path(tree, path_parts) return tree"},{"question":"Write a python function to calculate the factorial of a number. The function should handle the case where the input is negative by raising a ValueError. Additionally, the function should handle large numbers by returning the number in scientific notation using Python's built-in \`format()\` function with the \`'{:e}'\` format specifier.","solution":"def factorial(n): Calculate the factorial of a non-negative integer n. Return the factorial in scientific notation for large values. Raise ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") def factorial_recursive(m): if m == 0 or m == 1: return 1 return m * factorial_recursive(m - 1) result = factorial_recursive(n) if result > 1e6: return format(result, 'e') return result"},{"question":"Write a python function to find the binary representation of a given decimal number and return that as a string. You should use a loop to convert the number to binary and handle both positive and negative numbers.","solution":"def decimal_to_binary(num): Returns the binary representation of a given decimal number as a string. if num == 0: return \\"0\\" is_negative = num < 0 num = abs(num) binary_digits = [] while num > 0: binary_digits.append(str(num % 2)) num //= 2 binary_digits.reverse() binary_string = ''.join(binary_digits) return '-' + binary_string if is_negative else binary_string"},{"question":"Write a python function to find the determinant of a matrix. If the matrix is not square, return an appropriate error message.","solution":"def determinant(matrix): Computes the determinant of a square matrix. :param matrix: A list of lists representing the matrix :return: The determinant of the matrix or an error message if the matrix is not square # Check if the matrix is square if len(matrix) == 0 or any(len(row) != len(matrix) for row in matrix): return \\"Error: Matrix must be square\\" # Base cases for 1x1 and 2x2 matrices if len(matrix) == 1: return matrix[0][0] elif len(matrix) == 2: return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] # Recursive definition for nxn matrices det = 0 for c in range(len(matrix)): minor_matrix = [row[:c] + row[c+1:] for row in (matrix[:0] + matrix[1:])] det += ((-1) ** c) * matrix[0][c] * determinant(minor_matrix) return det"},{"question":"Write a python function to detect if a string s contains a rotation of the substring \\"abc\\" within it. The function should return True if such a rotation exists, and False otherwise. Consider rotations as cyclic permutations of the string, e.g., \\"abc\\" can be rotated to \\"bca\\" or \\"cab\\".","solution":"def contains_rotation_of_abc(s): Checks if the input string contains any rotation of the substring \\"abc\\". Parameters: s (str): The input string to check. Returns: bool: True if any rotation of \\"abc\\" is found, False otherwise. rotations = [\\"abc\\", \\"bca\\", \\"cab\\"] for rotation in rotations: if rotation in s: return True return False"},{"question":"Write a python function to find the two numbers that are closest to a given target number in a list of numbers. For this problem, assume that there are always exactly two unique numbers in the list that are closest to the target.","solution":"def find_two_closest_numbers(nums, target): Finds two numbers in the list that are closest to the given target. if len(nums) < 2: raise ValueError(\\"The list must contain at least two numbers\\") nums = sorted(nums, key=lambda x: abs(x - target)) return nums[:2]"},{"question":"Write a python function to find the kth smallest element in an array using sorting.","solution":"def kth_smallest_element(arr, k): Returns the kth smallest element in the array arr using sorting. :param arr: List of integers :param k: The kth position (1-based index) :return: The kth smallest element if k < 1 or k > len(arr): raise ValueError(\\"k is out of the bounds of the array length\\") sorted_arr = sorted(arr) return sorted_arr[k - 1]"},{"question":"Write a python function to find the length of the longest common suffix of two strings.","solution":"def longest_common_suffix(str1, str2): Returns the length of the longest common suffix of two strings. if not str1 or not str2: return 0 i, j = len(str1) - 1, len(str2) - 1 common_suffix_length = 0 while i >= 0 and j >= 0 and str1[i] == str2[j]: common_suffix_length += 1 i -= 1 j -= 1 return common_suffix_length"},{"question":"Write a python function to find the number of lines in a file.","solution":"def count_lines_in_file(file_path): Counts the number of lines in a given file. Parameters: file_path (str): The path to the file. Returns: int: The number of lines in the file. with open(file_path, 'r', encoding='utf-8') as file: lines = file.readlines() return len(lines)"},{"question":"Write a python function to solve the two-sum problem.","solution":"def two_sum(nums, target): Given an array of integers 'nums' and an integer 'target', return indices of the two numbers such that they add up to 'target'. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i # If no solution is found, although per problem there always is one: return []"},{"question":"Write a python function to print the all prime numbers up to a given number using the Sieve of Eratosthenes algorithm. The function should have one parameter, \`n\`, which is the upper limit of the range to find prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Write a python function to reverse the elements of an array without using the built-in reverse() function or slicing techniques. The function should modify the array in-place.","solution":"def reverse_array(arr): Reverses the elements of the array in-place without using the built-in reverse() function or slicing techniques. start = 0 end = len(arr) - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"Write a python function to find a given number in the matrix by comparing each element with the target. If the target is found return the position of the target in the matrix, otherwise return -1.","solution":"def find_number_in_matrix(matrix, target): Finds the target in the given matrix and returns its position. Parameters: matrix (list of list of int): The matrix to search. target (int): The target number to find. Returns: tuple: The position (row, column) of the target in the matrix, or -1 if not found. for i, row in enumerate(matrix): for j, elem in enumerate(row): if elem == target: return (i, j) return -1"},{"question":"Write a python function to print a message in the box. The box should have a border of asterisks (*) and the message should be centered within the box. The function should take the message as a parameter and the width of the box as an argument.","solution":"def print_message_in_box(message, width): Prints a message inside a box of specified width. Args: message (str): The message to be printed inside the box. width (int): The width of the box. Prints the message inside the box. if width < len(message) + 4: raise ValueError(\\"Width must be at least 4 characters greater than the message length\\") top_bottom_border = '*' * width padding = (width - len(message) - 2) // 2 middle_line = '*' + ' ' * padding + message + ' ' * (width - len(message) - 2 - padding) + '*' print(top_bottom_border) print(middle_line) print(top_bottom_border)"},{"question":"Write a python function to reverse a list. Can you also provide a brief explanation of how the function works?","solution":"def reverse_list(lst): Returns a new list that is the reverse of the input list. Parameters: lst (list): The list to be reversed. Returns: list: A new list that contains the elements of the input list in reverse order. return lst[::-1] # Explanation: # The function uses Python's slicing feature with the syntax lst[start:stop:step]. # By omitting 'start' and 'stop' and using a step of -1, the slicing [::-1] # effectively creates a new list that is the reverse of the original one."},{"question":"Write a python function to determine the minimum path sum in a grid from the top left to the bottom right. You can only move right or down at any point in time. The grid consists of non-negative integers.","solution":"def min_path_sum(grid): Returns the minimum path sum in a grid from the top left to the bottom right. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Initialize dp table with the same dimensions as grid dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize first row for col in range(1, cols): dp[0][col] = dp[0][col - 1] + grid[0][col] # Initialize first column for row in range(1, rows): dp[row][0] = dp[row - 1][0] + grid[row][0] # Fill in the rest of the dp table for row in range(1, rows): for col in range(1, cols): dp[row][col] = min(dp[row - 1][col], dp[row][col - 1]) + grid[row][col] return dp[rows - 1][cols - 1]"},{"question":"Write a python function to calculate the product of two matrices using the concept of nested loops.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B using nested loops. Parameters: A (list of list of int): A matrix where each element is a list representing a row. B (list of list of int): A matrix where each element is a list representing a row. Returns: list of list of int: The resulting matrix product of A and B. Raises: ValueError: If the number of columns in A does not equal the number of rows in B. # Get the dimensions of the matrices rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) # Ensure the user cannot multiply the matrices if the dimensions do not align if cols_A != rows_B: raise ValueError(\\"The number of columns in A must match the number of rows in B.\\") # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform the matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to convert an integer to a hexadecimal string representation, prefixed with \\"0x\\", using recursion. For example, converting 10 should return \\"0xa\\", and converting 255 should return \\"0xff\\".","solution":"def int_to_hex(n): Converts an integer to a hexadecimal string representation prefixed with '0x' using recursion. hex_chars = \\"0123456789abcdef\\" def recursive_convert(n): if n < 16: return hex_chars[n] else: return recursive_convert(n // 16) + hex_chars[n % 16] if n == 0: return \\"0x0\\" else: return \\"0x\\" + recursive_convert(n)"},{"question":"Write a python function to find the lowest common ancestor (LCA) of two given nodes in a Binary Search Tree (BST) by iterative method.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_lca_iterative(root, p, q): Finds the lowest common ancestor (LCA) of two given nodes in a Binary Search Tree (BST) iteratively. :param root: TreeNode, the root of the BST :param p: TreeNode, the first given node :param q: TreeNode, the second given node :return: TreeNode, the LCA node while root: # If both p and q are smaller than root, LCA lies in left if p.value < root.value and q.value < root.value: root = root.left # If both p and q are greater than root, LCA lies in right elif p.value > root.value and q.value > root.value: root = root.right else: # We have found the split point, i.e. the LCA node return root"},{"question":"Write a python function to return the nth element in a Fibonacci sequence","solution":"def fibonacci(n): Returns the nth element in the Fibonacci sequence. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a python function to find the longest common substring between two strings. How can I improve the time complexity of this function?","solution":"def longest_common_substring(s1, s2): Returns the longest common substring between s1 and s2. If there are multiple substrings with the same maximum length, the function will return the one that appears first in s1. m, n = len(s1), len(s2) result = \\"\\" length = 0 dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > length: length = dp[i][j] result = s1[i - dp[i][j]:i] else: dp[i][j] = 0 return result"},{"question":"Write a python function to remove duplicates from a list and return the list. The function should also ensure the order of the elements is preserved.","solution":"def remove_duplicates(input_list): Removes duplicates from the list while preserving the order of elements. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the minimum sum of a subarray given a list of integers.","solution":"def min_subarray_sum(arr): Returns the minimum sum of a subarray from the given list of integers. if not arr: return 0 min_ending_here = float('inf') min_so_far = float('inf') for num in arr: min_ending_here = min(num, min_ending_here + num) min_so_far = min(min_so_far, min_ending_here) return min_so_far"},{"question":"Write a python function to find the number of occurrences of a specific number in a 2D list (matrix).","solution":"def count_number_in_matrix(matrix, number): Returns the number of occurrences of a specific \`number\` in a 2D list \`matrix\`. Parameters: matrix (list of list of int): The 2D list (matrix) to search in. number (int): The number to count the occurrences of. Returns: int: The number of occurrences of \`number\` in the matrix. count = 0 for row in matrix: count += row.count(number) return count"},{"question":"Write a python function to reverse a list in place without creating a new list. To achieve this, you should swap elements from the start and end of the list moving towards the center.","solution":"def reverse_list_in_place(lst): Reverses the given list in place without creating a new list. Args: lst (list): The list to be reversed. Returns: None: The list is reversed in place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to find the length of the last word in a string. The string contains only letters and spaces. By a word, we mean a maximal substring consisting of non-space characters.","solution":"def length_of_last_word(s): Returns the length of the last word in a string. The string contains only letters and spaces. By a word, we mean a maximal substring consisting of non-space characters. words = s.strip().split() if words: return len(words[-1]) return 0"},{"question":"Write a python function to find the largest continuous subarray sum. The function should return the maximum sum possible by summing up all the quantities of the selected continuous subarray. For example, if the array is [-2, 1, -3, 4, -1, 2, 1, -5, 4], the largest continuous subarray sum is [4, -1, 2, 1], which sums to 6.","solution":"def largest_continuous_subarray_sum(nums): Find the largest continuous subarray sum. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the missing number in an array containing n distinct numbers from 0 to n. The array is unsorted.","solution":"def find_missing_number(arr): Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array. :param arr: List of distinct integers from 0 to n with one number missing. :return: The missing integer. n = len(arr) total_sum = (n * (n + 1)) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a python function to sort a list of dictionaries based on multiple attributes. Suppose there are two attributes to sort by, \\"age\\" and \\"name\\". The list is already sorted by \\"age\\", but we need to further sort it by \\"name\\" within each age group.","solution":"def sort_dicts(data): Sorts a list of dictionaries, primarily by 'age' and secondarily by 'name'. Parameters: data (list): A list of dictionaries, each containing 'age' and 'name' keys. Returns: list: A sorted list of dictionaries. return sorted(data, key=lambda x: (x['age'], x['name']))"},{"question":"Write a python function to calculate and return the area of the largest rectangle that can be formed in a histogram given the height of the bars in the histogram.","solution":"def largestRectangleArea(heights): Calculates the area of the largest rectangle that can be formed in a histogram. :param heights: List[int] - heights of the bars in the histogram. :return: int - area of the largest rectangle. max_area = 0 stack = [] for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) while stack: height = heights[stack.pop()] width = len(heights) if not stack else len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"Write a python function to find out the minimum and maximum numbers in a list. For example, if the list is [3, 4, 5, 1, 2], the function should return (1, 5) as the minimum and maximum values.","solution":"def find_min_and_max(numbers): Returns a tuple containing the minimum and maximum numbers from the given list. if not numbers: raise ValueError(\\"The list must not be empty\\") min_num = min(numbers) max_num = max(numbers) return (min_num, max_num)"},{"question":"Write a python function to sort a list of strings by their length, then sort the strings with the same length by their alphabetical order.","solution":"def sort_strings_by_length(strings): Sorts a list of strings by their length. If two strings have the same length, they will be sorted alphabetically. return sorted(strings, key=lambda s: (len(s), s))"},{"question":"Write a python function to count the number of pairs (i, j) such that arr[i] + arr[j] = target.","solution":"def count_pairs_with_sum(arr, target): Counts the number of pairs (i, j) such that arr[i] + arr[j] = target. count = 0 seen = {} for num in arr: complement = target - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Write a python function to find the number of prime numbers less than a given number \`n\`.","solution":"def count_primes_less_than(n): Returns the number of prime numbers less than the given number n. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n, i): sieve[j] = False return sum(sieve)"},{"question":"Write a python function to find the number of unique permutations of a given string. To solve this, consider that the string may contain duplicate characters, and your function should handle these duplicates appropriately.","solution":"from math import factorial from collections import Counter def unique_permutations(s): Returns the number of unique permutations of the given string. char_count = Counter(s) denominator = 1 for count in char_count.values(): denominator *= factorial(count) return factorial(len(s)) // denominator"},{"question":"Write a python function to calculate the difference between the sum of squares and the square of the sum of the first n natural numbers. For example, for n=10, the sum of squares is 385 and the square of the sum is 3025, so the difference is 2640.","solution":"def difference_sum_squares_square_sum(n): Calculate the difference between the sum of the squares and the square of the sum of the first n natural numbers. :param n: The first n natural numbers :return: The difference between the sum of the squares and the square of the sum sum_of_squares = sum(i**2 for i in range(1, n+1)) square_of_sum = sum(range(1, n+1))**2 return square_of_sum - sum_of_squares"},{"question":"Write a python function to remove duplicates from an array in place. The function should return the length of the new array with unique values.","solution":"def remove_duplicates(nums): Removes duplicates from the given list of numbers in place and returns the length of the list with unique values. Parameters: nums (List[int]): A list of integers that may contain duplicates. Returns: int: The length of the list after removing duplicates. if not nums: return 0 # Pointer to the place where the next unique element should go write_index = 1 for read_index in range(1, len(nums)): if nums[read_index] != nums[read_index - 1]: nums[write_index] = nums[read_index] write_index += 1 # Optionally, we could slice the list to contain only the unique values # nums[:] = nums[:write_index] return write_index"},{"question":"Write a python function to return all indices of a given integer in a list. For example, given the list \`[1, 2, 3, 4, 2, 5, 2, 6]\` and the integer \`2\`, the function should return the indices \`[1, 4, 6]\`.","solution":"def find_indices(lst, target): Returns a list of indices where the target integer is found in the given list. :param lst: List of integers. :param target: Integer to find in the list. :return: List of indices where the target integer is found. return [i for i, x in enumerate(lst) if x == target]"},{"question":"Write a python function to calculate the factorial of a given number, \`n\`. The function should be able to handle both positive and negative integers. However, it should raise a \`ValueError\` if the input is not an integer.","solution":"def factorial(n): Returns the factorial of a given number n. Raises ValueError if n is not an integer. For negative integers, returns None. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: return None if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find all prime numbers up to a given number \`n\`. Implement this function using the Sieve of Eratosthenes algorithm, which is an efficient way to find all primes smaller than \`n\` when \`n\` is smaller than 10 million.","solution":"def sieve_of_eratosthenes(n): Return a list of all prime numbers up to (and possibly including) n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper boundary of the range to look for primes (inclusive). Returns: List[int]: A list of prime numbers up to n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(n + 1) if is_prime[i]]"},{"question":"Write a python function to print a triangle of a specified size using asterisks (*).","solution":"def print_triangle(n): Prints a triangle of size n using asterisks (*). Args: n (int): The size of the triangle in terms of its height. Returns: None for i in range(1, n + 1): print(' ' * (n - i) + '*' * (2 * i - 1))"},{"question":"Write a python function to reverse the elements of an array without reversing the signs of the numbers. For example, if the input is [1, -2, 3, -4, 5], the output should be [5, -4, 3, -2, 1].","solution":"def reverse_with_signs(arr): Reverses the elements of the array without reversing the signs of the numbers. :param arr: List of integers with some potentially negative elements :return: List of integers with elements reversed, original signs preserved n = len(arr) reversed_arr = [0] * n for i in range(n): reversed_arr[i] = arr[n - 1 - i] if arr[n - 1 - i] >= 0 else arr[n - 1 - i] return reversed_arr"},{"question":"Write a python function to calculate the sum of the cubes of all the odd numbers in a given list.","solution":"def sum_of_odd_cubes(numbers): Calculate the sum of the cubes of all odd numbers in the input list. Parameters: numbers (list of int): A list of integers. Returns: int: The sum of the cubes of all the odd numbers. return sum(x ** 3 for x in numbers if x % 2 != 0)"},{"question":"Write a python function to check if a given list contains a specific number non-repeatedly. If such a number is found, return its index; otherwise, return -1.","solution":"def find_non_repeated_number_index(lst, num): Returns the index of the number in the list if it is not repeated, otherwise returns -1. if lst.count(num) == 1: return lst.index(num) return -1"},{"question":"Write a python function to solve the \\"Two Sum\\" problem. The Two Sum problem is a common interview question in which you are given an array of integers and a target integer. The goal is to find two numbers in the array that add up to the target and return their indices. If there is no solution, return an empty list.","solution":"def two_sum(nums, target): Finds two numbers in the array that add up to the target. Args: nums : List[int] - Input array of integers. target : int - The target integer. Returns: List[int] - Indices of the two numbers that add up to the target. Returns an empty list if no solution is found. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a python function to insert a new element into a sorted list while maintaining the sorted order. If the element is already present, it should be inserted at the beginning of the series of elements that are equal to the new one.","solution":"def insert_into_sorted_list(sorted_list, element): Inserts a new element into a sorted list while maintaining the sorted order. If the element is already present, it is inserted at the beginning of the series of elements that are equal to the new one. Parameters: sorted_list (list): A list of sorted elements. element: The element to insert into the sorted list. Returns: list: A new list with the element inserted maintaining the sorted order. # Find the position to insert the new element pos = 0 for idx in range(len(sorted_list)): if sorted_list[idx] >= element: pos = idx break else: pos = len(sorted_list) # Insert the element at the found position return sorted_list[:pos] + [element] + sorted_list[pos:]"},{"question":"Write a python function to remove duplicates from an array and return the count of unique elements.","solution":"def remove_duplicates(arr): Removes duplicates from the array and returns the count of unique elements. Parameters: arr (list): The input list from which duplicates need to be removed. Returns: int: Count of unique elements. unique_elements = set(arr) return len(unique_elements)"},{"question":"Write a python function to sort an array in ascending order without using the built-in sort() function.","solution":"def custom_sort(arr): Sorts an array in ascending order without using the built-in sort() function. Args: arr (list): The list of elements to be sorted. Returns: list: The sorted list in ascending order. for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: # Swap elements arr[i], arr[j] = arr[j], arr[i] return arr"},{"question":"Write a python function to sum the elements of two lists, list1 and list2. If the lists are not the same length, the function should return None.","solution":"def sum_lists(list1, list2): Returns a list containing the element-wise sum of list1 and list2. If the lists have different lengths, returns None. if len(list1) != len(list2): return None return [a + b for a, b in zip(list1, list2)]"},{"question":"Write a python function to validate an IPv4 address. The function should accept a string as input and return True if it is a valid IPv4 address, and False otherwise.","solution":"def is_valid_ipv4(ip): Validates if a given string is a valid IPv4 address. Args: ip (str): The IP address string to validate. Returns: bool: True if the IP address is valid, False otherwise. parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False if part != str(num): # to catch leading zeroes return False return True"},{"question":"Write a python function to remove duplicates from a list while preserving the order of elements. You should not use any additional data structures, such as sets, and aim for an optimal solution with a time complexity of O(n).","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the order of elements. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to return the value of nCr % P, where nCr is 'n choose r' and P is a prime number. The function should efficiently handle large values of n, r, and P up to 10^6, 10^6, and 10^9+7 respectively.","solution":"def mod_inverse(a, P): Returns the modular inverse of a under modulo P using Fermat's Little Theorem. P must be a prime number. return pow(a, P - 2, P) def nCr_mod_P(n, r, P): Returns the value of nCr % P, where nCr is 'n choose r' and P is a prime number. if r > n: return 0 if r == 0 or n == r: return 1 # Precompute factorials and modular inverses of factorials up to n fact = [1] * (n + 1) inv_fact = [1] * (n + 1) for i in range(2, n + 1): fact[i] = fact[i - 1] * i % P inv_fact[n] = mod_inverse(fact[n], P) for i in range(n - 1, 0, -1): inv_fact[i] = inv_fact[i + 1] * (i + 1) % P return fact[n] * inv_fact[r] % P * inv_fact[n - r] % P"},{"question":"Write a python function to invert the binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_tree(root): Inverts a binary tree (mirror image). Args: root (TreeNode): The root of the binary tree. Returns: TreeNode: The root of the inverted binary tree. if not root: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively invert the children if root.left: invert_tree(root.left) if root.right: invert_tree(root.right) return root"},{"question":"Write a python function to find the first, second, and third maximum in a list of integers (Int) without using any comparison operators.","solution":"def find_first_second_third_max(numbers): Find the first, second, and third maximum numbers in a list of integers. # Starting with very small values first_max = float('-inf') second_max = float('-inf') third_max = float('-inf') # Using a set to avoid duplicates unique_numbers = set(numbers) for num in unique_numbers: if num > first_max: third_max = second_max second_max = first_max first_max = num elif num > second_max: third_max = second_max second_max = num elif num > third_max: third_max = num return first_max, second_max, third_max"},{"question":"Write a python function to encrypt and decrypt a message using the Caesar Cipher.","solution":"def caesar_cipher_encrypt(plain_text, shift): Encrypts the plain_text using Caesar Cipher with the given shift. encrypted_text = [] for char in plain_text: if char.isalpha(): shift_base = 65 if char.isupper() else 97 encrypted_text.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: encrypted_text.append(char) return ''.join(encrypted_text) def caesar_cipher_decrypt(cipher_text, shift): Decrypts the cipher_text using Caesar Cipher with the given shift. return caesar_cipher_encrypt(cipher_text, -shift)"},{"question":"Write a python function to find the sum of the series 1^2 + 2^2 + 3^2 ... N^2","solution":"def sum_of_squares(N): Returns the sum of the squares of the first N natural numbers. The formula for the sum of squares is: N(N+1)(2N+1)/6 return N * (N + 1) * (2 * N + 1) // 6"},{"question":"Write a python function to find all the prime numbers below a given number \`n\` and return a list of these prime numbers. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def primes_below(n): Returns a list of prime numbers below a given number n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to calculate the product of even numbers in a list. If there are no even numbers in the list, return 0.","solution":"def product_of_even_numbers(nums): Returns the product of even numbers in the list nums. If there are no even numbers, returns 0. product = 1 has_even = False for num in nums: if num % 2 == 0: product *= num has_even = True return product if has_even else 0"},{"question":"Write a python function to split a given string into a list of words, using a custom delimiter and ignoring empty strings.","solution":"def custom_split(string, delimiter): Splits the given string into a list of words using the specified delimiter, ignoring empty strings. Parameters: string (str): The string to split. delimiter (str): The delimiter to use for splitting the string. Returns: list: A list of words. words = string.split(delimiter) return [word for word in words if word]"},{"question":"Write a python function to create a list of all subsets of a given set. A subset is a set that contains only elements from the original set.","solution":"def subsets(s): Returns a list of all subsets of the given set \`s\`. from itertools import combinations s_list = list(s) subset_list = [] for i in range(len(s_list) + 1): for combo in combinations(s_list, i): subset_list.append(set(combo)) return subset_list"},{"question":"Write a python function to find the max element in the list. For example, if the input list is [3, 5, 2, 4, 9], the function should return 9.","solution":"def find_max_element(lst): Returns the maximum element in the list. if not lst: raise ValueError(\\"The list is empty.\\") max_element = lst[0] for elem in lst: if elem > max_element: max_element = elem return max_element"},{"question":"Write a python function to implement the classic \\"FizzBuzz\\" problem. FizzBuzz is a programming interview question where you print the numbers from 1 to n. For multiples of three, print \\"Fizz\\" instead of the number, for multiples of five, print \\"Buzz\\", and for multiples of both three and five print \\"FizzBuzz\\".","solution":"def fizzbuzz(n): Returns a list of numbers from 1 to n, but: - For multiples of three, \\"Fizz\\" is added instead of the number, - For multiples of five, \\"Buzz\\" is added instead of the number, - For multiples of both three and five, \\"FizzBuzz\\" is added instead of the number. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a python function to find the sum of all the elements in a list. Using for-loops is not allowed.","solution":"def sum_of_elements(lst): Returns the sum of all the elements in the list \`lst\` without using for-loops. return sum(lst)"},{"question":"Write a python function to print the nth Ugly Number. An ugly number is a positive integer whose prime factors only include 2, 3, and 5. For example, the first 10 ugly numbers are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12.","solution":"def nth_ugly_number(n): Returns the nth ugly number. An ugly number is a number whose prime factors are only 2, 3, or 5. ugly_numbers = [0] * n ugly_numbers[0] = 1 i2 = i3 = i5 = 0 next_2_mul = 2 next_3_mul = 3 next_5_mul = 5 for i in range(1, n): next_ugly_num = min(next_2_mul, next_3_mul, next_5_mul) ugly_numbers[i] = next_ugly_num if next_ugly_num == next_2_mul: i2 += 1 next_2_mul = ugly_numbers[i2] * 2 if next_ugly_num == next_3_mul: i3 += 1 next_3_mul = ugly_numbers[i3] * 3 if next_ugly_num == next_5_mul: i5 += 1 next_5_mul = ugly_numbers[i5] * 5 return ugly_numbers[-1]"},{"question":"Write a python function to find the maximum difference between two elements in a given array, where the larger number appears after the smaller number. If no such difference exists, return -1.","solution":"def max_difference(arr): Returns the maximum difference between two elements where the larger number appears after the smaller number. If no such difference exists, return -1. if not arr or len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Write a python function to generate prime numbers.","solution":"def generate_prime_numbers(n): Generates a list of prime numbers up to the given number n using the Sieve of Eratosthenes algorithm. Args: n (int): The upper limit of numbers to check for primality. Returns: list: A list of prime numbers up to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n + 1, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to find the nth element in the Fibonacci sequence.","solution":"def fibonacci(n): Returns the nth element in the Fibonacci sequence. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a python function to search for words in a given string that start with a specific character, ignoring case sensitivity.","solution":"def search_words_starting_with(text, char): Returns a list of words from the given text that start with the specified character. The search is case-insensitive. :param text: The string in which to search for words. :param char: The character that the words should start with. :return: A list of words starting with the specified character. words = text.split() char_lower = char.lower() return [word for word in words if word.lower().startswith(char_lower)]"},{"question":"Write a python function to find the maximum value in a list of numbers. The function should handle an empty list by returning \`None\`.","solution":"def find_maximum(lst): Returns the maximum value in a list of numbers. Handles an empty list by returning None. if not lst: return None return max(lst)"},{"question":"Write a python function to print all the even numbers from 0 to the input limit number n.","solution":"def print_even_numbers(n): Returns a list of even numbers from 0 to n inclusive. If n is less than 0, returns an empty list. if n < 0: return [] return [i for i in range(0, n + 1) if i % 2 == 0]"},{"question":"Write a python function to find the number of pairs of integers (i, j) such that i < j and A[i] < A[j] in an array. This is known as finding the number of inversions in the array.","solution":"def count_inversions(arr): Counts the number of pairs of integers (i, j) such that i < j and A[i] < A[j] in an array. :param arr: list of integers :return: int, number of such pairs def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right subarray while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the remaining elements in the left subarray (arr[i ... mid]) # are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*len(arr) return merge_sort(arr, temp_arr, 0, len(arr)-1)"},{"question":"Write a python function to identify whether the given number is a perfect cube or not. The function should take an integer as input and return a boolean value indicating whether the number is a perfect cube.","solution":"def is_perfect_cube(n): Returns True if n is a perfect cube, False otherwise. if n < 0: n = -n cube_root = round(n ** (1/3)) return cube_root ** 3 == n"},{"question":"Write a python function to find the minimum number of coins needed to sum up to a given amount, given a list of coin denominations.","solution":"def min_coins(coins, amount): Given a list of coin denominations and an amount, this function returns the minimum number of coins needed to make up that amount using the given denominations. Parameters: coins (list): A list of integers representing coin denominations. amount (int): The target amount. Returns: int: The minimum number of coins needed, or -1 if the amount cannot be made up by any combination of the coins. # Initialize an array to store the minimum coins needed for each amount up to the target amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # No coins are needed to make amount 0 # Iterate through each coin for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to find the number of distinct paths from the top-left corner to the bottom-right corner of a m x n grid, where you can only move either down or right at any point in time.","solution":"def unique_paths(m, n): Returns the number of distinct paths from the top-left corner to the bottom-right corner of a m x n grid. Only moves down or right are allowed. :param m: number of rows in the grid :param n: number of columns in the grid :return: number of distinct paths if m == 1 or n == 1: return 1 dp = [[0] * n for _ in range(m)] for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a python function to find the kth missing positive number in an unsorted integer array.","solution":"def find_kth_missing_positive(nums, k): Finds the kth missing positive number in an unsorted integer array. nums = set(nums) missing_count = 0 current = 1 while True: if current not in nums: missing_count += 1 if missing_count == k: return current current += 1"},{"question":"Write a python function to simulate the rolling of a six-sided die. The function should return a random number between 1 and 6.","solution":"import random def roll_die(): Simulates the rolling of a six-sided die. Returns a random number between 1 and 6. return random.randint(1, 6)"},{"question":"Write a python function to find the difference between the sum of odd numbers and the sum of even numbers in a list.","solution":"def difference_between_sum_of_odds_and_evens(numbers): Returns the difference between the sum of odd numbers and the sum of even numbers in a list. sum_odds = sum(num for num in numbers if num % 2 != 0) sum_evens = sum(num for num in numbers if num % 2 == 0) return sum_odds - sum_evens"},{"question":"Write a python function to compute the Josephus problem with k and n as input parameters. The Josephus problem is a theoretical problem related to a certain elimination game. People are standing in a circle and they are sequentially killed every kth person until only one person remains. The function should take two parameters: the total number of people (n) and the step count (k). The function should return the index of the last remaining person, with indexing starting at 1.","solution":"def josephus_problem(n, k): Solves the Josephus problem for given n (total number of people) and k (step count). Returns the index of the last remaining person (1-based index). # base case: when only one person is in the game, they are the survivor if n == 1: return 1 else: # recursively reduce the problem and map the result to current problem's index return (josephus_problem(n - 1, k) + k - 1) % n + 1"},{"question":"Write a python function to sum the values of a dictionary where the keys represent the numbers and the values represent the frequencies of those numbers. Then, it should return the sum of all these values.","solution":"def sum_frequencies(d): Returns the sum of the values in the dictionary where the keys represent the numbers and the values represent the frequencies of those numbers. :param d: Dictionary with numbers as keys and frequencies as values :return: Sum of products of keys and their corresponding values return sum(key * value for key, value in d.items())"},{"question":"Write a python function to flatten a list of lists using recursion.","solution":"def flatten_list(nested_list): Flattens a nested list of lists recursively. :param nested_list: List of nested lists. :return: Flattened list. if not nested_list: return nested_list if isinstance(nested_list[0], list): return flatten_list(nested_list[0]) + flatten_list(nested_list[1:]) return nested_list[:1] + flatten_list(nested_list[1:])"},{"question":"Write a python function to reverse a linked list iteratively. The linked list is defined by a class \`ListNode\` where each node contains an integer value and a reference to the next node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list iteratively. :param head: ListNode :return: ListNode (New head of the reversed list) prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to generate a list of prime numbers between two given numbers a and b. The function should return the list of prime numbers in increasing order.","solution":"def is_prime(n): Helper function to determine if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def primes_between(a, b): Generates a list of prime numbers between a and b (inclusive). return [num for num in range(a, b + 1) if is_prime(num)]"},{"question":"Write a python function to insert a username and the corresponding hours worked into a list of dictionaries, where each dictionary represents an employee and contains their username and hours worked. The function should also include error handling for invalid data types and ensure that the username and hours worked are valid strings and integers respectively.","solution":"def insert_employee(employee_list, username, hours_worked): Inserts a new employee with their username and hours worked into the employee list. Handles errors for invalid data types and invalid values. :param employee_list: List of dictionaries where each dictionary has keys 'username' and 'hours_worked' :param username: Username of the employee as a string :param hours_worked: Hours worked by the employee as an integer :return: Updated employee list with the new entry appended, if the inputs are valid # Check if the input username is a string if not isinstance(username, str): raise ValueError(\\"Username must be a string\\") # Check if the input hours_worked is an integer if not isinstance(hours_worked, int): raise ValueError(\\"Hours worked must be an integer\\") # Check if the hours worked is non-negative if hours_worked < 0: raise ValueError(\\"Hours worked cannot be negative\\") # Insert the new employee into the list employee_list.append({\\"username\\": username, \\"hours_worked\\": hours_worked}) return employee_list"},{"question":"Write a python function to find the maximum product of two numbers in a list. The list should contain at least two integers. If the list contains less than two numbers, return -1.","solution":"def max_product_of_two(nums): Returns the maximum product of two numbers in the list. If the list contains less than two numbers, returns -1. if len(nums) < 2: return -1 nums.sort() return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Write a python function to check if a given number is a perfect square. A number is a perfect square if and only if it has an integer square root. For example, 16 is a perfect square because the square root of 16 is 4, which is an integer.","solution":"import math def is_perfect_square(n): Checks if a given number is a perfect square. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False root = math.isqrt(n) # Get the integer square root of n return root * root == n"},{"question":"Write a python function to implement a stack using a list with push, pop and is_empty methods.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): if not self.is_empty(): return self.stack.pop() raise IndexError(\\"pop from empty stack\\") def is_empty(self): return len(self.stack) == 0"},{"question":"Write a python function to check if all elements of one list are present in another list, regardless of the order.","solution":"def are_elements_present(list1, list2): Checks if all elements of list1 are present in list2, regardless of the order. Parameters: list1 (list): The list of elements to be checked. list2 (list): The list in which we are checking the presence of elements of list1. Returns: bool: True if all elements of list1 are present in list2, False otherwise. return all(element in list2 for element in list1)"},{"question":"Write a python function to find the least common multiple (LCM) of two numbers using the greatest common divisor (GCD).","solution":"import math def lcm(a, b): Returns the least common multiple (LCM) of two numbers using the greatest common divisor (GCD). if a == 0 or b == 0: return 0 gcd = math.gcd(a, b) return abs(a * b) // gcd"},{"question":"Write a python function to solve the problem of finding all unique combinations of four numbers in an array that sum up to a given target.","solution":"def four_sum(nums, target): Finds all unique quadruplets in the list 'nums' that sum up to the 'target'. Parameters: nums (list): The list of integers. target (int): The target sum for the quadruplets. Returns: list: A list of lists, where each sublist is a unique quadruplet that sums up to the target. nums.sort() results = [] length = len(nums) for i in range(length - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, length - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, length - 1 while left < right: quad_sum = nums[i] + nums[j] + nums[left] + nums[right] if quad_sum == target: results.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif quad_sum < target: left += 1 else: right -= 1 return results"},{"question":"Write a python function to find the maximum sum of three numbers in a list. The list can contain positive and negative numbers.","solution":"def max_sum_of_three(nums): Returns the maximum sum of three numbers in a list. if len(nums) < 3: raise ValueError(\\"The list must contain at least three numbers\\") nums.sort() # Consider the case of two large negative numbers and one large positive number max_sum = max(nums[-1] + nums[-2] + nums[-3], nums[0] + nums[1] + nums[-1]) return max_sum"},{"question":"Write a python function to solve the following question: Given a positive integer n, return the least number of perfect square numbers which sum to n. For example, given n = 12, the least number of perfect square numbers which sum to 12 is 3 (4 + 4 + 4). The function should be efficient and handle large numbers optimally.","solution":"import math def numSquares(n): Returns the least number of perfect square numbers which sum to n. if n <= 0: return 0 # Initialize the dp array where dp[i] indicates the least number of perfect squares that sum to i. dp = [float('inf')] * (n+1) dp[0] = 0 # Loop over all numbers up to n to fill dp[i] for i in range(1, n + 1): # Loop over all perfect squares <= i j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]"},{"question":"Write a python function to remove all duplicate characters from a string while maintaining the original order of the characters. Also, ensure your solution is efficient.","solution":"def remove_duplicates(s): Removes all duplicate characters from a string while maintaining the original order of the characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to find the largest product of the digits of a given number.","solution":"def largest_product_of_digits(number): Returns the largest product of digits of the given number. number_str = str(abs(number)) # Convert number to string and handle negative numbers max_product = 0 for i in range(len(number_str)): for j in range(i + 1, len(number_str) + 1): digits = number_str[i:j] product = 1 for digit in digits: product *= int(digit) max_product = max(max_product, product) return max_product"},{"question":"Write a python function to find the maximum profit that can be earned by buying and selling a stock on different days. You can only make one transaction (i.e., you can only buy one and sell one share of the stock), and you must buy before you sell. For example, if the given array is [7,1,5,3,6,4], then the maximum profit is 5, as you buy on day 2 (price = 1) and sell on day 5 (price = 6), and 6 - 1 = 5. If the given array is [7,6,4,3,1], then the maximum profit is 0, as no transaction is done, i.e., max profit = 0.","solution":"def max_profit(prices): Function to calculate the maximum profit from a list of stock prices. Parameters: prices (list): A list of integers where each integer represents the price of the stock on that day. Returns: int: The maximum profit that can be achieved. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Write a python function to merge two sorted lists of integers into a single sorted list. The function should take two arguments, each a list of integers, and return a single list that contains all the elements from both input lists, sorted in ascending order.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. :param list1: A sorted list of integers. :param list2: A sorted list of integers. :return: A single sorted list containing all elements from both input lists. merged_list = [] i, j = 0, 0 # Traverse both lists and append the smallest element from either list to merged_list while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, append them to merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, append them to merged_list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to sort an array of integers in ascending order and then reverse it. The function should accept an array as an argument and return the modified array.","solution":"def sort_and_reverse(arr): Sorts an array of integers in ascending order and then reverse it. Parameters: arr (list): List of integers Returns: list: Sorted and reversed list of integers sorted_arr = sorted(arr) reversed_arr = sorted_arr[::-1] return reversed_arr"},{"question":"Write a python function to return a list of n factorial triplets that are less than or equal to m. A factorial triplet consists of three numbers a, b, and c such that a! * b! * c! <= m.","solution":"import math def factorial_triplets(n, m): Returns a list of n factorial triplets (a, b, c) such that a! * b! * c! <= m. Parameters: n (int): The number of triplets to find. m (int): The upper limit for the product of factorials. Returns: list of tuple: A list of n tuples (a, b, c) where a! * b! * c! <= m. triplets = [] def factorial(x): return math.factorial(x) # Iterate over possible values for a, b, and c considering factorial values for a in range(1, 11): # assuming 10! is a reasonable upper limit for calculation efficiency fa = factorial(a) if fa > m: break for b in range(a, 11): fb = factorial(b) if fa * fb > m: break for c in range(b, 11): fc = factorial(c) if fa * fb * fc <= m: triplets.append((a, b, c)) if len(triplets) == n: return triplets else: break return triplets"},{"question":"Write a python function to find the minimum element, maximum element, and find the mean of a list of integers. How would you design the function and explain the design choice?","solution":"def min_max_mean(nums): Returns the minimum element, maximum element, and mean of a list of integers. Parameters: nums (list): A list of integers Returns: tuple: A tuple containing the minimum element, maximum element, and mean of the list if not nums: raise ValueError(\\"The list should not be empty\\") min_elem = min(nums) max_elem = max(nums) mean_value = sum(nums) / len(nums) return min_elem, max_elem, mean_value"},{"question":"Write a python function to check for a balanced parantheses in a string.","solution":"def is_balanced_parentheses(s): Returns True if the input string 's' has balanced parentheses, otherwise False. Only considers the characters '(', ')', '{', '}', '[' and ']' in the string. stack = [] matching_parentheses = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False return stack == []"},{"question":"Write a python function to find the smallest and largest \`n\` numbers from a given list of numbers \`lst\` and return them in a tuple. If the list contains fewer than \`n\` numbers, return the entire list as a tuple.","solution":"def find_smallest_largest_n(lst, n): Returns a tuple containing two lists: the smallest \`n\` numbers and the largest \`n\` numbers from the given list \`lst\`. If the list contains fewer than \`n\` numbers, return the entire list sorted as both smallest and largest. if len(lst) < n: return (sorted(lst), sorted(lst)) smallest_n = sorted(lst)[:n] largest_n = sorted(lst)[-n:] return (smallest_n, largest_n)"},{"question":"Write a python function to generate a list of all the odd numbers within a given range (inclusive). The function should take a single argument, which is the upper limit of the range (an integer). The function should return a list of all odd numbers from 1 up to and including the given upper limit.","solution":"def generate_odd_numbers(upper_limit): Returns a list of all odd numbers from 1 up to and including the given upper limit. return [num for num in range(1, upper_limit + 1) if num % 2 != 0]"},{"question":"Write a python function to return the product of all the elements in a list.","solution":"def product_of_list(lst): Returns the product of all the elements in the list. product = 1 for num in lst: product *= num return product"},{"question":"Write a python function to remove duplicates from a list while preserving the order of elements. You should not use any additional data structures like sets or dictionaries. Can you explain the code you've written?","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the order of elements. result = [] for item in lst: if item not in result: result.append(item) return result"},{"question":"Write a python function to convert a given string sentence to an equivalent list where each word is an element of the list. Use the split() method.","solution":"def sentence_to_list(sentence): Converts a given string sentence to a list where each word is an element of the list. Args: sentence (str): The input sentence. Returns: list: A list of words from the input sentence. return sentence.split()"},{"question":"Write a python function to sort the items in a given dictionary by their values in descending order. I'll provide the dictionary as an argument and get the sorted dictionary in return. Please include a brief explanation of your code.","solution":"def sort_dict_by_values_desc(d): This function takes a dictionary as an argument and returns a new dictionary with the items sorted by their values in descending order. Args: d (dict): The input dictionary. Returns: dict: A new dictionary with items sorted by values in descending order. sorted_dict = dict(sorted(d.items(), key=lambda item: item[1], reverse=True)) return sorted_dict"},{"question":"Write a python function to remove repeated characters in a string while preserving the original order of characters. Also, return the number of unique characters in the string.","solution":"def remove_duplicates_and_count(s): Removes repeated characters from the string while preserving the original order and returns a tuple containing the resulting string and the count of unique characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result), len(result)"},{"question":"Write a python function to reverse a string and remove all non-alphanumeric characters. I want to understand the logic behind the function.","solution":"import re def reverse_and_clean_string(s): Reverse a string and remove all non-alphanumeric characters. Args: s (str): The input string to be reversed and cleaned. Returns: str: The reversed string with all non-alphanumeric characters removed. # Using regular expression to remove all non-alphanumeric characters cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', s) # Reversing the cleaned string reversed_string = cleaned_string[::-1] return reversed_string"},{"question":"Write a python function to solve the problem of finding the maximum profit in the \\"Best Time to Buy and Sell Stock\\" problem on LeetCode. This problem involves selecting the best time to buy and sell a stock from a list of daily stock prices to maximize profit.","solution":"def max_profit(prices): Function to compute the maximum profit from daily stock prices. :param prices: List[int] - list of daily stock prices :return: int - the maximum profit if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: # Calculate the profit if selling at current price profit = price - min_price # Update the maximum profit if the current profit is higher if profit > max_profit: max_profit = profit # Update the minimum price if the current price is lower if price < min_price: min_price = price return max_profit"},{"question":"Write a python function to find the Maximum Number in a List. The list might contain integers, floats, or any other numerical types. Additionally, the function should handle nested lists and return the maximum number found, even if the maximum is in a nested list.","solution":"def find_max_in_list(lst): This function finds the maximum numerical value in a list, including nested lists. Parameters: lst (list): A list which can contain integers, floats, or nested lists of numerical values. Returns: max_value: The maximum value found in the list. max_value = float('-inf') # Start with the lowest possible value for element in lst: if isinstance(element, list): element = find_max_in_list(element) # Recursively find the max in the nested list if element > max_value: max_value = element return max_value"},{"question":"Write a python function to check if string str1 is a subsequence of string str2.","solution":"def is_subsequence(str1, str2): Checks if str1 is a subsequence of str2. Parameters: str1 (str): The string to check as a subsequence. str2 (str): The string to check against. Returns: bool: True if str1 is a subsequence of str2, False otherwise. iter_str2 = iter(str2) return all(char in iter_str2 for char in str1)"},{"question":"Write a python function to convert a list of integers to their corresponding roman numerals. The function should handle numbers from 1 to 3999.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Only handles numbers from 1 to 3999. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num def list_to_roman(lst): Convert a list of integers to their corresponding Roman numerals. Handles numbers from 1 to 3999. return [int_to_roman(num) for num in lst]"},{"question":"Write a python function to find the last occurrence of a specific character in a given string.","solution":"def last_occurrence(s, char): Returns the index of the last occurrence of the character char in the string s. If the character is not found, returns -1. return s.rfind(char)"},{"question":"Write a python function to split a string into substrings separated by one or more spaces, and return a list where each substring is stripped of leading and trailing spaces.","solution":"def split_and_strip(s): Splits the string \`s\` into substrings separated by one or more spaces, and returns a list where each substring is stripped of leading and trailing spaces. Args: s (str): The input string to be split and stripped. Returns: List[str]: A list of substrings. return [substring.strip() for substring in s.split() if substring]"},{"question":"Write a python function to find the shortest distance from any cell of the matrix with value 0 to any cell of the matrix with value 1. Each cell has a path with weight 1 in the matrix.","solution":"from collections import deque def shortest_distance(matrix): rows = len(matrix) cols = len(matrix[0]) distance = [[float('inf')] * cols for _ in range(rows)] queue = deque() for r in range(rows): for c in range(cols): if matrix[r][c] == 0: queue.append((r, c)) distance[r][c] = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols: if distance[nr][nc] > distance[r][c] + 1: distance[nr][nc] = distance[r][c] + 1 queue.append((nr, nc)) min_distance = float('inf') for r in range(rows): for c in range(cols): if matrix[r][c] == 1: min_distance = min(min_distance, distance[r][c]) return min_distance if min_distance != float('inf') else -1"},{"question":"Write a python function to find the number of times the letter 'o' appears in a given string.","solution":"def count_o_occurrences(s): Returns the number of times the letter 'o' appears in the given string. :param s: The input string. :return: The count of 'o' characters in the string. return s.count('o')"},{"question":"Write a python function to calculate the product of integers from 1 to n (inclusive) without using the built-in \`math.prod()\` function. You need to handle input values up to 21.","solution":"def product_of_integers(n): Returns the product of integers from 1 to n (inclusive). Input values are in the range from 1 to 21. if n < 1 or n > 21: raise ValueError(\\"Input value must be between 1 and 21.\\") product = 1 for i in range(1, n + 1): product *= i return product"},{"question":"Write a python function to create a list of unique values from a list. In the case when the input list is empty, the function should return an empty list. In the case when the input list contains duplicate values, the function should return a list of unique values only.","solution":"def unique_values(input_list): Returns a list of unique values from the input list. return list(set(input_list))"},{"question":"Write a python function to implement the recursive sum of a list of numbers.","solution":"def recursive_sum(numbers): Returns the sum of a list of numbers using recursion. if not numbers: return 0 other_numbers_sum = recursive_sum(numbers[1:]) return numbers[0] + other_numbers_sum"},{"question":"Write a python function to determine if a given integer is a palindrome without converting it to a string.","solution":"def is_palindrome_number(x): Returns True if x is a palindrome integer, False otherwise. A palindrome is a number that reads the same backward as forward. if x < 0: return False original = x reversed_number = 0 while x > 0: # Extract the last digit of x digit = x % 10 # Append the last digit to reversed_number reversed_number = reversed_number * 10 + digit # Remove the last digit of x x = x // 10 return original == reversed_number"},{"question":"Write a python function to find the maximum sum of a contiguous subarray. The function should take one parameter: a list of integers. The function should return an integer representing the maximum sum of any contiguous subarray within the input list.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray. :param nums: List of integers :return: Integer, the maximum sum of any contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to check if a binary string has alternating 1's and 0's. The function should return \`True\` if the binary string satisfies this condition, and \`False\` otherwise.","solution":"def has_alternating_bits(s): Checks if the given binary string has alternating 1's and 0's. :param s: Input binary string :type s: str :return: True if the string has alternating 1's and 0's, False otherwise :rtype: bool for i in range(1, len(s)): if s[i] == s[i-1]: return False return True"},{"question":"Write a python function to reverse a string without using any built-in functions or slicing. Also, reverse the order of words in the string without reversing the characters in each word. For example, for the string \\"hello world\\", the output should be \\"world hello\\".","solution":"def reverse_string_and_words(input_str): Reverses the order of words in the given input string and also reverses the string without using any built-in functions or slicing. :param input_str: str :return: str # Split the input string into words words = [] current_word = \\"\\" for char in input_str: if char == \\" \\": if current_word: words.append(current_word) current_word = \\"\\" else: current_word += char if current_word: words.append(current_word) # Reverse the word order reversed_words = [] for i in range(len(words) - 1, -1, -1): reversed_words.append(words[i]) # Join the words into a single string and reverse the characters output_str = \\"\\" for word in reversed_words: output_str += word output_str += \\" \\" # Remove the trailing space if output_str and output_str[-1] == \\" \\": output_str = output_str[:-1] return output_str"},{"question":"Write a python function to check if a given string is a rotation of another string. A string rotation means that rotating one string to the left or right can result in the other string. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\". How can I do this without using the \`collections.deque\`?","solution":"def is_rotation(s1, s2): Check if s2 is a rotation of s1. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Write a python function to read the contents of a file and return its contents. If the file does not exist, the function should return \\"File not found\\".","solution":"def read_file_contents(file_path): Reads the contents of the file at the given file path. If the file does not exist, returns \\"File not found\\". try: with open(file_path, 'r') as file: return file.read() except FileNotFoundError: return \\"File not found\\""},{"question":"Write a python function to check if a given integer (positive or negative) is a palindrome. A number is a palindrome if it remains the same when its digits are reversed, considering leading zeros are not allowed.","solution":"def is_palindrome_number(n): Checks if the given integer n is a palindrome. A number is a palindrome if it remains the same when its digits are reversed. :param n: int, the number to check (can be positive or negative) :return: bool, True if the number is a palindrome, False otherwise # Convert number to string str_n = str(n) # Check palindrome condition (ignoring leading minus sign for negative numbers) if str_n == str_n[::-1] or (str_n[0] == '-' and str_n[1:] == str_n[:0:-1]): return True return False"},{"question":"Write a python function to find the majority element in a list. The majority element is the one that appears more than ⌊ n / 2 ⌋ times in the array where n is the size of the array. For example, for an array [3, 2, 3], the majority element is 3.","solution":"def majority_element(nums): Finds and returns the majority element in the list nums. The majority element is the one that appears more than ⌊ n / 2 ⌋ times in the array where n is the size of the array. :param nums: List of integers. :return: The majority element. count = {} majority_count = len(nums) // 2 for num in nums: if num not in count: count[num] = 0 count[num] += 1 if count[num] > majority_count: return num return None"},{"question":"Write a python function to grab all the elements from a list of lists and write them into a single list, removing any duplicates. The resulting list should be sorted in ascending order.","solution":"def flatten_and_unique_sort(list_of_lists): Flattens a list of lists, removes duplicates, and sorts the result in ascending order. Parameters: list_of_lists (list): List of lists with elements to be flattened, deduplicated, and sorted. Returns: list: A sorted list of unique elements. # Flatten the list of lists flat_list = [item for sublist in list_of_lists for item in sublist] # Remove duplicates by converting to a set unique_items = set(flat_list) # Convert back to a list and sort in ascending order sorted_unique_list = sorted(unique_items) return sorted_unique_list"},{"question":"Write a python function to reverse a binary number, where the binary number is a string containing only '0's and '1's. The function should return the reversed binary number as a string.","solution":"def reverse_binary(binary_str): Reverses the given binary string. Args: binary_str (str): A string containing the binary number to be reversed. Returns: str: A string containing the reversed binary number. return binary_str[::-1]"},{"question":"Write a python function to convert Celsius to Fahrenheit without using the formula directly. You can only use the standard arithmetic operations and type conversions. Your function should handle floating-point inputs and scale the result to the nearest integer.","solution":"def celsius_to_fahrenheit(celsius): Converts the temperature from Celsius to Fahrenheit. The result is scaled to the nearest integer. # Convert Celsius to Fahrenheit without using the formula directly fahrenheit = (celsius * 9 / 5) + 32 # Round to the nearest integer return round(fahrenheit)"},{"question":"Write a python function to check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequencies. Without using any built-in functions or libraries, write a function that takes two strings as input and returns a boolean indicating whether the two strings are anagrams of each other.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, otherwise False. Anagrams are strings that contain the same characters with the same frequencies. if len(str1) != len(str2): return False # Initialize frequency dictionaries char_count_1 = {} char_count_2 = {} # Calculate frequency of each character in str1 for char in str1: if char in char_count_1: char_count_1[char] += 1 else: char_count_1[char] = 1 # Calculate frequency of each character in str2 for char in str2: if char in char_count_2: char_count_2[char] += 1 else: char_count_2[char] = 1 # Compare frequency dictionaries return char_count_1 == char_count_2"},{"question":"Write a python function to check if a number is prime or not. If the number is not prime, return its smallest prime factor. If the number is prime, return \`None\`.","solution":"def is_prime(num): Check if the number is prime. If the number is not prime, return its smallest prime factor. If the number is prime, return None. if num <= 1: return False for i in range(2, num): if num % i == 0: return i # Return the smallest prime factor return None # The number is prime"},{"question":"Write a python function to check if a string is a palindrome using a stack data structure. A palindrome is a string that reads the same backward as forward, e.g., \\"racecar\\". You should also handle cases where the string is case-insensitive and ignore non-alphanumeric characters.","solution":"import re def is_palindrome(s): Check if the provided string \`s\` is a palindrome, considering only alphanumeric characters and ignoring case. Uses a stack to determine if the string reads the same backward as forward. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Use a list as a stack stack = [] # Push all characters of cleaned string onto stack for char in cleaned: stack.append(char) # Compare the characters from the start and the characters popped from the stack for char in cleaned: if char != stack.pop(): return False return True"},{"question":"Write a python function to implement the quicksort algorithm. Quicksort is a popular sorting algorithm that uses the divide-and-conquer paradigm for sorting an array.","solution":"def quicksort(arr): Implements the quicksort algorithm to sort an array. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to find the maximum depth of a binary tree. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Find the maximum depth of a binary tree. Parameters: root (TreeNode): The root of the binary tree. Returns: int: The maximum depth of the tree. if not root: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to find the minimum number in a list using the divide and conquer algorithm. The function should take a list of integers as input and return the minimum number found.","solution":"def find_min_divide_conquer(arr): Returns the minimum number in the list using the divide and conquer algorithm. if not arr: raise ValueError(\\"The input list is empty\\") def find_min_recursive(arr, left, right): # Base case: If there is only one element if left == right: return arr[left] # Find the middle point mid = (left + right) // 2 # Recursively find the minimum in the left and right subarrays left_min = find_min_recursive(arr, left, mid) right_min = find_min_recursive(arr, mid + 1, right) # Return the minimum of the two return min(left_min, right_min) return find_min_recursive(arr, 0, len(arr) - 1)"},{"question":"Write a python function to check if an array contains duplicate values. The function should return True if there are any duplicate values in the array, and False otherwise.","solution":"def contains_duplicates(arr): Checks if the array contains any duplicate values. Args: arr (list): The list of values to check. Returns: bool: True if there are duplicate values, False otherwise. return len(arr) != len(set(arr))"},{"question":"Write a python function to find all the prime numbers within a given range. For instance, the function should return all prime numbers between 10 and 20.","solution":"def find_primes_in_range(start, end): Returns a list of prime numbers between start and end (inclusive). def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to solve the Joseph's problem. The Joseph's problem is a theoretical problem related to a certain elimination game. There are n people standing in a circle, and every kth person is eliminated until only one person remains. The position of the last remaining person is considered to have the winning position and is returned as the output. In other words, write a function that takes two integers n and k as input and returns a computes the winning position.","solution":"def josephus(n, k): Solves the Josephus problem for n people and step k. Args: n (int): The number of people standing in the circle. k (int): The step count to eliminate someone. Returns: int: The position of the last remaining person (0-indexed). if n == 1: return 0 else: return (josephus(n - 1, k) + k) % n"},{"question":"Write a python function to remove all instances of a target value from an integer array. The function should return the new length of the array after removal. The relative order of the elements should be preserved.","solution":"def remove_target(nums, target): Removes all instances of target from nums. Parameters: nums (list of int): The input array of integers target (int): The value to be removed from the array Returns: int: The new length of the array after removal write_index = 0 for num in nums: if num != target: nums[write_index] = num write_index += 1 return write_index"},{"question":"Write a python function to count the number of substrings within a given string that contain only one distinct character.","solution":"def count_single_char_substrings(s): Returns the count of substrings within a given string that contain only one distinct character. n = len(s) count = 0 i = 0 while i < n: char_count = 1 while i + 1 < n and s[i] == s[i + 1]: char_count += 1 i += 1 # Total substrings that can be formed with char_count length count += (char_count * (char_count + 1)) // 2 i += 1 return count"},{"question":"Write a python function to convert a given string \`s\` into the run-length encoded version of it. In run-length encoding, consecutive duplicates of characters are encoded as a single character followed by the number of duplicates. For example, given the string \\"aabcccccaaa\\", the function should return \\"a2b1c5a3\\".","solution":"def run_length_encode(s): Converts a given string into its run-length encoded version. Parameters: s (str): The input string to be encoded. Returns: str: The run-length encoded string. if not s: return \\"\\" encoded = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: encoded.append(prev_char + str(count)) count = 1 prev_char = char encoded.append(prev_char + str(count)) return ''.join(encoded)"},{"question":"Write a python function to find the sum of all the numbers in a list that are unique (i.e., they appear only once in the list).","solution":"def sum_unique_numbers(lst): Returns the sum of all unique numbers in the list. from collections import Counter count = Counter(lst) unique_sum = sum(num for num, c in count.items() if c == 1) return unique_sum"},{"question":"Write a python function to implement a simple code to add two numbers.","solution":"def add_numbers(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a python function to check if the given number is a perfect square. If it is a perfect square, return the square root; otherwise, return -1. You should solve this without using any built-in function that directly computes the square root. Additionally, the solution should handle large numbers efficiently.","solution":"def is_perfect_square(num): Checks if a number is a perfect square. Returns the square root if true, otherwise -1. Parameters: num (int): The number to check Returns: int: The square root if it's a perfect square, otherwise -1 if num < 0: return -1 if num == 0: return 0 start, end = 1, num while start <= end: mid = (start + end) // 2 square = mid * mid if square == num: return mid elif square < num: start = mid + 1 else: end = mid - 1 return -1"},{"question":"Write a python function to find the nth term of the Fibonacci sequence using recursion. The function should work for large values of n.","solution":"def fib(n, memo={}): Returns the nth term of the Fibonacci sequence using recursion with memoization. if n in memo: return memo[n] if n <= 1: memo[n] = n else: memo[n] = fib(n-1, memo) + fib(n-2, memo) return memo[n]"},{"question":"Write a python function to print all the numbers from 1 to N such that the numbers contain only the digits 1, 2, and 3. The numbers should be printed in ascending order.","solution":"def print_numbers_with_digits_123(N): Prints all the numbers from 1 to N such that the numbers contain only the digits 1, 2, and 3. The numbers are printed in ascending order. def contains_only_123(n): Check if the number contains only digits 1, 2, and 3. while n: digit = n % 10 if digit not in {1, 2, 3}: return False n //= 10 return True result = [] for i in range(1, N + 1): if contains_only_123(i): result.append(i) return result"},{"question":"Write a python function to find the maximum value in an array using recursion. Please do not use any built-in functions or libraries.","solution":"def find_max_recursive(arr, index=0, current_max=None): Finds the maximum value in an array using recursion. Parameters: arr (list): The array in which to find the maximum value. index (int): The current index in the recursion. Default is 0. current_max (int/None): The current maximum value found. Default is None. Returns: int: The maximum value in the array. if current_max is None: current_max = arr[0] if index == len(arr): return current_max if arr[index] > current_max: current_max = arr[index] return find_max_recursive(arr, index + 1, current_max)"},{"question":"Write a python function to find duplicates in an array of integers.","solution":"def find_duplicates(arr): Returns a list of duplicates in the input array of integers. seen = set() duplicates = set() for num in arr: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a python function to generate the first 100 Fibonacci numbers using recursion. The function should return a list of the numbers.","solution":"def fibonacci(n, computed={0: 0, 1: 1}): Returns the n-th Fibonacci number using memoization to optimize recursive calls. if n not in computed: computed[n] = fibonacci(n - 1, computed) + fibonacci(n - 2, computed) return computed[n] def generate_fibonacci_numbers(count): Generates the first 'count' Fibonacci numbers. return [fibonacci(i) for i in range(count)] # Generate the first 100 Fibonacci numbers first_100_fibonacci_numbers = generate_fibonacci_numbers(100)"},{"question":"Write a python function to sort an array using the quick sort algorithm.","solution":"def quick_sort(array): Sorts an array in place using the quick sort algorithm and returns it. if len(array) <= 1: return array else: pivot = array[len(array) // 2] left = [x for x in array if x < pivot] middle = [x for x in array if x == pivot] right = [x for x in array if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a python function to shuffle a list of elements using the Fisher-Yates algorithm. The function should ensure that each permutation of the list is equally likely.","solution":"import random def fisher_yates_shuffle(lst): Shuffles the input list using the Fisher-Yates algorithm. Parameters: lst (list): The list of elements to shuffle. Returns: list: The shuffled list. n = len(lst) for i in range(n - 1, 0, -1): j = random.randint(0, i) lst[i], lst[j] = lst[j], lst[i] return lst"},{"question":"Write a python function to extract the username from an email address.","solution":"def extract_username(email): Extracts the username from an email address. Args: email (str): The email address to extract the username from. Returns: str: The username part of the email address. return email.split('@')[0]"},{"question":"Write a python function to find the maximum sum of a subarray with a fixed size \`k\`. Given an array and a number \`k\`, find the maximum sum of any contiguous subarray of size \`k\`.","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of any contiguous subarray of size k. if len(arr) < k: return None max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to parse a simple string to extract user_id, item_id, and rating from a string in the format \\"user_id,item_id,rating\\". Then, store the extracted values in a dictionary and return the dictionary.","solution":"def parse_review_string(review_string): Parses the review string to extract user_id, item_id, and rating. :param review_string: str, input string in the format \\"user_id,item_id,rating\\" :return: dict, dictionary containing user_id, item_id, and rating user_id, item_id, rating = review_string.split(',') return { 'user_id': user_id, 'item_id': item_id, 'rating': float(rating) # Assuming rating should be converted to float }"},{"question":"Write a python function to find the maximum depth (number of nodes on the longest path from the root to the leaf) of a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Given a binary tree, find its maximum depth (the number of nodes along the longest path from the root node down to the farthest leaf node). if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to reverse a given sentence.","solution":"def reverse_sentence(sentence): Reverses the given sentence. Parameters: sentence (str): A string containing the sentence to be reversed. Returns: str: The reversed sentence. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to calculate the frequency of each word in a given string and return the result as a dictionary.","solution":"def word_frequency(s): Calculates the frequency of each word in a given string and returns the result as a dictionary. Args: s (str): The input string. Returns: dict: A dictionary where keys are words and values are their frequencies. words = s.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a python function to swap every two adjacent characters in a string. If the string has an odd number of characters, the last character remains in its original place. For example, if the input is \\"hello\\", the output should be \\"elhol\\". If the input is \\"world\\", the output should be \\"olrld\\".","solution":"def swap_adjacent_characters(s): Swap every two adjacent characters in the string. If the string has an odd number of characters, the last character remains in its original place. :param s: The input string :return: String with every adjacent character swapped result = list(s) for i in range(0, len(s) - 1, 2): result[i], result[i + 1] = result[i + 1], result[i] return ''.join(result)"},{"question":"Write a python function to check if the given number is an Armstrong number or not. An Armstrong number (also known as a narcissistic number or pluperfect number) is a number that is the sum of its own digits each raised to the power of the number of digits.","solution":"def is_armstrong_number(number): Checks if a number is an Armstrong number. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits. Parameters: number (int): The number to check. Returns: bool: True if the number is an Armstrong number, False otherwise. digits = str(number) num_digits = len(digits) sum_of_powers = sum(int(digit) ** num_digits for digit in digits) return sum_of_powers == number"},{"question":"Write a python function to find the first occurrence of a number in a list that is divisible by 7.","solution":"def first_divisible_by_7(lst): Returns the first number in the list that is divisible by 7. If no such number exists, returns None. for num in lst: if num % 7 == 0: return num return None"},{"question":"Write a python function to remove duplicates from a sorted list. Your function should return a new list without duplicates and should maintain the sorted order of the original list. The solution should have a time complexity of at least O(n).","solution":"def remove_duplicates(sorted_list): Returns a new list with duplicates removed from the given sorted list. The new list maintains the sorted order of the original list. if not sorted_list: return [] result = [sorted_list[0]] for i in range(1, len(sorted_list)): if sorted_list[i] != sorted_list[i - 1]: result.append(sorted_list[i]) return result"},{"question":"Write a python function to convert a string to a binary tree. Each character in the string will correspond to a node in the binary tree. The function should create a binary tree, with each node having a value corresponding to the ASCII value of the character, and left and right children corresponding to the binary representation of the ASCII value. The left child of a node will be the least significant bit, and the right child will be the most significant bit.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def char_to_binary_tree(char): Converts a character to a binary tree, where each node has a value corresponding to the binary representation of the ASCII value of the character. ascii_value = ord(char) binary_rep = bin(ascii_value)[2:] # Get the binary representation without '0b' prefix root = None current_node = None for bit in binary_rep[::-1]: # Process from LSB to MSB new_node = TreeNode(int(bit)) if root is None: root = new_node current_node = root else: current_node.right = new_node current_node = new_node return root def string_to_binary_tree(s): Converts a string to a sequence of binary trees where each character in the string is converted to a separate binary tree. trees = [] for char in s: trees.append(char_to_binary_tree(char)) return trees"},{"question":"Write a python function to return the most common character in a string. If there are multiple characters with the same highest frequency, return the one that appears first in the string.","solution":"def most_common_character(s): Returns the most common character in the string s. If there are multiple characters with the same highest frequency, returns the one that appears first in the string. from collections import Counter if not s: return None counter = Counter(s) most_common, max_count = s[0], counter[s[0]] for char in s: if counter[char] > max_count: most_common, max_count = char, counter[char] return most_common"},{"question":"Write a python function to find the minimum cost to merge all numbers in the array into one single number. The cost of merging two numbers is the sum of those two numbers.","solution":"import heapq def min_cost_to_merge(nums): Returns the minimum cost to merge all numbers in the list into one single number. The cost of merging two numbers is the sum of those two numbers. if not nums: return 0 # Create a min-heap from the numbers heapq.heapify(nums) total_cost = 0 # Keep merging the two smallest elements until only one element remains while len(nums) > 1: first = heapq.heappop(nums) second = heapq.heappop(nums) cost = first + second total_cost += cost heapq.heappush(nums, cost) return total_cost"},{"question":"Write a python function to count the number of times a letter occurs in a string. The function should take two arguments: \`text\` - the string to analyze, and \`letter\` - the letter to count (it is case-sensitive). The function should return the count of the letter in the string.","solution":"def count_letter_occurrences(text, letter): Returns the number of times a letter occurs in a string. Parameters: text (str): The string to analyze. letter (str): The letter to count (case-sensitive). Returns: int: The count of the letter in the string. return text.count(letter)"},{"question":"Write a python function to find the minimum area of a rectangle with a given perimeter. The function should take the perimeter as an argument and return the minimum area. The perimeter of a rectangle is given by (2 times (length + width)), and the area is given by length (times) width. To minimize the area, both the length and the width should be as equal as possible.","solution":"def min_area(perimeter): Returns the minimum area of a rectangle given the perimeter. The minimum area is achieved when the length and width are as equal as possible. if perimeter % 2 != 0 or perimeter == 0: raise ValueError(\\"Perimeter must be an even number greater than zero\\") # half the perimeter to get the sum of length and width half_p = perimeter / 2 # To minimize area, length and width should be as equal as possible # length and width would be half_p / 2 each for minimum area length = half_p / 2 width = half_p / 2 # Calculate the area area = length * width return area"},{"question":"Write a python function to find all the paths from the root to the leaves in a binary tree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def binary_tree_paths(root): Function to find all paths from the root to the leaves in a binary tree. :param root: TreeNode - the root of the binary tree :return: List[str] - a list of paths from the root to the leaves if not root: return [] paths = [] def construct_paths(node, path): if node: path += str(node.val) if not node.left and not node.right: # if leaf node paths.append(path) else: path += '->' # extend the current path construct_paths(node.left, path) construct_paths(node.right, path) construct_paths(root, \\"\\") return paths"},{"question":"Write a python function to convert a string representing a complex number to its real and imaginary parts. The string format of the complex number is 'a+bj', where a and b are integers.","solution":"def parse_complex_number(complex_str): Parses a complex number in the format 'a+bj' and returns its real and imaginary parts as integers. Parameters: complex_str (str): A string representing a complex number in the format 'a+bj'. Returns: tuple: A tuple containing the real and imaginary parts as integers (a, b). real_str, imag_str = complex_str.split('+') real = int(real_str) imag = int(imag_str[:-1]) return (real, imag)"},{"question":"Write a python function to generate a list of all possible subsets of a given set. The function should use recursion to achieve this.","solution":"def generate_subsets(s): Generates all possible subsets of a given set s using recursion. :param s: A list representing the set :return: A list of lists, where each inner list is a subset of s def subsets_helper(index): if index == len(s): return [[]] current_element = s[index] subsets_excl_current = subsets_helper(index + 1) subsets_incl_current = [] for subset in subsets_excl_current: subsets_incl_current.append([current_element] + subset) return subsets_excl_current + subsets_incl_current return subsets_helper(0)"},{"question":"Write a python function to find the number of 1s in the binary representation of integers in a given range [a, b].","solution":"def count_ones_in_range(a, b): Returns the number of 1s in the binary representation of integers in the range [a, b]. total_ones = 0 for num in range(a, b + 1): total_ones += bin(num).count('1') return total_ones"},{"question":"Write a python function to find the longest substring with at most two distinct characters in a given string. The function should return the length of this substring.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if len(s) < 3: return len(s) # Sliding window left and right pointers left, right = 0, 0 max_length = 2 # Dictionary to keep track of the count of characters in the current window char_count = {} while right < len(s): if len(char_count) < 3: char_count[s[right]] = right right += 1 # If we have 3 characters in the dictionary, we need to shrink the window if len(char_count) == 3: # Find the left most character in the current window del_index = min(char_count.values()) del char_count[s[del_index]] left = del_index + 1 max_length = max(max_length, right - left) return max_length"},{"question":"Write a python function to reverse the characters of a string without using slicing.","solution":"def reverse_string(s): Reverses the characters of a string. :param s: The input string. :return: The reversed string. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to merge two sorted arrays without using extra space. The arrays are sorted in non-decreasing order and have m and n spaces allocated for n elements. Fill the extra spaces from the 0th index of the first array.","solution":"def merge_sorted_arrays(arr1, m, arr2, n): Merges two sorted arrays without using extra space. Parameters: arr1 (list): The first sorted list with m elements + n extra spaces. m (int): Number of initial elements in arr1. arr2 (list): The second sorted list with n elements. n (int): Number of elements in arr2. Returns: None: The array, arr1 will be modified in place. # Indices to keep track of the position of the array elements index1, index2, indexMerged = m - 1, n - 1, m + n - 1 # Merge arr1 and arr2, starting from the end of both arrays while index1 >= 0 and index2 >= 0: if arr1[index1] > arr2[index2]: arr1[indexMerged] = arr1[index1] index1 -= 1 else: arr1[indexMerged] = arr2[index2] index2 -= 1 indexMerged -= 1 # If there are remaining elements in arr2 while index2 >= 0: arr1[indexMerged] = arr2[index2] indexMerged -= 1 index2 -= 1 # arr1 is modified in place, no need to return anything"},{"question":"Write a python function to find all the elements that are present more than once in a list.","solution":"def find_duplicates(lst): Returns a list of elements that are present more than once in the input list. Parameters: lst (list): The input list of elements. Returns: list: A list of duplicate elements. from collections import Counter # Count the occurrences of each element in the list element_counts = Counter(lst) # Extract elements that appear more than once duplicates = [item for item, count in element_counts.items() if count > 1] return duplicates"},{"question":"Write a python function to return the length of a given string, but only count characters that are not spaces.","solution":"def length_without_spaces(s): Returns the length of the string s, excluding spaces. return len(s.replace(\\" \\", \\"\\"))"},{"question":"Write a python function to rename files in a directory in batch, appending a sequential number to them.","solution":"import os def rename_files_in_directory(directory): Renames files in the given directory by appending a sequential number to the filenames. Parameters: directory (str): The path to the directory containing the files to be renamed. files = sorted(os.listdir(directory)) for index, filename in enumerate(files): file_path = os.path.join(directory, filename) if os.path.isfile(file_path): file_name, file_extension = os.path.splitext(filename) new_name = f\\"{file_name}_{index + 1}{file_extension}\\" new_file_path = os.path.join(directory, new_name) os.rename(file_path, new_file_path)"},{"question":"Write a python function to create a new DataFrame with a unique \\"Code\\" column for each row in a given DataFrame. The \\"Code\\" column should be a string that combines the values of two other columns in the DataFrame. Specifically, the \\"Code\\" should be formatted as \\"<prefix>-<value>\\" where \`<prefix>\` is a constant string and \`<value>\` is the value from another column in the DataFrame.","solution":"import pandas as pd def create_code_column(df, prefix, value_column): Create a new DataFrame with a \\"Code\\" column formatted as \\"<prefix>-<value>\\" where the value is taken from the specified column. Parameters: - df: pandas DataFrame, the input DataFrame - prefix: str, the constant string to use as a prefix in the \\"Code\\" column - value_column: str, the name of the column whose values will be used for the \\"Code\\" column Returns: - pandas DataFrame, the new DataFrame with the \\"Code\\" column df['Code'] = df[value_column].apply(lambda x: f\\"{prefix}-{x}\\") return df"},{"question":"Write a python function to calculate the sum of the squares of the first n natural numbers. Is there a mathematical formula you could use to do this easily?","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. if n < 1: raise ValueError(\\"n must be a natural number (1 or greater)\\") return (n * (n + 1) * (2 * n + 1)) // 6"},{"question":"Write a python function to find the length of the longest palindrome in a given string. The function should have a time complexity of O(n^2) and space complexity of O(n).","solution":"def longest_palindrome_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 # Initialize a table to keep track of palindromes dp = [[False] * n for _ in range(n)] max_length = 1 # A single character is always a palindrome # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for substring of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Ending index of the current substring if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True max_length = length return max_length"},{"question":"Write a python function to find the maximum word length in a given list of words.","solution":"def max_word_length(words): Returns the maximum length of the words in the given list. If the list is empty, returns 0. if not words: return 0 return max(len(word) for word in words)"},{"question":"Write a python function to reverse the order of characters in a string without reversing the order of the words in the string.","solution":"def reverse_characters_in_string(s): Returns the string with the order of characters in each word reversed but the order of the words remains the same. words = s.split() reversed_words = [''.join(reversed(word)) for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to find the maximum sum of a subarray within a one-dimensional array of numbers which has a size n. For example, given the array([-2,1,-3,4,-1,2,1,-5,4]), the function should return 6. The subarray [4,-1,2,1] has the largest sum = 6.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray within the one-dimensional array \`nums\`. Args: nums (List[int]): The array of numbers. Returns: int: The maximum sum of a subarray. if not nums: return 0 current_max = nums[0] global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a python function to calculate the number of pixels that would need to be added to a given image to make its width and height divisible by a specified factor.","solution":"def calculate_additional_pixels(width, height, factor): Calculate the number of pixels that need to be added to make the width and height of an image divisible by a specified factor. :param width: an integer representing the width of the image :param height: an integer representing the height of the image :param factor: an integer representing the factor for divisibility :return: an integer representing the total number of pixels to be added additional_width = (factor - (width % factor)) % factor additional_height = (factor - (height % factor)) % factor return additional_width * height + additional_height * (width + additional_width)"},{"question":"Write a python function to check whether a given string is a 'Pangram' or not?","solution":"def is_pangram(s): Checks if the provided string is a pangram. A pangram is a sentence containing every letter of the alphabet at least once. Args: s (str): Input string to check. Returns: bool: True if the string is a pangram, False otherwise. alphabet = set('abcdefghijklmnopqrstuvwxyz') return alphabet.issubset(set(s.lower()))"},{"question":"Write a python function to check if a string is a palindrome using recursion. A string is considered a palindrome if it reads the same backward as forward. For example, \\"radar\\" is a palindrome. Your function should ignore cases and spaces.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, otherwise returns False. The function ignores case and spaces. s = ''.join(filter(str.isalnum, s)).lower() def recursive_check(sub_s): if len(sub_s) <= 1: return True if sub_s[0] != sub_s[-1]: return False return recursive_check(sub_s[1:-1]) return recursive_check(s)"},{"question":"Write a python function to group anagrams together. Anagrams are words that contain the same characters in a different order.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together. :param words: List of words to group :return: List of groups of anagrams anagrams = defaultdict(list) for word in words: sorted_word = \\"\\".join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Write a python function to find the shortest subarray with the given sum S. The function should return the length of the shortest such subarray. If no such subarray exists, return -1.","solution":"def shortest_subarray_with_sum(nums, S): Returns the length of the shortest subarray with the given sum S. If no such subarray exists, return -1. import sys current_sum = 0 start = 0 min_length = sys.maxsize for end in range(len(nums)): current_sum += nums[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != sys.maxsize else -1"},{"question":"Write a python function to calculate the area and perimeter of a rectangle. The function should take the width and height as parameters and return a tuple containing the area and perimeter of the rectangle.","solution":"def rectangle_area_perimeter(width, height): Calculate the area and perimeter of a rectangle. Parameters: width (float): The width of the rectangle. height (float): The height of the rectangle. Returns: tuple: A tuple containing the area and perimeter of the rectangle. area = width * height perimeter = 2 * (width + height) return area, perimeter"},{"question":"Write a python function to convert an array to a list.","solution":"def array_to_list(array): Converts an array to a list. Parameters: array (array-like): The input array containing elements. Returns: list: A list containing the elements of the input array. return list(array)"},{"question":"Write a python function to find the intersection of twosorted arrays A and B, and return the result as an array called C. The arrays A and B may contain duplicate elements. The function should have a time complexity of O(log n + log m), where n and m are the lengths of arrays A and B, respectively.","solution":"def binary_search(arr, target): Perform binary search to find the target in a sorted array. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return True elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return False def intersection_of_sorted_arrays(A, B): Find the intersection of two sorted arrays A and B. C = [] for element in A: if binary_search(B, element) and element not in C: C.append(element) return C"},{"question":"Write a python function to generate the first n numbers in the Fibonacci sequence without using recursion. The function should take an integer n as input and return a list containing the Fibonacci sequence up to the nth number.","solution":"def fibonacci(n): Generate the first n numbers in the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] fib_seq = [0, 1] for i in range(2, n): next_fib = fib_seq[i-1] + fib_seq[i-2] fib_seq.append(next_fib) return fib_seq[:n]"},{"question":"Write a python function to find the number of ways to make change for a given amount 'n' using the given denominations \`coin denomination list\` and a dynamic programming approach.","solution":"def count_ways_to_make_change(denominations, n): Given a list of coin denominations, this function returns the number of ways to make change for the amount 'n' using those denominations. # Initialize dp array where dp[i] is the number of ways to get amount i. dp = [0] * (n + 1) # Base case: There is 1 way to make the amount 0 (use no coins). dp[0] = 1 # Iterate over each coin denomination. for coin in denominations: for amount in range(coin, n + 1): dp[amount] += dp[amount - coin] return dp[n]"},{"question":"Write a python function to print out \\"Hello, World!\\" 10 times. How can you achieve this using a for loop?","solution":"def print_hello_world(): Prints \\"Hello, World!\\" 10 times. for _ in range(10): print(\\"Hello, World!\\")"},{"question":"Write a python function to compare two integers without using any arithmetic operators. You should also avoid using comparison operators like \`>\`, \`<\`, \`>=\`, \`<=\`. Instead, leverage bitwise operations.","solution":"def compare_integers(a, b): Compares two integers a and b without using arithmetic or comparison operators. Returns: -1 if a < b 0 if a == b 1 if a > b # Check if two numbers are equal using XOR if a ^ b == 0: return 0 # Determine sign of a and b sign_a = (a >> 31) & 1 # 1 if negative, 0 if positive sign_b = (b >> 31) & 1 # 1 if negative, 0 if positive # If both a and b have different signs if sign_a != sign_b: return -1 if sign_a else 1 # a is negative if sign_a == 1 # If both are positive or both are negative difference = a - b if difference == 0: return 0 sign_difference = (difference >> 31) & 1 return -1 if sign_difference else 1"},{"question":"Write a python function to find the shortest subarray with sum at least \`k\`","solution":"from collections import deque import sys def shortest_subarray_with_sum_at_least_k(nums, k): Finds the shortest subarray with sum at least k. Parameters: nums (list): List of integers k (int): The target sum Returns: int: The length of the shortest subarray, or -1 if no such subarray exists. n = len(nums) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + nums[i] deque_index = deque() min_len = sys.maxsize for i in range(n + 1): while deque_index and prefix_sum[i] - prefix_sum[deque_index[0]] >= k: min_len = min(min_len, i - deque_index.popleft()) while deque_index and prefix_sum[i] <= prefix_sum[deque_index[-1]]: deque_index.pop() deque_index.append(i) return min_len if min_len != sys.maxsize else -1"},{"question":"Write a python function to check if a given binary string is divisible by 5 or not. Consider that '000...' is also divisible by 5.","solution":"def is_binary_divisible_by_5(binary_str): Check if a binary string is divisible by 5. Args: binary_str (str): The binary string to check. Returns: bool: True if binary string is divisible by 5, False otherwise. if not binary_str: return False # Convert binary string to decimal integer number = int(binary_str, 2) # Check divisibility by 5 return number % 5 == 0"},{"question":"Write a python function to find the most repetitive character in a given string. If there is a tie, return the character that appears first in the string. If there are no characters that repeat, return the null character.","solution":"def most_repetitive_char(s): Returns the most repetitive character in a given string. In case of a tie, returns the character that appears first. If no characters repeat, returns the null character. if not s: return '' frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 most_repetitive = '' max_count = 1 for char in s: if frequency[char] > max_count: most_repetitive = char max_count = frequency[char] return most_repetitive"},{"question":"Write a python function to reverse a string using both iterative and recursive approaches. Additionally, ensure the function can handle any type of input (except for None), by raising an appropriate exception if the input is None. The function should be well-documented with comments.","solution":"def reverse_string_iterative(input_str): Reverses a string using an iterative approach. Args: input_str (str): The string to be reversed. Returns: str: The reversed string. Raises: TypeError: If input_str is not a string or is None. if input_str is None: raise TypeError('Input cannot be None') if not isinstance(input_str, str): raise TypeError('Input must be a string') return input_str[::-1] def reverse_string_recursive(input_str): Reverses a string using a recursive approach. Args: input_str (str): The string to be reversed. Returns: str: The reversed string. Raises: TypeError: If input_str is not a string or is None. if input_str is None: raise TypeError('Input cannot be None') if not isinstance(input_str, str): raise TypeError('Input must be a string') if len(input_str) <= 1: return input_str return input_str[-1] + reverse_string_recursive(input_str[:-1])"},{"question":"Write a python function to perform a binary search. This function should take a sorted array, a target value, and return the index of the target if it is in the array, or -1 if it is not.","solution":"def binary_search(arr, target): Perform a binary search to find the target in the sorted array arr. Args: arr (list): A sorted list of elements. target (int/float): The element to search for in the array. Returns: int: The index of the target if it is found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 # Check if target is present at mid if arr[mid] == target: return mid # If target is greater, ignore left half elif arr[mid] < target: left = mid + 1 # If target is smaller, ignore right half else: right = mid - 1 # Target was not found in the array return -1"},{"question":"Write a python function to sort a list of integers using the bubble sort algorithm. Implement this function, and provide a brief explanation of the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts a list of integers using the bubble sort algorithm. Parameters: - arr: list of integers Returns: - The sorted list of integers n = len(arr) for i in range(n): # Flag to detect any swap swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the element found is greater arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the array is sorted if not swapped: break return arr"},{"question":"Write a python function to output the reverse of a given number using string slicing.","solution":"def reverse_number(n): Returns the reverse of the given number n using string slicing. return int(str(n)[::-1]) if n >= 0 else -int(str(-n)[::-1])"},{"question":"Write a python function to check if an array contains a subarray that sums to a given number \`k\`. If such a subarray exists, return \`True\`; otherwise, return \`False\`. You are required to use a hash table to improve the efficiency of your solution.","solution":"def has_subarray_with_sum(arr, k): Check if there exists a subarray with sum equals to k. Args: arr: List of integers. k: Integer, the target sum. Returns: Boolean: True if such subarray exists, otherwise False. # Initialize an empty hash map (dictionary) sum_map = {} # Initialize sum of elements so far to 0 current_sum = 0 for i, num in enumerate(arr): # Add current element to current_sum current_sum += num # If current_sum is equal to the target sum, we found a subarray if current_sum == k: return True # If current_sum - k is in the hash map, a subarray summing to k exists if (current_sum - k) in sum_map: return True # Save the current_sum in the hash map sum_map[current_sum] = i # If we have exhausted all elements and found no subarray, return False return False"},{"question":"Write a python function to convert a given string into its corresponding integer using built-in functions.","solution":"def string_to_int(s): Converts a given string into its corresponding integer. Args: s (str): The string to be converted. Returns: int: The integer representation of the string. try: return int(s) except ValueError: return None # Return None if the string cannot be converted to an integer"},{"question":"Write a python function to parse a string to a float. If the string represents a valid float, return the float value. If the string does not represent a valid float, return None. Make sure to handle both integer and decimal representations.","solution":"def parse_string_to_float(s): Parses a string to a float if valid. Args: s (str): The string to parse. Returns: float: The float value if valid, None otherwise. try: return float(s) except ValueError: return None"},{"question":"Write a python function to search an uncommon character in a given string.","solution":"def find_uncommon_character(s): Returns the first uncommon (non-repeating) character in the given string. If all characters are common (repeating) or the string is empty, return None. from collections import Counter if not s: return None # Count the occurrences of each character char_count = Counter(s) # Identify the first character that occurs only once for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a python function to implement a stack using a list and then perform push, pop, and getMin operations in O(1) time complexity.","solution":"class MinStack: def __init__(self): Initialize the stack and another stack to keep track of minimum values. self.stack = [] self.min_stack = [] def push(self, x: int) -> None: Pushes an element onto the stack. Updates the min stack as well. self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: Removes the top element from the stack. Updates the min stack as well. if self.stack: top = self.stack.pop() if top == self.min_stack[-1]: self.min_stack.pop() def top(self) -> int: Gets the top element of the stack. if self.stack: return self.stack[-1] def getMin(self) -> int: Retrieves the minimum element in the stack. if self.min_stack: return self.min_stack[-1]"},{"question":"Write a python function to check if a number is a Fibonacci number using a generator function.","solution":"def is_fibonacci(number): Check if a number is a Fibonacci number using a generator function. def fibonacci_gen(): a, b = 0, 1 while True: yield a a, b = b, a + b fib_gen = fibonacci_gen() while True: fib_num = next(fib_gen) if fib_num == number: return True elif fib_num > number: return False"},{"question":"Write a python function to find the maximum occurring letter in a string. If there are multiple letters with the same highest frequency, return all such letters.","solution":"def max_occuring_letters(s): Returns the maximum occurring letters in a string. from collections import Counter if not s: return [] counter = Counter(s) max_freq = max(counter.values()) return [char for char, freq in counter.items() if freq == max_freq]"},{"question":"Write a python function to find the height of a binary search tree (BST). The function should take the root node of the BST as its input and return the height of the tree.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def find_height(root): Function to find the height of a binary search tree. :param root: TreeNode, the root of the binary search tree. :return: int, height of the tree. if root is None: return -1 left_height = find_height(root.left) right_height = find_height(root.right) return 1 + max(left_height, right_height)"},{"question":"Write a python function to return the sum of all elements in the array after removing all negative elements from it.","solution":"def sum_of_non_negative_elements(arr): Returns the sum of all non-negative elements in the array. Parameters: arr (list of int/float): List of numbers Returns: int/float: Sum of non-negative elements non_negative_sum = sum(x for x in arr if x >= 0) return non_negative_sum"},{"question":"Write a python function to remove all occurrences of a specific element from a given list. The function should be efficient and return the modified list without using additional space. The function should have a time complexity of O(n), where n is the length of the list.","solution":"def remove_all_occurrences(lst, element): Removes all occurrences of \`element\` from the given \`lst\` in place and returns the modified list. write_index = 0 for read_index in range(len(lst)): if lst[read_index] != element: lst[write_index] = lst[read_index] write_index += 1 return lst[:write_index]"},{"question":"Write a python function to find the square root of a number using the Newton Raphson method, starting with an initial guess.","solution":"def newton_raphson_sqrt(n, initial_guess=1.0, tolerance=1e-10, max_iterations=1000): Computes the square root of n using the Newton Raphson method. Parameters: n (float): The number to find the square root of. initial_guess (float): The starting guess for the square root. tolerance (float): The tolerance level for convergence. max_iterations (int): The maximum number of iterations to perform. Returns: float: The approximated square root of n. guess = initial_guess for _ in range(max_iterations): next_guess = 0.5 * (guess + n / guess) if abs(next_guess - guess) < tolerance: return next_guess guess = next_guess return guess"},{"question":"Write a python function to find the number of pairs (A[i], A[j]) in the array A where i < j and A[i] < A[j]. This is known as the \\"number of inversion pairs\\" in the array.","solution":"def count_inversion_pairs(A): Returns the number of inversion pairs (A[i], A[j]) in the array A where i < j and A[i] < A[j]. count = 0 n = len(A) for i in range(n): for j in range(i + 1, n): if A[i] < A[j]: count += 1 return count"},{"question":"Write a python function to reverse the words in a sentence without reversing the sentence itself.","solution":"def reverse_words(sentence): Reverses the words in a sentence without reversing the sentence itself. Args: - sentence (str): The sentence to reverse the words of. Returns: - str: The sentence with each word reversed but the order of words maintained. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a python function to check if a string is a valid date in the format 'YYYY-MM-DD'. The function should return \`True\` if the string is a valid date, and \`False\` otherwise. Use the datetime module to achieve this.","solution":"from datetime import datetime def is_valid_date(date_str): Check if the input string is a valid date in the format 'YYYY-MM-DD'. Args: date_str (str): The date string to validate. Returns: bool: True if the date_str is a valid date, False otherwise. try: datetime.strptime(date_str, \\"%Y-%m-%d\\") return True except ValueError: return False"},{"question":"Write a python function to calculate the cumulative frequency of elements in a given list. The function should return a dictionary where the keys are the elements from the list and the values are their cumulative frequencies.","solution":"def cumulative_frequency(lst): Returns a dictionary with the cumulative frequency of elements in the given list. cum_freq = {} total_freq = 0 for element in lst: total_freq += 1 cum_freq[element] = total_freq return cum_freq"},{"question":"Write a python function to check if a given binary tree is height balanced. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than one.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Checks if a binary tree is height balanced. Args: root (TreeNode): The root of the binary tree. Returns: bool: True if the binary tree is height balanced, False otherwise. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_balanced = abs(left_height - right_height) <= 1 return max(left_height, right_height) + 1, current_balanced and left_balanced and right_balanced return check_height(root)[1]"},{"question":"Write a python function to find the longest increasing subsequence (LIS) of a given sequence of integers.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the given list of integers. if not nums: return 0 n = len(nums) lis = [1] * n for i in range(1, n): for j in range(0, i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Write a python function to check if an array is sorted in non-decreasing order","solution":"def is_sorted(arr): Returns True if the array is sorted in non-decreasing order, otherwise returns False. if len(arr) < 2: return True for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a python function to calculate the area of a triangle given its base and height. The function should also handle cases where the base or height is non-positive and return an error message in such cases.","solution":"def triangle_area(base, height): Returns the area of a triangle given its base and height. If base or height is non-positive, returns an error message. if base <= 0 or height <= 0: return \\"Base and height must be positive numbers.\\" return 0.5 * base * height"},{"question":"Write a python function to find the smallest integer that is larger than the input integer ( n ) and is divisible by 3. If there is no such integer, return -1.","solution":"def next_divisible_by_3(n): Returns the smallest integer that is larger than n and is divisible by 3. next_number = n + 1 while next_number % 3 != 0: next_number += 1 return next_number"},{"question":"Write a python function to reverse a string. Here is what is expected in the function signature: \`reverse_string(s: str) -> str\`","solution":"def reverse_string(s: str) -> str: Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to find the longest common substring of two input strings. What are the time and space complexity of this function?","solution":"def longest_common_substring(s1, s2): Returns the longest common substring of the two input strings. m, n = len(s1), len(s2) max_len = 0 end_pos = 0 # Create a 2D array to store lengths of longest common suffixes of substrings # LCSuffix[i][j] will be 0 if i == 0 or j == 0 LCSuffix = [[0] * (n + 1) for _ in range(m + 1)] # Build LCSuffix[m+1][n+1] in bottom up fashion for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: LCSuffix[i][j] = LCSuffix[i - 1][j - 1] + 1 if LCSuffix[i][j] > max_len: max_len = LCSuffix[i][j] end_pos = i else: LCSuffix[i][j] = 0 # The longest common substring is from s1[end_pos-max_len:end_pos] return s1[end_pos - max_len: end_pos]"},{"question":"Write a python function to reverse a string without using the [::-1] slicing method. You should also ensure the function works with special characters and integers embedded within the string.","solution":"def reverse_string(s): Reverses a given string without using the [::-1] slicing method. reversed_s = \\"\\".join(reversed(s)) return reversed_s"},{"question":"Write a python function to calculate the sum of all odd numbers between two given positive integers (inclusive). If the first number is greater than the second number, the function should return -1.","solution":"def sum_odd_numbers(a, b): Returns the sum of all odd numbers between two given positive integers (inclusive). If the first number is greater than the second number, returns -1. if a > b: return -1 return sum(num for num in range(a, b + 1) if num % 2 != 0)"},{"question":"Write a python function to check if a given string is a palindrome without using additional memory. You are not allowed to create any new strings or data structures to check if the string is a palindrome. You can only use the built-in functions provided by Python.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome without using additional memory. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a python function to determine whether a specific word exists in the dictionary of words. If the word exists in the dictionary, return true. If not, return false.","solution":"def word_exists(word, dictionary): Return True if the word exists in the dictionary, otherwise return False. :param word: Word to check. :param dictionary: Set containing valid words. :return: Boolean indicating if the word exists in the dictionary. return word in dictionary"},{"question":"Write a python function to find length of the shortest common supersequence of two strings \`s1\` and \`s2\`.","solution":"def shortest_common_supersequence_length(s1, s2): Returns the length of the shortest common supersequence of two strings s1 and s2. m = len(s1) n = len(s2) # Create a memoization table to store the lengths of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the table in bottom-up fashion for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]) # The length of the shortest common supersequence will be in the cell dp[m][n] return dp[m][n]"},{"question":"Write a python function to check if a number is a palindrome. A whole number is a palindrome if the number reads the same backward as forward, such as 121 or 12321. Sorting the digits won't help. Consider all the numbers as integers (not strings).","solution":"def is_palindrome(number): Returns True if the given number is a palindrome, False otherwise. # Negative numbers are not palindromes if number < 0: return False # Store the original number original_number = number reversed_number = 0 # Reverse the given number while number > 0: digit = number % 10 reversed_number = reversed_number * 10 + digit number = number // 10 # Check if the original number is equal to its reversed version return original_number == reversed_number"},{"question":"Write a python function to calculate the sum of the first, third, and fifth elements of a given list. If the list has less than five elements, return the sum of the available elements.","solution":"def sum_first_third_fifth(elements): Returns the sum of the first, third, and fifth elements of a given list. If the list has less than five elements, return the sum of the available elements. indices = [0, 2, 4] return sum(elements[i] for i in indices if i < len(elements))"},{"question":"Write a python function to validate if a certain string is a valid date format in the following format: \\"YYYY-MM-DD\\". I would like to do this without using any built-in libraries like datetime to validate the date. How can I approach this?","solution":"def is_valid_date(date_string): Validates if a given date string is in the format YYYY-MM-DD. Arguments: date_string : str : The date string to validate. Returns: bool : True if the date is valid, False otherwise. # Check if the date_string matches the length of the format YYYY-MM-DD if len(date_string) != 10: return False # Check if the separators are correct if date_string[4] != '-' or date_string[7] != '-': return False # Extract year, month, and day as integers try: year = int(date_string[:4]) month = int(date_string[5:7]) day = int(date_string[8:]) except ValueError: return False # Validate year, month, and day ranges if year < 0 or month < 1 or month > 12 or day < 1 or day > 31: return False # Check for months with 30 days if month in [4, 6, 9, 11] and day > 30: return False # Check for February if month == 2: # Check for leap year if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): if day > 29: return False else: if day > 28: return False # All checks passed, return True return True"},{"question":"Write a python function to return the product of all numbers in a given list. If the list is empty, the function should return 1. If the list contains any non-numeric values, raise a ValueError.","solution":"def product_of_list(numbers): Returns the product of all numbers in the given list. If the list is empty, returns 1. If the list contains any non-numeric values, raises a ValueError. if not all(isinstance(x, (int, float)) for x in numbers): raise ValueError(\\"List contains non-numeric values.\\") product = 1 for number in numbers: product *= number return product"},{"question":"Write a python function to find the depth of a binary tree. The function should return the depth of the tree, which is the number of nodes on the longest path from the root node down to the farthest leaf node. The binary tree is represented using a list of lists, where each inner list contains two integers representing the value of the node and the indices of its left and right children in the list, respectively. The indices -1 represent the absence of a child node.","solution":"def find_depth(tree): Returns the depth of a binary tree represented as a list of lists. Each node is represented as: [value, left_child_index, right_child_index] -1 in the indices represents no child. if not tree: return 0 def node_depth(index): if index == -1: return 0 _, left, right = tree[index] return 1 + max(node_depth(left), node_depth(right)) return node_depth(0)"},{"question":"Write a python function to merge two lists without duplicates.","solution":"def merge_lists(list1, list2): Merges two lists without duplicates. merged_list = list(set(list1) | set(list2)) return merged_list"},{"question":"Write a python function to find the most frequent element in a given list of integers. If there are multiple elements with the same highest frequency, return all of them in a list.","solution":"from collections import Counter def most_frequent_elements(arr): Returns the most frequent element(s) in the given list of integers. If there are multiple elements with the same highest frequency, return all of them in a list. if not arr: return [] count = Counter(arr) max_freq = max(count.values()) return [k for k, v in count.items() if v == max_freq]"},{"question":"Write a python function to find all unique pairs of elements in an array whose sum is equal to a given target sum. Your solution should handle cases where the array contains duplicate elements elegantly.","solution":"def find_pairs_with_sum(arr, target): Finds all unique pairs of elements in arr that sum up to the target. Parameters: arr: List of integers target: Integer, target sum Returns: A list of tuples, each containing a pair of integers that sum up to the target. seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return list(pairs)"},{"question":"Write a python function to check if a number is prime. To make the question more challenging, not only should the function return True if the number is prime, but it should also return a list of divisors if the number is not prime.","solution":"def check_prime(n): Checks if a number is prime. Returns True if the number is prime. Returns a list of divisors if the number is not prime. if n <= 1: return [1] if n == 1 else [] divisors = [] is_prime = True for i in range(2, int(n ** 0.5) + 1): if n % i == 0: is_prime = False divisors.append(i) if i != n // i: divisors.append(n // i) return True if is_prime else sorted(divisors)"},{"question":"Write a python function to identify numbers that are divisible by both 5 and 7 but not by 11.","solution":"def is_divisible_by_5_and_7_but_not_11(number): Returns True if the number is divisible by both 5 and 7, but not by 11. Returns False otherwise. return (number % 5 == 0 and number % 7 == 0) and (number % 11 != 0)"},{"question":"Write a python function to remove duplicate elements from a list while preserving the original order of the elements. You should also handle the case where the list contains nested lists, removing duplicates in the nested lists as well, but preserving the original order within each nested list.","solution":"def remove_duplicates(lst): Remove duplicates from a list while preserving the original order. Also handles nested lists by removing duplicates within each nested list while preserving their order. Args: lst: The list from which to remove duplicates, can contain nested lists. Returns: A list with duplicates removed. seen = set() result = [] for item in lst: if isinstance(item, list): nested_result = remove_duplicates(item) result.append(nested_result) elif item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the missing number in a given array that contains numbers from 1 to n with one number missing. The function signature is \`missing_number(arr, n)\`, where \`arr\` is the array of integers and \`n\` is the length of the array plus one (since one number is missing). The function should raise a \`ValueError\` if the array does not contain exactly one number missing or if the array contains duplicates. The function should return the missing number if it exists, otherwise \`None\`.","solution":"def missing_number(arr, n): Finds the missing number in an array containing numbers from 1 to n. Parameters: arr (list of int): The array containing numbers from 1 to n with one number missing. n (int): The supposed length of the array if no number was missing. Returns: int: The missing number if it exists, otherwise None. Raises: ValueError: If the array contains duplicates or the missing count is not exactly one. if len(arr) != n - 1: raise ValueError(\\"The array length is not correct based on n\\") expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) if n - (expected_sum - actual_sum) < 0: raise ValueError(\\"Array contains duplicates or more than one number is missing\\") return expected_sum - actual_sum"},{"question":"Write a python function to remove the primary and secondary elements from the list.","solution":"def remove_primary_secondary_elements(lst): Removes the first (primary) and second (secondary) elements from the list. If the list has less than two elements, return an empty list. if len(lst) < 2: return [] return lst[2:]"},{"question":"Write a python function to merge two lists of integers, sorted in ascending order, and return the merged list also sorted in ascending order. Ensure the numbers appear no more than once in the merged list and are sorted in ascending order.","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into one sorted list with unique values. # Combine the lists and convert to a set to remove duplicates combined_list = list(set(list1 + list2)) # Sort the unique elements combined_list.sort() return combined_list"},{"question":"Write a python function to check if a given string contains any special characters or not. The function should return \`True\` if the string contains special characters and \`False\` otherwise.","solution":"import re def contains_special_characters(s): Returns True if the string contains any special characters, False otherwise. return bool(re.search(r'[^a-zA-Z0-9]', s))"},{"question":"Write a python function to find the largest element in an array. You can assume the array always contains at least one element.","solution":"def find_largest_element(arr): Returns the largest element in the given array. :param arr: List of integers :return: Integer, the largest element in the array if not arr: raise ValueError(\\"Array must contain at least one element\\") largest = arr[0] for element in arr[1:]: if element > largest: largest = element return largest"},{"question":"Write a python function to check if a list contains all unique elements. For example, if the list [1, 2, 3, 4] is passed, the function should return True. If the list [1, 2, 3, 3] is passed, the function should return False.","solution":"def all_unique(lst): Checks if all elements in the list are unique. Args: lst (list): The list to check for unique elements. Returns: bool: True if all elements are unique, False otherwise. return len(lst) == len(set(lst))"},{"question":"Write a python function to remove duplicates from a list of integers and return the list with unique elements only. The function should be efficient and use Python built-in data structures whenever possible.","solution":"def remove_duplicates(int_list): Returns a list of unique elements from the input list of integers. return list(set(int_list))"},{"question":"Write a python function to find a substring within a string efficiently.","solution":"def find_substring(s, sub): Finds the starting index of the first occurrence of the substring 'sub' in the string 's'. If the substring is not found, returns -1. return s.find(sub)"},{"question":"Write a python function to to print the factors of a given number.","solution":"def factors(n): Returns a list of factors of the given number n. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Write a python function to find the maximum area of a triangle formed by connecting any three points from a given list of points.","solution":"from itertools import combinations def triangle_area(p1, p2, p3): Returns the area of a triangle given its vertex points p1, p2, p3 using the Shoelace formula. p1, p2, p3 are tuples of the form (x, y). x1, y1 = p1 x2, y2 = p2 x3, y3 = p3 return 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) def max_triangle_area(points): Returns the maximum area of a triangle formed by any three different points from the given list \`points\`. \`points\` is a list of tuples where each tuple represents a point (x, y). max_area = 0 for p1, p2, p3 in combinations(points, 3): area = triangle_area(p1, p2, p3) if area > max_area: max_area = area return max_area"},{"question":"Write a python function to extract words from a sentence. The function should return a list of words in the sentence. Ensure to handle edge cases such as leading/trailing whitespaces and repeated spaces between words.","solution":"def extract_words(sentence): Extracts words from a sentence, ignoring leading/trailing whitespaces and repeated spaces between words. Args: sentence (str): The sentence from which to extract words. Returns: list: A list of words in the sentence. return sentence.strip().split()"},{"question":"Write a python function to recursively calculate the Fibonacci sequence, where the Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: Non-negative integer :return: Fibonacci number at position n if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to find the second largest number in a list. Also, provide error handling for handling situations where the list is empty or contains less than two distinct numbers.","solution":"def second_largest_number(nums): Returns the second largest number in the list nums. Raises: ValueError: If the list is empty or contains less than two distinct numbers. if len(nums) < 2: raise ValueError(\\"The list must contain at least two distinct numbers.\\") # Remove duplicates to ensure distinct numbers unique_nums = list(set(nums)) if len(unique_nums) < 2: raise ValueError(\\"The list must contain at least two distinct numbers.\\") unique_nums.sort() return unique_nums[-2]"},{"question":"Write a python function to check if a list is sorted). If it is not sorted, correct it by sorting it in ascending order. If the list is already sorted, return it as is. Make sure your function handles both empty lists and lists with a single element.","solution":"def ensure_sorted(lst): Checks if a list is sorted. If not, sorts it in ascending order. Args: - lst: List of elements to check/sort Returns: - Sorted list if it was not sorted, original list if it was sorted if lst == sorted(lst): return lst else: return sorted(lst)"},{"question":"Write a python function to find the intersection of two arrays. The intersection of two arrays are the elements that are common in both arrays. For example, if the first array is [1, 2, 3] and the second array is [2, 3, 4], the intersection of these arrays is [2, 3]. If there are no common elements, the function should return an empty list. The function should be efficient and handle large inputs.","solution":"def intersection_of_arrays(arr1, arr2): Returns the intersection of two arrays as a list. Parameters: arr1 (list): First array. arr2 (list): Second array. Returns: list: The intersection of the two arrays. set1 = set(arr1) set2 = set(arr2) return list(set1.intersection(set2))"},{"question":"Write a python function to generate all prime numbers less than or equal to a given number.","solution":"def generate_primes(n): Returns a list of all prime numbers less than or equal to n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime for number in range(2, n + 1): if is_prime[number]: primes.append(number) for multiple in range(number * number, n + 1, number): is_prime[multiple] = False return primes"},{"question":"Write a python function to determine if a given number is a perfect power of 2. A perfect power of 2 means it can be expressed as 2^n for some non-negative integer n.","solution":"def is_power_of_two(n): Determines if the given number n is a perfect power of 2. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a python function to calculate the extra space needed to store attributes for an object instance, given the number of attributes and the size of each attribute (in bytes).","solution":"def extra_space_needed(num_attributes, size_per_attribute): Calculate the extra space needed to store attributes for an object instance. Parameters: - num_attributes (int): The number of attributes. - size_per_attribute (int): The size of each attribute in bytes. Returns: - int: The extra space needed in bytes. if num_attributes < 0 or size_per_attribute < 0: raise ValueError(\\"Number of attributes and size per attribute must be non-negative.\\") return num_attributes * size_per_attribute"},{"question":"Write a python function to convert a given string to its corresponding ASCII values list.","solution":"def string_to_ascii(s): Converts a given string to a list of its corresponding ASCII values. Parameters: s (str): The input string. Returns: List[int]: A list of ASCII values corresponding to the characters in the string. return [ord(char) for char in s]"},{"question":"Write a python function to find the smallest array that can be formed by summing or removing elements from the given array such that the sum of the array is equal to a given number 'K'. The function should return the length of this array if it exists, and -1 if it does not.","solution":"def min_length_subarray_with_sum(arr, k): Find the length of the smallest subarray with the sum equal to k. Returns -1 if no such subarray exists. n = len(arr) min_length = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 if current_sum == k: min_length = min(min_length, end - start + 1) return min_length if min_length != float('inf') else -1"},{"question":"Write a python function to return the maximum subarray sum in a one-dimensional array of numbers. This problem is a classic example of the kadane's algorithm.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum in a one-dimensional array of numbers using Kadane's algorithm. if not arr: return 0 # handle case where array is empty max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the next greater element of each element in an array. The next greater element of a number x in the array is the first greater element on the right side of x in the array. If there is no greater element to the right for x, then the next greater element for x is -1. The solution should work in O(n) time complexity and O(1) additional space complexity.","solution":"def next_greater_elements(arr): Find the next greater element of each element in an array. :param arr: List[int] - a list of integers :return: List[int] - a list where the ith element is the next greater element of the ith element in the input list n = len(arr) result = [-1] * n stack = [] for i in range(n - 1, -1, -1): while stack and stack[-1] <= arr[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(arr[i]) return result"},{"question":"Write a python function to find the union of two lists, such that the union contains only unique elements. Use set operations to achieve this in an efficient manner.","solution":"def union_of_lists(list1, list2): Returns the union of two lists as a list containing only unique elements. # Using set to find the union of two lists result = list(set(list1).union(set(list2))) return result"},{"question":"Write a python function to find the second smallest number in a list of integers. If there is no such number, return \`None\`.","solution":"def second_smallest(numbers): Finds the second smallest number in a list of integers. Returns None if there is no such number. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to remove all the characters in a string that the ASCII value is lesser than 30.","solution":"def remove_low_ascii_chars(s): Removes all characters from the string \`s\` that have ASCII values less than 30. return ''.join(ch for ch in s if ord(ch) >= 30)"},{"question":"Write a python function to filter and return prime numbers from a given list of integers. The function should take a single parameter which is the list of integers. It should return a list containing only the prime numbers from the input list.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_primes(numbers): Filters and returns the prime numbers from a given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a python function to remove duplicates from an unsorted list in-place without using any extra space.","solution":"def remove_duplicates(nums): Remove duplicates from an unsorted list in-place without using any extra space. :param nums: List[int] -- The list from which to remove duplicates. :return: List[int] -- The modified list with duplicates removed. if not nums: return nums index = 0 while index < len(nums): current_num = nums[index] next_index = index + 1 while next_index < len(nums): if nums[next_index] == current_num: nums.pop(next_index) else: next_index += 1 index += 1 return nums"},{"question":"Write a python function to find the contiguous subarray which has the largest sum and return its sum.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray which has the largest sum. Parameters: nums (List[int]): A list of integers. Returns: int: The sum of the contiguous subarray with the largest sum. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to return the sum of the squares of the first n natural numbers using the formula ( S(n) = frac{n(n + 1)(2n + 1)}{6} ).","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. return (n * (n + 1) * (2 * n + 1)) // 6"},{"question":"Write a python function to solve the \\"Longest Substring Without Repeating Characters\\" problem, which is a common algorithm interview question.","solution":"def length_of_longest_substring(s): Given a string, find the length of the longest substring without repeating characters. char_index = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_index: left = max(left, char_index[s[right]] + 1) char_index[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a python function to find the maximum subarray sum in a given array of integers. Use Kadane's algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to sort an array using the selection sort algorithm. Please provide a detailed explanation of the selection sort algorithm and the code implementation.","solution":"def selection_sort(arr): Sorts an array using the selection sort algorithm. :param arr: List of elements to be sorted :return: List of sorted elements n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_index = i for j in range(i + 1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Write a python function to illustrate the use of the ternary expression.","solution":"def check_even_or_odd(number): Returns a string indicating whether the given number is even or odd. Parameters: number (int): The number to check. Returns: str: \\"Even\\" if the number is even, \\"Odd\\" if the number is odd. return \\"Even\\" if number % 2 == 0 else \\"Odd\\""},{"question":"Write a python function to identify the first word of a string that has the maximum length. If there are multiple words with the same maximum length, return the first one encountered. If the string is empty or contains only whitespace, return None.","solution":"def longest_word(s): Identifies the first word of a string that has the maximum length. If there are multiple words with the same maximum length, returns the first one encountered. If the string is empty or contains only whitespace, returns None. words = s.split() if not words: return None max_word = words[0] for word in words: if len(word) > len(max_word): max_word = word return max_word"},{"question":"Write a python function to return True if all characters of a string are unique. For example, if the string is \\"abcde\\", the function should return True, and if the string contains duplicate characters like \\"aabbcc\\", the function should return False.","solution":"def all_unique_characters(s): Returns True if all characters in the string are unique, otherwise False. return len(s) == len(set(s))"},{"question":"Write a python function to implement a binary search on a sorted array. Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one.","solution":"def binary_search(arr, target): Perform a binary search on a sorted array. Parameters: arr (list): A list of sorted elements. target (any): The element to search for in the array. Returns: int: The index of the target in the array if found, else -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 # Check if target is present at mid if arr[mid] == target: return mid # If target is greater, ignore left half elif arr[mid] < target: left = mid + 1 # If target is smaller, ignore right half else: right = mid - 1 # Target is not present in the array return -1"},{"question":"Write a python function to calculate the sum of all elements in a 2D list that are greater than a given threshold.","solution":"def sum_above_threshold(matrix, threshold): Calculate the sum of all elements in a 2D list that are greater than a given threshold. :param matrix: List of lists containing the elements in the 2D list. :param threshold: The threshold value. :return: Sum of the elements greater than the threshold. total = 0 for row in matrix: for elem in row: if elem > threshold: total += elem return total"},{"question":"Write a python function to compute the intersection of two lists and return the result as a sorted list. The function should ensure that the returned list contains no duplicates.","solution":"def intersection_sorted_no_duplicates(list1, list2): Computes the intersection of two lists, removes any duplicates, and returns the result as a sorted list. set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) return sorted(intersection)"},{"question":"Write a python function to find all the prime numbers within a given range of numbers. The function should take two integers as input parameters and return a list containing all the prime numbers within that range. Make sure to include a clear docstring explaining the function's behavior and parameters, and to handle edge cases such as when either of the input numbers is less than 2.","solution":"def find_primes_in_range(start, end): Finds all prime numbers within a given range. Parameters: start (int): The starting point of the range. end (int): The ending point of the range. Returns: list: A list containing all prime numbers within the range [start, end]. If no primes are found, an empty list is returned. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Write a python function to find the maximum and minimum values in a list of integers. The function should return the maximum and minimum values as a tuple. If the list is empty, return \`(None, None)\`.","solution":"def find_max_min(int_list): Returns a tuple of the maximum and minimum values in a list of integers. If the list is empty, returns (None, None). Parameters: int_list (list of int): List of integers Returns: tuple: (max_value, min_value) if not int_list: # Check if the list is empty return (None, None) max_value = max(int_list) min_value = min(int_list) return (max_value, min_value)"},{"question":"Write a python function to convert a string to Python dict, where the string is in the format of JSON and the dict's keys and values should be strings. The keys in the dict should be alphabetically sorted.","solution":"import json def json_str_to_sorted_dict(json_str): Convert a JSON string to a dictionary with all keys and values as strings. The keys are sorted alphabetically. :param json_str: JSON formatted string :return: Dictionary with sorted keys # Convert the JSON string to a dictionary data = json.loads(json_str) # Ensure all keys and values are strings str_data = {str(k): str(v) for k, v in data.items()} # Return a new dictionary with sorted keys return dict(sorted(str_data.items()))"},{"question":"Write a python function to merge two lists into one list, preserving the order of elements from both original lists. The function should not contain any duplicate elements, ensuring that each element appears only once in the new list.","solution":"def merge_lists(list1, list2): Merges two lists into one, preserving the order of elements from both original lists, and ensures no duplicate elements. seen = set() merged_list = [] for item in list1 + list2: if item not in seen: seen.add(item) merged_list.append(item) return merged_list"},{"question":"Write a python function to count the number of node in a linked list which have a greater value on the right side.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def count_greater_nodes(head): Count the number of nodes in a linked list that have a greater value on the right side. :param head: ListNode, head of the linked list :return: int, count of nodes with greater value on the right side if not head: return 0 max_from_right = float('-inf') current = head count = 0 while current: if current.val > max_from_right: count += 1 max_from_right = max(max_from_right, current.val) current = current.next return count"},{"question":"Write a python function to remove all the consonants from a given string using list comprehension and return the new string with only vowels.","solution":"def remove_consonants(s): Removes all consonants from the given string and returns a new string containing only vowels. Args: s (str): The input string. Returns: str: A string with consonants removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char in vowels])"},{"question":"Write a python function to reverse a linked list without using recursion.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a linked list without using recursion. :param head: ListNode, the head node of the linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current: next_node = current.next # store the next node current.next = prev # reverse the link prev = current # move prev to this node current = next_node # move to next node return prev # prev becomes the new head of the reversed list"},{"question":"Write a python function to merge two sorted lists in O(n) time complexity, where n is the total number of elements in both lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list in O(n) time complexity. Parameters: list1 (list): The first sorted list. list2 (list): The second sorted list. Returns: list: A merged sorted list. merged_list = [] i = j = 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to define a binary tree, perform in-order traversal and print the result.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def in_order_traversal(root): Performs in-order traversal of a binary tree and returns the result as a list of values. Parameters: root (TreeNode): The root node of the binary tree. Returns: list: A list of values representing the in-order traversal of the tree. result = [] def traverse(node): if node: traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Write a python function to detect a cycle in a singly linked list.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Detects if there is a cycle in the singly linked list. Args: head: ListNode - head of the linked list Returns: bool - True if there is a cycle, False otherwise slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a python function to calculate the least common multiple (LCM) of two numbers. The LCM of two numbers is the smallest number that is a multiple of both of them. You should define a function called \`calculate_lcm\` that takes two arguments, \`num1\` and \`num2\`, and returns their LCM.","solution":"from math import gcd def calculate_lcm(num1, num2): Returns the least common multiple (LCM) of two numbers. if num1 == 0 or num2 == 0: return 0 return abs(num1 * num2) // gcd(num1, num2)"},{"question":"Write a python function to check if a given number is an Armstrong number of any degree. An Armstrong number is an integer such that the sum of its own digits raised to the power of the number of digits equals the number itself. For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.","solution":"def is_armstrong_number(num): Determine if the given number is an Armstrong number of any degree. Args: num (int): The number to check. Returns: bool: True if the number is an Armstrong number, False otherwise. digits = str(num) num_digits = len(digits) sum_of_powers = sum(int(digit) ** num_digits for digit in digits) return sum_of_powers == num"},{"question":"Write a python function to detect whether a string has balanced parentheses. For example, the string \\"((()))\\" has balanced parentheses, but the string \\"(()\\" does not.","solution":"def is_balanced_parentheses(s): Returns True if the string s has balanced parentheses, otherwise False. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to traverse a binary tree in inorder. Inorder traversal follows the 'left-root-right' order.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root): Perform inorder traversal of a binary tree. :param root: TreeNode, the root of the binary tree :return: List[int], the values of nodes in inorder result = [] def traverse(node): if not node: return traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Write a python function to check if a number is surrounded by even numbers in a list","solution":"def is_surrounded_by_evens(nums, index): Checks if the number at the given index in the list is surrounded by even numbers. Parameters: nums (list): List of integers index (int): Index of the number to check Returns: bool: True if the number is surrounded by even numbers, False otherwise if index <= 0 or index >= len(nums) - 1: # If index is at the boundaries of the list, it can't be surrounded return False return nums[index - 1] % 2 == 0 and nums[index + 1] % 2 == 0"},{"question":"Write a python function to find the maximum element in an array. This function should iterate through the array once (O(n)) and return the maximum element.","solution":"def find_maximum(arr): Returns the maximum element in an array. If the array is empty, it returns None. if not arr: return None max_element = arr[0] for element in arr: if element > max_element: max_element = element return max_element"},{"question":"Write a python function to check if a number is prime or not using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Uses the Sieve of Eratosthenes to check if a number n is prime. if n <= 1: return False sieve = [True] * (n + 1) sieve[0] = sieve[1] = False p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return sieve[n]"},{"question":"Write a python function to reverse a string using recursion. What is the base case and the recursive case in this function?","solution":"def reverse_string_recursive(s): Reverses a string using recursion. if len(s) == 0: return s else: return reverse_string_recursive(s[1:]) + s[0]"},{"question":"Write a python function to search an element in a binary search tree (BST) using recursion. The function should return True if the element is found, and False otherwise.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def search_bst(root, key): Recursively searches for a key in a Binary Search Tree (BST). :param root: TreeNode, the root of the BST :param key: int, the value to search for :return: bool, True if the key is found, False otherwise if root is None: return False if root.val == key: return True if key < root.val: return search_bst(root.left, key) else: return search_bst(root.right, key)"},{"question":"Write a python function to perform basic arithmetic operations like addition, subtraction, multiplication, and division based on the input operator and operands.","solution":"def arithmetic_operation(a, b, operator): Performs basic arithmetic operations: addition, subtraction, multiplication, and division based on the input operator. Parameters: a (int/float): The first operand. b (int/float): The second operand. operator (str): The operator as a string ('+', '-', '*', '/'). Returns: int/float: The result of the arithmetic operation. Raises: ValueError: If the operator is not one of '+', '-', '*', '/'. ZeroDivisionError: If division by zero is attempted. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return a / b else: raise ValueError(\\"Invalid operator. Supported operators are: '+', '-', '*', '/'.\\")"},{"question":"Write a python function to check if a given list contains duplicate values. If it does, return a list of redundant values (i.e., values that appear more than once). If not, return an empty list.","solution":"def find_duplicates(input_list): Check if a given list contains duplicate values. If it does, return a list of redundant values. If not, return an empty list. Parameters: input_list (list): The list to be checked for duplicates. Returns: list: A list containing duplicate values or an empty list if no duplicates are found. from collections import Counter counter = Counter(input_list) return [item for item, count in counter.items() if count > 1]"},{"question":"Write a python function to encode a string with a given Caesar cipher and decrypt the same using the same cipher.","solution":"def caesar_cipher_encode(text, shift): Encodes the given text using Caesar cipher with the given shift. result = \\"\\" for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') result += chr((ord(char) - shift_base + shift) % 26 + shift_base) else: result += char return result def caesar_cipher_decode(encoded_text, shift): Decodes the encoded text using Caesar cipher with the given shift. return caesar_cipher_encode(encoded_text, -shift)"},{"question":"Write a python function to generate the first \`N\` Fibonacci numbers in a list. The function should take \`N\` as an input parameter and return a list containing the first \`N\` Fibonacci numbers. For example, if \`N\` is 5, the function should return \`[0, 1, 1, 2, 3]\`.","solution":"def fibonacci(N): Generate the first N Fibonacci numbers. Args: N (int): The number of Fibonacci numbers to generate Returns: list: A list containing the first N Fibonacci numbers if N <= 0: return [] elif N == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < N: next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Write a python function to convert a given string to Pig Latin. Pig Latin takes a word and moves the first letter to the end of the word and adds \\"ay\\". For example, the word \\"pig\\" becomes \\"igpay\\"","solution":"def to_pig_latin(word): Converts a given word to Pig Latin. Parameters: word (str): The word to convert to Pig Latin. Returns: str: The word converted to Pig Latin. if not word: return \\"\\" # move the first letter to the end and add \\"ay\\" return word[1:] + word[0] + \\"ay\\""},{"question":"Write a python function to calculate the average of three numbers and return the result.","solution":"def average_of_three(a, b, c): Returns the average of three numbers a, b, and c. return (a + b + c) / 3"},{"question":"Write a python function to find the first non-repeating character in a string. If no such character is found, return the character 'n'.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If no non-repeating character is found, returns 'n'. character_count = {} # Count the occurrences of each character for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 # Find the first non-repeating character for char in s: if character_count[char] == 1: return char return 'n'"},{"question":"Write a python function to return the first character of a string in uppercase. For example, the function should return 'A' for the input string 'apple'.","solution":"def first_char_uppercase(s): Returns the first character of the string s in uppercase. If the string is empty, returns an empty string. if not s: return '' return s[0].upper()"},{"question":"Write a python function to calculate the power of a number using recursion and memoization to optimize the computation.","solution":"def power(x, n, memo=None): Calculate the power of a number using recursion and memoization. Parameters: x (int, float) - The base number. n (int) - The exponent. memo (dict) - A dictionary to store computed powers (default is None). Returns: float - The result of x raised to the power of n. if memo is None: memo = {} # Base case if n == 0: return 1 if n == 1: return x # Check if the result is already in the memo dictionary if n in memo: return memo[n] # If n is negative, convert the problem to a reciprocal multiplication if n < 0: memo[n] = 1 / power(x, -n, memo) return memo[n] # Recursive case: Compute the power using memoization half_n = n // 2 half_power = power(x, half_n, memo) result = half_power * half_power # If n is odd, multiply by x one more time if n % 2 != 0: result *= x memo[n] = result return result"},{"question":"Write a python function to check if a string is a pangram. A pangram is a sentence containing every letter of the alphabet at least once.","solution":"def is_pangram(s): Checks if the input string is a pangram. A pangram is a sentence containing every letter of the alphabet at least once. alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") s = s.lower() return alphabet <= set(s)"},{"question":"Write a python function to find the last index of an element in a list that is less than or equal to a given value. If no such element exists, return -1.","solution":"def last_index_leq(lst, value): Finds the last index of an element in the list that is less than or equal to the given value. Parameters: lst (list): The list of elements value: The value to compare the elements with Returns: int: The last index of an element that is less than or equal to the value, or -1 if no such element exists. for i in range(len(lst) - 1, -1, -1): if lst[i] <= value: return i return -1"},{"question":"Write a python function to assign each character in a string to a binary value of each corresponding character.","solution":"def string_to_binary(s): Convert each character in the string to its binary representation. Args: s (str): Input string Returns: dict: A dictionary where each character in the input string is a key and its binary value is the value. return {char: format(ord(char), '08b') for char in s}"},{"question":"Write a python function to find the factorial of a number. What is factorial of 5?","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result # Factorial of 5 factorial_of_5 = factorial(5)"},{"question":"Write a python function to strip all characters from a string except maintain all numbers, letters and special characters.","solution":"import re def strip_special_characters(text): Strips all characters from a string except numbers, letters, and special characters. # Regular expression to match all characters except numbers, letters, and special characters return re.sub(r'[^ws]', '', text)"},{"question":"Write a python function to perform inverse operations to your add_num function from the previous example. Subtract a number from a starting number, starting from zero. The function should take two parameters, the starting number and the number to subtract. It should return the result of the subtraction.","solution":"def subtract(start, number): Returns the result of subtracting \`number\` from \`start\`. return start - number"},{"question":"Write a python function to merge two sorted lists and return the merged list. The function should be able to handle lists with duplicate values and maintain the relative order of the elements.","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into one sorted list and return it. Parameters: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: Merged sorted list. merged_list = [] i = j = 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to find the maximum number of elements in a subarray that has the same first and last elements.","solution":"def max_length_subarray_with_same_ends(arr): Returns the maximum number of elements in a subarray that has the same first and last elements. Parameters: arr (list): A list of integers Returns: int: Maximum length of such subarray n = len(arr) if n == 0: return 0 max_len = 0 for i in range(n): for j in range(i, n): if arr[i] == arr[j]: max_len = max(max_len, j-i+1) return max_len"},{"question":"Write a python function to find the smallest positive integer that is evenly divisible by all the numbers from 1 to 20.","solution":"from math import gcd def lcm(a, b): Return the least common multiple of a and b. return a * b // gcd(a, b) def smallest_multiple(n): Returns the smallest positive integer that is evenly divisible by all the numbers from 1 to n. multiple = 1 for i in range(1, n + 1): multiple = lcm(multiple, i) return multiple def smallest_multiple_1_to_20(): Returns the smallest positive integer that is evenly divisible by all the numbers from 1 to 20. return smallest_multiple(20)"},{"question":"Write a python function to convert a given matrix into a list of tuples. Each tuple should represent a row in the matrix.","solution":"def matrix_to_tuples(matrix): Converts a given matrix (list of lists) into a list of tuples. Parameters: matrix (list of lists): The input matrix. Returns: list of tuples: The converted matrix as a list of tuples. return [tuple(row) for row in matrix]"},{"question":"Write a python function to check if a given binary tree is a perfect binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_perfect_binary_tree(root): def depth(node): d = 0 while node is not None: d += 1 node = node.left return d def check_perfect(node, d, level=0): if node is None: return True if node.left is None and node.right is None: return d == level + 1 if node.left is None or node.right is None: return False return check_perfect(node.left, d, level + 1) and check_perfect(node.right, d, level + 1) tree_depth = depth(root) return check_perfect(root, tree_depth)"},{"question":"Write a python function to reverse a list in place using a loop. The function should not return anything but should modify the list in place.","solution":"def reverse_list_in_place(lst): Reverses the given list in place using a loop. Parameters: lst (list): The list to be reversed. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to find the n-th Fibonacci number using recursion. The function should not use any loops or built-in Fibonacci functions.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a python function to identify the non-repeating characters in a given string. The function should return a string containing all the non-repeating characters in the input string, preserving their original order.","solution":"def non_repeating_characters(s): Returns a string containing all non-repeating characters from the input string s, preserving their original order. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 result = ''.join([char for char in s if char_count[char] == 1]) return result"},{"question":"Write a python function to flatten a list of lists. The function should handle lists of various depths and structures.","solution":"def flatten_list(nested_list): Flattens a list of lists into a single list flattened_list = [] def flatten(sub_list): for item in sub_list: if isinstance(item, list): flatten(item) else: flattened_list.append(item) flatten(nested_list) return flattened_list"},{"question":"Write a python function to calculate the sum of all even numbers from 1 to n using a loop. Also, demonstrate how you would test the function with some sample inputs.","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers from 1 to n. total_sum = 0 for number in range(1, n + 1): if number % 2 == 0: total_sum += number return total_sum"},{"question":"Write a python function to find all unique combinations of k numbers chosen from the set of numbers from 1 to n. The function should return a list of lists containing these combinations.","solution":"from itertools import combinations def combine(n, k): Returns all unique combinations of k numbers chosen from the set of numbers from 1 to n. return [list(c) for c in combinations(range(1, n + 1), k)]"},{"question":"Write a python function to count the occurrences of each character in a given string where the characters are case insensitive (i.e., 'A' and 'a' should be counted as the same character). You should ignore spaces and punctuation. Only consider alphabetic characters.","solution":"import string def count_char_occurrences(s): Counts the occurrences of each character in a given string. This function is case insensitive and only considers alphabetic characters. s = s.lower() s = ''.join(filter(str.isalpha, s)) char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to count the number of non-overlapping occurrences of a substring in a string.","solution":"def count_non_overlapping_occurrences(string, substring): Returns the number of non-overlapping occurrences of a substring in a string. return string.count(substring)"},{"question":"Write a python function to reverse a string by using slicing technique. Then, use this function to reverse a given string \\"Python Programming\\".","solution":"def reverse_string(s): Returns the reversed string using slicing technique. return s[::-1] # Reversing the given string \\"Python Programming\\" reversed_string = reverse_string(\\"Python Programming\\")"},{"question":"Write a python function to generate all possible subsets of a given set using recursion.","solution":"def generate_subsets(s): Generates all possible subsets of the provided set \`s\` using recursion. Parameters: s (set): A set of elements. Returns: list: A list of sets, each of which is a subset of \`s\`. def _generate_subsets(current, subset): if len(current) == 0: result.append(subset) else: element = current.pop() _generate_subsets(current[:], subset) _generate_subsets(current[:], subset | {element}) result = [] _generate_subsets(list(s), set()) return result"},{"question":"Write a python function to search for a target value within a sorted 2D array. Return 'Found' or 'Not Found'. The function should use binary search to achieve this.","solution":"def binary_search_2d(matrix, target): Searches for a target value within a sorted 2D array using binary search. Parameters: matrix (list of list of int): A sorted 2D array where each row and column is sorted in ascending order. target (int): The value to search for. Returns: str: 'Found' if the target is in the matrix, otherwise 'Not Found'. if not matrix or not matrix[0]: return 'Not Found' rows = len(matrix) cols = len(matrix[0]) left, right = 0, rows * cols - 1 while left <= right: mid = (left + right) // 2 mid_value = matrix[mid // cols][mid % cols] if mid_value == target: return 'Found' elif mid_value < target: left = mid + 1 else: right = mid - 1 return 'Not Found'"},{"question":"Write a python function to generate Fibonacci numbers up to n terms.","solution":"def fibonacci(n): Generates a list of Fibonacci numbers up to n terms. :param n: The number of terms. :return: A list of Fibonacci numbers up to n terms. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_list = [0, 1] for i in range(2, n): fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Write a python function to find the minimum number in a list. What should the function do if the list is empty?","solution":"def find_minimum(numbers): Returns the minimum number in a list. If the list is empty, raises a ValueError. if not numbers: raise ValueError(\\"The list is empty\\") return min(numbers)"},{"question":"Write a python function to find and print all the numbers in a list that are divisible by a given number without leaving a remainder.","solution":"def find_divisible_numbers(numbers, divisor): Returns a list of numbers from the input list that are divisible by the given divisor. :param numbers: List of integers :param divisor: The divisor to check divisibility :return: List of integers that are divisible by the divisor if divisor == 0: return [] return [number for number in numbers if number % divisor == 0]"},{"question":"Write a python function to check if a string is a palindrome忽略大小写","solution":"def is_palindrome(s): Checks if the given string is a palindrome, ignoring case. Args: s: str - the input string Returns: bool - True if the string is a palindrome, False otherwise # Convert the string to lower case s = s.lower() # Check if the string is equal to its reverse return s == s[::-1]"},{"question":"Write a python function to remove all duplicates from a given list while maintaining the order of elements. You should use a dictionary to help achieve this.","solution":"def remove_duplicates(input_list): Removes duplicates from a given list while maintaining the order of elements. Parameters: input_list (list): A list from which to remove duplicates. Returns: list: A list with duplicates removed and order maintained. seen = {} result = [] for item in input_list: if item not in seen: seen[item] = True result.append(item) return result"},{"question":"Write a python function to remove all the duplicate characters from a string while maintaining the order of their first occurrence. You can use any standard library.","solution":"def remove_duplicates(s): Removes duplicate characters from a string while maintaining the order of their first occurrence. Parameters: s (str): The input string. Returns: str: A new string with duplicate characters removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to convert a string to a list of unique words","solution":"def string_to_unique_words(input_string): Converts a string to a list of unique words. Args: input_string (str): The input string. Returns: list: A list of unique words. words = input_string.split() unique_words = list(set(words)) return unique_words"},{"question":"Write a python function to convert a decimal number to its corresponding binary number. Here's a sample decimal number \`10\` that should be converted to \`1010\`.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. return bin(n)[2:]"},{"question":"Write a python function to print \\"Hello, how are you?\\" when executed.","solution":"def greet(): Prints 'Hello, how are you?' to the console. print(\\"Hello, how are you?\\")"},{"question":"Write a python function to create a dictionary with key value pairs as <First letter of word>:<Word in sentence>.","solution":"def create_dict_from_sentence(sentence): Returns a dictionary where the keys are the first letters of each word in the sentence and the values are the corresponding words. words = sentence.split() return {word[0]: word for word in words}"},{"question":"Write a python function to find the sum of all the even Fibonacci numbers up to and including a given number \`n\`. The Fibonacci sequence starts with 0 and 1, and each number thereafter is the sum of the two preceding ones. How should your function handle cases where the input \`n\` is not a positive integer, such as when \`n\` is less than 2 or when \`n\` is not an integer?","solution":"def sum_even_fibonacci(n): Returns the sum of all even Fibonacci numbers up to and including n. If n is less than 2 or not an integer, returns 0. if not isinstance(n, int) or n < 2: return 0 a, b = 0, 1 sum_even = 0 while a <= n: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Write a python function to calculate the total number of ways to make change for a given amount using a set of coins. The function should also return the number of ways to make each denomination of change.","solution":"def coin_change_ways(amount, coins): Calculate the total number of ways to make change for a given amount using a set of coins. Also return the number of ways to make each denomination of change. Parameters: amount (int): The amount for which change is sought. coins (list): List of coin denominations available. Returns: tuple: A tuple containing the total number of ways to make change and a dictionary with number of ways for each amount. # Initialize a list to store the number of ways to make change for each amount up to \`amount\`. dp = [0] * (amount + 1) dp[0] = 1 # There is exactly one way to make 0 amount, which is using no coins. # Iterate over each coin and update the dp table for coin in coins: for x in range(coin, amount + 1): dp[x] += dp[x - coin] # Number of ways to make change for the given amount total_ways = dp[amount] # Create a dictionary for ways to make each denomination of change ways_per_amount = {i: dp[i] for i in range(amount + 1)} return total_ways, ways_per_amount"},{"question":"Write a python function to find the pair of numbers in a list that have the smallest difference.","solution":"def smallest_difference_pair(numbers): Finds the pair of numbers in the list that have the smallest difference. :params numbers: List of integers. :returns: Tuple consisting of pair of integers with the smallest difference. if len(numbers) < 2: return None numbers.sort() min_diff = float('inf') min_pair = None for i in range(len(numbers) - 1): diff = numbers[i + 1] - numbers[i] if diff < min_diff: min_diff = diff min_pair = (numbers[i], numbers[i + 1]) return min_pair"},{"question":"Write a python function to count all instances of the word \\"hello\\" in a given string, considering both upper and lower case. The function should also return the positions of these instances in the string.","solution":"def count_hello_instances(s): Counts all instances of the word 'hello' in a given string, considering both upper and lower case. Returns the count and the positions of these instances in the string. :param s: input string :return: tuple (count, positions) where count is the number of 'hello' instances and positions is a list of starting indices of 'hello' s_lower = s.lower() hello_str = 'hello' positions = [] start = 0 while start < len(s_lower): start = s_lower.find(hello_str, start) if start == -1: break positions.append(start) start += len(hello_str) count = len(positions) return count, positions"},{"question":"Write a python function to detect a cycle in a linked list. How can you do it using the Floyd's Cycle Finding Algorithm?","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detect_cycle(head): Detects if there's a cycle in the linked list. Uses Floyd's Cycle Finding Algorithm. Parameters: head (ListNode): Head of the linked list. Returns: bool: True if there's a cycle, False otherwise. slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a python function to count the total number of silence intervals between segments in a given list of time segments.","solution":"def count_silence_intervals(segments): Counts the total number of silence intervals between segments. Parameters: segments (list of tuple): A list of segments where each segment is represented by a tuple (start_time, end_time). Returns: int: The number of silence intervals between segments. if not segments: return 0 # Sort segments based on start_time segments.sort(key=lambda x: x[0]) count = 0 end_time = segments[0][1] for segment in segments[1:]: if segment[0] > end_time: count += 1 end_time = max(end_time, segment[1]) return count"},{"question":"Write a python function to determine if a given integer is a power of three. A number is considered a power of three if there exists an integer x such that 3^x = n.","solution":"def is_power_of_three(n): Determines if a given integer is a power of three. Args: n (int): The integer to check. Returns: bool: True if n is a power of three, False otherwise. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a python function to sort a list of integers based on the sum of their digits.","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. return sum(int(digit) for digit in str(abs(n))) def sort_by_digit_sum(lst): Returns a list of integers sorted by the sum of their digits. return sorted(lst, key=sum_of_digits)"},{"question":"Write a python function to print the numbers from 1 to 10 in a loop, but skip the number 5.","solution":"def print_numbers(): Prints numbers from 1 to 10, skipping the number 5. numbers = [] for i in range(1, 11): if i == 5: continue numbers.append(i) return numbers"},{"question":"Write a python function to get for any given integer n, the count of odd and even divisors of n.","solution":"def count_odd_even_divisors(n): Returns the count of odd and even divisors of the given integer n. Parameters: n (int): The integer to find divisors of. Returns: tuple: A tuple containing two integers. The first integer is the count of odd divisors, and the second integer is the count of even divisors. odd_count = 0 even_count = 0 for i in range(1, n + 1): if n % i == 0: if i % 2 == 0: even_count += 1 else: odd_count += 1 return (odd_count, even_count)"},{"question":"Write a python function to check if a given string is a permutation of a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward. A permutation is a rearrangement of the letters of a word or phrase into a new word or phrase.","solution":"def is_permutation_of_palindrome(s): Returns whether a given string is a permutation of a palindrome. A string is a permutation of a palindrome if at most one character has an odd count. from collections import Counter # Remove spaces and convert to lowercase for uniformity s = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be a permutation of a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Write a python function to perform postorder traversal on a binary tree. The function should be able to handle binary trees with a variable number of levels and nodes. Can you also provide an alternative recursive approach for postorder traversal?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def postorder_traversal(root): Perform iterative postorder traversal of a binary tree. Return the traversal as a list of values. if not root: return [] result, stack = [], [] last_visited = None while stack or root: if root: stack.append(root) root = root.left else: peek_node = stack[-1] if peek_node.right and last_visited != peek_node.right: root = peek_node.right else: result.append(peek_node.val) last_visited = stack.pop() return result def postorder_traversal_recursive(root): Perform recursive postorder traversal of a binary tree. Return the traversal as a list of values. result = [] def recurse(node): if not node: return recurse(node.left) recurse(node.right) result.append(node.val) recurse(root) return result"},{"question":"Write a python function to find duplicates in an array of integers. The function should return a list of all the duplicate numbers found. If there are no duplicates, the function should return an empty list.","solution":"def find_duplicates(arr): Returns a list of duplicates in the array. seen = set() duplicates = set() for num in arr: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a python function to find the maximum sum of a contiguous subarray (subarray with contiguous elements) within a one-dimensional array of numbers.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the maximum sum of a contiguous sub-sequence in an array.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous sub-sequence in an array. Parameters: arr (list of int): The input array. Returns: int: The maximum sum of a contiguous sub-sequence. if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Write a python function to determine if a given string can be formed by repeating a substring of it. For example, the string \\"abab\\" can be formed by repeating the substring \\"ab\\".","solution":"def can_form_by_repeating_substring(s): Determines if the given string can be formed by repeating a substring of it. Args: s (str): Input string Returns: bool: True if can be formed by repeating a substring, otherwise False if not s: return False doubled_s = (s + s)[1:-1] return doubled_s.find(s) != -1"},{"question":"Write a python function to reverse a given string. For example, if the input string is \\"coding\\", the output should be \\"gnidoc\\".","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a python function to find the largest divisors of an odd number less than itself, excluding 1 and the number itself, in binary format. The function should return a list of tuples, where each tuple contains an odd divisor and its corresponding binary representation.","solution":"def largest_odd_divisors_in_binary(n): Finds the largest odd divisors of an odd number less than itself, excluding 1 and the number itself, and returns a list of tuples where each tuple contains an odd divisor and its corresponding binary representation. if n <= 1 or n % 2 == 0: return [] divisors_and_binaries = [] for i in range(n-1, 1, -1): if i % 2 != 0 and n % i == 0: divisors_and_binaries.append((i, bin(i))) return divisors_and_binaries"},{"question":"Write a python function to validate a list of file paths and whether they contain any invalid characters. The function should return a dictionary where the file names are the keys and the results of the validation as values.","solution":"import re def validate_file_paths(file_paths): Validates a list of file paths. Returns a dictionary where the file names are the keys and the validation results (True for valid and False for invalid) are the values. invalid_characters_pattern = re.compile(r'[<>:\\"/|?*]') validation_results = {} for path in file_paths: file_name = path.split('/')[-1].split('')[-1] if invalid_characters_pattern.search(file_name): validation_results[file_name] = False else: validation_results[file_name] = True return validation_results"},{"question":"Write a python function to find all Armstrong numbers between 100 and 999.","solution":"def is_armstrong_number(number): Checks if a given number is an Armstrong number. An Armstrong number (also called a narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. For a 3-digit number abc, it is an Armstrong number if a^3 + b^3 + c^3 == abc. digits = [int(d) for d in str(number)] return sum(d ** 3 for d in digits) == number def find_armstrong_numbers(min_range=100, max_range=999): Finds all Armstrong numbers between min_range and max_range (inclusive). return [num for num in range(min_range, max_range + 1) if is_armstrong_number(num)]"},{"question":"Write a python function to determine if a given list of integers represents a valid permutation of the first n natural numbers. A valid permutation is one where each number from 1 to n appears exactly once in the list. For example, is_valid_permutation([1, 2, 3, 4, 5]) should return True, but is_valid_permutation([1, 2, 2, 4, 5]) should return False.","solution":"def is_valid_permutation(lst): Determines if the given list is a valid permutation of the first n natural numbers. Args: lst (List[int]): The list of integers to check. Returns: bool: True if lst is a valid permutation, False otherwise. n = len(lst) return sorted(lst) == list(range(1, n+1))"},{"question":"Write a python function to check if a list contains any duplicate numbers in it.","solution":"def contains_duplicates(numbers): Returns True if there are duplicate numbers in the list, otherwise False. return len(numbers) != len(set(numbers))"},{"question":"Write a python function to reverse a string, but only reverse the order of characters in words, not the order of words in a sentence. For example, \\"hello world\\" should become \\"olleh dlrow\\".","solution":"def reverse_characters_in_words(sentence): Reverses the order of characters in each word within the sentence, but keeps the order of words unchanged. words = sentence.split(\\" \\") reversed_words = [\\" \\".join([word[::-1] for word in words])] return \\" \\".join(reversed_words)"},{"question":"Write a python function to check if the parentheses in the given string are balanced.","solution":"def are_parentheses_balanced(s): Checks if the parentheses in the given string s are balanced. :param s: A string containing parentheses. :return: True if the parentheses are balanced, otherwise False. stack = [] mapping = {')': '(', '}': '{', ']': '['} for char in s: if char in mapping.values(): stack.append(char) elif char in mapping.keys(): if stack == [] or mapping[char] != stack.pop(): return False else: # Ignore all characters that are not parentheses continue return stack == []"},{"question":"Write a python function to merge two sorted lists into one sorted list. The function should return the merged list without using any additional space (except for a small amount of space for function variables).","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list without using additional space (except for function variables). merged_list = [] i, j = 0, 0 # Traverse both lists and insert smaller element from list1 or list2 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Collect the remaining elements of list1 (if any) while i < len(list1): merged_list.append(list1[i]) i += 1 # Collect the remaining elements of list2 (if any) while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to find the maximum element in a nested list using recursion.","solution":"def find_max_in_nested_list(nested_list): Returns the maximum element in a nested list using recursion. Parameters: nested_list (list): A nested list of elements Returns: int/float: The maximum element in the nested list max_value = float('-inf') # Initialize to the smallest value possible for element in nested_list: if isinstance(element, list): max_value = max(max_value, find_max_in_nested_list(element)) else: max_value = max(max_value, element) return max_value"},{"question":"Write a python function to find the missing number in an integer array, assuming the array contains unique integers from 1 to n, with one number missing.","solution":"def find_missing_number(arr): Given an array containing unique integers from 1 to n with one number missing, returns that missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a python function to return the lowest of three numbers. Lowest(num1, num2, num3).","solution":"def lowest(num1, num2, num3): Returns the lowest of three numbers. return min(num1, num2, num3)"},{"question":"Write a python function to detect a cycle in a linked list. A linked list has a cycle if, by following the next references, you end up back at the start. The function should return \`True\` if a cycle is detected, otherwise \`False\`.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Detects if a linked list has a cycle. Parameters: head (ListNode): The head of the linked list. Returns: bool: True if there is a cycle, False otherwise. if not head or not head.next: return False slow = head fast = head.next while fast and fast.next: if slow == fast: return True slow = slow.next fast = fast.next.next return False"},{"question":"Write a python function to get a list of files in a directory. You can assume the directory exists.","solution":"import os def list_files_in_directory(directory_path): Returns a list of file names in the given directory. Args: directory_path (str): Path to the directory. Returns: list: List of file names in the directory. return [f for f in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, f))]"},{"question":"Write a python function to determine if a string is a permutation of a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. A permutation is a rearrangement of letters. For example, the string \\"racecar\\" is a permutation of the palindrome \\"racecar\\".","solution":"def is_permutation_of_palindrome(s): Determines if the string s is a permutation of a palindrome. This function ignores spaces, punctuation, and capitalization. from collections import Counter import string # Normalize the string: remove spaces, punctuation, and convert to lowercase normalized_str = ''.join(char.lower() for char in s if char in string.ascii_letters) # Count the frequency of each character char_count = Counter(normalized_str) # Check the number of characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be a permutation of a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"Write a python function to perform a depth-first search on a binary tree. The function should return the values of the nodes in the order they were visited during the search.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def depth_first_search(root): Performs depth-first search (DFS) on a binary tree. Args: root (TreeNode): the root node of the binary tree Returns: List[int]: list of values in the order they were visited if root is None: return [] result = [] stack = [root] while stack: node = stack.pop() result.append(node.value) # Push right child first so that left child is processed first if node.right is not None: stack.append(node.right) if node.left is not None: stack.append(node.left) return result"},{"question":"Write a python function to find a specific string in a list of strings.","solution":"def find_string_in_list(string_list, target_string): Returns True if the target_string is found in string_list, otherwise False. :param string_list: List of strings to search in :param target_string: String to find in the list :return: Boolean indicating if the target_string is found return target_string in string_list"},{"question":"Write a python function to print the Fibonacci sequence up to the n-th number, where n is provided as input to the function. The function should print each number in the sequence on its own line.","solution":"def print_fibonacci(n): Prints the Fibonacci sequence up to the n-th number. a, b = 0, 1 for _ in range(n): print(a) a, b = b, a + b"},{"question":"Write a python function to solve a maze represented by a 2D list where 0 represents an obstacle, 1 represents a path, and the starting point is at (0,0). The function should return the maze with the path from the start to the end (if possible) marked.","solution":"def solve_maze(maze): Solve a maze represented as a 2D list where 0 is an obstacle and 1 is a path. The starting point is at (0, 0) and the ending point is at the bottom-right corner. The function returns the maze marked with the path from start to end with 2. if not maze or maze[0][0] == 0: return None rows, cols = len(maze), len(maze[0]) path = [] def is_safe(x, y): return 0 <= x < rows and 0 <= y < cols and maze[x][y] == 1 def solve(x, y): if x == rows - 1 and y == cols - 1: maze[x][y] = 2 path.append((x, y)) return True if is_safe(x, y): maze[x][y] = 2 path.append((x, y)) if solve(x + 1, y) or solve(x, y + 1): return True maze[x][y] = 1 path.pop() return False if solve(0, 0): return maze else: return None"},{"question":"Write a python function to determine the minimum number of operations required to transform one string into another using the minimum edit distance algorithm. This function should also return the alignment matrix that represents the steps of the algorithm.","solution":"def min_edit_distance(s1, s2): Calculate the minimum edit distance and return the alignment matrix. Args: s1: str: The source string. s2: str: The target string. Returns: tuple: (edit_distance: int, alignment_matrix: list of list of int) # Create a matrix to store the distances m, n = len(s1), len(s2) matrix = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the matrix with default values for i in range(m + 1): matrix[i][0] = i for j in range(n + 1): matrix[0][j] = j # Compute the distances for i in range(1, m + 1): for j in range(1, n + 1): cost = 0 if s1[i - 1] == s2[j - 1] else 1 matrix[i][j] = min(matrix[i - 1][j] + 1, # Deletion matrix[i][j - 1] + 1, # Insertion matrix[i - 1][j - 1] + cost) # Substitution return matrix[m][n], matrix"},{"question":"Write a python function to find the longest repeating substring in a string.","solution":"def longest_repeating_substring(s): Finds the longest repeating substring in a string. n = len(s) longest = \\"\\" # Helper function to check if two substrings match. def match_length(start1, start2): length = 0 while start2 + length < n and s[start1 + length] == s[start2 + length]: length += 1 return length for i in range(n): for j in range(i + 1, n): length = match_length(i, j) if length > len(longest): longest = s[i:i + length] return longest"},{"question":"Write a python function to implement code generation as follows.","solution":"def cube_list(int_list): Returns a new list with the cubes of the integers from the original list. Parameters: int_list (list): A list of integers. Returns: list: A list of cubes of the integers. return [x ** 3 for x in int_list]"},{"question":"Write a python function to find the largest number among the three given numbers without using the built-in maximum or min functions.","solution":"def largest_of_three(a, b, c): Returns the largest number among the three given numbers a, b, and c without using the built-in max or min functions. if (a >= b) and (a >= c): largest = a elif (b >= a) and (b >= c): largest = b else: largest = c return largest"},{"question":"Write a python function to rotate a list to the right by k steps. The list should not be modified in-place.","solution":"def rotate_list(nums, k): Rotate the list to the right by k steps. :param nums: List of elements to rotate. :param k: Number of steps to rotate the list. :return: A new list rotated k steps to the right. n = len(nums) if n == 0: return nums k = k % n return nums[-k:] + nums[:-k]"},{"question":"Write a python function to find the sum of all unique elements in a list. For example, in a list [3,3,4,4,5,5,6], the sum of all unique elements would be 6 since 6 is the only number that appears once in the list.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in a list. from collections import Counter element_count = Counter(lst) unique_elements = [element for element, count in element_count.items() if count == 1] return sum(unique_elements)"},{"question":"Write a python function to check for palindrome.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to find the number of unique paths from the top-left corner to the bottom-right corner of a matrix. You can only move either down or right at any point in time.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left to the bottom-right corner of a matrix. You can only move either down or right at any point in time. :param m: Number of rows in the matrix :param n: Number of columns in the matrix :return: Number of unique paths # Create a 2D list to store the number of unique paths to each cell dp = [[1]*n for _ in range(m)] # Iterate over the matrix starting from the cell (1,1) for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a python function to solve the problem where you have a list of integers, and your task is to count the number of unique elements in the list where the integer is divisible by 3. How can this be achieved?","solution":"def count_unique_divisible_by_three(nums): Returns the count of unique elements in the list that are divisible by 3. Parameters: nums (list): A list of integers. Returns: int: The count of unique elements divisible by 3. # Creating a set to store unique elements divisible by 3 divisible_by_three = {num for num in nums if num % 3 == 0} # Returning the count of unique elements return len(divisible_by_three)"},{"question":"Write a python function to simulate a game where a player can choose from three actions: attack, defend, or use a potion. Each action has a different result and the player's decision affects the outcome of the game. The game should continue until the player either chooses to stop or loses all their health.","solution":"import random class Game: def __init__(self): self.player_health = 100 self.enemy_health = 100 self.player_alive = True def attack(self): damage = random.randint(5, 15) self.enemy_health -= damage print(f\\"Player attacks! Enemy takes {damage} damage.\\") self.check_enemy_health() def defend(self): print(\\"Player defends! Next attack will have reduced damage.\\") self.take_damage(defend=True) def potion(self): heal = random.randint(10, 20) self.player_health += heal if self.player_health > 100: self.player_health = 100 print(f\\"Player uses a potion and heals {heal} health.\\") def take_damage(self, defend=False): damage = random.randint(5, 15) if defend: damage //= 2 self.player_health -= damage if not defend: print(f\\"Player takes {damage} damage from enemy attack.\\") self.check_player_health() def check_player_health(self): if self.player_health <= 0: self.player_alive = False print(\\"Player has been defeated!\\") def check_enemy_health(self): if self.enemy_health <= 0: print(\\"Enemy has been defeated!\\") def play_turn(self, action): if action == 'attack': self.attack() elif action == 'defend': self.defend() elif action == 'potion': self.potion() else: print(\\"Invalid action! Choose 'attack', 'defend', or 'potion'.\\") def is_game_over(self): return not self.player_alive or self.enemy_health <= 0"},{"question":"Write a python function to check if all elements in a list are either all positive or all negative. An empty list should return \`False\`.","solution":"def all_same_sign(lst): Returns True if all elements in the list are either all positive or all negative. Returns False for an empty list or if elements have mixed signs. if not lst: return False pos_count = sum(1 for x in lst if x > 0) neg_count = sum(1 for x in lst if x < 0) return pos_count == len(lst) or neg_count == len(lst)"},{"question":"Write a python function to remove duplicates from a list. The solution should be efficient in terms of time and space complexity.","solution":"def remove_duplicates(lst): Removes duplicates from the list efficiently. return list(dict.fromkeys(lst))"},{"question":"Write a python function to print all path from root to leaf node to n-ary tree.","solution":"class TreeNode: def __init__(self, val): self.val = val self.children = [] def find_paths(root): Prints all paths from root to leaf in an n-ary tree. Each path is a list of nodes from the root to a leaf. def dfs(node, path): # Append the current node to the path path.append(node.val) # If this is a leaf node, print the path if not node.children: paths.append(list(path)) else: # Recursively call dfs for each child for child in node.children: dfs(child, path) # Backtrack: remove the current node from the path path.pop() paths = [] if root: dfs(root, []) for path in paths: print(path) return paths"},{"question":"Write a python function to return the sum of the two smallest integers in a given list of integers.","solution":"def sum_of_two_smallest_integers(numbers): Returns the sum of the two smallest integers in the given list of integers. if len(numbers) < 2: raise ValueError(\\"List must contain at least two integers\\") sorted_numbers = sorted(numbers) return sorted_numbers[0] + sorted_numbers[1]"},{"question":"Write a python function to find the number of unique triplets in an array that sum to zero.","solution":"def three_sum(nums): Returns the number of unique triplets in the array that sum to zero. :param nums: List of integers :type nums: List[int] :return: Number of unique triplets that sum to zero :rtype: int nums.sort() triplets = set() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicate values left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif total < 0: left += 1 else: right -= 1 return len(triplets)"},{"question":"Write a python function to sort a list of names in ascending order using the bubble sort algorithm. The function should take a list of names as input and return the sorted list of names in ascending order.","solution":"def bubble_sort_names(names_list): Sort a list of names using bubble sort algorithm. :param names_list: List of names to be sorted :return: Sorted list of names in ascending order n = len(names_list) for i in range(n): for j in range(0, n - i - 1): if names_list[j] > names_list[j + 1]: names_list[j], names_list[j + 1] = names_list[j + 1], names_list[j] return names_list"},{"question":"Write a python function to reverse a string using a stack and convert the reversed string to uppercase.","solution":"def reverse_string_to_uppercase(s): Reverses the input string using a stack and converts the reversed string to uppercase. stack = [] # Push all characters of string to stack for char in s: stack.append(char) # Pop all characters from stack and form the reversed string reversed_str = '' while stack: reversed_str += stack.pop() # Convert the reversed string to uppercase return reversed_str.upper()"},{"question":"Write a python function to find a missing number in an array that contains all distinct numbers from 1 to n+1. The array is not sorted. For example, if the array is [3, 1, 4], the missing number is 2.","solution":"def find_missing_number(arr): Finds the missing number in an array containing distinct numbers from 1 to n+1. Parameters: arr (list): List of integers from 1 to n+1 with one number missing. Returns: int: The missing number. n = len(arr) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a python function to find the nearest smaller and greater elements of a given element in an array.","solution":"def find_nearest_elements(array, element): Finds the nearest smaller and greater elements of a given element in an array. Args: array (list): A list of integers. element (int): The element to find the nearest smaller and greater elements for. Returns: tuple: A tuple consisting of the nearest smaller element and the nearest greater element. If there is no smaller or greater element, return None for that position in the tuple. smaller = None greater = None for num in array: if num < element: if smaller is None or element - num < element - smaller: smaller = num elif num > element: if greater is None or num - element < greater - element: greater = num return (smaller, greater)"},{"question":"Write a python function to find the minimum number of coins that you need to make up a certain amount.","solution":"def min_coins(coins, amount): Given a list of coin denominations and an amount, this function returns the minimum number of coins needed to make up that amount. If the amount cannot be made up by any combination of the coins, return -1. # Initialize an array to store the minimum coins needed for each amount up to the target amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make the amount 0 # Iterate through each coin and update the dp array accordingly for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still infinity, it means it's not possible to make that amount with the given coins return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to find the maximum length of a contiguous subarray that sums to a given value \`k\`.","solution":"def max_subarray_len(nums, k): Returns the maximum length of a contiguous subarray that sums to k. sum_map = {} current_sum = 0 max_length = 0 for i in range(len(nums)): current_sum += nums[i] if current_sum == k: max_length = i + 1 if (current_sum - k) in sum_map: max_length = max(max_length, i - sum_map[current_sum - k]) if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"Write a python function to display the Fibonacci series up to n terms. The Fibonacci series starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns a list containing Fibonacci series up to n terms. if n <= 0: return [] elif n == 1: return [0] fib_series = [0, 1] while len(fib_series) < n: fib_series.append(fib_series[-1] + fib_series[-2]) return fib_series"},{"question":"Write a python function to generate the nth Fibonacci number using a dynamic programming approach. The function should take the position \`n\` as input and return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number using a dynamic programming approach. Parameters: n (int): The position of the Fibonacci number to be returned. Returns: int: The nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python function to count the number of words in a string, considering alphanumeric characters as part of words, and assuming words are separated by whitespace. You can assume that the string does not contain any punctuation and is not empty. The function should return the total number of words in the string.","solution":"def count_words(sentence): Returns the number of words in the given string. Words are considered as sequences of alphanumeric characters separated by whitespace. words = sentence.split() return len(words)"},{"question":"Write a python function to return reversing a string without using any built-in functions or methods for string reversal.","solution":"def reverse_string(s): Returns the reverse of the input string s without using any built-in reverse functions. reversed_s = '' for i in range(len(s) - 1, -1, -1): reversed_s += s[i] return reversed_s"},{"question":"Write a python function to find the count of specific characters in a string.","solution":"def count_specific_characters(input_string, specific_characters): Returns the count of specific characters in the input string. :param input_string: The string to search in. :param specific_characters: The characters to count in the input string. :return: A dictionary with characters as keys and their respective counts as values. count_dict = {} for char in specific_characters: count_dict[char] = input_string.count(char) return count_dict"},{"question":"Write a python function to print all even numbers from 1 to 100 using a while loop.","solution":"def print_even_numbers(): Prints all even numbers from 1 to 100 using a while loop. num = 1 while num <= 100: if num % 2 == 0: print(num) num += 1"},{"question":"Write a python function to count the number of elements from a list that are not repeated. In other words, you want to count how many elements in the list appear exactly once.","solution":"def count_unique_elements(lst): Returns the count of elements in the list that appear exactly once. from collections import Counter element_counter = Counter(lst) unique_count = sum(1 for count in element_counter.values() if count == 1) return unique_count"},{"question":"Write a python function to find the second smallest element in a list. If there is no second smallest element, return \`None\`. The function should be efficient and work for any list of integers.","solution":"def second_smallest(numbers): Returns the second smallest element in the list. If there is no second smallest element, returns None. if len(numbers) < 2: return None first, second = float('inf'), float('inf') for num in numbers: if num < first: first, second = num, first elif first < num < second: second = num return second if second != float('inf') else None"},{"question":"Write a python function to calculate and return the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. The function should avoid using recursion to optimize for larger values of n.","solution":"def fibonacci(n): Returns the nth Fibonacci number. n: the position in the Fibonacci sequence (0-indexed) if n < 0: raise ValueError(\\"n must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the minimum value and its location in a list. The function should return a tuple containing the minimum value and its index. If the list is empty, the function should return (None, None).","solution":"def find_min_value_and_index(lst): Returns a tuple containing the minimum value in the list and its index. If the list is empty, returns (None, None). Parameters: lst (list): The list to search within. Returns: tuple: A tuple containing the minimum value and its index in the form (min_value, index). if not lst: return (None, None) min_value = min(lst) min_index = lst.index(min_value) return (min_value, min_index)"},{"question":"Write a python function to merge two lists using list comprehension. Provide an example usage of this function.","solution":"def merge_lists(list1, list2): Merges two lists using list comprehension. Args: list1 (list): First list. list2 (list): Second list. Returns: list: A new list containing elements from both lists. return [item for sublist in (list1, list2) for item in sublist] # Example usage: # merged_list = merge_lists([1, 2, 3], [4, 5, 6]) # print(merged_list) # Output: [1, 2, 3, 4, 5, 6]"},{"question":"Write a python function to find the maximum sum of a subarray within a given array. The function should return the maximum sum and the starting and ending indices of the subarray that yields this maximum sum.","solution":"def max_subarray_sum(arr): Find the maximum sum of a subarray within a given array. Parameters: arr (list): List of integers Returns: tuple: maximum sum, starting index, ending index if not arr: return 0, -1, -1 max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Write a python function to find the missing number in a list of numbers from 1 to n. The function should take the list as input and return the missing number. For example, if the input list is [1, 2, 4, 5], then the function should return 3, as 3 is the missing number.","solution":"def find_missing_number(nums): Finds the missing number in the given list of numbers from 1 to n. Args: nums (list): A list of integers from 1 to n with one number missing. Returns: int: The missing number. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Write a python function to convert the given string to uppercase. The function should take a string as input and return the uppercase version of the string.","solution":"def to_uppercase(s): Returns the uppercase version of the input string s. return s.upper()"},{"question":"Write a python function to remove duplicates from a given string s.","solution":"def remove_duplicates(s): Removes duplicates from the given string s while preserving the order of first occurrences. Args: s (str): The input string. Returns: str: A string with duplicates removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to count the number of times a given substring appears in a string, case-insensitively. The function should be named \`count_substring_case_insensitive\` and should have two parameters: \`main_string\` and \`sub_string\`.","solution":"def count_substring_case_insensitive(main_string, sub_string): Returns the count of appearances of a substring in the main_string, case-insensitively. return main_string.lower().count(sub_string.lower())"},{"question":"Write a python function to reverse a list in place without using Python's built-in reverse methods. You should also avoid creating a new list. The function should take a list as an argument and reverse it directly.","solution":"def reverse_list_in_place(lst): Reverses the given list in place without using built-in reverse methods. Parameters: lst (list): The list to reverse. Returns: None: The list is reversed in place. start = 0 end = len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1"},{"question":"Write a python function to find the second smallest number in a given list. If the list is empty or all elements are the same, the function should return None.","solution":"def second_smallest(numbers): Returns the second smallest number in a given list. If the list is empty or all elements are the same, returns None. if len(numbers) < 2: return None first, second = float('inf'), float('inf') for number in numbers: if number < first: first, second = number, first elif first < number < second: second = number if second == float('inf'): return None return second"},{"question":"Write a python function to extract the first three characters of a string. If the string is shorter than three characters, return the whole string.","solution":"def extract_first_three_characters(s): Returns the first three characters of the string s. If the length of the string is less than three, returns the entire string. return s[:3]"},{"question":"Write a python function to compute the Fibonacci sequence up to the nth term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first 10 terms of the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34. Write the function to return a list of the Fibonacci sequence up to the nth term.","solution":"def fibonacci(n): Returns a list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to convert a string to camel case using regular expressions.","solution":"import re def to_camel_case(snake_str): Converts a snake_case string to camelCase using regular expressions. components = snake_str.split('_') # Capitalize the first letter of each component except the first one camel_case_string = components[0] + ''.join(x.title() for x in components[1:]) return camel_case_string"},{"question":"Write a python function to count and return the first 'n' numbers with at most 'n' distinct digits","solution":"def count_numbers_with_at_most_n_distinct_digits(n): Counts and returns the first 'n' numbers with at most 'n' distinct digits. def has_n_or_fewer_distinct_digits(num, n): distinct_digits = set(str(num)) return len(distinct_digits) <= n result = [] num = 0 while len(result) < n: if has_n_or_fewer_distinct_digits(num, n): result.append(num) num += 1 return result"},{"question":"Write a python function to check if the input string is a valid email address.","solution":"import re def is_valid_email(email): Checks if the input string is a valid email address. Args: email (str): The input email address to validate. Returns: bool: True if the email is valid, False otherwise. # Regular expression for validating an Email regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' # If the string passed the regex it returns True, else False return re.match(regex, email) is not None"},{"question":"Write a python function to find the duplicates in a given list. Your function should return a list of duplicates, not including duplicates in the result list itself. For example, if the input list is [1, 2, 2, 3, 4, 4, 5], your function should return [2, 3, 4].","solution":"def find_duplicates(lst): Returns a list of duplicates in the input list \`lst\`. Each duplicate will appear only once in the result list. Args: lst: A list of elements (they must be hashable). Returns: A list of duplicate elements. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to find the maximum number of consecutive 1s in a binary string. For example, given the string \\"1101011101111\\", the function should return 4, since there are four consecutive 1s at the end of the string.","solution":"def max_consecutive_ones(binary_string): Returns the maximum number of consecutive 1s in a binary string. max_count = 0 current_count = 0 for char in binary_string: if char == '1': current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"Write a python function to check if a string \`s\` contains only numeric characters.","solution":"def is_numeric(s): Checks if the string s contains only numeric characters. Args: s (str): The string to check. Returns: bool: True if the string is numeric, False otherwise. return s.isnumeric()"},{"question":"Write a python function to find the first occurrence of a given substring in a string, and return the starting index of the substring if found, otherwise -1. You should also include a simple test to ensure the function works correctly.","solution":"def find_substring(main_string, sub_string): Returns the index of the first occurrence of sub_string in main_string. If sub_string is not found, returns -1. return main_string.find(sub_string)"},{"question":"Write a python function to detect and count the number of distinct consecutive pairs in a given list of integers.","solution":"def count_distinct_consecutive_pairs(lst): Returns the number of distinct consecutive pairs in a given list of integers. if len(lst) < 2: return 0 consecutive_pairs = set() for i in range(len(lst) - 1): pair = (lst[i], lst[i + 1]) consecutive_pairs.add(pair) return len(consecutive_pairs)"},{"question":"Write a python function to generate a list of Fibonacci numbers up to a given limit. The function should take the limit as an input parameter and return a list of Fibonacci numbers up to that limit.","solution":"def generate_fibonacci(limit): Generate a list of Fibonacci numbers up to the given limit. Parameters: limit (int): The upper limit for the Fibonacci sequence. Returns: list: A list of Fibonacci numbers up to the given limit. fibonacci_numbers = [] if limit < 0: return fibonacci_numbers a, b = 0, 1 while a <= limit: fibonacci_numbers.append(a) a, b = b, a + b return fibonacci_numbers"},{"question":"Write a python function to find the number of ways to represent a given number as a sum of positive integers where each number in the sum must be a prime number.","solution":"def primes_up_to(n): Helper function to generate a list of primes up to n (inclusive). if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n + 1, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def count_prime_sum_ways(n): Returns the number of ways to represent the given number 'n' as a sum of positive integers where each integer in the sum must be a prime number. primes = primes_up_to(n) dp = [0] * (n + 1) dp[0] = 1 for prime in primes: for i in range(prime, n + 1): dp[i] += dp[i - prime] return dp[n]"},{"question":"Write a python function to calculate the derivative of a polynomial, represented as a list of coefficients. The coefficients are in increasing order of power, i.e., [a0, a1, a2, ..., an] corresponds to a polynomial a0 + a1*x + a2*x^2 + ... + an*x^n. Your function should return the derivative of this polynomial in the same format.","solution":"def derivative(poly): Calculate the derivative of a polynomial represented as a list of coefficients. Args: - poly (list of float): Coefficients of the polynomial in increasing order of power. Returns: - list of float: Coefficients of the derivative of the polynomial. derived_poly = [i * poly[i] for i in range(1, len(poly))] return derived_poly"},{"question":"Write a python function to reverse a list of integers in-place. You should not create any additional lists or data structures.","solution":"def reverse_list_in_place(lst): Reverses a list of integers in-place. left, right = 0, len(lst) - 1 while left < right: # Swap the elements lst[left], lst[right] = lst[right], lst[left] # Move towards the center left += 1 right -= 1"},{"question":"Write a python function to convert a string to a list of words, where words are separated by a single space or a comma.","solution":"def string_to_list_of_words(s): Converts a string to a list of words. Words are separated by a single space or a comma. Parameters: s (str): The input string to convert. Returns: list: A list of words. return [word.strip() for word in s.replace(',', ' ').split()]"},{"question":"Write a python function to format a given date string from 'YYYY-MM-DD' to 'DD-MM-YYYY' using datetime module.","solution":"from datetime import datetime def format_date(date_string): Formats a date string from 'YYYY-MM-DD' to 'DD-MM-YYYY'. Parameters: date_string (str): Date string in the format 'YYYY-MM-DD'. Returns: str: Date string in the format 'DD-MM-YYYY'. # Parse the input date string to a datetime object date_object = datetime.strptime(date_string, '%Y-%m-%d') # Format the datetime object to the desired string format formatted_date = date_object.strftime('%d-%m-%Y') return formatted_date"},{"question":"Write a python function to convert month number to month name.","solution":"def month_number_to_name(month_num): Converts a month number (1-12) to its corresponding month name. Parameters: month_num (int): The month number (1-12) Returns: str: The name of the month, or 'Invalid month number' if the number is not in the range 1-12. months = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] if 1 <= month_num <= 12: return months[month_num - 1] else: return 'Invalid month number'"},{"question":"Write a python function to multiply all the elements in a list. I'm looking for a solution that is efficient and handles any list size.","solution":"def multiply_list_elements(lst): Multiplies all the elements in a list. Parameters: lst (list): A list of numbers. Returns: int/float: The product of all the numbers in the list. result = 1 for num in lst: result *= num return result"},{"question":"Write a python function to display all the numbers which are divisible by both 5 and 7 in a given range.","solution":"def numbers_divisible_by_5_and_7(start, end): Returns a list of numbers in the range [start, end] that are divisible by both 5 and 7. result = [] for num in range(start, end + 1): if num % 5 == 0 and num % 7 == 0: result.append(num) return result"},{"question":"Write a python function to find and count the number of substrings in a given string that contain all distinct characters.","solution":"def count_distinct_substrings(s): Counts the number of substrings in the given string that contain all distinct characters. Parameters: s (str): The input string Returns: int: The number of substrings with all distinct characters def has_all_unique_chars(sub): return len(set(sub)) == len(sub) count = 0 for i in range(len(s)): for j in range(i + 1, len(s) + 1): if has_all_unique_chars(s[i:j]): count += 1 return count"},{"question":"Write a python function to remove the first occurrence of a specific character from a given string. The function should return the modified string.","solution":"def remove_first_occurrence(s, char): Removes the first occurrence of a specific character from a given string. Parameters: s (str): The input string. char (str): The character to remove. Returns: str: The modified string with the first occurrence of char removed. index = s.find(char) if index != -1: return s[:index] + s[index + 1:] return s"},{"question":"Write a python function to calculate the number of ways to split a given number into non-negative integers that sum up to the original number. The function should take two parameters: the target number and the maximum depth of the recursion. The maximum depth represents the maximum number of elements in the partition.","solution":"def count_partitions(target, max_depth): Calculate the number of ways to split a given number into non-negative integers that sum up to the original number with a maximum number of elements (depth) in the partition. :param target: The original number to be partitioned. :param max_depth: The maximum number of elements in the partition. :return: Number of ways to partition the number. def helper(n, k): # Base cases if n == 0: return 1 if n < 0 or k == 0: return 0 # Include k in the partition or exclude it return helper(n - k, k) + helper(n, k - 1) return helper(target, max_depth)"},{"question":"Write a python function to remove all occurrences of list items, except for the last one. You can use any Python data structure to solve this (strings, arrays, lists, etc.).","solution":"def remove_all_occurrences_except_last(lst): Removes all occurrences of each item in the list except for the last one. Args: lst (list): The list from which to remove occurrences. Returns: list: The list with only the last occurrence of each item remaining. seen = set() result = [] # Traverse the list from the end to the beginning for item in reversed(lst): if item not in seen: seen.add(item) result.append(item) # Reverse the result to maintain the original order result.reverse() return result"},{"question":"Write a python function to convert temperatures from Fahrenheit to Celsius and vice versa. The function should accept two parameters: the temperature value and the unit of the input temperature. The function should return the converted temperature along with the unit of the converted temperature. For Fahrenheit to Celsius conversion, use the formula: C = (F - 32) * 5/9. For Celsius to Fahrenheit conversion, use the formula: F = C * 9/5 + 32. The function should handle invalid inputs and return an appropriate error message.","solution":"def convert_temperature(value, unit): Converts temperature from Fahrenheit to Celsius and vice versa. Parameters: value (float): The temperature value to be converted. unit (str): The unit of the input temperature, either \\"F\\" for Fahrenheit or \\"C\\" for Celsius. Returns: tuple: A tuple containing the converted temperature value and the unit of the converted temperature. If the input unit is invalid, returns a string with an error message. if unit not in ['F', 'C']: return \\"Invalid unit. Please use 'F' for Fahrenheit or 'C' for Celsius.\\" if unit == 'F': celsius = (value - 32) * 5 / 9 return (celsius, 'C') elif unit == 'C': fahrenheit = value * 9 / 5 + 32 return (fahrenheit, 'F')"},{"question":"Write a python function to implement a stack data structure using a list and provide operations like push, pop, and peek.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.is_empty(): return self.items.pop() return None # Return None if the stack is empty def peek(self): if not self.is_empty(): return self.items[-1] return None # Return None if the stack is empty def is_empty(self): return len(self.items) == 0 def size(self): return len(self.items)"},{"question":"Write a python function to implement a stack data structure.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.is_empty(): return self.items.pop() else: raise IndexError(\\"pop from empty stack\\") def peek(self): if not self.is_empty(): return self.items[-1] else: raise IndexError(\\"peek from empty stack\\") def is_empty(self): return len(self.items) == 0 def size(self): return len(self.items)"},{"question":"Write a python function to find the single number in a list that appears only once, when all other numbers appear exactly twice. The function should have a time complexity of O(n) and constant space complexity.","solution":"def single_number(nums): Finds the single number in a list where every other number appears twice. single = 0 for num in nums: single ^= num return single"},{"question":"Write a python function to reverse a list. The list can contain any data type including integers, strings, and floats. The function should return the reversed list.","solution":"def reverse_list(lst): Returns the reversed version of the input list. Parameters: lst (list): The list to be reversed. Returns: list: The reversed list. return lst[::-1]"},{"question":"Write a python function to calculate the Fibonacci sequence up to the Nth number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Can you provide a function that generates the Fibonacci sequence up to a given number N?","solution":"def fibonacci(n): Calculates the Fibonacci sequence up to the Nth number. Parameters: n (int): The position in Fibonacci sequence to calculate up to. Returns: list: A list containing the Fibonacci sequence up to the Nth number. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to calculate the factorial of a given number n. Analyze the time complexity of your function.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result # Time complexity analysis: # The time complexity of this function is O(n) because it involves a single loop that iterates from 2 to n."},{"question":"Write a python function to find the minimum number of coins required to make up a given amount of money using greedy algorithm.","solution":"def min_coins(amount): Returns the minimum number of coins required to make up the given amount using greedy algorithm. The coin denominations used are: 1, 5, 10, 25 (typically US coin denominations). coins = [25, 10, 5, 1] coin_count = 0 for coin in coins: coin_count += amount // coin amount %= coin return coin_count"},{"question":"Write a python function to convert a string to a list of characters. In the function, handle cases when the input is not a string. I'm expecting a response of a list with each character of the string as an element.","solution":"def string_to_char_list(input_string): Converts a string to a list of characters. If the input is not a string, raises a ValueError. Parameters: input_string (str): The string to be converted. Returns: list: A list of characters. if not isinstance(input_string, str): raise ValueError(\\"Input must be a string\\") return list(input_string)"},{"question":"Write a python function to return the middle character of a string if the length of the string is odd, otherwise return the two middle characters.","solution":"def get_middle_character(s): Returns the middle character(s) of the string \`s\`. If the length of the string is odd, the middle character is returned. If the length is even, the two middle characters are returned. length = len(s) middle = length // 2 if length % 2 == 0: # String length is even return s[middle - 1:middle + 1] else: # String length is odd return s[middle]"},{"question":"Write a python function to handle POST requests in Flask.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/post', methods=['POST']) def handle_post_request(): Handle POST request and return the data sent in JSON format. if request.is_json: data = request.get_json() return jsonify(data), 200 return jsonify({\\"error\\": \\"Request must be JSON\\"}), 400"},{"question":"Write a python function to find the maximum and minimum values from a list of numbers without using any built-in functions like max() and min(). You should also avoid using sorting or other list manipulation functions. You may only use basic iteration and comparison operations.","solution":"def find_max_min(numbers): Returns a tuple containing the maximum and minimum values in the list of numbers. Parameters: numbers (list): A list of numbers. Returns: tuple: A tuple containing the maximum and minimum values. if not numbers: raise ValueError(\\"The list is empty\\") max_val = numbers[0] min_val = numbers[0] for num in numbers[1:]: if num > max_val: max_val = num if num < min_val: min_val = num return (max_val, min_val)"},{"question":"Write a python function to calculate the total cost of an item after including tax. The function should accept three arguments: the original price of the item, the tax rate, and a boolean indicating whether the item is a luxury item that is subject to an additional 10% surcharge on top of the regular tax rate. If the item is not a luxury item, the function simply calculates the total cost using the regular tax rate. If the item is a luxury item, the function adds an extra 10% surcharge to the tax rate before calculating the total cost.","solution":"def calculate_total_cost(original_price, tax_rate, is_luxury_item): Calculates the total cost of an item after including tax. Parameters: - original_price (float): The original price of the item. - tax_rate (float): The tax rate as a percentage (e.g., 5 for 5%). - is_luxury_item (bool): Whether the item is a luxury item, which incurs an additional 10% surcharge. Returns: - total_cost (float): The total cost of the item after tax. if is_luxury_item: tax_rate += 10 tax_amount = original_price * (tax_rate / 100) total_cost = original_price + tax_amount return total_cost"},{"question":"Write a python function to find the maximum and minimum values of a list using the for loop.","solution":"def find_max_and_min(lst): Returns a tuple of the maximum and minimum values in the list. if not lst: # Handle empty list case return None, None max_val = lst[0] min_val = lst[0] for num in lst: if num > max_val: max_val = num if num < min_val: min_val = num return max_val, min_val"},{"question":"Write a python function to calculate the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(n) = F(n-1) + F(n-2), with initial conditions F(0) = 0 and F(1) = 1. Your function should take an integer 'n' and return the nth Fibonacci number. Make sure to handle edge cases, such as when 'n' is zero or one.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: an integer representing the position in the Fibonacci sequence :return: the nth Fibonacci number if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return b"},{"question":"Write a python function to find the all the indices of a target value in a list. The function should return a list of indices where the target value appears in the input list. If the target value is not found, return an empty list.","solution":"def find_indices(input_list, target): Returns a list of indices where the target value appears in the input list. If the target value is not found, returns an empty list. return [index for index, value in enumerate(input_list) if value == target]"},{"question":"Write a python function to solve the \\"Two Sum\\" problem using a hash map. The function takes a list of integers and a target integer, and returns the indices of the two numbers such that they add up to the target.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. :param nums: List of integers :param target: Target integer :return: A list with two indices num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a python function to calculate the product of two numbers without using the \\"*\\" operator. You can only use integers and bit manipulations. How can this be achieved?","solution":"def multiply(a, b): Returns the product of a and b by bit manipulation. result = 0 negative_result = False if a < 0: negative_result = not negative_result a = -a if b < 0: negative_result = not negative_result b = -b while b > 0: if b & 1: result += a a <<= 1 b >>= 1 if negative_result: result = -result return result"},{"question":"Write a python function to find the frequency of each word in a given sentence. The function should return a dictionary where the keys are the words and the values are their respective frequencies. Assume the input sentence is a string containing words separated by spaces, and punctuation does not matter. For example, 'Hello world hello!' should return {'Hello': 2, 'world': 1}.","solution":"import re from collections import defaultdict def word_frequency(sentence): Returns a dictionary with the frequency of each word in the given sentence. Punctuation is ignored, and words are treated case-insensitively. words = re.findall(r'bw+b', sentence.lower()) frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"Write a python function to extract the maximum value from a list of dictionaries where each dictionary contains keys 'apple', 'banana', and 'cherry'. Ensure the function handles cases where some dictionaries might be missing one or more keys.","solution":"def extract_max_value(dicts): Extracts the maximum value from a list of dictionaries each containing keys 'apple', 'banana', and 'cherry'. Handles cases where some dictionaries might be missing one or more keys. Args: dicts (list): List of dictionaries containing keys 'apple', 'banana', and 'cherry' Returns: int or float: The maximum value found in the dictionaries. Returns None if the list is empty or contains no values. max_value = None for d in dicts: # Iterate through the values and check against current max_value for key in ['apple', 'banana', 'cherry']: if key in d and (max_value is None or d[key] > max_value): max_value = d[key] return max_value"},{"question":"Write a python function to count the number of emails in a given email list that contain a specific keyword. The keyword is case-insensitive, and the search should be performed in the subject line of the email. Happy coding!","solution":"def count_emails_with_keyword(email_list, keyword): Counts the number of emails in a given email list that contain the specific keyword in the subject line. Args: email_list (list): A list of dictionaries, where each dictionary represents an email with 'subject' key and its value as the subject line. keyword (str): The keyword to search for in the subject lines. Returns: int: The number of emails containing the keyword in the subject line. keyword_lower = keyword.lower() count = 0 for email in email_list: subject = email.get('subject', '').lower() if keyword_lower in subject: count += 1 return count"},{"question":"Write a python function to print the content from a .txt file to the console.","solution":"def print_file_content(file_path): Reads the content of the given file and prints it to the console. Params: file_path (str): The path to the .txt file. try: with open(file_path, 'r') as file: content = file.read() print(content) except FileNotFoundError: print(\\"File not found.\\") except IOError: print(\\"An error occurred while reading the file.\\")"},{"question":"Write a python function to remove duplicates from a list of integers and return the list with all duplicates removed. The solution should be efficient and have a time complexity of O(n), where n is the number of elements in the list.","solution":"def remove_duplicates(nums): Remove duplicates from a list of integers and return the list with all duplicates removed. Parameters: nums (list): List of integers Returns: list: List of integers with duplicates removed return list(dict.fromkeys(nums))"},{"question":"Write a python function to sort words in a given sentence alphabetically.","solution":"def sort_words(sentence): Sorts the words in a given sentence alphabetically. Parameters: sentence (str): A sentence with words separated by spaces. Returns: str: A sentence with the words sorted alphabetically. words = sentence.split() words.sort() return ' '.join(words)"},{"question":"Write a python function to generate a list of Fibonacci numbers up to a specified limit. The function should take a single integer argument, which is the upper limit for the Fibonacci sequence, and return a list of Fibonacci numbers that are less than or equal to this limit.","solution":"def fibonacci_sequence(limit): Generates a list of Fibonacci numbers up to a specified limit. Parameters: limit (int): The upper limit for the Fibonacci sequence. Returns: list: A list of Fibonacci numbers less than or equal to the specified limit. if limit < 0: return [] fib_sequence = [0, 1] while fib_sequence[-1] + fib_sequence[-2] <= limit: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return [num for num in fib_sequence if num <= limit]"},{"question":"Write a python function to remove duplicate letters from a string so that every letter appears once and only once. You can return the result in any order. Note: Every letter appears in the input at least once.","solution":"def remove_duplicate_letters(s): Removes duplicate letters from a string so that every letter appears once and only once. The result can be returned in any order. :param s: Input string :return: A string with distinct characters return \\"\\".join(sorted(set(s)))"},{"question":"Write a python function to determine the \\"product of powers\\" of a number given a list of exponents. The \\"product of powers\\" is defined as the product of all the base raised to its corresponding exponent in the list. For example, if the base is 2 and the list of exponents is [1, 2, 3], the product of powers is 2^1 * 2^2 * 2^3 = 16.","solution":"def product_of_powers(base, exponents): Calculate the product of the base raised to each power in the exponents list. :param base: The base number to be raised to the given exponents. :param exponents: A list of exponents. :return: The product of all base raised to the corresponding exponents. product = 1 for exp in exponents: product *= base ** exp return product"},{"question":"Write a python function to find the nth Fibonacci number using recursion. The function should have a base case that covers when n is either 0 or 1, and a recursive step that calculates the Fibonacci sequence for n > 1. Make sure to include a docstring explaining the problem and your solution approach.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. The Fibonacci sequence is defined as: fibonacci(0) = 0 fibonacci(1) = 1 fibonacci(n) = fibonacci(n-1) + fibonacci(n-2) for n > 1 Parameters: n (int): The position in the Fibonacci sequence to return. Returns: int: The nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to display the count of each digit from 0 to 9 in a given string.","solution":"def count_digits(s): Returns a dictionary with the count of each digit from 0 to 9 in the given string. counts = {str(i): 0 for i in range(10)} for char in s: if char.isdigit(): counts[char] += 1 return counts"},{"question":"Write a python function to check if a given string contains only valid email addresses. If the string is a valid email address, then return True, otherwise, return False. It should consider @ character and any valid domain names only. A valid email address has the format [username]@[domain].[suffix].","solution":"import re def is_valid_email(email): Check if the given email string is a valid email address. Valid email format: [username]@[domain].[suffix] email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return bool(re.match(email_pattern, email))"},{"question":"Write a python function to that takes a list of integers and returns the maximum sum of a contiguous subarray.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray in the given list of integers. :param nums: List of integers :return: Maximum sum of contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to reverse a given string, where the string may contain multiple spaces.","solution":"def reverse_string(s): Returns the reverse of the given string. return s[::-1]"},{"question":"Write a python function to find the distance between two points in a 2D plane using the Euclidean distance formula.","solution":"import math def euclidean_distance(x1, y1, x2, y2): Returns the Euclidean distance between two points (x1, y1) and (x2, y2) in a 2D plane. return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)"},{"question":"Write a python function to detect the presence of a cycle in a directed graph using DFS.","solution":"def has_cycle(graph): Detects the presence of a cycle in a directed graph using Depth-First Search (DFS). :param graph: A dictionary representing the directed graph where the keys are the nodes and the values are lists of adjacent nodes. :return: True if there is a cycle in the graph, False otherwise. def dfs(node): if visited[node] == 1: # This node is being visited, hence a cycle exists return True if visited[node] == 2: # This node and its descendants are fully visited return False visited[node] = 1 # Mark the node as being visited for neighbor in graph[node]: # Recur for all neighbors if dfs(neighbor): return True visited[node] = 2 # Mark the node as fully visited return False visited = {node: 0 for node in graph} # 0 = unvisited, 1 = visiting, 2 = fully visited for node in graph: if visited[node] == 0: # Only visit unvisited nodes if dfs(node): return True return False"},{"question":"Write a python function to find the longest substring that appears at least twice in the given string. You may return any one of the longest substrings. If there are no such substrings, the function should return an empty string.","solution":"def longest_repeated_substring(s): Finds the longest substring that appears at least twice in the given string. Parameters: s (str): The input string Returns: str: The longest repeated substring or an empty string if none found def search(length, s): seen = set() for i in range(len(s) - length + 1): substring = s[i:i + length] if substring in seen: return substring seen.add(substring) return None left, right = 1, len(s) - 1 longest_substr = \\"\\" while left <= right: mid = (left + right) // 2 substr = search(mid, s) if substr: longest_substr = substr left = mid + 1 else: right = mid - 1 return longest_substr"},{"question":"Write a python function to remove duplicate characters from a string while preserving the original order of characters. If a character appears more than once, it should only appear once in the result string. Order matters and duplicates should be removed in the order they first appear.","solution":"def remove_duplicates_preserve_order(s): Removes duplicate characters from a string while preserving the original order. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to count the number of occurrences of a given character in a string. You need to consider both case sensitivity and sensitivity to white spaces. For example, if the character is 'a' and the string is 'Aardvark', the function should count both 'a' and 'A' as occurrences. Similarly, if the character is ' ' (space), it should count both instances.","solution":"def count_occurrences(char, string): Returns the number of occurrences of the given character in the string. Parameters: char (str): The character to count in the string. string (str): The string in which to count the character. Returns: int: The number of occurrences of the character in the string. return string.count(char)"},{"question":"Write a python function to print the numbers from 1 to 10 in reverse order. How can you do it in one line using the \`print\` function and a list comprehension?","solution":"def print_reverse_numbers(): Prints the numbers from 1 to 10 in reverse order using a single print statement and list comprehension. print(*[i for i in range(10, 0, -1)])"},{"question":"Write a python function to calculate the sum of two numbers and return the result. The function should be able to handle any two numbers provided as inputs.","solution":"def sum_two_numbers(a, b): Returns the sum of two numbers a and b. return a + b"},{"question":"Write a python function to calculate the factorial of a number n (n >= 0), with the function utilizing a recursive approach.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using a recursive approach. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to find all the factors of a number, ensuring the function is modular and follows best practices.","solution":"def find_factors(n): Returns a list of all factors of the given number n. Parameters: n (int): The number to find factors for. Returns: list: A list containing all factors of n. if n <= 0: raise ValueError(\\"The input number must be greater than zero.\\") factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Write a python function to find and return the square of the number with the highest frequency in an array. If multiple numbers have the same highest frequency, return the square of the smallest one among them.","solution":"def square_of_highest_freq_number(arr): Finds and returns the square of the number with the highest frequency in an array. If multiple numbers have the same highest frequency, returns the square of the smallest one among them. from collections import Counter if not arr: return None freq_counter = Counter(arr) highest_freq = max(freq_counter.values()) candidates = [num for num in freq_counter if freq_counter[num] == highest_freq] smallest_with_highest_freq = min(candidates) return smallest_with_highest_freq ** 2"},{"question":"Write a python function to convert a list of dictionaries into a dictionary of lists.","solution":"def convert_list_of_dicts_to_dict_of_lists(list_of_dicts): Converts a list of dictionaries into a dictionary of lists. Parameters: list_of_dicts (list): A list where each item is a dictionary with the same keys. Returns: dict: A dictionary where each key has a list of values corresponding to that key from the input dictionaries. if not list_of_dicts: return {} dict_of_lists = {key: [] for key in list_of_dicts[0]} for dictionary in list_of_dicts: for key, value in dictionary.items(): dict_of_lists[key].append(value) return dict_of_lists"},{"question":"Write a python function to check if a given binary tree is a valid BST (Binary Search Tree). A binary tree is a binary search tree if for every node, all elements in its left subtree are less than the node and all elements in its right subtree are greater than the node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Returns True if the binary tree with the root 'root' is a valid Binary Search Tree (BST). def validate(node, low=-float('inf'), high=float('inf')): if not node: return True if node.val <= low or node.val >= high: return False return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"Write a python function to find the number of unique paths in a matrix from top-left to bottom-right, where you can only move either down or right at any point in time.","solution":"def unique_paths(m, n): Returns the number of unique paths in an m x n matrix from the top-left corner to the bottom-right corner. :param m: Number of rows :param n: Number of columns :return: Number of unique paths # Create a 2D table to store results of subproblems dp = [[1] * n for _ in range(m)] # Iterate over the matrix starting from 1 since the first row and column can only be reached in one way for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[-1][-1]"},{"question":"Write a python function to generate all unique subsets of a given list. The function should not contain duplicate subsets in the output.","solution":"def unique_subsets(nums): Generates all unique subsets of the given list. nums.sort() subsets = [] backtrack(nums, 0, [], subsets) return subsets def backtrack(nums, index, path, res): res.append(path) for i in range(index, len(nums)): if i > index and nums[i] == nums[i-1]: continue backtrack(nums, i + 1, path + [nums[i]], res)"},{"question":"Write a python function to find the minimum_3sum in an array of integers. The minimum_3sum is defined as the sum of the three smallest numbers in the array after removing all the negative numbers. If the array has less than three elements after removing the negative numbers, return \\"Invalid\\".","solution":"def minimum_3sum(arr): Returns the sum of the three smallest non-negative integers in the array. If fewer than three non-negative integers exist, returns 'Invalid'. non_negative_nums = [num for num in arr if num >= 0] if len(non_negative_nums) < 3: return \\"Invalid\\" non_negative_nums.sort() return sum(non_negative_nums[:3])"},{"question":"Write a python function to reverse a string without using any built-in functions. You must also ensure that the function can handle strings with special characters and numbers.","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to find all prime numbers within a given range. The function should take two integers as input parameters and return a list of all prime numbers within that range. A prime number is a number that is greater than 1 and has no positive divisors other than 1 and itself. For example, the function should return \`[2, 3, 5, 7]\` for the range 2 to 7.","solution":"def find_primes_in_range(start, end): Returns a list of all prime numbers within the given range [start, end]. if start > end: return [] def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Write a python function to perform GCD of two given numbers using recursion.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using recursion. if b == 0: return a else: return gcd(b, a % b)"},{"question":"Write a python function to return the middle element of a list.","solution":"def middle_element(lst): Returns the middle element of the list. If the list has an even number of elements, it returns the lower middle element. if not lst: return None mid_index = (len(lst) - 1) // 2 return lst[mid_index]"},{"question":"Write a python function to sort an array in-place without using any additional pointers, arrays, or data structures. The function should be efficient and maintain the stability of the sorting algorithm, i.e., the relative order of equal sort elements should be the same as in the input.","solution":"def insertion_sort(arr): Sorts an array in-place using the insertion sort algorithm. This algorithm maintains the stability of the sorting. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and arr[j] > key: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key"},{"question":"Write a python function to left rotate an array by \`d\` positions. Assume \`d\` is always a valid integer reprenting the number of positions to rotate the array. The function should return the rotated array.","solution":"def left_rotate_array(arr, d): Rotates the given array to the left by d positions. Parameters: arr (list): The array to be rotated. d (int): The number of positions to rotate the array. Returns: list: The rotated array. if not arr: return arr n = len(arr) d = d % n # In case d is greater than length of array return arr[d:] + arr[:d]"},{"question":"Write a python function to remove duplicates from an array and output the length of the resulting array. The given array is sorted.","solution":"def remove_duplicates(arr): Removes duplicates from a sorted array and returns the length of the resulting array. Parameters: arr (list): A sorted list of integers. Returns: int: The length of the array after removing duplicates. if not arr: return 0 unique_index = 0 for i in range(1, len(arr)): if arr[i] != arr[unique_index]: unique_index += 1 arr[unique_index] = arr[i] return unique_index + 1"},{"question":"Write a python function to check if a given number is a perfect number in a given number system.","solution":"def is_perfect_number(n): Check if a given number is a perfect number. Parameters: n (int): The number to check Returns: bool: True if n is a perfect number, False otherwise if n <= 1: return False sum_divisors = 0 for i in range(1, n): if n % i == 0: sum_divisors += i return sum_divisors == n"},{"question":"Write a python function to iterate over a list of lists and print each element.","solution":"def print_list_of_lists(lst): Iterates over a list of lists and prints each element. Parameters: lst (list of lists): The list of lists to iterate over. for sublist in lst: for item in sublist: print(item)"},{"question":"Write a python function to implement a simple encryption algorithm that shifts each character in a string by a given number of positions in the alphabet. For example, shifting by 1 means 'a' becomes 'b', 'b' becomes 'c', and so on. This algorithm should ignore non-alphabetical characters and should be case-sensitive.","solution":"def shift_cipher(text, shift): Returns a new string where each alphabetical character in \`text\` is shifted by \`shift\` positions in the alphabet. Non-alphabetical characters are not changed. The function is case-sensitive. Parameters: - text (str): The input string to be encrypted. - shift (int): The number of positions to shift each character. Returns: - str: The encrypted string. result = [] for char in text: if char.isalpha(): if char.islower(): offset = ord('a') shifted_char = chr((ord(char) - offset + shift) % 26 + offset) elif char.isupper(): offset = ord('A') shifted_char = chr((ord(char) - offset + shift) % 26 + offset) result.append(shifted_char) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to print all the keys in a dictionary that have even length.","solution":"def print_even_length_keys(d): Prints all the keys in the dictionary that have even length. Parameters: d (dict): The dictionary to search for keys with even length. for key in d.keys(): if len(key) % 2 == 0: print(key)"},{"question":"Write a python function to generate a list of unique random numbers without replacement. The function should take two parameters: the number of random numbers to generate (\`n\`) and the range of numbers to choose from (\`range\`), which includes both endpoints. The function should then return a list of these unique random numbers.","solution":"import random def generate_unique_random_numbers(n, range_endpoints): Generates a list of unique random numbers without replacement. :param n: The number of random numbers to generate. :param range_endpoints: A tuple indicating the range (inclusive) from which to draw numbers. :return: A list of n unique random numbers. range_start, range_end = range_endpoints if n > (range_end - range_start + 1): raise ValueError(\\"The range is too small to generate the requested number of unique random numbers.\\") return random.sample(range(range_start, range_end + 1), n)"},{"question":"Write a python function to find the minimum, maximum, and average of a list of numbers.","solution":"def min_max_avg(numbers): Returns the minimum, maximum, and average of a list of numbers. if not numbers: raise ValueError(\\"The list is empty\\") minimum = min(numbers) maximum = max(numbers) average = sum(numbers) / len(numbers) return minimum, maximum, average"},{"question":"Write a python function to find the total number of paths from point (0,0) to (m, n) in a 2D grid where you can only move either down or right. The grid has obstacles in some cells which you cannot step on. The function should return the number of valid paths from (0,0) to (m-1, n-1).","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths in a 2D grid with obstacles from the top-left corner to the bottom-right corner. :param grid: List[List[int]] – 2D grid representing the map, where 1 is an obstacle and 0 is a free cell. :return: int – Number of unique paths from (0,0) to (m-1, n-1). if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) # Initialize a DP table with zeros dp = [[0] * n for _ in range(m)] # Set the starting point dp[0][0] = 1 # Fill the DP table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a python function to find the maximum depth of a binary tree using recursive approach. The function should take a TreeNode object as input and return the maximum depth of the tree. Consider a tree node with value \`val\` and two nodes as its children, \`left\` and \`right\`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of a binary tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to remove duplicates from a list. The order of elements should be preserved. To demonstrate your function, remove duplicates from the list \`[1, 2, 2, 3, 4, 4, 5]\`.","solution":"def remove_duplicates(lst): Remove duplicates from the list while preserving the order of elements. seen = set() unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen.add(item) return unique_lst # Example usage: result = remove_duplicates([1, 2, 2, 3, 4, 4, 5]) print(result) # Output should be [1, 2, 3, 4, 5]"},{"question":"Write a python function to reverse a string using slicing and then verify its correctness with a test case.","solution":"def reverse_string(s): Reverses the input string using slicing. return s[::-1]"},{"question":"Write a python function to check if a given list of strings can be rearranged to form a palindrome.","solution":"from collections import Counter def can_form_palindrome(strings): Determines if a given list of strings can be rearranged to form a palindrome. Arguments: strings -- list of strings Returns: boolean -- True if the strings can be rearranged to form a palindrome, False otherwise. combined_str = ''.join(strings) char_count = Counter(combined_str) # A palindrome has at most one character with an odd count odd_count = sum(count % 2 for count in char_count.values()) return odd_count <= 1"},{"question":"Write a python function to find the minimum element in a list of integers. My list is [5, 3, 9, 1, 4, 6]. Could you provide a solution?","solution":"def find_minimum(lst): Returns the minimum element in a list of integers. if not lst: # Empty list case return None min_element = lst[0] for num in lst[1:]: if num < min_element: min_element = num return min_element"},{"question":"Write a python function to find the maximum element in a list. You must not use Python's built-in \`max()\` function. How can I implement this?","solution":"def find_max(lst): Returns the maximum element in the list. If the list is empty, returns None. if not lst: return None max_element = lst[0] for element in lst[1:]: if element > max_element: max_element = element return max_element"},{"question":"Write a python function to find the number of occurrences of a specific substring in a given string, considering case sensitivity. How should the function be implemented?","solution":"def count_substring_occurrences(main_string, substring): Returns the number of occurrences of the substring in the main string, considering case sensitivity. if not main_string or not substring: return 0 return main_string.count(substring)"},{"question":"Write a python function to merge two sorted arrays into one sorted array. The function should have a time complexity of O(n + m) where n and m are the lengths of the two arrays. Additionally, the solution should not use extra space for merging.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: A merged sorted array consisting of all elements from arr1 and arr2. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Write a python function to find all the prime numbers within a given range [start, end].","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_in_range(start, end): Returns a list of all prime numbers within the range [start, end]. return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Write a python function to construct a list from a given generator.","solution":"def generator_to_list(generator): Constructs a list from a given generator. :param generator: A generator object :return: A list containing all items generated by the generator return list(generator)"},{"question":"Write a python function to find the minimum edit distance between two strings. The edit distance is defined as the minimum number of insertions, deletions, and substitutions required to change one word into the other.","solution":"def min_edit_distance(str1, str2): Returns the minimum edit distance between two strings. m = len(str1) n = len(str2) # Create a table to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last # character and recur for the remaining string elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all # possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Write a python function to calculate the maximum of two numbers without using the if-else statement or any comparison operator (like >, <). You must use bitwise operators only.","solution":"def maximum(x, y): Returns the maximum of x and y using bitwise operators only. # Subtract y from x and store the result in a variable. diff = x - y # Get the sign bit of diff (0 if positive or 1 if negative) # Shift right by 31 bits (for 32-bit integers) k = (diff >> 31) & 1 # If diff is positive, k is 0, so x * 1 + y * 0 = x. # If diff is negative, k is 1, so x * 0 + y * 1 = y. return x * (1 - k) + y * k"},{"question":"Write a python function to determine if all the characters of a given string appear in the same order in any of the substrings of the string itself.","solution":"def is_substring_order_consistent(s: str) -> bool: Determines whether all characters of the given string appear in the same order in any of its substrings. return all(s[i] in s[i:] for i in range(len(s)))"},{"question":"Write a python function to find the maximum area of a rectangle in a grid that has all 1s. The grid is represented as a 2D array where 1 represents land and 0 represents water. The function should return the area of the largest rectangle containing only 1s.","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 cols = len(matrix[0]) heights = [0] * (cols + 1) for row in matrix: for i in range(cols): if row[i] == '1': heights[i] += 1 else: heights[i] = 0 stack = [-1] for i in range(cols + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a python function to calculate the total salary for an employee based on their hourly wage and the number of hours worked. The function should take two parameters: \`hourly_wage\` (a float representing the employee's hourly wage) and \`hours_worked\` (an integer representing the number of hours the employee has worked). The function should return the total salary as a float.","solution":"def calculate_salary(hourly_wage, hours_worked): Calculate the total salary for an employee based on their hourly wage and the number of hours worked. Parameters: hourly_wage (float): The employee's hourly wage. hours_worked (int): The number of hours the employee has worked. Returns: float: The total salary. return hourly_wage * hours_worked"},{"question":"Write a python function to implement a binary search on a sorted array. The function should take three parameters: the sorted array, the target value, and the indices (left and right) of the subarray to search within. Your function should return the index of the target value if found, or -1 otherwise.","solution":"def binary_search(arr, target, left, right): Performs a binary search on a sorted array. Parameters: arr (list): The sorted array to search within. target (int): The value to search for. left (int): The starting index of the subarray. right (int): The ending index of the subarray. Returns: int: The index of the target value if found, or -1 otherwise. while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to sort an array in Python using the built-in sort() method and then check if the array is sorted in ascending order or not. The function should return True if the array is sorted; otherwise, it should return False.","solution":"def is_sorted(arr): Sorts the array using the built-in sort() method and checks if it is sorted in ascending order. Parameters: arr (list): The array to be sorted and checked. Returns: bool: True if the array is sorted in ascending order, False otherwise. sorted_arr = sorted(arr) return sorted_arr == arr"},{"question":"Write a python function to convert a list of numbers into a matrix. The function should take two arguments: the list of numbers and the number of columns for the matrix. The function should then create a matrix with the given number of columns and fill it with numbers from the list. The function should return the matrix.","solution":"def list_to_matrix(numbers, columns): Converts a list of numbers into a matrix with the given number of columns. Parameters: numbers (list): List of numbers to be converted into matrix. columns (int): Number of columns for the matrix. Returns: matrix (list of lists): Matrix with the given number of columns. if columns <= 0: raise ValueError(\\"Number of columns must be greater than zero.\\") matrix = [] row = [] for i, number in enumerate(numbers): row.append(number) if (i + 1) % columns == 0: # time to end the row matrix.append(row) row = [] if row: # append any remaining numbers in the last row matrix.append(row) return matrix"},{"question":"Write a python function to sort a list of strings by their first character. If two strings have the same first character, sort them by their length. If they also have the same length, sort them in alphabetical order.","solution":"def sort_strings(strings): Sort a list of strings by their first character. If two strings have the same first character, sort by their length. If they also have the same length, sort alphabetically. Args: strings (list): List of strings to be sorted. Returns: list: Sorted list of strings. return sorted(strings, key=lambda s: (s[0], len(s), s))"},{"question":"Write a python function to sort a list in an alternating order. The sort should start from the lowest, followed by the highest, followed by the second lowest, second highest, and so on. For example, given the list \`[4, 1, 3, 2]\`, the function should return \`[1, 4, 2, 3]\`.","solution":"def alternating_order(lst): Sorts a list in an alternating order starting from the lowest, followed by the highest, followed by the second lowest, second highest, and so on. Arguments: lst -- a list of numbers Returns: a list sorted in alternating order sorted_lst = sorted(lst) result = [] for i in range(len(sorted_lst) // 2): result.append(sorted_lst[i]) result.append(sorted_lst[-(i + 1)]) if len(sorted_lst) % 2 != 0: result.append(sorted_lst[len(sorted_lst) // 2]) return result"},{"question":"Write a python function to return the number of 1's in the binary representation of an integer. The function should be efficient and should have a time complexity of O(1).","solution":"def count_ones_in_binary(n): Returns the number of 1's in the binary representation of an integer n. return bin(n).count('1')"},{"question":"Write a python function to find the shortest path to walk through all the edges of a given undirected graph using the nearest neighbor approach.","solution":"def find_shortest_path(graph, start): Returns the shortest path to walk through all edges of an undirected graph using the nearest neighbor approach starting from the given node. Parameters: graph (dict): A dictionary where the keys are node identifiers and the values are lists of tuples representing edges (neighbor_node, weight). start (node): The starting node identifier. Returns: list: A list representing the path of nodes visited in order. visited = set() path = [start] current = start while len(visited) < len(graph) - 1: visited.add(current) neighbors = [(neighbor, weight) for neighbor, weight in graph[current] if neighbor not in visited] if not neighbors: break # In case the graph is not fully connected # Choose the nearest neighbor next_node = min(neighbors, key=lambda x: x[1])[0] path.append(next_node) current = next_node return path"},{"question":"Write a python function to calculate the total cost of an order based on the quantity and price of each item. The function should take two parameters: a list of item quantities and a list of item prices. Each list should have the same length, with each index representing an item. The function should return the total cost of all items combined.","solution":"def calculate_total_cost(quantities, prices): Calculate the total cost of an order based on the quantity and price of each item. Args: quantities (list of int): List of item quantities. prices (list of float): List of item prices. Returns: float: Total cost of the order. if len(quantities) != len(prices): raise ValueError(\\"The length of quantities and prices lists must be the same\\") total_cost = 0.0 for quantity, price in zip(quantities, prices): total_cost += quantity * price return total_cost"},{"question":"Write a python function to sort an array of zero and one.","solution":"def sort_binary_array(arr): Sorts an array of 0s and 1s in non-decreasing order. Parameters: arr (list): List containing only 0s and 1s. Returns: list: Sorted list with all 0s followed by all 1s. count_0 = arr.count(0) count_1 = len(arr) - count_0 return [0] * count_0 + [1] * count_1"},{"question":"Write a python function to recursively find the nth node in a linked list. The nth node from the last node in the linked list means the node that is nth places before the tail node. If n is greater than the length of the linked list, return None.","solution":"class ListNode: Definition for singly-linked list. def __init__(self, val=0, next=None): self.val = val self.next = next def find_nth_from_end(head, n): Recursively finds the nth node from the end of the linked list. If n is greater than the length of the linked list, returns None. def helper(node, n): if not node: return None, 0 result, count = helper(node.next, n) count += 1 if count == n: return node, count return result, count result, _ = helper(head, n) return result"},{"question":"Write a python function to find all the prime numbers from 100 to 200.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def primes_between_100_and_200(): Finds all the prime numbers between 100 and 200. primes = [] for num in range(100, 201): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to find the two unique numbers in an array where all other elements appear twice. How can you solve this using bitwise operations?","solution":"def find_unique_numbers(nums): Returns the two unique numbers in an array where all other elements appear twice. The solution uses bitwise XOR operations. # Step 1: XOR all the elements, the result will be the XOR of the two unique elements xor_all_elements = 0 for num in nums: xor_all_elements ^= num # Step 2: Find a set bit (any bit that is '1') in xor_all_elements set_bit = xor_all_elements & -xor_all_elements # Step 3: Divide the elements into two groups based on the set bit num1, num2 = 0, 0 for num in nums: if num & set_bit: num1 ^= num else: num2 ^= num return num1, num2"},{"question":"Write a python function to find the closest number to the given number from a list of numbers.","solution":"def closest_number(num_list, target): Returns the closest number to the target from the given list of numbers. :param num_list: List of numbers to search. :param target: The number to find the closest to. :return: The closest number from the list. if not num_list: raise ValueError(\\"The list should not be empty.\\") closest_num = num_list[0] min_diff = abs(closest_num - target) for num in num_list[1:]: diff = abs(num - target) if diff < min_diff: closest_num = num min_diff = diff return closest_num"},{"question":"Write a python function to find the longest substring without repeating characters in a given string. Objective in this function is to find the start and end indices of the substring. If there are multiple substrings with the same maximum length, return the one that appears first.","solution":"def longest_substring_without_repeating_characters(s): Find the start and end indices of the longest substring without repeating characters. If there are multiple, return the first one. n = len(s) char_index_map = {} max_length = start = 0 start_index = end_index = 0 for i in range(n): # If the character is found again, update start if s[i] in char_index_map and char_index_map[s[i]] >= start: start = char_index_map[s[i]] + 1 # Update the last seen index of the character char_index_map[s[i]] = i # Check if we have found a new max length if i - start + 1 > max_length: max_length = i - start + 1 start_index = start end_index = i return start_index, end_index"},{"question":"Write a python function to calculate the sum of the first n terms of the Fibonacci sequence. The Fibonacci sequence is defined as follows: the first two terms are 0 and 1, and each subsequent term is the sum of the previous two terms.","solution":"def fibonacci_sum(n): Returns the sum of the first n terms of the Fibonacci sequence. if n <= 0: return 0 a, b = 0, 1 total = a for _ in range(1, n): total += b a, b = b, a + b return total"},{"question":"Write a python function to find intersection of two lists without using set.","solution":"def list_intersection(list1, list2): Returns the intersection of two lists without using set. This means elements that are present in both lists. intersection = [] for item in list1: if item in list2 and item not in intersection: intersection.append(item) return intersection"},{"question":"Write a python function to convert a given integer to its equivalent Roman numeral. The function should handle numbers in the range from 1 to 3999.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. :param num: An integer between 1 and 3999. :return: A string representing the Roman numeral. if not 1 <= num <= 3999: raise ValueError(\\"Number out of range (must be 1..3999)\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a python function to calculate the sum of Fibonacci numbers up to a certain number n. The Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2) with initial conditions F(0) = 0 and F(1) = 1. The function should accept an integer n as its input and return the sum of all Fibonacci numbers less than or equal to n.","solution":"def sum_fibonacci(n): Returns the sum of all Fibonacci numbers less than or equal to n. if n < 0: return 0 a, b = 0, 1 sum_fib = 0 while a <= n: sum_fib += a a, b = b, a + b return sum_fib"},{"question":"Write a python function to transpose a square matrix. Transpose of a matrix is an operator which gives the transpose of a matrix by just changing rows to columns and columns to rows.","solution":"def transpose_matrix(matrix): Returns the transpose of a square matrix. :param matrix: List of lists representing the square matrix. :return: Transposed matrix. n = len(matrix) transposed_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): transposed_matrix[j][i] = matrix[i][j] return transposed_matrix"},{"question":"Write a python function to return the number of substrings of a string that will form a palindrome when reversed and unpalindrome when not reversed. Let's call a function \`count_palindrome_substrings(s)\` where \`s\` is the input string. The function should return the count of such substrings.","solution":"def is_palindrome(s): Checks if a given string s is a palindrome. return s == s[::-1] def count_palindrome_substrings(s): Returns the number of substrings of s that are palindromes. n = len(s) count = 0 for i in range(n): for j in range(i+1, n+1): substring = s[i:j] if is_palindrome(substring): count += 1 return count"},{"question":"Write a python function to find the maximum and minimum values in a list of integers and return them as a tuple.","solution":"def find_max_min(values): Returns a tuple containing the maximum and minimum values in a list of integers. Args: values (list): A list of integers. Returns: tuple: A tuple containing the maximum and minimum values. (max_value, min_value) if not values: raise ValueError(\\"List must not be empty\\") max_value = max(values) min_value = min(values) return (max_value, min_value)"},{"question":"Write a python function to check if two numbers are coprime or not.","solution":"def are_coprime(a, b): Returns True if a and b are coprime, otherwise False. import math return math.gcd(a, b) == 1"},{"question":"Write a python function to sort a given tuple. The tuple contains mixed data types including integers, strings, and floats. Keep the sorted tuple and its total number of elements.","solution":"def sort_and_count(tup): Sorts a given tuple and returns the sorted tuple and its total number of elements. sorted_tuple = tuple(sorted(tup, key=lambda x: (isinstance(x, str), x))) count = len(tup) return sorted_tuple, count"},{"question":"Write a python function to reverse a string. The function should prompt the user to enter a string and then display the reversed string.","solution":"def reverse_string(): Prompts the user to enter a string and returns the reversed string. user_input = input(\\"Enter a string: \\") return user_input[::-1]"},{"question":"Write a python function to find the index of the first occurrence of a target value in a list. If the target is not found, return -1.","solution":"def find_index_of_first_occurrence(lst, target): Returns the index of the first occurrence of the target value in the list. If target is not found, returns -1. try: index = lst.index(target) except ValueError: index = -1 return index"},{"question":"Write a python function to calculate the Fibonacci series up to a given number n.","solution":"def fibonacci(n): Generate Fibonacci series up to a given number n. Parameters: n (int): The number of terms in the Fibonacci series to generate. Returns: list: A list containing the Fibonacci series up to n terms. if n <= 0: return [] fib_series = [0, 1] while len(fib_series) < n: fib_series.append(fib_series[-1] + fib_series[-2]) return fib_series[:n]"},{"question":"Write a python function to remove an element from a space-separated string based on its value. The function should take two parameters: a string of space-separated values and the value to remove. The function should return the modified string.","solution":"def remove_element(input_string, value_to_remove): Removes the specified value from a space-separated string. Parameters: input_string (str): The input string containing space-separated values. value_to_remove (str): The value to remove from the string. Returns: str: The modified string with the specified value removed. elements = input_string.split() elements = [element for element in elements if element != value_to_remove] return ' '.join(elements)"},{"question":"Write a python function to check whether a number is a perfect number or not. what is perfect number?","solution":"def is_perfect_number(n): Checks if a number n is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself). Parameters: n (int): The number to check. Returns: bool: True if n is a perfect number, False otherwise. if n <= 0: return False proper_divisors_sum = sum(i for i in range(1, n) if n % i == 0) return proper_divisors_sum == n"},{"question":"Write a python function to find the number occurrences of a specified number in an array of numbers.","solution":"def count_occurrences(arr, num): Counts the number of occurrences of a specified number in an array. :param arr: List of numbers. :param num: Number to find occurrences of. :return: Number of times \`num\` appears in \`arr\`. return arr.count(num)"},{"question":"Write a python function to test a given binary number is perfect square or not or not. Here's the binary number: \\"ABCD\\". How would you approach solving this problem?","solution":"import math def is_perfect_square(binary_string): Determines if the binary string represents a perfect square number. Parameters: binary_string (str): The binary number in string format. Returns: bool: True if the number is a perfect square, False otherwise. try: # Convert binary string to decimal decimal_number = int(binary_string, 2) # Find the integer square root sqrt = int(math.isqrt(decimal_number)) # Check if the square of the integer square root is the original number return sqrt * sqrt == decimal_number except ValueError: # If binary_string is not a valid binary number return False"},{"question":"Write a python function to calculate the sum of digits of a positive integer. The function should return the sum of the digits in its binary representation.","solution":"def sum_of_binary_digits(n): Returns the sum of the digits of the binary representation of a positive integer n. # Convert the number to binary and remove the '0b' prefix binary_representation = bin(n)[2:] # Calculate the sum of the binary digits return sum(int(digit) for digit in binary_representation)"},{"question":"Write a python function to convert a decimal number to its binary representation. You should use recursion.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation using recursion. if n == 0: return \\"0\\" if n == 1: return \\"1\\" return decimal_to_binary(n // 2) + str(n % 2)"},{"question":"Write a python function to find the kth smallest element in an array using the heap data structure.","solution":"import heapq def kth_smallest_element(arr, k): Returns the k-th smallest element in the array using the heap data structure. if k > len(arr) or k < 1: raise ValueError(\\"k must be between 1 and the length of the array.\\") heapq.heapify(arr) for _ in range(k - 1): heapq.heappop(arr) return heapq.heappop(arr)"},{"question":"Write a python function to generate the first n odd numbers. The function should take an integer n as an argument and return a list of the first n odd numbers.","solution":"def generate_first_n_odd_numbers(n): Returns a list of the first n odd numbers. Parameters: n (int): The number of odd numbers to generate. Returns: list: A list of the first n odd numbers. return [2 * i + 1 for i in range(n)]"},{"question":"Write a python function to find the second largest number in a list of integers. The function should have a time complexity of O(n) and should be able to handle a list with any number of elements, including duplicates.","solution":"def find_second_largest(numbers): Returns the second largest number in a list of integers. If the list has less than 2 unique elements, the function returns None. if len(numbers) < 2: return None first_largest = second_largest = None for num in numbers: if first_largest is None or num > first_largest: second_largest = first_largest first_largest = num elif num != first_largest and (second_largest is None or num > second_largest): second_largest = num return second_largest"},{"question":"Write a python function to get the first word in a given string.","solution":"def first_word(s): Returns the first word in a given string s. A word is defined as a sequence of characters separated by spaces. words = s.split() return words[0] if words else \\"\\""},{"question":"Write a python function to find the nth prime number. The function should be efficient even for larger values of n.","solution":"def nth_prime(n): Returns the nth prime number. if n < 1: raise ValueError(\\"n must be a positive integer\\") primes = [] candidate = 2 while len(primes) < n: for prime in primes: if candidate % prime == 0: break else: primes.append(candidate) candidate += 1 return primes[-1]"},{"question":"Write a python function to find the sum of all even numbers between two given positive integers \`a\` and \`b\` (inclusive). If \`a\` is greater than \`b\`, the function should return 0. If there are no even numbers in the range \`[a, b]\`, also return 0.","solution":"def sum_even_numbers(a, b): Returns the sum of all even numbers between two given positive integers a and b (inclusive). If a is greater than b, returns 0. If there are no even numbers in the range [a, b], returns 0. if a > b: return 0 total = 0 for num in range(a, b + 1): if num % 2 == 0: total += num return total"},{"question":"Write a python function to find the second largest number in a list. If the list contains duplicates of the largest number, find the second distinct largest number.","solution":"def second_largest(nums): Returns the second largest distinct number in the list. if len(nums) < 2: raise ValueError(\\"List must contain at least two distinct numbers\\") # Remove duplicates and sort the list in descending order distinct_nums = sorted(set(nums), reverse=True) if len(distinct_nums) < 2: raise ValueError(\\"List must contain at least two distinct numbers\\") return distinct_nums[1]"},{"question":"Write a python function to find the second maximum number in a list of integers, ensuring the list contains at least two unique numbers. If the list does not meet the criteria, return None.","solution":"def second_maximum(numbers): Returns the second maximum number in a list of integers. If the list does not contain at least two unique numbers, return None. if len(set(numbers)) < 2: return None first, second = float('-inf'), float('-inf') for number in numbers: if number > first: first, second = number, first elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to check if a list of integers contains a pair of numbers whose sum is zero. For example, if the list is \`[2, 4, -2, 7]\`, the function should return \`True\` since \`2 + (-2) = 0\`.","solution":"def contains_zero_sum_pair(nums): Returns True if the list contains a pair of numbers whose sum is zero, False otherwise. num_set = set() for num in nums: if -num in num_set: return True num_set.add(num) return False"},{"question":"Write a python function to find the first appearance of a character that is unique (appears only once) in a given string. If no such character exists, return an underscore ('_').","solution":"def first_unique_character(s): This function returns the first unique character (appears only once) in the given string. If no unique character exists, it returns '_'. freq = {} # Count the occurrences of each character for char in s: freq[char] = freq.get(char, 0) + 1 # Find the first character that appears only once for char in s: if freq[char] == 1: return char return '_'"},{"question":"Write a python function to find the most frequent element in a list. If there is a tie, return the smallest one. If the list is empty, return \`None\`.","solution":"def most_frequent_element(lst): Returns the most frequent element in the list. In case of a tie, returns the smallest element. If the list is empty, return None. if not lst: return None frequency = {} for item in lst: if item in frequency: frequency[item] += 1 else: frequency[item] = 1 max_freq = max(frequency.values()) most_frequent = [item for item, count in frequency.items() if count == max_freq] return min(most_frequent)"},{"question":"Write a python function to find the maximum sum of a contiguous subarray using Kadane's algorithm. Additionally, return the starting and ending indices of the subarray that gives this maximum sum. If there are multiple subarrays with the same maximum sum, return the indices of the first encountered one.","solution":"def kadane_algorithm(arr): Function to find the maximum sum of a contiguous subarray using Kadane's algorithm. Additionally, returns the starting and ending indices of the subarray that gives this maximum sum. :param arr: List of integers :return: Tuple containing three items - maximum sum, starting index of subarray, ending index of subarray max_sum = -float('inf') current_sum = 0 start = end = s = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return max_sum, start, end"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a number sequence. This is known as Kadane's algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a number sequence. This is known as Kadane's algorithm. :param nums: List of integers :return: The maximum sum of a contiguous subarray max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to count the number of unique words in a given string. You can assume that words are separated by space.","solution":"def count_unique_words(s): Returns the count of unique words in the given string. Assumes that words are separated by space. words = s.split() unique_words = set(words) return len(unique_words)"},{"question":"Write a python function to count the number of unique words in a given string while ignoring case sensitivity.","solution":"def count_unique_words(s): Returns the count of unique words in a given string, ignoring case sensitivity. :param s: input string :return: number of unique words words = s.lower().split() unique_words = set(words) return len(unique_words)"},{"question":"Write a python function to reverse a given string. The string may contain special characters and numbers without causing errors. The function should maintain the position of special characters and numbers as they are.","solution":"def reverse_string(s): Reverse the given string while maintaining the position of special characters and numbers as they are. letters = [c for c in s if c.isalpha()] reversed_string = [] for c in s: if c.isalpha(): reversed_string.append(letters.pop()) else: reversed_string.append(c) return \\"\\".join(reversed_string)"},{"question":"Write a python function to find the sum of all the primes below 2 million.","solution":"def sum_of_primes_below_n(n): Returns the sum of all prime numbers below n. if n < 2: return 0 sieve = [True] * n sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime) # Example usage # print(sum_of_primes_below_n(2000000))"},{"question":"Write a python function to convert the keys of a given dictionary to another data type, for example, from integer to string. If a key in the dictionary cannot be converted to the specified data type, it should be excluded from the resulting dictionary.","solution":"def convert_keys(input_dict, target_type): Convert the keys of a given dictionary to the specified data type. Parameters: input_dict (dict): The input dictionary. target_type (type): The target type for the keys. Returns: dict: A new dictionary with keys converted to the specified type. Keys that cannot be converted will be excluded. converted_dict = {} for key, value in input_dict.items(): try: new_key = target_type(key) converted_dict[new_key] = value except (ValueError, TypeError): continue return converted_dict"},{"question":"Write a python function to return the frequency of each word in a sentence. The function should be named \`word_frequency\` and it should take one string parameter \`sentence\`. The function should return a dictionary where the keys are the words in \`sentence\` and the values are the counts of how many times each word appears in \`sentence\`.","solution":"def word_frequency(sentence): Returns the frequency count of each word in the given sentence. Parameters: sentence (str): The input sentence. Returns: dict: A dictionary where keys are words and values are their frequency counts. words = sentence.split() frequency = {} for word in words: word = word.lower() # Converting to lowercase to ensure case insensitivity if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a python function to check if a string is a permutation of a pangram or not.","solution":"def is_permutation_of_pangram(s): Checks if the string 's' is a permutation of a pangram. A pangram is a sentence containing every letter of the alphabet at least once. # Using a set to track the unique characters in the string alphabet_set = set('abcdefghijklmnopqrstuvwxyz') s = s.lower() # Remove non-alphabetical characters and create a set of unique characters from the string s_set = set(filter(str.isalpha, s)) # Check if every letter in the alphabet is present in the set created from the string return s_set == alphabet_set"},{"question":"Write a python function to reverse vowels in a given string. The function should take a single string as input and return a new string with all the vowels reversed, while keeping the consonants in their original positions. How can this be achieved?","solution":"def reverse_vowels(s): Returns a new string with all the vowels reversed in the given string, while keeping the consonants in their original positions. vowels = \\"aeiouAEIOU\\" s_list = list(s) i, j = 0, len(s) - 1 while i < j: if s_list[i] in vowels and s_list[j] in vowels: s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 if s_list[i] not in vowels: i += 1 if s_list[j] not in vowels: j -= 1 return ''.join(s_list)"},{"question":"Write a python function to find the missing number in an array of integers from 1 to n. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def find_missing_number(nums): Returns the missing number in an array of integers from 1 to n. Assumes there's exactly one missing number. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Write a python function to generate the first n numbers in the Fibonacci sequence.","solution":"def fibonacci(n): Generates the first n numbers in the Fibonacci sequence. Parameters: n (int): the number of Fibonacci numbers to generate Returns: list: a list containing the first n Fibonacci numbers if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for _ in range(2, n): next_number = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_number) return fib_sequence"},{"question":"Write a python function to convert a string representation of a fraction to its decimal equivalent using long division. The function should also handle improper fractions and mixed numbers. For example, \\"1 1/2\\" should be converted to 1.5.","solution":"def fraction_to_decimal(fraction_str): Convert a string representation of a fraction or mixed number to its decimal equivalent. if ' ' in fraction_str: # If it's a mixed number, e.g., \\"1 1/2\\" whole_number, fraction_part = fraction_str.split() whole_number = int(whole_number) numerator, denominator = map(int, fraction_part.split('/')) decimal_value = whole_number + float(numerator) / float(denominator) elif '/' in fraction_str: # If it's a simple fraction, e.g., \\"1/2\\" numerator, denominator = map(int, fraction_str.split('/')) decimal_value = float(numerator) / float(denominator) else: # If it's just a whole number string decimal_value = float(fraction_str) return decimal_value"},{"question":"Write a python function to find the maximum number in a list. Additionally, ensure that the function handles cases where the list might be empty and raises an appropriate exception.","solution":"def find_max(lst): Returns the maximum number in the list \`lst\`. Raises a ValueError if the list is empty. if not lst: raise ValueError(\\"The list is empty\\") max_value = lst[0] for num in lst[1:]: if num > max_value: max_value = num return max_value"},{"question":"Write a python function to reverse a list. You are not allowed to use slicing or built-in reverse functions. You must solve this using a stack data structure.","solution":"def reverse_list(lst): Reverses a list using a stack data structure. stack = [] # Push all elements of the list onto the stack for element in lst: stack.append(element) # Pop all elements from the stack to get the reversed list reversed_lst = [] while stack: reversed_lst.append(stack.pop()) return reversed_lst"},{"question":"Write a python function to create a list of even numbers between n and m (inclusive). The function should take two arguments n and m, where n is the lower limit and m is the upper limit.","solution":"def even_numbers_between(n, m): Returns a list of even numbers between n and m (inclusive). If n > m, the function returns an empty list. if n > m: return [] return [i for i in range(n, m + 1) if i % 2 == 0]"},{"question":"Write a python function to find the maximum sum of a contiguous subarray. This is a classic problem known as Kadane's algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to sort characters in a string based on their ASCII values in descending order.","solution":"def sort_string_desc(s): Sort characters in the string s based on their ASCII values in descending order. return ''.join(sorted(s, reverse=True))"},{"question":"Write a python function to find the kth smallest element in a binary search tree. How would you verify the correctness of this function using doctest?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest(root, k): Returns the kth smallest element in a BST. Parameters: root (TreeNode): The root of the binary search tree. k (int): The k-position of the smallest element to find. Returns: int: The kth smallest value in the BST. Example: >>> tree = TreeNode(3, TreeNode(1, None, TreeNode(2)), TreeNode(4)) >>> kth_smallest(tree, 1) 1 >>> kth_smallest(tree, 2) 2 >>> kth_smallest(tree, 3) 3 def inorder(node): return inorder(node.left) + [node.val] + inorder(node.right) if node else [] return inorder(root)[k - 1]"},{"question":"Write a python function to identify and return the sum of all prime factors of a given number.","solution":"import math def sum_of_prime_factors(n): Returns the sum of all prime factors of n. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_factors(num): factors = set() while num % 2 == 0: factors.add(2) num = num // 2 while num % 3 == 0: factors.add(3) num = num // 3 for i in range(5, int(math.sqrt(num)) + 1, 6): while num % i == 0: factors.add(i) num = num // i while num % (i + 2) == 0: factors.add(i + 2) num = num // (i + 2) if num > 3: factors.add(num) return factors return sum(prime_factors(n))"},{"question":"Write a python function to find all the roots of a quadratic equation of the form ax^2 + bx + c = 0. The function should print the roots and determine if they are real or imaginary.","solution":"import cmath def find_roots(a, b, c): Finds and returns the roots of the quadratic equation ax^2 + bx + c = 0. Also determines if the roots are real or imaginary. Parameters: a (float): coefficient of x^2 b (float): coefficient of x c (float): constant term Returns: tuple: containing the roots and a string indicating if they are real or imaginary # Calculate the discriminant discriminant = b**2 - 4*a*c # Calculate the roots root1 = (-b + cmath.sqrt(discriminant)) / (2 * a) root2 = (-b - cmath.sqrt(discriminant)) / (2 * a) # Determine if roots are real or imaginary if discriminant >= 0: roots_type = \\"Real\\" else: roots_type = \\"Imaginary\\" return (root1, root2, roots_type)"},{"question":"Write a python function to determine if a list of integers contains only one unique element. If it does, return True, otherwise return False.","solution":"def contains_only_one_unique_element(lst): Determines if a list contains only one unique element. Parameters: lst (list of int): A list of integers. Returns: bool: True if the list contains only one unique element, False otherwise. return len(set(lst)) == 1"},{"question":"Write a python function to find the maximum sum of a subarray within a given range [left, right] in an array. The function should use the Kadane's algorithm for an efficient solution.","solution":"def max_subarray_sum(arr, left, right): Returns the maximum sum of a subarray within the given range [left, right] using Kadane's algorithm. if left > right or left < 0 or right >= len(arr): raise ValueError(\\"Invalid range provided\\") max_sum = current_sum = arr[left] for i in range(left + 1, right + 1): current_sum = max(arr[i], current_sum + arr[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the first unique character in a string and return it. If there is no unique character, return -1. Assume all characters are lower case and the string is non-empty.","solution":"def first_unique_character(s): Returns the first unique character in the given string \`s\`. If there is no unique character, returns -1. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no unique character found return -1"},{"question":"Write a python function to count the occurrence of elements in a given list","solution":"def count_occurrences(elements): Returns a dictionary with the count of each element in the given list. :param elements: List of elements to count occurrences for :return: Dictionary with elements as keys and their count as values occurrence_dict = {} for element in elements: if element in occurrence_dict: occurrence_dict[element] += 1 else: occurrence_dict[element] = 1 return occurrence_dict"},{"question":"Write a python function to check if a given list of numbers contains only even numbers. The function should return a boolean value (True if all numbers are even, False otherwise).","solution":"def all_even_numbers(lst): Returns True if all numbers in the list are even, otherwise returns False. :param lst: List of integers. :return: Boolean value indicating whether all numbers are even. return all(num % 2 == 0 for num in lst)"},{"question":"Write a python function to find the smallest number that is evenly divisible by all numbers in a given range.","solution":"from math import gcd from functools import reduce def lcm(a, b): return abs(a * b) // gcd(a, b) def smallest_multiple(n): Returns the smallest multiple that is evenly divisible by all numbers from 1 to n. return reduce(lcm, range(1, n + 1))"},{"question":"Write a python function to find a missing number in an array containing n distinct numbers taken from 0 to n. The function should run in O(n) time complexity and use O(1) extra space.","solution":"def find_missing_number(arr): Finds the missing number in an array containing n distinct numbers taken from 0 to n. The function runs in O(n) time complexity and uses O(1) extra space. n = len(arr) total_sum = n * (n + 1) // 2 arr_sum = sum(arr) return total_sum - arr_sum"},{"question":"Write a python function to count the number of words in a given string that contain both uppercase and lowercase letters.","solution":"def count_words_with_mixed_case(sentence): Returns the number of words in the given sentence that contain both uppercase and lowercase letters. words = sentence.split() count = 0 for word in words: has_upper = any(c.isupper() for c in word) has_lower = any(c.islower() for c in word) if has_upper and has_lower: count += 1 return count"},{"question":"Write a python function to compute the sum of the series for the given value of n. The series is defined as S(n) = 1 + 2 + 3 + ... + n.","solution":"def sum_of_series(n): Computes the sum of the series 1 + 2 + 3 + ... + n for a given value of n. return n * (n + 1) // 2"},{"question":"Write a python function to read data from a CSV file and return it as a list of dictionaries. Each dictionary should represent a row in the CSV file, with keys as column headers and values as the corresponding row cell values.","solution":"import csv def read_csv_as_dicts(file_path): Reads a CSV file and returns a list of dictionaries. Args: file_path (str): The path to the CSV file. Returns: list of dict: A list where each element is a dictionary representing a row in the CSV file. with open(file_path, mode='r', newline='') as file: reader = csv.DictReader(file) return [row for row in reader]"},{"question":"Write a python function to implements the Knapsack Problem. The function should take a list of integers representing item weights, a list of integers representing item values, and an integer representing the maximum capacity of the knapsack. The function should return the maximum value that can be placed in the knapsack without exceeding the maximum capacity.","solution":"def knapsack(weights, values, capacity): Solves the Knapsack problem using dynamic programming. :param weights: List of weights of the items. :param values: List of values of the items. :param capacity: Maximum weight capacity of the knapsack. :return: The maximum value that can be obtained with the given capacity. n = len(weights) # Create a 2D array to store the maximum value that can be obtained with the first i items and a max capacity j dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] # Build table dp in a bottom-up manner for i in range(1, n + 1): for w in range(capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] # The last cell of dp array will have the maximum value return dp[n][capacity]"},{"question":"Write a python function to find the maximum subarray sum in a given list of integers. The function should return the maximum sum among all possible subarrays. A subarray is a contiguous part of an array.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given list of integers. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find minimum number of coins required to make a given sum. The function takes as input a list of coin denominations and the target sum, and returns the minimum number of coins needed.","solution":"def min_coins(coins, target_sum): Returns the minimum number of coins required to make the target_sum. coins is a list of coin denominations. # Initialize dp array to a large value (target_sum + 1), as this is more than the max possible coins needed dp = [float('inf')] * (target_sum + 1) dp[0] = 0 # No coins needed to make 0 sum for coin in coins: for x in range(coin, target_sum + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[target_sum] if dp[target_sum] != float('inf') else -1"},{"question":"Write a python function to merge two sorted lists into a single sorted list using recursion.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list using recursion. if not list1: return list2 if not list2: return list1 if list1[0] < list2[0]: return [list1[0]] + merge_sorted_lists(list1[1:], list2) else: return [list2[0]] + merge_sorted_lists(list1, list2[1:])"},{"question":"Write a python function to count the number of instances of a specific letter in a given string. For example, if the string is \\"programming\\" and we want to count the number of instances of the letter 'm', the function should return 2.","solution":"def count_letter_instances(s, letter): Returns the number of instances of a specific letter in a given string. :param s: The string in which to count the instances of the letter. :param letter: The letter to count in the string. :return: The number of instances of the letter in the string. return s.count(letter)"},{"question":"Write a python function to remove duplicate values from a list in a single pass.","solution":"def remove_duplicates(lst): Removes duplicate values from a list in a single pass and maintains the order of first occurrence. Args: lst (list): The input list with possible duplicate values. Returns: list: A list with duplicates removed, preserving the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to concatenate two lists. The function should take two lists as input and return their concatenation. If the input is not a list, the function should raise a TypeError with an appropriate error message.","solution":"def concatenate_lists(list1, list2): Concatenates two lists and returns the result. Parameters: list1 (list): The first list. list2 (list): The second list. Returns: list: The concatenated list. Raises: TypeError: If either of the inputs is not a list. if not isinstance(list1, list): raise TypeError(\\"First input must be a list\\") if not isinstance(list2, list): raise TypeError(\\"Second input must be a list\\") return list1 + list2"},{"question":"Write a python function to count the number of lines in a file.","solution":"def count_lines(file_path): Returns the number of lines in the given file. :param file_path: Path to the file :type file_path: str :return: Number of lines in the file :rtype: int with open(file_path, 'r') as file: return sum(1 for _ in file)"},{"question":"Write a python function to calculate triangular numbers. Triangular numbers are the numbers that can form an equilateral triangle when plotted. The nth triangular number is the sum of all numbers from 1 to n. For instance, the first three triangular numbers are 1, 3, and 6. Write a function that takes an integer n as an argument and returns the nth triangular number.","solution":"def triangular_number(n): Returns the nth triangular number. if n < 1: raise ValueError(\\"Input must be a positive integer.\\") return n * (n + 1) // 2"},{"question":"Write a python function to find the largest number in a list. The function should handle any type of iterable of numbers, and if the list is empty, it should return \`None\`.","solution":"def find_largest_number(iterable): Finds the largest number in an iterable of numbers. Returns None if the iterable is empty. if not iterable: return None return max(iterable)"},{"question":"Write a python function to print all even numbers from a list using a list comprehension.","solution":"def get_even_numbers(lst): Returns a list of all even numbers from the input list. Parameters: lst (list): The list from which even numbers are extracted. Returns: list: A list containing all the even numbers from the input list. return [x for x in lst if x % 2 == 0]"},{"question":"Write a python function to find the sum of elements in the range [start, end] in an array. You can assume there are no negative numbers in the array.","solution":"def range_sum(arr, start, end): Returns the sum of elements in the array between the indices start and end (inclusive). Parameters: arr (list of int): The array of non-negative integers. start (int): The starting index. end (int): The ending index. Returns: int: The sum of elements between the indices start and end. if start < 0 or end >= len(arr) or start > end: return 0 return sum(arr[start:end + 1])"},{"question":"Write a python function to reverse the words in a string, but not the characters within each word. For example, given the string \\"hello world\\", the function should return \\"world hello\\".","solution":"def reverse_words(sentence): Reverses the words in a given string sentence, but not the characters within each word. :param sentence: A string containing words separated by spaces :return: A string with the words in reverse order # Split the sentence into words words = sentence.split() # Reverse the order of words reversed_words = words[::-1] # Join the reversed words into a single string reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Write a python function to create a list of evenly spaced numbers between two given numbers (inclusive), similar to the functionality of \`range()\`, but with a floating-point step.","solution":"def create_evenly_spaced_list(start, end, step): Returns a list of evenly spaced numbers between start and end (inclusive), with a floating-point step. numbers = [] current = start if step <= 0: raise ValueError(\\"Step must be a positive number.\\") while current <= end: numbers.append(current) current = round(current + step, 10) # round to avoid floating-point arithmetic issues return numbers"},{"question":"Write a python function to find out the total count of prime numbers that are less than a given number n.","solution":"def count_primes(n): Returns the count of prime numbers less than a given number n. if n <= 2: return 0 primes = [True] * n primes[0] = primes[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if primes[i]: for j in range(i*i, n, i): primes[j] = False return sum(primes)"},{"question":"Write a python function to find the index of the first non-repeating character in a string. If there is no non-repeating character, return -1. For example, if the input is \\"swiss\\" the function should return 1 which corresponds to the character 'w'.","solution":"def first_non_repeating_character(s): Returns the index of the first non-repeating character in a string. If there is no non-repeating character, return -1. char_count = {} # Count the occurrence of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Write a python function to implement an algorithm that takes an array of integers, and return the maximum product of two integers in the array.","solution":"def max_product(arr): Returns the maximum product of two integers in the array. if len(arr) < 2: raise ValueError(\\"The input array must contain at least two elements.\\") max1 = max2 = float('-inf') min1 = min2 = float('inf') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Write a python function to generate Fibonacci sequence up to n using a generator","solution":"def fibonacci_generator(n): Generates the Fibonacci sequence up to n elements. a, b = 0, 1 count = 0 while count < n: yield a a, b = b, a + b count += 1"},{"question":"Write a python function to take a list of integers and find the sum of all integers that are divisible by both 3 and 5, but not by 10.","solution":"def sum_divisible_by_3_and_5(lst): Returns the sum of all integers in the list that are divisible by both 3 and 5, but not by 10. return sum(x for x in lst if x % 3 == 0 and x % 5 == 0 and x % 10 != 0)"},{"question":"Write a python function to print the first n Triangular Numbers. Triangular numbers are formed by adding consecutive integers up to n. For example, the first three triangular numbers are 1, 3, 6 (1+2), 10 (1+2+3), and 15 (1+2+3+4).","solution":"def triangular_numbers(n): Returns a list of the first n triangular numbers. Parameters: n (int): Number of triangular numbers to generate Returns: list: List of the first n triangular numbers result = [] for i in range(1, n + 1): triangular_number = i * (i + 1) // 2 result.append(triangular_number) return result"},{"question":"Write a python function to reverse the characters in the string \\"HelloWorld\\", and then return the reversed string.","solution":"def reverse_string(s): Reverses the characters in the given string. Args: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1] # Testing the function with the given string \\"HelloWorld\\" reverse_string(\\"HelloWorld\\") # Output should be \\"dlroWolleH\\""},{"question":"Write a python function to extract the first non-repeating character from a given string. If no non-repeating character is found, return никак.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If no non-repeating character is found, returns \\"никак\\". char_count = {} # Count the number of occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \\"никак\\""},{"question":"Write a python function to find all the distinct factors of a given number excluding 1 and the number itself. For example, for a number 28, the distinct factors are [2, 4, 7, 14].","solution":"def distinct_factors(n): Returns a list of all distinct factors of a given number n, excluding 1 and the number itself. if n <= 1: return [] factors = [] for i in range(2, int(n**0.5) + 1): if n % i == 0: factors.append(i) if i != n // i: factors.append(n // i) return sorted(factors)"},{"question":"Write a python function to check if a string is a palindrome ignoring cases and spaces. For example, \\"A man a plan a canal Panama\\" is a palindrome.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, ignoring cases and spaces; otherwise, returns False. # Remove spaces and convert to lowercase cleaned_s = ''.join(c.lower() for c in s if c.isalnum()) # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to find the second largest even number in a list. If the list doesn't contain enough elements or there are no even numbers, the function should return None.","solution":"def second_largest_even(numbers): Finds the second largest even number in a list. If there are not enough even numbers, returns None. even_numbers = [num for num in numbers if num % 2 == 0] if len(even_numbers) < 2: return None even_numbers = list(set(even_numbers)) # Remove duplicates even_numbers.sort(reverse=True) return even_numbers[1] if len(even_numbers) >= 2 else None"},{"question":"Write a python function to calculate the sum of the squares of the first \`n\` natural numbers. The function should use a for-loop to achieve this.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. :param n: The number of natural numbers to square and sum. :return: The sum of squares of the first n natural numbers. total = 0 for i in range(1, n + 1): total += i ** 2 return total"},{"question":"Write a python function to calculate the factorial of a number. The function should handle both positive and negative integers as input, and return an appropriate message for invalid inputs. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. The factorial of 0 is defined to be 1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. For negative integers, returns a message indicating invalid input. if not isinstance(n, int): return \\"Invalid input: input must be an integer.\\" if n < 0: return \\"Invalid input: factorial is not defined for negative integers.\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to calculate the sum of two numbers. The function should handle both integer and floating-point numbers.","solution":"def calculate_sum(a, b): Returns the sum of a and b, which can be either integers or floating-point numbers. return a + b"},{"question":"Write a python function to check if a string contains a specific word","solution":"def contains_word(s, word): Check if the given string 's' contains the specified word 'word'. Parameters: s (str): The string to search within. word (str): The word to search for. Returns: bool: True if the string contains the word, False otherwise. return word in s.split()"},{"question":"Write a python function to calculate the nth power of a given number. The function should handle both positive and negative exponents. How can I implement this in Python?","solution":"def power(base, exponent): Returns the base raised to the power of exponent. Handles both positive and negative exponents. return base ** exponent"},{"question":"Write a python function to get the current memory usage of a specific process in bytes.","solution":"import psutil def get_memory_usage(pid): Returns the memory usage of the process with the given PID in bytes. Parameters: pid (int): The process ID. Returns: int: The memory usage in bytes. process = psutil.Process(pid) return process.memory_info().rss"},{"question":"Write a python function to reverse the elements of a given list in Python without using the built-in reverse function.","solution":"def reverse_list(lst): Reverses the elements of the given list without using the built-in reverse function. Parameters: lst (list): The list to reverse. Returns: list: The reversed list. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Write a python function to check if all the numbers in a list are in descending order. You should return \`True\` if they are in descending order, and \`False\` otherwise.","solution":"def is_descending(lst): Check if all the numbers in the list are in descending order. :param lst: List of numbers :return: True if the list is in descending order, False otherwise return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))"},{"question":"Write a python function to check if a binary string is valid or not. A binary string is valid if it contains only '0' and '1'.","solution":"def is_valid_binary_string(binary_string): Checks if a given string is a valid binary string. A binary string is valid if it contains only '0' and '1'. Args: binary_string (str): The string to be checked. Returns: bool: True if the string is a valid binary string, False otherwise. for char in binary_string: if char not in ('0', '1'): return False return True"},{"question":"Write a python function to find the largest number in a list. Additionally, find the smallest number in the list and return both in a tuple.","solution":"def find_largest_and_smallest(numbers): Returns a tuple containing the largest and smallest numbers in a list. :param numbers: List of numbers :return: A tuple (largest, smallest) if not numbers: raise ValueError(\\"The input list cannot be empty\\") largest = max(numbers) smallest = min(numbers) return (largest, smallest)"},{"question":"Write a python function to convert a list of strings to a list of integers. Handle cases where items in the list may not be convertible to integers.","solution":"def convert_to_integers(string_list): Converts a list of strings to a list of integers. Any string that cannot be converted to an integer is skipped. Parameters: string_list (list of str): The list of strings to be converted. Returns: list of int: A list containing only the successfully converted integers. result = [] for item in string_list: try: result.append(int(item)) except ValueError: continue return result"},{"question":"Write a python function to reverse a string in three ways - reversing the string using slicing, using a loop, and using recursion.","solution":"def reverse_string_slicing(s): Reverses a string using slicing. return s[::-1] def reverse_string_loop(s): Reverses a string using a loop. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str def reverse_string_recursion(s): Reverses a string using recursion. if len(s) == 0: return s else: return reverse_string_recursion(s[1:]) + s[0]"},{"question":"Write a python function to find the maximum number of points that can be formed by connecting points on a grid in a straight line. A point on the grid is represented as a tuple (x, y), where x and y are integers.","solution":"from collections import defaultdict from math import gcd def max_points_on_a_line(points): Returns the maximum number of points that can be formed by connecting points on a grid in a straight line. Each point on the grid is represented as a tuple (x, y). if not points: return 0 def slope(c1, c2): Calculate slope between two points c1 and c2 dy = c2[1] - c1[1] dx = c2[0] - c1[0] if dx == 0: return float('inf') elif dy == 0: return 0 else: g = gcd(dy, dx) return (dy // g, dx // g) max_points = 1 for i in range(len(points)): slopes = defaultdict(int) same_points = 0 curr_max = 1 for j in range(i + 1, len(points)): if points[i] == points[j]: same_points += 1 else: s = slope(points[i], points[j]) slopes[s] += 1 curr_max = max(curr_max, slopes[s] + 1) max_points = max(max_points, curr_max + same_points) return max_points"},{"question":"Write a python function to return the nth Fibonacci number. The function should be memoized to improve performance.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using memoization to improve performance. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to take an integer 'n' as input and return the sum of all numbers from 1 to 'n'. Use this function to find the sum of numbers from 1 to 10.","solution":"def sum_of_numbers(n): Returns the sum of all numbers from 1 to n. Parameters: n (int): The number up to which the sum is to be calculated. Returns: int: The sum of all numbers from 1 to n. return sum(range(1, n+1)) # Using the function to find the sum of numbers from 1 to 10 result = sum_of_numbers(10) print(result) # It should print 55"},{"question":"Write a python function to count the number of vertices in a graph using an adjacency list representation. The adjacency list is given as a dictionary where keys are vertices and values are lists of adjacent vertices.","solution":"def count_vertices(adj_list): Returns the count of vertices in a graph represented by an adjacency list. Parameters: adj_list (dict): Adjacency list of the graph where keys are vertices and values are lists of adjacent vertices. Returns: int: Number of vertices in the graph return len(adj_list)"},{"question":"Write a python function to find the number of distinct paths in a grid. The function must take 2 parameters - the number of rows and the number of columns in the grid. The function should return the total number of distinct paths from the top-left corner to the bottom-right corner of the grid, assuming you can only move either down or right at any point in time.","solution":"def num_distinct_paths(rows, cols): Returns the number of distinct paths from the top-left corner to the bottom-right corner of a grid with the given number of rows and columns. # Create a 2D list to store the number of paths to each cell dp = [[1] * cols for _ in range(rows)] # Fill in the 2D list by iterating through each cell for i in range(1, rows): for j in range(1, cols): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The value in the bottom-right cell is the answer return dp[rows-1][cols-1]"},{"question":"Write a python function to calculate the minimum number of jumps required to reach the last index of an array where each element represents the maximum jump length from that position.","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the last index of the array. Parameters: arr (list): A list of non-negative integers representing the maximum jump length from that position. Returns: int: Minimum number of jumps to reach the end of the array. if len(arr) <= 1: return 0 if arr[0] == 0: return float('inf') # cannot move anywhere if the first element is 0 jumps = 0 current_end = 0 farthest = 0 for i in range(len(arr) - 1): farthest = max(farthest, i + arr[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= len(arr) - 1: break if current_end < len(arr) - 1: return float('inf') # cannot reach the last index return jumps"},{"question":"Write a python function to find the smallest divisor of a given number. The function should be efficient even for large numbers. The function should return the smallest divisor greater than 1. If no such divisor exists (the number is prime), the function should return the number itself.","solution":"def smallest_divisor(n): Returns the smallest divisor of n greater than 1. If no such divisor exists, returns n itself. if n <= 1: raise ValueError(\\"n should be greater than 1\\") # Check divisors from 2 to sqrt(n) for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return i return n"},{"question":"Write a python function to determine if all elements in a given list are unique or not. that is, identify whether duplicates exist or not (without using any additional data structures or libraries).","solution":"def all_elements_unique(lst): Determines if all elements in a given list are unique. :param lst: List of elements to check. :return: True if all elements are unique, False otherwise. for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] == lst[j]: return False return True"},{"question":"Write a python function to convert a string to a list where each word is an element of the list.","solution":"def string_to_list(s): Converts a string to a list where each word is an element of the list. Parameters: s (str): The input string. Returns: list: A list containing each word of the string as an element. return s.split()"},{"question":"Write a python function to find the maximum sum of a subarray of a given list.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray in the given list using Kadane's algorithm. Parameters: arr (list): The input list of integers Returns: int: The maximum sum of a subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to generate Fibonacci series using recursion. Additionally, implement error handling for edge cases such as negative numbers or non-integer inputs.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Raises ValueError if n is a negative number or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 if n == 1: return 1 return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a python function to perform factorization of a number. Given an integer \`n\`, return a list of all its factors in ascending order. For example, if \`n=12\`, the function should return \`[1, 2, 3, 4, 6, 12]\`.","solution":"def factorize(n): Returns a list of all factors of n in ascending order. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Write a python function to reverse the string. What should I consider when implementing this function?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a python function to solve N-Queens problem using backtracking. The function should take an integer \`n\` as input and return all distinct solutions to the N-Queens puzzle. Each solution is represented as a list of integers, where the integer at index \`i\` represents the column position of the queen in the i-th row.","solution":"def solveNQueens(n): Solves the N-Queens problem and returns all distinct solutions. Each solution is represented as a list of integers, where the integer at index \`i\` represents the column position of the queen in the i-th row. def is_not_under_attack(row, col): for prev_row in range(row): prev_col = board[prev_row] if col == prev_col or abs(prev_col - col) == abs(prev_row - row): return False return True def place_queen(row): if row == n: solutions.append(board[:]) return for col in range(n): if is_not_under_attack(row, col): board[row] = col place_queen(row + 1) board = [-1] * n solutions = [] place_queen(0) return solutions"},{"question":"Write a python function to find the maximum sum of a subarray within a one-dimensional array of numbers. This function should use dynamic programming to achieve its goal. The function should be as efficient as possible.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the one-dimensional array nums. Uses dynamic programming to achieve the objective efficiently. :param nums: List[int] - The input array of numbers :return: int - The maximum sum of a subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to classify emails based on their contents.","solution":"def classify_email(content): Classify the email based on its contents. - If the email contains the word 'urgent', return 'Urgent'. - If the email contains the word 'meeting', return 'Meeting'. - If the email contains the word 'hello', return 'Casual'. - Otherwise, return 'General'. content = content.lower() if 'urgent' in content: return 'Urgent' elif 'meeting' in content: return 'Meeting' elif 'hello' in content: return 'Casual' else: return 'General'"},{"question":"Write a python function to remove all occurrences of a given number from a list, and return the modified list. The function should modify the list in-place without using an additional data structure like a list comprehension or another list.","solution":"def remove_occurrences(lst, num): Removes all occurrences of \`num\` from \`lst\` in-place and returns the modified list. Parameters: lst (list): The list from which to remove occurrences of \`num\`. num (int/float): The number to remove from the list. Returns: list: The modified list with all occurrences of \`num\` removed. while num in lst: lst.remove(num) return lst"},{"question":"Write a python function to calculate the factorial of a number using a for loop. The function should take one argument which is a non-negative integer. If the input is not valid, your function should return \\"Invalid input\\".","solution":"def factorial(n): Returns the factorial of a non-negative integer n using a for loop. If the input is not valid (i.e., not a non-negative integer), returns \\"Invalid input\\". if not isinstance(n, int) or n < 0: return \\"Invalid input\\" result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to calculate the factorial of a number and ensure it is more than 0. The function should return an error message if the input is not a positive integer.","solution":"def factorial(n): Returns the factorial of a positive integer n. If n is not a positive integer, returns an error message. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer.\\" result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to read from a CSV file and return the data as a list of dictionaries, where each dictionary represents a row in the CSV file. If the CSV file is not found, the function should return an empty list and print an error message.","solution":"import csv def read_csv_as_dict(filename): Reads a CSV file and returns the data as a list of dictionaries. :param filename: name of the CSV file :return: list of dictionaries, where each dictionary represents a row in the CSV file try: with open(filename, mode='r', newline='') as file: reader = csv.DictReader(file) return [row for row in reader] except FileNotFoundError: print(f\\"Error: {filename} not found.\\") return []"},{"question":"Write a python function to generate Fibonacci numbers up to 'n' terms using a loop and then find the sum of those Fibonacci numbers.","solution":"def fibonacci_sum(n): Returns the sum of Fibonacci numbers up to 'n' terms. The Fibonacci series starts with 0, 1, 1, 2, ... Parameters: n (int): Number of terms in the Fibonacci sequence. Returns: int: Sum of the first 'n' Fibonacci numbers. if n <= 0: return 0 elif n == 1: return 0 fib_numbers = [0, 1] sum_fib = 1 for i in range(2, n): next_fib = fib_numbers[-1] + fib_numbers[-2] fib_numbers.append(next_fib) sum_fib += next_fib return sum_fib"},{"question":"Write a python function to find the kth largest element in an unsorted array. The function should use heap data structure to efficiently solve the problem.","solution":"import heapq def find_kth_largest(nums, k): Returns the kth largest element in an unsorted array. This function uses a heap data structure to efficiently find the kth largest element. :param nums: List[int] - The list of unsorted integers. :param k: int - The integer k representing which largest element to find. :return: int - The kth largest element. # Using a min heap to track the k largest elements min_heap = nums[:k] heapq.heapify(min_heap) for num in nums[k:]: if num > min_heap[0]: heapq.heappushpop(min_heap, num) return min_heap[0]"},{"question":"Write a python function to perform a depth-first search (DFS) on a graph using a recursive approach. The function should take a graph represented as an adjacency list and a starting node. The function should return a list of nodes visited in the order they were visited.","solution":"def dfs_recursive(graph, start, visited=None): Perform a depth-first search (DFS) on a graph using a recursive approach. Parameters: - graph: A dictionary representing the graph as an adjacency list. - start: The starting node for the DFS. Returns: - A list of nodes visited in the order they were visited. if visited is None: visited = [] visited.append(start) for neighbor in graph.get(start, []): if neighbor not in visited: dfs_recursive(graph, neighbor, visited) return visited"},{"question":"Write a python function to find the maximum sum of contiguous non-empty subarray within an array nums consisting of n non-negative integers.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous non-empty subarray within an array of non-negative integers. :param nums: List of non-negative integers :return: Integer, maximum sum of contiguous subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to convert a given decimal number into its equivalent binary number using the division method.","solution":"def decimal_to_binary(n): Converts a given decimal number to its equivalent binary number using the division method. Parameters: n (int): The decimal number to be converted. Returns: str: The binary representation of the decimal number. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a python function to generate a random password containing both uppercase and lowercase letters and digits. Additionally, ensure the password contains a minimum of one uppercase, one lowercase, and one digit.","solution":"import random import string def generate_password(length): Generates a random password containing both uppercase, lowercase letters, and digits. Ensures the password contains at least one uppercase, one lowercase, and one digit. :param length: int, length of the password :return: str, generated password if length < 3: raise ValueError(\\"Password length must be at least 3 to include an uppercase letter, a lowercase letter, and a digit.\\") password_chars = ( random.choice(string.ascii_uppercase) + random.choice(string.ascii_lowercase) + random.choice(string.digits) ) if length > 3: all_chars = string.ascii_letters + string.digits password_chars += ''.join(random.choice(all_chars) for _ in range(length - 3)) password_chars = list(password_chars) random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Write a python function to identify all the even numbers in a given list and return a new list. The function should handle cases where the input list might be empty or contain non-integer values.","solution":"def find_even_numbers(lst): This function takes a list of elements and returns a list of even integers from the given list. :param lst: List containing elements. :return: List of even integers from the given list. # Initialize an empty list to collect even numbers even_numbers = [] # Loop through the list and check if each element is an integer and even for item in lst: if isinstance(item, int) and item % 2 == 0: even_numbers.append(item) return even_numbers"},{"question":"Write a python function to find the first non-repeating character in a string. If every character repeats, return an underscore (_). For example, if the input string is \\"aabbcc\\", the output should be an underscore because every character appears twice. If the input string is \\"aabbccddee\\", the output should be \\"f\\" since \\"f\\" is the first character that does not repeat.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If every character repeats, returns an underscore (_). char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Write a python function to find the first maximum and the second maximum number in an array. If the array has less than two unique elements, return \`None\` for the missing values.","solution":"def find_first_and_second_max(arr): Returns the first maximum and the second maximum number in the array. If the array has less than two unique elements, returns None for the missing values. if not arr: return (None, None) first_max = None second_max = None for num in arr: if first_max is None or num > first_max: second_max = first_max first_max = num elif num != first_max and (second_max is None or num > second_max): second_max = num return (first_max, second_max)"},{"question":"Write a python function to get all prime numbers in a range. The function will take two arguments: start and end. It should return a list of all prime numbers within that range, inclusive. Follow Python conventions for function and variable names. Additionally, comment your code to explain what each part does, using three slashes for multi-line comments.","solution":"def is_prime(num): Helper function to check if a number is prime. Returns True if num is a prime number, else False. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def get_primes_in_range(start, end): Returns a list of all prime numbers in the range [start, end] inclusive. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to check if a number n is Fibonacci number or not. You can assume that n is positive integer.","solution":"import math def is_fibonacci(n): Checks if a number is a Fibonacci number. :param n: The integer number to check. :return: True if n is a Fibonacci number, otherwise False. def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x # A number n is a Fibonacci number if and only if one of 5*n*n + 4 or 5*n*n - 4 is a perfect square. return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)"},{"question":"Write a python function to generate all possible combinations of a list with size n of elements, where each combination has the same number of elements as the original list.","solution":"from itertools import permutations def generate_combinations(lst): Returns all possible permutations of the input list with the same number of elements as the original list. return list(permutations(lst, len(lst)))"},{"question":"Write a python function to find the largest product of three numbers in an array.","solution":"def largest_product_of_three(nums): Returns the largest product of any three numbers in the list \`nums\`. if len(nums) < 3: raise ValueError(\\"List must contain at least three numbers.\\") nums.sort() # The largest product of three numbers can be the product of: # - the three largest numbers # - the two smallest numbers (which could be negative, making their product positive) and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a python function to implement a Caesar cipher encryption. A Caesar cipher is a type of substitution cipher in which each letter in the plaintext is shifted a certain number of places down or up the alphabet. For example, with a shift of 1, 'A' would be replaced by 'B', 'B' would become 'C', and so on. The method is apparently named after Julius Caesar, who apparently used it to communicate with his officials.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using a Caesar cipher with the specified shift. Parameters: text (str): The plaintext to encrypt. shift (int): The number of positions by which to shift each letter. Returns: str: The encrypted text. encrypted_text = [] for char in text: # Check if character is a letter if char.isalpha(): # Determine if the letter is uppercase or lowercase ascii_offset = 65 if char.isupper() else 97 # Perform the shift encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset) encrypted_text.append(encrypted_char) else: # Non-letter characters remain the same encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Write a python function to convert an integer to its hexadecimal representation and return it as a string.","solution":"def int_to_hex(n): Converts an integer to its hexadecimal representation. if not isinstance(n, int): raise TypeError(\\"The input must be an integer.\\") return hex(n)[2:] if n >= 0 else '-' + hex(n)[3:]"},{"question":"Write a python function to convert the given number into a string in reverse order.","solution":"def reverse_number_to_string(num): This function takes a number as an input and returns its string representation in reverse order. Parameters: num (int or float): The number to be reversed. Returns: str: The reversed string of the given number. return str(num)[::-1]"},{"question":"Write a python function to check if a given list of integers contains any duplicate values. If it does, return True, otherwise return False. Use sets to achieve this.","solution":"def contains_duplicates(nums): Checks if the given list of integers contains any duplicates. Args: nums (list): A list of integers. Returns: bool: True if there are duplicates, False otherwise. return len(nums) != len(set(nums))"},{"question":"Write a python function to find the largest prime factor of a given number. For example, if the number is 13195, the largest prime factor is 29.","solution":"def largest_prime_factor(n): Returns the largest prime factor of the given number. # Initialize the largest factor variable largest_factor = 1 # Divide out the number 2 until it is no longer divisible while n % 2 == 0: largest_factor = 2 n = n // 2 # Check for odd factors from 3 onwards i = 3 while i * i <= n: while n % i == 0: largest_factor = i n = n // i i += 2 # If n is still greater than 2, then it must be a prime number if n > 2: largest_factor = n return largest_factor"},{"question":"Write a python function to identify the two numbers in a list which sum up to a target number.","solution":"def find_two_sum(nums, target): Returns indices of the two numbers in the list that add up to the target number. If no such pair exists, returns None. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return None"},{"question":"Write a python function to find the last word in a string that contains the letter 'a' and has no 'e' in it. If no such word exists, return \\"No word found.\\"","solution":"def find_last_word_with_a_no_e(s): Finds the last word in the string \`s\` that contains the letter 'a' and has no 'e' in it. If no such word exists, return \\"No word found.\\" words = s.split() last_valid_word = \\"No word found.\\" for word in words: if 'a' in word and 'e' not in word: last_valid_word = word return last_valid_word"},{"question":"Write a python function to merge two sorted lists in place. You should not create a new list, and the operation should be done efficiently without using extra space.","solution":"def merge_in_place(nums1, m, nums2, n): Merges two sorted lists into the first list (nums1) in place. The first list nums1 should have sufficient space to hold the combined elements of both by convention with remaining zeros in the tail. Parameters: nums1 (List[int]): The first list, which should be able to hold m + n items. m (int): Number of initialized elements in nums1. nums2 (List[int]): The second list, which contains n elements. n (int): Number of elements in nums2. Returns: Nothing, modifies nums1 in-place. while m > 0 and n > 0: if nums1[m - 1] > nums2[n - 1]: nums1[m + n - 1] = nums1[m - 1] m -= 1 else: nums1[m + n - 1] = nums2[n - 1] n -= 1 while n > 0: nums1[m + n - 1] = nums2[n - 1] n -= 1"},{"question":"Write a python function to search for a specific number in a sorted list using binary search. If the number is found, return its index. Otherwise, return -1.","solution":"def binary_search(arr, target): Searches for a specific number in a sorted list using binary search. Parameters: arr (list of int): The sorted list of numbers. target (int): The number to search for. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the common elements in two lists. The function should return a tuple containing these common elements. The function itself should not modify the input lists.","solution":"def find_common_elements(list1, list2): This function takes two lists and returns a tuple containing elements that are common in both lists. common_elements = set(list1).intersection(set(list2)) return tuple(common_elements)"},{"question":"Write a python function to multiply all the integers in a list.","solution":"def multiply_list(numbers): Multiply all the integers in a list. :param numbers: List of integers :return: The product of all integers in the list product = 1 for number in numbers: product *= number return product"},{"question":"Write a python function to parse a string into a list of words. The function should also remove any duplicate words from the list. Here is the sample input string: \`sampleInputString = \\"hello world hello python world python\\"\`.","solution":"def parse_string_to_unique_words(input_string): Parses the input string into a list of unique words. Parameters: input_string (str): The string to be parsed. Returns: list: A list of unique words in the order they first appeared. words = input_string.split() seen = set() unique_words = [] for word in words: if word not in seen: seen.add(word) unique_words.append(word) return unique_words # Example usage: # sampleInputString = \\"hello world hello python world python\\" # print(parse_string_to_unique_words(sampleInputString)) # Output: ['hello', 'world', 'python']"},{"question":"Write a python function to remove duplicates from an array in-place. You should not create a new array and the operation should be efficient.","solution":"def remove_duplicates(nums): Removes duplicates from an array in-place and returns the new length. The order of elements can be changed. if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a python function to determine if a user's input number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Determines if a number is a prime number. Arguments: n -- integer to check for primality Returns: True if n is a prime number, False otherwise if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # All other even numbers are not primes for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a python function to decode a run-length encoded list. Run-length encoding is a simple form of data compression where consecutive repeated elements are stored as a single data value and count. The input is a list where each element is a pair (tuple) consisting of a run-length count and a value. For example, the list \`[(4, 'x'), (1, 'a'), (2, 'c')]\` should be decoded to the list \`['x', 'x', 'x', 'x', 'a', 'c', 'c']\`.","solution":"def decode_rle(encoded_list): Decodes a run-length encoded list. Args: encoded_list: List of tuples where each tuple contains a count and a value. Returns: A decoded list where each value is repeated according to its count. decoded_list = [] for count, value in encoded_list: decoded_list.extend([value] * count) return decoded_list"},{"question":"Write a python function to find the longest substring with at most two distinct characters.","solution":"def longest_substring_with_two_distinct(s): Returns the longest substring with at most two distinct characters. Parameters: s (str): The input string. Returns: str: The longest substring with at most two distinct characters. from collections import defaultdict if not s: return \\"\\" left, right = 0, 0 max_length, max_substring = 0, \\"\\" char_count = defaultdict(int) while right < len(s): char_count[s[right]] += 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if right - left + 1 > max_length: max_length = right - left + 1 max_substring = s[left:right + 1] right += 1 return max_substring"},{"question":"Write a python function to check if a given list of numbers is sorted in ascending order.","solution":"def is_sorted_ascending(lst): Returns True if the list is sorted in ascending order, otherwise False. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Write a python function to remove duplicates from a sorted array in-place and return the new length of the array. The function should shift the unique elements to the front of the array. The extra space used should be O(1).","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place and returns the new length. Parameters: nums (list of int): A sorted list of integers. Returns: int: The new length of the array after removing duplicates. if not nums: return 0 unique_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[unique_index] = nums[i] unique_index += 1 return unique_index"},{"question":"Write a python function to find the smallest number in a list of numbers using the built-in min function.","solution":"def find_smallest_number(numbers): Returns the smallest number in a list using the built-in min function. :param numbers: List of numbers :return: The smallest number in the list if not numbers: raise ValueError(\\"The list cannot be empty\\") return min(numbers)"},{"question":"Write a python function to calculate the nth Fibonacci number using the matrix exponentiation method. Matrix exponentiation provides an efficient way to compute Fibonacci numbers with a time complexity of O(log(n)).","solution":"def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [[A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]]] def matrix_pow(M, n): Raises matrix M to the power of n using binary exponentiation. result = [[1, 0], [0, 1]] # Identity matrix while n: if n % 2: result = matrix_mult(result, M) M = matrix_mult(M, M) n //= 2 return result def fibonacci(n): Returns the nth Fibonacci number using matrix exponentiation. if n <= 0: return 0 F = [[1, 1], [1, 0]] result = matrix_pow(F, n-1) return result[0][0]"},{"question":"Write a python function to find the maximum and minimum numbers in a list, and sum them up. To solve this, you should not use any built-in functions like max() and min().","solution":"def find_max_and_min_sum(arr): This function finds the maximum and minimum numbers in a list, and sums them up. :param arr: list of numbers :return: sum of the maximum and minimum numbers in the list if not arr: # If the list is empty, return 0 return 0 max_num = arr[0] min_num = arr[0] for num in arr: if num > max_num: max_num = num if num < min_num: min_num = num return max_num + min_num"},{"question":"Write a python function to generate a list of prime numbers between two given numbers (inclusive).","solution":"def is_prime(n): Checks if a number is prime. Parameters: n (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes(start, end): Generates a list of prime numbers between two given numbers (inclusive). Parameters: start (int): The starting number of the range. end (int): The ending number of the range. Returns: list: A list of prime numbers between the start and end (inclusive). primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to calculate the sum of all prime numbers in a given range, using a boolean array approach. I want this function to handle the range from 2 to n, inclusive. Also, please include a docstring explaining the function and its parameters.","solution":"def sum_of_primes_within_range(n): Calculate the sum of all prime numbers in the range from 2 to n, inclusive. Parameters: n (int): The upper bound of the range. Returns: int: The sum of all prime numbers within the range. if n < 2: return 0 sieve = [True] * (n + 1) # Create a boolean array \\"prime[0..n]\\" and initialize sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers for p in range(2, int(n**0.5) + 1): if sieve[p]: for multiples in range(p * p, n + 1, p): sieve[multiples] = False prime_sum = sum(index for index, is_prime in enumerate(sieve) if is_prime) return prime_sum"},{"question":"Write a python function to solve the equation (ax^2 + bx + c = 0) for integers (a), (b), and (c) where (a neq 0). If there are no real solutions, the function should return None.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0 and returns the real solutions as a tuple. If there are no real solutions, returns None. if a == 0: raise ValueError(\\"Coefficient 'a' cannot be zero in a quadratic equation.\\") # Calculate the discriminant discriminant = b**2 - 4*a*c if discriminant < 0: return None else: root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) if discriminant == 0: return (root1.real,) else: return (root1.real, root2.real)"},{"question":"Write a python function to find the largest number in a list using recursion. Can you guide me through the process of breaking down the problem and solving it step-by-step using recursion in Python?","solution":"def find_largest_number(lst): Finds the largest number in a list using recursion. :param lst: List of numbers :return: The largest number in the list # Base case: if the list has only one element, return that element if len(lst) == 1: return lst[0] # Recursive case: compare the first element with the largest of the rest else: largest_of_rest = find_largest_number(lst[1:]) return lst[0] if lst[0] > largest_of_rest else largest_of_rest"},{"question":"Write a python function to filter out non alphabetic characters from a string.","solution":"def filter_alphabetic_characters(input_str): Returns a string containing only the alphabetic characters from the input string. return ''.join([char for char in input_str if char.isalpha()])"},{"question":"Write a python function to find the smallest subarray with a sum greater than or equal to a given number \`S\`.","solution":"def smallest_subarray_with_given_sum(arr, S): Find the length of the smallest contiguous subarray whose sum is greater than or equal to S. Parameters: arr (list): A list of positive integers. S (int): The target sum. Returns: int: The length of the smallest subarray. If no such subarray exists, return 0. window_sum = 0 min_length = float('inf') window_start = 0 for window_end in range(len(arr)): window_sum += arr[window_end] # Add the next element to the window # Shrink the window as small as possible until the window_sum is smaller than S while window_sum >= S: min_length = min(min_length, window_end - window_start + 1) window_sum -= arr[window_start] window_start += 1 # If min_length was not changed, return 0 return min_length if min_length != float('inf') else 0"},{"question":"Write a python function to check if a string contains a specific character or not","solution":"def contains_char(string, char): Checks if the given string contains the specified character. Parameters: string (str): The string to check. char (str): The character to look for in the string. Returns: bool: True if the character is found in the string, False otherwise. return char in string"},{"question":"Write a python function to implement the following problem: Given an array of integers, find the maximum value and its index in the array.","solution":"def find_max_value_and_index(array): Given an array of integers, find the maximum value and its index in the array. Parameters: array (list): A list of integers Returns: tuple: A tuple containing the maximum value and its index (max_value, index) if not array: return None, None max_value = array[0] max_index = 0 for index in range(1, len(array)): if array[index] > max_value: max_value = array[index] max_index = index return max_value, max_index"},{"question":"Write a python function to find the sortest unsorted continuous subarray in an array.","solution":"def find_unsorted_subarray(nums): Finds the shortest subarray that needs to be sorted in place so that the whole array becomes sorted. Args: nums (List[int]): The input array of integers. Returns: int: Length of the shortest subarray that needs to be sorted. n = len(nums) start, end = 0, -1 max_seen, min_seen = -float('inf'), float('inf') # Identify the end of the subarray to be sorted for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i # Identify the start of the subarray to be sorted for i in range(n-1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i return end - start + 1 if end != -1 else 0"},{"question":"Write a python function to find the sum of the first 'n' terms of the series","solution":"def sum_of_series(n): Returns the sum of the first 'n' terms of the series: 1 + 1/2 + 1/3 + ... + 1/n. Parameters: n (int): The number of terms. Returns: float: The sum of the series. if n <= 0: raise ValueError(\\"n should be a positive integer\\") sum_series = 0 for i in range(1, n + 1): sum_series += 1 / i return sum_series"},{"question":"Write a python function to create a dictionary where the key is the word and the value is the list of line numbers where the word appears in a given text.","solution":"def word_line_numbers(text): Given a text, returns a dictionary where the key is the word and the value is the list of line numbers where the word appears. Parameters: text (str): Input text. Returns: dict: A dictionary with words as keys and lists of line numbers as values. from collections import defaultdict word_dict = defaultdict(list) lines = text.split('n') for index, line in enumerate(lines, start=1): words = line.split() for word in words: word_dict[word].append(index) return dict(word_dict)"},{"question":"Write a python function to count the number of occurrences of a specific string in a file. You should read the file line by line to avoid loading the entire file into memory, which is especially useful for large files.","solution":"def count_occurrences(file_path, target_string): Counts the number of occurrences of a specific string in a file. Parameters: - file_path: Path to the file to be read. - target_string: String to search for in the file. Returns: - int: Number of occurrences of the target_string in the file. count = 0 with open(file_path, 'r') as file: for line in file: count += line.count(target_string) return count"},{"question":"Write a python function to find the longest continuous increasing subarray within an array of integers. Your function should return the length of this subarray. For example, given the array \`[1, 3, 5, 4, 7]\`, the longest continuous increasing subarray is \`[1, 3, 5]\` and it has a length of \`3\`. If there is no increasing subarray, the function should return \`0\`.","solution":"def longest_increasing_subarray(arr): Returns the length of the longest continuous increasing subarray. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Write a python function to generate a list of the first n prime numbers. Your function should return the list in ascending order. For example, if n is 5, the function should return the list [2, 3, 5, 7, 11].","solution":"def generate_primes(n): Returns a list of the first n prime numbers in ascending order. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = all(candidate % prime != 0 for prime in primes) if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Write a python function to return all prime numbers less than a given number 'n' and efficiently check for primality.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than a given number n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] # Initialize a list of boolean values representing primality of numbers is_prime = [True] * n is_prime[0], is_prime[1] = False, False for start in range(2, int(n ** 0.5) + 1): if is_prime[start]: for multiple in range(start * start, n, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime]"},{"question":"Write a python function to get the square root of a number using the bisection method. The function should take two parameters: \`lower_bound\` and \`upper_bound\`, which are the initial guesses for the root. The function should return the square root of a number \`n\` within a specified tolerance level. The tolerance level is 0.01 by default but can be adjusted as needed.","solution":"def sqrt_bisection(n, lower_bound, upper_bound, tolerance=0.01): Returns the square root of n using the bisection method. Parameters: n - The number to find the square root of. lower_bound - Initial lower bound for the root. upper_bound - Initial upper bound for the root. tolerance - The tolerance level for finding the root. Default is 0.01. Returns: The square root of n. if n < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") while (upper_bound - lower_bound) > tolerance: midpoint = (lower_bound + upper_bound) / 2 if midpoint ** 2 < n: lower_bound = midpoint else: upper_bound = midpoint return (lower_bound + upper_bound) / 2"},{"question":"Write a python function to check if a given list of tuples contains any duplicates. Tuples are considered duplicates if they contain the same elements in the same order.","solution":"def contains_duplicates(tuples_list): Check if the given list of tuples contains any duplicates. seen = set() for t in tuples_list: if t in seen: return True seen.add(t) return False"},{"question":"Write a python function to check if a number is even or odd. If the number is even, return \\"Even\\", otherwise return \\"Odd\\". Also, handle the scenario where the input is not a number.","solution":"def check_even_or_odd(value): Returns 'Even' if the input is an even number, 'Odd' if it is an odd number, and 'Not a number' if the input is not a number. if not isinstance(value, (int, float)): return \\"Not a number\\" elif isinstance(value, float) and not value.is_integer(): return \\"Not a number\\" elif value % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"Write a python function to calculate the factorial of a number using recursion. Provide the function definition and demonstrate its use by calculating the factorial of 5 and 8.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n - 1) # Demonstrating the use by calculating the factorial of 5 and 8 factorial_of_5 = factorial(5) # Should return 120 factorial_of_8 = factorial(8) # Should return 40320"},{"question":"Write a python function to reverse an integer. You should consider the case when the reversed integer overflows. In such cases, return 0 as the overflowed result.","solution":"def reverse_integer(n): Reverses the given integer n. If the reversed integer overflows, returns 0. sign = -1 if n < 0 else 1 n = abs(n) reversed_num = int(str(n)[::-1]) # Define 32-bit integer range INT_MAX = 2147483647 if reversed_num > INT_MAX: return 0 return sign * reversed_num"},{"question":"Write a python function to check if a given phone number is valid. A valid phone number in this context is a 10-digit number prefixed with a '+' and a space, followed by country code (2 digits) and number (8 digits).","solution":"import re def is_valid_phone_number(phone_number): Validate a phone number. A valid phone number: - Starts with a '+' - Followed by a space - Followed by a 2-digit country code - Followed by an 8-digit number Example: \\"+ 12 12345678\\" :param phone_number: str, the phone number to be validated :return: bool, True if valid, False otherwise pattern = r\\"^+ d{2} d{8}\\" return bool(re.match(pattern, phone_number))"},{"question":"Write a python function to check the validity of a binary tree. A binary tree is considered valid if every node has at most two children, and no node contains more than one parent.","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def is_valid_binary_tree(root): Check the validity of a binary tree. A binary tree is considered valid if every node has at most two children, and no node has more than one parent. if root is None: return True visited = set() def dfs(node, parent): if node in visited: return False visited.add(node) # Check the left subtree if node.left: if not dfs(node.left, node): return False # Check the right subtree if node.right: if not dfs(node.right, node): return False return True return dfs(root, None)"},{"question":"Write a python function to return the nth digit of a given integer (n starts from 1). If the nth digit does not exist, return -1.","solution":"def nth_digit(number, n): Returns the nth digit of a given integer (n starts from 1). If the nth digit does not exist, return -1. number_str = str(abs(number)) # Convert the number to string (ignore sign) if n > len(number_str) or n < 1: return -1 return int(number_str[n-1])"},{"question":"Write a python function to check if a given string represents a valid binary number.","solution":"def is_valid_binary(s): Checks if the given string \`s\` represents a valid binary number. A valid binary number contains only '0's and '1's. :param s: string :return: bool for char in s: if char not in '01': return False return True"},{"question":"Write a python function to implement the Kadane's Algorithm which can find the maximum sum of a contiguous subarray in an array with a minimum length of 2. If the array length is less than 2, return an error message.","solution":"def kadane_algorithm(arr): Implements Kadane's Algorithm to find the maximum sum of a contiguous subarray with a minimum length of 2. :param arr: List of integers. :return: Maximum sum of contiguous subarray of length >= 2 or an error message if length is less than 2. if len(arr) < 2: return \\"Array length must be at least 2.\\" max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the common elements between two lists and return a list of those common elements in sorted order.","solution":"def common_elements(list1, list2): Returns a sorted list of common elements between list1 and list2. common = list(set(list1) & set(list2)) return sorted(common)"},{"question":"Write a python function to find the minimum sum of a contiguous subarray within an array of integers.","solution":"def min_sub_array_sum(nums): Find the minimum sum of a contiguous subarray within an array of integers. Args: nums (List[int]): The input list of integers. Returns: int: The minimum sum of any contiguous subarray. if not nums: return 0 min_sum = current_min_sum = nums[0] for num in nums[1:]: current_min_sum = min(num, current_min_sum + num) min_sum = min(min_sum, current_min_sum) return min_sum"},{"question":"Write a python function to solve this problem: Given a non-empty list of digits representing a non-negative integer, plus one to the integer. The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit. The function should return the resulting digits after adding one.","solution":"def plus_one(digits): Given a non-empty list of digits representing a non-negative integer, plus one to the integer. Parameters: digits (List[int]): A list of digits representing a non-negative integer. Returns: List[int]: A list of digits after adding one to the integer. n = len(digits) for i in range(n-1, -1, -1): if digits[i] == 9: digits[i] = 0 else: digits[i] += 1 return digits return [1] + digits"},{"question":"Write a python function to find the fifth element (1-based index) in a list if it exists. If the list has less than five elements, return a message \\"Not enough elements\\".","solution":"def get_fifth_element(lst): Returns the fifth element of the list if it exists. If the list has less than five elements, return a message \\"Not enough elements\\". if len(lst) < 5: return \\"Not enough elements\\" return lst[4]"},{"question":"Write a python function to return the sum of squares of all prime numbers in a given list of integers.","solution":"import math def is_prime(n): Check if n is a prime number. if n <= 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True def sum_of_squares_of_primes(numbers): Returns the sum of squares of all prime numbers in the given list of integers. return sum(x**2 for x in numbers if is_prime(x))"},{"question":"Write a python function to determine if a given list contains only even numbers.","solution":"def all_even(numbers): Returns True if all numbers in the list are even, otherwise returns False. return all(num % 2 == 0 for num in numbers)"},{"question":"Write a python function to split an integer into its reversed and non-reversed forms, sum them, and return the sum.","solution":"def split_and_sum(n): Splits an integer into its reversed and non-reversed forms, sums them, and returns the sum. Args: n (int): The input integer. Returns: int: The sum of the integer and its reversed form. original_str = str(n) reversed_str = original_str[::-1] original_num = int(original_str) reversed_num = int(reversed_str) return original_num + reversed_num"},{"question":"Write a python function to convert a nested dictionary to a flat dictionary where all the keys are concatenated with the parent keys to represent the hierarchy. For instance, for the nested dictionary {\\"a\\": {\\"b\\": {\\"c\\": 1}}}, the flat dictionary would be {\\"a\\": 1}. Note that the nested dictionary might have multiple levels of nesting.","solution":"def flatten_dict(d, parent_key='', sep='.'): Flatten a nested dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): The base key to use for recursion. Default is ''. sep (str): Separator between parent and child keys. Default is '.'. Returns: dict: A flattened dictionary. items = [] for k, v in d.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a python function to reverse the order of characters in a string, but without reversing the characters in the individual words. For example, given the input string \\"Hello World\\", the function should return \\"olleH dlroW\\".","solution":"def reverse_characters_in_words(s): Reverses the order of characters in each word of a string, but maintains the order of the words. Parameters: s (str): Input string Returns: str: Modified string with characters in each word reversed words = s.split() # Split the string into words reversed_words = [word[::-1] for word in words] # Reverse characters in each word return ' '.join(reversed_words) # Join the reversed words back into a string"},{"question":"Write a python function to identify the number of characters in a given string that are followed by at least one other occurrence of the same character.","solution":"def count_followed_characters(s): Return the number of characters in the string 's' that are followed by at least one other occurrence of the same character. followed_chars = set() result_count = 0 seen = {} for char in s: if char in seen: seen[char] += 1 else: seen[char] = 1 for index, char in enumerate(s): seen[char] -= 1 if seen[char] > 0 and char not in followed_chars: followed_chars.add(char) result_count += 1 return result_count"},{"question":"Write a python function to demonstrate the use of Inheritance.","solution":"class Animal: def __init__(self, name): self.name = name def speak(self): raise NotImplementedError(\\"Subclasses must implement this method\\") class Dog(Animal): def __init__(self, name, breed): super().__init__(name) self.breed = breed def speak(self): return \\"Woof!\\" class Cat(Animal): def __init__(self, name, color): super().__init__(name) self.color = color def speak(self): return \\"Meow!\\""},{"question":"Write a python function to find the minimum element in a given list. The function should be efficient and handle various cases, such as an empty list or a list with negative numbers.","solution":"def find_minimum(lst): Returns the minimum element in a given list. If the list is empty, it returns None. if not lst: return None minimum = lst[0] for num in lst: if num < minimum: minimum = num return minimum"},{"question":"Write a python function to count the number of occurrences of a given word in a string, considering word boundaries. You can assume that words in the string are separated by whitespace. How would you test the function with a few examples?","solution":"def count_word_occurrences(text, word): Counts the number of occurrences of a given word in a string, considering word boundaries. Parameters: text (str): The string in which to count occurrences. word (str): The word to count in the string. Returns: int: The count of the word's occurrences in the string. words = text.split() return words.count(word)"},{"question":"Write a python function to count the occurrences of a specific substring within a string, considering case sensitivity. The function should return the count of all occurrences regardless of position within the main string.","solution":"def count_substring_occurrences(main_string, substring): Returns the number of occurrences of substring within main_string. Args: main_string (str): The string to search within. substring (str): The substring to count occurrences of. Returns: int: The count of occurrences of the substring. if not main_string or not substring: return 0 return main_string.count(substring)"},{"question":"Write a python function to implement a LRU (Least Recently Used) Cache. The cache should support the following operations: get and put. When the cache reaches its capacity, it should evict the least recently used item before adding a new item.","solution":"class Node: def __init__(self, key: int, value: int): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.head = Node(0, 0) self.tail = Node(0, 0) self.head.next = self.tail self.tail.prev = self.head def get(self, key: int) -> int: if key in self.cache: node = self.cache[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self._remove(self.cache[key]) node = Node(key, value) self._add(node) self.cache[key] = node if len(self.cache) > self.capacity: node = self.head.next self._remove(node) del self.cache[node.key] def _remove(self, node): prev = node.prev next = node.next prev.next = next next.prev = prev def _add(self, node): prev = self.tail.prev prev.next = node self.tail.prev = node node.prev = prev node.next = self.tail"},{"question":"Write a python function to check if three sides can form a valid triangle.","solution":"def is_valid_triangle(a, b, c): Check if the sides a, b, and c can form a valid triangle. A triangle is valid if the sum of any two sides is greater than the third. return a + b > c and a + c > b and b + c > a"},{"question":"Write a python function to find the nth Fibonacci number. The function should use dynamic programming to improve efficiency.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 fib = [0, 1] for i in range(2, n + 1): fib.append(fib[-1] + fib[-2]) return fib[n]"},{"question":"Write a python function to convert a list of integers to their string representation and then concatenate them into a single string.","solution":"def concat_numbers(numbers): Converts a list of integers to their string representation and concatenates them into a single string. :param numbers: list of integers :return: concatenated string of the integer list return ''.join(map(str, numbers))"},{"question":"Write a python function to find the square root of a number using the bisection method. The function should be implemented without using the built-in \`sqrt\` function. The function should take a single argument, \`n\`, and return the square root of \`n\`.","solution":"def square_root(n, tolerance=1e-10): Returns the square root of n using the bisection method. n: the number to find the square root of. tolerance: the precision of the result. if n < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") # Special case for n = 0: if n == 0: return 0 low = 0 high = max(1, n) mid = (low + high) / 2 while abs(mid*mid - n) > tolerance: if mid*mid < n: low = mid else: high = mid mid = (low + high) / 2 return mid"},{"question":"Write a python function to find the nth Fibonacci number in O(n) time complexity using the iterative method.","solution":"def fibonacci(n): Returns the nth Fibonacci number using the iterative method. The time complexity is O(n). if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to analyze the frequency of each character in a string and return the character with the highest frequency.","solution":"def highest_frequency_char(s): Returns the character with the highest frequency from the string \`s\`. if not s: return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 highest_freq_char = max(char_count, key=char_count.get) return highest_freq_char"},{"question":"Write a python function to convert a given integer to a binary string and then to find the XOR of all bits in the binary string.","solution":"def integer_to_binary_xor(n): Converts an integer to a binary string and finds the XOR of all bits in the binary string # Convert the given integer to binary string binary_str = bin(n)[2:] # Initialize result of XOR operation xor_result = 0 # Iterate through each bit in the binary string and perform XOR operation for bit in binary_str: xor_result ^= int(bit) return xor_result"},{"question":"Write a python function to check if a binary number is a palindrome. A binary number is a palindrome if it reads the same backward as forward. For example, 0101 is a binary palindrome.","solution":"def is_binary_palindrome(binary_str): Check if the given binary string is a palindrome. Args: binary_str (str): A string representing a binary number. Returns: bool: True if the binary string is a palindrome, False otherwise. return binary_str == binary_str[::-1]"},{"question":"Write a python function to check if an array contains any duplicates.","solution":"def contains_duplicates(arr): Checks if the array contains any duplicates. Parameters: arr (list): The array to check for duplicates. Returns: bool: True if duplicates are found, False otherwise. return len(arr) != len(set(arr))"},{"question":"Write a python function to calculate the total cost of an item after applying a percentage discount. The function should take in the cost of the item and the discount percentage as arguments, and then return the cost of the item after the discount has been applied.","solution":"def calculate_discounted_cost(cost, discount_percentage): Returns the cost of an item after applying the given discount percentage. :param cost: Original cost of the item. :param discount_percentage: Discount percentage to be applied. :return: Cost of the item after discount. discount_amount = (discount_percentage / 100) * cost return cost - discount_amount"},{"question":"Write a python function to return the maximum number in a given list using the built-in function \`max()\`.","solution":"def find_maximum(numbers): Returns the maximum number from a given list using the built-in max function. Parameters: numbers (list): List of numbers Returns: int/float: Maximum number in the list if not numbers: raise ValueError(\\"The list is empty\\") return max(numbers)"},{"question":"Write a python function to find the intersection of two sorted lists. The function should return a list containing the common elements between the two lists. If there are no common elements, the function should return an empty list.","solution":"def intersection_of_sorted_lists(list1, list2): Returns the intersection of two sorted lists. i, j = 0, 0 intersection = [] while i < len(list1) and j < len(list2): if list1[i] < list2[j]: i += 1 elif list1[i] > list2[j]: j += 1 else: intersection.append(list1[i]) i += 1 j += 1 return intersection"},{"question":"Write a python function to solve the problem: Given an input array, rotate the array to the right by k steps, where k is non-negative.","solution":"def rotate_array(nums, k): Rotates the array to the right by k steps. Parameters: nums (list): List of elements to be rotated. k (int): Number of steps to rotate the array. Returns: list: Rotated array. if not nums: return [] k = k % len(nums) # In case k is larger than the length of the array return nums[-k:] + nums[:-k]"},{"question":"Write a python function to calculate the greatest common divisor (GCD) of two integers. The function should take two integers as input and return their GCD.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Write a python function to find the reverse of a string. The function should avoid using the slicing method. You should implement your solution using iteration.","solution":"def reverse_string(s): Returns the reverse of the input string \`s\` using iteration. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to calculate the number of paths in a grid with obstacles that can only move right and down. The grid is represented as a 2D list where 0 represents an empty cell and 1 represents an obstacle. The function should take the grid as input and return the number of unique paths from the top-left corner to the bottom-right corner. If no path exists due to obstacles, the function should return -1.","solution":"def unique_paths_with_obstacles(grid): Calculate the number of unique paths from the top-left corner to the bottom-right corner in a grid with obstacles. 0 represents an empty cell and 1 represents an obstacle. :param grid: List[List[int]] - 2D grid :return: int - number of unique paths or -1 if no path exists if not grid or not grid[0] or grid[0][0] == 1: return -1 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] if grid[0][j] == 0 else 0 # Fill the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] if grid[i][0] == 0 else 0 # Fill the rest of dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i - 1][j] + dp[i][j - 1] else: dp[i][j] = 0 # If the destination is an obstacle if dp[-1][-1] == 0: return -1 return dp[-1][-1]"},{"question":"Write a python function to find the minimum and maximum number in a list of integers. Additionally, the function should return the position (index) at which these values are located in the original list.","solution":"def find_min_max_positions(numbers): Returns the minimum and maximum number in a list along with their positions (indices). Args: numbers : list of int The list of integers from which to find the min and max values. Returns: tuple A tuple containing four elements - min value, index of min value, max value, index of max value. if not numbers: raise ValueError(\\"The list cannot be empty\\") min_val = min(numbers) max_val = max(numbers) min_pos = numbers.index(min_val) max_pos = numbers.index(max_val) return min_val, min_pos, max_val, max_pos"},{"question":"Write a python function to find the most frequent number in a given list. If there is a tie, return the smallest number among the most frequent numbers.","solution":"def most_frequent_number(numbers): Returns the most frequent number in the given list. If there is a tie, returns the smallest number. from collections import Counter if not numbers: return None count = Counter(numbers) max_frequency = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_frequency] return min(most_frequent)"},{"question":"Write a python function to reverse a string using a loop only. No slicing, built-in functions, or list methods are allowed.","solution":"def reverse_string(s): Reverses a string using a loop. Args: s (str): The input string. Returns: str: The reversed string. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to create a list that only includes the numbers that have odd frequencies in the original list.","solution":"from collections import Counter def odd_frequency_elements(arr): Returns a list of elements that appear an odd number of times in the input list. counter = Counter(arr) return [element for element, count in counter.items() if count % 2 != 0]"},{"question":"Write a python function to perform a binary search in a list. The function should return the index of the desired element if found, or -1 if not found. The list should be sorted in ascending order.","solution":"def binary_search(arr, target): Performs binary search on the list \`arr\` to find the index of \`target\`. Returns the index if found, otherwise returns -1. :param arr: List of elements sorted in ascending order. :param target: Element to search for in the list. :return: Index of target if found, -1 otherwise. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to generate Fibonacci sequence using recursion. I want the function to stop generating the Fibonacci sequence when a number greater than or equal to a given limit is encountered.","solution":"def fibonacci_recursive(limit, a=0, b=1, sequence=None): Generates the Fibonacci sequence using recursion until a number greater than or equal to the given limit is encountered. if sequence is None: sequence = [] if a >= limit: return sequence sequence.append(a) return fibonacci_recursive(limit, b, a + b, sequence)"},{"question":"Write a python function to extract the odd numbers from a list of integers and return them in a new list.","solution":"def extract_odd_numbers(numbers): Extracts the odd numbers from a list of integers and returns them in a new list. :param numbers: List of integers :return: List of odd integers return [number for number in numbers if number % 2 != 0]"},{"question":"Write a python function to find the union of two sets. The union of two sets is a set containing all elements that are in either set.","solution":"def union_sets(set1, set2): Returns the union of two sets. Parameters: set1 (set): The first set. set2 (set): The second set. Returns: set: The union of set1 and set2. return set1.union(set2)"},{"question":"Write a python function to traverse a binary tree in breadth-first order and print each node.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def breadth_first_traversal(root): Traverses a binary tree in breadth-first order and prints each node's value. :param root: TreeNode, the root of the binary tree if root is None: return queue = deque([root]) # Initialize the queue with the root while queue: current_node = queue.popleft() # Remove and return the leftmost node print(current_node.value) # Print the current node's value if current_node.left: queue.append(current_node.left) # Add left child to the queue if current_node.right: queue.append(current_node.right) # Add right child to the queue"},{"question":"Write a python function to find the average of a list. You should also handle cases where the list is empty or contains non-numeric values gracefully.","solution":"def average(lst): Returns the average of a list of numbers. If the list is empty or contains non-numeric values, returns None. if not lst: return None valid_numbers = [x for x in lst if isinstance(x, (int, float))] if not valid_numbers: return None return sum(valid_numbers) / len(valid_numbers)"},{"question":"Write a python function to return the maximum character in a given string ignoring case sensitivity.","solution":"def max_char(s): Returns the maximum character in a given string ignoring case sensitivity. if not s: return None s = s.lower() max_char = s[0] for char in s[1:]: if char > max_char: max_char = char return max_char"},{"question":"Write a python function to get an integer as an input and return the integer after removing the last digit from it. If the input integer is 123, the function should return 12.","solution":"def remove_last_digit(number): Returns the integer after removing the last digit from the given number. if number < 0: number = abs(number) // 10 return -number return number // 10"},{"question":"Write a python function to remove all instances of a value from a list and return the new length of the list.","solution":"def remove_value_from_list(lst, value): Removes all instances of 'value' from 'lst' and returns the new length of the list. while value in lst: lst.remove(value) return len(lst)"},{"question":"Write a python function to remove all leading as well as trailing whitespaces from a string using Python's built-in string methods.","solution":"def remove_whitespaces(s): Returns the string \`s\` with leading and trailing whitespaces removed. return s.strip()"},{"question":"Write a python function to reverse a string [\`def reverse_string(s)\`].","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Write a python function to generate a Fibonacci sequence up to the n-th term. The function should include the term limit and the sequence should include indices from 1 to n.","solution":"def fibonacci_sequence(n): Generate a Fibonacci sequence up to the n-th term (inclusive). The sequence starts with index 1. :param n: The number of terms in the Fibonacci sequence. :return: A list containing the Fibonacci sequence up to the n-th term. sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(b) a, b = b, a + b return sequence"},{"question":"Write a python function to remove enclosing parentheses in a string. For example, the function should remove the parentheses enclosing \\"Hello\\" in the string \\"(Hello)\\" but leave alone \\"apple\\" in the string \\"(apple)\\". However, it should be able to handle any string that only contains letters and parentheses.","solution":"def remove_enclosing_parentheses(s): Removes the enclosing parentheses from a string if they exist. if s.startswith('(') and s.endswith(')'): return s[1:-1] return s"},{"question":"Write a python function to calculate the sum of the numerator and denominator of a given fraction, while keeping the fraction in its simplest form. The input will be a string representing the fraction, in the format \\"numerator/denominator\\". The function should return the sum of the numerator and the denominator.","solution":"from fractions import Fraction def sum_of_simplified_fraction(fraction_str): Returns the sum of the numerator and denominator of the given fraction when it is in its simplest form. Args: fraction_str (str): The fraction in the format \\"numerator/denominator\\". Returns: int: The sum of the numerator and denominator in simplest form. fr = Fraction(fraction_str) return fr.numerator + fr.denominator"},{"question":"Write a python function to find the closest value to a target number from a list of integers.","solution":"def closest_value(nums, target): Find the closest value to the target from a list of integers. :param nums: List of integers :param target: Target integer :return: Integer closest to the target if not nums: raise ValueError(\\"List of numbers must not be empty\\") closest = nums[0] for num in nums: if abs(num - target) < abs(closest - target): closest = num return closest"},{"question":"Write a python function to reverse a string. What is the time complexity of this function?","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] # The time complexity of this function is O(n) where n is the length of the input string."},{"question":"Write a python function to check if a given string is a palindrome. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" is a palindrome because \\"madam\\" reads the same backward as forward, despite the difference in casing. To make the function case-insensitive, convert the string to lower case before checking. Additionally, your function should ignore all non-alphanumeric characters. Here is an example input \\"A man, a plan, a canal: Panama\\". Your function should ignore the commas and spaces, and it should return True since \\"amanaplanacanalpanama\\" is a palindrome.","solution":"def is_palindrome(s): Check if the given string is a palindrome. The function converts the string to lower case and ignores all non-alphanumeric characters. clean_s = ''.join(char.lower() for char in s if char.isalnum()) return clean_s == clean_s[::-1]"},{"question":"Write a python function to print \\"Hello, World!\\" and then call a second function from the first function that prints \\"Goodbye, World!\\".","solution":"def print_hello(): Prints 'Hello, World!' and calls the print_goodbye function. print(\\"Hello, World!\\") print_goodbye() def print_goodbye(): Prints 'Goodbye, World!'. print(\\"Goodbye, World!\\")"},{"question":"Write a python function to find the mode of a given list of numbers. If there are multiple modes, return them in increasing order.","solution":"from collections import Counter def find_mode(numbers): Returns the mode(s) of a given list of numbers. If there are multiple modes, they are returned in increasing order. if not numbers: return [] counter = Counter(numbers) max_count = max(counter.values()) modes = [num for num, count in counter.items() if count == max_count] return sorted(modes)"},{"question":"Write a python function to calculate the sum of all numbers in a list, excluding any numbers that are divisible by 3 or 5.","solution":"def sum_excluding_divisibles(numbers): Returns the sum of all numbers in the input list, excluding any numbers that are divisible by 3 or 5. :param numbers: List of integers :return: Integer sum of numbers not divisible by 3 or 5 return sum(n for n in numbers if n % 3 != 0 and n % 5 != 0)"},{"question":"Write a python function to find the minimum k numbers from an array. The function should return these k numbers in ascending order.","solution":"def find_min_k_numbers(arr, k): Returns the minimum k numbers from the array in ascending order. :param arr: List of numbers. :param k: Number of minimum elements to return. :return: List of minimum k numbers in ascending order. if k <= 0: return [] sorted_arr = sorted(arr) return sorted_arr[:k]"},{"question":"Write a python function to find the \\"next greater element\\" for each element in a given list. The \\"next greater element\\" for a particular element in the list is the first element in the list that is greater than the current element, moving from left to right. If no such element exists for an element in the list, return -1 for that element.","solution":"def next_greater_element(nums): Returns a list of the \\"next greater element\\" for each element in the given list. If no such element exists for an element, return -1 for that element. n = len(nums) result = [-1] * n stack = [] for i in range(n): while stack and nums[stack[-1]] < nums[i]: idx = stack.pop() result[idx] = nums[i] stack.append(i) return result"},{"question":"Write a python function to calculate the Fibonacci sequence up to a given number n. You can assume that n will always be a non-negative integer.","solution":"def fibonacci(n): Returns a list of Fibonacci sequence up to the given number n. Parameters: n (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence"},{"question":"Write a python function to swap two elements in a list. The indices of the elements to be swapped must be provided as arguments to the function. Ensure the function does not return anything, but modifies the list in place.","solution":"def swap_elements(lst, idx1, idx2): Swaps two elements in a list given their indices. Modifies the list in place and does not return anything. Args: lst (list): The list in which to swap elements. idx1 (int): The index of the first element. idx2 (int): The index of the second element. if idx1 >= len(lst) or idx2 >= len(lst): raise IndexError(\\"Index out of range\\") lst[idx1], lst[idx2] = lst[idx2], lst[idx1]"},{"question":"Write a python function to find the most repeated word in a sentence.","solution":"from collections import Counter import re def most_repeated_word(sentence): Finds the most repeated word in a sentence. If there is a tie, return any one of the most repeated words. words = re.findall(r'bw+b', sentence.lower()) if not words: return None word_counts = Counter(words) most_common = word_counts.most_common(1) return most_common[0][0] if most_common else None"},{"question":"Write a python function to convert string to a list using list comprehension.","solution":"def string_to_list(s): Converts a string to a list of its characters. return [char for char in s]"},{"question":"Write a python function to print out the Nth Fibonacci number in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.","solution":"def nth_fibonacci(n): Returns the Nth Fibonacci number. :param n: Non-negative integer representing the position in the Fibonacci sequence. :return: The Nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the largest palindrome in a given string using dynamic programming.","solution":"def longest_palindrome(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" n = len(s) dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 for i in range(n): dp[i][i] = True for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2: dp[i][j] = True else: dp[i][j] = dp[i + 1][j - 1] if dp[i][j] and length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"Write a python function to reverse an integer without using any built-in functions or libraries. The function should handle positive, negative, and zero valued integers.","solution":"def reverse_integer(n): Returns the reversed integer of n. sign = -1 if n < 0 else 1 n *= sign reversed_num = 0 while n != 0: reversed_num = reversed_num * 10 + n % 10 n //= 10 return sign * reversed_num"},{"question":"Write a python function to find the most frequently occurring character in a string. If there are multiple characters with the same highest frequency, return the one that appears first in the string.","solution":"def most_frequent_character(s): Returns the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, returns the one that appears first in the string. character_count = {} max_count = 0 most_frequent_char = '' for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 if character_count[char] > max_count: max_count = character_count[char] most_frequent_char = char elif character_count[char] == max_count: continue return most_frequent_char"},{"question":"Write a python function to calculate the total surface area of a rectangular prism. The function should take three arguments: the length, width, and height of the rectangular prism, and return the calculated surface area.","solution":"def surface_area_rect_prism(length, width, height): Calculate and return the total surface area of a rectangular prism. The formula for the surface area of a rectangular prism is: A = 2lw + 2lh + 2wh where l is the length, w is the width, and h is the height. return 2 * (length * width + length * height + width * height)"},{"question":"Write a python function to rearrange the words in a paragraph of text in descending order of the frequency of their appearance.","solution":"from collections import Counter import re def rearrange_words_by_frequency(paragraph): Rearranges the words in a paragraph in descending order of frequency. :param paragraph: A string containing the paragraph of text. :return: A string with words rearranged in descending order of frequency. # Remove punctuation and convert to lower case words = re.findall(r'bw+b', paragraph.lower()) # Count word frequencies word_counts = Counter(words) # Sort words by frequency in descending order sorted_words = sorted(word_counts, key=lambda x: (-word_counts[x], x)) # Reconstruct the paragraph with sorted words sorted_paragraph = ' '.join(sorted_words) return sorted_paragraph"},{"question":"Write a python function to remove duplicates from a list '{1,2,3,2,1}' and return the list without duplicates.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list and returns a list without duplicates. return list(set(input_list))"},{"question":"Write a python function to sort a list of integers in ascending order without using in-built sort functions. Implement the function using Bubble Sort algorithm.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the Bubble Sort algorithm. :param arr: List of integers to be sorted. :return: Sorted list of integers. n = len(arr) for i in range(n): # Flag to detect if any swapping happened in the inner loop swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: # Swap the elements arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no swapping happened, array is already sorted if not swapped: break return arr"},{"question":"Write a python function to find the minimum element in a sorted and rotated array. A sorted and rotated array is an array that has been sorted in ascending order and then rotated some number of times. For example, the array \`[0,1,2,4,5,6,7]\` might become \`[4,5,6,7,0,1,2]\` when rotated 3 times.","solution":"def find_min_in_rotated_sorted_array(arr): This function returns the minimum element in a sorted and rotated array. Parameters: arr (list): A list of integers which is a sorted and rotated array. Returns: int: The minimum element in the array. if len(arr) == 1: return arr[0] left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"Write a python function to replace a string with another string.","solution":"def replace_string(original_string, target_string, replacement_string): Replaces all occurrences of target_string in original_string with replacement_string. return original_string.replace(target_string, replacement_string)"},{"question":"Write a python function to calculate the factorial of a given number using recursion. Then, provide a way to test this function with various test cases to ensure it works correctly.","solution":"def factorial(n): Returns the factorial of a given number using recursion. :param n: An integer for which to compute the factorial :return: The factorial of the number n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to reverse a given string. The function should handle cases where the input string is empty and return an empty string in that case.","solution":"def reverse_string(s): Returns the reverse of the given string s. If s is empty, returns an empty string. return s[::-1]"},{"question":"Write a python function to check if a binary tree is a binary search tree (BST). A binary sea","solution":"class TreeNode: A TreeNode class that represents each node in a binary tree. def __init__(self, key): self.left = None self.right = None self.key = key def is_bst(node, left=float('-inf'), right=float('inf')): Checks if a binary tree is a binary search tree (BST). Args: node (TreeNode): the root node of the binary tree. left (int/float): the lower bound for node key. right (int/float): the upper bound for node key. Returns: bool: True if the binary tree is a binary search tree, False otherwise. if node is None: return True if not (left < node.key < right): return False return (is_bst(node.left, left, node.key) and is_bst(node.right, node.key, right))"},{"question":"Write a python function to calculate the sum of all even numbers in a list of integers \`nums\`.","solution":"def sum_even_numbers(nums): Returns the sum of all even numbers in the list of integers nums. return sum(num for num in nums if num % 2 == 0)"},{"question":"Write a python function to find the sum of all the multiples of 3 or 5 below a given maximum number (exclusive).","solution":"def sum_of_multiples(max_num): Returns the sum of all the multiples of 3 or 5 below the given maximum number. return sum(num for num in range(max_num) if num % 3 == 0 or num % 5 == 0)"},{"question":"Write a python function to get the most recent date in a list of dates. The dates are in the format 'YYYY-MM-DD' and the list may contain at least one and up to 1000 dates.","solution":"from datetime import datetime def get_most_recent_date(dates): Returns the most recent date from a list of date strings in the format 'YYYY-MM-DD'. date_objects = [datetime.strptime(date, '%Y-%m-%d') for date in dates] most_recent_date = max(date_objects) return most_recent_date.strftime('%Y-%m-%d')"},{"question":"Write a python function to reverse the input string. After reversing the string, convert it to uppercase. The function should return the converted string.","solution":"def reverse_and_uppercase(s): Reverses the input string and converts it to uppercase. Args: s (str): The input string to be reversed and converted to uppercase. Returns: str: The reversed and uppercase converted string. return s[::-1].upper()"},{"question":"Write a python function to find the minimum element in a list using a custom comparison function, and also return the index of the minimum element.","solution":"from typing import List, Callable, Tuple def find_min_element(arr: List[int], compare: Callable[[int, int], bool]) -> Tuple[int, int]: Returns the minimum element in a list and its index, using a custom comparison function. Parameters: arr (List[int]): List of integers. compare (Callable[[int, int], bool]): A comparison function that returns True if first argument is 'less' than the second. Returns: Tuple[int, int]: A tuple containing the minimum element and its index. if not arr: raise ValueError(\\"The input list is empty.\\") min_element = arr[0] min_index = 0 for i in range(1, len(arr)): if compare(arr[i], min_element): min_element = arr[i] min_index = i return min_element, min_index # Example of a comparison function def less_than(a: int, b: int) -> bool: Returns True if a is less than b. return a < b"},{"question":"Write a python function to find the number of prime numbers up to a given limit.","solution":"def count_primes(limit): Returns the number of prime numbers up to the given limit. if limit < 2: return 0 is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(limit**0.5) + 1): if is_prime[i]: for j in range(i*i, limit + 1, i): is_prime[j] = False return sum(is_prime)"},{"question":"Write a python function to generate a 5x5 grid of random numbers and then find the maximum and minimum numbers in the grid.","solution":"import random def generate_grid_and_find_extremes(): Generates a 5x5 grid of random integers between 1 and 100, and finds the maximum and minimum numbers in the grid. Returns the grid, the maximum number, and the minimum number. grid = [[random.randint(1, 100) for _ in range(5)] for _ in range(5)] # Flatten the grid to find max and min easily flattened_grid = [num for row in grid for num in row] max_num = max(flattened_grid) min_num = min(flattened_grid) return grid, max_num, min_num"},{"question":"Write a python function to find the sum of all prime numbers up to a given number \`n\`. The function should be efficient in terms of both speed and space usage.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers up to and including n. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n + 1, i): sieve[j] = False return sum(i for i, prime in enumerate(sieve) if prime)"},{"question":"Write a python function to find the maximum subarray sum. The solution should have a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within a one-dimensional numeric array. The solution is implemented with a time complexity of O(n) using Kadane's Algorithm. if not nums: # handle empty list case return 0 max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to count the number of lucky triples in a list. A lucky triple is defined as a sequence of three numbers (a[i], a[j], a[k]) where i < j < k and a[i] divides a[j] and a[j] divides a[k].","solution":"def count_lucky_triples(arr): Returns the number of lucky triples in the list arr. A lucky triple is defined as a sequence of three numbers (a[i], a[j], a[k]) where i < j < k and a[i] divides a[j] and a[j] divides a[k]. if len(arr) < 3: return 0 count = 0 # An array to store the number of pairs (a[i], a[j]) where arr[i] divides arr[j] # for each j pairs = [0] * len(arr) for k in range(len(arr)): for j in range(k): if arr[k] % arr[j] == 0: pairs[k] += 1 count += pairs[j] return count"},{"question":"Write a python function to implement a stack data structure and demonstrate its operations (push, pop, peek).","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.is_empty(): return self.items.pop() else: return None def peek(self): if not self.is_empty(): return self.items[-1] else: return None def is_empty(self): return len(self.items) == 0 def size(self): return len(self.items)"},{"question":"Write a python function to solve the two sum problem: Given an array of integers \`nums\` and an integer \`target\`, return indices of the two numbers such that they add up to \`target\`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: list of int: Indices of the two numbers. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"Write a python function to check if a list is circular or not. In a circular list, the last element is linked with the first element.","solution":"def is_circular(lst): Returns True if the list is circular, otherwise False. A circular list reconnects its last element to the first element. if not lst: # An empty list is not circular by this definition return False # Check if the last element links to the first element return lst[-1] == lst[0]"},{"question":"Write a python function to solve a recaptcha-like puzzle where the user needs to input a number that when added to a secret number, the sum modulo a given number (N) equals 0. For instance, if N is 100 and the secret number is 37, the user should input a number that, when added to 37 and taken modulo 100, equals 0. How can I solve this problem?","solution":"def solve_recaptcha(secret_number, N): Solves the recaptcha-like puzzle by finding the number to add to the secret_number so that the sum modulo N equals 0. :param secret_number: The secret number in the puzzle. :param N: The modulus. :return: The number to add to the secret_number to satisfy the condition. return (N - secret_number % N) % N"},{"question":"Write a python function to remove all occurrences of 'a' from a given string.","solution":"def remove_a(s): Removes all occurrences of 'a' from the given string. Parameters: s (str): The input string. Returns: str: The string with all occurrences of 'a' removed. return s.replace('a', '')"},{"question":"Write a python function to calculate the sum of elements in an array. The function should take an array as an input and return the sum of its elements.","solution":"def array_sum(arr): Returns the sum of elements in the array arr. Assumes arr is an iterable of numbers. Parameters: arr (iterable): A list or other iterable containing numbers. Returns: int or float: The sum of the elements in arr. return sum(arr)"},{"question":"Write a python function to print the values of a list using list comprehension.","solution":"def print_list_values(lst): Returns the values of the list using list comprehension. return [value for value in lst]"},{"question":"Write a python function to check if a string contains only numeric characters. You can use any built-in function you think is suitable.","solution":"def is_numeric(s): Check if the string s contains only numeric characters. :param s: input string :return: True if s contains only numeric characters, otherwise False return s.isdigit()"},{"question":"Write a python function to extract the list of files from a directory, and return the list of file names excluding the path.","solution":"import os def list_files(directory): Returns a list of file names (excluding the path) in the given directory. try: return [file for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file))] except FileNotFoundError: return []"},{"question":"Write a python function to find the index of the smallest even number in a list of integers. If there are no even numbers in the list, return -1.","solution":"def smallest_even_index(nums): Finds the index of the smallest even number in a list of integers. Returns -1 if there are no even numbers in the list. Args: nums (list of int): List of integers. Returns: int: Index of the smallest even number or -1 if no even number is present. smallest_index = -1 smallest_even = float('inf') for i, num in enumerate(nums): if num % 2 == 0 and num < smallest_even: smallest_even = num smallest_index = i return smallest_index"},{"question":"Write a python function to calculate the total number of non-empty substrings of a given string that are palindromes. A palindrome is a string that reads the same backward as forward.","solution":"def count_palindromic_substrings(s): Returns the total number of non-empty substrings of a given string that are palindromes. :param s: Input string :type s: str :rtype: int def is_palindrome(sub): return sub == sub[::-1] n = len(s) count = 0 for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"Write a python function to find the largest number in a list of numbers. Also, provide a piece of advice on how to use the \`try-except\` block effectively to handle exceptions in this function.","solution":"def find_largest(numbers): Returns the largest number in a list of numbers. try: if not numbers: raise ValueError(\\"The list is empty\\") largest = numbers[0] for number in numbers[1:]: if number > largest: largest = number return largest except TypeError: raise TypeError(\\"All items in the list must be numbers\\") # Advice on using try-except block: # 1. Use specific exception types (like ValueError or TypeError) rather than a general exception. # 2. Add meaningful error messages to make it easier to understand what went wrong. # 3. Ensure the try block contains only the code that might throw an error. # 4. Avoid using too many try-except blocks that can overcomplicate the code and decrease performance."},{"question":"Write a python function to find the maximum sum of a non-empty subarray of an array of integers. For example, given the array [-2, 1, -3, 4, -1, 2, 1, -5, 4], what is the maximum sum of a non-empty subarray?","solution":"def max_subarray_sum(nums): Finds the maximum sum of a non-empty subarray within the given list of integers. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to add two numbers. You should also write a test case to check if your function works correctly.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a python function to find the factorial of a given number using recursion. Recursion is when a function calls itself directly or indirectly.","solution":"def factorial(n): Returns the factorial of the given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n in [0, 1]: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to find the nth Fibonacci number using recursion. The function should call itself to calculate the previous two Fibonacci numbers until it reaches the base cases where n is either 0 or 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to identify if a given binary tree is Symmetric (mirrored symmetry).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_mirror(left, right): if left is None and right is None: return True if left is None or right is None: return False return (left.val == right.val and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)) def is_symmetric(root): Determine if a binary tree is symmetric. if root is None: return True return is_mirror(root.left, root.right)"},{"question":"Write a python function to convert the first character of a sentence to uppercase.","solution":"def capitalize_sentence(sentence): Converts the first character of the sentence to uppercase. if not sentence: return sentence return sentence[0].upper() + sentence[1:]"},{"question":"Write a python function to sort an array of integers in ascending order without using any sorting algorithms. How can this be achieved using only swapping operations?","solution":"def sort_array_via_swapping(arr): Sorts an array of integers in ascending order using only swapping operations. n = len(arr) # Bubble sort algorithm that uses only swapping for sorting for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swapping elements arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to find the minimum number of coins that can be used to make a given sum 'N'. The function should take two parameters: a list of coin denominations and the total amount 'N'. The function should return the minimum number of coins needed to make 'N'. If it's not possible to make 'N' with the given coins, the function should return -1.","solution":"def min_coins(coin_denominations, N): Finds the minimum number of coins needed to make the amount N. Parameters: coin_denominations (list): List of coin denominations. N (int): The target amount. Returns: int: Minimum number of coins needed to make the amount N. If it's not possible to make the amount, returns -1. # Initialize a list to store the minimum coins needed for each amount from 0 to N dp = [float('inf')] * (N + 1) dp[0] = 0 # Base case: 0 coins needed to make the amount 0 # Compute the minimum coins needed for each amount up to N for coin in coin_denominations: for amount in range(coin, N + 1): dp[amount] = min(dp[amount], dp[amount - coin] + 1) return dp[N] if dp[N] != float('inf') else -1"},{"question":"Write a python function to search a target value in a sorted array. The array may contain duplicate elements. The function should return the index of the first occurrence of the target value. If the target value is not found, return -1.","solution":"def search_first_occurrence(nums, target): Returns the index of the first occurrence of the target value in a sorted array. If the target is not found, return -1. left, right = 0, len(nums) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if nums[mid] < target: left = mid + 1 elif nums[mid] > target: right = mid - 1 else: result = mid right = mid - 1 # Continue to search in the left half return result"},{"question":"Write a python function to convert a string to a unit vector. A unit vector is a vector that has a magnitude of 1. To convert a string representing a vector into a unit vector, first, parse the string to get the coordinates of the vector, then normalize the vector to make its magnitude equal to 1.","solution":"import math def string_to_unit_vector(vector_string): Converts a string representing a vector to a unit vector. Args: vector_string (str): A string representation of the vector, e.g. \\"3,4,5\\". Returns: list: A list of floats representing the unit vector. # Split the string to get the coordinates coordinates = list(map(float, vector_string.split(','))) # Calculate the magnitude of the vector magnitude = math.sqrt(sum(coord ** 2 for coord in coordinates)) # Normalize the vector to convert it to a unit vector unit_vector = [coord / magnitude for coord in coordinates] return unit_vector"},{"question":"Write a python function to calculate the factorial of a number using a generator. The function should yield each intermediate step of the calculation, allowing the user to see the process of computation. Additionally, the function should return the final factorial value.","solution":"def factorial_generator(n): Generator to calculate the factorial of a number, yielding each step. :param n: Integer, the number to calculate the factorial of. :return: Final factorial value after yielding all intermediate steps. factorial = 1 for i in range(1, n + 1): factorial *= i yield factorial return factorial"},{"question":"Write a python function to calculate the factorial of a number. The function should handle large numbers efficiently. Use recursion for the calculation.","solution":"def factorial(n): Calculate the factorial of a number using recursion. This function handles large numbers efficiently. Parameters: n (int): The number to compute the factorial of. Should be non-negative. Returns: int: The factorial of the number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a python function to find the median of a matrix. The matrix can contain both integers and floats. The function should handle cases where the matrix is not necessarily square and can have an even number of elements. The median should be calculated in such a way that all elements are counted in the median determination.","solution":"def find_median(matrix): Finds the median of a matrix containing both integers and floats. Args: - matrix (list of lists): A matrix of integers and/or floats. Returns: - float: The median of the matrix. # Flatten the matrix into a single list elements = [element for row in matrix for element in row] # Sort the list of elements elements.sort() n = len(elements) middle = n // 2 if n % 2 == 0: # If even number of elements, average the two middle elements median = (elements[middle - 1] + elements[middle]) / 2.0 else: # If odd number of elements, the middle element is the median median = elements[middle] return median"},{"question":"Write a python function to initialize and fill a 3D array with zeros. The dimensions of the 3D array should be specified as arguments to the function. The function should return the initialized 3D array.","solution":"def initialize_3d_array(x, y, z): Initialize and fill a 3D array with zeros. Parameters: x (int): The size of the first dimension. y (int): The size of the second dimension. z (int): The size of the third dimension. Returns: list: A 3D list filled with zeros. if x <= 0 or y <= 0 or z <= 0: raise ValueError(\\"Dimensions must be positive integers.\\") return [[[0 for _ in range(z)] for _ in range(y)] for _ in range(x)]"},{"question":"Write a python function to generate all possible subsets of a given set of elements, including the empty set and the set itself.","solution":"from typing import List def generate_subsets(s: List[int]) -> List[List[int]]: Generate all possible subsets of a given set of elements. Parameters: s (List[int]): The list of elements to generate subsets from. Returns: List[List[int]]: A list of all subsets. result = [[]] # Initialize with the empty subset for element in s: # For each element in the set, add it to all existing subsets result += [current + [element] for current in result] return result"},{"question":"Write a python function to find the maximum sum of three numbers from a list that can be obtained by adding three numbers from three distinct sub-arrays of a given array.","solution":"def max_sum_three_distinct_subarrays(arr): n = len(arr) if n < 3: return \\"Array should have at least 3 elements\\" max_sum = float('-inf') for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): curr_sum = arr[i] + arr[j] + arr[k] if curr_sum > max_sum: max_sum = curr_sum return max_sum"},{"question":"Write a python function to find the maximum length of a valid sequence","solution":"def max_length_valid_parentheses(s): Returns the maximum length of a valid parentheses substring. stack = [] max_length = 0 last_invalid = -1 for i, char in enumerate(s): if char == '(': stack.append(i) else: # char == ')' if not stack: last_invalid = i else: stack.pop() if not stack: max_length = max(max_length, i - last_invalid) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Write a python function to check if a given string is a Palindrome. Also, count the number of alphabetic characters only in the string.","solution":"def is_palindrome(s): Check if a given string s is a palindrome and count the number of alphabetic characters. Parameters: s (str): The input string to check and count alphabetic characters. Returns: tuple: A tuple containing a boolean indicating if the string is a palindrome and an integer representing the number of alphabetic characters in the string. # Remove non-alphabetic characters and convert to lowercase filtered_str = ''.join(filter(str.isalpha, s)).lower() # Check if the filtered string is a palindrome is_palind = filtered_str == filtered_str[::-1] # Count the number of alphabetic characters in the original string alpha_count = sum(c.isalpha() for c in s) return is_palind, alpha_count"},{"question":"Write a python function to generate the power set of a given set. The power set of a set is the set of all subsets of the set, including the empty set and the set itself.","solution":"def power_set(s): Generate the power set of a given set s. :param s: A set of elements :return: A list of sets representing the power set of s s = list(s) power_set_list = [] total_subsets = 2 ** len(s) for i in range(total_subsets): subset = {s[j] for j in range(len(s)) if (i & (1 << j)) > 0} power_set_list.append(subset) return power_set_list"},{"question":"Write a python function to evaluate a polynomials at a specific point \`x\`. The polynomial is given by the coefficients in a list \`a_0, ..., a_n\`, where \`a_n * x^n + a_(n-1) * x^(n-1) + ... + a_1 * x + a_0\`. The list \`a_0\` represents the constant term, and \`a_n\` represents the coefficient of the highest degree term. For example, if \`a_0\` = \`[1, 2, 3, 4]\`, the polynomial is \`1 + 2x + 3x^2 + 4x^3\`.","solution":"def evaluate_polynomial(coefficients, x): Evaluates the polynomial at the given point x. Parameters: coefficients (list): The polynomial coefficients in increasing order of degree. x (int or float): The value at which to evaluate the polynomial. Returns: result (int or float): The evaluated polynomial value. result = 0 for degree, coef in enumerate(coefficients): result += coef * (x ** degree) return result"},{"question":"Write a python function to find the maximum profit that can be generated by buying and selling stocks on different days. You may complete as many transactions as you like, but you need to buy one stock before you can sell it. Assuming you have the prices of the stock in a list, where prices[i] is the stock price on day i.","solution":"def max_profit(prices): Returns the maximum profit that can be generated by multiple buying and selling of stocks. :param prices: List of stock prices where prices[i] is the stock price on day i. :type prices: list of int :return: Maximum profit :rtype: int if not prices: return 0 profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1] return profit"},{"question":"Write a python function to parse and extract data from an xml document using ElementTree.","solution":"import xml.etree.ElementTree as ET def parse_xml(xml_str): Parses an XML string and extracts data from it. Parameters: xml_str (str): The XML string to parse. Returns: dict: A dictionary containing the tag names and their text content. tree = ET.ElementTree(ET.fromstring(xml_str)) root = tree.getroot() result = {root.tag: {}} # Recursive function to parse the XML def parse_element(element, parent_dict): for child in element: if len(child) > 0: parent_dict[child.tag] = {} parse_element(child, parent_dict[child.tag]) else: parent_dict[child.tag] = child.text parse_element(root, result[root.tag]) return result"},{"question":"Write a python function to print numbers in a cone shape.","solution":"def print_cone(n): Prints numbers in a cone shape where n is the height of the cone. Each level i of the cone contains numbers from 1 to i. # Iterate through rows for i in range(1, n+1): # Print leading spaces for pyramid alignment print(' ' * (n - i), end='') # Print numbers from 1 to i for j in range(1, i+1): print(j, end=' ') # Move to the next line after each row print()"},{"question":"Write a python function to find all pairs of integers in an array that add up to a given number \`k\`.","solution":"def find_pairs_with_sum(arr, k): Returns a list of pairs of integers from the array \`arr\` that add up to the number \`k\`. Each pair is represented as a tuple (a, b) and each pair (a, b) and (b, a) should be considered identical. seen = set() pairs = set() for number in arr: target = k - number if target in seen: pairs.add((min(number, target), max(number, target))) seen.add(number) return list(pairs)"},{"question":"Write a python function to find the shortest path in a graph using Dijkstra's algorithm. The graph will be represented as an adjacency list and the function should return the shortest path from the source node to all other nodes.","solution":"import heapq def dijkstra(graph, start): Finds the shortest path in a graph using Dijkstra's algorithm. Parameters: graph (dict): The graph represented as an adjacency list. Keys are node names and values are lists of tuples (neighbor, weight). start: The starting node for the shortest path calculation. Returns: dict: A dictionary with the shortest path cost from the start node to each other node. # Priority queue queue = [(0, start)] # Dictionary to store the shortest path to each node distances = {node: float('inf') for node in graph} distances[start] = 0 # Set to track visited nodes visited = set() while queue: current_distance, current_node = heapq.heappop(queue) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances"},{"question":"Write a python function to find the second smallest number in an array of integers. The function should handle the case where the array has less than two unique numbers. In such cases, the function should return None.","solution":"def second_smallest(arr): Returns the second smallest number in the array. If there are less than two unique numbers, return None. unique_numbers = sorted(set(arr)) if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Write a python function to find the intersection of two lists, and return the result in a list.","solution":"def intersection(lst1, lst2): Returns the intersection of two lists as a new list. return [item for item in lst1 if item in lst2]"},{"question":"Write a python function to calculate the cumulative sum of an array. The cumulative sum is the sum of elements up to a certain index in the array.","solution":"def cumulative_sum(arr): Returns the cumulative sum of the array. Parameters: arr (list): A list of numbers. Returns: list: A list where the ith element is the sum of the first i+1 elements of the input list. cum_sum = [] current_sum = 0 for num in arr: current_sum += num cum_sum.append(current_sum) return cum_sum"},{"question":"Write a python function to rotate a 2D array by 90 degrees clockwise. The function should take a 2D array as input and return the rotated array.","solution":"def rotate_2d_array_clockwise(matrix): Rotates a 2D array (matrix) by 90 degrees clockwise. Args: matrix (list of list of int): A 2D array of integers. Returns: list of list of int: The rotated 2D array. if not matrix or not matrix[0]: return [] num_rows = len(matrix) num_cols = len(matrix[0]) # Create a new matrix for the result with swapped dimensions rotated_matrix = [[0] * num_rows for _ in range(num_cols)] for r in range(num_rows): for c in range(num_cols): rotated_matrix[c][num_rows - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"Write a python function to implement a basic calculator that can perform addition, subtraction, multiplication, and division operations. The calculator should take a list of tuples as input, where each tuple represents an operation. The first element of the tuple is the operation ('+', '-', '*', '/'), and the next two elements are the operands. The function should return the result of the operations in the order they are provided.","solution":"def basic_calculator(operations): Performs the given operations in the order they are provided. Parameters: operations (list): A list of tuples, where each tuple contains an operation ('+', '-', '*', '/') and two operands. Returns: list: A list of results corresponding to each operation. results = [] for operation in operations: if len(operation) != 3: raise ValueError(\\"Each operation must be a tuple of length 3\\") op, a, b = operation if op == '+': results.append(a + b) elif op == '-': results.append(a - b) elif op == '*': results.append(a * b) elif op == '/': if b == 0: raise ValueError(\\"Division by zero is not allowed\\") results.append(a / b) else: raise ValueError(f\\"Unsupported operation: {op}\\") return results"},{"question":"Write a python function to generate the Fibonacci sequence up to the nth term using an iterative approach.","solution":"def fibonacci(n): Generates the Fibonacci sequence up to the nth term using an iterative approach. Args: n (int): The number of terms in the Fibonacci sequence to generate. Returns: List[int]: The Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to find the length of the longest subarray consisting of consecutive integers in a given array of integers.","solution":"def longest_consecutive_subarray(arr): Find the length of the longest subarray consisting of consecutive integers. :param arr: List of integers. :return: Length of the longest subarray with consecutive integers. if not arr: return 0 arr.sort() max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1] + 1: current_length += 1 elif arr[i] != arr[i-1]: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Write a python function to return anagrams of a given word.","solution":"def get_anagrams(word): Returns a list of anagrams for the given word. :param word: The word to find anagrams of. :type word: str :return: List of anagrams of the word. :rtype: list from itertools import permutations # Create permutations of the word and store them as a set to avoid duplicates anagrams_set = set([''.join(p) for p in permutations(word)]) # Convert the set back to a list anagrams_list = list(anagrams_set) return anagrams_list"},{"question":"Write a python function to find the element that appears only once in an array where every other element appears exactly twice. How can we efficiently solve this problem using bit manipulation?","solution":"def find_single_element(nums): Returns the element that appears only once in an array where every other element appears exactly twice. Uses bit manipulation to achieve efficient solution. :param nums: List of integers where every element appears twice except for one. :return: The single element that appears only once. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"Write a python function to play a simple \\"rock, paper, scissors\\" game against the computer. The computer's choice should be randomly generated. The function should take the user's input as a string (either \\"rock\\", \\"paper\\", or \\"scissors\\") and return the result of the game as a string (either \\"Rock wins!\\", \\"Paper wins!\\", \\"Scissors wins!\\", or \\"It's a tie!\\").","solution":"import random def rock_paper_scissors(user_choice): Play rock, paper, scissors game. Args: user_choice (str): 'rock', 'paper', or 'scissors'. Returns: str: the result of the game. choices = ['rock', 'paper', 'scissors'] computer_choice = random.choice(choices) if user_choice == computer_choice: return \\"It's a tie!\\" if user_choice == 'rock': if computer_choice == 'scissors': return \\"Rock wins!\\" else: # computer_choice == 'paper' return \\"Paper wins!\\" if user_choice == 'paper': if computer_choice == 'rock': return \\"Paper wins!\\" else: # computer_choice == 'scissors' return \\"Scissors wins!\\" if user_choice == 'scissors': if computer_choice == 'paper': return \\"Scissors wins!\\" else: # computer_choice == 'rock' return \\"Rock wins!\\""},{"question":"Write a python function to find the largest product of three numbers in a list. The list can contain both positive and negative numbers. For example, in the list [2, 3, -2, 4, -5], the largest product of three numbers is 24 (from the product 2*3*-5).","solution":"def largest_product_of_three(nums): Returns the largest product of three numbers in the list. if len(nums) < 3: raise ValueError(\\"The input list must contain at least three numbers.\\") nums.sort() # The maximum product can be either from the three largest numbers # or from the two smallest (most negative) numbers and the largest number. return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])"},{"question":"Write a python function to count the number of times a given word appears in a list of words. The function should be case-insensitive and consider 'word' and 'Word' as the same word.","solution":"def count_word_occurrences(word_list, target_word): Counts the number of times the target_word appears in the word_list. Parameters: word_list (list): List of words (strings). target_word (string): The word to count occurrences for. Returns: int: Number of occurrences of target_word in word_list. normalized_target_word = target_word.lower() count = sum(1 for word in word_list if word.lower() == normalized_target_word) return count"},{"question":"Write a python function to calculate the number of odd digits in a given list of integers.","solution":"def count_odd_digits(numbers): Returns the count of odd digits in the given list of integers. :param numbers: List of integers :return: Count of odd digits odd_count = 0 for number in numbers: for digit in str(abs(number)): if int(digit) % 2 != 0: odd_count += 1 return odd_count"},{"question":"Write a python function to solve the problem of finding the maximum number of non-overlapping rectangles that can be placed on a given grid without overlapping each other. The grid is represented as a 2D list of integers, where each integer represents the height of the rectangle at that point. The function should return the total number of non-overlapping rectangles that can be placed on the grid.","solution":"def max_non_overlapping_rectangles(grid): Find the maximum number of non-overlapping rectangles that can be placed on a given grid. Parameters: grid (List[List[int]]): A 2D list of integers representing the grid. Returns: int: The total number of non-overlapping rectangles that can be placed on the grid. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) def mark_rectangles(x, y): width, height = 1, 1 while x + width < rows and grid[x + width][y] == 1: width += 1 while y + height < cols and grid[x][y + height] == 1: height += 1 for i in range(width): for j in range(height): grid[x + i][y + j] = -1 count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == 1: mark_rectangles(i, j) count += 1 return count"},{"question":"Write a python function to count the number of pairs in an array where the sum is equal to a target value. The function should take two arguments: a list of integers and the target sum. The function should return the count of such pairs.","solution":"def count_pairs_with_sum(nums, target): Counts the number of pairs in a list where the sum is equal to the target value. :param nums: List of integers :param target: Target sum value :return: Count of pairs that sum to the target count = 0 num_dict = {} for num in nums: complement = target - num if complement in num_dict: count += num_dict[complement] if num in num_dict: num_dict[num] += 1 else: num_dict[num] = 1 return count"},{"question":"Write a python function to calculate the sum of all numbers in a list that are divisible by 3.","solution":"def sum_of_numbers_divisible_by_3(numbers): Returns the sum of all numbers in the list that are divisible by 3. Args: numbers: list of integers Returns: Integer representing the sum of numbers divisible by 3. return sum(num for num in numbers if num % 3 == 0)"},{"question":"Write a python function to check if all the characters in a string are unique. You may not use additional data structures like sets or lists.","solution":"def all_unique_characters(s): Checks if all characters in the string s are unique. :param s: str - The input string to check. :return: bool - True if all characters are unique, False otherwise. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Write a python function to find all prime numbers up to a given number \`n\` and return them as a list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def find_primes(n): Returns a list of all prime numbers up to the given number n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to determine if a number is a triangular number. A triangular number or triangle number counts objects arranged in an equilateral triangle. The nth triangular number is the number of dots in the pattern of dots that make up a triangle with n dots on a side, and is equal to the sum of the n natural numbers from 1 to n. For example, the 3rd triangular number is 6 because 1 + 2 + 3 = 6, and the 4th triangular number is 10 because 1 + 2 + 3 + 4 = 10. Your function should take an integer as input and return a boolean value indicating whether or not the number is triangular.","solution":"import math def is_triangular_number(num): Determine if a number is a triangular number. A triangular number is defined by the formula: T_n = n * (n + 1) / 2. :param num: Integer to check :return: Boolean indicating if the number is triangular if num < 0: return False # Calculate (8 * num + 1) which should be a perfect square for num to be triangular x = 8 * num + 1 root = int(math.sqrt(x)) return root * root == x"},{"question":"Write a python function to find the number of edges in a graph using an adjacency matrix.","solution":"def count_edges(adj_matrix): Calculate the number of edges in a graph represented by an adjacency matrix. :param adj_matrix: List of lists representing the adjacency matrix of the graph :return: Integer number of edges in the graph num_edges = 0 for i in range(len(adj_matrix)): for j in range(i, len(adj_matrix[i])): if adj_matrix[i][j] != 0: num_edges += 1 return num_edges"},{"question":"Write a python function to check if a given string contains any special characters or not. If a string contains only alphanumeric characters (letters and numbers), then it should return \`True\`. If the string contains any special characters, then it should return \`False\`.","solution":"import re def contains_only_alphanumeric(s): Checks if the given string contains only alphanumeric characters. Parameters: s (str): The string to check. Returns: bool: True if the string contains only alphanumeric characters, False otherwise. return re.match(\\"^[a-zA-Z0-9]*\\", s) is not None"},{"question":"Write a python function to convert a string into an integer. The function should start by ignoring any leading whitespace. It should then read the characters until it encounters a non-digit character. This character should then be taken as the end of the number. After reading the number, it should skip any trailing whitespace. It should return the integer value. If no digits were found, it should return 0.","solution":"def string_to_integer(s): Converts a string into an integer, ignoring leading whitespace, reading until a non-digit character is encountered, and ignoring trailing whitespace. Returns the integer value. Returns 0 if no digits are found. i = 0 n = len(s) # Skip leading whitespace while i < n and s[i].isspace(): i += 1 start = i # Read until non-digit character while i < n and s[i].isdigit(): i += 1 if start == i: return 0 number_string = s[start:i] return int(number_string)"},{"question":"Write a python function to check if the parentheses in a string are balanced. Consider an empty string as balanced. For example, the string \\"()\\" is balanced, but \\"(}\\" is not.","solution":"def are_parentheses_balanced(s): Checks if the parentheses in the input string are balanced. Args: s (str): The input string containing parentheses. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] parentheses_map = {')': '('} for char in s: if char == '(': stack.append(char) elif char == ')': if not stack or stack.pop() != parentheses_map[char]: return False return len(stack) == 0"},{"question":"Write a python function to calculate the nth power of a given number using recursion. Here, the number and the power should be provided by the user.","solution":"def power(base, exponent): Returns the base raised to the exponent using recursion. # Base case: any number raised to the power of 0 is 1 if exponent == 0: return 1 # If the exponent is positive, reduce it by 1 in each step if exponent > 0: return base * power(base, exponent - 1) # If the exponent is negative, handle by inverting the base and making the exponent positive if exponent < 0: return 1 / power(base, -exponent)"},{"question":"Write a python function to calculate the sum of numbers within a given range where the sum is divisible by a specified divisor.","solution":"def sum_divisible_by(numbers, start, end, divisor): Returns the sum of numbers within a given range [start, end] that are divisible by the specified divisor. :param numbers: List of integers. :param start: Start index of the range (inclusive). :param end: End index of the range (inclusive). :param divisor: The specified divisor. :return: Sum of numbers within the range that are divisible by the divisor. if start < 0 or end >= len(numbers) or start > end: raise ValueError(\\"Invalid range specified\\") return sum(num for num in numbers[start:end + 1] if num % divisor == 0)"},{"question":"Write a python function to check if a given binary tree is symmetric or not. A binary tree is symmetric if the left subtree and the right subtree are mirror images of each other.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): Checks if a given binary tree is symmetric. :param root: TreeNode, the root node of the binary tree :return: bool, True if the tree is symmetric, False otherwise def is_mirror(t1, t2): if t1 is None and t2 is None: return True if t1 is None or t2 is None: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root, root)"},{"question":"Write a python function to determine if a given string str consists only of the following characters: 'a', 'b', 'c', and 'd'.","solution":"def is_valid_string(s): Check if the given string consists only of the characters 'a', 'b', 'c', and 'd'. Args: s (str): The string to check. Returns: bool: True if the string consists only of 'a', 'b', 'c', and 'd', otherwise False. for char in s: if char not in 'abcd': return False return True"},{"question":"Write a python function to find the longest repeating character substring in a given string. If there are multiple substrings with the same length, return the first one encountered in the string.","solution":"def longest_repeating_char_substring(s): Finds the longest repeating character substring in the given string. Args: s (str): The input string. Returns: str: The longest repeating character substring. if not s: return \\"\\" max_len = 1 current_len = 1 max_char = s[0] current_char = s[0] for i in range(1, len(s)): if s[i] == s[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_char = current_char current_char = s[i] current_len = 1 # Final check for the last sequence if current_len > max_len: max_len = current_len max_char = current_char return max_char * max_len"},{"question":"Write a python function to find the sum of a sublist of numbers in a list. The function should accept three parameters: the list of numbers, the starting index, and the ending index of the sublist. If the starting index is greater than the ending index, the function should return \`None\`.","solution":"def sum_of_sublist(numbers, start_index, end_index): Returns the sum of a sublist defined by the starting and ending indices. If the starting index is greater than the ending index, returns None. if start_index > end_index: return None return sum(numbers[start_index:end_index+1])"},{"question":"Write a python function to calculate the sum of squares of first n natural numbers. The function should use recursion. To make the solution more efficient, store the results of subproblems to avoid redundant calculations. How would you go about implementing this?","solution":"def sum_of_squares(n, memo=None): Returns the sum of squares of the first n natural numbers using recursion and memoization. if memo is None: memo = {} if n in memo: return memo[n] if n == 1: return 1 else: result = n * n + sum_of_squares(n - 1, memo) memo[n] = result return result"},{"question":"Write a python function to swap two numbers using a third variable. Also, explain the code in detail.","solution":"def swap_numbers(a, b): Swaps the values of a and b using a third variable. Parameters: a (int, float): The first number. b (int, float): The second number. Returns: tuple: A tuple containing the swapped values of a and b. # Store the value of a in a temporary variable temp = a # Assign the value of b to a a = b # Assign the value stored in the temporary variable to b b = temp # Return the swapped values as a tuple return a, b"},{"question":"Write a python function to find the smallest positive integer that is a multiple of both 6 and 9.","solution":"def smallest_multiple_of_6_and_9(): Returns the smallest positive integer that is a multiple of both 6 and 9. # The least common multiple (LCM) of 6 and 9 from math import gcd return (6 * 9) // gcd(6, 9)"},{"question":"Write a python function to determine if the application of the Caesar cipher with a specific key to a given text is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def caesar_cipher_is_palindrome(text, key): Determines if the application of the Caesar cipher with a specific key to a given text is a palindrome. Args: text (str): The input text to be encrypted with the Caesar cipher. key (int): The key for the Caesar cipher encryption. Returns: bool: True if the encrypted text is a palindrome; False otherwise. # Helper function to encrypt text using Caesar cipher def encrypt_caesar_cipher(text, key): encrypted_text = [] for char in text: if char.isalpha(): shift = 65 if char.isupper() else 97 encrypted_text.append(chr((ord(char) - shift + key) % 26 + shift)) else: encrypted_text.append(char) return \\"\\".join(encrypted_text) # Helper function to clean the text (remove non-alphabetic characters and make it lower case) def clean_text(text): return ''.join(char.lower() for char in text if char.isalpha()) # Encrypt the text using Caesar cipher encrypted_text = encrypt_caesar_cipher(text, key) # Clean the encrypted text cleaned_text = clean_text(encrypted_text) # Check if the cleaned, encrypted text is a palindrome return cleaned_text == cleaned_text[::-1]"}]`),N={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},j={class:"card-container"},P={key:0,class:"empty-state"},S=["disabled"],L={key:0},z={key:1};function E(i,e,u,c,s,o){const d=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=a=>s.searchQuery=a),placeholder:"Search..."},null,512),[[b,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=a=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),r(y,null,v(o.displayedPoems,(a,p)=>(n(),w(d,{key:p,poem:a},null,8,["poem"]))),128)),o.displayedPoems.length===0?(n(),r("div",P,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),o.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...a)=>o.loadMore&&o.loadMore(...a))},[s.isLoading?(n(),r("span",z,"Loading...")):(n(),r("span",L,"See more"))],8,S)):l("",!0)])}const D=f(N,[["render",E],["__scopeId","data-v-62c8b175"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"guide/6.md","filePath":"guide/6.md"}'),Y={name:"guide/6.md"},B=Object.assign(Y,{setup(i){return(e,u)=>(n(),r("div",null,[x(D)]))}});export{M as __pageData,B as default};
